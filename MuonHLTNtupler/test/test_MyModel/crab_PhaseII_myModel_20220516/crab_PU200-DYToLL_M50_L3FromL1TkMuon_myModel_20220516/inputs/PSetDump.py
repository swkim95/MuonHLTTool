import FWCore.ParameterSet.Config as cms

process = cms.Process("MYHLT")

process.source = cms.Source("PoolSource",
    fileNames = cms.untracked.vstring('/store/mc/Phase2HLTTDRSummer20ReRECOMiniAOD/DYToLL_M-50_TuneCP5_14TeV-pythia8/FEVT/FlatPU0To200_pilot_111X_mcRun4_realistic_T15_v1-v2/30026/83959981-E532-9E46-9C60-6C464C4E9D8F.root'),
    secondaryFileNames = cms.untracked.vstring()
)
process.AODEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    eventAutoFlushCompressedSize = cms.untracked.int32(31457280),
    outputCommands = cms.untracked.vstring( (
        'drop *', 
        'keep ClusterSummary_clusterSummaryProducer_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_gemRecHits_*_*', 
        'keep *_gemSegments_*_*', 
        'keep *_me0RecHits_*_*', 
        'keep *_me0Segments_*_*', 
        'keep *_castorreco_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep HcalUnpackerReport_castorDigis_*_*', 
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*', 
        'keep HcalUnpackerReport_hcalDigis_*_*', 
        'keep *_HGCalRecHit_*_*', 
        'keep recoCaloClusters_hgcalLayerClusters_*_*', 
        'keep *_hgcalLayerClusters_timeLayerCluster_*', 
        'keep *_hgcalLayerClusters_InitialLayerClustersMask_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterHGCal__*', 
        'keep recoCaloClusters_particleFlowSuperClusterHGCal__*', 
        'keep recoSuperClusters_particleFlowSuperClusterHGCalFromMultiCl__*', 
        'keep recoCaloClusters_particleFlowSuperClusterHGCalFromMultiCl__*', 
        'keep recoTracks_GsfGlobalElectronTest_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTracks_electronGsfTracksFromMultiCl_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTracks_ctfPixelLess_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_dedxPixelHarmonic2_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep *_generalTracks_MVAValues_*', 
        'keep *_generalTracks_MVAVals_*', 
        'keep recoCaloJets_ak4CaloJets_*_*', 
        'keep *_ak4CaloJets_rho_*', 
        'keep *_ak4CaloJets_sigma_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep floatedmValueMap_puppi_*_*', 
        'keep *_ak4PFJetsPuppi_*_*', 
        'keep *_ak8PFJetsPuppi_*_*', 
        'keep *_ak8PFJetsPuppiSoftDrop_*_*', 
        'keep recoPFJets_ak4PFJets_*_*', 
        'keep *_ak4PFJets_rho_*', 
        'keep *_ak4PFJets_sigma_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep recoBasicJets_ak5CastorJets_*_*', 
        'keep *_ak5CastorJets_rho_*', 
        'keep *_ak5CastorJets_sigma_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep recoBasicJets_ak7CastorJets_*_*', 
        'keep *_ak7CastorJets_rho_*', 
        'keep *_ak7CastorJets_sigma_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRhoAll_*_*', 
        'keep *_fixedGridRhoFastjetAll_*_*', 
        'keep *_fixedGridRhoFastjetAllTmp_*_*', 
        'keep *_fixedGridRhoFastjetCentral_*_*', 
        'keep *_fixedGridRhoFastjetAllCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*', 
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*', 
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep floatedmValueMap_puppiNoLep_*_*', 
        'keep recoPFMETs_pfMetPuppi_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep recoGlobalHaloData_GlobalHaloData_*_*', 
        'keep recoCSCHaloData_CSCHaloData_*_*', 
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muons_*_*', 
        'keep doubleedmValueMap_muons_muPFMean*_*', 
        'keep doubleedmValueMap_muons_muPFSum*_*', 
        'keep *_muons_muonShowerInformation_*', 
        'keep recoMuonTimeExtraedmValueMap_muons_*_*', 
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*', 
        'keep uintedmValueMap_muons_*_*', 
        'keep *_particleFlow_muons_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfGhostTrackBJetTags_*_*', 
        'keep *_pfCombinedMVAV2BJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*', 
        'keep *_pfCombinedCvsLJetTags_*_*', 
        'keep *_pfCombinedCvsBJetTags_*_*', 
        'keep *_pfChargeBJetTags_*_*', 
        'keep *_pfDeepCSVJetTags_*_*', 
        'keep *_pfDeepCMVAJetTags_*_*', 
        'keep *_pixelClusterTagInfos_*_*', 
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*', 
        'keep recoPFTaus_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauBasicDiscriminators_*_*', 
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*', 
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*', 
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep *_hpsPFTauDiscriminationByMVA6ElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBdR03oldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWdR03oldDMwLT_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep *_offlinePrimaryVerticesWithBS_*_*', 
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep *_offlinePrimaryVertices4D__*', 
        'keep *_offlinePrimaryVertices4DWithBS__*', 
        'keep *_trackTimeValueMapProducer_*_*', 
        'keep *_offlinePrimaryVertices4DnoPID__*', 
        'keep *_offlinePrimaryVertices4DnoPIDWithBS__*', 
        'keep *_tofPID_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectrons_gedGsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep recoPhotonCores_gedPhotonCore_*_*', 
        'keep recoPhotons_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_ootPhotonCore_*_*', 
        'keep recoPhotons_ootPhotons_*_*', 
        'keep recoConversions_conversions_*_*', 
        'drop recoConversions_conversions_uncleanedConversions_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'keep *_gsfTracksOpenConversions_*_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFromConversions_*_*', 
        'keep recoTracks_ckfInOutTracksFromConversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*', 
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*', 
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*', 
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*', 
        'keep *_lowPtGsfToTrackLinks_*_*', 
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*', 
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*', 
        'keep floatedmValueMap_lowPtGsfElectronID_*_*', 
        'keep *_ecalDrivenGsfElectronCores_*_*', 
        'keep *_ecalDrivenGsfElectrons_*_*', 
        'keep *_ecalDrivenGsfElectronCoresFromMultiCl_*_*', 
        'keep *_ecalDrivenGsfElectronsFromMultiCl_*_*', 
        'keep *_photonCoreFromMultiCl_*_*', 
        'keep *_photonsFromMultiCl_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_particleFlow_muons_*', 
        'keep recoCaloClusters_pfElectronTranslator_*_*', 
        'keep recoPreshowerClusters_pfElectronTranslator_*_*', 
        'keep recoSuperClusters_pfElectronTranslator_*_*', 
        'keep recoCaloClusters_pfPhotonTranslator_*_*', 
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*', 
        'keep recoSuperClusters_pfPhotonTranslator_*_*', 
        'keep recoPhotons_pfPhotonTranslator_*_*', 
        'keep recoPhotonCores_pfPhotonTranslator_*_*', 
        'keep recoConversions_pfPhotonTranslator_*_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_chargedHadronPFTrackIsolation_*_*', 
        'keep recoPFRecHits_particleFlowRecHitHGC_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterHGCal__*', 
        'keep recoPFClusters_particleFlowClusterHGCalFromMultiCl__*', 
        'keep recoSuperClusters_simPFProducer_*_*', 
        'keep *_ecalBarrelClusterFastTimer_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'keep *_gtStage2Digis_*_*', 
        'keep *_gmtStage2Digis_*_*', 
        'keep *_caloStage2Digis_*_*', 
        'drop *_hlt*_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*', 
        'keep L1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep LumiScalerss_scalersRawToDigi_*_*', 
        'keep BeamSpotOnlines_scalersRawToDigi_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep CTPPSRecord_onlineMetaDataDigis_*_*', 
        'keep DCSRecord_onlineMetaDataDigis_*_*', 
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*', 
        'keep recoBeamSpot_onlineMetaDataDigis_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*', 
        'keep TotemFEDInfos_totemRPRawToDigi_*_*', 
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*', 
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*', 
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*', 
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*', 
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*', 
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*', 
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*', 
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*', 
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*', 
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*', 
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*', 
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*', 
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*', 
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*', 
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*', 
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*', 
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*', 
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*', 
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*', 
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*', 
        'keep recoForwardProtons_ctppsProtons_*_*', 
        'keep *_ticlMultiClustersFromTrackstersEM_*_*', 
        'keep *_ticlMultiClustersFromTrackstersHAD_*_*', 
        'keep *_ticlMultiClustersFromTrackstersTrk_*_*', 
        'keep *_ticlMultiClustersFromTrackstersTrkEM_*_*', 
        'keep *_ticlMultiClustersFromTrackstersMIP_*_*', 
        'keep *_ticlMultiClustersFromTrackstersMerge_*_*'
     ) )
)

process.AODSIMEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    eventAutoFlushCompressedSize = cms.untracked.int32(31457280),
    outputCommands = cms.untracked.vstring( (
        'drop *', 
        'drop *', 
        'keep ClusterSummary_clusterSummaryProducer_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_gemRecHits_*_*', 
        'keep *_gemSegments_*_*', 
        'keep *_me0RecHits_*_*', 
        'keep *_me0Segments_*_*', 
        'keep *_castorreco_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep HcalUnpackerReport_castorDigis_*_*', 
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*', 
        'keep HcalUnpackerReport_hcalDigis_*_*', 
        'keep *_HGCalRecHit_*_*', 
        'keep recoCaloClusters_hgcalLayerClusters_*_*', 
        'keep *_hgcalLayerClusters_timeLayerCluster_*', 
        'keep *_hgcalLayerClusters_InitialLayerClustersMask_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterHGCal__*', 
        'keep recoCaloClusters_particleFlowSuperClusterHGCal__*', 
        'keep recoSuperClusters_particleFlowSuperClusterHGCalFromMultiCl__*', 
        'keep recoCaloClusters_particleFlowSuperClusterHGCalFromMultiCl__*', 
        'keep recoTracks_GsfGlobalElectronTest_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTracks_electronGsfTracksFromMultiCl_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTracks_ctfPixelLess_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_dedxPixelHarmonic2_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep *_generalTracks_MVAValues_*', 
        'keep *_generalTracks_MVAVals_*', 
        'keep recoCaloJets_ak4CaloJets_*_*', 
        'keep *_ak4CaloJets_rho_*', 
        'keep *_ak4CaloJets_sigma_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep floatedmValueMap_puppi_*_*', 
        'keep *_ak4PFJetsPuppi_*_*', 
        'keep *_ak8PFJetsPuppi_*_*', 
        'keep *_ak8PFJetsPuppiSoftDrop_*_*', 
        'keep recoPFJets_ak4PFJets_*_*', 
        'keep *_ak4PFJets_rho_*', 
        'keep *_ak4PFJets_sigma_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep recoBasicJets_ak5CastorJets_*_*', 
        'keep *_ak5CastorJets_rho_*', 
        'keep *_ak5CastorJets_sigma_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep recoBasicJets_ak7CastorJets_*_*', 
        'keep *_ak7CastorJets_rho_*', 
        'keep *_ak7CastorJets_sigma_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRhoAll_*_*', 
        'keep *_fixedGridRhoFastjetAll_*_*', 
        'keep *_fixedGridRhoFastjetAllTmp_*_*', 
        'keep *_fixedGridRhoFastjetCentral_*_*', 
        'keep *_fixedGridRhoFastjetAllCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*', 
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*', 
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep floatedmValueMap_puppiNoLep_*_*', 
        'keep recoPFMETs_pfMetPuppi_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep recoGlobalHaloData_GlobalHaloData_*_*', 
        'keep recoCSCHaloData_CSCHaloData_*_*', 
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muons_*_*', 
        'keep doubleedmValueMap_muons_muPFMean*_*', 
        'keep doubleedmValueMap_muons_muPFSum*_*', 
        'keep *_muons_muonShowerInformation_*', 
        'keep recoMuonTimeExtraedmValueMap_muons_*_*', 
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*', 
        'keep uintedmValueMap_muons_*_*', 
        'keep *_particleFlow_muons_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfGhostTrackBJetTags_*_*', 
        'keep *_pfCombinedMVAV2BJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*', 
        'keep *_pfCombinedCvsLJetTags_*_*', 
        'keep *_pfCombinedCvsBJetTags_*_*', 
        'keep *_pfChargeBJetTags_*_*', 
        'keep *_pfDeepCSVJetTags_*_*', 
        'keep *_pfDeepCMVAJetTags_*_*', 
        'keep *_pixelClusterTagInfos_*_*', 
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*', 
        'keep recoPFTaus_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauBasicDiscriminators_*_*', 
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*', 
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*', 
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep *_hpsPFTauDiscriminationByMVA6ElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBdR03oldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWdR03oldDMwLT_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep *_offlinePrimaryVerticesWithBS_*_*', 
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep *_offlinePrimaryVertices4D__*', 
        'keep *_offlinePrimaryVertices4DWithBS__*', 
        'keep *_trackTimeValueMapProducer_*_*', 
        'keep *_offlinePrimaryVertices4DnoPID__*', 
        'keep *_offlinePrimaryVertices4DnoPIDWithBS__*', 
        'keep *_tofPID_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectrons_gedGsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep recoPhotonCores_gedPhotonCore_*_*', 
        'keep recoPhotons_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_ootPhotonCore_*_*', 
        'keep recoPhotons_ootPhotons_*_*', 
        'keep recoConversions_conversions_*_*', 
        'drop recoConversions_conversions_uncleanedConversions_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'keep *_gsfTracksOpenConversions_*_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFromConversions_*_*', 
        'keep recoTracks_ckfInOutTracksFromConversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*', 
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*', 
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*', 
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*', 
        'keep *_lowPtGsfToTrackLinks_*_*', 
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*', 
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*', 
        'keep floatedmValueMap_lowPtGsfElectronID_*_*', 
        'keep *_ecalDrivenGsfElectronCores_*_*', 
        'keep *_ecalDrivenGsfElectrons_*_*', 
        'keep *_ecalDrivenGsfElectronCoresFromMultiCl_*_*', 
        'keep *_ecalDrivenGsfElectronsFromMultiCl_*_*', 
        'keep *_photonCoreFromMultiCl_*_*', 
        'keep *_photonsFromMultiCl_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_particleFlow_muons_*', 
        'keep recoCaloClusters_pfElectronTranslator_*_*', 
        'keep recoPreshowerClusters_pfElectronTranslator_*_*', 
        'keep recoSuperClusters_pfElectronTranslator_*_*', 
        'keep recoCaloClusters_pfPhotonTranslator_*_*', 
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*', 
        'keep recoSuperClusters_pfPhotonTranslator_*_*', 
        'keep recoPhotons_pfPhotonTranslator_*_*', 
        'keep recoPhotonCores_pfPhotonTranslator_*_*', 
        'keep recoConversions_pfPhotonTranslator_*_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_chargedHadronPFTrackIsolation_*_*', 
        'keep recoPFRecHits_particleFlowRecHitHGC_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterHGCal__*', 
        'keep recoPFClusters_particleFlowClusterHGCalFromMultiCl__*', 
        'keep recoSuperClusters_simPFProducer_*_*', 
        'keep *_ecalBarrelClusterFastTimer_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'keep *_gtStage2Digis_*_*', 
        'keep *_gmtStage2Digis_*_*', 
        'keep *_caloStage2Digis_*_*', 
        'drop *_hlt*_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*', 
        'keep L1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep LumiScalerss_scalersRawToDigi_*_*', 
        'keep BeamSpotOnlines_scalersRawToDigi_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep CTPPSRecord_onlineMetaDataDigis_*_*', 
        'keep DCSRecord_onlineMetaDataDigis_*_*', 
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*', 
        'keep recoBeamSpot_onlineMetaDataDigis_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*', 
        'keep TotemFEDInfos_totemRPRawToDigi_*_*', 
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*', 
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*', 
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*', 
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*', 
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*', 
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*', 
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*', 
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*', 
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*', 
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*', 
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*', 
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*', 
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*', 
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*', 
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*', 
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*', 
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*', 
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*', 
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*', 
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*', 
        'keep recoForwardProtons_ctppsProtons_*_*', 
        'keep *_ticlMultiClustersFromTrackstersEM_*_*', 
        'keep *_ticlMultiClustersFromTrackstersHAD_*_*', 
        'keep *_ticlMultiClustersFromTrackstersTrk_*_*', 
        'keep *_ticlMultiClustersFromTrackstersTrkEM_*_*', 
        'keep *_ticlMultiClustersFromTrackstersMIP_*_*', 
        'keep *_ticlMultiClustersFromTrackstersMerge_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep *_muonSimClassifier_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep *_genPUProtons_*_*', 
        'keep *_mtdClusters_*_*', 
        'keep *_trackExtenderWithMTD_*_*', 
        'keep *_mtdTrackQualityMVA_*_*'
     ) )
)

process.AnomalousCellParameters = cms.PSet(
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999)
)

process.BeamSpotAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_offlineBeamSpot_*_*')
)

process.BeamSpotFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_offlineBeamSpot_*_*')
)

process.BeamSpotRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_offlineBeamSpot_*_*')
)

process.BtiParametersBlock = cms.PSet(
    BtiParameters = cms.PSet(
        AC1 = cms.int32(0),
        AC2 = cms.int32(3),
        ACH = cms.int32(1),
        ACL = cms.int32(2),
        CH = cms.int32(41),
        CL = cms.int32(22),
        DEAD = cms.int32(31),
        Debug = cms.untracked.int32(0),
        KACCTHETA = cms.int32(1),
        KMAX = cms.int32(64),
        LH = cms.int32(21),
        LL = cms.int32(2),
        LTS = cms.int32(3),
        PTMS0 = cms.int32(0),
        PTMS1 = cms.int32(0),
        PTMS10 = cms.int32(1),
        PTMS11 = cms.int32(1),
        PTMS12 = cms.int32(1),
        PTMS13 = cms.int32(1),
        PTMS14 = cms.int32(1),
        PTMS15 = cms.int32(1),
        PTMS16 = cms.int32(1),
        PTMS17 = cms.int32(1),
        PTMS18 = cms.int32(1),
        PTMS19 = cms.int32(1),
        PTMS2 = cms.int32(0),
        PTMS20 = cms.int32(1),
        PTMS21 = cms.int32(1),
        PTMS22 = cms.int32(1),
        PTMS23 = cms.int32(1),
        PTMS24 = cms.int32(1),
        PTMS25 = cms.int32(1),
        PTMS26 = cms.int32(1),
        PTMS27 = cms.int32(1),
        PTMS28 = cms.int32(1),
        PTMS29 = cms.int32(1),
        PTMS3 = cms.int32(0),
        PTMS30 = cms.int32(0),
        PTMS31 = cms.int32(0),
        PTMS4 = cms.int32(1),
        PTMS5 = cms.int32(1),
        PTMS6 = cms.int32(1),
        PTMS7 = cms.int32(1),
        PTMS8 = cms.int32(1),
        PTMS9 = cms.int32(1),
        RE43 = cms.int32(2),
        RH = cms.int32(61),
        RL = cms.int32(42),
        RON = cms.bool(True),
        SET = cms.int32(7),
        ST43 = cms.int32(42),
        WEN0 = cms.int32(1),
        WEN1 = cms.int32(1),
        WEN2 = cms.int32(1),
        WEN3 = cms.int32(1),
        WEN4 = cms.int32(1),
        WEN5 = cms.int32(1),
        WEN6 = cms.int32(1),
        WEN7 = cms.int32(1),
        WEN8 = cms.int32(1),
        XON = cms.bool(False)
    )
)

process.CSCCommonTrigger = cms.PSet(
    MaxBX = cms.int32(11),
    MinBX = cms.int32(5)
)

process.CSCSegAlgoDF = cms.PSet(
    algo_name = cms.string('CSCSegAlgoDF'),
    algo_psets = cms.VPSet(
        cms.PSet(
            CSCSegmentDebug = cms.untracked.bool(False),
            Pruning = cms.untracked.bool(False),
            chi2Max = cms.double(5000.0),
            dPhiFineMax = cms.double(0.025),
            dRPhiFineMax = cms.double(8.0),
            dXclusBoxMax = cms.double(8.0),
            dYclusBoxMax = cms.double(8.0),
            maxDPhi = cms.double(999.0),
            maxDTheta = cms.double(999.0),
            maxRatioResidualPrune = cms.double(3.0),
            minHitsForPreClustering = cms.int32(10),
            minHitsPerSegment = cms.int32(3),
            minLayersApart = cms.int32(2),
            nHitsPerClusterIsShower = cms.int32(20),
            preClustering = cms.untracked.bool(False),
            tanPhiMax = cms.double(0.5),
            tanThetaMax = cms.double(1.2)
        ), 
        cms.PSet(
            CSCSegmentDebug = cms.untracked.bool(False),
            Pruning = cms.untracked.bool(False),
            chi2Max = cms.double(5000.0),
            dPhiFineMax = cms.double(0.025),
            dRPhiFineMax = cms.double(12.0),
            dXclusBoxMax = cms.double(8.0),
            dYclusBoxMax = cms.double(12.0),
            maxDPhi = cms.double(999.0),
            maxDTheta = cms.double(999.0),
            maxRatioResidualPrune = cms.double(3.0),
            minHitsForPreClustering = cms.int32(10),
            minHitsPerSegment = cms.int32(3),
            minLayersApart = cms.int32(2),
            nHitsPerClusterIsShower = cms.int32(20),
            preClustering = cms.untracked.bool(False),
            tanPhiMax = cms.double(0.8),
            tanThetaMax = cms.double(2.0)
        ), 
        cms.PSet(
            CSCSegmentDebug = cms.untracked.bool(False),
            Pruning = cms.untracked.bool(False),
            chi2Max = cms.double(5000.0),
            dPhiFineMax = cms.double(0.025),
            dRPhiFineMax = cms.double(8.0),
            dXclusBoxMax = cms.double(8.0),
            dYclusBoxMax = cms.double(8.0),
            maxDPhi = cms.double(999.0),
            maxDTheta = cms.double(999.0),
            maxRatioResidualPrune = cms.double(3.0),
            minHitsForPreClustering = cms.int32(30),
            minHitsPerSegment = cms.int32(3),
            minLayersApart = cms.int32(2),
            nHitsPerClusterIsShower = cms.int32(20),
            preClustering = cms.untracked.bool(False),
            tanPhiMax = cms.double(0.5),
            tanThetaMax = cms.double(1.2)
        )
    ),
    chamber_types = cms.vstring(
        'ME1/a', 
        'ME1/b', 
        'ME1/2', 
        'ME1/3', 
        'ME2/1', 
        'ME2/2', 
        'ME3/1', 
        'ME3/2', 
        'ME4/1', 
        'ME4/2'
    ),
    parameters_per_chamber_type = cms.vint32(
        3, 1, 2, 2, 1, 
        2, 1, 2, 1, 2
    )
)

process.CSCSegAlgoRU = cms.PSet(
    algo_name = cms.string('CSCSegAlgoRU'),
    algo_psets = cms.VPSet(
        cms.PSet(
            chi2Max = cms.double(100.0),
            chi2Norm_2D_ = cms.double(35),
            chi2_str = cms.double(50.0),
            dPhiIntMax = cms.double(0.005),
            dPhiMax = cms.double(0.006),
            dRIntMax = cms.double(2.0),
            dRMax = cms.double(1.5),
            doCollisions = cms.bool(True),
            enlarge = cms.bool(False),
            minLayersApart = cms.int32(1),
            wideSeg = cms.double(3.0)
        ), 
        cms.PSet(
            chi2Max = cms.double(100.0),
            chi2Norm_2D_ = cms.double(35),
            chi2_str = cms.double(50.0),
            dPhiIntMax = cms.double(0.004),
            dPhiMax = cms.double(0.005),
            dRIntMax = cms.double(2.0),
            dRMax = cms.double(1.5),
            doCollisions = cms.bool(True),
            enlarge = cms.bool(False),
            minLayersApart = cms.int32(1),
            wideSeg = cms.double(3.0)
        ), 
        cms.PSet(
            chi2Max = cms.double(100.0),
            chi2Norm_2D_ = cms.double(35),
            chi2_str = cms.double(50.0),
            dPhiIntMax = cms.double(0.003),
            dPhiMax = cms.double(0.004),
            dRIntMax = cms.double(2.0),
            dRMax = cms.double(1.5),
            doCollisions = cms.bool(True),
            enlarge = cms.bool(False),
            minLayersApart = cms.int32(1),
            wideSeg = cms.double(3.0)
        ), 
        cms.PSet(
            chi2Max = cms.double(60.0),
            chi2Norm_2D_ = cms.double(20),
            chi2_str = cms.double(30.0),
            dPhiIntMax = cms.double(0.002),
            dPhiMax = cms.double(0.003),
            dRIntMax = cms.double(2.0),
            dRMax = cms.double(1.5),
            doCollisions = cms.bool(True),
            enlarge = cms.bool(False),
            minLayersApart = cms.int32(1),
            wideSeg = cms.double(3.0)
        ), 
        cms.PSet(
            chi2Max = cms.double(180.0),
            chi2Norm_2D_ = cms.double(60),
            chi2_str = cms.double(80.0),
            dPhiIntMax = cms.double(0.005),
            dPhiMax = cms.double(0.007),
            dRIntMax = cms.double(2.0),
            dRMax = cms.double(1.5),
            doCollisions = cms.bool(True),
            enlarge = cms.bool(False),
            minLayersApart = cms.int32(1),
            wideSeg = cms.double(3.0)
        ), 
        cms.PSet(
            chi2Max = cms.double(100.0),
            chi2Norm_2D_ = cms.double(35),
            chi2_str = cms.double(50.0),
            dPhiIntMax = cms.double(0.004),
            dPhiMax = cms.double(0.006),
            dRIntMax = cms.double(2.0),
            dRMax = cms.double(1.5),
            doCollisions = cms.bool(True),
            enlarge = cms.bool(False),
            minLayersApart = cms.int32(1),
            wideSeg = cms.double(3.0)
        )
    ),
    chamber_types = cms.vstring(
        'ME1/a', 
        'ME1/b', 
        'ME1/2', 
        'ME1/3', 
        'ME2/1', 
        'ME2/2', 
        'ME3/1', 
        'ME3/2', 
        'ME4/1', 
        'ME4/2'
    ),
    parameters_per_chamber_type = cms.vint32(
        1, 2, 3, 4, 5, 
        6, 5, 6, 5, 6
    )
)

process.CSCSegAlgoSK = cms.PSet(
    algo_name = cms.string('CSCSegAlgoSK'),
    algo_psets = cms.VPSet(
        cms.PSet(
            chi2Max = cms.double(99999.0),
            dPhiFineMax = cms.double(0.025),
            dPhiMax = cms.double(0.003),
            dRPhiFineMax = cms.double(8.0),
            dRPhiMax = cms.double(8.0),
            minLayersApart = cms.int32(2),
            verboseInfo = cms.untracked.bool(True),
            wideSeg = cms.double(3.0)
        ), 
        cms.PSet(
            chi2Max = cms.double(99999.0),
            dPhiFineMax = cms.double(0.025),
            dPhiMax = cms.double(0.025),
            dRPhiFineMax = cms.double(3.0),
            dRPhiMax = cms.double(8.0),
            minLayersApart = cms.int32(2),
            verboseInfo = cms.untracked.bool(True),
            wideSeg = cms.double(3.0)
        )
    ),
    chamber_types = cms.vstring(
        'ME1/a', 
        'ME1/b', 
        'ME1/2', 
        'ME1/3', 
        'ME2/1', 
        'ME2/2', 
        'ME3/1', 
        'ME3/2', 
        'ME4/1', 
        'ME4/2'
    ),
    parameters_per_chamber_type = cms.vint32(
        2, 1, 1, 1, 1, 
        1, 1, 1, 1, 1
    )
)

process.CSCSegAlgoST = cms.PSet(
    algo_name = cms.string('CSCSegAlgoST'),
    algo_psets = cms.VPSet(
        cms.PSet(
            BPMinImprovement = cms.double(10000.0),
            BrutePruning = cms.bool(True),
            CSCDebug = cms.untracked.bool(False),
            CorrectTheErrors = cms.bool(True),
            Covariance = cms.double(0.0),
            ForceCovariance = cms.bool(False),
            ForceCovarianceAll = cms.bool(False),
            NormChi2Cut2D = cms.double(20.0),
            NormChi2Cut3D = cms.double(10.0),
            Pruning = cms.bool(True),
            SeedBig = cms.double(0.0015),
            SeedSmall = cms.double(0.0002),
            curvePenalty = cms.double(2.0),
            curvePenaltyThreshold = cms.double(0.85),
            dPhiFineMax = cms.double(0.025),
            dRPhiFineMax = cms.double(8.0),
            dXclusBoxMax = cms.double(4.0),
            dYclusBoxMax = cms.double(8.0),
            hitDropLimit4Hits = cms.double(0.6),
            hitDropLimit5Hits = cms.double(0.8),
            hitDropLimit6Hits = cms.double(0.3333),
            maxDPhi = cms.double(999.0),
            maxDTheta = cms.double(999.0),
            maxRatioResidualPrune = cms.double(3),
            maxRecHitsInCluster = cms.int32(20),
            minHitsPerSegment = cms.int32(3),
            onlyBestSegment = cms.bool(False),
            preClustering = cms.bool(True),
            preClusteringUseChaining = cms.bool(True),
            prePrun = cms.bool(True),
            prePrunLimit = cms.double(3.17),
            tanPhiMax = cms.double(0.5),
            tanThetaMax = cms.double(1.2),
            useShowering = cms.bool(False),
            yweightPenalty = cms.double(1.5),
            yweightPenaltyThreshold = cms.double(1.0)
        ), 
        cms.PSet(
            BPMinImprovement = cms.double(10000.0),
            BrutePruning = cms.bool(True),
            CSCDebug = cms.untracked.bool(False),
            CorrectTheErrors = cms.bool(True),
            Covariance = cms.double(0.0),
            ForceCovariance = cms.bool(False),
            ForceCovarianceAll = cms.bool(False),
            NormChi2Cut2D = cms.double(20.0),
            NormChi2Cut3D = cms.double(10.0),
            Pruning = cms.bool(True),
            SeedBig = cms.double(0.0015),
            SeedSmall = cms.double(0.0002),
            curvePenalty = cms.double(2.0),
            curvePenaltyThreshold = cms.double(0.85),
            dPhiFineMax = cms.double(0.025),
            dRPhiFineMax = cms.double(8.0),
            dXclusBoxMax = cms.double(4.0),
            dYclusBoxMax = cms.double(8.0),
            hitDropLimit4Hits = cms.double(0.6),
            hitDropLimit5Hits = cms.double(0.8),
            hitDropLimit6Hits = cms.double(0.3333),
            maxDPhi = cms.double(999.0),
            maxDTheta = cms.double(999.0),
            maxRatioResidualPrune = cms.double(3),
            maxRecHitsInCluster = cms.int32(24),
            minHitsPerSegment = cms.int32(3),
            onlyBestSegment = cms.bool(False),
            preClustering = cms.bool(True),
            preClusteringUseChaining = cms.bool(True),
            prePrun = cms.bool(True),
            prePrunLimit = cms.double(3.17),
            tanPhiMax = cms.double(0.5),
            tanThetaMax = cms.double(1.2),
            useShowering = cms.bool(False),
            yweightPenalty = cms.double(1.5),
            yweightPenaltyThreshold = cms.double(1.0)
        )
    ),
    chamber_types = cms.vstring(
        'ME1/a', 
        'ME1/b', 
        'ME1/2', 
        'ME1/3', 
        'ME2/1', 
        'ME2/2', 
        'ME3/1', 
        'ME3/2', 
        'ME4/1', 
        'ME4/2'
    ),
    parameters_per_chamber_type = cms.vint32(
        2, 1, 1, 1, 1, 
        1, 1, 1, 1, 1
    )
)

process.CSCSegAlgoTC = cms.PSet(
    algo_name = cms.string('CSCSegAlgoTC'),
    algo_psets = cms.VPSet(
        cms.PSet(
            SegmentSorting = cms.int32(1),
            chi2Max = cms.double(6000.0),
            chi2ndfProbMin = cms.double(0.0001),
            dPhiFineMax = cms.double(0.02),
            dPhiMax = cms.double(0.003),
            dRPhiFineMax = cms.double(6.0),
            dRPhiMax = cms.double(1.2),
            minLayersApart = cms.int32(2),
            verboseInfo = cms.untracked.bool(True)
        ), 
        cms.PSet(
            SegmentSorting = cms.int32(1),
            chi2Max = cms.double(6000.0),
            chi2ndfProbMin = cms.double(0.0001),
            dPhiFineMax = cms.double(0.013),
            dPhiMax = cms.double(0.00198),
            dRPhiFineMax = cms.double(3.0),
            dRPhiMax = cms.double(0.6),
            minLayersApart = cms.int32(2),
            verboseInfo = cms.untracked.bool(True)
        )
    ),
    chamber_types = cms.vstring(
        'ME1/a', 
        'ME1/b', 
        'ME1/2', 
        'ME1/3', 
        'ME2/1', 
        'ME2/2', 
        'ME3/1', 
        'ME3/2', 
        'ME4/1', 
        'ME4/2'
    ),
    parameters_per_chamber_type = cms.vint32(
        2, 1, 1, 1, 1, 
        1, 1, 1, 1, 1
    )
)

process.CSCTimingExtractorBlock = cms.PSet(
    CSCTimingParameters = cms.PSet(
        CSCStripError = cms.double(7.0),
        CSCStripTimeOffset = cms.double(0.0),
        CSCWireError = cms.double(8.6),
        CSCWireTimeOffset = cms.double(0.0),
        PruneCut = cms.double(9.0),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring(
                'SteppingHelixPropagatorAny', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite'
            ),
            RPCLayers = cms.bool(True)
        ),
        UseStripTime = cms.bool(True),
        UseWireTime = cms.bool(True),
        debug = cms.bool(False)
    )
)

process.ChargeSignificanceTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('ChargeSignificanceTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0)
)

process.CkfBaseTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minimumNumberOfHits = cms.int32(5),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.CkfElectronTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('CkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    estimator = cms.string('electronChi2'),
    intermediateCleaning = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(5),
    propagatorAlong = cms.string('fwdElectronPropagator'),
    propagatorOpposite = cms.string('bwdElectronPropagator'),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    updator = cms.string('KFUpdator')
)

process.CkfTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('CkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    estimator = cms.string('Chi2'),
    intermediateCleaning = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    updator = cms.string('KFUpdator')
)

process.CkfTrajectoryBuilderBeamHalo = cms.PSet(
    ComponentType = cms.string('CkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    estimator = cms.string('Chi2'),
    intermediateCleaning = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(5),
    propagatorAlong = cms.string('BeamHaloPropagatorAlong'),
    propagatorOpposite = cms.string('BeamHaloPropagatorOpposite'),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('ckfTrajectoryFilterBeamHaloMuon')
    ),
    updator = cms.string('KFUpdator')
)

process.ClusterShapeTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('ClusterShapeTrajectoryFilter'),
    cacheSrc = cms.InputTag("siPixelClusterShapeCache")
)

process.CommonClusterCheckPSet = cms.PSet(
    ClusterCollectionLabel = cms.InputTag("siStripClusters"),
    MaxNumberOfCosmicClusters = cms.uint32(1000000),
    MaxNumberOfPixelClusters = cms.uint32(100000),
    PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
    doClusterCheck = cms.bool(True)
)

process.CommonEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_logErrorHarvester_*_*')
)

process.CompositeTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('CompositeTrajectoryFilter'),
    filters = cms.VPSet()
)

process.CondDB = cms.PSet(
    DBParameters = cms.PSet(
        authenticationPath = cms.untracked.string(''),
        authenticationSystem = cms.untracked.int32(0),
        messageLevel = cms.untracked.int32(0),
        security = cms.untracked.string('')
    ),
    connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS')
)

process.CosmicSeedCreator = cms.PSet(
    ComponentName = cms.string('CosmicSeedCreator'),
    MinOneOverPtError = cms.double(1.0),
    OriginTransverseErrorMultiplier = cms.double(1.0),
    SeedMomentumForBOFF = cms.double(5.0),
    TTRHBuilder = cms.string('WithTrackAngle'),
    forceKinematicWithRegionDirection = cms.bool(False),
    magneticField = cms.string('ParabolicMf'),
    maxseeds = cms.int32(10000),
    propagator = cms.string('PropagatorWithMaterialParabolicMf')
)

process.DATAMIXEREventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *', 
        'keep CSCDetIdCSCALCTDigiMuonDigiCollection_muonCSCDigis_MuonCSCALCTDigi_*', 
        'keep CSCDetIdCSCCLCTDigiMuonDigiCollection_muonCSCDigis_MuonCSCCLCTDigi_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_muonCSCDigis_MuonCSCComparatorDigi_*', 
        'keep CSCDetIdCSCCorrelatedLCTDigiMuonDigiCollection_csctfDigis_*_*', 
        'keep CSCDetIdCSCCorrelatedLCTDigiMuonDigiCollection_muonCSCDigis_MuonCSCCorrelatedLCTDigi_*', 
        'keep CSCDetIdCSCRPCDigiMuonDigiCollection_muonCSCDigis_MuonCSCRPCDigi_*', 
        'keep CSCDetIdCSCStripDigiMuonDigiCollection_muonCSCDigis_MuonCSCStripDigi_*', 
        'keep CSCDetIdCSCWireDigiMuonDigiCollection_muonCSCDigis_MuonCSCWireDigi_*', 
        'keep DTLayerIdDTDigiMuonDigiCollection_muonDTDigis_*_*', 
        'keep PixelDigiedmDetSetVector_siPixelDigis_*_*', 
        'keep SiStripDigiedmDetSetVector_siStripDigis_*_*', 
        'keep RPCDetIdRPCDigiMuonDigiCollection_muonRPCDigis_*_*', 
        'keep HBHEDataFramesSorted_hcalDigis_*_*', 
        'keep HFDataFramesSorted_hcalDigis_*_*', 
        'keep HODataFramesSorted_hcalDigis_*_*', 
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_*_*', 
        'keep QIE11DataFrameHcalDataFrameContainer_hcalDigis_*_*', 
        'keep ZDCDataFramesSorted_hcalDigis_*_*', 
        'keep CastorDataFramesSorted_castorDigis_*_*', 
        'keep EBDigiCollection_ecalDigis_*_*', 
        'keep EEDigiCollection_ecalDigis_*_*', 
        'keep ESDigiCollection_ecalPreshowerDigis_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.DA_vectParameters = cms.PSet(
    TkDAClusParameters = cms.PSet(
        Tmin = cms.double(2.0),
        Tpurge = cms.double(2.0),
        Tstop = cms.double(0.5),
        convergence_mode = cms.int32(0),
        coolingFactor = cms.double(0.6),
        d0CutOff = cms.double(3.0),
        delta_highT = cms.double(0.01),
        delta_lowT = cms.double(0.001),
        dzCutOff = cms.double(3.0),
        uniquetrkweight = cms.double(0.8),
        vertexSize = cms.double(0.006),
        zmerge = cms.double(0.01),
        zrange = cms.double(4.0)
    ),
    algorithm = cms.string('DA_vect')
)

process.DF_ME1234_1 = cms.PSet(
    CSCSegmentDebug = cms.untracked.bool(False),
    Pruning = cms.untracked.bool(False),
    chi2Max = cms.double(5000.0),
    dPhiFineMax = cms.double(0.025),
    dRPhiFineMax = cms.double(8.0),
    dXclusBoxMax = cms.double(8.0),
    dYclusBoxMax = cms.double(8.0),
    maxDPhi = cms.double(999.0),
    maxDTheta = cms.double(999.0),
    maxRatioResidualPrune = cms.double(3.0),
    minHitsForPreClustering = cms.int32(10),
    minHitsPerSegment = cms.int32(3),
    minLayersApart = cms.int32(2),
    nHitsPerClusterIsShower = cms.int32(20),
    preClustering = cms.untracked.bool(False),
    tanPhiMax = cms.double(0.5),
    tanThetaMax = cms.double(1.2)
)

process.DF_ME1234_2 = cms.PSet(
    CSCSegmentDebug = cms.untracked.bool(False),
    Pruning = cms.untracked.bool(False),
    chi2Max = cms.double(5000.0),
    dPhiFineMax = cms.double(0.025),
    dRPhiFineMax = cms.double(12.0),
    dXclusBoxMax = cms.double(8.0),
    dYclusBoxMax = cms.double(12.0),
    maxDPhi = cms.double(999.0),
    maxDTheta = cms.double(999.0),
    maxRatioResidualPrune = cms.double(3.0),
    minHitsForPreClustering = cms.int32(10),
    minHitsPerSegment = cms.int32(3),
    minLayersApart = cms.int32(2),
    nHitsPerClusterIsShower = cms.int32(20),
    preClustering = cms.untracked.bool(False),
    tanPhiMax = cms.double(0.8),
    tanThetaMax = cms.double(2.0)
)

process.DF_ME1A = cms.PSet(
    CSCSegmentDebug = cms.untracked.bool(False),
    Pruning = cms.untracked.bool(False),
    chi2Max = cms.double(5000.0),
    dPhiFineMax = cms.double(0.025),
    dRPhiFineMax = cms.double(8.0),
    dXclusBoxMax = cms.double(8.0),
    dYclusBoxMax = cms.double(8.0),
    maxDPhi = cms.double(999.0),
    maxDTheta = cms.double(999.0),
    maxRatioResidualPrune = cms.double(3.0),
    minHitsForPreClustering = cms.int32(30),
    minHitsPerSegment = cms.int32(3),
    minLayersApart = cms.int32(2),
    nHitsPerClusterIsShower = cms.int32(20),
    preClustering = cms.untracked.bool(False),
    tanPhiMax = cms.double(0.5),
    tanThetaMax = cms.double(1.2)
)

process.DQMEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *', 
        'keep *_MEtoEDMConverter_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.DTLinearDriftAlgo_CosmicData = cms.PSet(
    recAlgo = cms.string('DTLinearDriftAlgo'),
    recAlgoConfig = cms.PSet(
        debug = cms.untracked.bool(False),
        driftVelocity = cms.double(0.00543),
        hitResolution = cms.double(0.02),
        maxTime = cms.double(420.0),
        minTime = cms.double(-3.0),
        tTrigMode = cms.string('DTTTrigSyncFromDB'),
        tTrigModeConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doT0Correction = cms.bool(True),
            doTOFCorrection = cms.bool(False),
            doWirePropCorrection = cms.bool(False),
            tTrigLabel = cms.string('cosmics'),
            tofCorrType = cms.int32(0),
            vPropWire = cms.double(24.4),
            wirePropCorrType = cms.int32(0)
        )
    )
)

process.DTLinearDriftFromDBAlgo = cms.PSet(
    recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
    recAlgoConfig = cms.PSet(
        debug = cms.untracked.bool(False),
        doVdriftCorr = cms.bool(True),
        maxTime = cms.double(420.0),
        minTime = cms.double(-3.0),
        stepTwoFromDigi = cms.bool(False),
        tTrigMode = cms.string('DTTTrigSyncFromDB'),
        tTrigModeConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doT0Correction = cms.bool(True),
            doTOFCorrection = cms.bool(True),
            doWirePropCorrection = cms.bool(True),
            tTrigLabel = cms.string(''),
            tofCorrType = cms.int32(0),
            vPropWire = cms.double(24.4),
            wirePropCorrType = cms.int32(0)
        ),
        useUncertDB = cms.bool(True)
    )
)

process.DTLinearDriftFromDBAlgo_CosmicData = cms.PSet(
    recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
    recAlgoConfig = cms.PSet(
        debug = cms.untracked.bool(False),
        doVdriftCorr = cms.bool(False),
        maxTime = cms.double(420.0),
        minTime = cms.double(-3.0),
        stepTwoFromDigi = cms.bool(False),
        tTrigMode = cms.string('DTTTrigSyncFromDB'),
        tTrigModeConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doT0Correction = cms.bool(True),
            doTOFCorrection = cms.bool(False),
            doWirePropCorrection = cms.bool(False),
            tTrigLabel = cms.string('cosmics'),
            tofCorrType = cms.int32(0),
            vPropWire = cms.double(24.4),
            wirePropCorrType = cms.int32(0)
        ),
        useUncertDB = cms.bool(False)
    )
)

process.DTMeantimerPatternReco2DAlgo_LinearDriftFromDB = cms.PSet(
    Reco2DAlgoConfig = cms.PSet(
        AlphaMaxPhi = cms.double(1.0),
        AlphaMaxTheta = cms.double(0.9),
        MaxAllowedHits = cms.uint32(50),
        MaxChi2 = cms.double(4.0),
        debug = cms.untracked.bool(False),
        hit_afterT0_resolution = cms.double(0.03),
        nSharedHitsMax = cms.int32(2),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False),
        performT0_vdriftSegCorrection = cms.bool(False),
        perform_delta_rejecting = cms.bool(False),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doVdriftCorr = cms.bool(True),
            maxTime = cms.double(420.0),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            tTrigModeConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doT0Correction = cms.bool(True),
                doTOFCorrection = cms.bool(True),
                doWirePropCorrection = cms.bool(True),
                tTrigLabel = cms.string(''),
                tofCorrType = cms.int32(0),
                vPropWire = cms.double(24.4),
                wirePropCorrType = cms.int32(0)
            ),
            useUncertDB = cms.bool(True)
        ),
        segmCleanerMode = cms.int32(2)
    ),
    Reco2DAlgoName = cms.string('DTMeantimerPatternReco')
)

process.DTMeantimerPatternReco2DAlgo_LinearDriftFromDB_CosmicData = cms.PSet(
    Reco2DAlgoConfig = cms.PSet(
        AlphaMaxPhi = cms.double(100.0),
        AlphaMaxTheta = cms.double(100.0),
        MaxAllowedHits = cms.uint32(50),
        MaxChi2 = cms.double(4.0),
        debug = cms.untracked.bool(False),
        hit_afterT0_resolution = cms.double(0.03),
        intime_cut = cms.double(-1.0),
        nSharedHitsMax = cms.int32(2),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False),
        performT0_vdriftSegCorrection = cms.bool(False),
        perform_delta_rejecting = cms.bool(False),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doVdriftCorr = cms.bool(False),
            maxTime = cms.double(420.0),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            tTrigModeConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doT0Correction = cms.bool(True),
                doTOFCorrection = cms.bool(False),
                doWirePropCorrection = cms.bool(False),
                tTrigLabel = cms.string('cosmics'),
                tofCorrType = cms.int32(0),
                vPropWire = cms.double(24.4),
                wirePropCorrType = cms.int32(0)
            ),
            useUncertDB = cms.bool(False)
        ),
        segmCleanerMode = cms.int32(2)
    ),
    Reco2DAlgoName = cms.string('DTMeantimerPatternReco')
)

process.DTMeantimerPatternReco4DAlgo_LinearDriftFromDB = cms.PSet(
    Reco4DAlgoConfig = cms.PSet(
        AllDTRecHits = cms.bool(True),
        Reco2DAlgoConfig = cms.PSet(
            AlphaMaxPhi = cms.double(1.0),
            AlphaMaxTheta = cms.double(0.9),
            MaxAllowedHits = cms.uint32(50),
            MaxChi2 = cms.double(4.0),
            debug = cms.untracked.bool(False),
            hit_afterT0_resolution = cms.double(0.03),
            nSharedHitsMax = cms.int32(2),
            nUnSharedHitsMin = cms.int32(2),
            performT0SegCorrection = cms.bool(False),
            performT0_vdriftSegCorrection = cms.bool(False),
            perform_delta_rejecting = cms.bool(False),
            recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
            recAlgoConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doVdriftCorr = cms.bool(True),
                maxTime = cms.double(420.0),
                minTime = cms.double(-3.0),
                stepTwoFromDigi = cms.bool(False),
                tTrigMode = cms.string('DTTTrigSyncFromDB'),
                tTrigModeConfig = cms.PSet(
                    debug = cms.untracked.bool(False),
                    doT0Correction = cms.bool(True),
                    doTOFCorrection = cms.bool(True),
                    doWirePropCorrection = cms.bool(True),
                    tTrigLabel = cms.string(''),
                    tofCorrType = cms.int32(0),
                    vPropWire = cms.double(24.4),
                    wirePropCorrType = cms.int32(0)
                ),
                useUncertDB = cms.bool(True)
            ),
            segmCleanerMode = cms.int32(2)
        ),
        Reco2DAlgoName = cms.string('DTMeantimerPatternReco'),
        debug = cms.untracked.bool(False),
        hit_afterT0_resolution = cms.double(0.03),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False),
        performT0_vdriftSegCorrection = cms.bool(False),
        perform_delta_rejecting = cms.bool(False),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doVdriftCorr = cms.bool(True),
            maxTime = cms.double(420.0),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            tTrigModeConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doT0Correction = cms.bool(True),
                doTOFCorrection = cms.bool(True),
                doWirePropCorrection = cms.bool(True),
                tTrigLabel = cms.string(''),
                tofCorrType = cms.int32(0),
                vPropWire = cms.double(24.4),
                wirePropCorrType = cms.int32(0)
            ),
            useUncertDB = cms.bool(True)
        )
    ),
    Reco4DAlgoName = cms.string('DTMeantimerPatternReco4D')
)

process.DTMeantimerPatternReco4DAlgo_LinearDriftFromDB_CosmicData = cms.PSet(
    Reco4DAlgoConfig = cms.PSet(
        AllDTRecHits = cms.bool(True),
        Reco2DAlgoConfig = cms.PSet(
            AlphaMaxPhi = cms.double(100.0),
            AlphaMaxTheta = cms.double(100.0),
            MaxAllowedHits = cms.uint32(50),
            MaxChi2 = cms.double(4.0),
            debug = cms.untracked.bool(False),
            hit_afterT0_resolution = cms.double(0.03),
            intime_cut = cms.double(-1.0),
            nSharedHitsMax = cms.int32(2),
            nUnSharedHitsMin = cms.int32(2),
            performT0SegCorrection = cms.bool(False),
            performT0_vdriftSegCorrection = cms.bool(False),
            perform_delta_rejecting = cms.bool(False),
            recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
            recAlgoConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doVdriftCorr = cms.bool(False),
                maxTime = cms.double(420.0),
                minTime = cms.double(-3.0),
                stepTwoFromDigi = cms.bool(False),
                tTrigMode = cms.string('DTTTrigSyncFromDB'),
                tTrigModeConfig = cms.PSet(
                    debug = cms.untracked.bool(False),
                    doT0Correction = cms.bool(True),
                    doTOFCorrection = cms.bool(False),
                    doWirePropCorrection = cms.bool(False),
                    tTrigLabel = cms.string('cosmics'),
                    tofCorrType = cms.int32(0),
                    vPropWire = cms.double(24.4),
                    wirePropCorrType = cms.int32(0)
                ),
                useUncertDB = cms.bool(False)
            ),
            segmCleanerMode = cms.int32(2)
        ),
        Reco2DAlgoName = cms.string('DTMeantimerPatternReco'),
        debug = cms.untracked.bool(False),
        hit_afterT0_resolution = cms.double(0.03),
        intime_cut = cms.double(-1.0),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False),
        performT0_vdriftSegCorrection = cms.bool(False),
        perform_delta_rejecting = cms.bool(False),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doVdriftCorr = cms.bool(False),
            maxTime = cms.double(420.0),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            tTrigModeConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doT0Correction = cms.bool(True),
                doTOFCorrection = cms.bool(False),
                doWirePropCorrection = cms.bool(False),
                tTrigLabel = cms.string('cosmics'),
                tofCorrType = cms.int32(0),
                vPropWire = cms.double(24.4),
                wirePropCorrType = cms.int32(0)
            ),
            useUncertDB = cms.bool(False)
        )
    ),
    Reco4DAlgoName = cms.string('DTMeantimerPatternReco4D')
)

process.DTTPGMapBlock = cms.PSet(
    DTTPGMap = cms.untracked.PSet(
    **dict(
        [
            ("wh0st1se1" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se10" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se11" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se12" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se2" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se3" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se4" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se5" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se6" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se7" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se8" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se9" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st2se1" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se10" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se11" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se12" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se2" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se3" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se4" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se5" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se6" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se7" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se8" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se9" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st3se1" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se10" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se11" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se12" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se2" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se3" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se4" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se5" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se6" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se7" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se8" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se9" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st4se1" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se10" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh0st4se11" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("wh0st4se12" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh0st4se13" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh0st4se14" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh0st4se2" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se3" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se4" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh0st4se5" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se6" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se7" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se8" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh0st4se9" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("wh1st1se1" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se10" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se11" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se12" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se2" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se3" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se4" , cms.untracked.vint32(50, 48, 50, 13) ),
            ("wh1st1se5" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se6" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se7" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se8" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se9" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st2se1" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se10" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se11" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se12" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se2" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se3" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se4" , cms.untracked.vint32(60, 48, 60, 15) ),
            ("wh1st2se5" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se6" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se7" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se8" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se9" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st3se1" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se10" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se11" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se12" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se2" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se3" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se4" , cms.untracked.vint32(72, 48, 72, 18) ),
            ("wh1st3se5" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se6" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se7" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se8" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se9" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st4se1" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se10" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh1st4se11" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("wh1st4se12" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh1st4se13" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh1st4se14" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh1st4se2" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se3" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se4" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh1st4se5" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se6" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se7" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se8" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh1st4se9" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("wh2st1se1" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se10" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se11" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se12" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se2" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se3" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se4" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se5" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se6" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se7" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se8" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se9" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st2se1" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se10" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se11" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se12" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se2" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se3" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se4" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se5" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se6" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se7" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se8" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se9" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st3se1" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se10" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se11" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se12" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se2" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se3" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se4" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se5" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se6" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se7" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se8" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se9" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st4se1" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se10" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh2st4se11" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("wh2st4se12" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh2st4se13" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh2st4se14" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh2st4se2" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se3" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se4" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh2st4se5" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se6" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se7" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se8" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh2st4se9" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("whm1st1se1" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se10" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se11" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se12" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se2" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se3" , cms.untracked.vint32(50, 48, 50, 13) ),
            ("whm1st1se4" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se5" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se6" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se7" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se8" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se9" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st2se1" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se10" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se11" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se12" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se2" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se3" , cms.untracked.vint32(60, 48, 60, 15) ),
            ("whm1st2se4" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se5" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se6" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se7" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se8" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se9" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st3se1" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se10" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se11" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se12" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se2" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se3" , cms.untracked.vint32(72, 48, 72, 18) ),
            ("whm1st3se4" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se5" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se6" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se7" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se8" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se9" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st4se1" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se10" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("whm1st4se11" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("whm1st4se12" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("whm1st4se13" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("whm1st4se14" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("whm1st4se2" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se3" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se4" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("whm1st4se5" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se6" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se7" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se8" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("whm1st4se9" , cms.untracked.vint32(48, 0, 48, 12) ),
        ] +
        [
            ("whm2st1se1" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se10" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se11" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se12" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se2" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se3" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se4" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se5" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se6" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se7" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se8" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se9" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st2se1" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se10" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se11" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se12" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se2" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se3" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se4" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se5" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se6" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se7" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se8" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se9" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st3se1" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se10" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se11" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se12" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se2" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se3" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se4" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se5" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se6" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se7" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se8" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se9" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st4se1" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se10" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("whm2st4se11" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("whm2st4se12" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("whm2st4se13" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("whm2st4se14" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("whm2st4se2" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se3" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se4" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("whm2st4se5" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se6" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se7" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se8" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("whm2st4se9" , cms.untracked.vint32(48, 0, 48, 12) ),
            ]
        )
    )
)

process.DTTPGParametersBlock = cms.PSet(
    DTTPGParameters = cms.PSet(
        Debug = cms.untracked.bool(False),
        SectCollParameters = cms.PSet(
            Debug = cms.untracked.bool(False),
            SCCSP1 = cms.int32(0),
            SCCSP2 = cms.int32(0),
            SCCSP3 = cms.int32(0),
            SCCSP4 = cms.int32(0),
            SCCSP5 = cms.int32(0),
            SCECF1 = cms.bool(False),
            SCECF2 = cms.bool(False),
            SCECF3 = cms.bool(False),
            SCECF4 = cms.bool(False)
        ),
        TUParameters = cms.PSet(
            BtiParameters = cms.PSet(
                AC1 = cms.int32(0),
                AC2 = cms.int32(3),
                ACH = cms.int32(1),
                ACL = cms.int32(2),
                CH = cms.int32(41),
                CL = cms.int32(22),
                DEAD = cms.int32(31),
                Debug = cms.untracked.int32(0),
                KACCTHETA = cms.int32(1),
                KMAX = cms.int32(64),
                LH = cms.int32(21),
                LL = cms.int32(2),
                LTS = cms.int32(3),
                PTMS0 = cms.int32(0),
                PTMS1 = cms.int32(0),
                PTMS10 = cms.int32(1),
                PTMS11 = cms.int32(1),
                PTMS12 = cms.int32(1),
                PTMS13 = cms.int32(1),
                PTMS14 = cms.int32(1),
                PTMS15 = cms.int32(1),
                PTMS16 = cms.int32(1),
                PTMS17 = cms.int32(1),
                PTMS18 = cms.int32(1),
                PTMS19 = cms.int32(1),
                PTMS2 = cms.int32(0),
                PTMS20 = cms.int32(1),
                PTMS21 = cms.int32(1),
                PTMS22 = cms.int32(1),
                PTMS23 = cms.int32(1),
                PTMS24 = cms.int32(1),
                PTMS25 = cms.int32(1),
                PTMS26 = cms.int32(1),
                PTMS27 = cms.int32(1),
                PTMS28 = cms.int32(1),
                PTMS29 = cms.int32(1),
                PTMS3 = cms.int32(0),
                PTMS30 = cms.int32(0),
                PTMS31 = cms.int32(0),
                PTMS4 = cms.int32(1),
                PTMS5 = cms.int32(1),
                PTMS6 = cms.int32(1),
                PTMS7 = cms.int32(1),
                PTMS8 = cms.int32(1),
                PTMS9 = cms.int32(1),
                RE43 = cms.int32(2),
                RH = cms.int32(61),
                RL = cms.int32(42),
                RON = cms.bool(True),
                SET = cms.int32(7),
                ST43 = cms.int32(42),
                WEN0 = cms.int32(1),
                WEN1 = cms.int32(1),
                WEN2 = cms.int32(1),
                WEN3 = cms.int32(1),
                WEN4 = cms.int32(1),
                WEN5 = cms.int32(1),
                WEN6 = cms.int32(1),
                WEN7 = cms.int32(1),
                WEN8 = cms.int32(1),
                XON = cms.bool(False)
            ),
            Debug = cms.untracked.bool(False),
            LutParameters = cms.PSet(
                BTIC = cms.untracked.int32(0),
                D = cms.untracked.double(0),
                Debug = cms.untracked.bool(False),
                WHEEL = cms.untracked.int32(-1),
                XCN = cms.untracked.double(0)
            ),
            TSPhiParameters = cms.PSet(
                Debug = cms.untracked.bool(False),
                TSMCCE1 = cms.bool(True),
                TSMCCE2 = cms.bool(False),
                TSMCCEC = cms.bool(False),
                TSMCGS1 = cms.bool(True),
                TSMCGS2 = cms.bool(True),
                TSMGS1 = cms.int32(1),
                TSMGS2 = cms.int32(1),
                TSMHSP = cms.int32(1),
                TSMHTE1 = cms.bool(True),
                TSMHTE2 = cms.bool(False),
                TSMHTEC = cms.bool(False),
                TSMMSK1 = cms.int32(312),
                TSMMSK2 = cms.int32(312),
                TSMNOE1 = cms.bool(True),
                TSMNOE2 = cms.bool(False),
                TSMNOEC = cms.bool(False),
                TSMWORD = cms.int32(255),
                TSSCCE1 = cms.bool(True),
                TSSCCE2 = cms.bool(False),
                TSSCCEC = cms.bool(False),
                TSSCGS1 = cms.bool(True),
                TSSCGS2 = cms.bool(True),
                TSSGS1 = cms.int32(1),
                TSSGS2 = cms.int32(1),
                TSSHTE1 = cms.bool(True),
                TSSHTE2 = cms.bool(False),
                TSSHTEC = cms.bool(False),
                TSSMSK1 = cms.int32(312),
                TSSMSK2 = cms.int32(312),
                TSSNOE1 = cms.bool(True),
                TSSNOE2 = cms.bool(False),
                TSSNOEC = cms.bool(False),
                TSTREN0 = cms.bool(True),
                TSTREN1 = cms.bool(True),
                TSTREN10 = cms.bool(True),
                TSTREN11 = cms.bool(True),
                TSTREN12 = cms.bool(True),
                TSTREN13 = cms.bool(True),
                TSTREN14 = cms.bool(True),
                TSTREN15 = cms.bool(True),
                TSTREN16 = cms.bool(True),
                TSTREN17 = cms.bool(True),
                TSTREN18 = cms.bool(True),
                TSTREN19 = cms.bool(True),
                TSTREN2 = cms.bool(True),
                TSTREN20 = cms.bool(True),
                TSTREN21 = cms.bool(True),
                TSTREN22 = cms.bool(True),
                TSTREN23 = cms.bool(True),
                TSTREN3 = cms.bool(True),
                TSTREN4 = cms.bool(True),
                TSTREN5 = cms.bool(True),
                TSTREN6 = cms.bool(True),
                TSTREN7 = cms.bool(True),
                TSTREN8 = cms.bool(True),
                TSTREN9 = cms.bool(True)
            ),
            TSThetaParameters = cms.PSet(
                Debug = cms.untracked.bool(False)
            ),
            TracoParameters = cms.PSet(
                BTIC = cms.int32(32),
                DD = cms.int32(18),
                Debug = cms.untracked.int32(0),
                FHISM = cms.int32(0),
                FHTMSK = cms.int32(0),
                FHTPRF = cms.int32(1),
                FLTMSK = cms.int32(1),
                FPRGCOMP = cms.int32(2),
                FSLMSK = cms.int32(0),
                IBTIOFF = cms.int32(0),
                KPRGCOM = cms.int32(255),
                KRAD = cms.int32(0),
                LTF = cms.int32(0),
                LTS = cms.int32(0),
                LVALIDIFH = cms.int32(0),
                REUSEI = cms.int32(1),
                REUSEO = cms.int32(1),
                SHISM = cms.int32(0),
                SHTMSK = cms.int32(0),
                SHTPRF = cms.int32(1),
                SLTMSK = cms.int32(1),
                SPRGCOMP = cms.int32(2),
                SSLMSK = cms.int32(0),
                TRGENB0 = cms.int32(1),
                TRGENB1 = cms.int32(1),
                TRGENB10 = cms.int32(1),
                TRGENB11 = cms.int32(1),
                TRGENB12 = cms.int32(1),
                TRGENB13 = cms.int32(1),
                TRGENB14 = cms.int32(1),
                TRGENB15 = cms.int32(1),
                TRGENB2 = cms.int32(1),
                TRGENB3 = cms.int32(1),
                TRGENB4 = cms.int32(1),
                TRGENB5 = cms.int32(1),
                TRGENB6 = cms.int32(1),
                TRGENB7 = cms.int32(1),
                TRGENB8 = cms.int32(1),
                TRGENB9 = cms.int32(1)
            )
        )
    )
)

process.DTTimingExtractorBlock = cms.PSet(
    DTTimingParameters = cms.PSet(
        DTTimeOffset = cms.double(0.0),
        DoWireCorr = cms.bool(True),
        DropTheta = cms.bool(True),
        HitError = cms.double(2.8),
        HitsMin = cms.int32(3),
        PruneCut = cms.double(5.0),
        RequireBothProjections = cms.bool(False),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring(
                'SteppingHelixPropagatorAny', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite'
            ),
            RPCLayers = cms.bool(True)
        ),
        UseSegmentT0 = cms.bool(False),
        debug = cms.bool(False)
    )
)

process.DefaultAlgorithms = cms.PSet(
    APVInspectMode = cms.string('BaselineFollower'),
    APVRestoreMode = cms.string('BaselineFollower'),
    ApplyBaselineCleaner = cms.bool(True),
    ApplyBaselineRejection = cms.bool(True),
    CleaningSequence = cms.uint32(1),
    CommonModeNoiseSubtractionMode = cms.string('IteratedMedian'),
    CutToAvoidSignal = cms.double(2.0),
    DeltaCMThreshold = cms.uint32(20),
    Deviation = cms.uint32(25),
    ForceNoRestore = cms.bool(False),
    Fraction = cms.double(0.2),
    Iterations = cms.int32(3),
    MeanCM = cms.int32(0),
    PedestalSubtractionFedMode = cms.bool(False),
    SiStripFedZeroSuppressionMode = cms.uint32(4),
    TruncateInSuppressor = cms.bool(True),
    Use10bitsTruncation = cms.bool(False),
    consecThreshold = cms.uint32(5),
    discontinuityThreshold = cms.int32(12),
    distortionThreshold = cms.uint32(20),
    doAPVRestore = cms.bool(True),
    filteredBaselineDerivativeSumSquare = cms.double(30),
    filteredBaselineMax = cms.double(6),
    hitStripThreshold = cms.uint32(40),
    lastGradient = cms.int32(10),
    minStripsToFit = cms.uint32(4),
    nSaturatedStrip = cms.uint32(2),
    nSigmaNoiseDerTh = cms.uint32(4),
    nSmooth = cms.uint32(9),
    restoreThreshold = cms.double(0.5),
    sizeWindow = cms.int32(1),
    slopeX = cms.int32(3),
    slopeY = cms.int32(4),
    useCMMeanMap = cms.bool(False),
    useRealMeanCM = cms.bool(False),
    widthCluster = cms.int32(64)
)

process.DefaultClusterizer = cms.PSet(
    Algorithm = cms.string('ThreeThresholdAlgorithm'),
    ChannelThreshold = cms.double(2.0),
    ClusterThreshold = cms.double(5.0),
    MaxAdjacentBad = cms.uint32(0),
    MaxSequentialBad = cms.uint32(1),
    MaxSequentialHoles = cms.uint32(0),
    QualityLabel = cms.string(''),
    RemoveApvShots = cms.bool(True),
    SeedThreshold = cms.double(3.0),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    )
)

process.DigiToRawFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*'
    )
)

process.EITopPAGEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscriminationByDecayModeFinding_*_*', 
        'keep recoSingleTauDiscriminatorContaineredmValueMap_pfTausDiscriminationByIsolation_*_*', 
        'keep recoPFMETs_pfMetEI_*_*'
    )
)

process.EvtScalersAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*', 
        'keep L1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep LumiScalerss_scalersRawToDigi_*_*', 
        'keep BeamSpotOnlines_scalersRawToDigi_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*'
    )
)

process.EvtScalersRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*', 
        'keep L1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep LumiScalerss_scalersRawToDigi_*_*', 
        'keep BeamSpotOnlines_scalersRawToDigi_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep DcsStatuss_hltScalersRawToDigi_*_*'
    )
)

process.FASTPUEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *', 
        'keep *_fastSimProducer_*_*', 
        'keep *_MuonSimHits_*_*', 
        'drop *_fastSimProducer_VertexTypes_*', 
        'keep *_generalTracksBeforeMixing_*_*', 
        'drop *_generalTracksBeforeMixing_MVAValues_*', 
        'drop *_generalTracksBeforeMixing_QualityMasks_*', 
        'keep edmHepMCProduct_generatorSmeared_*_*'
    )
)

process.FEVTDEBUGEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring( (
        'drop *', 
        'drop *', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep *_simMuonCSCDigis_*_*', 
        'keep *_simMuonRPCDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonME0Digis_*_*', 
        'keep EBSrFlagsSorted_simEcalDigis_*_*', 
        'keep EESrFlagsSorted_simEcalDigis_*_*', 
        'keep *_simHcalUnsuppressedDigis_*_*', 
        'keep *_mix_EETimeDigi_*', 
        'keep *_mix_EBTimeDigi_*', 
        'keep *_simEcalUnsuppressedDigis_*_*', 
        'keep *_simHGCalUnsuppressedDigis_EE_*', 
        'keep *_simHGCalUnsuppressedDigis_HEfront_*', 
        'keep *_simHGCalUnsuppressedDigis_HEback_*', 
        'keep *_mix_MergedCaloTruth_*', 
        'keep *_mix_FTLBarrel_*', 
        'keep *_mix_FTLEndcap_*', 
        'keep *_mix_InitialVertices_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int6stdbitsetstdpairs_*_AffectedAPVList_*', 
        'keep int_*_bunchSpacing_*', 
        'keep *_genPUProtons_*_*', 
        'keep *_mix_MergedTrackTruth_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generatorSmeared_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenJets_ak*_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep PixelFEDChanneledmNewDetSetVector_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep ClusterSummary_clusterSummaryProducer_*_*', 
        'keep *_siPhase2Clusters_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_gemRecHits_*_*', 
        'keep *_gemSegments_*_*', 
        'keep *_me0RecHits_*_*', 
        'keep *_me0Segments_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_hcalDigis_*_*', 
        'keep ZDCDataFramesSorted_castorDigis_*_*', 
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*', 
        'keep ZDCRecHitsSorted_zdcreco_*_*', 
        'keep *_castorreco_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep HcalUnpackerReport_castorDigis_*_*', 
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*', 
        'keep HcalUnpackerReport_hcalDigis_*_*', 
        'keep *_HGCalRecHit_*_*', 
        'keep recoCaloClusters_hgcalLayerClusters_*_*', 
        'keep *_hgcalLayerClusters_timeLayerCluster_*', 
        'keep *_hgcalLayerClusters_InitialLayerClustersMask_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep EBSrFlagsSorted_ecalDigis__*', 
        'keep EESrFlagsSorted_ecalDigis__*', 
        'keep *_mix_EBTimeDigi_*', 
        'keep *_mix_EETimeDigi_*', 
        'keep *_ecalDetailedTimeRecHit_*_*', 
        'keep *_hgcalMultiClusters_*_*', 
        'keep *_iterHGCalMultiClusters_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'keep *_particleFlowSuperClusterOOTECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterHGCal__*', 
        'keep recoCaloClusters_particleFlowSuperClusterHGCal__*', 
        'keep recoSuperClusters_particleFlowSuperClusterHGCalFromMultiCl__*', 
        'keep recoCaloClusters_particleFlowSuperClusterHGCalFromMultiCl__*', 
        'keep *_particleFlowSuperClusterHGCal_*_*', 
        'keep *_particleFlowSuperClusterHGCalFromMultiCl_*_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_GsfGlobalElectronTest_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTracks_electronGsfTracksFromMultiCl_*_*', 
        'keep recoGsfTracks_electronGsfTracksFromMultiCl_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracksFromMultiCl_*_*', 
        'keep recoTrackExtras_electronGsfTracksFromMultiCl_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracksFromMultiCl_*_*', 
        'keep *_electronMergedSeedsFromMultiCl_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep recoTracks_cosmicDCTracks_*_*', 
        'keep recoTrackExtras_cosmicDCTracks_*_*', 
        'keep TrackingRecHitsOwned_cosmicDCTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTracks_ctfPixelLess_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_dedxPixelHarmonic2_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep *_generalTracks_MVAValues_*', 
        'keep *_generalTracks_MVAVals_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep recoCaloJets_ak4CaloJets_*_*', 
        'keep *_ak4CaloJets_rho_*', 
        'keep *_ak4CaloJets_sigma_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep floatedmValueMap_puppi_*_*', 
        'keep *_ak4PFJetsPuppi_*_*', 
        'keep *_ak8PFJetsPuppi_*_*', 
        'keep *_ak8PFJetsPuppiSoftDrop_*_*', 
        'keep recoPFJets_ak4PFJets_*_*', 
        'keep *_ak4PFJets_rho_*', 
        'keep *_ak4PFJets_sigma_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep recoBasicJets_ak5CastorJets_*_*', 
        'keep *_ak5CastorJets_rho_*', 
        'keep *_ak5CastorJets_sigma_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep recoBasicJets_ak7CastorJets_*_*', 
        'keep *_ak7CastorJets_rho_*', 
        'keep *_ak7CastorJets_sigma_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRhoAll_*_*', 
        'keep *_fixedGridRhoFastjetAll_*_*', 
        'keep *_fixedGridRhoFastjetAllTmp_*_*', 
        'keep *_fixedGridRhoFastjetCentral_*_*', 
        'keep *_fixedGridRhoFastjetAllCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*', 
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*', 
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep recoEcalHaloData_EcalHaloData_*_*', 
        'keep recoHcalHaloData_HcalHaloData_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep floatedmValueMap_puppiNoLep_*_*', 
        'keep recoPFMETs_pfMetPuppi_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep recoGlobalHaloData_GlobalHaloData_*_*', 
        'keep recoCSCHaloData_CSCHaloData_*_*', 
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muons_*_*', 
        'keep doubleedmValueMap_muons_muPFMean*_*', 
        'keep doubleedmValueMap_muons_muPFSum*_*', 
        'keep *_muons_muonShowerInformation_*', 
        'keep recoMuonTimeExtraedmValueMap_muons_*_*', 
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*', 
        'keep uintedmValueMap_muons_*_*', 
        'keep *_particleFlow_muons_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfGhostTrackVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfGhostTrackBJetTags_*_*', 
        'keep *_pfCombinedMVAV2BJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*', 
        'keep *_pfCombinedCvsLJetTags_*_*', 
        'keep *_pfCombinedCvsBJetTags_*_*', 
        'keep *_pfChargeBJetTags_*_*', 
        'keep *_pfDeepCSVJetTags_*_*', 
        'keep *_pfDeepCMVAJetTags_*_*', 
        'keep *_pixelClusterTagInfos_*_*', 
        'keep *_hpsPFTauDiscriminationByLooseElectronRejection_*_*', 
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*', 
        'keep recoPFTaus_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauBasicDiscriminators_*_*', 
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*', 
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*', 
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep *_hpsPFTauDiscriminationByMVA6ElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBdR03oldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWdR03oldDMwLT_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep *_offlinePrimaryVerticesWithBS_*_*', 
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep *_offlinePrimaryVertices4D__*', 
        'keep *_offlinePrimaryVertices4DWithBS__*', 
        'keep *_trackTimeValueMapProducer_*_*', 
        'keep *_offlinePrimaryVertices4DnoPID__*', 
        'keep *_offlinePrimaryVertices4DnoPIDWithBS__*', 
        'keep *_tofPID_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectrons_gedGsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep recoPhotonCores_gedPhotonCore_*_*', 
        'keep recoPhotons_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_ootPhotonCore_*_*', 
        'keep recoPhotons_ootPhotons_*_*', 
        'keep recoConversions_conversions_*_*', 
        'drop recoConversions_conversions_uncleanedConversions_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'keep *_gsfTracksOpenConversions_*_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFromConversions_*_*', 
        'keep recoTracks_ckfInOutTracksFromConversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*', 
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*', 
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*', 
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*', 
        'keep *_lowPtGsfToTrackLinks_*_*', 
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*', 
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*', 
        'keep floatedmValueMap_lowPtGsfElectronID_*_*', 
        'keep *_ecalDrivenGsfElectronCores_*_*', 
        'keep *_ecalDrivenGsfElectrons_*_*', 
        'keep *_ecalDrivenGsfElectronCoresFromMultiCl_*_*', 
        'keep *_ecalDrivenGsfElectronsFromMultiCl_*_*', 
        'keep *_photonCoreFromMultiCl_*_*', 
        'keep *_photonsFromMultiCl_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterHF_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_particleFlow_muons_*', 
        'keep recoCaloClusters_pfElectronTranslator_*_*', 
        'keep recoPreshowerClusters_pfElectronTranslator_*_*', 
        'keep recoSuperClusters_pfElectronTranslator_*_*', 
        'keep recoCaloClusters_pfPhotonTranslator_*_*', 
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*', 
        'keep recoSuperClusters_pfPhotonTranslator_*_*', 
        'keep recoPhotons_pfPhotonTranslator_*_*', 
        'keep recoPhotonCores_pfPhotonTranslator_*_*', 
        'keep recoConversions_pfPhotonTranslator_*_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_chargedHadronPFTrackIsolation_*_*', 
        'keep recoPFRecHits_particleFlowRecHitHGC_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterHGCal__*', 
        'keep recoPFClusters_particleFlowClusterHGCalFromMultiCl__*', 
        'keep recoSuperClusters_simPFProducer_*_*', 
        'keep *_ecalBarrelClusterFastTimer_*_*', 
        'keep *_particleFlowSuperClusterHGCalFromMultiCl_*_*', 
        'keep recoPFBlocks_simPFProducer_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'keep *_gtStage2Digis_*_*', 
        'keep *_gmtStage2Digis_*_*', 
        'keep *_caloStage2Digis_*_*', 
        'drop *_hlt*_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generatorSmeared_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep SimTracks_g4SimHits_*_*', 
        'keep SimVertexs_g4SimHits_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep *_muonSimClassifier_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonME0Digis_*_*', 
        'keep *_simHGCalUnsuppressedDigis_EE_*', 
        'keep *_simHGCalUnsuppressedDigis_HEfront_*', 
        'keep *_simHGCalUnsuppressedDigis_HEback_*', 
        'keep *_mix_MergedCaloTruth_*', 
        'keep *_mix_FTLBarrel_*', 
        'keep *_mix_FTLEndcap_*', 
        'keep *_mix_InitialVertices_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep *_genPUProtons_*_*', 
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*', 
        'keep L1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep LumiScalerss_scalersRawToDigi_*_*', 
        'keep BeamSpotOnlines_scalersRawToDigi_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep DcsStatuss_hltScalersRawToDigi_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscriminationByDecayModeFinding_*_*', 
        'keep recoSingleTauDiscriminatorContaineredmValueMap_pfTausDiscriminationByIsolation_*_*', 
        'keep recoPFMETs_pfMetEI_*_*', 
        'keep CTPPSRecord_onlineMetaDataDigis_*_*', 
        'keep DCSRecord_onlineMetaDataDigis_*_*', 
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*', 
        'keep recoBeamSpot_onlineMetaDataDigis_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_ticlTrackstersTrkEM_*_*', 
        'keep *_ticlTrackstersEM_*_*', 
        'keep *_ticlTrackstersHAD_*_*', 
        'keep *_ticlTrackstersTrk_*_*', 
        'keep *_ticlTrackstersMIP_*_*', 
        'keep *_ticlTrackstersMerge_*_*', 
        'keep *_ticlTrackstersHFNoseEM_*_*', 
        'keep *_ticlTrackstersHFNoseMIP_*_*', 
        'keep *_ticlTrackstersHFNoseMerge_*_*', 
        'keep *_pfTICL_*_*', 
        'keep *_ticlMultiClustersFromTrackstersEM_*_*', 
        'keep *_ticlMultiClustersFromTrackstersHAD_*_*', 
        'keep *_ticlMultiClustersFromTrackstersTrk_*_*', 
        'keep *_ticlMultiClustersFromTrackstersTrkEM_*_*', 
        'keep *_ticlMultiClustersFromTrackstersMIP_*_*', 
        'keep *_ticlMultiClustersFromTrackstersMerge_*_*', 
        'keep *_simCscTriggerPrimitiveDigis_*_*', 
        'keep *_simDtTriggerPrimitiveDigis_*_*', 
        'keep *_simRpcTriggerDigis_*_*', 
        'keep *_simRctDigis_*_*', 
        'keep *_simCsctfDigis_*_*', 
        'keep *_simCsctfTrackDigis_*_*', 
        'keep *_simDttfDigis_*_*', 
        'keep *_simGctDigis_*_*', 
        'keep *_simCaloStage1Digis_*_*', 
        'keep *_simCaloStage1FinalDigis_*_*', 
        'keep *_simCaloStage2Layer1Digis_*_*', 
        'keep *_simCaloStage2Digis_*_*', 
        'keep *_simGmtDigis_*_*', 
        'keep *_simBmtfDigis_*_*', 
        'keep *_simKBmtfDigis_*_*', 
        'keep *_simOmtfDigis_*_*', 
        'keep *_simEmtfDigis_*_*', 
        'keep *_simGmtStage2Digis_*_*', 
        'keep *_simGtDigis_*_*', 
        'keep *_simGtStage2Digis_*_*', 
        'keep *_cscTriggerPrimitiveDigis_*_*', 
        'keep *_dtTriggerPrimitiveDigis_*_*', 
        'keep *_rpcTriggerDigis_*_*', 
        'keep *_rctDigis_*_*', 
        'keep *_csctfDigis_*_*', 
        'keep *_csctfTrackDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gctDigis_*_*', 
        'keep *_gmtDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_gtEvmDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'keep *_gtStage2Digis_*_*', 
        'keep *_gmtStage2Digis_*_*', 
        'keep *_caloStage2Digis_*_*', 
        'keep l1tHGCalTriggerCellBXVector_hgcalVFEProducer_*_*', 
        'keep l1tHGCalTriggerCellBXVector_hgcalConcentratorProducer_*_*', 
        'keep l1tHGCalTowerBXVector_hgcalTowerProducer_*_*', 
        'keep l1tHGCalClusterBXVector_hgcalBackEndLayer1Producer_*_*', 
        'keep l1tHGCalMulticlusterBXVector_hgcalBackEndLayer2Producer_*_*', 
        'keep *_simMuonGEMPadDigis_*_*', 
        'keep *_simMuonGEMPadDigiClusters_*_*', 
        'keep *_simMuonME0PadDigis__*', 
        'keep *_me0TriggerDigis__*', 
        'keep *_simMuonME0PseudoReDigisCoarse__*', 
        'keep *_me0RecHitsCoarse__*', 
        'keep *_me0TriggerPseudoDigis__*', 
        'keep *_me0TriggerConvertedPseudoDigis__*', 
        'keep *_simKBmtfDigis_*_*', 
        'keep *_hgcalVFEProducerhgcalConcentratorProducer_*_*', 
        'keep *_hgcalBackEndLayer1Producer_*_*', 
        'keep *_hgcalBackEndLayer2Producer_*_*', 
        'keep *_hgcalTowerMapProducer_*_*', 
        'keep *_hgcalTowerProducer_*_*', 
        'keep *_L1EGammaClusterEmuProducer_*_*', 
        'keep *_l1EGammaEEProducer_*_*', 
        'keep *_L1TkPrimaryVertex_*_*', 
        'keep *_L1TkElectronsCrystal_*_*', 
        'keep *_L1TkElectronsLooseCrystal_*_*', 
        'keep *_L1TkElectronsEllipticMatchCrystal_*_*', 
        'keep *_L1TkIsoElectronsCrystal_*_*', 
        'keep *_L1TkPhotonsCrystal_*_*', 
        'keep *_L1TkElectronsHGC_*_*', 
        'keep *_L1TkElectronsEllipticMatchHGC_*_*', 
        'keep *_L1TkIsoElectronsHGC_*_*', 
        'keep *_L1TkPhotonsHGC_*_*', 
        'keep *_L1TkMuons_*_*', 
        'keep *_pfClustersFromL1EGClusters_*_*', 
        'keep *_pfClustersFromCombinedCaloHCal_*_*', 
        'keep *_pfClustersFromCombinedCaloHF_*_*', 
        'keep *_pfClustersFromHGC3DClusters_*_*', 
        'keep *_pfTracksFromL1TracksBarrel_*_*', 
        'keep *_l1pfProducerBarrel_*_*', 
        'keep *_pfTracksFromL1TracksHGCal_*_*', 
        'keep *_l1pfProducerHGCal_*_*', 
        'keep *_l1pfProducerHGCalNoTK_*_*', 
        'keep *_l1pfProducerHF_*_*', 
        'keep *_l1pfCandidates_*_*', 
        'keep *_ak4PFL1Calo_*_*', 
        'keep *_ak4PFL1PF_*_*', 
        'keep *_ak4PFL1Puppi_*_*', 
        'keep *_ak4PFL1CaloCorrected_*_*', 
        'keep *_ak4PFL1PFCorrected_*_*', 
        'keep *_ak4PFL1PuppiCorrected_*_*', 
        'keep *_Phase1L1TJetProducer_*_*', 
        'keep *_Phase1L1TJetCalibrator_*_*', 
        'keep *_l1PFMetCalo_*_*', 
        'keep *_l1PFMetPF_*_*', 
        'keep *_l1PFMetPuppi_*_*', 
        'keep *_l1NNTauProducer_*_*', 
        'keep *_l1NNTauProducerPuppi_*_*', 
        'keep *_TTStubsFromPhase2TrackerDigis_*_*', 
        'keep *_TTClustersFromPhase2TrackerDigis_*_*', 
        'keep *_TTTracksFromExtendedTrackletEmulation_*_*', 
        'keep *_TTTracksFromTrackletEmulation_*_*', 
        'drop *_trackingtruthprod_*_*', 
        'drop *_electrontruth_*_*', 
        'keep *_mix_MergedTrackTruth_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep *_simSiPixelDigis_*_*', 
        'keep *_simSiStripDigis_*_*', 
        'drop *_mix_simSiPixelDigis*_*', 
        'drop *_mix_simSiStripDigis*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep *_trackingParticleRecoTrackAsssociation_*_*', 
        'keep *_assoc2secStepTk_*_*', 
        'keep *_assoc2thStepTk_*_*', 
        'keep *_assoc2GsfTracks_*_*', 
        'keep *_assocOutInConversionTracks_*_*', 
        'keep *_assocInOutConversionTracks_*_*', 
        'keep *_TTClusterAssociatorFromPixelDigis_*_*', 
        'keep *_TTStubAssociatorFromPixelDigis_*_*', 
        'keep *_simMuonCSCDigis_*_*', 
        'keep *_simMuonDTDigis_*_*', 
        'keep *_simMuonRPCDigis_*_*', 
        'keep *_simMuonGEMDigis_*_*', 
        'keep *_simMuonME0PseudoDigis_*_*', 
        'keep *_simMuonME0PseudoReDigis_*_*', 
        'keep *_simMuonME0Digis_*_*', 
        'keep *_simEcalDigis_*_*', 
        'keep *_simEcalPreshowerDigis_*_*', 
        'keep *_simEcalTriggerPrimitiveDigis_*_*', 
        'keep *_simEcalEBTriggerPrimitiveDigis_*_*', 
        'keep *_simHcalDigis_*_*', 
        'keep ZDCDataFramesSorted_simHcalUnsuppressedDigis_*_*', 
        'drop ZDCDataFramesSorted_mix_simHcalUnsuppressedDigis*_*', 
        'keep *_simHcalTriggerPrimitiveDigis_*_*', 
        'keep *_mix_HcalSamples_*', 
        'keep *_mixData_HcalSamples_*', 
        'keep *_mix_HcalHits_*', 
        'keep *_mixData_HcalHits_*', 
        'keep *_DMHcalTriggerPrimitiveDigis_*_*', 
        'keep *_simHcalUnsuppressedDigis_*_*', 
        'keep *_DMHcalDigis_*_*', 
        'keep *_mix_EETimeDigi_*', 
        'keep *_mix_EBTimeDigi_*', 
        'keep *_simEcalUnsuppressedDigis_*_*', 
        'keep *_simHGCalUnsuppressedDigis_EE_*', 
        'keep *_simHGCalUnsuppressedDigis_HEfront_*', 
        'keep *_simHGCalUnsuppressedDigis_HEback_*', 
        'keep *_mix_MergedCaloTruth_*', 
        'keep *_mix_FTLBarrel_*', 
        'keep *_mix_FTLEndcap_*', 
        'keep *_mix_InitialVertices_*', 
        'keep Phase2TrackerDigiedmDetSetVector_mix_*_*', 
        'keep *_TTClustersFromPhase2TrackerDigis_*_*', 
        'keep *_TTStubsFromPhase2TrackerDigis_*_*', 
        'keep *_TrackerDTC_*_*', 
        'keep *_muonGEMDigis_*_*', 
        'keep *_muonGEMDigis_*_*', 
        'keep *_mtdUncalibratedRecHits_*_*', 
        'keep *_mtdRecHits_*_*', 
        'keep *_mtdClusters_*_*', 
        'keep *_mtdTrackingRecHits_*_*', 
        'keep *_trackExtenderWithMTD_*_*', 
        'keep *_mtdTrackQualityMVA_*_*'
     ) ),
    splitLevel = cms.untracked.int32(0)
)

process.FEVTDEBUGHLTEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring( (
        'drop *', 
        'drop *', 
        'drop *', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep *_simMuonCSCDigis_*_*', 
        'keep *_simMuonRPCDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonME0Digis_*_*', 
        'keep EBSrFlagsSorted_simEcalDigis_*_*', 
        'keep EESrFlagsSorted_simEcalDigis_*_*', 
        'keep *_simHcalUnsuppressedDigis_*_*', 
        'keep *_mix_EETimeDigi_*', 
        'keep *_mix_EBTimeDigi_*', 
        'keep *_simEcalUnsuppressedDigis_*_*', 
        'keep *_simHGCalUnsuppressedDigis_EE_*', 
        'keep *_simHGCalUnsuppressedDigis_HEfront_*', 
        'keep *_simHGCalUnsuppressedDigis_HEback_*', 
        'keep *_mix_MergedCaloTruth_*', 
        'keep *_mix_FTLBarrel_*', 
        'keep *_mix_FTLEndcap_*', 
        'keep *_mix_InitialVertices_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int6stdbitsetstdpairs_*_AffectedAPVList_*', 
        'keep int_*_bunchSpacing_*', 
        'keep *_genPUProtons_*_*', 
        'keep *_mix_MergedTrackTruth_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generatorSmeared_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenJets_ak*_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep PixelFEDChanneledmNewDetSetVector_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep ClusterSummary_clusterSummaryProducer_*_*', 
        'keep *_siPhase2Clusters_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_gemRecHits_*_*', 
        'keep *_gemSegments_*_*', 
        'keep *_me0RecHits_*_*', 
        'keep *_me0Segments_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_hcalDigis_*_*', 
        'keep ZDCDataFramesSorted_castorDigis_*_*', 
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*', 
        'keep ZDCRecHitsSorted_zdcreco_*_*', 
        'keep *_castorreco_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep HcalUnpackerReport_castorDigis_*_*', 
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*', 
        'keep HcalUnpackerReport_hcalDigis_*_*', 
        'keep *_HGCalRecHit_*_*', 
        'keep recoCaloClusters_hgcalLayerClusters_*_*', 
        'keep *_hgcalLayerClusters_timeLayerCluster_*', 
        'keep *_hgcalLayerClusters_InitialLayerClustersMask_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep EBSrFlagsSorted_ecalDigis__*', 
        'keep EESrFlagsSorted_ecalDigis__*', 
        'keep *_mix_EBTimeDigi_*', 
        'keep *_mix_EETimeDigi_*', 
        'keep *_ecalDetailedTimeRecHit_*_*', 
        'keep *_hgcalMultiClusters_*_*', 
        'keep *_iterHGCalMultiClusters_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'keep *_particleFlowSuperClusterOOTECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterHGCal__*', 
        'keep recoCaloClusters_particleFlowSuperClusterHGCal__*', 
        'keep recoSuperClusters_particleFlowSuperClusterHGCalFromMultiCl__*', 
        'keep recoCaloClusters_particleFlowSuperClusterHGCalFromMultiCl__*', 
        'keep *_particleFlowSuperClusterHGCal_*_*', 
        'keep *_particleFlowSuperClusterHGCalFromMultiCl_*_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_GsfGlobalElectronTest_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTracks_electronGsfTracksFromMultiCl_*_*', 
        'keep recoGsfTracks_electronGsfTracksFromMultiCl_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracksFromMultiCl_*_*', 
        'keep recoTrackExtras_electronGsfTracksFromMultiCl_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracksFromMultiCl_*_*', 
        'keep *_electronMergedSeedsFromMultiCl_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep recoTracks_cosmicDCTracks_*_*', 
        'keep recoTrackExtras_cosmicDCTracks_*_*', 
        'keep TrackingRecHitsOwned_cosmicDCTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTracks_ctfPixelLess_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_dedxPixelHarmonic2_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep *_generalTracks_MVAValues_*', 
        'keep *_generalTracks_MVAVals_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep recoCaloJets_ak4CaloJets_*_*', 
        'keep *_ak4CaloJets_rho_*', 
        'keep *_ak4CaloJets_sigma_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep floatedmValueMap_puppi_*_*', 
        'keep *_ak4PFJetsPuppi_*_*', 
        'keep *_ak8PFJetsPuppi_*_*', 
        'keep *_ak8PFJetsPuppiSoftDrop_*_*', 
        'keep recoPFJets_ak4PFJets_*_*', 
        'keep *_ak4PFJets_rho_*', 
        'keep *_ak4PFJets_sigma_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep recoBasicJets_ak5CastorJets_*_*', 
        'keep *_ak5CastorJets_rho_*', 
        'keep *_ak5CastorJets_sigma_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep recoBasicJets_ak7CastorJets_*_*', 
        'keep *_ak7CastorJets_rho_*', 
        'keep *_ak7CastorJets_sigma_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRhoAll_*_*', 
        'keep *_fixedGridRhoFastjetAll_*_*', 
        'keep *_fixedGridRhoFastjetAllTmp_*_*', 
        'keep *_fixedGridRhoFastjetCentral_*_*', 
        'keep *_fixedGridRhoFastjetAllCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*', 
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*', 
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep recoEcalHaloData_EcalHaloData_*_*', 
        'keep recoHcalHaloData_HcalHaloData_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep floatedmValueMap_puppiNoLep_*_*', 
        'keep recoPFMETs_pfMetPuppi_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep recoGlobalHaloData_GlobalHaloData_*_*', 
        'keep recoCSCHaloData_CSCHaloData_*_*', 
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muons_*_*', 
        'keep doubleedmValueMap_muons_muPFMean*_*', 
        'keep doubleedmValueMap_muons_muPFSum*_*', 
        'keep *_muons_muonShowerInformation_*', 
        'keep recoMuonTimeExtraedmValueMap_muons_*_*', 
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*', 
        'keep uintedmValueMap_muons_*_*', 
        'keep *_particleFlow_muons_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfGhostTrackVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfGhostTrackBJetTags_*_*', 
        'keep *_pfCombinedMVAV2BJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*', 
        'keep *_pfCombinedCvsLJetTags_*_*', 
        'keep *_pfCombinedCvsBJetTags_*_*', 
        'keep *_pfChargeBJetTags_*_*', 
        'keep *_pfDeepCSVJetTags_*_*', 
        'keep *_pfDeepCMVAJetTags_*_*', 
        'keep *_pixelClusterTagInfos_*_*', 
        'keep *_hpsPFTauDiscriminationByLooseElectronRejection_*_*', 
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*', 
        'keep recoPFTaus_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauBasicDiscriminators_*_*', 
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*', 
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*', 
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep *_hpsPFTauDiscriminationByMVA6ElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBdR03oldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWdR03oldDMwLT_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep *_offlinePrimaryVerticesWithBS_*_*', 
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep *_offlinePrimaryVertices4D__*', 
        'keep *_offlinePrimaryVertices4DWithBS__*', 
        'keep *_trackTimeValueMapProducer_*_*', 
        'keep *_offlinePrimaryVertices4DnoPID__*', 
        'keep *_offlinePrimaryVertices4DnoPIDWithBS__*', 
        'keep *_tofPID_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectrons_gedGsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep recoPhotonCores_gedPhotonCore_*_*', 
        'keep recoPhotons_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_ootPhotonCore_*_*', 
        'keep recoPhotons_ootPhotons_*_*', 
        'keep recoConversions_conversions_*_*', 
        'drop recoConversions_conversions_uncleanedConversions_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'keep *_gsfTracksOpenConversions_*_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFromConversions_*_*', 
        'keep recoTracks_ckfInOutTracksFromConversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*', 
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*', 
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*', 
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*', 
        'keep *_lowPtGsfToTrackLinks_*_*', 
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*', 
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*', 
        'keep floatedmValueMap_lowPtGsfElectronID_*_*', 
        'keep *_ecalDrivenGsfElectronCores_*_*', 
        'keep *_ecalDrivenGsfElectrons_*_*', 
        'keep *_ecalDrivenGsfElectronCoresFromMultiCl_*_*', 
        'keep *_ecalDrivenGsfElectronsFromMultiCl_*_*', 
        'keep *_photonCoreFromMultiCl_*_*', 
        'keep *_photonsFromMultiCl_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterHF_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_particleFlow_muons_*', 
        'keep recoCaloClusters_pfElectronTranslator_*_*', 
        'keep recoPreshowerClusters_pfElectronTranslator_*_*', 
        'keep recoSuperClusters_pfElectronTranslator_*_*', 
        'keep recoCaloClusters_pfPhotonTranslator_*_*', 
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*', 
        'keep recoSuperClusters_pfPhotonTranslator_*_*', 
        'keep recoPhotons_pfPhotonTranslator_*_*', 
        'keep recoPhotonCores_pfPhotonTranslator_*_*', 
        'keep recoConversions_pfPhotonTranslator_*_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_chargedHadronPFTrackIsolation_*_*', 
        'keep recoPFRecHits_particleFlowRecHitHGC_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterHGCal__*', 
        'keep recoPFClusters_particleFlowClusterHGCalFromMultiCl__*', 
        'keep recoSuperClusters_simPFProducer_*_*', 
        'keep *_ecalBarrelClusterFastTimer_*_*', 
        'keep *_particleFlowSuperClusterHGCalFromMultiCl_*_*', 
        'keep recoPFBlocks_simPFProducer_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'keep *_gtStage2Digis_*_*', 
        'keep *_gmtStage2Digis_*_*', 
        'keep *_caloStage2Digis_*_*', 
        'drop *_hlt*_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generatorSmeared_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep SimTracks_g4SimHits_*_*', 
        'keep SimVertexs_g4SimHits_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep *_muonSimClassifier_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonME0Digis_*_*', 
        'keep *_simHGCalUnsuppressedDigis_EE_*', 
        'keep *_simHGCalUnsuppressedDigis_HEfront_*', 
        'keep *_simHGCalUnsuppressedDigis_HEback_*', 
        'keep *_mix_MergedCaloTruth_*', 
        'keep *_mix_FTLBarrel_*', 
        'keep *_mix_FTLEndcap_*', 
        'keep *_mix_InitialVertices_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep *_genPUProtons_*_*', 
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*', 
        'keep L1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep LumiScalerss_scalersRawToDigi_*_*', 
        'keep BeamSpotOnlines_scalersRawToDigi_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep DcsStatuss_hltScalersRawToDigi_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscriminationByDecayModeFinding_*_*', 
        'keep recoSingleTauDiscriminatorContaineredmValueMap_pfTausDiscriminationByIsolation_*_*', 
        'keep recoPFMETs_pfMetEI_*_*', 
        'keep CTPPSRecord_onlineMetaDataDigis_*_*', 
        'keep DCSRecord_onlineMetaDataDigis_*_*', 
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*', 
        'keep recoBeamSpot_onlineMetaDataDigis_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_ticlTrackstersTrkEM_*_*', 
        'keep *_ticlTrackstersEM_*_*', 
        'keep *_ticlTrackstersHAD_*_*', 
        'keep *_ticlTrackstersTrk_*_*', 
        'keep *_ticlTrackstersMIP_*_*', 
        'keep *_ticlTrackstersMerge_*_*', 
        'keep *_ticlTrackstersHFNoseEM_*_*', 
        'keep *_ticlTrackstersHFNoseMIP_*_*', 
        'keep *_ticlTrackstersHFNoseMerge_*_*', 
        'keep *_pfTICL_*_*', 
        'keep *_ticlMultiClustersFromTrackstersEM_*_*', 
        'keep *_ticlMultiClustersFromTrackstersHAD_*_*', 
        'keep *_ticlMultiClustersFromTrackstersTrk_*_*', 
        'keep *_ticlMultiClustersFromTrackstersTrkEM_*_*', 
        'keep *_ticlMultiClustersFromTrackstersMIP_*_*', 
        'keep *_ticlMultiClustersFromTrackstersMerge_*_*', 
        'keep *_simCscTriggerPrimitiveDigis_*_*', 
        'keep *_simDtTriggerPrimitiveDigis_*_*', 
        'keep *_simRpcTriggerDigis_*_*', 
        'keep *_simRctDigis_*_*', 
        'keep *_simCsctfDigis_*_*', 
        'keep *_simCsctfTrackDigis_*_*', 
        'keep *_simDttfDigis_*_*', 
        'keep *_simGctDigis_*_*', 
        'keep *_simCaloStage1Digis_*_*', 
        'keep *_simCaloStage1FinalDigis_*_*', 
        'keep *_simCaloStage2Layer1Digis_*_*', 
        'keep *_simCaloStage2Digis_*_*', 
        'keep *_simGmtDigis_*_*', 
        'keep *_simBmtfDigis_*_*', 
        'keep *_simKBmtfDigis_*_*', 
        'keep *_simOmtfDigis_*_*', 
        'keep *_simEmtfDigis_*_*', 
        'keep *_simGmtStage2Digis_*_*', 
        'keep *_simGtDigis_*_*', 
        'keep *_simGtStage2Digis_*_*', 
        'keep *_cscTriggerPrimitiveDigis_*_*', 
        'keep *_dtTriggerPrimitiveDigis_*_*', 
        'keep *_rpcTriggerDigis_*_*', 
        'keep *_rctDigis_*_*', 
        'keep *_csctfDigis_*_*', 
        'keep *_csctfTrackDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gctDigis_*_*', 
        'keep *_gmtDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_gtEvmDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'keep *_gtStage2Digis_*_*', 
        'keep *_gmtStage2Digis_*_*', 
        'keep *_caloStage2Digis_*_*', 
        'keep l1tHGCalTriggerCellBXVector_hgcalVFEProducer_*_*', 
        'keep l1tHGCalTriggerCellBXVector_hgcalConcentratorProducer_*_*', 
        'keep l1tHGCalTowerBXVector_hgcalTowerProducer_*_*', 
        'keep l1tHGCalClusterBXVector_hgcalBackEndLayer1Producer_*_*', 
        'keep l1tHGCalMulticlusterBXVector_hgcalBackEndLayer2Producer_*_*', 
        'keep *_simMuonGEMPadDigis_*_*', 
        'keep *_simMuonGEMPadDigiClusters_*_*', 
        'keep *_simMuonME0PadDigis__*', 
        'keep *_me0TriggerDigis__*', 
        'keep *_simMuonME0PseudoReDigisCoarse__*', 
        'keep *_me0RecHitsCoarse__*', 
        'keep *_me0TriggerPseudoDigis__*', 
        'keep *_me0TriggerConvertedPseudoDigis__*', 
        'keep *_simKBmtfDigis_*_*', 
        'keep *_hgcalVFEProducerhgcalConcentratorProducer_*_*', 
        'keep *_hgcalBackEndLayer1Producer_*_*', 
        'keep *_hgcalBackEndLayer2Producer_*_*', 
        'keep *_hgcalTowerMapProducer_*_*', 
        'keep *_hgcalTowerProducer_*_*', 
        'keep *_L1EGammaClusterEmuProducer_*_*', 
        'keep *_l1EGammaEEProducer_*_*', 
        'keep *_L1TkPrimaryVertex_*_*', 
        'keep *_L1TkElectronsCrystal_*_*', 
        'keep *_L1TkElectronsLooseCrystal_*_*', 
        'keep *_L1TkElectronsEllipticMatchCrystal_*_*', 
        'keep *_L1TkIsoElectronsCrystal_*_*', 
        'keep *_L1TkPhotonsCrystal_*_*', 
        'keep *_L1TkElectronsHGC_*_*', 
        'keep *_L1TkElectronsEllipticMatchHGC_*_*', 
        'keep *_L1TkIsoElectronsHGC_*_*', 
        'keep *_L1TkPhotonsHGC_*_*', 
        'keep *_L1TkMuons_*_*', 
        'keep *_pfClustersFromL1EGClusters_*_*', 
        'keep *_pfClustersFromCombinedCaloHCal_*_*', 
        'keep *_pfClustersFromCombinedCaloHF_*_*', 
        'keep *_pfClustersFromHGC3DClusters_*_*', 
        'keep *_pfTracksFromL1TracksBarrel_*_*', 
        'keep *_l1pfProducerBarrel_*_*', 
        'keep *_pfTracksFromL1TracksHGCal_*_*', 
        'keep *_l1pfProducerHGCal_*_*', 
        'keep *_l1pfProducerHGCalNoTK_*_*', 
        'keep *_l1pfProducerHF_*_*', 
        'keep *_l1pfCandidates_*_*', 
        'keep *_ak4PFL1Calo_*_*', 
        'keep *_ak4PFL1PF_*_*', 
        'keep *_ak4PFL1Puppi_*_*', 
        'keep *_ak4PFL1CaloCorrected_*_*', 
        'keep *_ak4PFL1PFCorrected_*_*', 
        'keep *_ak4PFL1PuppiCorrected_*_*', 
        'keep *_Phase1L1TJetProducer_*_*', 
        'keep *_Phase1L1TJetCalibrator_*_*', 
        'keep *_l1PFMetCalo_*_*', 
        'keep *_l1PFMetPF_*_*', 
        'keep *_l1PFMetPuppi_*_*', 
        'keep *_l1NNTauProducer_*_*', 
        'keep *_l1NNTauProducerPuppi_*_*', 
        'keep *_TTStubsFromPhase2TrackerDigis_*_*', 
        'keep *_TTClustersFromPhase2TrackerDigis_*_*', 
        'keep *_TTTracksFromExtendedTrackletEmulation_*_*', 
        'keep *_TTTracksFromTrackletEmulation_*_*', 
        'drop *_trackingtruthprod_*_*', 
        'drop *_electrontruth_*_*', 
        'keep *_mix_MergedTrackTruth_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep *_simSiPixelDigis_*_*', 
        'keep *_simSiStripDigis_*_*', 
        'drop *_mix_simSiPixelDigis*_*', 
        'drop *_mix_simSiStripDigis*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep *_trackingParticleRecoTrackAsssociation_*_*', 
        'keep *_assoc2secStepTk_*_*', 
        'keep *_assoc2thStepTk_*_*', 
        'keep *_assoc2GsfTracks_*_*', 
        'keep *_assocOutInConversionTracks_*_*', 
        'keep *_assocInOutConversionTracks_*_*', 
        'keep *_TTClusterAssociatorFromPixelDigis_*_*', 
        'keep *_TTStubAssociatorFromPixelDigis_*_*', 
        'keep *_simMuonCSCDigis_*_*', 
        'keep *_simMuonDTDigis_*_*', 
        'keep *_simMuonRPCDigis_*_*', 
        'keep *_simMuonGEMDigis_*_*', 
        'keep *_simMuonME0PseudoDigis_*_*', 
        'keep *_simMuonME0PseudoReDigis_*_*', 
        'keep *_simMuonME0Digis_*_*', 
        'keep *_simEcalDigis_*_*', 
        'keep *_simEcalPreshowerDigis_*_*', 
        'keep *_simEcalTriggerPrimitiveDigis_*_*', 
        'keep *_simEcalEBTriggerPrimitiveDigis_*_*', 
        'keep *_simHcalDigis_*_*', 
        'keep ZDCDataFramesSorted_simHcalUnsuppressedDigis_*_*', 
        'drop ZDCDataFramesSorted_mix_simHcalUnsuppressedDigis*_*', 
        'keep *_simHcalTriggerPrimitiveDigis_*_*', 
        'keep *_mix_HcalSamples_*', 
        'keep *_mixData_HcalSamples_*', 
        'keep *_mix_HcalHits_*', 
        'keep *_mixData_HcalHits_*', 
        'keep *_DMHcalTriggerPrimitiveDigis_*_*', 
        'keep *_simHcalUnsuppressedDigis_*_*', 
        'keep *_DMHcalDigis_*_*', 
        'keep *_mix_EETimeDigi_*', 
        'keep *_mix_EBTimeDigi_*', 
        'keep *_simEcalUnsuppressedDigis_*_*', 
        'keep *_simHGCalUnsuppressedDigis_EE_*', 
        'keep *_simHGCalUnsuppressedDigis_HEfront_*', 
        'keep *_simHGCalUnsuppressedDigis_HEback_*', 
        'keep *_mix_MergedCaloTruth_*', 
        'keep *_mix_FTLBarrel_*', 
        'keep *_mix_FTLEndcap_*', 
        'keep *_mix_InitialVertices_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*', 
        'keep *_hltAK4CaloJetsIDPassed_*_*', 
        'keep *_hltAK4CaloJets_*_*', 
        'keep *_hltAK4PFJetsCorrected_*_*', 
        'keep *_hltAK4PFJetsForTaus_*_*', 
        'keep *_hltAK4PFJets_*_*', 
        'keep *_hltAlCaEtaEBRechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaEtaEBRechitsToDigis_*_*', 
        'keep *_hltAlCaEtaEERechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaEtaEERechitsToDigis_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegionalLowPU_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegional_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilter_*_*', 
        'keep *_hltAlCaPhiSymStream_*_*', 
        'keep *_hltAlCaPi0EBRechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaPi0EBRechitsToDigis_*_*', 
        'keep *_hltAlCaPi0EERechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaPi0EERechitsToDigis_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegionalLowPU_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegional_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilter_*_*', 
        'keep *_hltBLifetimeL25AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeRegionalCtfWithMaterialTracksbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonMu5L3_*_*', 
        'keep *_hltCSVJetTagSingleTopEle27_*_*', 
        'keep *_hltCSVJetTagSingleTopIsoMu24_*_*', 
        'keep *_hltCaloJetCorrectedRegional_*_*', 
        'keep *_hltCaloJetCorrected_*_*', 
        'keep *_hltCaloJetL1FastJetCorrected_*_*', 
        'keep *_hltCaloStage2Digis_*_*', 
        'keep *_hltCleanedCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCleanedHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsCalo_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsPF_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFindingIsolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFinding_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5Isolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5_*_*', 
        'keep *_hltConvPFTausTightIso_*_*', 
        'keep *_hltConvPFTausTrackFindingLooseIsolation_*_*', 
        'keep *_hltConvPFTausTrackFinding_*_*', 
        'keep *_hltConvPFTaus_*_*', 
        'keep *_hltCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltCsc2DRecHits_*_*', 
        'keep *_hltCscSegments_*_*', 
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsCalo_*_*', 
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsInfosCalo_*_*', 
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsInfos_*_*', 
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsPF_*_*', 
        'keep *_hltDisplacedhltIter4PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolationProng4L1HLTMatched_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolationProng4_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolation_*_*', 
        'keep *_hltDoublePFTau25TrackPt5_*_*', 
        'keep *_hltDoublePFTau25_*_*', 
        'keep *_hltDoublePFTauTightIso45Track5_*_*', 
        'keep *_hltDoublePFTauTightIso45Track_*_*', 
        'keep *_hltDt4DSegments_*_*', 
        'keep *_hltEcalPhiSymFilter_*_*', 
        'keep *_hltEcalRecHitAll_*_*', 
        'keep *_hltEcalRecHit_*_*', 
        'keep *_hltEgammaCandidates_*_*', 
        'keep *_hltEgammaGsfElectrons_*_*', 
        'keep *_hltEgammaGsfTracks_*_*', 
        'keep *_hltEle20CaloIdVTCaloIsoTTrkIdTTrkIsoTTrackIsoFilterL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltEle20CaloIdVTTrkIdTDphiFilter_*_*', 
        'keep *_hltEle27WP85PixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltElectronsVertex_*_*', 
        'keep *_hltFEDSelectorLumiPixels_*_*', 
        'keep *_hltFastPVPixelTracksMerger_*_*', 
        'keep *_hltFastPVPixelTracksRecover_*_*', 
        'keep *_hltFastPVPixelTracks_*_*', 
        'keep *_hltFastPVPixelVertices3D_*_*', 
        'keep *_hltFastPVPixelVertices_*_*', 
        'keep *_hltFastPixelBLifetimeL3TagInfos_*_*', 
        'keep *_hltFastPrimaryVertex_*_*', 
        'keep *_hltFilterDoubleIsoPFTau45Trk5LeadTrack5IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterL2EtCutDoublePFIsoTau45Trk5_*_*', 
        'keep *_hltFilterL2EtCutSingleIsoPFTau35Trk20MET70_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20LeadTrackPt20_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET60LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET70LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltFullIterativeTrackingMergedForRefPP_*_*', 
        'keep *_hltGmtStage2Digis_*_*', 
        'keep *_hltGoodOnlinePVs_*_*', 
        'keep *_hltGtStage2Digis_*_*', 
        'keep *_hltHICaloJetCorrected_*_*', 
        'keep *_hltHICaloJetIDPassed_*_*', 
        'keep *_hltHIGoodLooseTracks_*_*', 
        'keep *_hltHIPixel3PrimTracks_*_*', 
        'keep *_hltHISelectedVertex_*_*', 
        'keep *_hltHISiPixelClusters_*_*', 
        'keep *_hltHITIPTCorrectorHB_*_*', 
        'keep *_hltHITIPTCorrectorHE_*_*', 
        'keep *_hltHbhereco_*_*', 
        'keep *_hltHfreco_*_*', 
        'keep *_hltHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltHiCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltHiIslandSuperClustersHI_*_*', 
        'keep *_hltHoreco_*_*', 
        'keep *_hltIsolPixelTrackProdHB_*_*', 
        'keep *_hltIsolPixelTrackProdHE_*_*', 
        'keep *_hltIter0ElectronsTrackSelectionHighPurity_*_*', 
        'keep *_hltIter0HighPtTkMuPixelTracks_*_*', 
        'keep *_hltIter0HighPtTkMuTrackSelectionHighPurity_*_*', 
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter1Merged_*_*', 
        'keep *_hltIter1PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter2HighPtTkMuMerged_*_*', 
        'keep *_hltIter2HighPtTkMuTrackSelectionHighPurity_*_*', 
        'keep *_hltIter2IterL3FromL1MuonMerged_*_*', 
        'keep *_hltIter2IterL3MuonMerged_*_*', 
        'keep *_hltIter2MergedForBTag_*_*', 
        'keep *_hltIter2MergedForElectrons_*_*', 
        'keep *_hltIter2Merged_*_*', 
        'keep *_hltIter2PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter3Merged_*_*', 
        'keep *_hltIter4Merged_*_*', 
        'keep *_hltIterL3GlbMuon_*_*', 
        'keep *_hltIterL3MuonAndMuonFromL1Merged_*_*', 
        'keep *_hltIterL3MuonMerged_*_*', 
        'keep *_hltIterL3MuonsNoID_*_*', 
        'keep *_hltIterL3Muons_*_*', 
        'keep *_hltIterL3OIMuonTrackSelectionHighPurity_*_*', 
        'keep *_hltIterativeCone5PileupSubtractionCaloJets_*_*', 
        'keep *_hltL1HLTSingleIsoPFTau35Trk20Met60JetsMatch_*_*', 
        'keep *_hltL1IsoElectronTrackIsol_*_*', 
        'keep *_hltL1NonIsoElectronTrackIsol_*_*', 
        'keep *_hltL1SeededRecoEcalCandidate_*_*', 
        'keep *_hltL1sDoubleTauJet44Eta2p17orDoubleJet64Central_*_*', 
        'keep *_hltL1sDoubleTauJet44erorDoubleJetC64_*_*', 
        'keep *_hltL1sL1EG18er_*_*', 
        'keep *_hltL1sL1ETM36ORETM40_*_*', 
        'keep *_hltL1sL1Jet52ETM30_*_*', 
        'keep *_hltL1sL1SingleEG12_*_*', 
        'keep *_hltL1sL1SingleEG15_*_*', 
        'keep *_hltL1sL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltL1sL1SingleMu10_*_*', 
        'keep *_hltL1sL1SingleMu14Eta2p1_*_*', 
        'keep *_hltL1sMu16Eta2p1_*_*', 
        'keep *_hltL2MuonCandidatesNoVtx_*_*', 
        'keep *_hltL2MuonCandidates_*_*', 
        'keep *_hltL2MuonSeeds_*_*', 
        'keep *_hltL2Muons_*_*', 
        'keep *_hltL2TauJets_*_*', 
        'keep *_hltL3MuonCandidates_*_*', 
        'keep *_hltL3MuonsIOHit_*_*', 
        'keep *_hltL3MuonsLinksCombination_*_*', 
        'keep *_hltL3MuonsOIHit_*_*', 
        'keep *_hltL3MuonsOIState_*_*', 
        'keep *_hltL3Muons_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuons_*_*', 
        'keep *_hltL3SecondaryVertexTagInfos_*_*', 
        'keep *_hltL3TkFromL2OICombination_*_*', 
        'keep *_hltL3TkTracksFromL2IOHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIState_*_*', 
        'keep *_hltL3TkTracksFromL2_*_*', 
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIState_*_*', 
        'keep *_hltL3TrajSeedIOHit_*_*', 
        'keep *_hltL3TrajSeedOIHit_*_*', 
        'keep *_hltL3TrajSeedOIState_*_*', 
        'keep *_hltL3TrajectorySeed_*_*', 
        'keep *_hltL3crIsoL1sMu16Eta2p1L1f0L2f16QL3f18QL3crIsoRhoFiltered0p15_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopEle27_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopIsoMu24_*_*', 
        'keep *_hltMergedTracks_*_*', 
        'keep *_hltMet_*_*', 
        'keep *_hltMu8Ele17CaloIdTCaloIsoVLPixelMatchFilter_*_*', 
        'keep *_hltMuTrackJpsiCtfTrackCands_*_*', 
        'keep *_hltMuTrackJpsiPixelTrackCands_*_*', 
        'keep *_hltMuonCSCDigis_*_*', 
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*', 
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*', 
        'keep *_hltMuonDTDigis_*_*', 
        'keep *_hltMuonRPCDigis_*_*', 
        'keep *_hltOnlineBeamSpot_*_*', 
        'keep *_hltOnlinePrimaryVertices_*_*', 
        'keep *_hltOverlapFilterEle20LooseIsoPFTau20OldVersion_*_*', 
        'keep *_hltOverlapFilterIsoEle20MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15IsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15TightIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu18LooseIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu18PFTau25TrackPt5Prong4_*_*', 
        'keep *_hltPFJetForBtag_*_*', 
        'keep *_hltPFMuonMerging_*_*', 
        'keep *_hltPFTau15TrackLooseIso_*_*', 
        'keep *_hltPFTau15Track_*_*', 
        'keep *_hltPFTau15_*_*', 
        'keep *_hltPFTau20IsoMuVertex_*_*', 
        'keep *_hltPFTau20TrackLooseIso_*_*', 
        'keep *_hltPFTau20Track_*_*', 
        'keep *_hltPFTau20_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolationProng4IsoMuVertex_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolationProng4_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolation_*_*', 
        'keep *_hltPFTau25TrackPt5_*_*', 
        'keep *_hltPFTau25_*_*', 
        'keep *_hltPFTau35TrackPt20LooseIsoProng2_*_*', 
        'keep *_hltPFTau35TrackPt20LooseIso_*_*', 
        'keep *_hltPFTau35TrackPt20_*_*', 
        'keep *_hltPFTau35Track_*_*', 
        'keep *_hltPFTau35_*_*', 
        'keep *_hltPFTauEleVertex20_*_*', 
        'keep *_hltPFTauJetTracksAssociator_*_*', 
        'keep *_hltPFTauMediumIso20TrackMediumIso_*_*', 
        'keep *_hltPFTauMediumIso20Track_*_*', 
        'keep *_hltPFTauMediumIso20_*_*', 
        'keep *_hltPFTauMediumIso35Track_*_*', 
        'keep *_hltPFTauMediumIso35_*_*', 
        'keep *_hltPFTauTagInfo_*_*', 
        'keep *_hltPFTauTightIso20TrackTightIso_*_*', 
        'keep *_hltPFTauTightIso20Track_*_*', 
        'keep *_hltPFTauTightIso20_*_*', 
        'keep *_hltPFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltParticleFlowForTaus_*_*', 
        'keep *_hltParticleFlow_*_*', 
        'keep *_hltPixelMatch3HitElectronsActivity_*_*', 
        'keep *_hltPixelMatch3HitElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchCleanElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchElectronsActivity_*_*', 
        'keep *_hltPixelMatchElectronsL1Iso_*_*', 
        'keep *_hltPixelMatchElectronsL1NonIso_*_*', 
        'keep *_hltPixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltPixelTracksElectrons_*_*', 
        'keep *_hltPixelTracksMerged_*_*', 
        'keep *_hltPixelTracks_*_*', 
        'keep *_hltPixelVertices3DbbPhi_*_*', 
        'keep *_hltPixelVertices_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC4_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC5_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidate_*_*', 
        'keep *_hltRpcRecHits_*_*', 
        'keep *_hltSelector4CentralJetsL1FastJet_*_*', 
        'keep *_hltSelector8CentralJetsL1FastJet_*_*', 
        'keep *_hltSelectorJets20L1FastJet_*_*', 
        'keep *_hltSiPixelCluster_*_*', 
        'keep *_hltSiPixelClustersCache_*_*', 
        'keep *_hltSiPixelClusters_*_*', 
        'keep *_hltSiStripClusters_*_*', 
        'keep *_hltSiStripRawToClustersFacility_*_*', 
        'keep *_hltSingleMu15L3Filtered15_*_*', 
        'keep *_hltSingleMuIsoL1s14L3IsoFiltered15eta2p1_*_*', 
        'keep *_hltSingleMuIsoL3IsoFiltered15_*_*', 
        'keep *_hltTowerMakerForAll_*_*', 
        'keep *_hltTowerMakerForMuons_*_*', 
        'keep *_hltTriggerSummaryAOD_*_*', 
        'keep *_hltTriggerSummaryRAW_*_*', 
        'keep *_hltTrimmedPixelVertices_*_*', 
        'keep *_hltVerticesL3_*_*', 
        'keep *_hltVerticesPFFilter_*_*', 
        'keep *_hltVerticesPFSelector_*_*', 
        'keep DcsStatuss_hltScalersRawToDigi_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_rawDataRepacker_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajSeedOIHit_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajectorySeed_*_*', 
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*', 
        'keep LumiScalerss_hltScalersRawToDigi_*_*', 
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIHit_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIState_*_*', 
        'keep TrackingRecHitsOwned_hltL3Muons_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep recoCaloJets_*_*_*', 
        'keep recoCaloMETs_*_*_*', 
        'keep recoCaloMETs_hltMet_*_*', 
        'keep recoCompositeCandidates_*_*_*', 
        'keep recoElectrons_*_*_*', 
        'keep recoIsolatedPixelTrackCandidates_*_*_*', 
        'keep recoMETs_*_*_*', 
        'keep recoPFJets_*_*_*', 
        'keep recoPFTaus_*_*_*', 
        'keep recoRecoChargedCandidates_*_*_*', 
        'keep recoRecoChargedCandidates_hltHIL3MuonCandidates_*_*', 
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidates_*_*_*', 
        'keep recoRecoEcalCandidates_hltL1IsoRecoEcalCandidate_*_*', 
        'keep recoRecoEcalCandidates_hltL1NonIsoRecoEcalCandidate_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIHit_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3MuonsOIHit_*_*', 
        'keep recoTracks_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3Muons_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIHit_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIState_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2_*_*', 
        'keep triggerTriggerEventWithRefs_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep triggerTriggerFilterObjectWithRefs_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep *_*_MergedTrackTruth_*', 
        'keep *_*_StripDigiSimLink_*', 
        'keep *_*_PixelDigiSimLink_*', 
        'keep Phase2TrackerDigiedmDetSetVector_mix_*_*', 
        'keep *_TTClustersFromPhase2TrackerDigis_*_*', 
        'keep *_TTStubsFromPhase2TrackerDigis_*_*', 
        'keep *_TrackerDTC_*_*', 
        'keep *_muonGEMDigis_*_*', 
        'keep *_muonGEMDigis_*_*', 
        'keep *_mtdUncalibratedRecHits_*_*', 
        'keep *_mtdRecHits_*_*', 
        'keep *_mtdClusters_*_*', 
        'keep *_mtdTrackingRecHits_*_*', 
        'keep *_trackExtenderWithMTD_*_*', 
        'keep *_mtdTrackQualityMVA_*_*'
     ) ),
    splitLevel = cms.untracked.int32(0)
)

process.FEVTEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring( (
        'drop *', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep PixelFEDChanneledmNewDetSetVector_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep ClusterSummary_clusterSummaryProducer_*_*', 
        'keep *_siPhase2Clusters_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_gemRecHits_*_*', 
        'keep *_gemSegments_*_*', 
        'keep *_me0RecHits_*_*', 
        'keep *_me0Segments_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_hcalDigis_*_*', 
        'keep ZDCDataFramesSorted_castorDigis_*_*', 
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*', 
        'keep ZDCRecHitsSorted_zdcreco_*_*', 
        'keep *_castorreco_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep HcalUnpackerReport_castorDigis_*_*', 
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*', 
        'keep HcalUnpackerReport_hcalDigis_*_*', 
        'keep *_HGCalRecHit_*_*', 
        'keep recoCaloClusters_hgcalLayerClusters_*_*', 
        'keep *_hgcalLayerClusters_timeLayerCluster_*', 
        'keep *_hgcalLayerClusters_InitialLayerClustersMask_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep EBSrFlagsSorted_ecalDigis__*', 
        'keep EESrFlagsSorted_ecalDigis__*', 
        'keep *_mix_EBTimeDigi_*', 
        'keep *_mix_EETimeDigi_*', 
        'keep *_ecalDetailedTimeRecHit_*_*', 
        'keep *_hgcalMultiClusters_*_*', 
        'keep *_iterHGCalMultiClusters_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'keep *_particleFlowSuperClusterOOTECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterHGCal__*', 
        'keep recoCaloClusters_particleFlowSuperClusterHGCal__*', 
        'keep recoSuperClusters_particleFlowSuperClusterHGCalFromMultiCl__*', 
        'keep recoCaloClusters_particleFlowSuperClusterHGCalFromMultiCl__*', 
        'keep *_particleFlowSuperClusterHGCal_*_*', 
        'keep *_particleFlowSuperClusterHGCalFromMultiCl_*_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_GsfGlobalElectronTest_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTracks_electronGsfTracksFromMultiCl_*_*', 
        'keep recoGsfTracks_electronGsfTracksFromMultiCl_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracksFromMultiCl_*_*', 
        'keep recoTrackExtras_electronGsfTracksFromMultiCl_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracksFromMultiCl_*_*', 
        'keep *_electronMergedSeedsFromMultiCl_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep recoTracks_cosmicDCTracks_*_*', 
        'keep recoTrackExtras_cosmicDCTracks_*_*', 
        'keep TrackingRecHitsOwned_cosmicDCTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTracks_ctfPixelLess_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_dedxPixelHarmonic2_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep *_generalTracks_MVAValues_*', 
        'keep *_generalTracks_MVAVals_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep recoCaloJets_ak4CaloJets_*_*', 
        'keep *_ak4CaloJets_rho_*', 
        'keep *_ak4CaloJets_sigma_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep floatedmValueMap_puppi_*_*', 
        'keep *_ak4PFJetsPuppi_*_*', 
        'keep *_ak8PFJetsPuppi_*_*', 
        'keep *_ak8PFJetsPuppiSoftDrop_*_*', 
        'keep recoPFJets_ak4PFJets_*_*', 
        'keep *_ak4PFJets_rho_*', 
        'keep *_ak4PFJets_sigma_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep recoBasicJets_ak5CastorJets_*_*', 
        'keep *_ak5CastorJets_rho_*', 
        'keep *_ak5CastorJets_sigma_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep recoBasicJets_ak7CastorJets_*_*', 
        'keep *_ak7CastorJets_rho_*', 
        'keep *_ak7CastorJets_sigma_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRhoAll_*_*', 
        'keep *_fixedGridRhoFastjetAll_*_*', 
        'keep *_fixedGridRhoFastjetAllTmp_*_*', 
        'keep *_fixedGridRhoFastjetCentral_*_*', 
        'keep *_fixedGridRhoFastjetAllCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*', 
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*', 
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep recoEcalHaloData_EcalHaloData_*_*', 
        'keep recoHcalHaloData_HcalHaloData_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep floatedmValueMap_puppiNoLep_*_*', 
        'keep recoPFMETs_pfMetPuppi_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep recoGlobalHaloData_GlobalHaloData_*_*', 
        'keep recoCSCHaloData_CSCHaloData_*_*', 
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muons_*_*', 
        'keep doubleedmValueMap_muons_muPFMean*_*', 
        'keep doubleedmValueMap_muons_muPFSum*_*', 
        'keep *_muons_muonShowerInformation_*', 
        'keep recoMuonTimeExtraedmValueMap_muons_*_*', 
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*', 
        'keep uintedmValueMap_muons_*_*', 
        'keep *_particleFlow_muons_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfGhostTrackVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfGhostTrackBJetTags_*_*', 
        'keep *_pfCombinedMVAV2BJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*', 
        'keep *_pfCombinedCvsLJetTags_*_*', 
        'keep *_pfCombinedCvsBJetTags_*_*', 
        'keep *_pfChargeBJetTags_*_*', 
        'keep *_pfDeepCSVJetTags_*_*', 
        'keep *_pfDeepCMVAJetTags_*_*', 
        'keep *_pixelClusterTagInfos_*_*', 
        'keep *_hpsPFTauDiscriminationByLooseElectronRejection_*_*', 
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*', 
        'keep recoPFTaus_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauBasicDiscriminators_*_*', 
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*', 
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*', 
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep *_hpsPFTauDiscriminationByMVA6ElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBdR03oldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWdR03oldDMwLT_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep *_offlinePrimaryVerticesWithBS_*_*', 
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep *_offlinePrimaryVertices4D__*', 
        'keep *_offlinePrimaryVertices4DWithBS__*', 
        'keep *_trackTimeValueMapProducer_*_*', 
        'keep *_offlinePrimaryVertices4DnoPID__*', 
        'keep *_offlinePrimaryVertices4DnoPIDWithBS__*', 
        'keep *_tofPID_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectrons_gedGsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep recoPhotonCores_gedPhotonCore_*_*', 
        'keep recoPhotons_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_ootPhotonCore_*_*', 
        'keep recoPhotons_ootPhotons_*_*', 
        'keep recoConversions_conversions_*_*', 
        'drop recoConversions_conversions_uncleanedConversions_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'keep *_gsfTracksOpenConversions_*_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFromConversions_*_*', 
        'keep recoTracks_ckfInOutTracksFromConversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*', 
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*', 
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*', 
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*', 
        'keep *_lowPtGsfToTrackLinks_*_*', 
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*', 
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*', 
        'keep floatedmValueMap_lowPtGsfElectronID_*_*', 
        'keep *_ecalDrivenGsfElectronCores_*_*', 
        'keep *_ecalDrivenGsfElectrons_*_*', 
        'keep *_ecalDrivenGsfElectronCoresFromMultiCl_*_*', 
        'keep *_ecalDrivenGsfElectronsFromMultiCl_*_*', 
        'keep *_photonCoreFromMultiCl_*_*', 
        'keep *_photonsFromMultiCl_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterHF_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_particleFlow_muons_*', 
        'keep recoCaloClusters_pfElectronTranslator_*_*', 
        'keep recoPreshowerClusters_pfElectronTranslator_*_*', 
        'keep recoSuperClusters_pfElectronTranslator_*_*', 
        'keep recoCaloClusters_pfPhotonTranslator_*_*', 
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*', 
        'keep recoSuperClusters_pfPhotonTranslator_*_*', 
        'keep recoPhotons_pfPhotonTranslator_*_*', 
        'keep recoPhotonCores_pfPhotonTranslator_*_*', 
        'keep recoConversions_pfPhotonTranslator_*_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_chargedHadronPFTrackIsolation_*_*', 
        'keep recoPFRecHits_particleFlowRecHitHGC_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterHGCal__*', 
        'keep recoPFClusters_particleFlowClusterHGCalFromMultiCl__*', 
        'keep recoSuperClusters_simPFProducer_*_*', 
        'keep *_ecalBarrelClusterFastTimer_*_*', 
        'keep *_particleFlowSuperClusterHGCalFromMultiCl_*_*', 
        'keep recoPFBlocks_simPFProducer_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'keep *_gtStage2Digis_*_*', 
        'keep *_gmtStage2Digis_*_*', 
        'keep *_caloStage2Digis_*_*', 
        'drop *_hlt*_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*', 
        'keep L1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep LumiScalerss_scalersRawToDigi_*_*', 
        'keep BeamSpotOnlines_scalersRawToDigi_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep DcsStatuss_hltScalersRawToDigi_*_*', 
        'keep CTPPSRecord_onlineMetaDataDigis_*_*', 
        'keep DCSRecord_onlineMetaDataDigis_*_*', 
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*', 
        'keep recoBeamSpot_onlineMetaDataDigis_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscriminationByDecayModeFinding_*_*', 
        'keep recoSingleTauDiscriminatorContaineredmValueMap_pfTausDiscriminationByIsolation_*_*', 
        'keep recoPFMETs_pfMetEI_*_*', 
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*', 
        'keep TotemFEDInfos_totemRPRawToDigi_*_*', 
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*', 
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*', 
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*', 
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*', 
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*', 
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*', 
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*', 
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*', 
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*', 
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*', 
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*', 
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*', 
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*', 
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*', 
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*', 
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*', 
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*', 
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*', 
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*', 
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*', 
        'keep recoForwardProtons_ctppsProtons_*_*', 
        'keep *_ticlTrackstersTrkEM_*_*', 
        'keep *_ticlTrackstersEM_*_*', 
        'keep *_ticlTrackstersHAD_*_*', 
        'keep *_ticlTrackstersTrk_*_*', 
        'keep *_ticlTrackstersMIP_*_*', 
        'keep *_ticlTrackstersMerge_*_*', 
        'keep *_ticlTrackstersHFNoseEM_*_*', 
        'keep *_ticlTrackstersHFNoseMIP_*_*', 
        'keep *_ticlTrackstersHFNoseMerge_*_*', 
        'keep *_pfTICL_*_*', 
        'keep *_ticlMultiClustersFromTrackstersEM_*_*', 
        'keep *_ticlMultiClustersFromTrackstersHAD_*_*', 
        'keep *_ticlMultiClustersFromTrackstersTrk_*_*', 
        'keep *_ticlMultiClustersFromTrackstersTrkEM_*_*', 
        'keep *_ticlMultiClustersFromTrackstersMIP_*_*', 
        'keep *_ticlMultiClustersFromTrackstersMerge_*_*', 
        'keep Phase2TrackerDigiedmDetSetVector_mix_*_*', 
        'keep *_TTClustersFromPhase2TrackerDigis_*_*', 
        'keep *_TTStubsFromPhase2TrackerDigis_*_*', 
        'keep *_TrackerDTC_*_*', 
        'keep *_muonGEMDigis_*_*', 
        'keep *_muonGEMDigis_*_*', 
        'keep *_mtdUncalibratedRecHits_*_*', 
        'keep *_mtdRecHits_*_*', 
        'keep *_mtdClusters_*_*', 
        'keep *_mtdTrackingRecHits_*_*', 
        'keep *_trackExtenderWithMTD_*_*', 
        'keep *_mtdTrackQualityMVA_*_*'
     ) ),
    splitLevel = cms.untracked.int32(0)
)

process.FEVTHLTALLEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring( (
        'drop *', 
        'drop *', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep PixelFEDChanneledmNewDetSetVector_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep ClusterSummary_clusterSummaryProducer_*_*', 
        'keep *_siPhase2Clusters_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_gemRecHits_*_*', 
        'keep *_gemSegments_*_*', 
        'keep *_me0RecHits_*_*', 
        'keep *_me0Segments_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_hcalDigis_*_*', 
        'keep ZDCDataFramesSorted_castorDigis_*_*', 
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*', 
        'keep ZDCRecHitsSorted_zdcreco_*_*', 
        'keep *_castorreco_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep HcalUnpackerReport_castorDigis_*_*', 
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*', 
        'keep HcalUnpackerReport_hcalDigis_*_*', 
        'keep *_HGCalRecHit_*_*', 
        'keep recoCaloClusters_hgcalLayerClusters_*_*', 
        'keep *_hgcalLayerClusters_timeLayerCluster_*', 
        'keep *_hgcalLayerClusters_InitialLayerClustersMask_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep EBSrFlagsSorted_ecalDigis__*', 
        'keep EESrFlagsSorted_ecalDigis__*', 
        'keep *_mix_EBTimeDigi_*', 
        'keep *_mix_EETimeDigi_*', 
        'keep *_ecalDetailedTimeRecHit_*_*', 
        'keep *_hgcalMultiClusters_*_*', 
        'keep *_iterHGCalMultiClusters_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'keep *_particleFlowSuperClusterOOTECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterHGCal__*', 
        'keep recoCaloClusters_particleFlowSuperClusterHGCal__*', 
        'keep recoSuperClusters_particleFlowSuperClusterHGCalFromMultiCl__*', 
        'keep recoCaloClusters_particleFlowSuperClusterHGCalFromMultiCl__*', 
        'keep *_particleFlowSuperClusterHGCal_*_*', 
        'keep *_particleFlowSuperClusterHGCalFromMultiCl_*_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_GsfGlobalElectronTest_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTracks_electronGsfTracksFromMultiCl_*_*', 
        'keep recoGsfTracks_electronGsfTracksFromMultiCl_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracksFromMultiCl_*_*', 
        'keep recoTrackExtras_electronGsfTracksFromMultiCl_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracksFromMultiCl_*_*', 
        'keep *_electronMergedSeedsFromMultiCl_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep recoTracks_cosmicDCTracks_*_*', 
        'keep recoTrackExtras_cosmicDCTracks_*_*', 
        'keep TrackingRecHitsOwned_cosmicDCTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTracks_ctfPixelLess_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_dedxPixelHarmonic2_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep *_generalTracks_MVAValues_*', 
        'keep *_generalTracks_MVAVals_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep recoCaloJets_ak4CaloJets_*_*', 
        'keep *_ak4CaloJets_rho_*', 
        'keep *_ak4CaloJets_sigma_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep floatedmValueMap_puppi_*_*', 
        'keep *_ak4PFJetsPuppi_*_*', 
        'keep *_ak8PFJetsPuppi_*_*', 
        'keep *_ak8PFJetsPuppiSoftDrop_*_*', 
        'keep recoPFJets_ak4PFJets_*_*', 
        'keep *_ak4PFJets_rho_*', 
        'keep *_ak4PFJets_sigma_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep recoBasicJets_ak5CastorJets_*_*', 
        'keep *_ak5CastorJets_rho_*', 
        'keep *_ak5CastorJets_sigma_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep recoBasicJets_ak7CastorJets_*_*', 
        'keep *_ak7CastorJets_rho_*', 
        'keep *_ak7CastorJets_sigma_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRhoAll_*_*', 
        'keep *_fixedGridRhoFastjetAll_*_*', 
        'keep *_fixedGridRhoFastjetAllTmp_*_*', 
        'keep *_fixedGridRhoFastjetCentral_*_*', 
        'keep *_fixedGridRhoFastjetAllCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*', 
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*', 
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep recoEcalHaloData_EcalHaloData_*_*', 
        'keep recoHcalHaloData_HcalHaloData_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep floatedmValueMap_puppiNoLep_*_*', 
        'keep recoPFMETs_pfMetPuppi_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep recoGlobalHaloData_GlobalHaloData_*_*', 
        'keep recoCSCHaloData_CSCHaloData_*_*', 
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muons_*_*', 
        'keep doubleedmValueMap_muons_muPFMean*_*', 
        'keep doubleedmValueMap_muons_muPFSum*_*', 
        'keep *_muons_muonShowerInformation_*', 
        'keep recoMuonTimeExtraedmValueMap_muons_*_*', 
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*', 
        'keep uintedmValueMap_muons_*_*', 
        'keep *_particleFlow_muons_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfGhostTrackVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfGhostTrackBJetTags_*_*', 
        'keep *_pfCombinedMVAV2BJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*', 
        'keep *_pfCombinedCvsLJetTags_*_*', 
        'keep *_pfCombinedCvsBJetTags_*_*', 
        'keep *_pfChargeBJetTags_*_*', 
        'keep *_pfDeepCSVJetTags_*_*', 
        'keep *_pfDeepCMVAJetTags_*_*', 
        'keep *_pixelClusterTagInfos_*_*', 
        'keep *_hpsPFTauDiscriminationByLooseElectronRejection_*_*', 
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*', 
        'keep recoPFTaus_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauBasicDiscriminators_*_*', 
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*', 
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*', 
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep *_hpsPFTauDiscriminationByMVA6ElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBdR03oldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWdR03oldDMwLT_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep *_offlinePrimaryVerticesWithBS_*_*', 
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep *_offlinePrimaryVertices4D__*', 
        'keep *_offlinePrimaryVertices4DWithBS__*', 
        'keep *_trackTimeValueMapProducer_*_*', 
        'keep *_offlinePrimaryVertices4DnoPID__*', 
        'keep *_offlinePrimaryVertices4DnoPIDWithBS__*', 
        'keep *_tofPID_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectrons_gedGsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep recoPhotonCores_gedPhotonCore_*_*', 
        'keep recoPhotons_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_ootPhotonCore_*_*', 
        'keep recoPhotons_ootPhotons_*_*', 
        'keep recoConversions_conversions_*_*', 
        'drop recoConversions_conversions_uncleanedConversions_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'keep *_gsfTracksOpenConversions_*_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFromConversions_*_*', 
        'keep recoTracks_ckfInOutTracksFromConversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*', 
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*', 
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*', 
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*', 
        'keep *_lowPtGsfToTrackLinks_*_*', 
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*', 
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*', 
        'keep floatedmValueMap_lowPtGsfElectronID_*_*', 
        'keep *_ecalDrivenGsfElectronCores_*_*', 
        'keep *_ecalDrivenGsfElectrons_*_*', 
        'keep *_ecalDrivenGsfElectronCoresFromMultiCl_*_*', 
        'keep *_ecalDrivenGsfElectronsFromMultiCl_*_*', 
        'keep *_photonCoreFromMultiCl_*_*', 
        'keep *_photonsFromMultiCl_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterHF_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_particleFlow_muons_*', 
        'keep recoCaloClusters_pfElectronTranslator_*_*', 
        'keep recoPreshowerClusters_pfElectronTranslator_*_*', 
        'keep recoSuperClusters_pfElectronTranslator_*_*', 
        'keep recoCaloClusters_pfPhotonTranslator_*_*', 
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*', 
        'keep recoSuperClusters_pfPhotonTranslator_*_*', 
        'keep recoPhotons_pfPhotonTranslator_*_*', 
        'keep recoPhotonCores_pfPhotonTranslator_*_*', 
        'keep recoConversions_pfPhotonTranslator_*_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_chargedHadronPFTrackIsolation_*_*', 
        'keep recoPFRecHits_particleFlowRecHitHGC_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterHGCal__*', 
        'keep recoPFClusters_particleFlowClusterHGCalFromMultiCl__*', 
        'keep recoSuperClusters_simPFProducer_*_*', 
        'keep *_ecalBarrelClusterFastTimer_*_*', 
        'keep *_particleFlowSuperClusterHGCalFromMultiCl_*_*', 
        'keep recoPFBlocks_simPFProducer_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'keep *_gtStage2Digis_*_*', 
        'keep *_gmtStage2Digis_*_*', 
        'keep *_caloStage2Digis_*_*', 
        'drop *_hlt*_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*', 
        'keep L1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep LumiScalerss_scalersRawToDigi_*_*', 
        'keep BeamSpotOnlines_scalersRawToDigi_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep DcsStatuss_hltScalersRawToDigi_*_*', 
        'keep CTPPSRecord_onlineMetaDataDigis_*_*', 
        'keep DCSRecord_onlineMetaDataDigis_*_*', 
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*', 
        'keep recoBeamSpot_onlineMetaDataDigis_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscriminationByDecayModeFinding_*_*', 
        'keep recoSingleTauDiscriminatorContaineredmValueMap_pfTausDiscriminationByIsolation_*_*', 
        'keep recoPFMETs_pfMetEI_*_*', 
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*', 
        'keep TotemFEDInfos_totemRPRawToDigi_*_*', 
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*', 
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*', 
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*', 
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*', 
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*', 
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*', 
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*', 
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*', 
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*', 
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*', 
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*', 
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*', 
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*', 
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*', 
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*', 
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*', 
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*', 
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*', 
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*', 
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*', 
        'keep recoForwardProtons_ctppsProtons_*_*', 
        'keep *_ticlTrackstersTrkEM_*_*', 
        'keep *_ticlTrackstersEM_*_*', 
        'keep *_ticlTrackstersHAD_*_*', 
        'keep *_ticlTrackstersTrk_*_*', 
        'keep *_ticlTrackstersMIP_*_*', 
        'keep *_ticlTrackstersMerge_*_*', 
        'keep *_ticlTrackstersHFNoseEM_*_*', 
        'keep *_ticlTrackstersHFNoseMIP_*_*', 
        'keep *_ticlTrackstersHFNoseMerge_*_*', 
        'keep *_pfTICL_*_*', 
        'keep *_ticlMultiClustersFromTrackstersEM_*_*', 
        'keep *_ticlMultiClustersFromTrackstersHAD_*_*', 
        'keep *_ticlMultiClustersFromTrackstersTrk_*_*', 
        'keep *_ticlMultiClustersFromTrackstersTrkEM_*_*', 
        'keep *_ticlMultiClustersFromTrackstersMIP_*_*', 
        'keep *_ticlMultiClustersFromTrackstersMerge_*_*', 
        'keep *_*_*_HLT'
     ) ),
    splitLevel = cms.untracked.int32(0)
)

process.FEVTSIMEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring( (
        'drop *', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep *_simMuonCSCDigis_*_*', 
        'keep *_simMuonRPCDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonME0Digis_*_*', 
        'keep EBSrFlagsSorted_simEcalDigis_*_*', 
        'keep EESrFlagsSorted_simEcalDigis_*_*', 
        'keep *_simHcalUnsuppressedDigis_*_*', 
        'keep *_mix_EETimeDigi_*', 
        'keep *_mix_EBTimeDigi_*', 
        'keep *_simEcalUnsuppressedDigis_*_*', 
        'keep *_simHGCalUnsuppressedDigis_EE_*', 
        'keep *_simHGCalUnsuppressedDigis_HEfront_*', 
        'keep *_simHGCalUnsuppressedDigis_HEback_*', 
        'keep *_mix_MergedCaloTruth_*', 
        'keep *_mix_FTLBarrel_*', 
        'keep *_mix_FTLEndcap_*', 
        'keep *_mix_InitialVertices_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int6stdbitsetstdpairs_*_AffectedAPVList_*', 
        'keep int_*_bunchSpacing_*', 
        'keep *_genPUProtons_*_*', 
        'keep *_mix_MergedTrackTruth_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generatorSmeared_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenJets_ak*_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep PixelFEDChanneledmNewDetSetVector_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep ClusterSummary_clusterSummaryProducer_*_*', 
        'keep *_siPhase2Clusters_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_gemRecHits_*_*', 
        'keep *_gemSegments_*_*', 
        'keep *_me0RecHits_*_*', 
        'keep *_me0Segments_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_hcalDigis_*_*', 
        'keep ZDCDataFramesSorted_castorDigis_*_*', 
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*', 
        'keep ZDCRecHitsSorted_zdcreco_*_*', 
        'keep *_castorreco_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep HcalUnpackerReport_castorDigis_*_*', 
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*', 
        'keep HcalUnpackerReport_hcalDigis_*_*', 
        'keep *_HGCalRecHit_*_*', 
        'keep recoCaloClusters_hgcalLayerClusters_*_*', 
        'keep *_hgcalLayerClusters_timeLayerCluster_*', 
        'keep *_hgcalLayerClusters_InitialLayerClustersMask_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep EBSrFlagsSorted_ecalDigis__*', 
        'keep EESrFlagsSorted_ecalDigis__*', 
        'keep *_mix_EBTimeDigi_*', 
        'keep *_mix_EETimeDigi_*', 
        'keep *_ecalDetailedTimeRecHit_*_*', 
        'keep *_hgcalMultiClusters_*_*', 
        'keep *_iterHGCalMultiClusters_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'keep *_particleFlowSuperClusterOOTECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterHGCal__*', 
        'keep recoCaloClusters_particleFlowSuperClusterHGCal__*', 
        'keep recoSuperClusters_particleFlowSuperClusterHGCalFromMultiCl__*', 
        'keep recoCaloClusters_particleFlowSuperClusterHGCalFromMultiCl__*', 
        'keep *_particleFlowSuperClusterHGCal_*_*', 
        'keep *_particleFlowSuperClusterHGCalFromMultiCl_*_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_GsfGlobalElectronTest_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTracks_electronGsfTracksFromMultiCl_*_*', 
        'keep recoGsfTracks_electronGsfTracksFromMultiCl_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracksFromMultiCl_*_*', 
        'keep recoTrackExtras_electronGsfTracksFromMultiCl_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracksFromMultiCl_*_*', 
        'keep *_electronMergedSeedsFromMultiCl_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep recoTracks_cosmicDCTracks_*_*', 
        'keep recoTrackExtras_cosmicDCTracks_*_*', 
        'keep TrackingRecHitsOwned_cosmicDCTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTracks_ctfPixelLess_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_dedxPixelHarmonic2_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep *_generalTracks_MVAValues_*', 
        'keep *_generalTracks_MVAVals_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep recoCaloJets_ak4CaloJets_*_*', 
        'keep *_ak4CaloJets_rho_*', 
        'keep *_ak4CaloJets_sigma_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep floatedmValueMap_puppi_*_*', 
        'keep *_ak4PFJetsPuppi_*_*', 
        'keep *_ak8PFJetsPuppi_*_*', 
        'keep *_ak8PFJetsPuppiSoftDrop_*_*', 
        'keep recoPFJets_ak4PFJets_*_*', 
        'keep *_ak4PFJets_rho_*', 
        'keep *_ak4PFJets_sigma_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep recoBasicJets_ak5CastorJets_*_*', 
        'keep *_ak5CastorJets_rho_*', 
        'keep *_ak5CastorJets_sigma_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep recoBasicJets_ak7CastorJets_*_*', 
        'keep *_ak7CastorJets_rho_*', 
        'keep *_ak7CastorJets_sigma_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRhoAll_*_*', 
        'keep *_fixedGridRhoFastjetAll_*_*', 
        'keep *_fixedGridRhoFastjetAllTmp_*_*', 
        'keep *_fixedGridRhoFastjetCentral_*_*', 
        'keep *_fixedGridRhoFastjetAllCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*', 
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*', 
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep recoEcalHaloData_EcalHaloData_*_*', 
        'keep recoHcalHaloData_HcalHaloData_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep floatedmValueMap_puppiNoLep_*_*', 
        'keep recoPFMETs_pfMetPuppi_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep recoGlobalHaloData_GlobalHaloData_*_*', 
        'keep recoCSCHaloData_CSCHaloData_*_*', 
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muons_*_*', 
        'keep doubleedmValueMap_muons_muPFMean*_*', 
        'keep doubleedmValueMap_muons_muPFSum*_*', 
        'keep *_muons_muonShowerInformation_*', 
        'keep recoMuonTimeExtraedmValueMap_muons_*_*', 
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*', 
        'keep uintedmValueMap_muons_*_*', 
        'keep *_particleFlow_muons_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfGhostTrackVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfGhostTrackBJetTags_*_*', 
        'keep *_pfCombinedMVAV2BJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*', 
        'keep *_pfCombinedCvsLJetTags_*_*', 
        'keep *_pfCombinedCvsBJetTags_*_*', 
        'keep *_pfChargeBJetTags_*_*', 
        'keep *_pfDeepCSVJetTags_*_*', 
        'keep *_pfDeepCMVAJetTags_*_*', 
        'keep *_pixelClusterTagInfos_*_*', 
        'keep *_hpsPFTauDiscriminationByLooseElectronRejection_*_*', 
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*', 
        'keep recoPFTaus_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauBasicDiscriminators_*_*', 
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*', 
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*', 
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep *_hpsPFTauDiscriminationByMVA6ElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBdR03oldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWdR03oldDMwLT_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep *_offlinePrimaryVerticesWithBS_*_*', 
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep *_offlinePrimaryVertices4D__*', 
        'keep *_offlinePrimaryVertices4DWithBS__*', 
        'keep *_trackTimeValueMapProducer_*_*', 
        'keep *_offlinePrimaryVertices4DnoPID__*', 
        'keep *_offlinePrimaryVertices4DnoPIDWithBS__*', 
        'keep *_tofPID_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectrons_gedGsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep recoPhotonCores_gedPhotonCore_*_*', 
        'keep recoPhotons_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_ootPhotonCore_*_*', 
        'keep recoPhotons_ootPhotons_*_*', 
        'keep recoConversions_conversions_*_*', 
        'drop recoConversions_conversions_uncleanedConversions_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'keep *_gsfTracksOpenConversions_*_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFromConversions_*_*', 
        'keep recoTracks_ckfInOutTracksFromConversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*', 
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*', 
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*', 
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*', 
        'keep *_lowPtGsfToTrackLinks_*_*', 
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*', 
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*', 
        'keep floatedmValueMap_lowPtGsfElectronID_*_*', 
        'keep *_ecalDrivenGsfElectronCores_*_*', 
        'keep *_ecalDrivenGsfElectrons_*_*', 
        'keep *_ecalDrivenGsfElectronCoresFromMultiCl_*_*', 
        'keep *_ecalDrivenGsfElectronsFromMultiCl_*_*', 
        'keep *_photonCoreFromMultiCl_*_*', 
        'keep *_photonsFromMultiCl_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterHF_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_particleFlow_muons_*', 
        'keep recoCaloClusters_pfElectronTranslator_*_*', 
        'keep recoPreshowerClusters_pfElectronTranslator_*_*', 
        'keep recoSuperClusters_pfElectronTranslator_*_*', 
        'keep recoCaloClusters_pfPhotonTranslator_*_*', 
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*', 
        'keep recoSuperClusters_pfPhotonTranslator_*_*', 
        'keep recoPhotons_pfPhotonTranslator_*_*', 
        'keep recoPhotonCores_pfPhotonTranslator_*_*', 
        'keep recoConversions_pfPhotonTranslator_*_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_chargedHadronPFTrackIsolation_*_*', 
        'keep recoPFRecHits_particleFlowRecHitHGC_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterHGCal__*', 
        'keep recoPFClusters_particleFlowClusterHGCalFromMultiCl__*', 
        'keep recoSuperClusters_simPFProducer_*_*', 
        'keep *_ecalBarrelClusterFastTimer_*_*', 
        'keep *_particleFlowSuperClusterHGCalFromMultiCl_*_*', 
        'keep recoPFBlocks_simPFProducer_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'keep *_gtStage2Digis_*_*', 
        'keep *_gmtStage2Digis_*_*', 
        'keep *_caloStage2Digis_*_*', 
        'drop *_hlt*_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generatorSmeared_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep SimTracks_g4SimHits_*_*', 
        'keep SimVertexs_g4SimHits_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep *_muonSimClassifier_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonME0Digis_*_*', 
        'keep *_simHGCalUnsuppressedDigis_EE_*', 
        'keep *_simHGCalUnsuppressedDigis_HEfront_*', 
        'keep *_simHGCalUnsuppressedDigis_HEback_*', 
        'keep *_mix_MergedCaloTruth_*', 
        'keep *_mix_FTLBarrel_*', 
        'keep *_mix_FTLEndcap_*', 
        'keep *_mix_InitialVertices_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep *_genPUProtons_*_*', 
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*', 
        'keep L1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep LumiScalerss_scalersRawToDigi_*_*', 
        'keep BeamSpotOnlines_scalersRawToDigi_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep DcsStatuss_hltScalersRawToDigi_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscriminationByDecayModeFinding_*_*', 
        'keep recoSingleTauDiscriminatorContaineredmValueMap_pfTausDiscriminationByIsolation_*_*', 
        'keep recoPFMETs_pfMetEI_*_*', 
        'keep CTPPSRecord_onlineMetaDataDigis_*_*', 
        'keep DCSRecord_onlineMetaDataDigis_*_*', 
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*', 
        'keep recoBeamSpot_onlineMetaDataDigis_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_ticlTrackstersTrkEM_*_*', 
        'keep *_ticlTrackstersEM_*_*', 
        'keep *_ticlTrackstersHAD_*_*', 
        'keep *_ticlTrackstersTrk_*_*', 
        'keep *_ticlTrackstersMIP_*_*', 
        'keep *_ticlTrackstersMerge_*_*', 
        'keep *_ticlTrackstersHFNoseEM_*_*', 
        'keep *_ticlTrackstersHFNoseMIP_*_*', 
        'keep *_ticlTrackstersHFNoseMerge_*_*', 
        'keep *_pfTICL_*_*', 
        'keep *_ticlMultiClustersFromTrackstersEM_*_*', 
        'keep *_ticlMultiClustersFromTrackstersHAD_*_*', 
        'keep *_ticlMultiClustersFromTrackstersTrk_*_*', 
        'keep *_ticlMultiClustersFromTrackstersTrkEM_*_*', 
        'keep *_ticlMultiClustersFromTrackstersMIP_*_*', 
        'keep *_ticlMultiClustersFromTrackstersMerge_*_*'
     ) ),
    splitLevel = cms.untracked.int32(0)
)

process.GENRAWEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generatorSmeared_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep SimTracks_g4SimHits_*_*', 
        'keep SimVertexs_g4SimHits_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep *_muonSimClassifier_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonME0Digis_*_*', 
        'keep *_simHGCalUnsuppressedDigis_EE_*', 
        'keep *_simHGCalUnsuppressedDigis_HEfront_*', 
        'keep *_simHGCalUnsuppressedDigis_HEback_*', 
        'keep *_mix_MergedCaloTruth_*', 
        'keep *_mix_FTLBarrel_*', 
        'keep *_mix_FTLEndcap_*', 
        'keep *_mix_InitialVertices_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep *_genPUProtons_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep recoGenJets_ak*_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep *_logErrorHarvester_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.GeneratorInterfaceAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*'
    )
)

process.GeneratorInterfaceLHE = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep *_externalLHEProducer_LHEScriptOutput_*'
    )
)

process.GeneratorInterfaceRAW = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generatorSmeared_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*'
    )
)

process.GeneratorInterfaceRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generatorSmeared_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*'
    )
)

process.GlobalMuonRefitter = cms.PSet(
    CSCRecSegmentLabel = cms.InputTag("csc2DRecHits"),
    Chi2CutCSC = cms.double(1.0),
    Chi2CutDT = cms.double(30.0),
    Chi2CutGEM = cms.double(1.0),
    Chi2CutME0 = cms.double(1.0),
    Chi2CutRPC = cms.double(1.0),
    Chi2ProbabilityCut = cms.double(30.0),
    DTRecSegmentLabel = cms.InputTag("dt1DRecHits"),
    DYTselector = cms.int32(1),
    DYTthrs = cms.vint32(10, 10),
    DYTthrsParameters = cms.PSet(
        eta0p8 = cms.vdouble(1, -0.919853, 0.990742),
        eta1p2 = cms.vdouble(1, -0.897354, 0.987738),
        eta2p0 = cms.vdouble(4, -0.986855, 0.998516),
        eta2p2 = cms.vdouble(1, -0.940342, 0.992955),
        eta2p4 = cms.vdouble(1, -0.947633, 0.993762)
    ),
    DYTupdator = cms.bool(True),
    DYTuseAPE = cms.bool(False),
    DYTuseThrsParametrization = cms.bool(True),
    DoPredictionsOnly = cms.bool(False),
    Fitter = cms.string('KFFitterForRefitInsideOut'),
    GEMRecHitLabel = cms.InputTag("gemRecHits"),
    HitThreshold = cms.int32(1),
    ME0RecHitLabel = cms.InputTag("me0Segments"),
    MuonHitsOption = cms.int32(1),
    MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
    PropDirForCosmics = cms.bool(False),
    Propagator = cms.string('SmartPropagatorAnyRK'),
    PtCut = cms.double(1.0),
    RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
    RefitDirection = cms.string('insideOut'),
    RefitFlag = cms.bool(True),
    RefitRPCHits = cms.bool(True),
    SkipStation = cms.int32(-1),
    Smoother = cms.string('KFSmootherForRefitInsideOut'),
    TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
    TrackerSkipSection = cms.int32(-1),
    TrackerSkipSystem = cms.int32(-1)
)

process.GlobalMuonTrackMatcher = cms.PSet(
    GlobalMuonTrackMatcher = cms.PSet(
        Chi2Cut_1 = cms.double(50.0),
        Chi2Cut_2 = cms.double(50.0),
        Chi2Cut_3 = cms.double(200.0),
        DeltaDCut_1 = cms.double(2.5),
        DeltaDCut_2 = cms.double(10.0),
        DeltaDCut_3 = cms.double(15.0),
        DeltaRCut_1 = cms.double(0.1),
        DeltaRCut_2 = cms.double(0.2),
        DeltaRCut_3 = cms.double(1.0),
        Eta_threshold = cms.double(1.2),
        LocChi2Cut = cms.double(20.0),
        MinP = cms.double(2.5),
        MinPt = cms.double(1.0),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        Pt_threshold1 = cms.double(0.0),
        Pt_threshold2 = cms.double(999999999.0),
        Quality_1 = cms.double(20.0),
        Quality_2 = cms.double(15.0),
        Quality_3 = cms.double(7.0)
    )
)

process.GlobalTrajectoryBuilderCommon = cms.PSet(
    GlbRefitterParameters = cms.PSet(
        CSCRecSegmentLabel = cms.InputTag("cscSegments"),
        Chi2CutCSC = cms.double(150.0),
        Chi2CutDT = cms.double(10.0),
        Chi2CutGEM = cms.double(1.0),
        Chi2CutME0 = cms.double(1.0),
        Chi2CutRPC = cms.double(1.0),
        Chi2ProbabilityCut = cms.double(30.0),
        DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
        DYTselector = cms.int32(1),
        DYTthrs = cms.vint32(20, 30),
        DYTthrsParameters = cms.PSet(
            eta0p8 = cms.vdouble(1, -0.919853, 0.990742),
            eta1p2 = cms.vdouble(1, -0.897354, 0.987738),
            eta2p0 = cms.vdouble(4, -0.986855, 0.998516),
            eta2p2 = cms.vdouble(1, -0.940342, 0.992955),
            eta2p4 = cms.vdouble(1, -0.947633, 0.993762)
        ),
        DYTupdator = cms.bool(False),
        DYTuseAPE = cms.bool(False),
        DYTuseThrsParametrization = cms.bool(True),
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('GlbMuKFFitter'),
        GEMRecHitLabel = cms.InputTag("gemRecHits"),
        HitThreshold = cms.int32(1),
        ME0RecHitLabel = cms.InputTag("me0Segments"),
        MuonHitsOption = cms.int32(1),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        PropDirForCosmics = cms.bool(False),
        Propagator = cms.string('SmartPropagatorAnyRK'),
        PtCut = cms.double(1.0),
        RefitDirection = cms.string('insideOut'),
        RefitFlag = cms.bool(True),
        RefitRPCHits = cms.bool(True),
        SkipStation = cms.int32(-1),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        TrackerSkipSection = cms.int32(-1),
        TrackerSkipSystem = cms.int32(-1)
    ),
    GlobalMuonTrackMatcher = cms.PSet(
        Chi2Cut_1 = cms.double(50.0),
        Chi2Cut_2 = cms.double(50.0),
        Chi2Cut_3 = cms.double(200.0),
        DeltaDCut_1 = cms.double(2.5),
        DeltaDCut_2 = cms.double(10.0),
        DeltaDCut_3 = cms.double(15.0),
        DeltaRCut_1 = cms.double(0.1),
        DeltaRCut_2 = cms.double(0.2),
        DeltaRCut_3 = cms.double(1.0),
        Eta_threshold = cms.double(1.2),
        LocChi2Cut = cms.double(20.0),
        MinP = cms.double(2.5),
        MinPt = cms.double(1.0),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        Pt_threshold1 = cms.double(0.0),
        Pt_threshold2 = cms.double(999999999.0),
        Quality_1 = cms.double(20.0),
        Quality_2 = cms.double(15.0),
        Quality_3 = cms.double(7.0)
    ),
    MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
    MuonTrackingRegionBuilder = cms.PSet(
        DeltaEta = cms.double(0.2),
        DeltaPhi = cms.double(0.2),
        DeltaR = cms.double(0.2),
        DeltaZ = cms.double(15.9),
        EtaR_UpperLimit_Par1 = cms.double(0.25),
        EtaR_UpperLimit_Par2 = cms.double(0.15),
        Eta_fixed = cms.bool(False),
        Eta_min = cms.double(0.1),
        MeasurementTrackerName = cms.InputTag(""),
        OnDemand = cms.int32(-1),
        PhiR_UpperLimit_Par1 = cms.double(0.6),
        PhiR_UpperLimit_Par2 = cms.double(0.2),
        Phi_fixed = cms.bool(False),
        Phi_min = cms.double(0.1),
        Pt_fixed = cms.bool(False),
        Pt_min = cms.double(1.5),
        Rescale_Dz = cms.double(3.0),
        Rescale_eta = cms.double(3.0),
        Rescale_phi = cms.double(3.0),
        UseVertex = cms.bool(False),
        Z_fixed = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        input = cms.InputTag(""),
        maxRegions = cms.int32(1),
        precise = cms.bool(True),
        vertexCollection = cms.InputTag("")
    ),
    PCut = cms.double(2.5),
    PtCut = cms.double(1.0),
    RefitRPCHits = cms.bool(True),
    ScaleTECxFactor = cms.double(-1.0),
    ScaleTECyFactor = cms.double(-1.0),
    TrackTransformer = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        MTDRecHitBuilder = cms.string('MTDRecHitBuilder'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate')
    ),
    TrackerPropagator = cms.string('SteppingHelixPropagatorAny'),
    TrackerRecHitBuilder = cms.string('WithAngleAndTemplate')
)

process.GroupedCkfTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('Chi2'),
    foundHitBonus = cms.double(10.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(5),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.GroupedCkfTrajectoryBuilderP5 = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('Chi2MeasurementEstimatorForP5'),
    foundHitBonus = cms.double(10.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(1),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('ckfBaseTrajectoryFilterP5')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.HFRecalParameterBlock = cms.PSet(
    HFdepthOneParameterA = cms.vdouble(
        0.004123, 0.00602, 0.008201, 0.010489, 0.013379, 
        0.016997, 0.021464, 0.027371, 0.034195, 0.044807, 
        0.058939, 0.125497
    ),
    HFdepthOneParameterB = cms.vdouble(
        -4e-06, -2e-06, 0.0, 4e-06, 1.5e-05, 
        2.6e-05, 6.3e-05, 8.4e-05, 0.00016, 0.000107, 
        0.000425, 0.000209
    ),
    HFdepthTwoParameterA = cms.vdouble(
        0.002861, 0.004168, 0.0064, 0.008388, 0.011601, 
        0.014425, 0.018633, 0.023232, 0.028274, 0.035447, 
        0.051579, 0.086593
    ),
    HFdepthTwoParameterB = cms.vdouble(
        -2e-06, -0.0, -7e-06, -6e-06, -2e-06, 
        1e-06, 1.9e-05, 3.1e-05, 6.7e-05, 1.2e-05, 
        0.000157, -3e-06
    )
)

process.HGCAL_cceParams_toUse = cms.PSet(
    cceParamFine = cms.vdouble(1.5e+15, -3.00394e-17, 0.318083),
    cceParamThick = cms.vdouble(6e+14, -7.96539e-16, 0.251751),
    cceParamThin = cms.vdouble(1.5e+15, -3.09878e-16, 0.211207)
)

process.HGCAL_chargeCollectionEfficiencies = cms.PSet(
    values = cms.vdouble(1.0, 1.0, 1.0)
)

process.HGCAL_ileakParam_toUse = cms.PSet(
    ileakParam = cms.vdouble(0.993, -42.668)
)

process.HGCAL_noise_fC = cms.PSet(
    doseMap = cms.string(''),
    scaleByDose = cms.bool(False),
    scaleByDoseAlgo = cms.uint32(0),
    values = cms.vdouble(0.32041012, 0.384492144, 0.32041012)
)

process.HGCAL_noise_heback = cms.PSet(
    doseMap = cms.string(''),
    noise_MIP = cms.double(0.01),
    scaleByDose = cms.bool(False),
    scaleByDoseAlgo = cms.uint32(0)
)

process.HGCAL_noises = cms.PSet(
    values = cms.vdouble(2000.0, 2400.0, 2000.0)
)

process.HLTDEBUGEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring( (
        'drop *', 
        'keep *_logErrorHarvester_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*', 
        'keep *_hltAK4CaloJetsIDPassed_*_*', 
        'keep *_hltAK4CaloJets_*_*', 
        'keep *_hltAK4PFJetsCorrected_*_*', 
        'keep *_hltAK4PFJetsForTaus_*_*', 
        'keep *_hltAK4PFJets_*_*', 
        'keep *_hltAlCaEtaEBRechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaEtaEBRechitsToDigis_*_*', 
        'keep *_hltAlCaEtaEERechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaEtaEERechitsToDigis_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegionalLowPU_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegional_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilter_*_*', 
        'keep *_hltAlCaPhiSymStream_*_*', 
        'keep *_hltAlCaPi0EBRechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaPi0EBRechitsToDigis_*_*', 
        'keep *_hltAlCaPi0EERechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaPi0EERechitsToDigis_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegionalLowPU_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegional_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilter_*_*', 
        'keep *_hltBLifetimeL25AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeRegionalCtfWithMaterialTracksbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonMu5L3_*_*', 
        'keep *_hltCSVJetTagSingleTopEle27_*_*', 
        'keep *_hltCSVJetTagSingleTopIsoMu24_*_*', 
        'keep *_hltCaloJetCorrectedRegional_*_*', 
        'keep *_hltCaloJetCorrected_*_*', 
        'keep *_hltCaloJetL1FastJetCorrected_*_*', 
        'keep *_hltCaloStage2Digis_*_*', 
        'keep *_hltCleanedCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCleanedHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsCalo_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsPF_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFindingIsolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFinding_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5Isolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5_*_*', 
        'keep *_hltConvPFTausTightIso_*_*', 
        'keep *_hltConvPFTausTrackFindingLooseIsolation_*_*', 
        'keep *_hltConvPFTausTrackFinding_*_*', 
        'keep *_hltConvPFTaus_*_*', 
        'keep *_hltCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltCsc2DRecHits_*_*', 
        'keep *_hltCscSegments_*_*', 
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsCalo_*_*', 
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsInfosCalo_*_*', 
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsInfos_*_*', 
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsPF_*_*', 
        'keep *_hltDisplacedhltIter4PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolationProng4L1HLTMatched_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolationProng4_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolation_*_*', 
        'keep *_hltDoublePFTau25TrackPt5_*_*', 
        'keep *_hltDoublePFTau25_*_*', 
        'keep *_hltDoublePFTauTightIso45Track5_*_*', 
        'keep *_hltDoublePFTauTightIso45Track_*_*', 
        'keep *_hltDt4DSegments_*_*', 
        'keep *_hltEcalPhiSymFilter_*_*', 
        'keep *_hltEcalRecHitAll_*_*', 
        'keep *_hltEcalRecHit_*_*', 
        'keep *_hltEgammaCandidates_*_*', 
        'keep *_hltEgammaGsfElectrons_*_*', 
        'keep *_hltEgammaGsfTracks_*_*', 
        'keep *_hltEle20CaloIdVTCaloIsoTTrkIdTTrkIsoTTrackIsoFilterL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltEle20CaloIdVTTrkIdTDphiFilter_*_*', 
        'keep *_hltEle27WP85PixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltElectronsVertex_*_*', 
        'keep *_hltFEDSelectorLumiPixels_*_*', 
        'keep *_hltFastPVPixelTracksMerger_*_*', 
        'keep *_hltFastPVPixelTracksRecover_*_*', 
        'keep *_hltFastPVPixelTracks_*_*', 
        'keep *_hltFastPVPixelVertices3D_*_*', 
        'keep *_hltFastPVPixelVertices_*_*', 
        'keep *_hltFastPixelBLifetimeL3TagInfos_*_*', 
        'keep *_hltFastPrimaryVertex_*_*', 
        'keep *_hltFilterDoubleIsoPFTau45Trk5LeadTrack5IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterL2EtCutDoublePFIsoTau45Trk5_*_*', 
        'keep *_hltFilterL2EtCutSingleIsoPFTau35Trk20MET70_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20LeadTrackPt20_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET60LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET70LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltFullIterativeTrackingMergedForRefPP_*_*', 
        'keep *_hltGmtStage2Digis_*_*', 
        'keep *_hltGoodOnlinePVs_*_*', 
        'keep *_hltGtStage2Digis_*_*', 
        'keep *_hltHICaloJetCorrected_*_*', 
        'keep *_hltHICaloJetIDPassed_*_*', 
        'keep *_hltHIGoodLooseTracks_*_*', 
        'keep *_hltHIPixel3PrimTracks_*_*', 
        'keep *_hltHISelectedVertex_*_*', 
        'keep *_hltHISiPixelClusters_*_*', 
        'keep *_hltHITIPTCorrectorHB_*_*', 
        'keep *_hltHITIPTCorrectorHE_*_*', 
        'keep *_hltHbhereco_*_*', 
        'keep *_hltHfreco_*_*', 
        'keep *_hltHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltHiCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltHiIslandSuperClustersHI_*_*', 
        'keep *_hltHoreco_*_*', 
        'keep *_hltIsolPixelTrackProdHB_*_*', 
        'keep *_hltIsolPixelTrackProdHE_*_*', 
        'keep *_hltIter0ElectronsTrackSelectionHighPurity_*_*', 
        'keep *_hltIter0HighPtTkMuPixelTracks_*_*', 
        'keep *_hltIter0HighPtTkMuTrackSelectionHighPurity_*_*', 
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter1Merged_*_*', 
        'keep *_hltIter1PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter2HighPtTkMuMerged_*_*', 
        'keep *_hltIter2HighPtTkMuTrackSelectionHighPurity_*_*', 
        'keep *_hltIter2IterL3FromL1MuonMerged_*_*', 
        'keep *_hltIter2IterL3MuonMerged_*_*', 
        'keep *_hltIter2MergedForBTag_*_*', 
        'keep *_hltIter2MergedForElectrons_*_*', 
        'keep *_hltIter2Merged_*_*', 
        'keep *_hltIter2PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter3Merged_*_*', 
        'keep *_hltIter4Merged_*_*', 
        'keep *_hltIterL3GlbMuon_*_*', 
        'keep *_hltIterL3MuonAndMuonFromL1Merged_*_*', 
        'keep *_hltIterL3MuonMerged_*_*', 
        'keep *_hltIterL3MuonsNoID_*_*', 
        'keep *_hltIterL3Muons_*_*', 
        'keep *_hltIterL3OIMuonTrackSelectionHighPurity_*_*', 
        'keep *_hltIterativeCone5PileupSubtractionCaloJets_*_*', 
        'keep *_hltL1HLTSingleIsoPFTau35Trk20Met60JetsMatch_*_*', 
        'keep *_hltL1IsoElectronTrackIsol_*_*', 
        'keep *_hltL1NonIsoElectronTrackIsol_*_*', 
        'keep *_hltL1SeededRecoEcalCandidate_*_*', 
        'keep *_hltL1sDoubleTauJet44Eta2p17orDoubleJet64Central_*_*', 
        'keep *_hltL1sDoubleTauJet44erorDoubleJetC64_*_*', 
        'keep *_hltL1sL1EG18er_*_*', 
        'keep *_hltL1sL1ETM36ORETM40_*_*', 
        'keep *_hltL1sL1Jet52ETM30_*_*', 
        'keep *_hltL1sL1SingleEG12_*_*', 
        'keep *_hltL1sL1SingleEG15_*_*', 
        'keep *_hltL1sL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltL1sL1SingleMu10_*_*', 
        'keep *_hltL1sL1SingleMu14Eta2p1_*_*', 
        'keep *_hltL1sMu16Eta2p1_*_*', 
        'keep *_hltL2MuonCandidatesNoVtx_*_*', 
        'keep *_hltL2MuonCandidates_*_*', 
        'keep *_hltL2MuonSeeds_*_*', 
        'keep *_hltL2Muons_*_*', 
        'keep *_hltL2TauJets_*_*', 
        'keep *_hltL3MuonCandidates_*_*', 
        'keep *_hltL3MuonsIOHit_*_*', 
        'keep *_hltL3MuonsLinksCombination_*_*', 
        'keep *_hltL3MuonsOIHit_*_*', 
        'keep *_hltL3MuonsOIState_*_*', 
        'keep *_hltL3Muons_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuons_*_*', 
        'keep *_hltL3SecondaryVertexTagInfos_*_*', 
        'keep *_hltL3TkFromL2OICombination_*_*', 
        'keep *_hltL3TkTracksFromL2IOHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIState_*_*', 
        'keep *_hltL3TkTracksFromL2_*_*', 
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIState_*_*', 
        'keep *_hltL3TrajSeedIOHit_*_*', 
        'keep *_hltL3TrajSeedOIHit_*_*', 
        'keep *_hltL3TrajSeedOIState_*_*', 
        'keep *_hltL3TrajectorySeed_*_*', 
        'keep *_hltL3crIsoL1sMu16Eta2p1L1f0L2f16QL3f18QL3crIsoRhoFiltered0p15_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopEle27_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopIsoMu24_*_*', 
        'keep *_hltMergedTracks_*_*', 
        'keep *_hltMet_*_*', 
        'keep *_hltMu8Ele17CaloIdTCaloIsoVLPixelMatchFilter_*_*', 
        'keep *_hltMuTrackJpsiCtfTrackCands_*_*', 
        'keep *_hltMuTrackJpsiPixelTrackCands_*_*', 
        'keep *_hltMuonCSCDigis_*_*', 
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*', 
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*', 
        'keep *_hltMuonDTDigis_*_*', 
        'keep *_hltMuonRPCDigis_*_*', 
        'keep *_hltOnlineBeamSpot_*_*', 
        'keep *_hltOnlinePrimaryVertices_*_*', 
        'keep *_hltOverlapFilterEle20LooseIsoPFTau20OldVersion_*_*', 
        'keep *_hltOverlapFilterIsoEle20MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15IsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15TightIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu18LooseIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu18PFTau25TrackPt5Prong4_*_*', 
        'keep *_hltPFJetForBtag_*_*', 
        'keep *_hltPFMuonMerging_*_*', 
        'keep *_hltPFTau15TrackLooseIso_*_*', 
        'keep *_hltPFTau15Track_*_*', 
        'keep *_hltPFTau15_*_*', 
        'keep *_hltPFTau20IsoMuVertex_*_*', 
        'keep *_hltPFTau20TrackLooseIso_*_*', 
        'keep *_hltPFTau20Track_*_*', 
        'keep *_hltPFTau20_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolationProng4IsoMuVertex_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolationProng4_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolation_*_*', 
        'keep *_hltPFTau25TrackPt5_*_*', 
        'keep *_hltPFTau25_*_*', 
        'keep *_hltPFTau35TrackPt20LooseIsoProng2_*_*', 
        'keep *_hltPFTau35TrackPt20LooseIso_*_*', 
        'keep *_hltPFTau35TrackPt20_*_*', 
        'keep *_hltPFTau35Track_*_*', 
        'keep *_hltPFTau35_*_*', 
        'keep *_hltPFTauEleVertex20_*_*', 
        'keep *_hltPFTauJetTracksAssociator_*_*', 
        'keep *_hltPFTauMediumIso20TrackMediumIso_*_*', 
        'keep *_hltPFTauMediumIso20Track_*_*', 
        'keep *_hltPFTauMediumIso20_*_*', 
        'keep *_hltPFTauMediumIso35Track_*_*', 
        'keep *_hltPFTauMediumIso35_*_*', 
        'keep *_hltPFTauTagInfo_*_*', 
        'keep *_hltPFTauTightIso20TrackTightIso_*_*', 
        'keep *_hltPFTauTightIso20Track_*_*', 
        'keep *_hltPFTauTightIso20_*_*', 
        'keep *_hltPFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltParticleFlowForTaus_*_*', 
        'keep *_hltParticleFlow_*_*', 
        'keep *_hltPixelMatch3HitElectronsActivity_*_*', 
        'keep *_hltPixelMatch3HitElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchCleanElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchElectronsActivity_*_*', 
        'keep *_hltPixelMatchElectronsL1Iso_*_*', 
        'keep *_hltPixelMatchElectronsL1NonIso_*_*', 
        'keep *_hltPixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltPixelTracksElectrons_*_*', 
        'keep *_hltPixelTracksMerged_*_*', 
        'keep *_hltPixelTracks_*_*', 
        'keep *_hltPixelVertices3DbbPhi_*_*', 
        'keep *_hltPixelVertices_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC4_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC5_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidate_*_*', 
        'keep *_hltRpcRecHits_*_*', 
        'keep *_hltSelector4CentralJetsL1FastJet_*_*', 
        'keep *_hltSelector8CentralJetsL1FastJet_*_*', 
        'keep *_hltSelectorJets20L1FastJet_*_*', 
        'keep *_hltSiPixelCluster_*_*', 
        'keep *_hltSiPixelClustersCache_*_*', 
        'keep *_hltSiPixelClusters_*_*', 
        'keep *_hltSiStripClusters_*_*', 
        'keep *_hltSiStripRawToClustersFacility_*_*', 
        'keep *_hltSingleMu15L3Filtered15_*_*', 
        'keep *_hltSingleMuIsoL1s14L3IsoFiltered15eta2p1_*_*', 
        'keep *_hltSingleMuIsoL3IsoFiltered15_*_*', 
        'keep *_hltTowerMakerForAll_*_*', 
        'keep *_hltTowerMakerForMuons_*_*', 
        'keep *_hltTriggerSummaryAOD_*_*', 
        'keep *_hltTriggerSummaryRAW_*_*', 
        'keep *_hltTrimmedPixelVertices_*_*', 
        'keep *_hltVerticesL3_*_*', 
        'keep *_hltVerticesPFFilter_*_*', 
        'keep *_hltVerticesPFSelector_*_*', 
        'keep DcsStatuss_hltScalersRawToDigi_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_rawDataRepacker_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajSeedOIHit_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajectorySeed_*_*', 
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*', 
        'keep LumiScalerss_hltScalersRawToDigi_*_*', 
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIHit_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIState_*_*', 
        'keep TrackingRecHitsOwned_hltL3Muons_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep recoCaloJets_*_*_*', 
        'keep recoCaloMETs_*_*_*', 
        'keep recoCaloMETs_hltMet_*_*', 
        'keep recoCompositeCandidates_*_*_*', 
        'keep recoElectrons_*_*_*', 
        'keep recoIsolatedPixelTrackCandidates_*_*_*', 
        'keep recoMETs_*_*_*', 
        'keep recoPFJets_*_*_*', 
        'keep recoPFTaus_*_*_*', 
        'keep recoRecoChargedCandidates_*_*_*', 
        'keep recoRecoChargedCandidates_hltHIL3MuonCandidates_*_*', 
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidates_*_*_*', 
        'keep recoRecoEcalCandidates_hltL1IsoRecoEcalCandidate_*_*', 
        'keep recoRecoEcalCandidates_hltL1NonIsoRecoEcalCandidate_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIHit_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3MuonsOIHit_*_*', 
        'keep recoTracks_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3Muons_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIHit_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIState_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2_*_*', 
        'keep triggerTriggerEventWithRefs_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep triggerTriggerFilterObjectWithRefs_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*'
     ) ),
    splitLevel = cms.untracked.int32(0)
)

process.HLTDebugFEVT = cms.PSet(
    outputCommands = cms.vstring( (
        'drop *_hlt*_*_*', 
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*', 
        'keep *_hltAK4CaloJetsIDPassed_*_*', 
        'keep *_hltAK4CaloJets_*_*', 
        'keep *_hltAK4PFJetsCorrected_*_*', 
        'keep *_hltAK4PFJetsForTaus_*_*', 
        'keep *_hltAK4PFJets_*_*', 
        'keep *_hltAlCaEtaEBRechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaEtaEBRechitsToDigis_*_*', 
        'keep *_hltAlCaEtaEERechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaEtaEERechitsToDigis_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegionalLowPU_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegional_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilter_*_*', 
        'keep *_hltAlCaPhiSymStream_*_*', 
        'keep *_hltAlCaPi0EBRechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaPi0EBRechitsToDigis_*_*', 
        'keep *_hltAlCaPi0EERechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaPi0EERechitsToDigis_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegionalLowPU_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegional_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilter_*_*', 
        'keep *_hltBLifetimeL25AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeRegionalCtfWithMaterialTracksbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonMu5L3_*_*', 
        'keep *_hltCSVJetTagSingleTopEle27_*_*', 
        'keep *_hltCSVJetTagSingleTopIsoMu24_*_*', 
        'keep *_hltCaloJetCorrectedRegional_*_*', 
        'keep *_hltCaloJetCorrected_*_*', 
        'keep *_hltCaloJetL1FastJetCorrected_*_*', 
        'keep *_hltCaloStage2Digis_*_*', 
        'keep *_hltCleanedCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCleanedHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsCalo_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsPF_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFindingIsolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFinding_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5Isolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5_*_*', 
        'keep *_hltConvPFTausTightIso_*_*', 
        'keep *_hltConvPFTausTrackFindingLooseIsolation_*_*', 
        'keep *_hltConvPFTausTrackFinding_*_*', 
        'keep *_hltConvPFTaus_*_*', 
        'keep *_hltCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltCsc2DRecHits_*_*', 
        'keep *_hltCscSegments_*_*', 
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsCalo_*_*', 
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsInfosCalo_*_*', 
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsInfos_*_*', 
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsPF_*_*', 
        'keep *_hltDisplacedhltIter4PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolationProng4L1HLTMatched_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolationProng4_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolation_*_*', 
        'keep *_hltDoublePFTau25TrackPt5_*_*', 
        'keep *_hltDoublePFTau25_*_*', 
        'keep *_hltDoublePFTauTightIso45Track5_*_*', 
        'keep *_hltDoublePFTauTightIso45Track_*_*', 
        'keep *_hltDt4DSegments_*_*', 
        'keep *_hltEcalPhiSymFilter_*_*', 
        'keep *_hltEcalRecHitAll_*_*', 
        'keep *_hltEcalRecHit_*_*', 
        'keep *_hltEgammaCandidates_*_*', 
        'keep *_hltEgammaGsfElectrons_*_*', 
        'keep *_hltEgammaGsfTracks_*_*', 
        'keep *_hltEle20CaloIdVTCaloIsoTTrkIdTTrkIsoTTrackIsoFilterL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltEle20CaloIdVTTrkIdTDphiFilter_*_*', 
        'keep *_hltEle27WP85PixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltElectronsVertex_*_*', 
        'keep *_hltFEDSelectorLumiPixels_*_*', 
        'keep *_hltFastPVPixelTracksMerger_*_*', 
        'keep *_hltFastPVPixelTracksRecover_*_*', 
        'keep *_hltFastPVPixelTracks_*_*', 
        'keep *_hltFastPVPixelVertices3D_*_*', 
        'keep *_hltFastPVPixelVertices_*_*', 
        'keep *_hltFastPixelBLifetimeL3TagInfos_*_*', 
        'keep *_hltFastPrimaryVertex_*_*', 
        'keep *_hltFilterDoubleIsoPFTau45Trk5LeadTrack5IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterL2EtCutDoublePFIsoTau45Trk5_*_*', 
        'keep *_hltFilterL2EtCutSingleIsoPFTau35Trk20MET70_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20LeadTrackPt20_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET60LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET70LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltFullIterativeTrackingMergedForRefPP_*_*', 
        'keep *_hltGmtStage2Digis_*_*', 
        'keep *_hltGoodOnlinePVs_*_*', 
        'keep *_hltGtStage2Digis_*_*', 
        'keep *_hltHICaloJetCorrected_*_*', 
        'keep *_hltHICaloJetIDPassed_*_*', 
        'keep *_hltHIGoodLooseTracks_*_*', 
        'keep *_hltHIPixel3PrimTracks_*_*', 
        'keep *_hltHISelectedVertex_*_*', 
        'keep *_hltHISiPixelClusters_*_*', 
        'keep *_hltHITIPTCorrectorHB_*_*', 
        'keep *_hltHITIPTCorrectorHE_*_*', 
        'keep *_hltHbhereco_*_*', 
        'keep *_hltHfreco_*_*', 
        'keep *_hltHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltHiCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltHiIslandSuperClustersHI_*_*', 
        'keep *_hltHoreco_*_*', 
        'keep *_hltIsolPixelTrackProdHB_*_*', 
        'keep *_hltIsolPixelTrackProdHE_*_*', 
        'keep *_hltIter0ElectronsTrackSelectionHighPurity_*_*', 
        'keep *_hltIter0HighPtTkMuPixelTracks_*_*', 
        'keep *_hltIter0HighPtTkMuTrackSelectionHighPurity_*_*', 
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter1Merged_*_*', 
        'keep *_hltIter1PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter2HighPtTkMuMerged_*_*', 
        'keep *_hltIter2HighPtTkMuTrackSelectionHighPurity_*_*', 
        'keep *_hltIter2IterL3FromL1MuonMerged_*_*', 
        'keep *_hltIter2IterL3MuonMerged_*_*', 
        'keep *_hltIter2MergedForBTag_*_*', 
        'keep *_hltIter2MergedForElectrons_*_*', 
        'keep *_hltIter2Merged_*_*', 
        'keep *_hltIter2PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter3Merged_*_*', 
        'keep *_hltIter4Merged_*_*', 
        'keep *_hltIterL3GlbMuon_*_*', 
        'keep *_hltIterL3MuonAndMuonFromL1Merged_*_*', 
        'keep *_hltIterL3MuonMerged_*_*', 
        'keep *_hltIterL3MuonsNoID_*_*', 
        'keep *_hltIterL3Muons_*_*', 
        'keep *_hltIterL3OIMuonTrackSelectionHighPurity_*_*', 
        'keep *_hltIterativeCone5PileupSubtractionCaloJets_*_*', 
        'keep *_hltL1HLTSingleIsoPFTau35Trk20Met60JetsMatch_*_*', 
        'keep *_hltL1IsoElectronTrackIsol_*_*', 
        'keep *_hltL1NonIsoElectronTrackIsol_*_*', 
        'keep *_hltL1SeededRecoEcalCandidate_*_*', 
        'keep *_hltL1sDoubleTauJet44Eta2p17orDoubleJet64Central_*_*', 
        'keep *_hltL1sDoubleTauJet44erorDoubleJetC64_*_*', 
        'keep *_hltL1sL1EG18er_*_*', 
        'keep *_hltL1sL1ETM36ORETM40_*_*', 
        'keep *_hltL1sL1Jet52ETM30_*_*', 
        'keep *_hltL1sL1SingleEG12_*_*', 
        'keep *_hltL1sL1SingleEG15_*_*', 
        'keep *_hltL1sL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltL1sL1SingleMu10_*_*', 
        'keep *_hltL1sL1SingleMu14Eta2p1_*_*', 
        'keep *_hltL1sMu16Eta2p1_*_*', 
        'keep *_hltL2MuonCandidatesNoVtx_*_*', 
        'keep *_hltL2MuonCandidates_*_*', 
        'keep *_hltL2MuonSeeds_*_*', 
        'keep *_hltL2Muons_*_*', 
        'keep *_hltL2TauJets_*_*', 
        'keep *_hltL3MuonCandidates_*_*', 
        'keep *_hltL3MuonsIOHit_*_*', 
        'keep *_hltL3MuonsLinksCombination_*_*', 
        'keep *_hltL3MuonsOIHit_*_*', 
        'keep *_hltL3MuonsOIState_*_*', 
        'keep *_hltL3Muons_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuons_*_*', 
        'keep *_hltL3SecondaryVertexTagInfos_*_*', 
        'keep *_hltL3TkFromL2OICombination_*_*', 
        'keep *_hltL3TkTracksFromL2IOHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIState_*_*', 
        'keep *_hltL3TkTracksFromL2_*_*', 
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIState_*_*', 
        'keep *_hltL3TrajSeedIOHit_*_*', 
        'keep *_hltL3TrajSeedOIHit_*_*', 
        'keep *_hltL3TrajSeedOIState_*_*', 
        'keep *_hltL3TrajectorySeed_*_*', 
        'keep *_hltL3crIsoL1sMu16Eta2p1L1f0L2f16QL3f18QL3crIsoRhoFiltered0p15_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopEle27_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopIsoMu24_*_*', 
        'keep *_hltMergedTracks_*_*', 
        'keep *_hltMet_*_*', 
        'keep *_hltMu8Ele17CaloIdTCaloIsoVLPixelMatchFilter_*_*', 
        'keep *_hltMuTrackJpsiCtfTrackCands_*_*', 
        'keep *_hltMuTrackJpsiPixelTrackCands_*_*', 
        'keep *_hltMuonCSCDigis_*_*', 
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*', 
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*', 
        'keep *_hltMuonDTDigis_*_*', 
        'keep *_hltMuonRPCDigis_*_*', 
        'keep *_hltOnlineBeamSpot_*_*', 
        'keep *_hltOnlinePrimaryVertices_*_*', 
        'keep *_hltOverlapFilterEle20LooseIsoPFTau20OldVersion_*_*', 
        'keep *_hltOverlapFilterIsoEle20MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15IsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15TightIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu18LooseIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu18PFTau25TrackPt5Prong4_*_*', 
        'keep *_hltPFJetForBtag_*_*', 
        'keep *_hltPFMuonMerging_*_*', 
        'keep *_hltPFTau15TrackLooseIso_*_*', 
        'keep *_hltPFTau15Track_*_*', 
        'keep *_hltPFTau15_*_*', 
        'keep *_hltPFTau20IsoMuVertex_*_*', 
        'keep *_hltPFTau20TrackLooseIso_*_*', 
        'keep *_hltPFTau20Track_*_*', 
        'keep *_hltPFTau20_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolationProng4IsoMuVertex_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolationProng4_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolation_*_*', 
        'keep *_hltPFTau25TrackPt5_*_*', 
        'keep *_hltPFTau25_*_*', 
        'keep *_hltPFTau35TrackPt20LooseIsoProng2_*_*', 
        'keep *_hltPFTau35TrackPt20LooseIso_*_*', 
        'keep *_hltPFTau35TrackPt20_*_*', 
        'keep *_hltPFTau35Track_*_*', 
        'keep *_hltPFTau35_*_*', 
        'keep *_hltPFTauEleVertex20_*_*', 
        'keep *_hltPFTauJetTracksAssociator_*_*', 
        'keep *_hltPFTauMediumIso20TrackMediumIso_*_*', 
        'keep *_hltPFTauMediumIso20Track_*_*', 
        'keep *_hltPFTauMediumIso20_*_*', 
        'keep *_hltPFTauMediumIso35Track_*_*', 
        'keep *_hltPFTauMediumIso35_*_*', 
        'keep *_hltPFTauTagInfo_*_*', 
        'keep *_hltPFTauTightIso20TrackTightIso_*_*', 
        'keep *_hltPFTauTightIso20Track_*_*', 
        'keep *_hltPFTauTightIso20_*_*', 
        'keep *_hltPFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltParticleFlowForTaus_*_*', 
        'keep *_hltParticleFlow_*_*', 
        'keep *_hltPixelMatch3HitElectronsActivity_*_*', 
        'keep *_hltPixelMatch3HitElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchCleanElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchElectronsActivity_*_*', 
        'keep *_hltPixelMatchElectronsL1Iso_*_*', 
        'keep *_hltPixelMatchElectronsL1NonIso_*_*', 
        'keep *_hltPixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltPixelTracksElectrons_*_*', 
        'keep *_hltPixelTracksMerged_*_*', 
        'keep *_hltPixelTracks_*_*', 
        'keep *_hltPixelVertices3DbbPhi_*_*', 
        'keep *_hltPixelVertices_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC4_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC5_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidate_*_*', 
        'keep *_hltRpcRecHits_*_*', 
        'keep *_hltSelector4CentralJetsL1FastJet_*_*', 
        'keep *_hltSelector8CentralJetsL1FastJet_*_*', 
        'keep *_hltSelectorJets20L1FastJet_*_*', 
        'keep *_hltSiPixelCluster_*_*', 
        'keep *_hltSiPixelClustersCache_*_*', 
        'keep *_hltSiPixelClusters_*_*', 
        'keep *_hltSiStripClusters_*_*', 
        'keep *_hltSiStripRawToClustersFacility_*_*', 
        'keep *_hltSingleMu15L3Filtered15_*_*', 
        'keep *_hltSingleMuIsoL1s14L3IsoFiltered15eta2p1_*_*', 
        'keep *_hltSingleMuIsoL3IsoFiltered15_*_*', 
        'keep *_hltTowerMakerForAll_*_*', 
        'keep *_hltTowerMakerForMuons_*_*', 
        'keep *_hltTriggerSummaryAOD_*_*', 
        'keep *_hltTriggerSummaryRAW_*_*', 
        'keep *_hltTrimmedPixelVertices_*_*', 
        'keep *_hltVerticesL3_*_*', 
        'keep *_hltVerticesPFFilter_*_*', 
        'keep *_hltVerticesPFSelector_*_*', 
        'keep DcsStatuss_hltScalersRawToDigi_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_rawDataRepacker_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajSeedOIHit_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajectorySeed_*_*', 
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*', 
        'keep LumiScalerss_hltScalersRawToDigi_*_*', 
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIHit_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIState_*_*', 
        'keep TrackingRecHitsOwned_hltL3Muons_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep recoCaloJets_*_*_*', 
        'keep recoCaloMETs_*_*_*', 
        'keep recoCaloMETs_hltMet_*_*', 
        'keep recoCompositeCandidates_*_*_*', 
        'keep recoElectrons_*_*_*', 
        'keep recoIsolatedPixelTrackCandidates_*_*_*', 
        'keep recoMETs_*_*_*', 
        'keep recoPFJets_*_*_*', 
        'keep recoPFTaus_*_*_*', 
        'keep recoRecoChargedCandidates_*_*_*', 
        'keep recoRecoChargedCandidates_hltHIL3MuonCandidates_*_*', 
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidates_*_*_*', 
        'keep recoRecoEcalCandidates_hltL1IsoRecoEcalCandidate_*_*', 
        'keep recoRecoEcalCandidates_hltL1NonIsoRecoEcalCandidate_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIHit_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3MuonsOIHit_*_*', 
        'keep recoTracks_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3Muons_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIHit_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIState_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2_*_*', 
        'keep triggerTriggerEventWithRefs_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep triggerTriggerFilterObjectWithRefs_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*'
     ) )
)

process.HLTDebugRAW = cms.PSet(
    outputCommands = cms.vstring( (
        'drop *_hlt*_*_*', 
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*', 
        'keep *_hltAK4CaloJetsIDPassed_*_*', 
        'keep *_hltAK4CaloJets_*_*', 
        'keep *_hltAK4PFJetsCorrected_*_*', 
        'keep *_hltAK4PFJetsForTaus_*_*', 
        'keep *_hltAK4PFJets_*_*', 
        'keep *_hltAlCaEtaEBRechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaEtaEBRechitsToDigis_*_*', 
        'keep *_hltAlCaEtaEERechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaEtaEERechitsToDigis_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegionalLowPU_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegional_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilter_*_*', 
        'keep *_hltAlCaPhiSymStream_*_*', 
        'keep *_hltAlCaPi0EBRechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaPi0EBRechitsToDigis_*_*', 
        'keep *_hltAlCaPi0EERechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaPi0EERechitsToDigis_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegionalLowPU_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegional_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilter_*_*', 
        'keep *_hltBLifetimeL25AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeRegionalCtfWithMaterialTracksbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonMu5L3_*_*', 
        'keep *_hltCSVJetTagSingleTopEle27_*_*', 
        'keep *_hltCSVJetTagSingleTopIsoMu24_*_*', 
        'keep *_hltCaloJetCorrectedRegional_*_*', 
        'keep *_hltCaloJetCorrected_*_*', 
        'keep *_hltCaloJetL1FastJetCorrected_*_*', 
        'keep *_hltCaloStage2Digis_*_*', 
        'keep *_hltCleanedCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCleanedHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsCalo_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsPF_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFindingIsolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFinding_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5Isolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5_*_*', 
        'keep *_hltConvPFTausTightIso_*_*', 
        'keep *_hltConvPFTausTrackFindingLooseIsolation_*_*', 
        'keep *_hltConvPFTausTrackFinding_*_*', 
        'keep *_hltConvPFTaus_*_*', 
        'keep *_hltCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltCsc2DRecHits_*_*', 
        'keep *_hltCscSegments_*_*', 
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsCalo_*_*', 
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsInfosCalo_*_*', 
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsInfos_*_*', 
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsPF_*_*', 
        'keep *_hltDisplacedhltIter4PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolationProng4L1HLTMatched_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolationProng4_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolation_*_*', 
        'keep *_hltDoublePFTau25TrackPt5_*_*', 
        'keep *_hltDoublePFTau25_*_*', 
        'keep *_hltDoublePFTauTightIso45Track5_*_*', 
        'keep *_hltDoublePFTauTightIso45Track_*_*', 
        'keep *_hltDt4DSegments_*_*', 
        'keep *_hltEcalPhiSymFilter_*_*', 
        'keep *_hltEcalRecHitAll_*_*', 
        'keep *_hltEcalRecHit_*_*', 
        'keep *_hltEgammaCandidates_*_*', 
        'keep *_hltEgammaGsfElectrons_*_*', 
        'keep *_hltEgammaGsfTracks_*_*', 
        'keep *_hltEle20CaloIdVTCaloIsoTTrkIdTTrkIsoTTrackIsoFilterL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltEle20CaloIdVTTrkIdTDphiFilter_*_*', 
        'keep *_hltEle27WP85PixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltElectronsVertex_*_*', 
        'keep *_hltFEDSelectorLumiPixels_*_*', 
        'keep *_hltFastPVPixelTracksMerger_*_*', 
        'keep *_hltFastPVPixelTracksRecover_*_*', 
        'keep *_hltFastPVPixelTracks_*_*', 
        'keep *_hltFastPVPixelVertices3D_*_*', 
        'keep *_hltFastPVPixelVertices_*_*', 
        'keep *_hltFastPixelBLifetimeL3TagInfos_*_*', 
        'keep *_hltFastPrimaryVertex_*_*', 
        'keep *_hltFilterDoubleIsoPFTau45Trk5LeadTrack5IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterL2EtCutDoublePFIsoTau45Trk5_*_*', 
        'keep *_hltFilterL2EtCutSingleIsoPFTau35Trk20MET70_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20LeadTrackPt20_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET60LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET70LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltFullIterativeTrackingMergedForRefPP_*_*', 
        'keep *_hltGmtStage2Digis_*_*', 
        'keep *_hltGoodOnlinePVs_*_*', 
        'keep *_hltGtStage2Digis_*_*', 
        'keep *_hltHICaloJetCorrected_*_*', 
        'keep *_hltHICaloJetIDPassed_*_*', 
        'keep *_hltHIGoodLooseTracks_*_*', 
        'keep *_hltHIPixel3PrimTracks_*_*', 
        'keep *_hltHISelectedVertex_*_*', 
        'keep *_hltHISiPixelClusters_*_*', 
        'keep *_hltHITIPTCorrectorHB_*_*', 
        'keep *_hltHITIPTCorrectorHE_*_*', 
        'keep *_hltHbhereco_*_*', 
        'keep *_hltHfreco_*_*', 
        'keep *_hltHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltHiCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltHiIslandSuperClustersHI_*_*', 
        'keep *_hltHoreco_*_*', 
        'keep *_hltIsolPixelTrackProdHB_*_*', 
        'keep *_hltIsolPixelTrackProdHE_*_*', 
        'keep *_hltIter0ElectronsTrackSelectionHighPurity_*_*', 
        'keep *_hltIter0HighPtTkMuPixelTracks_*_*', 
        'keep *_hltIter0HighPtTkMuTrackSelectionHighPurity_*_*', 
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter1Merged_*_*', 
        'keep *_hltIter1PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter2HighPtTkMuMerged_*_*', 
        'keep *_hltIter2HighPtTkMuTrackSelectionHighPurity_*_*', 
        'keep *_hltIter2IterL3FromL1MuonMerged_*_*', 
        'keep *_hltIter2IterL3MuonMerged_*_*', 
        'keep *_hltIter2MergedForBTag_*_*', 
        'keep *_hltIter2MergedForElectrons_*_*', 
        'keep *_hltIter2Merged_*_*', 
        'keep *_hltIter2PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter3Merged_*_*', 
        'keep *_hltIter4Merged_*_*', 
        'keep *_hltIterL3GlbMuon_*_*', 
        'keep *_hltIterL3MuonAndMuonFromL1Merged_*_*', 
        'keep *_hltIterL3MuonMerged_*_*', 
        'keep *_hltIterL3MuonsNoID_*_*', 
        'keep *_hltIterL3Muons_*_*', 
        'keep *_hltIterL3OIMuonTrackSelectionHighPurity_*_*', 
        'keep *_hltIterativeCone5PileupSubtractionCaloJets_*_*', 
        'keep *_hltL1HLTSingleIsoPFTau35Trk20Met60JetsMatch_*_*', 
        'keep *_hltL1IsoElectronTrackIsol_*_*', 
        'keep *_hltL1NonIsoElectronTrackIsol_*_*', 
        'keep *_hltL1SeededRecoEcalCandidate_*_*', 
        'keep *_hltL1sDoubleTauJet44Eta2p17orDoubleJet64Central_*_*', 
        'keep *_hltL1sDoubleTauJet44erorDoubleJetC64_*_*', 
        'keep *_hltL1sL1EG18er_*_*', 
        'keep *_hltL1sL1ETM36ORETM40_*_*', 
        'keep *_hltL1sL1Jet52ETM30_*_*', 
        'keep *_hltL1sL1SingleEG12_*_*', 
        'keep *_hltL1sL1SingleEG15_*_*', 
        'keep *_hltL1sL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltL1sL1SingleMu10_*_*', 
        'keep *_hltL1sL1SingleMu14Eta2p1_*_*', 
        'keep *_hltL1sMu16Eta2p1_*_*', 
        'keep *_hltL2MuonCandidatesNoVtx_*_*', 
        'keep *_hltL2MuonCandidates_*_*', 
        'keep *_hltL2MuonSeeds_*_*', 
        'keep *_hltL2Muons_*_*', 
        'keep *_hltL2TauJets_*_*', 
        'keep *_hltL3MuonCandidates_*_*', 
        'keep *_hltL3MuonsIOHit_*_*', 
        'keep *_hltL3MuonsLinksCombination_*_*', 
        'keep *_hltL3MuonsOIHit_*_*', 
        'keep *_hltL3MuonsOIState_*_*', 
        'keep *_hltL3Muons_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuons_*_*', 
        'keep *_hltL3SecondaryVertexTagInfos_*_*', 
        'keep *_hltL3TkFromL2OICombination_*_*', 
        'keep *_hltL3TkTracksFromL2IOHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIState_*_*', 
        'keep *_hltL3TkTracksFromL2_*_*', 
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIState_*_*', 
        'keep *_hltL3TrajSeedIOHit_*_*', 
        'keep *_hltL3TrajSeedOIHit_*_*', 
        'keep *_hltL3TrajSeedOIState_*_*', 
        'keep *_hltL3TrajectorySeed_*_*', 
        'keep *_hltL3crIsoL1sMu16Eta2p1L1f0L2f16QL3f18QL3crIsoRhoFiltered0p15_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopEle27_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopIsoMu24_*_*', 
        'keep *_hltMergedTracks_*_*', 
        'keep *_hltMet_*_*', 
        'keep *_hltMu8Ele17CaloIdTCaloIsoVLPixelMatchFilter_*_*', 
        'keep *_hltMuTrackJpsiCtfTrackCands_*_*', 
        'keep *_hltMuTrackJpsiPixelTrackCands_*_*', 
        'keep *_hltMuonCSCDigis_*_*', 
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*', 
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*', 
        'keep *_hltMuonDTDigis_*_*', 
        'keep *_hltMuonRPCDigis_*_*', 
        'keep *_hltOnlineBeamSpot_*_*', 
        'keep *_hltOnlinePrimaryVertices_*_*', 
        'keep *_hltOverlapFilterEle20LooseIsoPFTau20OldVersion_*_*', 
        'keep *_hltOverlapFilterIsoEle20MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15IsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15TightIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu18LooseIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu18PFTau25TrackPt5Prong4_*_*', 
        'keep *_hltPFJetForBtag_*_*', 
        'keep *_hltPFMuonMerging_*_*', 
        'keep *_hltPFTau15TrackLooseIso_*_*', 
        'keep *_hltPFTau15Track_*_*', 
        'keep *_hltPFTau15_*_*', 
        'keep *_hltPFTau20IsoMuVertex_*_*', 
        'keep *_hltPFTau20TrackLooseIso_*_*', 
        'keep *_hltPFTau20Track_*_*', 
        'keep *_hltPFTau20_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolationProng4IsoMuVertex_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolationProng4_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolation_*_*', 
        'keep *_hltPFTau25TrackPt5_*_*', 
        'keep *_hltPFTau25_*_*', 
        'keep *_hltPFTau35TrackPt20LooseIsoProng2_*_*', 
        'keep *_hltPFTau35TrackPt20LooseIso_*_*', 
        'keep *_hltPFTau35TrackPt20_*_*', 
        'keep *_hltPFTau35Track_*_*', 
        'keep *_hltPFTau35_*_*', 
        'keep *_hltPFTauEleVertex20_*_*', 
        'keep *_hltPFTauJetTracksAssociator_*_*', 
        'keep *_hltPFTauMediumIso20TrackMediumIso_*_*', 
        'keep *_hltPFTauMediumIso20Track_*_*', 
        'keep *_hltPFTauMediumIso20_*_*', 
        'keep *_hltPFTauMediumIso35Track_*_*', 
        'keep *_hltPFTauMediumIso35_*_*', 
        'keep *_hltPFTauTagInfo_*_*', 
        'keep *_hltPFTauTightIso20TrackTightIso_*_*', 
        'keep *_hltPFTauTightIso20Track_*_*', 
        'keep *_hltPFTauTightIso20_*_*', 
        'keep *_hltPFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltParticleFlowForTaus_*_*', 
        'keep *_hltParticleFlow_*_*', 
        'keep *_hltPixelMatch3HitElectronsActivity_*_*', 
        'keep *_hltPixelMatch3HitElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchCleanElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchElectronsActivity_*_*', 
        'keep *_hltPixelMatchElectronsL1Iso_*_*', 
        'keep *_hltPixelMatchElectronsL1NonIso_*_*', 
        'keep *_hltPixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltPixelTracksElectrons_*_*', 
        'keep *_hltPixelTracksMerged_*_*', 
        'keep *_hltPixelTracks_*_*', 
        'keep *_hltPixelVertices3DbbPhi_*_*', 
        'keep *_hltPixelVertices_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC4_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC5_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidate_*_*', 
        'keep *_hltRpcRecHits_*_*', 
        'keep *_hltSelector4CentralJetsL1FastJet_*_*', 
        'keep *_hltSelector8CentralJetsL1FastJet_*_*', 
        'keep *_hltSelectorJets20L1FastJet_*_*', 
        'keep *_hltSiPixelCluster_*_*', 
        'keep *_hltSiPixelClustersCache_*_*', 
        'keep *_hltSiPixelClusters_*_*', 
        'keep *_hltSiStripClusters_*_*', 
        'keep *_hltSiStripRawToClustersFacility_*_*', 
        'keep *_hltSingleMu15L3Filtered15_*_*', 
        'keep *_hltSingleMuIsoL1s14L3IsoFiltered15eta2p1_*_*', 
        'keep *_hltSingleMuIsoL3IsoFiltered15_*_*', 
        'keep *_hltTowerMakerForAll_*_*', 
        'keep *_hltTowerMakerForMuons_*_*', 
        'keep *_hltTriggerSummaryAOD_*_*', 
        'keep *_hltTriggerSummaryRAW_*_*', 
        'keep *_hltTrimmedPixelVertices_*_*', 
        'keep *_hltVerticesL3_*_*', 
        'keep *_hltVerticesPFFilter_*_*', 
        'keep *_hltVerticesPFSelector_*_*', 
        'keep DcsStatuss_hltScalersRawToDigi_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_rawDataRepacker_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajSeedOIHit_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajectorySeed_*_*', 
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*', 
        'keep LumiScalerss_hltScalersRawToDigi_*_*', 
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIHit_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIState_*_*', 
        'keep TrackingRecHitsOwned_hltL3Muons_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep recoCaloJets_*_*_*', 
        'keep recoCaloMETs_*_*_*', 
        'keep recoCaloMETs_hltMet_*_*', 
        'keep recoCompositeCandidates_*_*_*', 
        'keep recoElectrons_*_*_*', 
        'keep recoIsolatedPixelTrackCandidates_*_*_*', 
        'keep recoMETs_*_*_*', 
        'keep recoPFJets_*_*_*', 
        'keep recoPFTaus_*_*_*', 
        'keep recoRecoChargedCandidates_*_*_*', 
        'keep recoRecoChargedCandidates_hltHIL3MuonCandidates_*_*', 
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidates_*_*_*', 
        'keep recoRecoEcalCandidates_hltL1IsoRecoEcalCandidate_*_*', 
        'keep recoRecoEcalCandidates_hltL1NonIsoRecoEcalCandidate_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIHit_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3MuonsOIHit_*_*', 
        'keep recoTracks_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3Muons_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIHit_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIState_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2_*_*', 
        'keep triggerTriggerEventWithRefs_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep triggerTriggerFilterObjectWithRefs_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*'
     ) )
)

process.HLTIter0GroupedCkfTrajectoryBuilderIT = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string('hltESPMeasurementTracker'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(False),
    bestHitOnly = cms.bool(True),
    cleanTrajectoryAfterInOut = cms.bool(False),
    doSeedingRegionRebuilding = cms.bool(False),
    estimator = cms.string('hltESPChi2ChargeMeasurementEstimator9'),
    foundHitBonus = cms.double(5.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('HLTIter0PSetTrajectoryFilterIT')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(2),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterialParabolicMf'),
    propagatorOpposite = cms.string('PropagatorWithMaterialParabolicMfOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('HLTIter0PSetTrajectoryFilterIT')
    ),
    updator = cms.string('hltESPKFUpdator'),
    useHitsSplitting = cms.bool(False),
    useSameTrajFilter = cms.bool(True)
)

process.HLTIter0PSetTrajectoryFilterIT = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(1.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(0),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(1),
    maxLostHitsFraction = cms.double(999.0),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('HLTSiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(4),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.3),
    minimumNumberOfHits = cms.int32(4),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.HLTIter0Phase2L3FromL1TkMuonGroupedCkfTrajectoryFilterIT = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(10.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('HLTSiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.HLTIter0Phase2L3FromL1TkMuonPSetGroupedCkfTrajectoryBuilderIT = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('hltESPChi2ChargeMeasurementEstimator30'),
    foundHitBonus = cms.double(1000.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('HLTIter0Phase2L3FromL1TkMuonGroupedCkfTrajectoryFilterIT')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(True),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(1.0),
    maxCand = cms.int32(5),
    minNrOfHitsForRebuild = cms.int32(2),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('HLTIter0Phase2L3FromL1TkMuonGroupedCkfTrajectoryFilterIT')
    ),
    updator = cms.string('hltESPKFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.HLTIter0Phase2L3MuonGroupedCkfTrajectoryFilterIT = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(10.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('HLTSiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.HLTIter0Phase2L3MuonPSetGroupedCkfTrajectoryBuilderIT = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('hltESPChi2ChargeMeasurementEstimator30'),
    foundHitBonus = cms.double(1000.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('HLTIter0Phase2L3MuonGroupedCkfTrajectoryFilterIT')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(True),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(1.0),
    maxCand = cms.int32(5),
    minNrOfHitsForRebuild = cms.int32(2),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('HLTIter0Phase2L3MuonGroupedCkfTrajectoryFilterIT')
    ),
    updator = cms.string('hltESPKFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.HLTIter1GroupedCkfTrajectoryBuilderIT = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string('hltIter1ESPMeasurementTracker'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(False),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('hltESPChi2ChargeMeasurementEstimator16'),
    foundHitBonus = cms.double(5.0),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(2),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterialParabolicMf'),
    propagatorOpposite = cms.string('PropagatorWithMaterialParabolicMfOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('HLTIter1PSetTrajectoryFilterIT')
    ),
    updator = cms.string('hltESPKFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.HLTIter1PSetTrajectoryFilterIT = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(1.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(0),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(1),
    maxLostHitsFraction = cms.double(999.0),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('HLTSiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.2),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.HLTIter2GroupedCkfTrajectoryBuilderIT = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string('hltESPMeasurementTracker'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(False),
    bestHitOnly = cms.bool(True),
    cleanTrajectoryAfterInOut = cms.bool(False),
    doSeedingRegionRebuilding = cms.bool(False),
    estimator = cms.string('hltESPChi2ChargeMeasurementEstimator16'),
    foundHitBonus = cms.double(5.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('HLTIter2PSetTrajectoryFilterIT')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(2),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterialParabolicMf'),
    propagatorOpposite = cms.string('PropagatorWithMaterialParabolicMfOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('HLTIter2PSetTrajectoryFilterIT')
    ),
    updator = cms.string('hltESPKFUpdator'),
    useHitsSplitting = cms.bool(False),
    useSameTrajFilter = cms.bool(True)
)

process.HLTIter2PSetTrajectoryFilterIT = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(1.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(0),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(1),
    maxLostHitsFraction = cms.double(999.0),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('HLTSiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.3),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(1),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.HLTIter2Phase2L3FromL1TkMuonPSetGroupedCkfTrajectoryBuilderIT = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string('hltIter2HighPtTkMuESPMeasurementTracker'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(False),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('hltESPChi2ChargeMeasurementEstimator30'),
    foundHitBonus = cms.double(1000.0),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(2),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterialParabolicMf'),
    propagatorOpposite = cms.string('PropagatorWithMaterialParabolicMfOpposite'),
    requireSeedHitsInRebuild = cms.bool(False),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('HLTIter2Phase2L3FromL1TkMuonPSetTrajectoryFilterIT')
    ),
    updator = cms.string('hltESPKFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.HLTIter2Phase2L3FromL1TkMuonPSetTrajectoryFilterIT = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(1.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(3),
    maxLostHits = cms.int32(1),
    maxLostHitsFraction = cms.double(999.0),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('HLTSiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.3),
    minimumNumberOfHits = cms.int32(5),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.HLTIter2Phase2L3MuonPSetGroupedCkfTrajectoryBuilderIT = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string('hltIter2HighPtTkMuESPMeasurementTracker'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(False),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('hltESPChi2ChargeMeasurementEstimator30'),
    foundHitBonus = cms.double(1000.0),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(2),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterialParabolicMf'),
    propagatorOpposite = cms.string('PropagatorWithMaterialParabolicMfOpposite'),
    requireSeedHitsInRebuild = cms.bool(False),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('HLTIter2Phase2L3MuonPSetTrajectoryFilterIT')
    ),
    updator = cms.string('hltESPKFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.HLTIter2Phase2L3MuonPSetTrajectoryFilterIT = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(1.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(3),
    maxLostHits = cms.int32(1),
    maxLostHitsFraction = cms.double(999.0),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('HLTSiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.3),
    minimumNumberOfHits = cms.int32(5),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.HLTPSetMuonCkfTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('MuonCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string('hltESPMeasurementTracker'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    deltaEta = cms.double(-1.0),
    deltaPhi = cms.double(-1.0),
    estimator = cms.string('hltESPChi2ChargeMeasurementEstimator30'),
    intermediateCleaning = cms.bool(False),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    propagatorProximity = cms.string('SteppingHelixPropagatorAny'),
    rescaleErrorIfFail = cms.double(1.0),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('HLTPSetMuonCkfTrajectoryFilter')
    ),
    updator = cms.string('hltESPKFUpdator'),
    useSeedLayer = cms.bool(False)
)

process.HLTPSetMuonCkfTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(1.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(1),
    maxLostHitsFraction = cms.double(999.0),
    maxNumberOfHits = cms.int32(-1),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('HLTSiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minimumNumberOfHits = cms.int32(5),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.HLTScouting = cms.PSet(
    outputCommands = cms.vstring(
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*'
    )
)

process.HLTSeedFromProtoTracks = cms.PSet(
    ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
    MinOneOverPtError = cms.double(1.0),
    OriginTransverseErrorMultiplier = cms.double(1.0),
    SeedMomentumForBOFF = cms.double(5.0),
    TTRHBuilder = cms.string('hltESPTTRHBuilderPixelOnly'),
    forceKinematicWithRegionDirection = cms.bool(False),
    magneticField = cms.string('ParabolicMf'),
    propagator = cms.string('PropagatorWithMaterialParabolicMf')
)

process.HLTSiStripClusterChargeCutLoose = cms.PSet(
    value = cms.double(1620.0)
)

process.HLTSiStripClusterChargeCutNone = cms.PSet(
    value = cms.double(-1.0)
)

process.HLTriggerAOD = cms.PSet(
    outputCommands = cms.vstring(
        'drop *_hlt*_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*'
    )
)

process.HLTriggerRAW = cms.PSet(
    outputCommands = cms.vstring(
        'drop *_hlt*_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*'
    )
)

process.HLTriggerRECO = cms.PSet(
    outputCommands = cms.vstring(
        'drop *_hlt*_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*'
    )
)

process.HiLowPtTrackingRegionWithVertexBlock = cms.PSet(
    VertexCollection = cms.InputTag("hiSelectedPixelVertex"),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    fixedError = cms.double(0.2),
    nSigmaZ = cms.double(3.0),
    originRadius = cms.double(0.2),
    precise = cms.bool(True),
    ptMin = cms.double(0.25),
    sigmaZVertex = cms.double(3.0),
    useFakeVertices = cms.bool(False),
    useFixedError = cms.bool(True),
    useFoundVertices = cms.bool(True),
    useMultipleScattering = cms.bool(False)
)

process.HiTrackingRegionFactoryFromJetsBlock = cms.PSet(
    ComponentName = cms.string('TauRegionalPixelSeedGenerator'),
    RegionPSet = cms.PSet(
        JetSrc = cms.InputTag("iterativeConePu5CaloJets"),
        deltaEtaRegion = cms.double(0.1),
        deltaPhiRegion = cms.double(0.1),
        howToUseMeasurementTracker = cms.string('ForSiStrips'),
        measurementTrackerName = cms.InputTag("MeasurementTrackerEvent"),
        originHalfLength = cms.double(0.2),
        originRadius = cms.double(0.2),
        originZPos = cms.double(0.0),
        precise = cms.bool(True),
        ptMin = cms.double(5.0),
        vertexSrc = cms.InputTag("hiSelectedPixelVertex")
    )
)

process.HiTrackingRegionForPrimaryVertexBlock = cms.PSet(
    beamSpot = cms.InputTag("offlineBeamSpot"),
    directionXCoord = cms.double(1.0),
    directionYCoord = cms.double(1.0),
    directionZCoord = cms.double(0.0),
    doVariablePtMin = cms.bool(True),
    nSigmaZ = cms.double(3.0),
    originRadius = cms.double(0.1),
    precise = cms.bool(True),
    ptMin = cms.double(0.7),
    siPixelRecHits = cms.InputTag("siPixelRecHits"),
    useFakeVertices = cms.bool(False),
    useMultipleScattering = cms.bool(False)
)

process.IOMCRAW = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_randomEngineStateProducer_*_*')
)

process.JPTZSPCorrectorAntiKt4 = cms.PSet(
    DzVertexCut = cms.double(0.2),
    EfficiencyMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_538_TrackNonEff.txt'),
    ElectronIds = cms.InputTag("JPTeidTight"),
    Electrons = cms.InputTag("gedGsfElectrons"),
    JetSplitMerge = cms.int32(0),
    JetTracksAssociationAtCaloFace = cms.InputTag("ak4JetTracksAssociatorAtCaloFace"),
    JetTracksAssociationAtVertex = cms.InputTag("ak4JetTracksAssociatorAtVertexJPT"),
    LeakageMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_538_TrackLeakage.txt'),
    MaxJetEta = cms.double(3.0),
    Muons = cms.InputTag("muons"),
    PtErrorQuality = cms.double(0.05),
    ResponseMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_538_response.txt'),
    TrackQuality = cms.string('highPurity'),
    UseEfficiency = cms.bool(True),
    UseElectrons = cms.bool(True),
    UseInConeTracks = cms.bool(True),
    UseMuons = cms.bool(True),
    UseOutOfConeTracks = cms.bool(True),
    UseOutOfVertexTracks = cms.bool(True),
    UsePions = cms.bool(True),
    UseResponseInVecCorr = cms.bool(False),
    UseTrackQuality = cms.bool(True),
    VectorialCorrection = cms.bool(True),
    Verbose = cms.bool(True)
)

process.JetIDParams = cms.PSet(
    ebRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    eeRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    hbheRecHitsColl = cms.InputTag("hbhereco"),
    hfRecHitsColl = cms.InputTag("hfreco"),
    hoRecHitsColl = cms.InputTag("horeco"),
    rpcRecHits = cms.InputTag("rpcRecHits"),
    useRecHits = cms.bool(True)
)

process.L1TTriggerTowerConfig_etaphi = cms.PSet(
    binsEta = cms.vdouble(),
    binsPhi = cms.vdouble(),
    maxEta = cms.double(3.0),
    maxPhi = cms.double(3.14159265359),
    minEta = cms.double(1.479),
    minPhi = cms.double(-3.14159265359),
    nBinsEta = cms.int32(18),
    nBinsPhi = cms.int32(72),
    readMappingFile = cms.bool(False)
)

process.L1TriggerAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'keep *_gtStage2Digis_*_*', 
        'keep *_gmtStage2Digis_*_*', 
        'keep *_caloStage2Digis_*_*'
    )
)

process.L1TriggerFEVTDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_simCscTriggerPrimitiveDigis_*_*', 
        'keep *_simDtTriggerPrimitiveDigis_*_*', 
        'keep *_simRpcTriggerDigis_*_*', 
        'keep *_simRctDigis_*_*', 
        'keep *_simCsctfDigis_*_*', 
        'keep *_simCsctfTrackDigis_*_*', 
        'keep *_simDttfDigis_*_*', 
        'keep *_simGctDigis_*_*', 
        'keep *_simCaloStage1Digis_*_*', 
        'keep *_simCaloStage1FinalDigis_*_*', 
        'keep *_simCaloStage2Layer1Digis_*_*', 
        'keep *_simCaloStage2Digis_*_*', 
        'keep *_simGmtDigis_*_*', 
        'keep *_simBmtfDigis_*_*', 
        'keep *_simKBmtfDigis_*_*', 
        'keep *_simOmtfDigis_*_*', 
        'keep *_simEmtfDigis_*_*', 
        'keep *_simGmtStage2Digis_*_*', 
        'keep *_simGtDigis_*_*', 
        'keep *_simGtStage2Digis_*_*', 
        'keep *_cscTriggerPrimitiveDigis_*_*', 
        'keep *_dtTriggerPrimitiveDigis_*_*', 
        'keep *_rpcTriggerDigis_*_*', 
        'keep *_rctDigis_*_*', 
        'keep *_csctfDigis_*_*', 
        'keep *_csctfTrackDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gctDigis_*_*', 
        'keep *_gmtDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_gtEvmDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'keep *_gtStage2Digis_*_*', 
        'keep *_gmtStage2Digis_*_*', 
        'keep *_caloStage2Digis_*_*', 
        'keep l1tHGCalTriggerCellBXVector_hgcalVFEProducer_*_*', 
        'keep l1tHGCalTriggerCellBXVector_hgcalConcentratorProducer_*_*', 
        'keep l1tHGCalTowerBXVector_hgcalTowerProducer_*_*', 
        'keep l1tHGCalClusterBXVector_hgcalBackEndLayer1Producer_*_*', 
        'keep l1tHGCalMulticlusterBXVector_hgcalBackEndLayer2Producer_*_*', 
        'keep *_simMuonGEMPadDigis_*_*', 
        'keep *_simMuonGEMPadDigiClusters_*_*', 
        'keep *_simMuonME0PadDigis__*', 
        'keep *_me0TriggerDigis__*', 
        'keep *_simMuonME0PseudoReDigisCoarse__*', 
        'keep *_me0RecHitsCoarse__*', 
        'keep *_me0TriggerPseudoDigis__*', 
        'keep *_me0TriggerConvertedPseudoDigis__*', 
        'keep *_simKBmtfDigis_*_*', 
        'keep *_hgcalVFEProducerhgcalConcentratorProducer_*_*', 
        'keep *_hgcalBackEndLayer1Producer_*_*', 
        'keep *_hgcalBackEndLayer2Producer_*_*', 
        'keep *_hgcalTowerMapProducer_*_*', 
        'keep *_hgcalTowerProducer_*_*', 
        'keep *_L1EGammaClusterEmuProducer_*_*', 
        'keep *_l1EGammaEEProducer_*_*', 
        'keep *_L1TkPrimaryVertex_*_*', 
        'keep *_L1TkElectronsCrystal_*_*', 
        'keep *_L1TkElectronsLooseCrystal_*_*', 
        'keep *_L1TkElectronsEllipticMatchCrystal_*_*', 
        'keep *_L1TkIsoElectronsCrystal_*_*', 
        'keep *_L1TkPhotonsCrystal_*_*', 
        'keep *_L1TkElectronsHGC_*_*', 
        'keep *_L1TkElectronsEllipticMatchHGC_*_*', 
        'keep *_L1TkIsoElectronsHGC_*_*', 
        'keep *_L1TkPhotonsHGC_*_*', 
        'keep *_L1TkMuons_*_*', 
        'keep *_pfClustersFromL1EGClusters_*_*', 
        'keep *_pfClustersFromCombinedCaloHCal_*_*', 
        'keep *_pfClustersFromCombinedCaloHF_*_*', 
        'keep *_pfClustersFromHGC3DClusters_*_*', 
        'keep *_pfTracksFromL1TracksBarrel_*_*', 
        'keep *_l1pfProducerBarrel_*_*', 
        'keep *_pfTracksFromL1TracksHGCal_*_*', 
        'keep *_l1pfProducerHGCal_*_*', 
        'keep *_l1pfProducerHGCalNoTK_*_*', 
        'keep *_l1pfProducerHF_*_*', 
        'keep *_l1pfCandidates_*_*', 
        'keep *_ak4PFL1Calo_*_*', 
        'keep *_ak4PFL1PF_*_*', 
        'keep *_ak4PFL1Puppi_*_*', 
        'keep *_ak4PFL1CaloCorrected_*_*', 
        'keep *_ak4PFL1PFCorrected_*_*', 
        'keep *_ak4PFL1PuppiCorrected_*_*', 
        'keep *_Phase1L1TJetProducer_*_*', 
        'keep *_Phase1L1TJetCalibrator_*_*', 
        'keep *_l1PFMetCalo_*_*', 
        'keep *_l1PFMetPF_*_*', 
        'keep *_l1PFMetPuppi_*_*', 
        'keep *_l1NNTauProducer_*_*', 
        'keep *_l1NNTauProducerPuppi_*_*', 
        'keep *_TTStubsFromPhase2TrackerDigis_*_*', 
        'keep *_TTClustersFromPhase2TrackerDigis_*_*', 
        'keep *_TTTracksFromExtendedTrackletEmulation_*_*', 
        'keep *_TTTracksFromTrackletEmulation_*_*'
    )
)

process.L1TriggerRAW = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*'
    )
)

process.L1TriggerRAWDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_gtStage2Digis_*_*', 
        'keep *_gmtStage2Digis_*_*', 
        'keep *_caloStage2Digis_*_*'
    )
)

process.L1TriggerRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'keep *_gtStage2Digis_*_*', 
        'keep *_gmtStage2Digis_*_*', 
        'keep *_caloStage2Digis_*_*'
    )
)

process.LHEEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep *_externalLHEProducer_LHEScriptOutput_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.LSParameter = cms.untracked.PSet(
    HcalFeatureHFEMBit = cms.bool(False),
    Long_Short_Offset = cms.double(10.1),
    Long_vrs_Short_Slope = cms.double(100.2),
    Min_Long_Energy = cms.double(10),
    Min_Short_Energy = cms.double(10)
)

process.LutParametersBlock = cms.PSet(
    LutParameters = cms.PSet(
        BTIC = cms.untracked.int32(0),
        D = cms.untracked.double(0),
        Debug = cms.untracked.bool(False),
        WHEEL = cms.untracked.int32(-1),
        XCN = cms.untracked.double(0)
    )
)

process.ME0SegAlgoRU = cms.PSet(
    algo_name = cms.string('ME0SegAlgoRU'),
    algo_pset = cms.PSet(
        allowWideSegments = cms.bool(True),
        doCollisions = cms.bool(True),
        maxChi2Additional = cms.double(100.0),
        maxChi2GoodSeg = cms.double(50),
        maxChi2Prune = cms.double(50),
        maxETASeeds = cms.double(0.1),
        maxPhiAdditional = cms.double(0.001096605744),
        maxPhiSeeds = cms.double(0.001096605744),
        maxTOFDiff = cms.double(25),
        minNumberOfHits = cms.uint32(4),
        requireCentralBX = cms.bool(True)
    )
)

process.ME0SegmentAlgorithm = cms.PSet(
    algo_name = cms.string('ME0SegmentAlgorithm'),
    algo_pset = cms.PSet(
        ME0Debug = cms.untracked.bool(True),
        dEtaChainBoxMax = cms.double(0.05),
        dPhiChainBoxMax = cms.double(0.02),
        dTimeChainBoxMax = cms.double(15.0),
        dXclusBoxMax = cms.double(1.0),
        dYclusBoxMax = cms.double(5.0),
        maxRecHitsInCluster = cms.int32(6),
        minHitsPerSegment = cms.uint32(3),
        preClustering = cms.bool(True),
        preClusteringUseChaining = cms.bool(True)
    )
)

process.MEtoEDMConverterAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.MEtoEDMConverterFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_MEtoEDMConverter_*_*')
)

process.MEtoEDMConverterRECO = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.MINIAODEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    eventAutoFlushCompressedSize = cms.untracked.int32(-900),
    outputCommands = cms.untracked.vstring(
        'drop *', 
        'keep *_slimmedPhotons_*_*', 
        'keep *_slimmedOOTPhotons_*_*', 
        'keep *_slimmedElectrons_*_*', 
        'keep *_slimmedMuons_*_*', 
        'keep *_slimmedTaus_*_*', 
        'keep *_slimmedTausBoosted_*_*', 
        'keep *_slimmedCaloJets_*_*', 
        'keep *_slimmedJets_*_*', 
        'keep recoBaseTagInfosOwned_slimmedJets_*_*', 
        'keep *_slimmedJetsAK8_*_*', 
        'drop recoBaseTagInfosOwned_slimmedJetsAK8_*_*', 
        'keep *_slimmedJetsPuppi_*_*', 
        'keep *_slimmedMETs_*_*', 
        'keep *_slimmedMETsNoHF_*_*', 
        'keep *_slimmedMETsPuppi_*_*', 
        'keep *_slimmedSecondaryVertices_*_*', 
        'keep *_slimmedLambdaVertices_*_*', 
        'keep *_slimmedKshortVertices_*_*', 
        'keep *_slimmedJetsAK8PFPuppiSoftDropPacked_SubJets_*', 
        'keep recoPhotonCores_reducedEgamma_*_*', 
        'keep recoGsfElectronCores_reducedEgamma_*_*', 
        'keep recoConversions_reducedEgamma_*_*', 
        'keep recoSuperClusters_reducedEgamma_*_*', 
        'keep recoCaloClusters_reducedEgamma_*_*', 
        'keep EcalRecHitsSorted_reducedEgamma_*_*', 
        'keep recoGsfTracks_reducedEgamma_*_*', 
        'keep HBHERecHitsSorted_reducedEgamma_*_*', 
        'drop *_*_caloTowers_*', 
        'drop *_*_pfCandidates_*', 
        'drop *_*_genJets_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep *_offlineSlimmedPrimaryVertices_*_*', 
        'keep patPackedCandidates_packedPFCandidates_*_*', 
        'keep *_isolatedTracks_*_*', 
        'keep *_oniaPhotonCandidates_*_*', 
        'keep *_bunchSpacingProducer_*_*', 
        'keep double_fixedGridRhoAll__*', 
        'keep double_fixedGridRhoFastjetAll__*', 
        'keep double_fixedGridRhoFastjetAllTmp__*', 
        'keep double_fixedGridRhoFastjetAllCalo__*', 
        'keep double_fixedGridRhoFastjetCentral_*_*', 
        'keep double_fixedGridRhoFastjetCentralCalo__*', 
        'keep double_fixedGridRhoFastjetCentralChargedPileUp__*', 
        'keep double_fixedGridRhoFastjetCentralNeutral__*', 
        'keep *_slimmedPatTrigger_*_*', 
        'keep patPackedTriggerPrescales_patTrigger__*', 
        'keep patPackedTriggerPrescales_patTrigger_l1max_*', 
        'keep patPackedTriggerPrescales_patTrigger_l1min_*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_gtStage2Digis__*', 
        'keep *_gmtStage2Digis_Muon_*', 
        'keep *_caloStage2Digis_Jet_*', 
        'keep *_caloStage2Digis_Tau_*', 
        'keep *_caloStage2Digis_EGamma_*', 
        'keep *_caloStage2Digis_EtSum_*', 
        'keep *_TriggerResults_*_HLT', 
        'keep *_TriggerResults_*_*', 
        'keep patPackedCandidates_lostTracks_*_*', 
        'keep HcalNoiseSummary_hcalnoise__*', 
        'keep recoCSCHaloData_CSCHaloData_*_*', 
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*', 
        'keep LumiScalerss_scalersRawToDigi_*_*', 
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*', 
        'keep recoForwardProtons_ctppsProtons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep *_prefiringweight_*_*', 
        'keep *_packedPFCandidates_hcalDepthEnergyFractions_*', 
        'drop *_packedPFCandidates_hcalDepthEnergyFractions_*'
    )
)

process.MINIAODSIMEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    eventAutoFlushCompressedSize = cms.untracked.int32(-900),
    outputCommands = cms.untracked.vstring(
        'drop *', 
        'keep *_slimmedPhotons_*_*', 
        'keep *_slimmedOOTPhotons_*_*', 
        'keep *_slimmedElectrons_*_*', 
        'keep *_slimmedMuons_*_*', 
        'keep *_slimmedTaus_*_*', 
        'keep *_slimmedTausBoosted_*_*', 
        'keep *_slimmedCaloJets_*_*', 
        'keep *_slimmedJets_*_*', 
        'keep recoBaseTagInfosOwned_slimmedJets_*_*', 
        'keep *_slimmedJetsAK8_*_*', 
        'drop recoBaseTagInfosOwned_slimmedJetsAK8_*_*', 
        'keep *_slimmedJetsPuppi_*_*', 
        'keep *_slimmedMETs_*_*', 
        'keep *_slimmedMETsNoHF_*_*', 
        'keep *_slimmedMETsPuppi_*_*', 
        'keep *_slimmedSecondaryVertices_*_*', 
        'keep *_slimmedLambdaVertices_*_*', 
        'keep *_slimmedKshortVertices_*_*', 
        'keep *_slimmedJetsAK8PFPuppiSoftDropPacked_SubJets_*', 
        'keep recoPhotonCores_reducedEgamma_*_*', 
        'keep recoGsfElectronCores_reducedEgamma_*_*', 
        'keep recoConversions_reducedEgamma_*_*', 
        'keep recoSuperClusters_reducedEgamma_*_*', 
        'keep recoCaloClusters_reducedEgamma_*_*', 
        'keep EcalRecHitsSorted_reducedEgamma_*_*', 
        'keep recoGsfTracks_reducedEgamma_*_*', 
        'keep HBHERecHitsSorted_reducedEgamma_*_*', 
        'drop *_*_caloTowers_*', 
        'drop *_*_pfCandidates_*', 
        'drop *_*_genJets_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep *_offlineSlimmedPrimaryVertices_*_*', 
        'keep patPackedCandidates_packedPFCandidates_*_*', 
        'keep *_isolatedTracks_*_*', 
        'keep *_oniaPhotonCandidates_*_*', 
        'keep *_bunchSpacingProducer_*_*', 
        'keep double_fixedGridRhoAll__*', 
        'keep double_fixedGridRhoFastjetAll__*', 
        'keep double_fixedGridRhoFastjetAllTmp__*', 
        'keep double_fixedGridRhoFastjetAllCalo__*', 
        'keep double_fixedGridRhoFastjetCentral_*_*', 
        'keep double_fixedGridRhoFastjetCentralCalo__*', 
        'keep double_fixedGridRhoFastjetCentralChargedPileUp__*', 
        'keep double_fixedGridRhoFastjetCentralNeutral__*', 
        'keep *_slimmedPatTrigger_*_*', 
        'keep patPackedTriggerPrescales_patTrigger__*', 
        'keep patPackedTriggerPrescales_patTrigger_l1max_*', 
        'keep patPackedTriggerPrescales_patTrigger_l1min_*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_gtStage2Digis__*', 
        'keep *_gmtStage2Digis_Muon_*', 
        'keep *_caloStage2Digis_Jet_*', 
        'keep *_caloStage2Digis_Tau_*', 
        'keep *_caloStage2Digis_EGamma_*', 
        'keep *_caloStage2Digis_EtSum_*', 
        'keep *_TriggerResults_*_HLT', 
        'keep *_TriggerResults_*_*', 
        'keep patPackedCandidates_lostTracks_*_*', 
        'keep HcalNoiseSummary_hcalnoise__*', 
        'keep recoCSCHaloData_CSCHaloData_*_*', 
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*', 
        'keep LumiScalerss_scalersRawToDigi_*_*', 
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*', 
        'keep recoForwardProtons_ctppsProtons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep *_prefiringweight_*_*', 
        'keep *_packedPFCandidates_hcalDepthEnergyFractions_*', 
        'drop *_packedPFCandidates_hcalDepthEnergyFractions_*', 
        'keep patPackedGenParticles_packedGenParticles_*_*', 
        'keep recoGenParticles_prunedGenParticles_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_*_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep recoGenParticles_genPUProtons_*_*', 
        'keep *_slimmedGenJetsFlavourInfos_*_*', 
        'keep *_slimmedGenJets__*', 
        'keep *_slimmedGenJetsAK8__*', 
        'keep *_slimmedGenJetsAK8SoftDropSubJets__*', 
        'keep *_genMetTrue_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep GenRunInfoProduct_*_*_*', 
        'keep *_genParticles_xyz0_*', 
        'keep *_genParticles_t0_*', 
        'keep PileupSummaryInfos_slimmedAddPileupInfo_*_*', 
        'keep L1GtTriggerMenuLite_l1GtTriggerMenuLite__*', 
        'keep *_slimmedElectronsFromMultiCl_*_*', 
        'keep *_slimmedPhotonsFromMultiCl_*_*', 
        'keep *_offlineSlimmedPrimaryVertices4D_*_*'
    )
)

process.MINIGENEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    eventAutoFlushCompressedSize = cms.untracked.int32(15728640),
    outputCommands = cms.untracked.vstring(
        'drop *', 
        'keep patPackedGenParticles_packedGenParticles_*_*', 
        'keep recoGenParticles_prunedGenParticles_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_*_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep recoGenParticles_genPUProtons_*_*', 
        'keep *_slimmedGenJetsFlavourInfos_*_*', 
        'keep *_slimmedGenJets__*', 
        'keep *_slimmedGenJetsAK8__*', 
        'keep *_slimmedGenJetsAK8SoftDropSubJets__*', 
        'keep *_genMetTrue_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep GenRunInfoProduct_*_*_*', 
        'keep *_genParticles_xyz0_*', 
        'keep *_genParticles_t0_*'
    )
)

process.MIXINGMODULEEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *', 
        'keep *_cfWriter_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.MIdIsoExtractorPSetBlock = cms.PSet(
    CaloExtractorPSet = cms.PSet(
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        DR_Max = cms.double(0.5),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DR_Veto_HO = cms.double(0.1),
        DepositInstanceLabels = cms.vstring(
            'ecal', 
            'hcal', 
            'ho'
        ),
        DepositLabel = cms.untracked.string('Cal'),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Noise_EB = cms.double(0.025),
        Noise_EE = cms.double(0.1),
        Noise_HB = cms.double(0.2),
        Noise_HE = cms.double(0.2),
        Noise_HO = cms.double(0.2),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Threshold_HO = cms.double(0.5),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            dRHcal = cms.double(1.0),
            dRHcalPreselection = cms.double(1.0),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useGEM = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useME0 = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        ),
        UseRecHitsFlag = cms.bool(False)
    ),
    JetExtractorPSet = cms.PSet(
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.1),
        ExcludeMuonVeto = cms.bool(True),
        JetCollectionLabel = cms.InputTag("ak4CaloJets"),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold = cms.double(5.0),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            dRHcal = cms.double(0.5),
            dRHcalPreselection = cms.double(0.5),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useGEM = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useME0 = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        )
    ),
    TrackExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(0.5),
        DR_Veto = cms.double(0.01),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(0.1),
        Diff_z = cms.double(0.2),
        NHits_Min = cms.uint32(0),
        Pt_Min = cms.double(-1.0),
        inputTrackCollection = cms.InputTag("generalTracks")
    ),
    ecalDepositName = cms.string('ecal'),
    hcalDepositName = cms.string('hcal'),
    hoDepositName = cms.string('ho'),
    jetDepositName = cms.string('jets'),
    trackDepositName = cms.string('tracker')
)

process.MIsoCaloExtractorByAssociatorHitsBlock = cms.PSet(
    CenterConeOnCalIntersection = cms.bool(False),
    ComponentName = cms.string('CaloExtractorByAssociator'),
    DR_Max = cms.double(0.5),
    DR_Veto_E = cms.double(0.07),
    DR_Veto_H = cms.double(0.1),
    DR_Veto_HO = cms.double(0.1),
    DepositInstanceLabels = cms.vstring(
        'ecal', 
        'hcal', 
        'ho'
    ),
    DepositLabel = cms.untracked.string('Cal'),
    NoiseTow_EB = cms.double(0.04),
    NoiseTow_EE = cms.double(0.15),
    Noise_EB = cms.double(0.025),
    Noise_EE = cms.double(0.1),
    Noise_HB = cms.double(0.2),
    Noise_HE = cms.double(0.2),
    Noise_HO = cms.double(0.2),
    PrintTimeReport = cms.untracked.bool(False),
    PropagatorName = cms.string('SteppingHelixPropagatorAny'),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
        RPCLayers = cms.bool(False),
        UseMuonNavigation = cms.untracked.bool(False)
    ),
    Threshold_E = cms.double(0.025),
    Threshold_H = cms.double(0.1),
    Threshold_HO = cms.double(0.1),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(1.0),
        dREcalPreselection = cms.double(1.0),
        dRHcal = cms.double(1.0),
        dRHcalPreselection = cms.double(1.0),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(True),
        useGEM = cms.bool(False),
        useHO = cms.bool(True),
        useHcal = cms.bool(True),
        useME0 = cms.bool(False),
        useMuon = cms.bool(False),
        usePreshower = cms.bool(False)
    ),
    UseRecHitsFlag = cms.bool(True)
)

process.MIsoCaloExtractorByAssociatorTowersBlock = cms.PSet(
    CenterConeOnCalIntersection = cms.bool(False),
    ComponentName = cms.string('CaloExtractorByAssociator'),
    DR_Max = cms.double(0.5),
    DR_Veto_E = cms.double(0.07),
    DR_Veto_H = cms.double(0.1),
    DR_Veto_HO = cms.double(0.1),
    DepositInstanceLabels = cms.vstring(
        'ecal', 
        'hcal', 
        'ho'
    ),
    DepositLabel = cms.untracked.string('Cal'),
    NoiseTow_EB = cms.double(0.04),
    NoiseTow_EE = cms.double(0.15),
    Noise_EB = cms.double(0.025),
    Noise_EE = cms.double(0.1),
    Noise_HB = cms.double(0.2),
    Noise_HE = cms.double(0.2),
    Noise_HO = cms.double(0.2),
    PrintTimeReport = cms.untracked.bool(False),
    PropagatorName = cms.string('SteppingHelixPropagatorAny'),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
        RPCLayers = cms.bool(False),
        UseMuonNavigation = cms.untracked.bool(False)
    ),
    Threshold_E = cms.double(0.2),
    Threshold_H = cms.double(0.5),
    Threshold_HO = cms.double(0.5),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(1.0),
        dREcalPreselection = cms.double(1.0),
        dRHcal = cms.double(1.0),
        dRHcalPreselection = cms.double(1.0),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(True),
        useEcal = cms.bool(False),
        useGEM = cms.bool(False),
        useHO = cms.bool(False),
        useHcal = cms.bool(False),
        useME0 = cms.bool(False),
        useMuon = cms.bool(False),
        usePreshower = cms.bool(False)
    ),
    UseRecHitsFlag = cms.bool(False)
)

process.MIsoCaloExtractorEcalBlock = cms.PSet(
    CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
    ComponentName = cms.string('CaloExtractor'),
    DR_Max = cms.double(1.0),
    DR_Veto_E = cms.double(0.07),
    DR_Veto_H = cms.double(0.1),
    DepositLabel = cms.untracked.string('EcalPlusHcal'),
    Threshold_E = cms.double(0.2),
    Threshold_H = cms.double(0.5),
    Vertex_Constraint_XY = cms.bool(False),
    Vertex_Constraint_Z = cms.bool(False),
    Weight_E = cms.double(1.0),
    Weight_H = cms.double(0.0)
)

process.MIsoCaloExtractorHLTBlock = cms.PSet(
    CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
    ComponentName = cms.string('CaloExtractor'),
    DR_Max = cms.double(1.0),
    DR_Veto_E = cms.double(0.07),
    DR_Veto_H = cms.double(0.1),
    DepositLabel = cms.untracked.string('EcalPlusHcal'),
    Threshold_E = cms.double(0.2),
    Threshold_H = cms.double(0.5),
    Vertex_Constraint_XY = cms.bool(False),
    Vertex_Constraint_Z = cms.bool(False),
    Weight_E = cms.double(1.5),
    Weight_H = cms.double(1.0)
)

process.MIsoCaloExtractorHcalBlock = cms.PSet(
    CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
    ComponentName = cms.string('CaloExtractor'),
    DR_Max = cms.double(1.0),
    DR_Veto_E = cms.double(0.07),
    DR_Veto_H = cms.double(0.1),
    DepositLabel = cms.untracked.string('EcalPlusHcal'),
    Threshold_E = cms.double(0.2),
    Threshold_H = cms.double(0.5),
    Vertex_Constraint_XY = cms.bool(False),
    Vertex_Constraint_Z = cms.bool(False),
    Weight_E = cms.double(0.0),
    Weight_H = cms.double(1.0)
)

process.MIsoDepositGlobalIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    InputType = cms.string('TrackCollection'),
    MultipleDepositsFlag = cms.bool(False),
    MuonTrackRefType = cms.string('track'),
    inputMuonCollection = cms.InputTag("globalMuons")
)

process.MIsoDepositGlobalMultiIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    InputType = cms.string('TrackCollection'),
    MultipleDepositsFlag = cms.bool(True),
    MuonTrackRefType = cms.string('track'),
    inputMuonCollection = cms.InputTag("globalMuons")
)

process.MIsoDepositParamGlobalIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    InputType = cms.string('MuonCollection'),
    MultipleDepositsFlag = cms.bool(False),
    MuonTrackRefType = cms.string('track'),
    inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons")
)

process.MIsoDepositParamGlobalMultiIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    InputType = cms.string('MuonCollection'),
    MultipleDepositsFlag = cms.bool(True),
    MuonTrackRefType = cms.string('track'),
    inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons")
)

process.MIsoDepositParamGlobalViewIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    InputType = cms.string('MuonCollection'),
    MultipleDepositsFlag = cms.bool(False),
    MuonTrackRefType = cms.string('bestTrkSta'),
    inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons")
)

process.MIsoDepositParamGlobalViewMultiIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    InputType = cms.string('MuonCollection'),
    MultipleDepositsFlag = cms.bool(True),
    MuonTrackRefType = cms.string('bestTrkSta'),
    inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons")
)

process.MIsoDepositViewIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    InputType = cms.string('MuonCollection'),
    MultipleDepositsFlag = cms.bool(False),
    MuonTrackRefType = cms.string('bestTrkSta'),
    inputMuonCollection = cms.InputTag("muons1stStep")
)

process.MIsoDepositViewMultiIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    InputType = cms.string('MuonCollection'),
    MultipleDepositsFlag = cms.bool(True),
    MuonTrackRefType = cms.string('bestTrkSta'),
    inputMuonCollection = cms.InputTag("muons1stStep")
)

process.MIsoJetExtractorBlock = cms.PSet(
    ComponentName = cms.string('JetExtractor'),
    DR_Max = cms.double(1.0),
    DR_Veto = cms.double(0.1),
    ExcludeMuonVeto = cms.bool(True),
    JetCollectionLabel = cms.InputTag("ak4CaloJets"),
    PrintTimeReport = cms.untracked.bool(False),
    PropagatorName = cms.string('SteppingHelixPropagatorAny'),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
        RPCLayers = cms.bool(False),
        UseMuonNavigation = cms.untracked.bool(False)
    ),
    Threshold = cms.double(5.0),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(0.5),
        dREcalPreselection = cms.double(0.5),
        dRHcal = cms.double(0.5),
        dRHcalPreselection = cms.double(0.5),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(True),
        useEcal = cms.bool(False),
        useGEM = cms.bool(False),
        useHO = cms.bool(False),
        useHcal = cms.bool(False),
        useME0 = cms.bool(False),
        useMuon = cms.bool(False),
        usePreshower = cms.bool(False)
    )
)

process.MIsoTrackAssociatorDefault = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(1.0),
        dREcalPreselection = cms.double(1.0),
        dRHcal = cms.double(1.0),
        dRHcalPreselection = cms.double(1.0),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(True),
        useEcal = cms.bool(False),
        useGEM = cms.bool(False),
        useHO = cms.bool(False),
        useHcal = cms.bool(False),
        useME0 = cms.bool(False),
        useMuon = cms.bool(False),
        usePreshower = cms.bool(False)
    )
)

process.MIsoTrackAssociatorHits = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(1.0),
        dREcalPreselection = cms.double(1.0),
        dRHcal = cms.double(1.0),
        dRHcalPreselection = cms.double(1.0),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(True),
        useGEM = cms.bool(False),
        useHO = cms.bool(True),
        useHcal = cms.bool(True),
        useME0 = cms.bool(False),
        useMuon = cms.bool(False),
        usePreshower = cms.bool(False)
    )
)

process.MIsoTrackAssociatorJets = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(0.5),
        dREcalPreselection = cms.double(0.5),
        dRHcal = cms.double(0.5),
        dRHcalPreselection = cms.double(0.5),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(True),
        useEcal = cms.bool(False),
        useGEM = cms.bool(False),
        useHO = cms.bool(False),
        useHcal = cms.bool(False),
        useME0 = cms.bool(False),
        useMuon = cms.bool(False),
        usePreshower = cms.bool(False)
    )
)

process.MIsoTrackAssociatorTowers = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(1.0),
        dREcalPreselection = cms.double(1.0),
        dRHcal = cms.double(1.0),
        dRHcalPreselection = cms.double(1.0),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(True),
        useEcal = cms.bool(False),
        useGEM = cms.bool(False),
        useHO = cms.bool(False),
        useHcal = cms.bool(False),
        useME0 = cms.bool(False),
        useMuon = cms.bool(False),
        usePreshower = cms.bool(False)
    )
)

process.MIsoTrackExtractorBlock = cms.PSet(
    BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    BeamlineOption = cms.string('BeamSpotFromEvent'),
    Chi2Ndof_Max = cms.double(1e+64),
    Chi2Prob_Min = cms.double(-1.0),
    ComponentName = cms.string('TrackExtractor'),
    DR_Max = cms.double(0.5),
    DR_Veto = cms.double(0.01),
    DepositLabel = cms.untracked.string(''),
    Diff_r = cms.double(0.1),
    Diff_z = cms.double(0.2),
    NHits_Min = cms.uint32(0),
    Pt_Min = cms.double(-1.0),
    inputTrackCollection = cms.InputTag("generalTracks")
)

process.MIsoTrackExtractorCtfBlock = cms.PSet(
    BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    BeamlineOption = cms.string('BeamSpotFromEvent'),
    Chi2Ndof_Max = cms.double(1e+64),
    Chi2Prob_Min = cms.double(-1.0),
    ComponentName = cms.string('TrackExtractor'),
    DR_Max = cms.double(0.5),
    DR_Veto = cms.double(0.01),
    DepositLabel = cms.untracked.string(''),
    Diff_r = cms.double(0.1),
    Diff_z = cms.double(0.2),
    NHits_Min = cms.uint32(0),
    Pt_Min = cms.double(-1.0),
    inputTrackCollection = cms.InputTag("generalTracks")
)

process.MIsoTrackExtractorGsBlock = cms.PSet(
    BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    BeamlineOption = cms.string('BeamSpotFromEvent'),
    Chi2Ndof_Max = cms.double(1e+64),
    Chi2Prob_Min = cms.double(-1.0),
    ComponentName = cms.string('TrackExtractor'),
    DR_Max = cms.double(0.5),
    DR_Veto = cms.double(0.01),
    DepositLabel = cms.untracked.string(''),
    Diff_r = cms.double(0.1),
    Diff_z = cms.double(0.2),
    NHits_Min = cms.uint32(0),
    Pt_Min = cms.double(-1.0),
    inputTrackCollection = cms.InputTag("ctfGSWithMaterialTracks")
)

process.MaxCCCLostHitsTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('MaxCCCLostHitsTrajectoryFilter'),
    maxCCCLostHits = cms.int32(3),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutLoose')
    )
)

process.MaxConsecLostHitsTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('MaxConsecLostHitsTrajectoryFilter'),
    maxConsecLostHits = cms.int32(1)
)

process.MaxHitsTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('MaxHitsTrajectoryFilter'),
    maxNumberOfHits = cms.int32(100)
)

process.MaxLostHitsTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('MaxLostHitsTrajectoryFilter'),
    maxLostHits = cms.int32(2)
)

process.MicroEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_slimmedPhotons_*_*', 
        'keep *_slimmedOOTPhotons_*_*', 
        'keep *_slimmedElectrons_*_*', 
        'keep *_slimmedMuons_*_*', 
        'keep *_slimmedTaus_*_*', 
        'keep *_slimmedTausBoosted_*_*', 
        'keep *_slimmedCaloJets_*_*', 
        'keep *_slimmedJets_*_*', 
        'keep recoBaseTagInfosOwned_slimmedJets_*_*', 
        'keep *_slimmedJetsAK8_*_*', 
        'drop recoBaseTagInfosOwned_slimmedJetsAK8_*_*', 
        'keep *_slimmedJetsPuppi_*_*', 
        'keep *_slimmedMETs_*_*', 
        'keep *_slimmedMETsNoHF_*_*', 
        'keep *_slimmedMETsPuppi_*_*', 
        'keep *_slimmedSecondaryVertices_*_*', 
        'keep *_slimmedLambdaVertices_*_*', 
        'keep *_slimmedKshortVertices_*_*', 
        'keep *_slimmedJetsAK8PFPuppiSoftDropPacked_SubJets_*', 
        'keep recoPhotonCores_reducedEgamma_*_*', 
        'keep recoGsfElectronCores_reducedEgamma_*_*', 
        'keep recoConversions_reducedEgamma_*_*', 
        'keep recoSuperClusters_reducedEgamma_*_*', 
        'keep recoCaloClusters_reducedEgamma_*_*', 
        'keep EcalRecHitsSorted_reducedEgamma_*_*', 
        'keep recoGsfTracks_reducedEgamma_*_*', 
        'keep HBHERecHitsSorted_reducedEgamma_*_*', 
        'drop *_*_caloTowers_*', 
        'drop *_*_pfCandidates_*', 
        'drop *_*_genJets_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep *_offlineSlimmedPrimaryVertices_*_*', 
        'keep patPackedCandidates_packedPFCandidates_*_*', 
        'keep *_isolatedTracks_*_*', 
        'keep *_oniaPhotonCandidates_*_*', 
        'keep *_bunchSpacingProducer_*_*', 
        'keep double_fixedGridRhoAll__*', 
        'keep double_fixedGridRhoFastjetAll__*', 
        'keep double_fixedGridRhoFastjetAllTmp__*', 
        'keep double_fixedGridRhoFastjetAllCalo__*', 
        'keep double_fixedGridRhoFastjetCentral_*_*', 
        'keep double_fixedGridRhoFastjetCentralCalo__*', 
        'keep double_fixedGridRhoFastjetCentralChargedPileUp__*', 
        'keep double_fixedGridRhoFastjetCentralNeutral__*', 
        'keep *_slimmedPatTrigger_*_*', 
        'keep patPackedTriggerPrescales_patTrigger__*', 
        'keep patPackedTriggerPrescales_patTrigger_l1max_*', 
        'keep patPackedTriggerPrescales_patTrigger_l1min_*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_gtStage2Digis__*', 
        'keep *_gmtStage2Digis_Muon_*', 
        'keep *_caloStage2Digis_Jet_*', 
        'keep *_caloStage2Digis_Tau_*', 
        'keep *_caloStage2Digis_EGamma_*', 
        'keep *_caloStage2Digis_EtSum_*', 
        'keep *_TriggerResults_*_HLT', 
        'keep *_TriggerResults_*_*', 
        'keep patPackedCandidates_lostTracks_*_*', 
        'keep HcalNoiseSummary_hcalnoise__*', 
        'keep recoCSCHaloData_CSCHaloData_*_*', 
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*', 
        'keep LumiScalerss_scalersRawToDigi_*_*', 
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*', 
        'keep recoForwardProtons_ctppsProtons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep *_prefiringweight_*_*', 
        'keep *_packedPFCandidates_hcalDepthEnergyFractions_*', 
        'drop *_packedPFCandidates_hcalDepthEnergyFractions_*'
    )
)

process.MicroEventContentGEN = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep patPackedGenParticles_packedGenParticles_*_*', 
        'keep recoGenParticles_prunedGenParticles_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_*_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep recoGenParticles_genPUProtons_*_*', 
        'keep *_slimmedGenJetsFlavourInfos_*_*', 
        'keep *_slimmedGenJets__*', 
        'keep *_slimmedGenJetsAK8__*', 
        'keep *_slimmedGenJetsAK8SoftDropSubJets__*', 
        'keep *_genMetTrue_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep GenRunInfoProduct_*_*_*', 
        'keep *_genParticles_xyz0_*', 
        'keep *_genParticles_t0_*'
    )
)

process.MicroEventContentMC = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_slimmedPhotons_*_*', 
        'keep *_slimmedOOTPhotons_*_*', 
        'keep *_slimmedElectrons_*_*', 
        'keep *_slimmedMuons_*_*', 
        'keep *_slimmedTaus_*_*', 
        'keep *_slimmedTausBoosted_*_*', 
        'keep *_slimmedCaloJets_*_*', 
        'keep *_slimmedJets_*_*', 
        'keep recoBaseTagInfosOwned_slimmedJets_*_*', 
        'keep *_slimmedJetsAK8_*_*', 
        'drop recoBaseTagInfosOwned_slimmedJetsAK8_*_*', 
        'keep *_slimmedJetsPuppi_*_*', 
        'keep *_slimmedMETs_*_*', 
        'keep *_slimmedMETsNoHF_*_*', 
        'keep *_slimmedMETsPuppi_*_*', 
        'keep *_slimmedSecondaryVertices_*_*', 
        'keep *_slimmedLambdaVertices_*_*', 
        'keep *_slimmedKshortVertices_*_*', 
        'keep *_slimmedJetsAK8PFPuppiSoftDropPacked_SubJets_*', 
        'keep recoPhotonCores_reducedEgamma_*_*', 
        'keep recoGsfElectronCores_reducedEgamma_*_*', 
        'keep recoConversions_reducedEgamma_*_*', 
        'keep recoSuperClusters_reducedEgamma_*_*', 
        'keep recoCaloClusters_reducedEgamma_*_*', 
        'keep EcalRecHitsSorted_reducedEgamma_*_*', 
        'keep recoGsfTracks_reducedEgamma_*_*', 
        'keep HBHERecHitsSorted_reducedEgamma_*_*', 
        'drop *_*_caloTowers_*', 
        'drop *_*_pfCandidates_*', 
        'drop *_*_genJets_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep *_offlineSlimmedPrimaryVertices_*_*', 
        'keep patPackedCandidates_packedPFCandidates_*_*', 
        'keep *_isolatedTracks_*_*', 
        'keep *_oniaPhotonCandidates_*_*', 
        'keep *_bunchSpacingProducer_*_*', 
        'keep double_fixedGridRhoAll__*', 
        'keep double_fixedGridRhoFastjetAll__*', 
        'keep double_fixedGridRhoFastjetAllTmp__*', 
        'keep double_fixedGridRhoFastjetAllCalo__*', 
        'keep double_fixedGridRhoFastjetCentral_*_*', 
        'keep double_fixedGridRhoFastjetCentralCalo__*', 
        'keep double_fixedGridRhoFastjetCentralChargedPileUp__*', 
        'keep double_fixedGridRhoFastjetCentralNeutral__*', 
        'keep *_slimmedPatTrigger_*_*', 
        'keep patPackedTriggerPrescales_patTrigger__*', 
        'keep patPackedTriggerPrescales_patTrigger_l1max_*', 
        'keep patPackedTriggerPrescales_patTrigger_l1min_*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_gtStage2Digis__*', 
        'keep *_gmtStage2Digis_Muon_*', 
        'keep *_caloStage2Digis_Jet_*', 
        'keep *_caloStage2Digis_Tau_*', 
        'keep *_caloStage2Digis_EGamma_*', 
        'keep *_caloStage2Digis_EtSum_*', 
        'keep *_TriggerResults_*_HLT', 
        'keep *_TriggerResults_*_*', 
        'keep patPackedCandidates_lostTracks_*_*', 
        'keep HcalNoiseSummary_hcalnoise__*', 
        'keep recoCSCHaloData_CSCHaloData_*_*', 
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*', 
        'keep LumiScalerss_scalersRawToDigi_*_*', 
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*', 
        'keep recoForwardProtons_ctppsProtons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep *_prefiringweight_*_*', 
        'keep *_packedPFCandidates_hcalDepthEnergyFractions_*', 
        'drop *_packedPFCandidates_hcalDepthEnergyFractions_*', 
        'keep patPackedGenParticles_packedGenParticles_*_*', 
        'keep recoGenParticles_prunedGenParticles_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_*_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep recoGenParticles_genPUProtons_*_*', 
        'keep *_slimmedGenJetsFlavourInfos_*_*', 
        'keep *_slimmedGenJets__*', 
        'keep *_slimmedGenJetsAK8__*', 
        'keep *_slimmedGenJetsAK8SoftDropSubJets__*', 
        'keep *_genMetTrue_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep GenRunInfoProduct_*_*_*', 
        'keep *_genParticles_xyz0_*', 
        'keep *_genParticles_t0_*', 
        'keep PileupSummaryInfos_slimmedAddPileupInfo_*_*', 
        'keep L1GtTriggerMenuLite_l1GtTriggerMenuLite__*', 
        'keep *_slimmedElectronsFromMultiCl_*_*', 
        'keep *_slimmedPhotonsFromMultiCl_*_*', 
        'keep *_offlineSlimmedPrimaryVertices4D_*_*'
    )
)

process.MinHitsTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('MinHitsTrajectoryFilter'),
    minimumNumberOfHits = cms.int32(5)
)

process.MinPtTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('MinPtTrajectoryFilter'),
    minHitsMinPt = cms.int32(3),
    minPt = cms.double(1.0),
    nSigmaMinPt = cms.double(5.0)
)

process.MuonCaloCompatibilityBlock = cms.PSet(
    MuonCaloCompatibility = cms.PSet(
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        allSiPMHO = cms.bool(False),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    )
)

process.MuonCosmicCompatibilityParameters = cms.PSet(
    CosmicCompFillerParameters = cms.PSet(
        InputCosmicMuonCollection = cms.InputTag("muonsFromCosmics1Leg"),
        InputMuonCollections = cms.VInputTag(cms.InputTag("globalMuons"), cms.InputTag("muons1stStep")),
        InputTrackCollections = cms.VInputTag(cms.InputTag("generalTracks"), cms.InputTag("cosmicsVetoTracks")),
        InputVertexCollection = cms.InputTag("offlinePrimaryVertices"),
        ServiceParameters = cms.PSet(
            CSCLayers = cms.untracked.bool(True),
            GEMLayers = cms.untracked.bool(True),
            ME0Layers = cms.bool(True),
            Propagators = cms.untracked.vstring(
                'SteppingHelixPropagatorAny', 
                'SteppingHelixPropagatorAlong', 
                'SteppingHelixPropagatorOpposite', 
                'SteppingHelixPropagatorL2Any', 
                'SteppingHelixPropagatorL2Along', 
                'SteppingHelixPropagatorL2Opposite', 
                'SteppingHelixPropagatorAnyNoError', 
                'SteppingHelixPropagatorAlongNoError', 
                'SteppingHelixPropagatorOppositeNoError', 
                'SteppingHelixPropagatorL2AnyNoError', 
                'SteppingHelixPropagatorL2AlongNoError', 
                'SteppingHelixPropagatorL2OppositeNoError', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite', 
                'SmartPropagator', 
                'SmartPropagatorOpposite', 
                'SmartPropagatorAnyOpposite', 
                'SmartPropagatorAny', 
                'SmartPropagatorRK', 
                'SmartPropagatorAnyRK', 
                'StraightLinePropagator'
            ),
            RPCLayers = cms.bool(True),
            UseMuonNavigation = cms.untracked.bool(True)
        ),
        angleCut = cms.double(0.1),
        corrTimeNeg = cms.double(-10),
        corrTimePos = cms.double(5),
        deltaPt = cms.double(0.1),
        hIpTrdxy = cms.double(0.02),
        hIpTrvProb = cms.double(0.5),
        ipCut = cms.double(0.02),
        largedxy = cms.double(2.0),
        largedxyMult = cms.double(3.0),
        maxdxyLoose = cms.double(0.01),
        maxdxyLooseMult = cms.double(0.01),
        maxdxyTight = cms.double(1.0),
        maxdxyTightMult = cms.double(1.0),
        maxdzLoose = cms.double(0.1),
        maxdzLooseMult = cms.double(0.1),
        maxdzTight = cms.double(10.0),
        maxdzTightMult = cms.double(10.0),
        maxvertRho = cms.double(5),
        maxvertZ = cms.double(20),
        minvProb = cms.double(0.001),
        nChamberMatches = cms.int32(1),
        nTrackThreshold = cms.int32(3),
        offTimeNegLoose = cms.double(-15.0),
        offTimeNegLooseMult = cms.double(-15.0),
        offTimeNegTight = cms.double(-20.0),
        offTimeNegTightMult = cms.double(-20.0),
        offTimePosLoose = cms.double(15.0),
        offTimePosLooseMult = cms.double(15.0),
        offTimePosTight = cms.double(25.0),
        offTimePosTightMult = cms.double(25.0),
        segmentComp = cms.double(0.4),
        sharedFrac = cms.double(0.75),
        sharedHits = cms.int32(5)
    )
)

process.MuonSegmentMatcher = cms.PSet(
    MatchParameters = cms.PSet(
        CSCsegments = cms.InputTag("cscSegments"),
        DTradius = cms.double(0.01),
        DTsegments = cms.InputTag("dt4DSegments"),
        RPChits = cms.InputTag("rpcRecHits"),
        TightMatchCSC = cms.bool(True),
        TightMatchDT = cms.bool(False)
    )
)

process.MuonServiceProxy = cms.PSet(
    ServiceParameters = cms.PSet(
        CSCLayers = cms.untracked.bool(True),
        GEMLayers = cms.untracked.bool(True),
        ME0Layers = cms.bool(True),
        Propagators = cms.untracked.vstring(
            'SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'
        ),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    )
)

process.MuonShowerDigiFillerBlock = cms.PSet(
    ShowerDigiFillerParameters = cms.PSet(
        cscDigiCollectionLabel = cms.InputTag("muonCSCDigis","MuonCSCStripDigi"),
        digiMaxDistanceX = cms.double(25.0),
        dtDigiCollectionLabel = cms.InputTag("muonDTDigis")
    )
)

process.MuonShowerParameters = cms.PSet(
    MuonShowerInformationFillerParameters = cms.PSet(
        CSCRecSegmentLabel = cms.InputTag("csc2DRecHits"),
        CSCSegmentLabel = cms.InputTag("cscSegments"),
        DT4DRecSegmentLabel = cms.InputTag("dt4DSegments"),
        DTRecSegmentLabel = cms.InputTag("dt1DRecHits"),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
        ServiceParameters = cms.PSet(
            CSCLayers = cms.untracked.bool(True),
            GEMLayers = cms.untracked.bool(True),
            ME0Layers = cms.bool(True),
            Propagators = cms.untracked.vstring(
                'SteppingHelixPropagatorAny', 
                'SteppingHelixPropagatorAlong', 
                'SteppingHelixPropagatorOpposite', 
                'SteppingHelixPropagatorL2Any', 
                'SteppingHelixPropagatorL2Along', 
                'SteppingHelixPropagatorL2Opposite', 
                'SteppingHelixPropagatorAnyNoError', 
                'SteppingHelixPropagatorAlongNoError', 
                'SteppingHelixPropagatorOppositeNoError', 
                'SteppingHelixPropagatorL2AnyNoError', 
                'SteppingHelixPropagatorL2AlongNoError', 
                'SteppingHelixPropagatorL2OppositeNoError', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite', 
                'SmartPropagator', 
                'SmartPropagatorOpposite', 
                'SmartPropagatorAnyOpposite', 
                'SmartPropagatorAny', 
                'SmartPropagatorRK', 
                'SmartPropagatorAnyRK', 
                'StraightLinePropagator'
            ),
            RPCLayers = cms.bool(True),
            UseMuonNavigation = cms.untracked.bool(True)
        ),
        TrackerRecHitBuilder = cms.string('WithTrackAngle')
    )
)

process.MuonTrackLoaderForCosmic = cms.PSet(
    TrackLoaderParameters = cms.PSet(
        AllowNoVertex = cms.untracked.bool(True),
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorAny')
        ),
        PutTrajectoryIntoEvent = cms.untracked.bool(False),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    )
)

process.MuonTrackLoaderForGLB = cms.PSet(
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(True),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    )
)

process.MuonTrackLoaderForL2 = cms.PSet(
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(True),
        beamSpot = cms.InputTag("hltOfflineBeamSpot")
    )
)

process.MuonTrackLoaderForL3 = cms.PSet(
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(True),
        MuonSeededTracksInstance = cms.untracked.string('L2Seeded'),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        PutTkTrackIntoEvent = cms.untracked.bool(True),
        SmoothTkTrack = cms.untracked.bool(False),
        Smoother = cms.string('KFSmootherForMuonTrackLoaderL3'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("hltOfflineBeamSpot")
    )
)

process.MuonTrackLoaderForSTA = cms.PSet(
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot")
    )
)

process.MuonTrackingRegionCommon = cms.PSet(
    MuonTrackingRegionBuilder = cms.PSet(
        DeltaEta = cms.double(0.2),
        DeltaPhi = cms.double(0.2),
        DeltaR = cms.double(0.2),
        DeltaZ = cms.double(15.9),
        EtaR_UpperLimit_Par1 = cms.double(0.25),
        EtaR_UpperLimit_Par2 = cms.double(0.15),
        Eta_fixed = cms.bool(False),
        Eta_min = cms.double(0.1),
        MeasurementTrackerName = cms.InputTag(""),
        OnDemand = cms.int32(-1),
        PhiR_UpperLimit_Par1 = cms.double(0.6),
        PhiR_UpperLimit_Par2 = cms.double(0.2),
        Phi_fixed = cms.bool(False),
        Phi_min = cms.double(0.1),
        Pt_fixed = cms.bool(False),
        Pt_min = cms.double(1.5),
        Rescale_Dz = cms.double(3.0),
        Rescale_eta = cms.double(3.0),
        Rescale_phi = cms.double(3.0),
        UseVertex = cms.bool(False),
        Z_fixed = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        input = cms.InputTag(""),
        maxRegions = cms.int32(1),
        precise = cms.bool(True),
        vertexCollection = cms.InputTag("")
    )
)

process.MuonUpdatorAtVertex = cms.PSet(
    MuonUpdatorAtVertexParameters = cms.PSet(
        BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
        MaxChi2 = cms.double(1000000.0),
        Propagator = cms.string('SteppingHelixPropagatorOpposite')
    )
)

process.MuonUpdatorAtVertexAnyDirection = cms.PSet(
    MuonUpdatorAtVertexParameters = cms.PSet(
        BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
        MaxChi2 = cms.double(1000000.0),
        Propagator = cms.string('SteppingHelixPropagatorAny')
    )
)

process.NANOAODEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(9),
    outputCommands = cms.untracked.vstring(
        'drop *', 
        'keep nanoaodFlatTable_*Table_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep String_*_genModel_*', 
        'keep nanoaodMergeableCounterTable_*Table_*_*', 
        'keep nanoaodUniqueString_nanoMetadata_*_*'
    )
)

process.NANOAODSIMEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(9),
    outputCommands = cms.untracked.vstring(
        'drop *', 
        'keep nanoaodFlatTable_*Table_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep String_*_genModel_*', 
        'keep nanoaodMergeableCounterTable_*Table_*_*', 
        'keep nanoaodUniqueString_nanoMetadata_*_*'
    )
)

process.NanoAODEDMEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *', 
        'keep nanoaodFlatTable_*Table_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep String_*_genModel_*', 
        'keep nanoaodMergeableCounterTable_*Table_*_*', 
        'keep nanoaodUniqueString_nanoMetadata_*_*'
    )
)

process.OnlineMetaDataContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep CTPPSRecord_onlineMetaDataDigis_*_*', 
        'keep DCSRecord_onlineMetaDataDigis_*_*', 
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*', 
        'keep recoBeamSpot_onlineMetaDataDigis_*_*'
    )
)

process.PFJetParameters = cms.PSet(
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetPtMin = cms.double(5.0),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    src = cms.InputTag("particleFlow"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)

process.PFRecoTauPFJetInputs = cms.PSet(
    inputJetCollection = cms.InputTag("ak4PFJets"),
    isolationConeSize = cms.double(0.5),
    jetConeSize = cms.double(0.5),
    maxJetAbsEta = cms.double(4.0),
    minJetPt = cms.double(14.0)
)

process.PFTauQualityCuts = cms.PSet(
    isolationQualityCuts = cms.PSet(
        maxDeltaZ = cms.double(0.15),
        maxTrackChi2 = cms.double(100.0),
        maxTransverseImpactParameter = cms.double(0.05),
        minGammaEt = cms.double(1.5),
        minTrackHits = cms.uint32(8),
        minTrackPixelHits = cms.uint32(0),
        minTrackPt = cms.double(1.0),
        minTrackVertexWeight = cms.double(-1.0)
    ),
    leadingTrkOrPFCandOption = cms.string('leadPFCand'),
    primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
    pvFindingAlgo = cms.string('closestInDeltaZ'),
    recoverLeadingTrk = cms.bool(False),
    signalQualityCuts = cms.PSet(
        maxDeltaZ = cms.double(0.4),
        maxTrackChi2 = cms.double(100.0),
        maxTransverseImpactParameter = cms.double(0.1),
        minGammaEt = cms.double(1.0),
        minNeutralHadronEt = cms.double(30.0),
        minTrackHits = cms.uint32(3),
        minTrackPixelHits = cms.uint32(0),
        minTrackPt = cms.double(0.5),
        minTrackVertexWeight = cms.double(-1.0)
    ),
    vertexTrackFiltering = cms.bool(False),
    vxAssocQualityCuts = cms.PSet(
        maxTrackChi2 = cms.double(100.0),
        maxTransverseImpactParameter = cms.double(0.1),
        minGammaEt = cms.double(1.0),
        minTrackHits = cms.uint32(3),
        minTrackPixelHits = cms.uint32(0),
        minTrackPt = cms.double(0.5),
        minTrackVertexWeight = cms.double(-1.0)
    )
)

process.PREMIXEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int6stdbitsetstdpairs_*_AffectedAPVList_*', 
        'keep int_*_bunchSpacing_*', 
        'keep *_genPUProtons_*_*', 
        'keep *_mix_MergedTrackTruth_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep Phase2TrackerDigiedmDetSetVector_mix_*_*', 
        'keep *_*_Phase2OTDigiSimLink_*', 
        'keep *_simSiPixelDigis_*_*', 
        'keep EBDigiCollection_simEcalDigis_*_*', 
        'keep EEDigiCollection_simEcalDigis_*_*', 
        'keep ESDigiCollection_simEcalUnsuppressedDigis_*_*', 
        'keep *_simHcalDigis_*_*', 
        'drop ESDigiCollection_simEcalUnsuppressedDigis_*_*', 
        'drop EEDigiCollection_simEcalDigis_*_*', 
        'keep *_simHGCalUnsuppressedDigis_EE_*', 
        'keep *_simHGCalUnsuppressedDigis_HEfront_*', 
        'keep *_simHGCalUnsuppressedDigis_HEback_*', 
        'keep *_mix_MergedCaloTruth_*', 
        'keep *_mix_FTLBarrel_*', 
        'keep *_mix_FTLEndcap_*', 
        'keep *_mix_InitialVertices_*', 
        'keep *_mix_FTLBarrel_*', 
        'keep *_mix_FTLEndcap_*', 
        'keep *_mix_InitialVertices_*', 
        'keep *_mix_g4SimHitsMuonDTHits_*', 
        'keep *_mix_g4SimHitsMuonCSCHits_*', 
        'keep *_mix_g4SimHitsMuonRPCHits_*', 
        'keep *_mix_g4SimHitsMuonGEMHits_*', 
        'keep *_mix_g4SimHitsMuonME0Hits_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.PREMIXRAWEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *', 
        'drop *', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep *_simMuonCSCDigis_*_*', 
        'keep *_simMuonRPCDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonME0Digis_*_*', 
        'keep EBSrFlagsSorted_simEcalDigis_*_*', 
        'keep EESrFlagsSorted_simEcalDigis_*_*', 
        'keep *_simHcalUnsuppressedDigis_*_*', 
        'keep *_mix_EETimeDigi_*', 
        'keep *_mix_EBTimeDigi_*', 
        'keep *_simEcalUnsuppressedDigis_*_*', 
        'keep *_simHGCalUnsuppressedDigis_EE_*', 
        'keep *_simHGCalUnsuppressedDigis_HEfront_*', 
        'keep *_simHGCalUnsuppressedDigis_HEback_*', 
        'keep *_mix_MergedCaloTruth_*', 
        'keep *_mix_FTLBarrel_*', 
        'keep *_mix_FTLEndcap_*', 
        'keep *_mix_InitialVertices_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int6stdbitsetstdpairs_*_AffectedAPVList_*', 
        'keep int_*_bunchSpacing_*', 
        'keep *_genPUProtons_*_*', 
        'keep *_mix_MergedTrackTruth_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generatorSmeared_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenJets_ak*_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'drop CrossingFramePlaybackInfoNew_mix_*_*', 
        'keep *_*_MergedTrackTruth_*', 
        'keep *_*_StripDigiSimLink_*', 
        'keep *_*_PixelDigiSimLink_*', 
        'keep *_*_MuonCSCStripDigiSimLinks_*', 
        'keep *_*_MuonCSCWireDigiSimLinks_*', 
        'keep *_*_RPCDigiSimLink_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_*_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.ParticleFilterBlock = cms.PSet(
    ParticleFilter = cms.PSet(
        EMin = cms.double(0.1),
        chargedPtMin = cms.double(0.1),
        etaMax = cms.double(5.3),
        invisibleParticles = cms.vint32(),
        protonEMin = cms.double(5000.0),
        rMax = cms.double(129.0),
        zMax = cms.double(317.0)
    )
)

process.PixelTripletHLTGenerator = cms.PSet(
    ComponentName = cms.string('PixelTripletHLTGenerator'),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    extraHitRPhitolerance = cms.double(0.016),
    extraHitRZtolerance = cms.double(0.02),
    maxElement = cms.uint32(100000),
    phiPreFiltering = cms.double(0.3),
    useBending = cms.bool(True),
    useFixedPreFiltering = cms.bool(False),
    useMultScattering = cms.bool(True)
)

process.PixelTripletHLTGeneratorWithFilter = cms.PSet(
    ComponentName = cms.string('PixelTripletHLTGenerator'),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('LowPtClusterShapeSeedComparitor'),
        clusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
        clusterShapeHitFilter = cms.string('ClusterShapeHitFilter')
    ),
    extraHitRPhitolerance = cms.double(0.016),
    extraHitRZtolerance = cms.double(0.02),
    maxElement = cms.uint32(100000),
    phiPreFiltering = cms.double(0.3),
    useBending = cms.bool(True),
    useFixedPreFiltering = cms.bool(False),
    useMultScattering = cms.bool(True)
)

process.RAWAODEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    eventAutoFlushCompressedSize = cms.untracked.int32(31457280),
    outputCommands = cms.untracked.vstring( (
        'drop *', 
        'drop *', 
        'keep ClusterSummary_clusterSummaryProducer_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_gemRecHits_*_*', 
        'keep *_gemSegments_*_*', 
        'keep *_me0RecHits_*_*', 
        'keep *_me0Segments_*_*', 
        'keep *_castorreco_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep HcalUnpackerReport_castorDigis_*_*', 
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*', 
        'keep HcalUnpackerReport_hcalDigis_*_*', 
        'keep *_HGCalRecHit_*_*', 
        'keep recoCaloClusters_hgcalLayerClusters_*_*', 
        'keep *_hgcalLayerClusters_timeLayerCluster_*', 
        'keep *_hgcalLayerClusters_InitialLayerClustersMask_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterHGCal__*', 
        'keep recoCaloClusters_particleFlowSuperClusterHGCal__*', 
        'keep recoSuperClusters_particleFlowSuperClusterHGCalFromMultiCl__*', 
        'keep recoCaloClusters_particleFlowSuperClusterHGCalFromMultiCl__*', 
        'keep recoTracks_GsfGlobalElectronTest_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTracks_electronGsfTracksFromMultiCl_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTracks_ctfPixelLess_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_dedxPixelHarmonic2_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep *_generalTracks_MVAValues_*', 
        'keep *_generalTracks_MVAVals_*', 
        'keep recoCaloJets_ak4CaloJets_*_*', 
        'keep *_ak4CaloJets_rho_*', 
        'keep *_ak4CaloJets_sigma_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep floatedmValueMap_puppi_*_*', 
        'keep *_ak4PFJetsPuppi_*_*', 
        'keep *_ak8PFJetsPuppi_*_*', 
        'keep *_ak8PFJetsPuppiSoftDrop_*_*', 
        'keep recoPFJets_ak4PFJets_*_*', 
        'keep *_ak4PFJets_rho_*', 
        'keep *_ak4PFJets_sigma_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep recoBasicJets_ak5CastorJets_*_*', 
        'keep *_ak5CastorJets_rho_*', 
        'keep *_ak5CastorJets_sigma_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep recoBasicJets_ak7CastorJets_*_*', 
        'keep *_ak7CastorJets_rho_*', 
        'keep *_ak7CastorJets_sigma_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRhoAll_*_*', 
        'keep *_fixedGridRhoFastjetAll_*_*', 
        'keep *_fixedGridRhoFastjetAllTmp_*_*', 
        'keep *_fixedGridRhoFastjetCentral_*_*', 
        'keep *_fixedGridRhoFastjetAllCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*', 
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*', 
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep floatedmValueMap_puppiNoLep_*_*', 
        'keep recoPFMETs_pfMetPuppi_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep recoGlobalHaloData_GlobalHaloData_*_*', 
        'keep recoCSCHaloData_CSCHaloData_*_*', 
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muons_*_*', 
        'keep doubleedmValueMap_muons_muPFMean*_*', 
        'keep doubleedmValueMap_muons_muPFSum*_*', 
        'keep *_muons_muonShowerInformation_*', 
        'keep recoMuonTimeExtraedmValueMap_muons_*_*', 
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*', 
        'keep uintedmValueMap_muons_*_*', 
        'keep *_particleFlow_muons_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfGhostTrackBJetTags_*_*', 
        'keep *_pfCombinedMVAV2BJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*', 
        'keep *_pfCombinedCvsLJetTags_*_*', 
        'keep *_pfCombinedCvsBJetTags_*_*', 
        'keep *_pfChargeBJetTags_*_*', 
        'keep *_pfDeepCSVJetTags_*_*', 
        'keep *_pfDeepCMVAJetTags_*_*', 
        'keep *_pixelClusterTagInfos_*_*', 
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*', 
        'keep recoPFTaus_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauBasicDiscriminators_*_*', 
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*', 
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*', 
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep *_hpsPFTauDiscriminationByMVA6ElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBdR03oldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWdR03oldDMwLT_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep *_offlinePrimaryVerticesWithBS_*_*', 
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep *_offlinePrimaryVertices4D__*', 
        'keep *_offlinePrimaryVertices4DWithBS__*', 
        'keep *_trackTimeValueMapProducer_*_*', 
        'keep *_offlinePrimaryVertices4DnoPID__*', 
        'keep *_offlinePrimaryVertices4DnoPIDWithBS__*', 
        'keep *_tofPID_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectrons_gedGsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep recoPhotonCores_gedPhotonCore_*_*', 
        'keep recoPhotons_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_ootPhotonCore_*_*', 
        'keep recoPhotons_ootPhotons_*_*', 
        'keep recoConversions_conversions_*_*', 
        'drop recoConversions_conversions_uncleanedConversions_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'keep *_gsfTracksOpenConversions_*_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFromConversions_*_*', 
        'keep recoTracks_ckfInOutTracksFromConversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*', 
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*', 
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*', 
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*', 
        'keep *_lowPtGsfToTrackLinks_*_*', 
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*', 
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*', 
        'keep floatedmValueMap_lowPtGsfElectronID_*_*', 
        'keep *_ecalDrivenGsfElectronCores_*_*', 
        'keep *_ecalDrivenGsfElectrons_*_*', 
        'keep *_ecalDrivenGsfElectronCoresFromMultiCl_*_*', 
        'keep *_ecalDrivenGsfElectronsFromMultiCl_*_*', 
        'keep *_photonCoreFromMultiCl_*_*', 
        'keep *_photonsFromMultiCl_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_particleFlow_muons_*', 
        'keep recoCaloClusters_pfElectronTranslator_*_*', 
        'keep recoPreshowerClusters_pfElectronTranslator_*_*', 
        'keep recoSuperClusters_pfElectronTranslator_*_*', 
        'keep recoCaloClusters_pfPhotonTranslator_*_*', 
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*', 
        'keep recoSuperClusters_pfPhotonTranslator_*_*', 
        'keep recoPhotons_pfPhotonTranslator_*_*', 
        'keep recoPhotonCores_pfPhotonTranslator_*_*', 
        'keep recoConversions_pfPhotonTranslator_*_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_chargedHadronPFTrackIsolation_*_*', 
        'keep recoPFRecHits_particleFlowRecHitHGC_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterHGCal__*', 
        'keep recoPFClusters_particleFlowClusterHGCalFromMultiCl__*', 
        'keep recoSuperClusters_simPFProducer_*_*', 
        'keep *_ecalBarrelClusterFastTimer_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'keep *_gtStage2Digis_*_*', 
        'keep *_gmtStage2Digis_*_*', 
        'keep *_caloStage2Digis_*_*', 
        'drop *_hlt*_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*', 
        'keep L1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep LumiScalerss_scalersRawToDigi_*_*', 
        'keep BeamSpotOnlines_scalersRawToDigi_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep CTPPSRecord_onlineMetaDataDigis_*_*', 
        'keep DCSRecord_onlineMetaDataDigis_*_*', 
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*', 
        'keep recoBeamSpot_onlineMetaDataDigis_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*', 
        'keep TotemFEDInfos_totemRPRawToDigi_*_*', 
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*', 
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*', 
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*', 
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*', 
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*', 
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*', 
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*', 
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*', 
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*', 
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*', 
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*', 
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*', 
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*', 
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*', 
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*', 
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*', 
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*', 
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*', 
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*', 
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*', 
        'keep recoForwardProtons_ctppsProtons_*_*', 
        'keep *_ticlMultiClustersFromTrackstersEM_*_*', 
        'keep *_ticlMultiClustersFromTrackstersHAD_*_*', 
        'keep *_ticlMultiClustersFromTrackstersTrk_*_*', 
        'keep *_ticlMultiClustersFromTrackstersTrkEM_*_*', 
        'keep *_ticlMultiClustersFromTrackstersMIP_*_*', 
        'keep *_ticlMultiClustersFromTrackstersMerge_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*'
     ) )
)

process.RAWAODSIMEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    eventAutoFlushCompressedSize = cms.untracked.int32(20971520),
    outputCommands = cms.untracked.vstring( (
        'drop *', 
        'drop *', 
        'drop *', 
        'keep ClusterSummary_clusterSummaryProducer_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_gemRecHits_*_*', 
        'keep *_gemSegments_*_*', 
        'keep *_me0RecHits_*_*', 
        'keep *_me0Segments_*_*', 
        'keep *_castorreco_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep HcalUnpackerReport_castorDigis_*_*', 
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*', 
        'keep HcalUnpackerReport_hcalDigis_*_*', 
        'keep *_HGCalRecHit_*_*', 
        'keep recoCaloClusters_hgcalLayerClusters_*_*', 
        'keep *_hgcalLayerClusters_timeLayerCluster_*', 
        'keep *_hgcalLayerClusters_InitialLayerClustersMask_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterHGCal__*', 
        'keep recoCaloClusters_particleFlowSuperClusterHGCal__*', 
        'keep recoSuperClusters_particleFlowSuperClusterHGCalFromMultiCl__*', 
        'keep recoCaloClusters_particleFlowSuperClusterHGCalFromMultiCl__*', 
        'keep recoTracks_GsfGlobalElectronTest_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTracks_electronGsfTracksFromMultiCl_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTracks_ctfPixelLess_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_dedxPixelHarmonic2_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep *_generalTracks_MVAValues_*', 
        'keep *_generalTracks_MVAVals_*', 
        'keep recoCaloJets_ak4CaloJets_*_*', 
        'keep *_ak4CaloJets_rho_*', 
        'keep *_ak4CaloJets_sigma_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep floatedmValueMap_puppi_*_*', 
        'keep *_ak4PFJetsPuppi_*_*', 
        'keep *_ak8PFJetsPuppi_*_*', 
        'keep *_ak8PFJetsPuppiSoftDrop_*_*', 
        'keep recoPFJets_ak4PFJets_*_*', 
        'keep *_ak4PFJets_rho_*', 
        'keep *_ak4PFJets_sigma_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep recoBasicJets_ak5CastorJets_*_*', 
        'keep *_ak5CastorJets_rho_*', 
        'keep *_ak5CastorJets_sigma_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep recoBasicJets_ak7CastorJets_*_*', 
        'keep *_ak7CastorJets_rho_*', 
        'keep *_ak7CastorJets_sigma_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRhoAll_*_*', 
        'keep *_fixedGridRhoFastjetAll_*_*', 
        'keep *_fixedGridRhoFastjetAllTmp_*_*', 
        'keep *_fixedGridRhoFastjetCentral_*_*', 
        'keep *_fixedGridRhoFastjetAllCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*', 
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*', 
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep floatedmValueMap_puppiNoLep_*_*', 
        'keep recoPFMETs_pfMetPuppi_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep recoGlobalHaloData_GlobalHaloData_*_*', 
        'keep recoCSCHaloData_CSCHaloData_*_*', 
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muons_*_*', 
        'keep doubleedmValueMap_muons_muPFMean*_*', 
        'keep doubleedmValueMap_muons_muPFSum*_*', 
        'keep *_muons_muonShowerInformation_*', 
        'keep recoMuonTimeExtraedmValueMap_muons_*_*', 
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*', 
        'keep uintedmValueMap_muons_*_*', 
        'keep *_particleFlow_muons_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfGhostTrackBJetTags_*_*', 
        'keep *_pfCombinedMVAV2BJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*', 
        'keep *_pfCombinedCvsLJetTags_*_*', 
        'keep *_pfCombinedCvsBJetTags_*_*', 
        'keep *_pfChargeBJetTags_*_*', 
        'keep *_pfDeepCSVJetTags_*_*', 
        'keep *_pfDeepCMVAJetTags_*_*', 
        'keep *_pixelClusterTagInfos_*_*', 
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*', 
        'keep recoPFTaus_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauBasicDiscriminators_*_*', 
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*', 
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*', 
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep *_hpsPFTauDiscriminationByMVA6ElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBdR03oldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWdR03oldDMwLT_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep *_offlinePrimaryVerticesWithBS_*_*', 
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep *_offlinePrimaryVertices4D__*', 
        'keep *_offlinePrimaryVertices4DWithBS__*', 
        'keep *_trackTimeValueMapProducer_*_*', 
        'keep *_offlinePrimaryVertices4DnoPID__*', 
        'keep *_offlinePrimaryVertices4DnoPIDWithBS__*', 
        'keep *_tofPID_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectrons_gedGsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep recoPhotonCores_gedPhotonCore_*_*', 
        'keep recoPhotons_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_ootPhotonCore_*_*', 
        'keep recoPhotons_ootPhotons_*_*', 
        'keep recoConversions_conversions_*_*', 
        'drop recoConversions_conversions_uncleanedConversions_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'keep *_gsfTracksOpenConversions_*_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFromConversions_*_*', 
        'keep recoTracks_ckfInOutTracksFromConversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*', 
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*', 
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*', 
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*', 
        'keep *_lowPtGsfToTrackLinks_*_*', 
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*', 
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*', 
        'keep floatedmValueMap_lowPtGsfElectronID_*_*', 
        'keep *_ecalDrivenGsfElectronCores_*_*', 
        'keep *_ecalDrivenGsfElectrons_*_*', 
        'keep *_ecalDrivenGsfElectronCoresFromMultiCl_*_*', 
        'keep *_ecalDrivenGsfElectronsFromMultiCl_*_*', 
        'keep *_photonCoreFromMultiCl_*_*', 
        'keep *_photonsFromMultiCl_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_particleFlow_muons_*', 
        'keep recoCaloClusters_pfElectronTranslator_*_*', 
        'keep recoPreshowerClusters_pfElectronTranslator_*_*', 
        'keep recoSuperClusters_pfElectronTranslator_*_*', 
        'keep recoCaloClusters_pfPhotonTranslator_*_*', 
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*', 
        'keep recoSuperClusters_pfPhotonTranslator_*_*', 
        'keep recoPhotons_pfPhotonTranslator_*_*', 
        'keep recoPhotonCores_pfPhotonTranslator_*_*', 
        'keep recoConversions_pfPhotonTranslator_*_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_chargedHadronPFTrackIsolation_*_*', 
        'keep recoPFRecHits_particleFlowRecHitHGC_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterHGCal__*', 
        'keep recoPFClusters_particleFlowClusterHGCalFromMultiCl__*', 
        'keep recoSuperClusters_simPFProducer_*_*', 
        'keep *_ecalBarrelClusterFastTimer_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'keep *_gtStage2Digis_*_*', 
        'keep *_gmtStage2Digis_*_*', 
        'keep *_caloStage2Digis_*_*', 
        'drop *_hlt*_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*', 
        'keep L1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep LumiScalerss_scalersRawToDigi_*_*', 
        'keep BeamSpotOnlines_scalersRawToDigi_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep CTPPSRecord_onlineMetaDataDigis_*_*', 
        'keep DCSRecord_onlineMetaDataDigis_*_*', 
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*', 
        'keep recoBeamSpot_onlineMetaDataDigis_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*', 
        'keep TotemFEDInfos_totemRPRawToDigi_*_*', 
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*', 
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*', 
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*', 
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*', 
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*', 
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*', 
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*', 
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*', 
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*', 
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*', 
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*', 
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*', 
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*', 
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*', 
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*', 
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*', 
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*', 
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*', 
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*', 
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*', 
        'keep recoForwardProtons_ctppsProtons_*_*', 
        'keep *_ticlMultiClustersFromTrackstersEM_*_*', 
        'keep *_ticlMultiClustersFromTrackstersHAD_*_*', 
        'keep *_ticlMultiClustersFromTrackstersTrk_*_*', 
        'keep *_ticlMultiClustersFromTrackstersTrkEM_*_*', 
        'keep *_ticlMultiClustersFromTrackstersMIP_*_*', 
        'keep *_ticlMultiClustersFromTrackstersMerge_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep *_muonSimClassifier_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep *_genPUProtons_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep SimVertexs_g4SimHits_*_*'
     ) )
)

process.RAWDEBUGEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *', 
        'drop *', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep *_simMuonCSCDigis_*_*', 
        'keep *_simMuonRPCDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonME0Digis_*_*', 
        'keep EBSrFlagsSorted_simEcalDigis_*_*', 
        'keep EESrFlagsSorted_simEcalDigis_*_*', 
        'keep *_simHcalUnsuppressedDigis_*_*', 
        'keep *_mix_EETimeDigi_*', 
        'keep *_mix_EBTimeDigi_*', 
        'keep *_simEcalUnsuppressedDigis_*_*', 
        'keep *_simHGCalUnsuppressedDigis_EE_*', 
        'keep *_simHGCalUnsuppressedDigis_HEfront_*', 
        'keep *_simHGCalUnsuppressedDigis_HEback_*', 
        'keep *_mix_MergedCaloTruth_*', 
        'keep *_mix_FTLBarrel_*', 
        'keep *_mix_FTLEndcap_*', 
        'keep *_mix_InitialVertices_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int6stdbitsetstdpairs_*_AffectedAPVList_*', 
        'keep int_*_bunchSpacing_*', 
        'keep *_genPUProtons_*_*', 
        'keep *_mix_MergedTrackTruth_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generatorSmeared_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenJets_ak*_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep PixelDigiSimLinkedmDetSetVector_simSiPixelDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simSiStripDigis_*_*', 
        'drop *_mix_simSiPixelDigis*_*', 
        'drop *_mix_simSiStripDigis*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'drop *_trackingtruthprod_*_*', 
        'drop *_electrontruth_*_*', 
        'keep *_mix_MergedTrackTruth_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_gtStage2Digis_*_*', 
        'keep *_gmtStage2Digis_*_*', 
        'keep *_caloStage2Digis_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.RAWDEBUGHLTEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring( (
        'drop *', 
        'drop *', 
        'drop *', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep *_simMuonCSCDigis_*_*', 
        'keep *_simMuonRPCDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonME0Digis_*_*', 
        'keep EBSrFlagsSorted_simEcalDigis_*_*', 
        'keep EESrFlagsSorted_simEcalDigis_*_*', 
        'keep *_simHcalUnsuppressedDigis_*_*', 
        'keep *_mix_EETimeDigi_*', 
        'keep *_mix_EBTimeDigi_*', 
        'keep *_simEcalUnsuppressedDigis_*_*', 
        'keep *_simHGCalUnsuppressedDigis_EE_*', 
        'keep *_simHGCalUnsuppressedDigis_HEfront_*', 
        'keep *_simHGCalUnsuppressedDigis_HEback_*', 
        'keep *_mix_MergedCaloTruth_*', 
        'keep *_mix_FTLBarrel_*', 
        'keep *_mix_FTLEndcap_*', 
        'keep *_mix_InitialVertices_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int6stdbitsetstdpairs_*_AffectedAPVList_*', 
        'keep int_*_bunchSpacing_*', 
        'keep *_genPUProtons_*_*', 
        'keep *_mix_MergedTrackTruth_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generatorSmeared_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenJets_ak*_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep PixelDigiSimLinkedmDetSetVector_simSiPixelDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simSiStripDigis_*_*', 
        'drop *_mix_simSiPixelDigis*_*', 
        'drop *_mix_simSiStripDigis*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'drop *_trackingtruthprod_*_*', 
        'drop *_electrontruth_*_*', 
        'keep *_mix_MergedTrackTruth_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_gtStage2Digis_*_*', 
        'keep *_gmtStage2Digis_*_*', 
        'keep *_caloStage2Digis_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*', 
        'keep *_hltAK4CaloJetsIDPassed_*_*', 
        'keep *_hltAK4CaloJets_*_*', 
        'keep *_hltAK4PFJetsCorrected_*_*', 
        'keep *_hltAK4PFJetsForTaus_*_*', 
        'keep *_hltAK4PFJets_*_*', 
        'keep *_hltAlCaEtaEBRechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaEtaEBRechitsToDigis_*_*', 
        'keep *_hltAlCaEtaEERechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaEtaEERechitsToDigis_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegionalLowPU_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegional_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilter_*_*', 
        'keep *_hltAlCaPhiSymStream_*_*', 
        'keep *_hltAlCaPi0EBRechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaPi0EBRechitsToDigis_*_*', 
        'keep *_hltAlCaPi0EERechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaPi0EERechitsToDigis_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegionalLowPU_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegional_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilter_*_*', 
        'keep *_hltBLifetimeL25AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeRegionalCtfWithMaterialTracksbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonMu5L3_*_*', 
        'keep *_hltCSVJetTagSingleTopEle27_*_*', 
        'keep *_hltCSVJetTagSingleTopIsoMu24_*_*', 
        'keep *_hltCaloJetCorrectedRegional_*_*', 
        'keep *_hltCaloJetCorrected_*_*', 
        'keep *_hltCaloJetL1FastJetCorrected_*_*', 
        'keep *_hltCaloStage2Digis_*_*', 
        'keep *_hltCleanedCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCleanedHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsCalo_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsPF_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFindingIsolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFinding_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5Isolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5_*_*', 
        'keep *_hltConvPFTausTightIso_*_*', 
        'keep *_hltConvPFTausTrackFindingLooseIsolation_*_*', 
        'keep *_hltConvPFTausTrackFinding_*_*', 
        'keep *_hltConvPFTaus_*_*', 
        'keep *_hltCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltCsc2DRecHits_*_*', 
        'keep *_hltCscSegments_*_*', 
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsCalo_*_*', 
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsInfosCalo_*_*', 
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsInfos_*_*', 
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsPF_*_*', 
        'keep *_hltDisplacedhltIter4PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolationProng4L1HLTMatched_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolationProng4_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolation_*_*', 
        'keep *_hltDoublePFTau25TrackPt5_*_*', 
        'keep *_hltDoublePFTau25_*_*', 
        'keep *_hltDoublePFTauTightIso45Track5_*_*', 
        'keep *_hltDoublePFTauTightIso45Track_*_*', 
        'keep *_hltDt4DSegments_*_*', 
        'keep *_hltEcalPhiSymFilter_*_*', 
        'keep *_hltEcalRecHitAll_*_*', 
        'keep *_hltEcalRecHit_*_*', 
        'keep *_hltEgammaCandidates_*_*', 
        'keep *_hltEgammaGsfElectrons_*_*', 
        'keep *_hltEgammaGsfTracks_*_*', 
        'keep *_hltEle20CaloIdVTCaloIsoTTrkIdTTrkIsoTTrackIsoFilterL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltEle20CaloIdVTTrkIdTDphiFilter_*_*', 
        'keep *_hltEle27WP85PixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltElectronsVertex_*_*', 
        'keep *_hltFEDSelectorLumiPixels_*_*', 
        'keep *_hltFastPVPixelTracksMerger_*_*', 
        'keep *_hltFastPVPixelTracksRecover_*_*', 
        'keep *_hltFastPVPixelTracks_*_*', 
        'keep *_hltFastPVPixelVertices3D_*_*', 
        'keep *_hltFastPVPixelVertices_*_*', 
        'keep *_hltFastPixelBLifetimeL3TagInfos_*_*', 
        'keep *_hltFastPrimaryVertex_*_*', 
        'keep *_hltFilterDoubleIsoPFTau45Trk5LeadTrack5IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterL2EtCutDoublePFIsoTau45Trk5_*_*', 
        'keep *_hltFilterL2EtCutSingleIsoPFTau35Trk20MET70_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20LeadTrackPt20_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET60LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET70LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltFullIterativeTrackingMergedForRefPP_*_*', 
        'keep *_hltGmtStage2Digis_*_*', 
        'keep *_hltGoodOnlinePVs_*_*', 
        'keep *_hltGtStage2Digis_*_*', 
        'keep *_hltHICaloJetCorrected_*_*', 
        'keep *_hltHICaloJetIDPassed_*_*', 
        'keep *_hltHIGoodLooseTracks_*_*', 
        'keep *_hltHIPixel3PrimTracks_*_*', 
        'keep *_hltHISelectedVertex_*_*', 
        'keep *_hltHISiPixelClusters_*_*', 
        'keep *_hltHITIPTCorrectorHB_*_*', 
        'keep *_hltHITIPTCorrectorHE_*_*', 
        'keep *_hltHbhereco_*_*', 
        'keep *_hltHfreco_*_*', 
        'keep *_hltHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltHiCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltHiIslandSuperClustersHI_*_*', 
        'keep *_hltHoreco_*_*', 
        'keep *_hltIsolPixelTrackProdHB_*_*', 
        'keep *_hltIsolPixelTrackProdHE_*_*', 
        'keep *_hltIter0ElectronsTrackSelectionHighPurity_*_*', 
        'keep *_hltIter0HighPtTkMuPixelTracks_*_*', 
        'keep *_hltIter0HighPtTkMuTrackSelectionHighPurity_*_*', 
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter1Merged_*_*', 
        'keep *_hltIter1PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter2HighPtTkMuMerged_*_*', 
        'keep *_hltIter2HighPtTkMuTrackSelectionHighPurity_*_*', 
        'keep *_hltIter2IterL3FromL1MuonMerged_*_*', 
        'keep *_hltIter2IterL3MuonMerged_*_*', 
        'keep *_hltIter2MergedForBTag_*_*', 
        'keep *_hltIter2MergedForElectrons_*_*', 
        'keep *_hltIter2Merged_*_*', 
        'keep *_hltIter2PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter3Merged_*_*', 
        'keep *_hltIter4Merged_*_*', 
        'keep *_hltIterL3GlbMuon_*_*', 
        'keep *_hltIterL3MuonAndMuonFromL1Merged_*_*', 
        'keep *_hltIterL3MuonMerged_*_*', 
        'keep *_hltIterL3MuonsNoID_*_*', 
        'keep *_hltIterL3Muons_*_*', 
        'keep *_hltIterL3OIMuonTrackSelectionHighPurity_*_*', 
        'keep *_hltIterativeCone5PileupSubtractionCaloJets_*_*', 
        'keep *_hltL1HLTSingleIsoPFTau35Trk20Met60JetsMatch_*_*', 
        'keep *_hltL1IsoElectronTrackIsol_*_*', 
        'keep *_hltL1NonIsoElectronTrackIsol_*_*', 
        'keep *_hltL1SeededRecoEcalCandidate_*_*', 
        'keep *_hltL1sDoubleTauJet44Eta2p17orDoubleJet64Central_*_*', 
        'keep *_hltL1sDoubleTauJet44erorDoubleJetC64_*_*', 
        'keep *_hltL1sL1EG18er_*_*', 
        'keep *_hltL1sL1ETM36ORETM40_*_*', 
        'keep *_hltL1sL1Jet52ETM30_*_*', 
        'keep *_hltL1sL1SingleEG12_*_*', 
        'keep *_hltL1sL1SingleEG15_*_*', 
        'keep *_hltL1sL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltL1sL1SingleMu10_*_*', 
        'keep *_hltL1sL1SingleMu14Eta2p1_*_*', 
        'keep *_hltL1sMu16Eta2p1_*_*', 
        'keep *_hltL2MuonCandidatesNoVtx_*_*', 
        'keep *_hltL2MuonCandidates_*_*', 
        'keep *_hltL2MuonSeeds_*_*', 
        'keep *_hltL2Muons_*_*', 
        'keep *_hltL2TauJets_*_*', 
        'keep *_hltL3MuonCandidates_*_*', 
        'keep *_hltL3MuonsIOHit_*_*', 
        'keep *_hltL3MuonsLinksCombination_*_*', 
        'keep *_hltL3MuonsOIHit_*_*', 
        'keep *_hltL3MuonsOIState_*_*', 
        'keep *_hltL3Muons_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuons_*_*', 
        'keep *_hltL3SecondaryVertexTagInfos_*_*', 
        'keep *_hltL3TkFromL2OICombination_*_*', 
        'keep *_hltL3TkTracksFromL2IOHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIState_*_*', 
        'keep *_hltL3TkTracksFromL2_*_*', 
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIState_*_*', 
        'keep *_hltL3TrajSeedIOHit_*_*', 
        'keep *_hltL3TrajSeedOIHit_*_*', 
        'keep *_hltL3TrajSeedOIState_*_*', 
        'keep *_hltL3TrajectorySeed_*_*', 
        'keep *_hltL3crIsoL1sMu16Eta2p1L1f0L2f16QL3f18QL3crIsoRhoFiltered0p15_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopEle27_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopIsoMu24_*_*', 
        'keep *_hltMergedTracks_*_*', 
        'keep *_hltMet_*_*', 
        'keep *_hltMu8Ele17CaloIdTCaloIsoVLPixelMatchFilter_*_*', 
        'keep *_hltMuTrackJpsiCtfTrackCands_*_*', 
        'keep *_hltMuTrackJpsiPixelTrackCands_*_*', 
        'keep *_hltMuonCSCDigis_*_*', 
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*', 
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*', 
        'keep *_hltMuonDTDigis_*_*', 
        'keep *_hltMuonRPCDigis_*_*', 
        'keep *_hltOnlineBeamSpot_*_*', 
        'keep *_hltOnlinePrimaryVertices_*_*', 
        'keep *_hltOverlapFilterEle20LooseIsoPFTau20OldVersion_*_*', 
        'keep *_hltOverlapFilterIsoEle20MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15IsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15TightIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu18LooseIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu18PFTau25TrackPt5Prong4_*_*', 
        'keep *_hltPFJetForBtag_*_*', 
        'keep *_hltPFMuonMerging_*_*', 
        'keep *_hltPFTau15TrackLooseIso_*_*', 
        'keep *_hltPFTau15Track_*_*', 
        'keep *_hltPFTau15_*_*', 
        'keep *_hltPFTau20IsoMuVertex_*_*', 
        'keep *_hltPFTau20TrackLooseIso_*_*', 
        'keep *_hltPFTau20Track_*_*', 
        'keep *_hltPFTau20_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolationProng4IsoMuVertex_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolationProng4_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolation_*_*', 
        'keep *_hltPFTau25TrackPt5_*_*', 
        'keep *_hltPFTau25_*_*', 
        'keep *_hltPFTau35TrackPt20LooseIsoProng2_*_*', 
        'keep *_hltPFTau35TrackPt20LooseIso_*_*', 
        'keep *_hltPFTau35TrackPt20_*_*', 
        'keep *_hltPFTau35Track_*_*', 
        'keep *_hltPFTau35_*_*', 
        'keep *_hltPFTauEleVertex20_*_*', 
        'keep *_hltPFTauJetTracksAssociator_*_*', 
        'keep *_hltPFTauMediumIso20TrackMediumIso_*_*', 
        'keep *_hltPFTauMediumIso20Track_*_*', 
        'keep *_hltPFTauMediumIso20_*_*', 
        'keep *_hltPFTauMediumIso35Track_*_*', 
        'keep *_hltPFTauMediumIso35_*_*', 
        'keep *_hltPFTauTagInfo_*_*', 
        'keep *_hltPFTauTightIso20TrackTightIso_*_*', 
        'keep *_hltPFTauTightIso20Track_*_*', 
        'keep *_hltPFTauTightIso20_*_*', 
        'keep *_hltPFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltParticleFlowForTaus_*_*', 
        'keep *_hltParticleFlow_*_*', 
        'keep *_hltPixelMatch3HitElectronsActivity_*_*', 
        'keep *_hltPixelMatch3HitElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchCleanElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchElectronsActivity_*_*', 
        'keep *_hltPixelMatchElectronsL1Iso_*_*', 
        'keep *_hltPixelMatchElectronsL1NonIso_*_*', 
        'keep *_hltPixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltPixelTracksElectrons_*_*', 
        'keep *_hltPixelTracksMerged_*_*', 
        'keep *_hltPixelTracks_*_*', 
        'keep *_hltPixelVertices3DbbPhi_*_*', 
        'keep *_hltPixelVertices_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC4_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC5_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidate_*_*', 
        'keep *_hltRpcRecHits_*_*', 
        'keep *_hltSelector4CentralJetsL1FastJet_*_*', 
        'keep *_hltSelector8CentralJetsL1FastJet_*_*', 
        'keep *_hltSelectorJets20L1FastJet_*_*', 
        'keep *_hltSiPixelCluster_*_*', 
        'keep *_hltSiPixelClustersCache_*_*', 
        'keep *_hltSiPixelClusters_*_*', 
        'keep *_hltSiStripClusters_*_*', 
        'keep *_hltSiStripRawToClustersFacility_*_*', 
        'keep *_hltSingleMu15L3Filtered15_*_*', 
        'keep *_hltSingleMuIsoL1s14L3IsoFiltered15eta2p1_*_*', 
        'keep *_hltSingleMuIsoL3IsoFiltered15_*_*', 
        'keep *_hltTowerMakerForAll_*_*', 
        'keep *_hltTowerMakerForMuons_*_*', 
        'keep *_hltTriggerSummaryAOD_*_*', 
        'keep *_hltTriggerSummaryRAW_*_*', 
        'keep *_hltTrimmedPixelVertices_*_*', 
        'keep *_hltVerticesL3_*_*', 
        'keep *_hltVerticesPFFilter_*_*', 
        'keep *_hltVerticesPFSelector_*_*', 
        'keep DcsStatuss_hltScalersRawToDigi_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_rawDataRepacker_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajSeedOIHit_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajectorySeed_*_*', 
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*', 
        'keep LumiScalerss_hltScalersRawToDigi_*_*', 
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIHit_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIState_*_*', 
        'keep TrackingRecHitsOwned_hltL3Muons_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep recoCaloJets_*_*_*', 
        'keep recoCaloMETs_*_*_*', 
        'keep recoCaloMETs_hltMet_*_*', 
        'keep recoCompositeCandidates_*_*_*', 
        'keep recoElectrons_*_*_*', 
        'keep recoIsolatedPixelTrackCandidates_*_*_*', 
        'keep recoMETs_*_*_*', 
        'keep recoPFJets_*_*_*', 
        'keep recoPFTaus_*_*_*', 
        'keep recoRecoChargedCandidates_*_*_*', 
        'keep recoRecoChargedCandidates_hltHIL3MuonCandidates_*_*', 
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidates_*_*_*', 
        'keep recoRecoEcalCandidates_hltL1IsoRecoEcalCandidate_*_*', 
        'keep recoRecoEcalCandidates_hltL1NonIsoRecoEcalCandidate_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIHit_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3MuonsOIHit_*_*', 
        'keep recoTracks_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3Muons_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIHit_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIState_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2_*_*', 
        'keep triggerTriggerEventWithRefs_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep triggerTriggerFilterObjectWithRefs_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*'
     ) ),
    splitLevel = cms.untracked.int32(0)
)

process.RAWEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    outputCommands = cms.untracked.vstring(
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.RAWMINIAODEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    eventAutoFlushCompressedSize = cms.untracked.int32(20971520),
    outputCommands = cms.untracked.vstring(
        'drop *', 
        'keep *_slimmedPhotons_*_*', 
        'keep *_slimmedOOTPhotons_*_*', 
        'keep *_slimmedElectrons_*_*', 
        'keep *_slimmedMuons_*_*', 
        'keep *_slimmedTaus_*_*', 
        'keep *_slimmedTausBoosted_*_*', 
        'keep *_slimmedCaloJets_*_*', 
        'keep *_slimmedJets_*_*', 
        'keep recoBaseTagInfosOwned_slimmedJets_*_*', 
        'keep *_slimmedJetsAK8_*_*', 
        'drop recoBaseTagInfosOwned_slimmedJetsAK8_*_*', 
        'keep *_slimmedJetsPuppi_*_*', 
        'keep *_slimmedMETs_*_*', 
        'keep *_slimmedMETsNoHF_*_*', 
        'keep *_slimmedMETsPuppi_*_*', 
        'keep *_slimmedSecondaryVertices_*_*', 
        'keep *_slimmedLambdaVertices_*_*', 
        'keep *_slimmedKshortVertices_*_*', 
        'keep *_slimmedJetsAK8PFPuppiSoftDropPacked_SubJets_*', 
        'keep recoPhotonCores_reducedEgamma_*_*', 
        'keep recoGsfElectronCores_reducedEgamma_*_*', 
        'keep recoConversions_reducedEgamma_*_*', 
        'keep recoSuperClusters_reducedEgamma_*_*', 
        'keep recoCaloClusters_reducedEgamma_*_*', 
        'keep EcalRecHitsSorted_reducedEgamma_*_*', 
        'keep recoGsfTracks_reducedEgamma_*_*', 
        'keep HBHERecHitsSorted_reducedEgamma_*_*', 
        'drop *_*_caloTowers_*', 
        'drop *_*_pfCandidates_*', 
        'drop *_*_genJets_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep *_offlineSlimmedPrimaryVertices_*_*', 
        'keep patPackedCandidates_packedPFCandidates_*_*', 
        'keep *_isolatedTracks_*_*', 
        'keep *_oniaPhotonCandidates_*_*', 
        'keep *_bunchSpacingProducer_*_*', 
        'keep double_fixedGridRhoAll__*', 
        'keep double_fixedGridRhoFastjetAll__*', 
        'keep double_fixedGridRhoFastjetAllTmp__*', 
        'keep double_fixedGridRhoFastjetAllCalo__*', 
        'keep double_fixedGridRhoFastjetCentral_*_*', 
        'keep double_fixedGridRhoFastjetCentralCalo__*', 
        'keep double_fixedGridRhoFastjetCentralChargedPileUp__*', 
        'keep double_fixedGridRhoFastjetCentralNeutral__*', 
        'keep *_slimmedPatTrigger_*_*', 
        'keep patPackedTriggerPrescales_patTrigger__*', 
        'keep patPackedTriggerPrescales_patTrigger_l1max_*', 
        'keep patPackedTriggerPrescales_patTrigger_l1min_*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_gtStage2Digis__*', 
        'keep *_gmtStage2Digis_Muon_*', 
        'keep *_caloStage2Digis_Jet_*', 
        'keep *_caloStage2Digis_Tau_*', 
        'keep *_caloStage2Digis_EGamma_*', 
        'keep *_caloStage2Digis_EtSum_*', 
        'keep *_TriggerResults_*_HLT', 
        'keep *_TriggerResults_*_*', 
        'keep patPackedCandidates_lostTracks_*_*', 
        'keep HcalNoiseSummary_hcalnoise__*', 
        'keep recoCSCHaloData_CSCHaloData_*_*', 
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*', 
        'keep LumiScalerss_scalersRawToDigi_*_*', 
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*', 
        'keep recoForwardProtons_ctppsProtons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep *_prefiringweight_*_*', 
        'keep *_packedPFCandidates_hcalDepthEnergyFractions_*', 
        'drop *_packedPFCandidates_hcalDepthEnergyFractions_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*'
    )
)

process.RAWMINIAODSIMEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    eventAutoFlushCompressedSize = cms.untracked.int32(20971520),
    outputCommands = cms.untracked.vstring(
        'drop *', 
        'keep *_slimmedPhotons_*_*', 
        'keep *_slimmedOOTPhotons_*_*', 
        'keep *_slimmedElectrons_*_*', 
        'keep *_slimmedMuons_*_*', 
        'keep *_slimmedTaus_*_*', 
        'keep *_slimmedTausBoosted_*_*', 
        'keep *_slimmedCaloJets_*_*', 
        'keep *_slimmedJets_*_*', 
        'keep recoBaseTagInfosOwned_slimmedJets_*_*', 
        'keep *_slimmedJetsAK8_*_*', 
        'drop recoBaseTagInfosOwned_slimmedJetsAK8_*_*', 
        'keep *_slimmedJetsPuppi_*_*', 
        'keep *_slimmedMETs_*_*', 
        'keep *_slimmedMETsNoHF_*_*', 
        'keep *_slimmedMETsPuppi_*_*', 
        'keep *_slimmedSecondaryVertices_*_*', 
        'keep *_slimmedLambdaVertices_*_*', 
        'keep *_slimmedKshortVertices_*_*', 
        'keep *_slimmedJetsAK8PFPuppiSoftDropPacked_SubJets_*', 
        'keep recoPhotonCores_reducedEgamma_*_*', 
        'keep recoGsfElectronCores_reducedEgamma_*_*', 
        'keep recoConversions_reducedEgamma_*_*', 
        'keep recoSuperClusters_reducedEgamma_*_*', 
        'keep recoCaloClusters_reducedEgamma_*_*', 
        'keep EcalRecHitsSorted_reducedEgamma_*_*', 
        'keep recoGsfTracks_reducedEgamma_*_*', 
        'keep HBHERecHitsSorted_reducedEgamma_*_*', 
        'drop *_*_caloTowers_*', 
        'drop *_*_pfCandidates_*', 
        'drop *_*_genJets_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep *_offlineSlimmedPrimaryVertices_*_*', 
        'keep patPackedCandidates_packedPFCandidates_*_*', 
        'keep *_isolatedTracks_*_*', 
        'keep *_oniaPhotonCandidates_*_*', 
        'keep *_bunchSpacingProducer_*_*', 
        'keep double_fixedGridRhoAll__*', 
        'keep double_fixedGridRhoFastjetAll__*', 
        'keep double_fixedGridRhoFastjetAllTmp__*', 
        'keep double_fixedGridRhoFastjetAllCalo__*', 
        'keep double_fixedGridRhoFastjetCentral_*_*', 
        'keep double_fixedGridRhoFastjetCentralCalo__*', 
        'keep double_fixedGridRhoFastjetCentralChargedPileUp__*', 
        'keep double_fixedGridRhoFastjetCentralNeutral__*', 
        'keep *_slimmedPatTrigger_*_*', 
        'keep patPackedTriggerPrescales_patTrigger__*', 
        'keep patPackedTriggerPrescales_patTrigger_l1max_*', 
        'keep patPackedTriggerPrescales_patTrigger_l1min_*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_gtStage2Digis__*', 
        'keep *_gmtStage2Digis_Muon_*', 
        'keep *_caloStage2Digis_Jet_*', 
        'keep *_caloStage2Digis_Tau_*', 
        'keep *_caloStage2Digis_EGamma_*', 
        'keep *_caloStage2Digis_EtSum_*', 
        'keep *_TriggerResults_*_HLT', 
        'keep *_TriggerResults_*_*', 
        'keep patPackedCandidates_lostTracks_*_*', 
        'keep HcalNoiseSummary_hcalnoise__*', 
        'keep recoCSCHaloData_CSCHaloData_*_*', 
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*', 
        'keep LumiScalerss_scalersRawToDigi_*_*', 
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*', 
        'keep recoForwardProtons_ctppsProtons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep *_prefiringweight_*_*', 
        'keep *_packedPFCandidates_hcalDepthEnergyFractions_*', 
        'drop *_packedPFCandidates_hcalDepthEnergyFractions_*', 
        'keep patPackedGenParticles_packedGenParticles_*_*', 
        'keep recoGenParticles_prunedGenParticles_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_*_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep recoGenParticles_genPUProtons_*_*', 
        'keep *_slimmedGenJetsFlavourInfos_*_*', 
        'keep *_slimmedGenJets__*', 
        'keep *_slimmedGenJetsAK8__*', 
        'keep *_slimmedGenJetsAK8SoftDropSubJets__*', 
        'keep *_genMetTrue_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep GenRunInfoProduct_*_*_*', 
        'keep *_genParticles_xyz0_*', 
        'keep *_genParticles_t0_*', 
        'keep PileupSummaryInfos_slimmedAddPileupInfo_*_*', 
        'keep L1GtTriggerMenuLite_l1GtTriggerMenuLite__*', 
        'keep *_slimmedElectronsFromMultiCl_*_*', 
        'keep *_slimmedPhotonsFromMultiCl_*_*', 
        'keep *_offlineSlimmedPrimaryVertices4D_*_*', 
        'keep SimVertexs_g4SimHits_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*'
    )
)

process.RAWRECODEBUGHLTEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring( (
        'drop *', 
        'drop *', 
        'drop *', 
        'drop *', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep PixelFEDChanneledmNewDetSetVector_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep ClusterSummary_clusterSummaryProducer_*_*', 
        'keep *_siPhase2Clusters_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_gemRecHits_*_*', 
        'keep *_gemSegments_*_*', 
        'keep *_me0RecHits_*_*', 
        'keep *_me0Segments_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_hcalDigis_*_*', 
        'keep ZDCDataFramesSorted_castorDigis_*_*', 
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*', 
        'keep ZDCRecHitsSorted_zdcreco_*_*', 
        'keep *_castorreco_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep HcalUnpackerReport_castorDigis_*_*', 
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*', 
        'keep HcalUnpackerReport_hcalDigis_*_*', 
        'keep *_HGCalRecHit_*_*', 
        'keep recoCaloClusters_hgcalLayerClusters_*_*', 
        'keep *_hgcalLayerClusters_timeLayerCluster_*', 
        'keep *_hgcalLayerClusters_InitialLayerClustersMask_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep EBSrFlagsSorted_ecalDigis__*', 
        'keep EESrFlagsSorted_ecalDigis__*', 
        'keep *_mix_EBTimeDigi_*', 
        'keep *_mix_EETimeDigi_*', 
        'keep *_ecalDetailedTimeRecHit_*_*', 
        'keep *_hgcalMultiClusters_*_*', 
        'keep *_iterHGCalMultiClusters_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'keep *_particleFlowSuperClusterOOTECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterHGCal__*', 
        'keep recoCaloClusters_particleFlowSuperClusterHGCal__*', 
        'keep recoSuperClusters_particleFlowSuperClusterHGCalFromMultiCl__*', 
        'keep recoCaloClusters_particleFlowSuperClusterHGCalFromMultiCl__*', 
        'keep *_particleFlowSuperClusterHGCal_*_*', 
        'keep *_particleFlowSuperClusterHGCalFromMultiCl_*_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_GsfGlobalElectronTest_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTracks_electronGsfTracksFromMultiCl_*_*', 
        'keep recoGsfTracks_electronGsfTracksFromMultiCl_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracksFromMultiCl_*_*', 
        'keep recoTrackExtras_electronGsfTracksFromMultiCl_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracksFromMultiCl_*_*', 
        'keep *_electronMergedSeedsFromMultiCl_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep recoTracks_cosmicDCTracks_*_*', 
        'keep recoTrackExtras_cosmicDCTracks_*_*', 
        'keep TrackingRecHitsOwned_cosmicDCTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTracks_ctfPixelLess_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_dedxPixelHarmonic2_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep *_generalTracks_MVAValues_*', 
        'keep *_generalTracks_MVAVals_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep recoCaloJets_ak4CaloJets_*_*', 
        'keep *_ak4CaloJets_rho_*', 
        'keep *_ak4CaloJets_sigma_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep floatedmValueMap_puppi_*_*', 
        'keep *_ak4PFJetsPuppi_*_*', 
        'keep *_ak8PFJetsPuppi_*_*', 
        'keep *_ak8PFJetsPuppiSoftDrop_*_*', 
        'keep recoPFJets_ak4PFJets_*_*', 
        'keep *_ak4PFJets_rho_*', 
        'keep *_ak4PFJets_sigma_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep recoBasicJets_ak5CastorJets_*_*', 
        'keep *_ak5CastorJets_rho_*', 
        'keep *_ak5CastorJets_sigma_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep recoBasicJets_ak7CastorJets_*_*', 
        'keep *_ak7CastorJets_rho_*', 
        'keep *_ak7CastorJets_sigma_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRhoAll_*_*', 
        'keep *_fixedGridRhoFastjetAll_*_*', 
        'keep *_fixedGridRhoFastjetAllTmp_*_*', 
        'keep *_fixedGridRhoFastjetCentral_*_*', 
        'keep *_fixedGridRhoFastjetAllCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*', 
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*', 
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep recoEcalHaloData_EcalHaloData_*_*', 
        'keep recoHcalHaloData_HcalHaloData_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep floatedmValueMap_puppiNoLep_*_*', 
        'keep recoPFMETs_pfMetPuppi_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep recoGlobalHaloData_GlobalHaloData_*_*', 
        'keep recoCSCHaloData_CSCHaloData_*_*', 
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muons_*_*', 
        'keep doubleedmValueMap_muons_muPFMean*_*', 
        'keep doubleedmValueMap_muons_muPFSum*_*', 
        'keep *_muons_muonShowerInformation_*', 
        'keep recoMuonTimeExtraedmValueMap_muons_*_*', 
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*', 
        'keep uintedmValueMap_muons_*_*', 
        'keep *_particleFlow_muons_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfGhostTrackVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfGhostTrackBJetTags_*_*', 
        'keep *_pfCombinedMVAV2BJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*', 
        'keep *_pfCombinedCvsLJetTags_*_*', 
        'keep *_pfCombinedCvsBJetTags_*_*', 
        'keep *_pfChargeBJetTags_*_*', 
        'keep *_pfDeepCSVJetTags_*_*', 
        'keep *_pfDeepCMVAJetTags_*_*', 
        'keep *_pixelClusterTagInfos_*_*', 
        'keep *_hpsPFTauDiscriminationByLooseElectronRejection_*_*', 
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*', 
        'keep recoPFTaus_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauBasicDiscriminators_*_*', 
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*', 
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*', 
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep *_hpsPFTauDiscriminationByMVA6ElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBdR03oldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWdR03oldDMwLT_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep *_offlinePrimaryVerticesWithBS_*_*', 
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep *_offlinePrimaryVertices4D__*', 
        'keep *_offlinePrimaryVertices4DWithBS__*', 
        'keep *_trackTimeValueMapProducer_*_*', 
        'keep *_offlinePrimaryVertices4DnoPID__*', 
        'keep *_offlinePrimaryVertices4DnoPIDWithBS__*', 
        'keep *_tofPID_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectrons_gedGsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep recoPhotonCores_gedPhotonCore_*_*', 
        'keep recoPhotons_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_ootPhotonCore_*_*', 
        'keep recoPhotons_ootPhotons_*_*', 
        'keep recoConversions_conversions_*_*', 
        'drop recoConversions_conversions_uncleanedConversions_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'keep *_gsfTracksOpenConversions_*_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFromConversions_*_*', 
        'keep recoTracks_ckfInOutTracksFromConversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*', 
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*', 
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*', 
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*', 
        'keep *_lowPtGsfToTrackLinks_*_*', 
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*', 
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*', 
        'keep floatedmValueMap_lowPtGsfElectronID_*_*', 
        'keep *_ecalDrivenGsfElectronCores_*_*', 
        'keep *_ecalDrivenGsfElectrons_*_*', 
        'keep *_ecalDrivenGsfElectronCoresFromMultiCl_*_*', 
        'keep *_ecalDrivenGsfElectronsFromMultiCl_*_*', 
        'keep *_photonCoreFromMultiCl_*_*', 
        'keep *_photonsFromMultiCl_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterHF_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_particleFlow_muons_*', 
        'keep recoCaloClusters_pfElectronTranslator_*_*', 
        'keep recoPreshowerClusters_pfElectronTranslator_*_*', 
        'keep recoSuperClusters_pfElectronTranslator_*_*', 
        'keep recoCaloClusters_pfPhotonTranslator_*_*', 
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*', 
        'keep recoSuperClusters_pfPhotonTranslator_*_*', 
        'keep recoPhotons_pfPhotonTranslator_*_*', 
        'keep recoPhotonCores_pfPhotonTranslator_*_*', 
        'keep recoConversions_pfPhotonTranslator_*_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_chargedHadronPFTrackIsolation_*_*', 
        'keep recoPFRecHits_particleFlowRecHitHGC_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterHGCal__*', 
        'keep recoPFClusters_particleFlowClusterHGCalFromMultiCl__*', 
        'keep recoSuperClusters_simPFProducer_*_*', 
        'keep *_ecalBarrelClusterFastTimer_*_*', 
        'keep *_particleFlowSuperClusterHGCalFromMultiCl_*_*', 
        'keep recoPFBlocks_simPFProducer_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'keep *_gtStage2Digis_*_*', 
        'keep *_gmtStage2Digis_*_*', 
        'keep *_caloStage2Digis_*_*', 
        'drop *_hlt*_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*', 
        'keep L1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep LumiScalerss_scalersRawToDigi_*_*', 
        'keep BeamSpotOnlines_scalersRawToDigi_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep DcsStatuss_hltScalersRawToDigi_*_*', 
        'keep CTPPSRecord_onlineMetaDataDigis_*_*', 
        'keep DCSRecord_onlineMetaDataDigis_*_*', 
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*', 
        'keep recoBeamSpot_onlineMetaDataDigis_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscriminationByDecayModeFinding_*_*', 
        'keep recoSingleTauDiscriminatorContaineredmValueMap_pfTausDiscriminationByIsolation_*_*', 
        'keep recoPFMETs_pfMetEI_*_*', 
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*', 
        'keep TotemFEDInfos_totemRPRawToDigi_*_*', 
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*', 
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*', 
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*', 
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*', 
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*', 
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*', 
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*', 
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*', 
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*', 
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*', 
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*', 
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*', 
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*', 
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*', 
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*', 
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*', 
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*', 
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*', 
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*', 
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*', 
        'keep recoForwardProtons_ctppsProtons_*_*', 
        'keep *_ticlTrackstersTrkEM_*_*', 
        'keep *_ticlTrackstersEM_*_*', 
        'keep *_ticlTrackstersHAD_*_*', 
        'keep *_ticlTrackstersTrk_*_*', 
        'keep *_ticlTrackstersMIP_*_*', 
        'keep *_ticlTrackstersMerge_*_*', 
        'keep *_ticlTrackstersHFNoseEM_*_*', 
        'keep *_ticlTrackstersHFNoseMIP_*_*', 
        'keep *_ticlTrackstersHFNoseMerge_*_*', 
        'keep *_pfTICL_*_*', 
        'keep *_ticlMultiClustersFromTrackstersEM_*_*', 
        'keep *_ticlMultiClustersFromTrackstersHAD_*_*', 
        'keep *_ticlMultiClustersFromTrackstersTrk_*_*', 
        'keep *_ticlMultiClustersFromTrackstersTrkEM_*_*', 
        'keep *_ticlMultiClustersFromTrackstersMIP_*_*', 
        'keep *_ticlMultiClustersFromTrackstersMerge_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generatorSmeared_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep SimTracks_g4SimHits_*_*', 
        'keep SimVertexs_g4SimHits_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep *_muonSimClassifier_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonME0Digis_*_*', 
        'keep *_simHGCalUnsuppressedDigis_EE_*', 
        'keep *_simHGCalUnsuppressedDigis_HEfront_*', 
        'keep *_simHGCalUnsuppressedDigis_HEback_*', 
        'keep *_mix_MergedCaloTruth_*', 
        'keep *_mix_FTLBarrel_*', 
        'keep *_mix_FTLEndcap_*', 
        'keep *_mix_InitialVertices_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep *_genPUProtons_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*', 
        'keep *_hltAK4CaloJetsIDPassed_*_*', 
        'keep *_hltAK4CaloJets_*_*', 
        'keep *_hltAK4PFJetsCorrected_*_*', 
        'keep *_hltAK4PFJetsForTaus_*_*', 
        'keep *_hltAK4PFJets_*_*', 
        'keep *_hltAlCaEtaEBRechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaEtaEBRechitsToDigis_*_*', 
        'keep *_hltAlCaEtaEERechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaEtaEERechitsToDigis_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegionalLowPU_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegional_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilter_*_*', 
        'keep *_hltAlCaPhiSymStream_*_*', 
        'keep *_hltAlCaPi0EBRechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaPi0EBRechitsToDigis_*_*', 
        'keep *_hltAlCaPi0EERechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaPi0EERechitsToDigis_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegionalLowPU_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegional_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilter_*_*', 
        'keep *_hltBLifetimeL25AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeRegionalCtfWithMaterialTracksbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonMu5L3_*_*', 
        'keep *_hltCSVJetTagSingleTopEle27_*_*', 
        'keep *_hltCSVJetTagSingleTopIsoMu24_*_*', 
        'keep *_hltCaloJetCorrectedRegional_*_*', 
        'keep *_hltCaloJetCorrected_*_*', 
        'keep *_hltCaloJetL1FastJetCorrected_*_*', 
        'keep *_hltCaloStage2Digis_*_*', 
        'keep *_hltCleanedCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCleanedHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsCalo_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsPF_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFindingIsolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFinding_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5Isolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5_*_*', 
        'keep *_hltConvPFTausTightIso_*_*', 
        'keep *_hltConvPFTausTrackFindingLooseIsolation_*_*', 
        'keep *_hltConvPFTausTrackFinding_*_*', 
        'keep *_hltConvPFTaus_*_*', 
        'keep *_hltCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltCsc2DRecHits_*_*', 
        'keep *_hltCscSegments_*_*', 
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsCalo_*_*', 
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsInfosCalo_*_*', 
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsInfos_*_*', 
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsPF_*_*', 
        'keep *_hltDisplacedhltIter4PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolationProng4L1HLTMatched_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolationProng4_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolation_*_*', 
        'keep *_hltDoublePFTau25TrackPt5_*_*', 
        'keep *_hltDoublePFTau25_*_*', 
        'keep *_hltDoublePFTauTightIso45Track5_*_*', 
        'keep *_hltDoublePFTauTightIso45Track_*_*', 
        'keep *_hltDt4DSegments_*_*', 
        'keep *_hltEcalPhiSymFilter_*_*', 
        'keep *_hltEcalRecHitAll_*_*', 
        'keep *_hltEcalRecHit_*_*', 
        'keep *_hltEgammaCandidates_*_*', 
        'keep *_hltEgammaGsfElectrons_*_*', 
        'keep *_hltEgammaGsfTracks_*_*', 
        'keep *_hltEle20CaloIdVTCaloIsoTTrkIdTTrkIsoTTrackIsoFilterL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltEle20CaloIdVTTrkIdTDphiFilter_*_*', 
        'keep *_hltEle27WP85PixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltElectronsVertex_*_*', 
        'keep *_hltFEDSelectorLumiPixels_*_*', 
        'keep *_hltFastPVPixelTracksMerger_*_*', 
        'keep *_hltFastPVPixelTracksRecover_*_*', 
        'keep *_hltFastPVPixelTracks_*_*', 
        'keep *_hltFastPVPixelVertices3D_*_*', 
        'keep *_hltFastPVPixelVertices_*_*', 
        'keep *_hltFastPixelBLifetimeL3TagInfos_*_*', 
        'keep *_hltFastPrimaryVertex_*_*', 
        'keep *_hltFilterDoubleIsoPFTau45Trk5LeadTrack5IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterL2EtCutDoublePFIsoTau45Trk5_*_*', 
        'keep *_hltFilterL2EtCutSingleIsoPFTau35Trk20MET70_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20LeadTrackPt20_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET60LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET70LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltFullIterativeTrackingMergedForRefPP_*_*', 
        'keep *_hltGmtStage2Digis_*_*', 
        'keep *_hltGoodOnlinePVs_*_*', 
        'keep *_hltGtStage2Digis_*_*', 
        'keep *_hltHICaloJetCorrected_*_*', 
        'keep *_hltHICaloJetIDPassed_*_*', 
        'keep *_hltHIGoodLooseTracks_*_*', 
        'keep *_hltHIPixel3PrimTracks_*_*', 
        'keep *_hltHISelectedVertex_*_*', 
        'keep *_hltHISiPixelClusters_*_*', 
        'keep *_hltHITIPTCorrectorHB_*_*', 
        'keep *_hltHITIPTCorrectorHE_*_*', 
        'keep *_hltHbhereco_*_*', 
        'keep *_hltHfreco_*_*', 
        'keep *_hltHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltHiCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltHiIslandSuperClustersHI_*_*', 
        'keep *_hltHoreco_*_*', 
        'keep *_hltIsolPixelTrackProdHB_*_*', 
        'keep *_hltIsolPixelTrackProdHE_*_*', 
        'keep *_hltIter0ElectronsTrackSelectionHighPurity_*_*', 
        'keep *_hltIter0HighPtTkMuPixelTracks_*_*', 
        'keep *_hltIter0HighPtTkMuTrackSelectionHighPurity_*_*', 
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter1Merged_*_*', 
        'keep *_hltIter1PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter2HighPtTkMuMerged_*_*', 
        'keep *_hltIter2HighPtTkMuTrackSelectionHighPurity_*_*', 
        'keep *_hltIter2IterL3FromL1MuonMerged_*_*', 
        'keep *_hltIter2IterL3MuonMerged_*_*', 
        'keep *_hltIter2MergedForBTag_*_*', 
        'keep *_hltIter2MergedForElectrons_*_*', 
        'keep *_hltIter2Merged_*_*', 
        'keep *_hltIter2PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter3Merged_*_*', 
        'keep *_hltIter4Merged_*_*', 
        'keep *_hltIterL3GlbMuon_*_*', 
        'keep *_hltIterL3MuonAndMuonFromL1Merged_*_*', 
        'keep *_hltIterL3MuonMerged_*_*', 
        'keep *_hltIterL3MuonsNoID_*_*', 
        'keep *_hltIterL3Muons_*_*', 
        'keep *_hltIterL3OIMuonTrackSelectionHighPurity_*_*', 
        'keep *_hltIterativeCone5PileupSubtractionCaloJets_*_*', 
        'keep *_hltL1HLTSingleIsoPFTau35Trk20Met60JetsMatch_*_*', 
        'keep *_hltL1IsoElectronTrackIsol_*_*', 
        'keep *_hltL1NonIsoElectronTrackIsol_*_*', 
        'keep *_hltL1SeededRecoEcalCandidate_*_*', 
        'keep *_hltL1sDoubleTauJet44Eta2p17orDoubleJet64Central_*_*', 
        'keep *_hltL1sDoubleTauJet44erorDoubleJetC64_*_*', 
        'keep *_hltL1sL1EG18er_*_*', 
        'keep *_hltL1sL1ETM36ORETM40_*_*', 
        'keep *_hltL1sL1Jet52ETM30_*_*', 
        'keep *_hltL1sL1SingleEG12_*_*', 
        'keep *_hltL1sL1SingleEG15_*_*', 
        'keep *_hltL1sL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltL1sL1SingleMu10_*_*', 
        'keep *_hltL1sL1SingleMu14Eta2p1_*_*', 
        'keep *_hltL1sMu16Eta2p1_*_*', 
        'keep *_hltL2MuonCandidatesNoVtx_*_*', 
        'keep *_hltL2MuonCandidates_*_*', 
        'keep *_hltL2MuonSeeds_*_*', 
        'keep *_hltL2Muons_*_*', 
        'keep *_hltL2TauJets_*_*', 
        'keep *_hltL3MuonCandidates_*_*', 
        'keep *_hltL3MuonsIOHit_*_*', 
        'keep *_hltL3MuonsLinksCombination_*_*', 
        'keep *_hltL3MuonsOIHit_*_*', 
        'keep *_hltL3MuonsOIState_*_*', 
        'keep *_hltL3Muons_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuons_*_*', 
        'keep *_hltL3SecondaryVertexTagInfos_*_*', 
        'keep *_hltL3TkFromL2OICombination_*_*', 
        'keep *_hltL3TkTracksFromL2IOHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIState_*_*', 
        'keep *_hltL3TkTracksFromL2_*_*', 
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIState_*_*', 
        'keep *_hltL3TrajSeedIOHit_*_*', 
        'keep *_hltL3TrajSeedOIHit_*_*', 
        'keep *_hltL3TrajSeedOIState_*_*', 
        'keep *_hltL3TrajectorySeed_*_*', 
        'keep *_hltL3crIsoL1sMu16Eta2p1L1f0L2f16QL3f18QL3crIsoRhoFiltered0p15_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopEle27_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopIsoMu24_*_*', 
        'keep *_hltMergedTracks_*_*', 
        'keep *_hltMet_*_*', 
        'keep *_hltMu8Ele17CaloIdTCaloIsoVLPixelMatchFilter_*_*', 
        'keep *_hltMuTrackJpsiCtfTrackCands_*_*', 
        'keep *_hltMuTrackJpsiPixelTrackCands_*_*', 
        'keep *_hltMuonCSCDigis_*_*', 
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*', 
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*', 
        'keep *_hltMuonDTDigis_*_*', 
        'keep *_hltMuonRPCDigis_*_*', 
        'keep *_hltOnlineBeamSpot_*_*', 
        'keep *_hltOnlinePrimaryVertices_*_*', 
        'keep *_hltOverlapFilterEle20LooseIsoPFTau20OldVersion_*_*', 
        'keep *_hltOverlapFilterIsoEle20MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15IsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15TightIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu18LooseIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu18PFTau25TrackPt5Prong4_*_*', 
        'keep *_hltPFJetForBtag_*_*', 
        'keep *_hltPFMuonMerging_*_*', 
        'keep *_hltPFTau15TrackLooseIso_*_*', 
        'keep *_hltPFTau15Track_*_*', 
        'keep *_hltPFTau15_*_*', 
        'keep *_hltPFTau20IsoMuVertex_*_*', 
        'keep *_hltPFTau20TrackLooseIso_*_*', 
        'keep *_hltPFTau20Track_*_*', 
        'keep *_hltPFTau20_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolationProng4IsoMuVertex_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolationProng4_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolation_*_*', 
        'keep *_hltPFTau25TrackPt5_*_*', 
        'keep *_hltPFTau25_*_*', 
        'keep *_hltPFTau35TrackPt20LooseIsoProng2_*_*', 
        'keep *_hltPFTau35TrackPt20LooseIso_*_*', 
        'keep *_hltPFTau35TrackPt20_*_*', 
        'keep *_hltPFTau35Track_*_*', 
        'keep *_hltPFTau35_*_*', 
        'keep *_hltPFTauEleVertex20_*_*', 
        'keep *_hltPFTauJetTracksAssociator_*_*', 
        'keep *_hltPFTauMediumIso20TrackMediumIso_*_*', 
        'keep *_hltPFTauMediumIso20Track_*_*', 
        'keep *_hltPFTauMediumIso20_*_*', 
        'keep *_hltPFTauMediumIso35Track_*_*', 
        'keep *_hltPFTauMediumIso35_*_*', 
        'keep *_hltPFTauTagInfo_*_*', 
        'keep *_hltPFTauTightIso20TrackTightIso_*_*', 
        'keep *_hltPFTauTightIso20Track_*_*', 
        'keep *_hltPFTauTightIso20_*_*', 
        'keep *_hltPFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltParticleFlowForTaus_*_*', 
        'keep *_hltParticleFlow_*_*', 
        'keep *_hltPixelMatch3HitElectronsActivity_*_*', 
        'keep *_hltPixelMatch3HitElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchCleanElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchElectronsActivity_*_*', 
        'keep *_hltPixelMatchElectronsL1Iso_*_*', 
        'keep *_hltPixelMatchElectronsL1NonIso_*_*', 
        'keep *_hltPixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltPixelTracksElectrons_*_*', 
        'keep *_hltPixelTracksMerged_*_*', 
        'keep *_hltPixelTracks_*_*', 
        'keep *_hltPixelVertices3DbbPhi_*_*', 
        'keep *_hltPixelVertices_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC4_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC5_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidate_*_*', 
        'keep *_hltRpcRecHits_*_*', 
        'keep *_hltSelector4CentralJetsL1FastJet_*_*', 
        'keep *_hltSelector8CentralJetsL1FastJet_*_*', 
        'keep *_hltSelectorJets20L1FastJet_*_*', 
        'keep *_hltSiPixelCluster_*_*', 
        'keep *_hltSiPixelClustersCache_*_*', 
        'keep *_hltSiPixelClusters_*_*', 
        'keep *_hltSiStripClusters_*_*', 
        'keep *_hltSiStripRawToClustersFacility_*_*', 
        'keep *_hltSingleMu15L3Filtered15_*_*', 
        'keep *_hltSingleMuIsoL1s14L3IsoFiltered15eta2p1_*_*', 
        'keep *_hltSingleMuIsoL3IsoFiltered15_*_*', 
        'keep *_hltTowerMakerForAll_*_*', 
        'keep *_hltTowerMakerForMuons_*_*', 
        'keep *_hltTriggerSummaryAOD_*_*', 
        'keep *_hltTriggerSummaryRAW_*_*', 
        'keep *_hltTrimmedPixelVertices_*_*', 
        'keep *_hltVerticesL3_*_*', 
        'keep *_hltVerticesPFFilter_*_*', 
        'keep *_hltVerticesPFSelector_*_*', 
        'keep DcsStatuss_hltScalersRawToDigi_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_rawDataRepacker_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajSeedOIHit_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajectorySeed_*_*', 
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*', 
        'keep LumiScalerss_hltScalersRawToDigi_*_*', 
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIHit_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIState_*_*', 
        'keep TrackingRecHitsOwned_hltL3Muons_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep recoCaloJets_*_*_*', 
        'keep recoCaloMETs_*_*_*', 
        'keep recoCaloMETs_hltMet_*_*', 
        'keep recoCompositeCandidates_*_*_*', 
        'keep recoElectrons_*_*_*', 
        'keep recoIsolatedPixelTrackCandidates_*_*_*', 
        'keep recoMETs_*_*_*', 
        'keep recoPFJets_*_*_*', 
        'keep recoPFTaus_*_*_*', 
        'keep recoRecoChargedCandidates_*_*_*', 
        'keep recoRecoChargedCandidates_hltHIL3MuonCandidates_*_*', 
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidates_*_*_*', 
        'keep recoRecoEcalCandidates_hltL1IsoRecoEcalCandidate_*_*', 
        'keep recoRecoEcalCandidates_hltL1NonIsoRecoEcalCandidate_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIHit_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3MuonsOIHit_*_*', 
        'keep recoTracks_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3Muons_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIHit_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIState_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2_*_*', 
        'keep triggerTriggerEventWithRefs_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep triggerTriggerFilterObjectWithRefs_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'drop *_trackingtruthprod_*_*', 
        'drop *_electrontruth_*_*', 
        'keep *_mix_MergedTrackTruth_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PixelDigiSimLinkedmDetSetVector_simSiPixelDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simSiStripDigis_*_*', 
        'drop *_mix_simSiPixelDigis*_*', 
        'drop *_mix_simSiStripDigis*_*', 
        'keep *_allTrackMCMatch_*_*'
     ) ),
    splitLevel = cms.untracked.int32(0)
)

process.RAWRECOEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring( (
        'drop *', 
        'drop *', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep PixelFEDChanneledmNewDetSetVector_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep ClusterSummary_clusterSummaryProducer_*_*', 
        'keep *_siPhase2Clusters_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_gemRecHits_*_*', 
        'keep *_gemSegments_*_*', 
        'keep *_me0RecHits_*_*', 
        'keep *_me0Segments_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_hcalDigis_*_*', 
        'keep ZDCDataFramesSorted_castorDigis_*_*', 
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*', 
        'keep ZDCRecHitsSorted_zdcreco_*_*', 
        'keep *_castorreco_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep HcalUnpackerReport_castorDigis_*_*', 
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*', 
        'keep HcalUnpackerReport_hcalDigis_*_*', 
        'keep *_HGCalRecHit_*_*', 
        'keep recoCaloClusters_hgcalLayerClusters_*_*', 
        'keep *_hgcalLayerClusters_timeLayerCluster_*', 
        'keep *_hgcalLayerClusters_InitialLayerClustersMask_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep EBSrFlagsSorted_ecalDigis__*', 
        'keep EESrFlagsSorted_ecalDigis__*', 
        'keep *_mix_EBTimeDigi_*', 
        'keep *_mix_EETimeDigi_*', 
        'keep *_ecalDetailedTimeRecHit_*_*', 
        'keep *_hgcalMultiClusters_*_*', 
        'keep *_iterHGCalMultiClusters_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'keep *_particleFlowSuperClusterOOTECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterHGCal__*', 
        'keep recoCaloClusters_particleFlowSuperClusterHGCal__*', 
        'keep recoSuperClusters_particleFlowSuperClusterHGCalFromMultiCl__*', 
        'keep recoCaloClusters_particleFlowSuperClusterHGCalFromMultiCl__*', 
        'keep *_particleFlowSuperClusterHGCal_*_*', 
        'keep *_particleFlowSuperClusterHGCalFromMultiCl_*_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_GsfGlobalElectronTest_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTracks_electronGsfTracksFromMultiCl_*_*', 
        'keep recoGsfTracks_electronGsfTracksFromMultiCl_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracksFromMultiCl_*_*', 
        'keep recoTrackExtras_electronGsfTracksFromMultiCl_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracksFromMultiCl_*_*', 
        'keep *_electronMergedSeedsFromMultiCl_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep recoTracks_cosmicDCTracks_*_*', 
        'keep recoTrackExtras_cosmicDCTracks_*_*', 
        'keep TrackingRecHitsOwned_cosmicDCTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTracks_ctfPixelLess_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_dedxPixelHarmonic2_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep *_generalTracks_MVAValues_*', 
        'keep *_generalTracks_MVAVals_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep recoCaloJets_ak4CaloJets_*_*', 
        'keep *_ak4CaloJets_rho_*', 
        'keep *_ak4CaloJets_sigma_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep floatedmValueMap_puppi_*_*', 
        'keep *_ak4PFJetsPuppi_*_*', 
        'keep *_ak8PFJetsPuppi_*_*', 
        'keep *_ak8PFJetsPuppiSoftDrop_*_*', 
        'keep recoPFJets_ak4PFJets_*_*', 
        'keep *_ak4PFJets_rho_*', 
        'keep *_ak4PFJets_sigma_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep recoBasicJets_ak5CastorJets_*_*', 
        'keep *_ak5CastorJets_rho_*', 
        'keep *_ak5CastorJets_sigma_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep recoBasicJets_ak7CastorJets_*_*', 
        'keep *_ak7CastorJets_rho_*', 
        'keep *_ak7CastorJets_sigma_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRhoAll_*_*', 
        'keep *_fixedGridRhoFastjetAll_*_*', 
        'keep *_fixedGridRhoFastjetAllTmp_*_*', 
        'keep *_fixedGridRhoFastjetCentral_*_*', 
        'keep *_fixedGridRhoFastjetAllCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*', 
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*', 
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep recoEcalHaloData_EcalHaloData_*_*', 
        'keep recoHcalHaloData_HcalHaloData_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep floatedmValueMap_puppiNoLep_*_*', 
        'keep recoPFMETs_pfMetPuppi_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep recoGlobalHaloData_GlobalHaloData_*_*', 
        'keep recoCSCHaloData_CSCHaloData_*_*', 
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muons_*_*', 
        'keep doubleedmValueMap_muons_muPFMean*_*', 
        'keep doubleedmValueMap_muons_muPFSum*_*', 
        'keep *_muons_muonShowerInformation_*', 
        'keep recoMuonTimeExtraedmValueMap_muons_*_*', 
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*', 
        'keep uintedmValueMap_muons_*_*', 
        'keep *_particleFlow_muons_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfGhostTrackVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfGhostTrackBJetTags_*_*', 
        'keep *_pfCombinedMVAV2BJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*', 
        'keep *_pfCombinedCvsLJetTags_*_*', 
        'keep *_pfCombinedCvsBJetTags_*_*', 
        'keep *_pfChargeBJetTags_*_*', 
        'keep *_pfDeepCSVJetTags_*_*', 
        'keep *_pfDeepCMVAJetTags_*_*', 
        'keep *_pixelClusterTagInfos_*_*', 
        'keep *_hpsPFTauDiscriminationByLooseElectronRejection_*_*', 
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*', 
        'keep recoPFTaus_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauBasicDiscriminators_*_*', 
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*', 
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*', 
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep *_hpsPFTauDiscriminationByMVA6ElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBdR03oldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWdR03oldDMwLT_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep *_offlinePrimaryVerticesWithBS_*_*', 
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep *_offlinePrimaryVertices4D__*', 
        'keep *_offlinePrimaryVertices4DWithBS__*', 
        'keep *_trackTimeValueMapProducer_*_*', 
        'keep *_offlinePrimaryVertices4DnoPID__*', 
        'keep *_offlinePrimaryVertices4DnoPIDWithBS__*', 
        'keep *_tofPID_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectrons_gedGsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep recoPhotonCores_gedPhotonCore_*_*', 
        'keep recoPhotons_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_ootPhotonCore_*_*', 
        'keep recoPhotons_ootPhotons_*_*', 
        'keep recoConversions_conversions_*_*', 
        'drop recoConversions_conversions_uncleanedConversions_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'keep *_gsfTracksOpenConversions_*_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFromConversions_*_*', 
        'keep recoTracks_ckfInOutTracksFromConversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*', 
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*', 
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*', 
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*', 
        'keep *_lowPtGsfToTrackLinks_*_*', 
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*', 
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*', 
        'keep floatedmValueMap_lowPtGsfElectronID_*_*', 
        'keep *_ecalDrivenGsfElectronCores_*_*', 
        'keep *_ecalDrivenGsfElectrons_*_*', 
        'keep *_ecalDrivenGsfElectronCoresFromMultiCl_*_*', 
        'keep *_ecalDrivenGsfElectronsFromMultiCl_*_*', 
        'keep *_photonCoreFromMultiCl_*_*', 
        'keep *_photonsFromMultiCl_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterHF_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_particleFlow_muons_*', 
        'keep recoCaloClusters_pfElectronTranslator_*_*', 
        'keep recoPreshowerClusters_pfElectronTranslator_*_*', 
        'keep recoSuperClusters_pfElectronTranslator_*_*', 
        'keep recoCaloClusters_pfPhotonTranslator_*_*', 
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*', 
        'keep recoSuperClusters_pfPhotonTranslator_*_*', 
        'keep recoPhotons_pfPhotonTranslator_*_*', 
        'keep recoPhotonCores_pfPhotonTranslator_*_*', 
        'keep recoConversions_pfPhotonTranslator_*_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_chargedHadronPFTrackIsolation_*_*', 
        'keep recoPFRecHits_particleFlowRecHitHGC_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterHGCal__*', 
        'keep recoPFClusters_particleFlowClusterHGCalFromMultiCl__*', 
        'keep recoSuperClusters_simPFProducer_*_*', 
        'keep *_ecalBarrelClusterFastTimer_*_*', 
        'keep *_particleFlowSuperClusterHGCalFromMultiCl_*_*', 
        'keep recoPFBlocks_simPFProducer_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'keep *_gtStage2Digis_*_*', 
        'keep *_gmtStage2Digis_*_*', 
        'keep *_caloStage2Digis_*_*', 
        'drop *_hlt*_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*', 
        'keep L1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep LumiScalerss_scalersRawToDigi_*_*', 
        'keep BeamSpotOnlines_scalersRawToDigi_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep DcsStatuss_hltScalersRawToDigi_*_*', 
        'keep CTPPSRecord_onlineMetaDataDigis_*_*', 
        'keep DCSRecord_onlineMetaDataDigis_*_*', 
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*', 
        'keep recoBeamSpot_onlineMetaDataDigis_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscriminationByDecayModeFinding_*_*', 
        'keep recoSingleTauDiscriminatorContaineredmValueMap_pfTausDiscriminationByIsolation_*_*', 
        'keep recoPFMETs_pfMetEI_*_*', 
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*', 
        'keep TotemFEDInfos_totemRPRawToDigi_*_*', 
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*', 
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*', 
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*', 
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*', 
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*', 
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*', 
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*', 
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*', 
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*', 
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*', 
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*', 
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*', 
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*', 
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*', 
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*', 
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*', 
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*', 
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*', 
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*', 
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*', 
        'keep recoForwardProtons_ctppsProtons_*_*', 
        'keep *_ticlTrackstersTrkEM_*_*', 
        'keep *_ticlTrackstersEM_*_*', 
        'keep *_ticlTrackstersHAD_*_*', 
        'keep *_ticlTrackstersTrk_*_*', 
        'keep *_ticlTrackstersMIP_*_*', 
        'keep *_ticlTrackstersMerge_*_*', 
        'keep *_ticlTrackstersHFNoseEM_*_*', 
        'keep *_ticlTrackstersHFNoseMIP_*_*', 
        'keep *_ticlTrackstersHFNoseMerge_*_*', 
        'keep *_pfTICL_*_*', 
        'keep *_ticlMultiClustersFromTrackstersEM_*_*', 
        'keep *_ticlMultiClustersFromTrackstersHAD_*_*', 
        'keep *_ticlMultiClustersFromTrackstersTrk_*_*', 
        'keep *_ticlMultiClustersFromTrackstersTrkEM_*_*', 
        'keep *_ticlMultiClustersFromTrackstersMIP_*_*', 
        'keep *_ticlMultiClustersFromTrackstersMerge_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*'
     ) ),
    splitLevel = cms.untracked.int32(0)
)

process.RAWRECOSIMHLTEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring( (
        'drop *', 
        'drop *', 
        'drop *', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep PixelFEDChanneledmNewDetSetVector_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep ClusterSummary_clusterSummaryProducer_*_*', 
        'keep *_siPhase2Clusters_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_gemRecHits_*_*', 
        'keep *_gemSegments_*_*', 
        'keep *_me0RecHits_*_*', 
        'keep *_me0Segments_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_hcalDigis_*_*', 
        'keep ZDCDataFramesSorted_castorDigis_*_*', 
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*', 
        'keep ZDCRecHitsSorted_zdcreco_*_*', 
        'keep *_castorreco_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep HcalUnpackerReport_castorDigis_*_*', 
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*', 
        'keep HcalUnpackerReport_hcalDigis_*_*', 
        'keep *_HGCalRecHit_*_*', 
        'keep recoCaloClusters_hgcalLayerClusters_*_*', 
        'keep *_hgcalLayerClusters_timeLayerCluster_*', 
        'keep *_hgcalLayerClusters_InitialLayerClustersMask_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep EBSrFlagsSorted_ecalDigis__*', 
        'keep EESrFlagsSorted_ecalDigis__*', 
        'keep *_mix_EBTimeDigi_*', 
        'keep *_mix_EETimeDigi_*', 
        'keep *_ecalDetailedTimeRecHit_*_*', 
        'keep *_hgcalMultiClusters_*_*', 
        'keep *_iterHGCalMultiClusters_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'keep *_particleFlowSuperClusterOOTECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterHGCal__*', 
        'keep recoCaloClusters_particleFlowSuperClusterHGCal__*', 
        'keep recoSuperClusters_particleFlowSuperClusterHGCalFromMultiCl__*', 
        'keep recoCaloClusters_particleFlowSuperClusterHGCalFromMultiCl__*', 
        'keep *_particleFlowSuperClusterHGCal_*_*', 
        'keep *_particleFlowSuperClusterHGCalFromMultiCl_*_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_GsfGlobalElectronTest_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTracks_electronGsfTracksFromMultiCl_*_*', 
        'keep recoGsfTracks_electronGsfTracksFromMultiCl_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracksFromMultiCl_*_*', 
        'keep recoTrackExtras_electronGsfTracksFromMultiCl_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracksFromMultiCl_*_*', 
        'keep *_electronMergedSeedsFromMultiCl_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep recoTracks_cosmicDCTracks_*_*', 
        'keep recoTrackExtras_cosmicDCTracks_*_*', 
        'keep TrackingRecHitsOwned_cosmicDCTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTracks_ctfPixelLess_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_dedxPixelHarmonic2_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep *_generalTracks_MVAValues_*', 
        'keep *_generalTracks_MVAVals_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep recoCaloJets_ak4CaloJets_*_*', 
        'keep *_ak4CaloJets_rho_*', 
        'keep *_ak4CaloJets_sigma_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep floatedmValueMap_puppi_*_*', 
        'keep *_ak4PFJetsPuppi_*_*', 
        'keep *_ak8PFJetsPuppi_*_*', 
        'keep *_ak8PFJetsPuppiSoftDrop_*_*', 
        'keep recoPFJets_ak4PFJets_*_*', 
        'keep *_ak4PFJets_rho_*', 
        'keep *_ak4PFJets_sigma_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep recoBasicJets_ak5CastorJets_*_*', 
        'keep *_ak5CastorJets_rho_*', 
        'keep *_ak5CastorJets_sigma_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep recoBasicJets_ak7CastorJets_*_*', 
        'keep *_ak7CastorJets_rho_*', 
        'keep *_ak7CastorJets_sigma_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRhoAll_*_*', 
        'keep *_fixedGridRhoFastjetAll_*_*', 
        'keep *_fixedGridRhoFastjetAllTmp_*_*', 
        'keep *_fixedGridRhoFastjetCentral_*_*', 
        'keep *_fixedGridRhoFastjetAllCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*', 
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*', 
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep recoEcalHaloData_EcalHaloData_*_*', 
        'keep recoHcalHaloData_HcalHaloData_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep floatedmValueMap_puppiNoLep_*_*', 
        'keep recoPFMETs_pfMetPuppi_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep recoGlobalHaloData_GlobalHaloData_*_*', 
        'keep recoCSCHaloData_CSCHaloData_*_*', 
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muons_*_*', 
        'keep doubleedmValueMap_muons_muPFMean*_*', 
        'keep doubleedmValueMap_muons_muPFSum*_*', 
        'keep *_muons_muonShowerInformation_*', 
        'keep recoMuonTimeExtraedmValueMap_muons_*_*', 
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*', 
        'keep uintedmValueMap_muons_*_*', 
        'keep *_particleFlow_muons_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfGhostTrackVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfGhostTrackBJetTags_*_*', 
        'keep *_pfCombinedMVAV2BJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*', 
        'keep *_pfCombinedCvsLJetTags_*_*', 
        'keep *_pfCombinedCvsBJetTags_*_*', 
        'keep *_pfChargeBJetTags_*_*', 
        'keep *_pfDeepCSVJetTags_*_*', 
        'keep *_pfDeepCMVAJetTags_*_*', 
        'keep *_pixelClusterTagInfos_*_*', 
        'keep *_hpsPFTauDiscriminationByLooseElectronRejection_*_*', 
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*', 
        'keep recoPFTaus_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauBasicDiscriminators_*_*', 
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*', 
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*', 
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep *_hpsPFTauDiscriminationByMVA6ElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBdR03oldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWdR03oldDMwLT_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep *_offlinePrimaryVerticesWithBS_*_*', 
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep *_offlinePrimaryVertices4D__*', 
        'keep *_offlinePrimaryVertices4DWithBS__*', 
        'keep *_trackTimeValueMapProducer_*_*', 
        'keep *_offlinePrimaryVertices4DnoPID__*', 
        'keep *_offlinePrimaryVertices4DnoPIDWithBS__*', 
        'keep *_tofPID_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectrons_gedGsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep recoPhotonCores_gedPhotonCore_*_*', 
        'keep recoPhotons_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_ootPhotonCore_*_*', 
        'keep recoPhotons_ootPhotons_*_*', 
        'keep recoConversions_conversions_*_*', 
        'drop recoConversions_conversions_uncleanedConversions_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'keep *_gsfTracksOpenConversions_*_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFromConversions_*_*', 
        'keep recoTracks_ckfInOutTracksFromConversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*', 
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*', 
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*', 
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*', 
        'keep *_lowPtGsfToTrackLinks_*_*', 
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*', 
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*', 
        'keep floatedmValueMap_lowPtGsfElectronID_*_*', 
        'keep *_ecalDrivenGsfElectronCores_*_*', 
        'keep *_ecalDrivenGsfElectrons_*_*', 
        'keep *_ecalDrivenGsfElectronCoresFromMultiCl_*_*', 
        'keep *_ecalDrivenGsfElectronsFromMultiCl_*_*', 
        'keep *_photonCoreFromMultiCl_*_*', 
        'keep *_photonsFromMultiCl_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterHF_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_particleFlow_muons_*', 
        'keep recoCaloClusters_pfElectronTranslator_*_*', 
        'keep recoPreshowerClusters_pfElectronTranslator_*_*', 
        'keep recoSuperClusters_pfElectronTranslator_*_*', 
        'keep recoCaloClusters_pfPhotonTranslator_*_*', 
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*', 
        'keep recoSuperClusters_pfPhotonTranslator_*_*', 
        'keep recoPhotons_pfPhotonTranslator_*_*', 
        'keep recoPhotonCores_pfPhotonTranslator_*_*', 
        'keep recoConversions_pfPhotonTranslator_*_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_chargedHadronPFTrackIsolation_*_*', 
        'keep recoPFRecHits_particleFlowRecHitHGC_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterHGCal__*', 
        'keep recoPFClusters_particleFlowClusterHGCalFromMultiCl__*', 
        'keep recoSuperClusters_simPFProducer_*_*', 
        'keep *_ecalBarrelClusterFastTimer_*_*', 
        'keep *_particleFlowSuperClusterHGCalFromMultiCl_*_*', 
        'keep recoPFBlocks_simPFProducer_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'keep *_gtStage2Digis_*_*', 
        'keep *_gmtStage2Digis_*_*', 
        'keep *_caloStage2Digis_*_*', 
        'drop *_hlt*_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*', 
        'keep L1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep LumiScalerss_scalersRawToDigi_*_*', 
        'keep BeamSpotOnlines_scalersRawToDigi_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep DcsStatuss_hltScalersRawToDigi_*_*', 
        'keep CTPPSRecord_onlineMetaDataDigis_*_*', 
        'keep DCSRecord_onlineMetaDataDigis_*_*', 
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*', 
        'keep recoBeamSpot_onlineMetaDataDigis_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscriminationByDecayModeFinding_*_*', 
        'keep recoSingleTauDiscriminatorContaineredmValueMap_pfTausDiscriminationByIsolation_*_*', 
        'keep recoPFMETs_pfMetEI_*_*', 
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*', 
        'keep TotemFEDInfos_totemRPRawToDigi_*_*', 
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*', 
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*', 
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*', 
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*', 
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*', 
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*', 
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*', 
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*', 
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*', 
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*', 
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*', 
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*', 
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*', 
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*', 
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*', 
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*', 
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*', 
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*', 
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*', 
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*', 
        'keep recoForwardProtons_ctppsProtons_*_*', 
        'keep *_ticlTrackstersTrkEM_*_*', 
        'keep *_ticlTrackstersEM_*_*', 
        'keep *_ticlTrackstersHAD_*_*', 
        'keep *_ticlTrackstersTrk_*_*', 
        'keep *_ticlTrackstersMIP_*_*', 
        'keep *_ticlTrackstersMerge_*_*', 
        'keep *_ticlTrackstersHFNoseEM_*_*', 
        'keep *_ticlTrackstersHFNoseMIP_*_*', 
        'keep *_ticlTrackstersHFNoseMerge_*_*', 
        'keep *_pfTICL_*_*', 
        'keep *_ticlMultiClustersFromTrackstersEM_*_*', 
        'keep *_ticlMultiClustersFromTrackstersHAD_*_*', 
        'keep *_ticlMultiClustersFromTrackstersTrk_*_*', 
        'keep *_ticlMultiClustersFromTrackstersTrkEM_*_*', 
        'keep *_ticlMultiClustersFromTrackstersMIP_*_*', 
        'keep *_ticlMultiClustersFromTrackstersMerge_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generatorSmeared_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep SimTracks_g4SimHits_*_*', 
        'keep SimVertexs_g4SimHits_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep *_muonSimClassifier_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonME0Digis_*_*', 
        'keep *_simHGCalUnsuppressedDigis_EE_*', 
        'keep *_simHGCalUnsuppressedDigis_HEfront_*', 
        'keep *_simHGCalUnsuppressedDigis_HEback_*', 
        'keep *_mix_MergedCaloTruth_*', 
        'keep *_mix_FTLBarrel_*', 
        'keep *_mix_FTLEndcap_*', 
        'keep *_mix_InitialVertices_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep *_genPUProtons_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*', 
        'keep *_hltAK4CaloJetsIDPassed_*_*', 
        'keep *_hltAK4CaloJets_*_*', 
        'keep *_hltAK4PFJetsCorrected_*_*', 
        'keep *_hltAK4PFJetsForTaus_*_*', 
        'keep *_hltAK4PFJets_*_*', 
        'keep *_hltAlCaEtaEBRechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaEtaEBRechitsToDigis_*_*', 
        'keep *_hltAlCaEtaEERechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaEtaEERechitsToDigis_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegionalLowPU_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegional_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilter_*_*', 
        'keep *_hltAlCaPhiSymStream_*_*', 
        'keep *_hltAlCaPi0EBRechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaPi0EBRechitsToDigis_*_*', 
        'keep *_hltAlCaPi0EERechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaPi0EERechitsToDigis_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegionalLowPU_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegional_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilter_*_*', 
        'keep *_hltBLifetimeL25AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeRegionalCtfWithMaterialTracksbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonMu5L3_*_*', 
        'keep *_hltCSVJetTagSingleTopEle27_*_*', 
        'keep *_hltCSVJetTagSingleTopIsoMu24_*_*', 
        'keep *_hltCaloJetCorrectedRegional_*_*', 
        'keep *_hltCaloJetCorrected_*_*', 
        'keep *_hltCaloJetL1FastJetCorrected_*_*', 
        'keep *_hltCaloStage2Digis_*_*', 
        'keep *_hltCleanedCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCleanedHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsCalo_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsPF_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFindingIsolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFinding_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5Isolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5_*_*', 
        'keep *_hltConvPFTausTightIso_*_*', 
        'keep *_hltConvPFTausTrackFindingLooseIsolation_*_*', 
        'keep *_hltConvPFTausTrackFinding_*_*', 
        'keep *_hltConvPFTaus_*_*', 
        'keep *_hltCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltCsc2DRecHits_*_*', 
        'keep *_hltCscSegments_*_*', 
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsCalo_*_*', 
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsInfosCalo_*_*', 
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsInfos_*_*', 
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsPF_*_*', 
        'keep *_hltDisplacedhltIter4PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolationProng4L1HLTMatched_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolationProng4_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolation_*_*', 
        'keep *_hltDoublePFTau25TrackPt5_*_*', 
        'keep *_hltDoublePFTau25_*_*', 
        'keep *_hltDoublePFTauTightIso45Track5_*_*', 
        'keep *_hltDoublePFTauTightIso45Track_*_*', 
        'keep *_hltDt4DSegments_*_*', 
        'keep *_hltEcalPhiSymFilter_*_*', 
        'keep *_hltEcalRecHitAll_*_*', 
        'keep *_hltEcalRecHit_*_*', 
        'keep *_hltEgammaCandidates_*_*', 
        'keep *_hltEgammaGsfElectrons_*_*', 
        'keep *_hltEgammaGsfTracks_*_*', 
        'keep *_hltEle20CaloIdVTCaloIsoTTrkIdTTrkIsoTTrackIsoFilterL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltEle20CaloIdVTTrkIdTDphiFilter_*_*', 
        'keep *_hltEle27WP85PixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltElectronsVertex_*_*', 
        'keep *_hltFEDSelectorLumiPixels_*_*', 
        'keep *_hltFastPVPixelTracksMerger_*_*', 
        'keep *_hltFastPVPixelTracksRecover_*_*', 
        'keep *_hltFastPVPixelTracks_*_*', 
        'keep *_hltFastPVPixelVertices3D_*_*', 
        'keep *_hltFastPVPixelVertices_*_*', 
        'keep *_hltFastPixelBLifetimeL3TagInfos_*_*', 
        'keep *_hltFastPrimaryVertex_*_*', 
        'keep *_hltFilterDoubleIsoPFTau45Trk5LeadTrack5IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterL2EtCutDoublePFIsoTau45Trk5_*_*', 
        'keep *_hltFilterL2EtCutSingleIsoPFTau35Trk20MET70_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20LeadTrackPt20_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET60LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET70LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltFullIterativeTrackingMergedForRefPP_*_*', 
        'keep *_hltGmtStage2Digis_*_*', 
        'keep *_hltGoodOnlinePVs_*_*', 
        'keep *_hltGtStage2Digis_*_*', 
        'keep *_hltHICaloJetCorrected_*_*', 
        'keep *_hltHICaloJetIDPassed_*_*', 
        'keep *_hltHIGoodLooseTracks_*_*', 
        'keep *_hltHIPixel3PrimTracks_*_*', 
        'keep *_hltHISelectedVertex_*_*', 
        'keep *_hltHISiPixelClusters_*_*', 
        'keep *_hltHITIPTCorrectorHB_*_*', 
        'keep *_hltHITIPTCorrectorHE_*_*', 
        'keep *_hltHbhereco_*_*', 
        'keep *_hltHfreco_*_*', 
        'keep *_hltHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltHiCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltHiIslandSuperClustersHI_*_*', 
        'keep *_hltHoreco_*_*', 
        'keep *_hltIsolPixelTrackProdHB_*_*', 
        'keep *_hltIsolPixelTrackProdHE_*_*', 
        'keep *_hltIter0ElectronsTrackSelectionHighPurity_*_*', 
        'keep *_hltIter0HighPtTkMuPixelTracks_*_*', 
        'keep *_hltIter0HighPtTkMuTrackSelectionHighPurity_*_*', 
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter1Merged_*_*', 
        'keep *_hltIter1PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter2HighPtTkMuMerged_*_*', 
        'keep *_hltIter2HighPtTkMuTrackSelectionHighPurity_*_*', 
        'keep *_hltIter2IterL3FromL1MuonMerged_*_*', 
        'keep *_hltIter2IterL3MuonMerged_*_*', 
        'keep *_hltIter2MergedForBTag_*_*', 
        'keep *_hltIter2MergedForElectrons_*_*', 
        'keep *_hltIter2Merged_*_*', 
        'keep *_hltIter2PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter3Merged_*_*', 
        'keep *_hltIter4Merged_*_*', 
        'keep *_hltIterL3GlbMuon_*_*', 
        'keep *_hltIterL3MuonAndMuonFromL1Merged_*_*', 
        'keep *_hltIterL3MuonMerged_*_*', 
        'keep *_hltIterL3MuonsNoID_*_*', 
        'keep *_hltIterL3Muons_*_*', 
        'keep *_hltIterL3OIMuonTrackSelectionHighPurity_*_*', 
        'keep *_hltIterativeCone5PileupSubtractionCaloJets_*_*', 
        'keep *_hltL1HLTSingleIsoPFTau35Trk20Met60JetsMatch_*_*', 
        'keep *_hltL1IsoElectronTrackIsol_*_*', 
        'keep *_hltL1NonIsoElectronTrackIsol_*_*', 
        'keep *_hltL1SeededRecoEcalCandidate_*_*', 
        'keep *_hltL1sDoubleTauJet44Eta2p17orDoubleJet64Central_*_*', 
        'keep *_hltL1sDoubleTauJet44erorDoubleJetC64_*_*', 
        'keep *_hltL1sL1EG18er_*_*', 
        'keep *_hltL1sL1ETM36ORETM40_*_*', 
        'keep *_hltL1sL1Jet52ETM30_*_*', 
        'keep *_hltL1sL1SingleEG12_*_*', 
        'keep *_hltL1sL1SingleEG15_*_*', 
        'keep *_hltL1sL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltL1sL1SingleMu10_*_*', 
        'keep *_hltL1sL1SingleMu14Eta2p1_*_*', 
        'keep *_hltL1sMu16Eta2p1_*_*', 
        'keep *_hltL2MuonCandidatesNoVtx_*_*', 
        'keep *_hltL2MuonCandidates_*_*', 
        'keep *_hltL2MuonSeeds_*_*', 
        'keep *_hltL2Muons_*_*', 
        'keep *_hltL2TauJets_*_*', 
        'keep *_hltL3MuonCandidates_*_*', 
        'keep *_hltL3MuonsIOHit_*_*', 
        'keep *_hltL3MuonsLinksCombination_*_*', 
        'keep *_hltL3MuonsOIHit_*_*', 
        'keep *_hltL3MuonsOIState_*_*', 
        'keep *_hltL3Muons_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuons_*_*', 
        'keep *_hltL3SecondaryVertexTagInfos_*_*', 
        'keep *_hltL3TkFromL2OICombination_*_*', 
        'keep *_hltL3TkTracksFromL2IOHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIState_*_*', 
        'keep *_hltL3TkTracksFromL2_*_*', 
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIState_*_*', 
        'keep *_hltL3TrajSeedIOHit_*_*', 
        'keep *_hltL3TrajSeedOIHit_*_*', 
        'keep *_hltL3TrajSeedOIState_*_*', 
        'keep *_hltL3TrajectorySeed_*_*', 
        'keep *_hltL3crIsoL1sMu16Eta2p1L1f0L2f16QL3f18QL3crIsoRhoFiltered0p15_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopEle27_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopIsoMu24_*_*', 
        'keep *_hltMergedTracks_*_*', 
        'keep *_hltMet_*_*', 
        'keep *_hltMu8Ele17CaloIdTCaloIsoVLPixelMatchFilter_*_*', 
        'keep *_hltMuTrackJpsiCtfTrackCands_*_*', 
        'keep *_hltMuTrackJpsiPixelTrackCands_*_*', 
        'keep *_hltMuonCSCDigis_*_*', 
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*', 
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*', 
        'keep *_hltMuonDTDigis_*_*', 
        'keep *_hltMuonRPCDigis_*_*', 
        'keep *_hltOnlineBeamSpot_*_*', 
        'keep *_hltOnlinePrimaryVertices_*_*', 
        'keep *_hltOverlapFilterEle20LooseIsoPFTau20OldVersion_*_*', 
        'keep *_hltOverlapFilterIsoEle20MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15IsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15TightIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu18LooseIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu18PFTau25TrackPt5Prong4_*_*', 
        'keep *_hltPFJetForBtag_*_*', 
        'keep *_hltPFMuonMerging_*_*', 
        'keep *_hltPFTau15TrackLooseIso_*_*', 
        'keep *_hltPFTau15Track_*_*', 
        'keep *_hltPFTau15_*_*', 
        'keep *_hltPFTau20IsoMuVertex_*_*', 
        'keep *_hltPFTau20TrackLooseIso_*_*', 
        'keep *_hltPFTau20Track_*_*', 
        'keep *_hltPFTau20_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolationProng4IsoMuVertex_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolationProng4_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolation_*_*', 
        'keep *_hltPFTau25TrackPt5_*_*', 
        'keep *_hltPFTau25_*_*', 
        'keep *_hltPFTau35TrackPt20LooseIsoProng2_*_*', 
        'keep *_hltPFTau35TrackPt20LooseIso_*_*', 
        'keep *_hltPFTau35TrackPt20_*_*', 
        'keep *_hltPFTau35Track_*_*', 
        'keep *_hltPFTau35_*_*', 
        'keep *_hltPFTauEleVertex20_*_*', 
        'keep *_hltPFTauJetTracksAssociator_*_*', 
        'keep *_hltPFTauMediumIso20TrackMediumIso_*_*', 
        'keep *_hltPFTauMediumIso20Track_*_*', 
        'keep *_hltPFTauMediumIso20_*_*', 
        'keep *_hltPFTauMediumIso35Track_*_*', 
        'keep *_hltPFTauMediumIso35_*_*', 
        'keep *_hltPFTauTagInfo_*_*', 
        'keep *_hltPFTauTightIso20TrackTightIso_*_*', 
        'keep *_hltPFTauTightIso20Track_*_*', 
        'keep *_hltPFTauTightIso20_*_*', 
        'keep *_hltPFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltParticleFlowForTaus_*_*', 
        'keep *_hltParticleFlow_*_*', 
        'keep *_hltPixelMatch3HitElectronsActivity_*_*', 
        'keep *_hltPixelMatch3HitElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchCleanElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchElectronsActivity_*_*', 
        'keep *_hltPixelMatchElectronsL1Iso_*_*', 
        'keep *_hltPixelMatchElectronsL1NonIso_*_*', 
        'keep *_hltPixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltPixelTracksElectrons_*_*', 
        'keep *_hltPixelTracksMerged_*_*', 
        'keep *_hltPixelTracks_*_*', 
        'keep *_hltPixelVertices3DbbPhi_*_*', 
        'keep *_hltPixelVertices_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC4_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC5_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidate_*_*', 
        'keep *_hltRpcRecHits_*_*', 
        'keep *_hltSelector4CentralJetsL1FastJet_*_*', 
        'keep *_hltSelector8CentralJetsL1FastJet_*_*', 
        'keep *_hltSelectorJets20L1FastJet_*_*', 
        'keep *_hltSiPixelCluster_*_*', 
        'keep *_hltSiPixelClustersCache_*_*', 
        'keep *_hltSiPixelClusters_*_*', 
        'keep *_hltSiStripClusters_*_*', 
        'keep *_hltSiStripRawToClustersFacility_*_*', 
        'keep *_hltSingleMu15L3Filtered15_*_*', 
        'keep *_hltSingleMuIsoL1s14L3IsoFiltered15eta2p1_*_*', 
        'keep *_hltSingleMuIsoL3IsoFiltered15_*_*', 
        'keep *_hltTowerMakerForAll_*_*', 
        'keep *_hltTowerMakerForMuons_*_*', 
        'keep *_hltTriggerSummaryAOD_*_*', 
        'keep *_hltTriggerSummaryRAW_*_*', 
        'keep *_hltTrimmedPixelVertices_*_*', 
        'keep *_hltVerticesL3_*_*', 
        'keep *_hltVerticesPFFilter_*_*', 
        'keep *_hltVerticesPFSelector_*_*', 
        'keep DcsStatuss_hltScalersRawToDigi_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_rawDataRepacker_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajSeedOIHit_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajectorySeed_*_*', 
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*', 
        'keep LumiScalerss_hltScalersRawToDigi_*_*', 
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIHit_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIState_*_*', 
        'keep TrackingRecHitsOwned_hltL3Muons_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep recoCaloJets_*_*_*', 
        'keep recoCaloMETs_*_*_*', 
        'keep recoCaloMETs_hltMet_*_*', 
        'keep recoCompositeCandidates_*_*_*', 
        'keep recoElectrons_*_*_*', 
        'keep recoIsolatedPixelTrackCandidates_*_*_*', 
        'keep recoMETs_*_*_*', 
        'keep recoPFJets_*_*_*', 
        'keep recoPFTaus_*_*_*', 
        'keep recoRecoChargedCandidates_*_*_*', 
        'keep recoRecoChargedCandidates_hltHIL3MuonCandidates_*_*', 
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidates_*_*_*', 
        'keep recoRecoEcalCandidates_hltL1IsoRecoEcalCandidate_*_*', 
        'keep recoRecoEcalCandidates_hltL1NonIsoRecoEcalCandidate_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIHit_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3MuonsOIHit_*_*', 
        'keep recoTracks_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3Muons_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIHit_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIState_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2_*_*', 
        'keep triggerTriggerEventWithRefs_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep triggerTriggerFilterObjectWithRefs_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*'
     ) ),
    splitLevel = cms.untracked.int32(0)
)

process.RAWSIMEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(1),
    eventAutoFlushCompressedSize = cms.untracked.int32(20971520),
    outputCommands = cms.untracked.vstring(
        'drop *', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep *_simMuonCSCDigis_*_*', 
        'keep *_simMuonRPCDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonME0Digis_*_*', 
        'keep EBSrFlagsSorted_simEcalDigis_*_*', 
        'keep EESrFlagsSorted_simEcalDigis_*_*', 
        'keep *_simHcalUnsuppressedDigis_*_*', 
        'keep *_mix_EETimeDigi_*', 
        'keep *_mix_EBTimeDigi_*', 
        'keep *_simEcalUnsuppressedDigis_*_*', 
        'keep *_simHGCalUnsuppressedDigis_EE_*', 
        'keep *_simHGCalUnsuppressedDigis_HEfront_*', 
        'keep *_simHGCalUnsuppressedDigis_HEback_*', 
        'keep *_mix_MergedCaloTruth_*', 
        'keep *_mix_FTLBarrel_*', 
        'keep *_mix_FTLEndcap_*', 
        'keep *_mix_InitialVertices_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int6stdbitsetstdpairs_*_AffectedAPVList_*', 
        'keep int_*_bunchSpacing_*', 
        'keep *_genPUProtons_*_*', 
        'keep *_mix_MergedTrackTruth_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generatorSmeared_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenJets_ak*_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep *_logErrorHarvester_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.RAWSIMHLTEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring( (
        'drop *', 
        'drop *', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep *_simMuonCSCDigis_*_*', 
        'keep *_simMuonRPCDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonME0Digis_*_*', 
        'keep EBSrFlagsSorted_simEcalDigis_*_*', 
        'keep EESrFlagsSorted_simEcalDigis_*_*', 
        'keep *_simHcalUnsuppressedDigis_*_*', 
        'keep *_mix_EETimeDigi_*', 
        'keep *_mix_EBTimeDigi_*', 
        'keep *_simEcalUnsuppressedDigis_*_*', 
        'keep *_simHGCalUnsuppressedDigis_EE_*', 
        'keep *_simHGCalUnsuppressedDigis_HEfront_*', 
        'keep *_simHGCalUnsuppressedDigis_HEback_*', 
        'keep *_mix_MergedCaloTruth_*', 
        'keep *_mix_FTLBarrel_*', 
        'keep *_mix_FTLEndcap_*', 
        'keep *_mix_InitialVertices_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int6stdbitsetstdpairs_*_AffectedAPVList_*', 
        'keep int_*_bunchSpacing_*', 
        'keep *_genPUProtons_*_*', 
        'keep *_mix_MergedTrackTruth_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generatorSmeared_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenJets_ak*_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*', 
        'keep *_hltAK4CaloJetsIDPassed_*_*', 
        'keep *_hltAK4CaloJets_*_*', 
        'keep *_hltAK4PFJetsCorrected_*_*', 
        'keep *_hltAK4PFJetsForTaus_*_*', 
        'keep *_hltAK4PFJets_*_*', 
        'keep *_hltAlCaEtaEBRechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaEtaEBRechitsToDigis_*_*', 
        'keep *_hltAlCaEtaEERechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaEtaEERechitsToDigis_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegionalLowPU_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegional_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilter_*_*', 
        'keep *_hltAlCaPhiSymStream_*_*', 
        'keep *_hltAlCaPi0EBRechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaPi0EBRechitsToDigis_*_*', 
        'keep *_hltAlCaPi0EERechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaPi0EERechitsToDigis_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegionalLowPU_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegional_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilter_*_*', 
        'keep *_hltBLifetimeL25AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeRegionalCtfWithMaterialTracksbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonMu5L3_*_*', 
        'keep *_hltCSVJetTagSingleTopEle27_*_*', 
        'keep *_hltCSVJetTagSingleTopIsoMu24_*_*', 
        'keep *_hltCaloJetCorrectedRegional_*_*', 
        'keep *_hltCaloJetCorrected_*_*', 
        'keep *_hltCaloJetL1FastJetCorrected_*_*', 
        'keep *_hltCaloStage2Digis_*_*', 
        'keep *_hltCleanedCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCleanedHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsCalo_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsPF_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFindingIsolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFinding_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5Isolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5_*_*', 
        'keep *_hltConvPFTausTightIso_*_*', 
        'keep *_hltConvPFTausTrackFindingLooseIsolation_*_*', 
        'keep *_hltConvPFTausTrackFinding_*_*', 
        'keep *_hltConvPFTaus_*_*', 
        'keep *_hltCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltCsc2DRecHits_*_*', 
        'keep *_hltCscSegments_*_*', 
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsCalo_*_*', 
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsInfosCalo_*_*', 
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsInfos_*_*', 
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsPF_*_*', 
        'keep *_hltDisplacedhltIter4PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolationProng4L1HLTMatched_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolationProng4_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolation_*_*', 
        'keep *_hltDoublePFTau25TrackPt5_*_*', 
        'keep *_hltDoublePFTau25_*_*', 
        'keep *_hltDoublePFTauTightIso45Track5_*_*', 
        'keep *_hltDoublePFTauTightIso45Track_*_*', 
        'keep *_hltDt4DSegments_*_*', 
        'keep *_hltEcalPhiSymFilter_*_*', 
        'keep *_hltEcalRecHitAll_*_*', 
        'keep *_hltEcalRecHit_*_*', 
        'keep *_hltEgammaCandidates_*_*', 
        'keep *_hltEgammaGsfElectrons_*_*', 
        'keep *_hltEgammaGsfTracks_*_*', 
        'keep *_hltEle20CaloIdVTCaloIsoTTrkIdTTrkIsoTTrackIsoFilterL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltEle20CaloIdVTTrkIdTDphiFilter_*_*', 
        'keep *_hltEle27WP85PixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltElectronsVertex_*_*', 
        'keep *_hltFEDSelectorLumiPixels_*_*', 
        'keep *_hltFastPVPixelTracksMerger_*_*', 
        'keep *_hltFastPVPixelTracksRecover_*_*', 
        'keep *_hltFastPVPixelTracks_*_*', 
        'keep *_hltFastPVPixelVertices3D_*_*', 
        'keep *_hltFastPVPixelVertices_*_*', 
        'keep *_hltFastPixelBLifetimeL3TagInfos_*_*', 
        'keep *_hltFastPrimaryVertex_*_*', 
        'keep *_hltFilterDoubleIsoPFTau45Trk5LeadTrack5IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterL2EtCutDoublePFIsoTau45Trk5_*_*', 
        'keep *_hltFilterL2EtCutSingleIsoPFTau35Trk20MET70_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20LeadTrackPt20_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET60LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET70LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltFullIterativeTrackingMergedForRefPP_*_*', 
        'keep *_hltGmtStage2Digis_*_*', 
        'keep *_hltGoodOnlinePVs_*_*', 
        'keep *_hltGtStage2Digis_*_*', 
        'keep *_hltHICaloJetCorrected_*_*', 
        'keep *_hltHICaloJetIDPassed_*_*', 
        'keep *_hltHIGoodLooseTracks_*_*', 
        'keep *_hltHIPixel3PrimTracks_*_*', 
        'keep *_hltHISelectedVertex_*_*', 
        'keep *_hltHISiPixelClusters_*_*', 
        'keep *_hltHITIPTCorrectorHB_*_*', 
        'keep *_hltHITIPTCorrectorHE_*_*', 
        'keep *_hltHbhereco_*_*', 
        'keep *_hltHfreco_*_*', 
        'keep *_hltHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltHiCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltHiIslandSuperClustersHI_*_*', 
        'keep *_hltHoreco_*_*', 
        'keep *_hltIsolPixelTrackProdHB_*_*', 
        'keep *_hltIsolPixelTrackProdHE_*_*', 
        'keep *_hltIter0ElectronsTrackSelectionHighPurity_*_*', 
        'keep *_hltIter0HighPtTkMuPixelTracks_*_*', 
        'keep *_hltIter0HighPtTkMuTrackSelectionHighPurity_*_*', 
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter1Merged_*_*', 
        'keep *_hltIter1PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter2HighPtTkMuMerged_*_*', 
        'keep *_hltIter2HighPtTkMuTrackSelectionHighPurity_*_*', 
        'keep *_hltIter2IterL3FromL1MuonMerged_*_*', 
        'keep *_hltIter2IterL3MuonMerged_*_*', 
        'keep *_hltIter2MergedForBTag_*_*', 
        'keep *_hltIter2MergedForElectrons_*_*', 
        'keep *_hltIter2Merged_*_*', 
        'keep *_hltIter2PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter3Merged_*_*', 
        'keep *_hltIter4Merged_*_*', 
        'keep *_hltIterL3GlbMuon_*_*', 
        'keep *_hltIterL3MuonAndMuonFromL1Merged_*_*', 
        'keep *_hltIterL3MuonMerged_*_*', 
        'keep *_hltIterL3MuonsNoID_*_*', 
        'keep *_hltIterL3Muons_*_*', 
        'keep *_hltIterL3OIMuonTrackSelectionHighPurity_*_*', 
        'keep *_hltIterativeCone5PileupSubtractionCaloJets_*_*', 
        'keep *_hltL1HLTSingleIsoPFTau35Trk20Met60JetsMatch_*_*', 
        'keep *_hltL1IsoElectronTrackIsol_*_*', 
        'keep *_hltL1NonIsoElectronTrackIsol_*_*', 
        'keep *_hltL1SeededRecoEcalCandidate_*_*', 
        'keep *_hltL1sDoubleTauJet44Eta2p17orDoubleJet64Central_*_*', 
        'keep *_hltL1sDoubleTauJet44erorDoubleJetC64_*_*', 
        'keep *_hltL1sL1EG18er_*_*', 
        'keep *_hltL1sL1ETM36ORETM40_*_*', 
        'keep *_hltL1sL1Jet52ETM30_*_*', 
        'keep *_hltL1sL1SingleEG12_*_*', 
        'keep *_hltL1sL1SingleEG15_*_*', 
        'keep *_hltL1sL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltL1sL1SingleMu10_*_*', 
        'keep *_hltL1sL1SingleMu14Eta2p1_*_*', 
        'keep *_hltL1sMu16Eta2p1_*_*', 
        'keep *_hltL2MuonCandidatesNoVtx_*_*', 
        'keep *_hltL2MuonCandidates_*_*', 
        'keep *_hltL2MuonSeeds_*_*', 
        'keep *_hltL2Muons_*_*', 
        'keep *_hltL2TauJets_*_*', 
        'keep *_hltL3MuonCandidates_*_*', 
        'keep *_hltL3MuonsIOHit_*_*', 
        'keep *_hltL3MuonsLinksCombination_*_*', 
        'keep *_hltL3MuonsOIHit_*_*', 
        'keep *_hltL3MuonsOIState_*_*', 
        'keep *_hltL3Muons_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuons_*_*', 
        'keep *_hltL3SecondaryVertexTagInfos_*_*', 
        'keep *_hltL3TkFromL2OICombination_*_*', 
        'keep *_hltL3TkTracksFromL2IOHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIState_*_*', 
        'keep *_hltL3TkTracksFromL2_*_*', 
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIState_*_*', 
        'keep *_hltL3TrajSeedIOHit_*_*', 
        'keep *_hltL3TrajSeedOIHit_*_*', 
        'keep *_hltL3TrajSeedOIState_*_*', 
        'keep *_hltL3TrajectorySeed_*_*', 
        'keep *_hltL3crIsoL1sMu16Eta2p1L1f0L2f16QL3f18QL3crIsoRhoFiltered0p15_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopEle27_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopIsoMu24_*_*', 
        'keep *_hltMergedTracks_*_*', 
        'keep *_hltMet_*_*', 
        'keep *_hltMu8Ele17CaloIdTCaloIsoVLPixelMatchFilter_*_*', 
        'keep *_hltMuTrackJpsiCtfTrackCands_*_*', 
        'keep *_hltMuTrackJpsiPixelTrackCands_*_*', 
        'keep *_hltMuonCSCDigis_*_*', 
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*', 
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*', 
        'keep *_hltMuonDTDigis_*_*', 
        'keep *_hltMuonRPCDigis_*_*', 
        'keep *_hltOnlineBeamSpot_*_*', 
        'keep *_hltOnlinePrimaryVertices_*_*', 
        'keep *_hltOverlapFilterEle20LooseIsoPFTau20OldVersion_*_*', 
        'keep *_hltOverlapFilterIsoEle20MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15IsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15TightIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu18LooseIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu18PFTau25TrackPt5Prong4_*_*', 
        'keep *_hltPFJetForBtag_*_*', 
        'keep *_hltPFMuonMerging_*_*', 
        'keep *_hltPFTau15TrackLooseIso_*_*', 
        'keep *_hltPFTau15Track_*_*', 
        'keep *_hltPFTau15_*_*', 
        'keep *_hltPFTau20IsoMuVertex_*_*', 
        'keep *_hltPFTau20TrackLooseIso_*_*', 
        'keep *_hltPFTau20Track_*_*', 
        'keep *_hltPFTau20_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolationProng4IsoMuVertex_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolationProng4_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolation_*_*', 
        'keep *_hltPFTau25TrackPt5_*_*', 
        'keep *_hltPFTau25_*_*', 
        'keep *_hltPFTau35TrackPt20LooseIsoProng2_*_*', 
        'keep *_hltPFTau35TrackPt20LooseIso_*_*', 
        'keep *_hltPFTau35TrackPt20_*_*', 
        'keep *_hltPFTau35Track_*_*', 
        'keep *_hltPFTau35_*_*', 
        'keep *_hltPFTauEleVertex20_*_*', 
        'keep *_hltPFTauJetTracksAssociator_*_*', 
        'keep *_hltPFTauMediumIso20TrackMediumIso_*_*', 
        'keep *_hltPFTauMediumIso20Track_*_*', 
        'keep *_hltPFTauMediumIso20_*_*', 
        'keep *_hltPFTauMediumIso35Track_*_*', 
        'keep *_hltPFTauMediumIso35_*_*', 
        'keep *_hltPFTauTagInfo_*_*', 
        'keep *_hltPFTauTightIso20TrackTightIso_*_*', 
        'keep *_hltPFTauTightIso20Track_*_*', 
        'keep *_hltPFTauTightIso20_*_*', 
        'keep *_hltPFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltParticleFlowForTaus_*_*', 
        'keep *_hltParticleFlow_*_*', 
        'keep *_hltPixelMatch3HitElectronsActivity_*_*', 
        'keep *_hltPixelMatch3HitElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchCleanElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchElectronsActivity_*_*', 
        'keep *_hltPixelMatchElectronsL1Iso_*_*', 
        'keep *_hltPixelMatchElectronsL1NonIso_*_*', 
        'keep *_hltPixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltPixelTracksElectrons_*_*', 
        'keep *_hltPixelTracksMerged_*_*', 
        'keep *_hltPixelTracks_*_*', 
        'keep *_hltPixelVertices3DbbPhi_*_*', 
        'keep *_hltPixelVertices_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC4_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC5_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidate_*_*', 
        'keep *_hltRpcRecHits_*_*', 
        'keep *_hltSelector4CentralJetsL1FastJet_*_*', 
        'keep *_hltSelector8CentralJetsL1FastJet_*_*', 
        'keep *_hltSelectorJets20L1FastJet_*_*', 
        'keep *_hltSiPixelCluster_*_*', 
        'keep *_hltSiPixelClustersCache_*_*', 
        'keep *_hltSiPixelClusters_*_*', 
        'keep *_hltSiStripClusters_*_*', 
        'keep *_hltSiStripRawToClustersFacility_*_*', 
        'keep *_hltSingleMu15L3Filtered15_*_*', 
        'keep *_hltSingleMuIsoL1s14L3IsoFiltered15eta2p1_*_*', 
        'keep *_hltSingleMuIsoL3IsoFiltered15_*_*', 
        'keep *_hltTowerMakerForAll_*_*', 
        'keep *_hltTowerMakerForMuons_*_*', 
        'keep *_hltTriggerSummaryAOD_*_*', 
        'keep *_hltTriggerSummaryRAW_*_*', 
        'keep *_hltTrimmedPixelVertices_*_*', 
        'keep *_hltVerticesL3_*_*', 
        'keep *_hltVerticesPFFilter_*_*', 
        'keep *_hltVerticesPFSelector_*_*', 
        'keep DcsStatuss_hltScalersRawToDigi_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_rawDataRepacker_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajSeedOIHit_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajectorySeed_*_*', 
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*', 
        'keep LumiScalerss_hltScalersRawToDigi_*_*', 
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIHit_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIState_*_*', 
        'keep TrackingRecHitsOwned_hltL3Muons_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep recoCaloJets_*_*_*', 
        'keep recoCaloMETs_*_*_*', 
        'keep recoCaloMETs_hltMet_*_*', 
        'keep recoCompositeCandidates_*_*_*', 
        'keep recoElectrons_*_*_*', 
        'keep recoIsolatedPixelTrackCandidates_*_*_*', 
        'keep recoMETs_*_*_*', 
        'keep recoPFJets_*_*_*', 
        'keep recoPFTaus_*_*_*', 
        'keep recoRecoChargedCandidates_*_*_*', 
        'keep recoRecoChargedCandidates_hltHIL3MuonCandidates_*_*', 
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidates_*_*_*', 
        'keep recoRecoEcalCandidates_hltL1IsoRecoEcalCandidate_*_*', 
        'keep recoRecoEcalCandidates_hltL1NonIsoRecoEcalCandidate_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIHit_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3MuonsOIHit_*_*', 
        'keep recoTracks_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3Muons_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIHit_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIState_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2_*_*', 
        'keep triggerTriggerEventWithRefs_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep triggerTriggerFilterObjectWithRefs_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*'
     ) ),
    splitLevel = cms.untracked.int32(0)
)

process.RECODEBUGEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring( (
        'drop *', 
        'drop *', 
        'drop *', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep PixelFEDChanneledmNewDetSetVector_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep ClusterSummary_clusterSummaryProducer_*_*', 
        'keep *_siPhase2Clusters_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_gemRecHits_*_*', 
        'keep *_gemSegments_*_*', 
        'keep *_me0RecHits_*_*', 
        'keep *_me0Segments_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_hcalDigis_*_*', 
        'keep ZDCDataFramesSorted_castorDigis_*_*', 
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*', 
        'keep ZDCRecHitsSorted_zdcreco_*_*', 
        'keep *_castorreco_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep HcalUnpackerReport_castorDigis_*_*', 
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*', 
        'keep HcalUnpackerReport_hcalDigis_*_*', 
        'keep *_HGCalRecHit_*_*', 
        'keep recoCaloClusters_hgcalLayerClusters_*_*', 
        'keep *_hgcalLayerClusters_timeLayerCluster_*', 
        'keep *_hgcalLayerClusters_InitialLayerClustersMask_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep EBSrFlagsSorted_ecalDigis__*', 
        'keep EESrFlagsSorted_ecalDigis__*', 
        'keep *_mix_EBTimeDigi_*', 
        'keep *_mix_EETimeDigi_*', 
        'keep *_ecalDetailedTimeRecHit_*_*', 
        'keep *_hgcalMultiClusters_*_*', 
        'keep *_iterHGCalMultiClusters_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'keep *_particleFlowSuperClusterOOTECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterHGCal__*', 
        'keep recoCaloClusters_particleFlowSuperClusterHGCal__*', 
        'keep recoSuperClusters_particleFlowSuperClusterHGCalFromMultiCl__*', 
        'keep recoCaloClusters_particleFlowSuperClusterHGCalFromMultiCl__*', 
        'keep *_particleFlowSuperClusterHGCal_*_*', 
        'keep *_particleFlowSuperClusterHGCalFromMultiCl_*_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_GsfGlobalElectronTest_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTracks_electronGsfTracksFromMultiCl_*_*', 
        'keep recoGsfTracks_electronGsfTracksFromMultiCl_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracksFromMultiCl_*_*', 
        'keep recoTrackExtras_electronGsfTracksFromMultiCl_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracksFromMultiCl_*_*', 
        'keep *_electronMergedSeedsFromMultiCl_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep recoTracks_cosmicDCTracks_*_*', 
        'keep recoTrackExtras_cosmicDCTracks_*_*', 
        'keep TrackingRecHitsOwned_cosmicDCTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTracks_ctfPixelLess_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_dedxPixelHarmonic2_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep *_generalTracks_MVAValues_*', 
        'keep *_generalTracks_MVAVals_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep recoCaloJets_ak4CaloJets_*_*', 
        'keep *_ak4CaloJets_rho_*', 
        'keep *_ak4CaloJets_sigma_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep floatedmValueMap_puppi_*_*', 
        'keep *_ak4PFJetsPuppi_*_*', 
        'keep *_ak8PFJetsPuppi_*_*', 
        'keep *_ak8PFJetsPuppiSoftDrop_*_*', 
        'keep recoPFJets_ak4PFJets_*_*', 
        'keep *_ak4PFJets_rho_*', 
        'keep *_ak4PFJets_sigma_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep recoBasicJets_ak5CastorJets_*_*', 
        'keep *_ak5CastorJets_rho_*', 
        'keep *_ak5CastorJets_sigma_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep recoBasicJets_ak7CastorJets_*_*', 
        'keep *_ak7CastorJets_rho_*', 
        'keep *_ak7CastorJets_sigma_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRhoAll_*_*', 
        'keep *_fixedGridRhoFastjetAll_*_*', 
        'keep *_fixedGridRhoFastjetAllTmp_*_*', 
        'keep *_fixedGridRhoFastjetCentral_*_*', 
        'keep *_fixedGridRhoFastjetAllCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*', 
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*', 
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep recoEcalHaloData_EcalHaloData_*_*', 
        'keep recoHcalHaloData_HcalHaloData_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep floatedmValueMap_puppiNoLep_*_*', 
        'keep recoPFMETs_pfMetPuppi_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep recoGlobalHaloData_GlobalHaloData_*_*', 
        'keep recoCSCHaloData_CSCHaloData_*_*', 
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muons_*_*', 
        'keep doubleedmValueMap_muons_muPFMean*_*', 
        'keep doubleedmValueMap_muons_muPFSum*_*', 
        'keep *_muons_muonShowerInformation_*', 
        'keep recoMuonTimeExtraedmValueMap_muons_*_*', 
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*', 
        'keep uintedmValueMap_muons_*_*', 
        'keep *_particleFlow_muons_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfGhostTrackVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfGhostTrackBJetTags_*_*', 
        'keep *_pfCombinedMVAV2BJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*', 
        'keep *_pfCombinedCvsLJetTags_*_*', 
        'keep *_pfCombinedCvsBJetTags_*_*', 
        'keep *_pfChargeBJetTags_*_*', 
        'keep *_pfDeepCSVJetTags_*_*', 
        'keep *_pfDeepCMVAJetTags_*_*', 
        'keep *_pixelClusterTagInfos_*_*', 
        'keep *_hpsPFTauDiscriminationByLooseElectronRejection_*_*', 
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*', 
        'keep recoPFTaus_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauBasicDiscriminators_*_*', 
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*', 
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*', 
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep *_hpsPFTauDiscriminationByMVA6ElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBdR03oldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWdR03oldDMwLT_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep *_offlinePrimaryVerticesWithBS_*_*', 
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep *_offlinePrimaryVertices4D__*', 
        'keep *_offlinePrimaryVertices4DWithBS__*', 
        'keep *_trackTimeValueMapProducer_*_*', 
        'keep *_offlinePrimaryVertices4DnoPID__*', 
        'keep *_offlinePrimaryVertices4DnoPIDWithBS__*', 
        'keep *_tofPID_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectrons_gedGsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep recoPhotonCores_gedPhotonCore_*_*', 
        'keep recoPhotons_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_ootPhotonCore_*_*', 
        'keep recoPhotons_ootPhotons_*_*', 
        'keep recoConversions_conversions_*_*', 
        'drop recoConversions_conversions_uncleanedConversions_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'keep *_gsfTracksOpenConversions_*_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFromConversions_*_*', 
        'keep recoTracks_ckfInOutTracksFromConversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*', 
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*', 
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*', 
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*', 
        'keep *_lowPtGsfToTrackLinks_*_*', 
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*', 
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*', 
        'keep floatedmValueMap_lowPtGsfElectronID_*_*', 
        'keep *_ecalDrivenGsfElectronCores_*_*', 
        'keep *_ecalDrivenGsfElectrons_*_*', 
        'keep *_ecalDrivenGsfElectronCoresFromMultiCl_*_*', 
        'keep *_ecalDrivenGsfElectronsFromMultiCl_*_*', 
        'keep *_photonCoreFromMultiCl_*_*', 
        'keep *_photonsFromMultiCl_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterHF_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_particleFlow_muons_*', 
        'keep recoCaloClusters_pfElectronTranslator_*_*', 
        'keep recoPreshowerClusters_pfElectronTranslator_*_*', 
        'keep recoSuperClusters_pfElectronTranslator_*_*', 
        'keep recoCaloClusters_pfPhotonTranslator_*_*', 
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*', 
        'keep recoSuperClusters_pfPhotonTranslator_*_*', 
        'keep recoPhotons_pfPhotonTranslator_*_*', 
        'keep recoPhotonCores_pfPhotonTranslator_*_*', 
        'keep recoConversions_pfPhotonTranslator_*_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_chargedHadronPFTrackIsolation_*_*', 
        'keep recoPFRecHits_particleFlowRecHitHGC_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterHGCal__*', 
        'keep recoPFClusters_particleFlowClusterHGCalFromMultiCl__*', 
        'keep recoSuperClusters_simPFProducer_*_*', 
        'keep *_ecalBarrelClusterFastTimer_*_*', 
        'keep *_particleFlowSuperClusterHGCalFromMultiCl_*_*', 
        'keep recoPFBlocks_simPFProducer_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'keep *_gtStage2Digis_*_*', 
        'keep *_gmtStage2Digis_*_*', 
        'keep *_caloStage2Digis_*_*', 
        'drop *_hlt*_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*', 
        'keep L1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep LumiScalerss_scalersRawToDigi_*_*', 
        'keep BeamSpotOnlines_scalersRawToDigi_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep DcsStatuss_hltScalersRawToDigi_*_*', 
        'keep CTPPSRecord_onlineMetaDataDigis_*_*', 
        'keep DCSRecord_onlineMetaDataDigis_*_*', 
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*', 
        'keep recoBeamSpot_onlineMetaDataDigis_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscriminationByDecayModeFinding_*_*', 
        'keep recoSingleTauDiscriminatorContaineredmValueMap_pfTausDiscriminationByIsolation_*_*', 
        'keep recoPFMETs_pfMetEI_*_*', 
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*', 
        'keep TotemFEDInfos_totemRPRawToDigi_*_*', 
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*', 
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*', 
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*', 
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*', 
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*', 
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*', 
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*', 
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*', 
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*', 
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*', 
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*', 
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*', 
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*', 
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*', 
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*', 
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*', 
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*', 
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*', 
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*', 
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*', 
        'keep recoForwardProtons_ctppsProtons_*_*', 
        'keep *_ticlTrackstersTrkEM_*_*', 
        'keep *_ticlTrackstersEM_*_*', 
        'keep *_ticlTrackstersHAD_*_*', 
        'keep *_ticlTrackstersTrk_*_*', 
        'keep *_ticlTrackstersMIP_*_*', 
        'keep *_ticlTrackstersMerge_*_*', 
        'keep *_ticlTrackstersHFNoseEM_*_*', 
        'keep *_ticlTrackstersHFNoseMIP_*_*', 
        'keep *_ticlTrackstersHFNoseMerge_*_*', 
        'keep *_pfTICL_*_*', 
        'keep *_ticlMultiClustersFromTrackstersEM_*_*', 
        'keep *_ticlMultiClustersFromTrackstersHAD_*_*', 
        'keep *_ticlMultiClustersFromTrackstersTrk_*_*', 
        'keep *_ticlMultiClustersFromTrackstersTrkEM_*_*', 
        'keep *_ticlMultiClustersFromTrackstersMIP_*_*', 
        'keep *_ticlMultiClustersFromTrackstersMerge_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generatorSmeared_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep SimTracks_g4SimHits_*_*', 
        'keep SimVertexs_g4SimHits_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep *_muonSimClassifier_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonME0Digis_*_*', 
        'keep *_simHGCalUnsuppressedDigis_EE_*', 
        'keep *_simHGCalUnsuppressedDigis_HEfront_*', 
        'keep *_simHGCalUnsuppressedDigis_HEback_*', 
        'keep *_mix_MergedCaloTruth_*', 
        'keep *_mix_FTLBarrel_*', 
        'keep *_mix_FTLEndcap_*', 
        'keep *_mix_InitialVertices_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep *_genPUProtons_*_*', 
        'drop *_trackingtruthprod_*_*', 
        'drop *_electrontruth_*_*', 
        'keep *_mix_MergedTrackTruth_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PixelDigiSimLinkedmDetSetVector_simSiPixelDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simSiStripDigis_*_*', 
        'drop *_mix_simSiPixelDigis*_*', 
        'drop *_mix_simSiStripDigis*_*', 
        'keep *_allTrackMCMatch_*_*'
     ) ),
    splitLevel = cms.untracked.int32(0)
)

process.RECOEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring( (
        'drop *', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep PixelFEDChanneledmNewDetSetVector_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep ClusterSummary_clusterSummaryProducer_*_*', 
        'keep *_siPhase2Clusters_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_gemRecHits_*_*', 
        'keep *_gemSegments_*_*', 
        'keep *_me0RecHits_*_*', 
        'keep *_me0Segments_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_hcalDigis_*_*', 
        'keep ZDCDataFramesSorted_castorDigis_*_*', 
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*', 
        'keep ZDCRecHitsSorted_zdcreco_*_*', 
        'keep *_castorreco_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep HcalUnpackerReport_castorDigis_*_*', 
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*', 
        'keep HcalUnpackerReport_hcalDigis_*_*', 
        'keep *_HGCalRecHit_*_*', 
        'keep recoCaloClusters_hgcalLayerClusters_*_*', 
        'keep *_hgcalLayerClusters_timeLayerCluster_*', 
        'keep *_hgcalLayerClusters_InitialLayerClustersMask_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep EBSrFlagsSorted_ecalDigis__*', 
        'keep EESrFlagsSorted_ecalDigis__*', 
        'keep *_mix_EBTimeDigi_*', 
        'keep *_mix_EETimeDigi_*', 
        'keep *_ecalDetailedTimeRecHit_*_*', 
        'keep *_hgcalMultiClusters_*_*', 
        'keep *_iterHGCalMultiClusters_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'keep *_particleFlowSuperClusterOOTECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterHGCal__*', 
        'keep recoCaloClusters_particleFlowSuperClusterHGCal__*', 
        'keep recoSuperClusters_particleFlowSuperClusterHGCalFromMultiCl__*', 
        'keep recoCaloClusters_particleFlowSuperClusterHGCalFromMultiCl__*', 
        'keep *_particleFlowSuperClusterHGCal_*_*', 
        'keep *_particleFlowSuperClusterHGCalFromMultiCl_*_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_GsfGlobalElectronTest_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTracks_electronGsfTracksFromMultiCl_*_*', 
        'keep recoGsfTracks_electronGsfTracksFromMultiCl_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracksFromMultiCl_*_*', 
        'keep recoTrackExtras_electronGsfTracksFromMultiCl_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracksFromMultiCl_*_*', 
        'keep *_electronMergedSeedsFromMultiCl_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep recoTracks_cosmicDCTracks_*_*', 
        'keep recoTrackExtras_cosmicDCTracks_*_*', 
        'keep TrackingRecHitsOwned_cosmicDCTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTracks_ctfPixelLess_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_dedxPixelHarmonic2_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep *_generalTracks_MVAValues_*', 
        'keep *_generalTracks_MVAVals_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep recoCaloJets_ak4CaloJets_*_*', 
        'keep *_ak4CaloJets_rho_*', 
        'keep *_ak4CaloJets_sigma_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep floatedmValueMap_puppi_*_*', 
        'keep *_ak4PFJetsPuppi_*_*', 
        'keep *_ak8PFJetsPuppi_*_*', 
        'keep *_ak8PFJetsPuppiSoftDrop_*_*', 
        'keep recoPFJets_ak4PFJets_*_*', 
        'keep *_ak4PFJets_rho_*', 
        'keep *_ak4PFJets_sigma_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep recoBasicJets_ak5CastorJets_*_*', 
        'keep *_ak5CastorJets_rho_*', 
        'keep *_ak5CastorJets_sigma_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep recoBasicJets_ak7CastorJets_*_*', 
        'keep *_ak7CastorJets_rho_*', 
        'keep *_ak7CastorJets_sigma_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRhoAll_*_*', 
        'keep *_fixedGridRhoFastjetAll_*_*', 
        'keep *_fixedGridRhoFastjetAllTmp_*_*', 
        'keep *_fixedGridRhoFastjetCentral_*_*', 
        'keep *_fixedGridRhoFastjetAllCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*', 
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*', 
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep recoEcalHaloData_EcalHaloData_*_*', 
        'keep recoHcalHaloData_HcalHaloData_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep floatedmValueMap_puppiNoLep_*_*', 
        'keep recoPFMETs_pfMetPuppi_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep recoGlobalHaloData_GlobalHaloData_*_*', 
        'keep recoCSCHaloData_CSCHaloData_*_*', 
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muons_*_*', 
        'keep doubleedmValueMap_muons_muPFMean*_*', 
        'keep doubleedmValueMap_muons_muPFSum*_*', 
        'keep *_muons_muonShowerInformation_*', 
        'keep recoMuonTimeExtraedmValueMap_muons_*_*', 
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*', 
        'keep uintedmValueMap_muons_*_*', 
        'keep *_particleFlow_muons_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfGhostTrackVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfGhostTrackBJetTags_*_*', 
        'keep *_pfCombinedMVAV2BJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*', 
        'keep *_pfCombinedCvsLJetTags_*_*', 
        'keep *_pfCombinedCvsBJetTags_*_*', 
        'keep *_pfChargeBJetTags_*_*', 
        'keep *_pfDeepCSVJetTags_*_*', 
        'keep *_pfDeepCMVAJetTags_*_*', 
        'keep *_pixelClusterTagInfos_*_*', 
        'keep *_hpsPFTauDiscriminationByLooseElectronRejection_*_*', 
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*', 
        'keep recoPFTaus_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauBasicDiscriminators_*_*', 
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*', 
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*', 
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep *_hpsPFTauDiscriminationByMVA6ElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBdR03oldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWdR03oldDMwLT_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep *_offlinePrimaryVerticesWithBS_*_*', 
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep *_offlinePrimaryVertices4D__*', 
        'keep *_offlinePrimaryVertices4DWithBS__*', 
        'keep *_trackTimeValueMapProducer_*_*', 
        'keep *_offlinePrimaryVertices4DnoPID__*', 
        'keep *_offlinePrimaryVertices4DnoPIDWithBS__*', 
        'keep *_tofPID_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectrons_gedGsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep recoPhotonCores_gedPhotonCore_*_*', 
        'keep recoPhotons_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_ootPhotonCore_*_*', 
        'keep recoPhotons_ootPhotons_*_*', 
        'keep recoConversions_conversions_*_*', 
        'drop recoConversions_conversions_uncleanedConversions_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'keep *_gsfTracksOpenConversions_*_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFromConversions_*_*', 
        'keep recoTracks_ckfInOutTracksFromConversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*', 
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*', 
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*', 
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*', 
        'keep *_lowPtGsfToTrackLinks_*_*', 
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*', 
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*', 
        'keep floatedmValueMap_lowPtGsfElectronID_*_*', 
        'keep *_ecalDrivenGsfElectronCores_*_*', 
        'keep *_ecalDrivenGsfElectrons_*_*', 
        'keep *_ecalDrivenGsfElectronCoresFromMultiCl_*_*', 
        'keep *_ecalDrivenGsfElectronsFromMultiCl_*_*', 
        'keep *_photonCoreFromMultiCl_*_*', 
        'keep *_photonsFromMultiCl_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterHF_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_particleFlow_muons_*', 
        'keep recoCaloClusters_pfElectronTranslator_*_*', 
        'keep recoPreshowerClusters_pfElectronTranslator_*_*', 
        'keep recoSuperClusters_pfElectronTranslator_*_*', 
        'keep recoCaloClusters_pfPhotonTranslator_*_*', 
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*', 
        'keep recoSuperClusters_pfPhotonTranslator_*_*', 
        'keep recoPhotons_pfPhotonTranslator_*_*', 
        'keep recoPhotonCores_pfPhotonTranslator_*_*', 
        'keep recoConversions_pfPhotonTranslator_*_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_chargedHadronPFTrackIsolation_*_*', 
        'keep recoPFRecHits_particleFlowRecHitHGC_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterHGCal__*', 
        'keep recoPFClusters_particleFlowClusterHGCalFromMultiCl__*', 
        'keep recoSuperClusters_simPFProducer_*_*', 
        'keep *_ecalBarrelClusterFastTimer_*_*', 
        'keep *_particleFlowSuperClusterHGCalFromMultiCl_*_*', 
        'keep recoPFBlocks_simPFProducer_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'keep *_gtStage2Digis_*_*', 
        'keep *_gmtStage2Digis_*_*', 
        'keep *_caloStage2Digis_*_*', 
        'drop *_hlt*_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*', 
        'keep L1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep LumiScalerss_scalersRawToDigi_*_*', 
        'keep BeamSpotOnlines_scalersRawToDigi_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep DcsStatuss_hltScalersRawToDigi_*_*', 
        'keep CTPPSRecord_onlineMetaDataDigis_*_*', 
        'keep DCSRecord_onlineMetaDataDigis_*_*', 
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*', 
        'keep recoBeamSpot_onlineMetaDataDigis_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscriminationByDecayModeFinding_*_*', 
        'keep recoSingleTauDiscriminatorContaineredmValueMap_pfTausDiscriminationByIsolation_*_*', 
        'keep recoPFMETs_pfMetEI_*_*', 
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*', 
        'keep TotemFEDInfos_totemRPRawToDigi_*_*', 
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*', 
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*', 
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*', 
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*', 
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*', 
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*', 
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*', 
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*', 
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*', 
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*', 
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*', 
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*', 
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*', 
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*', 
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*', 
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*', 
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*', 
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*', 
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*', 
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*', 
        'keep recoForwardProtons_ctppsProtons_*_*', 
        'keep *_ticlTrackstersTrkEM_*_*', 
        'keep *_ticlTrackstersEM_*_*', 
        'keep *_ticlTrackstersHAD_*_*', 
        'keep *_ticlTrackstersTrk_*_*', 
        'keep *_ticlTrackstersMIP_*_*', 
        'keep *_ticlTrackstersMerge_*_*', 
        'keep *_ticlTrackstersHFNoseEM_*_*', 
        'keep *_ticlTrackstersHFNoseMIP_*_*', 
        'keep *_ticlTrackstersHFNoseMerge_*_*', 
        'keep *_pfTICL_*_*', 
        'keep *_ticlMultiClustersFromTrackstersEM_*_*', 
        'keep *_ticlMultiClustersFromTrackstersHAD_*_*', 
        'keep *_ticlMultiClustersFromTrackstersTrk_*_*', 
        'keep *_ticlMultiClustersFromTrackstersTrkEM_*_*', 
        'keep *_ticlMultiClustersFromTrackstersMIP_*_*', 
        'keep *_ticlMultiClustersFromTrackstersMerge_*_*'
     ) ),
    splitLevel = cms.untracked.int32(0)
)

process.RECOSIMEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring( (
        'drop *', 
        'drop *', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep PixelFEDChanneledmNewDetSetVector_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep ClusterSummary_clusterSummaryProducer_*_*', 
        'keep *_siPhase2Clusters_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_gemRecHits_*_*', 
        'keep *_gemSegments_*_*', 
        'keep *_me0RecHits_*_*', 
        'keep *_me0Segments_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_hcalDigis_*_*', 
        'keep ZDCDataFramesSorted_castorDigis_*_*', 
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*', 
        'keep ZDCRecHitsSorted_zdcreco_*_*', 
        'keep *_castorreco_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep HcalUnpackerReport_castorDigis_*_*', 
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*', 
        'keep HcalUnpackerReport_hcalDigis_*_*', 
        'keep *_HGCalRecHit_*_*', 
        'keep recoCaloClusters_hgcalLayerClusters_*_*', 
        'keep *_hgcalLayerClusters_timeLayerCluster_*', 
        'keep *_hgcalLayerClusters_InitialLayerClustersMask_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep EBSrFlagsSorted_ecalDigis__*', 
        'keep EESrFlagsSorted_ecalDigis__*', 
        'keep *_mix_EBTimeDigi_*', 
        'keep *_mix_EETimeDigi_*', 
        'keep *_ecalDetailedTimeRecHit_*_*', 
        'keep *_hgcalMultiClusters_*_*', 
        'keep *_iterHGCalMultiClusters_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'keep *_particleFlowSuperClusterOOTECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterHGCal__*', 
        'keep recoCaloClusters_particleFlowSuperClusterHGCal__*', 
        'keep recoSuperClusters_particleFlowSuperClusterHGCalFromMultiCl__*', 
        'keep recoCaloClusters_particleFlowSuperClusterHGCalFromMultiCl__*', 
        'keep *_particleFlowSuperClusterHGCal_*_*', 
        'keep *_particleFlowSuperClusterHGCalFromMultiCl_*_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_GsfGlobalElectronTest_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTracks_electronGsfTracksFromMultiCl_*_*', 
        'keep recoGsfTracks_electronGsfTracksFromMultiCl_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracksFromMultiCl_*_*', 
        'keep recoTrackExtras_electronGsfTracksFromMultiCl_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracksFromMultiCl_*_*', 
        'keep *_electronMergedSeedsFromMultiCl_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep recoTracks_cosmicDCTracks_*_*', 
        'keep recoTrackExtras_cosmicDCTracks_*_*', 
        'keep TrackingRecHitsOwned_cosmicDCTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTracks_ctfPixelLess_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_dedxPixelHarmonic2_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep *_generalTracks_MVAValues_*', 
        'keep *_generalTracks_MVAVals_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep recoCaloJets_ak4CaloJets_*_*', 
        'keep *_ak4CaloJets_rho_*', 
        'keep *_ak4CaloJets_sigma_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep floatedmValueMap_puppi_*_*', 
        'keep *_ak4PFJetsPuppi_*_*', 
        'keep *_ak8PFJetsPuppi_*_*', 
        'keep *_ak8PFJetsPuppiSoftDrop_*_*', 
        'keep recoPFJets_ak4PFJets_*_*', 
        'keep *_ak4PFJets_rho_*', 
        'keep *_ak4PFJets_sigma_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep recoBasicJets_ak5CastorJets_*_*', 
        'keep *_ak5CastorJets_rho_*', 
        'keep *_ak5CastorJets_sigma_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep recoBasicJets_ak7CastorJets_*_*', 
        'keep *_ak7CastorJets_rho_*', 
        'keep *_ak7CastorJets_sigma_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRhoAll_*_*', 
        'keep *_fixedGridRhoFastjetAll_*_*', 
        'keep *_fixedGridRhoFastjetAllTmp_*_*', 
        'keep *_fixedGridRhoFastjetCentral_*_*', 
        'keep *_fixedGridRhoFastjetAllCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*', 
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*', 
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep recoEcalHaloData_EcalHaloData_*_*', 
        'keep recoHcalHaloData_HcalHaloData_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep floatedmValueMap_puppiNoLep_*_*', 
        'keep recoPFMETs_pfMetPuppi_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep recoGlobalHaloData_GlobalHaloData_*_*', 
        'keep recoCSCHaloData_CSCHaloData_*_*', 
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muons_*_*', 
        'keep doubleedmValueMap_muons_muPFMean*_*', 
        'keep doubleedmValueMap_muons_muPFSum*_*', 
        'keep *_muons_muonShowerInformation_*', 
        'keep recoMuonTimeExtraedmValueMap_muons_*_*', 
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*', 
        'keep uintedmValueMap_muons_*_*', 
        'keep *_particleFlow_muons_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfGhostTrackVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfGhostTrackBJetTags_*_*', 
        'keep *_pfCombinedMVAV2BJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*', 
        'keep *_pfCombinedCvsLJetTags_*_*', 
        'keep *_pfCombinedCvsBJetTags_*_*', 
        'keep *_pfChargeBJetTags_*_*', 
        'keep *_pfDeepCSVJetTags_*_*', 
        'keep *_pfDeepCMVAJetTags_*_*', 
        'keep *_pixelClusterTagInfos_*_*', 
        'keep *_hpsPFTauDiscriminationByLooseElectronRejection_*_*', 
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*', 
        'keep recoPFTaus_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauBasicDiscriminators_*_*', 
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*', 
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*', 
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep *_hpsPFTauDiscriminationByMVA6ElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBdR03oldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWdR03oldDMwLT_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep *_offlinePrimaryVerticesWithBS_*_*', 
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep *_offlinePrimaryVertices4D__*', 
        'keep *_offlinePrimaryVertices4DWithBS__*', 
        'keep *_trackTimeValueMapProducer_*_*', 
        'keep *_offlinePrimaryVertices4DnoPID__*', 
        'keep *_offlinePrimaryVertices4DnoPIDWithBS__*', 
        'keep *_tofPID_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectrons_gedGsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep recoPhotonCores_gedPhotonCore_*_*', 
        'keep recoPhotons_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_ootPhotonCore_*_*', 
        'keep recoPhotons_ootPhotons_*_*', 
        'keep recoConversions_conversions_*_*', 
        'drop recoConversions_conversions_uncleanedConversions_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'keep *_gsfTracksOpenConversions_*_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFromConversions_*_*', 
        'keep recoTracks_ckfInOutTracksFromConversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*', 
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*', 
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*', 
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*', 
        'keep *_lowPtGsfToTrackLinks_*_*', 
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*', 
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*', 
        'keep floatedmValueMap_lowPtGsfElectronID_*_*', 
        'keep *_ecalDrivenGsfElectronCores_*_*', 
        'keep *_ecalDrivenGsfElectrons_*_*', 
        'keep *_ecalDrivenGsfElectronCoresFromMultiCl_*_*', 
        'keep *_ecalDrivenGsfElectronsFromMultiCl_*_*', 
        'keep *_photonCoreFromMultiCl_*_*', 
        'keep *_photonsFromMultiCl_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterHF_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_particleFlow_muons_*', 
        'keep recoCaloClusters_pfElectronTranslator_*_*', 
        'keep recoPreshowerClusters_pfElectronTranslator_*_*', 
        'keep recoSuperClusters_pfElectronTranslator_*_*', 
        'keep recoCaloClusters_pfPhotonTranslator_*_*', 
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*', 
        'keep recoSuperClusters_pfPhotonTranslator_*_*', 
        'keep recoPhotons_pfPhotonTranslator_*_*', 
        'keep recoPhotonCores_pfPhotonTranslator_*_*', 
        'keep recoConversions_pfPhotonTranslator_*_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_chargedHadronPFTrackIsolation_*_*', 
        'keep recoPFRecHits_particleFlowRecHitHGC_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterHGCal__*', 
        'keep recoPFClusters_particleFlowClusterHGCalFromMultiCl__*', 
        'keep recoSuperClusters_simPFProducer_*_*', 
        'keep *_ecalBarrelClusterFastTimer_*_*', 
        'keep *_particleFlowSuperClusterHGCalFromMultiCl_*_*', 
        'keep recoPFBlocks_simPFProducer_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'keep *_gtStage2Digis_*_*', 
        'keep *_gmtStage2Digis_*_*', 
        'keep *_caloStage2Digis_*_*', 
        'drop *_hlt*_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*', 
        'keep L1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep LumiScalerss_scalersRawToDigi_*_*', 
        'keep BeamSpotOnlines_scalersRawToDigi_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep DcsStatuss_hltScalersRawToDigi_*_*', 
        'keep CTPPSRecord_onlineMetaDataDigis_*_*', 
        'keep DCSRecord_onlineMetaDataDigis_*_*', 
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*', 
        'keep recoBeamSpot_onlineMetaDataDigis_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscriminationByDecayModeFinding_*_*', 
        'keep recoSingleTauDiscriminatorContaineredmValueMap_pfTausDiscriminationByIsolation_*_*', 
        'keep recoPFMETs_pfMetEI_*_*', 
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*', 
        'keep TotemFEDInfos_totemRPRawToDigi_*_*', 
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*', 
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*', 
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*', 
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*', 
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*', 
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*', 
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*', 
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*', 
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*', 
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*', 
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*', 
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*', 
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*', 
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*', 
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*', 
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*', 
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*', 
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*', 
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*', 
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*', 
        'keep recoForwardProtons_ctppsProtons_*_*', 
        'keep *_ticlTrackstersTrkEM_*_*', 
        'keep *_ticlTrackstersEM_*_*', 
        'keep *_ticlTrackstersHAD_*_*', 
        'keep *_ticlTrackstersTrk_*_*', 
        'keep *_ticlTrackstersMIP_*_*', 
        'keep *_ticlTrackstersMerge_*_*', 
        'keep *_ticlTrackstersHFNoseEM_*_*', 
        'keep *_ticlTrackstersHFNoseMIP_*_*', 
        'keep *_ticlTrackstersHFNoseMerge_*_*', 
        'keep *_pfTICL_*_*', 
        'keep *_ticlMultiClustersFromTrackstersEM_*_*', 
        'keep *_ticlMultiClustersFromTrackstersHAD_*_*', 
        'keep *_ticlMultiClustersFromTrackstersTrk_*_*', 
        'keep *_ticlMultiClustersFromTrackstersTrkEM_*_*', 
        'keep *_ticlMultiClustersFromTrackstersMIP_*_*', 
        'keep *_ticlMultiClustersFromTrackstersMerge_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generatorSmeared_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep SimTracks_g4SimHits_*_*', 
        'keep SimVertexs_g4SimHits_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep *_muonSimClassifier_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonME0Digis_*_*', 
        'keep *_simHGCalUnsuppressedDigis_EE_*', 
        'keep *_simHGCalUnsuppressedDigis_HEfront_*', 
        'keep *_simHGCalUnsuppressedDigis_HEback_*', 
        'keep *_mix_MergedCaloTruth_*', 
        'keep *_mix_FTLBarrel_*', 
        'keep *_mix_FTLEndcap_*', 
        'keep *_mix_InitialVertices_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep *_genPUProtons_*_*', 
        'keep *_mtdRecHits_*_*', 
        'keep *_mtdClusters_*_*', 
        'keep *_trackExtenderWithMTD_*_*', 
        'keep *_mtdTrackQualityMVA_*_*'
     ) ),
    splitLevel = cms.untracked.int32(0)
)

process.REDIGIEventContent = cms.PSet(
    inputCommands = cms.untracked.vstring(
        'drop *', 
        'keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generatorSmeared_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'drop *_randomEngineStateProducer_*_*'
    )
)

process.REGENEventContent = cms.PSet(
    inputCommands = cms.untracked.vstring(
        'keep *', 
        'drop *_genParticles_*_*', 
        'drop *_genParticlesForJets_*_*', 
        'drop *_kt4GenJets_*_*', 
        'drop *_kt6GenJets_*_*', 
        'drop *_iterativeCone5GenJets_*_*', 
        'drop *_ak4GenJets_*_*', 
        'drop *_ak7GenJets_*_*', 
        'drop *_ak8GenJets_*_*', 
        'drop *_ak4GenJetsNoNu_*_*', 
        'drop *_ak8GenJetsNoNu_*_*', 
        'drop *_genCandidatesForMET_*_*', 
        'drop *_genParticlesForMETAllVisible_*_*', 
        'drop *_genMetCalo_*_*', 
        'drop *_genMetCaloAndNonPrompt_*_*', 
        'drop *_genMetTrue_*_*', 
        'drop *_genMetIC5GenJs_*_*'
    )
)

process.REPACKRAWEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *', 
        'drop FEDRawDataCollection_*_*_*', 
        'keep FEDRawDataCollection_rawDataRepacker_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*', 
        'keep FEDRawDataCollection_rawDataReducedFormat_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'drop FEDRawDataCollection_source_*_*', 
        'drop FEDRawDataCollection_rawDataCollector_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.REPACKRAWSIMEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *', 
        'drop FEDRawDataCollection_*_*_*', 
        'keep FEDRawDataCollection_rawDataRepacker_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*', 
        'keep FEDRawDataCollection_rawDataReducedFormat_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_hltFEDSelectorL1_*_*', 
        'keep *_hltScoutingCaloPacker_*_*', 
        'keep *_hltScoutingEgammaPacker_*_*', 
        'keep *_hltScoutingMuonPackerCalo_*_*', 
        'keep *_hltScoutingMuonPacker_*_*', 
        'keep *_hltScoutingPFPacker_*_*', 
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*', 
        'keep *_hltScoutingPrimaryVertexPacker_*_*', 
        'keep *_hltScoutingTrackPacker_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep *_simMuonCSCDigis_*_*', 
        'keep *_simMuonRPCDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonME0Digis_*_*', 
        'keep EBSrFlagsSorted_simEcalDigis_*_*', 
        'keep EESrFlagsSorted_simEcalDigis_*_*', 
        'keep *_simHcalUnsuppressedDigis_*_*', 
        'keep *_mix_EETimeDigi_*', 
        'keep *_mix_EBTimeDigi_*', 
        'keep *_simEcalUnsuppressedDigis_*_*', 
        'keep *_simHGCalUnsuppressedDigis_EE_*', 
        'keep *_simHGCalUnsuppressedDigis_HEfront_*', 
        'keep *_simHGCalUnsuppressedDigis_HEback_*', 
        'keep *_mix_MergedCaloTruth_*', 
        'keep *_mix_FTLBarrel_*', 
        'keep *_mix_FTLEndcap_*', 
        'keep *_mix_InitialVertices_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int6stdbitsetstdpairs_*_AffectedAPVList_*', 
        'keep int_*_bunchSpacing_*', 
        'keep *_genPUProtons_*_*', 
        'keep *_mix_MergedTrackTruth_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generatorSmeared_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenJets_ak*_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'drop FEDRawDataCollection_source_*_*', 
        'drop FEDRawDataCollection_rawDataCollector_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.RESIMEventContent = cms.PSet(
    inputCommands = cms.untracked.vstring(
        'drop *', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generatorSmeared_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*'
    )
)

process.RU_ME0 = cms.PSet(
    allowWideSegments = cms.bool(True),
    doCollisions = cms.bool(True),
    maxChi2Additional = cms.double(100.0),
    maxChi2GoodSeg = cms.double(50),
    maxChi2Prune = cms.double(50),
    maxETASeeds = cms.double(0.1),
    maxPhiAdditional = cms.double(0.001096605744),
    maxPhiSeeds = cms.double(0.001096605744),
    maxTOFDiff = cms.double(25),
    minNumberOfHits = cms.uint32(4),
    requireCentralBX = cms.bool(True)
)

process.RU_ME12 = cms.PSet(
    chi2Max = cms.double(100.0),
    chi2Norm_2D_ = cms.double(35),
    chi2_str = cms.double(50.0),
    dPhiIntMax = cms.double(0.003),
    dPhiMax = cms.double(0.004),
    dRIntMax = cms.double(2.0),
    dRMax = cms.double(1.5),
    doCollisions = cms.bool(True),
    enlarge = cms.bool(False),
    minLayersApart = cms.int32(1),
    wideSeg = cms.double(3.0)
)

process.RU_ME13 = cms.PSet(
    chi2Max = cms.double(60.0),
    chi2Norm_2D_ = cms.double(20),
    chi2_str = cms.double(30.0),
    dPhiIntMax = cms.double(0.002),
    dPhiMax = cms.double(0.003),
    dRIntMax = cms.double(2.0),
    dRMax = cms.double(1.5),
    doCollisions = cms.bool(True),
    enlarge = cms.bool(False),
    minLayersApart = cms.int32(1),
    wideSeg = cms.double(3.0)
)

process.RU_ME1A = cms.PSet(
    chi2Max = cms.double(100.0),
    chi2Norm_2D_ = cms.double(35),
    chi2_str = cms.double(50.0),
    dPhiIntMax = cms.double(0.005),
    dPhiMax = cms.double(0.006),
    dRIntMax = cms.double(2.0),
    dRMax = cms.double(1.5),
    doCollisions = cms.bool(True),
    enlarge = cms.bool(False),
    minLayersApart = cms.int32(1),
    wideSeg = cms.double(3.0)
)

process.RU_ME1B = cms.PSet(
    chi2Max = cms.double(100.0),
    chi2Norm_2D_ = cms.double(35),
    chi2_str = cms.double(50.0),
    dPhiIntMax = cms.double(0.004),
    dPhiMax = cms.double(0.005),
    dRIntMax = cms.double(2.0),
    dRMax = cms.double(1.5),
    doCollisions = cms.bool(True),
    enlarge = cms.bool(False),
    minLayersApart = cms.int32(1),
    wideSeg = cms.double(3.0)
)

process.RU_MEX1 = cms.PSet(
    chi2Max = cms.double(180.0),
    chi2Norm_2D_ = cms.double(60),
    chi2_str = cms.double(80.0),
    dPhiIntMax = cms.double(0.005),
    dPhiMax = cms.double(0.007),
    dRIntMax = cms.double(2.0),
    dRMax = cms.double(1.5),
    doCollisions = cms.bool(True),
    enlarge = cms.bool(False),
    minLayersApart = cms.int32(1),
    wideSeg = cms.double(3.0)
)

process.RU_MEX2 = cms.PSet(
    chi2Max = cms.double(100.0),
    chi2Norm_2D_ = cms.double(35),
    chi2_str = cms.double(50.0),
    dPhiIntMax = cms.double(0.004),
    dPhiMax = cms.double(0.006),
    dRIntMax = cms.double(2.0),
    dRMax = cms.double(1.5),
    doCollisions = cms.bool(True),
    enlarge = cms.bool(False),
    minLayersApart = cms.int32(1),
    wideSeg = cms.double(3.0)
)

process.RecoBTagAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfGhostTrackBJetTags_*_*', 
        'keep *_pfCombinedMVAV2BJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*', 
        'keep *_pfCombinedCvsLJetTags_*_*', 
        'keep *_pfCombinedCvsBJetTags_*_*', 
        'keep *_pfChargeBJetTags_*_*', 
        'keep *_pfDeepCSVJetTags_*_*', 
        'keep *_pfDeepCMVAJetTags_*_*', 
        'keep *_pixelClusterTagInfos_*_*'
    )
)

process.RecoBTagFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfGhostTrackVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfGhostTrackBJetTags_*_*', 
        'keep *_pfCombinedMVAV2BJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*', 
        'keep *_pfCombinedCvsLJetTags_*_*', 
        'keep *_pfCombinedCvsBJetTags_*_*', 
        'keep *_pfChargeBJetTags_*_*', 
        'keep *_pfDeepCSVJetTags_*_*', 
        'keep *_pfDeepCMVAJetTags_*_*', 
        'keep *_pixelClusterTagInfos_*_*'
    )
)

process.RecoBTagRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfGhostTrackVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfGhostTrackBJetTags_*_*', 
        'keep *_pfCombinedMVAV2BJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*', 
        'keep *_pfCombinedCvsLJetTags_*_*', 
        'keep *_pfCombinedCvsBJetTags_*_*', 
        'keep *_pfChargeBJetTags_*_*', 
        'keep *_pfDeepCSVJetTags_*_*', 
        'keep *_pfDeepCMVAJetTags_*_*', 
        'keep *_pixelClusterTagInfos_*_*'
    )
)

process.RecoBTauAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.RecoBTauFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.RecoBTauRECO = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.RecoCTPPSAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*', 
        'keep TotemFEDInfos_totemRPRawToDigi_*_*', 
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*', 
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*', 
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*', 
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*', 
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*', 
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*', 
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*', 
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*', 
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*', 
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*', 
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*', 
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*', 
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*', 
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*', 
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*', 
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*', 
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*', 
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*', 
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*', 
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*', 
        'keep recoForwardProtons_ctppsProtons_*_*'
    )
)

process.RecoCTPPSFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*', 
        'keep TotemFEDInfos_totemRPRawToDigi_*_*', 
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*', 
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*', 
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*', 
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*', 
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*', 
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*', 
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*', 
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*', 
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*', 
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*', 
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*', 
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*', 
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*', 
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*', 
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*', 
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*', 
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*', 
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*', 
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*', 
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*', 
        'keep recoForwardProtons_ctppsProtons_*_*'
    )
)

process.RecoCTPPSRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*', 
        'keep TotemFEDInfos_totemRPRawToDigi_*_*', 
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*', 
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*', 
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*', 
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*', 
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*', 
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*', 
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*', 
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*', 
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*', 
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*', 
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*', 
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*', 
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*', 
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*', 
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*', 
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*', 
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*', 
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*', 
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*', 
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*', 
        'keep recoForwardProtons_ctppsProtons_*_*'
    )
)

process.RecoEcalAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterHGCal__*', 
        'keep recoCaloClusters_particleFlowSuperClusterHGCal__*', 
        'keep recoSuperClusters_particleFlowSuperClusterHGCalFromMultiCl__*', 
        'keep recoCaloClusters_particleFlowSuperClusterHGCalFromMultiCl__*'
    )
)

process.RecoEcalFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_reducedEcalRecHitsEB_*_*', 
        'keep *_reducedEcalRecHitsEE_*_*', 
        'keep *_reducedEcalRecHitsES_*_*', 
        'keep *_interestingEcalDetId*_*_*', 
        'keep *_ecalWeightUncalibRecHit_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5*_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'keep *_particleFlowSuperClusterOOTECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterHGCal__*', 
        'keep recoCaloClusters_particleFlowSuperClusterHGCal__*', 
        'keep recoSuperClusters_particleFlowSuperClusterHGCalFromMultiCl__*', 
        'keep recoCaloClusters_particleFlowSuperClusterHGCalFromMultiCl__*', 
        'keep *_particleFlowSuperClusterHGCal_*_*', 
        'keep *_particleFlowSuperClusterHGCalFromMultiCl_*_*'
    )
)

process.RecoEcalRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'keep *_particleFlowSuperClusterOOTECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterHGCal__*', 
        'keep recoCaloClusters_particleFlowSuperClusterHGCal__*', 
        'keep recoSuperClusters_particleFlowSuperClusterHGCalFromMultiCl__*', 
        'keep recoCaloClusters_particleFlowSuperClusterHGCalFromMultiCl__*', 
        'keep *_particleFlowSuperClusterHGCal_*_*', 
        'keep *_particleFlowSuperClusterHGCalFromMultiCl_*_*'
    )
)

process.RecoEgammaAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectrons_gedGsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep recoPhotonCores_gedPhotonCore_*_*', 
        'keep recoPhotons_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_ootPhotonCore_*_*', 
        'keep recoPhotons_ootPhotons_*_*', 
        'keep recoConversions_conversions_*_*', 
        'drop recoConversions_conversions_uncleanedConversions_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'keep *_gsfTracksOpenConversions_*_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFromConversions_*_*', 
        'keep recoTracks_ckfInOutTracksFromConversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*', 
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*', 
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*', 
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*', 
        'keep *_lowPtGsfToTrackLinks_*_*', 
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*', 
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*', 
        'keep floatedmValueMap_lowPtGsfElectronID_*_*', 
        'keep *_ecalDrivenGsfElectronCores_*_*', 
        'keep *_ecalDrivenGsfElectrons_*_*', 
        'keep *_ecalDrivenGsfElectronCoresFromMultiCl_*_*', 
        'keep *_ecalDrivenGsfElectronsFromMultiCl_*_*', 
        'keep *_photonCoreFromMultiCl_*_*', 
        'keep *_photonsFromMultiCl_*_*'
    )
)

process.RecoEgammaFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_gsfElectronCores_*_*', 
        'keep *_gsfElectrons_*_*', 
        'keep *_uncleanedOnlyGsfElectronCores_*_*', 
        'keep *_uncleanedOnlyGsfElectrons_*_*', 
        'keep *_eidRobustLoose_*_*', 
        'keep *_eidRobustTight_*_*', 
        'keep *_eidRobustHighEnergy_*_*', 
        'keep *_eidLoose_*_*', 
        'keep *_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFPileUpIsolation_*_*', 
        'keep *_egmGedGsfElectronPFNoPileUpIsolation_*_*', 
        'keep *_egmGsfElectronIDs_*_*', 
        'keep *_egmPhotonIDs_*_*', 
        'keep *_conversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'keep *_mustacheConversions_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_photonCore_*_*', 
        'keep *_photons_*_*', 
        'keep *_mustachePhotonCore_*_*', 
        'keep *_mustachePhotons_*_*', 
        'keep *_ootPhotonCore_*_*', 
        'keep *_ootPhotons_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_allConversionsOldEG_*_*', 
        'keep *_ckfOutInTracksFromConversions_*_*', 
        'keep *_ckfInOutTracksFromConversions_*_*', 
        'keep *_uncleanedOnlyAllConversions_*_*', 
        'keep *_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep *_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectrons_gedGsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep recoPhotonCores_gedPhotonCore_*_*', 
        'keep recoPhotons_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_ootPhotonCore_*_*', 
        'keep recoPhotons_ootPhotons_*_*', 
        'keep recoConversions_conversions_*_*', 
        'drop recoConversions_conversions_uncleanedConversions_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'keep *_gsfTracksOpenConversions_*_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFromConversions_*_*', 
        'keep recoTracks_ckfInOutTracksFromConversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*', 
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*', 
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*', 
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*', 
        'keep *_lowPtGsfToTrackLinks_*_*', 
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*', 
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*', 
        'keep floatedmValueMap_lowPtGsfElectronID_*_*', 
        'keep *_ecalDrivenGsfElectronCores_*_*', 
        'keep *_ecalDrivenGsfElectrons_*_*', 
        'keep *_ecalDrivenGsfElectronCoresFromMultiCl_*_*', 
        'keep *_ecalDrivenGsfElectronsFromMultiCl_*_*', 
        'keep *_photonCoreFromMultiCl_*_*', 
        'keep *_photonsFromMultiCl_*_*'
    )
)

process.RecoEgammaRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectrons_gedGsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep recoPhotonCores_gedPhotonCore_*_*', 
        'keep recoPhotons_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_ootPhotonCore_*_*', 
        'keep recoPhotons_ootPhotons_*_*', 
        'keep recoConversions_conversions_*_*', 
        'drop recoConversions_conversions_uncleanedConversions_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'keep *_gsfTracksOpenConversions_*_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFromConversions_*_*', 
        'keep recoTracks_ckfInOutTracksFromConversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*', 
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*', 
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*', 
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*', 
        'keep *_lowPtGsfToTrackLinks_*_*', 
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*', 
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*', 
        'keep floatedmValueMap_lowPtGsfElectronID_*_*', 
        'keep *_ecalDrivenGsfElectronCores_*_*', 
        'keep *_ecalDrivenGsfElectrons_*_*', 
        'keep *_ecalDrivenGsfElectronCoresFromMultiCl_*_*', 
        'keep *_ecalDrivenGsfElectronsFromMultiCl_*_*', 
        'keep *_photonCoreFromMultiCl_*_*', 
        'keep *_photonsFromMultiCl_*_*'
    )
)

process.RecoGenJetsAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*'
    )
)

process.RecoGenJetsFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoGenJets_ak*_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*'
    )
)

process.RecoGenJetsRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*'
    )
)

process.RecoGenMETAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoGenMETs_*_*_*')
)

process.RecoGenMETFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoGenMETs_*_*_*')
)

process.RecoGenMETRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoGenMETs_*_*_*')
)

process.RecoHcalNoiseAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep HcalNoiseSummary_hcalnoise_*_*')
)

process.RecoHcalNoiseFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*'
    )
)

process.RecoHcalNoiseRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*'
    )
)

process.RecoJetsAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoCaloJets_ak4CaloJets_*_*', 
        'keep *_ak4CaloJets_rho_*', 
        'keep *_ak4CaloJets_sigma_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep floatedmValueMap_puppi_*_*', 
        'keep *_ak4PFJetsPuppi_*_*', 
        'keep *_ak8PFJetsPuppi_*_*', 
        'keep *_ak8PFJetsPuppiSoftDrop_*_*', 
        'keep recoPFJets_ak4PFJets_*_*', 
        'keep *_ak4PFJets_rho_*', 
        'keep *_ak4PFJets_sigma_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep recoBasicJets_ak5CastorJets_*_*', 
        'keep *_ak5CastorJets_rho_*', 
        'keep *_ak5CastorJets_sigma_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep recoBasicJets_ak7CastorJets_*_*', 
        'keep *_ak7CastorJets_rho_*', 
        'keep *_ak7CastorJets_sigma_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRhoAll_*_*', 
        'keep *_fixedGridRhoFastjetAll_*_*', 
        'keep *_fixedGridRhoFastjetAllTmp_*_*', 
        'keep *_fixedGridRhoFastjetCentral_*_*', 
        'keep *_fixedGridRhoFastjetAllCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*', 
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*', 
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*'
    )
)

process.RecoJetsFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoCaloJets_*_*_*', 
        'keep recoPFJets_*_*_*', 
        'keep recoTrackJets_*_*_*', 
        'keep recoJPTJets_*_*_*', 
        'keep recoBasicJets_*_*_*', 
        'keep *_kt4JetTracksAssociatorAtVertex_*_*', 
        'keep *_kt4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_kt4JetExtender_*_*', 
        'keep *_ak7JetTracksAssociatorAtVertex*_*_*', 
        'keep *_ak7JetTracksAssociatorAtCaloFace*_*_*', 
        'keep *_ak7JetExtender_*_*', 
        'keep *_kt4CaloJets_*_*', 
        'keep *_kt6CaloJets_*_*', 
        'keep *_ak5CaloJets_*_*', 
        'keep *_ak7CaloJets_*_*', 
        'keep *_kt4PFJets_*_*', 
        'keep *_kt6PFJets_*_*', 
        'keep *_ak5PFJets_*_*', 
        'keep *_ak7PFJets_*_*', 
        'keep *_kt4TrackJets_*_*', 
        'keep *_ca*Mass_*_*', 
        'keep *_ak*Mass_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep recoCaloJets_ak4CaloJets_*_*', 
        'keep *_ak4CaloJets_rho_*', 
        'keep *_ak4CaloJets_sigma_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep floatedmValueMap_puppi_*_*', 
        'keep *_ak4PFJetsPuppi_*_*', 
        'keep *_ak8PFJetsPuppi_*_*', 
        'keep *_ak8PFJetsPuppiSoftDrop_*_*', 
        'keep recoPFJets_ak4PFJets_*_*', 
        'keep *_ak4PFJets_rho_*', 
        'keep *_ak4PFJets_sigma_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep recoBasicJets_ak5CastorJets_*_*', 
        'keep *_ak5CastorJets_rho_*', 
        'keep *_ak5CastorJets_sigma_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep recoBasicJets_ak7CastorJets_*_*', 
        'keep *_ak7CastorJets_rho_*', 
        'keep *_ak7CastorJets_sigma_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRhoAll_*_*', 
        'keep *_fixedGridRhoFastjetAll_*_*', 
        'keep *_fixedGridRhoFastjetAllTmp_*_*', 
        'keep *_fixedGridRhoFastjetCentral_*_*', 
        'keep *_fixedGridRhoFastjetAllCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*', 
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*', 
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*'
    )
)

process.RecoJetsRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep recoCaloJets_ak4CaloJets_*_*', 
        'keep *_ak4CaloJets_rho_*', 
        'keep *_ak4CaloJets_sigma_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep floatedmValueMap_puppi_*_*', 
        'keep *_ak4PFJetsPuppi_*_*', 
        'keep *_ak8PFJetsPuppi_*_*', 
        'keep *_ak8PFJetsPuppiSoftDrop_*_*', 
        'keep recoPFJets_ak4PFJets_*_*', 
        'keep *_ak4PFJets_rho_*', 
        'keep *_ak4PFJets_sigma_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep recoBasicJets_ak5CastorJets_*_*', 
        'keep *_ak5CastorJets_rho_*', 
        'keep *_ak5CastorJets_sigma_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep recoBasicJets_ak7CastorJets_*_*', 
        'keep *_ak7CastorJets_rho_*', 
        'keep *_ak7CastorJets_sigma_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRhoAll_*_*', 
        'keep *_fixedGridRhoFastjetAll_*_*', 
        'keep *_fixedGridRhoFastjetAllTmp_*_*', 
        'keep *_fixedGridRhoFastjetCentral_*_*', 
        'keep *_fixedGridRhoFastjetAllCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*', 
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*', 
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*'
    )
)

process.RecoLocalCaloAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_castorreco_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep HcalUnpackerReport_castorDigis_*_*', 
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*', 
        'keep HcalUnpackerReport_hcalDigis_*_*', 
        'keep *_HGCalRecHit_*_*', 
        'keep recoCaloClusters_hgcalLayerClusters_*_*', 
        'keep *_hgcalLayerClusters_timeLayerCluster_*', 
        'keep *_hgcalLayerClusters_InitialLayerClustersMask_*'
    )
)

process.RecoLocalCaloFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep HBHERecHitsSorted_hbheprerecoMB_*_*', 
        'keep ZDCDataFramesSorted_*Digis_*_*', 
        'keep ZDCRecHitsSorted_*_*_*', 
        'keep HcalUnpackerReport_*_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_hcalDigis_*_*', 
        'keep ZDCDataFramesSorted_castorDigis_*_*', 
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*', 
        'keep ZDCRecHitsSorted_zdcreco_*_*', 
        'keep *_castorreco_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep HcalUnpackerReport_castorDigis_*_*', 
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*', 
        'keep HcalUnpackerReport_hcalDigis_*_*', 
        'keep *_HGCalRecHit_*_*', 
        'keep recoCaloClusters_hgcalLayerClusters_*_*', 
        'keep *_hgcalLayerClusters_timeLayerCluster_*', 
        'keep *_hgcalLayerClusters_InitialLayerClustersMask_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep EBSrFlagsSorted_ecalDigis__*', 
        'keep EESrFlagsSorted_ecalDigis__*', 
        'keep *_mix_EBTimeDigi_*', 
        'keep *_mix_EETimeDigi_*', 
        'keep *_ecalDetailedTimeRecHit_*_*', 
        'keep *_hgcalMultiClusters_*_*', 
        'keep *_iterHGCalMultiClusters_*_*', 
        'keep *_ecalMultiFitUncalibRecHit_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep EBSrFlagsSorted_ecalDigis__*', 
        'keep EESrFlagsSorted_ecalDigis__*', 
        'keep *_mix_EBTimeDigi_*', 
        'keep *_mix_EETimeDigi_*', 
        'keep *_ecalDetailedTimeRecHit_*_*', 
        'keep *_HGCalUncalibRecHit_*_*'
    )
)

process.RecoLocalCaloRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_hcalDigis_*_*', 
        'keep ZDCDataFramesSorted_castorDigis_*_*', 
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*', 
        'keep ZDCRecHitsSorted_zdcreco_*_*', 
        'keep *_castorreco_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep HcalUnpackerReport_castorDigis_*_*', 
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*', 
        'keep HcalUnpackerReport_hcalDigis_*_*', 
        'keep *_HGCalRecHit_*_*', 
        'keep recoCaloClusters_hgcalLayerClusters_*_*', 
        'keep *_hgcalLayerClusters_timeLayerCluster_*', 
        'keep *_hgcalLayerClusters_InitialLayerClustersMask_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep EBSrFlagsSorted_ecalDigis__*', 
        'keep EESrFlagsSorted_ecalDigis__*', 
        'keep *_mix_EBTimeDigi_*', 
        'keep *_mix_EETimeDigi_*', 
        'keep *_ecalDetailedTimeRecHit_*_*', 
        'keep *_hgcalMultiClusters_*_*', 
        'keep *_iterHGCalMultiClusters_*_*'
    )
)

process.RecoLocalFastTimeAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_mtdClusters_*_*')
)

process.RecoLocalFastTimeFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_mtdUncalibratedRecHits_*_*', 
        'keep *_mtdRecHits_*_*', 
        'keep *_mtdClusters_*_*', 
        'keep *_mtdTrackingRecHits_*_*'
    )
)

process.RecoLocalFastTimeRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_mtdRecHits_*_*', 
        'keep *_mtdClusters_*_*'
    )
)

process.RecoLocalMuonAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_gemRecHits_*_*', 
        'keep *_gemSegments_*_*', 
        'keep *_me0RecHits_*_*', 
        'keep *_me0Segments_*_*'
    )
)

process.RecoLocalMuonFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_gemRecHits_*_*', 
        'keep *_gemSegments_*_*', 
        'keep *_me0RecHits_*_*', 
        'keep *_me0Segments_*_*'
    )
)

process.RecoLocalMuonRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_gemRecHits_*_*', 
        'keep *_gemSegments_*_*', 
        'keep *_me0RecHits_*_*', 
        'keep *_me0Segments_*_*'
    )
)

process.RecoLocalTrackerAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep ClusterSummary_clusterSummaryProducer_*_*')
)

process.RecoLocalTrackerFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_clusterSummaryProducer_*_*', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep PixelFEDChanneledmNewDetSetVector_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep ClusterSummary_clusterSummaryProducer_*_*', 
        'keep *_siPhase2Clusters_*_*', 
        'keep *_siPhase2Clusters_*_*'
    )
)

process.RecoLocalTrackerRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep PixelFEDChanneledmNewDetSetVector_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep ClusterSummary_clusterSummaryProducer_*_*', 
        'keep *_siPhase2Clusters_*_*'
    )
)

process.RecoMETAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep floatedmValueMap_puppiNoLep_*_*', 
        'keep recoPFMETs_pfMetPuppi_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep recoGlobalHaloData_GlobalHaloData_*_*', 
        'keep recoCSCHaloData_CSCHaloData_*_*', 
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*'
    )
)

process.RecoMETFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *HaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep recoEcalHaloData_EcalHaloData_*_*', 
        'keep recoHcalHaloData_HcalHaloData_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep floatedmValueMap_puppiNoLep_*_*', 
        'keep recoPFMETs_pfMetPuppi_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep recoGlobalHaloData_GlobalHaloData_*_*', 
        'keep recoCSCHaloData_CSCHaloData_*_*', 
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*'
    )
)

process.RecoMETRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep recoEcalHaloData_EcalHaloData_*_*', 
        'keep recoHcalHaloData_HcalHaloData_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep floatedmValueMap_puppiNoLep_*_*', 
        'keep recoPFMETs_pfMetPuppi_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep recoGlobalHaloData_GlobalHaloData_*_*', 
        'keep recoCSCHaloData_CSCHaloData_*_*', 
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*'
    )
)

process.RecoMTDAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_trackExtenderWithMTD_*_*', 
        'keep *_mtdTrackQualityMVA_*_*'
    )
)

process.RecoMTDFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_trackExtenderWithMTD_*_*', 
        'keep *_mtdTrackQualityMVA_*_*'
    )
)

process.RecoMTDRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_trackExtenderWithMTD_*_*', 
        'keep *_mtdTrackQualityMVA_*_*'
    )
)

process.RecoMuonAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muons_*_*', 
        'keep doubleedmValueMap_muons_muPFMean*_*', 
        'keep doubleedmValueMap_muons_muPFSum*_*', 
        'keep *_muons_muonShowerInformation_*', 
        'keep recoMuonTimeExtraedmValueMap_muons_*_*', 
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*', 
        'keep uintedmValueMap_muons_*_*', 
        'keep *_particleFlow_muons_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*'
    )
)

process.RecoMuonFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muons_*_*', 
        'keep doubleedmValueMap_muons_muPFMean*_*', 
        'keep doubleedmValueMap_muons_muPFSum*_*', 
        'keep *_muons_muonShowerInformation_*', 
        'keep recoMuonTimeExtraedmValueMap_muons_*_*', 
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*', 
        'keep uintedmValueMap_muons_*_*', 
        'keep *_particleFlow_muons_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*'
    )
)

process.RecoMuonIsolationAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.RecoMuonIsolationFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*'
    )
)

process.RecoMuonIsolationParamGlobal = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_muParamGlobalIsoDepositGsTk_*_*', 
        'keep *_muParamGlobalIsoDepositCalEcal_*_*', 
        'keep *_muParamGlobalIsoDepositCalHcal_*_*', 
        'keep *_muParamGlobalIsoDepositCtfTk_*_*', 
        'keep *_muParamGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muParamGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muParamGlobalIsoDepositJets_*_*'
    )
)

process.RecoMuonIsolationRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*'
    )
)

process.RecoMuonRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muons_*_*', 
        'keep doubleedmValueMap_muons_muPFMean*_*', 
        'keep doubleedmValueMap_muons_muPFSum*_*', 
        'keep *_muons_muonShowerInformation_*', 
        'keep recoMuonTimeExtraedmValueMap_muons_*_*', 
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*', 
        'keep uintedmValueMap_muons_*_*', 
        'keep *_particleFlow_muons_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*'
    )
)

process.RecoParticleFlowAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_particleFlow_muons_*', 
        'keep recoCaloClusters_pfElectronTranslator_*_*', 
        'keep recoPreshowerClusters_pfElectronTranslator_*_*', 
        'keep recoSuperClusters_pfElectronTranslator_*_*', 
        'keep recoCaloClusters_pfPhotonTranslator_*_*', 
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*', 
        'keep recoSuperClusters_pfPhotonTranslator_*_*', 
        'keep recoPhotons_pfPhotonTranslator_*_*', 
        'keep recoPhotonCores_pfPhotonTranslator_*_*', 
        'keep recoConversions_pfPhotonTranslator_*_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_chargedHadronPFTrackIsolation_*_*', 
        'keep recoPFRecHits_particleFlowRecHitHGC_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterHGCal__*', 
        'keep recoPFClusters_particleFlowClusterHGCalFromMultiCl__*', 
        'keep recoSuperClusters_simPFProducer_*_*', 
        'keep *_ecalBarrelClusterFastTimer_*_*'
    )
)

process.RecoParticleFlowFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterHF_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_particleFlow_muons_*', 
        'keep recoCaloClusters_pfElectronTranslator_*_*', 
        'keep recoPreshowerClusters_pfElectronTranslator_*_*', 
        'keep recoSuperClusters_pfElectronTranslator_*_*', 
        'keep recoCaloClusters_pfPhotonTranslator_*_*', 
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*', 
        'keep recoSuperClusters_pfPhotonTranslator_*_*', 
        'keep recoPhotons_pfPhotonTranslator_*_*', 
        'keep recoPhotonCores_pfPhotonTranslator_*_*', 
        'keep recoConversions_pfPhotonTranslator_*_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_chargedHadronPFTrackIsolation_*_*', 
        'keep recoPFRecHits_particleFlowRecHitHGC_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterHGCal__*', 
        'keep recoPFClusters_particleFlowClusterHGCalFromMultiCl__*', 
        'keep recoSuperClusters_simPFProducer_*_*', 
        'keep *_ecalBarrelClusterFastTimer_*_*', 
        'keep *_particleFlowSuperClusterHGCalFromMultiCl_*_*', 
        'keep recoPFBlocks_simPFProducer_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL__*', 
        'keep recoPFRecHits_particleFlowRecHitHGC__*', 
        'keep *_simPFProducer_*_*'
    )
)

process.RecoParticleFlowRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterHF_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*', 
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_particleFlow_muons_*', 
        'keep recoCaloClusters_pfElectronTranslator_*_*', 
        'keep recoPreshowerClusters_pfElectronTranslator_*_*', 
        'keep recoSuperClusters_pfElectronTranslator_*_*', 
        'keep recoCaloClusters_pfPhotonTranslator_*_*', 
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*', 
        'keep recoSuperClusters_pfPhotonTranslator_*_*', 
        'keep recoPhotons_pfPhotonTranslator_*_*', 
        'keep recoPhotonCores_pfPhotonTranslator_*_*', 
        'keep recoConversions_pfPhotonTranslator_*_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_chargedHadronPFTrackIsolation_*_*', 
        'keep recoPFRecHits_particleFlowRecHitHGC_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterHGCal__*', 
        'keep recoPFClusters_particleFlowClusterHGCalFromMultiCl__*', 
        'keep recoSuperClusters_simPFProducer_*_*', 
        'keep *_ecalBarrelClusterFastTimer_*_*', 
        'keep *_particleFlowSuperClusterHGCalFromMultiCl_*_*', 
        'keep recoPFBlocks_simPFProducer_*_*'
    )
)

process.RecoPixelVertexingFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*'
    )
)

process.RecoPixelVertexingRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*'
    )
)

process.RecoTauTagAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*', 
        'keep recoPFTaus_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauBasicDiscriminators_*_*', 
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*', 
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*', 
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep *_hpsPFTauDiscriminationByMVA6ElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBdR03oldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWdR03oldDMwLT_*_*'
    )
)

process.RecoTauTagFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_ak4PFJetsRecoTauPiZeros_*_*', 
        'keep *_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_hpsPFTau*PtSum_*_*', 
        'keep *_hpsPFTauDiscriminationByLooseElectronRejection_*_*', 
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*', 
        'keep recoPFTaus_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauBasicDiscriminators_*_*', 
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*', 
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*', 
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep *_hpsPFTauDiscriminationByMVA6ElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBdR03oldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWdR03oldDMwLT_*_*'
    )
)

process.RecoTauTagRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_hpsPFTauDiscriminationByLooseElectronRejection_*_*', 
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*', 
        'keep recoPFTaus_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauBasicDiscriminators_*_*', 
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*', 
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*', 
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep *_hpsPFTauDiscriminationByMVA6ElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBdR03oldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWdR03oldDMwLT_*_*'
    )
)

process.RecoTrackerAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTracks_ctfPixelLess_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_dedxPixelHarmonic2_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep *_generalTracks_MVAValues_*', 
        'keep *_generalTracks_MVAVals_*'
    )
)

process.RecoTrackerFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep recoTracks_cosmicDCTracks_*_*', 
        'keep recoTrackExtras_cosmicDCTracks_*_*', 
        'keep TrackingRecHitsOwned_cosmicDCTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTracks_ctfPixelLess_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_dedxPixelHarmonic2_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep *_generalTracks_MVAValues_*', 
        'keep *_generalTracks_MVAVals_*'
    )
)

process.RecoTrackerRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep recoTracks_cosmicDCTracks_*_*', 
        'keep recoTrackExtras_cosmicDCTracks_*_*', 
        'keep TrackingRecHitsOwned_cosmicDCTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTracks_ctfPixelLess_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_dedxPixelHarmonic2_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep *_generalTracks_MVAValues_*', 
        'keep *_generalTracks_MVAVals_*'
    )
)

process.RecoVertexAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep  *_offlinePrimaryVertices__*', 
        'keep *_offlinePrimaryVerticesWithBS_*_*', 
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep *_offlinePrimaryVertices4D__*', 
        'keep *_offlinePrimaryVertices4DWithBS__*', 
        'keep *_trackTimeValueMapProducer_*_*', 
        'keep *_offlinePrimaryVertices4DnoPID__*', 
        'keep *_offlinePrimaryVertices4DnoPIDWithBS__*', 
        'keep *_tofPID_*_*'
    )
)

process.RecoVertexFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep  *_offlinePrimaryVertices__*', 
        'keep *_offlinePrimaryVerticesWithBS_*_*', 
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep *_offlinePrimaryVertices4D__*', 
        'keep *_offlinePrimaryVertices4DWithBS__*', 
        'keep *_trackTimeValueMapProducer_*_*', 
        'keep *_offlinePrimaryVertices4DnoPID__*', 
        'keep *_offlinePrimaryVertices4DnoPIDWithBS__*', 
        'keep *_tofPID_*_*'
    )
)

process.RecoVertexRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep  *_offlinePrimaryVertices__*', 
        'keep *_offlinePrimaryVerticesWithBS_*_*', 
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep *_offlinePrimaryVertices4D__*', 
        'keep *_offlinePrimaryVertices4DWithBS__*', 
        'keep *_trackTimeValueMapProducer_*_*', 
        'keep *_offlinePrimaryVertices4DnoPID__*', 
        'keep *_offlinePrimaryVertices4DnoPIDWithBS__*', 
        'keep *_tofPID_*_*'
    )
)

process.RegionPSetBlock = cms.PSet(
    RegionPSet = cms.PSet(
        originHalfLength = cms.double(21.2),
        originRadius = cms.double(0.2),
        originXPos = cms.double(0.0),
        originYPos = cms.double(0.0),
        originZPos = cms.double(0.0),
        precise = cms.bool(True),
        ptMin = cms.double(0.9),
        useMultipleScattering = cms.bool(False)
    )
)

process.SK_ME1234 = cms.PSet(
    chi2Max = cms.double(99999.0),
    dPhiFineMax = cms.double(0.025),
    dPhiMax = cms.double(0.003),
    dRPhiFineMax = cms.double(8.0),
    dRPhiMax = cms.double(8.0),
    minLayersApart = cms.int32(2),
    verboseInfo = cms.untracked.bool(True),
    wideSeg = cms.double(3.0)
)

process.SK_ME1A = cms.PSet(
    chi2Max = cms.double(99999.0),
    dPhiFineMax = cms.double(0.025),
    dPhiMax = cms.double(0.025),
    dRPhiFineMax = cms.double(3.0),
    dRPhiMax = cms.double(8.0),
    minLayersApart = cms.int32(2),
    verboseInfo = cms.untracked.bool(True),
    wideSeg = cms.double(3.0)
)

process.ST_ME1234 = cms.PSet(
    BPMinImprovement = cms.double(10000.0),
    BrutePruning = cms.bool(True),
    CSCDebug = cms.untracked.bool(False),
    CorrectTheErrors = cms.bool(True),
    Covariance = cms.double(0.0),
    ForceCovariance = cms.bool(False),
    ForceCovarianceAll = cms.bool(False),
    NormChi2Cut2D = cms.double(20.0),
    NormChi2Cut3D = cms.double(10.0),
    Pruning = cms.bool(True),
    SeedBig = cms.double(0.0015),
    SeedSmall = cms.double(0.0002),
    curvePenalty = cms.double(2.0),
    curvePenaltyThreshold = cms.double(0.85),
    dPhiFineMax = cms.double(0.025),
    dRPhiFineMax = cms.double(8.0),
    dXclusBoxMax = cms.double(4.0),
    dYclusBoxMax = cms.double(8.0),
    hitDropLimit4Hits = cms.double(0.6),
    hitDropLimit5Hits = cms.double(0.8),
    hitDropLimit6Hits = cms.double(0.3333),
    maxDPhi = cms.double(999.0),
    maxDTheta = cms.double(999.0),
    maxRatioResidualPrune = cms.double(3),
    maxRecHitsInCluster = cms.int32(20),
    minHitsPerSegment = cms.int32(3),
    onlyBestSegment = cms.bool(False),
    preClustering = cms.bool(True),
    preClusteringUseChaining = cms.bool(True),
    prePrun = cms.bool(True),
    prePrunLimit = cms.double(3.17),
    tanPhiMax = cms.double(0.5),
    tanThetaMax = cms.double(1.2),
    useShowering = cms.bool(False),
    yweightPenalty = cms.double(1.5),
    yweightPenaltyThreshold = cms.double(1.0)
)

process.ST_ME1A = cms.PSet(
    BPMinImprovement = cms.double(10000.0),
    BrutePruning = cms.bool(True),
    CSCDebug = cms.untracked.bool(False),
    CorrectTheErrors = cms.bool(True),
    Covariance = cms.double(0.0),
    ForceCovariance = cms.bool(False),
    ForceCovarianceAll = cms.bool(False),
    NormChi2Cut2D = cms.double(20.0),
    NormChi2Cut3D = cms.double(10.0),
    Pruning = cms.bool(True),
    SeedBig = cms.double(0.0015),
    SeedSmall = cms.double(0.0002),
    curvePenalty = cms.double(2.0),
    curvePenaltyThreshold = cms.double(0.85),
    dPhiFineMax = cms.double(0.025),
    dRPhiFineMax = cms.double(8.0),
    dXclusBoxMax = cms.double(4.0),
    dYclusBoxMax = cms.double(8.0),
    hitDropLimit4Hits = cms.double(0.6),
    hitDropLimit5Hits = cms.double(0.8),
    hitDropLimit6Hits = cms.double(0.3333),
    maxDPhi = cms.double(999.0),
    maxDTheta = cms.double(999.0),
    maxRatioResidualPrune = cms.double(3),
    maxRecHitsInCluster = cms.int32(24),
    minHitsPerSegment = cms.int32(3),
    onlyBestSegment = cms.bool(False),
    preClustering = cms.bool(True),
    preClusteringUseChaining = cms.bool(True),
    prePrun = cms.bool(True),
    prePrunLimit = cms.double(3.17),
    tanPhiMax = cms.double(0.5),
    tanThetaMax = cms.double(1.2),
    useShowering = cms.bool(False),
    yweightPenalty = cms.double(1.5),
    yweightPenaltyThreshold = cms.double(1.0)
)

process.SectCollParametersBlock = cms.PSet(
    SectCollParameters = cms.PSet(
        Debug = cms.untracked.bool(False),
        SCCSP1 = cms.int32(0),
        SCCSP2 = cms.int32(0),
        SCCSP3 = cms.int32(0),
        SCCSP4 = cms.int32(0),
        SCCSP5 = cms.int32(0),
        SCECF1 = cms.bool(False),
        SCECF2 = cms.bool(False),
        SCECF3 = cms.bool(False),
        SCECF4 = cms.bool(False)
    )
)

process.SiPixelGainCalibrationServiceParameters = cms.PSet(

)

process.SiStripClusterChargeCutLoose = cms.PSet(
    value = cms.double(1620.0)
)

process.SiStripClusterChargeCutNone = cms.PSet(
    value = cms.double(-1.0)
)

process.SiStripClusterChargeCutTight = cms.PSet(
    value = cms.double(1945.0)
)

process.SiStripClusterChargeCutTiny = cms.PSet(
    value = cms.double(800.0)
)

process.SimCalorimetryAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.SimCalorimetryFEVTDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_simEcalDigis_*_*', 
        'keep *_simEcalPreshowerDigis_*_*', 
        'keep *_simEcalTriggerPrimitiveDigis_*_*', 
        'keep *_simEcalEBTriggerPrimitiveDigis_*_*', 
        'keep *_simHcalDigis_*_*', 
        'keep ZDCDataFramesSorted_simHcalUnsuppressedDigis_*_*', 
        'drop ZDCDataFramesSorted_mix_simHcalUnsuppressedDigis*_*', 
        'keep *_simHcalTriggerPrimitiveDigis_*_*', 
        'keep *_mix_HcalSamples_*', 
        'keep *_mixData_HcalSamples_*', 
        'keep *_mix_HcalHits_*', 
        'keep *_mixData_HcalHits_*', 
        'keep *_DMHcalTriggerPrimitiveDigis_*_*', 
        'keep *_simHcalUnsuppressedDigis_*_*', 
        'keep *_DMHcalDigis_*_*', 
        'keep *_mix_EETimeDigi_*', 
        'keep *_mix_EBTimeDigi_*', 
        'keep *_simEcalUnsuppressedDigis_*_*', 
        'keep *_simHGCalUnsuppressedDigis_EE_*', 
        'keep *_simHGCalUnsuppressedDigis_HEfront_*', 
        'keep *_simHGCalUnsuppressedDigis_HEback_*', 
        'keep *_mix_MergedCaloTruth_*'
    )
)

process.SimCalorimetryPREMIX = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep EBDigiCollection_simEcalDigis_*_*', 
        'keep EEDigiCollection_simEcalDigis_*_*', 
        'keep ESDigiCollection_simEcalUnsuppressedDigis_*_*', 
        'keep *_simHcalDigis_*_*', 
        'drop ESDigiCollection_simEcalUnsuppressedDigis_*_*', 
        'drop EEDigiCollection_simEcalDigis_*_*', 
        'keep *_simHGCalUnsuppressedDigis_EE_*', 
        'keep *_simHGCalUnsuppressedDigis_HEfront_*', 
        'keep *_simHGCalUnsuppressedDigis_HEback_*', 
        'keep *_mix_MergedCaloTruth_*'
    )
)

process.SimCalorimetryRAW = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep EBSrFlagsSorted_simEcalDigis_*_*', 
        'keep EESrFlagsSorted_simEcalDigis_*_*', 
        'keep *_simHcalUnsuppressedDigis_*_*', 
        'keep *_mix_EETimeDigi_*', 
        'keep *_mix_EBTimeDigi_*', 
        'keep *_simEcalUnsuppressedDigis_*_*', 
        'keep *_simHGCalUnsuppressedDigis_EE_*', 
        'keep *_simHGCalUnsuppressedDigis_HEfront_*', 
        'keep *_simHGCalUnsuppressedDigis_HEback_*', 
        'keep *_mix_MergedCaloTruth_*'
    )
)

process.SimCalorimetryRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_simHGCalUnsuppressedDigis_EE_*', 
        'keep *_simHGCalUnsuppressedDigis_HEfront_*', 
        'keep *_simHGCalUnsuppressedDigis_HEback_*', 
        'keep *_mix_MergedCaloTruth_*'
    )
)

process.SimFastTimingAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.SimFastTimingFEVTDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_mix_FTLBarrel_*', 
        'keep *_mix_FTLEndcap_*', 
        'keep *_mix_InitialVertices_*'
    )
)

process.SimFastTimingPREMIX = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_mix_FTLBarrel_*', 
        'keep *_mix_FTLEndcap_*', 
        'keep *_mix_InitialVertices_*', 
        'keep *_mix_FTLBarrel_*', 
        'keep *_mix_FTLEndcap_*', 
        'keep *_mix_InitialVertices_*'
    )
)

process.SimFastTimingRAW = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_mix_FTLBarrel_*', 
        'keep *_mix_FTLEndcap_*', 
        'keep *_mix_InitialVertices_*'
    )
)

process.SimFastTimingRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_mix_FTLBarrel_*', 
        'keep *_mix_FTLEndcap_*', 
        'keep *_mix_InitialVertices_*'
    )
)

process.SimG4CoreAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.SimG4CoreHLTAODSIM = cms.PSet(
    outputCommands = cms.untracked.vstring('keep SimVertexs_g4SimHits_*_*')
)

process.SimG4CoreRAW = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*'
    )
)

process.SimG4CoreRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep edmHepMCProduct_source_*_*', 
        'keep SimTracks_g4SimHits_*_*', 
        'keep SimVertexs_g4SimHits_*_*'
    )
)

process.SimGeneralAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep *_genPUProtons_*_*'
    )
)

process.SimGeneralFEVTDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *_trackingtruthprod_*_*', 
        'drop *_electrontruth_*_*', 
        'keep *_mix_MergedTrackTruth_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*'
    )
)

process.SimGeneralPREMIX = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.SimGeneralRAW = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int6stdbitsetstdpairs_*_AffectedAPVList_*', 
        'keep int_*_bunchSpacing_*', 
        'keep *_genPUProtons_*_*', 
        'keep *_mix_MergedTrackTruth_*'
    )
)

process.SimGeneralRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep *_genPUProtons_*_*'
    )
)

process.SimMuonAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_muonSimClassifier_*_*')
)

process.SimMuonFEVTDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_simMuonCSCDigis_*_*', 
        'keep *_simMuonDTDigis_*_*', 
        'keep *_simMuonRPCDigis_*_*', 
        'keep *_simMuonGEMDigis_*_*', 
        'keep *_simMuonME0PseudoDigis_*_*', 
        'keep *_simMuonME0PseudoReDigis_*_*', 
        'keep *_simMuonME0Digis_*_*'
    )
)

process.SimMuonPREMIX = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_mix_g4SimHitsMuonDTHits_*', 
        'keep *_mix_g4SimHitsMuonCSCHits_*', 
        'keep *_mix_g4SimHitsMuonRPCHits_*', 
        'keep *_mix_g4SimHitsMuonGEMHits_*', 
        'keep *_mix_g4SimHitsMuonME0Hits_*'
    )
)

process.SimMuonRAW = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep *_simMuonCSCDigis_*_*', 
        'keep *_simMuonRPCDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonME0Digis_*_*'
    )
)

process.SimMuonRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep *_muonSimClassifier_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonME0Digis_*_*'
    )
)

process.SimTrackerAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_allTrackMCMatch_*_*')
)

process.SimTrackerDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep PixelDigiSimLinkedmDetSetVector_simSiPixelDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simSiStripDigis_*_*', 
        'drop *_mix_simSiPixelDigis*_*', 
        'drop *_mix_simSiStripDigis*_*', 
        'keep *_allTrackMCMatch_*_*'
    )
)

process.SimTrackerFEVTDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_simSiPixelDigis_*_*', 
        'keep *_simSiStripDigis_*_*', 
        'drop *_mix_simSiPixelDigis*_*', 
        'drop *_mix_simSiStripDigis*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep *_trackingParticleRecoTrackAsssociation_*_*', 
        'keep *_assoc2secStepTk_*_*', 
        'keep *_assoc2thStepTk_*_*', 
        'keep *_assoc2GsfTracks_*_*', 
        'keep *_assocOutInConversionTracks_*_*', 
        'keep *_assocInOutConversionTracks_*_*', 
        'keep *_TTClusterAssociatorFromPixelDigis_*_*', 
        'keep *_TTStubAssociatorFromPixelDigis_*_*'
    )
)

process.SimTrackerPREMIX = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep Phase2TrackerDigiedmDetSetVector_mix_*_*', 
        'keep *_*_Phase2OTDigiSimLink_*', 
        'keep *_simSiPixelDigis_*_*'
    )
)

process.SimTrackerRAW = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_allTrackMCMatch_*_*')
)

process.SimTrackerRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_allTrackMCMatch_*_*')
)

process.SubJetParameters = cms.PSet(
    nFilt = cms.int32(2),
    rcut_factor = cms.double(0.5),
    zcut = cms.double(0.1)
)

process.TC_ME1234 = cms.PSet(
    SegmentSorting = cms.int32(1),
    chi2Max = cms.double(6000.0),
    chi2ndfProbMin = cms.double(0.0001),
    dPhiFineMax = cms.double(0.02),
    dPhiMax = cms.double(0.003),
    dRPhiFineMax = cms.double(6.0),
    dRPhiMax = cms.double(1.2),
    minLayersApart = cms.int32(2),
    verboseInfo = cms.untracked.bool(True)
)

process.TC_ME1A = cms.PSet(
    SegmentSorting = cms.int32(1),
    chi2Max = cms.double(6000.0),
    chi2ndfProbMin = cms.double(0.0001),
    dPhiFineMax = cms.double(0.013),
    dPhiMax = cms.double(0.00198),
    dRPhiFineMax = cms.double(3.0),
    dRPhiMax = cms.double(0.6),
    minLayersApart = cms.int32(2),
    verboseInfo = cms.untracked.bool(True)
)

process.TICL_AOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_ticlMultiClustersFromTrackstersEM_*_*', 
        'keep *_ticlMultiClustersFromTrackstersHAD_*_*', 
        'keep *_ticlMultiClustersFromTrackstersTrk_*_*', 
        'keep *_ticlMultiClustersFromTrackstersTrkEM_*_*', 
        'keep *_ticlMultiClustersFromTrackstersMIP_*_*', 
        'keep *_ticlMultiClustersFromTrackstersMerge_*_*'
    )
)

process.TICL_FEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_ticlTrackstersTrkEM_*_*', 
        'keep *_ticlTrackstersEM_*_*', 
        'keep *_ticlTrackstersHAD_*_*', 
        'keep *_ticlTrackstersTrk_*_*', 
        'keep *_ticlTrackstersMIP_*_*', 
        'keep *_ticlTrackstersMerge_*_*', 
        'keep *_ticlTrackstersHFNoseEM_*_*', 
        'keep *_ticlTrackstersHFNoseMIP_*_*', 
        'keep *_ticlTrackstersHFNoseMerge_*_*', 
        'keep *_pfTICL_*_*', 
        'keep *_ticlMultiClustersFromTrackstersEM_*_*', 
        'keep *_ticlMultiClustersFromTrackstersHAD_*_*', 
        'keep *_ticlMultiClustersFromTrackstersTrk_*_*', 
        'keep *_ticlMultiClustersFromTrackstersTrkEM_*_*', 
        'keep *_ticlMultiClustersFromTrackstersMIP_*_*', 
        'keep *_ticlMultiClustersFromTrackstersMerge_*_*'
    )
)

process.TICL_RECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_ticlTrackstersTrkEM_*_*', 
        'keep *_ticlTrackstersEM_*_*', 
        'keep *_ticlTrackstersHAD_*_*', 
        'keep *_ticlTrackstersTrk_*_*', 
        'keep *_ticlTrackstersMIP_*_*', 
        'keep *_ticlTrackstersMerge_*_*', 
        'keep *_ticlTrackstersHFNoseEM_*_*', 
        'keep *_ticlTrackstersHFNoseMIP_*_*', 
        'keep *_ticlTrackstersHFNoseMerge_*_*', 
        'keep *_pfTICL_*_*', 
        'keep *_ticlMultiClustersFromTrackstersEM_*_*', 
        'keep *_ticlMultiClustersFromTrackstersHAD_*_*', 
        'keep *_ticlMultiClustersFromTrackstersTrk_*_*', 
        'keep *_ticlMultiClustersFromTrackstersTrkEM_*_*', 
        'keep *_ticlMultiClustersFromTrackstersMIP_*_*', 
        'keep *_ticlMultiClustersFromTrackstersMerge_*_*'
    )
)

process.TSPhiParametersBlock = cms.PSet(
    TSPhiParameters = cms.PSet(
        Debug = cms.untracked.bool(False),
        TSMCCE1 = cms.bool(True),
        TSMCCE2 = cms.bool(False),
        TSMCCEC = cms.bool(False),
        TSMCGS1 = cms.bool(True),
        TSMCGS2 = cms.bool(True),
        TSMGS1 = cms.int32(1),
        TSMGS2 = cms.int32(1),
        TSMHSP = cms.int32(1),
        TSMHTE1 = cms.bool(True),
        TSMHTE2 = cms.bool(False),
        TSMHTEC = cms.bool(False),
        TSMMSK1 = cms.int32(312),
        TSMMSK2 = cms.int32(312),
        TSMNOE1 = cms.bool(True),
        TSMNOE2 = cms.bool(False),
        TSMNOEC = cms.bool(False),
        TSMWORD = cms.int32(255),
        TSSCCE1 = cms.bool(True),
        TSSCCE2 = cms.bool(False),
        TSSCCEC = cms.bool(False),
        TSSCGS1 = cms.bool(True),
        TSSCGS2 = cms.bool(True),
        TSSGS1 = cms.int32(1),
        TSSGS2 = cms.int32(1),
        TSSHTE1 = cms.bool(True),
        TSSHTE2 = cms.bool(False),
        TSSHTEC = cms.bool(False),
        TSSMSK1 = cms.int32(312),
        TSSMSK2 = cms.int32(312),
        TSSNOE1 = cms.bool(True),
        TSSNOE2 = cms.bool(False),
        TSSNOEC = cms.bool(False),
        TSTREN0 = cms.bool(True),
        TSTREN1 = cms.bool(True),
        TSTREN10 = cms.bool(True),
        TSTREN11 = cms.bool(True),
        TSTREN12 = cms.bool(True),
        TSTREN13 = cms.bool(True),
        TSTREN14 = cms.bool(True),
        TSTREN15 = cms.bool(True),
        TSTREN16 = cms.bool(True),
        TSTREN17 = cms.bool(True),
        TSTREN18 = cms.bool(True),
        TSTREN19 = cms.bool(True),
        TSTREN2 = cms.bool(True),
        TSTREN20 = cms.bool(True),
        TSTREN21 = cms.bool(True),
        TSTREN22 = cms.bool(True),
        TSTREN23 = cms.bool(True),
        TSTREN3 = cms.bool(True),
        TSTREN4 = cms.bool(True),
        TSTREN5 = cms.bool(True),
        TSTREN6 = cms.bool(True),
        TSTREN7 = cms.bool(True),
        TSTREN8 = cms.bool(True),
        TSTREN9 = cms.bool(True)
    )
)

process.TSThetaParametersBlock = cms.PSet(
    TSThetaParameters = cms.PSet(
        Debug = cms.untracked.bool(False)
    )
)

process.TUParamsBlock = cms.PSet(
    Debug = cms.untracked.bool(False)
)

process.TcdsEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_tcdsDigis_*_*')
)

process.ThresholdPtTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('ThresholdPtTrajectoryFilter'),
    minHitsThresholdPt = cms.int32(3),
    nSigmaThresholdPt = cms.double(5.0),
    thresholdPt = cms.double(10.0)
)

process.TimingFillerBlock = cms.PSet(
    TimingFillerParameters = cms.PSet(
        CSCTimingParameters = cms.PSet(
            CSCStripError = cms.double(7.0),
            CSCStripTimeOffset = cms.double(0.0),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            PruneCut = cms.double(9.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring(
                    'SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'
                ),
                RPCLayers = cms.bool(True)
            ),
            UseStripTime = cms.bool(True),
            UseWireTime = cms.bool(True),
            debug = cms.bool(False)
        ),
        DTTimingParameters = cms.PSet(
            DTTimeOffset = cms.double(0.0),
            DoWireCorr = cms.bool(True),
            DropTheta = cms.bool(True),
            HitError = cms.double(2.8),
            HitsMin = cms.int32(3),
            PruneCut = cms.double(5.0),
            RequireBothProjections = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring(
                    'SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'
                ),
                RPCLayers = cms.bool(True)
            ),
            UseSegmentT0 = cms.bool(False),
            debug = cms.bool(False)
        ),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        MatchParameters = cms.PSet(
            CSCsegments = cms.InputTag("cscSegments"),
            DTradius = cms.double(0.01),
            DTsegments = cms.InputTag("dt4DSegments"),
            RPChits = cms.InputTag("rpcRecHits"),
            TightMatchCSC = cms.bool(True),
            TightMatchDT = cms.bool(False)
        ),
        UseCSC = cms.bool(True),
        UseDT = cms.bool(True),
        UseECAL = cms.bool(False)
    )
)

process.TrackAssociatorParameterBlock = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        dRHcal = cms.double(9999.0),
        dRHcalPreselection = cms.double(0.2),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(True),
        useGEM = cms.bool(False),
        useHO = cms.bool(True),
        useHcal = cms.bool(True),
        useME0 = cms.bool(False),
        useMuon = cms.bool(True),
        usePreshower = cms.bool(False)
    )
)

process.TrackAssociatorParameters = cms.PSet(
    CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
    CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
    DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
    EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
    HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
    HORecHitCollectionLabel = cms.InputTag("horeco"),
    ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
    accountForTrajectoryChangeCalo = cms.bool(False),
    dREcal = cms.double(9999.0),
    dREcalPreselection = cms.double(0.05),
    dRHcal = cms.double(9999.0),
    dRHcalPreselection = cms.double(0.2),
    dRMuon = cms.double(9999.0),
    dRMuonPreselection = cms.double(0.2),
    muonMaxDistanceSigmaX = cms.double(0.0),
    muonMaxDistanceSigmaY = cms.double(0.0),
    muonMaxDistanceX = cms.double(5.0),
    muonMaxDistanceY = cms.double(5.0),
    propagateAllDirections = cms.bool(True),
    trajectoryUncertaintyTolerance = cms.double(-1.0),
    truthMatch = cms.bool(False),
    useCalo = cms.bool(False),
    useEcal = cms.bool(True),
    useGEM = cms.bool(False),
    useHO = cms.bool(True),
    useHcal = cms.bool(True),
    useME0 = cms.bool(False),
    useMuon = cms.bool(True),
    usePreshower = cms.bool(False)
)

process.TrackerDTCProducer_params = cms.PSet(
    BranchAccepted = cms.string('StubAccepted'),
    BranchLost = cms.string('StubLost'),
    CheckHistory = cms.bool(False),
    EnableTruncation = cms.bool(True),
    InputTag = cms.InputTag("TTStubsFromPhase2TrackerDigis","StubAccepted"),
    UseHybrid = cms.bool(True)
)

process.TrackerKinkFinderParametersBlock = cms.PSet(
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        MTDRecHitBuilder = cms.string('MTDRecHitBuilder'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        diagonalOnly = cms.bool(False),
        usePosition = cms.bool(True)
    )
)

process.TrackingToolsAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoTracks_GsfGlobalElectronTest_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTracks_electronGsfTracksFromMultiCl_*_*'
    )
)

process.TrackingToolsFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_electronGsfTracks_*_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_GsfGlobalElectronTest_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTracks_electronGsfTracksFromMultiCl_*_*', 
        'keep recoGsfTracks_electronGsfTracksFromMultiCl_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracksFromMultiCl_*_*', 
        'keep recoTrackExtras_electronGsfTracksFromMultiCl_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracksFromMultiCl_*_*', 
        'keep *_electronMergedSeedsFromMultiCl_*_*'
    )
)

process.TrackingToolsRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_GsfGlobalElectronTest_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTracks_electronGsfTracksFromMultiCl_*_*', 
        'keep recoGsfTracks_electronGsfTracksFromMultiCl_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracksFromMultiCl_*_*', 
        'keep recoTrackExtras_electronGsfTracksFromMultiCl_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracksFromMultiCl_*_*', 
        'keep *_electronMergedSeedsFromMultiCl_*_*'
    )
)

process.TracoParametersBlock = cms.PSet(
    TracoParameters = cms.PSet(
        BTIC = cms.int32(32),
        DD = cms.int32(18),
        Debug = cms.untracked.int32(0),
        FHISM = cms.int32(0),
        FHTMSK = cms.int32(0),
        FHTPRF = cms.int32(1),
        FLTMSK = cms.int32(1),
        FPRGCOMP = cms.int32(2),
        FSLMSK = cms.int32(0),
        IBTIOFF = cms.int32(0),
        KPRGCOM = cms.int32(255),
        KRAD = cms.int32(0),
        LTF = cms.int32(0),
        LTS = cms.int32(0),
        LVALIDIFH = cms.int32(0),
        REUSEI = cms.int32(1),
        REUSEO = cms.int32(1),
        SHISM = cms.int32(0),
        SHTMSK = cms.int32(0),
        SHTPRF = cms.int32(1),
        SLTMSK = cms.int32(1),
        SPRGCOMP = cms.int32(2),
        SSLMSK = cms.int32(0),
        TRGENB0 = cms.int32(1),
        TRGENB1 = cms.int32(1),
        TRGENB10 = cms.int32(1),
        TRGENB11 = cms.int32(1),
        TRGENB12 = cms.int32(1),
        TRGENB13 = cms.int32(1),
        TRGENB14 = cms.int32(1),
        TRGENB15 = cms.int32(1),
        TRGENB2 = cms.int32(1),
        TRGENB3 = cms.int32(1),
        TRGENB4 = cms.int32(1),
        TRGENB5 = cms.int32(1),
        TRGENB6 = cms.int32(1),
        TRGENB7 = cms.int32(1),
        TRGENB8 = cms.int32(1),
        TRGENB9 = cms.int32(1)
    )
)

process.TrajectoryBuilderForConversions = cms.PSet(
    ComponentType = cms.string('CkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    estimator = cms.string('eleLooseChi2'),
    intermediateCleaning = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(5),
    propagatorAlong = cms.string('alongMomElePropagator'),
    propagatorOpposite = cms.string('oppositeToMomElePropagator'),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('TrajectoryFilterForConversions')
    ),
    updator = cms.string('KFUpdator')
)

process.TrajectoryBuilderForElectrons = cms.PSet(
    ComponentType = cms.string('CkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    estimator = cms.string('ElectronChi2'),
    intermediateCleaning = cms.bool(False),
    lostHitPenalty = cms.double(90.0),
    maxCand = cms.int32(5),
    propagatorAlong = cms.string('fwdGsfElectronPropagator'),
    propagatorOpposite = cms.string('bwdGsfElectronPropagator'),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('TrajectoryFilterForElectrons')
    ),
    updator = cms.string('KFUpdator')
)

process.TrajectoryFilterForConversions = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(1),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(-1),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(-1),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.TrajectoryFilterForElectrons = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(1),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(-1),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(-1),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(2.0),
    minimumNumberOfHits = cms.int32(5),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.be_proc = cms.PSet(
    C3d_parameters = cms.PSet(
        histoMax_C3d_clustering_parameters = cms.PSet(
            EGIdentification = cms.PSet(
                CategoriesEtaMax = cms.vdouble(2.7, 3.0),
                CategoriesEtaMin = cms.vdouble(1.5, 2.7),
                CategoriesPtMax = cms.vdouble(1000000.0, 1000000.0),
                CategoriesPtMin = cms.vdouble(0.0, 0.0),
                Inputs = cms.vstring(
                    'cl3d_coreshowerlength', 
                    'cl3d_showerlength', 
                    'cl3d_firstlayer', 
                    'cl3d_maxlayer', 
                    'cl3d_szz', 
                    'cl3d_srrmean', 
                    'cl3d_srrtot', 
                    'cl3d_seetot', 
                    'cl3d_spptot'
                ),
                Weights = cms.vstring(
                    'L1Trigger/L1THGCal/data/egamma_id_histomax_3151_loweta_v0.xml', 
                    'L1Trigger/L1THGCal/data/egamma_id_histomax_3151_higheta_v0.xml'
                ),
                WorkingPoints = cms.vdouble(0.8292287, 0.9932326)
            ),
            cluster_association = cms.string('NearestNeighbour'),
            dR_multicluster = cms.double(0.0),
            dR_multicluster_byLayer_coefficientA = cms.vdouble(
                0, 0.015, 0.015, 0.015, 0.015, 
                0.015, 0.015, 0.015, 0.02, 0.02, 
                0.02, 0.02, 0.02, 0.02, 0.02, 
                0.03, 0.03, 0.03, 0.03, 0.03, 
                0.03, 0.03, 0.04, 0.04, 0.04, 
                0.04, 0.04, 0.04, 0.04, 0.04, 
                0.04, 0.04, 0.04, 0.04, 0.04, 
                0.05, 0.05, 0.05, 0.05, 0.05, 
                0.05, 0.05, 0.05, 0.05, 0.05, 
                0.05, 0.05, 0.05, 0.05, 0.05, 
                0.05, 0.05, 0.05
            ),
            dR_multicluster_byLayer_coefficientB = cms.vdouble(
                0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 
                0, 0, 0, 0, 0, 
                0, 0, 0
            ),
            minPt_multicluster = cms.double(0.5),
            shape_distance = cms.double(0.015),
            shape_threshold = cms.double(1.0)
        ),
        histoMax_C3d_seeding_parameters = cms.PSet(
            binSumsHisto = cms.vuint32(
                13, 11, 11, 11, 9, 
                9, 9, 7, 7, 7, 
                7, 7, 7, 5, 5, 
                5, 5, 5, 5, 5, 
                5, 5, 5, 5, 5, 
                5, 5, 5, 3, 3, 
                3, 3, 3, 3, 3, 
                3, 3, 3, 3, 3, 
                3, 3
            ),
            kROverZMax = cms.double(0.58),
            kROverZMin = cms.double(0.076),
            nBins_X1_histo_multicluster = cms.uint32(42),
            nBins_X2_histo_multicluster = cms.uint32(216),
            neighbour_weights = cms.vdouble(
                0, 0.25, 0, 0.25, 0, 
                0.25, 0, 0.25, 0
            ),
            seed_position = cms.string('TCWeighted'),
            seed_smoothing_ecal = cms.vdouble(
                1.0, 1.0, 1.0, 1.0, 1.1, 
                1.0, 1.0, 1.0, 1.0
            ),
            seed_smoothing_hcal = cms.vdouble(
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 2.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0
            ),
            seeding_space = cms.string('RPhi'),
            threshold_histo_multicluster = cms.double(7.5),
            type_histoalgo = cms.string('HistoMaxC3d')
        ),
        type_multicluster = cms.string('Histo')
    ),
    ProcessorName = cms.string('HGCalBackendLayer2Processor3DClustering'),
    energy_interpretations = cms.VPSet(cms.PSet(
        dr_bylayer = cms.vdouble(
            0.015, 0.015, 0.015, 0.015, 0.015, 
            0.015, 0.015, 0.015, 0.015, 0.015, 
            0.015, 0.015, 0.015, 0.015, 0.015
        ),
        layer_containment_corrs = cms.vdouble(
            0.0, 0.0, 1.28, 1.09, 1.0, 
            1.07, 1.09, 1.04, 1.0, 1.09, 
            1.07, 1.03, 0.93, 1.4, 1.89
        ),
        scale_correction_coeff = cms.vdouble(52.99, -24.96),
        type = cms.string('HGCalTriggerClusterInterpretationEM')
    ))
)

process.best_conc_proc = cms.PSet(
    Method = cms.vstring(
        'bestChoiceSelect', 
        'bestChoiceSelect', 
        'bestChoiceSelect'
    ),
    NData = cms.vuint32(
        13, 42, 75, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 13, 40, 74, 80, 
        114, 148, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 12, 39, 72, 
        82, 116, 146, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 12, 26, 
        53, 80, 114, 148, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 12, 
        25, 52, 79, 112, 146, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 24, 51, 78, 111, 
        144, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0
    ),
    ProcessorName = cms.string('HGCalConcentratorProcessorSelection'),
    coarseTCCompression = cms.PSet(
        exponentBits = cms.uint32(4),
        mantissaBits = cms.uint32(3),
        rounding = cms.bool(True)
    ),
    coarsenTriggerCells = cms.vuint32(0, 0, 0),
    ctcSize = cms.vuint32(
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2
    ),
    fixedDataSizePerHGCROC = cms.bool(False),
    superTCCalibration = cms.PSet(
        ProcessorName = cms.string('HGCalVFEProcessorSums'),
        ThicknessCorrections = cms.vdouble(1.66504854369, 1.0, 0.666019417476),
        adcnBits_sc = cms.uint32(10),
        adcnBits_si = cms.uint32(10),
        adcsaturation_sc = cms.double(68.75),
        adcsaturation_si = cms.double(100),
        dEdXweights = cms.vdouble(
            0, 8.894541, 0, 21.875814, 0, 
            21.875814, 0, 21.875814, 0, 21.875814, 
            0, 21.865764, 0, 21.875814, 0, 
            21.876338, 0, 21.876338, 0, 21.876338, 
            0, 21.876338, 0, 21.876338, 0, 
            21.876338, 0, 21.876338, 0, 83.906398, 
            51.444192, 51.444192, 51.444192, 51.444192, 51.444192, 
            51.444192, 51.444192, 51.444192, 51.444192, 51.444192, 
            69.513118, 87.582044, 87.582044, 87.582044, 87.582044, 
            87.582044, 87.214571, 86.888309, 86.92952, 86.92952, 
            86.92952
        ),
        dEdXweightsNose = cms.vdouble(
            0.0, 39.500245, 39.756638, 39.756638, 39.756638, 
            39.756638, 66.020266, 92.283895, 92.283895
        ),
        exponentBits = cms.uint32(4),
        fCperMIP = cms.double(3.43),
        fCperMIPnose = cms.vdouble(1.25, 2.57, 3.88),
        linLSB_sc = cms.double(0.067138671875),
        linLSB_si = cms.double(0.09765625),
        linnBits = cms.uint32(16),
        mantissaBits = cms.uint32(4),
        noiseScintillator = cms.PSet(
            refToPSet_ = cms.string('HGCAL_noise_heback')
        ),
        noiseSilicon = cms.PSet(
            refToPSet_ = cms.string('HGCAL_noise_fC')
        ),
        noiseThreshold = cms.double(3),
        oot_coefficients = cms.vdouble(0.0, 0.0),
        rounding = cms.bool(True),
        scintillatorCellLSB_MIP = cms.double(0.067138671875),
        siliconCellLSB_fC = cms.double(0.09765625),
        tdcOnset_sc = cms.double(55),
        tdcOnset_si = cms.double(60),
        tdcnBits_sc = cms.uint32(12),
        tdcnBits_si = cms.uint32(12),
        tdcsaturation_sc = cms.double(1000),
        tdcsaturation_si = cms.double(10000),
        thickCorr = cms.double(0.77),
        thickCorrNose = cms.vdouble(1.132, 1.092, 1.084)
    )
)

process.bmtfKalmanTrackingSettings = cms.PSet(
    aPhi = cms.vdouble(1.942, 0.03125, 0.0273438, 0.015625),
    aPhiB = cms.vdouble(-1.508, -0.123047, -0.174805, -0.144531),
    aPhiBNLO = cms.vdouble(0.000331, 0, 0, 0),
    bPhi = cms.vdouble(-1, 0.154297, 0.173828, 0.147461),
    bPhiB = cms.vdouble(-1, 1.15332, 1.17285, 1.14648),
    chiSquare = cms.vdouble(0.0, 0.109375, 0.234375, 0.359375),
    chiSquareCut = cms.vint32(126, 126, 126, 126, 126),
    chiSquareCutCurvMax = cms.vint32(2500, 2500, 2500, 2500, 2500),
    chiSquareCutPattern = cms.vint32(7, 11, 13, 14, 15),
    chiSquareCutTight = cms.vint32(
        40, 126, 60, 126, 126, 
        126
    ),
    combos1 = cms.vint32(),
    combos2 = cms.vint32(3),
    combos3 = cms.vint32(5, 6, 7),
    combos4 = cms.vint32(
        9, 10, 11, 12, 13, 
        14, 15
    ),
    eLoss = cms.vdouble(0.000765, 0, 0, 0),
    etaLUT0 = cms.vdouble(8.946, 7.508, 6.279, 6.399),
    etaLUT1 = cms.vdouble(0.159, 0.116, 0.088, 0.128),
    initialK = cms.vdouble(-1.196, -1.581, -2.133, -2.263),
    initialK2 = cms.vdouble(-0.000326, -0.0007165, 0.002305, -0.00563),
    lutFile = cms.string('L1Trigger/L1TMuon/data/bmtf_luts/kalmanLUTs.root'),
    mScatteringPhi = cms.vdouble(0.00249, 5.47e-05, 3.49e-05, 1.37e-05),
    mScatteringPhiB = cms.vdouble(0.00722, 0.003461, 0.004447, 0.00412),
    phiAt2 = cms.double(0.15918),
    pointResolutionPhi = cms.double(1.0),
    pointResolutionPhiB = cms.double(500.0),
    pointResolutionVertex = cms.double(1.0),
    trackComp = cms.vdouble(1.75, 1.25, 0.625, 0.25),
    trackCompCut = cms.vint32(
        15, 15, 15, 15, 15, 
        15
    ),
    trackCompCutCurvMax = cms.vint32(
        34, 34, 34, 34, 34, 
        34
    ),
    trackCompCutPattern = cms.vint32(
        3, 5, 6, 9, 10, 
        12
    ),
    trackCompErr1 = cms.vdouble(2.0, 2.0, 2.0, 2.0),
    trackCompErr2 = cms.vdouble(0.21875, 0.21875, 0.21875, 0.3125),
    useOfflineAlgo = cms.bool(False),
    verbose = cms.bool(False)
)

process.c2d_calib_pset = cms.PSet(
    applyLayerCalibration = cms.bool(False),
    calibSF_cluster = cms.double(1.0),
    layerWeights = cms.vdouble(
        0.0, 0.0183664, 0.0, 0.0305622, 0.0, 
        0.0162589, 0.0, 0.0143918, 0.0, 0.0134475, 
        0.0, 0.0185754, 0.0, 0.0204934, 0.0, 
        0.016901, 0.0, 0.0207958, 0.0, 0.0167985, 
        0.0, 0.0238385, 0.0, 0.0301146, 0.0, 
        0.0274622, 0.0, 0.0468671, 0.0, 0.078819, 
        0.0555831, 0.0609312, 0.0610768, 0.0657626, 0.0465653, 
        0.0629383, 0.0610061, 0.0517326, 0.0492882, 0.0699336, 
        0.0673457, 0.119896, 0.125327, 0.143235, 0.153295, 
        0.104777, 0.109345, 0.161386, 0.174656, 0.108053, 
        0.121674, 0.1171, 0.328053
    )
)

process.c2d_thresholds_pset = cms.PSet(
    clustering_threshold_scintillator = cms.double(1.5),
    clustering_threshold_silicon = cms.double(1.5),
    seeding_threshold_scintillator = cms.double(3.75),
    seeding_threshold_silicon = cms.double(3.75)
)

process.ckfBaseInOutTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minimumNumberOfHits = cms.int32(5),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.ckfBaseTrajectoryFilterP5 = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(3),
    maxLostHits = cms.int32(4),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.5),
    minimumNumberOfHits = cms.int32(5),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.ckfTrajectoryFilterBeamHaloMuon = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(2),
    maxLostHits = cms.int32(3),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.1),
    minimumNumberOfHits = cms.int32(4),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.cleaningAlgoConfig = cms.PSet(
    cThreshold_barrel = cms.double(4),
    cThreshold_double = cms.double(10),
    cThreshold_endcap = cms.double(15),
    e4e1Threshold_barrel = cms.double(0.08),
    e4e1Threshold_endcap = cms.double(0.3),
    e4e1_a_barrel = cms.double(0.02),
    e4e1_a_endcap = cms.double(0.02),
    e4e1_b_barrel = cms.double(0.02),
    e4e1_b_endcap = cms.double(-0.0125),
    e6e2thresh = cms.double(0.04),
    ignoreOutOfTimeThresh = cms.double(1000000000.0),
    tightenCrack_e1_double = cms.double(2),
    tightenCrack_e1_single = cms.double(1),
    tightenCrack_e4e1_single = cms.double(2.5),
    tightenCrack_e6e2_double = cms.double(3)
)

process.coarseTCCompression_proc = cms.PSet(
    exponentBits = cms.uint32(4),
    mantissaBits = cms.uint32(3),
    rounding = cms.bool(True)
)

process.coarsetc_equalshare_proc = cms.PSet(
    Method = cms.vstring(
        'superTriggerCellSelect', 
        'superTriggerCellSelect', 
        'superTriggerCellSelect'
    ),
    ProcessorName = cms.string('HGCalConcentratorProcessorSelection'),
    coarseTCCompression = cms.PSet(
        exponentBits = cms.uint32(4),
        mantissaBits = cms.uint32(3),
        rounding = cms.bool(True)
    ),
    coarsenTriggerCells = cms.vuint32(0, 0, 0),
    ctcSize = cms.vuint32(
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2
    ),
    fixedDataSizePerHGCROC = cms.bool(True),
    stcSize = cms.vuint32(
        4, 4, 4, 4, 4, 
        4, 4, 4, 4, 4, 
        4, 4, 4, 4, 4, 
        4, 4, 4, 4, 4, 
        4, 4, 4, 4, 4, 
        4, 4, 4, 4, 4, 
        4, 4, 4, 4, 4, 
        4, 4, 4, 4, 4, 
        4, 4, 4, 4, 4, 
        4, 4, 4, 4, 4, 
        4, 4, 4, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8
    ),
    superTCCalibration = cms.PSet(
        ProcessorName = cms.string('HGCalVFEProcessorSums'),
        ThicknessCorrections = cms.vdouble(1.66504854369, 1.0, 0.666019417476),
        adcnBits_sc = cms.uint32(10),
        adcnBits_si = cms.uint32(10),
        adcsaturation_sc = cms.double(68.75),
        adcsaturation_si = cms.double(100),
        dEdXweights = cms.vdouble(
            0, 8.894541, 0, 21.875814, 0, 
            21.875814, 0, 21.875814, 0, 21.875814, 
            0, 21.865764, 0, 21.875814, 0, 
            21.876338, 0, 21.876338, 0, 21.876338, 
            0, 21.876338, 0, 21.876338, 0, 
            21.876338, 0, 21.876338, 0, 83.906398, 
            51.444192, 51.444192, 51.444192, 51.444192, 51.444192, 
            51.444192, 51.444192, 51.444192, 51.444192, 51.444192, 
            69.513118, 87.582044, 87.582044, 87.582044, 87.582044, 
            87.582044, 87.214571, 86.888309, 86.92952, 86.92952, 
            86.92952
        ),
        dEdXweightsNose = cms.vdouble(
            0.0, 39.500245, 39.756638, 39.756638, 39.756638, 
            39.756638, 66.020266, 92.283895, 92.283895
        ),
        exponentBits = cms.uint32(4),
        fCperMIP = cms.double(3.43),
        fCperMIPnose = cms.vdouble(1.25, 2.57, 3.88),
        linLSB_sc = cms.double(0.067138671875),
        linLSB_si = cms.double(0.09765625),
        linnBits = cms.uint32(16),
        mantissaBits = cms.uint32(4),
        noiseScintillator = cms.PSet(
            refToPSet_ = cms.string('HGCAL_noise_heback')
        ),
        noiseSilicon = cms.PSet(
            refToPSet_ = cms.string('HGCAL_noise_fC')
        ),
        noiseThreshold = cms.double(3),
        oot_coefficients = cms.vdouble(0.0, 0.0),
        rounding = cms.bool(True),
        scintillatorCellLSB_MIP = cms.double(0.067138671875),
        siliconCellLSB_fC = cms.double(0.09765625),
        tdcOnset_sc = cms.double(55),
        tdcOnset_si = cms.double(60),
        tdcnBits_sc = cms.uint32(12),
        tdcnBits_si = cms.uint32(12),
        tdcsaturation_sc = cms.double(1000),
        tdcsaturation_si = cms.double(10000),
        thickCorr = cms.double(0.77),
        thickCorrNose = cms.vdouble(1.132, 1.092, 1.084)
    ),
    superTCCompression = cms.PSet(
        exponentBits = cms.uint32(4),
        mantissaBits = cms.uint32(5),
        rounding = cms.bool(True)
    ),
    type_energy_division = cms.string('equalShare')
)

process.coarsetc_onebitfraction_proc = cms.PSet(
    Method = cms.vstring(
        'superTriggerCellSelect', 
        'superTriggerCellSelect', 
        'superTriggerCellSelect'
    ),
    ProcessorName = cms.string('HGCalConcentratorProcessorSelection'),
    coarseTCCompression = cms.PSet(
        exponentBits = cms.uint32(4),
        mantissaBits = cms.uint32(3),
        rounding = cms.bool(True)
    ),
    coarsenTriggerCells = cms.vuint32(0, 0, 0),
    ctcSize = cms.vuint32(
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2
    ),
    fixedDataSizePerHGCROC = cms.bool(True),
    oneBitFractionHighValue = cms.double(0.25),
    oneBitFractionLowValue = cms.double(0.0625),
    oneBitFractionThreshold = cms.double(0.125),
    stcSize = cms.vuint32(
        4, 4, 4, 4, 4, 
        4, 4, 4, 4, 4, 
        4, 4, 4, 4, 4, 
        4, 4, 4, 4, 4, 
        4, 4, 4, 4, 4, 
        4, 4, 4, 4, 4, 
        4, 4, 4, 4, 4, 
        4, 4, 4, 4, 4, 
        4, 4, 4, 4, 4, 
        4, 4, 4, 4, 4, 
        4, 4, 4, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8, 8, 8, 8, 
        8, 8
    ),
    superTCCalibration = cms.PSet(
        ProcessorName = cms.string('HGCalVFEProcessorSums'),
        ThicknessCorrections = cms.vdouble(1.66504854369, 1.0, 0.666019417476),
        adcnBits_sc = cms.uint32(10),
        adcnBits_si = cms.uint32(10),
        adcsaturation_sc = cms.double(68.75),
        adcsaturation_si = cms.double(100),
        dEdXweights = cms.vdouble(
            0, 8.894541, 0, 21.875814, 0, 
            21.875814, 0, 21.875814, 0, 21.875814, 
            0, 21.865764, 0, 21.875814, 0, 
            21.876338, 0, 21.876338, 0, 21.876338, 
            0, 21.876338, 0, 21.876338, 0, 
            21.876338, 0, 21.876338, 0, 83.906398, 
            51.444192, 51.444192, 51.444192, 51.444192, 51.444192, 
            51.444192, 51.444192, 51.444192, 51.444192, 51.444192, 
            69.513118, 87.582044, 87.582044, 87.582044, 87.582044, 
            87.582044, 87.214571, 86.888309, 86.92952, 86.92952, 
            86.92952
        ),
        dEdXweightsNose = cms.vdouble(
            0.0, 39.500245, 39.756638, 39.756638, 39.756638, 
            39.756638, 66.020266, 92.283895, 92.283895
        ),
        exponentBits = cms.uint32(4),
        fCperMIP = cms.double(3.43),
        fCperMIPnose = cms.vdouble(1.25, 2.57, 3.88),
        linLSB_sc = cms.double(0.067138671875),
        linLSB_si = cms.double(0.09765625),
        linnBits = cms.uint32(16),
        mantissaBits = cms.uint32(4),
        noiseScintillator = cms.PSet(
            refToPSet_ = cms.string('HGCAL_noise_heback')
        ),
        noiseSilicon = cms.PSet(
            refToPSet_ = cms.string('HGCAL_noise_fC')
        ),
        noiseThreshold = cms.double(3),
        oot_coefficients = cms.vdouble(0.0, 0.0),
        rounding = cms.bool(True),
        scintillatorCellLSB_MIP = cms.double(0.067138671875),
        siliconCellLSB_fC = cms.double(0.09765625),
        tdcOnset_sc = cms.double(55),
        tdcOnset_si = cms.double(60),
        tdcnBits_sc = cms.uint32(12),
        tdcnBits_si = cms.uint32(12),
        tdcsaturation_sc = cms.double(1000),
        tdcsaturation_si = cms.double(10000),
        thickCorr = cms.double(0.77),
        thickCorrNose = cms.vdouble(1.132, 1.092, 1.084)
    ),
    superTCCompression = cms.PSet(
        exponentBits = cms.uint32(4),
        mantissaBits = cms.uint32(5),
        rounding = cms.bool(True)
    ),
    type_energy_division = cms.string('oneBitFraction')
)

process.combinedSecondaryVertexCommon = cms.PSet(
    SoftLeptonFlip = cms.bool(False),
    charmCut = cms.double(1.5),
    correctVertexMass = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    pseudoMultiplicityMin = cms.uint32(2),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    trackFlip = cms.bool(False),
    trackMultiplicityMin = cms.uint32(2),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useTrackWeights = cms.bool(True),
    vertexFlip = cms.bool(False)
)

process.constrTopological_C2d_params = cms.PSet(
    applyLayerCalibration = cms.bool(False),
    calibSF_cluster = cms.double(1.0),
    clusterType = cms.string('dRNNC2d'),
    clustering_threshold_scintillator = cms.double(1.5),
    clustering_threshold_silicon = cms.double(1.5),
    dR_cluster = cms.double(6.0),
    layerWeights = cms.vdouble(
        0.0, 0.0183664, 0.0, 0.0305622, 0.0, 
        0.0162589, 0.0, 0.0143918, 0.0, 0.0134475, 
        0.0, 0.0185754, 0.0, 0.0204934, 0.0, 
        0.016901, 0.0, 0.0207958, 0.0, 0.0167985, 
        0.0, 0.0238385, 0.0, 0.0301146, 0.0, 
        0.0274622, 0.0, 0.0468671, 0.0, 0.078819, 
        0.0555831, 0.0609312, 0.0610768, 0.0657626, 0.0465653, 
        0.0629383, 0.0610061, 0.0517326, 0.0492882, 0.0699336, 
        0.0673457, 0.119896, 0.125327, 0.143235, 0.153295, 
        0.104777, 0.109345, 0.161386, 0.174656, 0.108053, 
        0.121674, 0.1171, 0.328053
    ),
    seeding_threshold_scintillator = cms.double(3.75),
    seeding_threshold_silicon = cms.double(3.75)
)

process.conv2CkfTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    clustersToSkip = cms.InputTag("conv2Clusters"),
    estimator = cms.string('Chi2'),
    foundHitBonus = cms.double(10.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(2),
    minNrOfHitsForRebuild = cms.int32(3),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('conv2CkfTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.conv2CkfTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(1),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.1),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.convCkfTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('Chi2'),
    foundHitBonus = cms.double(10.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(2),
    minNrOfHitsForRebuild = cms.int32(3),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('convCkfTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.convCkfTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(1),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.1),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.cscRecHitDParameters = cms.PSet(
    ConstSyst_ME12 = cms.double(0.02),
    ConstSyst_ME13 = cms.double(0.03),
    ConstSyst_ME1a = cms.double(0.01),
    ConstSyst_ME1b = cms.double(0.02),
    ConstSyst_ME21 = cms.double(0.03),
    ConstSyst_ME22 = cms.double(0.03),
    ConstSyst_ME31 = cms.double(0.03),
    ConstSyst_ME32 = cms.double(0.03),
    ConstSyst_ME41 = cms.double(0.03),
    NoiseLevel_ME12 = cms.double(7.0),
    NoiseLevel_ME13 = cms.double(4.0),
    NoiseLevel_ME1a = cms.double(9.0),
    NoiseLevel_ME1b = cms.double(6.0),
    NoiseLevel_ME21 = cms.double(5.0),
    NoiseLevel_ME22 = cms.double(7.0),
    NoiseLevel_ME31 = cms.double(5.0),
    NoiseLevel_ME32 = cms.double(7.0),
    NoiseLevel_ME41 = cms.double(5.0),
    XTasymmetry_ME12 = cms.double(0.015),
    XTasymmetry_ME13 = cms.double(0.02),
    XTasymmetry_ME1a = cms.double(0.023),
    XTasymmetry_ME1b = cms.double(0.01),
    XTasymmetry_ME21 = cms.double(0.023),
    XTasymmetry_ME22 = cms.double(0.023),
    XTasymmetry_ME31 = cms.double(0.023),
    XTasymmetry_ME32 = cms.double(0.023),
    XTasymmetry_ME41 = cms.double(0.023)
)

process.custom_conc_proc = cms.PSet(
    Method = cms.vstring(
        'bestChoiceSelect', 
        'superTriggerCellSelect', 
        'superTriggerCellSelect'
    ),
    NData = cms.vuint32(
        13, 42, 75, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 13, 40, 74, 80, 
        114, 148, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 12, 39, 72, 
        82, 116, 146, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 12, 26, 
        53, 80, 114, 148, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 12, 
        25, 52, 79, 112, 146, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 24, 51, 78, 111, 
        144, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0
    ),
    ProcessorName = cms.string('HGCalConcentratorProcessorSelection'),
    coarseTCCompression = cms.PSet(
        exponentBits = cms.uint32(4),
        mantissaBits = cms.uint32(3),
        rounding = cms.bool(True)
    ),
    coarsenTriggerCells = cms.vuint32(0, 0, 0),
    ctcSize = cms.vuint32(
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2
    ),
    fixedDataSizePerHGCROC = cms.bool(False),
    stcSize = cms.vuint32(
        4, 4, 4, 4, 4, 
        4, 4, 4, 4, 4, 
        4, 4, 4, 4, 4, 
        4, 4, 4, 4, 4, 
        4, 4, 4, 4, 4, 
        4, 4, 4, 4, 4, 
        4, 4, 4, 4, 4, 
        4, 4, 4, 4, 4, 
        4, 4, 4, 4, 4, 
        4, 4, 4, 4, 4, 
        4, 4, 4, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16
    ),
    superTCCalibration = cms.PSet(
        ProcessorName = cms.string('HGCalVFEProcessorSums'),
        ThicknessCorrections = cms.vdouble(1.66504854369, 1.0, 0.666019417476),
        adcnBits_sc = cms.uint32(10),
        adcnBits_si = cms.uint32(10),
        adcsaturation_sc = cms.double(68.75),
        adcsaturation_si = cms.double(100),
        dEdXweights = cms.vdouble(
            0, 8.894541, 0, 21.875814, 0, 
            21.875814, 0, 21.875814, 0, 21.875814, 
            0, 21.865764, 0, 21.875814, 0, 
            21.876338, 0, 21.876338, 0, 21.876338, 
            0, 21.876338, 0, 21.876338, 0, 
            21.876338, 0, 21.876338, 0, 83.906398, 
            51.444192, 51.444192, 51.444192, 51.444192, 51.444192, 
            51.444192, 51.444192, 51.444192, 51.444192, 51.444192, 
            69.513118, 87.582044, 87.582044, 87.582044, 87.582044, 
            87.582044, 87.214571, 86.888309, 86.92952, 86.92952, 
            86.92952
        ),
        dEdXweightsNose = cms.vdouble(
            0.0, 39.500245, 39.756638, 39.756638, 39.756638, 
            39.756638, 66.020266, 92.283895, 92.283895
        ),
        exponentBits = cms.uint32(4),
        fCperMIP = cms.double(3.43),
        fCperMIPnose = cms.vdouble(1.25, 2.57, 3.88),
        linLSB_sc = cms.double(0.067138671875),
        linLSB_si = cms.double(0.09765625),
        linnBits = cms.uint32(16),
        mantissaBits = cms.uint32(4),
        noiseScintillator = cms.PSet(
            refToPSet_ = cms.string('HGCAL_noise_heback')
        ),
        noiseSilicon = cms.PSet(
            refToPSet_ = cms.string('HGCAL_noise_fC')
        ),
        noiseThreshold = cms.double(3),
        oot_coefficients = cms.vdouble(0.0, 0.0),
        rounding = cms.bool(True),
        scintillatorCellLSB_MIP = cms.double(0.067138671875),
        siliconCellLSB_fC = cms.double(0.09765625),
        tdcOnset_sc = cms.double(55),
        tdcOnset_si = cms.double(60),
        tdcnBits_sc = cms.uint32(12),
        tdcnBits_si = cms.uint32(12),
        tdcsaturation_sc = cms.double(1000),
        tdcsaturation_si = cms.double(10000),
        thickCorr = cms.double(0.77),
        thickCorrNose = cms.vdouble(1.132, 1.092, 1.084)
    ),
    superTCCompression = cms.PSet(
        exponentBits = cms.uint32(4),
        mantissaBits = cms.uint32(5),
        rounding = cms.bool(True)
    ),
    threshold_scintillator = cms.double(2.0),
    threshold_silicon = cms.double(2.0),
    type_energy_division = cms.string('superTriggerCell')
)

process.dEdX = cms.PSet(
    weights = cms.vdouble(
        0.0, 8.894541, 10.937907, 10.937907, 10.937907, 
        10.937907, 10.937907, 10.937907, 10.937907, 10.937907, 
        10.932882, 10.932882, 10.937907, 10.937907, 10.938169, 
        10.938169, 10.938169, 10.938169, 10.938169, 10.938169, 
        10.938169, 10.938169, 10.938169, 10.938169, 10.938169, 
        10.938169, 10.938169, 10.938169, 32.332097, 51.574301, 
        51.444192, 51.444192, 51.444192, 51.444192, 51.444192, 
        51.444192, 51.444192, 51.444192, 51.444192, 51.444192, 
        69.513118, 87.582044, 87.582044, 87.582044, 87.582044, 
        87.582044, 87.214571, 86.888309, 86.92952, 86.92952, 
        86.92952
    ),
    weightsNose = cms.vdouble(
        0.0, 39.500245, 39.756638, 39.756638, 39.756638, 
        39.756638, 66.020266, 92.283895, 92.283895
    )
)

process.dbscan_C3d_params = cms.PSet(
    EGIdentification = cms.PSet(
        CategoriesEtaMax = cms.vdouble(2.7, 3.0),
        CategoriesEtaMin = cms.vdouble(1.5, 2.7),
        CategoriesPtMax = cms.vdouble(1000000.0, 1000000.0),
        CategoriesPtMin = cms.vdouble(0.0, 0.0),
        Inputs = cms.vstring(
            'cl3d_firstlayer', 
            'cl3d_coreshowerlength', 
            'cl3d_maxlayer', 
            'cl3d_srrmean'
        ),
        Weights = cms.vstring(
            'L1Trigger/L1THGCal/data/egamma_id_drnn_dbscan_loweta_v0.xml', 
            'L1Trigger/L1THGCal/data/egamma_id_drnn_dbscan_higheta_v0.xml'
        ),
        WorkingPoints = cms.vdouble(-0.04547527, 0.05559443)
    ),
    dR_multicluster = cms.double(0.0),
    dist_dbscan_multicluster = cms.double(0.005),
    minN_dbscan_multicluster = cms.uint32(3),
    minPt_multicluster = cms.double(0.5),
    type_multicluster = cms.string('DBSCANC3d')
)

process.decayMode_1Prong0Pi0 = cms.PSet(
    applyBendCorrection = cms.PSet(
        eta = cms.bool(True),
        mass = cms.bool(True),
        phi = cms.bool(True)
    ),
    assumeStripMass = cms.double(-1.0),
    maxMass = cms.string('1.'),
    maxPi0Mass = cms.double(1000000000.0),
    minMass = cms.double(-1000.0),
    minPi0Mass = cms.double(-1000.0),
    nCharged = cms.uint32(1),
    nChargedPFCandsMin = cms.uint32(1),
    nPiZeros = cms.uint32(0),
    nTracksMin = cms.uint32(1)
)

process.decayMode_1Prong1Pi0 = cms.PSet(
    applyBendCorrection = cms.PSet(
        eta = cms.bool(True),
        mass = cms.bool(True),
        phi = cms.bool(True)
    ),
    assumeStripMass = cms.double(0.1349),
    maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/100.), 4.2))'),
    maxPi0Mass = cms.double(1000000000.0),
    minMass = cms.double(0.3),
    minPi0Mass = cms.double(-1000.0),
    nCharged = cms.uint32(1),
    nChargedPFCandsMin = cms.uint32(1),
    nPiZeros = cms.uint32(1),
    nTracksMin = cms.uint32(1)
)

process.decayMode_1Prong2Pi0 = cms.PSet(
    applyBendCorrection = cms.PSet(
        eta = cms.bool(True),
        mass = cms.bool(True),
        phi = cms.bool(True)
    ),
    assumeStripMass = cms.double(0.0),
    maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/100.), 4.0))'),
    maxPi0Mass = cms.double(0.2),
    minMass = cms.double(0.4),
    minPi0Mass = cms.double(0.05),
    nCharged = cms.uint32(1),
    nChargedPFCandsMin = cms.uint32(1),
    nPiZeros = cms.uint32(2),
    nTracksMin = cms.uint32(1)
)

process.decayMode_2Prong0Pi0 = cms.PSet(
    applyBendCorrection = cms.PSet(
        eta = cms.bool(False),
        mass = cms.bool(False),
        phi = cms.bool(False)
    ),
    assumeStripMass = cms.double(-1.0),
    maxMass = cms.string('1.2'),
    maxPi0Mass = cms.double(1000000000.0),
    minMass = cms.double(0.0),
    minPi0Mass = cms.double(-1000.0),
    nCharged = cms.uint32(2),
    nChargedPFCandsMin = cms.uint32(1),
    nPiZeros = cms.uint32(0),
    nTracksMin = cms.uint32(2)
)

process.decayMode_2Prong1Pi0 = cms.PSet(
    applyBendCorrection = cms.PSet(
        eta = cms.bool(False),
        mass = cms.bool(False),
        phi = cms.bool(False)
    ),
    assumeStripMass = cms.double(-1.0),
    maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/100.), 4.0))'),
    maxPi0Mass = cms.double(1000000000.0),
    minMass = cms.double(0.0),
    minPi0Mass = cms.double(-1000.0),
    nCharged = cms.uint32(2),
    nChargedPFCandsMin = cms.uint32(1),
    nPiZeros = cms.uint32(1),
    nTracksMin = cms.uint32(2)
)

process.decayMode_3Prong0Pi0 = cms.PSet(
    applyBendCorrection = cms.PSet(
        eta = cms.bool(False),
        mass = cms.bool(False),
        phi = cms.bool(False)
    ),
    assumeStripMass = cms.double(-1.0),
    maxMass = cms.string('1.5'),
    maxPi0Mass = cms.double(1000000000.0),
    minMass = cms.double(0.8),
    minPi0Mass = cms.double(-1000.0),
    nCharged = cms.uint32(3),
    nChargedPFCandsMin = cms.uint32(1),
    nPiZeros = cms.uint32(0),
    nTracksMin = cms.uint32(2)
)

process.decayMode_3Prong1Pi0 = cms.PSet(
    applyBendCorrection = cms.PSet(
        eta = cms.bool(False),
        mass = cms.bool(False),
        phi = cms.bool(False)
    ),
    assumeStripMass = cms.double(-1.0),
    maxMass = cms.string('1.6'),
    maxPi0Mass = cms.double(1000000000.0),
    minMass = cms.double(0.9),
    minPi0Mass = cms.double(-1000.0),
    nCharged = cms.uint32(3),
    nChargedPFCandsMin = cms.uint32(1),
    nPiZeros = cms.uint32(1),
    nTracksMin = cms.uint32(2)
)

process.detachedQuadStepTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(False),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('detachedQuadStepChi2Est'),
    foundHitBonus = cms.double(10.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(2),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('detachedQuadStepTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.detachedQuadStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CompositeTrajectoryFilter'),
    filters = cms.VPSet(
        cms.PSet(
            refToPSet_ = cms.string('detachedQuadStepTrajectoryFilterBase')
        ), 
        cms.PSet(
            refToPSet_ = cms.string('ClusterShapeTrajectoryFilter')
        )
    )
)

process.detachedQuadStepTrajectoryFilterBase = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(0.301),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.075),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.detachedTripletStepTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('detachedTripletStepChi2Est'),
    foundHitBonus = cms.double(10.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(3),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('detachedTripletStepTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.detachedTripletStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CompositeTrajectoryFilter'),
    filters = cms.VPSet(cms.PSet(
        refToPSet_ = cms.string('detachedTripletStepTrajectoryFilterBase')
    ))
)

process.detachedTripletStepTrajectoryFilterBase = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(0),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutLoose')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.075),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.detachedTripletStepTrajectoryFilterShape = cms.PSet(
    ComponentType = cms.string('StripSubClusterShapeTrajectoryFilter'),
    layerMask = cms.PSet(
        TEC = cms.bool(False),
        TIB = cms.vuint32(1, 2),
        TID = cms.vuint32(1, 2),
        TOB = cms.bool(False)
    ),
    maxNSat = cms.uint32(3),
    maxTrimmedSizeDiffNeg = cms.double(1.0),
    maxTrimmedSizeDiffPos = cms.double(0.7),
    seedCutMIPs = cms.double(0.35),
    seedCutSN = cms.double(7.0),
    subclusterCutMIPs = cms.double(0.45),
    subclusterCutSN = cms.double(12.0),
    subclusterWindow = cms.double(0.7),
    trimMaxADC = cms.double(30.0),
    trimMaxFracNeigh = cms.double(0.25),
    trimMaxFracTotal = cms.double(0.15)
)

process.disc = cms.PSet(
    denominator = cms.VInputTag(
        cms.InputTag("pfMassDecorrelatedParticleNetJetTags","probXqq"), cms.InputTag("pfMassDecorrelatedParticleNetJetTags","probQCDbb"), cms.InputTag("pfMassDecorrelatedParticleNetJetTags","probQCDcc"), cms.InputTag("pfMassDecorrelatedParticleNetJetTags","probQCDb"), cms.InputTag("pfMassDecorrelatedParticleNetJetTags","probQCDc"), 
        cms.InputTag("pfMassDecorrelatedParticleNetJetTags","probQCDothers")
    ),
    name = cms.string('XqqvsQCD'),
    numerator = cms.VInputTag(cms.InputTag("pfMassDecorrelatedParticleNetJetTags","probXqq"))
)

process.distance_C2d_params = cms.PSet(
    applyLayerCalibration = cms.bool(False),
    calibSF_cluster = cms.double(1.0),
    clusterType = cms.string('dRC2d'),
    clustering_threshold_scintillator = cms.double(1.5),
    clustering_threshold_silicon = cms.double(1.5),
    dR_cluster = cms.double(6.0),
    layerWeights = cms.vdouble(
        0.0, 0.0183664, 0.0, 0.0305622, 0.0, 
        0.0162589, 0.0, 0.0143918, 0.0, 0.0134475, 
        0.0, 0.0185754, 0.0, 0.0204934, 0.0, 
        0.016901, 0.0, 0.0207958, 0.0, 0.0167985, 
        0.0, 0.0238385, 0.0, 0.0301146, 0.0, 
        0.0274622, 0.0, 0.0468671, 0.0, 0.078819, 
        0.0555831, 0.0609312, 0.0610768, 0.0657626, 0.0465653, 
        0.0629383, 0.0610061, 0.0517326, 0.0492882, 0.0699336, 
        0.0673457, 0.119896, 0.125327, 0.143235, 0.153295, 
        0.104777, 0.109345, 0.161386, 0.174656, 0.108053, 
        0.121674, 0.1171, 0.328053
    ),
    seeding_threshold_scintillator = cms.double(3.75),
    seeding_threshold_silicon = cms.double(3.75)
)

process.distance_C3d_params = cms.PSet(
    EGIdentification = cms.PSet(
        CategoriesEtaMax = cms.vdouble(2.7, 3.0),
        CategoriesEtaMin = cms.vdouble(1.5, 2.7),
        CategoriesPtMax = cms.vdouble(1000000.0, 1000000.0),
        CategoriesPtMin = cms.vdouble(0.0, 0.0),
        Inputs = cms.vstring(
            'cl3d_firstlayer', 
            'cl3d_coreshowerlength', 
            'cl3d_maxlayer', 
            'cl3d_srrmean'
        ),
        Weights = cms.vstring(
            'L1Trigger/L1THGCal/data/egamma_id_drnn_cone_loweta_v0.xml', 
            'L1Trigger/L1THGCal/data/egamma_id_drnn_cone_higheta_v0.xml'
        ),
        WorkingPoints = cms.vdouble(-0.01481255, 0.05995301)
    ),
    dR_multicluster = cms.double(0.01),
    dist_dbscan_multicluster = cms.double(0.0),
    minN_dbscan_multicluster = cms.uint32(0),
    minPt_multicluster = cms.double(0.5),
    type_multicluster = cms.string('dRC3d')
)

process.dphiScale = cms.PSet(
    CSC_01_1_scale = cms.vdouble(-1.915329, 0.0),
    CSC_12_1_scale = cms.vdouble(-6.434242, 0.0),
    CSC_12_2_scale = cms.vdouble(-1.63622, 0.0),
    CSC_12_3_scale = cms.vdouble(-1.63622, 0.0),
    CSC_13_2_scale = cms.vdouble(-6.077936, 0.0),
    CSC_13_3_scale = cms.vdouble(-1.701268, 0.0),
    CSC_14_3_scale = cms.vdouble(-1.969563, 0.0),
    CSC_23_1_scale = cms.vdouble(-19.084285, 0.0),
    CSC_23_2_scale = cms.vdouble(-6.079917, 0.0),
    CSC_24_1_scale = cms.vdouble(-6.055701, 0.0),
    CSC_34_1_scale = cms.vdouble(-11.520507, 0.0),
    DT_12_1_scale = cms.vdouble(-3.692398, 0.0),
    DT_12_2_scale = cms.vdouble(-3.518165, 0.0),
    DT_13_1_scale = cms.vdouble(-4.520923, 0.0),
    DT_13_2_scale = cms.vdouble(-4.257687, 0.0),
    DT_14_1_scale = cms.vdouble(-5.644816, 0.0),
    DT_14_2_scale = cms.vdouble(-4.808546, 0.0),
    DT_23_1_scale = cms.vdouble(-5.320346, 0.0),
    DT_23_2_scale = cms.vdouble(-5.117625, 0.0),
    DT_24_1_scale = cms.vdouble(-7.490909, 0.0),
    DT_24_2_scale = cms.vdouble(-6.63094, 0.0),
    DT_34_1_scale = cms.vdouble(-13.783765, 0.0),
    DT_34_2_scale = cms.vdouble(-11.901897, 0.0),
    OL_1213_0_scale = cms.vdouble(-4.488158, 0.0),
    OL_1222_0_scale = cms.vdouble(-5.810449, 0.0),
    OL_1232_0_scale = cms.vdouble(-5.964634, 0.0),
    OL_2213_0_scale = cms.vdouble(-7.239789, 0.0),
    OL_2222_0_scale = cms.vdouble(-7.667231, 0.0),
    SMB_10_0_scale = cms.vdouble(2.448566, 0.0),
    SMB_11_0_scale = cms.vdouble(2.56363, 0.0),
    SMB_12_0_scale = cms.vdouble(2.283221, 0.0),
    SMB_20_0_scale = cms.vdouble(1.486168, 0.0),
    SMB_21_0_scale = cms.vdouble(1.58384, 0.0),
    SMB_22_0_scale = cms.vdouble(1.346681, 0.0),
    SMB_30_0_scale = cms.vdouble(-3.629838, 0.0),
    SMB_31_0_scale = cms.vdouble(-3.323768, 0.0),
    SMB_32_0_scale = cms.vdouble(-3.054156, 0.0),
    SME_11_0_scale = cms.vdouble(1.325085, 0.0),
    SME_12_0_scale = cms.vdouble(2.279181, 0.0),
    SME_13_0_scale = cms.vdouble(0.104905, 0.0),
    SME_21_0_scale = cms.vdouble(-0.040862, 0.0),
    SME_22_0_scale = cms.vdouble(-3.457901, 0.0)
)

process.dummy_C2d_params = cms.PSet(
    applyLayerCalibration = cms.bool(False),
    calibSF_cluster = cms.double(1.0),
    clusterType = cms.string('dummyC2d'),
    layerWeights = cms.vdouble(
        0.0, 0.0183664, 0.0, 0.0305622, 0.0, 
        0.0162589, 0.0, 0.0143918, 0.0, 0.0134475, 
        0.0, 0.0185754, 0.0, 0.0204934, 0.0, 
        0.016901, 0.0, 0.0207958, 0.0, 0.0167985, 
        0.0, 0.0238385, 0.0, 0.0301146, 0.0, 
        0.0274622, 0.0, 0.0468671, 0.0, 0.078819, 
        0.0555831, 0.0609312, 0.0610768, 0.0657626, 0.0465653, 
        0.0629383, 0.0610061, 0.0517326, 0.0492882, 0.0699336, 
        0.0673457, 0.119896, 0.125327, 0.143235, 0.153295, 
        0.104777, 0.109345, 0.161386, 0.174656, 0.108053, 
        0.121674, 0.1171, 0.328053
    )
)

process.ecalLocalRecoAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.ecalLocalRecoFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_ecalMultiFitUncalibRecHit_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep EBSrFlagsSorted_ecalDigis__*', 
        'keep EESrFlagsSorted_ecalDigis__*', 
        'keep *_mix_EBTimeDigi_*', 
        'keep *_mix_EETimeDigi_*', 
        'keep *_ecalDetailedTimeRecHit_*_*'
    )
)

process.ecalLocalRecoRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep EBSrFlagsSorted_ecalDigis__*', 
        'keep EESrFlagsSorted_ecalDigis__*', 
        'keep *_mix_EBTimeDigi_*', 
        'keep *_mix_EETimeDigi_*', 
        'keep *_ecalDetailedTimeRecHit_*_*'
    )
)

process.ecal_time_digi_parameters = cms.PSet(
    EBtimeDigiCollection = cms.string('EBTimeDigi'),
    EEtimeDigiCollection = cms.string('EETimeDigi'),
    hitsProducerEB = cms.InputTag("g4SimHits","EcalHitsEB"),
    hitsProducerEE = cms.InputTag("g4SimHits","EcalHitsEE"),
    timeLayerBarrel = cms.int32(7),
    timeLayerEndcap = cms.int32(3)
)

process.egammaCorrections = cms.PSet(
    value = cms.vdouble(
        1.0, 1.0, 1.01, 1.01, 1.02, 
        1.01, 1.01, 1.01
    )
)

process.egamma_identification_drnn_cone = cms.PSet(
    CategoriesEtaMax = cms.vdouble(2.7, 3.0),
    CategoriesEtaMin = cms.vdouble(1.5, 2.7),
    CategoriesPtMax = cms.vdouble(1000000.0, 1000000.0),
    CategoriesPtMin = cms.vdouble(0.0, 0.0),
    Inputs = cms.vstring(
        'cl3d_firstlayer', 
        'cl3d_coreshowerlength', 
        'cl3d_maxlayer', 
        'cl3d_srrmean'
    ),
    Weights = cms.vstring(
        'L1Trigger/L1THGCal/data/egamma_id_drnn_cone_loweta_v0.xml', 
        'L1Trigger/L1THGCal/data/egamma_id_drnn_cone_higheta_v0.xml'
    ),
    WorkingPoints = cms.vdouble(-0.01481255, 0.05995301)
)

process.egamma_identification_drnn_dbscan = cms.PSet(
    CategoriesEtaMax = cms.vdouble(2.7, 3.0),
    CategoriesEtaMin = cms.vdouble(1.5, 2.7),
    CategoriesPtMax = cms.vdouble(1000000.0, 1000000.0),
    CategoriesPtMin = cms.vdouble(0.0, 0.0),
    Inputs = cms.vstring(
        'cl3d_firstlayer', 
        'cl3d_coreshowerlength', 
        'cl3d_maxlayer', 
        'cl3d_srrmean'
    ),
    Weights = cms.vstring(
        'L1Trigger/L1THGCal/data/egamma_id_drnn_dbscan_loweta_v0.xml', 
        'L1Trigger/L1THGCal/data/egamma_id_drnn_dbscan_higheta_v0.xml'
    ),
    WorkingPoints = cms.vdouble(-0.04547527, 0.05559443)
)

process.egamma_identification_histomax = cms.PSet(
    CategoriesEtaMax = cms.vdouble(2.7, 3.0),
    CategoriesEtaMin = cms.vdouble(1.5, 2.7),
    CategoriesPtMax = cms.vdouble(1000000.0, 1000000.0),
    CategoriesPtMin = cms.vdouble(0.0, 0.0),
    Inputs = cms.vstring(
        'cl3d_coreshowerlength', 
        'cl3d_showerlength', 
        'cl3d_firstlayer', 
        'cl3d_maxlayer', 
        'cl3d_szz', 
        'cl3d_srrmean', 
        'cl3d_srrtot', 
        'cl3d_seetot', 
        'cl3d_spptot'
    ),
    Weights = cms.vstring(
        'L1Trigger/L1THGCal/data/egamma_id_histomax_3151_loweta_v0.xml', 
        'L1Trigger/L1THGCal/data/egamma_id_histomax_3151_higheta_v0.xml'
    ),
    WorkingPoints = cms.vdouble(0.8292287, 0.9932326)
)

process.energy_interpretations_em = cms.PSet(
    dr_bylayer = cms.vdouble(
        0.015, 0.015, 0.015, 0.015, 0.015, 
        0.015, 0.015, 0.015, 0.015, 0.015, 
        0.015, 0.015, 0.015, 0.015, 0.015
    ),
    layer_containment_corrs = cms.vdouble(
        0.0, 0.0, 1.28, 1.09, 1.0, 
        1.07, 1.09, 1.04, 1.0, 1.09, 
        1.07, 1.03, 0.93, 1.4, 1.89
    ),
    scale_correction_coeff = cms.vdouble(52.99, -24.96),
    type = cms.string('HGCalTriggerClusterInterpretationEM')
)

process.geometry = cms.PSet(
    DisconnectedLayers = cms.vuint32(
        2, 4, 6, 8, 10, 
        12, 14, 16, 18, 20, 
        22, 24, 26, 28
    ),
    DisconnectedModules = cms.vuint32(0),
    L1TCellNeighborsBHMapping = cms.FileInPath('L1Trigger/L1THGCal/data/triggercell_neighbor_mapping_BH_3x3_30deg_0.txt'),
    L1TCellNeighborsMapping = cms.FileInPath('L1Trigger/L1THGCal/data/triggercell_neighbor_mapping_8inch_aligned_192_432_0.txt'),
    L1TCellsBHMapping = cms.FileInPath('L1Trigger/L1THGCal/data/triggercell_mapping_BH_3x3_30deg_0.txt'),
    L1TCellsMapping = cms.FileInPath('L1Trigger/L1THGCal/data/triggercell_mapping_8inch_aligned_192_432_V8_0.txt'),
    L1TLinksMapping = cms.FileInPath('L1Trigger/L1THGCal/data/links_mapping_V11_decentralized_signaldriven_0.txt'),
    L1TModulesMapping = cms.FileInPath('L1Trigger/L1THGCal/data/panel_mapping_V11_decentralized_march20_1.txt'),
    ScintillatorLinksPerModule = cms.uint32(2),
    ScintillatorModuleSize = cms.uint32(6),
    ScintillatorTriggerCellSize = cms.uint32(2),
    TriggerGeometryName = cms.string('HGCalTriggerGeometryV9Imp2')
)

process.ghostTrackCommon = cms.PSet(
    charmCut = cms.double(1.5),
    minimumTrackWeight = cms.double(0.5),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig')
)

process.ghostTrackVertexRecoBlock = cms.PSet(
    vertexReco = cms.PSet(
        finder = cms.string('gtvr'),
        fitType = cms.string('RefitGhostTrackWithVertices'),
        maxFitChi2 = cms.double(10.0),
        mergeThreshold = cms.double(3.0),
        primcut = cms.double(2.0),
        seccut = cms.double(4.0)
    )
)

process.hadronCorrections = cms.PSet(
    value = cms.vdouble(
        1.28, 1.28, 1.24, 1.19, 1.17, 
        1.17, 1.17, 1.17
    )
)

process.hfnoseDigitizer = cms.PSet(
    NoiseGeneration_Method = cms.bool(True),
    accumulatorType = cms.string('HGCDigiProducer'),
    bxTime = cms.double(25),
    digiCfg = cms.PSet(
        cceParams = cms.PSet(
            refToPSet_ = cms.string('HGCAL_cceParams_toUse')
        ),
        chargeCollectionEfficiencies = cms.PSet(
            refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
        ),
        doTimeSamples = cms.bool(False),
        feCfg = cms.PSet(
            adcNbits = cms.uint32(10),
            adcPulse = cms.vdouble(
                0.0, 0.017, 0.817, 0.163, 0.003, 
                0.0
            ),
            adcSaturation_fC = cms.double(100),
            adcThreshold_fC = cms.double(0.672),
            fwVersion = cms.uint32(2),
            jitterConstant_ns = cms.vdouble(0.0004, 0.0004, 0.0004),
            jitterNoise_ns = cms.vdouble(25.0, 25.0, 25.0),
            pulseAvgT = cms.vdouble(
                0.0, 23.42298, 13.16733, 6.41062, 5.03946, 
                4.532
            ),
            targetMIPvalue_ADC = cms.uint32(10),
            tdcChargeDrainParameterisation = cms.vdouble(
                -919.13, 365.36, -14.1, 0.2, -21.85, 
                49.39, 22.21, 0.8, -0.28, 27.14, 
                43.95, 3.89048
            ),
            tdcForToAOnset_fC = cms.vdouble(12.0, 12.0, 12.0),
            tdcNbits = cms.uint32(12),
            tdcOnset_fC = cms.double(60),
            tdcResolutionInPs = cms.double(0.001),
            tdcSaturation_fC = cms.double(10000),
            toaLSB_ns = cms.double(0.0244),
            toaMode = cms.uint32(1)
        ),
        ileakParam = cms.PSet(
            refToPSet_ = cms.string('HGCAL_ileakParam_toUse')
        ),
        keV2fC = cms.double(0.044259),
        noise_fC = cms.PSet(
            refToPSet_ = cms.string('HGCAL_noise_fC')
        ),
        thresholdFollowsMIP = cms.bool(True)
    ),
    digiCollection = cms.string('HFNoseDigis'),
    digitizationType = cms.uint32(0),
    eVPerEleHolePair = cms.double(3.62),
    geometryType = cms.uint32(1),
    hitCollection = cms.string('HFNoseHits'),
    makeDigiSimLinks = cms.bool(False),
    maxSimHitsAccTime = cms.uint32(100),
    premixStage1 = cms.bool(False),
    premixStage1MaxCharge = cms.double(1000000.0),
    premixStage1MinCharge = cms.double(0),
    tofDelay = cms.double(5),
    useAllChannels = cms.bool(True),
    verbosity = cms.untracked.uint32(0)
)

process.hgcROCSettings = cms.PSet(
    adcNbits = cms.uint32(10),
    adcPulse = cms.vdouble(
        0.0, 0.017, 0.817, 0.163, 0.003, 
        0.0
    ),
    adcSaturation_fC = cms.double(100),
    adcThreshold_fC = cms.double(0.672),
    fwVersion = cms.uint32(2),
    jitterConstant_ns = cms.vdouble(0.0004, 0.0004, 0.0004),
    jitterNoise_ns = cms.vdouble(25.0, 25.0, 25.0),
    pulseAvgT = cms.vdouble(
        0.0, 23.42298, 13.16733, 6.41062, 5.03946, 
        4.532
    ),
    targetMIPvalue_ADC = cms.uint32(10),
    tdcChargeDrainParameterisation = cms.vdouble(
        -919.13, 365.36, -14.1, 0.2, -21.85, 
        49.39, 22.21, 0.8, -0.28, 27.14, 
        43.95, 3.89048
    ),
    tdcForToAOnset_fC = cms.vdouble(12.0, 12.0, 12.0),
    tdcNbits = cms.uint32(12),
    tdcOnset_fC = cms.double(60),
    tdcResolutionInPs = cms.double(0.001),
    tdcSaturation_fC = cms.double(10000),
    toaLSB_ns = cms.double(0.0244),
    toaMode = cms.uint32(1)
)

process.hgceeDigitizer = cms.PSet(
    NoiseGeneration_Method = cms.bool(True),
    accumulatorType = cms.string('HGCDigiProducer'),
    bxTime = cms.double(25),
    digiCfg = cms.PSet(
        cceParams = cms.PSet(
            refToPSet_ = cms.string('HGCAL_cceParams_toUse')
        ),
        chargeCollectionEfficiencies = cms.PSet(
            refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
        ),
        doTimeSamples = cms.bool(False),
        feCfg = cms.PSet(
            adcNbits = cms.uint32(10),
            adcPulse = cms.vdouble(
                0.0, 0.017, 0.817, 0.163, 0.003, 
                0.0
            ),
            adcSaturation_fC = cms.double(100),
            adcThreshold_fC = cms.double(0.672),
            fwVersion = cms.uint32(2),
            jitterConstant_ns = cms.vdouble(0.0004, 0.0004, 0.0004),
            jitterNoise_ns = cms.vdouble(25.0, 25.0, 25.0),
            pulseAvgT = cms.vdouble(
                0.0, 23.42298, 13.16733, 6.41062, 5.03946, 
                4.532
            ),
            targetMIPvalue_ADC = cms.uint32(10),
            tdcChargeDrainParameterisation = cms.vdouble(
                -919.13, 365.36, -14.1, 0.2, -21.85, 
                49.39, 22.21, 0.8, -0.28, 27.14, 
                43.95, 3.89048
            ),
            tdcForToAOnset_fC = cms.vdouble(12.0, 12.0, 12.0),
            tdcNbits = cms.uint32(12),
            tdcOnset_fC = cms.double(60),
            tdcResolutionInPs = cms.double(0.001),
            tdcSaturation_fC = cms.double(10000),
            toaLSB_ns = cms.double(0.0244),
            toaMode = cms.uint32(1)
        ),
        ileakParam = cms.PSet(
            refToPSet_ = cms.string('HGCAL_ileakParam_toUse')
        ),
        keV2fC = cms.double(0.044259),
        noise_fC = cms.PSet(
            refToPSet_ = cms.string('HGCAL_noise_fC')
        ),
        thresholdFollowsMIP = cms.bool(True)
    ),
    digiCollection = cms.string('HGCDigisEE'),
    digitizationType = cms.uint32(0),
    eVPerEleHolePair = cms.double(3.62),
    geometryType = cms.uint32(1),
    hitCollection = cms.string('HGCHitsEE'),
    makeDigiSimLinks = cms.bool(False),
    maxSimHitsAccTime = cms.uint32(100),
    premixStage1 = cms.bool(False),
    premixStage1MaxCharge = cms.double(1000000.0),
    premixStage1MinCharge = cms.double(0),
    tofDelay = cms.double(5),
    useAllChannels = cms.bool(True),
    verbosity = cms.untracked.uint32(0)
)

process.hgchebackDigitizer = cms.PSet(
    NoiseGeneration_Method = cms.bool(True),
    accumulatorType = cms.string('HGCDigiProducer'),
    bxTime = cms.double(25),
    digiCfg = cms.PSet(
        algo = cms.uint32(2),
        doTimeSamples = cms.bool(False),
        feCfg = cms.PSet(
            adcNbits = cms.uint32(10),
            adcPulse = cms.vdouble(
                0.0, 0.017, 0.817, 0.163, 0.003, 
                0.0
            ),
            adcSaturation_fC = cms.double(68.75),
            adcThreshold_fC = cms.double(0.5),
            fwVersion = cms.uint32(2),
            jitterConstant_ns = cms.vdouble(0.0004, 0.0004, 0.0004),
            jitterNoise_ns = cms.vdouble(25.0, 25.0, 25.0),
            pulseAvgT = cms.vdouble(
                0.0, 23.42298, 13.16733, 6.41062, 5.03946, 
                4.532
            ),
            targetMIPvalue_ADC = cms.uint32(15),
            tdcChargeDrainParameterisation = cms.vdouble(
                -919.13, 365.36, -14.1, 0.2, -21.85, 
                49.39, 22.21, 0.8, -0.28, 27.14, 
                43.95, 3.89048
            ),
            tdcForToAOnset_fC = cms.vdouble(12.0, 12.0, 12.0),
            tdcNbits = cms.uint32(12),
            tdcOnset_fC = cms.double(55),
            tdcResolutionInPs = cms.double(0.001),
            tdcSaturation_fC = cms.double(1000),
            toaLSB_ns = cms.double(0.0244),
            toaMode = cms.uint32(1)
        ),
        keV2MIP = cms.double(0.00148148148148),
        nPEperMIP = cms.double(21.0),
        nTotalPE = cms.double(7500),
        noise = cms.PSet(
            refToPSet_ = cms.string('HGCAL_noise_heback')
        ),
        scaleBySipmArea = cms.bool(False),
        scaleByTileArea = cms.bool(False),
        sdPixels = cms.double(1e-06),
        sipmMap = cms.string('SimCalorimetry/HGCalSimProducers/data/sipmParams_geom-10.txt'),
        thresholdFollowsMIP = cms.bool(True),
        xTalk = cms.double(0.01)
    ),
    digiCollection = cms.string('HGCDigisHEback'),
    digitizationType = cms.uint32(1),
    geometryType = cms.uint32(1),
    hitCollection = cms.string('HGCHitsHEback'),
    makeDigiSimLinks = cms.bool(False),
    maxSimHitsAccTime = cms.uint32(100),
    premixStage1 = cms.bool(False),
    premixStage1MaxCharge = cms.double(1000000.0),
    premixStage1MinCharge = cms.double(0),
    tofDelay = cms.double(1),
    useAllChannels = cms.bool(True),
    verbosity = cms.untracked.uint32(0)
)

process.hgchefrontDigitizer = cms.PSet(
    NoiseGeneration_Method = cms.bool(True),
    accumulatorType = cms.string('HGCDigiProducer'),
    bxTime = cms.double(25),
    digiCfg = cms.PSet(
        cceParams = cms.PSet(
            refToPSet_ = cms.string('HGCAL_cceParams_toUse')
        ),
        chargeCollectionEfficiencies = cms.PSet(
            refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
        ),
        doTimeSamples = cms.bool(False),
        feCfg = cms.PSet(
            adcNbits = cms.uint32(10),
            adcPulse = cms.vdouble(
                0.0, 0.017, 0.817, 0.163, 0.003, 
                0.0
            ),
            adcSaturation_fC = cms.double(100),
            adcThreshold_fC = cms.double(0.672),
            fwVersion = cms.uint32(2),
            jitterConstant_ns = cms.vdouble(0.0004, 0.0004, 0.0004),
            jitterNoise_ns = cms.vdouble(25.0, 25.0, 25.0),
            pulseAvgT = cms.vdouble(
                0.0, 23.42298, 13.16733, 6.41062, 5.03946, 
                4.532
            ),
            targetMIPvalue_ADC = cms.uint32(10),
            tdcChargeDrainParameterisation = cms.vdouble(
                -919.13, 365.36, -14.1, 0.2, -21.85, 
                49.39, 22.21, 0.8, -0.28, 27.14, 
                43.95, 3.89048
            ),
            tdcForToAOnset_fC = cms.vdouble(12.0, 12.0, 12.0),
            tdcNbits = cms.uint32(12),
            tdcOnset_fC = cms.double(60),
            tdcResolutionInPs = cms.double(0.001),
            tdcSaturation_fC = cms.double(10000),
            toaLSB_ns = cms.double(0.0244),
            toaMode = cms.uint32(1)
        ),
        ileakParam = cms.PSet(
            refToPSet_ = cms.string('HGCAL_ileakParam_toUse')
        ),
        keV2fC = cms.double(0.044259),
        noise_fC = cms.PSet(
            refToPSet_ = cms.string('HGCAL_noise_fC')
        ),
        thresholdFollowsMIP = cms.bool(True)
    ),
    digiCollection = cms.string('HGCDigisHEfront'),
    digitizationType = cms.uint32(0),
    geometryType = cms.uint32(1),
    hitCollection = cms.string('HGCHitsHEfront'),
    makeDigiSimLinks = cms.bool(False),
    maxSimHitsAccTime = cms.uint32(100),
    premixStage1 = cms.bool(False),
    premixStage1MaxCharge = cms.double(1000000.0),
    premixStage1MinCharge = cms.double(0),
    tofDelay = cms.double(5),
    useAllChannels = cms.bool(True),
    verbosity = cms.untracked.uint32(0)
)

process.highPtTripletStepTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('highPtTripletStepChi2Est'),
    foundHitBonus = cms.double(10.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('highPtTripletStepTrajectoryFilterInOut')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(3),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('highPtTripletStepTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(False)
)

process.highPtTripletStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CompositeTrajectoryFilter'),
    filters = cms.VPSet(
        cms.PSet(
            refToPSet_ = cms.string('highPtTripletStepTrajectoryFilterBase')
        ), 
        cms.PSet(
            refToPSet_ = cms.string('ClusterShapeTrajectoryFilter')
        )
    )
)

process.highPtTripletStepTrajectoryFilterBase = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.2),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.highPtTripletStepTrajectoryFilterInOut = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.4),
    minimumNumberOfHits = cms.int32(4),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(1),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.histoInterpolatedMax_C3d_params = cms.PSet(
    binSumsHisto = cms.vuint32(
        13, 11, 11, 11, 9, 
        9, 9, 7, 7, 7, 
        7, 7, 7, 5, 5, 
        5, 5, 5, 5, 5, 
        5, 5, 5, 5, 5, 
        5, 5, 5, 3, 3, 
        3, 3, 3, 3, 3, 
        3, 3, 3, 3, 3, 
        3, 3
    ),
    kROverZMax = cms.double(0.58),
    kROverZMin = cms.double(0.076),
    nBins_X1_histo_multicluster = cms.uint32(42),
    nBins_X2_histo_multicluster = cms.uint32(216),
    neighbour_weights = cms.vdouble(
        0, 0.25, 0, 0.25, 0, 
        0.25, 0, 0.25, 0
    ),
    seed_position = cms.string('TCWeighted'),
    seed_smoothing_ecal = cms.vdouble(
        1.0, 1.0, 1.0, 1.0, 1.1, 
        1.0, 1.0, 1.0, 1.0
    ),
    seed_smoothing_hcal = cms.vdouble(
        1.0, 1.0, 1.0, 1.0, 1.0, 
        1.0, 1.0, 1.0, 1.0, 1.0, 
        1.0, 1.0, 2.0, 1.0, 1.0, 
        1.0, 1.0, 1.0, 1.0, 1.0, 
        1.0, 1.0, 1.0, 1.0, 1.0
    ),
    seeding_space = cms.string('RPhi'),
    threshold_histo_multicluster = cms.double(7.5),
    type_histoalgo = cms.string('HistoInterpolatedMaxC3d')
)

process.histoMaxVariableDR_C3d_params = cms.PSet(
    EGIdentification = cms.PSet(
        CategoriesEtaMax = cms.vdouble(2.7, 3.0),
        CategoriesEtaMin = cms.vdouble(1.5, 2.7),
        CategoriesPtMax = cms.vdouble(1000000.0, 1000000.0),
        CategoriesPtMin = cms.vdouble(0.0, 0.0),
        Inputs = cms.vstring(
            'cl3d_coreshowerlength', 
            'cl3d_showerlength', 
            'cl3d_firstlayer', 
            'cl3d_maxlayer', 
            'cl3d_szz', 
            'cl3d_srrmean', 
            'cl3d_srrtot', 
            'cl3d_seetot', 
            'cl3d_spptot'
        ),
        Weights = cms.vstring(
            'L1Trigger/L1THGCal/data/egamma_id_histomax_3151_loweta_v0.xml', 
            'L1Trigger/L1THGCal/data/egamma_id_histomax_3151_higheta_v0.xml'
        ),
        WorkingPoints = cms.vdouble(0.8292287, 0.9932326)
    ),
    cluster_association = cms.string('NearestNeighbour'),
    dR_multicluster = cms.double(0.0),
    dR_multicluster_byLayer_coefficientA = cms.vdouble(
        0, 0.015, 0.015, 0.015, 0.015, 
        0.015, 0.015, 0.015, 0.02, 0.02, 
        0.02, 0.02, 0.02, 0.02, 0.02, 
        0.03, 0.03, 0.03, 0.03, 0.03, 
        0.03, 0.03, 0.04, 0.04, 0.04, 
        0.04, 0.04, 0.04, 0.04, 0.04, 
        0.04, 0.04, 0.04, 0.04, 0.04, 
        0.05, 0.05, 0.05, 0.05, 0.05, 
        0.05, 0.05, 0.05, 0.05, 0.05, 
        0.05, 0.05, 0.05, 0.05, 0.05, 
        0.05, 0.05, 0.05
    ),
    dR_multicluster_byLayer_coefficientB = cms.vdouble(
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0
    ),
    minPt_multicluster = cms.double(0.5),
    shape_distance = cms.double(0.015),
    shape_threshold = cms.double(1.0)
)

process.histoMaxXYVariableDR_C3d_params = cms.PSet(
    binSumsHisto = cms.vuint32(
        13, 11, 11, 11, 9, 
        9, 9, 7, 7, 7, 
        7, 7, 7, 5, 5, 
        5, 5, 5, 5, 5, 
        5, 5, 5, 5, 5, 
        5, 5, 5, 3, 3, 
        3, 3, 3, 3, 3, 
        3, 3, 3, 3, 3, 
        3, 3
    ),
    kROverZMax = cms.double(0.58),
    kROverZMin = cms.double(0.076),
    nBins_X1_histo_multicluster = cms.uint32(192),
    nBins_X2_histo_multicluster = cms.uint32(192),
    neighbour_weights = cms.vdouble(
        0, 0.25, 0, 0.25, 0, 
        0.25, 0, 0.25, 0
    ),
    seed_position = cms.string('TCWeighted'),
    seed_smoothing_ecal = cms.vdouble(
        1.0, 1.0, 1.0, 1.0, 1.1, 
        1.0, 1.0, 1.0, 1.0
    ),
    seed_smoothing_hcal = cms.vdouble(
        1.0, 1.0, 1.0, 1.0, 1.0, 
        1.0, 1.0, 1.0, 1.0, 1.0, 
        1.0, 1.0, 2.0, 1.0, 1.0, 
        1.0, 1.0, 1.0, 1.0, 1.0, 
        1.0, 1.0, 1.0, 1.0, 1.0
    ),
    seeding_space = cms.string('XY'),
    threshold_histo_multicluster = cms.double(7.5),
    type_histoalgo = cms.string('HistoMaxC3d')
)

process.histoMax_C3d_clustering_params = cms.PSet(
    EGIdentification = cms.PSet(
        CategoriesEtaMax = cms.vdouble(2.7, 3.0),
        CategoriesEtaMin = cms.vdouble(1.5, 2.7),
        CategoriesPtMax = cms.vdouble(1000000.0, 1000000.0),
        CategoriesPtMin = cms.vdouble(0.0, 0.0),
        Inputs = cms.vstring(
            'cl3d_coreshowerlength', 
            'cl3d_showerlength', 
            'cl3d_firstlayer', 
            'cl3d_maxlayer', 
            'cl3d_szz', 
            'cl3d_srrmean', 
            'cl3d_srrtot', 
            'cl3d_seetot', 
            'cl3d_spptot'
        ),
        Weights = cms.vstring(
            'L1Trigger/L1THGCal/data/egamma_id_histomax_3151_loweta_v0.xml', 
            'L1Trigger/L1THGCal/data/egamma_id_histomax_3151_higheta_v0.xml'
        ),
        WorkingPoints = cms.vdouble(0.8292287, 0.9932326)
    ),
    cluster_association = cms.string('NearestNeighbour'),
    dR_multicluster = cms.double(0.03),
    dR_multicluster_byLayer_coefficientA = cms.vdouble(),
    dR_multicluster_byLayer_coefficientB = cms.vdouble(),
    minPt_multicluster = cms.double(0.5),
    shape_distance = cms.double(0.015),
    shape_threshold = cms.double(1.0)
)

process.histoMax_C3d_params = cms.PSet(
    histoMax_C3d_clustering_parameters = cms.PSet(
        EGIdentification = cms.PSet(
            CategoriesEtaMax = cms.vdouble(2.7, 3.0),
            CategoriesEtaMin = cms.vdouble(1.5, 2.7),
            CategoriesPtMax = cms.vdouble(1000000.0, 1000000.0),
            CategoriesPtMin = cms.vdouble(0.0, 0.0),
            Inputs = cms.vstring(
                'cl3d_coreshowerlength', 
                'cl3d_showerlength', 
                'cl3d_firstlayer', 
                'cl3d_maxlayer', 
                'cl3d_szz', 
                'cl3d_srrmean', 
                'cl3d_srrtot', 
                'cl3d_seetot', 
                'cl3d_spptot'
            ),
            Weights = cms.vstring(
                'L1Trigger/L1THGCal/data/egamma_id_histomax_3151_loweta_v0.xml', 
                'L1Trigger/L1THGCal/data/egamma_id_histomax_3151_higheta_v0.xml'
            ),
            WorkingPoints = cms.vdouble(0.8292287, 0.9932326)
        ),
        cluster_association = cms.string('NearestNeighbour'),
        dR_multicluster = cms.double(0.0),
        dR_multicluster_byLayer_coefficientA = cms.vdouble(
            0, 0.015, 0.015, 0.015, 0.015, 
            0.015, 0.015, 0.015, 0.02, 0.02, 
            0.02, 0.02, 0.02, 0.02, 0.02, 
            0.03, 0.03, 0.03, 0.03, 0.03, 
            0.03, 0.03, 0.04, 0.04, 0.04, 
            0.04, 0.04, 0.04, 0.04, 0.04, 
            0.04, 0.04, 0.04, 0.04, 0.04, 
            0.05, 0.05, 0.05, 0.05, 0.05, 
            0.05, 0.05, 0.05, 0.05, 0.05, 
            0.05, 0.05, 0.05, 0.05, 0.05, 
            0.05, 0.05, 0.05
        ),
        dR_multicluster_byLayer_coefficientB = cms.vdouble(
            0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0
        ),
        minPt_multicluster = cms.double(0.5),
        shape_distance = cms.double(0.015),
        shape_threshold = cms.double(1.0)
    ),
    histoMax_C3d_seeding_parameters = cms.PSet(
        binSumsHisto = cms.vuint32(
            13, 11, 11, 11, 9, 
            9, 9, 7, 7, 7, 
            7, 7, 7, 5, 5, 
            5, 5, 5, 5, 5, 
            5, 5, 5, 5, 5, 
            5, 5, 5, 3, 3, 
            3, 3, 3, 3, 3, 
            3, 3, 3, 3, 3, 
            3, 3
        ),
        kROverZMax = cms.double(0.58),
        kROverZMin = cms.double(0.076),
        nBins_X1_histo_multicluster = cms.uint32(42),
        nBins_X2_histo_multicluster = cms.uint32(216),
        neighbour_weights = cms.vdouble(
            0, 0.25, 0, 0.25, 0, 
            0.25, 0, 0.25, 0
        ),
        seed_position = cms.string('TCWeighted'),
        seed_smoothing_ecal = cms.vdouble(
            1.0, 1.0, 1.0, 1.0, 1.1, 
            1.0, 1.0, 1.0, 1.0
        ),
        seed_smoothing_hcal = cms.vdouble(
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 2.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0
        ),
        seeding_space = cms.string('RPhi'),
        threshold_histo_multicluster = cms.double(7.5),
        type_histoalgo = cms.string('HistoMaxC3d')
    ),
    type_multicluster = cms.string('Histo')
)

process.histoMax_C3d_seeding_params = cms.PSet(
    binSumsHisto = cms.vuint32(
        13, 11, 11, 11, 9, 
        9, 9, 7, 7, 7, 
        7, 7, 7, 5, 5, 
        5, 5, 5, 5, 5, 
        5, 5, 5, 5, 5, 
        5, 5, 5, 3, 3, 
        3, 3, 3, 3, 3, 
        3, 3, 3, 3, 3, 
        3, 3
    ),
    kROverZMax = cms.double(0.58),
    kROverZMin = cms.double(0.076),
    nBins_X1_histo_multicluster = cms.uint32(42),
    nBins_X2_histo_multicluster = cms.uint32(216),
    neighbour_weights = cms.vdouble(
        0, 0.25, 0, 0.25, 0, 
        0.25, 0, 0.25, 0
    ),
    seed_position = cms.string('TCWeighted'),
    seed_smoothing_ecal = cms.vdouble(
        1.0, 1.0, 1.0, 1.0, 1.1, 
        1.0, 1.0, 1.0, 1.0
    ),
    seed_smoothing_hcal = cms.vdouble(
        1.0, 1.0, 1.0, 1.0, 1.0, 
        1.0, 1.0, 1.0, 1.0, 1.0, 
        1.0, 1.0, 2.0, 1.0, 1.0, 
        1.0, 1.0, 1.0, 1.0, 1.0, 
        1.0, 1.0, 1.0, 1.0, 1.0
    ),
    seeding_space = cms.string('RPhi'),
    threshold_histo_multicluster = cms.double(7.5),
    type_histoalgo = cms.string('HistoMaxC3d')
)

process.histoSecondaryMax_C3d_params = cms.PSet(
    binSumsHisto = cms.vuint32(
        13, 11, 11, 11, 9, 
        9, 9, 7, 7, 7, 
        7, 7, 7, 5, 5, 
        5, 5, 5, 5, 5, 
        5, 5, 5, 5, 5, 
        5, 5, 5, 3, 3, 
        3, 3, 3, 3, 3, 
        3, 3, 3, 3, 3, 
        3, 3
    ),
    kROverZMax = cms.double(0.58),
    kROverZMin = cms.double(0.076),
    nBins_X1_histo_multicluster = cms.uint32(42),
    nBins_X2_histo_multicluster = cms.uint32(216),
    neighbour_weights = cms.vdouble(
        0, 0.25, 0, 0.25, 0, 
        0.25, 0, 0.25, 0
    ),
    seed_position = cms.string('TCWeighted'),
    seed_smoothing_ecal = cms.vdouble(
        1.0, 1.0, 1.0, 1.0, 1.1, 
        1.0, 1.0, 1.0, 1.0
    ),
    seed_smoothing_hcal = cms.vdouble(
        1.0, 1.0, 1.0, 1.0, 1.0, 
        1.0, 1.0, 1.0, 1.0, 1.0, 
        1.0, 1.0, 2.0, 1.0, 1.0, 
        1.0, 1.0, 1.0, 1.0, 1.0, 
        1.0, 1.0, 1.0, 1.0, 1.0
    ),
    seeding_space = cms.string('RPhi'),
    threshold_histo_multicluster = cms.double(7.5),
    type_histoalgo = cms.string('HistoSecondaryMaxC3d')
)

process.histoThreshold_C3d_params = cms.PSet(
    binSumsHisto = cms.vuint32(
        13, 11, 11, 11, 9, 
        9, 9, 7, 7, 7, 
        7, 7, 7, 5, 5, 
        5, 5, 5, 5, 5, 
        5, 5, 5, 5, 5, 
        5, 5, 5, 3, 3, 
        3, 3, 3, 3, 3, 
        3, 3, 3, 3, 3, 
        3, 3
    ),
    kROverZMax = cms.double(0.58),
    kROverZMin = cms.double(0.076),
    nBins_X1_histo_multicluster = cms.uint32(42),
    nBins_X2_histo_multicluster = cms.uint32(216),
    neighbour_weights = cms.vdouble(
        0, 0.25, 0, 0.25, 0, 
        0.25, 0, 0.25, 0
    ),
    seed_position = cms.string('TCWeighted'),
    seed_smoothing_ecal = cms.vdouble(
        1.0, 1.0, 1.0, 1.0, 1.1, 
        1.0, 1.0, 1.0, 1.0
    ),
    seed_smoothing_hcal = cms.vdouble(
        1.0, 1.0, 1.0, 1.0, 1.0, 
        1.0, 1.0, 1.0, 1.0, 1.0, 
        1.0, 1.0, 2.0, 1.0, 1.0, 
        1.0, 1.0, 1.0, 1.0, 1.0, 
        1.0, 1.0, 1.0, 1.0, 1.0
    ),
    seeding_space = cms.string('RPhi'),
    threshold_histo_multicluster = cms.double(7.5),
    type_histoalgo = cms.string('HistoThresholdC3d')
)

process.hittrack = cms.PSet(
    HitProducer = cms.string('siPixelRecHits'),
    TTRHBuilder = cms.string('WithTrackAngle')
)

process.hltPhase2L3MuonHighPtTripletStepTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(False),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('hltPhase2L3MuonHighPtTripletStepChi2Est'),
    foundHitBonus = cms.double(10.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('hltPhase2L3MuonHighPtTripletStepTrajectoryFilterInOut')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(2),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxLostHitsFraction = cms.double(999.0),
    maxNumberOfHits = cms.int32(100),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(5),
    minPt = cms.double(0.9),
    propagatorAlong = cms.string('PropagatorWithMaterialParabolicMf'),
    propagatorOpposite = cms.string('PropagatorWithMaterialParabolicMfOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    seedAs5DHit = cms.bool(False),
    seedPairPenalty = cms.int32(0),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('hltPhase2L3MuonHighPtTripletStepTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(False)
)

process.hltPhase2L3MuonHighPtTripletStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CompositeTrajectoryFilter'),
    filters = cms.VPSet(
        cms.PSet(
            refToPSet_ = cms.string('hltPhase2L3MuonHighPtTripletStepTrajectoryFilterBase')
        ), 
        cms.PSet(
            refToPSet_ = cms.string('ClusterShapeTrajectoryFilter')
        )
    )
)

process.hltPhase2L3MuonHighPtTripletStepTrajectoryFilterBase = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(1.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(0),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(1),
    maxLostHitsFraction = cms.double(999.0),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(1),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.hltPhase2L3MuonHighPtTripletStepTrajectoryFilterInOut = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minimumNumberOfHits = cms.int32(4),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(1),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.hltPhase2L3MuonInitialStepTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(False),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('hltPhase2L3MuonInitialStepChi2Est'),
    foundHitBonus = cms.double(10.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('hltPhase2L3MuonInitialStepTrajectoryFilter')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(True),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(2),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxLostHitsFraction = cms.double(999.0),
    maxNumberOfHits = cms.int32(100),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(1),
    minPt = cms.double(0.9),
    propagatorAlong = cms.string('PropagatorWithMaterialParabolicMf'),
    propagatorOpposite = cms.string('PropagatorWithMaterialParabolicMfOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    seedAs5DHit = cms.bool(False),
    seedPairPenalty = cms.int32(0),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('hltPhase2L3MuonInitialStepTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.hltPhase2L3MuonInitialStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(1.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(0),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(1),
    maxLostHitsFraction = cms.double(999),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(4),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minimumNumberOfHits = cms.int32(4),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.hltPhase2L3MuonPSetPvClusterComparerForIT = cms.PSet(
    track_chi2_max = cms.double(20.0),
    track_prob_min = cms.double(-1.0),
    track_pt_max = cms.double(100.0),
    track_pt_min = cms.double(1.0)
)

process.hltPhase2L3MuonSeedFromProtoTracks = cms.PSet(
    ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
    MinOneOverPtError = cms.double(1.0),
    OriginTransverseErrorMultiplier = cms.double(1.0),
    SeedMomentumForBOFF = cms.double(5.0),
    TTRHBuilder = cms.string('WithTrackAngle'),
    forceKinematicWithRegionDirection = cms.bool(False),
    magneticField = cms.string(''),
    propagator = cms.string('PropagatorWithMaterial')
)

process.hltPhase2PSetPvClusterComparerForIT = cms.PSet(
    track_chi2_max = cms.double(20.0),
    track_prob_min = cms.double(-1.0),
    track_pt_max = cms.double(100.0),
    track_pt_min = cms.double(1.0)
)

process.hltPhase2SeedFromProtoTracks = cms.PSet(
    ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
    MinOneOverPtError = cms.double(1.0),
    OriginTransverseErrorMultiplier = cms.double(1.0),
    SeedMomentumForBOFF = cms.double(5.0),
    TTRHBuilder = cms.string('WithTrackAngle'),
    forceKinematicWithRegionDirection = cms.bool(False),
    magneticField = cms.string(''),
    propagator = cms.string('PropagatorWithMaterial')
)

process.iPSet = cms.PSet(
    coneSize = cms.double(0.3),
    isolateAgainst = cms.string('h+'),
    isolationAlgo = cms.string('ElectronPFIsolationWithMapBasedVeto'),
    miniAODVertexCodes = cms.vuint32(2, 3),
    particleBasedIsolation = cms.InputTag("particleBasedIsolationTmp","gedGsfElectronsTmp"),
    vertexIndex = cms.int32(0)
)

process.imp = cms.PSet(
    importerName = cms.string('GenericClusterImporter'),
    source = cms.InputTag("particleFlowClusterPS")
)

process.initialStepTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('initialStepChi2Est'),
    foundHitBonus = cms.double(10.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(True),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(3),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(1),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('initialStepTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.initialStepTrajectoryBuilderPreSplitting = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('initialStepChi2Est'),
    foundHitBonus = cms.double(10.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(3),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('initialStepTrajectoryFilterPreSplitting')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.initialStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.2),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.initialStepTrajectoryFilterBase = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.2),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.initialStepTrajectoryFilterBasePreSplitting = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(0),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutLoose')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.2),
    minimumNumberOfHits = cms.int32(4),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.initialStepTrajectoryFilterInOut = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(0),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutLoose')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.2),
    minimumNumberOfHits = cms.int32(4),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(True),
    seedExtension = cms.int32(1),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(True)
)

process.initialStepTrajectoryFilterPreSplitting = cms.PSet(
    ComponentType = cms.string('CompositeTrajectoryFilter'),
    filters = cms.VPSet(
        cms.PSet(
            refToPSet_ = cms.string('initialStepTrajectoryFilterBasePreSplitting')
        ), 
        cms.PSet(
            refToPSet_ = cms.string('initialStepTrajectoryFilterShapePreSplitting')
        )
    )
)

process.initialStepTrajectoryFilterShape = cms.PSet(
    ComponentType = cms.string('StripSubClusterShapeTrajectoryFilter'),
    layerMask = cms.PSet(
        TEC = cms.bool(False),
        TIB = cms.vuint32(1, 2),
        TID = cms.vuint32(1, 2),
        TOB = cms.bool(False)
    ),
    maxNSat = cms.uint32(3),
    maxTrimmedSizeDiffNeg = cms.double(1.0),
    maxTrimmedSizeDiffPos = cms.double(0.7),
    seedCutMIPs = cms.double(0.35),
    seedCutSN = cms.double(7.0),
    subclusterCutMIPs = cms.double(0.45),
    subclusterCutSN = cms.double(12.0),
    subclusterWindow = cms.double(0.7),
    trimMaxADC = cms.double(30.0),
    trimMaxFracNeigh = cms.double(0.25),
    trimMaxFracTotal = cms.double(0.15)
)

process.initialStepTrajectoryFilterShapePreSplitting = cms.PSet(
    ComponentType = cms.string('StripSubClusterShapeTrajectoryFilter'),
    layerMask = cms.PSet(
        TEC = cms.bool(False),
        TIB = cms.vuint32(1, 2),
        TID = cms.vuint32(1, 2),
        TOB = cms.bool(False)
    ),
    maxNSat = cms.uint32(3),
    maxTrimmedSizeDiffNeg = cms.double(1.0),
    maxTrimmedSizeDiffPos = cms.double(0.7),
    seedCutMIPs = cms.double(0.35),
    seedCutSN = cms.double(7.0),
    subclusterCutMIPs = cms.double(0.45),
    subclusterCutSN = cms.double(12.0),
    subclusterWindow = cms.double(0.7),
    trimMaxADC = cms.double(30.0),
    trimMaxFracNeigh = cms.double(0.25),
    trimMaxFracTotal = cms.double(0.15)
)

process.interestingEgammaIsoHCALSel = cms.PSet(
    maxDIEta = cms.int32(5),
    maxDIPhi = cms.int32(5),
    minEnergyHB = cms.double(0.1),
    minEnergyHEDefault = cms.double(0.2),
    minEnergyHEDepth1 = cms.double(0.1)
)

process.isolationSumsCalculator = cms.PSet(
    ComponentName = cms.string('isolationSumsCalculator'),
    EcalRecHitEtaSliceA_Barrel = cms.double(2.5),
    EcalRecHitEtaSliceA_Endcap = cms.double(2.5),
    EcalRecHitEtaSliceB_Barrel = cms.double(2.5),
    EcalRecHitEtaSliceB_Endcap = cms.double(2.5),
    EcalRecHitInnerRadiusA_Barrel = cms.double(3.5),
    EcalRecHitInnerRadiusA_Endcap = cms.double(3.5),
    EcalRecHitInnerRadiusB_Barrel = cms.double(3.5),
    EcalRecHitInnerRadiusB_Endcap = cms.double(3.5),
    EcalRecHitOuterRadiusA_Barrel = cms.double(0.4),
    EcalRecHitOuterRadiusA_Endcap = cms.double(0.4),
    EcalRecHitOuterRadiusB_Barrel = cms.double(0.3),
    EcalRecHitOuterRadiusB_Endcap = cms.double(0.3),
    EcalRecHitThreshEA_Barrel = cms.double(0.095),
    EcalRecHitThreshEA_Endcap = cms.double(0.0),
    EcalRecHitThreshEB_Barrel = cms.double(0.095),
    EcalRecHitThreshEB_Endcap = cms.double(0.0),
    EcalRecHitThreshEtA_Barrel = cms.double(0.0),
    EcalRecHitThreshEtA_Endcap = cms.double(0.11),
    EcalRecHitThreshEtB_Barrel = cms.double(0.0),
    EcalRecHitThreshEtB_Endcap = cms.double(0.11),
    HcalDepth1TowerInnerRadiusA_Barrel = cms.double(0.15),
    HcalDepth1TowerInnerRadiusA_Endcap = cms.double(0.15),
    HcalDepth1TowerInnerRadiusB_Barrel = cms.double(0.15),
    HcalDepth1TowerInnerRadiusB_Endcap = cms.double(0.15),
    HcalDepth1TowerOuterRadiusA_Barrel = cms.double(0.4),
    HcalDepth1TowerOuterRadiusA_Endcap = cms.double(0.4),
    HcalDepth1TowerOuterRadiusB_Barrel = cms.double(0.3),
    HcalDepth1TowerOuterRadiusB_Endcap = cms.double(0.3),
    HcalDepth1TowerThreshEA_Barrel = cms.double(0.0),
    HcalDepth1TowerThreshEA_Endcap = cms.double(0.0),
    HcalDepth1TowerThreshEB_Barrel = cms.double(0.0),
    HcalDepth1TowerThreshEB_Endcap = cms.double(0.0),
    HcalDepth2TowerInnerRadiusA_Barrel = cms.double(0.15),
    HcalDepth2TowerInnerRadiusA_Endcap = cms.double(0.15),
    HcalDepth2TowerInnerRadiusB_Barrel = cms.double(0.15),
    HcalDepth2TowerInnerRadiusB_Endcap = cms.double(0.15),
    HcalDepth2TowerOuterRadiusA_Barrel = cms.double(0.4),
    HcalDepth2TowerOuterRadiusA_Endcap = cms.double(0.4),
    HcalDepth2TowerOuterRadiusB_Barrel = cms.double(0.3),
    HcalDepth2TowerOuterRadiusB_Endcap = cms.double(0.3),
    HcalDepth2TowerThreshEA_Barrel = cms.double(0.0),
    HcalDepth2TowerThreshEA_Endcap = cms.double(0.0),
    HcalDepth2TowerThreshEB_Barrel = cms.double(0.0),
    HcalDepth2TowerThreshEB_Endcap = cms.double(0.0),
    HcalRecHitCollection = cms.InputTag("towerMaker"),
    HcalTowerInnerRadiusA_Barrel = cms.double(0.15),
    HcalTowerInnerRadiusA_Endcap = cms.double(0.15),
    HcalTowerInnerRadiusB_Barrel = cms.double(0.15),
    HcalTowerInnerRadiusB_Endcap = cms.double(0.15),
    HcalTowerOuterRadiusA_Barrel = cms.double(0.4),
    HcalTowerOuterRadiusA_Endcap = cms.double(0.4),
    HcalTowerOuterRadiusB_Barrel = cms.double(0.3),
    HcalTowerOuterRadiusB_Endcap = cms.double(0.3),
    HcalTowerThreshEA_Barrel = cms.double(0.0),
    HcalTowerThreshEA_Endcap = cms.double(0.0),
    HcalTowerThreshEB_Barrel = cms.double(0.0),
    HcalTowerThreshEB_Endcap = cms.double(0.0),
    TrackConeInnerRadiusA_Barrel = cms.double(0.04),
    TrackConeInnerRadiusA_Endcap = cms.double(0.04),
    TrackConeInnerRadiusB_Barrel = cms.double(0.04),
    TrackConeInnerRadiusB_Endcap = cms.double(0.04),
    TrackConeOuterRadiusA_Barrel = cms.double(0.4),
    TrackConeOuterRadiusA_Endcap = cms.double(0.4),
    TrackConeOuterRadiusB_Barrel = cms.double(0.3),
    TrackConeOuterRadiusB_Endcap = cms.double(0.3),
    barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    beamSpotProducer = cms.InputTag("offlineBeamSpot"),
    endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    isolationtrackEtaSliceA_Barrel = cms.double(0.015),
    isolationtrackEtaSliceA_Endcap = cms.double(0.015),
    isolationtrackEtaSliceB_Barrel = cms.double(0.015),
    isolationtrackEtaSliceB_Endcap = cms.double(0.015),
    isolationtrackThresholdA_Barrel = cms.double(0.0),
    isolationtrackThresholdA_Endcap = cms.double(0.0),
    isolationtrackThresholdB_Barrel = cms.double(0.0),
    isolationtrackThresholdB_Endcap = cms.double(0.0),
    longImpactParameterA_Barrel = cms.double(0.2),
    longImpactParameterA_Endcap = cms.double(0.2),
    longImpactParameterB_Barrel = cms.double(0.2),
    longImpactParameterB_Endcap = cms.double(0.2),
    moduleEtaBoundary = cms.vdouble(
        0.0, 0.02, 0.43, 0.46, 0.78, 
        0.81, 1.13, 1.15, 1.45, 1.58
    ),
    modulePhiBoundary = cms.double(0.0087),
    trackProducer = cms.InputTag("generalTracks"),
    transImpactParameterA_Barrel = cms.double(0.1),
    transImpactParameterA_Endcap = cms.double(0.1),
    transImpactParameterB_Barrel = cms.double(0.1),
    transImpactParameterB_Endcap = cms.double(0.1),
    useNumCrystals = cms.bool(True),
    vetoClustered = cms.bool(False)
)

process.j2tParametersCALO = cms.PSet(
    coneSize = cms.double(0.4),
    extrapolations = cms.InputTag("trackExtrapolator"),
    trackQuality = cms.string('goodIterative'),
    tracks = cms.InputTag("generalTracks")
)

process.j2tParametersVX = cms.PSet(
    coneSize = cms.double(0.4),
    pvSrc = cms.InputTag("offlinePrimaryVertices"),
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False)
)

process.jetCoreRegionalStepTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('jetCoreRegionalStepChi2Est'),
    foundHitBonus = cms.double(10.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(50),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('jetCoreRegionalStepTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.jetCoreRegionalStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.1),
    minimumNumberOfHits = cms.int32(4),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.layerInfo = cms.PSet(
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        maxRing = cms.int32(7),
        minRing = cms.int32(6),
        useRingSlector = cms.bool(False)
    ),
    TOB = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        )
    )
)

process.leadTrackFinding = cms.PSet(
    Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding"),
    cut = cms.double(0.5)
)

process.lowPtGsfEleTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('CkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    estimator = cms.string('ElectronChi2'),
    intermediateCleaning = cms.bool(False),
    lostHitPenalty = cms.double(90.0),
    maxCand = cms.int32(5),
    propagatorAlong = cms.string('fwdGsfElectronPropagator'),
    propagatorOpposite = cms.string('bwdGsfElectronPropagator'),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('lowPtGsfEleTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator')
)

process.lowPtGsfEleTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(1),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(-1),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(-1),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.0),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.lowPtQuadStepTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('lowPtQuadStepChi2Est'),
    foundHitBonus = cms.double(10.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(True),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(4),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(1),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('lowPtQuadStepTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.lowPtQuadStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CompositeTrajectoryFilter'),
    filters = cms.VPSet(
        cms.PSet(
            refToPSet_ = cms.string('lowPtQuadStepTrajectoryFilterBase')
        ), 
        cms.PSet(
            refToPSet_ = cms.string('ClusterShapeTrajectoryFilter')
        )
    )
)

process.lowPtQuadStepTrajectoryFilterBase = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.075),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.lowPtTripletStepStandardTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.075),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.lowPtTripletStepTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('lowPtTripletStepChi2Est'),
    foundHitBonus = cms.double(10.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('lowPtTripletStepTrajectoryFilterInOut')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(3),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('lowPtTripletStepTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(False)
)

process.lowPtTripletStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CompositeTrajectoryFilter'),
    filters = cms.VPSet(
        cms.PSet(
            refToPSet_ = cms.string('lowPtTripletStepStandardTrajectoryFilter')
        ), 
        cms.PSet(
            refToPSet_ = cms.string('ClusterShapeTrajectoryFilter')
        )
    )
)

process.lowPtTripletStepTrajectoryFilterInOut = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.075),
    minimumNumberOfHits = cms.int32(4),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(1),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.maxEvents = cms.untracked.PSet(
    input = cms.untracked.int32(-1),
    output = cms.optional.untracked.allowed(cms.int32,cms.PSet)
)

process.maxLuminosityBlocks = cms.untracked.PSet(
    input = cms.untracked.int32(-1)
)

process.mipVariable = cms.PSet(
    ComponentName = cms.string('mipVariable'),
    HaloDiscThreshold = cms.double(70.0),
    ResidualWidth = cms.double(0.23),
    XRangeFit = cms.double(180.0),
    YRangeFit = cms.double(7.0),
    barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE")
)

process.mixedTripletStepTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('mixedTripletStepChi2Est'),
    foundHitBonus = cms.double(10.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(2),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('mixedTripletStepPropagator'),
    propagatorOpposite = cms.string('mixedTripletStepPropagatorOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('mixedTripletStepTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.mixedTripletStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(1.4),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.1),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.muonSeededTrajectoryBuilderForInOut = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('muonSeededMeasurementEstimatorForInOut'),
    foundHitBonus = cms.double(1000.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('muonSeededTrajectoryFilterForInOut')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(True),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(1.0),
    maxCand = cms.int32(5),
    minNrOfHitsForRebuild = cms.int32(2),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('muonSeededTrajectoryFilterForInOut')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.muonSeededTrajectoryBuilderForOutIn = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('muonSeededMeasurementEstimatorForOutIn'),
    foundHitBonus = cms.double(1000.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('muonSeededTrajectoryFilterForOutIn')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(1.0),
    maxCand = cms.int32(3),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('muonSeededTrajectoryFilterForOutIn')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.muonSeededTrajectoryBuilderForOutInDisplaced = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('muonSeededMeasurementEstimatorForOutInDisplaced'),
    foundHitBonus = cms.double(1000.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('muonSeededTrajectoryFilterForOutInDisplaced')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(1.0),
    maxCand = cms.int32(3),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('muonSeededTrajectoryFilterForOutInDisplaced')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.muonSeededTrajectoryFilterForInOut = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(10),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.muonSeededTrajectoryFilterForOutIn = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(10),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minimumNumberOfHits = cms.int32(5),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.muonSeededTrajectoryFilterForOutInDisplaced = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(10),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minimumNumberOfHits = cms.int32(5),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.noPrediscriminants = cms.PSet(
    BooleanOperator = cms.string('and')
)

process.options = cms.untracked.PSet(
    FailPath = cms.untracked.vstring(),
    IgnoreCompletely = cms.untracked.vstring(),
    Rethrow = cms.untracked.vstring(),
    SkipEvent = cms.untracked.vstring(),
    allowUnscheduled = cms.obsolete.untracked.bool,
    canDeleteEarly = cms.untracked.vstring(),
    emptyRunLumiMode = cms.obsolete.untracked.string,
    eventSetup = cms.untracked.PSet(
        forceNumberOfConcurrentIOVs = cms.untracked.PSet(

        ),
        numberOfConcurrentIOVs = cms.untracked.uint32(1)
    ),
    fileMode = cms.untracked.string('FULLMERGE'),
    forceEventSetupCacheClearOnNewRun = cms.untracked.bool(False),
    makeTriggerResults = cms.obsolete.untracked.bool,
    numberOfConcurrentLuminosityBlocks = cms.untracked.uint32(1),
    numberOfConcurrentRuns = cms.untracked.uint32(1),
    numberOfStreams = cms.untracked.uint32(0),
    numberOfThreads = cms.untracked.uint32(1),
    printDependencies = cms.untracked.bool(False),
    sizeOfStackForThreadsInKB = cms.untracked.uint32(10240),
    throwIfIllegalParameter = cms.untracked.bool(True),
    wantSummary = cms.untracked.bool(True)
)

process.pfBlockBasedIsolation = cms.PSet(
    ComponentName = cms.string('pfBlockBasedIsolation'),
    coneSize = cms.double(9999999999)
)

process.pfDeepBoostedJetPreprocessParams = cms.PSet(
    input_names = cms.vstring(
        'pfcand', 
        'sv'
    ),
    pfcand = cms.PSet(
        input_shape = cms.vuint32(1, 42, 100, 1),
        var_infos = cms.PSet(
            pfcand_VTX_ass = cms.PSet(
                median = cms.double(7.0),
                norm_factor = cms.double(1.0)
            ),
            pfcand_abseta = cms.PSet(
                median = cms.double(0.632648706436),
                norm_factor = cms.double(1.59032225958)
            ),
            pfcand_btagEtaRel = cms.PSet(
                median = cms.double(1.19703966379),
                norm_factor = cms.double(0.521026991705)
            ),
            pfcand_btagJetDistVal = cms.PSet(
                median = cms.double(-0.000215483247302),
                norm_factor = cms.double(161.385119349)
            ),
            pfcand_btagPParRatio = cms.PSet(
                median = cms.double(0.839023888111),
                norm_factor = cms.double(1.19186117841)
            ),
            pfcand_btagPtRatio = cms.PSet(
                median = cms.double(0.0173742230982),
                norm_factor = cms.double(4.25351138308)
            ),
            pfcand_btagSip2dSig = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(1.41174531059)
            ),
            pfcand_btagSip2dVal = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(495.583709284)
            ),
            pfcand_btagSip3dSig = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(0.831133090749)
            ),
            pfcand_btagSip3dVal = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(233.664322627)
            ),
            pfcand_charge = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(1.0)
            ),
            pfcand_deltaR = cms.PSet(
                median = cms.double(0.252654820681),
                norm_factor = cms.double(3.50836328292)
            ),
            pfcand_detadeta = cms.PSet(
                median = cms.double(1.15567200254e-08),
                norm_factor = cms.double(1644010.14927)
            ),
            pfcand_dlambdadz = cms.PSet(
                median = cms.double(-1.2810873784e-07),
                norm_factor = cms.double(268715.13012)
            ),
            pfcand_dphidphi = cms.PSet(
                median = cms.double(1.130510352e-08),
                norm_factor = cms.double(796482.476472)
            ),
            pfcand_dphidxy = cms.PSet(
                median = cms.double(-9.61654578191e-08),
                norm_factor = cms.double(204149.346943)
            ),
            pfcand_dptdpt = cms.PSet(
                median = cms.double(4.11880840545e-08),
                norm_factor = cms.double(66429.1000843)
            ),
            pfcand_drminsv = cms.PSet(
                median = cms.double(0.192182734609),
                norm_factor = cms.double(2.38205282141)
            ),
            pfcand_drsubjet1 = cms.PSet(
                median = cms.double(0.258241385221),
                norm_factor = cms.double(2.92607580997)
            ),
            pfcand_drsubjet2 = cms.PSet(
                median = cms.double(0.305164307356),
                norm_factor = cms.double(2.88195895791)
            ),
            pfcand_dxy = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(415.415835966)
            ),
            pfcand_dxydxy = cms.PSet(
                median = cms.double(9.32332170578e-07),
                norm_factor = cms.double(45949.2394216)
            ),
            pfcand_dxydz = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(10598589.4298)
            ),
            pfcand_dxysig = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(1.54565964258)
            ),
            pfcand_dz = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(264.770519024)
            ),
            pfcand_dzdz = cms.PSet(
                median = cms.double(1.58729170607e-06),
                norm_factor = cms.double(36545.958354)
            ),
            pfcand_dzsig = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(1.23840120847)
            ),
            pfcand_erel_log = cms.PSet(
                median = cms.double(-5.38221979141),
                norm_factor = cms.double(0.556499386531)
            ),
            pfcand_etarel = cms.PSet(
                median = cms.double(-0.00711047858931),
                norm_factor = cms.double(4.2642743837)
            ),
            pfcand_hcalFrac = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(1.0)
            ),
            pfcand_isChargedHad = cms.PSet(
                median = cms.double(1.0),
                norm_factor = cms.double(1.0)
            ),
            pfcand_isEl = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(1.0)
            ),
            pfcand_isGamma = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(1.0)
            ),
            pfcand_isMu = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(1.0)
            ),
            pfcand_isNeutralHad = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(1.0)
            ),
            pfcand_lostInnerHits = cms.PSet(
                median = cms.double(-1.0),
                norm_factor = cms.double(1.0)
            ),
            pfcand_normchi2 = cms.PSet(
                median = cms.double(2.0),
                norm_factor = cms.double(0.00100300902708)
            ),
            pfcand_phirel = cms.PSet(
                median = cms.double(-1.71389010575e-05),
                norm_factor = cms.double(4.22784626632)
            ),
            pfcand_pt_log = cms.PSet(
                median = cms.double(1.03476798534),
                norm_factor = cms.double(0.542224410728)
            ),
            pfcand_ptrel_log = cms.PSet(
                median = cms.double(-5.37407469749),
                norm_factor = cms.double(0.554677114485)
            ),
            pfcand_puppiw = cms.PSet(
                median = cms.double(1.0),
                norm_factor = cms.double(255.000015199)
            ),
            pfcand_quality = cms.PSet(
                median = cms.double(5.0),
                norm_factor = cms.double(0.2)
            )
        ),
        var_length = cms.uint32(100),
        var_names = cms.vstring(
            'pfcand_pt_log', 
            'pfcand_ptrel_log', 
            'pfcand_erel_log', 
            'pfcand_phirel', 
            'pfcand_etarel', 
            'pfcand_deltaR', 
            'pfcand_abseta', 
            'pfcand_puppiw', 
            'pfcand_drminsv', 
            'pfcand_drsubjet1', 
            'pfcand_drsubjet2', 
            'pfcand_charge', 
            'pfcand_isMu', 
            'pfcand_isEl', 
            'pfcand_isChargedHad', 
            'pfcand_isGamma', 
            'pfcand_isNeutralHad', 
            'pfcand_hcalFrac', 
            'pfcand_VTX_ass', 
            'pfcand_lostInnerHits', 
            'pfcand_normchi2', 
            'pfcand_quality', 
            'pfcand_dz', 
            'pfcand_dzsig', 
            'pfcand_dxy', 
            'pfcand_dxysig', 
            'pfcand_dptdpt', 
            'pfcand_detadeta', 
            'pfcand_dphidphi', 
            'pfcand_dxydxy', 
            'pfcand_dzdz', 
            'pfcand_dxydz', 
            'pfcand_dphidxy', 
            'pfcand_dlambdadz', 
            'pfcand_btagEtaRel', 
            'pfcand_btagPtRatio', 
            'pfcand_btagPParRatio', 
            'pfcand_btagSip2dVal', 
            'pfcand_btagSip2dSig', 
            'pfcand_btagSip3dVal', 
            'pfcand_btagSip3dSig', 
            'pfcand_btagJetDistVal'
        )
    ),
    sv = cms.PSet(
        input_shape = cms.vuint32(1, 15, 7, 1),
        var_infos = cms.PSet(
            sv_abseta = cms.PSet(
                median = cms.double(0.616221785545),
                norm_factor = cms.double(1.49676942133)
            ),
            sv_costhetasvpv = cms.PSet(
                median = cms.double(0.999747157097),
                norm_factor = cms.double(174.907183727)
            ),
            sv_d3d = cms.PSet(
                median = cms.double(0.5242870152),
                norm_factor = cms.double(0.255813267634)
            ),
            sv_d3dsig = cms.PSet(
                median = cms.double(9.12465429306),
                norm_factor = cms.double(0.0238374692882)
            ),
            sv_deltaR = cms.PSet(
                median = cms.double(0.140969499946),
                norm_factor = cms.double(4.30546783192)
            ),
            sv_dxy = cms.PSet(
                median = cms.double(0.387232214212),
                norm_factor = cms.double(0.360931771841)
            ),
            sv_dxysig = cms.PSet(
                median = cms.double(9.11130714417),
                norm_factor = cms.double(0.0238327380073)
            ),
            sv_erel_log = cms.PSet(
                median = cms.double(-2.82667005062),
                norm_factor = cms.double(0.704463981589)
            ),
            sv_etarel = cms.PSet(
                median = cms.double(-0.0037129354896),
                norm_factor = cms.double(6.99426943996)
            ),
            sv_mass = cms.PSet(
                median = cms.double(1.34319722652),
                norm_factor = cms.double(0.368495534421)
            ),
            sv_normchi2 = cms.PSet(
                median = cms.double(0.819934427738),
                norm_factor = cms.double(0.725797320076)
            ),
            sv_ntracks = cms.PSet(
                median = cms.double(3.0),
                norm_factor = cms.double(0.5)
            ),
            sv_phirel = cms.PSet(
                median = cms.double(0.000521215377375),
                norm_factor = cms.double(7.16761972364)
            ),
            sv_pt_log = cms.PSet(
                median = cms.double(3.64881515503),
                norm_factor = cms.double(0.725050067872)
            ),
            sv_ptrel_log = cms.PSet(
                median = cms.double(-2.81496477127),
                norm_factor = cms.double(0.701236308041)
            )
        ),
        var_length = cms.uint32(7),
        var_names = cms.vstring(
            'sv_pt_log', 
            'sv_ptrel_log', 
            'sv_erel_log', 
            'sv_phirel', 
            'sv_etarel', 
            'sv_deltaR', 
            'sv_abseta', 
            'sv_mass', 
            'sv_ntracks', 
            'sv_normchi2', 
            'sv_dxy', 
            'sv_dxysig', 
            'sv_d3d', 
            'sv_d3dsig', 
            'sv_costhetasvpv'
        )
    )
)

process.pfElecMva = cms.PSet(
    MVACut = cms.double(-1.0)
)

process.pfIsolationCalculator = cms.PSet(
    ComponentName = cms.string('pfIsolationCalculator'),
    applyDzDxyVeto = cms.bool(True),
    applyMissHitPhVeto = cms.bool(False),
    applyPFPUVeto = cms.bool(True),
    applyVeto = cms.bool(True),
    checkClosestZVertex = cms.bool(True),
    coneDR = cms.double(0.3),
    deltaRVetoBarrel = cms.bool(True),
    deltaRVetoBarrelCharged = cms.double(0.02),
    deltaRVetoBarrelNeutrals = cms.double(-1.0),
    deltaRVetoBarrelPhotons = cms.double(-1.0),
    deltaRVetoEndcap = cms.bool(True),
    deltaRVetoEndcapCharged = cms.double(0.02),
    deltaRVetoEndcapNeutrals = cms.double(-1.0),
    deltaRVetoEndcapPhotons = cms.double(0.07),
    numberOfCrystalEndcapPhotons = cms.double(4.0),
    numberOfRings = cms.int32(1),
    particleType = cms.int32(1),
    rectangleDeltaEtaVetoBarrelCharged = cms.double(-1),
    rectangleDeltaEtaVetoBarrelNeutrals = cms.double(-1),
    rectangleDeltaEtaVetoBarrelPhotons = cms.double(0.015),
    rectangleDeltaEtaVetoEndcapCharged = cms.double(-1),
    rectangleDeltaEtaVetoEndcapNeutrals = cms.double(-1),
    rectangleDeltaEtaVetoEndcapPhotons = cms.double(-1),
    rectangleDeltaPhiVetoBarrelCharged = cms.double(-1),
    rectangleDeltaPhiVetoBarrelNeutrals = cms.double(-1),
    rectangleDeltaPhiVetoBarrelPhotons = cms.double(1.0),
    rectangleDeltaPhiVetoEndcapCharged = cms.double(-1),
    rectangleDeltaPhiVetoEndcapNeutrals = cms.double(-1),
    rectangleDeltaPhiVetoEndcapPhotons = cms.double(-1),
    rectangleVetoBarrel = cms.bool(True),
    rectangleVetoEndcap = cms.bool(False),
    ringSize = cms.double(0.3),
    useCrystalSize = cms.bool(True)
)

process.pfMassDecorrelatedDeepBoostedJetPreprocessParams = cms.PSet(
    input_names = cms.vstring(
        'pfcand', 
        'sv'
    ),
    pfcand = cms.PSet(
        input_shape = cms.vuint32(1, 36, 100, 1),
        var_infos = cms.PSet(
            pfcand_VTX_ass = cms.PSet(
                median = cms.double(7.0),
                norm_factor = cms.double(1.0)
            ),
            pfcand_abseta = cms.PSet(
                median = cms.double(0.632648706436),
                norm_factor = cms.double(1.59032225958)
            ),
            pfcand_btagEtaRel = cms.PSet(
                median = cms.double(1.19703966379),
                norm_factor = cms.double(0.521026991705)
            ),
            pfcand_btagJetDistVal = cms.PSet(
                median = cms.double(-0.000215483247302),
                norm_factor = cms.double(161.385119349)
            ),
            pfcand_btagPParRatio = cms.PSet(
                median = cms.double(0.839023888111),
                norm_factor = cms.double(1.19186117841)
            ),
            pfcand_btagPtRatio = cms.PSet(
                median = cms.double(0.0173742230982),
                norm_factor = cms.double(4.25351138308)
            ),
            pfcand_btagSip2dSig = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(1.41174531059)
            ),
            pfcand_btagSip2dVal = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(495.583709284)
            ),
            pfcand_btagSip3dSig = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(0.831133090749)
            ),
            pfcand_btagSip3dVal = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(233.664322627)
            ),
            pfcand_charge = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(1.0)
            ),
            pfcand_deltaR = cms.PSet(
                median = cms.double(0.252654820681),
                norm_factor = cms.double(3.50836328292)
            ),
            pfcand_detadeta = cms.PSet(
                median = cms.double(1.15567200254e-08),
                norm_factor = cms.double(1644010.14927)
            ),
            pfcand_dlambdadz = cms.PSet(
                median = cms.double(-1.2810873784e-07),
                norm_factor = cms.double(268715.13012)
            ),
            pfcand_dphidphi = cms.PSet(
                median = cms.double(1.130510352e-08),
                norm_factor = cms.double(796482.476472)
            ),
            pfcand_dphidxy = cms.PSet(
                median = cms.double(-9.61654578191e-08),
                norm_factor = cms.double(204149.346943)
            ),
            pfcand_dptdpt = cms.PSet(
                median = cms.double(4.11880840545e-08),
                norm_factor = cms.double(66429.1000843)
            ),
            pfcand_drminsv = cms.PSet(
                median = cms.double(0.192182734609),
                norm_factor = cms.double(2.38205282141)
            ),
            pfcand_drsubjet1 = cms.PSet(
                median = cms.double(0.258241385221),
                norm_factor = cms.double(2.92607580997)
            ),
            pfcand_drsubjet2 = cms.PSet(
                median = cms.double(0.305164307356),
                norm_factor = cms.double(2.88195895791)
            ),
            pfcand_dxy = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(415.415835966)
            ),
            pfcand_dxydxy = cms.PSet(
                median = cms.double(9.32332170578e-07),
                norm_factor = cms.double(45949.2394216)
            ),
            pfcand_dxydz = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(10598589.4298)
            ),
            pfcand_dxysig = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(1.54565964258)
            ),
            pfcand_dz = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(264.770519024)
            ),
            pfcand_dzdz = cms.PSet(
                median = cms.double(1.58729170607e-06),
                norm_factor = cms.double(36545.958354)
            ),
            pfcand_dzsig = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(1.23840120847)
            ),
            pfcand_erel_log = cms.PSet(
                median = cms.double(-5.38221979141),
                norm_factor = cms.double(0.556499386531)
            ),
            pfcand_etarel = cms.PSet(
                median = cms.double(-0.00711047858931),
                norm_factor = cms.double(4.2642743837)
            ),
            pfcand_lostInnerHits = cms.PSet(
                median = cms.double(-1.0),
                norm_factor = cms.double(1.0)
            ),
            pfcand_normchi2 = cms.PSet(
                median = cms.double(2.0),
                norm_factor = cms.double(0.00100300902708)
            ),
            pfcand_phirel = cms.PSet(
                median = cms.double(-1.71389010575e-05),
                norm_factor = cms.double(4.22784626632)
            ),
            pfcand_pt_log = cms.PSet(
                median = cms.double(1.03476798534),
                norm_factor = cms.double(0.542224410728)
            ),
            pfcand_ptrel_log = cms.PSet(
                median = cms.double(-5.37407469749),
                norm_factor = cms.double(0.554677114485)
            ),
            pfcand_puppiw = cms.PSet(
                median = cms.double(1.0),
                norm_factor = cms.double(255.000015199)
            ),
            pfcand_quality = cms.PSet(
                median = cms.double(5.0),
                norm_factor = cms.double(0.2)
            )
        ),
        var_length = cms.uint32(100),
        var_names = cms.vstring(
            'pfcand_pt_log', 
            'pfcand_ptrel_log', 
            'pfcand_erel_log', 
            'pfcand_phirel', 
            'pfcand_etarel', 
            'pfcand_deltaR', 
            'pfcand_abseta', 
            'pfcand_puppiw', 
            'pfcand_drminsv', 
            'pfcand_drsubjet1', 
            'pfcand_drsubjet2', 
            'pfcand_charge', 
            'pfcand_VTX_ass', 
            'pfcand_lostInnerHits', 
            'pfcand_normchi2', 
            'pfcand_quality', 
            'pfcand_dz', 
            'pfcand_dzsig', 
            'pfcand_dxy', 
            'pfcand_dxysig', 
            'pfcand_dptdpt', 
            'pfcand_detadeta', 
            'pfcand_dphidphi', 
            'pfcand_dxydxy', 
            'pfcand_dzdz', 
            'pfcand_dxydz', 
            'pfcand_dphidxy', 
            'pfcand_dlambdadz', 
            'pfcand_btagEtaRel', 
            'pfcand_btagPtRatio', 
            'pfcand_btagPParRatio', 
            'pfcand_btagSip2dVal', 
            'pfcand_btagSip2dSig', 
            'pfcand_btagSip3dVal', 
            'pfcand_btagSip3dSig', 
            'pfcand_btagJetDistVal'
        )
    ),
    sv = cms.PSet(
        input_shape = cms.vuint32(1, 15, 7, 1),
        var_infos = cms.PSet(
            sv_abseta = cms.PSet(
                median = cms.double(0.616221785545),
                norm_factor = cms.double(1.49676942133)
            ),
            sv_costhetasvpv = cms.PSet(
                median = cms.double(0.999747157097),
                norm_factor = cms.double(174.907183727)
            ),
            sv_d3d = cms.PSet(
                median = cms.double(0.5242870152),
                norm_factor = cms.double(0.255813267634)
            ),
            sv_d3dsig = cms.PSet(
                median = cms.double(9.12465429306),
                norm_factor = cms.double(0.0238374692882)
            ),
            sv_deltaR = cms.PSet(
                median = cms.double(0.140969499946),
                norm_factor = cms.double(4.30546783192)
            ),
            sv_dxy = cms.PSet(
                median = cms.double(0.387232214212),
                norm_factor = cms.double(0.360931771841)
            ),
            sv_dxysig = cms.PSet(
                median = cms.double(9.11130714417),
                norm_factor = cms.double(0.0238327380073)
            ),
            sv_erel_log = cms.PSet(
                median = cms.double(-2.82667005062),
                norm_factor = cms.double(0.704463981589)
            ),
            sv_etarel = cms.PSet(
                median = cms.double(-0.0037129354896),
                norm_factor = cms.double(6.99426943996)
            ),
            sv_mass = cms.PSet(
                median = cms.double(1.34319722652),
                norm_factor = cms.double(0.368495534421)
            ),
            sv_normchi2 = cms.PSet(
                median = cms.double(0.819934427738),
                norm_factor = cms.double(0.725797320076)
            ),
            sv_ntracks = cms.PSet(
                median = cms.double(3.0),
                norm_factor = cms.double(0.5)
            ),
            sv_phirel = cms.PSet(
                median = cms.double(0.000521215377375),
                norm_factor = cms.double(7.16761972364)
            ),
            sv_pt_log = cms.PSet(
                median = cms.double(3.64881515503),
                norm_factor = cms.double(0.725050067872)
            ),
            sv_ptrel_log = cms.PSet(
                median = cms.double(-2.81496477127),
                norm_factor = cms.double(0.701236308041)
            )
        ),
        var_length = cms.uint32(7),
        var_names = cms.vstring(
            'sv_pt_log', 
            'sv_ptrel_log', 
            'sv_erel_log', 
            'sv_phirel', 
            'sv_etarel', 
            'sv_deltaR', 
            'sv_abseta', 
            'sv_mass', 
            'sv_ntracks', 
            'sv_normchi2', 
            'sv_dxy', 
            'sv_dxysig', 
            'sv_d3d', 
            'sv_d3dsig', 
            'sv_costhetasvpv'
        )
    )
)

process.pfMassDecorrelatedParticleNetPreprocessParams = cms.PSet(
    input_names = cms.vstring(
        'pf_points', 
        'pf_features', 
        'pf_mask', 
        'sv_points', 
        'sv_features', 
        'sv_mask'
    ),
    pf_features = cms.PSet(
        input_shape = cms.vuint32(1, 20, 100),
        var_infos = cms.PSet(
            pfcand_VTX_ass = cms.PSet(
                median = cms.double(7.0),
                norm_factor = cms.double(1.0)
            ),
            pfcand_abseta = cms.PSet(
                median = cms.double(0.570207834244),
                norm_factor = cms.double(1.65039794176)
            ),
            pfcand_btagEtaRel = cms.PSet(
                median = cms.double(1.02164459229),
                norm_factor = cms.double(0.450494647657)
            ),
            pfcand_btagJetDistVal = cms.PSet(
                median = cms.double(-8.01788191893e-05),
                norm_factor = cms.double(172.900234853)
            ),
            pfcand_btagPParRatio = cms.PSet(
                median = cms.double(0.777632951736),
                norm_factor = cms.double(1.28595373661)
            ),
            pfcand_btagPtRatio = cms.PSet(
                median = cms.double(0.00793754169717),
                norm_factor = cms.double(4.41778965372)
            ),
            pfcand_btagSip3dSig = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(0.871534329165)
            ),
            pfcand_btagSip3dVal = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(252.165554148)
            ),
            pfcand_charge = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(1.0)
            ),
            pfcand_dxy = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(473.799859238)
            ),
            pfcand_dxysig = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(1.66318902024)
            ),
            pfcand_dz = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(297.458232668)
            ),
            pfcand_dzsig = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(1.38690098449)
            ),
            pfcand_e_log_nopuppi = cms.PSet(
                median = cms.double(1.42155307531),
                norm_factor = cms.double(0.519927136489)
            ),
            pfcand_etarel = cms.PSet(
                median = cms.double(-0.00481873401441),
                norm_factor = cms.double(4.44798275517)
            ),
            pfcand_isChargedHad = cms.PSet(
                median = cms.double(1.0),
                norm_factor = cms.double(1.0)
            ),
            pfcand_isEl = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(1.0)
            ),
            pfcand_isGamma = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(1.0)
            ),
            pfcand_isMu = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(1.0)
            ),
            pfcand_isNeutralHad = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(1.0)
            ),
            pfcand_lostInnerHits = cms.PSet(
                median = cms.double(-1.0),
                norm_factor = cms.double(1.0)
            ),
            pfcand_normchi2 = cms.PSet(
                median = cms.double(3.0),
                norm_factor = cms.double(0.00100401606426)
            ),
            pfcand_phirel = cms.PSet(
                median = cms.double(-0.000108399453893),
                norm_factor = cms.double(4.39792304438)
            ),
            pfcand_pt_log_nopuppi = cms.PSet(
                median = cms.double(1.12241530418),
                norm_factor = cms.double(0.514354843556)
            ),
            pfcand_quality = cms.PSet(
                median = cms.double(5.0),
                norm_factor = cms.double(0.2)
            )
        ),
        var_length = cms.uint32(100),
        var_names = cms.vstring(
            'pfcand_pt_log_nopuppi', 
            'pfcand_e_log_nopuppi', 
            'pfcand_etarel', 
            'pfcand_phirel', 
            'pfcand_abseta', 
            'pfcand_charge', 
            'pfcand_VTX_ass', 
            'pfcand_lostInnerHits', 
            'pfcand_normchi2', 
            'pfcand_quality', 
            'pfcand_dz', 
            'pfcand_dzsig', 
            'pfcand_dxy', 
            'pfcand_dxysig', 
            'pfcand_btagEtaRel', 
            'pfcand_btagPtRatio', 
            'pfcand_btagPParRatio', 
            'pfcand_btagSip3dVal', 
            'pfcand_btagSip3dSig', 
            'pfcand_btagJetDistVal'
        )
    ),
    pf_mask = cms.PSet(
        input_shape = cms.vuint32(1, 1, 100),
        var_infos = cms.PSet(
            pfcand_mask = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(1.0)
            )
        ),
        var_length = cms.uint32(100),
        var_names = cms.vstring('pfcand_mask')
    ),
    pf_points = cms.PSet(
        input_shape = cms.vuint32(1, 2, 100),
        var_infos = cms.PSet(
            pfcand_etarel = cms.PSet(
                median = cms.double(-0.00481873401441),
                norm_factor = cms.double(4.44798275517)
            ),
            pfcand_phirel = cms.PSet(
                median = cms.double(-0.000108399453893),
                norm_factor = cms.double(4.39792304438)
            )
        ),
        var_length = cms.uint32(100),
        var_names = cms.vstring(
            'pfcand_etarel', 
            'pfcand_phirel'
        )
    ),
    sv_features = cms.PSet(
        input_shape = cms.vuint32(1, 12, 7),
        var_infos = cms.PSet(
            sv_abseta = cms.PSet(
                median = cms.double(0.549196600914),
                norm_factor = cms.double(1.59394768801)
            ),
            sv_costhetasvpv = cms.PSet(
                median = cms.double(0.999762713909),
                norm_factor = cms.double(183.233393766)
            ),
            sv_d3d = cms.PSet(
                median = cms.double(0.551342129707),
                norm_factor = cms.double(0.223128153806)
            ),
            sv_d3dsig = cms.PSet(
                median = cms.double(8.35655975342),
                norm_factor = cms.double(0.0238999954695)
            ),
            sv_dxy = cms.PSet(
                median = cms.double(0.421502441168),
                norm_factor = cms.double(0.312218277088)
            ),
            sv_dxysig = cms.PSet(
                median = cms.double(8.34426879883),
                norm_factor = cms.double(0.0239017055779)
            ),
            sv_etarel = cms.PSet(
                median = cms.double(-0.00247404468246),
                norm_factor = cms.double(8.44460188362)
            ),
            sv_mass = cms.PSet(
                median = cms.double(1.3346953392),
                norm_factor = cms.double(0.309230848837)
            ),
            sv_normchi2 = cms.PSet(
                median = cms.double(0.806915462017),
                norm_factor = cms.double(0.724496098658)
            ),
            sv_ntracks = cms.PSet(
                median = cms.double(3.0),
                norm_factor = cms.double(0.5)
            ),
            sv_phirel = cms.PSet(
                median = cms.double(0.000502154347487),
                norm_factor = cms.double(8.73243388771)
            ),
            sv_pt_log = cms.PSet(
                median = cms.double(3.78325366974),
                norm_factor = cms.double(0.692538144148)
            )
        ),
        var_length = cms.uint32(7),
        var_names = cms.vstring(
            'sv_pt_log', 
            'sv_mass', 
            'sv_phirel', 
            'sv_etarel', 
            'sv_abseta', 
            'sv_ntracks', 
            'sv_normchi2', 
            'sv_dxy', 
            'sv_dxysig', 
            'sv_d3d', 
            'sv_d3dsig', 
            'sv_costhetasvpv'
        )
    ),
    sv_mask = cms.PSet(
        input_shape = cms.vuint32(1, 1, 7),
        var_infos = cms.PSet(
            sv_mask = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(1.0)
            )
        ),
        var_length = cms.uint32(7),
        var_names = cms.vstring('sv_mask')
    ),
    sv_points = cms.PSet(
        input_shape = cms.vuint32(1, 2, 7),
        var_infos = cms.PSet(
            sv_etarel = cms.PSet(
                median = cms.double(-0.00247404468246),
                norm_factor = cms.double(8.44460188362)
            ),
            sv_phirel = cms.PSet(
                median = cms.double(0.000502154347487),
                norm_factor = cms.double(8.73243388771)
            )
        ),
        var_length = cms.uint32(7),
        var_names = cms.vstring(
            'sv_phirel', 
            'sv_etarel'
        )
    )
)

process.pfParticleNetPreprocessParams = cms.PSet(
    input_names = cms.vstring(
        'pf_points', 
        'pf_features', 
        'pf_mask', 
        'sv_points', 
        'sv_features', 
        'sv_mask'
    ),
    pf_features = cms.PSet(
        input_shape = cms.vuint32(1, 25, 100),
        var_infos = cms.PSet(
            pfcand_VTX_ass = cms.PSet(
                median = cms.double(7.0),
                norm_factor = cms.double(1.0)
            ),
            pfcand_abseta = cms.PSet(
                median = cms.double(0.570207834244),
                norm_factor = cms.double(1.65039794176)
            ),
            pfcand_btagEtaRel = cms.PSet(
                median = cms.double(1.02164459229),
                norm_factor = cms.double(0.450494647657)
            ),
            pfcand_btagJetDistVal = cms.PSet(
                median = cms.double(-8.01788191893e-05),
                norm_factor = cms.double(172.900234853)
            ),
            pfcand_btagPParRatio = cms.PSet(
                median = cms.double(0.777632951736),
                norm_factor = cms.double(1.28595373661)
            ),
            pfcand_btagPtRatio = cms.PSet(
                median = cms.double(0.00793754169717),
                norm_factor = cms.double(4.41778965372)
            ),
            pfcand_btagSip3dSig = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(0.871534329165)
            ),
            pfcand_btagSip3dVal = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(252.165554148)
            ),
            pfcand_charge = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(1.0)
            ),
            pfcand_dxy = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(473.799859238)
            ),
            pfcand_dxysig = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(1.66318902024)
            ),
            pfcand_dz = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(297.458232668)
            ),
            pfcand_dzsig = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(1.38690098449)
            ),
            pfcand_e_log_nopuppi = cms.PSet(
                median = cms.double(1.42155307531),
                norm_factor = cms.double(0.519927136489)
            ),
            pfcand_etarel = cms.PSet(
                median = cms.double(-0.00481873401441),
                norm_factor = cms.double(4.44798275517)
            ),
            pfcand_isChargedHad = cms.PSet(
                median = cms.double(1.0),
                norm_factor = cms.double(1.0)
            ),
            pfcand_isEl = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(1.0)
            ),
            pfcand_isGamma = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(1.0)
            ),
            pfcand_isMu = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(1.0)
            ),
            pfcand_isNeutralHad = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(1.0)
            ),
            pfcand_lostInnerHits = cms.PSet(
                median = cms.double(-1.0),
                norm_factor = cms.double(1.0)
            ),
            pfcand_normchi2 = cms.PSet(
                median = cms.double(3.0),
                norm_factor = cms.double(0.00100401606426)
            ),
            pfcand_phirel = cms.PSet(
                median = cms.double(-0.000108399453893),
                norm_factor = cms.double(4.39792304438)
            ),
            pfcand_pt_log_nopuppi = cms.PSet(
                median = cms.double(1.12241530418),
                norm_factor = cms.double(0.514354843556)
            ),
            pfcand_quality = cms.PSet(
                median = cms.double(5.0),
                norm_factor = cms.double(0.2)
            )
        ),
        var_length = cms.uint32(100),
        var_names = cms.vstring(
            'pfcand_pt_log_nopuppi', 
            'pfcand_e_log_nopuppi', 
            'pfcand_etarel', 
            'pfcand_phirel', 
            'pfcand_abseta', 
            'pfcand_charge', 
            'pfcand_isMu', 
            'pfcand_isEl', 
            'pfcand_isChargedHad', 
            'pfcand_isGamma', 
            'pfcand_isNeutralHad', 
            'pfcand_VTX_ass', 
            'pfcand_lostInnerHits', 
            'pfcand_normchi2', 
            'pfcand_quality', 
            'pfcand_dz', 
            'pfcand_dzsig', 
            'pfcand_dxy', 
            'pfcand_dxysig', 
            'pfcand_btagEtaRel', 
            'pfcand_btagPtRatio', 
            'pfcand_btagPParRatio', 
            'pfcand_btagSip3dVal', 
            'pfcand_btagSip3dSig', 
            'pfcand_btagJetDistVal'
        )
    ),
    pf_mask = cms.PSet(
        input_shape = cms.vuint32(1, 1, 100),
        var_infos = cms.PSet(
            pfcand_mask = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(1.0)
            )
        ),
        var_length = cms.uint32(100),
        var_names = cms.vstring('pfcand_mask')
    ),
    pf_points = cms.PSet(
        input_shape = cms.vuint32(1, 2, 100),
        var_infos = cms.PSet(
            pfcand_etarel = cms.PSet(
                median = cms.double(-0.00481873401441),
                norm_factor = cms.double(4.44798275517)
            ),
            pfcand_phirel = cms.PSet(
                median = cms.double(-0.000108399453893),
                norm_factor = cms.double(4.39792304438)
            )
        ),
        var_length = cms.uint32(100),
        var_names = cms.vstring(
            'pfcand_etarel', 
            'pfcand_phirel'
        )
    ),
    sv_features = cms.PSet(
        input_shape = cms.vuint32(1, 12, 7),
        var_infos = cms.PSet(
            sv_abseta = cms.PSet(
                median = cms.double(0.549196600914),
                norm_factor = cms.double(1.59394768801)
            ),
            sv_costhetasvpv = cms.PSet(
                median = cms.double(0.999762713909),
                norm_factor = cms.double(183.233393766)
            ),
            sv_d3d = cms.PSet(
                median = cms.double(0.551342129707),
                norm_factor = cms.double(0.223128153806)
            ),
            sv_d3dsig = cms.PSet(
                median = cms.double(8.35655975342),
                norm_factor = cms.double(0.0238999954695)
            ),
            sv_dxy = cms.PSet(
                median = cms.double(0.421502441168),
                norm_factor = cms.double(0.312218277088)
            ),
            sv_dxysig = cms.PSet(
                median = cms.double(8.34426879883),
                norm_factor = cms.double(0.0239017055779)
            ),
            sv_etarel = cms.PSet(
                median = cms.double(-0.00247404468246),
                norm_factor = cms.double(8.44460188362)
            ),
            sv_mass = cms.PSet(
                median = cms.double(1.3346953392),
                norm_factor = cms.double(0.309230848837)
            ),
            sv_normchi2 = cms.PSet(
                median = cms.double(0.806915462017),
                norm_factor = cms.double(0.724496098658)
            ),
            sv_ntracks = cms.PSet(
                median = cms.double(3.0),
                norm_factor = cms.double(0.5)
            ),
            sv_phirel = cms.PSet(
                median = cms.double(0.000502154347487),
                norm_factor = cms.double(8.73243388771)
            ),
            sv_pt_log = cms.PSet(
                median = cms.double(3.78325366974),
                norm_factor = cms.double(0.692538144148)
            )
        ),
        var_length = cms.uint32(7),
        var_names = cms.vstring(
            'sv_pt_log', 
            'sv_mass', 
            'sv_phirel', 
            'sv_etarel', 
            'sv_abseta', 
            'sv_ntracks', 
            'sv_normchi2', 
            'sv_dxy', 
            'sv_dxysig', 
            'sv_d3d', 
            'sv_d3dsig', 
            'sv_costhetasvpv'
        )
    ),
    sv_mask = cms.PSet(
        input_shape = cms.vuint32(1, 1, 7),
        var_infos = cms.PSet(
            sv_mask = cms.PSet(
                median = cms.double(0.0),
                norm_factor = cms.double(1.0)
            )
        ),
        var_length = cms.uint32(7),
        var_names = cms.vstring('sv_mask')
    ),
    sv_points = cms.PSet(
        input_shape = cms.vuint32(1, 2, 7),
        var_infos = cms.PSet(
            sv_etarel = cms.PSet(
                median = cms.double(-0.00247404468246),
                norm_factor = cms.double(8.44460188362)
            ),
            sv_phirel = cms.PSet(
                median = cms.double(0.000502154347487),
                norm_factor = cms.double(8.73243388771)
            )
        ),
        var_length = cms.uint32(7),
        var_names = cms.vstring(
            'sv_phirel', 
            'sv_etarel'
        )
    )
)

process.pixelLessStepTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(False),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('pixelLessStepChi2Est'),
    foundHitBonus = cms.double(10.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(2),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(4),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('pixelLessStepTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.pixelLessStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(0),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.1),
    minimumNumberOfHits = cms.int32(4),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(1),
    strictSeedExtension = cms.bool(False)
)

process.pixelPairStepTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('pixelPairStepChi2Est'),
    foundHitBonus = cms.double(10.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('pixelPairStepTrajectoryFilterInOut')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(3),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('pixelPairStepTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(False)
)

process.pixelPairStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CompositeTrajectoryFilter'),
    filters = cms.VPSet(
        cms.PSet(
            refToPSet_ = cms.string('pixelPairStepTrajectoryFilterBase')
        ), 
        cms.PSet(
            refToPSet_ = cms.string('ClusterShapeTrajectoryFilter')
        )
    )
)

process.pixelPairStepTrajectoryFilterBase = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(0.701),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.1),
    minimumNumberOfHits = cms.int32(4),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.pixelPairStepTrajectoryFilterInOut = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(0.701),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.1),
    minimumNumberOfHits = cms.int32(4),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(1),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.pixelPairStepTrajectoryFilterShape = cms.PSet(
    ComponentType = cms.string('StripSubClusterShapeTrajectoryFilter'),
    layerMask = cms.PSet(
        TEC = cms.bool(False),
        TIB = cms.vuint32(1, 2),
        TID = cms.vuint32(1, 2),
        TOB = cms.bool(False)
    ),
    maxNSat = cms.uint32(3),
    maxTrimmedSizeDiffNeg = cms.double(1.0),
    maxTrimmedSizeDiffPos = cms.double(0.7),
    seedCutMIPs = cms.double(0.35),
    seedCutSN = cms.double(7.0),
    subclusterCutMIPs = cms.double(0.45),
    subclusterCutSN = cms.double(12.0),
    subclusterWindow = cms.double(0.7),
    trimMaxADC = cms.double(30.0),
    trimMaxFracNeigh = cms.double(0.25),
    trimMaxFracTotal = cms.double(0.15)
)

process.pset = cms.PSet(
    IDname = cms.string('ByTightCombinedIsolationDBSumPtCorr3HitsdR03'),
    maximumAbsoluteValues = cms.vdouble(0.8, 1000000000.0),
    maximumRelativeValues = cms.vdouble(-1.0, 0.1),
    referenceRawIDNames = cms.vstring(
        'ByRawCombinedIsolationDBSumPtCorr3HitsdR03', 
        'PhotonPtSumOutsideSignalConedR03'
    )
)

process.ptSeedParameterization = cms.PSet(
    CSC_01 = cms.vdouble(
        0.155906, -0.000406, 0.0, 0.194022, -0.010181, 
        0.0
    ),
    CSC_02 = cms.vdouble(
        0.600235, -0.205683, 0.001113, 0.655625, -0.682129, 
        0.253916
    ),
    CSC_03 = cms.vdouble(
        0.498992, -0.086235, -0.025772, 2.761006, -2.667607, 
        0.72802
    ),
    CSC_12 = cms.vdouble(
        -0.363549, 0.569552, -0.173186, 7.777069, -10.203618, 
        3.478874
    ),
    CSC_13 = cms.vdouble(
        1.22495, -1.792358, 0.711378, 5.271848, -6.280625, 
        2.0142
    ),
    CSC_14 = cms.vdouble(
        0.952517, -0.532733, 0.084601, 1.615881, -1.630744, 
        0.514139
    ),
    CSC_23 = cms.vdouble(
        -0.095236, 0.122061, -0.029852, -11.396689, 15.933598, 
        -4.267065
    ),
    CSC_24 = cms.vdouble(
        -0.049769, 0.063087, -0.011029, -13.765978, 16.296143, 
        -4.241835
    ),
    CSC_34 = cms.vdouble(
        0.144321, -0.142283, 0.035636, 190.260708, -180.888643, 
        43.430395
    ),
    DT_12 = cms.vdouble(
        0.176182, 0.058535, -0.090549, 0.202363, -0.203126, 
        0.222219
    ),
    DT_13 = cms.vdouble(
        0.298842, 0.076531, -0.14293, 0.219923, -0.145026, 
        0.155638
    ),
    DT_14 = cms.vdouble(
        0.388423, 0.068698, -0.145925, 0.159515, 0.124299, 
        -0.133269
    ),
    DT_23 = cms.vdouble(
        0.120647, 0.034743, -0.070855, 0.302427, -0.21417, 
        0.261012
    ),
    DT_24 = cms.vdouble(
        0.189527, 0.037328, -0.088523, 0.251936, 0.032411, 
        0.010984
    ),
    DT_34 = cms.vdouble(
        0.049146, -0.003494, -0.010099, 0.672095, 0.36459, 
        -0.304346
    ),
    OL_1213 = cms.vdouble(
        0.960544, -0.75644, 0.0, 0.1636, 0.114178, 
        0.0
    ),
    OL_1222 = cms.vdouble(
        0.215915, 0.002556, 0.0, 0.313596, -0.021465, 
        0.0
    ),
    OL_1232 = cms.vdouble(
        0.162626, 0.000843, 0.0, 0.396271, 0.002791, 
        0.0
    ),
    OL_2213 = cms.vdouble(
        0.563218, -0.493991, 0.0, 0.943776, -0.591751, 
        0.0
    ),
    OL_2222 = cms.vdouble(
        0.087587, 0.005729, 0.0, 0.535169, -0.087675, 
        0.0
    ),
    SMB_10 = cms.vdouble(
        1.160532, 0.148991, 0.0, 0.182785, -0.093776, 
        0.0
    ),
    SMB_11 = cms.vdouble(
        1.289468, -0.139653, 0.0, 0.137191, 0.01217, 
        0.0
    ),
    SMB_12 = cms.vdouble(
        1.923091, -0.913204, 0.0, 0.161556, 0.020215, 
        0.0
    ),
    SMB_20 = cms.vdouble(
        0.861314, -0.16233, 0.0, 0.248879, -0.113879, 
        0.0
    ),
    SMB_21 = cms.vdouble(
        0.918425, -0.141199, 0.0, 0.254515, -0.111848, 
        0.0
    ),
    SMB_22 = cms.vdouble(
        1.308565, -0.701634, 0.0, -0.302861, 0.675785, 
        0.0
    ),
    SMB_30 = cms.vdouble(
        0.399628, 0.014922, 0.0, 0.665622, 0.358439, 
        0.0
    ),
    SMB_31 = cms.vdouble(
        0.398661, -0.024853, 0.0, 0.863324, -0.413048, 
        0.0
    ),
    SMB_32 = cms.vdouble(
        0.421649, -0.111654, 0.0, -0.044613, 1.134858, 
        0.0
    ),
    SME_11 = cms.vdouble(
        2.39479, -0.888663, 0.0, -4.604546, 3.623464, 
        0.0
    ),
    SME_12 = cms.vdouble(
        -0.277294, 0.7616, 0.0, -0.243326, 1.446792, 
        0.0
    ),
    SME_13 = cms.vdouble(
        0.398851, 0.028176, 0.0, 0.567015, 2.623232, 
        0.0
    ),
    SME_21 = cms.vdouble(
        0.64895, -0.148762, 0.0, -5.07676, 6.284227, 
        0.0
    ),
    SME_22 = cms.vdouble(
        -0.624708, 0.641043, 0.0, 32.581295, -19.604264, 
        0.0
    ),
    SME_31 = cms.vdouble(
        -0.588188, 0.316961, 0.0, -95.261732, 45.444051, 
        0.0
    ),
    SME_32 = cms.vdouble(
        -0.021912, -0.008995, 0.0, -49.779764, 30.780972, 
        0.0
    ),
    SME_41 = cms.vdouble(
        -0.187116, 0.076415, 0.0, -58.552583, 27.933864, 
        0.0
    ),
    SME_42 = cms.vdouble(
        -0.021912, -0.008995, 0.0, -49.779764, 30.780972, 
        0.0
    )
)

process.regressionModifier = cms.PSet(
    eleRegs = cms.PSet(
        ecalOnlyMean = cms.PSet(
            ebHighEtForestName = cms.string('electron_eb_ECALonly'),
            ebLowEtForestName = cms.string('electron_eb_ecalOnly_1To300_0p2To2_mean'),
            eeHighEtForestName = cms.string('electron_ee_ECALonly'),
            eeLowEtForestName = cms.string('electron_ee_ecalOnly_1To300_0p2To2_mean'),
            forceHighEnergyTrainingIfSaturated = cms.bool(True),
            lowEtHighEtBoundary = cms.double(999999.0),
            rangeMaxHighEt = cms.double(3.0),
            rangeMaxLowEt = cms.double(2.0),
            rangeMinHighEt = cms.double(-1.0),
            rangeMinLowEt = cms.double(0.2)
        ),
        ecalOnlySigma = cms.PSet(
            ebHighEtForestName = cms.string('electron_eb_ECALonly_var'),
            ebLowEtForestName = cms.string('electron_eb_ecalOnly_1To300_0p0002To0p5_sigma'),
            eeHighEtForestName = cms.string('electron_ee_ECALonly_var'),
            eeLowEtForestName = cms.string('electron_ee_ecalOnly_1To300_0p0002To0p5_sigma'),
            forceHighEnergyTrainingIfSaturated = cms.bool(True),
            lowEtHighEtBoundary = cms.double(999999.0),
            rangeMaxHighEt = cms.double(0.5),
            rangeMaxLowEt = cms.double(0.5),
            rangeMinHighEt = cms.double(0.0002),
            rangeMinLowEt = cms.double(0.0002)
        ),
        epComb = cms.PSet(
            ecalTrkRegressionConfig = cms.PSet(
                ebHighEtForestName = cms.string('electron_eb_ecalTrk_1To300_0p2To2_mean'),
                ebLowEtForestName = cms.string('electron_eb_ecalTrk_1To300_0p2To2_mean'),
                eeHighEtForestName = cms.string('electron_ee_ecalTrk_1To300_0p2To2_mean'),
                eeLowEtForestName = cms.string('electron_ee_ecalTrk_1To300_0p2To2_mean'),
                forceHighEnergyTrainingIfSaturated = cms.bool(False),
                lowEtHighEtBoundary = cms.double(999999.0),
                rangeMaxHighEt = cms.double(2.0),
                rangeMaxLowEt = cms.double(2.0),
                rangeMinHighEt = cms.double(0.2),
                rangeMinLowEt = cms.double(0.2)
            ),
            ecalTrkRegressionUncertConfig = cms.PSet(
                ebHighEtForestName = cms.string('electron_eb_ecalTrk_1To300_0p0002To0p5_sigma'),
                ebLowEtForestName = cms.string('electron_eb_ecalTrk_1To300_0p0002To0p5_sigma'),
                eeHighEtForestName = cms.string('electron_ee_ecalTrk_1To300_0p0002To0p5_sigma'),
                eeLowEtForestName = cms.string('electron_ee_ecalTrk_1To300_0p0002To0p5_sigma'),
                forceHighEnergyTrainingIfSaturated = cms.bool(False),
                lowEtHighEtBoundary = cms.double(999999.0),
                rangeMaxHighEt = cms.double(0.5),
                rangeMaxLowEt = cms.double(0.5),
                rangeMinHighEt = cms.double(0.0002),
                rangeMinLowEt = cms.double(0.0002)
            ),
            maxEPDiffInSigmaForComb = cms.double(15.0),
            maxEcalEnergyForComb = cms.double(200.0),
            maxRelTrkMomErrForComb = cms.double(10.0),
            minEOverPForComb = cms.double(0.025)
        )
    ),
    maxRawEnergyForLowPtEBSigma = cms.double(-1),
    maxRawEnergyForLowPtEESigma = cms.double(1200.0),
    modifierName = cms.string('EGRegressionModifierV3'),
    phoRegs = cms.PSet(
        ecalOnlyMean = cms.PSet(
            ebHighEtForestName = cms.string('photon_eb_ECALonly'),
            ebLowEtForestName = cms.string('photon_eb_ecalOnly_5To300_0p2To2_mean'),
            eeHighEtForestName = cms.string('photon_ee_ECALonly'),
            eeLowEtForestName = cms.string('photon_ee_ecalOnly_5To300_0p2To2_mean'),
            forceHighEnergyTrainingIfSaturated = cms.bool(True),
            lowEtHighEtBoundary = cms.double(999999.0),
            rangeMaxHighEt = cms.double(3.0),
            rangeMaxLowEt = cms.double(2.0),
            rangeMinHighEt = cms.double(-1.0),
            rangeMinLowEt = cms.double(0.2)
        ),
        ecalOnlySigma = cms.PSet(
            ebHighEtForestName = cms.string('photon_eb_ECALonly_var'),
            ebLowEtForestName = cms.string('photon_eb_ecalOnly_5To300_0p0002To0p5_sigma'),
            eeHighEtForestName = cms.string('photon_ee_ECALonly_var'),
            eeLowEtForestName = cms.string('photon_ee_ecalOnly_5To300_0p0002To0p5_sigma'),
            forceHighEnergyTrainingIfSaturated = cms.bool(True),
            lowEtHighEtBoundary = cms.double(999999.0),
            rangeMaxHighEt = cms.double(0.5),
            rangeMaxLowEt = cms.double(0.5),
            rangeMinHighEt = cms.double(0.0002),
            rangeMinLowEt = cms.double(0.0002)
        )
    ),
    rhoTag = cms.InputTag("fixedGridRhoFastjetAllTmp"),
    useClosestToCentreSeedCrysDef = cms.bool(False)
)

process.regressionModifier103XLowPtPho = cms.PSet(
    eleRegs = cms.PSet(
        ecalOnlyMean = cms.PSet(
            ebHighEtForestName = cms.string('electron_eb_ECALonly'),
            ebLowEtForestName = cms.string('electron_eb_ecalOnly_1To20_0p2To2_mean'),
            eeHighEtForestName = cms.string('electron_ee_ECALonly'),
            eeLowEtForestName = cms.string('electron_ee_ecalOnly_1To20_0p2To2_mean'),
            forceHighEnergyTrainingIfSaturated = cms.bool(True),
            lowEtHighEtBoundary = cms.double(999999.0),
            rangeMaxHighEt = cms.double(3.0),
            rangeMaxLowEt = cms.double(2.0),
            rangeMinHighEt = cms.double(-1.0),
            rangeMinLowEt = cms.double(0.2)
        ),
        ecalOnlySigma = cms.PSet(
            ebHighEtForestName = cms.string('electron_eb_ECALonly_var'),
            ebLowEtForestName = cms.string('electron_eb_ecalOnly_1To20_0p0002To0p5_sigma'),
            eeHighEtForestName = cms.string('electron_ee_ECALonly_var'),
            eeLowEtForestName = cms.string('electron_ee_ecalOnly_1To20_0p0002To0p5_sigma'),
            forceHighEnergyTrainingIfSaturated = cms.bool(True),
            lowEtHighEtBoundary = cms.double(999999.0),
            rangeMaxHighEt = cms.double(0.5),
            rangeMaxLowEt = cms.double(0.5),
            rangeMinHighEt = cms.double(0.0002),
            rangeMinLowEt = cms.double(0.0002)
        ),
        epComb = cms.PSet(
            ecalTrkRegressionConfig = cms.PSet(
                ebHighEtForestName = cms.string('electron_eb_ecalTrk_1To20_0p2To2_mean'),
                ebLowEtForestName = cms.string('electron_eb_ecalTrk_1To20_0p2To2_mean'),
                eeHighEtForestName = cms.string('electron_ee_ecalTrk_1To20_0p2To2_mean'),
                eeLowEtForestName = cms.string('electron_ee_ecalTrk_1To20_0p2To2_mean'),
                forceHighEnergyTrainingIfSaturated = cms.bool(False),
                lowEtHighEtBoundary = cms.double(999999.0),
                rangeMaxHighEt = cms.double(2.0),
                rangeMaxLowEt = cms.double(2.0),
                rangeMinHighEt = cms.double(0.2),
                rangeMinLowEt = cms.double(0.2)
            ),
            ecalTrkRegressionUncertConfig = cms.PSet(
                ebHighEtForestName = cms.string('electron_eb_ecalTrk_1To20_0p0002To0p5_sigma'),
                ebLowEtForestName = cms.string('electron_eb_ecalTrk_1To20_0p0002To0p5_sigma'),
                eeHighEtForestName = cms.string('electron_ee_ecalTrk_1To20_0p0002To0p5_sigma'),
                eeLowEtForestName = cms.string('electron_ee_ecalTrk_1To20_0p0002To0p5_sigma'),
                forceHighEnergyTrainingIfSaturated = cms.bool(False),
                lowEtHighEtBoundary = cms.double(999999.0),
                rangeMaxHighEt = cms.double(0.5),
                rangeMaxLowEt = cms.double(0.5),
                rangeMinHighEt = cms.double(0.0002),
                rangeMinLowEt = cms.double(0.0002)
            ),
            maxEPDiffInSigmaForComb = cms.double(15.0),
            maxEcalEnergyForComb = cms.double(200.0),
            maxRelTrkMomErrForComb = cms.double(10.0),
            minEOverPForComb = cms.double(0.025)
        )
    ),
    maxRawEnergyForLowPtEBSigma = cms.double(-1),
    maxRawEnergyForLowPtEESigma = cms.double(1200.0),
    modifierName = cms.string('EGRegressionModifierV3'),
    phoRegs = cms.PSet(
        ecalOnlyMean = cms.PSet(
            ebHighEtForestName = cms.string('photon_eb_ECALonly'),
            ebLowEtForestName = cms.string('photon_eb_ecalOnly_1To20_0p2To2_mean'),
            eeHighEtForestName = cms.string('photon_ee_ECALonly'),
            eeLowEtForestName = cms.string('photon_ee_ecalOnly_1To20_0p2To2_mean'),
            forceHighEnergyTrainingIfSaturated = cms.bool(True),
            lowEtHighEtBoundary = cms.double(999999.0),
            rangeMaxHighEt = cms.double(3.0),
            rangeMaxLowEt = cms.double(2.0),
            rangeMinHighEt = cms.double(-1.0),
            rangeMinLowEt = cms.double(0.2)
        ),
        ecalOnlySigma = cms.PSet(
            ebHighEtForestName = cms.string('photon_eb_ECALonly_var'),
            ebLowEtForestName = cms.string('photon_eb_ecalOnly_1To20_0p0002To0p5_sigma'),
            eeHighEtForestName = cms.string('photon_ee_ECALonly_var'),
            eeLowEtForestName = cms.string('photon_ee_ecalOnly_1To20_0p0002To0p5_sigma'),
            forceHighEnergyTrainingIfSaturated = cms.bool(True),
            lowEtHighEtBoundary = cms.double(999999.0),
            rangeMaxHighEt = cms.double(0.5),
            rangeMaxLowEt = cms.double(0.5),
            rangeMinHighEt = cms.double(0.0002),
            rangeMinLowEt = cms.double(0.0002)
        )
    ),
    rhoTag = cms.InputTag("fixedGridRhoFastjetAllTmp"),
    useClosestToCentreSeedCrysDef = cms.bool(False)
)

process.regressionModifier106XUL = cms.PSet(
    eleRegs = cms.PSet(
        ecalOnlyMean = cms.PSet(
            ebHighEtForestName = cms.string('electron_eb_ECALonly'),
            ebLowEtForestName = cms.string('electron_eb_ecalOnly_1To300_0p2To2_mean'),
            eeHighEtForestName = cms.string('electron_ee_ECALonly'),
            eeLowEtForestName = cms.string('electron_ee_ecalOnly_1To300_0p2To2_mean'),
            forceHighEnergyTrainingIfSaturated = cms.bool(True),
            lowEtHighEtBoundary = cms.double(999999.0),
            rangeMaxHighEt = cms.double(3.0),
            rangeMaxLowEt = cms.double(2.0),
            rangeMinHighEt = cms.double(-1.0),
            rangeMinLowEt = cms.double(0.2)
        ),
        ecalOnlySigma = cms.PSet(
            ebHighEtForestName = cms.string('electron_eb_ECALonly_var'),
            ebLowEtForestName = cms.string('electron_eb_ecalOnly_1To300_0p0002To0p5_sigma'),
            eeHighEtForestName = cms.string('electron_ee_ECALonly_var'),
            eeLowEtForestName = cms.string('electron_ee_ecalOnly_1To300_0p0002To0p5_sigma'),
            forceHighEnergyTrainingIfSaturated = cms.bool(True),
            lowEtHighEtBoundary = cms.double(999999.0),
            rangeMaxHighEt = cms.double(0.5),
            rangeMaxLowEt = cms.double(0.5),
            rangeMinHighEt = cms.double(0.0002),
            rangeMinLowEt = cms.double(0.0002)
        ),
        epComb = cms.PSet(
            ecalTrkRegressionConfig = cms.PSet(
                ebHighEtForestName = cms.string('electron_eb_ecalTrk_1To300_0p2To2_mean'),
                ebLowEtForestName = cms.string('electron_eb_ecalTrk_1To300_0p2To2_mean'),
                eeHighEtForestName = cms.string('electron_ee_ecalTrk_1To300_0p2To2_mean'),
                eeLowEtForestName = cms.string('electron_ee_ecalTrk_1To300_0p2To2_mean'),
                forceHighEnergyTrainingIfSaturated = cms.bool(False),
                lowEtHighEtBoundary = cms.double(999999.0),
                rangeMaxHighEt = cms.double(2.0),
                rangeMaxLowEt = cms.double(2.0),
                rangeMinHighEt = cms.double(0.2),
                rangeMinLowEt = cms.double(0.2)
            ),
            ecalTrkRegressionUncertConfig = cms.PSet(
                ebHighEtForestName = cms.string('electron_eb_ecalTrk_1To300_0p0002To0p5_sigma'),
                ebLowEtForestName = cms.string('electron_eb_ecalTrk_1To300_0p0002To0p5_sigma'),
                eeHighEtForestName = cms.string('electron_ee_ecalTrk_1To300_0p0002To0p5_sigma'),
                eeLowEtForestName = cms.string('electron_ee_ecalTrk_1To300_0p0002To0p5_sigma'),
                forceHighEnergyTrainingIfSaturated = cms.bool(False),
                lowEtHighEtBoundary = cms.double(999999.0),
                rangeMaxHighEt = cms.double(0.5),
                rangeMaxLowEt = cms.double(0.5),
                rangeMinHighEt = cms.double(0.0002),
                rangeMinLowEt = cms.double(0.0002)
            ),
            maxEPDiffInSigmaForComb = cms.double(15.0),
            maxEcalEnergyForComb = cms.double(200.0),
            maxRelTrkMomErrForComb = cms.double(10.0),
            minEOverPForComb = cms.double(0.025)
        )
    ),
    maxRawEnergyForLowPtEBSigma = cms.double(-1),
    maxRawEnergyForLowPtEESigma = cms.double(1200.0),
    modifierName = cms.string('EGRegressionModifierV3'),
    phoRegs = cms.PSet(
        ecalOnlyMean = cms.PSet(
            ebHighEtForestName = cms.string('photon_eb_ECALonly'),
            ebLowEtForestName = cms.string('photon_eb_ecalOnly_5To300_0p2To2_mean'),
            eeHighEtForestName = cms.string('photon_ee_ECALonly'),
            eeLowEtForestName = cms.string('photon_ee_ecalOnly_5To300_0p2To2_mean'),
            forceHighEnergyTrainingIfSaturated = cms.bool(True),
            lowEtHighEtBoundary = cms.double(999999.0),
            rangeMaxHighEt = cms.double(3.0),
            rangeMaxLowEt = cms.double(2.0),
            rangeMinHighEt = cms.double(-1.0),
            rangeMinLowEt = cms.double(0.2)
        ),
        ecalOnlySigma = cms.PSet(
            ebHighEtForestName = cms.string('photon_eb_ECALonly_var'),
            ebLowEtForestName = cms.string('photon_eb_ecalOnly_5To300_0p0002To0p5_sigma'),
            eeHighEtForestName = cms.string('photon_ee_ECALonly_var'),
            eeLowEtForestName = cms.string('photon_ee_ecalOnly_5To300_0p0002To0p5_sigma'),
            forceHighEnergyTrainingIfSaturated = cms.bool(True),
            lowEtHighEtBoundary = cms.double(999999.0),
            rangeMaxHighEt = cms.double(0.5),
            rangeMaxLowEt = cms.double(0.5),
            rangeMinHighEt = cms.double(0.0002),
            rangeMinLowEt = cms.double(0.0002)
        )
    ),
    rhoTag = cms.InputTag("fixedGridRhoFastjetAllTmp"),
    useClosestToCentreSeedCrysDef = cms.bool(False)
)

process.regressionModifier80X = cms.PSet(
    applyExtraHighEnergyProtection = cms.bool(True),
    autoDetectBunchSpacing = cms.bool(True),
    bunchSpacingTag = cms.InputTag("bunchSpacingProducer"),
    electron_config = cms.PSet(
        combinationKey_25ns = cms.string('gedelectron_p4combination_25ns'),
        combinationKey_50ns = cms.string('gedelectron_p4combination_50ns'),
        regressionKey_25ns = cms.vstring(
            'gedelectron_EBCorrection_25ns', 
            'gedelectron_EECorrection_25ns'
        ),
        regressionKey_50ns = cms.vstring(
            'gedelectron_EBCorrection_50ns', 
            'gedelectron_EECorrection_50ns'
        ),
        uncertaintyKey_25ns = cms.vstring(
            'gedelectron_EBUncertainty_25ns', 
            'gedelectron_EEUncertainty_25ns'
        ),
        uncertaintyKey_50ns = cms.vstring(
            'gedelectron_EBUncertainty_50ns', 
            'gedelectron_EEUncertainty_50ns'
        )
    ),
    manualBunchSpacing = cms.int32(50),
    modifierName = cms.string('EGRegressionModifierV1'),
    photon_config = cms.PSet(
        regressionKey_25ns = cms.vstring(
            'gedphoton_EBCorrection_25ns', 
            'gedphoton_EECorrection_25ns'
        ),
        regressionKey_50ns = cms.vstring(
            'gedphoton_EBCorrection_50ns', 
            'gedphoton_EECorrection_50ns'
        ),
        uncertaintyKey_25ns = cms.vstring(
            'gedphoton_EBUncertainty_25ns', 
            'gedphoton_EEUncertainty_25ns'
        ),
        uncertaintyKey_50ns = cms.vstring(
            'gedphoton_EBUncertainty_50ns', 
            'gedphoton_EEUncertainty_50ns'
        )
    ),
    rhoCollection = cms.InputTag("fixedGridRhoFastjetAll"),
    vertexCollection = cms.InputTag("offlinePrimaryVertices")
)

process.regressionModifier94X = cms.PSet(
    eOverP_ECALTRKThr = cms.double(0.025),
    electron_config = cms.PSet(
        regressionKey = cms.vstring(
            'electron_eb_ECALonly_lowpt', 
            'electron_eb_ECALonly', 
            'electron_ee_ECALonly_lowpt', 
            'electron_ee_ECALonly', 
            'electron_eb_ECALTRK_lowpt', 
            'electron_eb_ECALTRK', 
            'electron_ee_ECALTRK_lowpt', 
            'electron_ee_ECALTRK'
        ),
        uncertaintyKey = cms.vstring(
            'electron_eb_ECALonly_lowpt_var', 
            'electron_eb_ECALonly_var', 
            'electron_ee_ECALonly_lowpt_var', 
            'electron_ee_ECALonly_var', 
            'electron_eb_ECALTRK_lowpt_var', 
            'electron_eb_ECALTRK_var', 
            'electron_ee_ECALTRK_lowpt_var', 
            'electron_ee_ECALTRK_var'
        )
    ),
    epDiffSig_ECALTRKThr = cms.double(15.0),
    epSig_ECALTRKThr = cms.double(10.0),
    forceHighEnergyEcalTrainingIfSaturated = cms.bool(True),
    highEnergy_ECALTRKThr = cms.double(200.0),
    lowEnergy_ECALTRKThr = cms.double(50.0),
    lowEnergy_ECALonlyThr = cms.double(99999.0),
    modifierName = cms.string('EGRegressionModifierV2'),
    photon_config = cms.PSet(
        regressionKey = cms.vstring(
            'photon_eb_ECALonly_lowpt', 
            'photon_eb_ECALonly', 
            'photon_ee_ECALonly_lowpt', 
            'photon_ee_ECALonly'
        ),
        uncertaintyKey = cms.vstring(
            'photon_eb_ECALonly_lowpt_var', 
            'photon_eb_ECALonly_var', 
            'photon_ee_ECALonly_lowpt_var', 
            'photon_ee_ECALonly_var'
        )
    ),
    rhoCollection = cms.InputTag("fixedGridRhoFastjetAllTmp")
)

process.requireDecayMode = cms.PSet(
    BooleanOperator = cms.string('and'),
    decayMode = cms.PSet(
        Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
        cut = cms.double(0.5)
    )
)

process.requireLeadPion = cms.PSet(
    BooleanOperator = cms.string('and'),
    leadPion = cms.PSet(
        Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding"),
        cut = cms.double(0.5)
    )
)

process.requireLeadTrack = cms.PSet(
    BooleanOperator = cms.string('and'),
    leadTrack = cms.PSet(
        Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding"),
        cut = cms.double(0.5)
    )
)

process.softPFElectronCommon = cms.PSet(
    gbrForestLabel = cms.string('btag_SoftPFElectron_BDT'),
    useAdaBoost = cms.bool(False),
    useCondDB = cms.bool(True),
    useGBRForest = cms.bool(True),
    weightFile = cms.FileInPath('RecoBTag/SoftLepton/data/SoftPFElectron_BDT.weights.xml.gz')
)

process.softPFMuonCommon = cms.PSet(
    gbrForestLabel = cms.string('btag_SoftPFMuon_BDT'),
    useAdaBoost = cms.bool(True),
    useCondDB = cms.bool(True),
    useGBRForest = cms.bool(True),
    weightFile = cms.FileInPath('RecoBTag/SoftLepton/data/SoftPFMuon_BDT.weights.xml.gz')
)

process.superTCCompression_proc = cms.PSet(
    exponentBits = cms.uint32(4),
    mantissaBits = cms.uint32(5),
    rounding = cms.bool(True)
)

process.supertc_conc_proc = cms.PSet(
    Method = cms.vstring(
        'superTriggerCellSelect', 
        'superTriggerCellSelect', 
        'superTriggerCellSelect'
    ),
    ProcessorName = cms.string('HGCalConcentratorProcessorSelection'),
    coarseTCCompression = cms.PSet(
        exponentBits = cms.uint32(4),
        mantissaBits = cms.uint32(3),
        rounding = cms.bool(True)
    ),
    coarsenTriggerCells = cms.vuint32(0, 0, 0),
    ctcSize = cms.vuint32(
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2
    ),
    fixedDataSizePerHGCROC = cms.bool(False),
    stcSize = cms.vuint32(
        4, 4, 4, 4, 4, 
        4, 4, 4, 4, 4, 
        4, 4, 4, 4, 4, 
        4, 4, 4, 4, 4, 
        4, 4, 4, 4, 4, 
        4, 4, 4, 4, 4, 
        4, 4, 4, 4, 4, 
        4, 4, 4, 4, 4, 
        4, 4, 4, 4, 4, 
        4, 4, 4, 4, 4, 
        4, 4, 4, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16, 16, 16, 16, 
        16, 16
    ),
    superTCCalibration = cms.PSet(
        ProcessorName = cms.string('HGCalVFEProcessorSums'),
        ThicknessCorrections = cms.vdouble(1.66504854369, 1.0, 0.666019417476),
        adcnBits_sc = cms.uint32(10),
        adcnBits_si = cms.uint32(10),
        adcsaturation_sc = cms.double(68.75),
        adcsaturation_si = cms.double(100),
        dEdXweights = cms.vdouble(
            0, 8.894541, 0, 21.875814, 0, 
            21.875814, 0, 21.875814, 0, 21.875814, 
            0, 21.865764, 0, 21.875814, 0, 
            21.876338, 0, 21.876338, 0, 21.876338, 
            0, 21.876338, 0, 21.876338, 0, 
            21.876338, 0, 21.876338, 0, 83.906398, 
            51.444192, 51.444192, 51.444192, 51.444192, 51.444192, 
            51.444192, 51.444192, 51.444192, 51.444192, 51.444192, 
            69.513118, 87.582044, 87.582044, 87.582044, 87.582044, 
            87.582044, 87.214571, 86.888309, 86.92952, 86.92952, 
            86.92952
        ),
        dEdXweightsNose = cms.vdouble(
            0.0, 39.500245, 39.756638, 39.756638, 39.756638, 
            39.756638, 66.020266, 92.283895, 92.283895
        ),
        exponentBits = cms.uint32(4),
        fCperMIP = cms.double(3.43),
        fCperMIPnose = cms.vdouble(1.25, 2.57, 3.88),
        linLSB_sc = cms.double(0.067138671875),
        linLSB_si = cms.double(0.09765625),
        linnBits = cms.uint32(16),
        mantissaBits = cms.uint32(4),
        noiseScintillator = cms.PSet(
            refToPSet_ = cms.string('HGCAL_noise_heback')
        ),
        noiseSilicon = cms.PSet(
            refToPSet_ = cms.string('HGCAL_noise_fC')
        ),
        noiseThreshold = cms.double(3),
        oot_coefficients = cms.vdouble(0.0, 0.0),
        rounding = cms.bool(True),
        scintillatorCellLSB_MIP = cms.double(0.067138671875),
        siliconCellLSB_fC = cms.double(0.09765625),
        tdcOnset_sc = cms.double(55),
        tdcOnset_si = cms.double(60),
        tdcnBits_sc = cms.uint32(12),
        tdcnBits_si = cms.uint32(12),
        tdcsaturation_sc = cms.double(1000),
        tdcsaturation_si = cms.double(10000),
        thickCorr = cms.double(0.77),
        thickCorrNose = cms.vdouble(1.132, 1.092, 1.084)
    ),
    superTCCompression = cms.PSet(
        exponentBits = cms.uint32(4),
        mantissaBits = cms.uint32(5),
        rounding = cms.bool(True)
    ),
    type_energy_division = cms.string('superTriggerCell')
)

process.tautagInfoModifer = cms.PSet(
    name = cms.string('TTIworkaround'),
    pfTauTagInfoSrc = cms.InputTag("pfRecoTauTagInfoProducer"),
    plugin = cms.string('RecoTauTagInfoWorkaroundModifer')
)

process.threshold_conc_proc = cms.PSet(
    Method = cms.vstring(
        'thresholdSelect', 
        'thresholdSelect', 
        'thresholdSelect'
    ),
    ProcessorName = cms.string('HGCalConcentratorProcessorSelection'),
    coarsenTriggerCells = cms.vuint32(0, 0, 0),
    ctcSize = cms.vuint32(
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2
    ),
    fixedDataSizePerHGCROC = cms.bool(False),
    threshold_scintillator = cms.double(1.35),
    threshold_silicon = cms.double(1.35)
)

process.tobTecStepInOutTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(0),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.1),
    minimumNumberOfHits = cms.int32(4),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(1),
    strictSeedExtension = cms.bool(False)
)

process.tobTecStepTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(False),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('tobTecStepChi2Est'),
    foundHitBonus = cms.double(10.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('tobTecStepInOutTrajectoryFilter')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(2),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(4),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('tobTecStepTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(False)
)

process.tobTecStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(0),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.1),
    minimumNumberOfHits = cms.int32(5),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(1),
    strictSeedExtension = cms.bool(False)
)

process.topological_C2d_params = cms.PSet(
    applyLayerCalibration = cms.bool(False),
    calibSF_cluster = cms.double(1.0),
    clusterType = cms.string('NNC2d'),
    clustering_threshold_scintillator = cms.double(1.5),
    clustering_threshold_silicon = cms.double(1.5),
    layerWeights = cms.vdouble(
        0.0, 0.0183664, 0.0, 0.0305622, 0.0, 
        0.0162589, 0.0, 0.0143918, 0.0, 0.0134475, 
        0.0, 0.0185754, 0.0, 0.0204934, 0.0, 
        0.016901, 0.0, 0.0207958, 0.0, 0.0167985, 
        0.0, 0.0238385, 0.0, 0.0301146, 0.0, 
        0.0274622, 0.0, 0.0468671, 0.0, 0.078819, 
        0.0555831, 0.0609312, 0.0610768, 0.0657626, 0.0465653, 
        0.0629383, 0.0610061, 0.0517326, 0.0492882, 0.0699336, 
        0.0673457, 0.119896, 0.125327, 0.143235, 0.153295, 
        0.104777, 0.109345, 0.161386, 0.174656, 0.108053, 
        0.121674, 0.1171, 0.328053
    ),
    seeding_threshold_scintillator = cms.double(3.75),
    seeding_threshold_silicon = cms.double(3.75)
)

process.tower = cms.PSet(
    ProcessorName = cms.string('HGCalTowerProcessor')
)

process.towerMap2D_parValues = cms.PSet(
    L1TTriggerTowerConfig = cms.PSet(
        binsEta = cms.vdouble(),
        binsPhi = cms.vdouble(),
        maxEta = cms.double(3.0),
        maxPhi = cms.double(3.14159265359),
        minEta = cms.double(1.479),
        minPhi = cms.double(-3.14159265359),
        nBinsEta = cms.int32(18),
        nBinsPhi = cms.int32(72),
        readMappingFile = cms.bool(False)
    ),
    layerWeights = cms.vdouble(),
    useLayerWeights = cms.bool(False)
)

process.tower_map = cms.PSet(
    ProcessorName = cms.string('HGCalTowerMapProcessor'),
    towermap_parameters = cms.PSet(
        L1TTriggerTowerConfig = cms.PSet(
            binsEta = cms.vdouble(),
            binsPhi = cms.vdouble(),
            maxEta = cms.double(3.0),
            maxPhi = cms.double(3.14159265359),
            minEta = cms.double(1.479),
            minPhi = cms.double(-3.14159265359),
            nBinsEta = cms.int32(18),
            nBinsPhi = cms.int32(72),
            readMappingFile = cms.bool(False)
        ),
        layerWeights = cms.vdouble(),
        useLayerWeights = cms.bool(False)
    )
)

process.tpScales = cms.PSet(
    HBHE = cms.PSet(
        LSBQIE11 = cms.double(0.0625),
        LSBQIE11Overlap = cms.double(0.0625),
        LSBQIE8 = cms.double(0.125)
    ),
    HF = cms.PSet(
        NCTShift = cms.int32(2),
        RCTShift = cms.int32(3)
    )
)

process.trackPseudoSelectionBlock = cms.PSet(
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    )
)

process.trackSelectionBlock = cms.PSet(
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    )
)

process.trackWithVertexSelectorParams = cms.PSet(
    copyExtras = cms.untracked.bool(False),
    copyTrajectories = cms.untracked.bool(False),
    d0Max = cms.double(999.0),
    dzMax = cms.double(999.0),
    etaMax = cms.double(5.0),
    etaMin = cms.double(0.0),
    nSigmaDtVertex = cms.double(0),
    nVertices = cms.uint32(0),
    normalizedChi2 = cms.double(999999.0),
    numberOfLostHits = cms.uint32(999),
    numberOfValidHits = cms.uint32(0),
    numberOfValidPixelHits = cms.uint32(0),
    ptErrorCut = cms.double(0.2),
    ptMax = cms.double(500.0),
    ptMin = cms.double(0.3),
    quality = cms.string('highPurity'),
    rhoVtx = cms.double(0.2),
    src = cms.InputTag("generalTracks"),
    timeResosTag = cms.InputTag(""),
    timesTag = cms.InputTag(""),
    useVtx = cms.bool(True),
    vertexTag = cms.InputTag("offlinePrimaryVertices"),
    vtxFallback = cms.bool(True),
    zetaVtx = cms.double(1.0)
)

process.trkIsol03CfgV1 = cms.PSet(
    barrelCuts = cms.PSet(
        algosToReject = cms.vstring('jetCoreRegionalStep'),
        allowedQualities = cms.vstring(),
        maxDPtPt = cms.double(-1),
        maxDR = cms.double(0.3),
        maxDZ = cms.double(0.2),
        minDEta = cms.double(0.015),
        minDR = cms.double(0.0),
        minHits = cms.int32(-1),
        minPixelHits = cms.int32(-1),
        minPt = cms.double(0.7)
    ),
    endcapCuts = cms.PSet(
        algosToReject = cms.vstring('jetCoreRegionalStep'),
        allowedQualities = cms.vstring(),
        maxDPtPt = cms.double(-1),
        maxDR = cms.double(0.3),
        maxDZ = cms.double(0.2),
        minDEta = cms.double(0.015),
        minDR = cms.double(0.0),
        minHits = cms.int32(-1),
        minPixelHits = cms.int32(-1),
        minPt = cms.double(0.7)
    )
)

process.trkIsol03CfgV2 = cms.PSet(
    barrelCuts = cms.PSet(
        algosToReject = cms.vstring(),
        allowedQualities = cms.vstring(),
        maxDPtPt = cms.double(0.1),
        maxDR = cms.double(0.3),
        maxDZ = cms.double(0.1),
        minDEta = cms.double(0.005),
        minDR = cms.double(0.0),
        minHits = cms.int32(8),
        minPixelHits = cms.int32(1),
        minPt = cms.double(1.0)
    ),
    endcapCuts = cms.PSet(
        algosToReject = cms.vstring(),
        allowedQualities = cms.vstring(),
        maxDPtPt = cms.double(0.1),
        maxDR = cms.double(0.3),
        maxDZ = cms.double(0.5),
        minDEta = cms.double(0.005),
        minDR = cms.double(0.0),
        minHits = cms.int32(8),
        minPixelHits = cms.int32(1),
        minPt = cms.double(1.0)
    )
)

process.trkIsol04CfgV1 = cms.PSet(
    barrelCuts = cms.PSet(
        algosToReject = cms.vstring('jetCoreRegionalStep'),
        allowedQualities = cms.vstring(),
        maxDPtPt = cms.double(-1),
        maxDR = cms.double(0.4),
        maxDZ = cms.double(0.2),
        minDEta = cms.double(0.015),
        minDR = cms.double(0.0),
        minHits = cms.int32(-1),
        minPixelHits = cms.int32(-1),
        minPt = cms.double(0.7)
    ),
    endcapCuts = cms.PSet(
        algosToReject = cms.vstring('jetCoreRegionalStep'),
        allowedQualities = cms.vstring(),
        maxDPtPt = cms.double(-1),
        maxDR = cms.double(0.4),
        maxDZ = cms.double(0.2),
        minDEta = cms.double(0.015),
        minDR = cms.double(0.0),
        minHits = cms.int32(-1),
        minPixelHits = cms.int32(-1),
        minPt = cms.double(0.7)
    )
)

process.trkIsol04CfgV2 = cms.PSet(
    barrelCuts = cms.PSet(
        algosToReject = cms.vstring(),
        allowedQualities = cms.vstring(),
        maxDPtPt = cms.double(0.1),
        maxDR = cms.double(0.4),
        maxDZ = cms.double(0.1),
        minDEta = cms.double(0.005),
        minDR = cms.double(0.0),
        minHits = cms.int32(8),
        minPixelHits = cms.int32(1),
        minPt = cms.double(1.0)
    ),
    endcapCuts = cms.PSet(
        algosToReject = cms.vstring(),
        allowedQualities = cms.vstring(),
        maxDPtPt = cms.double(0.1),
        maxDR = cms.double(0.4),
        maxDZ = cms.double(0.5),
        minDEta = cms.double(0.005),
        minDR = cms.double(0.0),
        minHits = cms.int32(8),
        minPixelHits = cms.int32(1),
        minPt = cms.double(1.0)
    )
)

process.variableJTAPars = cms.PSet(
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5)
)

process.vertexCutsBlock = cms.PSet(
    vertexCuts = cms.PSet(
        distSig2dMax = cms.double(99999.9),
        distSig2dMin = cms.double(3.0),
        distSig3dMax = cms.double(99999.9),
        distSig3dMin = cms.double(-99999.9),
        distVal2dMax = cms.double(2.5),
        distVal2dMin = cms.double(0.01),
        distVal3dMax = cms.double(99999.9),
        distVal3dMin = cms.double(-99999.9),
        fracPV = cms.double(0.65),
        massMax = cms.double(6.5),
        maxDeltaRToJetAxis = cms.double(0.4),
        minimumTrackWeight = cms.double(0.5),
        multiplicityMin = cms.uint32(2),
        useTrackWeights = cms.bool(True),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        )
    )
)

process.vertexRecoBlock = cms.PSet(
    vertexReco = cms.PSet(
        finder = cms.string('avr'),
        minweight = cms.double(0.5),
        primcut = cms.double(1.8),
        seccut = cms.double(6.0),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001)
    )
)

process.vertexSelectionBlock = cms.PSet(
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    )
)

process.vertexTrackSelectionBlock = cms.PSet(
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(1),
        ptMin = cms.double(1.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    )
)

process.vfe_proc = cms.PSet(
    ProcessorName = cms.string('HGCalVFEProcessorSums'),
    ThicknessCorrections = cms.vdouble(1.66504854369, 1.0, 0.666019417476),
    adcnBits_sc = cms.uint32(10),
    adcnBits_si = cms.uint32(10),
    adcsaturation_sc = cms.double(68.75),
    adcsaturation_si = cms.double(100),
    dEdXweights = cms.vdouble(
        0, 8.894541, 0, 21.875814, 0, 
        21.875814, 0, 21.875814, 0, 21.875814, 
        0, 21.865764, 0, 21.875814, 0, 
        21.876338, 0, 21.876338, 0, 21.876338, 
        0, 21.876338, 0, 21.876338, 0, 
        21.876338, 0, 21.876338, 0, 83.906398, 
        51.444192, 51.444192, 51.444192, 51.444192, 51.444192, 
        51.444192, 51.444192, 51.444192, 51.444192, 51.444192, 
        69.513118, 87.582044, 87.582044, 87.582044, 87.582044, 
        87.582044, 87.214571, 86.888309, 86.92952, 86.92952, 
        86.92952
    ),
    dEdXweightsNose = cms.vdouble(
        0.0, 39.500245, 39.756638, 39.756638, 39.756638, 
        39.756638, 66.020266, 92.283895, 92.283895
    ),
    exponentBits = cms.uint32(4),
    fCperMIP = cms.double(3.43),
    fCperMIPnose = cms.vdouble(1.25, 2.57, 3.88),
    linLSB_sc = cms.double(0.067138671875),
    linLSB_si = cms.double(0.09765625),
    linnBits = cms.uint32(16),
    mantissaBits = cms.uint32(4),
    noiseScintillator = cms.PSet(
        refToPSet_ = cms.string('HGCAL_noise_heback')
    ),
    noiseSilicon = cms.PSet(
        refToPSet_ = cms.string('HGCAL_noise_fC')
    ),
    noiseThreshold = cms.double(3),
    oot_coefficients = cms.vdouble(0.0, 0.0),
    rounding = cms.bool(True),
    scintillatorCellLSB_MIP = cms.double(0.067138671875),
    siliconCellLSB_fC = cms.double(0.09765625),
    tdcOnset_sc = cms.double(55),
    tdcOnset_si = cms.double(60),
    tdcnBits_sc = cms.uint32(12),
    tdcnBits_si = cms.uint32(12),
    tdcsaturation_sc = cms.double(1000),
    tdcsaturation_si = cms.double(10000),
    thickCorr = cms.double(0.77),
    thickCorrNose = cms.vdouble(1.132, 1.092, 1.084)
)

process.IsoConeDefinitions = cms.VPSet(
    cms.PSet(
        coneSize = cms.double(0.3),
        isolateAgainst = cms.string('h+'),
        isolationAlgo = cms.string('PhotonPFIsolationWithMapBasedVeto'),
        miniAODVertexCodes = cms.vuint32(2, 3),
        particleBasedIsolation = cms.InputTag("particleBasedIsolation","gedPhotons"),
        vertexIndex = cms.int32(0)
    ), 
    cms.PSet(
        coneSize = cms.double(0.3),
        isolateAgainst = cms.string('h0'),
        isolationAlgo = cms.string('PhotonPFIsolationWithMapBasedVeto'),
        miniAODVertexCodes = cms.vuint32(2, 3),
        particleBasedIsolation = cms.InputTag("particleBasedIsolation","gedPhotons"),
        vertexIndex = cms.int32(0)
    ), 
    cms.PSet(
        coneSize = cms.double(0.3),
        isolateAgainst = cms.string('gamma'),
        isolationAlgo = cms.string('PhotonPFIsolationWithMapBasedVeto'),
        miniAODVertexCodes = cms.vuint32(2, 3),
        particleBasedIsolation = cms.InputTag("particleBasedIsolation","gedPhotons"),
        vertexIndex = cms.int32(0)
    )
)

process.IsoConeDefinitionsPhotonsTmp = cms.VPSet(
    cms.PSet(
        coneSize = cms.double(0.3),
        isolateAgainst = cms.string('h+'),
        isolationAlgo = cms.string('PhotonPFIsolationWithMapBasedVeto'),
        miniAODVertexCodes = cms.vuint32(2, 3),
        particleBasedIsolation = cms.InputTag("particleBasedIsolationTmp","gedPhotonsTmp"),
        vertexIndex = cms.int32(0)
    ), 
    cms.PSet(
        coneSize = cms.double(0.3),
        isolateAgainst = cms.string('h0'),
        isolationAlgo = cms.string('PhotonPFIsolationWithMapBasedVeto'),
        miniAODVertexCodes = cms.vuint32(2, 3),
        particleBasedIsolation = cms.InputTag("particleBasedIsolationTmp","gedPhotonsTmp"),
        vertexIndex = cms.int32(0)
    ), 
    cms.PSet(
        coneSize = cms.double(0.3),
        isolateAgainst = cms.string('gamma'),
        isolationAlgo = cms.string('PhotonPFIsolationWithMapBasedVeto'),
        miniAODVertexCodes = cms.vuint32(2, 3),
        particleBasedIsolation = cms.InputTag("particleBasedIsolationTmp","gedPhotonsTmp"),
        vertexIndex = cms.int32(0)
    )
)

process.c_vs_b_vars_vpset = cms.VPSet(
    cms.PSet(
        default = cms.double(-1),
        name = cms.string('vertexLeptonCategory'),
        taggingVarName = cms.string('vertexLeptonCategory')
    ), 
    cms.PSet(
        default = cms.double(-100),
        idx = cms.int32(0),
        name = cms.string('trackSip2dSig_0'),
        taggingVarName = cms.string('trackSip2dSig')
    ), 
    cms.PSet(
        default = cms.double(-100),
        idx = cms.int32(1),
        name = cms.string('trackSip2dSig_1'),
        taggingVarName = cms.string('trackSip2dSig')
    ), 
    cms.PSet(
        default = cms.double(-100),
        idx = cms.int32(0),
        name = cms.string('trackSip3dSig_0'),
        taggingVarName = cms.string('trackSip3dSig')
    ), 
    cms.PSet(
        default = cms.double(-100),
        idx = cms.int32(1),
        name = cms.string('trackSip3dSig_1'),
        taggingVarName = cms.string('trackSip3dSig')
    ), 
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(0),
        name = cms.string('trackPtRel_0'),
        taggingVarName = cms.string('trackPtRel')
    ), 
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(1),
        name = cms.string('trackPtRel_1'),
        taggingVarName = cms.string('trackPtRel')
    ), 
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(0),
        name = cms.string('trackPPar_0'),
        taggingVarName = cms.string('trackPPar')
    ), 
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(1),
        name = cms.string('trackPPar_1'),
        taggingVarName = cms.string('trackPPar')
    ), 
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(0),
        name = cms.string('trackEtaRel_0'),
        taggingVarName = cms.string('trackEtaRel')
    ), 
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(1),
        name = cms.string('trackEtaRel_1'),
        taggingVarName = cms.string('trackEtaRel')
    ), 
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(0),
        name = cms.string('trackDeltaR_0'),
        taggingVarName = cms.string('trackDeltaR')
    ), 
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(1),
        name = cms.string('trackDeltaR_1'),
        taggingVarName = cms.string('trackDeltaR')
    ), 
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(0),
        name = cms.string('trackPtRatio_0'),
        taggingVarName = cms.string('trackPtRatio')
    ), 
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(1),
        name = cms.string('trackPtRatio_1'),
        taggingVarName = cms.string('trackPtRatio')
    ), 
    cms.PSet(
        default = cms.double(1.1),
        idx = cms.int32(0),
        name = cms.string('trackPParRatio_0'),
        taggingVarName = cms.string('trackPParRatio')
    ), 
    cms.PSet(
        default = cms.double(1.1),
        idx = cms.int32(1),
        name = cms.string('trackPParRatio_1'),
        taggingVarName = cms.string('trackPParRatio')
    ), 
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(0),
        name = cms.string('trackJetDist_0'),
        taggingVarName = cms.string('trackJetDist')
    ), 
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(1),
        name = cms.string('trackJetDist_1'),
        taggingVarName = cms.string('trackJetDist')
    ), 
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(0),
        name = cms.string('trackDecayLenVal_0'),
        taggingVarName = cms.string('trackDecayLenVal')
    ), 
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(1),
        name = cms.string('trackDecayLenVal_1'),
        taggingVarName = cms.string('trackDecayLenVal')
    ), 
    cms.PSet(
        default = cms.double(0),
        name = cms.string('jetNSecondaryVertices'),
        taggingVarName = cms.string('jetNSecondaryVertices')
    ), 
    cms.PSet(
        default = cms.double(-0.1),
        name = cms.string('jetNTracks'),
        taggingVarName = cms.string('jetNTracks')
    ), 
    cms.PSet(
        default = cms.double(-0.1),
        name = cms.string('trackSumJetEtRatio'),
        taggingVarName = cms.string('trackSumJetEtRatio')
    ), 
    cms.PSet(
        default = cms.double(-0.1),
        name = cms.string('trackSumJetDeltaR'),
        taggingVarName = cms.string('trackSumJetDeltaR')
    ), 
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(0),
        name = cms.string('vertexMass_0'),
        taggingVarName = cms.string('vertexMass')
    ), 
    cms.PSet(
        default = cms.double(-10),
        idx = cms.int32(0),
        name = cms.string('vertexEnergyRatio_0'),
        taggingVarName = cms.string('vertexEnergyRatio')
    ), 
    cms.PSet(
        default = cms.double(-999),
        idx = cms.int32(0),
        name = cms.string('trackSip2dSigAboveCharm_0'),
        taggingVarName = cms.string('trackSip2dSigAboveCharm')
    ), 
    cms.PSet(
        default = cms.double(-999),
        idx = cms.int32(0),
        name = cms.string('trackSip3dSigAboveCharm_0'),
        taggingVarName = cms.string('trackSip3dSigAboveCharm')
    ), 
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(0),
        name = cms.string('flightDistance2dSig_0'),
        taggingVarName = cms.string('flightDistance2dSig')
    ), 
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(0),
        name = cms.string('flightDistance3dSig_0'),
        taggingVarName = cms.string('flightDistance3dSig')
    ), 
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(0),
        name = cms.string('vertexJetDeltaR_0'),
        taggingVarName = cms.string('vertexJetDeltaR')
    ), 
    cms.PSet(
        default = cms.double(0),
        idx = cms.int32(0),
        name = cms.string('vertexNTracks_0'),
        taggingVarName = cms.string('vertexNTracks')
    ), 
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(0),
        name = cms.string('massVertexEnergyFraction_0'),
        taggingVarName = cms.string('massVertexEnergyFraction')
    ), 
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(0),
        name = cms.string('vertexBoostOverSqrtJetPt_0'),
        taggingVarName = cms.string('vertexBoostOverSqrtJetPt')
    ), 
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(0),
        name = cms.string('leptonPtRel_0'),
        taggingVarName = cms.string('leptonPtRel')
    ), 
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(1),
        name = cms.string('leptonPtRel_1'),
        taggingVarName = cms.string('leptonPtRel')
    ), 
    cms.PSet(
        default = cms.double(-10000),
        idx = cms.int32(0),
        name = cms.string('leptonSip3d_0'),
        taggingVarName = cms.string('leptonSip3d')
    ), 
    cms.PSet(
        default = cms.double(-10000),
        idx = cms.int32(1),
        name = cms.string('leptonSip3d_1'),
        taggingVarName = cms.string('leptonSip3d')
    ), 
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(0),
        name = cms.string('leptonDeltaR_0'),
        taggingVarName = cms.string('leptonDeltaR')
    ), 
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(1),
        name = cms.string('leptonDeltaR_1'),
        taggingVarName = cms.string('leptonDeltaR')
    ), 
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(0),
        name = cms.string('leptonRatioRel_0'),
        taggingVarName = cms.string('leptonRatioRel')
    ), 
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(1),
        name = cms.string('leptonRatioRel_1'),
        taggingVarName = cms.string('leptonRatioRel')
    ), 
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(0),
        name = cms.string('leptonEtaRel_0'),
        taggingVarName = cms.string('leptonEtaRel')
    ), 
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(1),
        name = cms.string('leptonEtaRel_1'),
        taggingVarName = cms.string('leptonEtaRel')
    ), 
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(0),
        name = cms.string('leptonRatio_0'),
        taggingVarName = cms.string('leptonRatio')
    ), 
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(1),
        name = cms.string('leptonRatio_1'),
        taggingVarName = cms.string('leptonRatio')
    )
)

process.c_vs_l_vars_vpset = cms.VPSet(
    cms.PSet(
        default = cms.double(-1),
        name = cms.string('vertexLeptonCategory'),
        taggingVarName = cms.string('vertexLeptonCategory')
    ), 
    cms.PSet(
        default = cms.double(-100),
        idx = cms.int32(0),
        name = cms.string('trackSip2dSig_0'),
        taggingVarName = cms.string('trackSip2dSig')
    ), 
    cms.PSet(
        default = cms.double(-100),
        idx = cms.int32(1),
        name = cms.string('trackSip2dSig_1'),
        taggingVarName = cms.string('trackSip2dSig')
    ), 
    cms.PSet(
        default = cms.double(-100),
        idx = cms.int32(0),
        name = cms.string('trackSip3dSig_0'),
        taggingVarName = cms.string('trackSip3dSig')
    ), 
    cms.PSet(
        default = cms.double(-100),
        idx = cms.int32(1),
        name = cms.string('trackSip3dSig_1'),
        taggingVarName = cms.string('trackSip3dSig')
    ), 
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(0),
        name = cms.string('trackPtRel_0'),
        taggingVarName = cms.string('trackPtRel')
    ), 
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(1),
        name = cms.string('trackPtRel_1'),
        taggingVarName = cms.string('trackPtRel')
    ), 
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(0),
        name = cms.string('trackPPar_0'),
        taggingVarName = cms.string('trackPPar')
    ), 
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(1),
        name = cms.string('trackPPar_1'),
        taggingVarName = cms.string('trackPPar')
    ), 
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(0),
        name = cms.string('trackEtaRel_0'),
        taggingVarName = cms.string('trackEtaRel')
    ), 
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(1),
        name = cms.string('trackEtaRel_1'),
        taggingVarName = cms.string('trackEtaRel')
    ), 
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(0),
        name = cms.string('trackDeltaR_0'),
        taggingVarName = cms.string('trackDeltaR')
    ), 
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(1),
        name = cms.string('trackDeltaR_1'),
        taggingVarName = cms.string('trackDeltaR')
    ), 
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(0),
        name = cms.string('trackPtRatio_0'),
        taggingVarName = cms.string('trackPtRatio')
    ), 
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(1),
        name = cms.string('trackPtRatio_1'),
        taggingVarName = cms.string('trackPtRatio')
    ), 
    cms.PSet(
        default = cms.double(1.1),
        idx = cms.int32(0),
        name = cms.string('trackPParRatio_0'),
        taggingVarName = cms.string('trackPParRatio')
    ), 
    cms.PSet(
        default = cms.double(1.1),
        idx = cms.int32(1),
        name = cms.string('trackPParRatio_1'),
        taggingVarName = cms.string('trackPParRatio')
    ), 
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(0),
        name = cms.string('trackJetDist_0'),
        taggingVarName = cms.string('trackJetDist')
    ), 
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(1),
        name = cms.string('trackJetDist_1'),
        taggingVarName = cms.string('trackJetDist')
    ), 
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(0),
        name = cms.string('trackDecayLenVal_0'),
        taggingVarName = cms.string('trackDecayLenVal')
    ), 
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(1),
        name = cms.string('trackDecayLenVal_1'),
        taggingVarName = cms.string('trackDecayLenVal')
    ), 
    cms.PSet(
        default = cms.double(0),
        name = cms.string('jetNSecondaryVertices'),
        taggingVarName = cms.string('jetNSecondaryVertices')
    ), 
    cms.PSet(
        default = cms.double(-0.1),
        name = cms.string('jetNTracks'),
        taggingVarName = cms.string('jetNTracks')
    ), 
    cms.PSet(
        default = cms.double(-0.1),
        name = cms.string('trackSumJetEtRatio'),
        taggingVarName = cms.string('trackSumJetEtRatio')
    ), 
    cms.PSet(
        default = cms.double(-0.1),
        name = cms.string('trackSumJetDeltaR'),
        taggingVarName = cms.string('trackSumJetDeltaR')
    ), 
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(0),
        name = cms.string('vertexMass_0'),
        taggingVarName = cms.string('vertexMass')
    ), 
    cms.PSet(
        default = cms.double(-10),
        idx = cms.int32(0),
        name = cms.string('vertexEnergyRatio_0'),
        taggingVarName = cms.string('vertexEnergyRatio')
    ), 
    cms.PSet(
        default = cms.double(-999),
        idx = cms.int32(0),
        name = cms.string('trackSip2dSigAboveCharm_0'),
        taggingVarName = cms.string('trackSip2dSigAboveCharm')
    ), 
    cms.PSet(
        default = cms.double(-999),
        idx = cms.int32(0),
        name = cms.string('trackSip3dSigAboveCharm_0'),
        taggingVarName = cms.string('trackSip3dSigAboveCharm')
    ), 
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(0),
        name = cms.string('flightDistance2dSig_0'),
        taggingVarName = cms.string('flightDistance2dSig')
    ), 
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(0),
        name = cms.string('flightDistance3dSig_0'),
        taggingVarName = cms.string('flightDistance3dSig')
    ), 
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(0),
        name = cms.string('vertexJetDeltaR_0'),
        taggingVarName = cms.string('vertexJetDeltaR')
    ), 
    cms.PSet(
        default = cms.double(0),
        idx = cms.int32(0),
        name = cms.string('vertexNTracks_0'),
        taggingVarName = cms.string('vertexNTracks')
    ), 
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(0),
        name = cms.string('massVertexEnergyFraction_0'),
        taggingVarName = cms.string('massVertexEnergyFraction')
    ), 
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(0),
        name = cms.string('vertexBoostOverSqrtJetPt_0'),
        taggingVarName = cms.string('vertexBoostOverSqrtJetPt')
    ), 
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(0),
        name = cms.string('leptonPtRel_0'),
        taggingVarName = cms.string('leptonPtRel')
    ), 
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(1),
        name = cms.string('leptonPtRel_1'),
        taggingVarName = cms.string('leptonPtRel')
    ), 
    cms.PSet(
        default = cms.double(-10000),
        idx = cms.int32(0),
        name = cms.string('leptonSip3d_0'),
        taggingVarName = cms.string('leptonSip3d')
    ), 
    cms.PSet(
        default = cms.double(-10000),
        idx = cms.int32(1),
        name = cms.string('leptonSip3d_1'),
        taggingVarName = cms.string('leptonSip3d')
    ), 
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(0),
        name = cms.string('leptonDeltaR_0'),
        taggingVarName = cms.string('leptonDeltaR')
    ), 
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(1),
        name = cms.string('leptonDeltaR_1'),
        taggingVarName = cms.string('leptonDeltaR')
    ), 
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(0),
        name = cms.string('leptonRatioRel_0'),
        taggingVarName = cms.string('leptonRatioRel')
    ), 
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(1),
        name = cms.string('leptonRatioRel_1'),
        taggingVarName = cms.string('leptonRatioRel')
    ), 
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(0),
        name = cms.string('leptonEtaRel_0'),
        taggingVarName = cms.string('leptonEtaRel')
    ), 
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(1),
        name = cms.string('leptonEtaRel_1'),
        taggingVarName = cms.string('leptonEtaRel')
    ), 
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(0),
        name = cms.string('leptonRatio_0'),
        taggingVarName = cms.string('leptonRatio')
    ), 
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(1),
        name = cms.string('leptonRatio_1'),
        taggingVarName = cms.string('leptonRatio')
    )
)

process.energy_interpretations = cms.VPSet(cms.PSet(
    dr_bylayer = cms.vdouble(
        0.015, 0.015, 0.015, 0.015, 0.015, 
        0.015, 0.015, 0.015, 0.015, 0.015, 
        0.015, 0.015, 0.015, 0.015, 0.015
    ),
    layer_containment_corrs = cms.vdouble(
        0.0, 0.0, 1.28, 1.09, 1.0, 
        1.07, 1.09, 1.04, 1.0, 1.09, 
        1.07, 1.03, 0.93, 1.4, 1.89
    ),
    scale_correction_coeff = cms.vdouble(52.99, -24.96),
    type = cms.string('HGCalTriggerClusterInterpretationEM')
))

process.AhltIter0Phase2L3FromL1TkMuonTrackSelectionHighPurity = cms.EDProducer("MuonAssociatorEDProducer",
    AbsoluteNumberOfHits_muon = cms.bool(False),
    AbsoluteNumberOfHits_track = cms.bool(False),
    CSClinksTag = cms.InputTag("simMuonCSCDigis","MuonCSCStripDigiSimLinks"),
    CSCsimHitsTag = cms.InputTag("g4SimHits","MuonCSCHits"),
    CSCsimHitsXFTag = cms.InputTag("mix","g4SimHitsMuonCSCHits"),
    CSCwireLinksTag = cms.InputTag("simMuonCSCDigis","MuonCSCWireDigiSimLinks"),
    DTdigiTag = cms.InputTag("simMuonDTDigis"),
    DTdigisimlinkTag = cms.InputTag("simMuonDTDigis"),
    DTrechitTag = cms.InputTag("hltDt1DRecHits"),
    DTsimhitsTag = cms.InputTag("g4SimHits","MuonDTHits"),
    DTsimhitsXFTag = cms.InputTag("mix","g4SimHitsMuonDTHits"),
    EfficiencyCut_muon = cms.double(0.0),
    EfficiencyCut_track = cms.double(0.0),
    GEMdigisimlinkTag = cms.InputTag("simMuonGEMDigis","GEM"),
    GEMsimhitsTag = cms.InputTag("g4SimHits","MuonGEMHits"),
    GEMsimhitsXFTag = cms.InputTag("mix","g4SimHitsMuonGEMHits"),
    NHitCut_muon = cms.uint32(0),
    NHitCut_track = cms.uint32(0),
    PurityCut_muon = cms.double(0.75),
    PurityCut_track = cms.double(0.75),
    ROUList = cms.vstring(
        'TrackerHitsTIBLowTof', 
        'TrackerHitsTIBHighTof', 
        'TrackerHitsTIDLowTof', 
        'TrackerHitsTIDHighTof', 
        'TrackerHitsTOBLowTof', 
        'TrackerHitsTOBHighTof', 
        'TrackerHitsTECLowTof', 
        'TrackerHitsTECHighTof', 
        'TrackerHitsPixelBarrelLowTof', 
        'TrackerHitsPixelBarrelHighTof', 
        'TrackerHitsPixelEndcapLowTof', 
        'TrackerHitsPixelEndcapHighTof'
    ),
    RPCdigisimlinkTag = cms.InputTag("simMuonRPCDigis","RPCDigiSimLink"),
    RPCsimhitsTag = cms.InputTag("g4SimHits","MuonRPCHits"),
    RPCsimhitsXFTag = cms.InputTag("mix","g4SimHitsMuonRPCHits"),
    ThreeHitTracksAreSpecial = cms.bool(False),
    UseGrouped = cms.bool(True),
    UseMuon = cms.bool(True),
    UsePixels = cms.bool(True),
    UseSplitting = cms.bool(True),
    UseTracker = cms.bool(True),
    acceptOneStubMatchings = cms.bool(False),
    associatePixel = cms.bool(True),
    associateRecoTracks = cms.bool(True),
    associateStrip = cms.bool(True),
    associatorByWire = cms.bool(False),
    crossingframe = cms.bool(False),
    dumpDT = cms.bool(False),
    dumpInputCollections = cms.untracked.bool(False),
    ignoreMissingTrackCollection = cms.untracked.bool(True),
    includeZeroHitMuons = cms.bool(True),
    inputCSCSegmentCollection = cms.InputTag("cscSegments"),
    inputDTRecSegment4DCollection = cms.InputTag("dt4DSegments"),
    links_exist = cms.bool(True),
    phase2TrackerSimLinkSrc = cms.InputTag("simSiPixelDigis","Tracker"),
    pixelSimLinkSrc = cms.InputTag("simSiPixelDigis","Pixel"),
    simtracksTag = cms.InputTag("g4SimHits"),
    simtracksXFTag = cms.InputTag("mix","g4SimHits"),
    stripSimLinkSrc = cms.InputTag("simSiStripDigis"),
    tpTag = cms.InputTag("mix","MergedTrackTruth"),
    tracksTag = cms.InputTag("hltIter0Phase2L3FromL1TkMuonTrackSelectionHighPurity"),
    useGEMs = cms.bool(True),
    usePhase2Tracker = cms.bool(True)
)


process.AhltIter2Phase2L3FromL1TkMuonMerged = cms.EDProducer("MuonAssociatorEDProducer",
    AbsoluteNumberOfHits_muon = cms.bool(False),
    AbsoluteNumberOfHits_track = cms.bool(False),
    CSClinksTag = cms.InputTag("simMuonCSCDigis","MuonCSCStripDigiSimLinks"),
    CSCsimHitsTag = cms.InputTag("g4SimHits","MuonCSCHits"),
    CSCsimHitsXFTag = cms.InputTag("mix","g4SimHitsMuonCSCHits"),
    CSCwireLinksTag = cms.InputTag("simMuonCSCDigis","MuonCSCWireDigiSimLinks"),
    DTdigiTag = cms.InputTag("simMuonDTDigis"),
    DTdigisimlinkTag = cms.InputTag("simMuonDTDigis"),
    DTrechitTag = cms.InputTag("hltDt1DRecHits"),
    DTsimhitsTag = cms.InputTag("g4SimHits","MuonDTHits"),
    DTsimhitsXFTag = cms.InputTag("mix","g4SimHitsMuonDTHits"),
    EfficiencyCut_muon = cms.double(0.0),
    EfficiencyCut_track = cms.double(0.0),
    GEMdigisimlinkTag = cms.InputTag("simMuonGEMDigis","GEM"),
    GEMsimhitsTag = cms.InputTag("g4SimHits","MuonGEMHits"),
    GEMsimhitsXFTag = cms.InputTag("mix","g4SimHitsMuonGEMHits"),
    NHitCut_muon = cms.uint32(0),
    NHitCut_track = cms.uint32(0),
    PurityCut_muon = cms.double(0.75),
    PurityCut_track = cms.double(0.75),
    ROUList = cms.vstring(
        'TrackerHitsTIBLowTof', 
        'TrackerHitsTIBHighTof', 
        'TrackerHitsTIDLowTof', 
        'TrackerHitsTIDHighTof', 
        'TrackerHitsTOBLowTof', 
        'TrackerHitsTOBHighTof', 
        'TrackerHitsTECLowTof', 
        'TrackerHitsTECHighTof', 
        'TrackerHitsPixelBarrelLowTof', 
        'TrackerHitsPixelBarrelHighTof', 
        'TrackerHitsPixelEndcapLowTof', 
        'TrackerHitsPixelEndcapHighTof'
    ),
    RPCdigisimlinkTag = cms.InputTag("simMuonRPCDigis","RPCDigiSimLink"),
    RPCsimhitsTag = cms.InputTag("g4SimHits","MuonRPCHits"),
    RPCsimhitsXFTag = cms.InputTag("mix","g4SimHitsMuonRPCHits"),
    ThreeHitTracksAreSpecial = cms.bool(False),
    UseGrouped = cms.bool(True),
    UseMuon = cms.bool(True),
    UsePixels = cms.bool(True),
    UseSplitting = cms.bool(True),
    UseTracker = cms.bool(True),
    acceptOneStubMatchings = cms.bool(False),
    associatePixel = cms.bool(True),
    associateRecoTracks = cms.bool(True),
    associateStrip = cms.bool(True),
    associatorByWire = cms.bool(False),
    crossingframe = cms.bool(False),
    dumpDT = cms.bool(False),
    dumpInputCollections = cms.untracked.bool(False),
    ignoreMissingTrackCollection = cms.untracked.bool(True),
    includeZeroHitMuons = cms.bool(True),
    inputCSCSegmentCollection = cms.InputTag("cscSegments"),
    inputDTRecSegment4DCollection = cms.InputTag("dt4DSegments"),
    links_exist = cms.bool(True),
    phase2TrackerSimLinkSrc = cms.InputTag("simSiPixelDigis","Tracker"),
    pixelSimLinkSrc = cms.InputTag("simSiPixelDigis","Pixel"),
    simtracksTag = cms.InputTag("g4SimHits"),
    simtracksXFTag = cms.InputTag("mix","g4SimHits"),
    stripSimLinkSrc = cms.InputTag("simSiStripDigis"),
    tpTag = cms.InputTag("mix","MergedTrackTruth"),
    tracksTag = cms.InputTag("hltIter2Phase2L3FromL1TkMuonMerged"),
    useGEMs = cms.bool(True),
    usePhase2Tracker = cms.bool(True)
)


process.AhltIter2Phase2L3FromL1TkMuonTrackSelectionHighPurity = cms.EDProducer("MuonAssociatorEDProducer",
    AbsoluteNumberOfHits_muon = cms.bool(False),
    AbsoluteNumberOfHits_track = cms.bool(False),
    CSClinksTag = cms.InputTag("simMuonCSCDigis","MuonCSCStripDigiSimLinks"),
    CSCsimHitsTag = cms.InputTag("g4SimHits","MuonCSCHits"),
    CSCsimHitsXFTag = cms.InputTag("mix","g4SimHitsMuonCSCHits"),
    CSCwireLinksTag = cms.InputTag("simMuonCSCDigis","MuonCSCWireDigiSimLinks"),
    DTdigiTag = cms.InputTag("simMuonDTDigis"),
    DTdigisimlinkTag = cms.InputTag("simMuonDTDigis"),
    DTrechitTag = cms.InputTag("hltDt1DRecHits"),
    DTsimhitsTag = cms.InputTag("g4SimHits","MuonDTHits"),
    DTsimhitsXFTag = cms.InputTag("mix","g4SimHitsMuonDTHits"),
    EfficiencyCut_muon = cms.double(0.0),
    EfficiencyCut_track = cms.double(0.0),
    GEMdigisimlinkTag = cms.InputTag("simMuonGEMDigis","GEM"),
    GEMsimhitsTag = cms.InputTag("g4SimHits","MuonGEMHits"),
    GEMsimhitsXFTag = cms.InputTag("mix","g4SimHitsMuonGEMHits"),
    NHitCut_muon = cms.uint32(0),
    NHitCut_track = cms.uint32(0),
    PurityCut_muon = cms.double(0.75),
    PurityCut_track = cms.double(0.75),
    ROUList = cms.vstring(
        'TrackerHitsTIBLowTof', 
        'TrackerHitsTIBHighTof', 
        'TrackerHitsTIDLowTof', 
        'TrackerHitsTIDHighTof', 
        'TrackerHitsTOBLowTof', 
        'TrackerHitsTOBHighTof', 
        'TrackerHitsTECLowTof', 
        'TrackerHitsTECHighTof', 
        'TrackerHitsPixelBarrelLowTof', 
        'TrackerHitsPixelBarrelHighTof', 
        'TrackerHitsPixelEndcapLowTof', 
        'TrackerHitsPixelEndcapHighTof'
    ),
    RPCdigisimlinkTag = cms.InputTag("simMuonRPCDigis","RPCDigiSimLink"),
    RPCsimhitsTag = cms.InputTag("g4SimHits","MuonRPCHits"),
    RPCsimhitsXFTag = cms.InputTag("mix","g4SimHitsMuonRPCHits"),
    ThreeHitTracksAreSpecial = cms.bool(False),
    UseGrouped = cms.bool(True),
    UseMuon = cms.bool(True),
    UsePixels = cms.bool(True),
    UseSplitting = cms.bool(True),
    UseTracker = cms.bool(True),
    acceptOneStubMatchings = cms.bool(False),
    associatePixel = cms.bool(True),
    associateRecoTracks = cms.bool(True),
    associateStrip = cms.bool(True),
    associatorByWire = cms.bool(False),
    crossingframe = cms.bool(False),
    dumpDT = cms.bool(False),
    dumpInputCollections = cms.untracked.bool(False),
    ignoreMissingTrackCollection = cms.untracked.bool(True),
    includeZeroHitMuons = cms.bool(True),
    inputCSCSegmentCollection = cms.InputTag("cscSegments"),
    inputDTRecSegment4DCollection = cms.InputTag("dt4DSegments"),
    links_exist = cms.bool(True),
    phase2TrackerSimLinkSrc = cms.InputTag("simSiPixelDigis","Tracker"),
    pixelSimLinkSrc = cms.InputTag("simSiPixelDigis","Pixel"),
    simtracksTag = cms.InputTag("g4SimHits"),
    simtracksXFTag = cms.InputTag("mix","g4SimHits"),
    stripSimLinkSrc = cms.InputTag("simSiStripDigis"),
    tpTag = cms.InputTag("mix","MergedTrackTruth"),
    tracksTag = cms.InputTag("hltIter2Phase2L3FromL1TkMuonTrackSelectionHighPurity"),
    useGEMs = cms.bool(True),
    usePhase2Tracker = cms.bool(True)
)


process.AhltPhase2L3Muons = cms.EDProducer("MuonAssociatorEDProducer",
    AbsoluteNumberOfHits_muon = cms.bool(False),
    AbsoluteNumberOfHits_track = cms.bool(False),
    CSClinksTag = cms.InputTag("simMuonCSCDigis","MuonCSCStripDigiSimLinks"),
    CSCsimHitsTag = cms.InputTag("g4SimHits","MuonCSCHits"),
    CSCsimHitsXFTag = cms.InputTag("mix","g4SimHitsMuonCSCHits"),
    CSCwireLinksTag = cms.InputTag("simMuonCSCDigis","MuonCSCWireDigiSimLinks"),
    DTdigiTag = cms.InputTag("simMuonDTDigis"),
    DTdigisimlinkTag = cms.InputTag("simMuonDTDigis"),
    DTrechitTag = cms.InputTag("hltDt1DRecHits"),
    DTsimhitsTag = cms.InputTag("g4SimHits","MuonDTHits"),
    DTsimhitsXFTag = cms.InputTag("mix","g4SimHitsMuonDTHits"),
    EfficiencyCut_muon = cms.double(0.0),
    EfficiencyCut_track = cms.double(0.0),
    GEMdigisimlinkTag = cms.InputTag("simMuonGEMDigis","GEM"),
    GEMsimhitsTag = cms.InputTag("g4SimHits","MuonGEMHits"),
    GEMsimhitsXFTag = cms.InputTag("mix","g4SimHitsMuonGEMHits"),
    NHitCut_muon = cms.uint32(0),
    NHitCut_track = cms.uint32(0),
    PurityCut_muon = cms.double(0.75),
    PurityCut_track = cms.double(0.75),
    ROUList = cms.vstring(
        'TrackerHitsTIBLowTof', 
        'TrackerHitsTIBHighTof', 
        'TrackerHitsTIDLowTof', 
        'TrackerHitsTIDHighTof', 
        'TrackerHitsTOBLowTof', 
        'TrackerHitsTOBHighTof', 
        'TrackerHitsTECLowTof', 
        'TrackerHitsTECHighTof', 
        'TrackerHitsPixelBarrelLowTof', 
        'TrackerHitsPixelBarrelHighTof', 
        'TrackerHitsPixelEndcapLowTof', 
        'TrackerHitsPixelEndcapHighTof'
    ),
    RPCdigisimlinkTag = cms.InputTag("simMuonRPCDigis","RPCDigiSimLink"),
    RPCsimhitsTag = cms.InputTag("g4SimHits","MuonRPCHits"),
    RPCsimhitsXFTag = cms.InputTag("mix","g4SimHitsMuonRPCHits"),
    ThreeHitTracksAreSpecial = cms.bool(False),
    UseGrouped = cms.bool(True),
    UseMuon = cms.bool(True),
    UsePixels = cms.bool(True),
    UseSplitting = cms.bool(True),
    UseTracker = cms.bool(True),
    acceptOneStubMatchings = cms.bool(False),
    associatePixel = cms.bool(True),
    associateRecoTracks = cms.bool(True),
    associateStrip = cms.bool(True),
    associatorByWire = cms.bool(False),
    crossingframe = cms.bool(False),
    dumpDT = cms.bool(False),
    dumpInputCollections = cms.untracked.bool(False),
    ignoreMissingTrackCollection = cms.untracked.bool(True),
    includeZeroHitMuons = cms.bool(True),
    inputCSCSegmentCollection = cms.InputTag("cscSegments"),
    inputDTRecSegment4DCollection = cms.InputTag("dt4DSegments"),
    links_exist = cms.bool(True),
    phase2TrackerSimLinkSrc = cms.InputTag("simSiPixelDigis","Tracker"),
    pixelSimLinkSrc = cms.InputTag("simSiPixelDigis","Pixel"),
    simtracksTag = cms.InputTag("g4SimHits"),
    simtracksXFTag = cms.InputTag("mix","g4SimHits"),
    stripSimLinkSrc = cms.InputTag("simSiStripDigis"),
    tpTag = cms.InputTag("mix","MergedTrackTruth"),
    tracksTag = cms.InputTag("hltPhase2L3MuonsTracks"),
    useGEMs = cms.bool(True),
    usePhase2Tracker = cms.bool(True)
)


process.AhltPhase2L3MuonsNoID = cms.EDProducer("MuonAssociatorEDProducer",
    AbsoluteNumberOfHits_muon = cms.bool(False),
    AbsoluteNumberOfHits_track = cms.bool(False),
    CSClinksTag = cms.InputTag("simMuonCSCDigis","MuonCSCStripDigiSimLinks"),
    CSCsimHitsTag = cms.InputTag("g4SimHits","MuonCSCHits"),
    CSCsimHitsXFTag = cms.InputTag("mix","g4SimHitsMuonCSCHits"),
    CSCwireLinksTag = cms.InputTag("simMuonCSCDigis","MuonCSCWireDigiSimLinks"),
    DTdigiTag = cms.InputTag("simMuonDTDigis"),
    DTdigisimlinkTag = cms.InputTag("simMuonDTDigis"),
    DTrechitTag = cms.InputTag("hltDt1DRecHits"),
    DTsimhitsTag = cms.InputTag("g4SimHits","MuonDTHits"),
    DTsimhitsXFTag = cms.InputTag("mix","g4SimHitsMuonDTHits"),
    EfficiencyCut_muon = cms.double(0.0),
    EfficiencyCut_track = cms.double(0.0),
    GEMdigisimlinkTag = cms.InputTag("simMuonGEMDigis","GEM"),
    GEMsimhitsTag = cms.InputTag("g4SimHits","MuonGEMHits"),
    GEMsimhitsXFTag = cms.InputTag("mix","g4SimHitsMuonGEMHits"),
    NHitCut_muon = cms.uint32(0),
    NHitCut_track = cms.uint32(0),
    PurityCut_muon = cms.double(0.75),
    PurityCut_track = cms.double(0.75),
    ROUList = cms.vstring(
        'TrackerHitsTIBLowTof', 
        'TrackerHitsTIBHighTof', 
        'TrackerHitsTIDLowTof', 
        'TrackerHitsTIDHighTof', 
        'TrackerHitsTOBLowTof', 
        'TrackerHitsTOBHighTof', 
        'TrackerHitsTECLowTof', 
        'TrackerHitsTECHighTof', 
        'TrackerHitsPixelBarrelLowTof', 
        'TrackerHitsPixelBarrelHighTof', 
        'TrackerHitsPixelEndcapLowTof', 
        'TrackerHitsPixelEndcapHighTof'
    ),
    RPCdigisimlinkTag = cms.InputTag("simMuonRPCDigis","RPCDigiSimLink"),
    RPCsimhitsTag = cms.InputTag("g4SimHits","MuonRPCHits"),
    RPCsimhitsXFTag = cms.InputTag("mix","g4SimHitsMuonRPCHits"),
    ThreeHitTracksAreSpecial = cms.bool(False),
    UseGrouped = cms.bool(True),
    UseMuon = cms.bool(True),
    UsePixels = cms.bool(True),
    UseSplitting = cms.bool(True),
    UseTracker = cms.bool(True),
    acceptOneStubMatchings = cms.bool(False),
    associatePixel = cms.bool(True),
    associateRecoTracks = cms.bool(True),
    associateStrip = cms.bool(True),
    associatorByWire = cms.bool(False),
    crossingframe = cms.bool(False),
    dumpDT = cms.bool(False),
    dumpInputCollections = cms.untracked.bool(False),
    ignoreMissingTrackCollection = cms.untracked.bool(True),
    includeZeroHitMuons = cms.bool(True),
    inputCSCSegmentCollection = cms.InputTag("cscSegments"),
    inputDTRecSegment4DCollection = cms.InputTag("dt4DSegments"),
    links_exist = cms.bool(True),
    phase2TrackerSimLinkSrc = cms.InputTag("simSiPixelDigis","Tracker"),
    pixelSimLinkSrc = cms.InputTag("simSiPixelDigis","Pixel"),
    simtracksTag = cms.InputTag("g4SimHits"),
    simtracksXFTag = cms.InputTag("mix","g4SimHits"),
    stripSimLinkSrc = cms.InputTag("simSiStripDigis"),
    tpTag = cms.InputTag("mix","MergedTrackTruth"),
    tracksTag = cms.InputTag("hltPhase2L3MuonsNoIDTracks"),
    useGEMs = cms.bool(True),
    usePhase2Tracker = cms.bool(True)
)


process.AhltPhase2L3OIMuonTrackSelectionHighPurity = cms.EDProducer("MuonAssociatorEDProducer",
    AbsoluteNumberOfHits_muon = cms.bool(False),
    AbsoluteNumberOfHits_track = cms.bool(False),
    CSClinksTag = cms.InputTag("simMuonCSCDigis","MuonCSCStripDigiSimLinks"),
    CSCsimHitsTag = cms.InputTag("g4SimHits","MuonCSCHits"),
    CSCsimHitsXFTag = cms.InputTag("mix","g4SimHitsMuonCSCHits"),
    CSCwireLinksTag = cms.InputTag("simMuonCSCDigis","MuonCSCWireDigiSimLinks"),
    DTdigiTag = cms.InputTag("simMuonDTDigis"),
    DTdigisimlinkTag = cms.InputTag("simMuonDTDigis"),
    DTrechitTag = cms.InputTag("hltDt1DRecHits"),
    DTsimhitsTag = cms.InputTag("g4SimHits","MuonDTHits"),
    DTsimhitsXFTag = cms.InputTag("mix","g4SimHitsMuonDTHits"),
    EfficiencyCut_muon = cms.double(0.0),
    EfficiencyCut_track = cms.double(0.0),
    GEMdigisimlinkTag = cms.InputTag("simMuonGEMDigis","GEM"),
    GEMsimhitsTag = cms.InputTag("g4SimHits","MuonGEMHits"),
    GEMsimhitsXFTag = cms.InputTag("mix","g4SimHitsMuonGEMHits"),
    NHitCut_muon = cms.uint32(0),
    NHitCut_track = cms.uint32(0),
    PurityCut_muon = cms.double(0.75),
    PurityCut_track = cms.double(0.75),
    ROUList = cms.vstring(
        'TrackerHitsTIBLowTof', 
        'TrackerHitsTIBHighTof', 
        'TrackerHitsTIDLowTof', 
        'TrackerHitsTIDHighTof', 
        'TrackerHitsTOBLowTof', 
        'TrackerHitsTOBHighTof', 
        'TrackerHitsTECLowTof', 
        'TrackerHitsTECHighTof', 
        'TrackerHitsPixelBarrelLowTof', 
        'TrackerHitsPixelBarrelHighTof', 
        'TrackerHitsPixelEndcapLowTof', 
        'TrackerHitsPixelEndcapHighTof'
    ),
    RPCdigisimlinkTag = cms.InputTag("simMuonRPCDigis","RPCDigiSimLink"),
    RPCsimhitsTag = cms.InputTag("g4SimHits","MuonRPCHits"),
    RPCsimhitsXFTag = cms.InputTag("mix","g4SimHitsMuonRPCHits"),
    ThreeHitTracksAreSpecial = cms.bool(False),
    UseGrouped = cms.bool(True),
    UseMuon = cms.bool(True),
    UsePixels = cms.bool(True),
    UseSplitting = cms.bool(True),
    UseTracker = cms.bool(True),
    acceptOneStubMatchings = cms.bool(False),
    associatePixel = cms.bool(True),
    associateRecoTracks = cms.bool(True),
    associateStrip = cms.bool(True),
    associatorByWire = cms.bool(False),
    crossingframe = cms.bool(False),
    dumpDT = cms.bool(False),
    dumpInputCollections = cms.untracked.bool(False),
    ignoreMissingTrackCollection = cms.untracked.bool(True),
    includeZeroHitMuons = cms.bool(True),
    inputCSCSegmentCollection = cms.InputTag("cscSegments"),
    inputDTRecSegment4DCollection = cms.InputTag("dt4DSegments"),
    links_exist = cms.bool(True),
    phase2TrackerSimLinkSrc = cms.InputTag("simSiPixelDigis","Tracker"),
    pixelSimLinkSrc = cms.InputTag("simSiPixelDigis","Pixel"),
    simtracksTag = cms.InputTag("g4SimHits"),
    simtracksXFTag = cms.InputTag("mix","g4SimHits"),
    stripSimLinkSrc = cms.InputTag("simSiStripDigis"),
    tpTag = cms.InputTag("mix","MergedTrackTruth"),
    tracksTag = cms.InputTag("hltPhase2L3OIMuonTrackSelectionHighPurity"),
    useGEMs = cms.bool(True),
    usePhase2Tracker = cms.bool(True)
)


process.BeamHaloSummary = cms.EDProducer("BeamHaloSummaryProducer",
    CSCHaloDataLabel = cms.InputTag("CSCHaloData"),
    EcalHaloDataLabel = cms.InputTag("EcalHaloData"),
    GlobalHaloDataLabel = cms.InputTag("GlobalHaloData"),
    HcalHaloDataLabel = cms.InputTag("HcalHaloData"),
    l_EcalPhiWedgeConfidence = cms.double(0.7),
    l_EcalPhiWedgeConstituents = cms.int32(6),
    l_EcalPhiWedgeEnergy = cms.double(10.0),
    l_EcalPhiWedgeToF = cms.double(-200.0),
    l_EcalShowerShapesAngle = cms.double(0.51),
    l_EcalShowerShapesRoundness = cms.double(0.41),
    l_EcalSuperClusterEnergy = cms.double(10.0),
    l_EcalSuperClusterSize = cms.int32(3),
    l_HcalPhiWedgeConfidence = cms.double(0.7),
    l_HcalPhiWedgeConstituents = cms.int32(6),
    l_HcalPhiWedgeEnergy = cms.double(20.0),
    l_HcalPhiWedgeToF = cms.double(-100.0),
    problematicStripMinLength = cms.int32(6),
    t_EcalPhiWedgeConfidence = cms.double(0.9),
    t_EcalPhiWedgeConstituents = cms.int32(8),
    t_EcalPhiWedgeEnergy = cms.double(20.0),
    t_EcalPhiWedgeToF = cms.double(-200.0),
    t_EcalShowerShapesAngle = cms.double(0.51),
    t_EcalShowerShapesRoundness = cms.double(0.23),
    t_EcalSuperClusterEnergy = cms.double(10.0),
    t_EcalSuperClusterSize = cms.int32(3),
    t_HcalPhiWedgeConfidence = cms.double(0.9),
    t_HcalPhiWedgeConstituents = cms.int32(8),
    t_HcalPhiWedgeEnergy = cms.double(25.0),
    t_HcalPhiWedgeToF = cms.double(-100.0)
)


process.CSCHaloData = cms.EDProducer("CSCHaloDataProducer",
    ALCTDigiLabel = cms.InputTag("muonCSCDigis","MuonCSCALCTDigi"),
    CSCRecHitLabel = cms.InputTag("csc2DRecHits"),
    CSCSegmentLabel = cms.InputTag("cscSegments"),
    CosmicMuonLabel = cms.InputTag("muonsFromCosmics"),
    DetaParam = cms.double(0.1),
    DphiParam = cms.double(1.0),
    ECALBrhLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    ECALErhLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    ExpectedBX = cms.int32(6),
    HBHErhLabel = cms.InputTag("hbhereco"),
    HLTBitLabel = cms.VInputTag(cms.InputTag("HLT_CSCBeamHalo"), cms.InputTag("HLT_CSCBeamHaloOverlapRing1"), cms.InputTag("HLT_CSCBeamHaloOverlapRing2"), cms.InputTag("HLT_CSCBeamHaloRing2or3")),
    HLTResultLabel = cms.InputTag("TriggerResults","","HLT"),
    InnerRMaxParam = cms.double(99999.0),
    InnerRMinParam = cms.double(0.0),
    L1MuGMTReadoutLabel = cms.InputTag("gtDigis"),
    MatchParameters = cms.PSet(
        CSCsegments = cms.InputTag("cscSegments"),
        DTradius = cms.double(0.01),
        DTsegments = cms.InputTag("dt4DSegments"),
        RPChits = cms.InputTag("rpcRecHits"),
        TightMatchCSC = cms.bool(True),
        TightMatchDT = cms.bool(False)
    ),
    MatchingDEtaThreshold = cms.double(0.4),
    MatchingDPhiThreshold = cms.double(0.18),
    MatchingDWireThreshold = cms.int32(5),
    MaxDtMuonSegment = cms.double(-10.0),
    MaxFreeInverseBeta = cms.double(0.0),
    MaxOuterMomentumTheta = cms.double(3.0),
    MaxSegmentPhiDiff = cms.double(0.1),
    MaxSegmentRDiff = cms.double(10.0),
    MaxSegmentTheta = cms.double(0.7),
    MinOuterMomentumTheta = cms.double(0.1),
    MuonLabel = cms.InputTag("muons"),
    NormChi2Param = cms.double(8.0),
    OuterRMaxParam = cms.double(99999.0),
    OuterRMinParam = cms.double(0.0),
    RecHitTime0 = cms.double(0.0),
    RecHitTimeWindow = cms.double(25.0),
    SALabel = cms.InputTag("standAloneMuons")
)


process.CastorTowerReco = cms.EDProducer("CastorTowerProducer",
    inputprocess = cms.string('castorreco'),
    maxtime = cms.double(99999.0),
    mintime = cms.double(-99999.0),
    towercut = cms.double(0.65)
)


process.CkfElectronCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('CkfElectronTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    reverseTrajectories = cms.bool(False),
    src = cms.InputTag("globalMixedSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.ClassifierMerger = cms.EDProducer("ClassifierMerger",
    inputClassifiers = cms.vstring(),
    mightGet = cms.optional.untracked.vstring
)


process.CosmicMuonSeed = cms.EDProducer("CosmicMuonSeedGenerator",
    CSCRecSegmentLabel = cms.InputTag("cscSegments"),
    DTRecSegmentLabel = cms.InputTag("dt4DCosmicSegments"),
    EnableCSCMeasurement = cms.bool(True),
    EnableDTMeasurement = cms.bool(True),
    ForcePointDown = cms.bool(True),
    MaxCSCChi2 = cms.double(300.0),
    MaxDTChi2 = cms.double(300.0),
    MaxSeeds = cms.int32(1000)
)


process.DuplicateListMerger = cms.EDProducer("DuplicateListMerger",
    candidateComponents = cms.InputTag(""),
    candidateSource = cms.InputTag(""),
    copyExtras = cms.untracked.bool(True),
    copyTrajectories = cms.untracked.bool(False),
    diffHitsCut = cms.int32(5),
    mergedMVAVals = cms.InputTag(""),
    mergedSource = cms.InputTag(""),
    mightGet = cms.optional.untracked.vstring,
    originalMVAVals = cms.InputTag(""),
    originalSource = cms.InputTag(""),
    trackAlgoPriorityOrder = cms.string('trackAlgoPriorityOrder')
)


process.DuplicateTrackMerger = cms.EDProducer("DuplicateTrackMerger",
    GBRForestFileName = cms.string(''),
    chi2EstimatorName = cms.string('DuplicateTrackMergerChi2Est'),
    forestLabel = cms.string('MVADuplicate'),
    maxDCA = cms.double(30),
    maxDLambda = cms.double(0.3),
    maxDPhi = cms.double(0.3),
    maxDQoP = cms.double(0.25),
    maxDdsz = cms.double(10),
    maxDdxy = cms.double(10),
    mightGet = cms.optional.untracked.vstring,
    minBDTG = cms.double(-0.1),
    minDeltaR3d = cms.double(-4),
    minP = cms.double(0.4),
    minpT = cms.double(0.2),
    overlapCheckMaxHits = cms.uint32(4),
    overlapCheckMaxMissingLayers = cms.uint32(1),
    overlapCheckMinCosT = cms.double(0.99),
    propagatorName = cms.string('PropagatorWithMaterial'),
    source = cms.InputTag(""),
    ttrhBuilderName = cms.string('WithAngleAndTemplate'),
    useInnermostState = cms.bool(True)
)


process.EcalHaloData = cms.EDProducer("EcalHaloDataProducer",
    AngleCutParam = cms.double(0.51),
    EBRecHitEnergyThresholdParam = cms.double(0.3),
    EBRecHitLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    EERecHitEnergyThresholdParam = cms.double(0.3),
    EERecHitLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    ESRecHitEnergyThresholdParam = cms.double(0.3),
    ESRecHitLabel = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    HBHERecHitLabel = cms.InputTag("hbhereco"),
    NHitsEcalThresholdParam = cms.int32(4),
    PhotonLabel = cms.InputTag(""),
    RoundnessCutParam = cms.double(0.41),
    SumEcalEnergyThresholdParam = cms.double(10.0),
    SuperClusterLabel = cms.InputTag("correctedHybridSuperClusters")
)


process.GlobalHaloData = cms.EDProducer("GlobalHaloDataProducer",
    CSCHaloDataLabel = cms.InputTag("CSCHaloData"),
    CSCRecHitLabel = cms.InputTag("csc2DRecHits"),
    CSCSegmentLabel = cms.InputTag("cscSegments"),
    CaloTowerEtThresholdParam = cms.double(0.3),
    EcalHaloDataLabel = cms.InputTag("EcalHaloData"),
    EcalMaxMatchingRadiusParam = cms.double(330.0),
    EcalMinMatchingRadiusParam = cms.double(110.0),
    HcalHaloDataLabel = cms.InputTag("HcalHaloData"),
    HcalMaxMatchingRadiusParam = cms.double(490.0),
    HcalMinMatchingRadiusParam = cms.double(110.0),
    IsHLT = cms.bool(False),
    MaxSegmentTheta = cms.double(0.7),
    MuonLabel = cms.InputTag("muons"),
    calotowerLabel = cms.InputTag("towerMaker"),
    dphicalosegm_thresh_eb = cms.double(0.04),
    dphicalosegm_thresh_ee = cms.double(0.04),
    dphicalosegm_thresh_hb = cms.double(0.15),
    dphicalosegm_thresh_he = cms.double(0.1),
    dtcalosegm_thresh_eb = cms.double(15.0),
    dtcalosegm_thresh_ee = cms.double(15.0),
    dtcalosegm_thresh_hb = cms.double(15.0),
    dtcalosegm_thresh_he = cms.double(15.0),
    metLabel = cms.InputTag("caloMet"),
    rcalominrsegm_highthresh_eb = cms.double(15.0),
    rcalominrsegm_highthresh_ee = cms.double(30.0),
    rcalominrsegm_highthresh_hb = cms.double(20.0),
    rcalominrsegm_highthresh_he = cms.double(30.0),
    rcalominrsegm_lowthresh_eb = cms.double(-30.0),
    rcalominrsegm_lowthresh_ee = cms.double(-30.0),
    rcalominrsegm_lowthresh_hb = cms.double(-100.0),
    rcalominrsegm_lowthresh_he = cms.double(-30.0),
    rh_et_threshforcscmatching_eb = cms.double(10.0),
    rh_et_threshforcscmatching_ee = cms.double(10.0),
    rh_et_threshforcscmatching_hb = cms.double(20.0),
    rh_et_threshforcscmatching_he = cms.double(20.0)
)


process.GsfGlobalElectronTest = cms.EDProducer("GsfTrackProducer",
    AlgorithmName = cms.string('gsf'),
    Fitter = cms.string('GsfElectronFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('fwdElectronPropagator'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(False),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    producer = cms.string(''),
    src = cms.InputTag("CkfElectronCandidates"),
    useHitsSplitting = cms.bool(False)
)


process.HGCalRecHit = cms.EDProducer("HGCalRecHitProducer",
    HGCEE_cce = cms.PSet(
        refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
    ),
    HGCEE_fCPerMIP = cms.vdouble(2.06, 3.43, 5.15),
    HGCEE_isSiFE = cms.bool(True),
    HGCEE_keV2DIGI = cms.double(0.044259),
    HGCEE_noise_fC = cms.PSet(
        refToPSet_ = cms.string('HGCAL_noise_fC')
    ),
    HGCEErechitCollection = cms.string('HGCEERecHits'),
    HGCEEuncalibRecHitCollection = cms.InputTag("HGCalUncalibRecHit","HGCEEUncalibRecHits"),
    HGCHEB_isSiFE = cms.bool(True),
    HGCHEB_keV2DIGI = cms.double(0.00148148148148),
    HGCHEB_noise_MIP = cms.PSet(
        refToPSet_ = cms.string('HGCAL_noise_heback')
    ),
    HGCHEBrechitCollection = cms.string('HGCHEBRecHits'),
    HGCHEBuncalibRecHitCollection = cms.InputTag("HGCalUncalibRecHit","HGCHEBUncalibRecHits"),
    HGCHEF_cce = cms.PSet(
        refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
    ),
    HGCHEF_fCPerMIP = cms.vdouble(2.06, 3.43, 5.15),
    HGCHEF_isSiFE = cms.bool(True),
    HGCHEF_keV2DIGI = cms.double(0.044259),
    HGCHEF_noise_fC = cms.PSet(
        refToPSet_ = cms.string('HGCAL_noise_fC')
    ),
    HGCHEFrechitCollection = cms.string('HGCHEFRecHits'),
    HGCHEFuncalibRecHitCollection = cms.InputTag("HGCalUncalibRecHit","HGCHEFUncalibRecHits"),
    HGCHFNose_cce = cms.PSet(
        refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
    ),
    HGCHFNose_fCPerMIP = cms.vdouble(1.25, 2.57, 3.88),
    HGCHFNose_isSiFE = cms.bool(False),
    HGCHFNose_keV2DIGI = cms.double(0.044259),
    HGCHFNose_noise_fC = cms.PSet(
        refToPSet_ = cms.string('HGCAL_noise_fC')
    ),
    HGCHFNoserechitCollection = cms.string('HGCHFNoseRecHits'),
    HGCHFNoseuncalibRecHitCollection = cms.InputTag("HGCalUncalibRecHit","HGCHFNoseUncalibRecHits"),
    algo = cms.string('HGCalRecHitWorkerSimple'),
    constSiPar = cms.double(0.02),
    deltasi_index_regemfac = cms.int32(3),
    layerNoseWeights = cms.vdouble(
        0.0, 39.500245, 39.756638, 39.756638, 39.756638, 
        39.756638, 66.020266, 92.283895, 92.283895
    ),
    layerWeights = cms.vdouble(
        0.0, 8.894541, 10.937907, 10.937907, 10.937907, 
        10.937907, 10.937907, 10.937907, 10.937907, 10.937907, 
        10.932882, 10.932882, 10.937907, 10.937907, 10.938169, 
        10.938169, 10.938169, 10.938169, 10.938169, 10.938169, 
        10.938169, 10.938169, 10.938169, 10.938169, 10.938169, 
        10.938169, 10.938169, 10.938169, 32.332097, 51.574301, 
        51.444192, 51.444192, 51.444192, 51.444192, 51.444192, 
        51.444192, 51.444192, 51.444192, 51.444192, 51.444192, 
        69.513118, 87.582044, 87.582044, 87.582044, 87.582044, 
        87.582044, 87.214571, 86.888309, 86.92952, 86.92952, 
        86.92952
    ),
    maxValSiPar = cms.double(10000.0),
    minValSiPar = cms.double(10.0),
    noiseSiPar = cms.double(5.5),
    rangeMask = cms.uint32(4294442496),
    rangeMatch = cms.uint32(1161838592),
    sciThicknessCorrection = cms.double(0.9),
    thicknessCorrection = cms.vdouble(
        0.77, 0.77, 0.77, 0.84, 0.84, 
        0.84
    ),
    thicknessNoseCorrection = cms.vdouble(1.132, 1.092, 1.084)
)


process.HGCalUncalibRecHit = cms.EDProducer("HGCalUncalibRecHitProducer",
    HGCEEConfig = cms.PSet(
        adcNbits = cms.uint32(10),
        adcSaturation = cms.double(100),
        fCPerMIP = cms.vdouble(2.06, 3.43, 5.15),
        isSiFE = cms.bool(True),
        tdcNbits = cms.uint32(12),
        tdcOnset = cms.double(60),
        tdcSaturation = cms.double(10000),
        toaLSB_ns = cms.double(0.0244)
    ),
    HGCEEdigiCollection = cms.InputTag("hgcalDigis","EE"),
    HGCEEhitCollection = cms.string('HGCEEUncalibRecHits'),
    HGCHEBConfig = cms.PSet(
        adcNbits = cms.uint32(10),
        adcSaturation = cms.double(68.75),
        fCPerMIP = cms.vdouble(1.0, 1.0, 1.0),
        isSiFE = cms.bool(True),
        tdcNbits = cms.uint32(12),
        tdcOnset = cms.double(55),
        tdcSaturation = cms.double(1000),
        toaLSB_ns = cms.double(0.0244)
    ),
    HGCHEBdigiCollection = cms.InputTag("hgcalDigis","HEback"),
    HGCHEBhitCollection = cms.string('HGCHEBUncalibRecHits'),
    HGCHEFConfig = cms.PSet(
        adcNbits = cms.uint32(10),
        adcSaturation = cms.double(100),
        fCPerMIP = cms.vdouble(2.06, 3.43, 5.15),
        isSiFE = cms.bool(True),
        tdcNbits = cms.uint32(12),
        tdcOnset = cms.double(60),
        tdcSaturation = cms.double(10000),
        toaLSB_ns = cms.double(0.0244)
    ),
    HGCHEFdigiCollection = cms.InputTag("hgcalDigis","HEfront"),
    HGCHEFhitCollection = cms.string('HGCHEFUncalibRecHits'),
    HGCHFNoseConfig = cms.PSet(
        adcNbits = cms.uint32(10),
        adcSaturation = cms.double(100),
        fCPerMIP = cms.vdouble(1.25, 2.57, 3.88),
        isSiFE = cms.bool(False),
        tdcNbits = cms.uint32(12),
        tdcOnset = cms.double(60),
        tdcSaturation = cms.double(10000),
        toaLSB_ns = cms.double(0.0244)
    ),
    HGCHFNosedigiCollection = cms.InputTag("hfnoseDigis","HFNose"),
    HGCHFNosehitCollection = cms.string('HGCHFNoseUncalibRecHits'),
    algo = cms.string('HGCalUncalibRecHitWorkerWeights')
)


process.HcalHaloData = cms.EDProducer("HcalHaloDataProducer",
    EBRecHitLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    EERecHitLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    HBHERecHitLabel = cms.InputTag("hbhereco"),
    HBRecHitEnergyThresholdParam = cms.double(0.5),
    HERecHitEnergyThresholdParam = cms.double(0.5),
    HFRecHitLabel = cms.InputTag("hfreco"),
    HORecHitLabel = cms.InputTag("horeco"),
    HcalMaxMatchingRadiusParam = cms.double(490.0),
    HcalMinMatchingRadiusParam = cms.double(110.0),
    NHitsHcalThresholdParam = cms.int32(4),
    SumHcalEnergyThresholdParam = cms.double(18),
    caloTowerCollName = cms.InputTag("towerMaker")
)


process.HiTrackingRegionFactoryFromSTAMuonsEDProducer = cms.EDProducer("HIMuonTrackingRegionEDProducer",
    MuonSrc = cms.InputTag("standAloneMuons","UpdatedAtVtx"),
    MuonTrackingRegionBuilder = cms.PSet(
        DeltaEta = cms.double(0.2),
        DeltaPhi = cms.double(0.2),
        DeltaR = cms.double(0.2),
        DeltaZ = cms.double(15.9),
        EtaR_UpperLimit_Par1 = cms.double(0.25),
        EtaR_UpperLimit_Par2 = cms.double(0.15),
        Eta_fixed = cms.bool(False),
        Eta_min = cms.double(0.1),
        MeasurementTrackerName = cms.InputTag(""),
        OnDemand = cms.int32(-1),
        PhiR_UpperLimit_Par1 = cms.double(0.6),
        PhiR_UpperLimit_Par2 = cms.double(0.2),
        Phi_fixed = cms.bool(False),
        Phi_min = cms.double(0.1),
        Pt_fixed = cms.bool(False),
        Pt_min = cms.double(1.5),
        Rescale_Dz = cms.double(5.0),
        Rescale_eta = cms.double(3.0),
        Rescale_phi = cms.double(3.0),
        UseVertex = cms.bool(True),
        Z_fixed = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        input = cms.InputTag(""),
        maxRegions = cms.int32(1),
        precise = cms.bool(True),
        vertexCollection = cms.InputTag("hiSelectedPixelVertex")
    ),
    ServiceParameters = cms.PSet(
        CSCLayers = cms.untracked.bool(True),
        GEMLayers = cms.untracked.bool(True),
        ME0Layers = cms.bool(True),
        Propagators = cms.untracked.vstring(
            'SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'
        ),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    mightGet = cms.optional.untracked.vstring
)


process.JPTeidTight = cms.EDProducer("EleIdCutBasedExtProducer",
    additionalCategories = cms.bool(True),
    algorithm = cms.string('eIDCB'),
    classbasedlooseEleIDCuts = cms.PSet(
        cutdcotdist = cms.vdouble(
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0
        ),
        cutdetain = cms.vdouble(
            0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273
        ),
        cutdetainl = cms.vdouble(
            0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024
        ),
        cutdphiin = cms.vdouble(
            0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336
        ),
        cutdphiinl = cms.vdouble(
            0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289
        ),
        cuteseedopcor = cms.vdouble(
            0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373
        ),
        cutfmishits = cms.vdouble(
            4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5
        ),
        cuthoe = cms.vdouble(
            0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404
        ),
        cuthoel = cms.vdouble(
            0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384
        ),
        cutip_gsf = cms.vdouble(
            0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231
        ),
        cutip_gsfl = cms.vdouble(
            0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479
        ),
        cutiso_sum = cms.vdouble(
            33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98
        ),
        cutiso_sumoet = cms.vdouble(
            34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74
        ),
        cutiso_sumoetl = cms.vdouble(
            11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4
        ),
        cutsee = cms.vdouble(
            0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133
        ),
        cutseel = cms.vdouble(
            0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544
        )
    ),
    classbasedlooseEleIDCutsV00 = cms.PSet(
        deltaEtaIn = cms.vdouble(
            0.009, 0.0045, 0.0085, 0.0, 0.0105, 
            0.0068, 0.01, 0.0
        ),
        deltaPhiIn = cms.vdouble(
            0.05, 0.025, 0.053, 0.09, 0.07, 
            0.03, 0.092, 0.092
        ),
        eSeedOverPin = cms.vdouble(
            0.11, 0.91, 0.11, 0.0, 0.0, 
            0.85, 0.0, 0.0
        ),
        hOverE = cms.vdouble(
            0.115, 0.1, 0.055, 0.0, 0.145, 
            0.12, 0.15, 0.0
        ),
        sigmaEtaEta = cms.vdouble(
            0.014, 0.012, 0.0115, 0.0, 0.0275, 
            0.0265, 0.0265, 0.0
        )
    ),
    classbasedlooseEleIDCutsV01 = cms.PSet(
        deltaEtaIn = cms.vdouble(
            0.0078, 0.00259, 0.0062, 0.0, 0.0078, 
            0.0061, 0.0061, 0.0
        ),
        deltaPhiIn = cms.vdouble(
            0.053, 0.0189, 0.059, 0.099, 0.0278, 
            0.0157, 0.042, 0.08
        ),
        eSeedOverPin = cms.vdouble(
            0.3, 0.92, 0.211, 0.0, 0.42, 
            0.88, 0.68, 0.0
        ),
        hOverE = cms.vdouble(
            0.076, 0.033, 0.07, 0.0, 0.083, 
            0.0148, 0.033, 0.0
        ),
        sigmaEtaEta = cms.vdouble(
            0.0101, 0.0095, 0.0097, 0.0, 0.0271, 
            0.0267, 0.0259, 0.0
        )
    ),
    classbasedlooseEleIDCutsV02 = cms.PSet(
        cutdeta = cms.vdouble(
            0.00958, 0.00406, 0.0122, 0.0137, 0.00837, 
            0.0127, 0.011, 0.00336, 0.00977, 0.015, 
            0.00675, 0.0109, 0.014, 0.00508, 0.0109, 
            0.0146, 0.00506, 0.0127
        ),
        cutdphi = cms.vdouble(
            0.0372, 0.114, 0.118, 0.0488, 0.117, 
            0.119, 0.0606, 0.0548, 0.117, 0.07, 
            0.0355, 0.117, 0.088, 0.045, 0.118, 
            0.0919, 0.0236, 0.0515
        ),
        cuteopin = cms.vdouble(
            0.878, 0.802, 0.814, 0.942, 0.735, 
            0.774, 0.829, 0.909, 0.829, 0.813, 
            0.86, 0.897, 0.817, 0.831, 0.818, 
            0.861, 0.787, 0.789
        ),
        cuthoe = cms.vdouble(
            0.0887, 0.0934, 0.0949, 0.0986, 0.0431, 
            0.0878, 0.097, 0.0509, 0.098, 0.0991, 
            0.0321, 0.0928, 0.0663, 0.0717, 0.0966, 
            0.0758, 0.0149, 0.0131
        ),
        cutip = cms.vdouble(
            0.0246, 0.076, 0.0966, 0.0885, 0.441, 
            0.205, 0.0292, 0.0293, 0.0619, 0.0251, 
            0.159, 0.0815, 7.29, 0.0106, 5.76, 
            6.89, 1.27, 5.89
        ),
        cutisoecal = cms.vdouble(
            33.4, 28.1, 7.32, 27.4, 7.33, 
            21.7, 93.8, 102.0, 12.1, 26.0, 
            8.91, 10.0, 16.1, 31.3, 16.9, 
            15.4, 13.3, 37.7
        ),
        cutisohcal = cms.vdouble(
            13.5, 9.93, 7.56, 14.8, 8.1, 
            10.8, 42.7, 20.1, 9.11, 10.4, 
            6.89, 5.59, 8.53, 9.59, 24.2, 
            2.78, 8.67, 0.288
        ),
        cutisotk = cms.vdouble(
            24.3, 8.45, 14.4, 27.8, 6.02, 
            10.5, 14.1, 10.2, 14.5, 19.1, 
            6.1, 14.1, 8.59, 8.33, 8.3, 
            8.93, 8.6, 16.0
        ),
        cutmishits = cms.vdouble(
            5.5, 1.5, 5.5, 2.5, 2.5, 
            2.5, 3.5, 5.5, 0.5, 1.5, 
            2.5, 0.5, 1.5, 1.5, 0.5, 
            0.5, 0.5, 0.5
        ),
        cutsee = cms.vdouble(
            0.0172, 0.0115, 0.0143, 0.0344, 0.0295, 
            0.0304, 0.0145, 0.0108, 0.0128, 0.0347, 
            0.0307, 0.0316, 0.018, 0.011, 0.0132, 
            0.0349, 0.031, 0.0327
        )
    ),
    classbasedlooseEleIDCutsV03 = cms.PSet(
        cutdcotdist = cms.vdouble(
            0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199
        ),
        cutdetain = cms.vdouble(
            0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239
        ),
        cutdphiin = cms.vdouble(
            0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459
        ),
        cuteseedopcor = cms.vdouble(
            0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648
        ),
        cutet = cms.vdouble(
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5
        ),
        cutfmishits = cms.vdouble(
            4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87
        ),
        cutip_gsf = cms.vdouble(
            0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221
        ),
        cutiso_sum = cms.vdouble(
            31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0
        ),
        cutiso_sumoet = cms.vdouble(
            28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6
        ),
        cutsee = cms.vdouble(
            0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114
        )
    ),
    classbasedlooseEleIDCutsV04 = cms.PSet(
        cutdcotdist = cms.vdouble(
            0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199
        ),
        cutdetain = cms.vdouble(
            0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239
        ),
        cutdphiin = cms.vdouble(
            0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459
        ),
        cuteseedopcor = cms.vdouble(
            0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648
        ),
        cutet = cms.vdouble(
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5
        ),
        cutfmishits = cms.vdouble(
            4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87
        ),
        cutip_gsf = cms.vdouble(
            0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221
        ),
        cutiso_sum = cms.vdouble(
            31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0
        ),
        cutiso_sumoet = cms.vdouble(
            28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6
        ),
        cutsee = cms.vdouble(
            0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114
        )
    ),
    classbasedlooseEleIDCutsV06 = cms.PSet(
        cutdcotdist = cms.vdouble(
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0
        ),
        cutdetain = cms.vdouble(
            0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273
        ),
        cutdetainl = cms.vdouble(
            0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024
        ),
        cutdphiin = cms.vdouble(
            0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336
        ),
        cutdphiinl = cms.vdouble(
            0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289
        ),
        cuteseedopcor = cms.vdouble(
            0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373
        ),
        cutfmishits = cms.vdouble(
            4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5
        ),
        cuthoe = cms.vdouble(
            0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404
        ),
        cuthoel = cms.vdouble(
            0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384
        ),
        cutip_gsf = cms.vdouble(
            0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231
        ),
        cutip_gsfl = cms.vdouble(
            0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479
        ),
        cutiso_sum = cms.vdouble(
            33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98
        ),
        cutiso_sumoet = cms.vdouble(
            34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74
        ),
        cutiso_sumoetl = cms.vdouble(
            11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4
        ),
        cutsee = cms.vdouble(
            0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133
        ),
        cutseel = cms.vdouble(
            0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544
        )
    ),
    classbasedtightEleIDCuts = cms.PSet(
        cutdcotdist = cms.vdouble(
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0
        ),
        cutdetain = cms.vdouble(
            0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139
        ),
        cutdetainl = cms.vdouble(
            0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143
        ),
        cutdphiin = cms.vdouble(
            0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328
        ),
        cutdphiinl = cms.vdouble(
            0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258
        ),
        cuteseedopcor = cms.vdouble(
            0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473
        ),
        cutfmishits = cms.vdouble(
            1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404
        ),
        cuthoel = cms.vdouble(
            0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339
        ),
        cutip_gsf = cms.vdouble(
            0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731
        ),
        cutip_gsfl = cms.vdouble(
            0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479
        ),
        cutiso_sum = cms.vdouble(
            15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98
        ),
        cutiso_sumoet = cms.vdouble(
            11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94
        ),
        cutiso_sumoetl = cms.vdouble(
            6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73
        ),
        cutsee = cms.vdouble(
            0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917
        ),
        cutseel = cms.vdouble(
            0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544
        )
    ),
    classbasedtightEleIDCutsV00 = cms.PSet(
        deltaEtaIn = cms.vdouble(
            0.0055, 0.003, 0.0065, 0.0, 0.006, 
            0.0055, 0.0075, 0.0
        ),
        deltaPhiIn = cms.vdouble(
            0.032, 0.016, 0.0525, 0.09, 0.025, 
            0.035, 0.065, 0.092
        ),
        eSeedOverPin = cms.vdouble(
            0.24, 0.94, 0.11, 0.0, 0.32, 
            0.83, 0.0, 0.0
        ),
        hOverE = cms.vdouble(
            0.05, 0.042, 0.045, 0.0, 0.055, 
            0.037, 0.05, 0.0
        ),
        sigmaEtaEta = cms.vdouble(
            0.0125, 0.011, 0.01, 0.0, 0.0265, 
            0.0252, 0.026, 0.0
        )
    ),
    classbasedtightEleIDCutsV01 = cms.PSet(
        deltaEtaIn = cms.vdouble(
            0.0043, 0.00282, 0.0036, 0.0, 0.0066, 
            0.0049, 0.0041, 0.0
        ),
        deltaPhiIn = cms.vdouble(
            0.0225, 0.0114, 0.0234, 0.039, 0.0215, 
            0.0095, 0.0148, 0.0167
        ),
        eSeedOverPin = cms.vdouble(
            0.32, 0.94, 0.221, 0.0, 0.74, 
            0.89, 0.66, 0.0
        ),
        hOverE = cms.vdouble(
            0.056, 0.0221, 0.037, 0.0, 0.0268, 
            0.0102, 0.0104, 0.0
        ),
        sigmaEtaEta = cms.vdouble(
            0.0095, 0.0094, 0.0094, 0.0, 0.026, 
            0.0257, 0.0246, 0.0
        )
    ),
    classbasedtightEleIDCutsV02 = cms.PSet(
        cutdeta = cms.vdouble(
            0.00915, 0.00302, 0.0061, 0.0135, 0.00565, 
            0.00793, 0.0102, 0.00266, 0.0106, 0.00903, 
            0.00766, 0.00723, 0.0116, 0.00203, 0.00659, 
            0.0148, 0.00555, 0.0128
        ),
        cutdphi = cms.vdouble(
            0.0369, 0.0307, 0.117, 0.0475, 0.0216, 
            0.117, 0.0372, 0.0246, 0.0426, 0.0612, 
            0.0142, 0.039, 0.0737, 0.0566, 0.0359, 
            0.0187, 0.012, 0.0358
        ),
        cuteopin = cms.vdouble(
            0.878, 0.859, 0.874, 0.944, 0.737, 
            0.773, 0.86, 0.967, 0.917, 0.812, 
            0.915, 1.01, 0.847, 0.953, 0.979, 
            0.841, 0.771, 1.09
        ),
        cuthoe = cms.vdouble(
            0.0871, 0.0289, 0.0783, 0.0946, 0.0245, 
            0.0363, 0.0671, 0.048, 0.0614, 0.0924, 
            0.0158, 0.049, 0.0382, 0.0915, 0.0451, 
            0.0452, 0.00196, 0.0043
        ),
        cutip = cms.vdouble(
            0.0239, 0.027, 0.0768, 0.0231, 0.178, 
            0.0957, 0.0102, 0.0168, 0.043, 0.0166, 
            0.0594, 0.0308, 2.1, 0.00527, 3.17, 
            4.91, 0.769, 5.9
        ),
        cutisoecal = cms.vdouble(
            20.0, 27.2, 4.48, 13.5, 4.56, 
            3.19, 12.2, 13.1, 7.42, 7.67, 
            4.12, 4.85, 10.1, 12.4, 11.1, 
            11.0, 10.6, 13.4
        ),
        cutisohcal = cms.vdouble(
            10.9, 7.01, 8.75, 3.51, 7.75, 
            1.62, 11.6, 9.9, 4.97, 5.33, 
            3.18, 2.32, 0.164, 5.46, 12.0, 
            0.00604, 4.1, 0.000628
        ),
        cutisotk = cms.vdouble(
            6.53, 4.6, 6.0, 8.63, 3.11, 
            7.77, 5.42, 4.81, 4.06, 6.47, 
            2.8, 3.45, 5.29, 5.18, 15.4, 
            5.38, 4.47, 0.0347
        ),
        cutmishits = cms.vdouble(
            5.5, 1.5, 0.5, 1.5, 2.5, 
            0.5, 3.5, 5.5, 0.5, 0.5, 
            0.5, 0.5, 0.5, 1.5, 0.5, 
            0.5, 0.5, 0.5
        ),
        cutsee = cms.vdouble(
            0.0131, 0.0106, 0.0115, 0.0306, 0.028, 
            0.0293, 0.0131, 0.0106, 0.0115, 0.0317, 
            0.029, 0.0289, 0.0142, 0.0106, 0.0103, 
            0.035, 0.0296, 0.0333
        )
    ),
    classbasedtightEleIDCutsV03 = cms.PSet(
        cutdcotdist = cms.vdouble(
            0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928
        ),
        cutdetain = cms.vdouble(
            0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996
        ),
        cutdphiin = cms.vdouble(
            0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346
        ),
        cuteseedopcor = cms.vdouble(
            0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05
        ),
        cutet = cms.vdouble(
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7
        ),
        cutfmishits = cms.vdouble(
            2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61
        ),
        cutip_gsf = cms.vdouble(
            0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363
        ),
        cutiso_sum = cms.vdouble(
            11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0
        ),
        cutiso_sumoet = cms.vdouble(
            13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7
        ),
        cutsee = cms.vdouble(
            0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101
        )
    ),
    classbasedtightEleIDCutsV04 = cms.PSet(
        cutdcotdist = cms.vdouble(
            0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928
        ),
        cutdetain = cms.vdouble(
            0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996
        ),
        cutdphiin = cms.vdouble(
            0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346
        ),
        cuteseedopcor = cms.vdouble(
            0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05
        ),
        cutet = cms.vdouble(
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7
        ),
        cutfmishits = cms.vdouble(
            2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61
        ),
        cutip_gsf = cms.vdouble(
            0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363
        ),
        cutiso_sum = cms.vdouble(
            11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0
        ),
        cutiso_sumoet = cms.vdouble(
            13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7
        ),
        cutsee = cms.vdouble(
            0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101
        )
    ),
    classbasedtightEleIDCutsV06 = cms.PSet(
        cutdcotdist = cms.vdouble(
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0
        ),
        cutdetain = cms.vdouble(
            0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139
        ),
        cutdetainl = cms.vdouble(
            0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143
        ),
        cutdphiin = cms.vdouble(
            0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328
        ),
        cutdphiinl = cms.vdouble(
            0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258
        ),
        cuteseedopcor = cms.vdouble(
            0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473
        ),
        cutfmishits = cms.vdouble(
            1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404
        ),
        cuthoel = cms.vdouble(
            0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339
        ),
        cutip_gsf = cms.vdouble(
            0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731
        ),
        cutip_gsfl = cms.vdouble(
            0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479
        ),
        cutiso_sum = cms.vdouble(
            15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98
        ),
        cutiso_sumoet = cms.vdouble(
            11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94
        ),
        cutiso_sumoetl = cms.vdouble(
            6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73
        ),
        cutsee = cms.vdouble(
            0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917
        ),
        cutseel = cms.vdouble(
            0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544
        )
    ),
    electronIDType = cms.string('classbased'),
    electronQuality = cms.string('tight'),
    electronVersion = cms.string(''),
    etBinning = cms.bool(True),
    reducedBarrelRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    reducedEndcapRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    robusthighenergyEleIDCuts = cms.PSet(
        barrel = cms.vdouble(
            0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusthighenergyEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 0.011, 0.09, 0.005, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.1, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusthighenergyEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.05, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusthighenergyEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusthighenergyEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusthighenergyEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCuts = cms.PSet(
        barrel = cms.vdouble(
            0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(
            0.115, 0.014, 0.09, 0.009, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.15, 0.0275, 0.092, 0.0105, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(
            0.075, 0.0132, 0.058, 0.0077, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.083, 0.027, 0.042, 0.01, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCuts = cms.PSet(
        barrel = cms.vdouble(
            0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(
            0.015, 0.0092, 0.02, 0.0025, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.018, 0.025, 0.02, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(
            0.01, 0.0099, 0.025, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.01, 0.028, 0.02, 0.0066, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(
            0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(
            0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(
            0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    src = cms.InputTag("gedGsfElectrons"),
    verticesCollection = cms.InputTag("offlinePrimaryVerticesWithBS")
)


process.JetPlusTrackZSPCorJetAntiKt4 = cms.EDProducer("JetPlusTrackProducer",
    DzVertexCut = cms.double(0.2),
    EfficiencyMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_538_TrackNonEff.txt'),
    ElectronIds = cms.InputTag("JPTeidTight"),
    Electrons = cms.InputTag("gedGsfElectrons"),
    FixedPU = cms.int32(0),
    JetSplitMerge = cms.int32(2),
    JetTracksAssociationAtCaloFace = cms.InputTag("ak4JetTracksAssociatorAtCaloFace"),
    JetTracksAssociationAtVertex = cms.InputTag("ak4JetTracksAssociatorAtVertexJPT"),
    LeakageMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_538_TrackLeakage.txt'),
    MaxJetEta = cms.double(3.0),
    Muons = cms.InputTag("muons"),
    PU = cms.int32(-1),
    PtErrorQuality = cms.double(0.05),
    ResponseMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_538_response.txt'),
    TrackQuality = cms.string('highPurity'),
    UseEfficiency = cms.bool(True),
    UseElectrons = cms.bool(True),
    UseInConeTracks = cms.bool(True),
    UseMuons = cms.bool(True),
    UseOutOfConeTracks = cms.bool(True),
    UseOutOfVertexTracks = cms.bool(True),
    UsePions = cms.bool(True),
    UseResponseInVecCorr = cms.bool(False),
    UseTrackQuality = cms.bool(True),
    UseZSP = cms.bool(False),
    VectorialCorrection = cms.bool(True),
    Verbose = cms.bool(True),
    alias = cms.untracked.string('JetPlusTrackZSPCorJetAntiKt4'),
    ptCUT = cms.double(15.0),
    src = cms.InputTag("ak4CaloJets"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    tagName = cms.vstring('ZSP_CMSSW390_Akt_05_PU0'),
    tagNameOffset = cms.vstring()
)


process.L1EGammaClusterEmuProducer = cms.EDProducer("L1EGCrystalClusterEmulatorProducer",
    calib = cms.PSet(
        etaBins = cms.vdouble(
            0.087, 0.174, 0.261, 0.348, 0.435, 
            0.522, 0.609, 0.696, 0.783, 0.87, 
            0.957, 1.044, 1.131, 1.218, 1.305, 
            1.392, 1.479
        ),
        ptBins = cms.vdouble(
            12, 20, 30, 40, 55, 
            90, 1000000.0
        ),
        scale = cms.vdouble(
            1.298, 1.287, 1.309, 1.298, 1.309, 
            1.309, 1.309, 1.298, 1.309, 1.298, 
            1.309, 1.309, 1.309, 1.32, 1.309, 
            1.32, 1.309, 1.1742, 1.1639, 1.1639, 
            1.1639, 1.1639, 1.1639, 1.1639, 1.1742, 
            1.1742, 1.1639, 1.1639, 1.1742, 1.1639, 
            1.1639, 1.1742, 1.1742, 1.1536, 1.11, 
            1.11, 1.11, 1.11, 1.11, 1.11, 
            1.11, 1.11, 1.11, 1.11, 1.11, 
            1.11, 1.11, 1.11, 1.11, 1.11, 
            1.1, 1.09, 1.09, 1.09, 1.09, 
            1.09, 1.09, 1.09, 1.09, 1.09, 
            1.09, 1.09, 1.09, 1.09, 1.09, 
            1.09, 1.09, 1.09, 1.07, 1.07, 
            1.07, 1.07, 1.07, 1.07, 1.07, 
            1.08, 1.07, 1.07, 1.08, 1.08, 
            1.07, 1.08, 1.08, 1.08, 1.08, 
            1.06, 1.06, 1.06, 1.06, 1.05, 
            1.05, 1.06, 1.06, 1.06, 1.06, 
            1.06, 1.06, 1.06, 1.06, 1.06, 
            1.06, 1.06, 1.04, 1.04, 1.04, 
            1.04, 1.05, 1.04, 1.05, 1.05, 
            1.05, 1.05, 1.05, 1.05, 1.05, 
            1.05, 1.05, 1.05, 1.05
        )
    ),
    ecalTPEB = cms.InputTag("simEcalEBTriggerPrimitiveDigis","","HLT"),
    hcalTP = cms.InputTag("simHcalTriggerPrimitiveDigis","","HLT")
)


process.L1NNTauProducer = cms.EDProducer("L1NNTauProducer",
    L1PFObjects = cms.InputTag("L1PFProducer","l1pfCandidates"),
    NNFileName = cms.string('L1Trigger/Phase2L1ParticleFlow/data/tau_3layer.pb'),
    conesize = cms.double(0.4),
    maxtaus = cms.int32(5),
    mightGet = cms.optional.untracked.vstring,
    nparticles = cms.int32(10),
    seedpt = cms.double(20),
    tausize = cms.double(0.1)
)


process.L1NNTauProducerPuppi = cms.EDProducer("L1NNTauProducer",
    L1PFObjects = cms.InputTag("L1PFProducer","l1pfCandidates"),
    NNFileName = cms.string('L1Trigger/Phase2L1ParticleFlow/data/tau_3layer_puppi.pb'),
    conesize = cms.double(0.4),
    maxtaus = cms.int32(5),
    mightGet = cms.optional.untracked.vstring,
    nparticles = cms.int32(10),
    seedpt = cms.double(20),
    tausize = cms.double(0.1)
)


process.L1TkElectronsCrystal = cms.EDProducer("L1TkElectronTrackProducer",
    DRmax = cms.double(0.2),
    DRmin = cms.double(0.03),
    DeltaZ = cms.double(0.6),
    ETmin = cms.double(-1.0),
    IsoCut = cms.double(-0.1),
    L1EGammaInputTag = cms.InputTag("L1EGammaClusterEmuProducer"),
    L1TrackInputTag = cms.InputTag("TTTracksFromTrackletEmulation","Level1TTTracks"),
    PTMINTRA = cms.double(2.0),
    RelativeIsolation = cms.bool(True),
    TrackChi2 = cms.double(10000000000.0),
    TrackEGammaDeltaEta = cms.vdouble(10000000000.0, 0.0, 0.0),
    TrackEGammaDeltaPhi = cms.vdouble(0.07, 0.0, 0.0),
    TrackEGammaDeltaR = cms.vdouble(0.08, 0.0, 0.0),
    TrackEGammaMatchType = cms.string('PtDependentCut'),
    TrackMinPt = cms.double(10.0),
    label = cms.string('EG'),
    maxChi2IsoTracks = cms.double(10000000000.0),
    minNStubsIsoTracks = cms.int32(0),
    useClusterET = cms.bool(False),
    useTwoStubsPT = cms.bool(False)
)


process.L1TkElectronsEllipticMatchCrystal = cms.EDProducer("L1TkElectronTrackProducer",
    DRmax = cms.double(0.2),
    DRmin = cms.double(0.03),
    DeltaZ = cms.double(0.6),
    ETmin = cms.double(-1.0),
    IsoCut = cms.double(-0.1),
    L1EGammaInputTag = cms.InputTag("L1EGammaClusterEmuProducer"),
    L1TrackInputTag = cms.InputTag("TTTracksFromTrackletEmulation","Level1TTTracks"),
    PTMINTRA = cms.double(2.0),
    RelativeIsolation = cms.bool(True),
    TrackChi2 = cms.double(10000000000.0),
    TrackEGammaDeltaEta = cms.vdouble(0.015, 0.025, 10000000000.0),
    TrackEGammaDeltaPhi = cms.vdouble(0.07, 0.0, 0.0),
    TrackEGammaDeltaR = cms.vdouble(0.08, 0.0, 0.0),
    TrackEGammaMatchType = cms.string('EllipticalCut'),
    TrackMinPt = cms.double(10.0),
    label = cms.string('EG'),
    maxChi2IsoTracks = cms.double(10000000000.0),
    minNStubsIsoTracks = cms.int32(0),
    useClusterET = cms.bool(False),
    useTwoStubsPT = cms.bool(False)
)


process.L1TkElectronsEllipticMatchHGC = cms.EDProducer("L1TkElectronTrackProducer",
    DRmax = cms.double(0.2),
    DRmin = cms.double(0.03),
    DeltaZ = cms.double(0.6),
    ETmin = cms.double(-1.0),
    IsoCut = cms.double(-0.1),
    L1EGammaInputTag = cms.InputTag("l1EGammaEEProducer","L1EGammaCollectionBXVWithCuts"),
    L1TrackInputTag = cms.InputTag("TTTracksFromTrackletEmulation","Level1TTTracks"),
    PTMINTRA = cms.double(2.0),
    RelativeIsolation = cms.bool(True),
    TrackChi2 = cms.double(10000000000.0),
    TrackEGammaDeltaEta = cms.vdouble(0.01, 0.01, 10000000000.0),
    TrackEGammaDeltaPhi = cms.vdouble(0.07, 0.0, 0.0),
    TrackEGammaDeltaR = cms.vdouble(0.08, 0.0, 0.0),
    TrackEGammaMatchType = cms.string('EllipticalCut'),
    TrackMinPt = cms.double(10.0),
    label = cms.string('EG'),
    maxChi2IsoTracks = cms.double(100),
    minNStubsIsoTracks = cms.int32(4),
    useClusterET = cms.bool(False),
    useTwoStubsPT = cms.bool(False)
)


process.L1TkElectronsHGC = cms.EDProducer("L1TkElectronTrackProducer",
    DRmax = cms.double(0.2),
    DRmin = cms.double(0.03),
    DeltaZ = cms.double(0.6),
    ETmin = cms.double(-1.0),
    IsoCut = cms.double(-0.1),
    L1EGammaInputTag = cms.InputTag("l1EGammaEEProducer","L1EGammaCollectionBXVWithCuts"),
    L1TrackInputTag = cms.InputTag("TTTracksFromTrackletEmulation","Level1TTTracks"),
    PTMINTRA = cms.double(2.0),
    RelativeIsolation = cms.bool(True),
    TrackChi2 = cms.double(10000000000.0),
    TrackEGammaDeltaEta = cms.vdouble(10000000000.0, 0.0, 0.0),
    TrackEGammaDeltaPhi = cms.vdouble(0.07, 0.0, 0.0),
    TrackEGammaDeltaR = cms.vdouble(0.08, 0.0, 0.0),
    TrackEGammaMatchType = cms.string('PtDependentCut'),
    TrackMinPt = cms.double(10.0),
    label = cms.string('EG'),
    maxChi2IsoTracks = cms.double(10000000000.0),
    minNStubsIsoTracks = cms.int32(0),
    useClusterET = cms.bool(False),
    useTwoStubsPT = cms.bool(False)
)


process.L1TkElectronsLooseCrystal = cms.EDProducer("L1TkElectronTrackProducer",
    DRmax = cms.double(0.2),
    DRmin = cms.double(0.03),
    DeltaZ = cms.double(0.6),
    ETmin = cms.double(-1.0),
    IsoCut = cms.double(-0.1),
    L1EGammaInputTag = cms.InputTag("L1EGammaClusterEmuProducer"),
    L1TrackInputTag = cms.InputTag("TTTracksFromTrackletEmulation","Level1TTTracks"),
    PTMINTRA = cms.double(2.0),
    RelativeIsolation = cms.bool(True),
    TrackChi2 = cms.double(10000000000.0),
    TrackEGammaDeltaEta = cms.vdouble(10000000000.0, 0.0, 0.0),
    TrackEGammaDeltaPhi = cms.vdouble(0.07, 0.0, 0.0),
    TrackEGammaDeltaR = cms.vdouble(0.12, 0.0, 0.0),
    TrackEGammaMatchType = cms.string('PtDependentCut'),
    TrackMinPt = cms.double(3.0),
    label = cms.string('EG'),
    maxChi2IsoTracks = cms.double(10000000000.0),
    minNStubsIsoTracks = cms.int32(0),
    useClusterET = cms.bool(False),
    useTwoStubsPT = cms.bool(False)
)


process.L1TkElectronsLooseHGC = cms.EDProducer("L1TkElectronTrackProducer",
    DRmax = cms.double(0.2),
    DRmin = cms.double(0.03),
    DeltaZ = cms.double(0.6),
    ETmin = cms.double(-1.0),
    IsoCut = cms.double(-0.1),
    L1EGammaInputTag = cms.InputTag("l1EGammaEEProducer","L1EGammaCollectionBXVWithCuts"),
    L1TrackInputTag = cms.InputTag("TTTracksFromTrackletEmulation","Level1TTTracks"),
    PTMINTRA = cms.double(2.0),
    RelativeIsolation = cms.bool(True),
    TrackChi2 = cms.double(10000000000.0),
    TrackEGammaDeltaEta = cms.vdouble(10000000000.0, 0.0, 0.0),
    TrackEGammaDeltaPhi = cms.vdouble(0.07, 0.0, 0.0),
    TrackEGammaDeltaR = cms.vdouble(0.12, 0.0, 0.0),
    TrackEGammaMatchType = cms.string('PtDependentCut'),
    TrackMinPt = cms.double(3.0),
    label = cms.string('EG'),
    maxChi2IsoTracks = cms.double(10000000000.0),
    minNStubsIsoTracks = cms.int32(0),
    useClusterET = cms.bool(False),
    useTwoStubsPT = cms.bool(False)
)


process.L1TkIsoElectronsCrystal = cms.EDProducer("L1TkElectronTrackProducer",
    DRmax = cms.double(0.2),
    DRmin = cms.double(0.03),
    DeltaZ = cms.double(0.6),
    ETmin = cms.double(-1.0),
    IsoCut = cms.double(0.1),
    L1EGammaInputTag = cms.InputTag("L1EGammaClusterEmuProducer"),
    L1TrackInputTag = cms.InputTag("TTTracksFromTrackletEmulation","Level1TTTracks"),
    PTMINTRA = cms.double(2.0),
    RelativeIsolation = cms.bool(True),
    TrackChi2 = cms.double(10000000000.0),
    TrackEGammaDeltaEta = cms.vdouble(10000000000.0, 0.0, 0.0),
    TrackEGammaDeltaPhi = cms.vdouble(0.07, 0.0, 0.0),
    TrackEGammaDeltaR = cms.vdouble(0.08, 0.0, 0.0),
    TrackEGammaMatchType = cms.string('PtDependentCut'),
    TrackMinPt = cms.double(10.0),
    label = cms.string('EG'),
    maxChi2IsoTracks = cms.double(10000000000.0),
    minNStubsIsoTracks = cms.int32(0),
    useClusterET = cms.bool(False),
    useTwoStubsPT = cms.bool(False)
)


process.L1TkIsoElectronsHGC = cms.EDProducer("L1TkElectronTrackProducer",
    DRmax = cms.double(0.4),
    DRmin = cms.double(0.03),
    DeltaZ = cms.double(1.0),
    ETmin = cms.double(-1.0),
    IsoCut = cms.double(0.1),
    L1EGammaInputTag = cms.InputTag("l1EGammaEEProducer","L1EGammaCollectionBXVWithCuts"),
    L1TrackInputTag = cms.InputTag("TTTracksFromTrackletEmulation","Level1TTTracks"),
    PTMINTRA = cms.double(2.0),
    RelativeIsolation = cms.bool(True),
    TrackChi2 = cms.double(10000000000.0),
    TrackEGammaDeltaEta = cms.vdouble(10000000000.0, 0.0, 0.0),
    TrackEGammaDeltaPhi = cms.vdouble(0.07, 0.0, 0.0),
    TrackEGammaDeltaR = cms.vdouble(0.08, 0.0, 0.0),
    TrackEGammaMatchType = cms.string('PtDependentCut'),
    TrackMinPt = cms.double(10.0),
    label = cms.string('EG'),
    maxChi2IsoTracks = cms.double(100),
    minNStubsIsoTracks = cms.int32(4),
    useClusterET = cms.bool(False),
    useTwoStubsPT = cms.bool(False)
)


process.L1TkMuons = cms.EDProducer("L1TkMuonProducer",
    CHI2MAX = cms.double(100.0),
    DRmax = cms.double(0.5),
    ETABARRELOVERLAP = cms.double(0.83),
    ETAMAX = cms.double(5.0),
    ETAMIN = cms.double(0),
    ETAOVERLAPENDCAP = cms.double(1.24),
    L1BMTFInputTag = cms.InputTag("simKBmtfDigis","BMTF"),
    L1EMTFInputTag = cms.InputTag("simEmtfDigis","EMTF"),
    L1EMTFTrackCollectionInputTag = cms.InputTag("simEmtfDigis"),
    L1OMTFInputTag = cms.InputTag("simOmtfDigis","OMTF"),
    L1TrackInputTag = cms.InputTag("TTTracksFromTrackletEmulation","Level1TTTracks","RECO"),
    PTMINTRA = cms.double(2.0),
    ZMAX = cms.double(25.0),
    applyQualityCuts = cms.bool(True),
    bmtfMatchAlgoVersion = cms.string('TP'),
    correctGMTPropForTkZ = cms.bool(True),
    do_relax_factors = cms.bool(True),
    emtfMatchAlgoVersion = cms.string('MAnTra'),
    emtfcorr_boundaries = cms.FileInPath('L1Trigger/L1TMuon/data/MAnTra_data/matching_windows_endcap/matching_windows_boundaries.root'),
    emtfcorr_phi_windows = cms.FileInPath('L1Trigger/L1TMuon/data/MAnTra_data/matching_windows_endcap/matching_windows_phi_q99.root'),
    emtfcorr_theta_windows = cms.FileInPath('L1Trigger/L1TMuon/data/MAnTra_data/matching_windows_endcap/matching_windows_theta_q99.root'),
    final_window_factor = cms.double(0.5),
    initial_window_factor = cms.double(0.0),
    mantra_bmtfcorr_boundaries = cms.FileInPath('L1Trigger/L1TMuon/data/MAnTra_data/matching_windows_barrel/matching_windows_boundaries.root'),
    mantra_bmtfcorr_phi_windows = cms.FileInPath('L1Trigger/L1TMuon/data/MAnTra_data/matching_windows_barrel/matching_windows_phi_q99.root'),
    mantra_bmtfcorr_theta_windows = cms.FileInPath('L1Trigger/L1TMuon/data/MAnTra_data/matching_windows_barrel/matching_windows_theta_q99.root'),
    mantra_emtfcorr_boundaries = cms.FileInPath('L1Trigger/L1TMuon/data/MAnTra_data/matching_windows_endcap/matching_windows_boundaries.root'),
    mantra_emtfcorr_phi_windows = cms.FileInPath('L1Trigger/L1TMuon/data/MAnTra_data/matching_windows_endcap/matching_windows_phi_q99.root'),
    mantra_emtfcorr_theta_windows = cms.FileInPath('L1Trigger/L1TMuon/data/MAnTra_data/matching_windows_endcap/matching_windows_theta_q99.root'),
    mantra_n_trk_par = cms.int32(4),
    mantra_omtfcorr_boundaries = cms.FileInPath('L1Trigger/L1TMuon/data/MAnTra_data/matching_windows_overlap/matching_windows_boundaries.root'),
    mantra_omtfcorr_phi_windows = cms.FileInPath('L1Trigger/L1TMuon/data/MAnTra_data/matching_windows_overlap/matching_windows_phi_q99.root'),
    mantra_omtfcorr_theta_windows = cms.FileInPath('L1Trigger/L1TMuon/data/MAnTra_data/matching_windows_overlap/matching_windows_theta_q99.root'),
    max_trk_aeta = cms.double(2.5),
    max_trk_chi2 = cms.double(100.0),
    min_trk_nstubs = cms.int32(4),
    min_trk_p = cms.double(3.5),
    nStubsmin = cms.int32(4),
    n_trk_par = cms.int32(4),
    omtfMatchAlgoVersion = cms.string('MAnTra'),
    pt_end_relax = cms.double(6.0),
    pt_start_relax = cms.double(2.0),
    use5ParameterFit = cms.bool(False),
    useRegionEtaMatching = cms.bool(True),
    useTPMatchWindows = cms.bool(True)
)


process.L1TkMuonsTP = cms.EDProducer("L1TkMuonProducer",
    CHI2MAX = cms.double(100.0),
    DRmax = cms.double(0.5),
    ETABARRELOVERLAP = cms.double(0.83),
    ETAMAX = cms.double(5.0),
    ETAMIN = cms.double(0),
    ETAOVERLAPENDCAP = cms.double(1.24),
    L1BMTFInputTag = cms.InputTag("simKBmtfDigis","BMTF"),
    L1EMTFInputTag = cms.InputTag("simEmtfDigis","EMTF"),
    L1EMTFTrackCollectionInputTag = cms.InputTag("simEmtfDigis"),
    L1OMTFInputTag = cms.InputTag("simOmtfDigis","OMTF"),
    L1TrackInputTag = cms.InputTag("TTTracksFromTrackletEmulation","Level1TTTracks"),
    PTMINTRA = cms.double(2.0),
    ZMAX = cms.double(25.0),
    bmtfMatchAlgoVersion = cms.string('TP'),
    correctGMTPropForTkZ = cms.bool(True),
    do_relax_factors = cms.bool(True),
    emtfMatchAlgoVersion = cms.string('TP'),
    emtfcorr_boundaries = cms.FileInPath('L1Trigger/L1TMuon/data/MAnTra_data/matching_windows_endcap/matching_windows_boundaries.root'),
    emtfcorr_phi_windows = cms.FileInPath('L1Trigger/L1TMuon/data/MAnTra_data/matching_windows_endcap/matching_windows_phi_q99.root'),
    emtfcorr_theta_windows = cms.FileInPath('L1Trigger/L1TMuon/data/MAnTra_data/matching_windows_endcap/matching_windows_theta_q99.root'),
    final_window_factor = cms.double(0.5),
    initial_window_factor = cms.double(0.0),
    mantra_bmtfcorr_boundaries = cms.FileInPath('L1Trigger/L1TMuon/data/MAnTra_data/matching_windows_barrel/matching_windows_boundaries.root'),
    mantra_bmtfcorr_phi_windows = cms.FileInPath('L1Trigger/L1TMuon/data/MAnTra_data/matching_windows_barrel/matching_windows_phi_q99.root'),
    mantra_bmtfcorr_theta_windows = cms.FileInPath('L1Trigger/L1TMuon/data/MAnTra_data/matching_windows_barrel/matching_windows_theta_q99.root'),
    mantra_emtfcorr_boundaries = cms.FileInPath('L1Trigger/L1TMuon/data/MAnTra_data/matching_windows_endcap/matching_windows_boundaries.root'),
    mantra_emtfcorr_phi_windows = cms.FileInPath('L1Trigger/L1TMuon/data/MAnTra_data/matching_windows_endcap/matching_windows_phi_q99.root'),
    mantra_emtfcorr_theta_windows = cms.FileInPath('L1Trigger/L1TMuon/data/MAnTra_data/matching_windows_endcap/matching_windows_theta_q99.root'),
    mantra_n_trk_par = cms.int32(4),
    mantra_omtfcorr_boundaries = cms.FileInPath('L1Trigger/L1TMuon/data/MAnTra_data/matching_windows_overlap/matching_windows_boundaries.root'),
    mantra_omtfcorr_phi_windows = cms.FileInPath('L1Trigger/L1TMuon/data/MAnTra_data/matching_windows_overlap/matching_windows_phi_q99.root'),
    mantra_omtfcorr_theta_windows = cms.FileInPath('L1Trigger/L1TMuon/data/MAnTra_data/matching_windows_overlap/matching_windows_theta_q99.root'),
    max_trk_aeta = cms.double(2.5),
    max_trk_chi2 = cms.double(100.0),
    min_trk_nstubs = cms.int32(4),
    min_trk_p = cms.double(3.5),
    nStubsmin = cms.int32(4),
    n_trk_par = cms.int32(4),
    omtfMatchAlgoVersion = cms.string('MAnTra'),
    pt_end_relax = cms.double(6.0),
    pt_start_relax = cms.double(2.0),
    use5ParameterFit = cms.bool(False),
    useRegionEtaMatching = cms.bool(True),
    useTPMatchWindows = cms.bool(True)
)


process.L1TkPhotonsCrystal = cms.EDProducer("L1TkEmParticleProducer",
    CHI2MAX = cms.double(100.0),
    DRmax = cms.double(0.3),
    DRmin = cms.double(0.07),
    DeltaZMax = cms.double(0.6),
    ETmin = cms.double(-1),
    IsoCut = cms.double(-0.1),
    L1EGammaInputTag = cms.InputTag("L1EGammaClusterEmuProducer"),
    L1TrackInputTag = cms.InputTag("TTTracksFromTrackletEmulation","Level1TTTracks"),
    L1VertexInputTag = cms.InputTag("L1TkPrimaryVertex"),
    PTMINTRA = cms.double(2.0),
    PrimaryVtxConstrain = cms.bool(False),
    RelativeIsolation = cms.bool(True),
    ZMAX = cms.double(25.0),
    label = cms.string('EG')
)


process.L1TkPhotonsHGC = cms.EDProducer("L1TkEmParticleProducer",
    CHI2MAX = cms.double(100.0),
    DRmax = cms.double(0.3),
    DRmin = cms.double(0.07),
    DeltaZMax = cms.double(0.6),
    ETmin = cms.double(-1),
    IsoCut = cms.double(-0.1),
    L1EGammaInputTag = cms.InputTag("l1EGammaEEProducer","L1EGammaCollectionBXVWithCuts"),
    L1TrackInputTag = cms.InputTag("TTTracksFromTrackletEmulation","Level1TTTracks"),
    L1VertexInputTag = cms.InputTag("L1TkPrimaryVertex"),
    PTMINTRA = cms.double(2.0),
    PrimaryVtxConstrain = cms.bool(False),
    RelativeIsolation = cms.bool(True),
    ZMAX = cms.double(25.0),
    label = cms.string('EG')
)


process.L1TkPrimaryVertex = cms.EDProducer("L1TkFastVertexProducer",
    CHI2MAX = cms.double(100.0),
    GenParticleInputTag = cms.InputTag("genParticles"),
    HepMCInputTag = cms.InputTag("generator"),
    HighPtTracks = cms.int32(0),
    L1TrackInputTag = cms.InputTag("TTTracksFromTrackletEmulation","Level1TTTracks"),
    MonteCarloVertex = cms.bool(False),
    PTMAX = cms.double(50.0),
    PTMINTRA = cms.double(2.0),
    WEIGHT = cms.int32(1),
    ZMAX = cms.double(25.0),
    doPtComp = cms.bool(True),
    doTightChi2 = cms.bool(False),
    nBinning = cms.int32(601),
    nStubsPSmin = cms.int32(3),
    nStubsmin = cms.int32(4),
    nVtx = cms.int32(1)
)


process.MEtoEDMConverter = cms.EDProducer("MEtoEDMConverter",
    Frequency = cms.untracked.int32(50),
    MEPathToSave = cms.untracked.string(''),
    Name = cms.untracked.string('MEtoEDMConverter'),
    Verbosity = cms.untracked.int32(0)
)


process.MeasurementTrackerEvent = cms.EDProducer("MeasurementTrackerEventProducer",
    Phase2TrackerCluster1DProducer = cms.string('siPhase2Clusters'),
    badPixelFEDChannelCollectionLabels = cms.VInputTag("siPixelDigis"),
    inactivePixelDetectorLabels = cms.VInputTag(),
    inactiveStripDetectorLabels = cms.VInputTag("siStripDigis"),
    measurementTracker = cms.string(''),
    mightGet = cms.optional.untracked.vstring,
    pixelCablingMapLabel = cms.string(''),
    pixelClusterProducer = cms.string('siPixelClusters'),
    skipClusters = cms.InputTag(""),
    stripClusterProducer = cms.string(''),
    switchOffPixelsIfEmpty = cms.bool(True)
)


process.MeasurementTrackerEventPreSplitting = cms.EDProducer("MeasurementTrackerEventProducer",
    Phase2TrackerCluster1DProducer = cms.string('siPhase2Clusters'),
    badPixelFEDChannelCollectionLabels = cms.VInputTag("siPixelDigis"),
    inactivePixelDetectorLabels = cms.VInputTag(),
    inactiveStripDetectorLabels = cms.VInputTag("siStripDigis"),
    measurementTracker = cms.string(''),
    mightGet = cms.optional.untracked.vstring,
    pixelCablingMapLabel = cms.string(''),
    pixelClusterProducer = cms.string('siPixelClustersPreSplitting'),
    skipClusters = cms.InputTag(""),
    stripClusterProducer = cms.string(''),
    switchOffPixelsIfEmpty = cms.bool(True)
)


process.MixedLayerPairs = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(1),
        minRing = cms.int32(1),
        useRingSlector = cms.bool(True)
    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring(
        'BPix1+BPix2', 
        'BPix1+BPix3', 
        'BPix2+BPix3', 
        'BPix1+FPix1_pos', 
        'BPix1+FPix1_neg', 
        'BPix1+FPix2_pos', 
        'BPix1+FPix2_neg', 
        'BPix2+FPix1_pos', 
        'BPix2+FPix1_neg', 
        'BPix2+FPix2_pos', 
        'BPix2+FPix2_neg', 
        'FPix1_pos+FPix2_pos', 
        'FPix1_neg+FPix2_neg', 
        'FPix2_pos+TEC1_pos', 
        'FPix2_pos+TEC2_pos', 
        'TEC1_pos+TEC2_pos', 
        'TEC2_pos+TEC3_pos', 
        'FPix2_neg+TEC1_neg', 
        'FPix2_neg+TEC2_neg', 
        'TEC1_neg+TEC2_neg', 
        'TEC2_neg+TEC3_neg'
    ),
    mightGet = cms.optional.untracked.vstring
)


process.MixedLayerTriplets = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit")
    ),
    TIB = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit")
    ),
    TID = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit")
    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring(
        'BPix1+BPix2+BPix3', 
        'BPix1+BPix2+FPix1_pos', 
        'BPix1+BPix2+FPix1_neg', 
        'BPix1+FPix1_pos+FPix2_pos', 
        'BPix1+FPix1_neg+FPix2_neg', 
        'BPix1+BPix2+TIB1', 
        'BPix1+BPix3+TIB1', 
        'BPix2+BPix3+TIB1', 
        'BPix1+FPix1_pos+TID1_pos', 
        'BPix1+FPix1_neg+TID1_neg', 
        'BPix1+FPix1_pos+TID2_pos', 
        'BPix1+FPix1_neg+TID2_neg', 
        'FPix1_pos+FPix2_pos+TEC1_pos', 
        'FPix1_neg+FPix2_neg+TEC1_neg', 
        'FPix1_pos+FPix2_pos+TEC2_pos', 
        'FPix1_neg+FPix2_neg+TEC2_neg'
    ),
    mightGet = cms.optional.untracked.vstring
)


process.MuonSeed = cms.EDProducer("MuonSeedProducer",
    CSCSegmentLabel = cms.InputTag("cscSegments"),
    CSC_01 = cms.vdouble(
        0.166, 0.0, 0.0, 0.031, 0.0, 
        0.0
    ),
    CSC_01_1_scale = cms.vdouble(-1.915329, 0.0),
    CSC_02 = cms.vdouble(
        0.612, -0.207, -0.0, 0.067, -0.001, 
        0.0
    ),
    CSC_03 = cms.vdouble(
        0.787, -0.338, 0.029, 0.101, -0.008, 
        0.0
    ),
    CSC_12 = cms.vdouble(
        -0.161, 0.254, -0.047, 0.042, -0.007, 
        0.0
    ),
    CSC_12_1_scale = cms.vdouble(-6.434242, 0.0),
    CSC_12_2_scale = cms.vdouble(-1.63622, 0.0),
    CSC_12_3_scale = cms.vdouble(-1.63622, 0.0),
    CSC_13 = cms.vdouble(
        0.901, -1.302, 0.533, 0.045, 0.005, 
        0.0
    ),
    CSC_13_2_scale = cms.vdouble(-6.077936, 0.0),
    CSC_13_3_scale = cms.vdouble(-1.701268, 0.0),
    CSC_14 = cms.vdouble(
        0.606, -0.181, -0.002, 0.111, -0.003, 
        0.0
    ),
    CSC_14_3_scale = cms.vdouble(-1.969563, 0.0),
    CSC_23 = cms.vdouble(
        -0.081, 0.113, -0.029, 0.015, 0.008, 
        0.0
    ),
    CSC_23_1_scale = cms.vdouble(-19.084285, 0.0),
    CSC_23_2_scale = cms.vdouble(-6.079917, 0.0),
    CSC_24 = cms.vdouble(
        0.004, 0.021, -0.002, 0.053, 0.0, 
        0.0
    ),
    CSC_24_1_scale = cms.vdouble(-6.055701, 0.0),
    CSC_34 = cms.vdouble(
        0.062, -0.067, 0.019, 0.021, 0.003, 
        0.0
    ),
    CSC_34_1_scale = cms.vdouble(-11.520507, 0.0),
    DTSegmentLabel = cms.InputTag("dt4DSegments"),
    DT_12 = cms.vdouble(
        0.183, 0.054, -0.087, 0.028, 0.002, 
        0.0
    ),
    DT_12_1_scale = cms.vdouble(-3.692398, 0.0),
    DT_12_2_scale = cms.vdouble(-3.518165, 0.0),
    DT_13 = cms.vdouble(
        0.315, 0.068, -0.127, 0.051, -0.002, 
        0.0
    ),
    DT_13_1_scale = cms.vdouble(-4.520923, 0.0),
    DT_13_2_scale = cms.vdouble(-4.257687, 0.0),
    DT_14 = cms.vdouble(
        0.359, 0.052, -0.107, 0.072, -0.004, 
        0.0
    ),
    DT_14_1_scale = cms.vdouble(-5.644816, 0.0),
    DT_14_2_scale = cms.vdouble(-4.808546, 0.0),
    DT_23 = cms.vdouble(
        0.13, 0.023, -0.057, 0.028, 0.004, 
        0.0
    ),
    DT_23_1_scale = cms.vdouble(-5.320346, 0.0),
    DT_23_2_scale = cms.vdouble(-5.117625, 0.0),
    DT_24 = cms.vdouble(
        0.176, 0.014, -0.051, 0.051, 0.003, 
        0.0
    ),
    DT_24_1_scale = cms.vdouble(-7.490909, 0.0),
    DT_24_2_scale = cms.vdouble(-6.63094, 0.0),
    DT_34 = cms.vdouble(
        0.044, 0.004, -0.013, 0.029, 0.003, 
        0.0
    ),
    DT_34_1_scale = cms.vdouble(-13.783765, 0.0),
    DT_34_2_scale = cms.vdouble(-11.901897, 0.0),
    DebugMuonSeed = cms.bool(False),
    EnableCSCMeasurement = cms.bool(True),
    EnableDTMeasurement = cms.bool(True),
    OL_1213 = cms.vdouble(
        0.96, -0.737, 0.0, 0.052, 0.0, 
        0.0
    ),
    OL_1213_0_scale = cms.vdouble(-4.488158, 0.0),
    OL_1222 = cms.vdouble(
        0.848, -0.591, 0.0, 0.062, 0.0, 
        0.0
    ),
    OL_1222_0_scale = cms.vdouble(-5.810449, 0.0),
    OL_1232 = cms.vdouble(
        0.184, 0.0, 0.0, 0.066, 0.0, 
        0.0
    ),
    OL_1232_0_scale = cms.vdouble(-5.964634, 0.0),
    OL_2213 = cms.vdouble(
        0.117, 0.0, 0.0, 0.044, 0.0, 
        0.0
    ),
    OL_2213_0_scale = cms.vdouble(-7.239789, 0.0),
    OL_2222 = cms.vdouble(
        0.107, 0.0, 0.0, 0.04, 0.0, 
        0.0
    ),
    OL_2222_0_scale = cms.vdouble(-7.667231, 0.0),
    SMB_10 = cms.vdouble(
        1.387, -0.038, 0.0, 0.19, 0.0, 
        0.0
    ),
    SMB_10_0_scale = cms.vdouble(2.448566, 0.0),
    SMB_11 = cms.vdouble(
        1.247, 0.72, -0.802, 0.229, -0.075, 
        0.0
    ),
    SMB_11_0_scale = cms.vdouble(2.56363, 0.0),
    SMB_12 = cms.vdouble(
        2.128, -0.956, 0.0, 0.199, 0.0, 
        0.0
    ),
    SMB_12_0_scale = cms.vdouble(2.283221, 0.0),
    SMB_20 = cms.vdouble(
        1.011, -0.052, 0.0, 0.188, 0.0, 
        0.0
    ),
    SMB_20_0_scale = cms.vdouble(1.486168, 0.0),
    SMB_21 = cms.vdouble(
        1.043, -0.124, 0.0, 0.183, 0.0, 
        0.0
    ),
    SMB_21_0_scale = cms.vdouble(1.58384, 0.0),
    SMB_22 = cms.vdouble(
        1.474, -0.758, 0.0, 0.185, 0.0, 
        0.0
    ),
    SMB_22_0_scale = cms.vdouble(1.346681, 0.0),
    SMB_30 = cms.vdouble(
        0.505, -0.022, 0.0, 0.215, 0.0, 
        0.0
    ),
    SMB_30_0_scale = cms.vdouble(-3.629838, 0.0),
    SMB_31 = cms.vdouble(
        0.549, -0.145, 0.0, 0.207, 0.0, 
        0.0
    ),
    SMB_31_0_scale = cms.vdouble(-3.323768, 0.0),
    SMB_32 = cms.vdouble(
        0.67, -0.327, 0.0, 0.22, 0.0, 
        0.0
    ),
    SMB_32_0_scale = cms.vdouble(-3.054156, 0.0),
    SME_11 = cms.vdouble(
        3.295, -1.527, 0.112, 0.378, 0.02, 
        0.0
    ),
    SME_11_0_scale = cms.vdouble(1.325085, 0.0),
    SME_12 = cms.vdouble(
        0.102, 0.599, 0.0, 0.38, 0.0, 
        0.0
    ),
    SME_12_0_scale = cms.vdouble(2.279181, 0.0),
    SME_13 = cms.vdouble(
        -1.286, 1.711, 0.0, 0.356, 0.0, 
        0.0
    ),
    SME_13_0_scale = cms.vdouble(0.104905, 0.0),
    SME_21 = cms.vdouble(
        -0.529, 1.194, -0.358, 0.472, 0.086, 
        0.0
    ),
    SME_21_0_scale = cms.vdouble(-0.040862, 0.0),
    SME_22 = cms.vdouble(
        -1.207, 1.491, -0.251, 0.189, 0.243, 
        0.0
    ),
    SME_22_0_scale = cms.vdouble(-3.457901, 0.0),
    SME_31 = cms.vdouble(
        -1.594, 1.482, -0.317, 0.487, 0.097, 
        0.0
    ),
    SME_32 = cms.vdouble(
        -0.901, 1.333, -0.47, 0.41, 0.073, 
        0.0
    ),
    SME_41 = cms.vdouble(
        -0.003, 0.005, 0.005, 0.608, 0.076, 
        0.0
    ),
    SME_42 = cms.vdouble(
        -0.003, 0.005, 0.005, 0.608, 0.076, 
        0.0
    ),
    SeedPtSystematics = cms.double(0.1),
    ServiceParameters = cms.PSet(
        CSCLayers = cms.untracked.bool(True),
        GEMLayers = cms.untracked.bool(True),
        ME0Layers = cms.bool(True),
        Propagators = cms.untracked.vstring(
            'SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'
        ),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    defaultSeedPt = cms.double(25.0),
    maxDeltaEtaCSC = cms.double(0.2),
    maxDeltaEtaDT = cms.double(0.3),
    maxDeltaEtaOverlap = cms.double(0.08),
    maxDeltaPhiCSC = cms.double(0.5),
    maxDeltaPhiDT = cms.double(0.3),
    maxDeltaPhiOverlap = cms.double(0.25),
    maxEtaResolutionCSC = cms.double(0.06),
    maxEtaResolutionDT = cms.double(0.02),
    maxPhiResolutionCSC = cms.double(0.03),
    maxPhiResolutionDT = cms.double(0.03),
    maximumSeedPt = cms.double(3000.0),
    minCSCHitsPerSegment = cms.int32(4),
    minDTHitsPerSegment = cms.int32(2),
    minimumSeedPt = cms.double(5.0)
)


process.PFTauPrimaryVertexProducer = cms.EDProducer("PFTauPrimaryVertexProducer",
    Algorithm = cms.int32(0),
    ElectronTag = cms.InputTag("MyElectrons"),
    MuonTag = cms.InputTag("MyMuons"),
    PFTauTag = cms.InputTag("hpsPFTauProducer"),
    PVTag = cms.InputTag("offlinePrimaryVertices"),
    RemoveElectronTracks = cms.bool(False),
    RemoveMuonTracks = cms.bool(False),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    cut = cms.string('pt > 18.0 & abs(eta)<2.3'),
    discriminators = cms.VPSet(cms.PSet(
        discriminator = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding"),
        selectionCut = cms.double(0.5)
    )),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.15),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.05),
            minGammaEt = cms.double(1.5),
            minTrackHits = cms.uint32(8),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(1.0),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        leadingTrkOrPFCandOption = cms.string('leadPFCand'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        pvFindingAlgo = cms.string('closestInDeltaZ'),
        recoverLeadingTrk = cms.bool(False),
        signalQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.4),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(1.0),
            minNeutralHadronEt = cms.double(30.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        vertexTrackFiltering = cms.bool(False),
        vxAssocQualityCuts = cms.PSet(
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(1.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        )
    ),
    useBeamSpot = cms.bool(True),
    useSelectedTaus = cms.bool(False)
)


process.PFTauSecondaryVertexProducer = cms.EDProducer("PFTauSecondaryVertexProducer",
    PFTauTag = cms.InputTag("hpsPFTauProducer")
)


process.PFTauTransverseImpactParameters = cms.EDProducer("PFTauTransverseImpactParameters",
    PFTauPVATag = cms.InputTag("PFTauPrimaryVertexProducer"),
    PFTauSVATag = cms.InputTag("PFTauSecondaryVertexProducer"),
    PFTauTag = cms.InputTag("hpsPFTauProducer"),
    useFullCalculation = cms.bool(False)
)


process.PFTowers = cms.EDProducer("ParticleTowerProducer",
    src = cms.InputTag("particleFlow"),
    useHF = cms.bool(False)
)


process.Phase1L1TJetCalibrator = cms.EDProducer("Phase1L1TJetCalibrator",
    absEtaBinning = cms.vdouble(
        0, 0.435, 0.783, 1.131, 1.305, 
        1.479, 1.653, 1.83, 1.93, 2.043, 
        2.172, 2.322, 2.5, 2.964, 3.489, 
        4.191, 5.191
    ),
    calibration = cms.VPSet(
        cms.PSet(
            etaMax = cms.double(0.435),
            etaMin = cms.double(0),
            l1tCalibrationFactors = cms.vdouble(
                1.30593500928, 1.30593500928, 1.30593500928, 1.30593500928, 1.30593500928, 
                1.30593500928, 1.30593500928, 1.29877240738, 1.27505646861, 1.25219959782, 
                1.22883381968, 1.20684371656, 1.18979961771, 1.17522355783, 1.16246546468, 
                1.15226940379, 1.14413882066, 1.13938941727, 1.13739491227, 1.13793199102, 
                1.14092700033, 1.11795659621, 1.11609313161, 1.11417037162, 1.11243226077, 
                1.11070072771, 1.10875740287, 1.10726570195, 1.1051616362, 1.10338001137, 
                1.10153571845, 1.09948230743, 1.09818855487, 1.09646594549, 1.09446138827, 
                1.09234579871, 1.09022671097, 1.08886241836, 1.08736953376, 1.08544940592, 
                1.08442568658, 1.08180803071, 1.08067218285, 1.07858187394, 1.07669746524, 
                1.07527455825, 1.07316897527, 1.07098953035, 1.06911445001, 1.06716469346, 
                1.06667492923, 1.06447002386, 1.06523124572, 1.06527893525, 1.065576197, 
                1.06591666099, 1.06601764401, 1.06644873563, 1.06661880084, 1.06673071851, 
                1.06691420012, 1.06726762157, 1.06775571347, 1.06786374719, 1.06789576306, 
                1.06827875616, 1.06865711015, 1.06884800094, 1.06906043831, 1.06920596303, 
                1.06966578613, 1.06985365053, 1.07034848137, 1.07041388057, 1.07058592324, 
                1.0706252938, 1.07110117409, 1.0712930591, 1.07152975484, 1.07176404737, 
                1.07220228702, 1.07233826378, 1.07264834127, 1.07320100205, 1.07453197014, 
                1.07607530754, 1.07712180013, 1.07823841009, 1.07970500773, 1.08048043515, 
                1.08219189804, 1.08304518283, 1.08380317179, 1.08526467262, 1.08603074759, 
                1.08759821577, 1.08924251106, 1.08973269374, 1.09074314469, 1.09191666444, 
                1.09208743615, 1.09278371011, 1.09402309387, 1.09596401083, 1.09711717282, 
                1.09741736219, 1.09749810025, 1.09884588375, 1.10015897034, 1.1004754894, 
                1.10083709022, 1.10221338454, 1.10264282921, 1.10297906711, 1.10325547222, 
                1.10415448675, 1.10483978956
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 13.7361486471, 15.0444025401, 17.183249284, 19.7418995533, 
                22.6195179309, 25.672465563, 29.1248468266, 32.5574913862, 35.8853691114, 
                39.5168955091, 43.4997516772, 47.3845759529, 51.0331468753, 54.7604938703, 
                58.5852237487, 62.5900316096, 66.6097071387, 70.2674525642, 74.1920185409, 
                78.1851696373, 81.8396255454, 85.6631528954, 89.6542996572, 93.5133081382, 
                97.1707398937, 101.044492453, 104.665432414, 108.45581308, 112.551809241, 
                116.373972856, 120.482632575, 124.010954993, 127.190571759, 131.119464129, 
                135.462605973, 139.92647709, 143.598388747, 146.610205213, 150.207940433, 
                153.311117714, 157.149575393, 161.106230342, 164.506996681, 168.696838277, 
                172.183156108, 175.902618853, 180.419565698, 184.693534394, 188.725383271, 
                191.296938447, 194.137451888, 199.906004752, 203.7012173, 206.239381413, 
                210.93179056, 214.179973659, 218.094998222, 222.51833203, 224.593172332, 
                226.766731017, 230.717283226, 236.909168989, 241.295482948, 242.325972922, 
                245.379623995, 250.981643592, 255.170167389, 258.13787065, 260.771768771, 
                265.225940013, 269.991648129, 275.014944527, 279.137137587, 280.884243502, 
                282.439829719, 286.231064235, 291.144505567, 294.298018293, 297.763567073, 
                302.712083333, 306.937188552, 310.219271886, 316.567331487, 330.427141221, 
                351.576385453, 370.632448645, 386.548635886, 405.555971293, 422.052873198, 
                440.351502533, 459.223009166, 471.078819965, 487.409906566, 503.8004903, 
                520.970785619, 544.603058025, 560.308624487, 571.35034125, 587.420077061, 
                597.311422476, 603.691176027, 617.933815952, 641.33458427, 664.100929644, 
                674.7947418, 677.597619695, 688.108733243, 707.687512066, 719.678209698, 
                724.667840428, 737.455336011, 750.742029179, 756.375949367, 760.883798883, 
                769.53257937, 781.190043929, float('inf')
            )
        ), 
        cms.PSet(
            etaMax = cms.double(0.783),
            etaMin = cms.double(0.435),
            l1tCalibrationFactors = cms.vdouble(
                1.31765124058, 1.31765124058, 1.31765124058, 1.31765124058, 1.31765124058, 
                1.31765124058, 1.31765124058, 1.31465282163, 1.28575901774, 1.26113393397, 
                1.2380602966, 1.21582096587, 1.19744916693, 1.18054629443, 1.16787485502, 
                1.15583168823, 1.14758337599, 1.14208327323, 1.13886556331, 1.13870497984, 
                1.14096533043, 1.12408964993, 1.12219388973, 1.120013898, 1.11803240949, 
                1.11630261403, 1.11402073463, 1.1123966406, 1.11086129444, 1.10826887919, 
                1.10620765113, 1.1049896097, 1.10324756085, 1.10088556073, 1.09942980465, 
                1.09699690808, 1.09548617564, 1.09368130331, 1.09205222583, 1.08919862016, 
                1.08839582595, 1.08641065057, 1.08493842877, 1.08316334005, 1.0795450924, 
                1.07895335999, 1.07798891069, 1.07686082074, 1.07314681503, 1.07194406998, 
                1.06878984551, 1.0686060925, 1.06678939448, 1.06679179464, 1.06708846087, 
                1.06742528856, 1.06769130631, 1.06815041574, 1.06884086475, 1.06987814673, 
                1.06988802987, 1.0704377678, 1.07056710173, 1.07130122174, 1.07152113679, 
                1.07194159982, 1.07208591853, 1.0727232614, 1.07319937955, 1.07386963115, 
                1.07432131127, 1.07470513305, 1.07491724281, 1.07537253505, 1.07556595045, 
                1.07591108387, 1.07677896733, 1.07719731979, 1.0777851552, 1.07805517241, 
                1.07807740993, 1.07838901022, 1.0790622486, 1.08013699918, 1.0827927702, 
                1.0843121895, 1.08709452076, 1.08901828006, 1.09165640327, 1.09308535273, 
                1.09472958635, 1.09710399868, 1.09964360135, 1.10048996502, 1.10377615478, 
                1.1046473137, 1.1072696257, 1.10727248074, 1.1096455364, 1.11147790878, 
                1.11292801571, 1.11347619372, 1.11699484494, 1.11815689474, 1.12003828784, 
                1.12052763208, 1.1229679511, 1.12352199927, 1.12575850043, 1.12683694743, 
                1.12811442818, 1.12934567928, 1.12942295213, 1.13132368863, 1.13163278182, 
                1.1325017048, 1.13471717386
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 13.4617640698, 14.8563033537, 17.0029373627, 19.4993459131, 
                22.5094875271, 25.5722154792, 28.6759341595, 32.2508141657, 35.8830447487, 
                39.4471435422, 43.2156130286, 47.0159530895, 50.8305690624, 54.5607207729, 
                58.3946605126, 62.3675105446, 66.1130769642, 70.0678977472, 73.9986011825, 
                77.6384420382, 81.0379731643, 84.5542929113, 88.7089448536, 92.950984667, 
                96.7341131314, 100.823447565, 104.805034359, 108.025636234, 112.233304465, 
                116.977034833, 120.319785711, 123.33717858, 127.52067535, 131.412337172, 
                135.376267885, 139.396239217, 142.776028763, 146.276454316, 150.84591501, 
                154.573096915, 157.415037111, 160.939363945, 164.249537178, 169.747279876, 
                174.038758381, 175.625065269, 177.758112715, 182.693943557, 187.705874717, 
                192.147188166, 195.549783519, 199.928504019, 204.130123494, 205.402214778, 
                208.096807494, 210.661035632, 213.745394243, 218.63508887, 225.984064443, 
                230.438224799, 232.818596253, 235.707056628, 239.379793877, 243.437821641, 
                246.161696405, 248.564018995, 251.888849024, 256.625001773, 261.501133119, 
                266.273316288, 269.827158363, 272.361977929, 275.200800082, 277.960105005, 
                280.250844775, 285.410462468, 290.881520408, 295.161382353, 298.810294118, 
                300.053411765, 301.473404762, 305.662456971, 313.097600657, 328.965529309, 
                346.72487487, 365.02254967, 385.040101444, 404.444258283, 421.743720885, 
                434.815632795, 451.909110374, 472.811077415, 487.213425946, 504.7914137, 
                522.474869077, 537.334492822, 548.50074994, 558.606784829, 576.494747776, 
                590.456909938, 598.956697952, 616.255125105, 636.164681419, 649.110092294, 
                659.194122119, 671.655566518, 684.392231766, 696.261949339, 710.362219101, 
                720.383255686, 731.054250871, 736.620111876, 745.03365685, 754.433259259, 
                759.444, 772.563589744, float('inf')
            )
        ), 
        cms.PSet(
            etaMax = cms.double(1.131),
            etaMin = cms.double(0.783),
            l1tCalibrationFactors = cms.vdouble(
                1.33475296985, 1.33475296985, 1.33475296985, 1.33475296985, 1.33475296985, 
                1.33475296985, 1.33475296985, 1.33226561273, 1.30259690233, 1.27443021782, 
                1.24695451996, 1.22360268987, 1.20311338673, 1.18615855335, 1.17043324164, 
                1.15641477527, 1.14977495838, 1.14283657905, 1.13989123124, 1.13946579446, 
                1.14231716233, 1.11223390498, 1.11032941862, 1.10876770575, 1.10706257355, 
                1.10533758256, 1.10327773464, 1.10205106864, 1.09952657792, 1.09796497528, 
                1.09636198479, 1.09407699909, 1.09292917433, 1.09146444937, 1.0897827088, 
                1.08753713213, 1.08571574463, 1.08360712003, 1.08241273249, 1.08006263471, 
                1.07876430683, 1.07665001315, 1.07520977699, 1.07309317212, 1.07148954915, 
                1.06998446196, 1.06763882723, 1.06593012152, 1.06416994604, 1.06248789644, 
                1.06108879272, 1.05992286402, 1.05317676325, 1.05325315207, 1.05328145202, 
                1.05331946129, 1.05333451749, 1.05335739056, 1.05338867229, 1.05345362721, 
                1.05350461987, 1.05353242681, 1.05354620215, 1.05357596304, 1.05361901933, 
                1.05367016652, 1.05372471613, 1.05375800268, 1.0537740869, 1.053808856, 
                1.05383905531, 1.05387820854, 1.05393304933, 1.05395697478, 1.0539790604, 
                1.05401082594, 1.05402814078, 1.05405575203, 1.05412382321, 1.05419138364, 
                1.05420892544, 1.05421588207, 1.05422623442, 1.05435819942, 1.05453691148, 
                1.05468229568, 1.054828368, 1.0550371744, 1.05519442279, 1.05537683494, 
                1.05543587199, 1.05559643203, 1.05583354939, 1.05600523012, 1.05614564645, 
                1.0562065587, 1.05637629134, 1.05648705268, 1.0566601044, 1.05685709467, 
                1.05691564828, 1.05705161557, 1.05716562079, 1.05743417336, 1.05746847205, 
                1.0576223392, 1.05776311116, 1.05791278011, 1.05794893649, 1.05797135724, 
                1.05819866602, 1.05822994354, 1.05831735118, 1.0583732007, 1.05849860943, 
                1.05855452656, 1.05861094491
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 13.343711949, 14.6817682075, 16.8611920462, 19.3625988325, 
                22.1116860384, 25.328469293, 28.6465449042, 32.0291942377, 35.5920256883, 
                39.3690921576, 43.2083995055, 46.9599214361, 50.6306173694, 54.4137625385, 
                58.6651596584, 62.3400410819, 65.8670625897, 69.6785286182, 73.4717140921, 
                77.5436215676, 81.596122565, 85.7580030814, 89.5501134195, 93.1241252244, 
                96.8767674566, 101.017477729, 104.613007766, 108.716868869, 113.187159185, 
                116.649304764, 120.902849856, 124.658432024, 127.516628035, 130.95894155, 
                135.255526753, 139.704889265, 144.00442271, 147.618002205, 151.495759517, 
                155.487230222, 159.220725229, 163.109471504, 167.000746281, 171.070770402, 
                174.471778589, 178.684566552, 183.120118366, 186.915162838, 190.681044847, 
                194.051905148, 196.85811602, 199.101017508, 204.172301866, 209.796636713, 
                213.359056052, 216.209963072, 218.247687695, 221.157118607, 226.327368908, 
                232.55657599, 236.790032777, 239.024013533, 241.362968684, 245.275023653, 
                250.336043531, 256.014534028, 260.733473605, 263.385885886, 266.117946708, 
                269.608331324, 273.334250786, 278.384017686, 282.61568155, 285.087595672, 
                287.980713846, 290.617524613, 293.031149132, 298.171624579, 305.458343268, 
                310.03040446, 311.3465663, 312.276479787, 319.922385204, 336.61330505, 
                354.025162613, 369.683471169, 388.749095858, 408.415147831, 426.663185853, 
                439.634884418, 451.432593373, 472.797548772, 494.759955929, 511.527164727, 
                522.343409581, 534.734653862, 549.804007526, 565.051676294, 584.931937661, 
                598.660863769, 609.111370713, 622.540978556, 643.093642739, 659.364126808, 
                669.473212056, 685.302503628, 700.90625, 710.889593046, 714.036610575, 
                727.453164507, 741.345542654, 747.721824336, 755.418220561, 765.156199987, 
                774.897811932, 780.932961538, float('inf')
            )
        ), 
        cms.PSet(
            etaMax = cms.double(1.305),
            etaMin = cms.double(1.131),
            l1tCalibrationFactors = cms.vdouble(
                1.33248922515, 1.33248922515, 1.33248922515, 1.33248922515, 1.33248922515, 
                1.33248922515, 1.33248922515, 1.32688879235, 1.29906234477, 1.27366038559, 
                1.24728154779, 1.22259039808, 1.20156077285, 1.1820242409, 1.16894642274, 
                1.14538049183, 1.13599218236, 1.12345426818, 1.11389465861, 1.10832948259, 
                1.1094883059, 1.10730870156, 1.1046443432, 1.10218927312, 1.0998241559, 
                1.09712132956, 1.09650471763, 1.09299340082, 1.09036610962, 1.0881608947, 
                1.08538164179, 1.08458884034, 1.08011669298, 1.07797201118, 1.07595937564, 
                1.07453993476, 1.07028104604, 1.06936193745, 1.06900352118, 1.06383911152, 
                1.0631856285, 1.06120230014, 1.05712829896, 1.05394170957, 1.05266659306, 
                1.05057123897, 1.05043680863, 1.04730040896, 1.04499172248, 1.01238369998, 
                1.01242033768, 1.01245156427, 1.01249373928, 1.0125349522, 1.01253765187, 
                1.01259478391, 1.01259573287, 1.0126640653, 1.01268954277, 1.01269789252, 
                1.01271219022, 1.01276687267, 1.01284855331, 1.01284872483, 1.01286809281, 
                1.01294642869, 1.01296438096, 1.01301199095, 1.01302906886, 1.0130369754, 
                1.01306242998, 1.01313354135, 1.01317323157, 1.01318089545, 1.0131844335, 
                1.01320611448, 1.01325479001, 1.01327294514, 1.0132943449, 1.01333923946, 
                1.01333939937, 1.01336603457, 1.01343494486, 1.0134583253, 1.01365298014, 
                1.01383738731, 1.01398139619, 1.01419208892, 1.01423075495, 1.01430101943, 
                1.01454848742, 1.01459766887, 1.0148864832, 1.01489807764, 1.01496904818, 
                1.0152443383, 1.01527866955, 1.01539244372, 1.01559278518, 1.01568902894, 
                1.01587835395, 1.01596342556, 1.01598386393, 1.01600383536, 1.01601236775, 
                1.01617537883, 1.01635496837, 1.0164341118, 1.01648866286, 1.01651364121, 
                1.01654465787, 1.01662331127, 1.01672120961, 1.01680219651, 1.01692763695, 
                1.0171096791, 1.01711329036
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 13.1991270188, 14.6706495023, 16.786504567, 19.5079933515, 
                22.4885277317, 25.4702587937, 28.9241163451, 32.6179726599, 36.3450911266, 
                40.2439203837, 44.4019591261, 48.4611625118, 52.4297312604, 55.9179085836, 
                60.4622819187, 64.9611669799, 68.6264634248, 72.9747163646, 76.6433659092, 
                80.5435379752, 84.7906966315, 89.0107872025, 93.4708652448, 97.6702425453, 
                102.085466641, 104.977381997, 108.573659306, 113.921652962, 118.131762489, 
                122.474262009, 125.586258094, 130.173114391, 135.937737294, 139.559618136, 
                142.549664558, 147.496660786, 152.007764393, 153.120752036, 157.932272499, 
                163.00085695, 165.298063498, 170.575246841, 176.900718716, 180.787784775, 
                183.724159816, 185.666761947, 188.516329496, 193.260122567, 198.584541847, 
                204.223510123, 208.531776071, 213.191570664, 218.485332513, 221.273059543, 
                225.071388889, 228.758576779, 233.156805946, 239.112191752, 241.259663468, 
                242.697403782, 247.076508835, 255.733322196, 260.929587689, 262.17002442, 
                268.372612412, 274.485326087, 278.647451456, 282.754069103, 284.340170279, 
                286.458052632, 292.588401869, 299.622480301, 302.628687127, 303.33982519, 
                304.940818645, 309.407300067, 313.649947917, 316.161032609, 320.369631094, 
                323.229848485, 324.930897436, 330.996464446, 336.855407305, 350.697060925, 
                374.761263184, 395.610280177, 418.127998187, 433.958178188, 440.873473699, 
                461.044258718, 479.876618531, 501.333790888, 520.404806472, 525.646324329, 
                547.628180439, 567.284044338, 576.686302211, 596.627477785, 615.455760614, 
                633.584680135, 651.004351852, 657.7025, 660.267857143, 662.077380952, 
                672.967569787, 694.717073755, 711.142361111, 719.629761905, 724.678571429, 
                728.233333333, 735.195578231, 746.403709789, 757.759979929, 770.864720395, 
                790.384807181, 802.170744681, float('inf')
            )
        ), 
        cms.PSet(
            etaMax = cms.double(1.479),
            etaMin = cms.double(1.305),
            l1tCalibrationFactors = cms.vdouble(
                1.55053611073, 1.55053611073, 1.55053611073, 1.55053611073, 1.55053611073, 
                1.55053611073, 1.55053611073, 1.55053611073, 1.54638583833, 1.512307745, 
                1.48258717408, 1.4463976765, 1.42288112248, 1.39363661304, 1.3687636092, 
                1.35211274766, 1.33750572334, 1.32267214736, 1.3128565255, 1.3027849667, 
                1.30104315905, 1.30082885055, 1.30332360096, 1.30747374592, 1.30668643591, 
                1.30438047865, 1.3032934116, 1.30035733244, 1.29908560369, 1.29602715108, 
                1.29505644045, 1.29163628253, 1.28996767813, 1.28989480377, 1.28461540765, 
                1.28347088112, 1.282705006, 1.27899988113, 1.27615055594, 1.27540726403, 
                1.27531929265, 1.27404732742, 1.266819441, 1.26559675044, 1.26479751037, 
                1.26278228062, 1.25961571784, 1.25858988601, 1.25342931611, 1.25047902368, 
                1.24977308008, 1.24717203691, 1.24566712314, 1.24344847356, 1.241598276, 
                1.24031216833, 1.23988105588, 1.22467736101, 1.22402129431, 1.22335887347, 
                1.22303925667, 1.22282408914, 1.2223486938, 1.22108111085, 1.22097181547, 
                1.2207651341, 1.21897516287, 1.21870058998, 1.2168966347, 1.21650530889, 
                1.21630498404, 1.21607424838, 1.21600542498, 1.21598026192, 1.2137962299, 
                1.21372590019, 1.21281741654, 1.21258175459, 1.2119929356, 1.21059324293, 
                1.21058736979, 1.20740482198, 1.20720931922, 1.20683105268, 1.20373224058, 
                1.20106297279, 1.20054984017, 1.19366853865, 1.19354228722, 1.18838816243, 
                1.1878042203, 1.18418445048, 1.18142497805, 1.17931401318, 1.17870445128, 
                1.17066478299, 1.16966607112, 1.16861608134, 1.16349131531, 1.16342522664, 
                1.16182333043, 1.16071419568, 1.15986629269, 1.15580770443, 1.15173210832, 
                1.15052198307, 1.1469395989, 1.14460243603, 1.14301237975, 1.14121497695, 
                1.14021597405, 1.13882073104, 1.13869512526, 1.13846588111, 1.1347546327, 
                1.13372289319, 1.1283538163
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 11.9509981885, 13.1128783605, 15.0627791319, 17.3682558202, 
                20.1606178343, 22.9355703348, 25.6212323447, 28.7746797464, 31.8781217164, 
                34.8313717661, 38.1736730812, 41.4573850098, 44.7367937098, 48.5192920857, 
                51.8510666355, 54.7947345647, 58.1397157415, 61.6111267192, 65.942009059, 
                69.7267242278, 72.4678768053, 75.6724493842, 78.5070873127, 82.678372027, 
                87.4166066242, 90.168807585, 93.4321225081, 96.8452230149, 100.357584913, 
                103.625780468, 107.187367882, 111.315041385, 112.727615853, 117.069030069, 
                122.279698925, 123.829292675, 127.455877505, 132.772421724, 135.686519401, 
                136.360786194, 137.463878446, 144.358406096, 151.212965333, 152.85302415, 
                155.13593928, 159.339072854, 162.739671099, 167.75767841, 174.336683174, 
                177.302384393, 179.984797297, 183.315282909, 186.335595674, 189.635980229, 
                192.179947347, 193.572844787, 197.081267606, 202.171094891, 206.051987748, 
                208.942559524, 210.516666667, 212.549299065, 217.679656208, 221.732418999, 
                222.662478522, 228.539511494, 234.61637931, 240.734408377, 247.196092966, 
                248.937582934, 250.206384946, 251.088119922, 251.364763731, 257.867403399, 
                264.502988506, 267.384069767, 270.75179704, 273.178609626, 279.031680225, 
                283.168882979, 292.553818091, 302.496917195, 304.185774374, 314.420356937, 
                331.39837094, 340.765584936, 362.530679884, 383.157012092, 398.699498162, 
                415.589170692, 427.962556936, 446.739492481, 461.075346728, 469.083062039, 
                494.54157754, 521.145533769, 527.175770163, 545.350811499, 560.629796091, 
                565.539414414, 573.519179336, 579.279608243, 593.721585269, 617.664092789, 
                633.222311967, 647.328789954, 664.752638889, 676.312184343, 686.282976827, 
                694.514037433, 701.561363636, 706.037895257, 707.082375776, 718.680990783, 
                732.641705069, 751.482142857, float('inf')
            )
        ), 
        cms.PSet(
            etaMax = cms.double(1.653),
            etaMin = cms.double(1.479),
            l1tCalibrationFactors = cms.vdouble(
                1.47510233492, 1.47510233492, 1.47510233492, 1.47510233492, 1.47510233492, 
                1.47510233492, 1.47510233492, 1.47510233492, 1.47510233492, 1.4610643606, 
                1.44666801713, 1.43428469166, 1.42010685754, 1.40617546755, 1.39445133437, 
                1.38279251817, 1.37051441405, 1.36518321339, 1.35292577477, 1.34325721725, 
                1.33655416596, 1.32866101799, 1.3220675042, 1.31700973337, 1.32394181408, 
                1.31922131925, 1.31758491373, 1.31353767077, 1.31168591849, 1.30731143759, 
                1.30423718122, 1.30149639051, 1.29910753795, 1.29613194393, 1.2927432706, 
                1.28816631146, 1.28729627477, 1.28216478956, 1.2805202569, 1.27893402302, 
                1.2744708607, 1.27238944788, 1.26682870797, 1.26265655511, 1.26160288568, 
                1.25949842198, 1.25649396459, 1.25187762696, 1.24938619475, 1.24629312412, 
                1.24240410057, 1.23941775171, 1.23332097252, 1.22931737485, 1.22740630336, 
                1.22448901312, 1.22336345681, 1.21794711245, 1.24837929725, 1.24724969226, 
                1.24643035218, 1.24587397529, 1.24553440169, 1.2443805474, 1.24056481789, 
                1.23964490051, 1.2359960211, 1.234864924, 1.23473710254, 1.23246130069, 
                1.23096671336, 1.22875003041, 1.2275003914, 1.22712168234, 1.22588206032, 
                1.22426235306, 1.22396540417, 1.21853310822, 1.21755510256, 1.21437460675, 
                1.21412832391, 1.21226853491, 1.20945758693, 1.20463090002, 1.1985416616, 
                1.18959323554, 1.17883388187, 1.17062181435, 1.15988282459, 1.15380357774, 
                1.1471725546, 1.13240499119, 1.12557546067, 1.11793584977, 1.10806682041, 
                1.09229438152, 1.09004753375, 1.08112380778, 1.07481457592, 1.06792352051, 
                1.05866880708, 1.0542749938, 1.0450927737, 1.03277032939, 1.02765454892, 
                1.02258374097, 1.019559042, 1.01832348416, 0.984947954336, 0.976379953438, 
                0.974273595928, 0.965285475352, 0.961772951972, 0.96047444904, 0.952738008558, 
                0.946904700595, 0.940821826013
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 11.9520026903, 13.3017694508, 15.1455230338, 17.2620108043, 
                19.8515755233, 22.6298799464, 25.4341803806, 28.3835571385, 31.3933508904, 
                34.3708730432, 37.2671754532, 40.2882500762, 43.6546314404, 46.9043803573, 
                50.0569376737, 53.5081905296, 56.1830571229, 59.1027962522, 62.9871953228, 
                66.1652442343, 69.3120024326, 72.7583064266, 75.871356138, 78.7010134986, 
                82.6003185278, 85.9846784178, 89.0106047154, 92.1511798088, 95.4659736083, 
                99.4316182254, 102.527500023, 105.25847864, 108.114464552, 111.502746572, 
                115.743581819, 118.643516255, 121.838675669, 125.446170173, 127.166202908, 
                130.386850195, 133.871126556, 137.939743927, 143.121453578, 145.903637092, 
                147.585000415, 150.304946722, 154.362193428, 158.146309873, 161.119451872, 
                164.836659664, 168.497049689, 173.332830113, 178.710185185, 181.859104938, 
                184.429683819, 186.582061069, 190.064913561, 196.659681373, 201.580577957, 
                203.667790601, 205.141107571, 206.100621118, 207.7, 213.022150072, 
                218.093766614, 222.986695906, 228.105787037, 229.45401936, 232.028167311, 
                236.066046099, 240.040611814, 243.752851398, 245.496722342, 247.229865642, 
                250.29204955, 252.34468254, 258.480387668, 265.345467033, 269.798992674, 
                273.468883547, 275.724370292, 280.7264719, 288.905957496, 300.596311278, 
                316.700820289, 337.806765081, 358.124110489, 378.419647273, 396.431050803, 
                410.043048728, 432.959754335, 456.089050388, 471.584702562, 490.335490303, 
                517.796088129, 537.09375, 549.056818182, 565.370475589, 579.507254968, 
                596.798482618, 611.415301724, 625.954484463, 648.984793603, 667.660170251, 
                678.569444444, 687.239285714, 691.801785714, 728.868351064, 773.787558381, 
                785.219207317, 797.10078125, 810.48828125, 815.640625, 825.316550926, 
                839.849002849, 852.610576923, float('inf')
            )
        ), 
        cms.PSet(
            etaMax = cms.double(1.83),
            etaMin = cms.double(1.653),
            l1tCalibrationFactors = cms.vdouble(
                1.33049881625, 1.33049881625, 1.33049881625, 1.33049881625, 1.33049881625, 
                1.33049881625, 1.33049881625, 1.33049881625, 1.31669422606, 1.29984566417, 
                1.28831750594, 1.27206618286, 1.26175402093, 1.25022535161, 1.24448120045, 
                1.23544818898, 1.23014212283, 1.22521081056, 1.22185223127, 1.22023847148, 
                1.22004739542, 1.22200944331, 1.21023056241, 1.20867763267, 1.20712846626, 
                1.2059863879, 1.20431406313, 1.20202212, 1.20064986431, 1.19941356649, 
                1.19858518712, 1.19742660667, 1.1949860383, 1.19348175521, 1.19265655738, 
                1.1911473882, 1.18962343872, 1.18774638031, 1.18626995789, 1.18420073928, 
                1.18206241557, 1.18196490317, 1.18097507924, 1.17792986136, 1.17673435841, 
                1.17653207534, 1.17496333267, 1.17096343417, 1.16977652272, 1.16947704111, 
                1.16784294341, 1.16587442933, 1.16405773995, 1.16400239434, 1.16254269381, 
                1.16252492005, 1.16166579308, 1.16003646939, 1.15876432336, 1.15741507548, 
                1.15723775457, 1.15543741864, 1.15342598582, 1.15323916802, 1.15093617585, 
                1.14995636309, 1.14991128176, 1.14804616599, 1.14676976413, 1.14528704825, 
                1.14283644118, 1.14171061787, 1.14131838019, 1.14044577632, 1.13600962614, 
                1.13592662429, 1.13498628758, 1.13452687172, 1.13372080526, 1.13293905158, 
                1.13250566094, 1.12464538359, 1.12280554603, 1.12017353199, 1.11708777477, 
                1.10827310225, 1.10270091176, 1.0945794585, 1.08974341302, 1.07924111342, 
                1.07165107426, 1.06705262412, 1.05658393901, 1.05350745525, 1.0410369918, 
                1.03824422355, 1.03674561618, 1.03470551006, 1.02062969788, 1.00923138262, 
                1.00111680727, 0.99545047553, 0.993301194787, 0.980082984491, 0.978647303549, 
                0.965813606339, 0.963258808111, 0.957559232861, 0.955293441368, 0.947836750142, 
                0.946217207546, 0.943019649087, 0.935849869836, 0.935610273169, 0.929797537225, 
                0.916832136078, 0.916266661888
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 12.7788766789, 14.4351898824, 16.5278531327, 19.0137931992, 
                22.0681370062, 25.0720296167, 27.8529044087, 31.0167926884, 34.5850953632, 
                37.7735513379, 41.2714077045, 44.9397579323, 48.4339717156, 51.5134219936, 
                54.7022573757, 58.2903782147, 61.6456991131, 65.3655250891, 69.0603949477, 
                72.0952646025, 75.8921881776, 79.3974791654, 82.1470948449, 85.7802504422, 
                88.9322194751, 92.228430802, 96.8713565527, 101.162843269, 104.217964812, 
                106.636101814, 108.963216713, 113.178517282, 117.798702614, 120.526976089, 
                123.260972126, 126.813341723, 130.796580869, 134.724156627, 138.876789216, 
                143.804636438, 146.423233696, 147.696715198, 152.422530911, 157.389236606, 
                159.026314844, 161.100529101, 167.622486772, 173.697246127, 175.438100374, 
                177.702696352, 181.922052728, 186.355259324, 188.547774983, 190.32218754, 
                192.05259618, 197.343524531, 204.861505682, 208.864470109, 212.481032609, 
                214.58713785, 217.315579208, 222.574422541, 225.607202447, 229.042227362, 
                233.571294559, 234.985272639, 237.62064429, 241.954786825, 245.761357725, 
                251.187901303, 256.122063968, 258.216431557, 259.961449169, 267.285583368, 
                273.520356288, 274.932188309, 276.863333644, 278.609235283, 280.799844927, 
                282.476298564, 293.918519631, 307.301121795, 313.470637464, 321.359065461, 
                337.777295379, 357.625891595, 376.518099388, 394.39469697, 415.555989583, 
                440.516783767, 457.332430269, 478.119552752, 496.806919643, 518.256006722, 
                539.313670412, 545.234195402, 550.116322595, 572.350381161, 607.495337302, 
                634.415972222, 653.428571429, 664.211251167, 685.412754525, 705.629751789, 
                725.31626197, 746.546743697, 757.934752747, 768.924038462, 782.3375, 
                794.859375, 801.505208333, 815.808333333, 826.030555556, 834.380555556, 
                860.2875, 878.955147059, float('inf')
            )
        ), 
        cms.PSet(
            etaMax = cms.double(1.93),
            etaMin = cms.double(1.83),
            l1tCalibrationFactors = cms.vdouble(
                1.26344020365, 1.26344020365, 1.26344020365, 1.26344020365, 1.26344020365, 
                1.26344020365, 1.26344020365, 1.2594177509, 1.25024812783, 1.24257955651, 
                1.23460877998, 1.22689840022, 1.21927757925, 1.21265488275, 1.20557178744, 
                1.20174679788, 1.19654003623, 1.19235906229, 1.18833919988, 1.18423598421, 
                1.18248510015, 1.18498117639, 1.18352790424, 1.18144657707, 1.17661686818, 
                1.1765750739, 1.17151719886, 1.17090460227, 1.16808185289, 1.16334134477, 
                1.16221061551, 1.15972417328, 1.15524883242, 1.15467922536, 1.15437781148, 
                1.14938817625, 1.14838488731, 1.14532947934, 1.1392096584, 1.13892990227, 
                1.13689064678, 1.13591199573, 1.13361506216, 1.13235799184, 1.12453112537, 
                1.12353768589, 1.12340029796, 1.11834798253, 1.11415617971, 1.11202444858, 
                1.11098817404, 1.11061422522, 1.10500019468, 1.10106129638, 1.0570645963, 
                1.05674843271, 1.05655028722, 1.05652919587, 1.05550650582, 1.05546035549, 
                1.05542095684, 1.05524242507, 1.05460820421, 1.05450067037, 1.05416171584, 
                1.05369091407, 1.05366974164, 1.05304299788, 1.05252325406, 1.05242940461, 
                1.05226646078, 1.05205766435, 1.05195399297, 1.05156885848, 1.0513176496, 
                1.05086320472, 1.05074695298, 1.05073829611, 1.05042190785, 1.04926402517, 
                1.04905737894, 1.04891256396, 1.04885123511, 1.04783944462, 1.04603957355, 
                1.04498728955, 1.0441774476, 1.04290300185, 1.04080891766, 1.03794610759, 
                1.03738392589, 1.03617570363, 1.03473564365, 1.03230390795, 1.03224663935, 
                1.03072766404, 1.0279685602, 1.02730218418, 1.0239743365, 1.02360043749, 
                1.0235627012, 1.02316035177, 1.02183147754, 1.02103587202, 1.02087206722, 
                1.02012591455, 1.01776880707, 1.01688594279, 1.01667002772, 1.01607314711, 
                1.01546355034, 1.01250081665, 1.01177249255, 1.01009529511, 1.00867950913, 
                1.00535732355
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 13.4970175928, 15.1917668493, 17.5598120604, 20.0549383771, 
                22.761185412, 25.9356197296, 29.5710629017, 33.1286806262, 36.3295437527, 
                39.4893787898, 42.8608536262, 46.4031905244, 49.9559825377, 53.7094286808, 
                56.936193824, 59.9200888492, 63.3132010844, 66.6765207646, 70.5592973062, 
                73.7585546318, 78.1130632902, 82.4061178903, 84.8649824691, 89.6726849112, 
                93.0615744275, 96.6091890563, 100.553885637, 102.943704044, 108.205128122, 
                112.289488565, 114.805794958, 119.648799866, 123.158347238, 123.764278017, 
                127.445027112, 131.614039681, 134.437495801, 140.820297168, 145.272200183, 
                146.885434107, 148.984858352, 151.263537847, 153.735901327, 160.055194805, 
                166.191091954, 166.977758621, 170.588005952, 177.01873059, 181.41773377, 
                183.621575342, 184.602605426, 188.768178105, 195.413728632, 199.786828737, 
                203.53490566, 206.975568182, 208.442234848, 215.425, 222.575406504, 
                223.147718332, 224.605645161, 230.042857143, 235.005102041, 237.99205259, 
                243.409219457, 246.700464396, 251.03494152, 258.70479798, 262.809659091, 
                264.527573529, 267.014468691, 269.10483871, 272.374887993, 276.631944444, 
                281.352678571, 285.170566502, 286.006189213, 288.180699931, 298.043385491, 
                307.171910755, 309.523141655, 310.902217742, 318.08125, 336.890909091, 
                355.971464646, 368.42885101, 382.372471279, 404.907509158, 438.068502825, 
                460.981263242, 472.825041118, 490.541713326, 516.443535188, 533.09465812, 
                543.639529915, 572.259336678, 595.175362319, 621.896212121, 646.660427807, 
                649.414215686, 652.358333333, 663.94, 678.1525, 684.570833333, 
                690.658333333, 711.41875, 733.09375, 740.444444444, 745.881944444, 
                753.953125, 777.8515625, 802.544270833, 818.636904762, 839.328571429, 
                871.025, float('inf')
            )
        ), 
        cms.PSet(
            etaMax = cms.double(2.043),
            etaMin = cms.double(1.93),
            l1tCalibrationFactors = cms.vdouble(
                1.21629221754, 1.21629221754, 1.21629221754, 1.21629221754, 1.21629221754, 
                1.21629221754, 1.21629221754, 1.2143105786, 1.20705887946, 1.20172327443, 
                1.19635501501, 1.18935438692, 1.18357975306, 1.17883483547, 1.17253244835, 
                1.16676369422, 1.16146408844, 1.15476931936, 1.14861458752, 1.14383587886, 
                1.13613912201, 1.15219667932, 1.14906219403, 1.14808161605, 1.14459785262, 
                1.14269095066, 1.13997101838, 1.13619937599, 1.13345316689, 1.13104833952, 
                1.12931087162, 1.12605458004, 1.12332075961, 1.12214084987, 1.11977644024, 
                1.11623567986, 1.1122458245, 1.1083505494, 1.10797285096, 1.1062306348, 
                1.10265809398, 1.10229188147, 1.09738697231, 1.0973031017, 1.09328160834, 
                1.09069771195, 1.0879352071, 1.08518609065, 1.08159568534, 1.0804492949, 
                1.07870449836, 1.07588358785, 1.07557418398, 1.07132896072, 1.06936132658, 
                1.06924237699, 1.06898155499, 1.06721691315, 1.06713176616, 1.06488611764, 
                1.06431281061, 1.06412410989, 1.06233512154, 1.06192478599, 1.06145249365, 
                1.05929718716, 1.05870708468, 1.05842616938, 1.0572390605, 1.05617065365, 
                1.05611813058, 1.0552591158, 1.0534771748, 1.05302603505, 1.05253372113, 
                1.05190835065, 1.05121994984, 1.0510965109, 1.04964431982, 1.04827293909, 
                1.04609786683, 1.04420242601, 1.04403524786, 1.04199171851, 1.03570032676, 
                1.03170060202, 1.02471475781, 1.0220533428, 1.01625398917, 1.01232260497, 
                1.00789998134, 1.005889945, 0.996025162737, 0.993256242866, 0.987535132918, 
                0.984948957557, 0.977747868812, 0.974817880234, 0.971037822426, 0.968447238948, 
                0.967125997203, 0.964218737777, 0.953609602752, 0.951350786713, 0.947089571165, 
                0.946104023103, 0.944511162439, 0.934743979786, 0.933976798255, 0.933636687551, 
                0.933361313828, 0.924631483686, 0.92374807926, 0.915007896723, 0.908342886395, 
                0.905162078334
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 13.7095810759, 15.4916612561, 17.9731744352, 20.5838742792, 
                23.4100000067, 26.6783243919, 29.7833794964, 33.3573519293, 37.1343601956, 
                40.3573168403, 44.0942976559, 47.9659992073, 51.1645381429, 54.5349591352, 
                58.2287070452, 61.6267983551, 65.3223567751, 69.2944890498, 72.6855845329, 
                76.5706641213, 80.4371088472, 84.1729552063, 87.1526553819, 90.3852664018, 
                94.288624754, 97.6388961585, 102.339418339, 107.058967456, 110.78881151, 
                113.788230258, 117.404190704, 121.741605862, 124.575521573, 127.141948466, 
                131.417857475, 136.870744963, 142.580335091, 145.674377436, 147.209398766, 
                151.05779216, 153.909827044, 157.726624294, 161.338978945, 164.311655893, 
                169.094591097, 172.965897963, 176.956839992, 181.547261296, 184.977155366, 
                187.070651816, 190.376661279, 192.643308886, 195.941295421, 204.738489298, 
                210.718209119, 211.537057681, 215.904283217, 219.892725202, 224.918294881, 
                230.996416056, 232.639427218, 236.903642654, 241.645738408, 243.548825992, 
                249.21435132, 255.133894231, 257.011948529, 260.177244582, 265.040498975, 
                267.457404009, 269.422826087, 275.117151163, 279.932032115, 281.966269841, 
                284.376177024, 287.208879045, 288.959336007, 292.356647537, 298.444722111, 
                306.091444672, 314.868125, 319.315462963, 324.082103588, 342.05353289, 
                364.242833824, 387.929485862, 408.730527062, 426.973303897, 447.95433838, 
                465.966921736, 479.836770348, 505.44078754, 532.681079581, 550.986948217, 
                568.898790323, 590.001704545, 611.845935315, 626.313873626, 640.05, 
                648.48452381, 657.601851852, 686.74537037, 714.490740741, 728.548976608, 
                739.861842105, 745.421305668, 769.915384615, 792.629166667, 795.016666667, 
                796.34375, 815.760416667, 836.488095238, 857.238095238, 890.454166667, 
                911.683333333, float('inf')
            )
        ), 
        cms.PSet(
            etaMax = cms.double(2.172),
            etaMin = cms.double(2.043),
            l1tCalibrationFactors = cms.vdouble(
                1.24463108809, 1.24463108809, 1.24463108809, 1.24463108809, 1.24463108809, 
                1.24463108809, 1.24463108809, 1.22870705887, 1.19836644148, 1.18057435385, 
                1.16475611868, 1.14656045785, 1.13630392181, 1.12907309301, 1.12458941546, 
                1.12396919862, 1.1266691842, 1.1312951597, 1.13754265674, 1.15717137943, 
                1.10016929711, 1.09836792879, 1.09706087373, 1.09576962823, 1.09437951599, 
                1.09168003074, 1.08991624307, 1.08969627714, 1.08696432458, 1.08673589039, 
                1.08406597119, 1.08255042879, 1.07947490575, 1.0788668256, 1.07782375909, 
                1.07550979348, 1.0749747491, 1.07333347682, 1.07178181655, 1.06993614183, 
                1.06669791954, 1.06650550898, 1.06287391246, 1.06281120026, 1.06127587052, 
                1.05980687707, 1.05949187174, 1.05578275324, 1.05274463618, 1.05182571746, 
                1.04931367066, 1.04874893864, 1.05641180597, 1.05606383878, 1.05578640694, 
                1.05328201855, 1.05119788827, 1.04979736321, 1.04954378139, 1.04765914049, 
                1.04733102858, 1.04453346835, 1.04293143151, 1.04200055639, 1.04163370047, 
                1.03601225755, 1.03572772664, 1.03536402867, 1.03450353855, 1.03300397956, 
                1.03271844062, 1.03133148602, 1.02824720508, 1.0255034533, 1.02501438762, 
                1.02406097142, 1.02318864953, 1.02308413253, 1.0229264435, 1.02153080396, 
                1.02093884026, 1.01829648613, 1.01377147911, 1.00893009266, 1.00026908515, 
                0.990933236615, 0.985829663806, 0.985726981538, 0.971780898171, 0.968360565127, 
                0.966542691472, 0.953970559056, 0.95293612294, 0.946253207331, 0.936055411119, 
                0.935335159677, 0.928640241117, 0.922416983962, 0.900616319824, 0.900259767754, 
                0.89668374879, 0.89500810959, 0.894758911965, 0.886314836132, 0.882442768547, 
                0.876919799248, 0.876060497094, 0.8621398022, 0.852372401049, 0.849862522675, 
                0.844180387181, 0.799367779851, 0.791762955788
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 13.7820945333, 15.5998481907, 18.0388646745, 20.8537251841, 
                23.7351968264, 27.1010552292, 30.5665269509, 34.3658060316, 38.1699828726, 
                41.3104960011, 45.1926203129, 49.2128167802, 52.6824711873, 56.3735085314, 
                60.2779866824, 63.9695042596, 67.1696331331, 69.9876168562, 74.2520342153, 
                79.0837779271, 83.0918300233, 86.6840545663, 89.6867597631, 92.7854493351, 
                97.5115598722, 102.669505424, 104.962014358, 108.373375284, 111.794522495, 
                115.143981347, 119.98087647, 125.286504425, 129.543430905, 131.451565295, 
                135.331092539, 138.62352808, 141.138570972, 144.82845787, 148.754560811, 
                154.62972561, 158.594308943, 163.013492063, 167.282790309, 169.129554656, 
                172.601476648, 174.663140528, 179.313586957, 187.11097561, 191.683892276, 
                195.648860063, 199.204514825, 203.202156334, 207.05334681, 207.963095238, 
                212.009722222, 218.684496997, 223.753516271, 226.159693878, 229.270099668, 
                232.488922062, 237.035739687, 243.435696095, 247.120244003, 249.008012821, 
                257.719004065, 266.310239697, 267.253197998, 269.033986175, 272.467075893, 
                275.063802083, 277.49672619, 284.000892857, 292.47875, 297.181428571, 
                299.279761905, 301.935606061, 303.356583072, 303.738005997, 305.997584541, 
                308.888888889, 313.59375, 324.019886364, 337.644886364, 357.286397059, 
                383.465861345, 404.470436508, 412.043813131, 432.480113636, 457.742497086, 
                465.362352737, 486.295045045, 506.088095238, 517.314285714, 541.87012987, 
                557.752272727, 568.538888889, 587.330555556, 628.096078431, 660.327488688, 
                666.048076923, 673.6875, 676.4875, 689.133333333, 707.049242424, 
                720.715909091, 730.0, 751.5, 785.958333333, 803.817708333, 
                815.734375, 889.1875, 965.4375, float('inf')
            )
        ), 
        cms.PSet(
            etaMax = cms.double(2.322),
            etaMin = cms.double(2.172),
            l1tCalibrationFactors = cms.vdouble(
                1.28801427048, 1.28801427048, 1.28801427048, 1.28801427048, 1.28801427048, 
                1.28801427048, 1.28801427048, 1.27907573544, 1.25762676468, 1.23203051181, 
                1.2127674306, 1.19077164733, 1.17543776249, 1.16511470979, 1.15158170141, 
                1.14016563295, 1.13350074649, 1.12895447486, 1.12701259705, 1.12771778387, 
                1.13005719625, 1.11063374411, 1.10758429943, 1.10533186553, 1.10085120985, 
                1.10059366031, 1.09686271227, 1.09335974897, 1.09053459072, 1.08737330282, 
                1.0841616756, 1.08169734143, 1.08108045671, 1.07763696162, 1.07538006669, 
                1.06882658148, 1.06625547439, 1.06548471888, 1.06531775586, 1.06230384419, 
                1.05825281932, 1.05453507243, 1.04970622179, 1.04918779307, 1.04646655271, 
                1.04313607714, 1.04281858988, 1.03580641861, 1.03161769069, 1.03031476389, 
                1.02733028469, 1.04451881331, 1.04358016577, 1.04068114378, 1.03785227024, 
                1.03643816672, 1.0357736928, 1.03492993529, 1.03456417436, 1.03136179253, 
                1.03055081273, 1.024529249, 1.02422733697, 1.02334146768, 1.02241728615, 
                1.02059348669, 1.01985018062, 1.01666009697, 1.0130438797, 1.01165916838, 
                1.01140500027, 1.01114694986, 1.00899659255, 1.00897349765, 1.00875653846, 
                1.00517644592, 1.00109640283, 1.00037768928, 1.00025619424, 0.99956287175, 
                0.996551957183, 0.988475727802, 0.986121623075, 0.985031919886, 0.974596613229, 
                0.965439918879, 0.957320195213, 0.953186488337, 0.949892454978, 0.926661255415, 
                0.920528165625, 0.915875457067, 0.899356341318, 0.896217293885, 0.888738729006, 
                0.886243597827, 0.8711147297, 0.86995326756, 0.862406839919, 0.854984830236, 
                0.846246861389, 0.844351880193, 0.840477696416, 0.831379447193, 0.822164808693, 
                0.820032954848, 0.813084690464, 0.808452514208, 0.79271364261, 0.781396393802, 
                0.772921616788, 0.767436698994, 0.759709386784, 0.732126882713
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 13.2086215379, 15.1534633583, 17.649581287, 20.148553298, 
                22.9153920468, 25.7015069204, 29.060016827, 32.6923997679, 36.1610750872, 
                39.7706769991, 43.5376631987, 47.3688383738, 50.3852546185, 53.7172554454, 
                57.9534260164, 61.9605131723, 65.6678061224, 69.6307046732, 73.3961583546, 
                76.6034311572, 80.0068013724, 84.0792280583, 87.8363678805, 92.6077255375, 
                95.9654221045, 98.7918435032, 103.918105058, 108.402484908, 112.644738829, 
                117.160861331, 121.183092365, 123.366576954, 126.243937206, 130.283479421, 
                136.526894756, 142.992974381, 145.361162346, 146.025670141, 148.279775128, 
                153.286293854, 158.791580579, 164.848068182, 168.637380952, 170.933150183, 
                175.221657081, 177.806760866, 183.000873016, 190.938313253, 194.82993663, 
                197.868177431, 201.573971636, 204.279335391, 208.835980308, 215.636979167, 
                220.674864719, 223.142857143, 224.933651026, 226.369768963, 230.606392106, 
                235.371644491, 243.484243697, 250.992402882, 252.402711324, 254.551869501, 
                257.814676139, 260.862720875, 265.533018868, 273.614458991, 279.552295918, 
                281.498214286, 282.106395349, 284.966010733, 287.546652422, 287.831679894, 
                292.340097403, 301.435335498, 307.133124196, 308.130743243, 309.098214286, 
                313.496428571, 326.660714286, 339.045138889, 343.134133454, 356.818317873, 
                380.080819035, 400.593919969, 415.142992424, 423.962296577, 455.456948983, 
                490.32254617, 503.129030127, 528.267329545, 551.608388158, 564.215176951, 
                576.057413793, 596.983214286, 616.325487013, 626.664772727, 644.4375, 
                663.625, 676.25, 683.1, 698.502777778, 720.246527778, 
                733.71875, 744.5, 758.25, 782.4375, 814.5625, 
                838.0625, 854.6375, 870.325, 912.25, float('inf')
            )
        ), 
        cms.PSet(
            etaMax = cms.double(2.5),
            etaMin = cms.double(2.322),
            l1tCalibrationFactors = cms.vdouble(
                1.49099272974, 1.49099272974, 1.49099272974, 1.49099272974, 1.49099272974, 
                1.49099272974, 1.49099272974, 1.49099272974, 1.49099272974, 1.47147038177, 
                1.44110402098, 1.40753020227, 1.37956170944, 1.34154928405, 1.32662591014, 
                1.29145531966, 1.27013765447, 1.25161491993, 1.2366175646, 1.22505436234, 
                1.20823932564, 1.20809834449, 1.2002598421, 1.20028932445, 1.17154819236, 
                1.16715932959, 1.16186770819, 1.16148283057, 1.15335519391, 1.1488697101, 
                1.14767746297, 1.13827946341, 1.1358739365, 1.12500903936, 1.12381049159, 
                1.11606740787, 1.11328525068, 1.10859721749, 1.09922102489, 1.09821077013, 
                1.09052169667, 1.08488302349, 1.08153352107, 1.07328228308, 1.07188989833, 
                1.06894515671, 1.06465122204, 1.06062459224, 1.05449740609, 1.04338878875, 
                1.01675416711, 1.01672417914, 1.01634370681, 1.01585049968, 1.01513546771, 
                1.01298973033, 1.01217730218, 1.01216542747, 1.01018592681, 1.0100395536, 
                1.01002803705, 1.00914742382, 1.00887714281, 1.00721832199, 1.00671129005, 
                1.00655810927, 1.00627959876, 1.00588744428, 1.00460201118, 1.00384341089, 
                1.00299029948, 1.00209052381, 1.00091136827, 1.00001173513, 0.999756820516, 
                0.999278584114, 0.99922058166, 0.996788735278, 0.996659815284, 0.996096791635, 
                0.995773572724, 0.995354250529, 0.995118203853, 0.993301997984, 0.989036584866, 
                0.988381013983, 0.983025372315, 0.981083152224, 0.976011511955, 0.972971480757, 
                0.970258549606, 0.967103117391, 0.964576096961, 0.956678867029, 0.954580550515, 
                0.950868086735, 0.94471770796, 0.943730423923, 0.934853199103, 0.932163311311, 
                0.930502635614, 0.928838528386, 0.927952803766, 0.916409614493, 0.911182186537, 
                0.908097147087, 0.906061878006, 0.904069456695, 0.880588878663
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 11.7109508065, 13.1353167235, 14.9562968923, 16.9790007769, 
                19.2055898521, 21.2130593084, 23.6785649226, 27.0011527762, 30.1557544543, 
                33.0301927004, 35.9993524621, 39.0504868894, 42.6484814856, 45.7286654343, 
                49.0779288075, 53.2083314286, 56.6240315145, 59.9624119134, 63.0960035212, 
                67.687040583, 70.8089905193, 74.6588425168, 78.9967962298, 82.8893453066, 
                88.1025978687, 92.1714100297, 94.5573039396, 98.1352057253, 103.436636624, 
                105.823048321, 110.274243502, 115.235393294, 120.813095997, 125.883492316, 
                129.641756703, 134.065629252, 137.205431034, 143.116777188, 147.482313307, 
                151.13873501, 156.740531015, 160.518358396, 165.394275013, 169.447593917, 
                171.270535021, 174.313028925, 177.810252132, 182.078010753, 189.322405303, 
                197.010106452, 200.116219668, 201.313657407, 203.862446581, 207.387248168, 
                215.732983954, 224.362854084, 226.767596676, 232.577045329, 238.778867102, 
                239.239479638, 241.842094017, 245.199603175, 250.827380952, 257.145833333, 
                259.071875, 260.33125, 262.287784091, 267.181818182, 273.144886364, 
                277.846740431, 282.960446085, 289.025321816, 295.089781746, 298.457949309, 
                300.596774194, 302.161146313, 309.424793956, 316.89532967, 318.913940092, 
                321.499379653, 323.665598291, 325.577508961, 331.564554901, 349.306490385, 
                363.6625, 381.199038462, 402.489124668, 422.950692268, 446.614909339, 
                463.398053279, 480.517857143, 497.095302795, 527.506017081, 556.666071429, 
                573.617887931, 602.390804598, 623.213541667, 651.991319444, 685.736111111, 
                698.428030303, 708.127435065, 715.566071429, 751.825, 800.75, 
                825.0, 839.9375, 851.6875, 926.0, float('inf')
            )
        ), 
        cms.PSet(
            etaMax = cms.double(2.964),
            etaMin = cms.double(2.5),
            l1tCalibrationFactors = cms.vdouble(
                1.440149383, 1.440149383, 1.440149383, 1.440149383, 1.440149383, 
                1.440149383, 1.440149383, 1.440149383, 1.41823798726, 1.35779202704, 
                1.29604078279, 1.2331235664, 1.18467513743, 1.13662522351, 1.10424412126, 
                1.07837858706, 1.05044035802, 1.04305528311, 1.0340586478, 1.00199436988, 
                0.996831578408, 0.992117421642, 0.988148133039, 0.984926887957, 0.981877067499, 
                0.978707515289, 0.972062429005, 0.966286792195, 0.962735311068, 0.95862885791, 
                0.954502608232, 0.950423801308, 0.947238356455, 0.942280737153, 0.938495013502, 
                0.935311137492, 0.930922164099, 0.926299938098, 0.922249224325, 0.921813179341, 
                0.913624959749, 0.906364289469, 0.900282833844, 0.894782452879, 0.894475540131, 
                0.921298447858, 0.920060749826, 0.919642016454, 0.918764943707, 0.915754164947, 
                0.914027770112, 0.913999384828, 0.913560277424, 0.913085606477, 0.91203015986, 
                0.908571622169, 0.908257851694, 0.907433350595, 0.907344653677, 0.90484903435, 
                0.904759606357, 0.902656738308, 0.900464218778, 0.898745527548, 0.898405801686, 
                0.897649208068, 0.896626034151, 0.895132171113, 0.895039360638, 0.894668072035, 
                0.891575466112, 0.89133534261, 0.890764181016, 0.889023303745, 0.888628513297, 
                0.88591462355, 0.883324458751, 0.882629359352, 0.881185912773, 0.880459117431, 
                0.876243057514, 0.875178000699, 0.87464703624, 0.873006971519, 0.866733439423, 
                0.859896825026, 0.855088048182, 0.851019815143, 0.844211345078, 0.835743265866, 
                0.833130191023, 0.830973313737, 0.821796437249, 0.819127304091, 0.816851492601, 
                0.815531687779, 0.789740765722, 0.788751364403, 0.782537924121, 0.779444659838, 
                0.778195111933, 0.762997907676, 0.762449119745, 0.758713140365
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 14.4814106025, 15.0665800452, 15.9944547311, 17.6513154301, 
                19.7313910596, 22.2415956293, 25.2338482897, 28.9983965864, 33.1945877234, 
                37.2192967935, 41.7965852462, 46.4087212029, 51.1009737924, 55.6907222438, 
                59.7792537073, 64.8784785583, 69.1828569435, 74.2756704848, 79.3854559008, 
                83.4870901039, 88.9448473521, 93.7431044401, 97.7164154653, 101.18165114, 
                104.618322613, 110.041649037, 116.905033337, 122.058967962, 126.290552995, 
                130.83974091, 135.3736522, 139.38769802, 143.887353817, 148.718708827, 
                152.569937177, 156.754506409, 161.733872263, 166.526324219, 169.005596108, 
                173.771151354, 182.307825701, 189.6803544, 196.080190772, 199.289157609, 
                200.278288043, 203.541100543, 206.810974482, 209.36895705, 217.043759812, 
                226.395164547, 229.859183499, 230.782036177, 232.585877863, 235.606402305, 
                244.517220831, 251.963935574, 254.2109375, 256.013633578, 261.115196078, 
                266.218201754, 270.545897833, 279.025196078, 286.746111111, 290.80952381, 
                292.973710317, 296.48705561, 301.45580561, 304.587974173, 305.504127703, 
                312.342019331, 318.920984848, 320.5225, 325.086574074, 329.302483165, 
                335.439164905, 345.90961945, 352.394886364, 356.616477273, 360.900637472, 
                370.658067542, 381.083241758, 384.23386324, 388.519577526, 404.141391941, 
                430.021441202, 453.009994316, 470.533631691, 492.004758065, 522.161388889, 
                544.036111111, 553.452222222, 575.825588235, 599.210171569, 608.97172619, 
                616.069642857, 669.5875, 722.453125, 736.671875, 755.04375, 
                763.616666667, 796.083333333, 827.166666667, 835.625, float('inf')
            )
        ), 
        cms.PSet(
            etaMax = cms.double(3.489),
            etaMin = cms.double(2.964),
            l1tCalibrationFactors = cms.vdouble(
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 25.5826843658, 24.2629824561, 21.1982915959, 19.24759157, 
                21.2638970135, 22.779435911, 23.9039434399, 26.5016611824, 30.2078332673, 
                33.6160387858, 37.7073720397, 42.0957302547, 52.2161530155, 80.4293131351, 
                123.112789661, 167.484620234, 200.362734522, 227.533021978, 247.865403082, 
                260.104100561, 259.756684492, 287.576571793, 345.295419755, 305.06330819, 
                271.547743056, 295.071859903, 357.906929348, 405.463541667, 290.769345238, 
                202.021428571, 212.075, 193.625, 163.625, float('inf')
            )
        ), 
        cms.PSet(
            etaMax = cms.double(4.191),
            etaMin = cms.double(3.489),
            l1tCalibrationFactors = cms.vdouble(
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 22.6446171016, 20.5125237851, 18.9096163143, 19.6264810998, 
                21.0068368313, 23.0523217726, 26.2785604184, 30.3103046044, 34.9313275194, 
                39.3931844106, 43.3488875356, 48.4803086268, 59.4328197875, 82.5972291029, 
                114.115285978, 141.656915733, 161.147025234, 182.762630662, 209.627475248, 
                229.03719747, 227.122685185, 237.558201058, 249.011904762, 301.291666667, 
                271.65625, 243.03125, 326.625, float('inf')
            )
        ), 
        cms.PSet(
            etaMax = cms.double(5.191),
            etaMin = cms.double(4.191),
            l1tCalibrationFactors = cms.vdouble(
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 19.9973790323, 18.7233958626, 19.0354844999, 20.2562619616, 
                21.8848170727, 24.4047538346, 27.3838689353, 30.8225281734, 34.60470791, 
                39.1976611227, 43.9557705684, 47.9253810239, 57.1837291686, 77.2146849218, 
                102.883983524, 131.248104371, 147.631578947, 175.0, 199.875, 
                float('inf')
            )
        )
    ),
    inputCollectionTag = cms.InputTag("Phase1L1TJetProducer","UncalibratedPhase1L1TJetFromPfCandidates"),
    outputCollectionName = cms.string('Phase1L1TJetFromPfCandidates')
)


process.Phase1L1TJetProducer = cms.EDProducer("Phase1L1TJetProducer",
    etaBinning = cms.vdouble(
        -5.0, -4.917, -4.833, -4.75, -4.667, 
        -4.583, -4.5, -4.417, -4.333, -4.25, 
        -4.167, -4.083, -4.0, -3.917, -3.833, 
        -3.75, -3.667, -3.583, -3.5, -3.417, 
        -3.333, -3.25, -3.167, -3.083, -3.0, 
        -2.917, -2.833, -2.75, -2.667, -2.583, 
        -2.5, -2.417, -2.333, -2.25, -2.167, 
        -2.083, -2.0, -1.917, -1.833, -1.75, 
        -1.667, -1.583, -1.5, -1.417, -1.333, 
        -1.25, -1.167, -1.083, -1.0, -0.917, 
        -0.833, -0.75, -0.667, -0.583, -0.5, 
        -0.417, -0.333, -0.25, -0.167, -0.083, 
        0.0, 0.083, 0.167, 0.25, 0.333, 
        0.417, 0.5, 0.583, 0.667, 0.75, 
        0.833, 0.917, 1.0, 1.083, 1.167, 
        1.25, 1.333, 1.417, 1.5, 1.583, 
        1.667, 1.75, 1.833, 1.917, 2.0, 
        2.083, 2.167, 2.25, 2.333, 2.417, 
        2.5, 2.583, 2.667, 2.75, 2.833, 
        2.917, 3.0, 3.083, 3.167, 3.25, 
        3.333, 3.417, 3.5, 3.583, 3.667, 
        3.75, 3.833, 3.917, 4.0, 4.083, 
        4.167, 4.25, 4.333, 4.417, 4.5, 
        4.583, 4.667, 4.75, 4.833, 4.917, 
        5.0
    ),
    inputCollectionTag = cms.InputTag("l1pfCandidates","Puppi"),
    jetIEtaSize = cms.uint32(7),
    jetIPhiSize = cms.uint32(7),
    nBinsPhi = cms.uint32(72),
    outputCollectionName = cms.string('UncalibratedPhase1L1TJetFromPfCandidates'),
    phiLow = cms.double(-3.14159265359),
    phiUp = cms.double(3.14159265359),
    puSubtraction = cms.bool(False),
    seedPtThreshold = cms.double(5),
    vetoZeroPt = cms.bool(True)
)


process.PhotonIDProd = cms.EDProducer("PhotonIDProducer",
    DoEcalIsoRelativeCut = cms.bool(True),
    DoEcalRecHitIsolationCut = cms.bool(True),
    DoEtaWidthCut = cms.bool(True),
    DoHadOverEMCut = cms.bool(True),
    DoHcalTowerIsolationCut = cms.bool(True),
    DoHollowConeNTrkCut = cms.bool(False),
    DoHollowConeTrackIsolationCut = cms.bool(True),
    DoR9Cut = cms.bool(False),
    DoSolidConeNTrkCut = cms.bool(False),
    DoSolidConeTrackIsolationCut = cms.bool(False),
    LooseEMEcalIsoRelativeCutOffsetEB = cms.double(4.2),
    LooseEMEcalIsoRelativeCutOffsetEE = cms.double(4.2),
    LooseEMEcalIsoRelativeCutSlopeEB = cms.double(0.006),
    LooseEMEcalIsoRelativeCutSlopeEE = cms.double(0.006),
    LooseEMEtaWidthEB = cms.double(999999999),
    LooseEMEtaWidthEE = cms.double(999999999),
    LooseEMHadOverEMEB = cms.double(0.05),
    LooseEMHadOverEMEE = cms.double(0.05),
    LooseEMHcalTowerIsoOffsetEB = cms.double(2.2),
    LooseEMHcalTowerIsoOffsetEE = cms.double(2.2),
    LooseEMHcalTowerIsoSlopeEB = cms.double(0.0025),
    LooseEMHcalTowerIsoSlopeEE = cms.double(0.0025),
    LooseEMHollowNTrkEB = cms.int32(999999999),
    LooseEMHollowNTrkEE = cms.int32(999999999),
    LooseEMHollowTrkOffsetEB = cms.double(999999999),
    LooseEMHollowTrkOffsetEE = cms.double(999999999),
    LooseEMHollowTrkSlopeEB = cms.double(0.0),
    LooseEMHollowTrkSlopeEE = cms.double(0.0),
    LooseEMR9CutEB = cms.double(0.0),
    LooseEMR9CutEE = cms.double(0.0),
    LooseEMSolidNTrkEB = cms.int32(999999999),
    LooseEMSolidNTrkEE = cms.int32(999999999),
    LooseEMSolidTrkEB = cms.double(999999999),
    LooseEMSolidTrkEE = cms.double(999999999),
    LooseEMSolidTrkOffsetEB = cms.double(999999999),
    LooseEMSolidTrkOffsetEE = cms.double(999999999),
    LooseEMSolidTrkSlopeEB = cms.double(0.0),
    LooseEMSolidTrkSlopeEE = cms.double(0.0),
    LoosePhotonEcalIsoRelativeCutOffsetEB = cms.double(4.2),
    LoosePhotonEcalIsoRelativeCutOffsetEE = cms.double(4.2),
    LoosePhotonEcalIsoRelativeCutSlopeEB = cms.double(0.006),
    LoosePhotonEcalIsoRelativeCutSlopeEE = cms.double(0.006),
    LoosePhotonEtaWidthEB = cms.double(999999999),
    LoosePhotonEtaWidthEE = cms.double(999999999),
    LoosePhotonHadOverEMEB = cms.double(0.05),
    LoosePhotonHadOverEMEE = cms.double(0.05),
    LoosePhotonHcalTowerIsoOffsetEB = cms.double(2.2),
    LoosePhotonHcalTowerIsoOffsetEE = cms.double(2.2),
    LoosePhotonHcalTowerIsoSlopeEB = cms.double(0.0025),
    LoosePhotonHcalTowerIsoSlopeEE = cms.double(0.0025),
    LoosePhotonHollowNTrkEB = cms.int32(999999999),
    LoosePhotonHollowNTrkEE = cms.int32(999999999),
    LoosePhotonHollowTrkOffsetEB = cms.double(3.5),
    LoosePhotonHollowTrkOffsetEE = cms.double(3.5),
    LoosePhotonHollowTrkSlopeEB = cms.double(0.001),
    LoosePhotonHollowTrkSlopeEE = cms.double(0.001),
    LoosePhotonR9CutEB = cms.double(0.0),
    LoosePhotonR9CutEE = cms.double(0.0),
    LoosePhotonSolidNTrkEB = cms.int32(999999999),
    LoosePhotonSolidNTrkEE = cms.int32(999999999),
    LoosePhotonSolidTrkEB = cms.double(999999999),
    LoosePhotonSolidTrkEE = cms.double(999999999),
    LoosePhotonSolidTrkOffsetEB = cms.double(999999999),
    LoosePhotonSolidTrkOffsetEE = cms.double(999999999),
    LoosePhotonSolidTrkSlopeEB = cms.double(0.0),
    LoosePhotonSolidTrkSlopeEE = cms.double(0.0),
    RequireFiducial = cms.bool(False),
    TightPhotonEcalIsoRelativeCutOffsetEB = cms.double(4.2),
    TightPhotonEcalIsoRelativeCutOffsetEE = cms.double(4.2),
    TightPhotonEcalIsoRelativeCutSlopeEB = cms.double(0.006),
    TightPhotonEcalIsoRelativeCutSlopeEE = cms.double(0.006),
    TightPhotonEtaWidthEB = cms.double(0.013),
    TightPhotonEtaWidthEE = cms.double(0.03),
    TightPhotonHadOverEMEB = cms.double(0.05),
    TightPhotonHadOverEMEE = cms.double(0.05),
    TightPhotonHcalTowerIsoOffsetEB = cms.double(2.2),
    TightPhotonHcalTowerIsoOffsetEE = cms.double(2.2),
    TightPhotonHcalTowerIsoSlopeEB = cms.double(0.0025),
    TightPhotonHcalTowerIsoSlopeEE = cms.double(0.0025),
    TightPhotonHollowNTrkEB = cms.int32(999999999),
    TightPhotonHollowNTrkEE = cms.int32(999999999),
    TightPhotonHollowTrkOffsetEB = cms.double(2.0),
    TightPhotonHollowTrkOffsetEE = cms.double(2.0),
    TightPhotonHollowTrkSlopeEB = cms.double(0.001),
    TightPhotonHollowTrkSlopeEE = cms.double(0.001),
    TightPhotonR9CutEB = cms.double(0.0),
    TightPhotonR9CutEE = cms.double(0.0),
    TightPhotonSolidNTrkEB = cms.int32(999999999),
    TightPhotonSolidNTrkEE = cms.int32(999999999),
    TightPhotonSolidTrkEB = cms.double(999999999),
    TightPhotonSolidTrkEE = cms.double(999999999),
    TightPhotonSolidTrkOffsetEB = cms.double(999999999),
    TightPhotonSolidTrkOffsetEE = cms.double(999999999),
    TightPhotonSolidTrkSlopeEB = cms.double(0.0),
    TightPhotonSolidTrkSlopeEE = cms.double(0.0),
    doCutBased = cms.bool(True),
    photonCutBasedIDLooseEMLabel = cms.string('PhotonCutBasedIDLooseEM'),
    photonCutBasedIDLooseLabel = cms.string('PhotonCutBasedIDLoose'),
    photonCutBasedIDTightLabel = cms.string('PhotonCutBasedIDTight'),
    photonLabel = cms.string(''),
    photonProducer = cms.string('photons')
)


process.PhotonIDProdGED = cms.EDProducer("PhotonIDProducer",
    DoEcalIsoRelativeCut = cms.bool(True),
    DoEcalRecHitIsolationCut = cms.bool(True),
    DoEtaWidthCut = cms.bool(True),
    DoHadOverEMCut = cms.bool(True),
    DoHcalTowerIsolationCut = cms.bool(True),
    DoHollowConeNTrkCut = cms.bool(False),
    DoHollowConeTrackIsolationCut = cms.bool(True),
    DoR9Cut = cms.bool(False),
    DoSolidConeNTrkCut = cms.bool(False),
    DoSolidConeTrackIsolationCut = cms.bool(False),
    LooseEMEcalIsoRelativeCutOffsetEB = cms.double(4.2),
    LooseEMEcalIsoRelativeCutOffsetEE = cms.double(4.2),
    LooseEMEcalIsoRelativeCutSlopeEB = cms.double(0.006),
    LooseEMEcalIsoRelativeCutSlopeEE = cms.double(0.006),
    LooseEMEtaWidthEB = cms.double(999999999),
    LooseEMEtaWidthEE = cms.double(999999999),
    LooseEMHadOverEMEB = cms.double(0.05),
    LooseEMHadOverEMEE = cms.double(0.05),
    LooseEMHcalTowerIsoOffsetEB = cms.double(2.2),
    LooseEMHcalTowerIsoOffsetEE = cms.double(2.2),
    LooseEMHcalTowerIsoSlopeEB = cms.double(0.0025),
    LooseEMHcalTowerIsoSlopeEE = cms.double(0.0025),
    LooseEMHollowNTrkEB = cms.int32(999999999),
    LooseEMHollowNTrkEE = cms.int32(999999999),
    LooseEMHollowTrkOffsetEB = cms.double(999999999),
    LooseEMHollowTrkOffsetEE = cms.double(999999999),
    LooseEMHollowTrkSlopeEB = cms.double(0.0),
    LooseEMHollowTrkSlopeEE = cms.double(0.0),
    LooseEMR9CutEB = cms.double(0.0),
    LooseEMR9CutEE = cms.double(0.0),
    LooseEMSolidNTrkEB = cms.int32(999999999),
    LooseEMSolidNTrkEE = cms.int32(999999999),
    LooseEMSolidTrkEB = cms.double(999999999),
    LooseEMSolidTrkEE = cms.double(999999999),
    LooseEMSolidTrkOffsetEB = cms.double(999999999),
    LooseEMSolidTrkOffsetEE = cms.double(999999999),
    LooseEMSolidTrkSlopeEB = cms.double(0.0),
    LooseEMSolidTrkSlopeEE = cms.double(0.0),
    LoosePhotonEcalIsoRelativeCutOffsetEB = cms.double(4.2),
    LoosePhotonEcalIsoRelativeCutOffsetEE = cms.double(4.2),
    LoosePhotonEcalIsoRelativeCutSlopeEB = cms.double(0.006),
    LoosePhotonEcalIsoRelativeCutSlopeEE = cms.double(0.006),
    LoosePhotonEtaWidthEB = cms.double(999999999),
    LoosePhotonEtaWidthEE = cms.double(999999999),
    LoosePhotonHadOverEMEB = cms.double(0.05),
    LoosePhotonHadOverEMEE = cms.double(0.05),
    LoosePhotonHcalTowerIsoOffsetEB = cms.double(2.2),
    LoosePhotonHcalTowerIsoOffsetEE = cms.double(2.2),
    LoosePhotonHcalTowerIsoSlopeEB = cms.double(0.0025),
    LoosePhotonHcalTowerIsoSlopeEE = cms.double(0.0025),
    LoosePhotonHollowNTrkEB = cms.int32(999999999),
    LoosePhotonHollowNTrkEE = cms.int32(999999999),
    LoosePhotonHollowTrkOffsetEB = cms.double(3.5),
    LoosePhotonHollowTrkOffsetEE = cms.double(3.5),
    LoosePhotonHollowTrkSlopeEB = cms.double(0.001),
    LoosePhotonHollowTrkSlopeEE = cms.double(0.001),
    LoosePhotonR9CutEB = cms.double(0.0),
    LoosePhotonR9CutEE = cms.double(0.0),
    LoosePhotonSolidNTrkEB = cms.int32(999999999),
    LoosePhotonSolidNTrkEE = cms.int32(999999999),
    LoosePhotonSolidTrkEB = cms.double(999999999),
    LoosePhotonSolidTrkEE = cms.double(999999999),
    LoosePhotonSolidTrkOffsetEB = cms.double(999999999),
    LoosePhotonSolidTrkOffsetEE = cms.double(999999999),
    LoosePhotonSolidTrkSlopeEB = cms.double(0.0),
    LoosePhotonSolidTrkSlopeEE = cms.double(0.0),
    RequireFiducial = cms.bool(False),
    TightPhotonEcalIsoRelativeCutOffsetEB = cms.double(4.2),
    TightPhotonEcalIsoRelativeCutOffsetEE = cms.double(4.2),
    TightPhotonEcalIsoRelativeCutSlopeEB = cms.double(0.006),
    TightPhotonEcalIsoRelativeCutSlopeEE = cms.double(0.006),
    TightPhotonEtaWidthEB = cms.double(0.013),
    TightPhotonEtaWidthEE = cms.double(0.03),
    TightPhotonHadOverEMEB = cms.double(0.05),
    TightPhotonHadOverEMEE = cms.double(0.05),
    TightPhotonHcalTowerIsoOffsetEB = cms.double(2.2),
    TightPhotonHcalTowerIsoOffsetEE = cms.double(2.2),
    TightPhotonHcalTowerIsoSlopeEB = cms.double(0.0025),
    TightPhotonHcalTowerIsoSlopeEE = cms.double(0.0025),
    TightPhotonHollowNTrkEB = cms.int32(999999999),
    TightPhotonHollowNTrkEE = cms.int32(999999999),
    TightPhotonHollowTrkOffsetEB = cms.double(2.0),
    TightPhotonHollowTrkOffsetEE = cms.double(2.0),
    TightPhotonHollowTrkSlopeEB = cms.double(0.001),
    TightPhotonHollowTrkSlopeEE = cms.double(0.001),
    TightPhotonR9CutEB = cms.double(0.0),
    TightPhotonR9CutEE = cms.double(0.0),
    TightPhotonSolidNTrkEB = cms.int32(999999999),
    TightPhotonSolidNTrkEE = cms.int32(999999999),
    TightPhotonSolidTrkEB = cms.double(999999999),
    TightPhotonSolidTrkEE = cms.double(999999999),
    TightPhotonSolidTrkOffsetEB = cms.double(999999999),
    TightPhotonSolidTrkOffsetEE = cms.double(999999999),
    TightPhotonSolidTrkSlopeEB = cms.double(0.0),
    TightPhotonSolidTrkSlopeEE = cms.double(0.0),
    doCutBased = cms.bool(True),
    photonCutBasedIDLooseEMLabel = cms.string('PhotonCutBasedIDLooseEM'),
    photonCutBasedIDLooseLabel = cms.string('PhotonCutBasedIDLoose'),
    photonCutBasedIDTightLabel = cms.string('PhotonCutBasedIDTight'),
    photonLabel = cms.string(''),
    photonProducer = cms.string('gedPhotons')
)


process.PixelLayerPairs = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring(
        'BPix1+BPix2', 
        'BPix1+BPix3', 
        'BPix2+BPix3', 
        'BPix1+FPix1_pos', 
        'BPix1+FPix1_neg', 
        'BPix1+FPix2_pos', 
        'BPix1+FPix2_neg', 
        'BPix2+FPix1_pos', 
        'BPix2+FPix1_neg', 
        'BPix2+FPix2_pos', 
        'BPix2+FPix2_neg', 
        'FPix1_pos+FPix2_pos', 
        'FPix1_neg+FPix2_neg'
    ),
    mightGet = cms.optional.untracked.vstring
)


process.PixelLayerTriplets = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring(
        'BPix1+BPix2+BPix3', 
        'BPix2+BPix3+BPix4', 
        'BPix2+BPix3+FPix1_pos', 
        'BPix2+BPix3+FPix1_neg', 
        'BPix1+BPix2+FPix1_pos', 
        'BPix1+BPix2+FPix1_neg', 
        'BPix2+FPix1_pos+FPix2_pos', 
        'BPix2+FPix1_neg+FPix2_neg', 
        'BPix1+FPix1_pos+FPix2_pos', 
        'BPix1+FPix1_neg+FPix2_neg', 
        'BPix1+FPix2_pos+FPix3_pos', 
        'BPix1+FPix2_neg+FPix3_neg', 
        'FPix1_pos+FPix2_pos+FPix3_pos', 
        'FPix1_neg+FPix2_neg+FPix3_neg', 
        'FPix2_pos+FPix3_pos+FPix4_pos', 
        'FPix2_neg+FPix3_neg+FPix4_neg', 
        'FPix3_pos+FPix4_pos+FPix5_pos', 
        'FPix3_neg+FPix4_neg+FPix5_neg', 
        'FPix4_pos+FPix5_pos+FPix6_pos', 
        'FPix4_neg+FPix5_neg+FPix6_neg', 
        'FPix5_pos+FPix6_pos+FPix7_pos', 
        'FPix5_neg+FPix6_neg+FPix7_neg', 
        'FPix6_pos+FPix7_pos+FPix8_pos', 
        'FPix6_neg+FPix7_neg+FPix8_neg', 
        'FPix6_pos+FPix7_pos+FPix9_pos', 
        'FPix6_neg+FPix7_neg+FPix9_neg'
    ),
    mightGet = cms.optional.untracked.vstring
)


process.RecoTauCleaner = cms.EDProducer("RecoTauCleaner",
    cleaners = cms.VPSet(
        cms.PSet(
            name = cms.string('Charge'),
            nprongs = cms.vuint32(1, 3),
            passForCharge = cms.int32(1),
            plugin = cms.string('RecoTauChargeCleanerPlugin'),
            selectionFailValue = cms.double(0),
            tolerance = cms.double(0)
        ), 
        cms.PSet(
            name = cms.string('HPS_Select'),
            plugin = cms.string('RecoTauDiscriminantCleanerPlugin'),
            src = cms.InputTag("hpsSelectionDiscriminator"),
            tolerance = cms.double(0)
        ), 
        cms.PSet(
            minTrackPt = cms.double(5.0),
            name = cms.string('killSoftTwoProngTaus'),
            plugin = cms.string('RecoTauSoftTwoProngTausCleanerPlugin'),
            tolerance = cms.double(0)
        ), 
        cms.PSet(
            name = cms.string('ChargedHadronMultiplicity'),
            plugin = cms.string('RecoTauChargedHadronMultiplicityCleanerPlugin'),
            tolerance = cms.double(0)
        ), 
        cms.PSet(
            name = cms.string('Pt'),
            plugin = cms.string('RecoTauStringCleanerPlugin'),
            selection = cms.string('leadCand().isNonnull()'),
            selectionFailValue = cms.double(1000.0),
            selectionPassFunction = cms.string('-pt()'),
            tolerance = cms.double(0.01)
        ), 
        cms.PSet(
            name = cms.string('StripMultiplicity'),
            plugin = cms.string('RecoTauStringCleanerPlugin'),
            selection = cms.string('leadCand().isNonnull()'),
            selectionFailValue = cms.double(1000.0),
            selectionPassFunction = cms.string('-signalPiZeroCandidates().size()'),
            tolerance = cms.double(0)
        ), 
        cms.PSet(
            name = cms.string('CombinedIsolation'),
            plugin = cms.string('RecoTauStringCleanerPlugin'),
            selection = cms.string('leadCand().isNonnull()'),
            selectionFailValue = cms.double(1000.0),
            selectionPassFunction = cms.string('isolationPFChargedHadrCandsPtSum() + isolationPFGammaCandsEtSum()'),
            tolerance = cms.double(0)
        )
    ),
    outputSelection = cms.string(''),
    src = cms.InputTag("combinatoricRecoTaus"),
    verbosity = cms.int32(0)
)


process.RecoTauJetRegionProducer = cms.EDProducer("RecoTauJetRegionProducer",
    deltaR = cms.double(0.8),
    maxJetAbsEta = cms.double(4.0),
    minJetPt = cms.double(14.0),
    pfCandAssocMapSrc = cms.InputTag(""),
    pfCandSrc = cms.InputTag("particleFlow"),
    src = cms.InputTag("ak4PFJets"),
    verbosity = cms.int32(0)
)


process.RecoTauPiZeroUnembedder = cms.EDProducer("RecoTauPiZeroUnembedder",
    src = cms.InputTag("hpsPFTauProducerSansRefs")
)


process.SETMuonSeed = cms.EDProducer("SETMuonSeedProducer",
    SETTrajBuilderParameters = cms.PSet(
        Apply_prePruning = cms.bool(True),
        CSC_01 = cms.vdouble(
            0.155906, -0.000406, 0.0, 0.194022, -0.010181, 
            0.0
        ),
        CSC_01_1_scale = cms.vdouble(-1.915329, 0.0),
        CSC_02 = cms.vdouble(
            0.600235, -0.205683, 0.001113, 0.655625, -0.682129, 
            0.253916
        ),
        CSC_03 = cms.vdouble(
            0.498992, -0.086235, -0.025772, 2.761006, -2.667607, 
            0.72802
        ),
        CSC_12 = cms.vdouble(
            -0.363549, 0.569552, -0.173186, 7.777069, -10.203618, 
            3.478874
        ),
        CSC_12_1_scale = cms.vdouble(-6.434242, 0.0),
        CSC_12_2_scale = cms.vdouble(-1.63622, 0.0),
        CSC_12_3_scale = cms.vdouble(-1.63622, 0.0),
        CSC_13 = cms.vdouble(
            1.22495, -1.792358, 0.711378, 5.271848, -6.280625, 
            2.0142
        ),
        CSC_13_2_scale = cms.vdouble(-6.077936, 0.0),
        CSC_13_3_scale = cms.vdouble(-1.701268, 0.0),
        CSC_14 = cms.vdouble(
            0.952517, -0.532733, 0.084601, 1.615881, -1.630744, 
            0.514139
        ),
        CSC_14_3_scale = cms.vdouble(-1.969563, 0.0),
        CSC_23 = cms.vdouble(
            -0.095236, 0.122061, -0.029852, -11.396689, 15.933598, 
            -4.267065
        ),
        CSC_23_1_scale = cms.vdouble(-19.084285, 0.0),
        CSC_23_2_scale = cms.vdouble(-6.079917, 0.0),
        CSC_24 = cms.vdouble(
            -0.049769, 0.063087, -0.011029, -13.765978, 16.296143, 
            -4.241835
        ),
        CSC_24_1_scale = cms.vdouble(-6.055701, 0.0),
        CSC_34 = cms.vdouble(
            0.144321, -0.142283, 0.035636, 190.260708, -180.888643, 
            43.430395
        ),
        CSC_34_1_scale = cms.vdouble(-11.520507, 0.0),
        DT_12 = cms.vdouble(
            0.176182, 0.058535, -0.090549, 0.202363, -0.203126, 
            0.222219
        ),
        DT_12_1_scale = cms.vdouble(-3.692398, 0.0),
        DT_12_2_scale = cms.vdouble(-3.518165, 0.0),
        DT_13 = cms.vdouble(
            0.298842, 0.076531, -0.14293, 0.219923, -0.145026, 
            0.155638
        ),
        DT_13_1_scale = cms.vdouble(-4.520923, 0.0),
        DT_13_2_scale = cms.vdouble(-4.257687, 0.0),
        DT_14 = cms.vdouble(
            0.388423, 0.068698, -0.145925, 0.159515, 0.124299, 
            -0.133269
        ),
        DT_14_1_scale = cms.vdouble(-5.644816, 0.0),
        DT_14_2_scale = cms.vdouble(-4.808546, 0.0),
        DT_23 = cms.vdouble(
            0.120647, 0.034743, -0.070855, 0.302427, -0.21417, 
            0.261012
        ),
        DT_23_1_scale = cms.vdouble(-5.320346, 0.0),
        DT_23_2_scale = cms.vdouble(-5.117625, 0.0),
        DT_24 = cms.vdouble(
            0.189527, 0.037328, -0.088523, 0.251936, 0.032411, 
            0.010984
        ),
        DT_24_1_scale = cms.vdouble(-7.490909, 0.0),
        DT_24_2_scale = cms.vdouble(-6.63094, 0.0),
        DT_34 = cms.vdouble(
            0.049146, -0.003494, -0.010099, 0.672095, 0.36459, 
            -0.304346
        ),
        DT_34_1_scale = cms.vdouble(-13.783765, 0.0),
        DT_34_2_scale = cms.vdouble(-11.901897, 0.0),
        FilterParameters = cms.PSet(
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            EnableCSCMeasurement = cms.bool(True),
            EnableDTMeasurement = cms.bool(True),
            EnableRPCMeasurement = cms.bool(True),
            MinLocalSegmentAngle = cms.double(0.09),
            OutsideChamberErrorScale = cms.double(1.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
            maxActiveChambers = cms.int32(100)
        ),
        OL_1213 = cms.vdouble(
            0.960544, -0.75644, 0.0, 0.1636, 0.114178, 
            0.0
        ),
        OL_1213_0_scale = cms.vdouble(-4.488158, 0.0),
        OL_1222 = cms.vdouble(
            0.215915, 0.002556, 0.0, 0.313596, -0.021465, 
            0.0
        ),
        OL_1222_0_scale = cms.vdouble(-5.810449, 0.0),
        OL_1232 = cms.vdouble(
            0.162626, 0.000843, 0.0, 0.396271, 0.002791, 
            0.0
        ),
        OL_1232_0_scale = cms.vdouble(-5.964634, 0.0),
        OL_2213 = cms.vdouble(
            0.563218, -0.493991, 0.0, 0.943776, -0.591751, 
            0.0
        ),
        OL_2213_0_scale = cms.vdouble(-7.239789, 0.0),
        OL_2222 = cms.vdouble(
            0.087587, 0.005729, 0.0, 0.535169, -0.087675, 
            0.0
        ),
        OL_2222_0_scale = cms.vdouble(-7.667231, 0.0),
        SMB_10 = cms.vdouble(
            1.160532, 0.148991, 0.0, 0.182785, -0.093776, 
            0.0
        ),
        SMB_10_0_scale = cms.vdouble(2.448566, 0.0),
        SMB_11 = cms.vdouble(
            1.289468, -0.139653, 0.0, 0.137191, 0.01217, 
            0.0
        ),
        SMB_11_0_scale = cms.vdouble(2.56363, 0.0),
        SMB_12 = cms.vdouble(
            1.923091, -0.913204, 0.0, 0.161556, 0.020215, 
            0.0
        ),
        SMB_12_0_scale = cms.vdouble(2.283221, 0.0),
        SMB_20 = cms.vdouble(
            0.861314, -0.16233, 0.0, 0.248879, -0.113879, 
            0.0
        ),
        SMB_20_0_scale = cms.vdouble(1.486168, 0.0),
        SMB_21 = cms.vdouble(
            0.918425, -0.141199, 0.0, 0.254515, -0.111848, 
            0.0
        ),
        SMB_21_0_scale = cms.vdouble(1.58384, 0.0),
        SMB_22 = cms.vdouble(
            1.308565, -0.701634, 0.0, -0.302861, 0.675785, 
            0.0
        ),
        SMB_22_0_scale = cms.vdouble(1.346681, 0.0),
        SMB_30 = cms.vdouble(
            0.399628, 0.014922, 0.0, 0.665622, 0.358439, 
            0.0
        ),
        SMB_30_0_scale = cms.vdouble(-3.629838, 0.0),
        SMB_31 = cms.vdouble(
            0.398661, -0.024853, 0.0, 0.863324, -0.413048, 
            0.0
        ),
        SMB_31_0_scale = cms.vdouble(-3.323768, 0.0),
        SMB_32 = cms.vdouble(
            0.421649, -0.111654, 0.0, -0.044613, 1.134858, 
            0.0
        ),
        SMB_32_0_scale = cms.vdouble(-3.054156, 0.0),
        SME_11 = cms.vdouble(
            2.39479, -0.888663, 0.0, -4.604546, 3.623464, 
            0.0
        ),
        SME_11_0_scale = cms.vdouble(1.325085, 0.0),
        SME_12 = cms.vdouble(
            -0.277294, 0.7616, 0.0, -0.243326, 1.446792, 
            0.0
        ),
        SME_12_0_scale = cms.vdouble(2.279181, 0.0),
        SME_13 = cms.vdouble(
            0.398851, 0.028176, 0.0, 0.567015, 2.623232, 
            0.0
        ),
        SME_13_0_scale = cms.vdouble(0.104905, 0.0),
        SME_21 = cms.vdouble(
            0.64895, -0.148762, 0.0, -5.07676, 6.284227, 
            0.0
        ),
        SME_21_0_scale = cms.vdouble(-0.040862, 0.0),
        SME_22 = cms.vdouble(
            -0.624708, 0.641043, 0.0, 32.581295, -19.604264, 
            0.0
        ),
        SME_22_0_scale = cms.vdouble(-3.457901, 0.0),
        SME_31 = cms.vdouble(
            -0.588188, 0.316961, 0.0, -95.261732, 45.444051, 
            0.0
        ),
        SME_32 = cms.vdouble(
            -0.021912, -0.008995, 0.0, -49.779764, 30.780972, 
            0.0
        ),
        SME_41 = cms.vdouble(
            -0.187116, 0.076415, 0.0, -58.552583, 27.933864, 
            0.0
        ),
        SME_42 = cms.vdouble(
            -0.021912, -0.008995, 0.0, -49.779764, 30.780972, 
            0.0
        ),
        UseSegmentsInTrajectory = cms.bool(False),
        scaleDT = cms.bool(True)
    ),
    ServiceParameters = cms.PSet(
        CSCLayers = cms.untracked.bool(True),
        GEMLayers = cms.untracked.bool(True),
        ME0Layers = cms.bool(True),
        Propagators = cms.untracked.vstring(
            'SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'
        ),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    beamSpotTag = cms.InputTag("offlineBeamSpot")
)


process.TTClusterAssociatorFromPixelDigis = cms.EDProducer("TTClusterAssociator_Phase2TrackerDigi_",
    TTClusters = cms.VInputTag(cms.InputTag("TTClustersFromPhase2TrackerDigis","ClusterInclusive"), cms.InputTag("TTStubsFromPhase2TrackerDigis","ClusterAccepted")),
    digiSimLinks = cms.InputTag("mix","Tracker"),
    trackingParts = cms.InputTag("mix","MergedTrackTruth")
)


process.TTClustersFromPhase2TrackerDigis = cms.EDProducer("TTClusterBuilder_Phase2TrackerDigi_",
    ADCThreshold = cms.uint32(30),
    rawHits = cms.VInputTag(cms.InputTag("mix","Tracker")),
    storeLocalCoord = cms.bool(True)
)


process.TTStubAssociatorFromPixelDigis = cms.EDProducer("TTStubAssociator_Phase2TrackerDigi_",
    TTClusterTruth = cms.VInputTag(cms.InputTag("TTClusterAssociatorFromPixelDigis","ClusterAccepted"), cms.InputTag("TTClusterAssociatorFromPixelDigis","ClusterInclusive")),
    TTStubs = cms.VInputTag(cms.InputTag("TTStubsFromPhase2TrackerDigis","StubAccepted"), cms.InputTag("TTStubsFromPhase2TrackerDigis","StubRejected"))
)


process.TTStubsFromPhase2TrackerDigis = cms.EDProducer("TTStubBuilder_Phase2TrackerDigi_",
    CBClimit = cms.uint32(3),
    FEineffs = cms.bool(False),
    MPAlimit = cms.uint32(5),
    OnlyOnePerInputCluster = cms.bool(True),
    PS10GCIClimit = cms.uint32(35),
    PS5GCIClimit = cms.uint32(17),
    SS5GCIClimit = cms.uint32(16),
    TEDD1Max10GRing = cms.uint32(3),
    TEDD2Max10GRing = cms.uint32(0),
    TTClusters = cms.InputTag("TTClustersFromPhase2TrackerDigis","ClusterInclusive")
)


process.TTTrackAssociatorFromPixelDigis = cms.EDProducer("TTTrackAssociator_Phase2TrackerDigi_",
    TTClusterTruth = cms.InputTag("TTClusterAssociatorFromPixelDigis","ClusterAccepted"),
    TTStubTruth = cms.InputTag("TTStubAssociatorFromPixelDigis","StubAccepted"),
    TTTrackAllowOneFalse2SStub = cms.bool(True),
    TTTracks = cms.VInputTag(cms.InputTag("TTTracksFromTrackletEmulation","Level1TTTracks"))
)


process.TTTrackAssociatorFromPixelDigisExtended = cms.EDProducer("TTTrackAssociator_Phase2TrackerDigi_",
    TTClusterTruth = cms.InputTag("TTClusterAssociatorFromPixelDigis","ClusterAccepted"),
    TTStubTruth = cms.InputTag("TTStubAssociatorFromPixelDigis","StubAccepted"),
    TTTrackAllowOneFalse2SStub = cms.bool(True),
    TTTracks = cms.VInputTag(cms.InputTag("TTTracksFromExtendedTrackletEmulation","Level1TTTracks"))
)


process.TTTracksFromExtendedTrackletEmulation = cms.EDProducer("L1FPGATrackProducer",
    BeamSpotSource = cms.InputTag("offlineBeamSpot"),
    DTCLinkFile = cms.FileInPath('L1Trigger/TrackFindingTracklet/data/calcNumDTCLinks.txt'),
    DTCLinkLayerDiskFile = cms.FileInPath('L1Trigger/TrackFindingTracklet/data/dtclinklayerdisk.dat'),
    Extended = cms.bool(True),
    Hnpar = cms.uint32(5),
    MCTruthClusterInputTag = cms.InputTag("TTClusterAssociatorFromPixelDigis","ClusterAccepted"),
    MCTruthStubInputTag = cms.InputTag("TTStubAssociatorFromPixelDigis","StubAccepted"),
    TTStubSource = cms.InputTag("TTStubsFromPhase2TrackerDigis","StubAccepted"),
    TrackingParticleInputTag = cms.InputTag("mix","MergedTrackTruth"),
    TrackingVertexInputTag = cms.InputTag("mix","MergedTrackTruth"),
    asciiFileName = cms.untracked.string(''),
    fitPatternFile = cms.FileInPath('L1Trigger/TrackFindingTracklet/data/fitpattern.txt'),
    memoryModulesFile = cms.FileInPath('L1Trigger/TrackFindingTracklet/data/memorymodules_hourglassExtended.dat'),
    moduleCablingFile = cms.FileInPath('L1Trigger/TrackFindingTracklet/data/modules_T5v3_27SP_nonant_tracklet.dat'),
    processingModulesFile = cms.FileInPath('L1Trigger/TrackFindingTracklet/data/processingmodules_hourglassExtended.dat'),
    readMoreMcTruth = cms.bool(True),
    tableTEDFile = cms.FileInPath('L1Trigger/TrackFindingTracklet/data/table_TED/table_TED_D1PHIA1_D2PHIA1.txt'),
    tableTREFile = cms.FileInPath('L1Trigger/TrackFindingTracklet/data/table_TRE/table_TRE_D1AD2A_1.txt'),
    wiresFile = cms.FileInPath('L1Trigger/TrackFindingTracklet/data/wires_hourglassExtended.dat')
)


process.TTTracksFromTrackletEmulation = cms.EDProducer("L1FPGATrackProducer",
    BeamSpotSource = cms.InputTag("offlineBeamSpot"),
    DTCLinkFile = cms.FileInPath('L1Trigger/TrackFindingTracklet/data/calcNumDTCLinks.txt'),
    DTCLinkLayerDiskFile = cms.FileInPath('L1Trigger/TrackFindingTracklet/data/dtclinklayerdisk.dat'),
    Extended = cms.bool(False),
    Hnpar = cms.uint32(4),
    MCTruthClusterInputTag = cms.InputTag("TTClusterAssociatorFromPixelDigis","ClusterAccepted"),
    MCTruthStubInputTag = cms.InputTag("TTStubAssociatorFromPixelDigis","StubAccepted"),
    TTStubSource = cms.InputTag("TTStubsFromPhase2TrackerDigis","StubAccepted"),
    TrackingParticleInputTag = cms.InputTag("mix","MergedTrackTruth"),
    TrackingVertexInputTag = cms.InputTag("mix","MergedTrackTruth"),
    asciiFileName = cms.untracked.string(''),
    fitPatternFile = cms.FileInPath('L1Trigger/TrackFindingTracklet/data/fitpattern.txt'),
    memoryModulesFile = cms.FileInPath('L1Trigger/TrackFindingTracklet/data/memorymodules_hourglass.dat'),
    moduleCablingFile = cms.FileInPath('L1Trigger/TrackFindingTracklet/data/modules_T5v3_27SP_nonant_tracklet.dat'),
    processingModulesFile = cms.FileInPath('L1Trigger/TrackFindingTracklet/data/processingmodules_hourglass.dat'),
    readMoreMcTruth = cms.bool(True),
    wiresFile = cms.FileInPath('L1Trigger/TrackFindingTracklet/data/wires_hourglass.dat')
)


process.TrackCollectionMerger = cms.EDProducer("TrackCollectionMerger",
    allowFirstHitShare = cms.bool(True),
    copyExtras = cms.untracked.bool(True),
    copyTrajectories = cms.untracked.bool(False),
    enableMerging = cms.bool(True),
    foundHitBonus = cms.double(10),
    inputClassifiers = cms.vstring(),
    lostHitPenalty = cms.double(5),
    mightGet = cms.optional.untracked.vstring,
    minQuality = cms.string('loose'),
    minShareHits = cms.uint32(2),
    shareFrac = cms.double(0.19),
    trackAlgoPriorityOrder = cms.string('trackAlgoPriorityOrder'),
    trackProducers = cms.VInputTag()
)


process.TrackCutClassifier = cms.EDProducer("TrackCutClassifier",
    beamspot = cms.InputTag("offlineBeamSpot"),
    ignoreVertices = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    mva = cms.PSet(
        dr_par = cms.PSet(
            d0err = cms.vdouble(0.003, 0.003, 0.003),
            d0err_par = cms.vdouble(0.001, 0.001, 0.001),
            drWPVerr_par = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
            dr_exp = cms.vint32(2147483647, 2147483647, 2147483647),
            dr_par1 = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
            dr_par2 = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38)
        ),
        dz_par = cms.PSet(
            dzWPVerr_par = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
            dz_exp = cms.vint32(2147483647, 2147483647, 2147483647),
            dz_par1 = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
            dz_par2 = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38)
        ),
        isHLT = cms.bool(False),
        maxChi2 = cms.vdouble(9999, 25, 16),
        maxChi2n = cms.vdouble(9999, 1, 0.4),
        maxDr = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
        maxDz = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
        maxDzWrtBS = cms.vdouble(3.40282346639e+38, 24, 15),
        maxLostLayers = cms.vint32(99, 3, 3),
        maxRelPtErr = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
        min3DLayers = cms.vint32(1, 2, 3),
        minHits = cms.vint32(0, 0, 1),
        minHits4pass = cms.vint32(2147483647, 2147483647, 2147483647),
        minLayers = cms.vint32(3, 4, 5),
        minNVtxTrk = cms.int32(2),
        minNdof = cms.vdouble(-1, -1, -1),
        minPixelHits = cms.vint32(0, 0, 1)
    ),
    qualityCuts = cms.vdouble(-0.7, 0.1, 0.7),
    src = cms.InputTag(""),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.TrackLwtnnClassifier = cms.EDProducer("TrackLwtnnClassifier",
    beamspot = cms.InputTag("offlineBeamSpot"),
    ignoreVertices = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    mva = cms.PSet(
        lwtnnLabel = cms.string('trackSelectionLwtnn')
    ),
    qualityCuts = cms.vdouble(-0.7, 0.1, 0.7),
    src = cms.InputTag(""),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.TrackMVAClassifierDetached = cms.EDProducer("TrackMVAClassifierDetached",
    beamspot = cms.InputTag("offlineBeamSpot"),
    ignoreVertices = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    mva = cms.PSet(
        GBRForestFileName = cms.string(''),
        GBRForestLabel = cms.string('')
    ),
    qualityCuts = cms.vdouble(-0.7, 0.1, 0.7),
    src = cms.InputTag(""),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.TrackMVAClassifierPrompt = cms.EDProducer("TrackMVAClassifierPrompt",
    beamspot = cms.InputTag("offlineBeamSpot"),
    ignoreVertices = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    mva = cms.PSet(
        GBRForestFileName = cms.string(''),
        GBRForestLabel = cms.string('')
    ),
    qualityCuts = cms.vdouble(-0.7, 0.1, 0.7),
    src = cms.InputTag(""),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.TrackProducer = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('undefAlgorithm'),
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("ckfTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.TrackerDTCProducer = cms.EDProducer("trackerDTC::ProducerED",
    BranchAccepted = cms.string('StubAccepted'),
    BranchLost = cms.string('StubLost'),
    CheckHistory = cms.bool(False),
    EnableTruncation = cms.bool(True),
    InputTag = cms.InputTag("TTStubsFromPhase2TrackerDigis","StubAccepted"),
    UseHybrid = cms.bool(True)
)


process.ak4CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(True),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    puPtMin = cms.double(10),
    rParam = cms.double(0.4),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("towerMaker"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak4CaloJetsForTrk = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(True),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    puPtMin = cms.double(10),
    rParam = cms.double(0.4),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("caloTowerForTrk"),
    srcPVs = cms.InputTag("firstStepPrimaryVerticesUnsorted"),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak4CaloJetsForTrkPreSplitting = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(True),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    puPtMin = cms.double(10),
    rParam = cms.double(0.4),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("caloTowerForTrkPreSplitting"),
    srcPVs = cms.InputTag("firstStepPrimaryVerticesPreSplitting"),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak4CaloJetsPUCorr = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doPUOffsetCorr = cms.bool(True),
    doPVCorrection = cms.bool(True),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    puPtMin = cms.double(10),
    rParam = cms.double(0.4),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("towerMaker"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak4JetExtender = cms.EDProducer("JetExtender",
    coneSize = cms.double(0.4),
    jet2TracksAtCALO = cms.InputTag("ak4JetTracksAssociatorAtCaloFace"),
    jet2TracksAtVX = cms.InputTag("ak4JetTracksAssociatorAtVertex"),
    jets = cms.InputTag("ak4CaloJets")
)


process.ak4JetID = cms.EDProducer("JetIDProducer",
    ebRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    eeRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    hbheRecHitsColl = cms.InputTag("hbhereco"),
    hfRecHitsColl = cms.InputTag("hfreco"),
    hoRecHitsColl = cms.InputTag("horeco"),
    rpcRecHits = cms.InputTag("rpcRecHits"),
    src = cms.InputTag("ak4CaloJets"),
    useRecHits = cms.bool(True)
)


process.ak4JetTracksAssociatorAtCaloFace = cms.EDProducer("JetTracksAssociatorAtCaloFace",
    coneSize = cms.double(0.4),
    extrapolations = cms.InputTag("trackExtrapolator"),
    jets = cms.InputTag("ak4CaloJets"),
    trackQuality = cms.string('goodIterative'),
    tracks = cms.InputTag("generalTracks")
)


process.ak4JetTracksAssociatorAtVertex = cms.EDProducer("JetTracksAssociatorAtVertex",
    coneSize = cms.double(0.4),
    jets = cms.InputTag("ak4CaloJets"),
    pvSrc = cms.InputTag("offlinePrimaryVertices"),
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False)
)


process.ak4JetTracksAssociatorAtVertexJPT = cms.EDProducer("JetTracksAssociatorAtVertex",
    coneSize = cms.double(0.4),
    jets = cms.InputTag("ak4CaloJets"),
    pvSrc = cms.InputTag("offlinePrimaryVertices"),
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(True)
)


process.ak4JetTracksAssociatorAtVertexPF = cms.EDProducer("JetTracksAssociatorAtVertex",
    coneSize = cms.double(0.4),
    jets = cms.InputTag("ak4PFJetsCHS"),
    pvSrc = cms.InputTag("offlinePrimaryVertices"),
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False)
)


process.ak4JetTracksAssociatorExplicit = cms.EDProducer("JetTracksAssociatorExplicit",
    coneSize = cms.double(0.4),
    jets = cms.InputTag("ak4PFJetsCHS"),
    pvSrc = cms.InputTag("offlinePrimaryVertices"),
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False)
)


process.ak4PFCHSL1FastL2L3Corrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4PFCHSL1FastjetCorrector", "ak4PFCHSL2RelativeCorrector", "ak4PFCHSL3AbsoluteCorrector")
)


process.ak4PFCHSL1FastjetCorrector = cms.EDProducer("L1FastjetCorrectorProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAll")
)


process.ak4PFCHSL2RelativeCorrector = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L2Relative')
)


process.ak4PFCHSL3AbsoluteCorrector = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L3Absolute')
)


process.ak4PFJetTracksAssociatorAtVertex = cms.EDProducer("JetTracksAssociatorAtVertex",
    coneSize = cms.double(0.4),
    jets = cms.InputTag("ak4PFJets"),
    pvSrc = cms.InputTag("offlinePrimaryVertices"),
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False)
)


process.ak4PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(5.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    rParam = cms.double(0.4),
    src = cms.InputTag("particleFlow"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak4PFJetsCHS = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(5.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    rParam = cms.double(0.4),
    src = cms.InputTag("pfNoPileUpJME"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak4PFJetsCS = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    csRParam = cms.double(0.4),
    csRho_EtaMax = cms.double(4.4),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(100.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    rParam = cms.double(0.4),
    src = cms.InputTag("particleFlow"),
    srcPVs = cms.InputTag(""),
    useConstituentSubtraction = cms.bool(True),
    useDeterministicSeed = cms.bool(True),
    useExplicitGhosts = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak4PFJetsLegacyHPSPiZeros = cms.EDProducer("RecoTauPiZeroProducer",
    builders = cms.VPSet(cms.PSet(
        applyElecTrackQcuts = cms.bool(False),
        makeCombinatoricStrips = cms.bool(False),
        maxStripBuildIterations = cms.int32(-1),
        minGammaEtStripAdd = cms.double(1.0),
        minGammaEtStripSeed = cms.double(1.0),
        minStripEt = cms.double(1.0),
        name = cms.string('s'),
        plugin = cms.string('RecoTauPiZeroStripPlugin2'),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                maxDeltaZ = cms.double(0.15),
                maxTrackChi2 = cms.double(100.0),
                maxTransverseImpactParameter = cms.double(0.05),
                minGammaEt = cms.double(1.5),
                minTrackHits = cms.uint32(8),
                minTrackPixelHits = cms.uint32(0),
                minTrackPt = cms.double(1.0),
                minTrackVertexWeight = cms.double(-1.0)
            ),
            leadingTrkOrPFCandOption = cms.string('leadPFCand'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            pvFindingAlgo = cms.string('closestInDeltaZ'),
            recoverLeadingTrk = cms.bool(False),
            signalQualityCuts = cms.PSet(
                maxDeltaZ = cms.double(0.4),
                maxTrackChi2 = cms.double(100.0),
                maxTransverseImpactParameter = cms.double(0.1),
                minGammaEt = cms.double(1.0),
                minNeutralHadronEt = cms.double(30.0),
                minTrackHits = cms.uint32(3),
                minTrackPixelHits = cms.uint32(0),
                minTrackPt = cms.double(0.5),
                minTrackVertexWeight = cms.double(-1.0)
            ),
            vertexTrackFiltering = cms.bool(False),
            vxAssocQualityCuts = cms.PSet(
                maxTrackChi2 = cms.double(100.0),
                maxTransverseImpactParameter = cms.double(0.1),
                minGammaEt = cms.double(1.0),
                minTrackHits = cms.uint32(3),
                minTrackPixelHits = cms.uint32(0),
                minTrackPt = cms.double(0.5),
                minTrackVertexWeight = cms.double(-1.0)
            )
        ),
        stripCandidatesParticleIds = cms.vint32(2, 4),
        stripEtaAssociationDistance = cms.double(0.05),
        stripPhiAssociationDistance = cms.double(0.2),
        updateStripAfterEachDaughter = cms.bool(False),
        verbosity = cms.int32(0)
    )),
    jetSrc = cms.InputTag("ak4PFJets"),
    massHypothesis = cms.double(0.136),
    maxJetAbsEta = cms.double(4.0),
    mightGet = cms.optional.untracked.vstring,
    minJetPt = cms.double(14.0),
    outputSelection = cms.string('pt > 0'),
    ranking = cms.VPSet(cms.PSet(
        name = cms.string('InStrip'),
        plugin = cms.string('RecoTauPiZeroStringQuality'),
        selection = cms.string('algoIs("kStrips")'),
        selectionFailValue = cms.double(1000),
        selectionPassFunction = cms.string('abs(mass() - 0.13579)')
    )),
    verbosity = cms.int32(0)
)


process.ak4PFJetsPuppi = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(True),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(5.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    rParam = cms.double(0.4),
    src = cms.InputTag("particleFlow"),
    srcPVs = cms.InputTag(""),
    srcWeights = cms.InputTag("puppi"),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak4PFJetsRecoTauChargedHadrons = cms.EDProducer("PFRecoTauChargedHadronProducer",
    builders = cms.VPSet(
        cms.PSet(
            chargedHadronCandidatesParticleIds = cms.vint32(1, 2, 3),
            dRmergeNeutralHadronWrtChargedHadron = cms.double(0.005),
            dRmergeNeutralHadronWrtElectron = cms.double(0.05),
            dRmergeNeutralHadronWrtNeutralHadron = cms.double(0.01),
            dRmergeNeutralHadronWrtOther = cms.double(0.005),
            dRmergePhotonWrtChargedHadron = cms.double(0.005),
            dRmergePhotonWrtElectron = cms.double(0.005),
            dRmergePhotonWrtNeutralHadron = cms.double(0.01),
            dRmergePhotonWrtOther = cms.double(0.005),
            maxUnmatchedBlockElementsNeutralHadron = cms.int32(1),
            maxUnmatchedBlockElementsPhoton = cms.int32(1),
            minBlockElementMatchesNeutralHadron = cms.int32(2),
            minBlockElementMatchesPhoton = cms.int32(2),
            minMergeChargedHadronPt = cms.double(100.0),
            minMergeGammaEt = cms.double(1.0),
            minMergeNeutralHadronEt = cms.double(1.0),
            name = cms.string('chargedPFCandidates'),
            plugin = cms.string('PFRecoTauChargedHadronFromPFCandidatePlugin'),
            qualityCuts = cms.PSet(
                isolationQualityCuts = cms.PSet(
                    maxDeltaZ = cms.double(0.15),
                    maxTrackChi2 = cms.double(100.0),
                    maxTransverseImpactParameter = cms.double(0.05),
                    minGammaEt = cms.double(1.5),
                    minTrackHits = cms.uint32(8),
                    minTrackPixelHits = cms.uint32(0),
                    minTrackPt = cms.double(1.0),
                    minTrackVertexWeight = cms.double(-1.0)
                ),
                leadingTrkOrPFCandOption = cms.string('leadPFCand'),
                primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
                pvFindingAlgo = cms.string('closestInDeltaZ'),
                recoverLeadingTrk = cms.bool(False),
                signalQualityCuts = cms.PSet(
                    maxDeltaZ = cms.double(0.4),
                    maxTrackChi2 = cms.double(100.0),
                    maxTransverseImpactParameter = cms.double(0.1),
                    minGammaEt = cms.double(1.0),
                    minNeutralHadronEt = cms.double(30.0),
                    minTrackHits = cms.uint32(3),
                    minTrackPixelHits = cms.uint32(0),
                    minTrackPt = cms.double(0.5),
                    minTrackVertexWeight = cms.double(-1.0)
                ),
                vertexTrackFiltering = cms.bool(False),
                vxAssocQualityCuts = cms.PSet(
                    maxTrackChi2 = cms.double(100.0),
                    maxTransverseImpactParameter = cms.double(0.1),
                    minGammaEt = cms.double(1.0),
                    minTrackHits = cms.uint32(3),
                    minTrackPixelHits = cms.uint32(0),
                    minTrackPt = cms.double(0.5),
                    minTrackVertexWeight = cms.double(-1.0)
                )
            ),
            verbosity = cms.int32(0)
        ), 
        cms.PSet(
            dRcone = cms.double(0.5),
            dRconeLimitedToJetArea = cms.bool(False),
            dRmergeNeutralHadron = cms.double(0.1),
            dRmergePhoton = cms.double(0.05),
            minMergeChargedHadronPt = cms.double(100.0),
            minMergeGammaEt = cms.double(1.0),
            minMergeNeutralHadronEt = cms.double(1.0),
            name = cms.string('tracks'),
            plugin = cms.string('PFRecoTauChargedHadronFromTrackPlugin'),
            qualityCuts = cms.PSet(
                isolationQualityCuts = cms.PSet(
                    maxDeltaZ = cms.double(0.15),
                    maxTrackChi2 = cms.double(100.0),
                    maxTransverseImpactParameter = cms.double(0.05),
                    minGammaEt = cms.double(1.5),
                    minTrackHits = cms.uint32(8),
                    minTrackPixelHits = cms.uint32(0),
                    minTrackPt = cms.double(1.0),
                    minTrackVertexWeight = cms.double(-1.0)
                ),
                leadingTrkOrPFCandOption = cms.string('leadPFCand'),
                primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
                pvFindingAlgo = cms.string('closestInDeltaZ'),
                recoverLeadingTrk = cms.bool(False),
                signalQualityCuts = cms.PSet(
                    maxDeltaZ = cms.double(0.4),
                    maxTrackChi2 = cms.double(100.0),
                    maxTransverseImpactParameter = cms.double(0.1),
                    minGammaEt = cms.double(1.0),
                    minNeutralHadronEt = cms.double(30.0),
                    minTrackHits = cms.uint32(3),
                    minTrackPixelHits = cms.uint32(0),
                    minTrackPt = cms.double(0.5),
                    minTrackVertexWeight = cms.double(-1.0)
                ),
                vertexTrackFiltering = cms.bool(False),
                vxAssocQualityCuts = cms.PSet(
                    maxTrackChi2 = cms.double(100.0),
                    maxTransverseImpactParameter = cms.double(0.1),
                    minGammaEt = cms.double(1.0),
                    minTrackHits = cms.uint32(3),
                    minTrackPixelHits = cms.uint32(0),
                    minTrackPt = cms.double(0.5),
                    minTrackVertexWeight = cms.double(-1.0)
                )
            ),
            srcTracks = cms.InputTag("generalTracks"),
            verbosity = cms.int32(0)
        ), 
        cms.PSet(
            chargedHadronCandidatesParticleIds = cms.vint32(5),
            dRmergeNeutralHadronWrtChargedHadron = cms.double(0.005),
            dRmergeNeutralHadronWrtElectron = cms.double(0.05),
            dRmergeNeutralHadronWrtNeutralHadron = cms.double(0.01),
            dRmergeNeutralHadronWrtOther = cms.double(0.005),
            dRmergePhotonWrtChargedHadron = cms.double(0.005),
            dRmergePhotonWrtElectron = cms.double(0.005),
            dRmergePhotonWrtNeutralHadron = cms.double(0.01),
            dRmergePhotonWrtOther = cms.double(0.005),
            maxUnmatchedBlockElementsNeutralHadron = cms.int32(1),
            maxUnmatchedBlockElementsPhoton = cms.int32(1),
            minBlockElementMatchesNeutralHadron = cms.int32(2),
            minBlockElementMatchesPhoton = cms.int32(2),
            minMergeChargedHadronPt = cms.double(0.0),
            minMergeGammaEt = cms.double(1.0),
            minMergeNeutralHadronEt = cms.double(1.0),
            name = cms.string('PFNeutralHadrons'),
            plugin = cms.string('PFRecoTauChargedHadronFromPFCandidatePlugin'),
            qualityCuts = cms.PSet(
                isolationQualityCuts = cms.PSet(
                    maxDeltaZ = cms.double(0.15),
                    maxTrackChi2 = cms.double(100.0),
                    maxTransverseImpactParameter = cms.double(0.05),
                    minGammaEt = cms.double(1.5),
                    minTrackHits = cms.uint32(8),
                    minTrackPixelHits = cms.uint32(0),
                    minTrackPt = cms.double(1.0),
                    minTrackVertexWeight = cms.double(-1.0)
                ),
                leadingTrkOrPFCandOption = cms.string('leadPFCand'),
                primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
                pvFindingAlgo = cms.string('closestInDeltaZ'),
                recoverLeadingTrk = cms.bool(False),
                signalQualityCuts = cms.PSet(
                    maxDeltaZ = cms.double(0.4),
                    maxTrackChi2 = cms.double(100.0),
                    maxTransverseImpactParameter = cms.double(0.1),
                    minGammaEt = cms.double(1.0),
                    minNeutralHadronEt = cms.double(30.0),
                    minTrackHits = cms.uint32(3),
                    minTrackPixelHits = cms.uint32(0),
                    minTrackPt = cms.double(0.5),
                    minTrackVertexWeight = cms.double(-1.0)
                ),
                vertexTrackFiltering = cms.bool(False),
                vxAssocQualityCuts = cms.PSet(
                    maxTrackChi2 = cms.double(100.0),
                    maxTransverseImpactParameter = cms.double(0.1),
                    minGammaEt = cms.double(1.0),
                    minTrackHits = cms.uint32(3),
                    minTrackPixelHits = cms.uint32(0),
                    minTrackPt = cms.double(0.5),
                    minTrackVertexWeight = cms.double(-1.0)
                )
            ),
            verbosity = cms.int32(0)
        )
    ),
    jetSrc = cms.InputTag("ak4PFJets"),
    maxJetAbsEta = cms.double(4.0),
    mightGet = cms.optional.untracked.vstring,
    minJetPt = cms.double(14.0),
    outputSelection = cms.string('pt > 0.5'),
    ranking = cms.VPSet(
        cms.PSet(
            name = cms.string('ChargedPFCandidate'),
            plugin = cms.string('PFRecoTauChargedHadronStringQuality'),
            selection = cms.string("algoIs(\'kChargedPFCandidate\')"),
            selectionFailValue = cms.double(1000.0),
            selectionPassFunction = cms.string('-pt')
        ), 
        cms.PSet(
            name = cms.string('ChargedPFCandidate'),
            plugin = cms.string('PFRecoTauChargedHadronStringQuality'),
            selection = cms.string("algoIs(\'kTrack\')"),
            selectionFailValue = cms.double(1000.0),
            selectionPassFunction = cms.string('-pt')
        ), 
        cms.PSet(
            name = cms.string('ChargedPFCandidate'),
            plugin = cms.string('PFRecoTauChargedHadronStringQuality'),
            selection = cms.string("algoIs(\'kPFNeutralHadron\')"),
            selectionFailValue = cms.double(1000.0),
            selectionPassFunction = cms.string('-pt')
        )
    ),
    verbosity = cms.int32(0)
)


process.ak4PFJetsSK = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(5.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    rParam = cms.double(0.4),
    src = cms.InputTag("softKiller"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    useExplicitGhosts = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak4PFL1Calo = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(5.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    rParam = cms.double(0.4),
    src = cms.InputTag("l1pfCandidates","Calo"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak4PFL1CaloCorrected = cms.EDProducer("L1TCorrectedPFJetProducer",
    copyDaughters = cms.bool(False),
    correctorDir = cms.string('L1CaloJets'),
    correctorFile = cms.string('L1Trigger/Phase2L1ParticleFlow/data/jecs/jecs.PU200_110X.root'),
    jets = cms.InputTag("ak4PFL1Calo")
)


process.ak4PFL1FastL2L3Corrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4PFL1FastjetCorrector", "ak4PFL2RelativeCorrector", "ak4PFL3AbsoluteCorrector")
)


process.ak4PFL1FastjetCorrector = cms.EDProducer("L1FastjetCorrectorProducer",
    algorithm = cms.string('AK4PF'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAll")
)


process.ak4PFL1PF = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(5.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    rParam = cms.double(0.4),
    src = cms.InputTag("l1pfCandidates","PF"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak4PFL1PFCorrected = cms.EDProducer("L1TCorrectedPFJetProducer",
    copyDaughters = cms.bool(False),
    correctorDir = cms.string('L1PFJets'),
    correctorFile = cms.string('L1Trigger/Phase2L1ParticleFlow/data/jecs/jecs.PU200_110X.root'),
    jets = cms.InputTag("ak4PFL1PF")
)


process.ak4PFL1Puppi = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(5.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    rParam = cms.double(0.4),
    src = cms.InputTag("l1pfCandidates","Puppi"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak4PFL1PuppiCorrected = cms.EDProducer("L1TCorrectedPFJetProducer",
    copyDaughters = cms.bool(False),
    correctorDir = cms.string('L1PuppiJets'),
    correctorFile = cms.string('L1Trigger/Phase2L1ParticleFlow/data/jecs/jecs.PU200_110X.root'),
    jets = cms.InputTag("ak4PFL1Puppi")
)


process.ak4PFL2RelativeCorrector = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK4PF'),
    level = cms.string('L2Relative')
)


process.ak4PFL3AbsoluteCorrector = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK4PF'),
    level = cms.string('L3Absolute')
)


process.ak4TrackJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    DxyTrVtxMax = cms.double(0.2),
    DzTrVtxMax = cms.double(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    MaxVtxZ = cms.double(15.0),
    MinVtxNdof = cms.int32(5),
    UseOnlyOnePV = cms.bool(False),
    UseOnlyVertexTracks = cms.bool(False),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(3.0),
    jetType = cms.string('TrackJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    rParam = cms.double(0.4),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("trackRefsForJets"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak5CastorJetID = cms.EDProducer("CastorJetIDProducer",
    src = cms.InputTag("ak5CastorJets")
)


process.ak5CastorJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    doAreaFastjet = cms.bool(False),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(True),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(0.0),
    jetType = cms.string('BasicJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    nSigmaPU = cms.double(1.0),
    rParam = cms.double(0.5),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("CastorTowerReco"),
    srcPVs = cms.InputTag("offlinePrimaryVertices")
)


process.ak7CastorJetID = cms.EDProducer("CastorJetIDProducer",
    src = cms.InputTag("ak7CastorJets")
)


process.ak7CastorJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    doAreaFastjet = cms.bool(False),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(True),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(0.0),
    jetType = cms.string('BasicJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    nSigmaPU = cms.double(1.0),
    rParam = cms.double(0.7),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("CastorTowerReco"),
    srcPVs = cms.InputTag("offlinePrimaryVertices")
)


process.ak7JetExtender = cms.EDProducer("JetExtender",
    coneSize = cms.double(0.7),
    jet2TracksAtCALO = cms.InputTag("ak7JetTracksAssociatorAtCaloFace"),
    jet2TracksAtVX = cms.InputTag("ak7JetTracksAssociatorAtVertex"),
    jets = cms.InputTag("ak7CaloJets")
)


process.ak7JetTracksAssociatorAtCaloFace = cms.EDProducer("JetTracksAssociatorAtCaloFace",
    coneSize = cms.double(0.5),
    extrapolations = cms.InputTag("trackExtrapolator"),
    jets = cms.InputTag("ak7CaloJets"),
    trackQuality = cms.string('goodIterative'),
    tracks = cms.InputTag("generalTracks")
)


process.ak7JetTracksAssociatorAtVertex = cms.EDProducer("JetTracksAssociatorAtVertex",
    coneSize = cms.double(0.5),
    jets = cms.InputTag("ak7CaloJets"),
    pvSrc = cms.InputTag("offlinePrimaryVertices"),
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False)
)


process.ak7JetTracksAssociatorAtVertexPF = cms.EDProducer("JetTracksAssociatorAtVertex",
    coneSize = cms.double(0.5),
    jets = cms.InputTag("ak7PFJetsCHS"),
    pvSrc = cms.InputTag("offlinePrimaryVertices"),
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False)
)


process.ak8PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(50.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    rParam = cms.double(0.8),
    src = cms.InputTag("particleFlow"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak8PFJetsCHS = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(50.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    rParam = cms.double(0.8),
    src = cms.InputTag("pfNoPileUpJME"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak8PFJetsCHSConstituents = cms.EDProducer("PFJetConstituentSelector",
    cut = cms.string('pt > 100.0 && abs(rapidity()) < 2.4'),
    src = cms.InputTag("ak8PFJetsCHS")
)


process.ak8PFJetsCHSFiltered = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetCollInstanceName = cms.string('SubJets'),
    jetPtMin = cms.double(100.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nFilt = cms.int32(3),
    rFilt = cms.double(0.3),
    rParam = cms.double(0.8),
    src = cms.InputTag("ak8PFJetsCHSConstituents","constituents"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    useExplicitGhosts = cms.bool(True),
    useFiltering = cms.bool(True),
    voronoiRfact = cms.double(-0.9),
    writeCompound = cms.bool(True)
)


process.ak8PFJetsCHSMassDropFiltered = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetCollInstanceName = cms.string('SubJets'),
    jetPtMin = cms.double(100.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    muCut = cms.double(0.667),
    rParam = cms.double(0.8),
    src = cms.InputTag("ak8PFJetsCHSConstituents","constituents"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    useMassDropTagger = cms.bool(True),
    voronoiRfact = cms.double(-0.9),
    writeCompound = cms.bool(True),
    yCut = cms.double(0.08)
)


process.ak8PFJetsCHSPruned = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetCollInstanceName = cms.string('SubJets'),
    jetPtMin = cms.double(100.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nFilt = cms.int32(2),
    rParam = cms.double(0.8),
    rcut_factor = cms.double(0.5),
    src = cms.InputTag("ak8PFJetsCHSConstituents","constituents"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    useExplicitGhosts = cms.bool(True),
    usePruning = cms.bool(True),
    voronoiRfact = cms.double(-0.9),
    writeCompound = cms.bool(True),
    zcut = cms.double(0.1)
)


process.ak8PFJetsCHSSoftDrop = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    R0 = cms.double(0.8),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    beta = cms.double(0.0),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetCollInstanceName = cms.string('SubJets'),
    jetPtMin = cms.double(100.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    rParam = cms.double(0.8),
    src = cms.InputTag("ak8PFJetsCHSConstituents","constituents"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    useExplicitGhosts = cms.bool(True),
    useSoftDrop = cms.bool(True),
    voronoiRfact = cms.double(-0.9),
    writeCompound = cms.bool(True),
    zcut = cms.double(0.1)
)


process.ak8PFJetsCHSTrimmed = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(100.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    rFilt = cms.double(0.2),
    rParam = cms.double(0.8),
    src = cms.InputTag("ak8PFJetsCHSConstituents","constituents"),
    srcPVs = cms.InputTag(""),
    trimPtFracMin = cms.double(0.03),
    useDeterministicSeed = cms.bool(True),
    useExplicitGhosts = cms.bool(True),
    useTrimming = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak8PFJetsCS = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    csRParam = cms.double(0.4),
    csRho_EtaMax = cms.double(4.4),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(100.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    rParam = cms.double(0.8),
    src = cms.InputTag("particleFlow"),
    srcPVs = cms.InputTag(""),
    useConstituentSubtraction = cms.bool(True),
    useDeterministicSeed = cms.bool(True),
    useExplicitGhosts = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak8PFJetsCSConstituents = cms.EDProducer("PFJetConstituentSelector",
    cut = cms.string('pt > 100.0'),
    src = cms.InputTag("ak8PFJetsCS")
)


process.ak8PFJetsPuppi = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(True),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(50.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    rParam = cms.double(0.8),
    src = cms.InputTag("particleFlow"),
    srcPVs = cms.InputTag(""),
    srcWeights = cms.InputTag("puppi"),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak8PFJetsPuppiConstituents = cms.EDProducer("PFJetConstituentSelector",
    cut = cms.string('pt > 100.0 && abs(rapidity()) < 2.4'),
    src = cms.InputTag("ak8PFJetsPuppi")
)


process.ak8PFJetsPuppiSoftDrop = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    R0 = cms.double(0.8),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(True),
    beta = cms.double(0.0),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetCollInstanceName = cms.string('SubJets'),
    jetPtMin = cms.double(100.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    rParam = cms.double(0.8),
    src = cms.InputTag("ak8PFJetsPuppiConstituents","constituents"),
    srcPVs = cms.InputTag(""),
    srcWeights = cms.InputTag("puppi"),
    useDeterministicSeed = cms.bool(True),
    useExplicitGhosts = cms.bool(True),
    useSoftDrop = cms.bool(True),
    voronoiRfact = cms.double(-0.9),
    writeCompound = cms.bool(True),
    zcut = cms.double(0.1)
)


process.ak8PFJetsPuppiSoftDropMass = cms.EDProducer("RecoJetDeltaRValueMapProducer",
    distMax = cms.double(0.8),
    matched = cms.InputTag("ak8PFJetsPuppiSoftDrop"),
    src = cms.InputTag("ak8PFJetsPuppi"),
    value = cms.string('mass')
)


process.akCs4PFJets = cms.EDProducer("CSJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.005),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.5),
    applyWeight = cms.bool(False),
    csAlpha = cms.double(2.0),
    csRParam = cms.double(-1.0),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doFastJetNonUniform = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(True),
    etaMap = cms.InputTag("hiFJRhoProducer","mapEtaEdges"),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetCollInstanceName = cms.string('pfParticlesCs'),
    jetPtMin = cms.double(0.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    puCenters = cms.vdouble(
        -5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5
    ),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.4),
    rho = cms.InputTag("hiFJRhoProducer","mapToRho"),
    rhom = cms.InputTag("hiFJRhoProducer","mapToRhoM"),
    src = cms.InputTag("particleFlow"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    useExplicitGhosts = cms.bool(True),
    voronoiRfact = cms.double(-0.9),
    writeJetsWithConst = cms.bool(True)
)


process.akPu3PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.5),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doFastJetNonUniform = cms.bool(True),
    doPUOffsetCorr = cms.bool(True),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(True),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10),
    jetType = cms.string('BasicJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    puCenters = cms.vdouble(
        -5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5
    ),
    puPtMin = cms.double(15),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.3),
    src = cms.InputTag("PFTowers"),
    srcPVs = cms.InputTag(""),
    subtractorName = cms.string('MultipleAlgoIterator'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.akPu4CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doFastJetNonUniform = cms.bool(True),
    doPUOffsetCorr = cms.bool(True),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(
        -5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5
    ),
    puPtMin = cms.double(8),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.4),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("towerMaker"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    subtractorName = cms.string('MultipleAlgoIterator'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.akPu4PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.5),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doFastJetNonUniform = cms.bool(True),
    doPUOffsetCorr = cms.bool(True),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(True),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10),
    jetType = cms.string('BasicJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    puCenters = cms.vdouble(
        -5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5
    ),
    puPtMin = cms.double(20),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.4),
    src = cms.InputTag("PFTowers"),
    srcPVs = cms.InputTag(""),
    subtractorName = cms.string('MultipleAlgoIterator'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.allConversions = cms.EDProducer("ConversionProducer",
    AlgorithmName = cms.string('mixed'),
    AllowD0 = cms.bool(True),
    AllowDeltaCot = cms.bool(True),
    AllowDeltaPhi = cms.bool(False),
    AllowMinApproach = cms.bool(True),
    AllowOppCharge = cms.bool(True),
    AllowRightBC = cms.bool(False),
    AllowSingleLeg = cms.bool(False),
    AllowTrackBC = cms.bool(False),
    AllowVertex = cms.bool(True),
    DeltaCotTheta = cms.double(0.1),
    DeltaPhi = cms.double(0.2),
    EnergyBC = cms.double(0.3),
    EnergyTotalBC = cms.double(0.3),
    HalfwayEta = cms.double(0.1),
    MaxChi2Left = cms.double(10.0),
    MaxChi2Right = cms.double(10.0),
    MinApproachHigh = cms.double(1.0),
    MinApproachLow = cms.double(-0.25),
    MinHitsLeft = cms.int32(4),
    MinHitsRight = cms.int32(2),
    UsePvtx = cms.bool(True),
    bcBarrelCollection = cms.InputTag("particleFlowSuperClusterECAL","particleFlowBasicClusterECALBarrel"),
    bcEndcapCollection = cms.InputTag("particleFlowSuperClusterECAL","particleFlowBasicClusterECALEndcap"),
    bypassPreselEcal = cms.bool(False),
    bypassPreselEcalEcal = cms.bool(True),
    bypassPreselGsf = cms.bool(False),
    convertedPhotonCollection = cms.string(''),
    d0 = cms.double(0.0),
    dEtaTrackBC = cms.double(0.2),
    dEtacutForSCmatching = cms.double(0.03),
    dPhiTrackBC = cms.double(1.0),
    dPhicutForSCmatching = cms.double(0.05),
    deltaEta = cms.double(0.4),
    dz = cms.double(5.0),
    maxDelta = cms.double(0.01),
    maxNbrOfIterations = cms.int32(40),
    maxNumOfTrackInPU = cms.int32(999999),
    maxReducedChiSq = cms.double(225.0),
    maxTrackRho = cms.double(120.0),
    maxTrackZ = cms.double(300.0),
    minChiSqImprovement = cms.double(50.0),
    minSCEt = cms.double(10.0),
    primaryVertexProducer = cms.InputTag("offlinePrimaryVerticesWithBS"),
    rCut = cms.double(2.0),
    scBarrelProducer = cms.InputTag("particleFlowSuperClusterECAL","particleFlowSuperClusterECALBarrel"),
    scEndcapProducer = cms.InputTag("particleFlowSuperClusterECAL","particleFlowSuperClusterECALEndcapWithPreshower"),
    src = cms.InputTag("gsfGeneralInOutOutInConversionTrackMerger"),
    vtxChi2 = cms.double(0.0005)
)


process.allConversionsOldEG = cms.EDProducer("ConversionProducer",
    AlgorithmName = cms.string('mixed'),
    AllowD0 = cms.bool(True),
    AllowDeltaCot = cms.bool(True),
    AllowDeltaPhi = cms.bool(False),
    AllowMinApproach = cms.bool(True),
    AllowOppCharge = cms.bool(True),
    AllowRightBC = cms.bool(False),
    AllowSingleLeg = cms.bool(False),
    AllowTrackBC = cms.bool(False),
    AllowVertex = cms.bool(True),
    DeltaCotTheta = cms.double(0.1),
    DeltaPhi = cms.double(0.2),
    EnergyBC = cms.double(0.3),
    EnergyTotalBC = cms.double(0.3),
    HalfwayEta = cms.double(0.1),
    MaxChi2Left = cms.double(10.0),
    MaxChi2Right = cms.double(10.0),
    MinApproachHigh = cms.double(1.0),
    MinApproachLow = cms.double(-0.25),
    MinHitsLeft = cms.int32(4),
    MinHitsRight = cms.int32(2),
    UsePvtx = cms.bool(True),
    bcBarrelCollection = cms.InputTag("hybridSuperClusters","hybridBarrelBasicClusters"),
    bcEndcapCollection = cms.InputTag("multi5x5SuperClusters","multi5x5EndcapBasicClusters"),
    bypassPreselEcal = cms.bool(False),
    bypassPreselEcalEcal = cms.bool(True),
    bypassPreselGsf = cms.bool(False),
    convertedPhotonCollection = cms.string(''),
    d0 = cms.double(0.0),
    dEtaTrackBC = cms.double(0.2),
    dEtacutForSCmatching = cms.double(0.03),
    dPhiTrackBC = cms.double(1.0),
    dPhicutForSCmatching = cms.double(0.05),
    deltaEta = cms.double(0.4),
    dz = cms.double(5.0),
    maxDelta = cms.double(0.01),
    maxNbrOfIterations = cms.int32(40),
    maxNumOfTrackInPU = cms.int32(999999),
    maxReducedChiSq = cms.double(225.0),
    maxTrackRho = cms.double(120.0),
    maxTrackZ = cms.double(300.0),
    minChiSqImprovement = cms.double(50.0),
    minSCEt = cms.double(10.0),
    primaryVertexProducer = cms.InputTag("offlinePrimaryVerticesWithBS"),
    rCut = cms.double(2.0),
    scBarrelProducer = cms.InputTag("correctedHybridSuperClusters"),
    scEndcapProducer = cms.InputTag("correctedMulti5x5SuperClustersWithPreshower"),
    src = cms.InputTag("gsfGeneralInOutOutInConversionTrackMerger"),
    vtxChi2 = cms.double(0.0005)
)


process.ancientMuonSeed = cms.EDProducer("MuonSeedGenerator",
    CSCRecSegmentLabel = cms.InputTag("cscSegments"),
    CSC_01 = cms.vdouble(
        0.166, 0.0, 0.0, 0.031, 0.0, 
        0.0
    ),
    CSC_01_1_scale = cms.vdouble(-1.915329, 0.0),
    CSC_02 = cms.vdouble(
        0.612, -0.207, -0.0, 0.067, -0.001, 
        0.0
    ),
    CSC_03 = cms.vdouble(
        0.787, -0.338, 0.029, 0.101, -0.008, 
        0.0
    ),
    CSC_12 = cms.vdouble(
        -0.161, 0.254, -0.047, 0.042, -0.007, 
        0.0
    ),
    CSC_12_1_scale = cms.vdouble(-6.434242, 0.0),
    CSC_12_2_scale = cms.vdouble(-1.63622, 0.0),
    CSC_12_3_scale = cms.vdouble(-1.63622, 0.0),
    CSC_13 = cms.vdouble(
        0.901, -1.302, 0.533, 0.045, 0.005, 
        0.0
    ),
    CSC_13_2_scale = cms.vdouble(-6.077936, 0.0),
    CSC_13_3_scale = cms.vdouble(-1.701268, 0.0),
    CSC_14 = cms.vdouble(
        0.606, -0.181, -0.002, 0.111, -0.003, 
        0.0
    ),
    CSC_14_3_scale = cms.vdouble(-1.969563, 0.0),
    CSC_23 = cms.vdouble(
        -0.081, 0.113, -0.029, 0.015, 0.008, 
        0.0
    ),
    CSC_23_1_scale = cms.vdouble(-19.084285, 0.0),
    CSC_23_2_scale = cms.vdouble(-6.079917, 0.0),
    CSC_24 = cms.vdouble(
        0.004, 0.021, -0.002, 0.053, 0.0, 
        0.0
    ),
    CSC_24_1_scale = cms.vdouble(-6.055701, 0.0),
    CSC_34 = cms.vdouble(
        0.062, -0.067, 0.019, 0.021, 0.003, 
        0.0
    ),
    CSC_34_1_scale = cms.vdouble(-11.520507, 0.0),
    DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
    DT_12 = cms.vdouble(
        0.183, 0.054, -0.087, 0.028, 0.002, 
        0.0
    ),
    DT_12_1_scale = cms.vdouble(-3.692398, 0.0),
    DT_12_2_scale = cms.vdouble(-3.518165, 0.0),
    DT_13 = cms.vdouble(
        0.315, 0.068, -0.127, 0.051, -0.002, 
        0.0
    ),
    DT_13_1_scale = cms.vdouble(-4.520923, 0.0),
    DT_13_2_scale = cms.vdouble(-4.257687, 0.0),
    DT_14 = cms.vdouble(
        0.359, 0.052, -0.107, 0.072, -0.004, 
        0.0
    ),
    DT_14_1_scale = cms.vdouble(-5.644816, 0.0),
    DT_14_2_scale = cms.vdouble(-4.808546, 0.0),
    DT_23 = cms.vdouble(
        0.13, 0.023, -0.057, 0.028, 0.004, 
        0.0
    ),
    DT_23_1_scale = cms.vdouble(-5.320346, 0.0),
    DT_23_2_scale = cms.vdouble(-5.117625, 0.0),
    DT_24 = cms.vdouble(
        0.176, 0.014, -0.051, 0.051, 0.003, 
        0.0
    ),
    DT_24_1_scale = cms.vdouble(-7.490909, 0.0),
    DT_24_2_scale = cms.vdouble(-6.63094, 0.0),
    DT_34 = cms.vdouble(
        0.044, 0.004, -0.013, 0.029, 0.003, 
        0.0
    ),
    DT_34_1_scale = cms.vdouble(-13.783765, 0.0),
    DT_34_2_scale = cms.vdouble(-11.901897, 0.0),
    EnableCSCMeasurement = cms.bool(True),
    EnableDTMeasurement = cms.bool(True),
    EnableME0Measurement = cms.bool(True),
    ME0RecSegmentLabel = cms.InputTag("me0Segments"),
    OL_1213 = cms.vdouble(
        0.96, -0.737, 0.0, 0.052, 0.0, 
        0.0
    ),
    OL_1213_0_scale = cms.vdouble(-4.488158, 0.0),
    OL_1222 = cms.vdouble(
        0.848, -0.591, 0.0, 0.062, 0.0, 
        0.0
    ),
    OL_1222_0_scale = cms.vdouble(-5.810449, 0.0),
    OL_1232 = cms.vdouble(
        0.184, 0.0, 0.0, 0.066, 0.0, 
        0.0
    ),
    OL_1232_0_scale = cms.vdouble(-5.964634, 0.0),
    OL_2213 = cms.vdouble(
        0.117, 0.0, 0.0, 0.044, 0.0, 
        0.0
    ),
    OL_2213_0_scale = cms.vdouble(-7.239789, 0.0),
    OL_2222 = cms.vdouble(
        0.107, 0.0, 0.0, 0.04, 0.0, 
        0.0
    ),
    OL_2222_0_scale = cms.vdouble(-7.667231, 0.0),
    SMB_10 = cms.vdouble(
        1.387, -0.038, 0.0, 0.19, 0.0, 
        0.0
    ),
    SMB_10_0_scale = cms.vdouble(2.448566, 0.0),
    SMB_11 = cms.vdouble(
        1.247, 0.72, -0.802, 0.229, -0.075, 
        0.0
    ),
    SMB_11_0_scale = cms.vdouble(2.56363, 0.0),
    SMB_12 = cms.vdouble(
        2.128, -0.956, 0.0, 0.199, 0.0, 
        0.0
    ),
    SMB_12_0_scale = cms.vdouble(2.283221, 0.0),
    SMB_20 = cms.vdouble(
        1.011, -0.052, 0.0, 0.188, 0.0, 
        0.0
    ),
    SMB_20_0_scale = cms.vdouble(1.486168, 0.0),
    SMB_21 = cms.vdouble(
        1.043, -0.124, 0.0, 0.183, 0.0, 
        0.0
    ),
    SMB_21_0_scale = cms.vdouble(1.58384, 0.0),
    SMB_22 = cms.vdouble(
        1.474, -0.758, 0.0, 0.185, 0.0, 
        0.0
    ),
    SMB_22_0_scale = cms.vdouble(1.346681, 0.0),
    SMB_30 = cms.vdouble(
        0.505, -0.022, 0.0, 0.215, 0.0, 
        0.0
    ),
    SMB_30_0_scale = cms.vdouble(-3.629838, 0.0),
    SMB_31 = cms.vdouble(
        0.549, -0.145, 0.0, 0.207, 0.0, 
        0.0
    ),
    SMB_31_0_scale = cms.vdouble(-3.323768, 0.0),
    SMB_32 = cms.vdouble(
        0.67, -0.327, 0.0, 0.22, 0.0, 
        0.0
    ),
    SMB_32_0_scale = cms.vdouble(-3.054156, 0.0),
    SME_11 = cms.vdouble(
        3.295, -1.527, 0.112, 0.378, 0.02, 
        0.0
    ),
    SME_11_0_scale = cms.vdouble(1.325085, 0.0),
    SME_12 = cms.vdouble(
        0.102, 0.599, 0.0, 0.38, 0.0, 
        0.0
    ),
    SME_12_0_scale = cms.vdouble(2.279181, 0.0),
    SME_13 = cms.vdouble(
        -1.286, 1.711, 0.0, 0.356, 0.0, 
        0.0
    ),
    SME_13_0_scale = cms.vdouble(0.104905, 0.0),
    SME_21 = cms.vdouble(
        -0.529, 1.194, -0.358, 0.472, 0.086, 
        0.0
    ),
    SME_21_0_scale = cms.vdouble(-0.040862, 0.0),
    SME_22 = cms.vdouble(
        -1.207, 1.491, -0.251, 0.189, 0.243, 
        0.0
    ),
    SME_22_0_scale = cms.vdouble(-3.457901, 0.0),
    SME_31 = cms.vdouble(
        -1.594, 1.482, -0.317, 0.487, 0.097, 
        0.0
    ),
    SME_32 = cms.vdouble(
        -0.901, 1.333, -0.47, 0.41, 0.073, 
        0.0
    ),
    SME_41 = cms.vdouble(
        -0.003, 0.005, 0.005, 0.608, 0.076, 
        0.0
    ),
    SME_42 = cms.vdouble(
        -0.003, 0.005, 0.005, 0.608, 0.076, 
        0.0
    ),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    crackEtas = cms.vdouble(0.2, 1.6, 1.7),
    crackWindow = cms.double(0.04),
    deltaEtaCrackSearchWindow = cms.double(0.25),
    deltaEtaSearchWindow = cms.double(0.2),
    deltaPhiSearchWindow = cms.double(0.25),
    scaleDT = cms.bool(True)
)


process.bToCharmDecayVertexMerged = cms.EDProducer("BtoCharmDecayVertexMerger",
    maxDRUnique = cms.double(0.4),
    maxPtreltomerge = cms.double(7777.0),
    maxvecSumIMifsmallDRUnique = cms.double(5.5),
    minCosPAtomerge = cms.double(0.99),
    primaryVertices = cms.InputTag("offlinePrimaryVertices"),
    secondaryVertices = cms.InputTag("inclusiveSecondaryVerticesFiltered")
)


process.beamhaloTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('BeamHaloNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('CkfTrajectoryBuilderBeamHalo')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('BeamHaloPropagatorAlong'),
        propagatorOppositeTISE = cms.string('BeamHaloPropagatorOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    reverseTrajectories = cms.bool(False),
    src = cms.InputTag("beamhaloTrackerSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.beamhaloTrackerSeedingLayers = cms.EDProducer("SeedingLayersEDProducer",
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelPairs')
    ),
    MTEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(7),
        minRing = cms.int32(5),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        useRingSlector = cms.bool(False)
    ),
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(2),
        minRing = cms.int32(1),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        useRingSlector = cms.bool(True)
    ),
    TID = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        useRingSlector = cms.bool(False)
    ),
    layerList = cms.vstring(
        'FPix1_pos+FPix2_pos', 
        'FPix1_neg+FPix2_neg', 
        'TID2_pos+TID3_pos', 
        'TID2_neg+TID3_neg', 
        'TEC1_neg+TEC2_neg', 
        'TEC1_pos+TEC2_pos', 
        'TEC2_neg+TEC3_neg', 
        'TEC2_pos+TEC3_pos', 
        'TEC3_neg+TEC4_neg', 
        'TEC3_pos+TEC4_pos', 
        'TEC4_neg+TEC5_neg', 
        'TEC4_pos+TEC5_pos', 
        'TEC5_neg+TEC6_neg', 
        'TEC5_pos+TEC6_pos', 
        'MTEC7_neg+MTEC8_neg', 
        'MTEC7_pos+MTEC8_pos', 
        'MTEC8_neg+MTEC9_neg', 
        'MTEC8_pos+MTEC9_pos'
    )
)


process.beamhaloTrackerSeeds = cms.EDProducer("CtfSpecialSeedGenerator",
    Charges = cms.vint32(-1, 1),
    CheckHitsAreOnDifferentLayers = cms.bool(False),
    ClusterCollectionLabel = cms.InputTag("siStripClusters"),
    ErrorRescaling = cms.double(50.0),
    MaxNumberOfCosmicClusters = cms.uint32(10000),
    MaxNumberOfPixelClusters = cms.uint32(10000),
    OrderedHitsFactoryPSets = cms.VPSet(
        cms.PSet(
            ComponentName = cms.string('BeamHaloPairGenerator'),
            LayerSrc = cms.InputTag("beamhaloTrackerSeedingLayers"),
            NavigationDirection = cms.string('outsideIn'),
            PropagationDirection = cms.string('alongMomentum'),
            maxTheta = cms.double(0.1)
        ), 
        cms.PSet(
            ComponentName = cms.string('BeamHaloPairGenerator'),
            LayerSrc = cms.InputTag("beamhaloTrackerSeedingLayers"),
            NavigationDirection = cms.string('outsideIn'),
            PropagationDirection = cms.string('oppositeToMomentum'),
            maxTheta = cms.double(0.1)
        )
    ),
    PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducer'),
        RegionPSet = cms.PSet(
            originHalfLength = cms.double(21.2),
            originRadius = cms.double(0.2),
            originXPos = cms.double(0.0),
            originYPos = cms.double(0.0),
            originZPos = cms.double(0.0),
            precise = cms.bool(True),
            ptMin = cms.double(0.9),
            useMultipleScattering = cms.bool(False)
        )
    ),
    SeedMomentum = cms.double(15.0),
    SeedsFromNegativeY = cms.bool(False),
    SeedsFromPositiveY = cms.bool(False),
    SetMomentum = cms.bool(True),
    TTRHBuilder = cms.string('WithTrackAngle'),
    UseScintillatorsConstraint = cms.bool(False),
    doClusterCheck = cms.bool(True),
    maxSeeds = cms.int32(10000),
    requireBOFF = cms.bool(False)
)


process.beamhaloTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('beamhalo'),
    Fitter = cms.string('KFFittingSmootherBH'),
    GeometricInnerState = cms.bool(True),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('BeamHaloNavigationSchool'),
    Propagator = cms.string('BeamHaloPropagatorAlong'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('beamhaloTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("beamhaloTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.bmtfDigis = cms.EDProducer("L1TRawToDigi",
    FWId = cms.uint32(1),
    FedIds = cms.vint32(1376, 1377),
    InputLabel = cms.InputTag("rawDataCollector"),
    Setup = cms.string('stage2::BMTFSetup'),
    lenAMC13Header = cms.untracked.int32(8),
    lenAMC13Trailer = cms.untracked.int32(8),
    lenAMCHeader = cms.untracked.int32(8),
    lenAMCTrailer = cms.untracked.int32(0),
    lenSlinkHeader = cms.untracked.int32(8),
    lenSlinkTrailer = cms.untracked.int32(8)
)


process.boostedJetMXNetJetTagsProducer = cms.EDProducer("BoostedJetMXNetJetTagsProducer",
    debugMode = cms.untracked.bool(False),
    flav_names = cms.vstring(
        'probTbcq', 
        'probTbqq', 
        'probTbc', 
        'probTbq', 
        'probTbel', 
        'probTbmu', 
        'probTbta', 
        'probWcq', 
        'probWqq', 
        'probZbb', 
        'probZcc', 
        'probZqq', 
        'probHbb', 
        'probHcc', 
        'probHqqqq', 
        'probQCDbb', 
        'probQCDcc', 
        'probQCDb', 
        'probQCDc', 
        'probQCDothers'
    ),
    mightGet = cms.optional.untracked.vstring,
    model_path = cms.FileInPath('RecoBTag/Combined/data/ParticleNetAK8/General/V00/ParticleNet-symbol.json'),
    param_path = cms.FileInPath('RecoBTag/Combined/data/ParticleNetAK8/General/V00/ParticleNet-0000.params'),
    preprocessParams = cms.PSet(

    ),
    src = cms.InputTag("pfParticleNetTagInfos")
)


process.bunchSpacingProducer = cms.EDProducer("BunchSpacingProducer")


process.ca15PFJetsCHSFiltered = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('CambridgeAachen'),
    jetCollInstanceName = cms.string('SubJets'),
    jetPtMin = cms.double(100.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nFilt = cms.int32(3),
    rFilt = cms.double(0.3),
    rParam = cms.double(1.5),
    src = cms.InputTag("ak8PFJetsCHSConstituents","constituents"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    useExplicitGhosts = cms.bool(True),
    useFiltering = cms.bool(True),
    voronoiRfact = cms.double(-0.9),
    writeCompound = cms.bool(True)
)


process.ca15PFJetsCHSMassDropFiltered = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('CambridgeAachen'),
    jetCollInstanceName = cms.string('SubJets'),
    jetPtMin = cms.double(100.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    muCut = cms.double(0.667),
    rParam = cms.double(1.5),
    src = cms.InputTag("ak8PFJetsCHSConstituents","constituents"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    useMassDropTagger = cms.bool(True),
    voronoiRfact = cms.double(-0.9),
    writeCompound = cms.bool(True),
    yCut = cms.double(0.08)
)


process.caloLayer1Digis = cms.EDProducer("L1TRawToDigi",
    CTP7 = cms.untracked.bool(True),
    FWId = cms.uint32(305419896),
    FedIds = cms.vint32(1354, 1356, 1358),
    InputLabel = cms.InputTag("rawDataCollector"),
    Setup = cms.string('stage2::CaloLayer1Setup'),
    debug = cms.untracked.bool(False)
)


process.caloMet = cms.EDProducer("CaloMETProducer",
    alias = cms.string('caloMet'),
    calculateSignificance = cms.bool(False),
    globalThreshold = cms.double(0.3),
    noHF = cms.bool(False),
    src = cms.InputTag("towerMaker")
)


process.caloMetBE = cms.EDProducer("CaloMETProducer",
    alias = cms.string('caloMetBE'),
    calculateSignificance = cms.bool(False),
    globalThreshold = cms.double(0.3),
    noHF = cms.bool(True),
    src = cms.InputTag("towerMaker")
)


process.caloMetBEFO = cms.EDProducer("CaloMETProducer",
    alias = cms.string('caloMetBEFO'),
    calculateSignificance = cms.bool(False),
    globalThreshold = cms.double(0.3),
    noHF = cms.bool(False),
    src = cms.InputTag("towerMakerWithHO")
)


process.caloMetBEO = cms.EDProducer("CaloMETProducer",
    alias = cms.string('caloMetBEO'),
    calculateSignificance = cms.bool(False),
    globalThreshold = cms.double(0.3),
    noHF = cms.bool(True),
    src = cms.InputTag("towerMakerWithHO")
)


process.caloMetM = cms.EDProducer("MuonMET",
    metTypeInputTag = cms.InputTag("CaloMET"),
    muonMETDepositValueMapInputTag = cms.InputTag("muonMETValueMapProducer","muCorrData"),
    muonsInputTag = cms.InputTag("muons"),
    uncorMETInputTag = cms.InputTag("caloMet")
)


process.caloStage1Digis = cms.EDProducer("L1TRawToDigi",
    FedIds = cms.vint32(1352),
    InputLabel = cms.InputTag("rawDataCollector"),
    Setup = cms.string('stage1::CaloSetup')
)


process.caloStage1FinalDigis = cms.EDProducer("L1TPhysicalEtAdder",
    InputCollection = cms.InputTag("caloStage1Digis"),
    InputHFCountsCollection = cms.InputTag("caloStage1Digis","HFBitCounts"),
    InputHFSumsCollection = cms.InputTag("caloStage1Digis","HFRingSums"),
    InputIsoTauCollection = cms.InputTag("caloStage1Digis","isoTaus"),
    InputPreGtJetCollection = cms.InputTag("caloStage1Digis"),
    InputRlxTauCollection = cms.InputTag("caloStage1Digis","rlxTaus")
)


process.caloStage1LegacyFormatDigis = cms.EDProducer("L1TCaloUpgradeToGCTConverter",
    InputCollection = cms.InputTag("caloStage1Digis"),
    InputHFCountsCollection = cms.InputTag("caloStage1Digis","HFBitCounts"),
    InputHFSumsCollection = cms.InputTag("caloStage1Digis","HFRingSums"),
    InputIsoTauCollection = cms.InputTag("caloStage1Digis","isoTaus"),
    InputRlxTauCollection = cms.InputTag("caloStage1Digis","rlxTaus")
)


process.caloStage2Digis = cms.EDProducer("L1TRawToDigi",
    FWId = cms.uint32(0),
    FWOverride = cms.bool(False),
    FedIds = cms.vint32(1360, 1366),
    InputLabel = cms.InputTag("rawDataCollector"),
    MinFeds = cms.uint32(1),
    Setup = cms.string('stage2::CaloSetup'),
    TMTCheck = cms.bool(True)
)


process.caloTowerForTrk = cms.EDProducer("CaloTowersCreator",
    AllowMissingInputs = cms.bool(False),
    EBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBSumThreshold = cms.double(0.2),
    EBThreshold = cms.double(0.07),
    EBWeight = cms.double(1.0),
    EBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EESumThreshold = cms.double(0.45),
    EEThreshold = cms.double(0.3),
    EEWeight = cms.double(1.0),
    EEWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EcalRecHitSeveritiesToBeExcluded = cms.vstring(
        'kTime', 
        'kWeird', 
        'kBad'
    ),
    EcalSeveritiesToBeUsedInBadTowers = cms.vstring(),
    EcutTower = cms.double(-1000.0),
    HBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HBThreshold = cms.double(1.2),
    HBThreshold1 = cms.double(0.8),
    HBThreshold2 = cms.double(1.2),
    HBWeight = cms.double(1.0),
    HBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HEDGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HEDThreshold = cms.double(0.2),
    HEDThreshold1 = cms.double(0.1),
    HEDWeight = cms.double(1.0),
    HEDWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HESGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HESThreshold = cms.double(0.2),
    HESThreshold1 = cms.double(0.1),
    HESWeight = cms.double(1.0),
    HESWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF1Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF1Threshold = cms.double(0.5),
    HF1Weight = cms.double(1.0),
    HF1Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF2Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF2Threshold = cms.double(0.85),
    HF2Weight = cms.double(1.0),
    HF2Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HOThreshold0 = cms.double(1.1),
    HOThresholdMinus1 = cms.double(3.5),
    HOThresholdMinus2 = cms.double(3.5),
    HOThresholdPlus1 = cms.double(3.5),
    HOThresholdPlus2 = cms.double(3.5),
    HOWeight = cms.double(1.0),
    HOWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HcalAcceptSeverityLevel = cms.uint32(9),
    HcalAcceptSeverityLevelForRejectedHit = cms.uint32(9999),
    HcalPhase = cms.int32(1),
    HcalThreshold = cms.double(-1000.0),
    MomConstrMethod = cms.int32(1),
    MomEBDepth = cms.double(0.3),
    MomEEDepth = cms.double(0.0),
    MomHBDepth = cms.double(0.2),
    MomHEDepth = cms.double(0.4),
    UseEcalRecoveredHits = cms.bool(False),
    UseEtEBTreshold = cms.bool(False),
    UseEtEETreshold = cms.bool(False),
    UseHO = cms.bool(True),
    UseHcalRecoveredHits = cms.bool(True),
    UseRejectedHitsOnly = cms.bool(False),
    UseRejectedRecoveredEcalHits = cms.bool(False),
    UseRejectedRecoveredHcalHits = cms.bool(True),
    UseSymEBTreshold = cms.bool(True),
    UseSymEETreshold = cms.bool(True),
    ecalInputs = cms.VInputTag(cms.InputTag("ecalRecHit","EcalRecHitsEB"), cms.InputTag("ecalRecHit","EcalRecHitsEE")),
    hbheInput = cms.InputTag("hbhereco"),
    hfInput = cms.InputTag("hfreco"),
    hoInput = cms.InputTag("horeco"),
    missingHcalRescaleFactorForEcal = cms.double(0)
)


process.caloTowerForTrkPreSplitting = cms.EDProducer("CaloTowersCreator",
    AllowMissingInputs = cms.bool(False),
    EBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBSumThreshold = cms.double(0.2),
    EBThreshold = cms.double(0.07),
    EBWeight = cms.double(1.0),
    EBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EESumThreshold = cms.double(0.45),
    EEThreshold = cms.double(0.3),
    EEWeight = cms.double(1.0),
    EEWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EcalRecHitSeveritiesToBeExcluded = cms.vstring(
        'kTime', 
        'kWeird', 
        'kBad'
    ),
    EcalSeveritiesToBeUsedInBadTowers = cms.vstring(),
    EcutTower = cms.double(-1000.0),
    HBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HBThreshold = cms.double(1.2),
    HBThreshold1 = cms.double(0.8),
    HBThreshold2 = cms.double(1.2),
    HBWeight = cms.double(1.0),
    HBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HEDGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HEDThreshold = cms.double(0.2),
    HEDThreshold1 = cms.double(0.1),
    HEDWeight = cms.double(1.0),
    HEDWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HESGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HESThreshold = cms.double(0.2),
    HESThreshold1 = cms.double(0.1),
    HESWeight = cms.double(1.0),
    HESWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF1Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF1Threshold = cms.double(0.5),
    HF1Weight = cms.double(1.0),
    HF1Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF2Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF2Threshold = cms.double(0.85),
    HF2Weight = cms.double(1.0),
    HF2Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HOThreshold0 = cms.double(1.1),
    HOThresholdMinus1 = cms.double(3.5),
    HOThresholdMinus2 = cms.double(3.5),
    HOThresholdPlus1 = cms.double(3.5),
    HOThresholdPlus2 = cms.double(3.5),
    HOWeight = cms.double(1.0),
    HOWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HcalAcceptSeverityLevel = cms.uint32(9),
    HcalAcceptSeverityLevelForRejectedHit = cms.uint32(9999),
    HcalPhase = cms.int32(1),
    HcalThreshold = cms.double(-1000.0),
    MomConstrMethod = cms.int32(1),
    MomEBDepth = cms.double(0.3),
    MomEEDepth = cms.double(0.0),
    MomHBDepth = cms.double(0.2),
    MomHEDepth = cms.double(0.4),
    UseEcalRecoveredHits = cms.bool(False),
    UseEtEBTreshold = cms.bool(False),
    UseEtEETreshold = cms.bool(False),
    UseHO = cms.bool(True),
    UseHcalRecoveredHits = cms.bool(True),
    UseRejectedHitsOnly = cms.bool(False),
    UseRejectedRecoveredEcalHits = cms.bool(False),
    UseRejectedRecoveredHcalHits = cms.bool(True),
    UseSymEBTreshold = cms.bool(True),
    UseSymEETreshold = cms.bool(True),
    ecalInputs = cms.VInputTag(cms.InputTag("ecalRecHit","EcalRecHitsEB"), cms.InputTag("ecalRecHit","EcalRecHitsEE")),
    hbheInput = cms.InputTag("hbhereco"),
    hfInput = cms.InputTag("hfreco"),
    hoInput = cms.InputTag("horeco"),
    missingHcalRescaleFactorForEcal = cms.double(0)
)


process.caloTowers = cms.EDProducer("CaloTowerCandidateCreator",
    e = cms.double(0.0),
    et = cms.double(0.0),
    minimumE = cms.double(0.0),
    minimumEt = cms.double(0.0),
    pt = cms.double(0.0),
    src = cms.InputTag("towerMaker"),
    verbose = cms.untracked.int32(0)
)


process.calotowermaker = cms.EDProducer("CaloTowersCreator",
    AllowMissingInputs = cms.bool(False),
    EBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBSumThreshold = cms.double(0.2),
    EBThreshold = cms.double(0.07),
    EBWeight = cms.double(1.0),
    EBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EESumThreshold = cms.double(0.45),
    EEThreshold = cms.double(0.3),
    EEWeight = cms.double(1.0),
    EEWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EcalRecHitSeveritiesToBeExcluded = cms.vstring(
        'kTime', 
        'kWeird', 
        'kBad'
    ),
    EcalSeveritiesToBeUsedInBadTowers = cms.vstring(),
    EcutTower = cms.double(-1000.0),
    HBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HBThreshold = cms.double(1.2),
    HBThreshold1 = cms.double(0.8),
    HBThreshold2 = cms.double(1.2),
    HBWeight = cms.double(1.0),
    HBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HEDGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HEDThreshold = cms.double(0.2),
    HEDThreshold1 = cms.double(0.1),
    HEDWeight = cms.double(1.0),
    HEDWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HESGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HESThreshold = cms.double(0.2),
    HESThreshold1 = cms.double(0.1),
    HESWeight = cms.double(1.0),
    HESWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF1Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF1Threshold = cms.double(0.5),
    HF1Weight = cms.double(1.0),
    HF1Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF2Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF2Threshold = cms.double(0.85),
    HF2Weight = cms.double(1.0),
    HF2Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HOThreshold0 = cms.double(1.1),
    HOThresholdMinus1 = cms.double(3.5),
    HOThresholdMinus2 = cms.double(3.5),
    HOThresholdPlus1 = cms.double(3.5),
    HOThresholdPlus2 = cms.double(3.5),
    HOWeight = cms.double(1.0),
    HOWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HcalAcceptSeverityLevel = cms.uint32(9),
    HcalAcceptSeverityLevelForRejectedHit = cms.uint32(9999),
    HcalPhase = cms.int32(1),
    HcalThreshold = cms.double(-1000.0),
    MomConstrMethod = cms.int32(1),
    MomEBDepth = cms.double(0.3),
    MomEEDepth = cms.double(0.0),
    MomHBDepth = cms.double(0.2),
    MomHEDepth = cms.double(0.4),
    UseEcalRecoveredHits = cms.bool(False),
    UseEtEBTreshold = cms.bool(False),
    UseEtEETreshold = cms.bool(False),
    UseHO = cms.bool(True),
    UseHcalRecoveredHits = cms.bool(True),
    UseRejectedHitsOnly = cms.bool(False),
    UseRejectedRecoveredEcalHits = cms.bool(False),
    UseRejectedRecoveredHcalHits = cms.bool(True),
    UseSymEBTreshold = cms.bool(True),
    UseSymEETreshold = cms.bool(True),
    ecalInputs = cms.VInputTag(cms.InputTag("ecalRecHit","EcalRecHitsEB"), cms.InputTag("ecalRecHit","EcalRecHitsEE")),
    hbheInput = cms.InputTag("hbhereco"),
    hfInput = cms.InputTag("hfreco"),
    hoInput = cms.InputTag("horeco"),
    missingHcalRescaleFactorForEcal = cms.double(0)
)


process.candidateVertexArbitrator = cms.EDProducer("CandidateVertexArbitrator",
    beamSpot = cms.InputTag("offlineBeamSpot"),
    dLenFraction = cms.double(0.333),
    dRCut = cms.double(0.4),
    distCut = cms.double(0.04),
    fitterRatio = cms.double(0.25),
    fitterSigmacut = cms.double(3),
    fitterTini = cms.double(256),
    maxTimeSignificance = cms.double(3.5),
    mightGet = cms.optional.untracked.vstring,
    primaryVertices = cms.InputTag("offlinePrimaryVertices"),
    secondaryVertices = cms.InputTag("candidateVertexMerger"),
    sigCut = cms.double(5),
    trackMinLayers = cms.int32(4),
    trackMinPixels = cms.int32(1),
    trackMinPt = cms.double(0.4),
    tracks = cms.InputTag("particleFlow")
)


process.candidateVertexArbitratorCvsL = cms.EDProducer("CandidateVertexArbitrator",
    beamSpot = cms.InputTag("offlineBeamSpot"),
    dLenFraction = cms.double(0.333),
    dRCut = cms.double(0.4),
    distCut = cms.double(0.04),
    fitterRatio = cms.double(0.25),
    fitterSigmacut = cms.double(3),
    fitterTini = cms.double(256),
    maxTimeSignificance = cms.double(3.5),
    mightGet = cms.optional.untracked.vstring,
    primaryVertices = cms.InputTag("offlinePrimaryVertices"),
    secondaryVertices = cms.InputTag("candidateVertexMergerCvsL"),
    sigCut = cms.double(5),
    trackMinLayers = cms.int32(4),
    trackMinPixels = cms.int32(1),
    trackMinPt = cms.double(0.4),
    tracks = cms.InputTag("particleFlow")
)


process.candidateVertexArbitratorDefault = cms.EDProducer("CandidateVertexArbitrator",
    beamSpot = cms.InputTag("offlineBeamSpot"),
    dLenFraction = cms.double(0.333),
    dRCut = cms.double(0.4),
    distCut = cms.double(0.04),
    fitterRatio = cms.double(0.25),
    fitterSigmacut = cms.double(3),
    fitterTini = cms.double(256),
    maxTimeSignificance = cms.double(3.5),
    mightGet = cms.optional.untracked.vstring,
    primaryVertices = cms.InputTag("offlinePrimaryVertices"),
    secondaryVertices = cms.InputTag("candidateVertexMerger"),
    sigCut = cms.double(5),
    trackMinLayers = cms.int32(4),
    trackMinPixels = cms.int32(1),
    trackMinPt = cms.double(0.4),
    tracks = cms.InputTag("particleFlow")
)


process.candidateVertexMerger = cms.EDProducer("CandidateVertexMerger",
    maxFraction = cms.double(0.7),
    minSignificance = cms.double(2),
    secondaryVertices = cms.InputTag("inclusiveCandidateVertexFinder")
)


process.candidateVertexMergerCvsL = cms.EDProducer("CandidateVertexMerger",
    maxFraction = cms.double(0.7),
    minSignificance = cms.double(2),
    secondaryVertices = cms.InputTag("inclusiveCandidateVertexFinderCvsL")
)


process.castorDigis = cms.EDProducer("CastorRawToDigi",
    CastorCtdc = cms.bool(False),
    CastorFirstFED = cms.int32(690),
    ComplainEmptyData = cms.untracked.bool(False),
    ExceptionEmptyData = cms.untracked.bool(False),
    ExpectedOrbitMessageTime = cms.int32(-1),
    FEDs = cms.untracked.vint32(690, 691, 692, 693, 722),
    FilterDataQuality = cms.bool(True),
    InputLabel = cms.InputTag("rawDataCollector"),
    UnpackTTP = cms.bool(True),
    UnpackZDC = cms.bool(True),
    UseNominalOrbitMessageTime = cms.bool(True),
    ZDCFirstFED = cms.int32(693),
    firstSample = cms.int32(0),
    lastSample = cms.int32(9),
    silent = cms.untracked.bool(False)
)


process.castorreco = cms.EDProducer("CastorSimpleReconstructor",
    Subdetector = cms.string('CASTOR'),
    correctForPhaseContainment = cms.bool(False),
    correctForTimeslew = cms.bool(False),
    correctionPhaseNS = cms.double(0.0),
    digiLabel = cms.InputTag("castorDigis"),
    doSaturationCorr = cms.bool(True),
    firstSample = cms.int32(4),
    maxADCvalue = cms.int32(127),
    samplesToAdd = cms.int32(2),
    setSaturationFlag = cms.bool(True),
    tsFromDB = cms.bool(True)
)


process.chargeCut2069Clusters = cms.EDProducer("ClusterChargeMasker",
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutTight')
    ),
    oldClusterRemovalInfo = cms.InputTag("pixelPairStepClusters"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    stripClusters = cms.InputTag("siStripClusters")
)


process.chargedHadronPFTrackIsolation = cms.EDProducer("ChargedHadronPFTrackIsolationProducer",
    mightGet = cms.optional.untracked.vstring,
    minRawCaloEnergy = cms.double(0.5),
    minTrackPt = cms.double(1),
    src = cms.InputTag("particleFlow")
)


process.ckfInOutTracksFromConversions = cms.EDProducer("TrackProducerWithSCAssociation",
    AlgorithmName = cms.string('inOutEcalSeededConv'),
    ComponentName = cms.string('ckfInOutTracksFromConversions'),
    Fitter = cms.string('KFFittingSmootherForInOut'),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('alongMomElePropagator'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(False),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    producer = cms.string('conversionTrackCandidates'),
    recoTrackSCAssociationCollection = cms.string('inOutTrackSCAssociationCollection'),
    src = cms.InputTag("conversionTrackCandidates","inOutTracksFromConversions"),
    trackCandidateSCAssociationCollection = cms.string('inOutTrackCandidateSCAssociationCollection')
)


process.ckfInOutTracksFromMustacheConversions = cms.EDProducer("TrackProducerWithSCAssociation",
    AlgorithmName = cms.string('inOutEcalSeededConv'),
    ComponentName = cms.string('ckfInOutTracksFromMustacheConversions'),
    Fitter = cms.string('KFFittingSmootherForInOut'),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('alongMomElePropagator'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(False),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    producer = cms.string('mustacheConversionTrackCandidates'),
    recoTrackSCAssociationCollection = cms.string('inOutTrackSCAssociationCollection'),
    src = cms.InputTag("mustacheConversionTrackCandidates","inOutTracksFromConversions"),
    trackCandidateSCAssociationCollection = cms.string('inOutTrackCandidateSCAssociationCollection')
)


process.ckfInOutTracksFromOldEGConversions = cms.EDProducer("TrackProducerWithSCAssociation",
    AlgorithmName = cms.string('inOutEcalSeededConv'),
    ComponentName = cms.string('ckfInOutTracksFromOldEGConversions'),
    Fitter = cms.string('KFFittingSmootherForInOut'),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('alongMomElePropagator'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(False),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    producer = cms.string('oldegConversionTrackCandidates'),
    recoTrackSCAssociationCollection = cms.string('inOutTrackSCAssociationCollection'),
    src = cms.InputTag("oldegConversionTrackCandidates","inOutTracksFromConversions"),
    trackCandidateSCAssociationCollection = cms.string('inOutTrackCandidateSCAssociationCollection')
)


process.ckfOutInTracksFromConversions = cms.EDProducer("TrackProducerWithSCAssociation",
    AlgorithmName = cms.string('outInEcalSeededConv'),
    ComponentName = cms.string('ckfOutInTracksFromConversions'),
    Fitter = cms.string('KFFitterForOutIn'),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('alongMomElePropagator'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(False),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    producer = cms.string('conversionTrackCandidates'),
    recoTrackSCAssociationCollection = cms.string('outInTrackSCAssociationCollection'),
    src = cms.InputTag("conversionTrackCandidates","outInTracksFromConversions"),
    trackCandidateSCAssociationCollection = cms.string('outInTrackCandidateSCAssociationCollection')
)


process.ckfOutInTracksFromMustacheConversions = cms.EDProducer("TrackProducerWithSCAssociation",
    AlgorithmName = cms.string('outInEcalSeededConv'),
    ComponentName = cms.string('ckfOutInTracksFromMustacheConversions'),
    Fitter = cms.string('KFFitterForOutIn'),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('alongMomElePropagator'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(False),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    producer = cms.string('mustacheConversionTrackCandidates'),
    recoTrackSCAssociationCollection = cms.string('outInTrackSCAssociationCollection'),
    src = cms.InputTag("mustacheConversionTrackCandidates","outInTracksFromConversions"),
    trackCandidateSCAssociationCollection = cms.string('outInTrackCandidateSCAssociationCollection')
)


process.ckfOutInTracksFromOldEGConversions = cms.EDProducer("TrackProducerWithSCAssociation",
    AlgorithmName = cms.string('outInEcalSeededConv'),
    ComponentName = cms.string('ckfOutInTracksFromOldEGConversions'),
    Fitter = cms.string('KFFitterForOutIn'),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('alongMomElePropagator'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(False),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    producer = cms.string('oldegConversionTrackCandidates'),
    recoTrackSCAssociationCollection = cms.string('outInTrackSCAssociationCollection'),
    src = cms.InputTag("oldegConversionTrackCandidates","outInTracksFromConversions"),
    trackCandidateSCAssociationCollection = cms.string('outInTrackCandidateSCAssociationCollection')
)


process.ckfTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('GroupedCkfTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    reverseTrajectories = cms.bool(False),
    src = cms.InputTag("globalMixedSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.ckfTrackCandidatesCombinedSeeds = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('GroupedCkfTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    reverseTrajectories = cms.bool(False),
    src = cms.InputTag("globalCombinedSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.ckfTrackCandidatesNoOverlaps = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('CkfTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    reverseTrajectories = cms.bool(False),
    src = cms.InputTag("globalMixedSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.ckfTrackCandidatesP5 = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('CosmicNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('GroupedCkfTrajectoryBuilderP5')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    reverseTrajectories = cms.bool(False),
    src = cms.InputTag("combinatorialcosmicseedfinderP5"),
    useHitsSplitting = cms.bool(True)
)


process.ckfTrackCandidatesPixelLess = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('GroupedCkfTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    reverseTrajectories = cms.bool(False),
    src = cms.InputTag("globalPixelLessSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.cleanedHybridSuperClusters = cms.EDProducer("HybridClusterProducer",
    HybridBarrelSeedThr = cms.double(1.0),
    RecHitFlagToBeExcluded = cms.vstring(
        'kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'
    ),
    RecHitSeverityToBeExcluded = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    basicclusterCollection = cms.string('hybridBarrelBasicClusters'),
    clustershapecollection = cms.string(''),
    dynamicEThresh = cms.bool(False),
    dynamicPhiRoad = cms.bool(False),
    eThreshA = cms.double(0.003),
    eThreshB = cms.double(0.1),
    eseed = cms.double(0.35),
    ethresh = cms.double(0.1),
    ewing = cms.double(0.0),
    excludeFlagged = cms.bool(True),
    posCalcParameters = cms.PSet(
        LogWeighted = cms.bool(True),
        T0_barl = cms.double(7.4),
        T0_endc = cms.double(3.1),
        T0_endcPresh = cms.double(1.2),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    recHitsCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    shapeAssociation = cms.string('hybridShapeAssoc'),
    step = cms.int32(17),
    superclusterCollection = cms.string(''),
    useEtForXi = cms.bool(True),
    xi = cms.double(0.0)
)


process.clusterFilter = cms.EDProducer("ClusterShapeTrackFilterProducer",
    clusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
    mightGet = cms.optional.untracked.vstring,
    ptMax = cms.double(999999),
    ptMin = cms.double(1.5)
)


process.clusterSummaryProducer = cms.EDProducer("ClusterSummaryProducer",
    doPixels = cms.bool(True),
    doStrips = cms.bool(False),
    pixelClusters = cms.InputTag("siPixelClustersPreSplitting"),
    stripClusters = cms.InputTag(""),
    verbose = cms.bool(False),
    wantedSubDets = cms.vstring(
        'TOB', 
        'TIB', 
        'TID', 
        'TEC', 
        'STRIP', 
        'BPIX', 
        'FPIX', 
        'PIXEL'
    ),
    wantedUserSubDets = cms.VPSet()
)


process.clusterSummaryProducerNoSplitting = cms.EDProducer("ClusterSummaryProducer",
    doPixels = cms.bool(True),
    doStrips = cms.bool(False),
    pixelClusters = cms.InputTag("siPixelClusters"),
    stripClusters = cms.InputTag(""),
    verbose = cms.bool(False),
    wantedSubDets = cms.vstring(
        'TOB', 
        'TIB', 
        'TID', 
        'TEC', 
        'STRIP', 
        'BPIX', 
        'FPIX', 
        'PIXEL'
    ),
    wantedUserSubDets = cms.VPSet()
)


process.combinatoricRecoTaus = cms.EDProducer("RecoTauProducer",
    buildNullTaus = cms.bool(False),
    builders = cms.VPSet(cms.PSet(
        decayModes = cms.VPSet(
            cms.PSet(
                maxPiZeros = cms.uint32(0),
                maxTracks = cms.uint32(6),
                nCharged = cms.uint32(1),
                nPiZeros = cms.uint32(0)
            ), 
            cms.PSet(
                maxPiZeros = cms.uint32(6),
                maxTracks = cms.uint32(6),
                nCharged = cms.uint32(1),
                nPiZeros = cms.uint32(1)
            ), 
            cms.PSet(
                maxPiZeros = cms.uint32(5),
                maxTracks = cms.uint32(6),
                nCharged = cms.uint32(1),
                nPiZeros = cms.uint32(2)
            ), 
            cms.PSet(
                maxPiZeros = cms.uint32(0),
                maxTracks = cms.uint32(6),
                nCharged = cms.uint32(2),
                nPiZeros = cms.uint32(0)
            ), 
            cms.PSet(
                maxPiZeros = cms.uint32(3),
                maxTracks = cms.uint32(6),
                nCharged = cms.uint32(2),
                nPiZeros = cms.uint32(1)
            ), 
            cms.PSet(
                maxPiZeros = cms.uint32(0),
                maxTracks = cms.uint32(6),
                nCharged = cms.uint32(3),
                nPiZeros = cms.uint32(0)
            ), 
            cms.PSet(
                maxPiZeros = cms.uint32(3),
                maxTracks = cms.uint32(6),
                nCharged = cms.uint32(3),
                nPiZeros = cms.uint32(1)
            )
        ),
        isolationConeSize = cms.double(0.5),
        minAbsPhotonSumPt_insideSignalCone = cms.double(2.5),
        minAbsPhotonSumPt_outsideSignalCone = cms.double(1000000000.0),
        minRelPhotonSumPt_insideSignalCone = cms.double(0.1),
        minRelPhotonSumPt_outsideSignalCone = cms.double(1000000000.0),
        name = cms.string('combinatoric'),
        pfCandSrc = cms.InputTag("particleFlow"),
        plugin = cms.string('RecoTauBuilderCombinatoricPlugin'),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                maxDeltaZ = cms.double(0.15),
                maxTrackChi2 = cms.double(100.0),
                maxTransverseImpactParameter = cms.double(0.05),
                minGammaEt = cms.double(1.5),
                minTrackHits = cms.uint32(8),
                minTrackPixelHits = cms.uint32(0),
                minTrackPt = cms.double(1.0),
                minTrackVertexWeight = cms.double(-1.0)
            ),
            leadingTrkOrPFCandOption = cms.string('leadPFCand'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            pvFindingAlgo = cms.string('closestInDeltaZ'),
            recoverLeadingTrk = cms.bool(False),
            signalQualityCuts = cms.PSet(
                maxDeltaZ = cms.double(0.4),
                maxTrackChi2 = cms.double(100.0),
                maxTransverseImpactParameter = cms.double(0.1),
                minGammaEt = cms.double(1.0),
                minNeutralHadronEt = cms.double(30.0),
                minTrackHits = cms.uint32(3),
                minTrackPixelHits = cms.uint32(0),
                minTrackPt = cms.double(0.5),
                minTrackVertexWeight = cms.double(-1.0)
            ),
            vertexTrackFiltering = cms.bool(False),
            vxAssocQualityCuts = cms.PSet(
                maxTrackChi2 = cms.double(100.0),
                maxTransverseImpactParameter = cms.double(0.1),
                minGammaEt = cms.double(1.0),
                minTrackHits = cms.uint32(3),
                minTrackPixelHits = cms.uint32(0),
                minTrackPt = cms.double(0.5),
                minTrackVertexWeight = cms.double(-1.0)
            )
        ),
        signalConeSize = cms.string('max(min(0.1, 3.0/pt()), 0.05)'),
        verbosity = cms.int32(0)
    )),
    chargedHadronSrc = cms.InputTag("ak4PFJetsRecoTauChargedHadrons"),
    jetRegionSrc = cms.InputTag("recoTauAK4PFJets08Region"),
    jetSrc = cms.InputTag("ak4PFJets"),
    maxJetAbsEta = cms.double(4.0),
    minJetPt = cms.double(14.0),
    modifiers = cms.VPSet(
        cms.PSet(
            name = cms.string('sipt'),
            plugin = cms.string('RecoTauImpactParameterSignificancePlugin'),
            qualityCuts = cms.PSet(
                isolationQualityCuts = cms.PSet(
                    maxDeltaZ = cms.double(0.15),
                    maxTrackChi2 = cms.double(100.0),
                    maxTransverseImpactParameter = cms.double(0.05),
                    minGammaEt = cms.double(1.5),
                    minTrackHits = cms.uint32(8),
                    minTrackPixelHits = cms.uint32(0),
                    minTrackPt = cms.double(1.0),
                    minTrackVertexWeight = cms.double(-1.0)
                ),
                leadingTrkOrPFCandOption = cms.string('leadPFCand'),
                primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
                pvFindingAlgo = cms.string('closestInDeltaZ'),
                recoverLeadingTrk = cms.bool(False),
                signalQualityCuts = cms.PSet(
                    maxDeltaZ = cms.double(0.4),
                    maxTrackChi2 = cms.double(100.0),
                    maxTransverseImpactParameter = cms.double(0.1),
                    minGammaEt = cms.double(1.0),
                    minNeutralHadronEt = cms.double(30.0),
                    minTrackHits = cms.uint32(3),
                    minTrackPixelHits = cms.uint32(0),
                    minTrackPt = cms.double(0.5),
                    minTrackVertexWeight = cms.double(-1.0)
                ),
                vertexTrackFiltering = cms.bool(False),
                vxAssocQualityCuts = cms.PSet(
                    maxTrackChi2 = cms.double(100.0),
                    maxTransverseImpactParameter = cms.double(0.1),
                    minGammaEt = cms.double(1.0),
                    minTrackHits = cms.uint32(3),
                    minTrackPixelHits = cms.uint32(0),
                    minTrackPt = cms.double(0.5),
                    minTrackVertexWeight = cms.double(-1.0)
                )
            )
        ), 
        cms.PSet(
            DataType = cms.string('AOD'),
            EcalStripSumE_deltaEta = cms.double(0.03),
            EcalStripSumE_deltaPhiOverQ_maxValue = cms.double(0.5),
            EcalStripSumE_deltaPhiOverQ_minValue = cms.double(-0.1),
            EcalStripSumE_minClusEnergy = cms.double(0.1),
            ElecPreIDLeadTkMatch_maxDR = cms.double(0.01),
            ElectronPreIDProducer = cms.InputTag("elecpreid"),
            maximumForElectrionPreIDOutput = cms.double(-0.1),
            name = cms.string('elec_rej'),
            plugin = cms.string('RecoTauElectronRejectionPlugin')
        ), 
        cms.PSet(
            dRaddNeutralHadron = cms.double(0.12),
            dRaddPhoton = cms.double(-1.0),
            minGammaEt = cms.double(10.0),
            minNeutralHadronEt = cms.double(50.0),
            name = cms.string('tau_en_reconstruction'),
            plugin = cms.string('PFRecoTauEnergyAlgorithmPlugin'),
            verbosity = cms.int32(0)
        ), 
        cms.PSet(
            name = cms.string('tau_mass'),
            plugin = cms.string('PFRecoTauMassPlugin'),
            verbosity = cms.int32(0)
        ), 
        cms.PSet(
            name = cms.string('TTIworkaround'),
            pfTauTagInfoSrc = cms.InputTag("pfRecoTauTagInfoProducer"),
            plugin = cms.string('RecoTauTagInfoWorkaroundModifer')
        )
    ),
    outputSelection = cms.string('leadChargedHadrCand().isNonnull()'),
    piZeroSrc = cms.InputTag("ak4PFJetsLegacyHPSPiZeros")
)


process.combinedInclusiveSecondaryVertexV2BJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertexV2Computer'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("inclusiveSecondaryVertexFinderTagInfos"))
)


process.combinedMVAV2BJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedMVAV2Computer'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("secondaryVertexTagInfos"), cms.InputTag("inclusiveSecondaryVertexFinderTagInfos"), cms.InputTag("softPFMuonsTagInfos"), cms.InputTag("softPFElectronsTagInfos"))
)


process.combinedSecondaryVertexV2BJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertexV2Computer'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("secondaryVertexTagInfos"))
)


process.conv2Clusters = cms.EDProducer("TrackClusterRemover",
    TrackQuality = cms.string('highPurity'),
    maxChi2 = cms.double(30.0),
    mightGet = cms.optional.untracked.vstring,
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    oldClusterRemovalInfo = cms.InputTag("convClusters"),
    overrideTrkQuals = cms.InputTag("convStepSelector","convStep"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    trackClassifier = cms.InputTag("","QualityMasks"),
    trajectories = cms.InputTag("convStepTracks")
)


process.conv2LayerPairs = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("conv2Clusters")
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("conv2Clusters")
    ),
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(7),
        minRing = cms.int32(1),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHitUnmatched"),
        skipClusters = cms.InputTag("conv2Clusters"),
        stereoRecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHitUnmatched"),
        useRingSlector = cms.bool(True),
        useSimpleRphiHitsCleaner = cms.bool(False)
    ),
    TIB1 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        skipClusters = cms.InputTag("conv2Clusters")
    ),
    TIB2 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        skipClusters = cms.InputTag("conv2Clusters")
    ),
    TIB3 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        skipClusters = cms.InputTag("conv2Clusters")
    ),
    TIB4 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        skipClusters = cms.InputTag("conv2Clusters")
    ),
    TID1 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(2),
        minRing = cms.int32(1),
        skipClusters = cms.InputTag("conv2Clusters"),
        useRingSlector = cms.bool(True),
        useSimpleRphiHitsCleaner = cms.bool(False)
    ),
    TID2 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(2),
        minRing = cms.int32(1),
        skipClusters = cms.InputTag("conv2Clusters"),
        useRingSlector = cms.bool(True),
        useSimpleRphiHitsCleaner = cms.bool(False)
    ),
    TID3 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(2),
        minRing = cms.int32(1),
        skipClusters = cms.InputTag("conv2Clusters"),
        useRingSlector = cms.bool(True),
        useSimpleRphiHitsCleaner = cms.bool(False)
    ),
    TOB1 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        skipClusters = cms.InputTag("conv2Clusters")
    ),
    TOB2 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        skipClusters = cms.InputTag("conv2Clusters")
    ),
    TOB3 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        skipClusters = cms.InputTag("conv2Clusters")
    ),
    TOB4 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        skipClusters = cms.InputTag("conv2Clusters")
    ),
    TOB5 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        skipClusters = cms.InputTag("conv2Clusters")
    ),
    TOB6 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        skipClusters = cms.InputTag("conv2Clusters")
    ),
    layerList = cms.vstring(
        'BPix1+BPix2', 
        'BPix2+BPix3', 
        'BPix2+FPix1_pos', 
        'BPix2+FPix1_neg', 
        'BPix2+FPix2_pos', 
        'BPix2+FPix2_neg', 
        'FPix1_pos+FPix2_pos', 
        'FPix1_neg+FPix2_neg', 
        'BPix3+TIB1', 
        'TIB1+TID1_pos', 
        'TIB1+TID1_neg', 
        'TIB1+TID2_pos', 
        'TIB1+TID2_neg', 
        'TIB1+TIB2', 
        'TIB2+TID1_pos', 
        'TIB2+TID1_neg', 
        'TIB2+TID2_pos', 
        'TIB2+TID2_neg', 
        'TIB2+TIB3', 
        'TIB3+TIB4', 
        'TIB3+TID1_pos', 
        'TIB3+TID1_neg', 
        'TIB4+TOB1', 
        'TOB1+TOB2', 
        'TOB1+TEC1_pos', 
        'TOB1+TEC1_neg', 
        'TOB2+TOB3', 
        'TOB2+TEC1_pos', 
        'TOB2+TEC1_neg', 
        'TOB3+TOB4', 
        'TOB3+TEC1_pos', 
        'TOB3+TEC1_neg', 
        'TOB4+TOB5', 
        'TOB5+TOB6', 
        'TID1_pos+TID2_pos', 
        'TID2_pos+TID3_pos', 
        'TID3_pos+TEC1_pos', 
        'TID1_neg+TID2_neg', 
        'TID2_neg+TID3_neg', 
        'TID3_neg+TEC1_neg', 
        'TEC1_pos+TEC2_pos', 
        'TEC2_pos+TEC3_pos', 
        'TEC3_pos+TEC4_pos', 
        'TEC4_pos+TEC5_pos', 
        'TEC5_pos+TEC6_pos', 
        'TEC6_pos+TEC7_pos', 
        'TEC7_pos+TEC8_pos', 
        'TEC1_neg+TEC2_neg', 
        'TEC2_neg+TEC3_neg', 
        'TEC3_neg+TEC4_neg', 
        'TEC4_neg+TEC5_neg', 
        'TEC5_neg+TEC6_neg', 
        'TEC6_neg+TEC7_neg', 
        'TEC7_neg+TEC8_neg'
    )
)


process.conv2StepSelector = cms.EDProducer("MultiTrackSelector",
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("conv2StepTracks"),
    trackSelectors = cms.VPSet(
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(False),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(3.0),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(5.0, 8.0),
            d0_par2 = cms.vdouble(5.0, 8.0),
            dz_par1 = cms.vdouble(5.0, 8.0),
            dz_par2 = cms.vdouble(5.0, 8.0),
            keepAllTracks = cms.bool(False),
            maxNumberLostLayers = cms.uint32(1),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(1),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('conv2StepLoose'),
            preFilterName = cms.string(''),
            qualityBit = cms.string('loose'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(2.5),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(5.0, 8.0),
            d0_par2 = cms.vdouble(5.0, 8.0),
            dz_par1 = cms.vdouble(5.0, 8.0),
            dz_par2 = cms.vdouble(5.0, 8.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(1),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('conv2StepTight'),
            preFilterName = cms.string('conv2StepLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(2.0),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(5.0, 8.0),
            d0_par2 = cms.vdouble(5.0, 8.0),
            dz_par1 = cms.vdouble(5.0, 8.0),
            dz_par2 = cms.vdouble(5.0, 8.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(1),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('conv2Step'),
            preFilterName = cms.string('conv2StepTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        )
    ),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(False),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.conv2StepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('conversionStep'),
    Fitter = cms.string('conv2StepFitterSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("conv2TrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.conv2TrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('conv2CkfTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    reverseTrajectories = cms.bool(False),
    src = cms.InputTag("photonConvTrajSeedFromQuadruplets","conv2SeedCandidates"),
    useHitsSplitting = cms.bool(True)
)


process.convClusters = cms.EDProducer("TrackClusterRemoverPhase2",
    TrackQuality = cms.string('highPurity'),
    maxChi2 = cms.double(30),
    mightGet = cms.optional.untracked.vstring,
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    oldClusterRemovalInfo = cms.InputTag("detachedQuadStepClusters"),
    overrideTrkQuals = cms.InputTag("detachedQuadStepSelector","detachedQuadStepTrk"),
    phase2OTClusters = cms.InputTag("siPhase2Clusters"),
    phase2pixelClusters = cms.InputTag("siPixelClusters"),
    trackClassifier = cms.InputTag("","QualityMasks"),
    trajectories = cms.InputTag("detachedQuadStepTracks")
)


process.convLayerPairs = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelPairs'),
        hitErrorRPhi = cms.double(0.0027),
        hitErrorRZ = cms.double(0.006),
        skipClusters = cms.InputTag("convClusters"),
        useErrorsFromParam = cms.bool(True)
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelPairs'),
        hitErrorRPhi = cms.double(0.0051),
        hitErrorRZ = cms.double(0.0036),
        skipClusters = cms.InputTag("convClusters"),
        useErrorsFromParam = cms.bool(True)
    ),
    layerList = cms.vstring(
        'BPix1+BPix2', 
        'BPix2+BPix3', 
        'BPix3+BPix4', 
        'BPix1+FPix1_pos', 
        'BPix1+FPix1_neg', 
        'BPix2+FPix1_pos', 
        'BPix2+FPix1_neg', 
        'BPix3+FPix1_pos', 
        'BPix3+FPix1_neg', 
        'FPix1_pos+FPix2_pos', 
        'FPix1_neg+FPix2_neg', 
        'FPix2_pos+FPix3_pos', 
        'FPix2_neg+FPix3_neg'
    )
)


process.convStepSelector = cms.EDProducer("MultiTrackSelector",
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("convStepTracks"),
    trackSelectors = cms.VPSet(
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(False),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(3.0),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(5.0, 8.0),
            d0_par2 = cms.vdouble(5.0, 8.0),
            dz_par1 = cms.vdouble(5.0, 8.0),
            dz_par2 = cms.vdouble(5.0, 8.0),
            keepAllTracks = cms.bool(False),
            maxNumberLostLayers = cms.uint32(1),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(1),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('convStepLoose'),
            preFilterName = cms.string(''),
            qualityBit = cms.string('loose'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(2.5),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(5.0, 8.0),
            d0_par2 = cms.vdouble(5.0, 8.0),
            dz_par1 = cms.vdouble(5.0, 8.0),
            dz_par2 = cms.vdouble(5.0, 8.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(1),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('convStepTight'),
            preFilterName = cms.string('convStepLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(2.0),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(5.0, 8.0),
            d0_par2 = cms.vdouble(5.0, 8.0),
            dz_par1 = cms.vdouble(5.0, 8.0),
            dz_par2 = cms.vdouble(5.0, 8.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(1),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('convStep'),
            preFilterName = cms.string('convStepTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        )
    ),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(False),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.convStepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('conversionStep'),
    Fitter = cms.string('convStepFitterSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("convTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.convTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('convCkfTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    phase2clustersToSkip = cms.InputTag("convClusters"),
    reverseTrajectories = cms.bool(False),
    src = cms.InputTag("photonConvTrajSeedFromSingleLeg","convSeedCandidates"),
    useHitsSplitting = cms.bool(True)
)


process.conversionStepConversionTrackProducer = cms.EDProducer("ConversionTrackProducer",
    TrackProducer = cms.string('conversionStepTracks'),
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    filterOnConvTrackHyp = cms.bool(True),
    minConvRadius = cms.double(2.0),
    setArbitratedEcalSeeded = cms.bool(False),
    setArbitratedMerged = cms.bool(True),
    setArbitratedMergedEcalGeneral = cms.bool(True),
    setIsGsfTrackOpen = cms.bool(False),
    setTrackerOnly = cms.bool(True),
    useTrajectory = cms.bool(False)
)


process.conversionStepTracks = cms.EDProducer("TrackListMerger",
    Epsilon = cms.double(-0.001),
    FoundHitBonus = cms.double(5.0),
    LostHitPenalty = cms.double(5.0),
    MaxNormalizedChisq = cms.double(1000.0),
    MinFound = cms.int32(3),
    MinPT = cms.double(0.05),
    ShareFrac = cms.double(0.19),
    TrackProducers = cms.VInputTag(cms.InputTag("convStepTracks")),
    allowFirstHitShare = cms.bool(True),
    copyExtras = cms.untracked.bool(True),
    copyMVA = cms.bool(True),
    hasSelector = cms.vint32(1),
    indivShareFrac = cms.vdouble(1.0, 1.0),
    makeReKeyedSeeds = cms.untracked.bool(False),
    newQuality = cms.string('confirmed'),
    selectedTrackQuals = cms.VInputTag(cms.InputTag("convStepSelector","convStep")),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(True),
        tLists = cms.vint32(1)
    )),
    trackAlgoPriorityOrder = cms.string('trackAlgoPriorityOrder'),
    writeOnlyTrkQuals = cms.bool(False)
)


process.conversionTrackCandidates = cms.EDProducer("ConversionTrackCandidateProducer",
    InOutRedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    MeasurementTrackerName = cms.string(''),
    MissingHitPenalty = cms.double(20.0),
    OutInRedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    RecHitFlagToBeExcludedEB = cms.vstring(
        'kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'
    ),
    RecHitFlagToBeExcludedEE = cms.vstring(
        'kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'
    ),
    RecHitSeverityToBeExcludedEB = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    RecHitSeverityToBeExcludedEE = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    TrajectoryBuilder = cms.string('TrajectoryBuilderForConversions'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('TrajectoryBuilderForConversions')
    ),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('alongMomElePropagator'),
        propagatorOppositeTISE = cms.string('oppositeToMomElePropagator')
    ),
    ValidHitBonus = cms.double(5.0),
    allowSharedFirstHit = cms.bool(True),
    barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    bcBarrelCollection = cms.InputTag("particleFlowSuperClusterECAL","particleFlowBasicClusterECALBarrel"),
    bcECut = cms.double(1.5),
    bcEndcapCollection = cms.InputTag("particleFlowSuperClusterECAL","particleFlowBasicClusterECALEndcap"),
    bcEtCut = cms.double(1.5),
    ecalIsoCut_offset = cms.double(999999999),
    ecalIsoCut_slope = cms.double(0.0),
    endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    fractionShared = cms.double(0.5),
    hOverEConeSize = cms.double(0.15),
    hcalTowers = cms.InputTag("towerMaker"),
    inOutTrackCandidateCollection = cms.string('inOutTracksFromConversions'),
    inOutTrackCandidateSCAssociationCollection = cms.string('inOutTrackCandidateSCAssociationCollection'),
    isoConeR = cms.double(0.4),
    isoEMin = cms.double(0.08),
    isoEtMin = cms.double(0.0),
    isoEtaSlice = cms.double(2.5),
    isoInnerConeR = cms.double(3.5),
    maxHOverE = cms.double(0.15),
    maxNumOfSeedsInOut = cms.int32(50),
    maxNumOfSeedsOutIn = cms.int32(50),
    minSCEt = cms.double(20.0),
    outInTrackCandidateCollection = cms.string('outInTracksFromConversions'),
    outInTrackCandidateSCAssociationCollection = cms.string('outInTrackCandidateSCAssociationCollection'),
    scHybridBarrelProducer = cms.InputTag("particleFlowSuperClusterECAL","particleFlowSuperClusterECALBarrel"),
    scIslandEndcapProducer = cms.InputTag("particleFlowSuperClusterECAL","particleFlowSuperClusterECALEndcapWithPreshower"),
    useEtCut = cms.bool(True),
    useHitsSplitting = cms.bool(False),
    useNumXstals = cms.bool(True),
    vetoClusteredHits = cms.bool(False)
)


process.conversions = cms.EDProducer("ConvertedPhotonProducer",
    AlgorithmName = cms.string('ecalSeeded'),
    MVA_weights_location = cms.string('RecoEgamma/EgammaTools/data/TMVAnalysis_Likelihood.weights.txt'),
    bcBarrelCollection = cms.InputTag("particleFlowSuperClusterECAL","particleFlowBasicClusterECALBarrel"),
    bcEndcapCollection = cms.InputTag("particleFlowSuperClusterECAL","particleFlowBasicClusterECALEndcap"),
    cleanedConvertedPhotonCollection = cms.string(''),
    conversionIOTrackProducer = cms.string('ckfInOutTracksFromConversions'),
    conversionOITrackProducer = cms.string('ckfOutInTracksFromConversions'),
    convertedPhotonCollection = cms.string('uncleanedConversions'),
    dRForConversionRecovery = cms.double(0.3),
    deltaCotCut = cms.double(0.05),
    generalTracksSrc = cms.InputTag("generalTracks"),
    hOverEConeSize = cms.double(0.15),
    hcalTowers = cms.InputTag("towerMaker"),
    inOutTrackCollection = cms.string(''),
    inOutTrackSCAssociation = cms.string('inOutTrackSCAssociationCollection'),
    maxDelta = cms.double(0.01),
    maxHOverE = cms.double(0.15),
    maxNbrOfIterations = cms.int32(40),
    maxNumOfCandidates = cms.int32(3),
    maxReducedChiSq = cms.double(225.0),
    minApproachDisCut = cms.double(0.0),
    minChiSqImprovement = cms.double(50.0),
    minSCEt = cms.double(20.0),
    outInTrackCollection = cms.string(''),
    outInTrackSCAssociation = cms.string('outInTrackSCAssociationCollection'),
    recoverOneTrackCase = cms.bool(True),
    risolveConversionAmbiguity = cms.bool(True),
    scHybridBarrelProducer = cms.InputTag("particleFlowSuperClusterECAL","particleFlowSuperClusterECALBarrel"),
    scIslandEndcapProducer = cms.InputTag("particleFlowSuperClusterECAL","particleFlowSuperClusterECALEndcapWithPreshower")
)


process.correctedHybridSuperClusters = cms.EDProducer("EgammaSCCorrectionMaker",
    applyCrackCorrection = cms.bool(True),
    applyEnergyCorrection = cms.bool(True),
    applyLocalContCorrection = cms.bool(True),
    corectedSuperClusterCollection = cms.string(''),
    crackCorrectorName = cms.string('EcalClusterCrackCorrection'),
    energyCorrectorName = cms.string('EcalClusterEnergyCorrectionObjectSpecific'),
    etThresh = cms.double(0.0),
    hyb_fCorrPset = cms.PSet(
        brLinearHighThr = cms.double(8.0),
        brLinearLowThr = cms.double(1.1),
        fBremVec = cms.vdouble(-0.04382, 0.1169, 0.9267, -0.0009413, 1.419),
        fEtEtaVec = cms.vdouble(
            0, 1.00121, -0.63672, 0, 0, 
            0, 0.5655, 6.457, 0.5081, 8.0, 
            1.023, -0.00181
        )
    ),
    localContCorrectorName = cms.string('EcalBasicClusterLocalContCorrection'),
    modeEB = cms.int32(0),
    modeEE = cms.int32(0),
    rawSuperClusterProducer = cms.InputTag("hybridSuperClusters"),
    recHitProducer = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    sigmaElectronicNoise = cms.double(0.03),
    superClusterAlgo = cms.string('Hybrid')
)


process.correctedIslandBarrelSuperClusters = cms.EDProducer("EgammaSCCorrectionMaker",
    VerbosityLevel = cms.string('ERROR'),
    applyEnergyCorrection = cms.bool(True),
    corectedSuperClusterCollection = cms.string(''),
    etThresh = cms.double(0.0),
    isl_fCorrPset = cms.PSet(
        brLinearHighThr = cms.double(0.0),
        brLinearLowThr = cms.double(0.0),
        fBremVec = cms.vdouble(0.0),
        fEtEtaVec = cms.vdouble(0.0)
    ),
    rawSuperClusterProducer = cms.InputTag("islandSuperClusters","islandBarrelSuperClusters"),
    recHitProducer = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    sigmaElectronicNoise = cms.double(0.03),
    superClusterAlgo = cms.string('Island')
)


process.correctedIslandEndcapSuperClusters = cms.EDProducer("EgammaSCCorrectionMaker",
    VerbosityLevel = cms.string('ERROR'),
    applyEnergyCorrection = cms.bool(True),
    corectedSuperClusterCollection = cms.string(''),
    etThresh = cms.double(0.0),
    isl_fCorrPset = cms.PSet(
        brLinearHighThr = cms.double(0.0),
        brLinearLowThr = cms.double(0.0),
        fBremVec = cms.vdouble(0.0),
        fEtEtaVec = cms.vdouble(0.0)
    ),
    rawSuperClusterProducer = cms.InputTag("islandSuperClusters","islandEndcapSuperClusters"),
    recHitProducer = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    sigmaElectronicNoise = cms.double(0.15),
    superClusterAlgo = cms.string('Island')
)


process.correctedMulti5x5SuperClustersWithPreshower = cms.EDProducer("EgammaSCCorrectionMaker",
    VerbosityLevel = cms.string('ERROR'),
    applyCrackCorrection = cms.bool(True),
    applyEnergyCorrection = cms.bool(True),
    applyLocalContCorrection = cms.bool(False),
    corectedSuperClusterCollection = cms.string(''),
    crackCorrectorName = cms.string('EcalClusterCrackCorrection'),
    energyCorrectorName = cms.string('EcalClusterEnergyCorrectionObjectSpecific'),
    etThresh = cms.double(0.0),
    fix_fCorrPset = cms.PSet(
        brLinearHighThr = cms.double(6.0),
        brLinearLowThr = cms.double(0.9),
        fBremVec = cms.vdouble(-0.05228, 0.08738, 0.9508, 0.002677, 1.221),
        fEtEtaVec = cms.vdouble(
            1, -0.4386, -32.38, 0.6372, 15.67, 
            -0.0928, -2.462, 1.138, 20.93
        )
    ),
    localContCorrectorName = cms.string('EcalBasicClusterLocalContCorrection'),
    modeEB = cms.int32(0),
    modeEE = cms.int32(0),
    rawSuperClusterProducer = cms.InputTag("multi5x5SuperClustersWithPreshower"),
    recHitProducer = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    sigmaElectronicNoise = cms.double(0.15),
    superClusterAlgo = cms.string('Multi5x5')
)


process.cosmicDCCkfTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('CosmicNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('GroupedCkfTrajectoryBuilderP5')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    reverseTrajectories = cms.bool(False),
    src = cms.InputTag("cosmicDCSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.cosmicDCSeeds = cms.EDProducer("OutsideInMuonSeeder",
    cut = cms.string('pt > 2 && abs(eta)<1.2 && phi<0'),
    debug = cms.untracked.bool(False),
    errorRescaleFactor = cms.double(2.0),
    fromVertex = cms.bool(False),
    hitCollector = cms.string('hitCollectorForCosmicDCSeeds'),
    hitsToTry = cms.int32(3),
    layersToTry = cms.int32(3),
    maxEtaForTOB = cms.double(1.5),
    minEtaForTEC = cms.double(0.7),
    muonPropagator = cms.string('SteppingHelixPropagatorAlong'),
    src = cms.InputTag("muonsFromCosmics"),
    trackerPropagator = cms.string('PropagatorWithMaterial')
)


process.cosmicDCTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('ctf'),
    Fitter = cms.string('FittingSmootherRKP5'),
    GeometricInnerState = cms.bool(True),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("cosmicDCCkfTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.cosmicMuons = cms.EDProducer("CosmicMuonProducer",
    MuonSeedCollectionLabel = cms.string('CosmicMuonSeed'),
    ServiceParameters = cms.PSet(
        CSCLayers = cms.untracked.bool(True),
        GEMLayers = cms.untracked.bool(True),
        ME0Layers = cms.bool(True),
        Propagators = cms.untracked.vstring(
            'SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'
        ),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        AllowNoVertex = cms.untracked.bool(True),
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorAny')
        ),
        PutTrajectoryIntoEvent = cms.untracked.bool(False),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    ),
    TrajectoryBuilderParameters = cms.PSet(
        BackwardMuonTrajectoryUpdatorParameters = cms.PSet(
            ExcludeRPCFromFit = cms.bool(False),
            Granularity = cms.int32(2),
            MaxChi2 = cms.double(100.0),
            RescaleError = cms.bool(False),
            RescaleErrorFactor = cms.double(1.0),
            UseInvalidHits = cms.bool(False)
        ),
        BuildTraversingMuon = cms.bool(False),
        CSCRecSegmentLabel = cms.InputTag("cscSegments"),
        DTRecSegmentLabel = cms.InputTag("dt4DCosmicSegments"),
        EnableCSCMeasurement = cms.bool(True),
        EnableDTMeasurement = cms.bool(True),
        EnableRPCMeasurement = cms.bool(True),
        MuonNavigationParameters = cms.PSet(
            Barrel = cms.bool(True),
            Endcap = cms.bool(True)
        ),
        MuonSmootherParameters = cms.PSet(
            PropagatorAlong = cms.string('SteppingHelixPropagatorAny'),
            PropagatorOpposite = cms.string('SteppingHelixPropagatorAny'),
            RescalingFactor = cms.double(5.0)
        ),
        MuonTrajectoryUpdatorParameters = cms.PSet(
            ExcludeRPCFromFit = cms.bool(False),
            Granularity = cms.int32(0),
            MaxChi2 = cms.double(3000.0),
            RescaleError = cms.bool(False),
            RescaleErrorFactor = cms.double(1.0),
            UseInvalidHits = cms.bool(False)
        ),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
        Strict1Leg = cms.bool(False)
    )
)


process.cosmicMuons1Leg = cms.EDProducer("CosmicMuonProducer",
    MuonSeedCollectionLabel = cms.string('CosmicMuonSeed'),
    ServiceParameters = cms.PSet(
        CSCLayers = cms.untracked.bool(True),
        GEMLayers = cms.untracked.bool(True),
        ME0Layers = cms.bool(True),
        Propagators = cms.untracked.vstring(
            'SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'
        ),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        AllowNoVertex = cms.untracked.bool(True),
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorAny')
        ),
        PutTrajectoryIntoEvent = cms.untracked.bool(False),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    ),
    TrajectoryBuilderParameters = cms.PSet(
        BackwardMuonTrajectoryUpdatorParameters = cms.PSet(
            ExcludeRPCFromFit = cms.bool(False),
            Granularity = cms.int32(2),
            MaxChi2 = cms.double(100.0),
            RescaleError = cms.bool(False),
            RescaleErrorFactor = cms.double(1.0),
            UseInvalidHits = cms.bool(False)
        ),
        BuildTraversingMuon = cms.bool(True),
        CSCRecSegmentLabel = cms.InputTag("cscSegments"),
        DTRecSegmentLabel = cms.InputTag("dt4DCosmicSegments"),
        EnableCSCMeasurement = cms.bool(True),
        EnableDTMeasurement = cms.bool(True),
        EnableRPCMeasurement = cms.bool(True),
        MuonNavigationParameters = cms.PSet(
            Barrel = cms.bool(True),
            Endcap = cms.bool(True)
        ),
        MuonSmootherParameters = cms.PSet(
            PropagatorAlong = cms.string('SteppingHelixPropagatorAny'),
            PropagatorOpposite = cms.string('SteppingHelixPropagatorAny'),
            RescalingFactor = cms.double(5.0)
        ),
        MuonTrajectoryUpdatorParameters = cms.PSet(
            ExcludeRPCFromFit = cms.bool(False),
            Granularity = cms.int32(0),
            MaxChi2 = cms.double(3000.0),
            RescaleError = cms.bool(False),
            RescaleErrorFactor = cms.double(1.0),
            UseInvalidHits = cms.bool(False)
        ),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
        Strict1Leg = cms.bool(True)
    )
)


process.cosmicsVeto = cms.EDProducer("CosmicsMuonIdProducer",
    CosmicCompFillerParameters = cms.PSet(
        InputCosmicMuonCollection = cms.InputTag("muonsFromCosmics1Leg"),
        InputMuonCollections = cms.VInputTag(cms.InputTag("globalMuons"), cms.InputTag("muons1stStep")),
        InputTrackCollections = cms.VInputTag(cms.InputTag("generalTracks"), cms.InputTag("cosmicsVetoTracks")),
        InputVertexCollection = cms.InputTag("offlinePrimaryVertices"),
        ServiceParameters = cms.PSet(
            CSCLayers = cms.untracked.bool(True),
            GEMLayers = cms.untracked.bool(True),
            ME0Layers = cms.bool(True),
            Propagators = cms.untracked.vstring(
                'SteppingHelixPropagatorAny', 
                'SteppingHelixPropagatorAlong', 
                'SteppingHelixPropagatorOpposite', 
                'SteppingHelixPropagatorL2Any', 
                'SteppingHelixPropagatorL2Along', 
                'SteppingHelixPropagatorL2Opposite', 
                'SteppingHelixPropagatorAnyNoError', 
                'SteppingHelixPropagatorAlongNoError', 
                'SteppingHelixPropagatorOppositeNoError', 
                'SteppingHelixPropagatorL2AnyNoError', 
                'SteppingHelixPropagatorL2AlongNoError', 
                'SteppingHelixPropagatorL2OppositeNoError', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite', 
                'SmartPropagator', 
                'SmartPropagatorOpposite', 
                'SmartPropagatorAnyOpposite', 
                'SmartPropagatorAny', 
                'SmartPropagatorRK', 
                'SmartPropagatorAnyRK', 
                'StraightLinePropagator'
            ),
            RPCLayers = cms.bool(True),
            UseMuonNavigation = cms.untracked.bool(True)
        ),
        angleCut = cms.double(0.1),
        corrTimeNeg = cms.double(-10),
        corrTimePos = cms.double(5),
        deltaPt = cms.double(0.1),
        hIpTrdxy = cms.double(0.02),
        hIpTrvProb = cms.double(0.5),
        ipCut = cms.double(0.02),
        largedxy = cms.double(2.0),
        largedxyMult = cms.double(3.0),
        maxdxyLoose = cms.double(0.01),
        maxdxyLooseMult = cms.double(0.01),
        maxdxyTight = cms.double(1.0),
        maxdxyTightMult = cms.double(1.0),
        maxdzLoose = cms.double(0.1),
        maxdzLooseMult = cms.double(0.1),
        maxdzTight = cms.double(10.0),
        maxdzTightMult = cms.double(10.0),
        maxvertRho = cms.double(5),
        maxvertZ = cms.double(20),
        minvProb = cms.double(0.001),
        nChamberMatches = cms.int32(1),
        nTrackThreshold = cms.int32(3),
        offTimeNegLoose = cms.double(-15.0),
        offTimeNegLooseMult = cms.double(-15.0),
        offTimeNegTight = cms.double(-20.0),
        offTimeNegTightMult = cms.double(-20.0),
        offTimePosLoose = cms.double(15.0),
        offTimePosLooseMult = cms.double(15.0),
        offTimePosTight = cms.double(25.0),
        offTimePosTightMult = cms.double(25.0),
        segmentComp = cms.double(0.4),
        sharedFrac = cms.double(0.75),
        sharedHits = cms.int32(5)
    ),
    muonCollection = cms.InputTag("muons1stStep"),
    trackCollections = cms.VInputTag(cms.InputTag("generalTracks"), cms.InputTag("cosmicsVetoTracks"))
)


process.cosmicsVetoSeeds = cms.EDProducer("TrajectorySeedFromMuonProducer",
    muonCollectionTag = cms.InputTag("muons1stStep"),
    skipMatchedMuons = cms.bool(False),
    trackCollectionTag = cms.InputTag("generalTracks")
)


process.cosmicsVetoTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('CosmicNavigationSchool'),
    RedundantSeedCleaner = cms.string('none'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('GroupedCkfTrajectoryBuilderP5')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(False),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    reverseTrajectories = cms.bool(False),
    src = cms.InputTag("cosmicsVetoSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.cosmicsVetoTracks = cms.EDProducer("CosmicTrackSelector",
    beamspot = cms.InputTag("offlineBeamSpot"),
    chi2n_par = cms.double(10.0),
    copyExtras = cms.untracked.bool(True),
    copyTrajectories = cms.untracked.bool(False),
    keepAllTracks = cms.bool(False),
    maxNumberLostLayers = cms.uint32(999),
    max_d0 = cms.double(110.0),
    max_eta = cms.double(2.0),
    max_z0 = cms.double(300.0),
    minNumber3DLayers = cms.uint32(0),
    minNumberLayers = cms.uint32(0),
    min_nHit = cms.uint32(5),
    min_nPixelHit = cms.uint32(0),
    min_pt = cms.double(1.0),
    qualityBit = cms.string(''),
    src = cms.InputTag("cosmicsVetoTracksRaw")
)


process.cosmicsVetoTracksRaw = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('ctf'),
    Fitter = cms.string('FittingSmootherRKP5'),
    GeometricInnerState = cms.bool(True),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("cosmicsVetoTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.cosmictrackSelector = cms.EDProducer("CosmicTrackSelector",
    beamspot = cms.InputTag("offlineBeamSpot"),
    chi2n_par = cms.double(10.0),
    copyExtras = cms.untracked.bool(True),
    copyTrajectories = cms.untracked.bool(False),
    keepAllTracks = cms.bool(False),
    maxNumberLostLayers = cms.uint32(999),
    max_d0 = cms.double(110.0),
    max_eta = cms.double(2.0),
    max_z0 = cms.double(300.0),
    minNumber3DLayers = cms.uint32(0),
    minNumberLayers = cms.uint32(0),
    min_nHit = cms.uint32(5),
    min_nPixelHit = cms.uint32(0),
    min_pt = cms.double(1.0),
    qualityBit = cms.string(''),
    src = cms.InputTag("ctfWithMaterialTracksCosmics")
)


process.csc2DRecHits = cms.EDProducer("CSCRecHitDProducer",
    CSCDebug = cms.untracked.bool(False),
    CSCNoOfTimeBinsForDynamicPedestal = cms.int32(2),
    CSCStripClusterChargeCut = cms.double(25.0),
    CSCStripClusterSize = cms.untracked.int32(3),
    CSCStripPeakThreshold = cms.double(10.0),
    CSCStripxtalksOffset = cms.double(0.03),
    CSCUseCalibrations = cms.bool(True),
    CSCUseGasGainCorrections = cms.bool(False),
    CSCUseReducedWireTimeWindow = cms.bool(False),
    CSCUseStaticPedestals = cms.bool(False),
    CSCUseTimingCorrections = cms.bool(True),
    CSCWireClusterDeltaT = cms.int32(1),
    CSCWireTimeWindowHigh = cms.int32(15),
    CSCWireTimeWindowLow = cms.int32(0),
    CSCstripWireDeltaTime = cms.int32(8),
    ConstSyst_ME12 = cms.double(0.02),
    ConstSyst_ME13 = cms.double(0.03),
    ConstSyst_ME1a = cms.double(0.01),
    ConstSyst_ME1b = cms.double(0.02),
    ConstSyst_ME21 = cms.double(0.03),
    ConstSyst_ME22 = cms.double(0.03),
    ConstSyst_ME31 = cms.double(0.03),
    ConstSyst_ME32 = cms.double(0.03),
    ConstSyst_ME41 = cms.double(0.03),
    NoiseLevel_ME12 = cms.double(7.0),
    NoiseLevel_ME13 = cms.double(4.0),
    NoiseLevel_ME1a = cms.double(9.0),
    NoiseLevel_ME1b = cms.double(6.0),
    NoiseLevel_ME21 = cms.double(5.0),
    NoiseLevel_ME22 = cms.double(7.0),
    NoiseLevel_ME31 = cms.double(5.0),
    NoiseLevel_ME32 = cms.double(7.0),
    NoiseLevel_ME41 = cms.double(5.0),
    UseAverageTime = cms.bool(False),
    UseFivePoleFit = cms.bool(True),
    UseParabolaFit = cms.bool(False),
    XTasymmetry_ME12 = cms.double(0.015),
    XTasymmetry_ME13 = cms.double(0.02),
    XTasymmetry_ME1a = cms.double(0.023),
    XTasymmetry_ME1b = cms.double(0.01),
    XTasymmetry_ME21 = cms.double(0.023),
    XTasymmetry_ME22 = cms.double(0.023),
    XTasymmetry_ME31 = cms.double(0.023),
    XTasymmetry_ME32 = cms.double(0.023),
    XTasymmetry_ME41 = cms.double(0.023),
    readBadChambers = cms.bool(True),
    readBadChannels = cms.bool(False),
    stripDigiTag = cms.InputTag("muonCSCDigis","MuonCSCStripDigi"),
    wireDigiTag = cms.InputTag("muonCSCDigis","MuonCSCWireDigi")
)


process.cscSegments = cms.EDProducer("CSCSegmentProducer",
    algo_psets = cms.VPSet(
        cms.PSet(
            algo_name = cms.string('CSCSegAlgoSK'),
            algo_psets = cms.VPSet(
                cms.PSet(
                    chi2Max = cms.double(99999.0),
                    dPhiFineMax = cms.double(0.025),
                    dPhiMax = cms.double(0.003),
                    dRPhiFineMax = cms.double(8.0),
                    dRPhiMax = cms.double(8.0),
                    minLayersApart = cms.int32(2),
                    verboseInfo = cms.untracked.bool(True),
                    wideSeg = cms.double(3.0)
                ), 
                cms.PSet(
                    chi2Max = cms.double(99999.0),
                    dPhiFineMax = cms.double(0.025),
                    dPhiMax = cms.double(0.025),
                    dRPhiFineMax = cms.double(3.0),
                    dRPhiMax = cms.double(8.0),
                    minLayersApart = cms.int32(2),
                    verboseInfo = cms.untracked.bool(True),
                    wideSeg = cms.double(3.0)
                )
            ),
            chamber_types = cms.vstring(
                'ME1/a', 
                'ME1/b', 
                'ME1/2', 
                'ME1/3', 
                'ME2/1', 
                'ME2/2', 
                'ME3/1', 
                'ME3/2', 
                'ME4/1', 
                'ME4/2'
            ),
            parameters_per_chamber_type = cms.vint32(
                2, 1, 1, 1, 1, 
                1, 1, 1, 1, 1
            )
        ), 
        cms.PSet(
            algo_name = cms.string('CSCSegAlgoTC'),
            algo_psets = cms.VPSet(
                cms.PSet(
                    SegmentSorting = cms.int32(1),
                    chi2Max = cms.double(6000.0),
                    chi2ndfProbMin = cms.double(0.0001),
                    dPhiFineMax = cms.double(0.02),
                    dPhiMax = cms.double(0.003),
                    dRPhiFineMax = cms.double(6.0),
                    dRPhiMax = cms.double(1.2),
                    minLayersApart = cms.int32(2),
                    verboseInfo = cms.untracked.bool(True)
                ), 
                cms.PSet(
                    SegmentSorting = cms.int32(1),
                    chi2Max = cms.double(6000.0),
                    chi2ndfProbMin = cms.double(0.0001),
                    dPhiFineMax = cms.double(0.013),
                    dPhiMax = cms.double(0.00198),
                    dRPhiFineMax = cms.double(3.0),
                    dRPhiMax = cms.double(0.6),
                    minLayersApart = cms.int32(2),
                    verboseInfo = cms.untracked.bool(True)
                )
            ),
            chamber_types = cms.vstring(
                'ME1/a', 
                'ME1/b', 
                'ME1/2', 
                'ME1/3', 
                'ME2/1', 
                'ME2/2', 
                'ME3/1', 
                'ME3/2', 
                'ME4/1', 
                'ME4/2'
            ),
            parameters_per_chamber_type = cms.vint32(
                2, 1, 1, 1, 1, 
                1, 1, 1, 1, 1
            )
        ), 
        cms.PSet(
            algo_name = cms.string('CSCSegAlgoDF'),
            algo_psets = cms.VPSet(
                cms.PSet(
                    CSCSegmentDebug = cms.untracked.bool(False),
                    Pruning = cms.untracked.bool(False),
                    chi2Max = cms.double(5000.0),
                    dPhiFineMax = cms.double(0.025),
                    dRPhiFineMax = cms.double(8.0),
                    dXclusBoxMax = cms.double(8.0),
                    dYclusBoxMax = cms.double(8.0),
                    maxDPhi = cms.double(999.0),
                    maxDTheta = cms.double(999.0),
                    maxRatioResidualPrune = cms.double(3.0),
                    minHitsForPreClustering = cms.int32(10),
                    minHitsPerSegment = cms.int32(3),
                    minLayersApart = cms.int32(2),
                    nHitsPerClusterIsShower = cms.int32(20),
                    preClustering = cms.untracked.bool(False),
                    tanPhiMax = cms.double(0.5),
                    tanThetaMax = cms.double(1.2)
                ), 
                cms.PSet(
                    CSCSegmentDebug = cms.untracked.bool(False),
                    Pruning = cms.untracked.bool(False),
                    chi2Max = cms.double(5000.0),
                    dPhiFineMax = cms.double(0.025),
                    dRPhiFineMax = cms.double(12.0),
                    dXclusBoxMax = cms.double(8.0),
                    dYclusBoxMax = cms.double(12.0),
                    maxDPhi = cms.double(999.0),
                    maxDTheta = cms.double(999.0),
                    maxRatioResidualPrune = cms.double(3.0),
                    minHitsForPreClustering = cms.int32(10),
                    minHitsPerSegment = cms.int32(3),
                    minLayersApart = cms.int32(2),
                    nHitsPerClusterIsShower = cms.int32(20),
                    preClustering = cms.untracked.bool(False),
                    tanPhiMax = cms.double(0.8),
                    tanThetaMax = cms.double(2.0)
                ), 
                cms.PSet(
                    CSCSegmentDebug = cms.untracked.bool(False),
                    Pruning = cms.untracked.bool(False),
                    chi2Max = cms.double(5000.0),
                    dPhiFineMax = cms.double(0.025),
                    dRPhiFineMax = cms.double(8.0),
                    dXclusBoxMax = cms.double(8.0),
                    dYclusBoxMax = cms.double(8.0),
                    maxDPhi = cms.double(999.0),
                    maxDTheta = cms.double(999.0),
                    maxRatioResidualPrune = cms.double(3.0),
                    minHitsForPreClustering = cms.int32(30),
                    minHitsPerSegment = cms.int32(3),
                    minLayersApart = cms.int32(2),
                    nHitsPerClusterIsShower = cms.int32(20),
                    preClustering = cms.untracked.bool(False),
                    tanPhiMax = cms.double(0.5),
                    tanThetaMax = cms.double(1.2)
                )
            ),
            chamber_types = cms.vstring(
                'ME1/a', 
                'ME1/b', 
                'ME1/2', 
                'ME1/3', 
                'ME2/1', 
                'ME2/2', 
                'ME3/1', 
                'ME3/2', 
                'ME4/1', 
                'ME4/2'
            ),
            parameters_per_chamber_type = cms.vint32(
                3, 1, 2, 2, 1, 
                2, 1, 2, 1, 2
            )
        ), 
        cms.PSet(
            algo_name = cms.string('CSCSegAlgoST'),
            algo_psets = cms.VPSet(
                cms.PSet(
                    BPMinImprovement = cms.double(10000.0),
                    BrutePruning = cms.bool(True),
                    CSCDebug = cms.untracked.bool(False),
                    CorrectTheErrors = cms.bool(True),
                    Covariance = cms.double(0.0),
                    ForceCovariance = cms.bool(False),
                    ForceCovarianceAll = cms.bool(False),
                    NormChi2Cut2D = cms.double(20.0),
                    NormChi2Cut3D = cms.double(10.0),
                    Pruning = cms.bool(True),
                    SeedBig = cms.double(0.0015),
                    SeedSmall = cms.double(0.0002),
                    curvePenalty = cms.double(2.0),
                    curvePenaltyThreshold = cms.double(0.85),
                    dPhiFineMax = cms.double(0.025),
                    dRPhiFineMax = cms.double(8.0),
                    dXclusBoxMax = cms.double(4.0),
                    dYclusBoxMax = cms.double(8.0),
                    hitDropLimit4Hits = cms.double(0.6),
                    hitDropLimit5Hits = cms.double(0.8),
                    hitDropLimit6Hits = cms.double(0.3333),
                    maxDPhi = cms.double(999.0),
                    maxDTheta = cms.double(999.0),
                    maxRatioResidualPrune = cms.double(3),
                    maxRecHitsInCluster = cms.int32(20),
                    minHitsPerSegment = cms.int32(3),
                    onlyBestSegment = cms.bool(False),
                    preClustering = cms.bool(True),
                    preClusteringUseChaining = cms.bool(True),
                    prePrun = cms.bool(True),
                    prePrunLimit = cms.double(3.17),
                    tanPhiMax = cms.double(0.5),
                    tanThetaMax = cms.double(1.2),
                    useShowering = cms.bool(False),
                    yweightPenalty = cms.double(1.5),
                    yweightPenaltyThreshold = cms.double(1.0)
                ), 
                cms.PSet(
                    BPMinImprovement = cms.double(10000.0),
                    BrutePruning = cms.bool(True),
                    CSCDebug = cms.untracked.bool(False),
                    CorrectTheErrors = cms.bool(True),
                    Covariance = cms.double(0.0),
                    ForceCovariance = cms.bool(False),
                    ForceCovarianceAll = cms.bool(False),
                    NormChi2Cut2D = cms.double(20.0),
                    NormChi2Cut3D = cms.double(10.0),
                    Pruning = cms.bool(True),
                    SeedBig = cms.double(0.0015),
                    SeedSmall = cms.double(0.0002),
                    curvePenalty = cms.double(2.0),
                    curvePenaltyThreshold = cms.double(0.85),
                    dPhiFineMax = cms.double(0.025),
                    dRPhiFineMax = cms.double(8.0),
                    dXclusBoxMax = cms.double(4.0),
                    dYclusBoxMax = cms.double(8.0),
                    hitDropLimit4Hits = cms.double(0.6),
                    hitDropLimit5Hits = cms.double(0.8),
                    hitDropLimit6Hits = cms.double(0.3333),
                    maxDPhi = cms.double(999.0),
                    maxDTheta = cms.double(999.0),
                    maxRatioResidualPrune = cms.double(3),
                    maxRecHitsInCluster = cms.int32(24),
                    minHitsPerSegment = cms.int32(3),
                    onlyBestSegment = cms.bool(False),
                    preClustering = cms.bool(True),
                    preClusteringUseChaining = cms.bool(True),
                    prePrun = cms.bool(True),
                    prePrunLimit = cms.double(3.17),
                    tanPhiMax = cms.double(0.5),
                    tanThetaMax = cms.double(1.2),
                    useShowering = cms.bool(False),
                    yweightPenalty = cms.double(1.5),
                    yweightPenaltyThreshold = cms.double(1.0)
                )
            ),
            chamber_types = cms.vstring(
                'ME1/a', 
                'ME1/b', 
                'ME1/2', 
                'ME1/3', 
                'ME2/1', 
                'ME2/2', 
                'ME3/1', 
                'ME3/2', 
                'ME4/1', 
                'ME4/2'
            ),
            parameters_per_chamber_type = cms.vint32(
                2, 1, 1, 1, 1, 
                1, 1, 1, 1, 1
            )
        ), 
        cms.PSet(
            algo_name = cms.string('CSCSegAlgoRU'),
            algo_psets = cms.VPSet(
                cms.PSet(
                    chi2Max = cms.double(100.0),
                    chi2Norm_2D_ = cms.double(35),
                    chi2_str = cms.double(50.0),
                    dPhiIntMax = cms.double(0.005),
                    dPhiMax = cms.double(0.006),
                    dRIntMax = cms.double(2.0),
                    dRMax = cms.double(1.5),
                    doCollisions = cms.bool(True),
                    enlarge = cms.bool(False),
                    minLayersApart = cms.int32(1),
                    wideSeg = cms.double(3.0)
                ), 
                cms.PSet(
                    chi2Max = cms.double(100.0),
                    chi2Norm_2D_ = cms.double(35),
                    chi2_str = cms.double(50.0),
                    dPhiIntMax = cms.double(0.004),
                    dPhiMax = cms.double(0.005),
                    dRIntMax = cms.double(2.0),
                    dRMax = cms.double(1.5),
                    doCollisions = cms.bool(True),
                    enlarge = cms.bool(False),
                    minLayersApart = cms.int32(1),
                    wideSeg = cms.double(3.0)
                ), 
                cms.PSet(
                    chi2Max = cms.double(100.0),
                    chi2Norm_2D_ = cms.double(35),
                    chi2_str = cms.double(50.0),
                    dPhiIntMax = cms.double(0.003),
                    dPhiMax = cms.double(0.004),
                    dRIntMax = cms.double(2.0),
                    dRMax = cms.double(1.5),
                    doCollisions = cms.bool(True),
                    enlarge = cms.bool(False),
                    minLayersApart = cms.int32(1),
                    wideSeg = cms.double(3.0)
                ), 
                cms.PSet(
                    chi2Max = cms.double(60.0),
                    chi2Norm_2D_ = cms.double(20),
                    chi2_str = cms.double(30.0),
                    dPhiIntMax = cms.double(0.002),
                    dPhiMax = cms.double(0.003),
                    dRIntMax = cms.double(2.0),
                    dRMax = cms.double(1.5),
                    doCollisions = cms.bool(True),
                    enlarge = cms.bool(False),
                    minLayersApart = cms.int32(1),
                    wideSeg = cms.double(3.0)
                ), 
                cms.PSet(
                    chi2Max = cms.double(180.0),
                    chi2Norm_2D_ = cms.double(60),
                    chi2_str = cms.double(80.0),
                    dPhiIntMax = cms.double(0.005),
                    dPhiMax = cms.double(0.007),
                    dRIntMax = cms.double(2.0),
                    dRMax = cms.double(1.5),
                    doCollisions = cms.bool(True),
                    enlarge = cms.bool(False),
                    minLayersApart = cms.int32(1),
                    wideSeg = cms.double(3.0)
                ), 
                cms.PSet(
                    chi2Max = cms.double(100.0),
                    chi2Norm_2D_ = cms.double(35),
                    chi2_str = cms.double(50.0),
                    dPhiIntMax = cms.double(0.004),
                    dPhiMax = cms.double(0.006),
                    dRIntMax = cms.double(2.0),
                    dRMax = cms.double(1.5),
                    doCollisions = cms.bool(True),
                    enlarge = cms.bool(False),
                    minLayersApart = cms.int32(1),
                    wideSeg = cms.double(3.0)
                )
            ),
            chamber_types = cms.vstring(
                'ME1/a', 
                'ME1/b', 
                'ME1/2', 
                'ME1/3', 
                'ME2/1', 
                'ME2/2', 
                'ME3/1', 
                'ME3/2', 
                'ME4/1', 
                'ME4/2'
            ),
            parameters_per_chamber_type = cms.vint32(
                1, 2, 3, 4, 5, 
                6, 5, 6, 5, 6
            )
        )
    ),
    algo_type = cms.int32(5),
    inputObjects = cms.InputTag("csc2DRecHits")
)


process.csctfDigis = cms.EDProducer("CSCTFUnpacker",
    MaxBX = cms.int32(11),
    MinBX = cms.int32(5),
    mappingFile = cms.string(''),
    producer = cms.InputTag("rawDataCollector"),
    slot2sector = cms.vint32(
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0
    ),
    swapME1strips = cms.bool(False)
)


process.ctfCombinedSeeds = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('undefAlgorithm'),
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("ckfTrackCandidatesCombinedSeeds"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.ctfNoOverlaps = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('undefAlgorithm'),
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("ckfTrackCandidatesNoOverlaps"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.ctfPixelLess = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('undefAlgorithm'),
    Fitter = cms.string('RKFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("ckfTrackCandidatesPixelLess"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.ctfWithMaterialTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('undefAlgorithm'),
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("ckfTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.ctfWithMaterialTracksCosmics = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('ctf'),
    Fitter = cms.string('FittingSmootherRKP5'),
    GeometricInnerState = cms.bool(True),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("ckfTrackCandidatesP5"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.ctppsDiamondLocalTracks = cms.EDProducer("CTPPSDiamondLocalTrackFitter",
    mightGet = cms.optional.untracked.vstring,
    recHitsTag = cms.InputTag("ctppsDiamondRecHits"),
    trackingAlgorithmParams = cms.PSet(
        excludeSingleEdgeHits = cms.bool(True),
        pixelEfficiencyFunction = cms.string('(x>[0]-0.5*[1])*(x<[0]+0.5*[1])+0*[2]'),
        resolution = cms.double(0.01),
        sigma = cms.double(0.1),
        startFromX = cms.double(-0.5),
        stopAtX = cms.double(19.5),
        threshold = cms.double(1.5),
        thresholdFromMaximum = cms.double(0.5),
        tolerance = cms.double(0.1),
        yPosition = cms.double(0),
        yWidth = cms.double(0)
    )
)


process.ctppsDiamondRawToDigi = cms.EDProducer("TotemVFATRawToDigi",
    RawToDigi = cms.PSet(
        BC_fraction = cms.untracked.double(0.6),
        BC_min = cms.untracked.uint32(10),
        EC_fraction = cms.untracked.double(0.6),
        EC_min = cms.untracked.uint32(10),
        printErrorSummary = cms.untracked.uint32(0),
        printUnknownFrameSummary = cms.untracked.uint32(0),
        testBCMostFrequent = cms.uint32(2),
        testCRC = cms.uint32(0),
        testECMostFrequent = cms.uint32(0),
        testFootprint = cms.uint32(2),
        testID = cms.uint32(2),
        verbosity = cms.untracked.uint32(0)
    ),
    RawUnpacking = cms.PSet(
        verbosity = cms.untracked.uint32(0)
    ),
    fedIds = cms.vuint32(),
    rawDataTag = cms.InputTag("rawDataCollector"),
    subSystem = cms.string('TimingDiamond')
)


process.ctppsDiamondRecHits = cms.EDProducer("CTPPSDiamondRecHitProducer",
    applyCalibration = cms.bool(True),
    digiTag = cms.InputTag("ctppsDiamondRawToDigi","TimingDiamond"),
    mightGet = cms.optional.untracked.vstring,
    timeSliceNs = cms.double(0.0244140625),
    timingCalibrationTag = cms.string('GlobalTag:PPSDiamondTimingCalibration')
)


process.ctppsLocalTrackLiteProducer = cms.EDProducer("CTPPSLocalTrackLiteProducer",
    includeDiamonds = cms.bool(True),
    includePixels = cms.bool(True),
    includeStrips = cms.bool(True),
    mightGet = cms.optional.untracked.vstring,
    pixelTrackTxMax = cms.double(10),
    pixelTrackTxMin = cms.double(-10),
    pixelTrackTyMax = cms.double(10),
    pixelTrackTyMin = cms.double(-10),
    tagDiamondTrack = cms.InputTag("ctppsDiamondLocalTracks"),
    tagPixelTrack = cms.InputTag("ctppsPixelLocalTracks"),
    tagSiStripTrack = cms.InputTag("totemRPLocalTrackFitter"),
    timingTrackTMax = cms.double(12.5),
    timingTrackTMin = cms.double(-12.5)
)


process.ctppsPixelClusters = cms.EDProducer("CTPPSPixelClusterProducer",
    ADCThreshold = cms.int32(2),
    ElectronADCGain = cms.double(135),
    RPixVerbosity = cms.untracked.int32(0),
    SeedADCThreshold = cms.int32(2),
    VCaltoElectronGain = cms.int32(50),
    VCaltoElectronOffset = cms.int32(-411),
    doSingleCalibration = cms.bool(False),
    label = cms.string('ctppsPixelDigis'),
    mightGet = cms.optional.untracked.vstring
)


process.ctppsPixelDigis = cms.EDProducer("CTPPSPixelRawToDigi",
    includeErrors = cms.bool(True),
    inputLabel = cms.InputTag("rawDataCollector"),
    mappingLabel = cms.string('RPix'),
    mightGet = cms.optional.untracked.vstring
)


process.ctppsPixelLocalTracks = cms.EDProducer("CTPPSPixelLocalTrackProducer",
    label = cms.string('ctppsPixelRecHits'),
    maxHitPerPlane = cms.int32(20),
    maxHitPerRomanPot = cms.int32(60),
    maxRoadSize = cms.int32(20),
    maxTrackPerPattern = cms.int32(5),
    maxTrackPerRomanPot = cms.int32(10),
    maximumChi2OverNDF = cms.double(5),
    maximumXLocalDistanceFromTrack = cms.double(0.2),
    maximumYLocalDistanceFromTrack = cms.double(0.3),
    mightGet = cms.optional.untracked.vstring,
    minRoadSize = cms.int32(3),
    numberOfPlanesPerPot = cms.int32(6),
    patternFinderAlgorithm = cms.string('RPixRoadFinder'),
    roadRadius = cms.double(1),
    trackFinderAlgorithm = cms.string('RPixPlaneCombinatoryTracking'),
    trackMinNumberOfPoints = cms.uint32(3),
    verbosity = cms.untracked.int32(0)
)


process.ctppsPixelRecHits = cms.EDProducer("CTPPSPixelRecHitProducer",
    RPixClusterTag = cms.InputTag("ctppsPixelClusters"),
    RPixVerbosity = cms.untracked.int32(0),
    mightGet = cms.optional.untracked.vstring
)


process.ctppsProtons = cms.EDProducer("CTPPSProtonProducer",
    association_cuts_45 = cms.PSet(
        th_y_cut_apply = cms.bool(False),
        th_y_cut_mean = cms.double(0),
        th_y_cut_value = cms.double(2e-05),
        ti_tr_max = cms.double(2.0),
        ti_tr_min = cms.double(-1.5),
        x_cut_apply = cms.bool(True),
        x_cut_mean = cms.double(-0.065194856),
        x_cut_value = cms.double(0.64032752),
        xi_cut_apply = cms.bool(True),
        xi_cut_mean = cms.double(3.113062e-05),
        xi_cut_value = cms.double(0.0049614344),
        y_cut_apply = cms.bool(True),
        y_cut_mean = cms.double(0.10973631),
        y_cut_value = cms.double(0.5631944)
    ),
    association_cuts_56 = cms.PSet(
        th_y_cut_apply = cms.bool(False),
        th_y_cut_mean = cms.double(0),
        th_y_cut_value = cms.double(2e-05),
        ti_tr_max = cms.double(2.0),
        ti_tr_min = cms.double(-1.5),
        x_cut_apply = cms.bool(True),
        x_cut_mean = cms.double(0.073016431),
        x_cut_value = cms.double(0.9063217),
        xi_cut_apply = cms.bool(True),
        xi_cut_mean = cms.double(-1.1852528e-05),
        xi_cut_value = cms.double(0.010232045),
        y_cut_apply = cms.bool(True),
        y_cut_mean = cms.double(0.064261029),
        y_cut_value = cms.double(0.7495401)
    ),
    default_time = cms.double(-999.0),
    doMultiRPReconstruction = cms.bool(True),
    doSingleRPReconstruction = cms.bool(True),
    fitVtxY = cms.bool(True),
    lhcInfoLabel = cms.string(''),
    localAngleXMax = cms.double(0.03),
    localAngleXMin = cms.double(-0.03),
    localAngleYMax = cms.double(0.04),
    localAngleYMin = cms.double(-0.04),
    max_n_timing_tracks = cms.uint32(5),
    mightGet = cms.optional.untracked.vstring,
    multiRPAlgorithm = cms.string('chi2'),
    multiRPReconstructionLabel = cms.string('multiRP'),
    opticsLabel = cms.string(''),
    pixelDiscardBXShiftedTracks = cms.bool(True),
    singleRPReconstructionLabel = cms.string('singleRP'),
    tagLocalTrackLite = cms.InputTag("ctppsLocalTrackLiteProducer"),
    useImprovedInitialEstimate = cms.bool(True),
    verbosity = cms.untracked.uint32(0)
)


process.dedxDiscrimASmi = cms.EDProducer("DeDxEstimatorProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    ProbabilityMode = cms.string('Accumulation'),
    Reccord = cms.string('SiStripDeDxMip_3D_Rcd'),
    ShapeTest = cms.bool(True),
    UseCalibration = cms.bool(False),
    UsePixel = cms.bool(False),
    UseStrip = cms.bool(True),
    calibrationPath = cms.string(''),
    estimator = cms.string('asmirnovDiscrim'),
    exponent = cms.double(-2.0),
    fraction = cms.double(0.4),
    tracks = cms.InputTag("generalTracks")
)


process.dedxDiscrimBTag = cms.EDProducer("DeDxEstimatorProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    ProbabilityMode = cms.string('Accumulation'),
    Reccord = cms.string('SiStripDeDxMip_3D_Rcd'),
    ShapeTest = cms.bool(True),
    UseCalibration = cms.bool(False),
    UsePixel = cms.bool(False),
    UseStrip = cms.bool(True),
    calibrationPath = cms.string(''),
    estimator = cms.string('btagDiscrim'),
    exponent = cms.double(-2.0),
    fraction = cms.double(0.4),
    tracks = cms.InputTag("generalTracks")
)


process.dedxDiscrimProd = cms.EDProducer("DeDxEstimatorProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    ProbabilityMode = cms.string('Accumulation'),
    Reccord = cms.string('SiStripDeDxMip_3D_Rcd'),
    ShapeTest = cms.bool(True),
    UseCalibration = cms.bool(False),
    UsePixel = cms.bool(False),
    UseStrip = cms.bool(True),
    calibrationPath = cms.string(''),
    estimator = cms.string('productDiscrim'),
    exponent = cms.double(-2.0),
    fraction = cms.double(0.4),
    tracks = cms.InputTag("generalTracks")
)


process.dedxDiscrimSmi = cms.EDProducer("DeDxEstimatorProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    ProbabilityMode = cms.string('Accumulation'),
    Reccord = cms.string('SiStripDeDxMip_3D_Rcd'),
    ShapeTest = cms.bool(True),
    UseCalibration = cms.bool(False),
    UsePixel = cms.bool(False),
    UseStrip = cms.bool(True),
    calibrationPath = cms.string(''),
    estimator = cms.string('smirnovDiscrim'),
    exponent = cms.double(-2.0),
    fraction = cms.double(0.4),
    tracks = cms.InputTag("generalTracks")
)


process.dedxHarmonic2 = cms.EDProducer("DeDxEstimatorProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    ProbabilityMode = cms.string('Accumulation'),
    Reccord = cms.string('SiStripDeDxMip_3D_Rcd'),
    ShapeTest = cms.bool(True),
    UseCalibration = cms.bool(False),
    UsePixel = cms.bool(False),
    UseStrip = cms.bool(True),
    calibrationPath = cms.string(''),
    estimator = cms.string('generic'),
    exponent = cms.double(-2.0),
    fraction = cms.double(0.4),
    tracks = cms.InputTag("generalTracks")
)


process.dedxHitInfo = cms.EDProducer("DeDxHitInfoProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    calibrationPath = cms.string('file:Gains.root'),
    lowPtTracksDeDxThreshold = cms.double(3.5),
    lowPtTracksEstimatorParameters = cms.PSet(
        exponent = cms.double(-2.0),
        fraction = cms.double(-0.15)
    ),
    lowPtTracksPrescaleFail = cms.uint32(2000),
    lowPtTracksPrescalePass = cms.uint32(100),
    maxTrackEta = cms.double(5.0),
    minTrackHits = cms.uint32(0),
    minTrackPt = cms.double(10),
    minTrackPtPrescale = cms.double(0.5),
    shapeTest = cms.bool(True),
    tracks = cms.InputTag("generalTracks"),
    useCalibration = cms.bool(False),
    usePixel = cms.bool(True),
    useStrip = cms.bool(True)
)


process.dedxMedian = cms.EDProducer("DeDxEstimatorProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    ProbabilityMode = cms.string('Accumulation'),
    Reccord = cms.string('SiStripDeDxMip_3D_Rcd'),
    ShapeTest = cms.bool(True),
    UseCalibration = cms.bool(False),
    UsePixel = cms.bool(False),
    UseStrip = cms.bool(True),
    calibrationPath = cms.string(''),
    estimator = cms.string('median'),
    exponent = cms.double(-2.0),
    fraction = cms.double(0.4),
    tracks = cms.InputTag("generalTracks")
)


process.dedxPixelAndStripHarmonic2T085 = cms.EDProducer("DeDxEstimatorProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    ProbabilityMode = cms.string('Accumulation'),
    Reccord = cms.string('SiStripDeDxMip_3D_Rcd'),
    ShapeTest = cms.bool(True),
    UseCalibration = cms.bool(False),
    UsePixel = cms.bool(True),
    UseStrip = cms.bool(True),
    calibrationPath = cms.string(''),
    estimator = cms.string('genericTruncated'),
    exponent = cms.double(-2.0),
    fraction = cms.double(-0.15),
    tracks = cms.InputTag("generalTracks")
)


process.dedxPixelHarmonic2 = cms.EDProducer("DeDxEstimatorProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    ProbabilityMode = cms.string('Accumulation'),
    Reccord = cms.string('SiStripDeDxMip_3D_Rcd'),
    ShapeTest = cms.bool(True),
    UseCalibration = cms.bool(False),
    UsePixel = cms.bool(True),
    UseStrip = cms.bool(False),
    calibrationPath = cms.string(''),
    estimator = cms.string('generic'),
    exponent = cms.double(-2.0),
    fraction = cms.double(0.4),
    tracks = cms.InputTag("generalTracks")
)


process.dedxTruncated40 = cms.EDProducer("DeDxEstimatorProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    ProbabilityMode = cms.string('Accumulation'),
    Reccord = cms.string('SiStripDeDxMip_3D_Rcd'),
    ShapeTest = cms.bool(True),
    UseCalibration = cms.bool(False),
    UsePixel = cms.bool(False),
    UseStrip = cms.bool(True),
    calibrationPath = cms.string(''),
    estimator = cms.string('truncated'),
    exponent = cms.double(-2.0),
    fraction = cms.double(0.4),
    tracks = cms.InputTag("generalTracks")
)


process.dedxUnbinned = cms.EDProducer("DeDxEstimatorProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    ProbabilityMode = cms.string('Accumulation'),
    Reccord = cms.string('SiStripDeDxMip_3D_Rcd'),
    ShapeTest = cms.bool(True),
    UseCalibration = cms.bool(False),
    UsePixel = cms.bool(False),
    UseStrip = cms.bool(True),
    calibrationPath = cms.string(''),
    estimator = cms.string('unbinnedFit'),
    exponent = cms.double(-2.0),
    fraction = cms.double(0.4),
    tracks = cms.InputTag("generalTracks")
)


process.detachedQuadStep = cms.EDProducer("TrackListMerger",
    Epsilon = cms.double(-0.001),
    FoundHitBonus = cms.double(5.0),
    LostHitPenalty = cms.double(5.0),
    MaxNormalizedChisq = cms.double(1000.0),
    MinFound = cms.int32(3),
    MinPT = cms.double(0.05),
    ShareFrac = cms.double(0.19),
    TrackProducers = cms.VInputTag(cms.InputTag("detachedQuadStepTracks"), cms.InputTag("detachedQuadStepTracks")),
    allowFirstHitShare = cms.bool(True),
    copyExtras = cms.untracked.bool(False),
    copyMVA = cms.bool(True),
    hasSelector = cms.vint32(1, 1),
    indivShareFrac = cms.vdouble(0.09, 0.09),
    newQuality = cms.string('confirmed'),
    selectedTrackQuals = cms.VInputTag(cms.InputTag("detachedQuadStepSelector","detachedQuadStepVtx"), cms.InputTag("detachedQuadStepSelector","detachedQuadStepTrk")),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(True),
        tLists = cms.vint32(0, 1)
    )),
    shareFrac = cms.double(0.09),
    trackAlgoPriorityOrder = cms.string('trackAlgoPriorityOrder'),
    writeOnlyTrkQuals = cms.bool(True)
)


process.detachedQuadStepClusters = cms.EDProducer("TrackClusterRemoverPhase2",
    TrackQuality = cms.string('highPurity'),
    maxChi2 = cms.double(9.0),
    mightGet = cms.optional.untracked.vstring,
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    oldClusterRemovalInfo = cms.InputTag("lowPtTripletStepClusters"),
    overrideTrkQuals = cms.InputTag("lowPtTripletStepSelector","lowPtTripletStep"),
    phase2OTClusters = cms.InputTag("siPhase2Clusters"),
    phase2pixelClusters = cms.InputTag("siPixelClusters"),
    trackClassifier = cms.InputTag("","QualityMasks"),
    trajectories = cms.InputTag("lowPtTripletStepTracks")
)


process.detachedQuadStepHitDoublets = cms.EDProducer("HitPairEDProducer",
    clusterCheck = cms.InputTag("trackerClusterCheck"),
    layerPairs = cms.vuint32(0, 1, 2),
    maxElement = cms.uint32(50000000),
    maxElementTotal = cms.uint32(50000000),
    mightGet = cms.optional.untracked.vstring,
    produceIntermediateHitDoublets = cms.bool(True),
    produceSeedingHitSets = cms.bool(False),
    seedingLayers = cms.InputTag("detachedQuadStepSeedLayers"),
    trackingRegions = cms.InputTag("detachedQuadStepTrackingRegions"),
    trackingRegionsSeedingLayers = cms.InputTag("")
)


process.detachedQuadStepHitQuadruplets = cms.EDProducer("CAHitQuadrupletEDProducer",
    CAHardPtCut = cms.double(0),
    CAOnlyOneLastHitPerLayerFilter = cms.optional.bool,
    CAPhiCut = cms.double(0),
    CAThetaCut = cms.double(0.0011),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    doublets = cms.InputTag("detachedQuadStepHitDoublets"),
    extraHitRPhitolerance = cms.double(0),
    fitFastCircle = cms.bool(True),
    fitFastCircleChi2Cut = cms.bool(True),
    maxChi2 = cms.PSet(
        enabled = cms.bool(True),
        pt1 = cms.double(0.8),
        pt2 = cms.double(2),
        value1 = cms.double(500),
        value2 = cms.double(100)
    ),
    mightGet = cms.optional.untracked.vstring,
    useBendingCorrection = cms.bool(True)
)


process.detachedQuadStepMasks = cms.EDProducer("FastTrackerRecHitMaskProducer",
    TrackQuality = cms.string('highPurity'),
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    minNumberOfLayersWithMeasBeforeFiltering_ = cms.int32(0),
    oldHitRemovalInfo = cms.InputTag("lowPtTripletStepMasks"),
    recHits = cms.InputTag("fastTrackerRecHits"),
    trackClassifier = cms.InputTag("","QualityMasks"),
    trackQuality = cms.string('hightPurity'),
    trajectories = cms.InputTag("lowPtTripletStepTracks")
)


process.detachedQuadStepSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("detachedQuadStepClusters")
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("detachedQuadStepClusters")
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring(
        'BPix1+BPix2+BPix3+BPix4', 
        'BPix1+BPix2+BPix3+FPix1_pos', 
        'BPix1+BPix2+BPix3+FPix1_neg', 
        'BPix1+BPix2+FPix1_pos+FPix2_pos', 
        'BPix1+BPix2+FPix1_neg+FPix2_neg', 
        'BPix1+FPix1_pos+FPix2_pos+FPix3_pos', 
        'BPix1+FPix1_neg+FPix2_neg+FPix3_neg', 
        'FPix1_pos+FPix2_pos+FPix3_pos+FPix4_pos', 
        'FPix1_neg+FPix2_neg+FPix3_neg+FPix4_neg', 
        'FPix2_pos+FPix3_pos+FPix4_pos+FPix5_pos', 
        'FPix2_neg+FPix3_neg+FPix4_neg+FPix5_neg', 
        'FPix3_pos+FPix4_pos+FPix5_pos+FPix6_pos', 
        'FPix3_neg+FPix4_neg+FPix5_neg+FPix6_neg', 
        'FPix4_pos+FPix5_pos+FPix6_pos+FPix7_pos', 
        'FPix4_neg+FPix5_neg+FPix6_neg+FPix7_neg', 
        'FPix5_pos+FPix6_pos+FPix7_pos+FPix8_pos', 
        'FPix5_neg+FPix6_neg+FPix7_neg+FPix8_neg'
    ),
    mightGet = cms.optional.untracked.vstring
)


process.detachedQuadStepSeeds = cms.EDProducer("SeedCreatorFromRegionConsecutiveHitsTripletOnlyEDProducer",
    MinOneOverPtError = cms.double(1),
    OriginTransverseErrorMultiplier = cms.double(1),
    SeedComparitorPSet = cms.PSet(
        ClusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
        ClusterShapeHitFilterName = cms.string('ClusterShapeHitFilter'),
        ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
        FilterAtHelixStage = cms.bool(False),
        FilterPixelHits = cms.bool(True),
        FilterStripHits = cms.bool(False)
    ),
    SeedMomentumForBOFF = cms.double(5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    forceKinematicWithRegionDirection = cms.bool(False),
    magneticField = cms.string(''),
    mightGet = cms.optional.untracked.vstring,
    propagator = cms.string('PropagatorWithMaterial'),
    seedingHitSets = cms.InputTag("detachedQuadStepHitQuadruplets")
)


process.detachedQuadStepSelector = cms.EDProducer("MultiTrackSelector",
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("detachedQuadStepTracks"),
    trackSelectors = cms.VPSet(
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(1.0),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.9, 3.0),
            d0_par2 = cms.vdouble(1.0, 3.0),
            dz_par1 = cms.vdouble(0.9, 3.0),
            dz_par2 = cms.vdouble(1.0, 3.0),
            keepAllTracks = cms.bool(False),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('detachedQuadStepVtxLoose'),
            preFilterName = cms.string(''),
            qualityBit = cms.string('loose'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.6),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(1.3, 4.0),
            d0_par2 = cms.vdouble(1.3, 4.0),
            dz_par1 = cms.vdouble(1.3, 4.0),
            dz_par2 = cms.vdouble(1.3, 4.0),
            keepAllTracks = cms.bool(False),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('detachedQuadStepTrkLoose'),
            preFilterName = cms.string(''),
            qualityBit = cms.string('loose'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.9),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.9, 3.0),
            d0_par2 = cms.vdouble(0.9, 3.0),
            dz_par1 = cms.vdouble(0.9, 3.0),
            dz_par2 = cms.vdouble(0.9, 3.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('detachedQuadStepVtxTight'),
            preFilterName = cms.string('detachedQuadStepVtxLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.5),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(1.1, 4.0),
            d0_par2 = cms.vdouble(1.1, 4.0),
            dz_par1 = cms.vdouble(1.1, 4.0),
            dz_par2 = cms.vdouble(1.1, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(4),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('detachedQuadStepTrkTight'),
            preFilterName = cms.string('detachedQuadStepTrkLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.9),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.8, 3.0),
            d0_par2 = cms.vdouble(0.8, 3.0),
            dz_par1 = cms.vdouble(0.8, 3.0),
            dz_par2 = cms.vdouble(0.8, 3.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(4.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-4.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('detachedQuadStepVtx'),
            preFilterName = cms.string('detachedQuadStepVtxTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.5),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.9, 4.0),
            d0_par2 = cms.vdouble(0.9, 4.0),
            dz_par1 = cms.vdouble(0.9, 4.0),
            dz_par2 = cms.vdouble(0.9, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(4.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(4),
            min_eta = cms.double(-4.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('detachedQuadStepTrk'),
            preFilterName = cms.string('detachedQuadStepTrkTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        )
    ),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(False),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.detachedQuadStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('detachedQuadStepTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('detachedQuadStepTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    numHitsForSeedCleaner = cms.int32(50),
    onlyPixelHitsForSeedCleaner = cms.bool(True),
    phase2clustersToSkip = cms.InputTag("detachedQuadStepClusters"),
    reverseTrajectories = cms.bool(False),
    src = cms.InputTag("detachedQuadStepSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.detachedQuadStepTrackingRegions = cms.EDProducer("GlobalTrackingRegionFromBeamSpotEDProducer",
    RegionPSet = cms.PSet(
        beamSpot = cms.InputTag("offlineBeamSpot"),
        nSigmaZ = cms.double(5.0),
        originHalfLength = cms.double(0),
        originRadius = cms.double(0.9),
        precise = cms.bool(True),
        ptMin = cms.double(0.45),
        useMultipleScattering = cms.bool(False)
    ),
    mightGet = cms.optional.untracked.vstring
)


process.detachedQuadStepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('detachedQuadStep'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("detachedQuadStepTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.detachedTripletStep = cms.EDProducer("ClassifierMerger",
    inputClassifiers = cms.vstring(
        'detachedTripletStepClassifier1', 
        'detachedTripletStepClassifier2'
    ),
    mightGet = cms.optional.untracked.vstring
)


process.detachedTripletStepClassifier1 = cms.EDProducer("TrackMVAClassifierDetached",
    beamspot = cms.InputTag("offlineBeamSpot"),
    ignoreVertices = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    mva = cms.PSet(
        GBRForestFileName = cms.string(''),
        GBRForestLabel = cms.string('MVASelectorIter3_13TeV')
    ),
    qualityCuts = cms.vdouble(-0.5, 0.0, 0.5),
    src = cms.InputTag("detachedTripletStepTracks"),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.detachedTripletStepClassifier2 = cms.EDProducer("TrackMVAClassifierPrompt",
    beamspot = cms.InputTag("offlineBeamSpot"),
    ignoreVertices = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    mva = cms.PSet(
        GBRForestFileName = cms.string(''),
        GBRForestLabel = cms.string('MVASelectorIter0_13TeV')
    ),
    qualityCuts = cms.vdouble(-0.2, 0.0, 0.4),
    src = cms.InputTag("detachedTripletStepTracks"),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.detachedTripletStepClusters = cms.EDProducer("TrackClusterRemoverPhase2",
    TrackQuality = cms.string('highPurity'),
    maxChi2 = cms.double(9.0),
    mightGet = cms.optional.untracked.vstring,
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    oldClusterRemovalInfo = cms.InputTag(""),
    overrideTrkQuals = cms.InputTag(""),
    phase2OTClusters = cms.InputTag("siPhase2Clusters"),
    phase2pixelClusters = cms.InputTag("siPixelClusters"),
    trackClassifier = cms.InputTag("","QualityMasks"),
    trajectories = cms.InputTag("")
)


process.detachedTripletStepHitDoublets = cms.EDProducer("HitPairEDProducer",
    clusterCheck = cms.InputTag("trackerClusterCheck"),
    layerPairs = cms.vuint32(0),
    maxElement = cms.uint32(50000000),
    maxElementTotal = cms.uint32(50000000),
    mightGet = cms.optional.untracked.vstring,
    produceIntermediateHitDoublets = cms.bool(True),
    produceSeedingHitSets = cms.bool(False),
    seedingLayers = cms.InputTag("detachedTripletStepSeedLayers"),
    trackingRegions = cms.InputTag("detachedTripletStepTrackingRegions"),
    trackingRegionsSeedingLayers = cms.InputTag("")
)


process.detachedTripletStepHitTriplets = cms.EDProducer("PixelTripletLargeTipEDProducer",
    doublets = cms.InputTag("detachedTripletStepHitDoublets"),
    extraHitRPhitolerance = cms.double(0),
    extraHitRZtolerance = cms.double(0),
    maxElement = cms.uint32(0),
    mightGet = cms.optional.untracked.vstring,
    phiPreFiltering = cms.double(0.3),
    produceIntermediateHitTriplets = cms.bool(False),
    produceSeedingHitSets = cms.bool(True),
    useBending = cms.bool(True),
    useFixedPreFiltering = cms.bool(False),
    useMultScattering = cms.bool(True)
)


process.detachedTripletStepMasks = cms.EDProducer("FastTrackerRecHitMaskProducer",
    TrackQuality = cms.string('highPurity'),
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    minNumberOfLayersWithMeasBeforeFiltering_ = cms.int32(0),
    oldHitRemovalInfo = cms.InputTag(""),
    recHits = cms.InputTag("fastTrackerRecHits"),
    trackClassifier = cms.InputTag("","QualityMasks"),
    trackQuality = cms.string('hightPurity'),
    trajectories = cms.InputTag("")
)


process.detachedTripletStepSeedClusterMask = cms.EDProducer("SeedClusterRemover",
    Common = cms.PSet(
        maxChi2 = cms.double(9.0)
    ),
    oldClusterRemovalInfo = cms.InputTag("initialStepSeedClusterMask"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    trajectories = cms.InputTag("lowPtTripletStepSeeds")
)


process.detachedTripletStepSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("detachedTripletStepClusters")
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("detachedTripletStepClusters")
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring(
        'BPix1+BPix2+BPix3', 
        'BPix2+BPix3+BPix4', 
        'BPix2+BPix3+FPix1_pos', 
        'BPix2+BPix3+FPix1_neg', 
        'BPix1+BPix2+FPix1_pos', 
        'BPix1+BPix2+FPix1_neg', 
        'BPix2+FPix1_pos+FPix2_pos', 
        'BPix2+FPix1_neg+FPix2_neg', 
        'BPix1+FPix1_pos+FPix2_pos', 
        'BPix1+FPix1_neg+FPix2_neg', 
        'BPix1+FPix2_pos+FPix3_pos', 
        'BPix1+FPix2_neg+FPix3_neg', 
        'FPix1_pos+FPix2_pos+FPix3_pos', 
        'FPix1_neg+FPix2_neg+FPix3_neg', 
        'FPix2_pos+FPix3_pos+FPix4_pos', 
        'FPix2_neg+FPix3_neg+FPix4_neg', 
        'FPix3_pos+FPix4_pos+FPix5_pos', 
        'FPix3_neg+FPix4_neg+FPix5_neg', 
        'FPix4_pos+FPix5_pos+FPix6_pos', 
        'FPix4_neg+FPix5_neg+FPix6_neg', 
        'FPix5_pos+FPix6_pos+FPix7_pos', 
        'FPix5_neg+FPix6_neg+FPix7_neg', 
        'FPix6_pos+FPix7_pos+FPix8_pos', 
        'FPix6_neg+FPix7_neg+FPix8_neg', 
        'FPix6_pos+FPix7_pos+FPix9_pos', 
        'FPix6_neg+FPix7_neg+FPix9_neg'
    ),
    mightGet = cms.optional.untracked.vstring
)


process.detachedTripletStepSeeds = cms.EDProducer("SeedCreatorFromRegionConsecutiveHitsTripletOnlyEDProducer",
    MinOneOverPtError = cms.double(1),
    OriginTransverseErrorMultiplier = cms.double(1),
    SeedComparitorPSet = cms.PSet(
        ClusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
        ClusterShapeHitFilterName = cms.string('ClusterShapeHitFilter'),
        ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
        FilterAtHelixStage = cms.bool(False),
        FilterPixelHits = cms.bool(True),
        FilterStripHits = cms.bool(False)
    ),
    SeedMomentumForBOFF = cms.double(5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    forceKinematicWithRegionDirection = cms.bool(False),
    magneticField = cms.string(''),
    mightGet = cms.optional.untracked.vstring,
    propagator = cms.string('PropagatorWithMaterial'),
    seedingHitSets = cms.InputTag("detachedTripletStepHitTriplets")
)


process.detachedTripletStepSelector = cms.EDProducer("MultiTrackSelector",
    GBRForestLabel = cms.string('MVASelectorIter3'),
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("detachedTripletStepTracks"),
    trackSelectors = cms.VPSet(
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(1.6),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(1.2, 3.0),
            d0_par2 = cms.vdouble(1.3, 3.0),
            dz_par1 = cms.vdouble(1.2, 3.0),
            dz_par2 = cms.vdouble(1.3, 3.0),
            keepAllTracks = cms.bool(False),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('detachedTripletStepVtxLoose'),
            preFilterName = cms.string(''),
            qualityBit = cms.string('loose'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.7),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(1.6, 4.0),
            d0_par2 = cms.vdouble(1.6, 4.0),
            dz_par1 = cms.vdouble(1.6, 4.0),
            dz_par2 = cms.vdouble(1.6, 4.0),
            keepAllTracks = cms.bool(False),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('detachedTripletStepTrkLoose'),
            preFilterName = cms.string(''),
            qualityBit = cms.string('loose'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.7),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.95, 3.0),
            d0_par2 = cms.vdouble(1.0, 3.0),
            dz_par1 = cms.vdouble(0.9, 3.0),
            dz_par2 = cms.vdouble(1.0, 3.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('detachedTripletStepVtxTight'),
            preFilterName = cms.string('detachedTripletStepVtxLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.5),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(1.1, 4.0),
            d0_par2 = cms.vdouble(1.1, 4.0),
            dz_par1 = cms.vdouble(1.1, 4.0),
            dz_par2 = cms.vdouble(1.1, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(5),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('detachedTripletStepTrkTight'),
            preFilterName = cms.string('detachedTripletStepTrkLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.7),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.85, 3.0),
            d0_par2 = cms.vdouble(0.9, 3.0),
            dz_par1 = cms.vdouble(0.8, 3.0),
            dz_par2 = cms.vdouble(0.9, 3.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('detachedTripletStepVtx'),
            preFilterName = cms.string('detachedTripletStepVtxTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.4),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(1.0, 4.0),
            d0_par2 = cms.vdouble(1.0, 4.0),
            dz_par1 = cms.vdouble(1.0, 4.0),
            dz_par2 = cms.vdouble(1.0, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(4),
            minNumberLayers = cms.uint32(5),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('detachedTripletStepTrk'),
            preFilterName = cms.string('detachedTripletStepTrkTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        )
    ),
    useAnyMVA = cms.bool(False),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(False),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.detachedTripletStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('detachedTripletStepTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('detachedTripletStepTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    clustersToSkip = cms.InputTag("detachedTripletStepClusters"),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    numHitsForSeedCleaner = cms.int32(50),
    onlyPixelHitsForSeedCleaner = cms.bool(True),
    reverseTrajectories = cms.bool(False),
    src = cms.InputTag("detachedTripletStepSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.detachedTripletStepTrackingRegions = cms.EDProducer("GlobalTrackingRegionFromBeamSpotEDProducer",
    RegionPSet = cms.PSet(
        beamSpot = cms.InputTag("offlineBeamSpot"),
        nSigmaZ = cms.double(0),
        originHalfLength = cms.double(15.0),
        originRadius = cms.double(1.5),
        precise = cms.bool(True),
        ptMin = cms.double(0.3),
        useMultipleScattering = cms.bool(False)
    ),
    mightGet = cms.optional.untracked.vstring
)


process.detachedTripletStepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('detachedTripletStep'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("detachedTripletStepTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.discriminationByIsolationMVArun2v1 = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    PFTauProducer = cms.InputTag("pfTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding"),
            cut = cms.double(0.5)
        )
    ),
    inputFileName = cms.FileInPath('RecoTauTag/RecoTau/data/emptyMVAinputFile'),
    loadMVAfromDB = cms.bool(True),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.string('newDMwLT'),
        variable = cms.string('pt')
    )),
    mightGet = cms.optional.untracked.vstring,
    mvaOutput_normalization = cms.string(''),
    rawValues = cms.vstring('discriminator'),
    toMultiplex = cms.InputTag("discriminationByIsolationMVArun2v1raw"),
    verbosity = cms.int32(0),
    workingPoints = cms.vstring(
        'Eff80', 
        'Eff70', 
        'Eff60', 
        'Eff50', 
        'Eff40'
    )
)


process.discriminationByIsolationMVArun2v1raw = cms.EDProducer("PFRecoTauDiscriminationByMVAIsolationRun2",
    PFTauProducer = cms.InputTag("pfTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding"),
            cut = cms.double(0.5)
        )
    ),
    inputFileName = cms.optional.FileInPath,
    inputIDNameSuffix = cms.string(''),
    loadMVAfromDB = cms.bool(True),
    mightGet = cms.optional.untracked.vstring,
    mvaName = cms.string('tauIdMVAnewDMwLT'),
    mvaOpt = cms.string('newDMwLT'),
    srcBasicTauDiscriminators = cms.InputTag("hpsPFTauBasicDiscriminators"),
    srcTauTransverseImpactParameters = cms.InputTag(""),
    verbosity = cms.int32(0)
)


process.displacedGlobalMuons = cms.EDProducer("GlobalMuonProducer",
    GLBTrajBuilderParameters = cms.PSet(
        GlbRefitterParameters = cms.PSet(
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            Chi2CutCSC = cms.double(150.0),
            Chi2CutDT = cms.double(10.0),
            Chi2CutGEM = cms.double(1.0),
            Chi2CutME0 = cms.double(1.0),
            Chi2CutRPC = cms.double(1.0),
            Chi2ProbabilityCut = cms.double(30.0),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            DYTselector = cms.int32(1),
            DYTthrs = cms.vint32(20, 30),
            DYTthrsParameters = cms.PSet(
                eta0p8 = cms.vdouble(1, -0.919853, 0.990742),
                eta1p2 = cms.vdouble(1, -0.897354, 0.987738),
                eta2p0 = cms.vdouble(4, -0.986855, 0.998516),
                eta2p2 = cms.vdouble(1, -0.940342, 0.992955),
                eta2p4 = cms.vdouble(1, -0.947633, 0.993762)
            ),
            DYTupdator = cms.bool(False),
            DYTuseAPE = cms.bool(False),
            DYTuseThrsParametrization = cms.bool(True),
            DoPredictionsOnly = cms.bool(False),
            Fitter = cms.string('GlbMuKFFitter'),
            GEMRecHitLabel = cms.InputTag("gemRecHits"),
            HitThreshold = cms.int32(1),
            ME0RecHitLabel = cms.InputTag("me0Segments"),
            MuonHitsOption = cms.int32(1),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            PropDirForCosmics = cms.bool(False),
            Propagator = cms.string('SmartPropagatorAnyRK'),
            PtCut = cms.double(1.0),
            RefitDirection = cms.string('insideOut'),
            RefitFlag = cms.bool(True),
            RefitRPCHits = cms.bool(True),
            SkipStation = cms.int32(-1),
            TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
            TrackerSkipSection = cms.int32(-1),
            TrackerSkipSystem = cms.int32(-1)
        ),
        GlobalMuonTrackMatcher = cms.PSet(
            Chi2Cut_1 = cms.double(50.0),
            Chi2Cut_2 = cms.double(50.0),
            Chi2Cut_3 = cms.double(200.0),
            DeltaDCut_1 = cms.double(2.5),
            DeltaDCut_2 = cms.double(10.0),
            DeltaDCut_3 = cms.double(15.0),
            DeltaRCut_1 = cms.double(0.1),
            DeltaRCut_2 = cms.double(0.2),
            DeltaRCut_3 = cms.double(1.0),
            Eta_threshold = cms.double(1.2),
            LocChi2Cut = cms.double(20.0),
            MinP = cms.double(2.5),
            MinPt = cms.double(1.0),
            Propagator = cms.string('SmartPropagatorRK'),
            Pt_threshold1 = cms.double(0.0),
            Pt_threshold2 = cms.double(999999999.0),
            Quality_1 = cms.double(20.0),
            Quality_2 = cms.double(15.0),
            Quality_3 = cms.double(7.0)
        ),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        MuonTrackingRegionBuilder = cms.PSet(
            DeltaEta = cms.double(0.2),
            DeltaPhi = cms.double(0.2),
            DeltaR = cms.double(0.2),
            DeltaZ = cms.double(15.9),
            EtaR_UpperLimit_Par1 = cms.double(0.25),
            EtaR_UpperLimit_Par2 = cms.double(0.15),
            Eta_fixed = cms.bool(False),
            Eta_min = cms.double(0.1),
            MeasurementTrackerName = cms.InputTag(""),
            OnDemand = cms.int32(-1),
            PhiR_UpperLimit_Par1 = cms.double(0.6),
            PhiR_UpperLimit_Par2 = cms.double(0.2),
            Phi_fixed = cms.bool(False),
            Phi_min = cms.double(0.1),
            Pt_fixed = cms.bool(False),
            Pt_min = cms.double(1.5),
            Rescale_Dz = cms.double(3.0),
            Rescale_eta = cms.double(3.0),
            Rescale_phi = cms.double(3.0),
            UseVertex = cms.bool(False),
            Z_fixed = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            input = cms.InputTag(""),
            maxRegions = cms.int32(1),
            precise = cms.bool(True),
            vertexCollection = cms.InputTag("")
        ),
        PCut = cms.double(2.5),
        PtCut = cms.double(1.0),
        RefitRPCHits = cms.bool(True),
        ScaleTECxFactor = cms.double(-1.0),
        ScaleTECyFactor = cms.double(-1.0),
        TrackTransformer = cms.PSet(
            DoPredictionsOnly = cms.bool(False),
            Fitter = cms.string('KFFitterForRefitInsideOut'),
            MTDRecHitBuilder = cms.string('MTDRecHitBuilder'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            Propagator = cms.string('SmartPropagatorAnyRK'),
            RefitDirection = cms.string('alongMomentum'),
            RefitRPCHits = cms.bool(True),
            Smoother = cms.string('KFSmootherForRefitInsideOut'),
            TrackerRecHitBuilder = cms.string('WithAngleAndTemplate')
        ),
        TrackerPropagator = cms.string('SteppingHelixPropagatorAny'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate')
    ),
    MuonCollectionLabel = cms.InputTag("displacedStandAloneMuons"),
    ServiceParameters = cms.PSet(
        CSCLayers = cms.untracked.bool(True),
        GEMLayers = cms.untracked.bool(True),
        ME0Layers = cms.bool(True),
        Propagators = cms.untracked.vstring(
            'SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'
        ),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(True),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    ),
    TrackerCollectionLabel = cms.InputTag("displacedTracks")
)


process.displacedMuonSeeds = cms.EDProducer("CosmicMuonSeedGenerator",
    CSCRecSegmentLabel = cms.InputTag("cscSegments"),
    DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
    EnableCSCMeasurement = cms.bool(True),
    EnableDTMeasurement = cms.bool(True),
    ForcePointDown = cms.bool(False),
    MaxCSCChi2 = cms.double(300.0),
    MaxDTChi2 = cms.double(300.0),
    MaxSeeds = cms.int32(1000)
)


process.displacedStandAloneMuons = cms.EDProducer("StandAloneMuonProducer",
    InputObjects = cms.InputTag("displacedMuonSeeds"),
    MuonTrajectoryBuilder = cms.string('StandAloneMuonTrajectoryBuilder'),
    STATrajBuilderParameters = cms.PSet(
        BWFilterParameters = cms.PSet(
            BWSeedType = cms.string('fromGenerator'),
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            EnableCSCMeasurement = cms.bool(True),
            EnableDTMeasurement = cms.bool(True),
            EnableGEMMeasurement = cms.bool(True),
            EnableME0Measurement = cms.bool(True),
            EnableRPCMeasurement = cms.bool(True),
            FitDirection = cms.string('outsideIn'),
            GEMRecSegmentLabel = cms.InputTag("gemRecHits"),
            ME0RecSegmentLabel = cms.InputTag("me0Segments"),
            MaxChi2 = cms.double(100.0),
            MuonTrajectoryUpdatorParameters = cms.PSet(
                ExcludeRPCFromFit = cms.bool(False),
                Granularity = cms.int32(0),
                MaxChi2 = cms.double(25.0),
                RescaleError = cms.bool(False),
                RescaleErrorFactor = cms.double(100.0),
                UseInvalidHits = cms.bool(True)
            ),
            NumberOfSigma = cms.double(3.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            RPCRecSegmentLabel = cms.InputTag("rpcRecHits")
        ),
        DoBackwardFilter = cms.bool(True),
        DoRefit = cms.bool(False),
        DoSeedRefit = cms.bool(False),
        FilterParameters = cms.PSet(
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            EnableCSCMeasurement = cms.bool(True),
            EnableDTMeasurement = cms.bool(True),
            EnableGEMMeasurement = cms.bool(True),
            EnableME0Measurement = cms.bool(True),
            EnableRPCMeasurement = cms.bool(True),
            FitDirection = cms.string('insideOut'),
            GEMRecSegmentLabel = cms.InputTag("gemRecHits"),
            ME0RecSegmentLabel = cms.InputTag("me0Segments"),
            MaxChi2 = cms.double(1000.0),
            MuonTrajectoryUpdatorParameters = cms.PSet(
                ExcludeRPCFromFit = cms.bool(False),
                Granularity = cms.int32(0),
                MaxChi2 = cms.double(25.0),
                RescaleError = cms.bool(False),
                RescaleErrorFactor = cms.double(100.0),
                UseInvalidHits = cms.bool(True)
            ),
            NumberOfSigma = cms.double(3.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            RPCRecSegmentLabel = cms.InputTag("rpcRecHits")
        ),
        NavigationType = cms.string('Standard'),
        RefitterParameters = cms.PSet(
            FitterName = cms.string('KFFitterSmootherSTA'),
            ForceAllIterations = cms.bool(False),
            MaxFractionOfLostHits = cms.double(0.05),
            NumberOfIterations = cms.uint32(3),
            RescaleError = cms.double(100.0)
        ),
        SeedPosition = cms.string('in'),
        SeedPropagator = cms.string('SteppingHelixPropagatorAny'),
        SeedTransformerParameters = cms.PSet(
            Fitter = cms.string('KFFitterSmootherSTA'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            NMinRecHits = cms.uint32(2),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            RescaleError = cms.double(100.0),
            UseSubRecHits = cms.bool(False)
        )
    ),
    ServiceParameters = cms.PSet(
        CSCLayers = cms.untracked.bool(True),
        GEMLayers = cms.untracked.bool(True),
        ME0Layers = cms.bool(True),
        Propagators = cms.untracked.vstring(
            'SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'
        ),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    )
)


process.displacedTracks = cms.EDProducer("DuplicateListMerger",
    candidateComponents = cms.InputTag("duplicateDisplacedTrackCandidates","candidateMap"),
    candidateSource = cms.InputTag("duplicateDisplacedTrackCandidates","candidates"),
    copyExtras = cms.untracked.bool(True),
    copyTrajectories = cms.untracked.bool(False),
    diffHitsCut = cms.int32(5),
    mergedMVAVals = cms.InputTag("duplicateDisplacedTrackClassifier","MVAValues"),
    mergedSource = cms.InputTag("mergedDuplicateDisplacedTracks"),
    mightGet = cms.optional.untracked.vstring,
    originalMVAVals = cms.InputTag("preDuplicateMergingDisplacedTracks","MVAValues"),
    originalSource = cms.InputTag("preDuplicateMergingDisplacedTracks"),
    trackAlgoPriorityOrder = cms.string('trackAlgoPriorityOrder')
)


process.doubleSecondaryVertexHighEffBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('doubleVertex2TrkComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("inclusiveSecondaryVertexFinderFilteredTagInfos"))
)


process.dt1DCosmicRecHits = cms.EDProducer("DTRecHitProducer",
    debug = cms.untracked.bool(False),
    dtDigiLabel = cms.InputTag("muonDTDigis"),
    recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
    recAlgoConfig = cms.PSet(
        debug = cms.untracked.bool(False),
        doVdriftCorr = cms.bool(False),
        maxTime = cms.double(420.0),
        minTime = cms.double(-3.0),
        stepTwoFromDigi = cms.bool(False),
        tTrigMode = cms.string('DTTTrigSyncFromDB'),
        tTrigModeConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doT0Correction = cms.bool(True),
            doTOFCorrection = cms.bool(False),
            doWirePropCorrection = cms.bool(False),
            tTrigLabel = cms.string('cosmics'),
            tofCorrType = cms.int32(0),
            vPropWire = cms.double(24.4),
            wirePropCorrType = cms.int32(0)
        ),
        useUncertDB = cms.bool(False)
    )
)


process.dt1DRecHits = cms.EDProducer("DTRecHitProducer",
    debug = cms.untracked.bool(False),
    dtDigiLabel = cms.InputTag("muonDTDigis"),
    recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
    recAlgoConfig = cms.PSet(
        debug = cms.untracked.bool(False),
        doVdriftCorr = cms.bool(True),
        maxTime = cms.double(420.0),
        minTime = cms.double(-3.0),
        stepTwoFromDigi = cms.bool(False),
        tTrigMode = cms.string('DTTTrigSyncFromDB'),
        tTrigModeConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doT0Correction = cms.bool(True),
            doTOFCorrection = cms.bool(True),
            doWirePropCorrection = cms.bool(True),
            tTrigLabel = cms.string(''),
            tofCorrType = cms.int32(0),
            vPropWire = cms.double(24.4),
            wirePropCorrType = cms.int32(0)
        ),
        useUncertDB = cms.bool(True)
    )
)


process.dt2DCosmicSegments = cms.EDProducer("DTRecSegment2DProducer",
    Reco2DAlgoConfig = cms.PSet(
        AlphaMaxPhi = cms.double(100.0),
        AlphaMaxTheta = cms.double(100.0),
        MaxAllowedHits = cms.uint32(50),
        MaxChi2 = cms.double(4.0),
        debug = cms.untracked.bool(False),
        hit_afterT0_resolution = cms.double(0.03),
        intime_cut = cms.double(-1.0),
        nSharedHitsMax = cms.int32(2),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False),
        performT0_vdriftSegCorrection = cms.bool(False),
        perform_delta_rejecting = cms.bool(False),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doVdriftCorr = cms.bool(False),
            maxTime = cms.double(420.0),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            tTrigModeConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doT0Correction = cms.bool(True),
                doTOFCorrection = cms.bool(False),
                doWirePropCorrection = cms.bool(False),
                tTrigLabel = cms.string('cosmics'),
                tofCorrType = cms.int32(0),
                vPropWire = cms.double(24.4),
                wirePropCorrType = cms.int32(0)
            ),
            useUncertDB = cms.bool(False)
        ),
        segmCleanerMode = cms.int32(2)
    ),
    Reco2DAlgoName = cms.string('DTMeantimerPatternReco'),
    debug = cms.untracked.bool(False),
    recHits1DLabel = cms.InputTag("dt1DCosmicRecHits")
)


process.dt2DSegments = cms.EDProducer("DTRecSegment2DProducer",
    Reco2DAlgoConfig = cms.PSet(
        AlphaMaxPhi = cms.double(1.0),
        AlphaMaxTheta = cms.double(0.9),
        MaxAllowedHits = cms.uint32(50),
        MaxChi2 = cms.double(4.0),
        debug = cms.untracked.bool(False),
        hit_afterT0_resolution = cms.double(0.03),
        nSharedHitsMax = cms.int32(2),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False),
        performT0_vdriftSegCorrection = cms.bool(False),
        perform_delta_rejecting = cms.bool(False),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doVdriftCorr = cms.bool(True),
            maxTime = cms.double(420.0),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            tTrigModeConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doT0Correction = cms.bool(True),
                doTOFCorrection = cms.bool(True),
                doWirePropCorrection = cms.bool(True),
                tTrigLabel = cms.string(''),
                tofCorrType = cms.int32(0),
                vPropWire = cms.double(24.4),
                wirePropCorrType = cms.int32(0)
            ),
            useUncertDB = cms.bool(True)
        ),
        segmCleanerMode = cms.int32(2)
    ),
    Reco2DAlgoName = cms.string('DTMeantimerPatternReco'),
    debug = cms.untracked.bool(False),
    recHits1DLabel = cms.InputTag("dt1DRecHits")
)


process.dt4DCosmicSegments = cms.EDProducer("DTRecSegment4DProducer",
    Reco4DAlgoConfig = cms.PSet(
        AllDTRecHits = cms.bool(True),
        Reco2DAlgoConfig = cms.PSet(
            AlphaMaxPhi = cms.double(100.0),
            AlphaMaxTheta = cms.double(100.0),
            MaxAllowedHits = cms.uint32(50),
            MaxChi2 = cms.double(4.0),
            debug = cms.untracked.bool(False),
            hit_afterT0_resolution = cms.double(0.03),
            intime_cut = cms.double(-1.0),
            nSharedHitsMax = cms.int32(2),
            nUnSharedHitsMin = cms.int32(2),
            performT0SegCorrection = cms.bool(False),
            performT0_vdriftSegCorrection = cms.bool(False),
            perform_delta_rejecting = cms.bool(False),
            recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
            recAlgoConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doVdriftCorr = cms.bool(False),
                maxTime = cms.double(420.0),
                minTime = cms.double(-3.0),
                stepTwoFromDigi = cms.bool(False),
                tTrigMode = cms.string('DTTTrigSyncFromDB'),
                tTrigModeConfig = cms.PSet(
                    debug = cms.untracked.bool(False),
                    doT0Correction = cms.bool(True),
                    doTOFCorrection = cms.bool(False),
                    doWirePropCorrection = cms.bool(False),
                    tTrigLabel = cms.string('cosmics'),
                    tofCorrType = cms.int32(0),
                    vPropWire = cms.double(24.4),
                    wirePropCorrType = cms.int32(0)
                ),
                useUncertDB = cms.bool(False)
            ),
            segmCleanerMode = cms.int32(2)
        ),
        Reco2DAlgoName = cms.string('DTMeantimerPatternReco'),
        debug = cms.untracked.bool(False),
        hit_afterT0_resolution = cms.double(0.03),
        intime_cut = cms.double(-1.0),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False),
        performT0_vdriftSegCorrection = cms.bool(False),
        perform_delta_rejecting = cms.bool(False),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doVdriftCorr = cms.bool(False),
            maxTime = cms.double(420.0),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            tTrigModeConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doT0Correction = cms.bool(True),
                doTOFCorrection = cms.bool(False),
                doWirePropCorrection = cms.bool(False),
                tTrigLabel = cms.string('cosmics'),
                tofCorrType = cms.int32(0),
                vPropWire = cms.double(24.4),
                wirePropCorrType = cms.int32(0)
            ),
            useUncertDB = cms.bool(False)
        )
    ),
    Reco4DAlgoName = cms.string('DTMeantimerPatternReco4D'),
    debug = cms.untracked.bool(False),
    recHits1DLabel = cms.InputTag("dt1DCosmicRecHits"),
    recHits2DLabel = cms.InputTag("dt2DCosmicSegments")
)


process.dt4DSegments = cms.EDProducer("DTRecSegment4DProducer",
    Reco4DAlgoConfig = cms.PSet(
        AllDTRecHits = cms.bool(True),
        Reco2DAlgoConfig = cms.PSet(
            AlphaMaxPhi = cms.double(1.0),
            AlphaMaxTheta = cms.double(0.9),
            MaxAllowedHits = cms.uint32(50),
            MaxChi2 = cms.double(4.0),
            debug = cms.untracked.bool(False),
            hit_afterT0_resolution = cms.double(0.03),
            nSharedHitsMax = cms.int32(2),
            nUnSharedHitsMin = cms.int32(2),
            performT0SegCorrection = cms.bool(False),
            performT0_vdriftSegCorrection = cms.bool(False),
            perform_delta_rejecting = cms.bool(False),
            recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
            recAlgoConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doVdriftCorr = cms.bool(True),
                maxTime = cms.double(420.0),
                minTime = cms.double(-3.0),
                stepTwoFromDigi = cms.bool(False),
                tTrigMode = cms.string('DTTTrigSyncFromDB'),
                tTrigModeConfig = cms.PSet(
                    debug = cms.untracked.bool(False),
                    doT0Correction = cms.bool(True),
                    doTOFCorrection = cms.bool(True),
                    doWirePropCorrection = cms.bool(True),
                    tTrigLabel = cms.string(''),
                    tofCorrType = cms.int32(0),
                    vPropWire = cms.double(24.4),
                    wirePropCorrType = cms.int32(0)
                ),
                useUncertDB = cms.bool(True)
            ),
            segmCleanerMode = cms.int32(2)
        ),
        Reco2DAlgoName = cms.string('DTMeantimerPatternReco'),
        debug = cms.untracked.bool(False),
        hit_afterT0_resolution = cms.double(0.03),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False),
        performT0_vdriftSegCorrection = cms.bool(False),
        perform_delta_rejecting = cms.bool(False),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doVdriftCorr = cms.bool(True),
            maxTime = cms.double(420.0),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            tTrigModeConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doT0Correction = cms.bool(True),
                doTOFCorrection = cms.bool(True),
                doWirePropCorrection = cms.bool(True),
                tTrigLabel = cms.string(''),
                tofCorrType = cms.int32(0),
                vPropWire = cms.double(24.4),
                wirePropCorrType = cms.int32(0)
            ),
            useUncertDB = cms.bool(True)
        )
    ),
    Reco4DAlgoName = cms.string('DTMeantimerPatternReco4D'),
    debug = cms.untracked.bool(False),
    recHits1DLabel = cms.InputTag("dt1DRecHits"),
    recHits2DLabel = cms.InputTag("dt2DSegments")
)


process.dt4DSegmentsT0Seg = cms.EDProducer("DTSegment4DT0Corrector",
    debug = cms.untracked.bool(False),
    hit_afterT0_resolution = cms.double(0.03),
    performT0_vdriftSegCorrection = cms.bool(True),
    perform_delta_rejecting = cms.bool(False),
    recAlgo = cms.string('DTLinearDriftAlgo'),
    recAlgoConfig = cms.PSet(
        debug = cms.untracked.bool(False),
        driftVelocity = cms.double(0.00543),
        hitResolution = cms.double(0.02),
        maxTime = cms.double(420.0),
        minTime = cms.double(-3.0),
        tTrigMode = cms.string('DTTTrigSyncFromDB'),
        tTrigModeConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doT0Correction = cms.bool(True),
            doTOFCorrection = cms.bool(False),
            doWirePropCorrection = cms.bool(False),
            tTrigLabel = cms.string('cosmics'),
            tofCorrType = cms.int32(0),
            vPropWire = cms.double(24.4),
            wirePropCorrType = cms.int32(0)
        )
    ),
    recHits4DLabel = cms.InputTag("dt4DSegments")
)


process.dtTriggerPrimitiveDigis = cms.EDProducer("DTTrigProd",
    DTTFSectorNumbering = cms.bool(True),
    debug = cms.untracked.bool(False),
    digiTag = cms.InputTag("muonDTDigis"),
    lutBtic = cms.untracked.int32(31),
    lutDumpFlag = cms.untracked.bool(False)
)


process.dttfDigis = cms.EDProducer("DTTFFEDReader",
    DTTF_FED_Source = cms.InputTag("rawDataCollector"),
    verbose = cms.untracked.bool(False)
)


process.duplicateDisplacedTrackCandidates = cms.EDProducer("DuplicateTrackMerger",
    GBRForestFileName = cms.string(''),
    chi2EstimatorName = cms.string('duplicateDisplacedTrackCandidatesChi2Est'),
    forestLabel = cms.string('MVADuplicate'),
    maxDCA = cms.double(30),
    maxDLambda = cms.double(0.3),
    maxDPhi = cms.double(0.3),
    maxDQoP = cms.double(0.25),
    maxDdsz = cms.double(10),
    maxDdxy = cms.double(10),
    mightGet = cms.optional.untracked.vstring,
    minBDTG = cms.double(-0.1),
    minDeltaR3d = cms.double(-4),
    minP = cms.double(0.4),
    minpT = cms.double(0.2),
    overlapCheckMaxHits = cms.uint32(4),
    overlapCheckMaxMissingLayers = cms.uint32(1),
    overlapCheckMinCosT = cms.double(0.99),
    propagatorName = cms.string('PropagatorWithMaterial'),
    source = cms.InputTag("preDuplicateMergingDisplacedTracks"),
    ttrhBuilderName = cms.string('WithAngleAndTemplate'),
    useInnermostState = cms.bool(True)
)


process.duplicateDisplacedTrackClassifier = cms.EDProducer("TrackCutClassifier",
    beamspot = cms.InputTag("offlineBeamSpot"),
    ignoreVertices = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    mva = cms.PSet(
        dr_par = cms.PSet(
            d0err = cms.vdouble(0.003, 0.003, 0.003),
            d0err_par = cms.vdouble(0.001, 0.001, 0.001),
            drWPVerr_par = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
            dr_exp = cms.vint32(2147483647, 2147483647, 2147483647),
            dr_par1 = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
            dr_par2 = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38)
        ),
        dz_par = cms.PSet(
            dzWPVerr_par = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
            dz_exp = cms.vint32(2147483647, 2147483647, 2147483647),
            dz_par1 = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
            dz_par2 = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38)
        ),
        isHLT = cms.bool(False),
        maxChi2 = cms.vdouble(9999.0, 9999.0, 9999.0),
        maxChi2n = cms.vdouble(9999.0, 9999.0, 9999.0),
        maxDr = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
        maxDz = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
        maxDzWrtBS = cms.vdouble(3.40282346639e+38, 24, 15),
        maxLostLayers = cms.vint32(99, 99, 99),
        maxRelPtErr = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
        min3DLayers = cms.vint32(0, 0, 0),
        minHits = cms.vint32(0, 0, 1),
        minHits4pass = cms.vint32(2147483647, 2147483647, 2147483647),
        minLayers = cms.vint32(0, 0, 0),
        minNVtxTrk = cms.int32(2),
        minNdof = cms.vdouble(-1, -1, -1),
        minPixelHits = cms.vint32(0, 0, 0)
    ),
    qualityCuts = cms.vdouble(-0.7, 0.1, 0.7),
    src = cms.InputTag("mergedDuplicateDisplacedTracks"),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.duplicateTrackCandidates = cms.EDProducer("DuplicateTrackMerger",
    GBRForestFileName = cms.string(''),
    chi2EstimatorName = cms.string('duplicateTrackCandidatesChi2Est'),
    forestLabel = cms.string('MVADuplicate'),
    maxDCA = cms.double(30),
    maxDLambda = cms.double(0.3),
    maxDPhi = cms.double(0.3),
    maxDQoP = cms.double(0.25),
    maxDdsz = cms.double(10),
    maxDdxy = cms.double(10),
    mightGet = cms.optional.untracked.vstring,
    minBDTG = cms.double(-0.1),
    minDeltaR3d = cms.double(-4),
    minP = cms.double(0.4),
    minpT = cms.double(0.2),
    overlapCheckMaxHits = cms.uint32(4),
    overlapCheckMaxMissingLayers = cms.uint32(1),
    overlapCheckMinCosT = cms.double(0.99),
    propagatorName = cms.string('PropagatorWithMaterial'),
    source = cms.InputTag("preDuplicateMergingGeneralTracks"),
    ttrhBuilderName = cms.string('WithAngleAndTemplate'),
    useInnermostState = cms.bool(True)
)


process.duplicateTrackClassifier = cms.EDProducer("TrackCutClassifier",
    beamspot = cms.InputTag("offlineBeamSpot"),
    ignoreVertices = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    mva = cms.PSet(
        dr_par = cms.PSet(
            d0err = cms.vdouble(0.003, 0.003, 0.003),
            d0err_par = cms.vdouble(0.001, 0.001, 0.001),
            drWPVerr_par = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
            dr_exp = cms.vint32(2147483647, 2147483647, 2147483647),
            dr_par1 = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
            dr_par2 = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38)
        ),
        dz_par = cms.PSet(
            dzWPVerr_par = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
            dz_exp = cms.vint32(2147483647, 2147483647, 2147483647),
            dz_par1 = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
            dz_par2 = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38)
        ),
        isHLT = cms.bool(False),
        maxChi2 = cms.vdouble(9999.0, 9999.0, 9999.0),
        maxChi2n = cms.vdouble(10.0, 1.0, 0.4),
        maxDr = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
        maxDz = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
        maxDzWrtBS = cms.vdouble(3.40282346639e+38, 24, 15),
        maxLostLayers = cms.vint32(99, 99, 99),
        maxRelPtErr = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
        min3DLayers = cms.vint32(0, 0, 0),
        minHits = cms.vint32(0, 0, 1),
        minHits4pass = cms.vint32(2147483647, 2147483647, 2147483647),
        minLayers = cms.vint32(0, 0, 0),
        minNVtxTrk = cms.int32(2),
        minNdof = cms.vdouble(-1, -1, -1),
        minPixelHits = cms.vint32(0, 0, 0)
    ),
    qualityCuts = cms.vdouble(-0.7, 0.1, 0.7),
    src = cms.InputTag("mergedDuplicateTracks"),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.earlyDisplacedMuons = cms.EDProducer("MuonIdProducer",
    CaloExtractorPSet = cms.PSet(
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        DR_Max = cms.double(0.5),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DR_Veto_HO = cms.double(0.1),
        DepositInstanceLabels = cms.vstring(
            'ecal', 
            'hcal', 
            'ho'
        ),
        DepositLabel = cms.untracked.string('Cal'),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Noise_EB = cms.double(0.025),
        Noise_EE = cms.double(0.1),
        Noise_HB = cms.double(0.2),
        Noise_HE = cms.double(0.2),
        Noise_HO = cms.double(0.2),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Threshold_HO = cms.double(0.5),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            dRHcal = cms.double(1.0),
            dRHcalPreselection = cms.double(1.0),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useGEM = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useME0 = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        ),
        UseRecHitsFlag = cms.bool(False)
    ),
    JetExtractorPSet = cms.PSet(
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.1),
        ExcludeMuonVeto = cms.bool(True),
        JetCollectionLabel = cms.InputTag("ak4CaloJets"),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold = cms.double(5.0),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            dRHcal = cms.double(0.5),
            dRHcalPreselection = cms.double(0.5),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useGEM = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useME0 = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        )
    ),
    MuonCaloCompatibility = cms.PSet(
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        allSiPMHO = cms.bool(False),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    ShowerDigiFillerParameters = cms.PSet(
        cscDigiCollectionLabel = cms.InputTag("muonCSCDigis","MuonCSCStripDigi"),
        digiMaxDistanceX = cms.double(25.0),
        dtDigiCollectionLabel = cms.InputTag("muonDTDigis")
    ),
    TimingFillerParameters = cms.PSet(
        CSCTimingParameters = cms.PSet(
            CSCStripError = cms.double(7.0),
            CSCStripTimeOffset = cms.double(0.0),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            PruneCut = cms.double(9.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring(
                    'SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'
                ),
                RPCLayers = cms.bool(True)
            ),
            UseStripTime = cms.bool(True),
            UseWireTime = cms.bool(True),
            debug = cms.bool(False)
        ),
        DTTimingParameters = cms.PSet(
            DTTimeOffset = cms.double(0.0),
            DoWireCorr = cms.bool(True),
            DropTheta = cms.bool(True),
            HitError = cms.double(2.8),
            HitsMin = cms.int32(3),
            PruneCut = cms.double(5.0),
            RequireBothProjections = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring(
                    'SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'
                ),
                RPCLayers = cms.bool(True)
            ),
            UseSegmentT0 = cms.bool(False),
            debug = cms.bool(False)
        ),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        MatchParameters = cms.PSet(
            CSCsegments = cms.InputTag("cscSegments"),
            DTradius = cms.double(0.01),
            DTsegments = cms.InputTag("dt4DSegments"),
            RPChits = cms.InputTag("rpcRecHits"),
            TightMatchCSC = cms.bool(True),
            TightMatchDT = cms.bool(False)
        ),
        UseCSC = cms.bool(True),
        UseDT = cms.bool(True),
        UseECAL = cms.bool(False)
    ),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        dRHcal = cms.double(9999.0),
        dRHcalPreselection = cms.double(0.2),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(False),
        useGEM = cms.bool(True),
        useHO = cms.bool(False),
        useHcal = cms.bool(False),
        useME0 = cms.bool(True),
        useMuon = cms.bool(True),
        usePreshower = cms.bool(False)
    ),
    TrackExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(0.5),
        DR_Veto = cms.double(0.01),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(0.1),
        Diff_z = cms.double(0.2),
        NHits_Min = cms.uint32(0),
        Pt_Min = cms.double(-1.0),
        inputTrackCollection = cms.InputTag("generalTracks")
    ),
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        MTDRecHitBuilder = cms.string('MTDRecHitBuilder'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        diagonalOnly = cms.bool(False),
        usePosition = cms.bool(True)
    ),
    addExtraSoftMuons = cms.bool(False),
    arbitrateTrackerMuons = cms.bool(True),
    arbitrationCleanerOptions = cms.PSet(
        ClusterDPhi = cms.double(0.6),
        ClusterDTheta = cms.double(0.02),
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        OverlapDTheta = cms.double(0.02)
    ),
    debugWithTruthMatching = cms.bool(False),
    ecalDepositName = cms.string('ecal'),
    fillCaloCompatibility = cms.bool(False),
    fillEnergy = cms.bool(False),
    fillGlobalTrackQuality = cms.bool(False),
    fillGlobalTrackRefits = cms.bool(False),
    fillIsolation = cms.bool(False),
    fillMatching = cms.bool(True),
    fillShowerDigis = cms.bool(True),
    fillTrackerKink = cms.bool(False),
    globalTrackQualityInputTag = cms.InputTag("glbTrackQual"),
    hcalDepositName = cms.string('hcal'),
    hoDepositName = cms.string('ho'),
    inputCollectionLabels = cms.VInputTag(cms.InputTag("earlyGeneralTracks"), cms.InputTag("displacedStandAloneMuons")),
    inputCollectionTypes = cms.vstring(
        'inner tracks', 
        'outer tracks'
    ),
    jetDepositName = cms.string('jets'),
    maxAbsDx = cms.double(3.0),
    maxAbsDy = cms.double(9999.0),
    maxAbsEta = cms.double(3.0),
    maxAbsPullX = cms.double(3.0),
    maxAbsPullY = cms.double(9999.0),
    minCaloCompatibility = cms.double(0.6),
    minNumberOfMatches = cms.int32(1),
    minP = cms.double(3.0),
    minPCaloMuon = cms.double(3.0),
    minPt = cms.double(2.0),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    runArbitrationCleaner = cms.bool(True),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    storeCrossedHcalRecHits = cms.bool(True),
    trackDepositName = cms.string('tracker'),
    writeIsoDeposits = cms.bool(True)
)


process.earlyGeneralTracks = cms.EDProducer("TrackListMerger",
    Epsilon = cms.double(-0.001),
    FoundHitBonus = cms.double(5.0),
    LostHitPenalty = cms.double(5.0),
    MaxNormalizedChisq = cms.double(1000.0),
    MinFound = cms.int32(3),
    MinPT = cms.double(0.05),
    ShareFrac = cms.double(0.19),
    TrackProducers = cms.VInputTag(
        "initialStepTracks", "highPtTripletStepTracks", "lowPtQuadStepTracks", "lowPtTripletStepTracks", "detachedQuadStepTracks", 
        "pixelPairStepTracks"
    ),
    allowFirstHitShare = cms.bool(True),
    copyExtras = cms.untracked.bool(True),
    copyMVA = cms.bool(True),
    hasSelector = cms.vint32(
        1, 1, 1, 1, 1, 
        1
    ),
    indivShareFrac = cms.vdouble(
        1.0, 0.16, 0.095, 0.09, 0.09, 
        0.09
    ),
    makeReKeyedSeeds = cms.untracked.bool(False),
    newQuality = cms.string('confirmed'),
    selectedTrackQuals = cms.VInputTag(
        cms.InputTag("initialStepSelector","initialStep"), cms.InputTag("highPtTripletStepSelector","highPtTripletStep"), cms.InputTag("lowPtQuadStepSelector","lowPtQuadStep"), cms.InputTag("lowPtTripletStepSelector","lowPtTripletStep"), cms.InputTag("detachedQuadStep"), 
        cms.InputTag("pixelPairStepSelector","pixelPairStep")
    ),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(True),
        tLists = cms.vint32(
            0, 1, 2, 3, 4, 
            5
        )
    )),
    trackAlgoPriorityOrder = cms.string('trackAlgoPriorityOrder'),
    writeOnlyTrkQuals = cms.bool(False)
)


process.earlyMuons = cms.EDProducer("MuonIdProducer",
    CaloExtractorPSet = cms.PSet(
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        DR_Max = cms.double(0.5),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DR_Veto_HO = cms.double(0.1),
        DepositInstanceLabels = cms.vstring(
            'ecal', 
            'hcal', 
            'ho'
        ),
        DepositLabel = cms.untracked.string('Cal'),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Noise_EB = cms.double(0.025),
        Noise_EE = cms.double(0.1),
        Noise_HB = cms.double(0.2),
        Noise_HE = cms.double(0.2),
        Noise_HO = cms.double(0.2),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Threshold_HO = cms.double(0.5),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            dRHcal = cms.double(1.0),
            dRHcalPreselection = cms.double(1.0),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useGEM = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useME0 = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        ),
        UseRecHitsFlag = cms.bool(False)
    ),
    JetExtractorPSet = cms.PSet(
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.1),
        ExcludeMuonVeto = cms.bool(True),
        JetCollectionLabel = cms.InputTag("ak4CaloJets"),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold = cms.double(5.0),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            dRHcal = cms.double(0.5),
            dRHcalPreselection = cms.double(0.5),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useGEM = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useME0 = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        )
    ),
    MuonCaloCompatibility = cms.PSet(
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        allSiPMHO = cms.bool(False),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    ShowerDigiFillerParameters = cms.PSet(
        cscDigiCollectionLabel = cms.InputTag("muonCSCDigis","MuonCSCStripDigi"),
        digiMaxDistanceX = cms.double(25.0),
        dtDigiCollectionLabel = cms.InputTag("muonDTDigis")
    ),
    TimingFillerParameters = cms.PSet(
        CSCTimingParameters = cms.PSet(
            CSCStripError = cms.double(7.0),
            CSCStripTimeOffset = cms.double(0.0),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            PruneCut = cms.double(9.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring(
                    'SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'
                ),
                RPCLayers = cms.bool(True)
            ),
            UseStripTime = cms.bool(True),
            UseWireTime = cms.bool(True),
            debug = cms.bool(False)
        ),
        DTTimingParameters = cms.PSet(
            DTTimeOffset = cms.double(0.0),
            DoWireCorr = cms.bool(True),
            DropTheta = cms.bool(True),
            HitError = cms.double(2.8),
            HitsMin = cms.int32(3),
            PruneCut = cms.double(5.0),
            RequireBothProjections = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring(
                    'SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'
                ),
                RPCLayers = cms.bool(True)
            ),
            UseSegmentT0 = cms.bool(False),
            debug = cms.bool(False)
        ),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        MatchParameters = cms.PSet(
            CSCsegments = cms.InputTag("cscSegments"),
            DTradius = cms.double(0.01),
            DTsegments = cms.InputTag("dt4DSegments"),
            RPChits = cms.InputTag("rpcRecHits"),
            TightMatchCSC = cms.bool(True),
            TightMatchDT = cms.bool(False)
        ),
        UseCSC = cms.bool(True),
        UseDT = cms.bool(True),
        UseECAL = cms.bool(False)
    ),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        dRHcal = cms.double(9999.0),
        dRHcalPreselection = cms.double(0.2),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(False),
        useGEM = cms.bool(True),
        useHO = cms.bool(False),
        useHcal = cms.bool(False),
        useME0 = cms.bool(True),
        useMuon = cms.bool(True),
        usePreshower = cms.bool(False)
    ),
    TrackExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(0.5),
        DR_Veto = cms.double(0.01),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(0.1),
        Diff_z = cms.double(0.2),
        NHits_Min = cms.uint32(0),
        Pt_Min = cms.double(-1.0),
        inputTrackCollection = cms.InputTag("generalTracks")
    ),
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        MTDRecHitBuilder = cms.string('MTDRecHitBuilder'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        diagonalOnly = cms.bool(False),
        usePosition = cms.bool(True)
    ),
    addExtraSoftMuons = cms.bool(False),
    arbitrateTrackerMuons = cms.bool(True),
    arbitrationCleanerOptions = cms.PSet(
        ClusterDPhi = cms.double(0.6),
        ClusterDTheta = cms.double(0.02),
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        OverlapDTheta = cms.double(0.02)
    ),
    debugWithTruthMatching = cms.bool(False),
    ecalDepositName = cms.string('ecal'),
    fillCaloCompatibility = cms.bool(False),
    fillEnergy = cms.bool(False),
    fillGlobalTrackQuality = cms.bool(False),
    fillGlobalTrackRefits = cms.bool(False),
    fillIsolation = cms.bool(False),
    fillMatching = cms.bool(True),
    fillShowerDigis = cms.bool(True),
    fillTrackerKink = cms.bool(False),
    globalTrackQualityInputTag = cms.InputTag("glbTrackQual"),
    hcalDepositName = cms.string('hcal'),
    hoDepositName = cms.string('ho'),
    inputCollectionLabels = cms.VInputTag(cms.InputTag("earlyGeneralTracks"), cms.InputTag("standAloneMuons","UpdatedAtVtx")),
    inputCollectionTypes = cms.vstring(
        'inner tracks', 
        'outer tracks'
    ),
    jetDepositName = cms.string('jets'),
    maxAbsDx = cms.double(3.0),
    maxAbsDy = cms.double(9999.0),
    maxAbsEta = cms.double(3.0),
    maxAbsPullX = cms.double(3.0),
    maxAbsPullY = cms.double(9999.0),
    minCaloCompatibility = cms.double(0.6),
    minNumberOfMatches = cms.int32(1),
    minP = cms.double(3.0),
    minPCaloMuon = cms.double(3.0),
    minPt = cms.double(2.0),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    runArbitrationCleaner = cms.bool(True),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    storeCrossedHcalRecHits = cms.bool(True),
    trackDepositName = cms.string('tracker'),
    writeIsoDeposits = cms.bool(True)
)


process.ecalBarrelClusterFastTimer = cms.EDProducer("EcalBarrelClusterFastTimer",
    ebClusters = cms.InputTag("particleFlowClusterECALUncorrected"),
    ebTimeHits = cms.InputTag("ecalDetailedTimeRecHit","EcalRecHitsEB"),
    ecalDepth = cms.double(7.0),
    minEnergyToConsider = cms.double(0.0),
    minFractionToConsider = cms.double(0.1),
    resolutionModels = cms.VPSet(cms.PSet(
        modelName = cms.string('PerfectResolutionModel')
    )),
    timedVertices = cms.InputTag("offlinePrimaryVertices4D")
)


process.ecalCompactTrigPrim = cms.EDProducer("EcalCompactTrigPrimProducer",
    inColl = cms.InputTag("ecalDigis","EcalTriggerPrimitives"),
    outColl = cms.string('')
)


process.ecalDetIdToBeRecovered = cms.EDProducer("EcalDetIdToBeRecoveredProducer",
    ebDetIdToBeRecovered = cms.string('ebDetId'),
    ebFEToBeRecovered = cms.string('ebFE'),
    ebIntegrityChIdErrors = cms.InputTag("ecalDigis","EcalIntegrityChIdErrors"),
    ebIntegrityGainErrors = cms.InputTag("ecalDigis","EcalIntegrityGainErrors"),
    ebIntegrityGainSwitchErrors = cms.InputTag("ecalDigis","EcalIntegrityGainSwitchErrors"),
    ebSrFlagCollection = cms.InputTag("ecalDigis"),
    eeDetIdToBeRecovered = cms.string('eeDetId'),
    eeFEToBeRecovered = cms.string('eeFE'),
    eeIntegrityChIdErrors = cms.InputTag("ecalDigis","EcalIntegrityChIdErrors"),
    eeIntegrityGainErrors = cms.InputTag("ecalDigis","EcalIntegrityGainErrors"),
    eeIntegrityGainSwitchErrors = cms.InputTag("ecalDigis","EcalIntegrityGainSwitchErrors"),
    eeSrFlagCollection = cms.InputTag("ecalDigis"),
    integrityBlockSizeErrors = cms.InputTag("ecalDigis","EcalIntegrityBlockSizeErrors"),
    integrityTTIdErrors = cms.InputTag("ecalDigis","EcalIntegrityTTIdErrors")
)


process.ecalDetailedTimeRecHit = cms.EDProducer("EcalDetailedTimeRecHitProducer",
    EBDetailedTimeRecHitCollection = cms.string('EcalRecHitsEB'),
    EBRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    EBTimeDigiCollection = cms.InputTag("mix","EBTimeDigi"),
    EBTimeLayer = cms.int32(7),
    EEDetailedTimeRecHitCollection = cms.string('EcalRecHitsEE'),
    EERecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    EETimeDigiCollection = cms.InputTag("mix","EETimeDigi"),
    EETimeLayer = cms.int32(3),
    correctForVertexZPosition = cms.bool(False),
    recoVertex = cms.InputTag("offlinePrimaryVerticesWithBS"),
    simVertex = cms.InputTag("g4SimHits"),
    useMCTruthVertex = cms.bool(False)
)


process.ecalDigis = cms.EDProducer("EcalRawToDigi",
    DoRegional = cms.bool(False),
    FEDs = cms.vint32(
        601, 602, 603, 604, 605, 
        606, 607, 608, 609, 610, 
        611, 612, 613, 614, 615, 
        616, 617, 618, 619, 620, 
        621, 622, 623, 624, 625, 
        626, 627, 628, 629, 630, 
        631, 632, 633, 634, 635, 
        636, 637, 638, 639, 640, 
        641, 642, 643, 644, 645, 
        646, 647, 648, 649, 650, 
        651, 652, 653, 654
    ),
    FedLabel = cms.InputTag("listfeds"),
    InputLabel = cms.InputTag("rawDataCollector"),
    eventPut = cms.bool(True),
    feIdCheck = cms.bool(True),
    feUnpacking = cms.bool(True),
    forceToKeepFRData = cms.bool(False),
    headerUnpacking = cms.bool(True),
    memUnpacking = cms.bool(True),
    mightGet = cms.optional.untracked.vstring,
    numbTriggerTSamples = cms.int32(1),
    numbXtalTSamples = cms.int32(10),
    orderedDCCIdList = cms.vint32(
        1, 2, 3, 4, 5, 
        6, 7, 8, 9, 10, 
        11, 12, 13, 14, 15, 
        16, 17, 18, 19, 20, 
        21, 22, 23, 24, 25, 
        26, 27, 28, 29, 30, 
        31, 32, 33, 34, 35, 
        36, 37, 38, 39, 40, 
        41, 42, 43, 44, 45, 
        46, 47, 48, 49, 50, 
        51, 52, 53, 54
    ),
    orderedFedList = cms.vint32(
        601, 602, 603, 604, 605, 
        606, 607, 608, 609, 610, 
        611, 612, 613, 614, 615, 
        616, 617, 618, 619, 620, 
        621, 622, 623, 624, 625, 
        626, 627, 628, 629, 630, 
        631, 632, 633, 634, 635, 
        636, 637, 638, 639, 640, 
        641, 642, 643, 644, 645, 
        646, 647, 648, 649, 650, 
        651, 652, 653, 654
    ),
    silentMode = cms.untracked.bool(True),
    srpUnpacking = cms.bool(True),
    syncCheck = cms.bool(True),
    tccUnpacking = cms.bool(True)
)


process.ecalDrivenElectronSeeds = cms.EDProducer("ElectronSeedProducer",
    DeltaPhi1High = cms.double(0.08),
    DeltaPhi1Low = cms.double(0.23),
    DeltaPhi2B = cms.double(0.008),
    DeltaPhi2F = cms.double(0.012),
    HGCalConfig = cms.PSet(
        HGCBHInput = cms.InputTag("HGCalRecHit","HGCHEBRecHits"),
        HGCEEInput = cms.InputTag("HGCalRecHit","HGCEERecHits"),
        HGCFHInput = cms.InputTag("HGCalRecHit","HGCHEFRecHits")
    ),
    HighPtThreshold = cms.double(35),
    LowPtThreshold = cms.double(5),
    PhiMax2B = cms.double(0.002),
    PhiMax2F = cms.double(0.003),
    SCEtCut = cms.double(0),
    SizeWindowENeg = cms.double(0.675),
    allowHGCal = cms.bool(True),
    applyHOverECut = cms.bool(True),
    barrelSuperClusters = cms.InputTag("particleFlowSuperClusterECAL","particleFlowSuperClusterECALBarrel"),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    deltaZ1WithVertex = cms.double(25),
    dynamicPhiRoad = cms.bool(True),
    ePhiMax1 = cms.double(0.075),
    ePhiMin1 = cms.double(-0.125),
    endcapSuperClusters = cms.InputTag("particleFlowSuperClusterHGCal"),
    hOverEConeSize = cms.double(0.15),
    hOverEPtMin = cms.double(0),
    hcalTowers = cms.InputTag("towerMaker"),
    initialSeedsVector = cms.VInputTag("initialStepSeeds", "highPtTripletStepSeeds", "tripletElectronSeeds"),
    maxHOverEBarrel = cms.double(0.15),
    maxHOverEEndcaps = cms.double(0.15),
    mightGet = cms.optional.untracked.vstring,
    nSigmasDeltaZ1 = cms.double(5),
    pPhiMax1 = cms.double(0.125),
    pPhiMin1 = cms.double(-0.075),
    r2MaxF = cms.double(0.15),
    rMaxI = cms.double(0.2),
    useRecoVertex = cms.bool(False),
    vertices = cms.InputTag("offlinePrimaryVerticesWithBS"),
    z2MaxB = cms.double(0.09)
)


process.ecalDrivenElectronSeedsFromMultiCl = cms.EDProducer("ElectronSeedProducer",
    DeltaPhi1High = cms.double(0.08),
    DeltaPhi1Low = cms.double(0.23),
    DeltaPhi2B = cms.double(0.008),
    DeltaPhi2F = cms.double(0.012),
    HGCalConfig = cms.PSet(
        HGCBHInput = cms.InputTag("HGCalRecHit","HGCHEBRecHits"),
        HGCEEInput = cms.InputTag("HGCalRecHit","HGCEERecHits"),
        HGCFHInput = cms.InputTag("HGCalRecHit","HGCHEFRecHits")
    ),
    HighPtThreshold = cms.double(35),
    LowPtThreshold = cms.double(5),
    PhiMax2B = cms.double(0.002),
    PhiMax2F = cms.double(0.003),
    SCEtCut = cms.double(0),
    SizeWindowENeg = cms.double(0.675),
    allowHGCal = cms.bool(True),
    applyHOverECut = cms.bool(True),
    barrelSuperClusters = cms.InputTag("particleFlowSuperClusterECAL","particleFlowSuperClusterECALBarrel"),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    deltaZ1WithVertex = cms.double(25),
    dynamicPhiRoad = cms.bool(True),
    ePhiMax1 = cms.double(0.075),
    ePhiMin1 = cms.double(-0.125),
    endcapSuperClusters = cms.InputTag("particleFlowSuperClusterHGCalFromMultiCl"),
    hOverEConeSize = cms.double(0.15),
    hOverEPtMin = cms.double(0),
    hcalTowers = cms.InputTag("towerMaker"),
    initialSeedsVector = cms.VInputTag("initialStepSeeds", "highPtTripletStepSeeds", "tripletElectronSeeds"),
    maxHOverEBarrel = cms.double(0.15),
    maxHOverEEndcaps = cms.double(0.15),
    mightGet = cms.optional.untracked.vstring,
    nSigmasDeltaZ1 = cms.double(5),
    pPhiMax1 = cms.double(0.125),
    pPhiMin1 = cms.double(-0.075),
    r2MaxF = cms.double(0.15),
    rMaxI = cms.double(0.2),
    useRecoVertex = cms.bool(False),
    vertices = cms.InputTag("offlinePrimaryVerticesWithBS"),
    z2MaxB = cms.double(0.09)
)


process.ecalDrivenGsfElectronCores = cms.EDProducer("GsfElectronCoreEcalDrivenProducer",
    ctfTracks = cms.InputTag("generalTracks"),
    gsfPfRecTracks = cms.InputTag("pfTrackElec"),
    gsfTracks = cms.InputTag("electronGsfTracks"),
    mightGet = cms.optional.untracked.vstring,
    useGsfPfRecTracks = cms.bool(True)
)


process.ecalDrivenGsfElectronCoresFromMultiCl = cms.EDProducer("GsfElectronCoreEcalDrivenProducer",
    ctfTracks = cms.InputTag("generalTracks"),
    gsfPfRecTracks = cms.InputTag("pfTrackElec"),
    gsfTracks = cms.InputTag("electronGsfTracksFromMultiCl"),
    mightGet = cms.optional.untracked.vstring,
    useGsfPfRecTracks = cms.bool(False)
)


process.ecalDrivenGsfElectrons = cms.EDProducer("GsfElectronProducer",
    ElecMVAFilesString = cms.vstring(
        'RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_10_17Feb2011.weights.xml', 
        'RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_12_17Feb2011.weights.xml', 
        'RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_20_17Feb2011.weights.xml', 
        'RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_22_17Feb2011.weights.xml'
    ),
    MaxElePtForOnlyMVA = cms.double(50),
    PreSelectMVA = cms.double(-0.1),
    SoftElecMVAFilesString = cms.vstring('RecoEgamma/ElectronIdentification/data/TMVA_BDTSoftElectrons_7Feb2014.weights.xml'),
    ambClustersOverlapStrategy = cms.uint32(1),
    ambSortingStrategy = cms.uint32(1),
    applyAmbResolution = cms.bool(False),
    applyPreselection = cms.bool(False),
    barrelRecHitCollectionTag = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    checkHcalStatus = cms.bool(True),
    combinationRegressionWeightFile = cms.vstring(),
    combinationRegressionWeightLabels = cms.vstring(),
    combinationWeightsFromDB = cms.bool(True),
    conversionsTag = cms.InputTag("allConversions"),
    crackCorrectionFunction = cms.string('EcalClusterCrackCorrection'),
    ctfTracksCheck = cms.bool(True),
    ctfTracksTag = cms.InputTag("generalTracks"),
    eMinBarrel = cms.double(0.095),
    eMinEndcaps = cms.double(0),
    ecalDrivenEcalEnergyFromClassBasedParameterization = cms.bool(True),
    ecalDrivenEcalErrorFromClassBasedParameterization = cms.bool(True),
    ecalRefinedRegressionWeightFiles = cms.vstring(),
    ecalRefinedRegressionWeightLabels = cms.vstring(),
    ecalWeightsFromDB = cms.bool(True),
    egmPFCandidatesTag = cms.InputTag("particleFlowEGamma"),
    endcapRecHitCollectionTag = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    etMinBarrel = cms.double(0),
    etMinEndcaps = cms.double(0.11),
    etMinHcal = cms.double(0),
    fillConvVtxFitProb = cms.bool(True),
    gsfElectronCoresTag = cms.InputTag("ecalDrivenGsfElectronCores"),
    gsfPfRecTracksTag = cms.InputTag("pfTrackElec"),
    hcalTowers = cms.InputTag("towerMaker"),
    ignoreNotPreselected = cms.bool(True),
    intRadiusEcalBarrel = cms.double(3),
    intRadiusEcalEndcaps = cms.double(3),
    intRadiusHcal = cms.double(0.15),
    jurassicWidth = cms.double(1.5),
    mightGet = cms.optional.untracked.vstring,
    preselection = cms.PSet(
        hOverEConeSize = cms.double(0.15),
        hOverEPtMin = cms.double(0),
        isBarrel = cms.bool(False),
        isEndcaps = cms.bool(False),
        isFiducial = cms.bool(False),
        maxDeltaEtaBarrel = cms.double(0.02),
        maxDeltaEtaEndcaps = cms.double(0.02),
        maxDeltaPhiBarrel = cms.double(0.15),
        maxDeltaPhiEndcaps = cms.double(0.15),
        maxEOverPBarrel = cms.double(999999999),
        maxEOverPEndcaps = cms.double(999999999),
        maxFbremBarrel = cms.double(999999999),
        maxFbremEndcaps = cms.double(999999999),
        maxHBarrelCone = cms.double(0),
        maxHBarrelTower = cms.double(0),
        maxHEndcapsCone = cms.double(0),
        maxHEndcapsTower = cms.double(0),
        maxHOverEBarrelCone = cms.double(0.15),
        maxHOverEBarrelTower = cms.double(0.15),
        maxHOverEEndcapsCone = cms.double(0.15),
        maxHOverEEndcapsTower = cms.double(0.15),
        maxSigmaIetaIetaBarrel = cms.double(999999999),
        maxSigmaIetaIetaEndcaps = cms.double(999999999),
        maxTIP = cms.double(999999999),
        minEOverPBarrel = cms.double(0),
        minEOverPEndcaps = cms.double(0),
        minMVA = cms.double(-0.4),
        minMvaByPassForIsolated = cms.double(-0.4),
        minSCEtBarrel = cms.double(4),
        minSCEtEndcaps = cms.double(4),
        seedFromTEC = cms.bool(True)
    ),
    pureTrackerDrivenEcalErrorFromSimpleParameterization = cms.bool(True),
    recHitFlagsToBeExcludedBarrel = cms.vstring(
        'kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'
    ),
    recHitFlagsToBeExcludedEndcaps = cms.vstring(
        'kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'
    ),
    recHitSeverityToBeExcludedBarrel = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    recHitSeverityToBeExcludedEndcaps = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    resetMvaValuesUsingPFCandidates = cms.bool(False),
    seedsTag = cms.InputTag("ecalDrivenElectronSeeds"),
    superClusterErrorFunction = cms.string('EcalClusterEnergyUncertaintyObjectSpecific'),
    trkIsol03Cfg = cms.PSet(
        barrelCuts = cms.PSet(
            algosToReject = cms.vstring('jetCoreRegionalStep'),
            allowedQualities = cms.vstring(),
            maxDPtPt = cms.double(-1),
            maxDR = cms.double(0.3),
            maxDZ = cms.double(0.2),
            minDEta = cms.double(0.015),
            minDR = cms.double(0.0),
            minHits = cms.int32(-1),
            minPixelHits = cms.int32(-1),
            minPt = cms.double(0.7)
        ),
        endcapCuts = cms.PSet(
            algosToReject = cms.vstring('jetCoreRegionalStep'),
            allowedQualities = cms.vstring(),
            maxDPtPt = cms.double(-1),
            maxDR = cms.double(0.3),
            maxDZ = cms.double(0.2),
            minDEta = cms.double(0.015),
            minDR = cms.double(0.0),
            minHits = cms.int32(-1),
            minPixelHits = cms.int32(-1),
            minPt = cms.double(0.7)
        )
    ),
    trkIsol04Cfg = cms.PSet(
        barrelCuts = cms.PSet(
            algosToReject = cms.vstring('jetCoreRegionalStep'),
            allowedQualities = cms.vstring(),
            maxDPtPt = cms.double(-1),
            maxDR = cms.double(0.4),
            maxDZ = cms.double(0.2),
            minDEta = cms.double(0.015),
            minDR = cms.double(0.0),
            minHits = cms.int32(-1),
            minPixelHits = cms.int32(-1),
            minPt = cms.double(0.7)
        ),
        endcapCuts = cms.PSet(
            algosToReject = cms.vstring('jetCoreRegionalStep'),
            allowedQualities = cms.vstring(),
            maxDPtPt = cms.double(-1),
            maxDR = cms.double(0.4),
            maxDZ = cms.double(0.2),
            minDEta = cms.double(0.015),
            minDR = cms.double(0.0),
            minHits = cms.int32(-1),
            minPixelHits = cms.int32(-1),
            minPt = cms.double(0.7)
        )
    ),
    trkIsolHEEP03Cfg = cms.PSet(
        barrelCuts = cms.PSet(
            algosToReject = cms.vstring(),
            allowedQualities = cms.vstring(),
            maxDPtPt = cms.double(0.1),
            maxDR = cms.double(0.3),
            maxDZ = cms.double(0.1),
            minDEta = cms.double(0.005),
            minDR = cms.double(0.0),
            minHits = cms.int32(8),
            minPixelHits = cms.int32(1),
            minPt = cms.double(1.0)
        ),
        endcapCuts = cms.PSet(
            algosToReject = cms.vstring(),
            allowedQualities = cms.vstring(),
            maxDPtPt = cms.double(0.1),
            maxDR = cms.double(0.3),
            maxDZ = cms.double(0.5),
            minDEta = cms.double(0.005),
            minDR = cms.double(0.0),
            minHits = cms.int32(8),
            minPixelHits = cms.int32(1),
            minPt = cms.double(1.0)
        )
    ),
    trkIsolHEEP04Cfg = cms.PSet(
        barrelCuts = cms.PSet(
            algosToReject = cms.vstring(),
            allowedQualities = cms.vstring(),
            maxDPtPt = cms.double(0.1),
            maxDR = cms.double(0.4),
            maxDZ = cms.double(0.1),
            minDEta = cms.double(0.005),
            minDR = cms.double(0.0),
            minHits = cms.int32(8),
            minPixelHits = cms.int32(1),
            minPt = cms.double(1.0)
        ),
        endcapCuts = cms.PSet(
            algosToReject = cms.vstring(),
            allowedQualities = cms.vstring(),
            maxDPtPt = cms.double(0.1),
            maxDR = cms.double(0.4),
            maxDZ = cms.double(0.5),
            minDEta = cms.double(0.005),
            minDR = cms.double(0.0),
            minHits = cms.int32(8),
            minPixelHits = cms.int32(1),
            minPt = cms.double(1.0)
        )
    ),
    useCombinationRegression = cms.bool(False),
    useDefaultEnergyCorrection = cms.bool(True),
    useEcalRegression = cms.bool(False),
    useGsfPfRecTracks = cms.bool(True),
    useNumCrystals = cms.bool(True),
    vetoClustered = cms.bool(False),
    vtxTag = cms.InputTag("offlinePrimaryVertices")
)


process.ecalDrivenGsfElectronsFromMultiCl = cms.EDProducer("GsfElectronProducer",
    ElecMVAFilesString = cms.vstring(
        'RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_10_17Feb2011.weights.xml', 
        'RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_12_17Feb2011.weights.xml', 
        'RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_20_17Feb2011.weights.xml', 
        'RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_22_17Feb2011.weights.xml'
    ),
    MaxElePtForOnlyMVA = cms.double(50),
    PreSelectMVA = cms.double(-0.1),
    SoftElecMVAFilesString = cms.vstring('RecoEgamma/ElectronIdentification/data/TMVA_BDTSoftElectrons_7Feb2014.weights.xml'),
    ambClustersOverlapStrategy = cms.uint32(0),
    ambSortingStrategy = cms.uint32(1),
    applyAmbResolution = cms.bool(True),
    applyPreselection = cms.bool(False),
    barrelRecHitCollectionTag = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    checkHcalStatus = cms.bool(True),
    combinationRegressionWeightFile = cms.vstring(),
    combinationRegressionWeightLabels = cms.vstring(),
    combinationWeightsFromDB = cms.bool(True),
    conversionsTag = cms.InputTag("allConversions"),
    crackCorrectionFunction = cms.string('EcalClusterCrackCorrection'),
    ctfTracksCheck = cms.bool(True),
    ctfTracksTag = cms.InputTag("generalTracks"),
    eMinBarrel = cms.double(0.095),
    eMinEndcaps = cms.double(0),
    ecalDrivenEcalEnergyFromClassBasedParameterization = cms.bool(True),
    ecalDrivenEcalErrorFromClassBasedParameterization = cms.bool(True),
    ecalRefinedRegressionWeightFiles = cms.vstring(),
    ecalRefinedRegressionWeightLabels = cms.vstring(),
    ecalWeightsFromDB = cms.bool(True),
    egmPFCandidatesTag = cms.InputTag("particleFlowEGamma"),
    endcapRecHitCollectionTag = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    etMinBarrel = cms.double(0),
    etMinEndcaps = cms.double(0.11),
    etMinHcal = cms.double(0),
    fillConvVtxFitProb = cms.bool(True),
    gsfElectronCoresTag = cms.InputTag("ecalDrivenGsfElectronCoresFromMultiCl"),
    gsfPfRecTracksTag = cms.InputTag("pfTrackElec"),
    hcalTowers = cms.InputTag("towerMaker"),
    ignoreNotPreselected = cms.bool(False),
    intRadiusEcalBarrel = cms.double(3),
    intRadiusEcalEndcaps = cms.double(3),
    intRadiusHcal = cms.double(0.15),
    jurassicWidth = cms.double(1.5),
    mightGet = cms.optional.untracked.vstring,
    preselection = cms.PSet(
        hOverEConeSize = cms.double(0.15),
        hOverEPtMin = cms.double(0),
        isBarrel = cms.bool(False),
        isEndcaps = cms.bool(False),
        isFiducial = cms.bool(False),
        maxDeltaEtaBarrel = cms.double(0.02),
        maxDeltaEtaEndcaps = cms.double(0.02),
        maxDeltaPhiBarrel = cms.double(0.15),
        maxDeltaPhiEndcaps = cms.double(0.15),
        maxEOverPBarrel = cms.double(999999999),
        maxEOverPEndcaps = cms.double(999999999),
        maxFbremBarrel = cms.double(999999999),
        maxFbremEndcaps = cms.double(999999999),
        maxHBarrelCone = cms.double(0),
        maxHBarrelTower = cms.double(0),
        maxHEndcapsCone = cms.double(0),
        maxHEndcapsTower = cms.double(0),
        maxHOverEBarrelCone = cms.double(0.15),
        maxHOverEBarrelTower = cms.double(0.15),
        maxHOverEEndcapsCone = cms.double(0.15),
        maxHOverEEndcapsTower = cms.double(0.15),
        maxSigmaIetaIetaBarrel = cms.double(999999999),
        maxSigmaIetaIetaEndcaps = cms.double(999999999),
        maxTIP = cms.double(999999999),
        minEOverPBarrel = cms.double(0),
        minEOverPEndcaps = cms.double(0),
        minMVA = cms.double(-0.4),
        minMvaByPassForIsolated = cms.double(-0.4),
        minSCEtBarrel = cms.double(4),
        minSCEtEndcaps = cms.double(4),
        seedFromTEC = cms.bool(True)
    ),
    pureTrackerDrivenEcalErrorFromSimpleParameterization = cms.bool(True),
    recHitFlagsToBeExcludedBarrel = cms.vstring(
        'kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'
    ),
    recHitFlagsToBeExcludedEndcaps = cms.vstring(
        'kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'
    ),
    recHitSeverityToBeExcludedBarrel = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    recHitSeverityToBeExcludedEndcaps = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    resetMvaValuesUsingPFCandidates = cms.bool(False),
    seedsTag = cms.InputTag("ecalDrivenElectronSeeds"),
    superClusterErrorFunction = cms.string('EcalClusterEnergyUncertaintyObjectSpecific'),
    trkIsol03Cfg = cms.PSet(
        barrelCuts = cms.PSet(
            algosToReject = cms.vstring('jetCoreRegionalStep'),
            allowedQualities = cms.vstring(),
            maxDPtPt = cms.double(-1),
            maxDR = cms.double(0.3),
            maxDZ = cms.double(0.2),
            minDEta = cms.double(0.015),
            minDR = cms.double(0.0),
            minHits = cms.int32(-1),
            minPixelHits = cms.int32(-1),
            minPt = cms.double(0.7)
        ),
        endcapCuts = cms.PSet(
            algosToReject = cms.vstring('jetCoreRegionalStep'),
            allowedQualities = cms.vstring(),
            maxDPtPt = cms.double(-1),
            maxDR = cms.double(0.3),
            maxDZ = cms.double(0.2),
            minDEta = cms.double(0.015),
            minDR = cms.double(0.0),
            minHits = cms.int32(-1),
            minPixelHits = cms.int32(-1),
            minPt = cms.double(0.7)
        )
    ),
    trkIsol04Cfg = cms.PSet(
        barrelCuts = cms.PSet(
            algosToReject = cms.vstring('jetCoreRegionalStep'),
            allowedQualities = cms.vstring(),
            maxDPtPt = cms.double(-1),
            maxDR = cms.double(0.4),
            maxDZ = cms.double(0.2),
            minDEta = cms.double(0.015),
            minDR = cms.double(0.0),
            minHits = cms.int32(-1),
            minPixelHits = cms.int32(-1),
            minPt = cms.double(0.7)
        ),
        endcapCuts = cms.PSet(
            algosToReject = cms.vstring('jetCoreRegionalStep'),
            allowedQualities = cms.vstring(),
            maxDPtPt = cms.double(-1),
            maxDR = cms.double(0.4),
            maxDZ = cms.double(0.2),
            minDEta = cms.double(0.015),
            minDR = cms.double(0.0),
            minHits = cms.int32(-1),
            minPixelHits = cms.int32(-1),
            minPt = cms.double(0.7)
        )
    ),
    trkIsolHEEP03Cfg = cms.PSet(
        barrelCuts = cms.PSet(
            algosToReject = cms.vstring(),
            allowedQualities = cms.vstring(),
            maxDPtPt = cms.double(0.1),
            maxDR = cms.double(0.3),
            maxDZ = cms.double(0.1),
            minDEta = cms.double(0.005),
            minDR = cms.double(0.0),
            minHits = cms.int32(8),
            minPixelHits = cms.int32(1),
            minPt = cms.double(1.0)
        ),
        endcapCuts = cms.PSet(
            algosToReject = cms.vstring(),
            allowedQualities = cms.vstring(),
            maxDPtPt = cms.double(0.1),
            maxDR = cms.double(0.3),
            maxDZ = cms.double(0.5),
            minDEta = cms.double(0.005),
            minDR = cms.double(0.0),
            minHits = cms.int32(8),
            minPixelHits = cms.int32(1),
            minPt = cms.double(1.0)
        )
    ),
    trkIsolHEEP04Cfg = cms.PSet(
        barrelCuts = cms.PSet(
            algosToReject = cms.vstring(),
            allowedQualities = cms.vstring(),
            maxDPtPt = cms.double(0.1),
            maxDR = cms.double(0.4),
            maxDZ = cms.double(0.1),
            minDEta = cms.double(0.005),
            minDR = cms.double(0.0),
            minHits = cms.int32(8),
            minPixelHits = cms.int32(1),
            minPt = cms.double(1.0)
        ),
        endcapCuts = cms.PSet(
            algosToReject = cms.vstring(),
            allowedQualities = cms.vstring(),
            maxDPtPt = cms.double(0.1),
            maxDR = cms.double(0.4),
            maxDZ = cms.double(0.5),
            minDEta = cms.double(0.005),
            minDR = cms.double(0.0),
            minHits = cms.int32(8),
            minPixelHits = cms.int32(1),
            minPt = cms.double(1.0)
        )
    ),
    useCombinationRegression = cms.bool(False),
    useDefaultEnergyCorrection = cms.bool(False),
    useEcalRegression = cms.bool(False),
    useGsfPfRecTracks = cms.bool(False),
    useNumCrystals = cms.bool(True),
    vetoClustered = cms.bool(False),
    vtxTag = cms.InputTag("offlinePrimaryVertices")
)


process.ecalMultiFitUncalibRecHit = cms.EDProducer("EcalUncalibRecHitProducer",
    EBdigiCollection = cms.InputTag("ecalDigis","ebDigis"),
    EBhitCollection = cms.string('EcalUncalibRecHitsEB'),
    EEdigiCollection = cms.InputTag("ecalDigis","eeDigis"),
    EEhitCollection = cms.string('EcalUncalibRecHitsEE'),
    algo = cms.string('EcalUncalibRecHitWorkerMultiFit'),
    algoPSet = cms.PSet(
        EBamplitudeFitParameters = cms.vdouble(1.138, 1.652),
        EBtimeConstantTerm = cms.double(0.6),
        EBtimeFitLimits_Lower = cms.double(0.2),
        EBtimeFitLimits_Upper = cms.double(1.4),
        EBtimeFitParameters = cms.vdouble(
            -2.015452, 3.130702, -12.3473, 41.88921, -82.83944, 
            91.01147, -50.35761, 11.05621
        ),
        EBtimeNconst = cms.double(28.5),
        EEamplitudeFitParameters = cms.vdouble(1.89, 1.4),
        EEtimeConstantTerm = cms.double(1.0),
        EEtimeFitLimits_Lower = cms.double(0.2),
        EEtimeFitLimits_Upper = cms.double(1.4),
        EEtimeFitParameters = cms.vdouble(
            -2.390548, 3.553628, -17.62341, 67.67538, -133.213, 
            140.7432, -75.41106, 16.20277
        ),
        EEtimeNconst = cms.double(31.8),
        EcalPulseShapeParameters = cms.PSet(
            EBCorrNoiseMatrixG01 = cms.vdouble(
                1.0, 0.73354, 0.64442, 0.58851, 0.55425, 
                0.53082, 0.51916, 0.51097, 0.50732, 0.50409
            ),
            EBCorrNoiseMatrixG06 = cms.vdouble(
                1.0, 0.70946, 0.58021, 0.49846, 0.45006, 
                0.41366, 0.39699, 0.38478, 0.37847, 0.37055
            ),
            EBCorrNoiseMatrixG12 = cms.vdouble(
                1.0, 0.71073, 0.55721, 0.46089, 0.40449, 
                0.35931, 0.33924, 0.32439, 0.31581, 0.30481
            ),
            EBPulseShapeCovariance = cms.vdouble(
                3.001e-06, 1.233e-05, 0.0, -4.416e-06, -4.571e-06, 
                -3.614e-06, -2.636e-06, -1.286e-06, -8.41e-07, -5.296e-07, 
                0.0, 0.0, 1.233e-05, 6.154e-05, 0.0, 
                -2.2e-05, -2.309e-05, -1.838e-05, -1.373e-05, -7.334e-06, 
                -5.088e-06, -3.745e-06, -2.428e-06, 0.0, 0.0, 
                0.0, 0.0, 0.0, 0.0, 0.0, 
                0.0, 0.0, 0.0, 0.0, 0.0, 
                0.0, -4.416e-06, -2.2e-05, 0.0, 8.319e-06, 
                8.545e-06, 6.792e-06, 5.059e-06, 2.678e-06, 1.816e-06, 
                1.223e-06, 8.245e-07, 5.589e-07, -4.571e-06, -2.309e-05, 
                0.0, 8.545e-06, 9.182e-06, 7.219e-06, 5.388e-06, 
                2.853e-06, 1.944e-06, 1.324e-06, 9.083e-07, 6.335e-07, 
                -3.614e-06, -1.838e-05, 0.0, 6.792e-06, 7.219e-06, 
                6.016e-06, 4.437e-06, 2.385e-06, 1.636e-06, 1.118e-06, 
                7.754e-07, 5.556e-07, -2.636e-06, -1.373e-05, 0.0, 
                5.059e-06, 5.388e-06, 4.437e-06, 3.602e-06, 1.917e-06, 
                1.322e-06, 9.079e-07, 6.529e-07, 4.752e-07, -1.286e-06, 
                -7.334e-06, 0.0, 2.678e-06, 2.853e-06, 2.385e-06, 
                1.917e-06, 1.375e-06, 9.1e-07, 6.455e-07, 4.693e-07, 
                3.657e-07, -8.41e-07, -5.088e-06, 0.0, 1.816e-06, 
                1.944e-06, 1.636e-06, 1.322e-06, 9.1e-07, 9.115e-07, 
                6.062e-07, 4.436e-07, 3.422e-07, -5.296e-07, -3.745e-06, 
                0.0, 1.223e-06, 1.324e-06, 1.118e-06, 9.079e-07, 
                6.455e-07, 6.062e-07, 7.217e-07, 4.862e-07, 3.768e-07, 
                0.0, -2.428e-06, 0.0, 8.245e-07, 9.083e-07, 
                7.754e-07, 6.529e-07, 4.693e-07, 4.436e-07, 4.862e-07, 
                6.509e-07, 4.418e-07, 0.0, 0.0, 0.0, 
                5.589e-07, 6.335e-07, 5.556e-07, 4.752e-07, 3.657e-07, 
                3.422e-07, 3.768e-07, 4.418e-07, 6.142e-07
            ),
            EBPulseShapeTemplate = cms.vdouble(
                0.0113979, 0.758151, 1.0, 0.887744, 0.673548, 
                0.474332, 0.319561, 0.215144, 0.147464, 0.101087, 
                0.0693181, 0.0475044
            ),
            EBdigiCollection = cms.string(''),
            EECorrNoiseMatrixG01 = cms.vdouble(
                1.0, 0.72698, 0.62048, 0.55691, 0.51848, 
                0.49147, 0.47813, 0.47007, 0.46621, 0.46265
            ),
            EECorrNoiseMatrixG06 = cms.vdouble(
                1.0, 0.71217, 0.47464, 0.34056, 0.26282, 
                0.20287, 0.17734, 0.16256, 0.15618, 0.14443
            ),
            EECorrNoiseMatrixG12 = cms.vdouble(
                1.0, 0.71373, 0.44825, 0.30152, 0.21609, 
                0.14786, 0.11772, 0.10165, 0.09465, 0.08098
            ),
            EEPulseShapeCovariance = cms.vdouble(
                3.941e-05, 3.333e-05, 0.0, -1.449e-05, -1.661e-05, 
                -1.424e-05, -1.183e-05, -6.842e-06, -4.915e-06, -3.411e-06, 
                0.0, 0.0, 3.333e-05, 2.862e-05, 0.0, 
                -1.244e-05, -1.431e-05, -1.233e-05, -1.032e-05, -5.883e-06, 
                -4.154e-06, -2.902e-06, -2.128e-06, 0.0, 0.0, 
                0.0, 0.0, 0.0, 0.0, 0.0, 
                0.0, 0.0, 0.0, 0.0, 0.0, 
                0.0, -1.449e-05, -1.244e-05, 0.0, 5.84e-06, 
                6.649e-06, 5.72e-06, 4.812e-06, 2.708e-06, 1.869e-06, 
                1.33e-06, 9.186e-07, 6.446e-07, -1.661e-05, -1.431e-05, 
                0.0, 6.649e-06, 7.966e-06, 6.898e-06, 5.794e-06, 
                3.157e-06, 2.184e-06, 1.567e-06, 1.084e-06, 7.575e-07, 
                -1.424e-05, -1.233e-05, 0.0, 5.72e-06, 6.898e-06, 
                6.341e-06, 5.347e-06, 2.859e-06, 1.991e-06, 1.431e-06, 
                9.839e-07, 6.886e-07, -1.183e-05, -1.032e-05, 0.0, 
                4.812e-06, 5.794e-06, 5.347e-06, 4.854e-06, 2.628e-06, 
                1.809e-06, 1.289e-06, 9.02e-07, 6.146e-07, -6.842e-06, 
                -5.883e-06, 0.0, 2.708e-06, 3.157e-06, 2.859e-06, 
                2.628e-06, 1.863e-06, 1.296e-06, 8.882e-07, 6.108e-07, 
                4.283e-07, -4.915e-06, -4.154e-06, 0.0, 1.869e-06, 
                2.184e-06, 1.991e-06, 1.809e-06, 1.296e-06, 1.217e-06, 
                8.669e-07, 5.751e-07, 3.882e-07, -3.411e-06, -2.902e-06, 
                0.0, 1.33e-06, 1.567e-06, 1.431e-06, 1.289e-06, 
                8.882e-07, 8.669e-07, 9.522e-07, 6.717e-07, 4.293e-07, 
                0.0, -2.128e-06, 0.0, 9.186e-07, 1.084e-06, 
                9.839e-07, 9.02e-07, 6.108e-07, 5.751e-07, 6.717e-07, 
                7.911e-07, 5.493e-07, 0.0, 0.0, 0.0, 
                6.446e-07, 7.575e-07, 6.886e-07, 6.146e-07, 4.283e-07, 
                3.882e-07, 4.293e-07, 5.493e-07, 7.027e-07
            ),
            EEPulseShapeTemplate = cms.vdouble(
                0.116442, 0.756246, 1.0, 0.897182, 0.686831, 
                0.491506, 0.344111, 0.245731, 0.174115, 0.123361, 
                0.0874288, 0.061957
            ),
            EEdigiCollection = cms.string(''),
            ESdigiCollection = cms.string(''),
            EcalPreMixStage1 = cms.bool(False),
            EcalPreMixStage2 = cms.bool(False),
            UseLCcorrection = cms.untracked.bool(True)
        ),
        activeBXs = cms.vint32(
            -5, -4, -3, -2, -1, 
            0, 1, 2, 3, 4
        ),
        addPedestalUncertaintyEB = cms.double(0.0),
        addPedestalUncertaintyEE = cms.double(0.0),
        ampErrorCalculation = cms.bool(True),
        amplitudeThresholdEB = cms.double(10),
        amplitudeThresholdEE = cms.double(10),
        chi2ThreshEB_ = cms.double(65.0),
        chi2ThreshEE_ = cms.double(50.0),
        doPrefitEB = cms.bool(False),
        doPrefitEE = cms.bool(False),
        dynamicPedestalsEB = cms.bool(False),
        dynamicPedestalsEE = cms.bool(False),
        ebPulseShape = cms.vdouble(
            5.2e-05, -5.26e-05, 6.66e-05, 0.1168, 0.7575, 
            1.0, 0.8876, 0.6732, 0.4741, 0.3194
        ),
        ebSpikeThreshold = cms.double(1.042),
        eePulseShape = cms.vdouble(
            5.2e-05, -5.26e-05, 6.66e-05, 0.1168, 0.7575, 
            1.0, 0.8876, 0.6732, 0.4741, 0.3194
        ),
        gainSwitchUseMaxSampleEB = cms.bool(True),
        gainSwitchUseMaxSampleEE = cms.bool(False),
        kPoorRecoFlagEB = cms.bool(True),
        kPoorRecoFlagEE = cms.bool(False),
        mitigateBadSamplesEB = cms.bool(False),
        mitigateBadSamplesEE = cms.bool(False),
        outOfTimeThresholdGain12mEB = cms.double(5),
        outOfTimeThresholdGain12mEE = cms.double(1000),
        outOfTimeThresholdGain12pEB = cms.double(5),
        outOfTimeThresholdGain12pEE = cms.double(1000),
        outOfTimeThresholdGain61mEB = cms.double(5),
        outOfTimeThresholdGain61mEE = cms.double(1000),
        outOfTimeThresholdGain61pEB = cms.double(5),
        outOfTimeThresholdGain61pEE = cms.double(1000),
        prefitMaxChiSqEB = cms.double(25.0),
        prefitMaxChiSqEE = cms.double(10.0),
        selectiveBadSampleCriteriaEB = cms.bool(False),
        selectiveBadSampleCriteriaEE = cms.bool(False),
        simplifiedNoiseModelForGainSwitch = cms.bool(True),
        timealgo = cms.string('RatioMethod'),
        useLumiInfoRunHeader = cms.bool(True)
    )
)


process.ecalPreshowerDigis = cms.EDProducer("ESRawToDigi",
    ESdigiCollection = cms.string(''),
    InstanceES = cms.string(''),
    LookupTable = cms.FileInPath('EventFilter/ESDigiToRaw/data/ES_lookup_table.dat'),
    debugMode = cms.untracked.bool(False),
    mightGet = cms.optional.untracked.vstring,
    sourceTag = cms.InputTag("rawDataCollector")
)


process.ecalPreshowerRecHit = cms.EDProducer("ESRecHitProducer",
    ESRecoAlgo = cms.int32(0),
    ESdigiCollection = cms.InputTag("ecalPreshowerDigis"),
    ESrechitCollection = cms.string('EcalRecHitsES'),
    algo = cms.string('ESRecHitWorker')
)


process.ecalRecHit = cms.EDProducer("EcalRecHitProducer",
    ChannelStatusToBeExcluded = cms.vstring(
        'kDAC', 
        'kNoisy', 
        'kNNoisy', 
        'kFixedG6', 
        'kFixedG1', 
        'kFixedG0', 
        'kNonRespondingIsolated', 
        'kDeadVFE', 
        'kDeadFE', 
        'kNoDataNoTP'
    ),
    EBLaserMAX = cms.double(3.0),
    EBLaserMIN = cms.double(0.5),
    EBrechitCollection = cms.string('EcalRecHitsEB'),
    EBuncalibRecHitCollection = cms.InputTag("ecalMultiFitUncalibRecHit","EcalUncalibRecHitsEB"),
    EELaserMAX = cms.double(8.0),
    EELaserMIN = cms.double(0.5),
    EErechitCollection = cms.string('EcalRecHitsEE'),
    EEuncalibRecHitCollection = cms.InputTag("ecalMultiFitUncalibRecHit","EcalUncalibRecHitsEE"),
    algo = cms.string('EcalRecHitWorkerSimple'),
    algoRecover = cms.string('EcalRecHitWorkerRecover'),
    bdtWeightFileCracks = cms.FileInPath('RecoLocalCalo/EcalDeadChannelRecoveryAlgos/data/BDTWeights/bdtgAllRH_8GT700MeV_onlyCracks_ZskimData2017_v1.xml'),
    bdtWeightFileNoCracks = cms.FileInPath('RecoLocalCalo/EcalDeadChannelRecoveryAlgos/data/BDTWeights/bdtgAllRH_8GT700MeV_noCracks_ZskimData2017_v1.xml'),
    cleaningConfig = cms.PSet(
        cThreshold_barrel = cms.double(4),
        cThreshold_double = cms.double(10),
        cThreshold_endcap = cms.double(15),
        e4e1Threshold_barrel = cms.double(0.08),
        e4e1Threshold_endcap = cms.double(0.3),
        e4e1_a_barrel = cms.double(0.02),
        e4e1_a_endcap = cms.double(0.02),
        e4e1_b_barrel = cms.double(0.02),
        e4e1_b_endcap = cms.double(-0.0125),
        e6e2thresh = cms.double(0.04),
        ignoreOutOfTimeThresh = cms.double(1000000000.0),
        tightenCrack_e1_double = cms.double(2),
        tightenCrack_e1_single = cms.double(1),
        tightenCrack_e4e1_single = cms.double(2.5),
        tightenCrack_e6e2_double = cms.double(3)
    ),
    dbStatusToBeExcludedEB = cms.vint32(14, 78, 142),
    dbStatusToBeExcludedEE = cms.vint32(14, 78, 142),
    ebDetIdToBeRecovered = cms.InputTag("ecalDetIdToBeRecovered","ebDetId"),
    ebFEToBeRecovered = cms.InputTag("ecalDetIdToBeRecovered","ebFE"),
    eeDetIdToBeRecovered = cms.InputTag("ecalDetIdToBeRecovered","eeDetId"),
    eeFEToBeRecovered = cms.InputTag("ecalDetIdToBeRecovered","eeFE"),
    flagsMapDBReco = cms.PSet(
        kDead = cms.vstring('kNoDataNoTP'),
        kGood = cms.vstring(
            'kOk', 
            'kDAC', 
            'kNoLaser', 
            'kNoisy'
        ),
        kNeighboursRecovered = cms.vstring(
            'kFixedG0', 
            'kNonRespondingIsolated', 
            'kDeadVFE'
        ),
        kNoisy = cms.vstring(
            'kNNoisy', 
            'kFixedG6', 
            'kFixedG1'
        ),
        kTowerRecovered = cms.vstring('kDeadFE')
    ),
    killDeadChannels = cms.bool(True),
    laserCorrection = cms.bool(True),
    logWarningEtThreshold_EB_FE = cms.double(50),
    logWarningEtThreshold_EE_FE = cms.double(50),
    recoverEBFE = cms.bool(True),
    recoverEBIsolatedChannels = cms.bool(False),
    recoverEBVFE = cms.bool(False),
    recoverEEFE = cms.bool(True),
    recoverEEIsolatedChannels = cms.bool(False),
    recoverEEVFE = cms.bool(False),
    singleChannelRecoveryMethod = cms.string('BDTG'),
    singleChannelRecoveryThreshold = cms.double(0.7),
    skipTimeCalib = cms.bool(False),
    sum8ChannelRecoveryThreshold = cms.double(0.0),
    triggerPrimitiveDigiCollection = cms.InputTag("ecalDigis","EcalTriggerPrimitives")
)


process.ecalTPSkim = cms.EDProducer("EcalTPSkimmer",
    chStatusToSelectTP = cms.vuint32(13),
    doBarrel = cms.bool(True),
    doEndcap = cms.bool(True),
    skipModule = cms.bool(False),
    tpInputCollection = cms.InputTag("ecalDigis","EcalTriggerPrimitives"),
    tpOutputCollection = cms.string('')
)


process.egmElectronIsolationCITK = cms.EDProducer("CITKPFIsolationSumProducer",
    isolationConeDefinitions = cms.VPSet(
        cms.PSet(
            coneSize = cms.double(0.3),
            isolateAgainst = cms.string('h+'),
            isolationAlgo = cms.string('ElectronPFIsolationWithMapBasedVeto'),
            miniAODVertexCodes = cms.vuint32(2, 3),
            particleBasedIsolation = cms.InputTag("particleBasedIsolationTmp","gedGsfElectronsTmp"),
            vertexIndex = cms.int32(0)
        ), 
        cms.PSet(
            coneSize = cms.double(0.3),
            isolateAgainst = cms.string('h0'),
            isolationAlgo = cms.string('ElectronPFIsolationWithMapBasedVeto'),
            miniAODVertexCodes = cms.vuint32(2, 3),
            particleBasedIsolation = cms.InputTag("particleBasedIsolationTmp","gedGsfElectronsTmp"),
            vertexIndex = cms.int32(0)
        ), 
        cms.PSet(
            coneSize = cms.double(0.3),
            isolateAgainst = cms.string('gamma'),
            isolationAlgo = cms.string('ElectronPFIsolationWithMapBasedVeto'),
            miniAODVertexCodes = cms.vuint32(2, 3),
            particleBasedIsolation = cms.InputTag("particleBasedIsolationTmp","gedGsfElectronsTmp"),
            vertexIndex = cms.int32(0)
        )
    ),
    srcForIsolationCone = cms.InputTag("pfNoPileUpCandidates"),
    srcToIsolate = cms.InputTag("gedGsfElectronsTmp")
)


process.egmElectronIsolationPileUpCITK = cms.EDProducer("CITKPFIsolationSumProducer",
    isolationConeDefinitions = cms.VPSet(cms.PSet(
        coneSize = cms.double(0.3),
        isolateAgainst = cms.string('h+'),
        isolationAlgo = cms.string('ElectronPFIsolationWithMapBasedVeto'),
        miniAODVertexCodes = cms.vuint32(2, 3),
        particleBasedIsolation = cms.InputTag("particleBasedIsolationTmp","gedGsfElectronsTmp"),
        vertexIndex = cms.int32(0)
    )),
    srcForIsolationCone = cms.InputTag("pfPileUpAllChargedParticles"),
    srcToIsolate = cms.InputTag("gedGsfElectronsTmp")
)


process.egmGedGsfElectronPFNoPileUpIsolation = cms.EDProducer("CITKPFIsolationSumProducer",
    isolationConeDefinitions = cms.VPSet(
        cms.PSet(
            VetoConeSizeBarrel = cms.double(0.0),
            VetoConeSizeEndcaps = cms.double(0.015),
            coneSize = cms.double(0.3),
            isolateAgainst = cms.string('h+'),
            isolationAlgo = cms.string('ElectronPFIsolationWithConeVeto'),
            miniAODVertexCodes = cms.vuint32(2, 3)
        ), 
        cms.PSet(
            VetoConeSizeBarrel = cms.double(0.0),
            VetoConeSizeEndcaps = cms.double(0.0),
            coneSize = cms.double(0.3),
            isolateAgainst = cms.string('h0'),
            isolationAlgo = cms.string('ElectronPFIsolationWithConeVeto'),
            miniAODVertexCodes = cms.vuint32(2, 3)
        ), 
        cms.PSet(
            VetoConeSizeBarrel = cms.double(0.0),
            VetoConeSizeEndcaps = cms.double(0.08),
            coneSize = cms.double(0.3),
            isolateAgainst = cms.string('gamma'),
            isolationAlgo = cms.string('ElectronPFIsolationWithConeVeto'),
            miniAODVertexCodes = cms.vuint32(2, 3)
        )
    ),
    srcForIsolationCone = cms.InputTag("pfNoPileUpCandidates"),
    srcToIsolate = cms.InputTag("gedGsfElectrons")
)


process.egmGedGsfElectronPFNoPileUpIsolationMapBasedVeto = cms.EDProducer("CITKPFIsolationSumProducer",
    isolationConeDefinitions = cms.VPSet(
        cms.PSet(
            coneSize = cms.double(0.3),
            isolateAgainst = cms.string('h+'),
            isolationAlgo = cms.string('ElectronPFIsolationWithMapBasedVeto'),
            miniAODVertexCodes = cms.vuint32(2, 3),
            particleBasedIsolation = cms.InputTag("particleBasedIsolation","gedGsfElectrons"),
            vertexIndex = cms.int32(0)
        ), 
        cms.PSet(
            coneSize = cms.double(0.3),
            isolateAgainst = cms.string('h0'),
            isolationAlgo = cms.string('ElectronPFIsolationWithMapBasedVeto'),
            miniAODVertexCodes = cms.vuint32(2, 3),
            particleBasedIsolation = cms.InputTag("particleBasedIsolation","gedGsfElectrons"),
            vertexIndex = cms.int32(0)
        ), 
        cms.PSet(
            coneSize = cms.double(0.3),
            isolateAgainst = cms.string('gamma'),
            isolationAlgo = cms.string('ElectronPFIsolationWithMapBasedVeto'),
            miniAODVertexCodes = cms.vuint32(2, 3),
            particleBasedIsolation = cms.InputTag("particleBasedIsolation","gedGsfElectrons"),
            vertexIndex = cms.int32(0)
        )
    ),
    srcForIsolationCone = cms.InputTag("pfNoPileUpCandidates"),
    srcToIsolate = cms.InputTag("gedGsfElectrons")
)


process.egmGedGsfElectronPFPileUpIsolation = cms.EDProducer("CITKPFIsolationSumProducer",
    isolationConeDefinitions = cms.VPSet(cms.PSet(
        VetoConeSizeBarrel = cms.double(0.0),
        VetoConeSizeEndcaps = cms.double(0.015),
        coneSize = cms.double(0.3),
        isolateAgainst = cms.string('h+'),
        isolationAlgo = cms.string('ElectronPFIsolationWithConeVeto'),
        miniAODVertexCodes = cms.vuint32(0, 1)
    )),
    srcForIsolationCone = cms.InputTag("pfPileUpAllChargedParticles"),
    srcToIsolate = cms.InputTag("gedGsfElectrons")
)


process.egmGedGsfElectronPFPileUpIsolationMapBasedVeto = cms.EDProducer("CITKPFIsolationSumProducer",
    isolationConeDefinitions = cms.VPSet(cms.PSet(
        coneSize = cms.double(0.3),
        isolateAgainst = cms.string('h+'),
        isolationAlgo = cms.string('ElectronPFIsolationWithMapBasedVeto'),
        miniAODVertexCodes = cms.vuint32(2, 3),
        particleBasedIsolation = cms.InputTag("particleBasedIsolation","gedGsfElectrons"),
        vertexIndex = cms.int32(0)
    )),
    srcForIsolationCone = cms.InputTag("pfPileUpAllChargedParticles"),
    srcToIsolate = cms.InputTag("gedGsfElectrons")
)


process.egmPhotonIsolationCITK = cms.EDProducer("CITKPFIsolationSumProducer",
    isolationConeDefinitions = cms.VPSet(
        cms.PSet(
            coneSize = cms.double(0.3),
            isolateAgainst = cms.string('h+'),
            isolationAlgo = cms.string('PhotonPFIsolationWithMapBasedVeto'),
            miniAODVertexCodes = cms.vuint32(2, 3),
            particleBasedIsolation = cms.InputTag("particleBasedIsolationTmp","gedPhotonsTmp"),
            vertexIndex = cms.int32(0)
        ), 
        cms.PSet(
            coneSize = cms.double(0.3),
            isolateAgainst = cms.string('h0'),
            isolationAlgo = cms.string('PhotonPFIsolationWithMapBasedVeto'),
            miniAODVertexCodes = cms.vuint32(2, 3),
            particleBasedIsolation = cms.InputTag("particleBasedIsolationTmp","gedPhotonsTmp"),
            vertexIndex = cms.int32(0)
        ), 
        cms.PSet(
            coneSize = cms.double(0.3),
            isolateAgainst = cms.string('gamma'),
            isolationAlgo = cms.string('PhotonPFIsolationWithMapBasedVeto'),
            miniAODVertexCodes = cms.vuint32(2, 3),
            particleBasedIsolation = cms.InputTag("particleBasedIsolationTmp","gedPhotonsTmp"),
            vertexIndex = cms.int32(0)
        )
    ),
    srcForIsolationCone = cms.InputTag("pfNoPileUpCandidates"),
    srcToIsolate = cms.InputTag("gedPhotonsTmp")
)


process.eidCutBasedExt = cms.EDProducer("EleIdCutBasedExtProducer",
    additionalCategories = cms.bool(True),
    algorithm = cms.string('eIDCB'),
    classbasedlooseEleIDCuts = cms.PSet(
        cutdcotdist = cms.vdouble(
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0
        ),
        cutdetain = cms.vdouble(
            0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273
        ),
        cutdetainl = cms.vdouble(
            0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024
        ),
        cutdphiin = cms.vdouble(
            0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336
        ),
        cutdphiinl = cms.vdouble(
            0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289
        ),
        cuteseedopcor = cms.vdouble(
            0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373
        ),
        cutfmishits = cms.vdouble(
            4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5
        ),
        cuthoe = cms.vdouble(
            0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404
        ),
        cuthoel = cms.vdouble(
            0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384
        ),
        cutip_gsf = cms.vdouble(
            0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231
        ),
        cutip_gsfl = cms.vdouble(
            0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479
        ),
        cutiso_sum = cms.vdouble(
            33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98
        ),
        cutiso_sumoet = cms.vdouble(
            34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74
        ),
        cutiso_sumoetl = cms.vdouble(
            11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4
        ),
        cutsee = cms.vdouble(
            0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133
        ),
        cutseel = cms.vdouble(
            0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544
        )
    ),
    classbasedlooseEleIDCutsV00 = cms.PSet(
        deltaEtaIn = cms.vdouble(
            0.009, 0.0045, 0.0085, 0.0, 0.0105, 
            0.0068, 0.01, 0.0
        ),
        deltaPhiIn = cms.vdouble(
            0.05, 0.025, 0.053, 0.09, 0.07, 
            0.03, 0.092, 0.092
        ),
        eSeedOverPin = cms.vdouble(
            0.11, 0.91, 0.11, 0.0, 0.0, 
            0.85, 0.0, 0.0
        ),
        hOverE = cms.vdouble(
            0.115, 0.1, 0.055, 0.0, 0.145, 
            0.12, 0.15, 0.0
        ),
        sigmaEtaEta = cms.vdouble(
            0.014, 0.012, 0.0115, 0.0, 0.0275, 
            0.0265, 0.0265, 0.0
        )
    ),
    classbasedlooseEleIDCutsV01 = cms.PSet(
        deltaEtaIn = cms.vdouble(
            0.0078, 0.00259, 0.0062, 0.0, 0.0078, 
            0.0061, 0.0061, 0.0
        ),
        deltaPhiIn = cms.vdouble(
            0.053, 0.0189, 0.059, 0.099, 0.0278, 
            0.0157, 0.042, 0.08
        ),
        eSeedOverPin = cms.vdouble(
            0.3, 0.92, 0.211, 0.0, 0.42, 
            0.88, 0.68, 0.0
        ),
        hOverE = cms.vdouble(
            0.076, 0.033, 0.07, 0.0, 0.083, 
            0.0148, 0.033, 0.0
        ),
        sigmaEtaEta = cms.vdouble(
            0.0101, 0.0095, 0.0097, 0.0, 0.0271, 
            0.0267, 0.0259, 0.0
        )
    ),
    classbasedlooseEleIDCutsV02 = cms.PSet(
        cutdeta = cms.vdouble(
            0.00958, 0.00406, 0.0122, 0.0137, 0.00837, 
            0.0127, 0.011, 0.00336, 0.00977, 0.015, 
            0.00675, 0.0109, 0.014, 0.00508, 0.0109, 
            0.0146, 0.00506, 0.0127
        ),
        cutdphi = cms.vdouble(
            0.0372, 0.114, 0.118, 0.0488, 0.117, 
            0.119, 0.0606, 0.0548, 0.117, 0.07, 
            0.0355, 0.117, 0.088, 0.045, 0.118, 
            0.0919, 0.0236, 0.0515
        ),
        cuteopin = cms.vdouble(
            0.878, 0.802, 0.814, 0.942, 0.735, 
            0.774, 0.829, 0.909, 0.829, 0.813, 
            0.86, 0.897, 0.817, 0.831, 0.818, 
            0.861, 0.787, 0.789
        ),
        cuthoe = cms.vdouble(
            0.0887, 0.0934, 0.0949, 0.0986, 0.0431, 
            0.0878, 0.097, 0.0509, 0.098, 0.0991, 
            0.0321, 0.0928, 0.0663, 0.0717, 0.0966, 
            0.0758, 0.0149, 0.0131
        ),
        cutip = cms.vdouble(
            0.0246, 0.076, 0.0966, 0.0885, 0.441, 
            0.205, 0.0292, 0.0293, 0.0619, 0.0251, 
            0.159, 0.0815, 7.29, 0.0106, 5.76, 
            6.89, 1.27, 5.89
        ),
        cutisoecal = cms.vdouble(
            33.4, 28.1, 7.32, 27.4, 7.33, 
            21.7, 93.8, 102.0, 12.1, 26.0, 
            8.91, 10.0, 16.1, 31.3, 16.9, 
            15.4, 13.3, 37.7
        ),
        cutisohcal = cms.vdouble(
            13.5, 9.93, 7.56, 14.8, 8.1, 
            10.8, 42.7, 20.1, 9.11, 10.4, 
            6.89, 5.59, 8.53, 9.59, 24.2, 
            2.78, 8.67, 0.288
        ),
        cutisotk = cms.vdouble(
            24.3, 8.45, 14.4, 27.8, 6.02, 
            10.5, 14.1, 10.2, 14.5, 19.1, 
            6.1, 14.1, 8.59, 8.33, 8.3, 
            8.93, 8.6, 16.0
        ),
        cutmishits = cms.vdouble(
            5.5, 1.5, 5.5, 2.5, 2.5, 
            2.5, 3.5, 5.5, 0.5, 1.5, 
            2.5, 0.5, 1.5, 1.5, 0.5, 
            0.5, 0.5, 0.5
        ),
        cutsee = cms.vdouble(
            0.0172, 0.0115, 0.0143, 0.0344, 0.0295, 
            0.0304, 0.0145, 0.0108, 0.0128, 0.0347, 
            0.0307, 0.0316, 0.018, 0.011, 0.0132, 
            0.0349, 0.031, 0.0327
        )
    ),
    classbasedlooseEleIDCutsV03 = cms.PSet(
        cutdcotdist = cms.vdouble(
            0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199
        ),
        cutdetain = cms.vdouble(
            0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239
        ),
        cutdphiin = cms.vdouble(
            0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459
        ),
        cuteseedopcor = cms.vdouble(
            0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648
        ),
        cutet = cms.vdouble(
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5
        ),
        cutfmishits = cms.vdouble(
            4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87
        ),
        cutip_gsf = cms.vdouble(
            0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221
        ),
        cutiso_sum = cms.vdouble(
            31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0
        ),
        cutiso_sumoet = cms.vdouble(
            28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6
        ),
        cutsee = cms.vdouble(
            0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114
        )
    ),
    classbasedlooseEleIDCutsV04 = cms.PSet(
        cutdcotdist = cms.vdouble(
            0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199
        ),
        cutdetain = cms.vdouble(
            0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239
        ),
        cutdphiin = cms.vdouble(
            0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459
        ),
        cuteseedopcor = cms.vdouble(
            0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648
        ),
        cutet = cms.vdouble(
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5
        ),
        cutfmishits = cms.vdouble(
            4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87
        ),
        cutip_gsf = cms.vdouble(
            0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221
        ),
        cutiso_sum = cms.vdouble(
            31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0
        ),
        cutiso_sumoet = cms.vdouble(
            28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6
        ),
        cutsee = cms.vdouble(
            0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114
        )
    ),
    classbasedlooseEleIDCutsV06 = cms.PSet(
        cutdcotdist = cms.vdouble(
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0
        ),
        cutdetain = cms.vdouble(
            0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273
        ),
        cutdetainl = cms.vdouble(
            0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024
        ),
        cutdphiin = cms.vdouble(
            0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336
        ),
        cutdphiinl = cms.vdouble(
            0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289
        ),
        cuteseedopcor = cms.vdouble(
            0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373
        ),
        cutfmishits = cms.vdouble(
            4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5
        ),
        cuthoe = cms.vdouble(
            0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404
        ),
        cuthoel = cms.vdouble(
            0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384
        ),
        cutip_gsf = cms.vdouble(
            0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231
        ),
        cutip_gsfl = cms.vdouble(
            0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479
        ),
        cutiso_sum = cms.vdouble(
            33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98
        ),
        cutiso_sumoet = cms.vdouble(
            34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74
        ),
        cutiso_sumoetl = cms.vdouble(
            11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4
        ),
        cutsee = cms.vdouble(
            0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133
        ),
        cutseel = cms.vdouble(
            0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544
        )
    ),
    classbasedtightEleIDCuts = cms.PSet(
        cutdcotdist = cms.vdouble(
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0
        ),
        cutdetain = cms.vdouble(
            0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139
        ),
        cutdetainl = cms.vdouble(
            0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143
        ),
        cutdphiin = cms.vdouble(
            0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328
        ),
        cutdphiinl = cms.vdouble(
            0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258
        ),
        cuteseedopcor = cms.vdouble(
            0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473
        ),
        cutfmishits = cms.vdouble(
            1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404
        ),
        cuthoel = cms.vdouble(
            0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339
        ),
        cutip_gsf = cms.vdouble(
            0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731
        ),
        cutip_gsfl = cms.vdouble(
            0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479
        ),
        cutiso_sum = cms.vdouble(
            15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98
        ),
        cutiso_sumoet = cms.vdouble(
            11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94
        ),
        cutiso_sumoetl = cms.vdouble(
            6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73
        ),
        cutsee = cms.vdouble(
            0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917
        ),
        cutseel = cms.vdouble(
            0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544
        )
    ),
    classbasedtightEleIDCutsV00 = cms.PSet(
        deltaEtaIn = cms.vdouble(
            0.0055, 0.003, 0.0065, 0.0, 0.006, 
            0.0055, 0.0075, 0.0
        ),
        deltaPhiIn = cms.vdouble(
            0.032, 0.016, 0.0525, 0.09, 0.025, 
            0.035, 0.065, 0.092
        ),
        eSeedOverPin = cms.vdouble(
            0.24, 0.94, 0.11, 0.0, 0.32, 
            0.83, 0.0, 0.0
        ),
        hOverE = cms.vdouble(
            0.05, 0.042, 0.045, 0.0, 0.055, 
            0.037, 0.05, 0.0
        ),
        sigmaEtaEta = cms.vdouble(
            0.0125, 0.011, 0.01, 0.0, 0.0265, 
            0.0252, 0.026, 0.0
        )
    ),
    classbasedtightEleIDCutsV01 = cms.PSet(
        deltaEtaIn = cms.vdouble(
            0.0043, 0.00282, 0.0036, 0.0, 0.0066, 
            0.0049, 0.0041, 0.0
        ),
        deltaPhiIn = cms.vdouble(
            0.0225, 0.0114, 0.0234, 0.039, 0.0215, 
            0.0095, 0.0148, 0.0167
        ),
        eSeedOverPin = cms.vdouble(
            0.32, 0.94, 0.221, 0.0, 0.74, 
            0.89, 0.66, 0.0
        ),
        hOverE = cms.vdouble(
            0.056, 0.0221, 0.037, 0.0, 0.0268, 
            0.0102, 0.0104, 0.0
        ),
        sigmaEtaEta = cms.vdouble(
            0.0095, 0.0094, 0.0094, 0.0, 0.026, 
            0.0257, 0.0246, 0.0
        )
    ),
    classbasedtightEleIDCutsV02 = cms.PSet(
        cutdeta = cms.vdouble(
            0.00915, 0.00302, 0.0061, 0.0135, 0.00565, 
            0.00793, 0.0102, 0.00266, 0.0106, 0.00903, 
            0.00766, 0.00723, 0.0116, 0.00203, 0.00659, 
            0.0148, 0.00555, 0.0128
        ),
        cutdphi = cms.vdouble(
            0.0369, 0.0307, 0.117, 0.0475, 0.0216, 
            0.117, 0.0372, 0.0246, 0.0426, 0.0612, 
            0.0142, 0.039, 0.0737, 0.0566, 0.0359, 
            0.0187, 0.012, 0.0358
        ),
        cuteopin = cms.vdouble(
            0.878, 0.859, 0.874, 0.944, 0.737, 
            0.773, 0.86, 0.967, 0.917, 0.812, 
            0.915, 1.01, 0.847, 0.953, 0.979, 
            0.841, 0.771, 1.09
        ),
        cuthoe = cms.vdouble(
            0.0871, 0.0289, 0.0783, 0.0946, 0.0245, 
            0.0363, 0.0671, 0.048, 0.0614, 0.0924, 
            0.0158, 0.049, 0.0382, 0.0915, 0.0451, 
            0.0452, 0.00196, 0.0043
        ),
        cutip = cms.vdouble(
            0.0239, 0.027, 0.0768, 0.0231, 0.178, 
            0.0957, 0.0102, 0.0168, 0.043, 0.0166, 
            0.0594, 0.0308, 2.1, 0.00527, 3.17, 
            4.91, 0.769, 5.9
        ),
        cutisoecal = cms.vdouble(
            20.0, 27.2, 4.48, 13.5, 4.56, 
            3.19, 12.2, 13.1, 7.42, 7.67, 
            4.12, 4.85, 10.1, 12.4, 11.1, 
            11.0, 10.6, 13.4
        ),
        cutisohcal = cms.vdouble(
            10.9, 7.01, 8.75, 3.51, 7.75, 
            1.62, 11.6, 9.9, 4.97, 5.33, 
            3.18, 2.32, 0.164, 5.46, 12.0, 
            0.00604, 4.1, 0.000628
        ),
        cutisotk = cms.vdouble(
            6.53, 4.6, 6.0, 8.63, 3.11, 
            7.77, 5.42, 4.81, 4.06, 6.47, 
            2.8, 3.45, 5.29, 5.18, 15.4, 
            5.38, 4.47, 0.0347
        ),
        cutmishits = cms.vdouble(
            5.5, 1.5, 0.5, 1.5, 2.5, 
            0.5, 3.5, 5.5, 0.5, 0.5, 
            0.5, 0.5, 0.5, 1.5, 0.5, 
            0.5, 0.5, 0.5
        ),
        cutsee = cms.vdouble(
            0.0131, 0.0106, 0.0115, 0.0306, 0.028, 
            0.0293, 0.0131, 0.0106, 0.0115, 0.0317, 
            0.029, 0.0289, 0.0142, 0.0106, 0.0103, 
            0.035, 0.0296, 0.0333
        )
    ),
    classbasedtightEleIDCutsV03 = cms.PSet(
        cutdcotdist = cms.vdouble(
            0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928
        ),
        cutdetain = cms.vdouble(
            0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996
        ),
        cutdphiin = cms.vdouble(
            0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346
        ),
        cuteseedopcor = cms.vdouble(
            0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05
        ),
        cutet = cms.vdouble(
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7
        ),
        cutfmishits = cms.vdouble(
            2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61
        ),
        cutip_gsf = cms.vdouble(
            0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363
        ),
        cutiso_sum = cms.vdouble(
            11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0
        ),
        cutiso_sumoet = cms.vdouble(
            13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7
        ),
        cutsee = cms.vdouble(
            0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101
        )
    ),
    classbasedtightEleIDCutsV04 = cms.PSet(
        cutdcotdist = cms.vdouble(
            0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928
        ),
        cutdetain = cms.vdouble(
            0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996
        ),
        cutdphiin = cms.vdouble(
            0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346
        ),
        cuteseedopcor = cms.vdouble(
            0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05
        ),
        cutet = cms.vdouble(
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7
        ),
        cutfmishits = cms.vdouble(
            2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61
        ),
        cutip_gsf = cms.vdouble(
            0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363
        ),
        cutiso_sum = cms.vdouble(
            11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0
        ),
        cutiso_sumoet = cms.vdouble(
            13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7
        ),
        cutsee = cms.vdouble(
            0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101
        )
    ),
    classbasedtightEleIDCutsV06 = cms.PSet(
        cutdcotdist = cms.vdouble(
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0
        ),
        cutdetain = cms.vdouble(
            0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139
        ),
        cutdetainl = cms.vdouble(
            0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143
        ),
        cutdphiin = cms.vdouble(
            0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328
        ),
        cutdphiinl = cms.vdouble(
            0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258
        ),
        cuteseedopcor = cms.vdouble(
            0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473
        ),
        cutfmishits = cms.vdouble(
            1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404
        ),
        cuthoel = cms.vdouble(
            0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339
        ),
        cutip_gsf = cms.vdouble(
            0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731
        ),
        cutip_gsfl = cms.vdouble(
            0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479
        ),
        cutiso_sum = cms.vdouble(
            15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98
        ),
        cutiso_sumoet = cms.vdouble(
            11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94
        ),
        cutiso_sumoetl = cms.vdouble(
            6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73
        ),
        cutsee = cms.vdouble(
            0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917
        ),
        cutseel = cms.vdouble(
            0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544
        )
    ),
    electronIDType = cms.string('robust'),
    electronQuality = cms.string('loose'),
    electronVersion = cms.string(''),
    etBinning = cms.bool(True),
    reducedBarrelRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    reducedEndcapRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    robusthighenergyEleIDCuts = cms.PSet(
        barrel = cms.vdouble(
            0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusthighenergyEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 0.011, 0.09, 0.005, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.1, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusthighenergyEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.05, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusthighenergyEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusthighenergyEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusthighenergyEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCuts = cms.PSet(
        barrel = cms.vdouble(
            0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(
            0.115, 0.014, 0.09, 0.009, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.15, 0.0275, 0.092, 0.0105, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(
            0.075, 0.0132, 0.058, 0.0077, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.083, 0.027, 0.042, 0.01, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCuts = cms.PSet(
        barrel = cms.vdouble(
            0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(
            0.015, 0.0092, 0.02, 0.0025, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.018, 0.025, 0.02, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(
            0.01, 0.0099, 0.025, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.01, 0.028, 0.02, 0.0066, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(
            0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(
            0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(
            0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    src = cms.InputTag("gedGsfElectrons"),
    verticesCollection = cms.InputTag("offlinePrimaryVerticesWithBS")
)


process.eidLoose = cms.EDProducer("EleIdCutBasedExtProducer",
    additionalCategories = cms.bool(True),
    algorithm = cms.string('eIDCB'),
    classbasedlooseEleIDCuts = cms.PSet(
        cutdcotdist = cms.vdouble(
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0
        ),
        cutdetain = cms.vdouble(
            0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273
        ),
        cutdetainl = cms.vdouble(
            0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024
        ),
        cutdphiin = cms.vdouble(
            0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336
        ),
        cutdphiinl = cms.vdouble(
            0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289
        ),
        cuteseedopcor = cms.vdouble(
            0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373
        ),
        cutfmishits = cms.vdouble(
            4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5
        ),
        cuthoe = cms.vdouble(
            0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404
        ),
        cuthoel = cms.vdouble(
            0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384
        ),
        cutip_gsf = cms.vdouble(
            0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231
        ),
        cutip_gsfl = cms.vdouble(
            0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479
        ),
        cutiso_sum = cms.vdouble(
            33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98
        ),
        cutiso_sumoet = cms.vdouble(
            34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74
        ),
        cutiso_sumoetl = cms.vdouble(
            11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4
        ),
        cutsee = cms.vdouble(
            0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133
        ),
        cutseel = cms.vdouble(
            0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544
        )
    ),
    classbasedlooseEleIDCutsV00 = cms.PSet(
        deltaEtaIn = cms.vdouble(
            0.009, 0.0045, 0.0085, 0.0, 0.0105, 
            0.0068, 0.01, 0.0
        ),
        deltaPhiIn = cms.vdouble(
            0.05, 0.025, 0.053, 0.09, 0.07, 
            0.03, 0.092, 0.092
        ),
        eSeedOverPin = cms.vdouble(
            0.11, 0.91, 0.11, 0.0, 0.0, 
            0.85, 0.0, 0.0
        ),
        hOverE = cms.vdouble(
            0.115, 0.1, 0.055, 0.0, 0.145, 
            0.12, 0.15, 0.0
        ),
        sigmaEtaEta = cms.vdouble(
            0.014, 0.012, 0.0115, 0.0, 0.0275, 
            0.0265, 0.0265, 0.0
        )
    ),
    classbasedlooseEleIDCutsV01 = cms.PSet(
        deltaEtaIn = cms.vdouble(
            0.0078, 0.00259, 0.0062, 0.0, 0.0078, 
            0.0061, 0.0061, 0.0
        ),
        deltaPhiIn = cms.vdouble(
            0.053, 0.0189, 0.059, 0.099, 0.0278, 
            0.0157, 0.042, 0.08
        ),
        eSeedOverPin = cms.vdouble(
            0.3, 0.92, 0.211, 0.0, 0.42, 
            0.88, 0.68, 0.0
        ),
        hOverE = cms.vdouble(
            0.076, 0.033, 0.07, 0.0, 0.083, 
            0.0148, 0.033, 0.0
        ),
        sigmaEtaEta = cms.vdouble(
            0.0101, 0.0095, 0.0097, 0.0, 0.0271, 
            0.0267, 0.0259, 0.0
        )
    ),
    classbasedlooseEleIDCutsV02 = cms.PSet(
        cutdeta = cms.vdouble(
            0.00958, 0.00406, 0.0122, 0.0137, 0.00837, 
            0.0127, 0.011, 0.00336, 0.00977, 0.015, 
            0.00675, 0.0109, 0.014, 0.00508, 0.0109, 
            0.0146, 0.00506, 0.0127
        ),
        cutdphi = cms.vdouble(
            0.0372, 0.114, 0.118, 0.0488, 0.117, 
            0.119, 0.0606, 0.0548, 0.117, 0.07, 
            0.0355, 0.117, 0.088, 0.045, 0.118, 
            0.0919, 0.0236, 0.0515
        ),
        cuteopin = cms.vdouble(
            0.878, 0.802, 0.814, 0.942, 0.735, 
            0.774, 0.829, 0.909, 0.829, 0.813, 
            0.86, 0.897, 0.817, 0.831, 0.818, 
            0.861, 0.787, 0.789
        ),
        cuthoe = cms.vdouble(
            0.0887, 0.0934, 0.0949, 0.0986, 0.0431, 
            0.0878, 0.097, 0.0509, 0.098, 0.0991, 
            0.0321, 0.0928, 0.0663, 0.0717, 0.0966, 
            0.0758, 0.0149, 0.0131
        ),
        cutip = cms.vdouble(
            0.0246, 0.076, 0.0966, 0.0885, 0.441, 
            0.205, 0.0292, 0.0293, 0.0619, 0.0251, 
            0.159, 0.0815, 7.29, 0.0106, 5.76, 
            6.89, 1.27, 5.89
        ),
        cutisoecal = cms.vdouble(
            33.4, 28.1, 7.32, 27.4, 7.33, 
            21.7, 93.8, 102.0, 12.1, 26.0, 
            8.91, 10.0, 16.1, 31.3, 16.9, 
            15.4, 13.3, 37.7
        ),
        cutisohcal = cms.vdouble(
            13.5, 9.93, 7.56, 14.8, 8.1, 
            10.8, 42.7, 20.1, 9.11, 10.4, 
            6.89, 5.59, 8.53, 9.59, 24.2, 
            2.78, 8.67, 0.288
        ),
        cutisotk = cms.vdouble(
            24.3, 8.45, 14.4, 27.8, 6.02, 
            10.5, 14.1, 10.2, 14.5, 19.1, 
            6.1, 14.1, 8.59, 8.33, 8.3, 
            8.93, 8.6, 16.0
        ),
        cutmishits = cms.vdouble(
            5.5, 1.5, 5.5, 2.5, 2.5, 
            2.5, 3.5, 5.5, 0.5, 1.5, 
            2.5, 0.5, 1.5, 1.5, 0.5, 
            0.5, 0.5, 0.5
        ),
        cutsee = cms.vdouble(
            0.0172, 0.0115, 0.0143, 0.0344, 0.0295, 
            0.0304, 0.0145, 0.0108, 0.0128, 0.0347, 
            0.0307, 0.0316, 0.018, 0.011, 0.0132, 
            0.0349, 0.031, 0.0327
        )
    ),
    classbasedlooseEleIDCutsV03 = cms.PSet(
        cutdcotdist = cms.vdouble(
            0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199
        ),
        cutdetain = cms.vdouble(
            0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239
        ),
        cutdphiin = cms.vdouble(
            0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459
        ),
        cuteseedopcor = cms.vdouble(
            0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648
        ),
        cutet = cms.vdouble(
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5
        ),
        cutfmishits = cms.vdouble(
            4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87
        ),
        cutip_gsf = cms.vdouble(
            0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221
        ),
        cutiso_sum = cms.vdouble(
            31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0
        ),
        cutiso_sumoet = cms.vdouble(
            28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6
        ),
        cutsee = cms.vdouble(
            0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114
        )
    ),
    classbasedlooseEleIDCutsV04 = cms.PSet(
        cutdcotdist = cms.vdouble(
            0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199
        ),
        cutdetain = cms.vdouble(
            0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239
        ),
        cutdphiin = cms.vdouble(
            0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459
        ),
        cuteseedopcor = cms.vdouble(
            0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648
        ),
        cutet = cms.vdouble(
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5
        ),
        cutfmishits = cms.vdouble(
            4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87
        ),
        cutip_gsf = cms.vdouble(
            0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221
        ),
        cutiso_sum = cms.vdouble(
            31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0
        ),
        cutiso_sumoet = cms.vdouble(
            28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6
        ),
        cutsee = cms.vdouble(
            0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114
        )
    ),
    classbasedlooseEleIDCutsV06 = cms.PSet(
        cutdcotdist = cms.vdouble(
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0
        ),
        cutdetain = cms.vdouble(
            0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273
        ),
        cutdetainl = cms.vdouble(
            0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024
        ),
        cutdphiin = cms.vdouble(
            0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336
        ),
        cutdphiinl = cms.vdouble(
            0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289
        ),
        cuteseedopcor = cms.vdouble(
            0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373
        ),
        cutfmishits = cms.vdouble(
            4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5
        ),
        cuthoe = cms.vdouble(
            0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404
        ),
        cuthoel = cms.vdouble(
            0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384
        ),
        cutip_gsf = cms.vdouble(
            0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231
        ),
        cutip_gsfl = cms.vdouble(
            0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479
        ),
        cutiso_sum = cms.vdouble(
            33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98
        ),
        cutiso_sumoet = cms.vdouble(
            34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74
        ),
        cutiso_sumoetl = cms.vdouble(
            11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4
        ),
        cutsee = cms.vdouble(
            0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133
        ),
        cutseel = cms.vdouble(
            0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544
        )
    ),
    classbasedtightEleIDCuts = cms.PSet(
        cutdcotdist = cms.vdouble(
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0
        ),
        cutdetain = cms.vdouble(
            0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139
        ),
        cutdetainl = cms.vdouble(
            0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143
        ),
        cutdphiin = cms.vdouble(
            0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328
        ),
        cutdphiinl = cms.vdouble(
            0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258
        ),
        cuteseedopcor = cms.vdouble(
            0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473
        ),
        cutfmishits = cms.vdouble(
            1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404
        ),
        cuthoel = cms.vdouble(
            0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339
        ),
        cutip_gsf = cms.vdouble(
            0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731
        ),
        cutip_gsfl = cms.vdouble(
            0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479
        ),
        cutiso_sum = cms.vdouble(
            15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98
        ),
        cutiso_sumoet = cms.vdouble(
            11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94
        ),
        cutiso_sumoetl = cms.vdouble(
            6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73
        ),
        cutsee = cms.vdouble(
            0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917
        ),
        cutseel = cms.vdouble(
            0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544
        )
    ),
    classbasedtightEleIDCutsV00 = cms.PSet(
        deltaEtaIn = cms.vdouble(
            0.0055, 0.003, 0.0065, 0.0, 0.006, 
            0.0055, 0.0075, 0.0
        ),
        deltaPhiIn = cms.vdouble(
            0.032, 0.016, 0.0525, 0.09, 0.025, 
            0.035, 0.065, 0.092
        ),
        eSeedOverPin = cms.vdouble(
            0.24, 0.94, 0.11, 0.0, 0.32, 
            0.83, 0.0, 0.0
        ),
        hOverE = cms.vdouble(
            0.05, 0.042, 0.045, 0.0, 0.055, 
            0.037, 0.05, 0.0
        ),
        sigmaEtaEta = cms.vdouble(
            0.0125, 0.011, 0.01, 0.0, 0.0265, 
            0.0252, 0.026, 0.0
        )
    ),
    classbasedtightEleIDCutsV01 = cms.PSet(
        deltaEtaIn = cms.vdouble(
            0.0043, 0.00282, 0.0036, 0.0, 0.0066, 
            0.0049, 0.0041, 0.0
        ),
        deltaPhiIn = cms.vdouble(
            0.0225, 0.0114, 0.0234, 0.039, 0.0215, 
            0.0095, 0.0148, 0.0167
        ),
        eSeedOverPin = cms.vdouble(
            0.32, 0.94, 0.221, 0.0, 0.74, 
            0.89, 0.66, 0.0
        ),
        hOverE = cms.vdouble(
            0.056, 0.0221, 0.037, 0.0, 0.0268, 
            0.0102, 0.0104, 0.0
        ),
        sigmaEtaEta = cms.vdouble(
            0.0095, 0.0094, 0.0094, 0.0, 0.026, 
            0.0257, 0.0246, 0.0
        )
    ),
    classbasedtightEleIDCutsV02 = cms.PSet(
        cutdeta = cms.vdouble(
            0.00915, 0.00302, 0.0061, 0.0135, 0.00565, 
            0.00793, 0.0102, 0.00266, 0.0106, 0.00903, 
            0.00766, 0.00723, 0.0116, 0.00203, 0.00659, 
            0.0148, 0.00555, 0.0128
        ),
        cutdphi = cms.vdouble(
            0.0369, 0.0307, 0.117, 0.0475, 0.0216, 
            0.117, 0.0372, 0.0246, 0.0426, 0.0612, 
            0.0142, 0.039, 0.0737, 0.0566, 0.0359, 
            0.0187, 0.012, 0.0358
        ),
        cuteopin = cms.vdouble(
            0.878, 0.859, 0.874, 0.944, 0.737, 
            0.773, 0.86, 0.967, 0.917, 0.812, 
            0.915, 1.01, 0.847, 0.953, 0.979, 
            0.841, 0.771, 1.09
        ),
        cuthoe = cms.vdouble(
            0.0871, 0.0289, 0.0783, 0.0946, 0.0245, 
            0.0363, 0.0671, 0.048, 0.0614, 0.0924, 
            0.0158, 0.049, 0.0382, 0.0915, 0.0451, 
            0.0452, 0.00196, 0.0043
        ),
        cutip = cms.vdouble(
            0.0239, 0.027, 0.0768, 0.0231, 0.178, 
            0.0957, 0.0102, 0.0168, 0.043, 0.0166, 
            0.0594, 0.0308, 2.1, 0.00527, 3.17, 
            4.91, 0.769, 5.9
        ),
        cutisoecal = cms.vdouble(
            20.0, 27.2, 4.48, 13.5, 4.56, 
            3.19, 12.2, 13.1, 7.42, 7.67, 
            4.12, 4.85, 10.1, 12.4, 11.1, 
            11.0, 10.6, 13.4
        ),
        cutisohcal = cms.vdouble(
            10.9, 7.01, 8.75, 3.51, 7.75, 
            1.62, 11.6, 9.9, 4.97, 5.33, 
            3.18, 2.32, 0.164, 5.46, 12.0, 
            0.00604, 4.1, 0.000628
        ),
        cutisotk = cms.vdouble(
            6.53, 4.6, 6.0, 8.63, 3.11, 
            7.77, 5.42, 4.81, 4.06, 6.47, 
            2.8, 3.45, 5.29, 5.18, 15.4, 
            5.38, 4.47, 0.0347
        ),
        cutmishits = cms.vdouble(
            5.5, 1.5, 0.5, 1.5, 2.5, 
            0.5, 3.5, 5.5, 0.5, 0.5, 
            0.5, 0.5, 0.5, 1.5, 0.5, 
            0.5, 0.5, 0.5
        ),
        cutsee = cms.vdouble(
            0.0131, 0.0106, 0.0115, 0.0306, 0.028, 
            0.0293, 0.0131, 0.0106, 0.0115, 0.0317, 
            0.029, 0.0289, 0.0142, 0.0106, 0.0103, 
            0.035, 0.0296, 0.0333
        )
    ),
    classbasedtightEleIDCutsV03 = cms.PSet(
        cutdcotdist = cms.vdouble(
            0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928
        ),
        cutdetain = cms.vdouble(
            0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996
        ),
        cutdphiin = cms.vdouble(
            0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346
        ),
        cuteseedopcor = cms.vdouble(
            0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05
        ),
        cutet = cms.vdouble(
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7
        ),
        cutfmishits = cms.vdouble(
            2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61
        ),
        cutip_gsf = cms.vdouble(
            0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363
        ),
        cutiso_sum = cms.vdouble(
            11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0
        ),
        cutiso_sumoet = cms.vdouble(
            13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7
        ),
        cutsee = cms.vdouble(
            0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101
        )
    ),
    classbasedtightEleIDCutsV04 = cms.PSet(
        cutdcotdist = cms.vdouble(
            0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928
        ),
        cutdetain = cms.vdouble(
            0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996
        ),
        cutdphiin = cms.vdouble(
            0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346
        ),
        cuteseedopcor = cms.vdouble(
            0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05
        ),
        cutet = cms.vdouble(
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7
        ),
        cutfmishits = cms.vdouble(
            2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61
        ),
        cutip_gsf = cms.vdouble(
            0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363
        ),
        cutiso_sum = cms.vdouble(
            11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0
        ),
        cutiso_sumoet = cms.vdouble(
            13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7
        ),
        cutsee = cms.vdouble(
            0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101
        )
    ),
    classbasedtightEleIDCutsV06 = cms.PSet(
        cutdcotdist = cms.vdouble(
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0
        ),
        cutdetain = cms.vdouble(
            0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139
        ),
        cutdetainl = cms.vdouble(
            0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143
        ),
        cutdphiin = cms.vdouble(
            0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328
        ),
        cutdphiinl = cms.vdouble(
            0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258
        ),
        cuteseedopcor = cms.vdouble(
            0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473
        ),
        cutfmishits = cms.vdouble(
            1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404
        ),
        cuthoel = cms.vdouble(
            0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339
        ),
        cutip_gsf = cms.vdouble(
            0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731
        ),
        cutip_gsfl = cms.vdouble(
            0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479
        ),
        cutiso_sum = cms.vdouble(
            15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98
        ),
        cutiso_sumoet = cms.vdouble(
            11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94
        ),
        cutiso_sumoetl = cms.vdouble(
            6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73
        ),
        cutsee = cms.vdouble(
            0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917
        ),
        cutseel = cms.vdouble(
            0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544
        )
    ),
    electronIDType = cms.string('classbased'),
    electronQuality = cms.string('loose'),
    electronVersion = cms.string(''),
    etBinning = cms.bool(True),
    reducedBarrelRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    reducedEndcapRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    robusthighenergyEleIDCuts = cms.PSet(
        barrel = cms.vdouble(
            0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusthighenergyEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 0.011, 0.09, 0.005, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.1, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusthighenergyEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.05, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusthighenergyEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusthighenergyEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusthighenergyEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCuts = cms.PSet(
        barrel = cms.vdouble(
            0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(
            0.115, 0.014, 0.09, 0.009, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.15, 0.0275, 0.092, 0.0105, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(
            0.075, 0.0132, 0.058, 0.0077, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.083, 0.027, 0.042, 0.01, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCuts = cms.PSet(
        barrel = cms.vdouble(
            0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(
            0.015, 0.0092, 0.02, 0.0025, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.018, 0.025, 0.02, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(
            0.01, 0.0099, 0.025, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.01, 0.028, 0.02, 0.0066, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(
            0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(
            0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(
            0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    src = cms.InputTag("gedGsfElectrons"),
    verticesCollection = cms.InputTag("offlinePrimaryVerticesWithBS")
)


process.eidRobustHighEnergy = cms.EDProducer("EleIdCutBasedExtProducer",
    additionalCategories = cms.bool(True),
    algorithm = cms.string('eIDCB'),
    classbasedlooseEleIDCuts = cms.PSet(
        cutdcotdist = cms.vdouble(
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0
        ),
        cutdetain = cms.vdouble(
            0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273
        ),
        cutdetainl = cms.vdouble(
            0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024
        ),
        cutdphiin = cms.vdouble(
            0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336
        ),
        cutdphiinl = cms.vdouble(
            0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289
        ),
        cuteseedopcor = cms.vdouble(
            0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373
        ),
        cutfmishits = cms.vdouble(
            4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5
        ),
        cuthoe = cms.vdouble(
            0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404
        ),
        cuthoel = cms.vdouble(
            0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384
        ),
        cutip_gsf = cms.vdouble(
            0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231
        ),
        cutip_gsfl = cms.vdouble(
            0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479
        ),
        cutiso_sum = cms.vdouble(
            33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98
        ),
        cutiso_sumoet = cms.vdouble(
            34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74
        ),
        cutiso_sumoetl = cms.vdouble(
            11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4
        ),
        cutsee = cms.vdouble(
            0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133
        ),
        cutseel = cms.vdouble(
            0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544
        )
    ),
    classbasedlooseEleIDCutsV00 = cms.PSet(
        deltaEtaIn = cms.vdouble(
            0.009, 0.0045, 0.0085, 0.0, 0.0105, 
            0.0068, 0.01, 0.0
        ),
        deltaPhiIn = cms.vdouble(
            0.05, 0.025, 0.053, 0.09, 0.07, 
            0.03, 0.092, 0.092
        ),
        eSeedOverPin = cms.vdouble(
            0.11, 0.91, 0.11, 0.0, 0.0, 
            0.85, 0.0, 0.0
        ),
        hOverE = cms.vdouble(
            0.115, 0.1, 0.055, 0.0, 0.145, 
            0.12, 0.15, 0.0
        ),
        sigmaEtaEta = cms.vdouble(
            0.014, 0.012, 0.0115, 0.0, 0.0275, 
            0.0265, 0.0265, 0.0
        )
    ),
    classbasedlooseEleIDCutsV01 = cms.PSet(
        deltaEtaIn = cms.vdouble(
            0.0078, 0.00259, 0.0062, 0.0, 0.0078, 
            0.0061, 0.0061, 0.0
        ),
        deltaPhiIn = cms.vdouble(
            0.053, 0.0189, 0.059, 0.099, 0.0278, 
            0.0157, 0.042, 0.08
        ),
        eSeedOverPin = cms.vdouble(
            0.3, 0.92, 0.211, 0.0, 0.42, 
            0.88, 0.68, 0.0
        ),
        hOverE = cms.vdouble(
            0.076, 0.033, 0.07, 0.0, 0.083, 
            0.0148, 0.033, 0.0
        ),
        sigmaEtaEta = cms.vdouble(
            0.0101, 0.0095, 0.0097, 0.0, 0.0271, 
            0.0267, 0.0259, 0.0
        )
    ),
    classbasedlooseEleIDCutsV02 = cms.PSet(
        cutdeta = cms.vdouble(
            0.00958, 0.00406, 0.0122, 0.0137, 0.00837, 
            0.0127, 0.011, 0.00336, 0.00977, 0.015, 
            0.00675, 0.0109, 0.014, 0.00508, 0.0109, 
            0.0146, 0.00506, 0.0127
        ),
        cutdphi = cms.vdouble(
            0.0372, 0.114, 0.118, 0.0488, 0.117, 
            0.119, 0.0606, 0.0548, 0.117, 0.07, 
            0.0355, 0.117, 0.088, 0.045, 0.118, 
            0.0919, 0.0236, 0.0515
        ),
        cuteopin = cms.vdouble(
            0.878, 0.802, 0.814, 0.942, 0.735, 
            0.774, 0.829, 0.909, 0.829, 0.813, 
            0.86, 0.897, 0.817, 0.831, 0.818, 
            0.861, 0.787, 0.789
        ),
        cuthoe = cms.vdouble(
            0.0887, 0.0934, 0.0949, 0.0986, 0.0431, 
            0.0878, 0.097, 0.0509, 0.098, 0.0991, 
            0.0321, 0.0928, 0.0663, 0.0717, 0.0966, 
            0.0758, 0.0149, 0.0131
        ),
        cutip = cms.vdouble(
            0.0246, 0.076, 0.0966, 0.0885, 0.441, 
            0.205, 0.0292, 0.0293, 0.0619, 0.0251, 
            0.159, 0.0815, 7.29, 0.0106, 5.76, 
            6.89, 1.27, 5.89
        ),
        cutisoecal = cms.vdouble(
            33.4, 28.1, 7.32, 27.4, 7.33, 
            21.7, 93.8, 102.0, 12.1, 26.0, 
            8.91, 10.0, 16.1, 31.3, 16.9, 
            15.4, 13.3, 37.7
        ),
        cutisohcal = cms.vdouble(
            13.5, 9.93, 7.56, 14.8, 8.1, 
            10.8, 42.7, 20.1, 9.11, 10.4, 
            6.89, 5.59, 8.53, 9.59, 24.2, 
            2.78, 8.67, 0.288
        ),
        cutisotk = cms.vdouble(
            24.3, 8.45, 14.4, 27.8, 6.02, 
            10.5, 14.1, 10.2, 14.5, 19.1, 
            6.1, 14.1, 8.59, 8.33, 8.3, 
            8.93, 8.6, 16.0
        ),
        cutmishits = cms.vdouble(
            5.5, 1.5, 5.5, 2.5, 2.5, 
            2.5, 3.5, 5.5, 0.5, 1.5, 
            2.5, 0.5, 1.5, 1.5, 0.5, 
            0.5, 0.5, 0.5
        ),
        cutsee = cms.vdouble(
            0.0172, 0.0115, 0.0143, 0.0344, 0.0295, 
            0.0304, 0.0145, 0.0108, 0.0128, 0.0347, 
            0.0307, 0.0316, 0.018, 0.011, 0.0132, 
            0.0349, 0.031, 0.0327
        )
    ),
    classbasedlooseEleIDCutsV03 = cms.PSet(
        cutdcotdist = cms.vdouble(
            0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199
        ),
        cutdetain = cms.vdouble(
            0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239
        ),
        cutdphiin = cms.vdouble(
            0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459
        ),
        cuteseedopcor = cms.vdouble(
            0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648
        ),
        cutet = cms.vdouble(
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5
        ),
        cutfmishits = cms.vdouble(
            4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87
        ),
        cutip_gsf = cms.vdouble(
            0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221
        ),
        cutiso_sum = cms.vdouble(
            31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0
        ),
        cutiso_sumoet = cms.vdouble(
            28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6
        ),
        cutsee = cms.vdouble(
            0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114
        )
    ),
    classbasedlooseEleIDCutsV04 = cms.PSet(
        cutdcotdist = cms.vdouble(
            0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199
        ),
        cutdetain = cms.vdouble(
            0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239
        ),
        cutdphiin = cms.vdouble(
            0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459
        ),
        cuteseedopcor = cms.vdouble(
            0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648
        ),
        cutet = cms.vdouble(
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5
        ),
        cutfmishits = cms.vdouble(
            4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87
        ),
        cutip_gsf = cms.vdouble(
            0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221
        ),
        cutiso_sum = cms.vdouble(
            31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0
        ),
        cutiso_sumoet = cms.vdouble(
            28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6
        ),
        cutsee = cms.vdouble(
            0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114
        )
    ),
    classbasedlooseEleIDCutsV06 = cms.PSet(
        cutdcotdist = cms.vdouble(
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0
        ),
        cutdetain = cms.vdouble(
            0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273
        ),
        cutdetainl = cms.vdouble(
            0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024
        ),
        cutdphiin = cms.vdouble(
            0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336
        ),
        cutdphiinl = cms.vdouble(
            0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289
        ),
        cuteseedopcor = cms.vdouble(
            0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373
        ),
        cutfmishits = cms.vdouble(
            4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5
        ),
        cuthoe = cms.vdouble(
            0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404
        ),
        cuthoel = cms.vdouble(
            0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384
        ),
        cutip_gsf = cms.vdouble(
            0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231
        ),
        cutip_gsfl = cms.vdouble(
            0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479
        ),
        cutiso_sum = cms.vdouble(
            33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98
        ),
        cutiso_sumoet = cms.vdouble(
            34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74
        ),
        cutiso_sumoetl = cms.vdouble(
            11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4
        ),
        cutsee = cms.vdouble(
            0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133
        ),
        cutseel = cms.vdouble(
            0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544
        )
    ),
    classbasedtightEleIDCuts = cms.PSet(
        cutdcotdist = cms.vdouble(
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0
        ),
        cutdetain = cms.vdouble(
            0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139
        ),
        cutdetainl = cms.vdouble(
            0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143
        ),
        cutdphiin = cms.vdouble(
            0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328
        ),
        cutdphiinl = cms.vdouble(
            0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258
        ),
        cuteseedopcor = cms.vdouble(
            0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473
        ),
        cutfmishits = cms.vdouble(
            1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404
        ),
        cuthoel = cms.vdouble(
            0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339
        ),
        cutip_gsf = cms.vdouble(
            0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731
        ),
        cutip_gsfl = cms.vdouble(
            0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479
        ),
        cutiso_sum = cms.vdouble(
            15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98
        ),
        cutiso_sumoet = cms.vdouble(
            11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94
        ),
        cutiso_sumoetl = cms.vdouble(
            6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73
        ),
        cutsee = cms.vdouble(
            0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917
        ),
        cutseel = cms.vdouble(
            0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544
        )
    ),
    classbasedtightEleIDCutsV00 = cms.PSet(
        deltaEtaIn = cms.vdouble(
            0.0055, 0.003, 0.0065, 0.0, 0.006, 
            0.0055, 0.0075, 0.0
        ),
        deltaPhiIn = cms.vdouble(
            0.032, 0.016, 0.0525, 0.09, 0.025, 
            0.035, 0.065, 0.092
        ),
        eSeedOverPin = cms.vdouble(
            0.24, 0.94, 0.11, 0.0, 0.32, 
            0.83, 0.0, 0.0
        ),
        hOverE = cms.vdouble(
            0.05, 0.042, 0.045, 0.0, 0.055, 
            0.037, 0.05, 0.0
        ),
        sigmaEtaEta = cms.vdouble(
            0.0125, 0.011, 0.01, 0.0, 0.0265, 
            0.0252, 0.026, 0.0
        )
    ),
    classbasedtightEleIDCutsV01 = cms.PSet(
        deltaEtaIn = cms.vdouble(
            0.0043, 0.00282, 0.0036, 0.0, 0.0066, 
            0.0049, 0.0041, 0.0
        ),
        deltaPhiIn = cms.vdouble(
            0.0225, 0.0114, 0.0234, 0.039, 0.0215, 
            0.0095, 0.0148, 0.0167
        ),
        eSeedOverPin = cms.vdouble(
            0.32, 0.94, 0.221, 0.0, 0.74, 
            0.89, 0.66, 0.0
        ),
        hOverE = cms.vdouble(
            0.056, 0.0221, 0.037, 0.0, 0.0268, 
            0.0102, 0.0104, 0.0
        ),
        sigmaEtaEta = cms.vdouble(
            0.0095, 0.0094, 0.0094, 0.0, 0.026, 
            0.0257, 0.0246, 0.0
        )
    ),
    classbasedtightEleIDCutsV02 = cms.PSet(
        cutdeta = cms.vdouble(
            0.00915, 0.00302, 0.0061, 0.0135, 0.00565, 
            0.00793, 0.0102, 0.00266, 0.0106, 0.00903, 
            0.00766, 0.00723, 0.0116, 0.00203, 0.00659, 
            0.0148, 0.00555, 0.0128
        ),
        cutdphi = cms.vdouble(
            0.0369, 0.0307, 0.117, 0.0475, 0.0216, 
            0.117, 0.0372, 0.0246, 0.0426, 0.0612, 
            0.0142, 0.039, 0.0737, 0.0566, 0.0359, 
            0.0187, 0.012, 0.0358
        ),
        cuteopin = cms.vdouble(
            0.878, 0.859, 0.874, 0.944, 0.737, 
            0.773, 0.86, 0.967, 0.917, 0.812, 
            0.915, 1.01, 0.847, 0.953, 0.979, 
            0.841, 0.771, 1.09
        ),
        cuthoe = cms.vdouble(
            0.0871, 0.0289, 0.0783, 0.0946, 0.0245, 
            0.0363, 0.0671, 0.048, 0.0614, 0.0924, 
            0.0158, 0.049, 0.0382, 0.0915, 0.0451, 
            0.0452, 0.00196, 0.0043
        ),
        cutip = cms.vdouble(
            0.0239, 0.027, 0.0768, 0.0231, 0.178, 
            0.0957, 0.0102, 0.0168, 0.043, 0.0166, 
            0.0594, 0.0308, 2.1, 0.00527, 3.17, 
            4.91, 0.769, 5.9
        ),
        cutisoecal = cms.vdouble(
            20.0, 27.2, 4.48, 13.5, 4.56, 
            3.19, 12.2, 13.1, 7.42, 7.67, 
            4.12, 4.85, 10.1, 12.4, 11.1, 
            11.0, 10.6, 13.4
        ),
        cutisohcal = cms.vdouble(
            10.9, 7.01, 8.75, 3.51, 7.75, 
            1.62, 11.6, 9.9, 4.97, 5.33, 
            3.18, 2.32, 0.164, 5.46, 12.0, 
            0.00604, 4.1, 0.000628
        ),
        cutisotk = cms.vdouble(
            6.53, 4.6, 6.0, 8.63, 3.11, 
            7.77, 5.42, 4.81, 4.06, 6.47, 
            2.8, 3.45, 5.29, 5.18, 15.4, 
            5.38, 4.47, 0.0347
        ),
        cutmishits = cms.vdouble(
            5.5, 1.5, 0.5, 1.5, 2.5, 
            0.5, 3.5, 5.5, 0.5, 0.5, 
            0.5, 0.5, 0.5, 1.5, 0.5, 
            0.5, 0.5, 0.5
        ),
        cutsee = cms.vdouble(
            0.0131, 0.0106, 0.0115, 0.0306, 0.028, 
            0.0293, 0.0131, 0.0106, 0.0115, 0.0317, 
            0.029, 0.0289, 0.0142, 0.0106, 0.0103, 
            0.035, 0.0296, 0.0333
        )
    ),
    classbasedtightEleIDCutsV03 = cms.PSet(
        cutdcotdist = cms.vdouble(
            0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928
        ),
        cutdetain = cms.vdouble(
            0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996
        ),
        cutdphiin = cms.vdouble(
            0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346
        ),
        cuteseedopcor = cms.vdouble(
            0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05
        ),
        cutet = cms.vdouble(
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7
        ),
        cutfmishits = cms.vdouble(
            2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61
        ),
        cutip_gsf = cms.vdouble(
            0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363
        ),
        cutiso_sum = cms.vdouble(
            11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0
        ),
        cutiso_sumoet = cms.vdouble(
            13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7
        ),
        cutsee = cms.vdouble(
            0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101
        )
    ),
    classbasedtightEleIDCutsV04 = cms.PSet(
        cutdcotdist = cms.vdouble(
            0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928
        ),
        cutdetain = cms.vdouble(
            0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996
        ),
        cutdphiin = cms.vdouble(
            0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346
        ),
        cuteseedopcor = cms.vdouble(
            0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05
        ),
        cutet = cms.vdouble(
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7
        ),
        cutfmishits = cms.vdouble(
            2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61
        ),
        cutip_gsf = cms.vdouble(
            0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363
        ),
        cutiso_sum = cms.vdouble(
            11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0
        ),
        cutiso_sumoet = cms.vdouble(
            13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7
        ),
        cutsee = cms.vdouble(
            0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101
        )
    ),
    classbasedtightEleIDCutsV06 = cms.PSet(
        cutdcotdist = cms.vdouble(
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0
        ),
        cutdetain = cms.vdouble(
            0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139
        ),
        cutdetainl = cms.vdouble(
            0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143
        ),
        cutdphiin = cms.vdouble(
            0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328
        ),
        cutdphiinl = cms.vdouble(
            0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258
        ),
        cuteseedopcor = cms.vdouble(
            0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473
        ),
        cutfmishits = cms.vdouble(
            1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404
        ),
        cuthoel = cms.vdouble(
            0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339
        ),
        cutip_gsf = cms.vdouble(
            0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731
        ),
        cutip_gsfl = cms.vdouble(
            0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479
        ),
        cutiso_sum = cms.vdouble(
            15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98
        ),
        cutiso_sumoet = cms.vdouble(
            11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94
        ),
        cutiso_sumoetl = cms.vdouble(
            6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73
        ),
        cutsee = cms.vdouble(
            0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917
        ),
        cutseel = cms.vdouble(
            0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544
        )
    ),
    electronIDType = cms.string('robust'),
    electronQuality = cms.string('highenergy'),
    electronVersion = cms.string(''),
    etBinning = cms.bool(True),
    reducedBarrelRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    reducedEndcapRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    robusthighenergyEleIDCuts = cms.PSet(
        barrel = cms.vdouble(
            0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusthighenergyEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 0.011, 0.09, 0.005, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.1, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusthighenergyEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.05, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusthighenergyEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusthighenergyEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusthighenergyEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCuts = cms.PSet(
        barrel = cms.vdouble(
            0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(
            0.115, 0.014, 0.09, 0.009, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.15, 0.0275, 0.092, 0.0105, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(
            0.075, 0.0132, 0.058, 0.0077, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.083, 0.027, 0.042, 0.01, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCuts = cms.PSet(
        barrel = cms.vdouble(
            0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(
            0.015, 0.0092, 0.02, 0.0025, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.018, 0.025, 0.02, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(
            0.01, 0.0099, 0.025, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.01, 0.028, 0.02, 0.0066, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(
            0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(
            0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(
            0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    src = cms.InputTag("gedGsfElectrons"),
    verticesCollection = cms.InputTag("offlinePrimaryVerticesWithBS")
)


process.eidRobustLoose = cms.EDProducer("EleIdCutBasedExtProducer",
    additionalCategories = cms.bool(True),
    algorithm = cms.string('eIDCB'),
    classbasedlooseEleIDCuts = cms.PSet(
        cutdcotdist = cms.vdouble(
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0
        ),
        cutdetain = cms.vdouble(
            0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273
        ),
        cutdetainl = cms.vdouble(
            0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024
        ),
        cutdphiin = cms.vdouble(
            0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336
        ),
        cutdphiinl = cms.vdouble(
            0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289
        ),
        cuteseedopcor = cms.vdouble(
            0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373
        ),
        cutfmishits = cms.vdouble(
            4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5
        ),
        cuthoe = cms.vdouble(
            0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404
        ),
        cuthoel = cms.vdouble(
            0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384
        ),
        cutip_gsf = cms.vdouble(
            0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231
        ),
        cutip_gsfl = cms.vdouble(
            0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479
        ),
        cutiso_sum = cms.vdouble(
            33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98
        ),
        cutiso_sumoet = cms.vdouble(
            34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74
        ),
        cutiso_sumoetl = cms.vdouble(
            11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4
        ),
        cutsee = cms.vdouble(
            0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133
        ),
        cutseel = cms.vdouble(
            0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544
        )
    ),
    classbasedlooseEleIDCutsV00 = cms.PSet(
        deltaEtaIn = cms.vdouble(
            0.009, 0.0045, 0.0085, 0.0, 0.0105, 
            0.0068, 0.01, 0.0
        ),
        deltaPhiIn = cms.vdouble(
            0.05, 0.025, 0.053, 0.09, 0.07, 
            0.03, 0.092, 0.092
        ),
        eSeedOverPin = cms.vdouble(
            0.11, 0.91, 0.11, 0.0, 0.0, 
            0.85, 0.0, 0.0
        ),
        hOverE = cms.vdouble(
            0.115, 0.1, 0.055, 0.0, 0.145, 
            0.12, 0.15, 0.0
        ),
        sigmaEtaEta = cms.vdouble(
            0.014, 0.012, 0.0115, 0.0, 0.0275, 
            0.0265, 0.0265, 0.0
        )
    ),
    classbasedlooseEleIDCutsV01 = cms.PSet(
        deltaEtaIn = cms.vdouble(
            0.0078, 0.00259, 0.0062, 0.0, 0.0078, 
            0.0061, 0.0061, 0.0
        ),
        deltaPhiIn = cms.vdouble(
            0.053, 0.0189, 0.059, 0.099, 0.0278, 
            0.0157, 0.042, 0.08
        ),
        eSeedOverPin = cms.vdouble(
            0.3, 0.92, 0.211, 0.0, 0.42, 
            0.88, 0.68, 0.0
        ),
        hOverE = cms.vdouble(
            0.076, 0.033, 0.07, 0.0, 0.083, 
            0.0148, 0.033, 0.0
        ),
        sigmaEtaEta = cms.vdouble(
            0.0101, 0.0095, 0.0097, 0.0, 0.0271, 
            0.0267, 0.0259, 0.0
        )
    ),
    classbasedlooseEleIDCutsV02 = cms.PSet(
        cutdeta = cms.vdouble(
            0.00958, 0.00406, 0.0122, 0.0137, 0.00837, 
            0.0127, 0.011, 0.00336, 0.00977, 0.015, 
            0.00675, 0.0109, 0.014, 0.00508, 0.0109, 
            0.0146, 0.00506, 0.0127
        ),
        cutdphi = cms.vdouble(
            0.0372, 0.114, 0.118, 0.0488, 0.117, 
            0.119, 0.0606, 0.0548, 0.117, 0.07, 
            0.0355, 0.117, 0.088, 0.045, 0.118, 
            0.0919, 0.0236, 0.0515
        ),
        cuteopin = cms.vdouble(
            0.878, 0.802, 0.814, 0.942, 0.735, 
            0.774, 0.829, 0.909, 0.829, 0.813, 
            0.86, 0.897, 0.817, 0.831, 0.818, 
            0.861, 0.787, 0.789
        ),
        cuthoe = cms.vdouble(
            0.0887, 0.0934, 0.0949, 0.0986, 0.0431, 
            0.0878, 0.097, 0.0509, 0.098, 0.0991, 
            0.0321, 0.0928, 0.0663, 0.0717, 0.0966, 
            0.0758, 0.0149, 0.0131
        ),
        cutip = cms.vdouble(
            0.0246, 0.076, 0.0966, 0.0885, 0.441, 
            0.205, 0.0292, 0.0293, 0.0619, 0.0251, 
            0.159, 0.0815, 7.29, 0.0106, 5.76, 
            6.89, 1.27, 5.89
        ),
        cutisoecal = cms.vdouble(
            33.4, 28.1, 7.32, 27.4, 7.33, 
            21.7, 93.8, 102.0, 12.1, 26.0, 
            8.91, 10.0, 16.1, 31.3, 16.9, 
            15.4, 13.3, 37.7
        ),
        cutisohcal = cms.vdouble(
            13.5, 9.93, 7.56, 14.8, 8.1, 
            10.8, 42.7, 20.1, 9.11, 10.4, 
            6.89, 5.59, 8.53, 9.59, 24.2, 
            2.78, 8.67, 0.288
        ),
        cutisotk = cms.vdouble(
            24.3, 8.45, 14.4, 27.8, 6.02, 
            10.5, 14.1, 10.2, 14.5, 19.1, 
            6.1, 14.1, 8.59, 8.33, 8.3, 
            8.93, 8.6, 16.0
        ),
        cutmishits = cms.vdouble(
            5.5, 1.5, 5.5, 2.5, 2.5, 
            2.5, 3.5, 5.5, 0.5, 1.5, 
            2.5, 0.5, 1.5, 1.5, 0.5, 
            0.5, 0.5, 0.5
        ),
        cutsee = cms.vdouble(
            0.0172, 0.0115, 0.0143, 0.0344, 0.0295, 
            0.0304, 0.0145, 0.0108, 0.0128, 0.0347, 
            0.0307, 0.0316, 0.018, 0.011, 0.0132, 
            0.0349, 0.031, 0.0327
        )
    ),
    classbasedlooseEleIDCutsV03 = cms.PSet(
        cutdcotdist = cms.vdouble(
            0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199
        ),
        cutdetain = cms.vdouble(
            0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239
        ),
        cutdphiin = cms.vdouble(
            0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459
        ),
        cuteseedopcor = cms.vdouble(
            0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648
        ),
        cutet = cms.vdouble(
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5
        ),
        cutfmishits = cms.vdouble(
            4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87
        ),
        cutip_gsf = cms.vdouble(
            0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221
        ),
        cutiso_sum = cms.vdouble(
            31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0
        ),
        cutiso_sumoet = cms.vdouble(
            28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6
        ),
        cutsee = cms.vdouble(
            0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114
        )
    ),
    classbasedlooseEleIDCutsV04 = cms.PSet(
        cutdcotdist = cms.vdouble(
            0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199
        ),
        cutdetain = cms.vdouble(
            0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239
        ),
        cutdphiin = cms.vdouble(
            0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459
        ),
        cuteseedopcor = cms.vdouble(
            0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648
        ),
        cutet = cms.vdouble(
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5
        ),
        cutfmishits = cms.vdouble(
            4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87
        ),
        cutip_gsf = cms.vdouble(
            0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221
        ),
        cutiso_sum = cms.vdouble(
            31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0
        ),
        cutiso_sumoet = cms.vdouble(
            28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6
        ),
        cutsee = cms.vdouble(
            0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114
        )
    ),
    classbasedlooseEleIDCutsV06 = cms.PSet(
        cutdcotdist = cms.vdouble(
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0
        ),
        cutdetain = cms.vdouble(
            0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273
        ),
        cutdetainl = cms.vdouble(
            0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024
        ),
        cutdphiin = cms.vdouble(
            0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336
        ),
        cutdphiinl = cms.vdouble(
            0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289
        ),
        cuteseedopcor = cms.vdouble(
            0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373
        ),
        cutfmishits = cms.vdouble(
            4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5
        ),
        cuthoe = cms.vdouble(
            0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404
        ),
        cuthoel = cms.vdouble(
            0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384
        ),
        cutip_gsf = cms.vdouble(
            0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231
        ),
        cutip_gsfl = cms.vdouble(
            0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479
        ),
        cutiso_sum = cms.vdouble(
            33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98
        ),
        cutiso_sumoet = cms.vdouble(
            34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74
        ),
        cutiso_sumoetl = cms.vdouble(
            11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4
        ),
        cutsee = cms.vdouble(
            0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133
        ),
        cutseel = cms.vdouble(
            0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544
        )
    ),
    classbasedtightEleIDCuts = cms.PSet(
        cutdcotdist = cms.vdouble(
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0
        ),
        cutdetain = cms.vdouble(
            0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139
        ),
        cutdetainl = cms.vdouble(
            0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143
        ),
        cutdphiin = cms.vdouble(
            0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328
        ),
        cutdphiinl = cms.vdouble(
            0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258
        ),
        cuteseedopcor = cms.vdouble(
            0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473
        ),
        cutfmishits = cms.vdouble(
            1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404
        ),
        cuthoel = cms.vdouble(
            0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339
        ),
        cutip_gsf = cms.vdouble(
            0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731
        ),
        cutip_gsfl = cms.vdouble(
            0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479
        ),
        cutiso_sum = cms.vdouble(
            15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98
        ),
        cutiso_sumoet = cms.vdouble(
            11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94
        ),
        cutiso_sumoetl = cms.vdouble(
            6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73
        ),
        cutsee = cms.vdouble(
            0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917
        ),
        cutseel = cms.vdouble(
            0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544
        )
    ),
    classbasedtightEleIDCutsV00 = cms.PSet(
        deltaEtaIn = cms.vdouble(
            0.0055, 0.003, 0.0065, 0.0, 0.006, 
            0.0055, 0.0075, 0.0
        ),
        deltaPhiIn = cms.vdouble(
            0.032, 0.016, 0.0525, 0.09, 0.025, 
            0.035, 0.065, 0.092
        ),
        eSeedOverPin = cms.vdouble(
            0.24, 0.94, 0.11, 0.0, 0.32, 
            0.83, 0.0, 0.0
        ),
        hOverE = cms.vdouble(
            0.05, 0.042, 0.045, 0.0, 0.055, 
            0.037, 0.05, 0.0
        ),
        sigmaEtaEta = cms.vdouble(
            0.0125, 0.011, 0.01, 0.0, 0.0265, 
            0.0252, 0.026, 0.0
        )
    ),
    classbasedtightEleIDCutsV01 = cms.PSet(
        deltaEtaIn = cms.vdouble(
            0.0043, 0.00282, 0.0036, 0.0, 0.0066, 
            0.0049, 0.0041, 0.0
        ),
        deltaPhiIn = cms.vdouble(
            0.0225, 0.0114, 0.0234, 0.039, 0.0215, 
            0.0095, 0.0148, 0.0167
        ),
        eSeedOverPin = cms.vdouble(
            0.32, 0.94, 0.221, 0.0, 0.74, 
            0.89, 0.66, 0.0
        ),
        hOverE = cms.vdouble(
            0.056, 0.0221, 0.037, 0.0, 0.0268, 
            0.0102, 0.0104, 0.0
        ),
        sigmaEtaEta = cms.vdouble(
            0.0095, 0.0094, 0.0094, 0.0, 0.026, 
            0.0257, 0.0246, 0.0
        )
    ),
    classbasedtightEleIDCutsV02 = cms.PSet(
        cutdeta = cms.vdouble(
            0.00915, 0.00302, 0.0061, 0.0135, 0.00565, 
            0.00793, 0.0102, 0.00266, 0.0106, 0.00903, 
            0.00766, 0.00723, 0.0116, 0.00203, 0.00659, 
            0.0148, 0.00555, 0.0128
        ),
        cutdphi = cms.vdouble(
            0.0369, 0.0307, 0.117, 0.0475, 0.0216, 
            0.117, 0.0372, 0.0246, 0.0426, 0.0612, 
            0.0142, 0.039, 0.0737, 0.0566, 0.0359, 
            0.0187, 0.012, 0.0358
        ),
        cuteopin = cms.vdouble(
            0.878, 0.859, 0.874, 0.944, 0.737, 
            0.773, 0.86, 0.967, 0.917, 0.812, 
            0.915, 1.01, 0.847, 0.953, 0.979, 
            0.841, 0.771, 1.09
        ),
        cuthoe = cms.vdouble(
            0.0871, 0.0289, 0.0783, 0.0946, 0.0245, 
            0.0363, 0.0671, 0.048, 0.0614, 0.0924, 
            0.0158, 0.049, 0.0382, 0.0915, 0.0451, 
            0.0452, 0.00196, 0.0043
        ),
        cutip = cms.vdouble(
            0.0239, 0.027, 0.0768, 0.0231, 0.178, 
            0.0957, 0.0102, 0.0168, 0.043, 0.0166, 
            0.0594, 0.0308, 2.1, 0.00527, 3.17, 
            4.91, 0.769, 5.9
        ),
        cutisoecal = cms.vdouble(
            20.0, 27.2, 4.48, 13.5, 4.56, 
            3.19, 12.2, 13.1, 7.42, 7.67, 
            4.12, 4.85, 10.1, 12.4, 11.1, 
            11.0, 10.6, 13.4
        ),
        cutisohcal = cms.vdouble(
            10.9, 7.01, 8.75, 3.51, 7.75, 
            1.62, 11.6, 9.9, 4.97, 5.33, 
            3.18, 2.32, 0.164, 5.46, 12.0, 
            0.00604, 4.1, 0.000628
        ),
        cutisotk = cms.vdouble(
            6.53, 4.6, 6.0, 8.63, 3.11, 
            7.77, 5.42, 4.81, 4.06, 6.47, 
            2.8, 3.45, 5.29, 5.18, 15.4, 
            5.38, 4.47, 0.0347
        ),
        cutmishits = cms.vdouble(
            5.5, 1.5, 0.5, 1.5, 2.5, 
            0.5, 3.5, 5.5, 0.5, 0.5, 
            0.5, 0.5, 0.5, 1.5, 0.5, 
            0.5, 0.5, 0.5
        ),
        cutsee = cms.vdouble(
            0.0131, 0.0106, 0.0115, 0.0306, 0.028, 
            0.0293, 0.0131, 0.0106, 0.0115, 0.0317, 
            0.029, 0.0289, 0.0142, 0.0106, 0.0103, 
            0.035, 0.0296, 0.0333
        )
    ),
    classbasedtightEleIDCutsV03 = cms.PSet(
        cutdcotdist = cms.vdouble(
            0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928
        ),
        cutdetain = cms.vdouble(
            0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996
        ),
        cutdphiin = cms.vdouble(
            0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346
        ),
        cuteseedopcor = cms.vdouble(
            0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05
        ),
        cutet = cms.vdouble(
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7
        ),
        cutfmishits = cms.vdouble(
            2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61
        ),
        cutip_gsf = cms.vdouble(
            0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363
        ),
        cutiso_sum = cms.vdouble(
            11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0
        ),
        cutiso_sumoet = cms.vdouble(
            13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7
        ),
        cutsee = cms.vdouble(
            0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101
        )
    ),
    classbasedtightEleIDCutsV04 = cms.PSet(
        cutdcotdist = cms.vdouble(
            0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928
        ),
        cutdetain = cms.vdouble(
            0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996
        ),
        cutdphiin = cms.vdouble(
            0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346
        ),
        cuteseedopcor = cms.vdouble(
            0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05
        ),
        cutet = cms.vdouble(
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7
        ),
        cutfmishits = cms.vdouble(
            2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61
        ),
        cutip_gsf = cms.vdouble(
            0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363
        ),
        cutiso_sum = cms.vdouble(
            11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0
        ),
        cutiso_sumoet = cms.vdouble(
            13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7
        ),
        cutsee = cms.vdouble(
            0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101
        )
    ),
    classbasedtightEleIDCutsV06 = cms.PSet(
        cutdcotdist = cms.vdouble(
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0
        ),
        cutdetain = cms.vdouble(
            0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139
        ),
        cutdetainl = cms.vdouble(
            0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143
        ),
        cutdphiin = cms.vdouble(
            0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328
        ),
        cutdphiinl = cms.vdouble(
            0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258
        ),
        cuteseedopcor = cms.vdouble(
            0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473
        ),
        cutfmishits = cms.vdouble(
            1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404
        ),
        cuthoel = cms.vdouble(
            0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339
        ),
        cutip_gsf = cms.vdouble(
            0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731
        ),
        cutip_gsfl = cms.vdouble(
            0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479
        ),
        cutiso_sum = cms.vdouble(
            15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98
        ),
        cutiso_sumoet = cms.vdouble(
            11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94
        ),
        cutiso_sumoetl = cms.vdouble(
            6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73
        ),
        cutsee = cms.vdouble(
            0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917
        ),
        cutseel = cms.vdouble(
            0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544
        )
    ),
    electronIDType = cms.string('robust'),
    electronQuality = cms.string('loose'),
    electronVersion = cms.string(''),
    etBinning = cms.bool(True),
    reducedBarrelRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    reducedEndcapRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    robusthighenergyEleIDCuts = cms.PSet(
        barrel = cms.vdouble(
            0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusthighenergyEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 0.011, 0.09, 0.005, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.1, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusthighenergyEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.05, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusthighenergyEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusthighenergyEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusthighenergyEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCuts = cms.PSet(
        barrel = cms.vdouble(
            0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(
            0.115, 0.014, 0.09, 0.009, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.15, 0.0275, 0.092, 0.0105, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(
            0.075, 0.0132, 0.058, 0.0077, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.083, 0.027, 0.042, 0.01, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCuts = cms.PSet(
        barrel = cms.vdouble(
            0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(
            0.015, 0.0092, 0.02, 0.0025, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.018, 0.025, 0.02, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(
            0.01, 0.0099, 0.025, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.01, 0.028, 0.02, 0.0066, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(
            0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(
            0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(
            0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    src = cms.InputTag("gedGsfElectrons"),
    verticesCollection = cms.InputTag("offlinePrimaryVerticesWithBS")
)


process.eidRobustTight = cms.EDProducer("EleIdCutBasedExtProducer",
    additionalCategories = cms.bool(True),
    algorithm = cms.string('eIDCB'),
    classbasedlooseEleIDCuts = cms.PSet(
        cutdcotdist = cms.vdouble(
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0
        ),
        cutdetain = cms.vdouble(
            0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273
        ),
        cutdetainl = cms.vdouble(
            0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024
        ),
        cutdphiin = cms.vdouble(
            0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336
        ),
        cutdphiinl = cms.vdouble(
            0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289
        ),
        cuteseedopcor = cms.vdouble(
            0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373
        ),
        cutfmishits = cms.vdouble(
            4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5
        ),
        cuthoe = cms.vdouble(
            0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404
        ),
        cuthoel = cms.vdouble(
            0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384
        ),
        cutip_gsf = cms.vdouble(
            0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231
        ),
        cutip_gsfl = cms.vdouble(
            0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479
        ),
        cutiso_sum = cms.vdouble(
            33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98
        ),
        cutiso_sumoet = cms.vdouble(
            34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74
        ),
        cutiso_sumoetl = cms.vdouble(
            11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4
        ),
        cutsee = cms.vdouble(
            0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133
        ),
        cutseel = cms.vdouble(
            0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544
        )
    ),
    classbasedlooseEleIDCutsV00 = cms.PSet(
        deltaEtaIn = cms.vdouble(
            0.009, 0.0045, 0.0085, 0.0, 0.0105, 
            0.0068, 0.01, 0.0
        ),
        deltaPhiIn = cms.vdouble(
            0.05, 0.025, 0.053, 0.09, 0.07, 
            0.03, 0.092, 0.092
        ),
        eSeedOverPin = cms.vdouble(
            0.11, 0.91, 0.11, 0.0, 0.0, 
            0.85, 0.0, 0.0
        ),
        hOverE = cms.vdouble(
            0.115, 0.1, 0.055, 0.0, 0.145, 
            0.12, 0.15, 0.0
        ),
        sigmaEtaEta = cms.vdouble(
            0.014, 0.012, 0.0115, 0.0, 0.0275, 
            0.0265, 0.0265, 0.0
        )
    ),
    classbasedlooseEleIDCutsV01 = cms.PSet(
        deltaEtaIn = cms.vdouble(
            0.0078, 0.00259, 0.0062, 0.0, 0.0078, 
            0.0061, 0.0061, 0.0
        ),
        deltaPhiIn = cms.vdouble(
            0.053, 0.0189, 0.059, 0.099, 0.0278, 
            0.0157, 0.042, 0.08
        ),
        eSeedOverPin = cms.vdouble(
            0.3, 0.92, 0.211, 0.0, 0.42, 
            0.88, 0.68, 0.0
        ),
        hOverE = cms.vdouble(
            0.076, 0.033, 0.07, 0.0, 0.083, 
            0.0148, 0.033, 0.0
        ),
        sigmaEtaEta = cms.vdouble(
            0.0101, 0.0095, 0.0097, 0.0, 0.0271, 
            0.0267, 0.0259, 0.0
        )
    ),
    classbasedlooseEleIDCutsV02 = cms.PSet(
        cutdeta = cms.vdouble(
            0.00958, 0.00406, 0.0122, 0.0137, 0.00837, 
            0.0127, 0.011, 0.00336, 0.00977, 0.015, 
            0.00675, 0.0109, 0.014, 0.00508, 0.0109, 
            0.0146, 0.00506, 0.0127
        ),
        cutdphi = cms.vdouble(
            0.0372, 0.114, 0.118, 0.0488, 0.117, 
            0.119, 0.0606, 0.0548, 0.117, 0.07, 
            0.0355, 0.117, 0.088, 0.045, 0.118, 
            0.0919, 0.0236, 0.0515
        ),
        cuteopin = cms.vdouble(
            0.878, 0.802, 0.814, 0.942, 0.735, 
            0.774, 0.829, 0.909, 0.829, 0.813, 
            0.86, 0.897, 0.817, 0.831, 0.818, 
            0.861, 0.787, 0.789
        ),
        cuthoe = cms.vdouble(
            0.0887, 0.0934, 0.0949, 0.0986, 0.0431, 
            0.0878, 0.097, 0.0509, 0.098, 0.0991, 
            0.0321, 0.0928, 0.0663, 0.0717, 0.0966, 
            0.0758, 0.0149, 0.0131
        ),
        cutip = cms.vdouble(
            0.0246, 0.076, 0.0966, 0.0885, 0.441, 
            0.205, 0.0292, 0.0293, 0.0619, 0.0251, 
            0.159, 0.0815, 7.29, 0.0106, 5.76, 
            6.89, 1.27, 5.89
        ),
        cutisoecal = cms.vdouble(
            33.4, 28.1, 7.32, 27.4, 7.33, 
            21.7, 93.8, 102.0, 12.1, 26.0, 
            8.91, 10.0, 16.1, 31.3, 16.9, 
            15.4, 13.3, 37.7
        ),
        cutisohcal = cms.vdouble(
            13.5, 9.93, 7.56, 14.8, 8.1, 
            10.8, 42.7, 20.1, 9.11, 10.4, 
            6.89, 5.59, 8.53, 9.59, 24.2, 
            2.78, 8.67, 0.288
        ),
        cutisotk = cms.vdouble(
            24.3, 8.45, 14.4, 27.8, 6.02, 
            10.5, 14.1, 10.2, 14.5, 19.1, 
            6.1, 14.1, 8.59, 8.33, 8.3, 
            8.93, 8.6, 16.0
        ),
        cutmishits = cms.vdouble(
            5.5, 1.5, 5.5, 2.5, 2.5, 
            2.5, 3.5, 5.5, 0.5, 1.5, 
            2.5, 0.5, 1.5, 1.5, 0.5, 
            0.5, 0.5, 0.5
        ),
        cutsee = cms.vdouble(
            0.0172, 0.0115, 0.0143, 0.0344, 0.0295, 
            0.0304, 0.0145, 0.0108, 0.0128, 0.0347, 
            0.0307, 0.0316, 0.018, 0.011, 0.0132, 
            0.0349, 0.031, 0.0327
        )
    ),
    classbasedlooseEleIDCutsV03 = cms.PSet(
        cutdcotdist = cms.vdouble(
            0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199
        ),
        cutdetain = cms.vdouble(
            0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239
        ),
        cutdphiin = cms.vdouble(
            0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459
        ),
        cuteseedopcor = cms.vdouble(
            0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648
        ),
        cutet = cms.vdouble(
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5
        ),
        cutfmishits = cms.vdouble(
            4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87
        ),
        cutip_gsf = cms.vdouble(
            0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221
        ),
        cutiso_sum = cms.vdouble(
            31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0
        ),
        cutiso_sumoet = cms.vdouble(
            28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6
        ),
        cutsee = cms.vdouble(
            0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114
        )
    ),
    classbasedlooseEleIDCutsV04 = cms.PSet(
        cutdcotdist = cms.vdouble(
            0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199
        ),
        cutdetain = cms.vdouble(
            0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239
        ),
        cutdphiin = cms.vdouble(
            0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459
        ),
        cuteseedopcor = cms.vdouble(
            0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648
        ),
        cutet = cms.vdouble(
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5
        ),
        cutfmishits = cms.vdouble(
            4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87
        ),
        cutip_gsf = cms.vdouble(
            0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221
        ),
        cutiso_sum = cms.vdouble(
            31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0
        ),
        cutiso_sumoet = cms.vdouble(
            28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6
        ),
        cutsee = cms.vdouble(
            0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114
        )
    ),
    classbasedlooseEleIDCutsV06 = cms.PSet(
        cutdcotdist = cms.vdouble(
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0
        ),
        cutdetain = cms.vdouble(
            0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273
        ),
        cutdetainl = cms.vdouble(
            0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024
        ),
        cutdphiin = cms.vdouble(
            0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336
        ),
        cutdphiinl = cms.vdouble(
            0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289
        ),
        cuteseedopcor = cms.vdouble(
            0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373
        ),
        cutfmishits = cms.vdouble(
            4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5
        ),
        cuthoe = cms.vdouble(
            0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404
        ),
        cuthoel = cms.vdouble(
            0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384
        ),
        cutip_gsf = cms.vdouble(
            0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231
        ),
        cutip_gsfl = cms.vdouble(
            0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479
        ),
        cutiso_sum = cms.vdouble(
            33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98
        ),
        cutiso_sumoet = cms.vdouble(
            34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74
        ),
        cutiso_sumoetl = cms.vdouble(
            11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4
        ),
        cutsee = cms.vdouble(
            0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133
        ),
        cutseel = cms.vdouble(
            0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544
        )
    ),
    classbasedtightEleIDCuts = cms.PSet(
        cutdcotdist = cms.vdouble(
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0
        ),
        cutdetain = cms.vdouble(
            0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139
        ),
        cutdetainl = cms.vdouble(
            0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143
        ),
        cutdphiin = cms.vdouble(
            0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328
        ),
        cutdphiinl = cms.vdouble(
            0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258
        ),
        cuteseedopcor = cms.vdouble(
            0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473
        ),
        cutfmishits = cms.vdouble(
            1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404
        ),
        cuthoel = cms.vdouble(
            0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339
        ),
        cutip_gsf = cms.vdouble(
            0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731
        ),
        cutip_gsfl = cms.vdouble(
            0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479
        ),
        cutiso_sum = cms.vdouble(
            15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98
        ),
        cutiso_sumoet = cms.vdouble(
            11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94
        ),
        cutiso_sumoetl = cms.vdouble(
            6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73
        ),
        cutsee = cms.vdouble(
            0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917
        ),
        cutseel = cms.vdouble(
            0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544
        )
    ),
    classbasedtightEleIDCutsV00 = cms.PSet(
        deltaEtaIn = cms.vdouble(
            0.0055, 0.003, 0.0065, 0.0, 0.006, 
            0.0055, 0.0075, 0.0
        ),
        deltaPhiIn = cms.vdouble(
            0.032, 0.016, 0.0525, 0.09, 0.025, 
            0.035, 0.065, 0.092
        ),
        eSeedOverPin = cms.vdouble(
            0.24, 0.94, 0.11, 0.0, 0.32, 
            0.83, 0.0, 0.0
        ),
        hOverE = cms.vdouble(
            0.05, 0.042, 0.045, 0.0, 0.055, 
            0.037, 0.05, 0.0
        ),
        sigmaEtaEta = cms.vdouble(
            0.0125, 0.011, 0.01, 0.0, 0.0265, 
            0.0252, 0.026, 0.0
        )
    ),
    classbasedtightEleIDCutsV01 = cms.PSet(
        deltaEtaIn = cms.vdouble(
            0.0043, 0.00282, 0.0036, 0.0, 0.0066, 
            0.0049, 0.0041, 0.0
        ),
        deltaPhiIn = cms.vdouble(
            0.0225, 0.0114, 0.0234, 0.039, 0.0215, 
            0.0095, 0.0148, 0.0167
        ),
        eSeedOverPin = cms.vdouble(
            0.32, 0.94, 0.221, 0.0, 0.74, 
            0.89, 0.66, 0.0
        ),
        hOverE = cms.vdouble(
            0.056, 0.0221, 0.037, 0.0, 0.0268, 
            0.0102, 0.0104, 0.0
        ),
        sigmaEtaEta = cms.vdouble(
            0.0095, 0.0094, 0.0094, 0.0, 0.026, 
            0.0257, 0.0246, 0.0
        )
    ),
    classbasedtightEleIDCutsV02 = cms.PSet(
        cutdeta = cms.vdouble(
            0.00915, 0.00302, 0.0061, 0.0135, 0.00565, 
            0.00793, 0.0102, 0.00266, 0.0106, 0.00903, 
            0.00766, 0.00723, 0.0116, 0.00203, 0.00659, 
            0.0148, 0.00555, 0.0128
        ),
        cutdphi = cms.vdouble(
            0.0369, 0.0307, 0.117, 0.0475, 0.0216, 
            0.117, 0.0372, 0.0246, 0.0426, 0.0612, 
            0.0142, 0.039, 0.0737, 0.0566, 0.0359, 
            0.0187, 0.012, 0.0358
        ),
        cuteopin = cms.vdouble(
            0.878, 0.859, 0.874, 0.944, 0.737, 
            0.773, 0.86, 0.967, 0.917, 0.812, 
            0.915, 1.01, 0.847, 0.953, 0.979, 
            0.841, 0.771, 1.09
        ),
        cuthoe = cms.vdouble(
            0.0871, 0.0289, 0.0783, 0.0946, 0.0245, 
            0.0363, 0.0671, 0.048, 0.0614, 0.0924, 
            0.0158, 0.049, 0.0382, 0.0915, 0.0451, 
            0.0452, 0.00196, 0.0043
        ),
        cutip = cms.vdouble(
            0.0239, 0.027, 0.0768, 0.0231, 0.178, 
            0.0957, 0.0102, 0.0168, 0.043, 0.0166, 
            0.0594, 0.0308, 2.1, 0.00527, 3.17, 
            4.91, 0.769, 5.9
        ),
        cutisoecal = cms.vdouble(
            20.0, 27.2, 4.48, 13.5, 4.56, 
            3.19, 12.2, 13.1, 7.42, 7.67, 
            4.12, 4.85, 10.1, 12.4, 11.1, 
            11.0, 10.6, 13.4
        ),
        cutisohcal = cms.vdouble(
            10.9, 7.01, 8.75, 3.51, 7.75, 
            1.62, 11.6, 9.9, 4.97, 5.33, 
            3.18, 2.32, 0.164, 5.46, 12.0, 
            0.00604, 4.1, 0.000628
        ),
        cutisotk = cms.vdouble(
            6.53, 4.6, 6.0, 8.63, 3.11, 
            7.77, 5.42, 4.81, 4.06, 6.47, 
            2.8, 3.45, 5.29, 5.18, 15.4, 
            5.38, 4.47, 0.0347
        ),
        cutmishits = cms.vdouble(
            5.5, 1.5, 0.5, 1.5, 2.5, 
            0.5, 3.5, 5.5, 0.5, 0.5, 
            0.5, 0.5, 0.5, 1.5, 0.5, 
            0.5, 0.5, 0.5
        ),
        cutsee = cms.vdouble(
            0.0131, 0.0106, 0.0115, 0.0306, 0.028, 
            0.0293, 0.0131, 0.0106, 0.0115, 0.0317, 
            0.029, 0.0289, 0.0142, 0.0106, 0.0103, 
            0.035, 0.0296, 0.0333
        )
    ),
    classbasedtightEleIDCutsV03 = cms.PSet(
        cutdcotdist = cms.vdouble(
            0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928
        ),
        cutdetain = cms.vdouble(
            0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996
        ),
        cutdphiin = cms.vdouble(
            0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346
        ),
        cuteseedopcor = cms.vdouble(
            0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05
        ),
        cutet = cms.vdouble(
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7
        ),
        cutfmishits = cms.vdouble(
            2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61
        ),
        cutip_gsf = cms.vdouble(
            0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363
        ),
        cutiso_sum = cms.vdouble(
            11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0
        ),
        cutiso_sumoet = cms.vdouble(
            13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7
        ),
        cutsee = cms.vdouble(
            0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101
        )
    ),
    classbasedtightEleIDCutsV04 = cms.PSet(
        cutdcotdist = cms.vdouble(
            0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928
        ),
        cutdetain = cms.vdouble(
            0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996
        ),
        cutdphiin = cms.vdouble(
            0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346
        ),
        cuteseedopcor = cms.vdouble(
            0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05
        ),
        cutet = cms.vdouble(
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7
        ),
        cutfmishits = cms.vdouble(
            2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61
        ),
        cutip_gsf = cms.vdouble(
            0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363
        ),
        cutiso_sum = cms.vdouble(
            11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0
        ),
        cutiso_sumoet = cms.vdouble(
            13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7
        ),
        cutsee = cms.vdouble(
            0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101
        )
    ),
    classbasedtightEleIDCutsV06 = cms.PSet(
        cutdcotdist = cms.vdouble(
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0
        ),
        cutdetain = cms.vdouble(
            0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139
        ),
        cutdetainl = cms.vdouble(
            0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143
        ),
        cutdphiin = cms.vdouble(
            0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328
        ),
        cutdphiinl = cms.vdouble(
            0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258
        ),
        cuteseedopcor = cms.vdouble(
            0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473
        ),
        cutfmishits = cms.vdouble(
            1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404
        ),
        cuthoel = cms.vdouble(
            0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339
        ),
        cutip_gsf = cms.vdouble(
            0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731
        ),
        cutip_gsfl = cms.vdouble(
            0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479
        ),
        cutiso_sum = cms.vdouble(
            15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98
        ),
        cutiso_sumoet = cms.vdouble(
            11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94
        ),
        cutiso_sumoetl = cms.vdouble(
            6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73
        ),
        cutsee = cms.vdouble(
            0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917
        ),
        cutseel = cms.vdouble(
            0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544
        )
    ),
    electronIDType = cms.string('robust'),
    electronQuality = cms.string('tight'),
    electronVersion = cms.string(''),
    etBinning = cms.bool(True),
    reducedBarrelRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    reducedEndcapRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    robusthighenergyEleIDCuts = cms.PSet(
        barrel = cms.vdouble(
            0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusthighenergyEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 0.011, 0.09, 0.005, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.1, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusthighenergyEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.05, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusthighenergyEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusthighenergyEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusthighenergyEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCuts = cms.PSet(
        barrel = cms.vdouble(
            0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(
            0.115, 0.014, 0.09, 0.009, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.15, 0.0275, 0.092, 0.0105, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(
            0.075, 0.0132, 0.058, 0.0077, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.083, 0.027, 0.042, 0.01, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCuts = cms.PSet(
        barrel = cms.vdouble(
            0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(
            0.015, 0.0092, 0.02, 0.0025, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.018, 0.025, 0.02, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(
            0.01, 0.0099, 0.025, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.01, 0.028, 0.02, 0.0066, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(
            0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(
            0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(
            0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    src = cms.InputTag("gedGsfElectrons"),
    verticesCollection = cms.InputTag("offlinePrimaryVerticesWithBS")
)


process.eidTight = cms.EDProducer("EleIdCutBasedExtProducer",
    additionalCategories = cms.bool(True),
    algorithm = cms.string('eIDCB'),
    classbasedlooseEleIDCuts = cms.PSet(
        cutdcotdist = cms.vdouble(
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0
        ),
        cutdetain = cms.vdouble(
            0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273
        ),
        cutdetainl = cms.vdouble(
            0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024
        ),
        cutdphiin = cms.vdouble(
            0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336
        ),
        cutdphiinl = cms.vdouble(
            0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289
        ),
        cuteseedopcor = cms.vdouble(
            0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373
        ),
        cutfmishits = cms.vdouble(
            4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5
        ),
        cuthoe = cms.vdouble(
            0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404
        ),
        cuthoel = cms.vdouble(
            0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384
        ),
        cutip_gsf = cms.vdouble(
            0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231
        ),
        cutip_gsfl = cms.vdouble(
            0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479
        ),
        cutiso_sum = cms.vdouble(
            33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98
        ),
        cutiso_sumoet = cms.vdouble(
            34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74
        ),
        cutiso_sumoetl = cms.vdouble(
            11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4
        ),
        cutsee = cms.vdouble(
            0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133
        ),
        cutseel = cms.vdouble(
            0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544
        )
    ),
    classbasedlooseEleIDCutsV00 = cms.PSet(
        deltaEtaIn = cms.vdouble(
            0.009, 0.0045, 0.0085, 0.0, 0.0105, 
            0.0068, 0.01, 0.0
        ),
        deltaPhiIn = cms.vdouble(
            0.05, 0.025, 0.053, 0.09, 0.07, 
            0.03, 0.092, 0.092
        ),
        eSeedOverPin = cms.vdouble(
            0.11, 0.91, 0.11, 0.0, 0.0, 
            0.85, 0.0, 0.0
        ),
        hOverE = cms.vdouble(
            0.115, 0.1, 0.055, 0.0, 0.145, 
            0.12, 0.15, 0.0
        ),
        sigmaEtaEta = cms.vdouble(
            0.014, 0.012, 0.0115, 0.0, 0.0275, 
            0.0265, 0.0265, 0.0
        )
    ),
    classbasedlooseEleIDCutsV01 = cms.PSet(
        deltaEtaIn = cms.vdouble(
            0.0078, 0.00259, 0.0062, 0.0, 0.0078, 
            0.0061, 0.0061, 0.0
        ),
        deltaPhiIn = cms.vdouble(
            0.053, 0.0189, 0.059, 0.099, 0.0278, 
            0.0157, 0.042, 0.08
        ),
        eSeedOverPin = cms.vdouble(
            0.3, 0.92, 0.211, 0.0, 0.42, 
            0.88, 0.68, 0.0
        ),
        hOverE = cms.vdouble(
            0.076, 0.033, 0.07, 0.0, 0.083, 
            0.0148, 0.033, 0.0
        ),
        sigmaEtaEta = cms.vdouble(
            0.0101, 0.0095, 0.0097, 0.0, 0.0271, 
            0.0267, 0.0259, 0.0
        )
    ),
    classbasedlooseEleIDCutsV02 = cms.PSet(
        cutdeta = cms.vdouble(
            0.00958, 0.00406, 0.0122, 0.0137, 0.00837, 
            0.0127, 0.011, 0.00336, 0.00977, 0.015, 
            0.00675, 0.0109, 0.014, 0.00508, 0.0109, 
            0.0146, 0.00506, 0.0127
        ),
        cutdphi = cms.vdouble(
            0.0372, 0.114, 0.118, 0.0488, 0.117, 
            0.119, 0.0606, 0.0548, 0.117, 0.07, 
            0.0355, 0.117, 0.088, 0.045, 0.118, 
            0.0919, 0.0236, 0.0515
        ),
        cuteopin = cms.vdouble(
            0.878, 0.802, 0.814, 0.942, 0.735, 
            0.774, 0.829, 0.909, 0.829, 0.813, 
            0.86, 0.897, 0.817, 0.831, 0.818, 
            0.861, 0.787, 0.789
        ),
        cuthoe = cms.vdouble(
            0.0887, 0.0934, 0.0949, 0.0986, 0.0431, 
            0.0878, 0.097, 0.0509, 0.098, 0.0991, 
            0.0321, 0.0928, 0.0663, 0.0717, 0.0966, 
            0.0758, 0.0149, 0.0131
        ),
        cutip = cms.vdouble(
            0.0246, 0.076, 0.0966, 0.0885, 0.441, 
            0.205, 0.0292, 0.0293, 0.0619, 0.0251, 
            0.159, 0.0815, 7.29, 0.0106, 5.76, 
            6.89, 1.27, 5.89
        ),
        cutisoecal = cms.vdouble(
            33.4, 28.1, 7.32, 27.4, 7.33, 
            21.7, 93.8, 102.0, 12.1, 26.0, 
            8.91, 10.0, 16.1, 31.3, 16.9, 
            15.4, 13.3, 37.7
        ),
        cutisohcal = cms.vdouble(
            13.5, 9.93, 7.56, 14.8, 8.1, 
            10.8, 42.7, 20.1, 9.11, 10.4, 
            6.89, 5.59, 8.53, 9.59, 24.2, 
            2.78, 8.67, 0.288
        ),
        cutisotk = cms.vdouble(
            24.3, 8.45, 14.4, 27.8, 6.02, 
            10.5, 14.1, 10.2, 14.5, 19.1, 
            6.1, 14.1, 8.59, 8.33, 8.3, 
            8.93, 8.6, 16.0
        ),
        cutmishits = cms.vdouble(
            5.5, 1.5, 5.5, 2.5, 2.5, 
            2.5, 3.5, 5.5, 0.5, 1.5, 
            2.5, 0.5, 1.5, 1.5, 0.5, 
            0.5, 0.5, 0.5
        ),
        cutsee = cms.vdouble(
            0.0172, 0.0115, 0.0143, 0.0344, 0.0295, 
            0.0304, 0.0145, 0.0108, 0.0128, 0.0347, 
            0.0307, 0.0316, 0.018, 0.011, 0.0132, 
            0.0349, 0.031, 0.0327
        )
    ),
    classbasedlooseEleIDCutsV03 = cms.PSet(
        cutdcotdist = cms.vdouble(
            0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199
        ),
        cutdetain = cms.vdouble(
            0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239
        ),
        cutdphiin = cms.vdouble(
            0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459
        ),
        cuteseedopcor = cms.vdouble(
            0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648
        ),
        cutet = cms.vdouble(
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5
        ),
        cutfmishits = cms.vdouble(
            4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87
        ),
        cutip_gsf = cms.vdouble(
            0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221
        ),
        cutiso_sum = cms.vdouble(
            31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0
        ),
        cutiso_sumoet = cms.vdouble(
            28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6
        ),
        cutsee = cms.vdouble(
            0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114
        )
    ),
    classbasedlooseEleIDCutsV04 = cms.PSet(
        cutdcotdist = cms.vdouble(
            0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199
        ),
        cutdetain = cms.vdouble(
            0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239
        ),
        cutdphiin = cms.vdouble(
            0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459
        ),
        cuteseedopcor = cms.vdouble(
            0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648
        ),
        cutet = cms.vdouble(
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5
        ),
        cutfmishits = cms.vdouble(
            4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87
        ),
        cutip_gsf = cms.vdouble(
            0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221
        ),
        cutiso_sum = cms.vdouble(
            31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0
        ),
        cutiso_sumoet = cms.vdouble(
            28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6
        ),
        cutsee = cms.vdouble(
            0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114
        )
    ),
    classbasedlooseEleIDCutsV06 = cms.PSet(
        cutdcotdist = cms.vdouble(
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0
        ),
        cutdetain = cms.vdouble(
            0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273
        ),
        cutdetainl = cms.vdouble(
            0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024
        ),
        cutdphiin = cms.vdouble(
            0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336
        ),
        cutdphiinl = cms.vdouble(
            0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289
        ),
        cuteseedopcor = cms.vdouble(
            0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373
        ),
        cutfmishits = cms.vdouble(
            4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5
        ),
        cuthoe = cms.vdouble(
            0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404
        ),
        cuthoel = cms.vdouble(
            0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384
        ),
        cutip_gsf = cms.vdouble(
            0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231
        ),
        cutip_gsfl = cms.vdouble(
            0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479
        ),
        cutiso_sum = cms.vdouble(
            33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98
        ),
        cutiso_sumoet = cms.vdouble(
            34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74
        ),
        cutiso_sumoetl = cms.vdouble(
            11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4
        ),
        cutsee = cms.vdouble(
            0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133
        ),
        cutseel = cms.vdouble(
            0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544
        )
    ),
    classbasedtightEleIDCuts = cms.PSet(
        cutdcotdist = cms.vdouble(
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0
        ),
        cutdetain = cms.vdouble(
            0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139
        ),
        cutdetainl = cms.vdouble(
            0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143
        ),
        cutdphiin = cms.vdouble(
            0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328
        ),
        cutdphiinl = cms.vdouble(
            0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258
        ),
        cuteseedopcor = cms.vdouble(
            0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473
        ),
        cutfmishits = cms.vdouble(
            1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404
        ),
        cuthoel = cms.vdouble(
            0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339
        ),
        cutip_gsf = cms.vdouble(
            0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731
        ),
        cutip_gsfl = cms.vdouble(
            0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479
        ),
        cutiso_sum = cms.vdouble(
            15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98
        ),
        cutiso_sumoet = cms.vdouble(
            11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94
        ),
        cutiso_sumoetl = cms.vdouble(
            6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73
        ),
        cutsee = cms.vdouble(
            0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917
        ),
        cutseel = cms.vdouble(
            0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544
        )
    ),
    classbasedtightEleIDCutsV00 = cms.PSet(
        deltaEtaIn = cms.vdouble(
            0.0055, 0.003, 0.0065, 0.0, 0.006, 
            0.0055, 0.0075, 0.0
        ),
        deltaPhiIn = cms.vdouble(
            0.032, 0.016, 0.0525, 0.09, 0.025, 
            0.035, 0.065, 0.092
        ),
        eSeedOverPin = cms.vdouble(
            0.24, 0.94, 0.11, 0.0, 0.32, 
            0.83, 0.0, 0.0
        ),
        hOverE = cms.vdouble(
            0.05, 0.042, 0.045, 0.0, 0.055, 
            0.037, 0.05, 0.0
        ),
        sigmaEtaEta = cms.vdouble(
            0.0125, 0.011, 0.01, 0.0, 0.0265, 
            0.0252, 0.026, 0.0
        )
    ),
    classbasedtightEleIDCutsV01 = cms.PSet(
        deltaEtaIn = cms.vdouble(
            0.0043, 0.00282, 0.0036, 0.0, 0.0066, 
            0.0049, 0.0041, 0.0
        ),
        deltaPhiIn = cms.vdouble(
            0.0225, 0.0114, 0.0234, 0.039, 0.0215, 
            0.0095, 0.0148, 0.0167
        ),
        eSeedOverPin = cms.vdouble(
            0.32, 0.94, 0.221, 0.0, 0.74, 
            0.89, 0.66, 0.0
        ),
        hOverE = cms.vdouble(
            0.056, 0.0221, 0.037, 0.0, 0.0268, 
            0.0102, 0.0104, 0.0
        ),
        sigmaEtaEta = cms.vdouble(
            0.0095, 0.0094, 0.0094, 0.0, 0.026, 
            0.0257, 0.0246, 0.0
        )
    ),
    classbasedtightEleIDCutsV02 = cms.PSet(
        cutdeta = cms.vdouble(
            0.00915, 0.00302, 0.0061, 0.0135, 0.00565, 
            0.00793, 0.0102, 0.00266, 0.0106, 0.00903, 
            0.00766, 0.00723, 0.0116, 0.00203, 0.00659, 
            0.0148, 0.00555, 0.0128
        ),
        cutdphi = cms.vdouble(
            0.0369, 0.0307, 0.117, 0.0475, 0.0216, 
            0.117, 0.0372, 0.0246, 0.0426, 0.0612, 
            0.0142, 0.039, 0.0737, 0.0566, 0.0359, 
            0.0187, 0.012, 0.0358
        ),
        cuteopin = cms.vdouble(
            0.878, 0.859, 0.874, 0.944, 0.737, 
            0.773, 0.86, 0.967, 0.917, 0.812, 
            0.915, 1.01, 0.847, 0.953, 0.979, 
            0.841, 0.771, 1.09
        ),
        cuthoe = cms.vdouble(
            0.0871, 0.0289, 0.0783, 0.0946, 0.0245, 
            0.0363, 0.0671, 0.048, 0.0614, 0.0924, 
            0.0158, 0.049, 0.0382, 0.0915, 0.0451, 
            0.0452, 0.00196, 0.0043
        ),
        cutip = cms.vdouble(
            0.0239, 0.027, 0.0768, 0.0231, 0.178, 
            0.0957, 0.0102, 0.0168, 0.043, 0.0166, 
            0.0594, 0.0308, 2.1, 0.00527, 3.17, 
            4.91, 0.769, 5.9
        ),
        cutisoecal = cms.vdouble(
            20.0, 27.2, 4.48, 13.5, 4.56, 
            3.19, 12.2, 13.1, 7.42, 7.67, 
            4.12, 4.85, 10.1, 12.4, 11.1, 
            11.0, 10.6, 13.4
        ),
        cutisohcal = cms.vdouble(
            10.9, 7.01, 8.75, 3.51, 7.75, 
            1.62, 11.6, 9.9, 4.97, 5.33, 
            3.18, 2.32, 0.164, 5.46, 12.0, 
            0.00604, 4.1, 0.000628
        ),
        cutisotk = cms.vdouble(
            6.53, 4.6, 6.0, 8.63, 3.11, 
            7.77, 5.42, 4.81, 4.06, 6.47, 
            2.8, 3.45, 5.29, 5.18, 15.4, 
            5.38, 4.47, 0.0347
        ),
        cutmishits = cms.vdouble(
            5.5, 1.5, 0.5, 1.5, 2.5, 
            0.5, 3.5, 5.5, 0.5, 0.5, 
            0.5, 0.5, 0.5, 1.5, 0.5, 
            0.5, 0.5, 0.5
        ),
        cutsee = cms.vdouble(
            0.0131, 0.0106, 0.0115, 0.0306, 0.028, 
            0.0293, 0.0131, 0.0106, 0.0115, 0.0317, 
            0.029, 0.0289, 0.0142, 0.0106, 0.0103, 
            0.035, 0.0296, 0.0333
        )
    ),
    classbasedtightEleIDCutsV03 = cms.PSet(
        cutdcotdist = cms.vdouble(
            0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928
        ),
        cutdetain = cms.vdouble(
            0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996
        ),
        cutdphiin = cms.vdouble(
            0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346
        ),
        cuteseedopcor = cms.vdouble(
            0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05
        ),
        cutet = cms.vdouble(
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7
        ),
        cutfmishits = cms.vdouble(
            2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61
        ),
        cutip_gsf = cms.vdouble(
            0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363
        ),
        cutiso_sum = cms.vdouble(
            11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0
        ),
        cutiso_sumoet = cms.vdouble(
            13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7
        ),
        cutsee = cms.vdouble(
            0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101
        )
    ),
    classbasedtightEleIDCutsV04 = cms.PSet(
        cutdcotdist = cms.vdouble(
            0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928
        ),
        cutdetain = cms.vdouble(
            0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996
        ),
        cutdphiin = cms.vdouble(
            0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346
        ),
        cuteseedopcor = cms.vdouble(
            0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05
        ),
        cutet = cms.vdouble(
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7
        ),
        cutfmishits = cms.vdouble(
            2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61
        ),
        cutip_gsf = cms.vdouble(
            0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363
        ),
        cutiso_sum = cms.vdouble(
            11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0
        ),
        cutiso_sumoet = cms.vdouble(
            13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7
        ),
        cutsee = cms.vdouble(
            0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101
        )
    ),
    classbasedtightEleIDCutsV06 = cms.PSet(
        cutdcotdist = cms.vdouble(
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0
        ),
        cutdetain = cms.vdouble(
            0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139
        ),
        cutdetainl = cms.vdouble(
            0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143
        ),
        cutdphiin = cms.vdouble(
            0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328
        ),
        cutdphiinl = cms.vdouble(
            0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258
        ),
        cuteseedopcor = cms.vdouble(
            0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473
        ),
        cutfmishits = cms.vdouble(
            1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5
        ),
        cuthoe = cms.vdouble(
            0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404
        ),
        cuthoel = cms.vdouble(
            0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339
        ),
        cutip_gsf = cms.vdouble(
            0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731
        ),
        cutip_gsfl = cms.vdouble(
            0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479
        ),
        cutiso_sum = cms.vdouble(
            15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98
        ),
        cutiso_sumoet = cms.vdouble(
            11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94
        ),
        cutiso_sumoetl = cms.vdouble(
            6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73
        ),
        cutsee = cms.vdouble(
            0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917
        ),
        cutseel = cms.vdouble(
            0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544
        )
    ),
    electronIDType = cms.string('classbased'),
    electronQuality = cms.string('tight'),
    electronVersion = cms.string(''),
    etBinning = cms.bool(True),
    reducedBarrelRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    reducedEndcapRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    robusthighenergyEleIDCuts = cms.PSet(
        barrel = cms.vdouble(
            0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusthighenergyEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 0.011, 0.09, 0.005, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.1, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusthighenergyEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.05, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusthighenergyEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusthighenergyEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusthighenergyEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCuts = cms.PSet(
        barrel = cms.vdouble(
            0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(
            0.115, 0.014, 0.09, 0.009, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.15, 0.0275, 0.092, 0.0105, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(
            0.075, 0.0132, 0.058, 0.0077, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.083, 0.027, 0.042, 0.01, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robustlooseEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(
            0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCuts = cms.PSet(
        barrel = cms.vdouble(
            0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(
            0.015, 0.0092, 0.02, 0.0025, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.018, 0.025, 0.02, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(
            0.01, 0.0099, 0.025, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.01, 0.028, 0.02, 0.0066, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(
            0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(
            0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    robusttightEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(
            0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        ),
        endcap = cms.vdouble(
            0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0
        )
    ),
    src = cms.InputTag("gedGsfElectrons"),
    verticesCollection = cms.InputTag("offlinePrimaryVerticesWithBS")
)


process.elPFIsoDepositCharged = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(0.4),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedHadrons")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("pfElectronTranslator","pf"),
    trackType = cms.string('candidate')
)


process.elPFIsoDepositChargedAll = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(0.4),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedParticles")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("pfElectronTranslator","pf"),
    trackType = cms.string('candidate')
)


process.elPFIsoDepositGamma = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(0.4),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllPhotons")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("pfElectronTranslator","pf"),
    trackType = cms.string('candidate')
)


process.elPFIsoDepositNeutral = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(0.4),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllNeutralHadrons")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("pfElectronTranslator","pf"),
    trackType = cms.string('candidate')
)


process.elPFIsoDepositPU = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(0.4),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfPileUpAllChargedParticles")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("pfElectronTranslator","pf"),
    trackType = cms.string('candidate')
)


process.elPFIsoValueCharged03 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("elPFIsoDepositCharged"),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        weight = cms.string('1')
    ))
)


process.elPFIsoValueCharged04 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.4),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("elPFIsoDepositCharged"),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        weight = cms.string('1')
    ))
)


process.elPFIsoValueChargedAll03 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("elPFIsoDepositChargedAll"),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        weight = cms.string('1')
    ))
)


process.elPFIsoValueChargedAll04 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.4),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("elPFIsoDepositChargedAll"),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        weight = cms.string('1')
    ))
)


process.elPFIsoValueGamma03 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("elPFIsoDepositGamma"),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.08)'),
        weight = cms.string('1')
    ))
)


process.elPFIsoValueGamma04 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.4),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("elPFIsoDepositGamma"),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.08)'),
        weight = cms.string('1')
    ))
)


process.elPFIsoValueNeutral03 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("elPFIsoDepositNeutral"),
        vetos = cms.vstring(),
        weight = cms.string('1')
    ))
)


process.elPFIsoValueNeutral04 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.4),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("elPFIsoDepositNeutral"),
        vetos = cms.vstring(),
        weight = cms.string('1')
    ))
)


process.elPFIsoValuePU03 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("elPFIsoDepositPU"),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        weight = cms.string('1')
    ))
)


process.elPFIsoValuePU04 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.4),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("elPFIsoDepositPU"),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        weight = cms.string('1')
    ))
)


process.electronCkfTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('TrajectoryBuilderForElectrons')
    ),
    TrajectoryCleaner = cms.string('electronTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    reverseTrajectories = cms.bool(False),
    src = cms.InputTag("electronMergedSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.electronCkfTrackCandidatesFromMultiCl = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('TrajectoryBuilderForElectrons')
    ),
    TrajectoryCleaner = cms.string('electronTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    reverseTrajectories = cms.bool(False),
    src = cms.InputTag("electronMergedSeedsFromMultiCl"),
    useHitsSplitting = cms.bool(True)
)


process.electronEcalPFClusterIsolationProducer = cms.EDProducer("ElectronEcalPFClusterIsolationProducer",
    candidateProducer = cms.InputTag("gedGsfElectronsTmp"),
    drMax = cms.double(0.3),
    drVetoBarrel = cms.double(0),
    drVetoEndcap = cms.double(0),
    energyBarrel = cms.double(0),
    energyEndcap = cms.double(0),
    etaStripBarrel = cms.double(0),
    etaStripEndcap = cms.double(0),
    pfClusterProducer = cms.InputTag("particleFlowClusterECAL")
)


process.electronEcalRecHitIsolationLcone = cms.EDProducer("EgammaEcalRecHitIsolationProducer",
    eMinBarrel = cms.double(0.095),
    eMinEndcap = cms.double(0.0),
    ecalBarrelRecHitCollection = cms.InputTag("EcalRecHitsEB"),
    ecalBarrelRecHitProducer = cms.InputTag("ecalRecHit"),
    ecalEndcapRecHitCollection = cms.InputTag("EcalRecHitsEE"),
    ecalEndcapRecHitProducer = cms.InputTag("ecalRecHit"),
    emObjectProducer = cms.InputTag("gedGsfElectrons"),
    etMinBarrel = cms.double(0.0),
    etMinEndcap = cms.double(0.11),
    extRadius = cms.double(0.4),
    intRadiusBarrel = cms.double(3.0),
    intRadiusEndcap = cms.double(3.0),
    jurassicWidth = cms.double(1.5),
    subtract = cms.bool(False),
    tryBoth = cms.bool(True),
    useIsolEt = cms.bool(True),
    useNumCrystals = cms.bool(True),
    vetoClustered = cms.bool(False)
)


process.electronEcalRecHitIsolationScone = cms.EDProducer("EgammaEcalRecHitIsolationProducer",
    eMinBarrel = cms.double(0.095),
    eMinEndcap = cms.double(0.0),
    ecalBarrelRecHitCollection = cms.InputTag("EcalRecHitsEB"),
    ecalBarrelRecHitProducer = cms.InputTag("ecalRecHit"),
    ecalEndcapRecHitCollection = cms.InputTag("EcalRecHitsEE"),
    ecalEndcapRecHitProducer = cms.InputTag("ecalRecHit"),
    emObjectProducer = cms.InputTag("gedGsfElectrons"),
    etMinBarrel = cms.double(0.0),
    etMinEndcap = cms.double(0.11),
    extRadius = cms.double(0.3),
    intRadiusBarrel = cms.double(3.0),
    intRadiusEndcap = cms.double(3.0),
    jurassicWidth = cms.double(1.5),
    subtract = cms.bool(False),
    tryBoth = cms.bool(True),
    useIsolEt = cms.bool(True),
    useNumCrystals = cms.bool(True),
    vetoClustered = cms.bool(False)
)


process.electronGsfTracks = cms.EDProducer("GsfTrackProducer",
    AlgorithmName = cms.string('gsf'),
    Fitter = cms.string('GsfElectronFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('fwdGsfElectronPropagator'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(False),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    producer = cms.string(''),
    src = cms.InputTag("electronCkfTrackCandidates"),
    useHitsSplitting = cms.bool(False)
)


process.electronGsfTracksFromMultiCl = cms.EDProducer("GsfTrackProducer",
    AlgorithmName = cms.string('gsf'),
    Fitter = cms.string('GsfElectronFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('fwdGsfElectronPropagator'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(False),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    producer = cms.string(''),
    src = cms.InputTag("electronCkfTrackCandidatesFromMultiCl"),
    useHitsSplitting = cms.bool(False)
)


process.electronHcalDepth1TowerIsolationLcone = cms.EDProducer("EgammaTowerIsolationProducer",
    Depth = cms.int32(1),
    absolut = cms.bool(True),
    emObjectProducer = cms.InputTag("gedGsfElectrons"),
    etMin = cms.double(0.0),
    extRadius = cms.double(0.4),
    intRadius = cms.double(0.15),
    towerProducer = cms.InputTag("towerMaker")
)


process.electronHcalDepth1TowerIsolationScone = cms.EDProducer("EgammaTowerIsolationProducer",
    Depth = cms.int32(1),
    absolut = cms.bool(True),
    emObjectProducer = cms.InputTag("gedGsfElectrons"),
    etMin = cms.double(0.0),
    extRadius = cms.double(0.3),
    intRadius = cms.double(0.15),
    towerProducer = cms.InputTag("towerMaker")
)


process.electronHcalDepth2TowerIsolationLcone = cms.EDProducer("EgammaTowerIsolationProducer",
    Depth = cms.int32(2),
    absolut = cms.bool(True),
    emObjectProducer = cms.InputTag("gedGsfElectrons"),
    etMin = cms.double(0.0),
    extRadius = cms.double(0.4),
    intRadius = cms.double(0.15),
    towerProducer = cms.InputTag("towerMaker")
)


process.electronHcalDepth2TowerIsolationScone = cms.EDProducer("EgammaTowerIsolationProducer",
    Depth = cms.int32(2),
    absolut = cms.bool(True),
    emObjectProducer = cms.InputTag("gedGsfElectrons"),
    etMin = cms.double(0.0),
    extRadius = cms.double(0.3),
    intRadius = cms.double(0.15),
    towerProducer = cms.InputTag("towerMaker")
)


process.electronHcalPFClusterIsolationProducer = cms.EDProducer("ElectronHcalPFClusterIsolationProducer",
    candidateProducer = cms.InputTag("gedGsfElectronsTmp"),
    drMax = cms.double(0.3),
    drVetoBarrel = cms.double(0),
    drVetoEndcap = cms.double(0),
    energyBarrel = cms.double(0),
    energyEndcap = cms.double(0),
    etaStripBarrel = cms.double(0),
    etaStripEndcap = cms.double(0),
    pfClusterProducerHCAL = cms.InputTag("particleFlowClusterHCAL"),
    useHF = cms.bool(False)
)


process.electronHcalTowerIsolationLcone = cms.EDProducer("EgammaTowerIsolationProducer",
    Depth = cms.int32(-1),
    absolut = cms.bool(True),
    emObjectProducer = cms.InputTag("gedGsfElectrons"),
    etMin = cms.double(0.0),
    extRadius = cms.double(0.4),
    intRadius = cms.double(0.15),
    towerProducer = cms.InputTag("towerMaker")
)


process.electronHcalTowerIsolationScone = cms.EDProducer("EgammaTowerIsolationProducer",
    Depth = cms.int32(-1),
    absolut = cms.bool(True),
    emObjectProducer = cms.InputTag("gedGsfElectrons"),
    etMin = cms.double(0.0),
    extRadius = cms.double(0.3),
    intRadius = cms.double(0.15),
    towerProducer = cms.InputTag("towerMaker")
)


process.electronMergedSeeds = cms.EDProducer("ElectronSeedMerger",
    EcalBasedSeeds = cms.InputTag("ecalDrivenElectronSeeds"),
    TkBasedSeeds = cms.InputTag("trackerDrivenElectronSeeds","SeedsForGsf")
)


process.electronMergedSeedsFromMultiCl = cms.EDProducer("ElectronSeedMerger",
    EcalBasedSeeds = cms.InputTag("ecalDrivenElectronSeedsFromMultiCl"),
    TkBasedSeeds = cms.InputTag("trackerDrivenElectronSeeds","SeedsForGsf")
)


process.electronTrackIsolationLcone = cms.EDProducer("EgammaElectronTkIsolationProducer",
    BeamspotProducer = cms.InputTag("offlineBeamSpot"),
    absolut = cms.bool(True),
    electronProducer = cms.InputTag("gedGsfElectrons"),
    extRadius = cms.double(0.4),
    intRadiusBarrel = cms.double(0.015),
    intRadiusEndcap = cms.double(0.015),
    maxVtxDist = cms.double(0.2),
    maxVtxDistXY = cms.double(9999.0),
    ptMin = cms.double(0.7),
    stripBarrel = cms.double(0.015),
    stripEndcap = cms.double(0.015),
    trackProducer = cms.InputTag("generalTracks")
)


process.electronTrackIsolationScone = cms.EDProducer("EgammaElectronTkIsolationProducer",
    BeamspotProducer = cms.InputTag("offlineBeamSpot"),
    absolut = cms.bool(True),
    electronProducer = cms.InputTag("gedGsfElectrons"),
    extRadius = cms.double(0.3),
    intRadiusBarrel = cms.double(0.015),
    intRadiusEndcap = cms.double(0.015),
    maxVtxDist = cms.double(0.2),
    maxVtxDistXY = cms.double(9999.0),
    ptMin = cms.double(0.7),
    stripBarrel = cms.double(0.015),
    stripEndcap = cms.double(0.015),
    trackProducer = cms.InputTag("generalTracks")
)


process.emtfStage2Digis = cms.EDProducer("L1TRawToDigi",
    FWId = cms.uint32(0),
    FedIds = cms.vint32(1384, 1385),
    InputLabel = cms.InputTag("rawDataCollector"),
    MTF7 = cms.untracked.bool(True),
    Setup = cms.string('stage2::EMTFSetup'),
    debug = cms.untracked.bool(False)
)


process.fastElectronCkfTrackCandidates = cms.EDProducer("TrackCandidateProducer",
    MinNumberOfCrossedLayers = cms.uint32(5),
    OverlapCleaning = cms.bool(True),
    SplitHits = cms.bool(True),
    propagator = cms.string('PropagatorWithMaterialOpposite'),
    recHitCombinations = cms.InputTag("fastMatchedTrackerRecHitCombinations"),
    simTracks = cms.InputTag("fastSimProducer"),
    src = cms.InputTag("electronMergedSeeds")
)


process.fastLowPtGsfTkfTrackCandidates = cms.EDProducer("TrackCandidateProducer",
    MinNumberOfCrossedLayers = cms.uint32(5),
    OverlapCleaning = cms.bool(True),
    SplitHits = cms.bool(True),
    propagator = cms.string('PropagatorWithMaterialOpposite'),
    recHitCombinations = cms.InputTag("fastMatchedTrackerRecHitCombinations"),
    simTracks = cms.InputTag("fastSimProducer"),
    src = cms.InputTag("lowPtGsfElectronSeeds")
)


process.filteredLayerClustersEM = cms.EDProducer("FilteredLayerClustersProducer",
    LayerClusters = cms.InputTag("hgcalLayerClusters"),
    LayerClustersInputMask = cms.InputTag("ticlTrackstersTrkEM"),
    algo_number = cms.int32(8),
    clusterFilter = cms.string('ClusterFilterByAlgoAndSizeAndLayerRange'),
    iteration_label = cms.string('EM'),
    max_cluster_size = cms.int32(9999),
    max_layerId = cms.int32(30),
    mightGet = cms.optional.untracked.vstring,
    min_cluster_size = cms.int32(3),
    min_layerId = cms.int32(0)
)


process.filteredLayerClustersHAD = cms.EDProducer("FilteredLayerClustersProducer",
    LayerClusters = cms.InputTag("hgcalLayerClusters"),
    LayerClustersInputMask = cms.InputTag("ticlTrackstersTrk"),
    algo_number = cms.int32(8),
    clusterFilter = cms.string('ClusterFilterByAlgoAndSize'),
    iteration_label = cms.string('HAD'),
    max_cluster_size = cms.int32(9999),
    max_layerId = cms.int32(9999),
    mightGet = cms.optional.untracked.vstring,
    min_cluster_size = cms.int32(3),
    min_layerId = cms.int32(0)
)


process.filteredLayerClustersHFNoseEM = cms.EDProducer("FilteredLayerClustersProducer",
    LayerClusters = cms.InputTag("hgcalLayerClustersHFNose"),
    LayerClustersInputMask = cms.InputTag("hgcalLayerClustersHFNose","InitialLayerClustersMask"),
    algo_number = cms.int32(9),
    clusterFilter = cms.string('ClusterFilterByAlgoAndSizeAndLayerRange'),
    iteration_label = cms.string('EMn'),
    max_cluster_size = cms.int32(9999),
    max_layerId = cms.int32(30),
    mightGet = cms.optional.untracked.vstring,
    min_cluster_size = cms.int32(3),
    min_layerId = cms.int32(0)
)


process.filteredLayerClustersHFNoseMIP = cms.EDProducer("FilteredLayerClustersProducer",
    LayerClusters = cms.InputTag("hgcalLayerClustersHFNose"),
    LayerClustersInputMask = cms.InputTag("hgcalLayerClustersHFNose","InitialLayerClustersMask"),
    algo_number = cms.int32(9),
    clusterFilter = cms.string('ClusterFilterBySize'),
    iteration_label = cms.string('MIPn'),
    max_cluster_size = cms.int32(2),
    max_layerId = cms.int32(9999),
    mightGet = cms.optional.untracked.vstring,
    min_cluster_size = cms.int32(0),
    min_layerId = cms.int32(0)
)


process.filteredLayerClustersMIP = cms.EDProducer("FilteredLayerClustersProducer",
    LayerClusters = cms.InputTag("hgcalLayerClusters"),
    LayerClustersInputMask = cms.InputTag("hgcalLayerClusters","InitialLayerClustersMask"),
    algo_number = cms.int32(8),
    clusterFilter = cms.string('ClusterFilterBySize'),
    iteration_label = cms.string('MIP'),
    max_cluster_size = cms.int32(2),
    max_layerId = cms.int32(9999),
    mightGet = cms.optional.untracked.vstring,
    min_cluster_size = cms.int32(0),
    min_layerId = cms.int32(0)
)


process.filteredLayerClustersTrk = cms.EDProducer("FilteredLayerClustersProducer",
    LayerClusters = cms.InputTag("hgcalLayerClusters"),
    LayerClustersInputMask = cms.InputTag("ticlTrackstersEM"),
    algo_number = cms.int32(8),
    clusterFilter = cms.string('ClusterFilterByAlgoAndSize'),
    iteration_label = cms.string('Trk'),
    max_cluster_size = cms.int32(9999),
    max_layerId = cms.int32(9999),
    mightGet = cms.optional.untracked.vstring,
    min_cluster_size = cms.int32(3),
    min_layerId = cms.int32(0)
)


process.filteredLayerClustersTrkEM = cms.EDProducer("FilteredLayerClustersProducer",
    LayerClusters = cms.InputTag("hgcalLayerClusters"),
    LayerClustersInputMask = cms.InputTag("hgcalLayerClusters","InitialLayerClustersMask"),
    algo_number = cms.int32(8),
    clusterFilter = cms.string('ClusterFilterByAlgoAndSizeAndLayerRange'),
    iteration_label = cms.string('TrkEM'),
    max_cluster_size = cms.int32(9999),
    max_layerId = cms.int32(30),
    mightGet = cms.optional.untracked.vstring,
    min_cluster_size = cms.int32(3),
    min_layerId = cms.int32(0)
)


process.firstStepPrimaryVertices = cms.EDProducer("RecoChargedRefCandidatePrimaryVertexSorter",
    assignment = cms.PSet(
        maxDistanceToJetAxis = cms.double(0.07),
        maxDtSigForPrimaryAssignment = cms.double(4.0),
        maxDxyForJetAxisAssigment = cms.double(0.1),
        maxDxyForNotReconstructedPrimary = cms.double(0.01),
        maxDxySigForNotReconstructedPrimary = cms.double(2),
        maxDzErrorForPrimaryAssignment = cms.double(0.05),
        maxDzForJetAxisAssigment = cms.double(0.1),
        maxDzForPrimaryAssignment = cms.double(0.1),
        maxDzSigForPrimaryAssignment = cms.double(5.0),
        maxJetDeltaR = cms.double(0.5),
        minJetPt = cms.double(25),
        preferHighRanked = cms.bool(False),
        useTiming = cms.bool(False)
    ),
    jets = cms.InputTag("ak4CaloJetsForTrk"),
    particles = cms.InputTag("initialStepTrackRefsForJets"),
    produceAssociationToOriginalVertices = cms.bool(False),
    produceNoPileUpCollection = cms.bool(False),
    producePileUpCollection = cms.bool(False),
    produceSortedVertices = cms.bool(True),
    qualityForPrimary = cms.int32(3),
    sorting = cms.PSet(

    ),
    trackTimeResoTag = cms.InputTag(""),
    trackTimeTag = cms.InputTag(""),
    usePVMET = cms.bool(True),
    vertices = cms.InputTag("firstStepPrimaryVerticesUnsorted")
)


process.firstStepPrimaryVerticesBeforeMixing = cms.EDProducer("PrimaryVertexProducer",
    TkClusParameters = cms.PSet(
        TkDAClusParameters = cms.PSet(
            Tmin = cms.double(2.0),
            Tpurge = cms.double(2.0),
            Tstop = cms.double(0.5),
            convergence_mode = cms.int32(0),
            coolingFactor = cms.double(0.6),
            d0CutOff = cms.double(3.0),
            delta_highT = cms.double(0.01),
            delta_lowT = cms.double(0.001),
            dzCutOff = cms.double(3.0),
            uniquetrkweight = cms.double(0.8),
            vertexSize = cms.double(0.006),
            zmerge = cms.double(0.01),
            zrange = cms.double(4.0)
        ),
        algorithm = cms.string('DA_vect')
    ),
    TkFilterParameters = cms.PSet(
        algorithm = cms.string('filter'),
        maxD0Error = cms.double(1.0),
        maxD0Significance = cms.double(4.0),
        maxDzError = cms.double(1.0),
        maxEta = cms.double(4.0),
        maxNormalizedChi2 = cms.double(10.0),
        minPixelLayersWithHits = cms.int32(2),
        minPt = cms.double(0.0),
        minSiliconLayersWithHits = cms.int32(5),
        trackQuality = cms.string('any')
    ),
    TrackLabel = cms.InputTag("initialStepTracks"),
    beamSpotLabel = cms.InputTag("offlineBeamSpot"),
    verbose = cms.untracked.bool(False),
    vertexCollections = cms.VPSet(cms.PSet(
        algorithm = cms.string('AdaptiveVertexFitter'),
        chi2cutoff = cms.double(2.5),
        label = cms.string(''),
        maxDistanceToBeam = cms.double(1.0),
        minNdof = cms.double(0.0),
        useBeamConstraint = cms.bool(False)
    ))
)


process.firstStepPrimaryVerticesPreSplitting = cms.EDProducer("PrimaryVertexProducer",
    TkClusParameters = cms.PSet(
        TkDAClusParameters = cms.PSet(
            Tmin = cms.double(2.0),
            Tpurge = cms.double(2.0),
            Tstop = cms.double(0.5),
            convergence_mode = cms.int32(0),
            coolingFactor = cms.double(0.6),
            d0CutOff = cms.double(3.0),
            delta_highT = cms.double(0.01),
            delta_lowT = cms.double(0.001),
            dzCutOff = cms.double(3.0),
            uniquetrkweight = cms.double(0.8),
            vertexSize = cms.double(0.006),
            zmerge = cms.double(0.01),
            zrange = cms.double(4.0)
        ),
        algorithm = cms.string('DA_vect')
    ),
    TkFilterParameters = cms.PSet(
        algorithm = cms.string('filter'),
        maxD0Error = cms.double(1.0),
        maxD0Significance = cms.double(4.0),
        maxDzError = cms.double(1.0),
        maxEta = cms.double(4.0),
        maxNormalizedChi2 = cms.double(10.0),
        minPixelLayersWithHits = cms.int32(2),
        minPt = cms.double(0.0),
        minSiliconLayersWithHits = cms.int32(5),
        trackQuality = cms.string('any')
    ),
    TrackLabel = cms.InputTag("initialStepTracksPreSplitting"),
    beamSpotLabel = cms.InputTag("offlineBeamSpot"),
    verbose = cms.untracked.bool(False),
    vertexCollections = cms.VPSet(cms.PSet(
        algorithm = cms.string('AdaptiveVertexFitter'),
        chi2cutoff = cms.double(2.5),
        label = cms.string(''),
        maxDistanceToBeam = cms.double(1.0),
        minNdof = cms.double(0.0),
        useBeamConstraint = cms.bool(False)
    ))
)


process.firstStepPrimaryVerticesUnsorted = cms.EDProducer("PrimaryVertexProducer",
    TkClusParameters = cms.PSet(
        TkDAClusParameters = cms.PSet(
            Tmin = cms.double(2.0),
            Tpurge = cms.double(2.0),
            Tstop = cms.double(0.5),
            convergence_mode = cms.int32(0),
            coolingFactor = cms.double(0.6),
            d0CutOff = cms.double(3.0),
            delta_highT = cms.double(0.01),
            delta_lowT = cms.double(0.001),
            dzCutOff = cms.double(3.0),
            uniquetrkweight = cms.double(0.8),
            vertexSize = cms.double(0.006),
            zmerge = cms.double(0.01),
            zrange = cms.double(4.0)
        ),
        algorithm = cms.string('DA_vect')
    ),
    TkFilterParameters = cms.PSet(
        algorithm = cms.string('filter'),
        maxD0Error = cms.double(1.0),
        maxD0Significance = cms.double(4.0),
        maxDzError = cms.double(1.0),
        maxEta = cms.double(4.0),
        maxNormalizedChi2 = cms.double(10.0),
        minPixelLayersWithHits = cms.int32(2),
        minPt = cms.double(0.0),
        minSiliconLayersWithHits = cms.int32(5),
        trackQuality = cms.string('any')
    ),
    TrackLabel = cms.InputTag("initialStepTracks"),
    beamSpotLabel = cms.InputTag("offlineBeamSpot"),
    verbose = cms.untracked.bool(False),
    vertexCollections = cms.VPSet(cms.PSet(
        algorithm = cms.string('AdaptiveVertexFitter'),
        chi2cutoff = cms.double(2.5),
        label = cms.string(''),
        maxDistanceToBeam = cms.double(1.0),
        minNdof = cms.double(0.0),
        useBeamConstraint = cms.bool(False)
    ))
)


process.fixedGridRhoAll = cms.EDProducer("FixedGridRhoProducer",
    EtaRegion = cms.string('All'),
    pfCandidatesTag = cms.InputTag("particleFlow")
)


process.fixedGridRhoFastjetAll = cms.EDProducer("FixedGridRhoProducerFastjet",
    gridSpacing = cms.double(0.55),
    maxRapidity = cms.double(5.0),
    pfCandidatesTag = cms.InputTag("particleFlow")
)


process.fixedGridRhoFastjetAllCalo = cms.EDProducer("FixedGridRhoProducerFastjet",
    gridSpacing = cms.double(0.55),
    maxRapidity = cms.double(5.0),
    pfCandidatesTag = cms.InputTag("towerMaker")
)


process.fixedGridRhoFastjetAllTmp = cms.EDProducer("FixedGridRhoProducerFastjet",
    gridSpacing = cms.double(0.55),
    maxRapidity = cms.double(5.0),
    pfCandidatesTag = cms.InputTag("particleFlowTmp")
)


process.fixedGridRhoFastjetCentral = cms.EDProducer("FixedGridRhoProducerFastjet",
    gridSpacing = cms.double(0.55),
    maxRapidity = cms.double(2.5),
    pfCandidatesTag = cms.InputTag("particleFlow")
)


process.fixedGridRhoFastjetCentralCalo = cms.EDProducer("FixedGridRhoProducerFastjet",
    gridSpacing = cms.double(0.55),
    maxRapidity = cms.double(2.5),
    pfCandidatesTag = cms.InputTag("towerMaker")
)


process.fixedGridRhoFastjetCentralChargedPileUp = cms.EDProducer("FixedGridRhoProducerFastjet",
    gridSpacing = cms.double(0.55),
    maxRapidity = cms.double(2.5),
    pfCandidatesTag = cms.InputTag("pfPileUpAllChargedParticles")
)


process.fixedGridRhoFastjetCentralNeutral = cms.EDProducer("FixedGridRhoProducerFastjet",
    gridSpacing = cms.double(0.55),
    maxRapidity = cms.double(2.5),
    pfCandidatesTag = cms.InputTag("pfAllNeutralHadronsAndPhotons")
)


process.gctDigis = cms.EDProducer("GctRawToDigi",
    checkHeaders = cms.untracked.bool(False),
    gctFedId = cms.untracked.int32(745),
    hltMode = cms.bool(False),
    inputLabel = cms.InputTag("rawDataCollector"),
    mightGet = cms.optional.untracked.vstring,
    numberOfGctSamplesToUnpack = cms.uint32(1),
    numberOfRctSamplesToUnpack = cms.uint32(1),
    unpackSharedRegions = cms.bool(False),
    unpackerVersion = cms.uint32(0),
    verbose = cms.untracked.bool(False)
)


process.gedElPFIsoDepositCharged = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(0.4),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedHadrons")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("gedGsfElectronsTmp"),
    trackType = cms.string('candidate')
)


process.gedElPFIsoDepositChargedAll = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(0.4),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedParticles")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("gedGsfElectronsTmp"),
    trackType = cms.string('candidate')
)


process.gedElPFIsoDepositGamma = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(0.4),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllPhotons")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("gedGsfElectronsTmp"),
    trackType = cms.string('candidate')
)


process.gedElPFIsoDepositNeutral = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(0.4),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllNeutralHadrons")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("gedGsfElectronsTmp"),
    trackType = cms.string('candidate')
)


process.gedElPFIsoDepositPU = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(0.4),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfPileUpAllChargedParticles")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("gedGsfElectronsTmp"),
    trackType = cms.string('candidate')
)


process.gedElPFIsoValueCharged03 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("gedElPFIsoDepositCharged"),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        weight = cms.string('1')
    ))
)


process.gedElPFIsoValueChargedAll03 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("gedElPFIsoDepositChargedAll"),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        weight = cms.string('1')
    ))
)


process.gedElPFIsoValueGamma03 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("gedElPFIsoDepositGamma"),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.08)'),
        weight = cms.string('1')
    ))
)


process.gedElPFIsoValueNeutral03 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("gedElPFIsoDepositNeutral"),
        vetos = cms.vstring(),
        weight = cms.string('1')
    ))
)


process.gedElPFIsoValuePU03 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("gedElPFIsoDepositPU"),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        weight = cms.string('1')
    ))
)


process.gedGsfElectronCores = cms.EDProducer("GEDGsfElectronCoreProducer",
    GEDEMUnbiased = cms.InputTag("particleFlowEGamma"),
    ctfTracks = cms.InputTag("generalTracks"),
    mightGet = cms.optional.untracked.vstring
)


process.gedGsfElectronValueMapsTmp = cms.EDProducer("GEDGsfElectronValueMapProducer",
    egmPFCandidatesTag = cms.InputTag("particleFlowEGamma"),
    gedGsfElectrons = cms.InputTag("gedGsfElectronsTmp"),
    mightGet = cms.optional.untracked.vstring
)


process.gedGsfElectrons = cms.EDProducer("GEDGsfElectronFinalizer",
    outputCollectionLabel = cms.string(''),
    pfCandidatesTag = cms.InputTag("particleFlowTmp"),
    pfIsolationValues = cms.PSet(
        pfSumChargedHadronPt = cms.InputTag("egmElectronIsolationCITK","h+-DR030-"),
        pfSumEcalClusterEt = cms.InputTag("electronEcalPFClusterIsolationProducer"),
        pfSumHcalClusterEt = cms.InputTag("electronHcalPFClusterIsolationProducer"),
        pfSumNeutralHadronEt = cms.InputTag("egmElectronIsolationCITK","h0-DR030-"),
        pfSumPUPt = cms.InputTag("egmElectronIsolationPileUpCITK","h+-DR030-"),
        pfSumPhotonEt = cms.InputTag("egmElectronIsolationCITK","gamma-DR030-")
    ),
    previousGsfElectronsTag = cms.InputTag("gedGsfElectronsTmp"),
    regressionConfig = cms.PSet(
        eleRegs = cms.PSet(
            ecalOnlyMean = cms.PSet(
                ebHighEtForestName = cms.string('electron_eb_ECALonly'),
                ebLowEtForestName = cms.string('electron_eb_ecalOnly_1To300_0p2To2_mean'),
                eeHighEtForestName = cms.string('electron_ee_ECALonly'),
                eeLowEtForestName = cms.string('electron_ee_ecalOnly_1To300_0p2To2_mean'),
                forceHighEnergyTrainingIfSaturated = cms.bool(True),
                lowEtHighEtBoundary = cms.double(999999.0),
                rangeMaxHighEt = cms.double(3.0),
                rangeMaxLowEt = cms.double(2.0),
                rangeMinHighEt = cms.double(-1.0),
                rangeMinLowEt = cms.double(0.2)
            ),
            ecalOnlySigma = cms.PSet(
                ebHighEtForestName = cms.string('electron_eb_ECALonly_var'),
                ebLowEtForestName = cms.string('electron_eb_ecalOnly_1To300_0p0002To0p5_sigma'),
                eeHighEtForestName = cms.string('electron_ee_ECALonly_var'),
                eeLowEtForestName = cms.string('electron_ee_ecalOnly_1To300_0p0002To0p5_sigma'),
                forceHighEnergyTrainingIfSaturated = cms.bool(True),
                lowEtHighEtBoundary = cms.double(999999.0),
                rangeMaxHighEt = cms.double(0.5),
                rangeMaxLowEt = cms.double(0.5),
                rangeMinHighEt = cms.double(0.0002),
                rangeMinLowEt = cms.double(0.0002)
            ),
            epComb = cms.PSet(
                ecalTrkRegressionConfig = cms.PSet(
                    ebHighEtForestName = cms.string('electron_eb_ecalTrk_1To300_0p2To2_mean'),
                    ebLowEtForestName = cms.string('electron_eb_ecalTrk_1To300_0p2To2_mean'),
                    eeHighEtForestName = cms.string('electron_ee_ecalTrk_1To300_0p2To2_mean'),
                    eeLowEtForestName = cms.string('electron_ee_ecalTrk_1To300_0p2To2_mean'),
                    forceHighEnergyTrainingIfSaturated = cms.bool(False),
                    lowEtHighEtBoundary = cms.double(999999.0),
                    rangeMaxHighEt = cms.double(2.0),
                    rangeMaxLowEt = cms.double(2.0),
                    rangeMinHighEt = cms.double(0.2),
                    rangeMinLowEt = cms.double(0.2)
                ),
                ecalTrkRegressionUncertConfig = cms.PSet(
                    ebHighEtForestName = cms.string('electron_eb_ecalTrk_1To300_0p0002To0p5_sigma'),
                    ebLowEtForestName = cms.string('electron_eb_ecalTrk_1To300_0p0002To0p5_sigma'),
                    eeHighEtForestName = cms.string('electron_ee_ecalTrk_1To300_0p0002To0p5_sigma'),
                    eeLowEtForestName = cms.string('electron_ee_ecalTrk_1To300_0p0002To0p5_sigma'),
                    forceHighEnergyTrainingIfSaturated = cms.bool(False),
                    lowEtHighEtBoundary = cms.double(999999.0),
                    rangeMaxHighEt = cms.double(0.5),
                    rangeMaxLowEt = cms.double(0.5),
                    rangeMinHighEt = cms.double(0.0002),
                    rangeMinLowEt = cms.double(0.0002)
                ),
                maxEPDiffInSigmaForComb = cms.double(15.0),
                maxEcalEnergyForComb = cms.double(200.0),
                maxRelTrkMomErrForComb = cms.double(10.0),
                minEOverPForComb = cms.double(0.025)
            )
        ),
        maxRawEnergyForLowPtEBSigma = cms.double(-1),
        maxRawEnergyForLowPtEESigma = cms.double(1200.0),
        modifierName = cms.string('EGRegressionModifierV3'),
        phoRegs = cms.PSet(
            ecalOnlyMean = cms.PSet(
                ebHighEtForestName = cms.string('photon_eb_ECALonly'),
                ebLowEtForestName = cms.string('photon_eb_ecalOnly_5To300_0p2To2_mean'),
                eeHighEtForestName = cms.string('photon_ee_ECALonly'),
                eeLowEtForestName = cms.string('photon_ee_ecalOnly_5To300_0p2To2_mean'),
                forceHighEnergyTrainingIfSaturated = cms.bool(True),
                lowEtHighEtBoundary = cms.double(999999.0),
                rangeMaxHighEt = cms.double(3.0),
                rangeMaxLowEt = cms.double(2.0),
                rangeMinHighEt = cms.double(-1.0),
                rangeMinLowEt = cms.double(0.2)
            ),
            ecalOnlySigma = cms.PSet(
                ebHighEtForestName = cms.string('photon_eb_ECALonly_var'),
                ebLowEtForestName = cms.string('photon_eb_ecalOnly_5To300_0p0002To0p5_sigma'),
                eeHighEtForestName = cms.string('photon_ee_ECALonly_var'),
                eeLowEtForestName = cms.string('photon_ee_ecalOnly_5To300_0p0002To0p5_sigma'),
                forceHighEnergyTrainingIfSaturated = cms.bool(True),
                lowEtHighEtBoundary = cms.double(999999.0),
                rangeMaxHighEt = cms.double(0.5),
                rangeMaxLowEt = cms.double(0.5),
                rangeMinHighEt = cms.double(0.0002),
                rangeMinLowEt = cms.double(0.0002)
            )
        ),
        rhoTag = cms.InputTag("fixedGridRhoFastjetAllTmp"),
        useClosestToCentreSeedCrysDef = cms.bool(False)
    )
)


process.gedGsfElectronsTmp = cms.EDProducer("GsfElectronProducer",
    ElecMVAFilesString = cms.vstring(
        'RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_10_17Feb2011.weights.xml', 
        'RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_12_17Feb2011.weights.xml', 
        'RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_20_17Feb2011.weights.xml', 
        'RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_22_17Feb2011.weights.xml'
    ),
    MaxElePtForOnlyMVA = cms.double(50),
    PreSelectMVA = cms.double(-0.1),
    SoftElecMVAFilesString = cms.vstring('RecoEgamma/ElectronIdentification/data/TMVA_BDTSoftElectrons_7Feb2014.weights.xml'),
    ambClustersOverlapStrategy = cms.uint32(1),
    ambSortingStrategy = cms.uint32(1),
    applyAmbResolution = cms.bool(False),
    applyPreselection = cms.bool(True),
    barrelRecHitCollectionTag = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    checkHcalStatus = cms.bool(True),
    combinationRegressionWeightFile = cms.vstring(),
    combinationRegressionWeightLabels = cms.vstring('gedelectron_p4combination_offline'),
    combinationWeightsFromDB = cms.bool(True),
    conversionsTag = cms.InputTag("allConversions"),
    crackCorrectionFunction = cms.string('EcalClusterCrackCorrection'),
    ctfTracksCheck = cms.bool(True),
    ctfTracksTag = cms.InputTag("generalTracks"),
    eMinBarrel = cms.double(0.095),
    eMinEndcaps = cms.double(0),
    ecalDrivenEcalEnergyFromClassBasedParameterization = cms.bool(False),
    ecalDrivenEcalErrorFromClassBasedParameterization = cms.bool(False),
    ecalRefinedRegressionWeightFiles = cms.vstring(),
    ecalRefinedRegressionWeightLabels = cms.vstring(
        'gedelectron_EBCorrection_offline_v1', 
        'gedelectron_EECorrection_offline_v1', 
        'gedelectron_EBUncertainty_offline_v1', 
        'gedelectron_EEUncertainty_offline_v1'
    ),
    ecalWeightsFromDB = cms.bool(True),
    egmPFCandidatesTag = cms.InputTag("particleFlowEGamma"),
    endcapRecHitCollectionTag = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    etMinBarrel = cms.double(0),
    etMinEndcaps = cms.double(0.11),
    etMinHcal = cms.double(0),
    fillConvVtxFitProb = cms.bool(True),
    gsfElectronCoresTag = cms.InputTag("gedGsfElectronCores"),
    gsfPfRecTracksTag = cms.InputTag("pfTrackElec"),
    hcalTowers = cms.InputTag("towerMaker"),
    ignoreNotPreselected = cms.bool(True),
    intRadiusEcalBarrel = cms.double(3),
    intRadiusEcalEndcaps = cms.double(3),
    intRadiusHcal = cms.double(0.15),
    jurassicWidth = cms.double(1.5),
    mightGet = cms.optional.untracked.vstring,
    preselection = cms.PSet(
        hOverEConeSize = cms.double(0.15),
        hOverEPtMin = cms.double(0),
        isBarrel = cms.bool(False),
        isEndcaps = cms.bool(False),
        isFiducial = cms.bool(False),
        maxDeltaEtaBarrel = cms.double(0.02),
        maxDeltaEtaEndcaps = cms.double(0.02),
        maxDeltaPhiBarrel = cms.double(0.15),
        maxDeltaPhiEndcaps = cms.double(0.15),
        maxEOverPBarrel = cms.double(999999999),
        maxEOverPEndcaps = cms.double(999999999),
        maxFbremBarrel = cms.double(999999999),
        maxFbremEndcaps = cms.double(999999999),
        maxHBarrelCone = cms.double(0),
        maxHBarrelTower = cms.double(0),
        maxHEndcapsCone = cms.double(0),
        maxHEndcapsTower = cms.double(0),
        maxHOverEBarrelCone = cms.double(0.15),
        maxHOverEBarrelTower = cms.double(0.15),
        maxHOverEEndcapsCone = cms.double(0.15),
        maxHOverEEndcapsTower = cms.double(0.15),
        maxSigmaIetaIetaBarrel = cms.double(999999999),
        maxSigmaIetaIetaEndcaps = cms.double(999999999),
        maxTIP = cms.double(999999999),
        minEOverPBarrel = cms.double(0),
        minEOverPEndcaps = cms.double(0),
        minMVA = cms.double(-0.4),
        minMvaByPassForIsolated = cms.double(-0.4),
        minSCEtBarrel = cms.double(4),
        minSCEtEndcaps = cms.double(4),
        seedFromTEC = cms.bool(True)
    ),
    pureTrackerDrivenEcalErrorFromSimpleParameterization = cms.bool(True),
    recHitFlagsToBeExcludedBarrel = cms.vstring(
        'kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'
    ),
    recHitFlagsToBeExcludedEndcaps = cms.vstring(
        'kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'
    ),
    recHitSeverityToBeExcludedBarrel = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    recHitSeverityToBeExcludedEndcaps = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    resetMvaValuesUsingPFCandidates = cms.bool(True),
    seedsTag = cms.InputTag("ecalDrivenElectronSeeds"),
    superClusterErrorFunction = cms.string('EcalClusterEnergyUncertaintyObjectSpecific'),
    trkIsol03Cfg = cms.PSet(
        barrelCuts = cms.PSet(
            algosToReject = cms.vstring('jetCoreRegionalStep'),
            allowedQualities = cms.vstring(),
            maxDPtPt = cms.double(-1),
            maxDR = cms.double(0.3),
            maxDZ = cms.double(0.2),
            minDEta = cms.double(0.015),
            minDR = cms.double(0.0),
            minHits = cms.int32(-1),
            minPixelHits = cms.int32(-1),
            minPt = cms.double(0.7)
        ),
        endcapCuts = cms.PSet(
            algosToReject = cms.vstring('jetCoreRegionalStep'),
            allowedQualities = cms.vstring(),
            maxDPtPt = cms.double(-1),
            maxDR = cms.double(0.3),
            maxDZ = cms.double(0.2),
            minDEta = cms.double(0.015),
            minDR = cms.double(0.0),
            minHits = cms.int32(-1),
            minPixelHits = cms.int32(-1),
            minPt = cms.double(0.7)
        )
    ),
    trkIsol04Cfg = cms.PSet(
        barrelCuts = cms.PSet(
            algosToReject = cms.vstring('jetCoreRegionalStep'),
            allowedQualities = cms.vstring(),
            maxDPtPt = cms.double(-1),
            maxDR = cms.double(0.4),
            maxDZ = cms.double(0.2),
            minDEta = cms.double(0.015),
            minDR = cms.double(0.0),
            minHits = cms.int32(-1),
            minPixelHits = cms.int32(-1),
            minPt = cms.double(0.7)
        ),
        endcapCuts = cms.PSet(
            algosToReject = cms.vstring('jetCoreRegionalStep'),
            allowedQualities = cms.vstring(),
            maxDPtPt = cms.double(-1),
            maxDR = cms.double(0.4),
            maxDZ = cms.double(0.2),
            minDEta = cms.double(0.015),
            minDR = cms.double(0.0),
            minHits = cms.int32(-1),
            minPixelHits = cms.int32(-1),
            minPt = cms.double(0.7)
        )
    ),
    trkIsolHEEP03Cfg = cms.PSet(
        barrelCuts = cms.PSet(
            algosToReject = cms.vstring(),
            allowedQualities = cms.vstring(),
            maxDPtPt = cms.double(0.1),
            maxDR = cms.double(0.3),
            maxDZ = cms.double(0.1),
            minDEta = cms.double(0.005),
            minDR = cms.double(0.0),
            minHits = cms.int32(8),
            minPixelHits = cms.int32(1),
            minPt = cms.double(1.0)
        ),
        endcapCuts = cms.PSet(
            algosToReject = cms.vstring(),
            allowedQualities = cms.vstring(),
            maxDPtPt = cms.double(0.1),
            maxDR = cms.double(0.3),
            maxDZ = cms.double(0.5),
            minDEta = cms.double(0.005),
            minDR = cms.double(0.0),
            minHits = cms.int32(8),
            minPixelHits = cms.int32(1),
            minPt = cms.double(1.0)
        )
    ),
    trkIsolHEEP04Cfg = cms.PSet(
        barrelCuts = cms.PSet(
            algosToReject = cms.vstring(),
            allowedQualities = cms.vstring(),
            maxDPtPt = cms.double(0.1),
            maxDR = cms.double(0.4),
            maxDZ = cms.double(0.1),
            minDEta = cms.double(0.005),
            minDR = cms.double(0.0),
            minHits = cms.int32(8),
            minPixelHits = cms.int32(1),
            minPt = cms.double(1.0)
        ),
        endcapCuts = cms.PSet(
            algosToReject = cms.vstring(),
            allowedQualities = cms.vstring(),
            maxDPtPt = cms.double(0.1),
            maxDR = cms.double(0.4),
            maxDZ = cms.double(0.5),
            minDEta = cms.double(0.005),
            minDR = cms.double(0.0),
            minHits = cms.int32(8),
            minPixelHits = cms.int32(1),
            minPt = cms.double(1.0)
        )
    ),
    useCombinationRegression = cms.bool(True),
    useDefaultEnergyCorrection = cms.bool(True),
    useEcalRegression = cms.bool(True),
    useGsfPfRecTracks = cms.bool(True),
    useNumCrystals = cms.bool(True),
    vetoClustered = cms.bool(False),
    vtxTag = cms.InputTag("offlinePrimaryVertices")
)


process.gedPhotonCore = cms.EDProducer("GEDPhotonCoreProducer",
    gedPhotonCoreCollection = cms.string(''),
    pfEgammaCandidates = cms.InputTag("particleFlowEGamma"),
    pixelSeedProducer = cms.InputTag("electronMergedSeeds")
)


process.gedPhotons = cms.EDProducer("GEDPhotonProducer",
    PFIsolationCalculatorSet = cms.PSet(
        ComponentName = cms.string('pfIsolationCalculator'),
        applyDzDxyVeto = cms.bool(True),
        applyMissHitPhVeto = cms.bool(False),
        applyPFPUVeto = cms.bool(True),
        applyVeto = cms.bool(True),
        checkClosestZVertex = cms.bool(True),
        coneDR = cms.double(0.3),
        deltaRVetoBarrel = cms.bool(True),
        deltaRVetoBarrelCharged = cms.double(0.02),
        deltaRVetoBarrelNeutrals = cms.double(-1.0),
        deltaRVetoBarrelPhotons = cms.double(-1.0),
        deltaRVetoEndcap = cms.bool(True),
        deltaRVetoEndcapCharged = cms.double(0.02),
        deltaRVetoEndcapNeutrals = cms.double(-1.0),
        deltaRVetoEndcapPhotons = cms.double(0.07),
        numberOfCrystalEndcapPhotons = cms.double(4.0),
        numberOfRings = cms.int32(1),
        particleType = cms.int32(1),
        rectangleDeltaEtaVetoBarrelCharged = cms.double(-1),
        rectangleDeltaEtaVetoBarrelNeutrals = cms.double(-1),
        rectangleDeltaEtaVetoBarrelPhotons = cms.double(0.015),
        rectangleDeltaEtaVetoEndcapCharged = cms.double(-1),
        rectangleDeltaEtaVetoEndcapNeutrals = cms.double(-1),
        rectangleDeltaEtaVetoEndcapPhotons = cms.double(-1),
        rectangleDeltaPhiVetoBarrelCharged = cms.double(-1),
        rectangleDeltaPhiVetoBarrelNeutrals = cms.double(-1),
        rectangleDeltaPhiVetoBarrelPhotons = cms.double(1.0),
        rectangleDeltaPhiVetoEndcapCharged = cms.double(-1),
        rectangleDeltaPhiVetoEndcapNeutrals = cms.double(-1),
        rectangleDeltaPhiVetoEndcapPhotons = cms.double(-1),
        rectangleVetoBarrel = cms.bool(True),
        rectangleVetoEndcap = cms.bool(False),
        ringSize = cms.double(0.3),
        useCrystalSize = cms.bool(True)
    ),
    RecHitFlagToBeExcludedEB = cms.vstring(
        'kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'
    ),
    RecHitFlagToBeExcludedEE = cms.vstring(
        'kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'
    ),
    RecHitSeverityToBeExcludedEB = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    RecHitSeverityToBeExcludedEE = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    barrelEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    candidateP4type = cms.string('fromRefinedSCRegression'),
    checkHcalStatus = cms.bool(True),
    ecalRecHitSumEtOffsetBarrel = cms.double(999999999),
    ecalRecHitSumEtOffsetEndcap = cms.double(999999999),
    ecalRecHitSumEtSlopeBarrel = cms.double(0.0),
    ecalRecHitSumEtSlopeEndcap = cms.double(0.0),
    endcapEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    energyRegressionWeightsDBLocation = cms.string('wgbrph'),
    energyRegressionWeightsFileLocation = cms.string('/afs/cern.ch/user/b/bendavid/cmspublic/regweights/gbrph.root'),
    hOverEConeSize = cms.double(0.15),
    hbheInstance = cms.string(''),
    hbheModule = cms.string('hbhereco'),
    hcalTowerSumEtOffsetBarrel = cms.double(999999999),
    hcalTowerSumEtOffsetEndcap = cms.double(999999999),
    hcalTowerSumEtSlopeBarrel = cms.double(0.0),
    hcalTowerSumEtSlopeEndcap = cms.double(0.0),
    hcalTowers = cms.InputTag("towerMaker"),
    highEt = cms.double(100.0),
    isolationSumsCalculatorSet = cms.PSet(
        ComponentName = cms.string('isolationSumsCalculator'),
        EcalRecHitEtaSliceA_Barrel = cms.double(2.5),
        EcalRecHitEtaSliceA_Endcap = cms.double(2.5),
        EcalRecHitEtaSliceB_Barrel = cms.double(2.5),
        EcalRecHitEtaSliceB_Endcap = cms.double(2.5),
        EcalRecHitInnerRadiusA_Barrel = cms.double(3.5),
        EcalRecHitInnerRadiusA_Endcap = cms.double(3.5),
        EcalRecHitInnerRadiusB_Barrel = cms.double(3.5),
        EcalRecHitInnerRadiusB_Endcap = cms.double(3.5),
        EcalRecHitOuterRadiusA_Barrel = cms.double(0.4),
        EcalRecHitOuterRadiusA_Endcap = cms.double(0.4),
        EcalRecHitOuterRadiusB_Barrel = cms.double(0.3),
        EcalRecHitOuterRadiusB_Endcap = cms.double(0.3),
        EcalRecHitThreshEA_Barrel = cms.double(0.095),
        EcalRecHitThreshEA_Endcap = cms.double(0.0),
        EcalRecHitThreshEB_Barrel = cms.double(0.095),
        EcalRecHitThreshEB_Endcap = cms.double(0.0),
        EcalRecHitThreshEtA_Barrel = cms.double(0.0),
        EcalRecHitThreshEtA_Endcap = cms.double(0.11),
        EcalRecHitThreshEtB_Barrel = cms.double(0.0),
        EcalRecHitThreshEtB_Endcap = cms.double(0.11),
        HcalDepth1TowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalDepth1TowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalDepth1TowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalDepth1TowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalDepth1TowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth1TowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalDepth1TowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalDepth1TowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalDepth1TowerThreshEA_Barrel = cms.double(0.0),
        HcalDepth1TowerThreshEA_Endcap = cms.double(0.0),
        HcalDepth1TowerThreshEB_Barrel = cms.double(0.0),
        HcalDepth1TowerThreshEB_Endcap = cms.double(0.0),
        HcalDepth2TowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalDepth2TowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalDepth2TowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalDepth2TowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalDepth2TowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth2TowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalDepth2TowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalDepth2TowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalDepth2TowerThreshEA_Barrel = cms.double(0.0),
        HcalDepth2TowerThreshEA_Endcap = cms.double(0.0),
        HcalDepth2TowerThreshEB_Barrel = cms.double(0.0),
        HcalDepth2TowerThreshEB_Endcap = cms.double(0.0),
        HcalRecHitCollection = cms.InputTag("towerMaker"),
        HcalTowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalTowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalTowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalTowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalTowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalTowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalTowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalTowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalTowerThreshEA_Barrel = cms.double(0.0),
        HcalTowerThreshEA_Endcap = cms.double(0.0),
        HcalTowerThreshEB_Barrel = cms.double(0.0),
        HcalTowerThreshEB_Endcap = cms.double(0.0),
        TrackConeInnerRadiusA_Barrel = cms.double(0.04),
        TrackConeInnerRadiusA_Endcap = cms.double(0.04),
        TrackConeInnerRadiusB_Barrel = cms.double(0.04),
        TrackConeInnerRadiusB_Endcap = cms.double(0.04),
        TrackConeOuterRadiusA_Barrel = cms.double(0.4),
        TrackConeOuterRadiusA_Endcap = cms.double(0.4),
        TrackConeOuterRadiusB_Barrel = cms.double(0.3),
        TrackConeOuterRadiusB_Endcap = cms.double(0.3),
        barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        beamSpotProducer = cms.InputTag("offlineBeamSpot"),
        endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        isolationtrackEtaSliceA_Barrel = cms.double(0.015),
        isolationtrackEtaSliceA_Endcap = cms.double(0.015),
        isolationtrackEtaSliceB_Barrel = cms.double(0.015),
        isolationtrackEtaSliceB_Endcap = cms.double(0.015),
        isolationtrackThresholdA_Barrel = cms.double(0.0),
        isolationtrackThresholdA_Endcap = cms.double(0.0),
        isolationtrackThresholdB_Barrel = cms.double(0.0),
        isolationtrackThresholdB_Endcap = cms.double(0.0),
        longImpactParameterA_Barrel = cms.double(0.2),
        longImpactParameterA_Endcap = cms.double(0.2),
        longImpactParameterB_Barrel = cms.double(0.2),
        longImpactParameterB_Endcap = cms.double(0.2),
        moduleEtaBoundary = cms.vdouble(
            0.0, 0.02, 0.43, 0.46, 0.78, 
            0.81, 1.13, 1.15, 1.45, 1.58
        ),
        modulePhiBoundary = cms.double(0.0087),
        trackProducer = cms.InputTag("generalTracks"),
        transImpactParameterA_Barrel = cms.double(0.1),
        transImpactParameterA_Endcap = cms.double(0.1),
        transImpactParameterB_Barrel = cms.double(0.1),
        transImpactParameterB_Endcap = cms.double(0.1),
        useNumCrystals = cms.bool(True),
        vetoClustered = cms.bool(False)
    ),
    maxHoverEBarrel = cms.double(0.5),
    maxHoverEEndcap = cms.double(0.5),
    minR9Barrel = cms.double(0.94),
    minR9Endcap = cms.double(0.95),
    minSCEtBarrel = cms.double(10.0),
    minSCEtEndcap = cms.double(10.0),
    mipVariableSet = cms.PSet(
        ComponentName = cms.string('mipVariable'),
        HaloDiscThreshold = cms.double(70.0),
        ResidualWidth = cms.double(0.23),
        XRangeFit = cms.double(180.0),
        YRangeFit = cms.double(7.0),
        barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE")
    ),
    nTrackHollowConeBarrel = cms.double(999999999),
    nTrackHollowConeEndcap = cms.double(999999999),
    nTrackSolidConeBarrel = cms.double(999999999),
    nTrackSolidConeEndcap = cms.double(999999999),
    outputPhotonCollection = cms.string(''),
    pfCandidates = cms.InputTag("particleFlowTmp"),
    pfECALClusIsolation = cms.InputTag("photonEcalPFClusterIsolationProducer"),
    pfEgammaCandidates = cms.InputTag("particleFlowEGamma"),
    pfHCALClusIsolation = cms.InputTag("photonHcalPFClusterIsolationProducer"),
    pfIsolCfg = cms.PSet(
        chargedHadronIso = cms.InputTag("photonIDValueMaps","phoChargedIsolation"),
        chargedHadronPFPVIso = cms.InputTag("egmPhotonIsolationCITK","h+-DR030-"),
        chargedHadronWorstVtxGeomVetoIso = cms.InputTag("photonIDValueMaps","phoWorstChargedIsolationConeVeto"),
        chargedHadronWorstVtxIso = cms.InputTag("photonIDValueMaps","phoWorstChargedIsolation"),
        neutralHadronIso = cms.InputTag("photonIDValueMaps","phoNeutralHadronIsolation"),
        photonIso = cms.InputTag("photonIDValueMaps","phoPhotonIsolation")
    ),
    photonEcalEnergyCorrFunction = cms.string('EcalClusterEnergyCorrectionObjectSpecific'),
    photonProducer = cms.InputTag("gedPhotonsTmp"),
    posCalcParameters = cms.PSet(
        LogWeighted = cms.bool(True),
        T0_barl = cms.double(7.4),
        T0_endc = cms.double(6.3),
        T0_endcPresh = cms.double(3.6),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    posCalc_logweight = cms.bool(True),
    posCalc_t0_barl = cms.double(7.7),
    posCalc_t0_endc = cms.double(6.3),
    posCalc_t0_endcPresh = cms.double(3.6),
    posCalc_w0 = cms.double(4.2),
    posCalc_x0 = cms.double(0.89),
    preshowerHits = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    primaryVertexProducer = cms.InputTag("offlinePrimaryVerticesWithBS"),
    reconstructionStep = cms.string('final'),
    regressionConfig = cms.PSet(
        eleRegs = cms.PSet(
            ecalOnlyMean = cms.PSet(
                ebHighEtForestName = cms.string('electron_eb_ECALonly'),
                ebLowEtForestName = cms.string('electron_eb_ecalOnly_1To300_0p2To2_mean'),
                eeHighEtForestName = cms.string('electron_ee_ECALonly'),
                eeLowEtForestName = cms.string('electron_ee_ecalOnly_1To300_0p2To2_mean'),
                forceHighEnergyTrainingIfSaturated = cms.bool(True),
                lowEtHighEtBoundary = cms.double(999999.0),
                rangeMaxHighEt = cms.double(3.0),
                rangeMaxLowEt = cms.double(2.0),
                rangeMinHighEt = cms.double(-1.0),
                rangeMinLowEt = cms.double(0.2)
            ),
            ecalOnlySigma = cms.PSet(
                ebHighEtForestName = cms.string('electron_eb_ECALonly_var'),
                ebLowEtForestName = cms.string('electron_eb_ecalOnly_1To300_0p0002To0p5_sigma'),
                eeHighEtForestName = cms.string('electron_ee_ECALonly_var'),
                eeLowEtForestName = cms.string('electron_ee_ecalOnly_1To300_0p0002To0p5_sigma'),
                forceHighEnergyTrainingIfSaturated = cms.bool(True),
                lowEtHighEtBoundary = cms.double(999999.0),
                rangeMaxHighEt = cms.double(0.5),
                rangeMaxLowEt = cms.double(0.5),
                rangeMinHighEt = cms.double(0.0002),
                rangeMinLowEt = cms.double(0.0002)
            ),
            epComb = cms.PSet(
                ecalTrkRegressionConfig = cms.PSet(
                    ebHighEtForestName = cms.string('electron_eb_ecalTrk_1To300_0p2To2_mean'),
                    ebLowEtForestName = cms.string('electron_eb_ecalTrk_1To300_0p2To2_mean'),
                    eeHighEtForestName = cms.string('electron_ee_ecalTrk_1To300_0p2To2_mean'),
                    eeLowEtForestName = cms.string('electron_ee_ecalTrk_1To300_0p2To2_mean'),
                    forceHighEnergyTrainingIfSaturated = cms.bool(False),
                    lowEtHighEtBoundary = cms.double(999999.0),
                    rangeMaxHighEt = cms.double(2.0),
                    rangeMaxLowEt = cms.double(2.0),
                    rangeMinHighEt = cms.double(0.2),
                    rangeMinLowEt = cms.double(0.2)
                ),
                ecalTrkRegressionUncertConfig = cms.PSet(
                    ebHighEtForestName = cms.string('electron_eb_ecalTrk_1To300_0p0002To0p5_sigma'),
                    ebLowEtForestName = cms.string('electron_eb_ecalTrk_1To300_0p0002To0p5_sigma'),
                    eeHighEtForestName = cms.string('electron_ee_ecalTrk_1To300_0p0002To0p5_sigma'),
                    eeLowEtForestName = cms.string('electron_ee_ecalTrk_1To300_0p0002To0p5_sigma'),
                    forceHighEnergyTrainingIfSaturated = cms.bool(False),
                    lowEtHighEtBoundary = cms.double(999999.0),
                    rangeMaxHighEt = cms.double(0.5),
                    rangeMaxLowEt = cms.double(0.5),
                    rangeMinHighEt = cms.double(0.0002),
                    rangeMinLowEt = cms.double(0.0002)
                ),
                maxEPDiffInSigmaForComb = cms.double(15.0),
                maxEcalEnergyForComb = cms.double(200.0),
                maxRelTrkMomErrForComb = cms.double(10.0),
                minEOverPForComb = cms.double(0.025)
            )
        ),
        maxRawEnergyForLowPtEBSigma = cms.double(-1),
        maxRawEnergyForLowPtEESigma = cms.double(1200.0),
        modifierName = cms.string('EGRegressionModifierV3'),
        phoRegs = cms.PSet(
            ecalOnlyMean = cms.PSet(
                ebHighEtForestName = cms.string('photon_eb_ECALonly'),
                ebLowEtForestName = cms.string('photon_eb_ecalOnly_5To300_0p2To2_mean'),
                eeHighEtForestName = cms.string('photon_ee_ECALonly'),
                eeLowEtForestName = cms.string('photon_ee_ecalOnly_5To300_0p2To2_mean'),
                forceHighEnergyTrainingIfSaturated = cms.bool(True),
                lowEtHighEtBoundary = cms.double(999999.0),
                rangeMaxHighEt = cms.double(3.0),
                rangeMaxLowEt = cms.double(2.0),
                rangeMinHighEt = cms.double(-1.0),
                rangeMinLowEt = cms.double(0.2)
            ),
            ecalOnlySigma = cms.PSet(
                ebHighEtForestName = cms.string('photon_eb_ECALonly_var'),
                ebLowEtForestName = cms.string('photon_eb_ecalOnly_5To300_0p0002To0p5_sigma'),
                eeHighEtForestName = cms.string('photon_ee_ECALonly_var'),
                eeLowEtForestName = cms.string('photon_ee_ecalOnly_5To300_0p0002To0p5_sigma'),
                forceHighEnergyTrainingIfSaturated = cms.bool(True),
                lowEtHighEtBoundary = cms.double(999999.0),
                rangeMaxHighEt = cms.double(0.5),
                rangeMaxLowEt = cms.double(0.5),
                rangeMinHighEt = cms.double(0.0002),
                rangeMinLowEt = cms.double(0.0002)
            )
        ),
        rhoTag = cms.InputTag("fixedGridRhoFastjetAllTmp"),
        useClosestToCentreSeedCrysDef = cms.bool(False)
    ),
    regressionWeightsFromDB = cms.bool(True),
    runMIPTagger = cms.bool(True),
    sigmaIetaIetaCutBarrel = cms.double(999999999),
    sigmaIetaIetaCutEndcap = cms.double(999999999),
    superClusterCrackEnergyCorrFunction = cms.string('EcalClusterCrackCorrection'),
    superClusterEnergyCorrFunction = cms.string('EcalClusterEnergyCorrection'),
    superClusterEnergyErrorFunction = cms.string('EcalClusterEnergyUncertainty'),
    trackPtSumHollowConeBarrel = cms.double(999999999),
    trackPtSumHollowConeEndcap = cms.double(999999999),
    trackPtSumSolidConeBarrel = cms.double(999999999),
    trackPtSumSolidConeEndcap = cms.double(999999999),
    usePrimaryVertex = cms.bool(True),
    useRegression = cms.bool(True),
    valueMapPhotons = cms.string('valMapPFEgammaCandToPhoton')
)


process.gedPhotonsTmp = cms.EDProducer("GEDPhotonProducer",
    PFIsolationCalculatorSet = cms.PSet(
        ComponentName = cms.string('pfIsolationCalculator'),
        applyDzDxyVeto = cms.bool(True),
        applyMissHitPhVeto = cms.bool(False),
        applyPFPUVeto = cms.bool(True),
        applyVeto = cms.bool(True),
        checkClosestZVertex = cms.bool(True),
        coneDR = cms.double(0.3),
        deltaRVetoBarrel = cms.bool(True),
        deltaRVetoBarrelCharged = cms.double(0.02),
        deltaRVetoBarrelNeutrals = cms.double(-1.0),
        deltaRVetoBarrelPhotons = cms.double(-1.0),
        deltaRVetoEndcap = cms.bool(True),
        deltaRVetoEndcapCharged = cms.double(0.02),
        deltaRVetoEndcapNeutrals = cms.double(-1.0),
        deltaRVetoEndcapPhotons = cms.double(0.07),
        numberOfCrystalEndcapPhotons = cms.double(4.0),
        numberOfRings = cms.int32(1),
        particleType = cms.int32(1),
        rectangleDeltaEtaVetoBarrelCharged = cms.double(-1),
        rectangleDeltaEtaVetoBarrelNeutrals = cms.double(-1),
        rectangleDeltaEtaVetoBarrelPhotons = cms.double(0.015),
        rectangleDeltaEtaVetoEndcapCharged = cms.double(-1),
        rectangleDeltaEtaVetoEndcapNeutrals = cms.double(-1),
        rectangleDeltaEtaVetoEndcapPhotons = cms.double(-1),
        rectangleDeltaPhiVetoBarrelCharged = cms.double(-1),
        rectangleDeltaPhiVetoBarrelNeutrals = cms.double(-1),
        rectangleDeltaPhiVetoBarrelPhotons = cms.double(1.0),
        rectangleDeltaPhiVetoEndcapCharged = cms.double(-1),
        rectangleDeltaPhiVetoEndcapNeutrals = cms.double(-1),
        rectangleDeltaPhiVetoEndcapPhotons = cms.double(-1),
        rectangleVetoBarrel = cms.bool(True),
        rectangleVetoEndcap = cms.bool(False),
        ringSize = cms.double(0.3),
        useCrystalSize = cms.bool(True)
    ),
    RecHitFlagToBeExcludedEB = cms.vstring(
        'kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'
    ),
    RecHitFlagToBeExcludedEE = cms.vstring(
        'kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'
    ),
    RecHitSeverityToBeExcludedEB = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    RecHitSeverityToBeExcludedEE = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    barrelEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    candidateP4type = cms.string('fromEcalEnergy'),
    checkHcalStatus = cms.bool(True),
    ecalRecHitSumEtOffsetBarrel = cms.double(999999999),
    ecalRecHitSumEtOffsetEndcap = cms.double(999999999),
    ecalRecHitSumEtSlopeBarrel = cms.double(0.0),
    ecalRecHitSumEtSlopeEndcap = cms.double(0.0),
    endcapEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    energyRegressionWeightsDBLocation = cms.string('wgbrph'),
    energyRegressionWeightsFileLocation = cms.string('/afs/cern.ch/user/b/bendavid/cmspublic/regweights/gbrph.root'),
    hOverEConeSize = cms.double(0.15),
    hbheInstance = cms.string(''),
    hbheModule = cms.string('hbhereco'),
    hcalTowerSumEtOffsetBarrel = cms.double(999999999),
    hcalTowerSumEtOffsetEndcap = cms.double(999999999),
    hcalTowerSumEtSlopeBarrel = cms.double(0.0),
    hcalTowerSumEtSlopeEndcap = cms.double(0.0),
    hcalTowers = cms.InputTag("towerMaker"),
    highEt = cms.double(100.0),
    isolationSumsCalculatorSet = cms.PSet(
        ComponentName = cms.string('isolationSumsCalculator'),
        EcalRecHitEtaSliceA_Barrel = cms.double(2.5),
        EcalRecHitEtaSliceA_Endcap = cms.double(2.5),
        EcalRecHitEtaSliceB_Barrel = cms.double(2.5),
        EcalRecHitEtaSliceB_Endcap = cms.double(2.5),
        EcalRecHitInnerRadiusA_Barrel = cms.double(3.5),
        EcalRecHitInnerRadiusA_Endcap = cms.double(3.5),
        EcalRecHitInnerRadiusB_Barrel = cms.double(3.5),
        EcalRecHitInnerRadiusB_Endcap = cms.double(3.5),
        EcalRecHitOuterRadiusA_Barrel = cms.double(0.4),
        EcalRecHitOuterRadiusA_Endcap = cms.double(0.4),
        EcalRecHitOuterRadiusB_Barrel = cms.double(0.3),
        EcalRecHitOuterRadiusB_Endcap = cms.double(0.3),
        EcalRecHitThreshEA_Barrel = cms.double(0.095),
        EcalRecHitThreshEA_Endcap = cms.double(0.0),
        EcalRecHitThreshEB_Barrel = cms.double(0.095),
        EcalRecHitThreshEB_Endcap = cms.double(0.0),
        EcalRecHitThreshEtA_Barrel = cms.double(0.0),
        EcalRecHitThreshEtA_Endcap = cms.double(0.11),
        EcalRecHitThreshEtB_Barrel = cms.double(0.0),
        EcalRecHitThreshEtB_Endcap = cms.double(0.11),
        HcalDepth1TowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalDepth1TowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalDepth1TowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalDepth1TowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalDepth1TowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth1TowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalDepth1TowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalDepth1TowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalDepth1TowerThreshEA_Barrel = cms.double(0.0),
        HcalDepth1TowerThreshEA_Endcap = cms.double(0.0),
        HcalDepth1TowerThreshEB_Barrel = cms.double(0.0),
        HcalDepth1TowerThreshEB_Endcap = cms.double(0.0),
        HcalDepth2TowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalDepth2TowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalDepth2TowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalDepth2TowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalDepth2TowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth2TowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalDepth2TowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalDepth2TowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalDepth2TowerThreshEA_Barrel = cms.double(0.0),
        HcalDepth2TowerThreshEA_Endcap = cms.double(0.0),
        HcalDepth2TowerThreshEB_Barrel = cms.double(0.0),
        HcalDepth2TowerThreshEB_Endcap = cms.double(0.0),
        HcalRecHitCollection = cms.InputTag("towerMaker"),
        HcalTowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalTowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalTowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalTowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalTowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalTowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalTowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalTowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalTowerThreshEA_Barrel = cms.double(0.0),
        HcalTowerThreshEA_Endcap = cms.double(0.0),
        HcalTowerThreshEB_Barrel = cms.double(0.0),
        HcalTowerThreshEB_Endcap = cms.double(0.0),
        TrackConeInnerRadiusA_Barrel = cms.double(0.04),
        TrackConeInnerRadiusA_Endcap = cms.double(0.04),
        TrackConeInnerRadiusB_Barrel = cms.double(0.04),
        TrackConeInnerRadiusB_Endcap = cms.double(0.04),
        TrackConeOuterRadiusA_Barrel = cms.double(0.4),
        TrackConeOuterRadiusA_Endcap = cms.double(0.4),
        TrackConeOuterRadiusB_Barrel = cms.double(0.3),
        TrackConeOuterRadiusB_Endcap = cms.double(0.3),
        barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        beamSpotProducer = cms.InputTag("offlineBeamSpot"),
        endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        isolationtrackEtaSliceA_Barrel = cms.double(0.015),
        isolationtrackEtaSliceA_Endcap = cms.double(0.015),
        isolationtrackEtaSliceB_Barrel = cms.double(0.015),
        isolationtrackEtaSliceB_Endcap = cms.double(0.015),
        isolationtrackThresholdA_Barrel = cms.double(0.0),
        isolationtrackThresholdA_Endcap = cms.double(0.0),
        isolationtrackThresholdB_Barrel = cms.double(0.0),
        isolationtrackThresholdB_Endcap = cms.double(0.0),
        longImpactParameterA_Barrel = cms.double(0.2),
        longImpactParameterA_Endcap = cms.double(0.2),
        longImpactParameterB_Barrel = cms.double(0.2),
        longImpactParameterB_Endcap = cms.double(0.2),
        moduleEtaBoundary = cms.vdouble(
            0.0, 0.02, 0.43, 0.46, 0.78, 
            0.81, 1.13, 1.15, 1.45, 1.58
        ),
        modulePhiBoundary = cms.double(0.0087),
        trackProducer = cms.InputTag("generalTracks"),
        transImpactParameterA_Barrel = cms.double(0.1),
        transImpactParameterA_Endcap = cms.double(0.1),
        transImpactParameterB_Barrel = cms.double(0.1),
        transImpactParameterB_Endcap = cms.double(0.1),
        useNumCrystals = cms.bool(True),
        vetoClustered = cms.bool(False)
    ),
    maxHoverEBarrel = cms.double(0.5),
    maxHoverEEndcap = cms.double(0.5),
    minR9Barrel = cms.double(0.94),
    minR9Endcap = cms.double(0.95),
    minSCEtBarrel = cms.double(10.0),
    minSCEtEndcap = cms.double(10.0),
    mipVariableSet = cms.PSet(
        ComponentName = cms.string('mipVariable'),
        HaloDiscThreshold = cms.double(70.0),
        ResidualWidth = cms.double(0.23),
        XRangeFit = cms.double(180.0),
        YRangeFit = cms.double(7.0),
        barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE")
    ),
    nTrackHollowConeBarrel = cms.double(999999999),
    nTrackHollowConeEndcap = cms.double(999999999),
    nTrackSolidConeBarrel = cms.double(999999999),
    nTrackSolidConeEndcap = cms.double(999999999),
    outputPhotonCollection = cms.string(''),
    pfCandidates = cms.InputTag("particleFlowTmp"),
    pfEgammaCandidates = cms.InputTag("particleFlowEGamma"),
    photonEcalEnergyCorrFunction = cms.string('EcalClusterEnergyCorrectionObjectSpecific'),
    photonProducer = cms.InputTag("gedPhotonCore"),
    posCalcParameters = cms.PSet(
        LogWeighted = cms.bool(True),
        T0_barl = cms.double(7.4),
        T0_endc = cms.double(6.3),
        T0_endcPresh = cms.double(3.6),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    posCalc_logweight = cms.bool(True),
    posCalc_t0_barl = cms.double(7.7),
    posCalc_t0_endc = cms.double(6.3),
    posCalc_t0_endcPresh = cms.double(3.6),
    posCalc_w0 = cms.double(4.2),
    posCalc_x0 = cms.double(0.89),
    preshowerHits = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    primaryVertexProducer = cms.InputTag("offlinePrimaryVerticesWithBS"),
    reconstructionStep = cms.string('tmp'),
    regressionWeightsFromDB = cms.bool(True),
    runMIPTagger = cms.bool(True),
    sigmaIetaIetaCutBarrel = cms.double(999999999),
    sigmaIetaIetaCutEndcap = cms.double(999999999),
    superClusterCrackEnergyCorrFunction = cms.string('EcalClusterCrackCorrection'),
    superClusterEnergyCorrFunction = cms.string('EcalClusterEnergyCorrection'),
    superClusterEnergyErrorFunction = cms.string('EcalClusterEnergyUncertainty'),
    trackPtSumHollowConeBarrel = cms.double(999999999),
    trackPtSumHollowConeEndcap = cms.double(999999999),
    trackPtSumSolidConeBarrel = cms.double(999999999),
    trackPtSumSolidConeEndcap = cms.double(999999999),
    usePrimaryVertex = cms.bool(True),
    useRegression = cms.bool(True),
    valueMapPhotons = cms.string('valMapPFEgammaCandToPhoton')
)


process.gemRecHits = cms.EDProducer("GEMRecHitProducer",
    applyMasking = cms.bool(False),
    deadFile = cms.optional.FileInPath,
    gemDigiLabel = cms.InputTag("muonGEMDigis"),
    maskFile = cms.optional.FileInPath,
    mightGet = cms.optional.untracked.vstring,
    recAlgo = cms.string('GEMRecHitStandardAlgo'),
    recAlgoConfig = cms.PSet(

    )
)


process.gemRecHitsDef = cms.EDProducer("GEMRecHitProducer",
    applyMasking = cms.bool(False),
    deadFile = cms.optional.FileInPath,
    gemDigiLabel = cms.InputTag("muonGEMDigis"),
    maskFile = cms.optional.FileInPath,
    mightGet = cms.optional.untracked.vstring,
    recAlgo = cms.string('GEMRecHitStandardAlgo'),
    recAlgoConfig = cms.PSet(

    )
)


process.gemSegments = cms.EDProducer("GEMSegmentProducer",
    algo_name = cms.string('GEMSegmentAlgorithm'),
    algo_pset = cms.PSet(
        GEMDebug = cms.untracked.bool(True),
        clusterOnlySameBXRecHits = cms.bool(True),
        dEtaChainBoxMax = cms.double(0.05),
        dPhiChainBoxMax = cms.double(0.02),
        dXclusBoxMax = cms.double(1.0),
        dYclusBoxMax = cms.double(5.0),
        maxRecHitsInCluster = cms.int32(4),
        minHitsPerSegment = cms.uint32(2),
        preClustering = cms.bool(True),
        preClusteringUseChaining = cms.bool(True)
    ),
    gemRecHitLabel = cms.InputTag("gemRecHits")
)


process.generalConversionStepConversionTrackMerger = cms.EDProducer("ConversionTrackMerger",
    ShareFrac = cms.double(0.19),
    TrackProducer1 = cms.InputTag("generalConversionTrackProducer"),
    TrackProducer2 = cms.InputTag("conversionStepConversionTrackProducer"),
    allowFirstHitShare = cms.bool(True),
    arbitratedEcalSeededPreferCollection = cms.int32(-1),
    arbitratedMergedEcalGeneralPreferCollection = cms.int32(3),
    arbitratedMergedPreferCollection = cms.int32(3),
    checkCharge = cms.bool(True),
    minProb = cms.double(1e-06),
    outputPreferCollection = cms.int32(-1),
    trackerOnlyPreferCollection = cms.int32(-1)
)


process.generalConversionTrackProducer = cms.EDProducer("ConversionTrackProducer",
    TrackProducer = cms.string('generalTracks'),
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    filterOnConvTrackHyp = cms.bool(True),
    minConvRadius = cms.double(2.0),
    setArbitratedEcalSeeded = cms.bool(False),
    setArbitratedMerged = cms.bool(True),
    setArbitratedMergedEcalGeneral = cms.bool(True),
    setIsGsfTrackOpen = cms.bool(False),
    setTrackerOnly = cms.bool(True),
    useTrajectory = cms.bool(False)
)


process.generalConversionTrackProducerTmp = cms.EDProducer("ConversionTrackProducer",
    TrackProducer = cms.string('generalTracksBeforeMixing'),
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    filterOnConvTrackHyp = cms.bool(True),
    minConvRadius = cms.double(2.0),
    setArbitratedEcalSeeded = cms.bool(False),
    setArbitratedMerged = cms.bool(True),
    setArbitratedMergedEcalGeneral = cms.bool(True),
    setIsGsfTrackOpen = cms.bool(False),
    setTrackerOnly = cms.bool(True),
    useTrajectory = cms.bool(False)
)


process.generalInOutOutInConversionTrackMerger = cms.EDProducer("ConversionTrackMerger",
    ShareFrac = cms.double(0.19),
    TrackProducer1 = cms.InputTag("inOutOutInConversionTrackMerger"),
    TrackProducer2 = cms.InputTag("generalConversionStepConversionTrackMerger"),
    allowFirstHitShare = cms.bool(True),
    arbitratedEcalSeededPreferCollection = cms.int32(-1),
    arbitratedMergedEcalGeneralPreferCollection = cms.int32(2),
    arbitratedMergedPreferCollection = cms.int32(3),
    checkCharge = cms.bool(True),
    minProb = cms.double(1e-06),
    outputPreferCollection = cms.int32(-1),
    trackerOnlyPreferCollection = cms.int32(-1)
)


process.generalInOutOutInOldEGConversionTrackMerger = cms.EDProducer("ConversionTrackMerger",
    ShareFrac = cms.double(0.19),
    TrackProducer1 = cms.InputTag("inOutOutInOldEGConversionTrackMerger"),
    TrackProducer2 = cms.InputTag("generalConversionStepConversionTrackMerger"),
    allowFirstHitShare = cms.bool(True),
    arbitratedEcalSeededPreferCollection = cms.int32(-1),
    arbitratedMergedEcalGeneralPreferCollection = cms.int32(2),
    arbitratedMergedPreferCollection = cms.int32(3),
    checkCharge = cms.bool(True),
    minProb = cms.double(1e-06),
    outputPreferCollection = cms.int32(-1),
    trackerOnlyPreferCollection = cms.int32(-1)
)


process.generalTracks = cms.EDProducer("DuplicateListMerger",
    candidateComponents = cms.InputTag("duplicateTrackCandidates","candidateMap"),
    candidateSource = cms.InputTag("duplicateTrackCandidates","candidates"),
    copyExtras = cms.untracked.bool(True),
    copyTrajectories = cms.untracked.bool(False),
    diffHitsCut = cms.int32(5),
    mergedMVAVals = cms.InputTag("duplicateTrackClassifier","MVAValues"),
    mergedSource = cms.InputTag("mergedDuplicateTracks"),
    mightGet = cms.optional.untracked.vstring,
    originalMVAVals = cms.InputTag("preDuplicateMergingGeneralTracks","MVAValues"),
    originalSource = cms.InputTag("preDuplicateMergingGeneralTracks"),
    trackAlgoPriorityOrder = cms.string('trackAlgoPriorityOrder')
)


process.generalV0Candidates = cms.EDProducer("V0Producer",
    beamSpot = cms.InputTag("offlineBeamSpot"),
    cosThetaXYCut = cms.double(0.998),
    cosThetaXYZCut = cms.double(-2.0),
    doKShorts = cms.bool(True),
    doLambdas = cms.bool(True),
    innerHitPosCut = cms.double(4.0),
    kShortMassCut = cms.double(0.07),
    lambdaMassCut = cms.double(0.05),
    mPiPiCut = cms.double(0.6),
    tkChi2Cut = cms.double(10.0),
    tkDCACut = cms.double(1.0),
    tkIPSigXYCut = cms.double(2.0),
    tkIPSigZCut = cms.double(-1.0),
    tkNHitsCut = cms.int32(3),
    tkPtCut = cms.double(0.35),
    trackRecoAlgorithm = cms.InputTag("generalTracks"),
    useRefTracks = cms.bool(True),
    useVertex = cms.bool(False),
    vertexFitter = cms.bool(True),
    vertices = cms.InputTag("offlinePrimaryVertices"),
    vtxChi2Cut = cms.double(6.63),
    vtxDecaySigXYCut = cms.double(15.0),
    vtxDecaySigXYZCut = cms.double(-1.0)
)


process.ghostTrackBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('ghostTrackComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("ghostTrackVertexTagInfos"))
)


process.ghostTrackVertexTagInfos = cms.EDProducer("SecondaryVertexProducer",
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    constraint = cms.string('BeamSpot'),
    extSVCollection = cms.InputTag("secondaryVertices"),
    extSVDeltaRToJet = cms.double(0.3),
    minimumTrackWeight = cms.double(0.5),
    trackIPTagInfos = cms.InputTag("impactParameterTagInfos"),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(2),
        ptMin = cms.double(1.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(8),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip3dSig'),
    useExternalSV = cms.bool(False),
    usePVError = cms.bool(True),
    vertexCuts = cms.PSet(
        distSig2dMax = cms.double(99999.9),
        distSig2dMin = cms.double(3.0),
        distSig3dMax = cms.double(99999.9),
        distSig3dMin = cms.double(-99999.9),
        distVal2dMax = cms.double(2.5),
        distVal2dMin = cms.double(0.01),
        distVal3dMax = cms.double(99999.9),
        distVal3dMin = cms.double(-99999.9),
        fracPV = cms.double(0.65),
        massMax = cms.double(6.5),
        maxDeltaRToJetAxis = cms.double(0.4),
        minimumTrackWeight = cms.double(0.5),
        multiplicityMin = cms.uint32(1),
        useTrackWeights = cms.bool(True),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        )
    ),
    vertexReco = cms.PSet(
        finder = cms.string('gtvr'),
        fitType = cms.string('RefitGhostTrackWithVertices'),
        maxFitChi2 = cms.double(10.0),
        mergeThreshold = cms.double(3.0),
        primcut = cms.double(2.0),
        seccut = cms.double(4.0)
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    )
)


process.glbTrackQual = cms.EDProducer("GlobalTrackQualityProducer",
    BaseLabel = cms.string('GLB'),
    GlobalMuonTrackMatcher = cms.PSet(
        Chi2Cut_1 = cms.double(50.0),
        Chi2Cut_2 = cms.double(50.0),
        Chi2Cut_3 = cms.double(200.0),
        DeltaDCut_1 = cms.double(2.5),
        DeltaDCut_2 = cms.double(10.0),
        DeltaDCut_3 = cms.double(15.0),
        DeltaRCut_1 = cms.double(0.1),
        DeltaRCut_2 = cms.double(0.2),
        DeltaRCut_3 = cms.double(1.0),
        Eta_threshold = cms.double(1.2),
        LocChi2Cut = cms.double(20.0),
        MinP = cms.double(2.5),
        MinPt = cms.double(1.0),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        Pt_threshold1 = cms.double(0.0),
        Pt_threshold2 = cms.double(999999999.0),
        Quality_1 = cms.double(20.0),
        Quality_2 = cms.double(15.0),
        Quality_3 = cms.double(7.0)
    ),
    InputCollection = cms.InputTag("globalMuons"),
    InputLinksCollection = cms.InputTag("globalMuons"),
    MaxChi2 = cms.double(100000.0),
    RefitterParameters = cms.PSet(
        CSCRecSegmentLabel = cms.InputTag("csc2DRecHits"),
        Chi2CutCSC = cms.double(1.0),
        Chi2CutDT = cms.double(30.0),
        Chi2CutGEM = cms.double(1.0),
        Chi2CutME0 = cms.double(1.0),
        Chi2CutRPC = cms.double(1.0),
        Chi2ProbabilityCut = cms.double(30.0),
        DTRecSegmentLabel = cms.InputTag("dt1DRecHits"),
        DYTselector = cms.int32(1),
        DYTthrs = cms.vint32(10, 10),
        DYTthrsParameters = cms.PSet(
            eta0p8 = cms.vdouble(1, -0.919853, 0.990742),
            eta1p2 = cms.vdouble(1, -0.897354, 0.987738),
            eta2p0 = cms.vdouble(4, -0.986855, 0.998516),
            eta2p2 = cms.vdouble(1, -0.940342, 0.992955),
            eta2p4 = cms.vdouble(1, -0.947633, 0.993762)
        ),
        DYTupdator = cms.bool(True),
        DYTuseAPE = cms.bool(False),
        DYTuseThrsParametrization = cms.bool(True),
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        GEMRecHitLabel = cms.InputTag("gemRecHits"),
        HitThreshold = cms.int32(1),
        ME0RecHitLabel = cms.InputTag("me0Segments"),
        MuonHitsOption = cms.int32(1),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        PropDirForCosmics = cms.bool(False),
        Propagator = cms.string('SmartPropagatorAnyRK'),
        PtCut = cms.double(1.0),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
        RefitDirection = cms.string('insideOut'),
        RefitFlag = cms.bool(True),
        RefitRPCHits = cms.bool(True),
        SkipStation = cms.int32(-1),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        TrackerSkipSection = cms.int32(-1),
        TrackerSkipSystem = cms.int32(-1)
    ),
    ServiceParameters = cms.PSet(
        CSCLayers = cms.untracked.bool(True),
        GEMLayers = cms.untracked.bool(True),
        ME0Layers = cms.bool(True),
        Propagators = cms.untracked.vstring(
            'SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'
        ),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    nSigma = cms.double(3.0)
)


process.globalCombinedSeeds = cms.EDProducer("SeedCombiner",
    seedCollections = cms.VInputTag(cms.InputTag("globalSeedsFromTripletsWithVertices"), cms.InputTag("globalSeedsFromPairsWithVertices"))
)


process.globalMixedSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(1000000),
        MaxNumberOfPixelClusters = cms.uint32(100000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        doClusterCheck = cms.bool(True)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitPairGenerator'),
        SeedingLayers = cms.InputTag("MixedLayerPairs"),
        maxElement = cms.uint32(1000000)
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot'),
        RegionPSet = cms.PSet(
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originHalfLength = cms.double(21.2),
            originRadius = cms.double(0.2),
            precise = cms.bool(True),
            ptMin = cms.double(0.9),
            useMultipleScattering = cms.bool(False)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterialParabolicMf')
    )
)


process.globalMuons = cms.EDProducer("GlobalMuonProducer",
    GLBTrajBuilderParameters = cms.PSet(
        GlbRefitterParameters = cms.PSet(
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            Chi2CutCSC = cms.double(150.0),
            Chi2CutDT = cms.double(10.0),
            Chi2CutGEM = cms.double(1.0),
            Chi2CutME0 = cms.double(1.0),
            Chi2CutRPC = cms.double(1.0),
            Chi2ProbabilityCut = cms.double(30.0),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            DYTselector = cms.int32(1),
            DYTthrs = cms.vint32(20, 30),
            DYTthrsParameters = cms.PSet(
                eta0p8 = cms.vdouble(1, -0.919853, 0.990742),
                eta1p2 = cms.vdouble(1, -0.897354, 0.987738),
                eta2p0 = cms.vdouble(4, -0.986855, 0.998516),
                eta2p2 = cms.vdouble(1, -0.940342, 0.992955),
                eta2p4 = cms.vdouble(1, -0.947633, 0.993762)
            ),
            DYTupdator = cms.bool(False),
            DYTuseAPE = cms.bool(False),
            DYTuseThrsParametrization = cms.bool(True),
            DoPredictionsOnly = cms.bool(False),
            Fitter = cms.string('GlbMuKFFitter'),
            GEMRecHitLabel = cms.InputTag("gemRecHits"),
            HitThreshold = cms.int32(1),
            ME0RecHitLabel = cms.InputTag("me0Segments"),
            MuonHitsOption = cms.int32(1),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            PropDirForCosmics = cms.bool(False),
            Propagator = cms.string('SmartPropagatorAnyRK'),
            PtCut = cms.double(1.0),
            RefitDirection = cms.string('insideOut'),
            RefitFlag = cms.bool(True),
            RefitRPCHits = cms.bool(True),
            SkipStation = cms.int32(-1),
            TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
            TrackerSkipSection = cms.int32(-1),
            TrackerSkipSystem = cms.int32(-1)
        ),
        GlobalMuonTrackMatcher = cms.PSet(
            Chi2Cut_1 = cms.double(50.0),
            Chi2Cut_2 = cms.double(50.0),
            Chi2Cut_3 = cms.double(200.0),
            DeltaDCut_1 = cms.double(2.5),
            DeltaDCut_2 = cms.double(10.0),
            DeltaDCut_3 = cms.double(15.0),
            DeltaRCut_1 = cms.double(0.1),
            DeltaRCut_2 = cms.double(0.2),
            DeltaRCut_3 = cms.double(1.0),
            Eta_threshold = cms.double(1.2),
            LocChi2Cut = cms.double(20.0),
            MinP = cms.double(2.5),
            MinPt = cms.double(1.0),
            Propagator = cms.string('SmartPropagatorRK'),
            Pt_threshold1 = cms.double(0.0),
            Pt_threshold2 = cms.double(999999999.0),
            Quality_1 = cms.double(20.0),
            Quality_2 = cms.double(15.0),
            Quality_3 = cms.double(7.0)
        ),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        MuonTrackingRegionBuilder = cms.PSet(
            DeltaEta = cms.double(0.2),
            DeltaPhi = cms.double(0.2),
            DeltaR = cms.double(0.2),
            DeltaZ = cms.double(15.9),
            EtaR_UpperLimit_Par1 = cms.double(0.25),
            EtaR_UpperLimit_Par2 = cms.double(0.15),
            Eta_fixed = cms.bool(False),
            Eta_min = cms.double(0.1),
            MeasurementTrackerName = cms.InputTag(""),
            OnDemand = cms.int32(-1),
            PhiR_UpperLimit_Par1 = cms.double(0.6),
            PhiR_UpperLimit_Par2 = cms.double(0.2),
            Phi_fixed = cms.bool(False),
            Phi_min = cms.double(0.1),
            Pt_fixed = cms.bool(False),
            Pt_min = cms.double(1.5),
            Rescale_Dz = cms.double(3.0),
            Rescale_eta = cms.double(3.0),
            Rescale_phi = cms.double(3.0),
            UseVertex = cms.bool(False),
            Z_fixed = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            input = cms.InputTag(""),
            maxRegions = cms.int32(1),
            precise = cms.bool(True),
            vertexCollection = cms.InputTag("")
        ),
        PCut = cms.double(2.5),
        PtCut = cms.double(1.0),
        RefitRPCHits = cms.bool(True),
        ScaleTECxFactor = cms.double(-1.0),
        ScaleTECyFactor = cms.double(-1.0),
        TrackTransformer = cms.PSet(
            DoPredictionsOnly = cms.bool(False),
            Fitter = cms.string('KFFitterForRefitInsideOut'),
            MTDRecHitBuilder = cms.string('MTDRecHitBuilder'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            Propagator = cms.string('SmartPropagatorAnyRK'),
            RefitDirection = cms.string('alongMomentum'),
            RefitRPCHits = cms.bool(True),
            Smoother = cms.string('KFSmootherForRefitInsideOut'),
            TrackerRecHitBuilder = cms.string('WithAngleAndTemplate')
        ),
        TrackerPropagator = cms.string('SteppingHelixPropagatorAny'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate')
    ),
    MuonCollectionLabel = cms.InputTag("standAloneMuons","UpdatedAtVtx"),
    ServiceParameters = cms.PSet(
        CSCLayers = cms.untracked.bool(True),
        GEMLayers = cms.untracked.bool(True),
        ME0Layers = cms.bool(True),
        Propagators = cms.untracked.vstring(
            'SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'
        ),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(True),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    ),
    TrackerCollectionLabel = cms.InputTag("generalTracks")
)


process.globalPixelLessSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(5000),
        MaxNumberOfPixelClusters = cms.uint32(100000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        doClusterCheck = cms.bool(True)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitPairGenerator'),
        SeedingLayers = cms.InputTag("pixelLessLayerPairs4PixelLessTracking"),
        maxElement = cms.uint32(100000)
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot'),
        RegionPSet = cms.PSet(
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originHalfLength = cms.double(40),
            originRadius = cms.double(0.2),
            precise = cms.bool(True),
            ptMin = cms.double(0.9),
            useMultipleScattering = cms.bool(False)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterialParabolicMf')
    )
)


process.globalPixelSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(1000000),
        MaxNumberOfPixelClusters = cms.uint32(100000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        doClusterCheck = cms.bool(True)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitPairGenerator'),
        SeedingLayers = cms.InputTag("PixelLayerPairs")
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot'),
        RegionPSet = cms.PSet(
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originHalfLength = cms.double(21.2),
            originRadius = cms.double(0.2),
            precise = cms.bool(True),
            ptMin = cms.double(0.9),
            useMultipleScattering = cms.bool(False)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterialParabolicMf')
    )
)


process.globalSETMuons = cms.EDProducer("GlobalMuonProducer",
    GLBTrajBuilderParameters = cms.PSet(
        GlbRefitterParameters = cms.PSet(
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            Chi2CutCSC = cms.double(150.0),
            Chi2CutDT = cms.double(10.0),
            Chi2CutGEM = cms.double(1.0),
            Chi2CutME0 = cms.double(1.0),
            Chi2CutRPC = cms.double(1.0),
            Chi2ProbabilityCut = cms.double(30.0),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            DYTselector = cms.int32(1),
            DYTthrs = cms.vint32(20, 30),
            DYTthrsParameters = cms.PSet(
                eta0p8 = cms.vdouble(1, -0.919853, 0.990742),
                eta1p2 = cms.vdouble(1, -0.897354, 0.987738),
                eta2p0 = cms.vdouble(4, -0.986855, 0.998516),
                eta2p2 = cms.vdouble(1, -0.940342, 0.992955),
                eta2p4 = cms.vdouble(1, -0.947633, 0.993762)
            ),
            DYTupdator = cms.bool(False),
            DYTuseAPE = cms.bool(False),
            DYTuseThrsParametrization = cms.bool(True),
            DoPredictionsOnly = cms.bool(False),
            Fitter = cms.string('GlbMuKFFitter'),
            GEMRecHitLabel = cms.InputTag("gemRecHits"),
            HitThreshold = cms.int32(1),
            ME0RecHitLabel = cms.InputTag("me0Segments"),
            MuonHitsOption = cms.int32(1),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            PropDirForCosmics = cms.bool(False),
            Propagator = cms.string('SmartPropagatorAnyRK'),
            PtCut = cms.double(1.0),
            RefitDirection = cms.string('insideOut'),
            RefitFlag = cms.bool(True),
            RefitRPCHits = cms.bool(True),
            SkipStation = cms.int32(-1),
            TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
            TrackerSkipSection = cms.int32(-1),
            TrackerSkipSystem = cms.int32(-1)
        ),
        GlobalMuonTrackMatcher = cms.PSet(
            Chi2Cut_1 = cms.double(50.0),
            Chi2Cut_2 = cms.double(50.0),
            Chi2Cut_3 = cms.double(200.0),
            DeltaDCut_1 = cms.double(2.5),
            DeltaDCut_2 = cms.double(10.0),
            DeltaDCut_3 = cms.double(15.0),
            DeltaRCut_1 = cms.double(0.1),
            DeltaRCut_2 = cms.double(0.2),
            DeltaRCut_3 = cms.double(1.0),
            Eta_threshold = cms.double(1.2),
            LocChi2Cut = cms.double(20.0),
            MinP = cms.double(2.5),
            MinPt = cms.double(1.0),
            Propagator = cms.string('SmartPropagatorRK'),
            Pt_threshold1 = cms.double(0.0),
            Pt_threshold2 = cms.double(999999999.0),
            Quality_1 = cms.double(20.0),
            Quality_2 = cms.double(15.0),
            Quality_3 = cms.double(7.0)
        ),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        MuonTrackingRegionBuilder = cms.PSet(
            DeltaEta = cms.double(0.2),
            DeltaPhi = cms.double(0.2),
            DeltaR = cms.double(0.2),
            DeltaZ = cms.double(15.9),
            EtaR_UpperLimit_Par1 = cms.double(0.25),
            EtaR_UpperLimit_Par2 = cms.double(0.15),
            Eta_fixed = cms.bool(False),
            Eta_min = cms.double(0.1),
            MeasurementTrackerName = cms.InputTag(""),
            OnDemand = cms.int32(-1),
            PhiR_UpperLimit_Par1 = cms.double(0.6),
            PhiR_UpperLimit_Par2 = cms.double(0.2),
            Phi_fixed = cms.bool(False),
            Phi_min = cms.double(0.1),
            Pt_fixed = cms.bool(False),
            Pt_min = cms.double(1.5),
            Rescale_Dz = cms.double(3.0),
            Rescale_eta = cms.double(3.0),
            Rescale_phi = cms.double(3.0),
            UseVertex = cms.bool(False),
            Z_fixed = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            input = cms.InputTag(""),
            maxRegions = cms.int32(1),
            precise = cms.bool(True),
            vertexCollection = cms.InputTag("")
        ),
        PCut = cms.double(2.5),
        PtCut = cms.double(1.0),
        RefitRPCHits = cms.bool(True),
        ScaleTECxFactor = cms.double(-1.0),
        ScaleTECyFactor = cms.double(-1.0),
        TrackTransformer = cms.PSet(
            DoPredictionsOnly = cms.bool(False),
            Fitter = cms.string('KFFitterForRefitInsideOut'),
            MTDRecHitBuilder = cms.string('MTDRecHitBuilder'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            Propagator = cms.string('SmartPropagatorAnyRK'),
            RefitDirection = cms.string('alongMomentum'),
            RefitRPCHits = cms.bool(True),
            Smoother = cms.string('KFSmootherForRefitInsideOut'),
            TrackerRecHitBuilder = cms.string('WithAngleAndTemplate')
        ),
        TrackerPropagator = cms.string('SteppingHelixPropagatorAny'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate')
    ),
    MuonCollectionLabel = cms.InputTag("standAloneSETMuons","UpdatedAtVtx"),
    ServiceParameters = cms.PSet(
        CSCLayers = cms.untracked.bool(True),
        GEMLayers = cms.untracked.bool(True),
        ME0Layers = cms.bool(True),
        Propagators = cms.untracked.vstring(
            'SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'
        ),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(True),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    ),
    TrackerCollectionLabel = cms.InputTag("generalTracks")
)


process.globalSeedsFromPairsWithVertices = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(1000000),
        MaxNumberOfPixelClusters = cms.uint32(100000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        doClusterCheck = cms.bool(True)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitPairGenerator'),
        SeedingLayers = cms.InputTag("MixedLayerPairs"),
        maxElement = cms.uint32(1000000)
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalTrackingRegionWithVerticesProducer'),
        RegionPSet = cms.PSet(
            VertexCollection = cms.InputTag("firstStepPrimaryVertices"),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            fixedError = cms.double(0.2),
            halfLengthScaling4BigEvts = cms.bool(False),
            maxNVertices = cms.int32(-1),
            maxPtMin = cms.double(1000),
            minHalfLength = cms.double(0),
            minOriginR = cms.double(0),
            nSigmaZ = cms.double(4),
            originRScaling4BigEvts = cms.bool(False),
            originRadius = cms.double(0.2),
            pixelClustersForScaling = cms.InputTag("siPixelClusters"),
            precise = cms.bool(True),
            ptMin = cms.double(0.9),
            ptMinScaling4BigEvts = cms.bool(False),
            scalingEndNPix = cms.double(1),
            scalingStartNPix = cms.double(0),
            sigmaZVertex = cms.double(3),
            useFakeVertices = cms.bool(False),
            useFixedError = cms.bool(True),
            useFoundVertices = cms.bool(True),
            useMultipleScattering = cms.bool(False)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterialParabolicMf')
    )
)


process.globalSeedsFromTriplets = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(1000000),
        MaxNumberOfPixelClusters = cms.uint32(100000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        doClusterCheck = cms.bool(True)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            ComponentName = cms.string('PixelTripletHLTGenerator'),
            SeedComparitorPSet = cms.PSet(
                ComponentName = cms.string('none')
            ),
            extraHitRPhitolerance = cms.double(0.016),
            extraHitRZtolerance = cms.double(0.02),
            maxElement = cms.uint32(1000000),
            phiPreFiltering = cms.double(0.3),
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            useMultScattering = cms.bool(True)
        ),
        SeedingLayers = cms.InputTag("PixelLayerTriplets")
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot'),
        RegionPSet = cms.PSet(
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originHalfLength = cms.double(21.2),
            originRadius = cms.double(0.2),
            precise = cms.bool(True),
            ptMin = cms.double(0.9),
            useMultipleScattering = cms.bool(False)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterialParabolicMf')
    )
)


process.globalTrackingRegionWithVertices = cms.EDProducer("GlobalTrackingRegionWithVerticesEDProducer",
    RegionPSet = cms.PSet(
        VertexCollection = cms.InputTag("firstStepPrimaryVertices"),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        fixedError = cms.double(0.2),
        halfLengthScaling4BigEvts = cms.bool(False),
        maxNVertices = cms.int32(-1),
        maxPtMin = cms.double(1000),
        minHalfLength = cms.double(0),
        minOriginR = cms.double(0),
        nSigmaZ = cms.double(4),
        originRScaling4BigEvts = cms.bool(False),
        originRadius = cms.double(0.2),
        pixelClustersForScaling = cms.InputTag("siPixelClusters"),
        precise = cms.bool(True),
        ptMin = cms.double(0.9),
        ptMinScaling4BigEvts = cms.bool(False),
        scalingEndNPix = cms.double(1),
        scalingStartNPix = cms.double(0),
        sigmaZVertex = cms.double(3),
        useFakeVertices = cms.bool(False),
        useFixedError = cms.bool(True),
        useFoundVertices = cms.bool(True),
        useMultipleScattering = cms.bool(False)
    ),
    mightGet = cms.optional.untracked.vstring
)


process.gmtStage2Digis = cms.EDProducer("L1TRawToDigi",
    FedIds = cms.vint32(1402),
    InputLabel = cms.InputTag("rawDataCollector"),
    MinFeds = cms.uint32(1),
    Setup = cms.string('stage2::GMTSetup')
)


process.gsfConversionTrackProducer = cms.EDProducer("ConversionTrackProducer",
    TrackProducer = cms.string('electronGsfTracks'),
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    filterOnConvTrackHyp = cms.bool(False),
    minConvRadius = cms.double(2.0),
    setArbitratedEcalSeeded = cms.bool(False),
    setArbitratedMerged = cms.bool(True),
    setArbitratedMergedEcalGeneral = cms.bool(False),
    setIsGsfTrackOpen = cms.bool(False),
    setTrackerOnly = cms.bool(False),
    useTrajectory = cms.bool(False)
)


process.gsfElectronProducer = cms.EDProducer("GsfElectronProducer",
    ElecMVAFilesString = cms.vstring(
        'RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_10_17Feb2011.weights.xml', 
        'RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_12_17Feb2011.weights.xml', 
        'RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_20_17Feb2011.weights.xml', 
        'RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_22_17Feb2011.weights.xml'
    ),
    MaxElePtForOnlyMVA = cms.double(50),
    PreSelectMVA = cms.double(-0.1),
    SoftElecMVAFilesString = cms.vstring('RecoEgamma/ElectronIdentification/data/TMVA_BDTSoftElectrons_7Feb2014.weights.xml'),
    ambClustersOverlapStrategy = cms.uint32(1),
    ambSortingStrategy = cms.uint32(1),
    applyAmbResolution = cms.bool(False),
    applyPreselection = cms.bool(False),
    barrelRecHitCollectionTag = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    checkHcalStatus = cms.bool(True),
    combinationRegressionWeightFile = cms.vstring(),
    combinationRegressionWeightLabels = cms.vstring(),
    combinationWeightsFromDB = cms.bool(True),
    conversionsTag = cms.InputTag("allConversions"),
    crackCorrectionFunction = cms.string('EcalClusterCrackCorrection'),
    ctfTracksCheck = cms.bool(True),
    ctfTracksTag = cms.InputTag("generalTracks"),
    eMinBarrel = cms.double(0.095),
    eMinEndcaps = cms.double(0),
    ecalDrivenEcalEnergyFromClassBasedParameterization = cms.bool(True),
    ecalDrivenEcalErrorFromClassBasedParameterization = cms.bool(True),
    ecalRefinedRegressionWeightFiles = cms.vstring(),
    ecalRefinedRegressionWeightLabels = cms.vstring(),
    ecalWeightsFromDB = cms.bool(True),
    egmPFCandidatesTag = cms.InputTag("particleFlowEGamma"),
    endcapRecHitCollectionTag = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    etMinBarrel = cms.double(0),
    etMinEndcaps = cms.double(0.11),
    etMinHcal = cms.double(0),
    fillConvVtxFitProb = cms.bool(True),
    gsfElectronCoresTag = cms.InputTag("ecalDrivenGsfElectronCores"),
    gsfPfRecTracksTag = cms.InputTag("pfTrackElec"),
    hcalTowers = cms.InputTag("towerMaker"),
    ignoreNotPreselected = cms.bool(True),
    intRadiusEcalBarrel = cms.double(3),
    intRadiusEcalEndcaps = cms.double(3),
    intRadiusHcal = cms.double(0.15),
    jurassicWidth = cms.double(1.5),
    mightGet = cms.optional.untracked.vstring,
    preselection = cms.PSet(
        hOverEConeSize = cms.double(0.15),
        hOverEPtMin = cms.double(0),
        isBarrel = cms.bool(False),
        isEndcaps = cms.bool(False),
        isFiducial = cms.bool(False),
        maxDeltaEtaBarrel = cms.double(0.02),
        maxDeltaEtaEndcaps = cms.double(0.02),
        maxDeltaPhiBarrel = cms.double(0.15),
        maxDeltaPhiEndcaps = cms.double(0.15),
        maxEOverPBarrel = cms.double(999999999),
        maxEOverPEndcaps = cms.double(999999999),
        maxFbremBarrel = cms.double(999999999),
        maxFbremEndcaps = cms.double(999999999),
        maxHBarrelCone = cms.double(0),
        maxHBarrelTower = cms.double(0),
        maxHEndcapsCone = cms.double(0),
        maxHEndcapsTower = cms.double(0),
        maxHOverEBarrelCone = cms.double(0.15),
        maxHOverEBarrelTower = cms.double(0.15),
        maxHOverEEndcapsCone = cms.double(0.15),
        maxHOverEEndcapsTower = cms.double(0.15),
        maxSigmaIetaIetaBarrel = cms.double(999999999),
        maxSigmaIetaIetaEndcaps = cms.double(999999999),
        maxTIP = cms.double(999999999),
        minEOverPBarrel = cms.double(0),
        minEOverPEndcaps = cms.double(0),
        minMVA = cms.double(-0.4),
        minMvaByPassForIsolated = cms.double(-0.4),
        minSCEtBarrel = cms.double(4),
        minSCEtEndcaps = cms.double(4),
        seedFromTEC = cms.bool(True)
    ),
    pureTrackerDrivenEcalErrorFromSimpleParameterization = cms.bool(True),
    recHitFlagsToBeExcludedBarrel = cms.required.vstring,
    recHitFlagsToBeExcludedEndcaps = cms.required.vstring,
    recHitSeverityToBeExcludedBarrel = cms.required.vstring,
    recHitSeverityToBeExcludedEndcaps = cms.required.vstring,
    resetMvaValuesUsingPFCandidates = cms.bool(False),
    seedsTag = cms.InputTag("ecalDrivenElectronSeeds"),
    superClusterErrorFunction = cms.string('EcalClusterEnergyUncertaintyObjectSpecific'),
    trkIsol03Cfg = cms.PSet(
        barrelCuts = cms.PSet(
            algosToReject = cms.required.vstring,
            allowedQualities = cms.required.vstring,
            maxDPtPt = cms.double(-1),
            maxDR = cms.double(0.3),
            maxDZ = cms.double(0.1),
            minDEta = cms.double(0.005),
            minDR = cms.double(0),
            minHits = cms.int32(8),
            minPixelHits = cms.int32(1),
            minPt = cms.double(1)
        ),
        endcapCuts = cms.PSet(
            algosToReject = cms.required.vstring,
            allowedQualities = cms.required.vstring,
            maxDPtPt = cms.double(-1),
            maxDR = cms.double(0.3),
            maxDZ = cms.double(0.1),
            minDEta = cms.double(0.005),
            minDR = cms.double(0),
            minHits = cms.int32(8),
            minPixelHits = cms.int32(1),
            minPt = cms.double(1)
        )
    ),
    trkIsol04Cfg = cms.PSet(
        barrelCuts = cms.PSet(
            algosToReject = cms.required.vstring,
            allowedQualities = cms.required.vstring,
            maxDPtPt = cms.double(-1),
            maxDR = cms.double(0.3),
            maxDZ = cms.double(0.1),
            minDEta = cms.double(0.005),
            minDR = cms.double(0),
            minHits = cms.int32(8),
            minPixelHits = cms.int32(1),
            minPt = cms.double(1)
        ),
        endcapCuts = cms.PSet(
            algosToReject = cms.required.vstring,
            allowedQualities = cms.required.vstring,
            maxDPtPt = cms.double(-1),
            maxDR = cms.double(0.3),
            maxDZ = cms.double(0.1),
            minDEta = cms.double(0.005),
            minDR = cms.double(0),
            minHits = cms.int32(8),
            minPixelHits = cms.int32(1),
            minPt = cms.double(1)
        )
    ),
    trkIsolHEEP03Cfg = cms.PSet(
        barrelCuts = cms.PSet(
            algosToReject = cms.required.vstring,
            allowedQualities = cms.required.vstring,
            maxDPtPt = cms.double(-1),
            maxDR = cms.double(0.3),
            maxDZ = cms.double(0.1),
            minDEta = cms.double(0.005),
            minDR = cms.double(0),
            minHits = cms.int32(8),
            minPixelHits = cms.int32(1),
            minPt = cms.double(1)
        ),
        endcapCuts = cms.PSet(
            algosToReject = cms.required.vstring,
            allowedQualities = cms.required.vstring,
            maxDPtPt = cms.double(-1),
            maxDR = cms.double(0.3),
            maxDZ = cms.double(0.1),
            minDEta = cms.double(0.005),
            minDR = cms.double(0),
            minHits = cms.int32(8),
            minPixelHits = cms.int32(1),
            minPt = cms.double(1)
        )
    ),
    trkIsolHEEP04Cfg = cms.PSet(
        barrelCuts = cms.PSet(
            algosToReject = cms.required.vstring,
            allowedQualities = cms.required.vstring,
            maxDPtPt = cms.double(-1),
            maxDR = cms.double(0.3),
            maxDZ = cms.double(0.1),
            minDEta = cms.double(0.005),
            minDR = cms.double(0),
            minHits = cms.int32(8),
            minPixelHits = cms.int32(1),
            minPt = cms.double(1)
        ),
        endcapCuts = cms.PSet(
            algosToReject = cms.required.vstring,
            allowedQualities = cms.required.vstring,
            maxDPtPt = cms.double(-1),
            maxDR = cms.double(0.3),
            maxDZ = cms.double(0.1),
            minDEta = cms.double(0.005),
            minDR = cms.double(0),
            minHits = cms.int32(8),
            minPixelHits = cms.int32(1),
            minPt = cms.double(1)
        )
    ),
    useCombinationRegression = cms.bool(False),
    useDefaultEnergyCorrection = cms.bool(True),
    useEcalRegression = cms.bool(False),
    useGsfPfRecTracks = cms.bool(True),
    useNumCrystals = cms.bool(True),
    vetoClustered = cms.bool(False),
    vtxTag = cms.InputTag("offlinePrimaryVertices")
)


process.gsfGeneralConversionTrackMerger = cms.EDProducer("ConversionTrackMerger",
    ShareFrac = cms.double(0.19),
    TrackProducer1 = cms.InputTag("generalConversionTrackProducer"),
    TrackProducer2 = cms.InputTag("gsfConversionTrackProducer"),
    allowFirstHitShare = cms.bool(True),
    arbitratedEcalSeededPreferCollection = cms.int32(-1),
    arbitratedMergedEcalGeneralPreferCollection = cms.int32(-1),
    arbitratedMergedPreferCollection = cms.int32(2),
    checkCharge = cms.bool(True),
    minProb = cms.double(1e-06),
    outputPreferCollection = cms.int32(-1),
    trackerOnlyPreferCollection = cms.int32(-1)
)


process.gsfGeneralInOutOutInConversionTrackMerger = cms.EDProducer("ConversionTrackMerger",
    ShareFrac = cms.double(0.19),
    TrackProducer1 = cms.InputTag("generalInOutOutInConversionTrackMerger"),
    TrackProducer2 = cms.InputTag("gsfConversionTrackProducer"),
    allowFirstHitShare = cms.bool(True),
    arbitratedEcalSeededPreferCollection = cms.int32(-1),
    arbitratedMergedEcalGeneralPreferCollection = cms.int32(-1),
    arbitratedMergedPreferCollection = cms.int32(2),
    checkCharge = cms.bool(True),
    minProb = cms.double(1e-06),
    outputPreferCollection = cms.int32(-1),
    trackerOnlyPreferCollection = cms.int32(-1)
)


process.gsfGeneralInOutOutInOldEGConversionTrackMerger = cms.EDProducer("ConversionTrackMerger",
    ShareFrac = cms.double(0.19),
    TrackProducer1 = cms.InputTag("generalInOutOutInOldEGConversionTrackMerger"),
    TrackProducer2 = cms.InputTag("gsfConversionTrackProducer"),
    allowFirstHitShare = cms.bool(True),
    arbitratedEcalSeededPreferCollection = cms.int32(-1),
    arbitratedMergedEcalGeneralPreferCollection = cms.int32(-1),
    arbitratedMergedPreferCollection = cms.int32(2),
    checkCharge = cms.bool(True),
    minProb = cms.double(1e-06),
    outputPreferCollection = cms.int32(-1),
    trackerOnlyPreferCollection = cms.int32(-1)
)


process.gsfTracksOpenConversionTrackProducer = cms.EDProducer("ConversionTrackProducer",
    TrackProducer = cms.string('lowPtGsfEleGsfTracks'),
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    filterOnConvTrackHyp = cms.bool(False),
    minConvRadius = cms.double(2.0),
    setArbitratedEcalSeeded = cms.bool(False),
    setArbitratedMerged = cms.bool(False),
    setArbitratedMergedEcalGeneral = cms.bool(False),
    setIsGsfTrackOpen = cms.bool(True),
    setTrackerOnly = cms.bool(False),
    useTrajectory = cms.bool(False)
)


process.gsfTracksOpenConversions = cms.EDProducer("ConversionProducer",
    AlgorithmName = cms.string('trackerOnly'),
    AllowD0 = cms.bool(True),
    AllowDeltaCot = cms.bool(True),
    AllowDeltaPhi = cms.bool(False),
    AllowMinApproach = cms.bool(True),
    AllowOppCharge = cms.bool(True),
    AllowRightBC = cms.bool(False),
    AllowSingleLeg = cms.bool(False),
    AllowTrackBC = cms.bool(False),
    AllowVertex = cms.bool(True),
    DeltaCotTheta = cms.double(0.1),
    DeltaPhi = cms.double(0.2),
    EnergyBC = cms.double(0.3),
    EnergyTotalBC = cms.double(0.3),
    HalfwayEta = cms.double(0.1),
    MaxChi2Left = cms.double(10.0),
    MaxChi2Right = cms.double(10.0),
    MinApproachHigh = cms.double(1.0),
    MinApproachLow = cms.double(-0.25),
    MinHitsLeft = cms.int32(4),
    MinHitsRight = cms.int32(2),
    UsePvtx = cms.bool(True),
    bcBarrelCollection = cms.InputTag("particleFlowSuperClusterECAL","particleFlowBasicClusterECALBarrel"),
    bcEndcapCollection = cms.InputTag("particleFlowSuperClusterECAL","particleFlowBasicClusterECALEndcap"),
    bypassPreselEcal = cms.bool(False),
    bypassPreselEcalEcal = cms.bool(True),
    bypassPreselGsf = cms.bool(False),
    convertedPhotonCollection = cms.string('gsfTracksOpenConversions'),
    d0 = cms.double(0.0),
    dEtaTrackBC = cms.double(0.2),
    dEtacutForSCmatching = cms.double(0.03),
    dPhiTrackBC = cms.double(1.0),
    dPhicutForSCmatching = cms.double(0.05),
    deltaEta = cms.double(0.4),
    dz = cms.double(5.0),
    maxDelta = cms.double(0.01),
    maxNbrOfIterations = cms.int32(40),
    maxNumOfTrackInPU = cms.int32(999999),
    maxReducedChiSq = cms.double(225.0),
    maxTrackRho = cms.double(120.0),
    maxTrackZ = cms.double(300.0),
    minChiSqImprovement = cms.double(50.0),
    minSCEt = cms.double(10.0),
    primaryVertexProducer = cms.InputTag("offlinePrimaryVerticesWithBS"),
    rCut = cms.double(1.5),
    scBarrelProducer = cms.InputTag("particleFlowSuperClusterECAL","particleFlowSuperClusterECALBarrel"),
    scEndcapProducer = cms.InputTag("particleFlowSuperClusterECAL","particleFlowSuperClusterECALEndcapWithPreshower"),
    src = cms.InputTag("gsfTracksOpenConversionTrackProducer"),
    vtxChi2 = cms.double(0.0005)
)


process.gtDigis = cms.EDProducer("L1GlobalTriggerRawToDigi",
    ActiveBoardsMask = cms.uint32(65535),
    DaqGtFedId = cms.untracked.int32(813),
    DaqGtInputTag = cms.InputTag("rawDataCollector"),
    UnpackBxInEvent = cms.int32(-1),
    Verbosity = cms.untracked.int32(0),
    mightGet = cms.optional.untracked.vstring
)


process.gtEvmDigis = cms.EDProducer("L1GlobalTriggerEvmRawToDigi",
    ActiveBoardsMask = cms.uint32(65535),
    BstLengthBytes = cms.int32(-1),
    EvmGtFedId = cms.untracked.int32(812),
    EvmGtInputTag = cms.InputTag("rawDataCollector"),
    UnpackBxInEvent = cms.int32(-1)
)


process.gtStage2Digis = cms.EDProducer("L1TRawToDigi",
    FedIds = cms.vint32(1404),
    InputLabel = cms.InputTag("rawDataCollector"),
    MinFeds = cms.uint32(1),
    Setup = cms.string('stage2::GTSetup')
)


process.hbhecollapse = cms.EDProducer("HBHEPlan1Combiner",
    algorithm = cms.PSet(
        Class = cms.string('SimplePlan1RechitCombiner')
    ),
    hbheInput = cms.InputTag("hbheprereco"),
    ignorePlan1Topology = cms.bool(False),
    usePlan1Mode = cms.bool(True)
)


process.hbhecollapseMB = cms.EDProducer("HBHEPlan1Combiner",
    algorithm = cms.PSet(
        Class = cms.string('SimplePlan1RechitCombiner')
    ),
    hbheInput = cms.InputTag("hbheprerecoMB"),
    ignorePlan1Topology = cms.bool(False),
    usePlan1Mode = cms.bool(True)
)


process.hbheplan1 = cms.EDProducer("HBHEPlan1Combiner",
    algorithm = cms.PSet(
        Class = cms.string('SimplePlan1RechitCombiner')
    ),
    hbheInput = cms.InputTag("hbheprereco"),
    ignorePlan1Topology = cms.bool(False),
    usePlan1Mode = cms.bool(True)
)


process.hbheplan1MB = cms.EDProducer("HBHEPlan1Combiner",
    algorithm = cms.PSet(
        Class = cms.string('SimplePlan1RechitCombiner')
    ),
    hbheInput = cms.InputTag("hbheprerecoMB"),
    ignorePlan1Topology = cms.bool(False),
    usePlan1Mode = cms.bool(True)
)


process.hbheprereco = cms.EDProducer("HBHEPhase1Reconstructor",
    algoConfigClass = cms.string(''),
    algorithm = cms.PSet(
        Class = cms.string('SimpleHBHEPhase1Algo'),
        activeBXs = cms.vint32(
            -3, -2, -1, 0, 1, 
            2, 3, 4
        ),
        applyLegacyHBMCorrection = cms.bool(False),
        applyPedConstraint = cms.bool(True),
        applyPulseJitter = cms.bool(False),
        applyTimeConstraint = cms.bool(True),
        applyTimeSlew = cms.bool(True),
        applyTimeSlewM3 = cms.bool(True),
        calculateArrivalTime = cms.bool(True),
        chiSqSwitch = cms.double(-1),
        correctForPhaseContainment = cms.bool(True),
        correctionPhaseNS = cms.double(6.0),
        deltaChiSqThresh = cms.double(0.001),
        dynamicPed = cms.bool(False),
        firstSampleShift = cms.int32(0),
        fitTimes = cms.int32(1),
        meanPed = cms.double(0.0),
        meanTime = cms.double(0.0),
        nMaxItersMin = cms.int32(500),
        nMaxItersNNLS = cms.int32(500),
        nnlsThresh = cms.double(1e-11),
        pulseJitter = cms.double(1.0),
        respCorrM3 = cms.double(1.0),
        samplesToAdd = cms.int32(2),
        tdcTimeShift = cms.double(0.0),
        timeMax = cms.double(12.5),
        timeMin = cms.double(-12.5),
        timeSigmaHPD = cms.double(5.0),
        timeSigmaSiPM = cms.double(2.5),
        timeSlewParsType = cms.int32(3),
        ts4Max = cms.vdouble(100.0, 20000.0, 30000),
        ts4Min = cms.double(0.0),
        ts4Thresh = cms.double(0.0),
        ts4chi2 = cms.vdouble(15.0, 15.0),
        useM2 = cms.bool(False),
        useM3 = cms.bool(True),
        useMahi = cms.bool(True)
    ),
    digiLabelQIE11 = cms.InputTag("hcalDigis"),
    digiLabelQIE8 = cms.InputTag("hcalDigis"),
    dropZSmarkedPassed = cms.bool(True),
    flagParametersQIE11 = cms.PSet(

    ),
    flagParametersQIE8 = cms.PSet(
        hitEnergyMinimum = cms.double(1.0),
        hitMultiplicityThreshold = cms.int32(17),
        nominalPedestal = cms.double(3.0),
        pulseShapeParameterSets = cms.VPSet(
            cms.PSet(
                pulseShapeParameters = cms.vdouble(
                    0.0, 100.0, -50.0, 0.0, -15.0, 
                    0.15
                )
            ), 
            cms.PSet(
                pulseShapeParameters = cms.vdouble(
                    100.0, 2000.0, -50.0, 0.0, -5.0, 
                    0.05
                )
            ), 
            cms.PSet(
                pulseShapeParameters = cms.vdouble(
                    2000.0, 1000000.0, -50.0, 0.0, 95.0, 
                    0.0
                )
            ), 
            cms.PSet(
                pulseShapeParameters = cms.vdouble(
                    -1000000.0, 1000000.0, 45.0, 0.1, 1000000.0, 
                    0.0
                )
            )
        )
    ),
    makeRecHits = cms.bool(True),
    processQIE11 = cms.bool(True),
    processQIE8 = cms.bool(True),
    pulseShapeParametersQIE11 = cms.PSet(

    ),
    pulseShapeParametersQIE8 = cms.PSet(
        LeftSlopeCut = cms.vdouble(5, 2.55, 2.55),
        LeftSlopeThreshold = cms.vdouble(250, 500, 100000),
        LinearCut = cms.vdouble(-3, -0.054, -0.054),
        LinearThreshold = cms.vdouble(20, 100, 100000),
        MinimumChargeThreshold = cms.double(20),
        MinimumTS4TS5Threshold = cms.double(100),
        R45MinusOneRange = cms.double(0.2),
        R45PlusOneRange = cms.double(0.2),
        RMS8MaxCut = cms.vdouble(-13.5, -11.5, -11.5),
        RMS8MaxThreshold = cms.vdouble(20, 100, 100000),
        RightSlopeCut = cms.vdouble(5, 4.15, 4.15),
        RightSlopeSmallCut = cms.vdouble(1.08, 1.16, 1.16),
        RightSlopeSmallThreshold = cms.vdouble(150, 200, 100000),
        RightSlopeThreshold = cms.vdouble(250, 400, 100000),
        TS3TS4ChargeThreshold = cms.double(70),
        TS3TS4UpperChargeThreshold = cms.double(20),
        TS4TS5ChargeThreshold = cms.double(70),
        TS4TS5LowerCut = cms.vdouble(
            -1, -0.7, -0.5, -0.4, -0.3, 
            0.1
        ),
        TS4TS5LowerThreshold = cms.vdouble(
            100, 120, 160, 200, 300, 
            500
        ),
        TS4TS5UpperCut = cms.vdouble(1, 0.8, 0.75, 0.72),
        TS4TS5UpperThreshold = cms.vdouble(70, 90, 100, 400),
        TS5TS6ChargeThreshold = cms.double(70),
        TS5TS6UpperChargeThreshold = cms.double(20),
        TriangleIgnoreSlow = cms.bool(False),
        TrianglePeakTS = cms.uint32(10000),
        UseDualFit = cms.bool(True)
    ),
    recoParamsFromDB = cms.bool(True),
    saveDroppedInfos = cms.bool(False),
    saveEffectivePedestal = cms.bool(True),
    saveInfos = cms.bool(False),
    setLegacyFlagsQIE11 = cms.bool(False),
    setLegacyFlagsQIE8 = cms.bool(True),
    setNegativeFlagsQIE11 = cms.bool(False),
    setNegativeFlagsQIE8 = cms.bool(True),
    setNoiseFlagsQIE11 = cms.bool(False),
    setNoiseFlagsQIE8 = cms.bool(True),
    setPulseShapeFlagsQIE11 = cms.bool(False),
    setPulseShapeFlagsQIE8 = cms.bool(True),
    sipmQNTStoSum = cms.int32(3),
    sipmQTSShift = cms.int32(0),
    tsFromDB = cms.bool(False),
    use8ts = cms.bool(True)
)


process.hbheprerecoMB = cms.EDProducer("HBHEPhase1Reconstructor",
    algoConfigClass = cms.string(''),
    algorithm = cms.PSet(
        Class = cms.string('SimpleHBHEPhase1Algo'),
        activeBXs = cms.vint32(
            -3, -2, -1, 0, 1, 
            2, 3, 4
        ),
        applyLegacyHBMCorrection = cms.bool(False),
        applyPedConstraint = cms.bool(True),
        applyPulseJitter = cms.bool(False),
        applyTimeConstraint = cms.bool(True),
        applyTimeSlew = cms.bool(True),
        applyTimeSlewM3 = cms.bool(True),
        calculateArrivalTime = cms.bool(True),
        chiSqSwitch = cms.double(-1),
        correctForPhaseContainment = cms.bool(True),
        correctionPhaseNS = cms.double(6.0),
        deltaChiSqThresh = cms.double(0.001),
        dynamicPed = cms.bool(False),
        firstSampleShift = cms.int32(0),
        fitTimes = cms.int32(1),
        meanPed = cms.double(0.0),
        meanTime = cms.double(0.0),
        nMaxItersMin = cms.int32(500),
        nMaxItersNNLS = cms.int32(500),
        nnlsThresh = cms.double(1e-11),
        pulseJitter = cms.double(1.0),
        respCorrM3 = cms.double(1.0),
        samplesToAdd = cms.int32(2),
        tdcTimeShift = cms.double(0.0),
        timeMax = cms.double(12.5),
        timeMin = cms.double(-12.5),
        timeSigmaHPD = cms.double(5.0),
        timeSigmaSiPM = cms.double(2.5),
        timeSlewParsType = cms.int32(3),
        ts4Max = cms.vdouble(100.0, 20000.0, 30000),
        ts4Min = cms.double(0.0),
        ts4Thresh = cms.double(0.0),
        ts4chi2 = cms.vdouble(15.0, 15.0),
        useM2 = cms.bool(False),
        useM3 = cms.bool(False),
        useMahi = cms.bool(False)
    ),
    digiLabelQIE11 = cms.InputTag("hcalDigis"),
    digiLabelQIE8 = cms.InputTag("hcalDigis"),
    dropZSmarkedPassed = cms.bool(False),
    flagParametersQIE11 = cms.PSet(

    ),
    flagParametersQIE8 = cms.PSet(
        hitEnergyMinimum = cms.double(1.0),
        hitMultiplicityThreshold = cms.int32(17),
        nominalPedestal = cms.double(3.0),
        pulseShapeParameterSets = cms.VPSet(
            cms.PSet(
                pulseShapeParameters = cms.vdouble(
                    0.0, 100.0, -50.0, 0.0, -15.0, 
                    0.15
                )
            ), 
            cms.PSet(
                pulseShapeParameters = cms.vdouble(
                    100.0, 2000.0, -50.0, 0.0, -5.0, 
                    0.05
                )
            ), 
            cms.PSet(
                pulseShapeParameters = cms.vdouble(
                    2000.0, 1000000.0, -50.0, 0.0, 95.0, 
                    0.0
                )
            ), 
            cms.PSet(
                pulseShapeParameters = cms.vdouble(
                    -1000000.0, 1000000.0, 45.0, 0.1, 1000000.0, 
                    0.0
                )
            )
        )
    ),
    makeRecHits = cms.bool(True),
    processQIE11 = cms.bool(True),
    processQIE8 = cms.bool(True),
    pulseShapeParametersQIE11 = cms.PSet(

    ),
    pulseShapeParametersQIE8 = cms.PSet(
        LeftSlopeCut = cms.vdouble(5, 2.55, 2.55),
        LeftSlopeThreshold = cms.vdouble(250, 500, 100000),
        LinearCut = cms.vdouble(-3, -0.054, -0.054),
        LinearThreshold = cms.vdouble(20, 100, 100000),
        MinimumChargeThreshold = cms.double(20),
        MinimumTS4TS5Threshold = cms.double(100),
        R45MinusOneRange = cms.double(0.2),
        R45PlusOneRange = cms.double(0.2),
        RMS8MaxCut = cms.vdouble(-13.5, -11.5, -11.5),
        RMS8MaxThreshold = cms.vdouble(20, 100, 100000),
        RightSlopeCut = cms.vdouble(5, 4.15, 4.15),
        RightSlopeSmallCut = cms.vdouble(1.08, 1.16, 1.16),
        RightSlopeSmallThreshold = cms.vdouble(150, 200, 100000),
        RightSlopeThreshold = cms.vdouble(250, 400, 100000),
        TS3TS4ChargeThreshold = cms.double(70),
        TS3TS4UpperChargeThreshold = cms.double(20),
        TS4TS5ChargeThreshold = cms.double(70),
        TS4TS5LowerCut = cms.vdouble(
            -1, -0.7, -0.5, -0.4, -0.3, 
            0.1
        ),
        TS4TS5LowerThreshold = cms.vdouble(
            100, 120, 160, 200, 300, 
            500
        ),
        TS4TS5UpperCut = cms.vdouble(1, 0.8, 0.75, 0.72),
        TS4TS5UpperThreshold = cms.vdouble(70, 90, 100, 400),
        TS5TS6ChargeThreshold = cms.double(70),
        TS5TS6UpperChargeThreshold = cms.double(20),
        TriangleIgnoreSlow = cms.bool(False),
        TrianglePeakTS = cms.uint32(10000),
        UseDualFit = cms.bool(True)
    ),
    recoParamsFromDB = cms.bool(True),
    saveDroppedInfos = cms.bool(False),
    saveEffectivePedestal = cms.bool(True),
    saveInfos = cms.bool(False),
    setLegacyFlagsQIE11 = cms.bool(False),
    setLegacyFlagsQIE8 = cms.bool(False),
    setNegativeFlagsQIE11 = cms.bool(False),
    setNegativeFlagsQIE8 = cms.bool(False),
    setNoiseFlagsQIE11 = cms.bool(False),
    setNoiseFlagsQIE8 = cms.bool(True),
    setPulseShapeFlagsQIE11 = cms.bool(False),
    setPulseShapeFlagsQIE8 = cms.bool(False),
    sipmQNTStoSum = cms.int32(3),
    sipmQTSShift = cms.int32(0),
    tsFromDB = cms.bool(False),
    use8ts = cms.bool(True)
)


process.hbhereco = cms.EDProducer("HBHEPhase1Reconstructor",
    algoConfigClass = cms.string(''),
    algorithm = cms.PSet(
        Class = cms.string('SimpleHBHEPhase1Algo'),
        activeBXs = cms.vint32(
            -3, -2, -1, 0, 1, 
            2, 3, 4
        ),
        applyLegacyHBMCorrection = cms.bool(False),
        applyPedConstraint = cms.bool(True),
        applyPulseJitter = cms.bool(False),
        applyTimeConstraint = cms.bool(True),
        applyTimeSlew = cms.bool(True),
        applyTimeSlewM3 = cms.bool(True),
        calculateArrivalTime = cms.bool(True),
        chiSqSwitch = cms.double(-1),
        correctForPhaseContainment = cms.bool(True),
        correctionPhaseNS = cms.double(6.0),
        deltaChiSqThresh = cms.double(0.001),
        dynamicPed = cms.bool(False),
        firstSampleShift = cms.int32(0),
        fitTimes = cms.int32(1),
        meanPed = cms.double(0.0),
        meanTime = cms.double(0.0),
        nMaxItersMin = cms.int32(500),
        nMaxItersNNLS = cms.int32(500),
        nnlsThresh = cms.double(1e-11),
        pulseJitter = cms.double(1.0),
        respCorrM3 = cms.double(1.0),
        samplesToAdd = cms.int32(2),
        tdcTimeShift = cms.double(0.0),
        timeMax = cms.double(12.5),
        timeMin = cms.double(-12.5),
        timeSigmaHPD = cms.double(5.0),
        timeSigmaSiPM = cms.double(2.5),
        timeSlewParsType = cms.int32(3),
        ts4Max = cms.vdouble(100.0, 20000.0, 30000),
        ts4Min = cms.double(0.0),
        ts4Thresh = cms.double(0.0),
        ts4chi2 = cms.vdouble(15.0, 15.0),
        useM2 = cms.bool(False),
        useM3 = cms.bool(True),
        useMahi = cms.bool(True)
    ),
    digiLabelQIE11 = cms.InputTag("hcalDigis"),
    digiLabelQIE8 = cms.InputTag("hcalDigis"),
    dropZSmarkedPassed = cms.bool(True),
    flagParametersQIE11 = cms.PSet(

    ),
    flagParametersQIE8 = cms.PSet(
        hitEnergyMinimum = cms.double(1.0),
        hitMultiplicityThreshold = cms.int32(17),
        nominalPedestal = cms.double(3.0),
        pulseShapeParameterSets = cms.VPSet(
            cms.PSet(
                pulseShapeParameters = cms.vdouble(
                    0.0, 100.0, -50.0, 0.0, -15.0, 
                    0.15
                )
            ), 
            cms.PSet(
                pulseShapeParameters = cms.vdouble(
                    100.0, 2000.0, -50.0, 0.0, -5.0, 
                    0.05
                )
            ), 
            cms.PSet(
                pulseShapeParameters = cms.vdouble(
                    2000.0, 1000000.0, -50.0, 0.0, 95.0, 
                    0.0
                )
            ), 
            cms.PSet(
                pulseShapeParameters = cms.vdouble(
                    -1000000.0, 1000000.0, 45.0, 0.1, 1000000.0, 
                    0.0
                )
            )
        )
    ),
    makeRecHits = cms.bool(True),
    processQIE11 = cms.bool(True),
    processQIE8 = cms.bool(True),
    pulseShapeParametersQIE11 = cms.PSet(

    ),
    pulseShapeParametersQIE8 = cms.PSet(
        LeftSlopeCut = cms.vdouble(5, 2.55, 2.55),
        LeftSlopeThreshold = cms.vdouble(250, 500, 100000),
        LinearCut = cms.vdouble(-3, -0.054, -0.054),
        LinearThreshold = cms.vdouble(20, 100, 100000),
        MinimumChargeThreshold = cms.double(20),
        MinimumTS4TS5Threshold = cms.double(100),
        R45MinusOneRange = cms.double(0.2),
        R45PlusOneRange = cms.double(0.2),
        RMS8MaxCut = cms.vdouble(-13.5, -11.5, -11.5),
        RMS8MaxThreshold = cms.vdouble(20, 100, 100000),
        RightSlopeCut = cms.vdouble(5, 4.15, 4.15),
        RightSlopeSmallCut = cms.vdouble(1.08, 1.16, 1.16),
        RightSlopeSmallThreshold = cms.vdouble(150, 200, 100000),
        RightSlopeThreshold = cms.vdouble(250, 400, 100000),
        TS3TS4ChargeThreshold = cms.double(70),
        TS3TS4UpperChargeThreshold = cms.double(20),
        TS4TS5ChargeThreshold = cms.double(70),
        TS4TS5LowerCut = cms.vdouble(
            -1, -0.7, -0.5, -0.4, -0.3, 
            0.1
        ),
        TS4TS5LowerThreshold = cms.vdouble(
            100, 120, 160, 200, 300, 
            500
        ),
        TS4TS5UpperCut = cms.vdouble(1, 0.8, 0.75, 0.72),
        TS4TS5UpperThreshold = cms.vdouble(70, 90, 100, 400),
        TS5TS6ChargeThreshold = cms.double(70),
        TS5TS6UpperChargeThreshold = cms.double(20),
        TriangleIgnoreSlow = cms.bool(False),
        TrianglePeakTS = cms.uint32(10000),
        UseDualFit = cms.bool(True)
    ),
    recoParamsFromDB = cms.bool(True),
    saveDroppedInfos = cms.bool(False),
    saveEffectivePedestal = cms.bool(True),
    saveInfos = cms.bool(False),
    setLegacyFlagsQIE11 = cms.bool(False),
    setLegacyFlagsQIE8 = cms.bool(True),
    setNegativeFlagsQIE11 = cms.bool(False),
    setNegativeFlagsQIE8 = cms.bool(True),
    setNoiseFlagsQIE11 = cms.bool(False),
    setNoiseFlagsQIE8 = cms.bool(True),
    setPulseShapeFlagsQIE11 = cms.bool(False),
    setPulseShapeFlagsQIE8 = cms.bool(True),
    sipmQNTStoSum = cms.int32(3),
    sipmQTSShift = cms.int32(0),
    tsFromDB = cms.bool(False),
    use8ts = cms.bool(True)
)


process.hbherecoMB = cms.EDProducer("HBHEPhase1Reconstructor",
    algoConfigClass = cms.string(''),
    algorithm = cms.PSet(
        Class = cms.string('SimpleHBHEPhase1Algo'),
        activeBXs = cms.vint32(
            -3, -2, -1, 0, 1, 
            2, 3, 4
        ),
        applyLegacyHBMCorrection = cms.bool(False),
        applyPedConstraint = cms.bool(True),
        applyPulseJitter = cms.bool(False),
        applyTimeConstraint = cms.bool(True),
        applyTimeSlew = cms.bool(True),
        applyTimeSlewM3 = cms.bool(True),
        calculateArrivalTime = cms.bool(True),
        chiSqSwitch = cms.double(-1),
        correctForPhaseContainment = cms.bool(True),
        correctionPhaseNS = cms.double(6.0),
        deltaChiSqThresh = cms.double(0.001),
        dynamicPed = cms.bool(False),
        firstSampleShift = cms.int32(0),
        fitTimes = cms.int32(1),
        meanPed = cms.double(0.0),
        meanTime = cms.double(0.0),
        nMaxItersMin = cms.int32(500),
        nMaxItersNNLS = cms.int32(500),
        nnlsThresh = cms.double(1e-11),
        pulseJitter = cms.double(1.0),
        respCorrM3 = cms.double(1.0),
        samplesToAdd = cms.int32(2),
        tdcTimeShift = cms.double(0.0),
        timeMax = cms.double(12.5),
        timeMin = cms.double(-12.5),
        timeSigmaHPD = cms.double(5.0),
        timeSigmaSiPM = cms.double(2.5),
        timeSlewParsType = cms.int32(3),
        ts4Max = cms.vdouble(100.0, 20000.0, 30000),
        ts4Min = cms.double(0.0),
        ts4Thresh = cms.double(0.0),
        ts4chi2 = cms.vdouble(15.0, 15.0),
        useM2 = cms.bool(False),
        useM3 = cms.bool(False),
        useMahi = cms.bool(False)
    ),
    digiLabelQIE11 = cms.InputTag("hcalDigis"),
    digiLabelQIE8 = cms.InputTag("hcalDigis"),
    dropZSmarkedPassed = cms.bool(False),
    flagParametersQIE11 = cms.PSet(

    ),
    flagParametersQIE8 = cms.PSet(
        hitEnergyMinimum = cms.double(1.0),
        hitMultiplicityThreshold = cms.int32(17),
        nominalPedestal = cms.double(3.0),
        pulseShapeParameterSets = cms.VPSet(
            cms.PSet(
                pulseShapeParameters = cms.vdouble(
                    0.0, 100.0, -50.0, 0.0, -15.0, 
                    0.15
                )
            ), 
            cms.PSet(
                pulseShapeParameters = cms.vdouble(
                    100.0, 2000.0, -50.0, 0.0, -5.0, 
                    0.05
                )
            ), 
            cms.PSet(
                pulseShapeParameters = cms.vdouble(
                    2000.0, 1000000.0, -50.0, 0.0, 95.0, 
                    0.0
                )
            ), 
            cms.PSet(
                pulseShapeParameters = cms.vdouble(
                    -1000000.0, 1000000.0, 45.0, 0.1, 1000000.0, 
                    0.0
                )
            )
        )
    ),
    makeRecHits = cms.bool(True),
    processQIE11 = cms.bool(True),
    processQIE8 = cms.bool(True),
    pulseShapeParametersQIE11 = cms.PSet(

    ),
    pulseShapeParametersQIE8 = cms.PSet(
        LeftSlopeCut = cms.vdouble(5, 2.55, 2.55),
        LeftSlopeThreshold = cms.vdouble(250, 500, 100000),
        LinearCut = cms.vdouble(-3, -0.054, -0.054),
        LinearThreshold = cms.vdouble(20, 100, 100000),
        MinimumChargeThreshold = cms.double(20),
        MinimumTS4TS5Threshold = cms.double(100),
        R45MinusOneRange = cms.double(0.2),
        R45PlusOneRange = cms.double(0.2),
        RMS8MaxCut = cms.vdouble(-13.5, -11.5, -11.5),
        RMS8MaxThreshold = cms.vdouble(20, 100, 100000),
        RightSlopeCut = cms.vdouble(5, 4.15, 4.15),
        RightSlopeSmallCut = cms.vdouble(1.08, 1.16, 1.16),
        RightSlopeSmallThreshold = cms.vdouble(150, 200, 100000),
        RightSlopeThreshold = cms.vdouble(250, 400, 100000),
        TS3TS4ChargeThreshold = cms.double(70),
        TS3TS4UpperChargeThreshold = cms.double(20),
        TS4TS5ChargeThreshold = cms.double(70),
        TS4TS5LowerCut = cms.vdouble(
            -1, -0.7, -0.5, -0.4, -0.3, 
            0.1
        ),
        TS4TS5LowerThreshold = cms.vdouble(
            100, 120, 160, 200, 300, 
            500
        ),
        TS4TS5UpperCut = cms.vdouble(1, 0.8, 0.75, 0.72),
        TS4TS5UpperThreshold = cms.vdouble(70, 90, 100, 400),
        TS5TS6ChargeThreshold = cms.double(70),
        TS5TS6UpperChargeThreshold = cms.double(20),
        TriangleIgnoreSlow = cms.bool(False),
        TrianglePeakTS = cms.uint32(10000),
        UseDualFit = cms.bool(True)
    ),
    recoParamsFromDB = cms.bool(True),
    saveDroppedInfos = cms.bool(False),
    saveEffectivePedestal = cms.bool(True),
    saveInfos = cms.bool(False),
    setLegacyFlagsQIE11 = cms.bool(False),
    setLegacyFlagsQIE8 = cms.bool(False),
    setNegativeFlagsQIE11 = cms.bool(False),
    setNegativeFlagsQIE8 = cms.bool(False),
    setNoiseFlagsQIE11 = cms.bool(False),
    setNoiseFlagsQIE8 = cms.bool(True),
    setPulseShapeFlagsQIE11 = cms.bool(False),
    setPulseShapeFlagsQIE8 = cms.bool(False),
    sipmQNTStoSum = cms.int32(3),
    sipmQTSShift = cms.int32(0),
    tsFromDB = cms.bool(False),
    use8ts = cms.bool(True)
)


process.hcalDigis = cms.EDProducer("HcalRawToDigi",
    ComplainEmptyData = cms.untracked.bool(False),
    ElectronicsMap = cms.string(''),
    ExpectedOrbitMessageTime = cms.untracked.int32(-1),
    FEDs = cms.untracked.vint32(),
    FilterDataQuality = cms.bool(True),
    HcalFirstFED = cms.untracked.int32(700),
    InputLabel = cms.InputTag("rawDataCollector"),
    UnpackCalib = cms.untracked.bool(True),
    UnpackTTP = cms.untracked.bool(True),
    UnpackUMNio = cms.untracked.bool(True),
    UnpackZDC = cms.untracked.bool(True),
    UnpackerMode = cms.untracked.int32(0),
    firstSample = cms.int32(0),
    lastSample = cms.int32(9),
    mightGet = cms.optional.untracked.vstring,
    saveQIE10DataNSamples = cms.untracked.vint32(),
    saveQIE10DataTags = cms.untracked.vstring(),
    saveQIE11DataNSamples = cms.untracked.vint32(),
    saveQIE11DataTags = cms.untracked.vstring(),
    silent = cms.untracked.bool(True)
)


process.hcalnoise = cms.EDProducer("HcalNoiseInfoProducer",
    HcalAcceptSeverityLevel = cms.uint32(9),
    HcalRecHitFlagsToBeExcluded = cms.vint32(
        11, 12, 13, 14, 15, 
        27
    ),
    TS4TS5EnergyThreshold = cms.double(50),
    TS4TS5LowerCut = cms.vdouble(
        -1, -0.7, -0.4, -0.2, -0.08, 
        0, 0.1
    ),
    TS4TS5LowerThreshold = cms.vdouble(
        100, 120, 150, 200, 300, 
        400, 500
    ),
    TS4TS5UpperCut = cms.vdouble(1, 0.8, 0.75, 0.72, 0.72),
    TS4TS5UpperThreshold = cms.vdouble(70, 90, 100, 400, 4000),
    calibdigiHBHEthreshold = cms.double(15),
    calibdigiHBHEtimeslices = cms.vint32(3, 4, 5, 6),
    calibdigiHFthreshold = cms.double(-999),
    calibdigiHFtimeslices = cms.vint32(
        0, 1, 2, 3, 4, 
        5, 6, 7, 8, 9
    ),
    caloTowerCollName = cms.string('towerMaker'),
    digiCollName = cms.string('hcalDigis'),
    fillCaloTowers = cms.bool(True),
    fillDigis = cms.bool(True),
    fillLaserMonitor = cms.bool(True),
    fillRecHits = cms.bool(True),
    fillTracks = cms.bool(True),
    hlMaxHPDEMF = cms.double(-9999),
    hlMaxRBXEMF = cms.double(0.01),
    jetCollName = cms.string('ak4PFJets'),
    lMaxHighEHitTime = cms.double(9999),
    lMaxLowEHitTime = cms.double(9999),
    lMaxRatio = cms.double(999),
    lMinHPDHits = cms.int32(17),
    lMinHPDNoOtherHits = cms.int32(10),
    lMinHighEHitTime = cms.double(-9999),
    lMinLowEHitTime = cms.double(-9999),
    lMinRBXHits = cms.int32(999),
    lMinRatio = cms.double(-999),
    lMinZeros = cms.int32(10),
    lRBXRecHitR45Cuts = cms.vdouble(
        0, 1, 0, -0.5, 0, 
        0, 1, -0.5
    ),
    laserMonCBoxList = cms.vint32(
        5, 5, 5, 5, 5, 
        5, 5, 5, 5, 5, 
        5, 5, 5, 5, 5, 
        5, 5, 5, 5, 5, 
        5, 5, 5, 5
    ),
    laserMonIEtaList = cms.vint32(
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0
    ),
    laserMonIPhiList = cms.vint32(
        23, 22, 21, 20, 19, 
        18, 17, 16, 15, 14, 
        13, 12, 11, 10, 9, 
        8, 7, 6, 5, 4, 
        3, 2, 1, 0
    ),
    laserMonSamples = cms.uint32(4),
    laserMonTSEnd = cms.int32(-1),
    laserMonTSStart = cms.int32(0),
    lasermonDigis = cms.InputTag("hcalDigis","LASERMON"),
    maxCaloTowerIEta = cms.int32(20),
    maxNHF = cms.double(0.9),
    maxProblemRBXs = cms.int32(72),
    maxTrackEta = cms.double(2),
    maxjetindex = cms.int32(0),
    mightGet = cms.optional.untracked.vstring,
    minEEMF = cms.double(50),
    minERatio = cms.double(50),
    minEZeros = cms.double(10),
    minHighHitE = cms.double(25),
    minLowHitE = cms.double(10),
    minR45HitE = cms.double(5),
    minRecHitE = cms.double(1.5),
    minTrackPt = cms.double(1),
    pMaxHPDEMF = cms.double(-0.02),
    pMaxHighEHitTime = cms.double(5),
    pMaxLowEHitTime = cms.double(6),
    pMaxRBXEMF = cms.double(0.02),
    pMaxRatio = cms.double(0.85),
    pMinE = cms.double(40),
    pMinEEMF = cms.double(10),
    pMinERatio = cms.double(25),
    pMinEZeros = cms.double(5),
    pMinHPDHits = cms.int32(10),
    pMinHPDNoOtherHits = cms.int32(7),
    pMinHighEHitTime = cms.double(-4),
    pMinLowEHitTime = cms.double(-6),
    pMinRBXHits = cms.int32(20),
    pMinRBXRechitR45Count = cms.int32(1),
    pMinRBXRechitR45EnergyFraction = cms.double(0.1),
    pMinRBXRechitR45Fraction = cms.double(0.1),
    pMinRatio = cms.double(0.75),
    pMinZeros = cms.int32(4),
    recHitCollName = cms.string('hbhereco'),
    tMaxHighEHitTime = cms.double(6),
    tMaxLowEHitTime = cms.double(9999),
    tMaxRatio = cms.double(999),
    tMinHPDHits = cms.int32(16),
    tMinHPDNoOtherHits = cms.int32(9),
    tMinHighEHitTime = cms.double(-7),
    tMinLowEHitTime = cms.double(-9999),
    tMinRBXHits = cms.int32(50),
    tMinRatio = cms.double(-999),
    tMinZeros = cms.int32(8),
    tRBXRecHitR45Cuts = cms.vdouble(
        0, 1, 0, -0.2, 0, 
        0, 1, -0.2
    ),
    trackCollName = cms.string('generalTracks')
)


process.hfEMClusters = cms.EDProducer("HFEMClusterProducer",
    correctionType = cms.int32(1),
    forcePulseFlagMC = cms.bool(False),
    hits = cms.InputTag("hfreco"),
    maximumRenergy = cms.double(50),
    maximumSL = cms.double(98),
    minTowerEnergy = cms.double(4.0),
    seedThresholdET = cms.double(5.0),
    usePMTFlag = cms.bool(True),
    usePulseFlag = cms.bool(True)
)


process.hfRecoEcalCandidate = cms.EDProducer("HFRecoEcalCandidateProducer",
    Correct = cms.bool(True),
    HFDBvector = cms.vdouble(
        1.0, 1.0, 0.899, 0.994, 0.958, 
        0.942, 0.943, 0.96, 0.928, 0.922, 
        0.896, 0.812, 1.0, 1.0, 0.82, 
        0.917, 0.952, 0.929, 0.975, 0.984, 
        1.012, 0.971, 1.016, 0.938, 1.0, 
        1.0, 0.0, 0.0, -0.0036, -0.0087, 
        -0.0049, -0.0161, -0.0072, -0.0033, -0.0066, 
        -0.0062, -0.0045, -0.009, 0.0, 0.0, 
        -0.0056, -0.0024, -0.0064, -0.0063, -0.0078, 
        -0.0079, -0.0075, -0.0074, 0.0009, -0.018, 
        0.0, 0.0, 1.0, 1.0, 1.0565, 
        1.0432, 1.0714, 1.114, 1.0908, 1.0576, 
        1.0821, 1.0807, 1.0885, 1.1783, 1.0, 
        1.0, 1.157, 1.0631, 1.0401, 1.0803, 
        1.0506, 1.0491, 1.0235, 1.0643, 0.991, 
        1.0489, 1.0, 1.0
    ),
    HFDBversion = cms.int32(1),
    VertexCollection = cms.InputTag("offlinePrimaryVertices"),
    e1e9Cut = cms.vdouble(-1, 99),
    e9e25Cut = cms.double(0.94),
    eCOREe9Cut = cms.vdouble(-1, 99),
    eSeLCut = cms.vdouble(-1, 99),
    hfclusters = cms.InputTag("hfEMClusters"),
    intercept2DCut = cms.double(0.815),
    intercept2DSlope = cms.double(0.475)
)


process.hfnoseDigis = cms.EDProducer("HFNoseRawToDigiFake",
    hfnoseDigis = cms.InputTag("simHFNoseUnsuppressedDigis","HFNose"),
    mightGet = cms.optional.untracked.vstring
)


process.hfnoseVFEProducer = cms.EDProducer("HFNoseVFEProducer",
    ProcessorParameters = cms.PSet(
        ProcessorName = cms.string('HGCalVFEProcessorSums'),
        ThicknessCorrections = cms.vdouble(1.66504854369, 1.0, 0.666019417476),
        adcnBits_sc = cms.uint32(10),
        adcnBits_si = cms.uint32(10),
        adcsaturation_sc = cms.double(68.75),
        adcsaturation_si = cms.double(100),
        dEdXweights = cms.vdouble(
            0, 8.894541, 0, 21.875814, 0, 
            21.875814, 0, 21.875814, 0, 21.875814, 
            0, 21.865764, 0, 21.875814, 0, 
            21.876338, 0, 21.876338, 0, 21.876338, 
            0, 21.876338, 0, 21.876338, 0, 
            21.876338, 0, 21.876338, 0, 83.906398, 
            51.444192, 51.444192, 51.444192, 51.444192, 51.444192, 
            51.444192, 51.444192, 51.444192, 51.444192, 51.444192, 
            69.513118, 87.582044, 87.582044, 87.582044, 87.582044, 
            87.582044, 87.214571, 86.888309, 86.92952, 86.92952, 
            86.92952
        ),
        dEdXweightsNose = cms.vdouble(
            0.0, 39.500245, 39.756638, 39.756638, 39.756638, 
            39.756638, 66.020266, 92.283895, 92.283895
        ),
        exponentBits = cms.uint32(4),
        fCperMIP = cms.double(3.43),
        fCperMIPnose = cms.vdouble(1.25, 2.57, 3.88),
        linLSB_sc = cms.double(0.067138671875),
        linLSB_si = cms.double(0.09765625),
        linnBits = cms.uint32(16),
        mantissaBits = cms.uint32(4),
        noiseScintillator = cms.PSet(
            refToPSet_ = cms.string('HGCAL_noise_heback')
        ),
        noiseSilicon = cms.PSet(
            refToPSet_ = cms.string('HGCAL_noise_fC')
        ),
        noiseThreshold = cms.double(3),
        oot_coefficients = cms.vdouble(0.0, 0.0),
        rounding = cms.bool(True),
        scintillatorCellLSB_MIP = cms.double(0.067138671875),
        siliconCellLSB_fC = cms.double(0.09765625),
        tdcOnset_sc = cms.double(55),
        tdcOnset_si = cms.double(60),
        tdcnBits_sc = cms.uint32(12),
        tdcnBits_si = cms.uint32(12),
        tdcsaturation_sc = cms.double(1000),
        tdcsaturation_si = cms.double(10000),
        thickCorr = cms.double(0.77),
        thickCorrNose = cms.vdouble(1.132, 1.092, 1.084)
    ),
    noseDigis = cms.InputTag("simHFNoseUnsuppressedDigis","HFNose")
)


process.hfprereco = cms.EDProducer("HFPreReconstructor",
    digiLabel = cms.InputTag("hcalDigis"),
    dropZSmarkedPassed = cms.bool(False),
    forceSOI = cms.int32(-1),
    soiShift = cms.int32(0),
    sumAllTimeSlices = cms.bool(False),
    tsFromDB = cms.bool(False)
)


process.hfprerecoMB = cms.EDProducer("HFPreReconstructor",
    digiLabel = cms.InputTag("hcalDigis"),
    dropZSmarkedPassed = cms.bool(False),
    forceSOI = cms.int32(-1),
    soiShift = cms.int32(0),
    sumAllTimeSlices = cms.bool(False),
    tsFromDB = cms.bool(False)
)


process.hfreco = cms.EDProducer("HFPhase1Reconstructor",
    HFStripFilter = cms.PSet(
        gap = cms.int32(2),
        lstrips = cms.int32(2),
        maxStripTime = cms.double(10.0),
        maxThreshold = cms.double(100.0),
        seedHitIetaMax = cms.int32(35),
        stripThreshold = cms.double(40.0),
        timeMax = cms.double(6.0),
        verboseLevel = cms.untracked.int32(10),
        wedgeCut = cms.double(0.05)
    ),
    PETstat = cms.PSet(
        HcalAcceptSeverityLevel = cms.int32(9),
        longETParams = cms.vdouble(
            0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0
        ),
        longEnergyParams = cms.vdouble(
            43.5, 45.7, 48.32, 51.36, 54.82, 
            58.7, 63.0, 67.72, 72.86, 78.42, 
            84.4, 90.8, 97.62
        ),
        long_R = cms.vdouble(0.98),
        long_R_29 = cms.vdouble(0.8),
        shortETParams = cms.vdouble(
            0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0
        ),
        shortEnergyParams = cms.vdouble(
            35.1773, 35.37, 35.7933, 36.4472, 37.3317, 
            38.4468, 39.7925, 41.3688, 43.1757, 45.2132, 
            47.4813, 49.98, 52.7093
        ),
        short_R = cms.vdouble(0.8),
        short_R_29 = cms.vdouble(0.8)
    ),
    S8S1stat = cms.PSet(
        HcalAcceptSeverityLevel = cms.int32(9),
        isS8S1 = cms.bool(True),
        longETParams = cms.vdouble(
            0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0
        ),
        longEnergyParams = cms.vdouble(
            40, 100, 100, 100, 100, 
            100, 100, 100, 100, 100, 
            100, 100, 100
        ),
        long_optimumSlope = cms.vdouble(
            0.3, 0.1, 0.1, 0.1, 0.1, 
            0.1, 0.1, 0.1, 0.1, 0.1, 
            0.1, 0.1, 0.1
        ),
        shortETParams = cms.vdouble(
            0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0
        ),
        shortEnergyParams = cms.vdouble(
            40, 100, 100, 100, 100, 
            100, 100, 100, 100, 100, 
            100, 100, 100
        ),
        short_optimumSlope = cms.vdouble(
            0.3, 0.1, 0.1, 0.1, 0.1, 
            0.1, 0.1, 0.1, 0.1, 0.1, 
            0.1, 0.1, 0.1
        )
    ),
    S9S1stat = cms.PSet(
        HcalAcceptSeverityLevel = cms.int32(9),
        isS8S1 = cms.bool(False),
        longETParams = cms.vdouble(
            0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0
        ),
        longEnergyParams = cms.vdouble(
            43.5, 45.7, 48.32, 51.36, 54.82, 
            58.7, 63.0, 67.72, 72.86, 78.42, 
            84.4, 90.8, 97.62
        ),
        long_optimumSlope = cms.vdouble(
            -99999.0, 0.04122625, 0.05251356, 0.0642766, 0.0743328, 
            0.08214848, 0.0622789, 0.0741041, 0.0868186, 0.100422, 
            0.135313, 0.136289, 0.0589927
        ),
        shortETParams = cms.vdouble(
            0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0
        ),
        shortEnergyParams = cms.vdouble(
            35.1773, 35.37, 35.7933, 36.4472, 37.3317, 
            38.4468, 39.7925, 41.3688, 43.1757, 45.2132, 
            47.4813, 49.98, 52.7093
        ),
        short_optimumSlope = cms.vdouble(
            -99999.0, 0.04122625, 0.05251356, 0.0642766, 0.0743328, 
            0.08214848, 0.0622789, 0.0741041, 0.0868186, 0.100422, 
            0.135313, 0.136289, 0.0589927
        )
    ),
    algoConfigClass = cms.string('HFPhase1PMTParams'),
    algorithm = cms.PSet(
        Class = cms.string('HFFlexibleTimeCheck'),
        alwaysCalculateQAsymmetry = cms.bool(False),
        energyWeights = cms.vdouble(
            1.0, 1.0, 1.0, 0.0, 1.0, 
            0.0, 2.0, 0.0, 2.0, 0.0, 
            2.0, 0.0, 1.0, 0.0, 0.0, 
            1.0, 0.0, 1.0, 0.0, 2.0, 
            0.0, 2.0, 0.0, 2.0, 0.0, 
            1.0
        ),
        minChargeForOvershoot = cms.double(10000000000.0),
        minChargeForUndershoot = cms.double(10000000000.0),
        rejectAllFailures = cms.bool(True),
        soiPhase = cms.uint32(1),
        tfallIfNoTDC = cms.double(-101.0),
        timeShift = cms.double(0.0),
        tlimits = cms.vdouble(-1000.0, 1000.0, -1000.0, 1000.0),
        triseIfNoTDC = cms.double(-100.0)
    ),
    checkChannelQualityForDepth3and4 = cms.bool(True),
    inputLabel = cms.InputTag("hfprereco"),
    runHFStripFilter = cms.bool(True),
    setNoiseFlags = cms.bool(True),
    useChannelQualityFromDB = cms.bool(True)
)


process.hfrecoMB = cms.EDProducer("HFPhase1Reconstructor",
    HFStripFilter = cms.PSet(
        gap = cms.int32(2),
        lstrips = cms.int32(2),
        maxStripTime = cms.double(10.0),
        maxThreshold = cms.double(100.0),
        seedHitIetaMax = cms.int32(35),
        stripThreshold = cms.double(40.0),
        timeMax = cms.double(6.0),
        verboseLevel = cms.untracked.int32(10),
        wedgeCut = cms.double(0.05)
    ),
    PETstat = cms.PSet(
        HcalAcceptSeverityLevel = cms.int32(9),
        longETParams = cms.vdouble(
            0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0
        ),
        longEnergyParams = cms.vdouble(
            43.5, 45.7, 48.32, 51.36, 54.82, 
            58.7, 63.0, 67.72, 72.86, 78.42, 
            84.4, 90.8, 97.62
        ),
        long_R = cms.vdouble(0.98),
        long_R_29 = cms.vdouble(0.8),
        shortETParams = cms.vdouble(
            0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0
        ),
        shortEnergyParams = cms.vdouble(
            35.1773, 35.37, 35.7933, 36.4472, 37.3317, 
            38.4468, 39.7925, 41.3688, 43.1757, 45.2132, 
            47.4813, 49.98, 52.7093
        ),
        short_R = cms.vdouble(0.8),
        short_R_29 = cms.vdouble(0.8)
    ),
    S8S1stat = cms.PSet(
        HcalAcceptSeverityLevel = cms.int32(9),
        isS8S1 = cms.bool(True),
        longETParams = cms.vdouble(
            0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0
        ),
        longEnergyParams = cms.vdouble(
            40, 100, 100, 100, 100, 
            100, 100, 100, 100, 100, 
            100, 100, 100
        ),
        long_optimumSlope = cms.vdouble(
            0.3, 0.1, 0.1, 0.1, 0.1, 
            0.1, 0.1, 0.1, 0.1, 0.1, 
            0.1, 0.1, 0.1
        ),
        shortETParams = cms.vdouble(
            0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0
        ),
        shortEnergyParams = cms.vdouble(
            40, 100, 100, 100, 100, 
            100, 100, 100, 100, 100, 
            100, 100, 100
        ),
        short_optimumSlope = cms.vdouble(
            0.3, 0.1, 0.1, 0.1, 0.1, 
            0.1, 0.1, 0.1, 0.1, 0.1, 
            0.1, 0.1, 0.1
        )
    ),
    S9S1stat = cms.PSet(
        HcalAcceptSeverityLevel = cms.int32(9),
        isS8S1 = cms.bool(False),
        longETParams = cms.vdouble(
            0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0
        ),
        longEnergyParams = cms.vdouble(
            43.5, 45.7, 48.32, 51.36, 54.82, 
            58.7, 63.0, 67.72, 72.86, 78.42, 
            84.4, 90.8, 97.62
        ),
        long_optimumSlope = cms.vdouble(
            -99999.0, 0.04122625, 0.05251356, 0.0642766, 0.0743328, 
            0.08214848, 0.0622789, 0.0741041, 0.0868186, 0.100422, 
            0.135313, 0.136289, 0.0589927
        ),
        shortETParams = cms.vdouble(
            0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0
        ),
        shortEnergyParams = cms.vdouble(
            35.1773, 35.37, 35.7933, 36.4472, 37.3317, 
            38.4468, 39.7925, 41.3688, 43.1757, 45.2132, 
            47.4813, 49.98, 52.7093
        ),
        short_optimumSlope = cms.vdouble(
            -99999.0, 0.04122625, 0.05251356, 0.0642766, 0.0743328, 
            0.08214848, 0.0622789, 0.0741041, 0.0868186, 0.100422, 
            0.135313, 0.136289, 0.0589927
        )
    ),
    algoConfigClass = cms.string('HFPhase1PMTParams'),
    algorithm = cms.PSet(
        Class = cms.string('HFSimpleTimeCheck'),
        alwaysCalculateQAsymmetry = cms.bool(False),
        energyWeights = cms.vdouble(
            1.0, 1.0, 1.0, 0.0, 1.0, 
            0.0, 2.0, 0.0, 2.0, 0.0, 
            2.0, 0.0, 1.0, 0.0, 0.0, 
            1.0, 0.0, 1.0, 0.0, 2.0, 
            0.0, 2.0, 0.0, 2.0, 0.0, 
            1.0
        ),
        minChargeForOvershoot = cms.double(10000000000.0),
        minChargeForUndershoot = cms.double(10000000000.0),
        rejectAllFailures = cms.bool(False),
        soiPhase = cms.uint32(1),
        tfallIfNoTDC = cms.double(-101.0),
        timeShift = cms.double(0.0),
        tlimits = cms.vdouble(-1000.0, 1000.0, -1000.0, 1000.0),
        triseIfNoTDC = cms.double(-100.0)
    ),
    checkChannelQualityForDepth3and4 = cms.bool(True),
    inputLabel = cms.InputTag("hfprerecoMB"),
    runHFStripFilter = cms.bool(True),
    setNoiseFlags = cms.bool(False),
    useChannelQualityFromDB = cms.bool(True)
)


process.hgcalBackEndLayer1Producer = cms.EDProducer("HGCalBackendLayer1Producer",
    InputTriggerCells = cms.InputTag("hgcalConcentratorProducer","HGCalConcentratorProcessorSelection"),
    ProcessorParameters = cms.PSet(
        C2d_parameters = cms.PSet(
            applyLayerCalibration = cms.bool(False),
            calibSF_cluster = cms.double(1.0),
            clusterType = cms.string('dummyC2d'),
            layerWeights = cms.vdouble(
                0.0, 0.0183664, 0.0, 0.0305622, 0.0, 
                0.0162589, 0.0, 0.0143918, 0.0, 0.0134475, 
                0.0, 0.0185754, 0.0, 0.0204934, 0.0, 
                0.016901, 0.0, 0.0207958, 0.0, 0.0167985, 
                0.0, 0.0238385, 0.0, 0.0301146, 0.0, 
                0.0274622, 0.0, 0.0468671, 0.0, 0.078819, 
                0.0555831, 0.0609312, 0.0610768, 0.0657626, 0.0465653, 
                0.0629383, 0.0610061, 0.0517326, 0.0492882, 0.0699336, 
                0.0673457, 0.119896, 0.125327, 0.143235, 0.153295, 
                0.104777, 0.109345, 0.161386, 0.174656, 0.108053, 
                0.121674, 0.1171, 0.328053
            )
        ),
        ProcessorName = cms.string('HGCalBackendLayer1Processor2DClustering')
    )
)


process.hgcalBackEndLayer1ProducerHFNose = cms.EDProducer("HGCalBackendLayer1Producer",
    InputTriggerCells = cms.InputTag("hgcalConcentratorProducerHFNose","HGCalConcentratorProcessorSelection"),
    ProcessorParameters = cms.PSet(
        C2d_parameters = cms.PSet(
            applyLayerCalibration = cms.bool(False),
            calibSF_cluster = cms.double(1.0),
            clusterType = cms.string('dummyC2d'),
            layerWeights = cms.vdouble(
                0.0, 0.0183664, 0.0, 0.0305622, 0.0, 
                0.0162589, 0.0, 0.0143918, 0.0, 0.0134475, 
                0.0, 0.0185754, 0.0, 0.0204934, 0.0, 
                0.016901, 0.0, 0.0207958, 0.0, 0.0167985, 
                0.0, 0.0238385, 0.0, 0.0301146, 0.0, 
                0.0274622, 0.0, 0.0468671, 0.0, 0.078819, 
                0.0555831, 0.0609312, 0.0610768, 0.0657626, 0.0465653, 
                0.0629383, 0.0610061, 0.0517326, 0.0492882, 0.0699336, 
                0.0673457, 0.119896, 0.125327, 0.143235, 0.153295, 
                0.104777, 0.109345, 0.161386, 0.174656, 0.108053, 
                0.121674, 0.1171, 0.328053
            )
        ),
        ProcessorName = cms.string('HGCalBackendLayer1Processor2DClustering')
    )
)


process.hgcalBackEndLayer2Producer = cms.EDProducer("HGCalBackendLayer2Producer",
    InputCluster = cms.InputTag("hgcalBackEndLayer1Producer","HGCalBackendLayer1Processor2DClustering"),
    ProcessorParameters = cms.PSet(
        C3d_parameters = cms.PSet(
            histoMax_C3d_clustering_parameters = cms.PSet(
                EGIdentification = cms.PSet(
                    CategoriesEtaMax = cms.vdouble(2.7, 3.0),
                    CategoriesEtaMin = cms.vdouble(1.5, 2.7),
                    CategoriesPtMax = cms.vdouble(1000000.0, 1000000.0),
                    CategoriesPtMin = cms.vdouble(0.0, 0.0),
                    Inputs = cms.vstring(
                        'cl3d_coreshowerlength', 
                        'cl3d_showerlength', 
                        'cl3d_firstlayer', 
                        'cl3d_maxlayer', 
                        'cl3d_szz', 
                        'cl3d_srrmean', 
                        'cl3d_srrtot', 
                        'cl3d_seetot', 
                        'cl3d_spptot'
                    ),
                    Weights = cms.vstring(
                        'L1Trigger/L1THGCal/data/egamma_id_histomax_3151_loweta_v0.xml', 
                        'L1Trigger/L1THGCal/data/egamma_id_histomax_3151_higheta_v0.xml'
                    ),
                    WorkingPoints = cms.vdouble(0.8292287, 0.9932326)
                ),
                cluster_association = cms.string('NearestNeighbour'),
                dR_multicluster = cms.double(0.0),
                dR_multicluster_byLayer_coefficientA = cms.vdouble(
                    0, 0.015, 0.015, 0.015, 0.015, 
                    0.015, 0.015, 0.015, 0.02, 0.02, 
                    0.02, 0.02, 0.02, 0.02, 0.02, 
                    0.03, 0.03, 0.03, 0.03, 0.03, 
                    0.03, 0.03, 0.04, 0.04, 0.04, 
                    0.04, 0.04, 0.04, 0.04, 0.04, 
                    0.04, 0.04, 0.04, 0.04, 0.04, 
                    0.05, 0.05, 0.05, 0.05, 0.05, 
                    0.05, 0.05, 0.05, 0.05, 0.05, 
                    0.05, 0.05, 0.05, 0.05, 0.05, 
                    0.05, 0.05, 0.05
                ),
                dR_multicluster_byLayer_coefficientB = cms.vdouble(
                    0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 
                    0, 0, 0
                ),
                minPt_multicluster = cms.double(0.5),
                shape_distance = cms.double(0.015),
                shape_threshold = cms.double(1.0)
            ),
            histoMax_C3d_seeding_parameters = cms.PSet(
                binSumsHisto = cms.vuint32(
                    13, 11, 11, 11, 9, 
                    9, 9, 7, 7, 7, 
                    7, 7, 7, 5, 5, 
                    5, 5, 5, 5, 5, 
                    5, 5, 5, 5, 5, 
                    5, 5, 5, 3, 3, 
                    3, 3, 3, 3, 3, 
                    3, 3, 3, 3, 3, 
                    3, 3
                ),
                kROverZMax = cms.double(0.58),
                kROverZMin = cms.double(0.076),
                nBins_X1_histo_multicluster = cms.uint32(42),
                nBins_X2_histo_multicluster = cms.uint32(216),
                neighbour_weights = cms.vdouble(
                    0, 0.25, 0, 0.25, 0, 
                    0.25, 0, 0.25, 0
                ),
                seed_position = cms.string('TCWeighted'),
                seed_smoothing_ecal = cms.vdouble(
                    1.0, 1.0, 1.0, 1.0, 1.1, 
                    1.0, 1.0, 1.0, 1.0
                ),
                seed_smoothing_hcal = cms.vdouble(
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 2.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0
                ),
                seeding_space = cms.string('RPhi'),
                threshold_histo_multicluster = cms.double(7.5),
                type_histoalgo = cms.string('HistoMaxC3d')
            ),
            type_multicluster = cms.string('Histo')
        ),
        ProcessorName = cms.string('HGCalBackendLayer2Processor3DClustering'),
        energy_interpretations = cms.VPSet(cms.PSet(
            dr_bylayer = cms.vdouble(
                0.015, 0.015, 0.015, 0.015, 0.015, 
                0.015, 0.015, 0.015, 0.015, 0.015, 
                0.015, 0.015, 0.015, 0.015, 0.015
            ),
            layer_containment_corrs = cms.vdouble(
                0.0, 0.0, 1.28, 1.09, 1.0, 
                1.07, 1.09, 1.04, 1.0, 1.09, 
                1.07, 1.03, 0.93, 1.4, 1.89
            ),
            scale_correction_coeff = cms.vdouble(52.99, -24.96),
            type = cms.string('HGCalTriggerClusterInterpretationEM')
        ))
    )
)


process.hgcalBackEndLayer2ProducerHFNose = cms.EDProducer("HGCalBackendLayer2Producer",
    InputCluster = cms.InputTag("hgcalBackEndLayer1ProducerHFNose","HGCalBackendLayer1Processor2DClustering"),
    ProcessorParameters = cms.PSet(
        C3d_parameters = cms.PSet(
            histoMax_C3d_clustering_parameters = cms.PSet(
                EGIdentification = cms.PSet(
                    CategoriesEtaMax = cms.vdouble(2.7, 3.0),
                    CategoriesEtaMin = cms.vdouble(1.5, 2.7),
                    CategoriesPtMax = cms.vdouble(1000000.0, 1000000.0),
                    CategoriesPtMin = cms.vdouble(0.0, 0.0),
                    Inputs = cms.vstring(
                        'cl3d_coreshowerlength', 
                        'cl3d_showerlength', 
                        'cl3d_firstlayer', 
                        'cl3d_maxlayer', 
                        'cl3d_szz', 
                        'cl3d_srrmean', 
                        'cl3d_srrtot', 
                        'cl3d_seetot', 
                        'cl3d_spptot'
                    ),
                    Weights = cms.vstring(
                        'L1Trigger/L1THGCal/data/egamma_id_histomax_3151_loweta_v0.xml', 
                        'L1Trigger/L1THGCal/data/egamma_id_histomax_3151_higheta_v0.xml'
                    ),
                    WorkingPoints = cms.vdouble(0.8292287, 0.9932326)
                ),
                cluster_association = cms.string('NearestNeighbour'),
                dR_multicluster = cms.double(0.0),
                dR_multicluster_byLayer_coefficientA = cms.vdouble(
                    0, 0.015, 0.015, 0.015, 0.015, 
                    0.015, 0.015, 0.015, 0.02, 0.02, 
                    0.02, 0.02, 0.02, 0.02, 0.02, 
                    0.03, 0.03, 0.03, 0.03, 0.03, 
                    0.03, 0.03, 0.04, 0.04, 0.04, 
                    0.04, 0.04, 0.04, 0.04, 0.04, 
                    0.04, 0.04, 0.04, 0.04, 0.04, 
                    0.05, 0.05, 0.05, 0.05, 0.05, 
                    0.05, 0.05, 0.05, 0.05, 0.05, 
                    0.05, 0.05, 0.05, 0.05, 0.05, 
                    0.05, 0.05, 0.05
                ),
                dR_multicluster_byLayer_coefficientB = cms.vdouble(
                    0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 
                    0, 0, 0
                ),
                minPt_multicluster = cms.double(0.5),
                shape_distance = cms.double(0.015),
                shape_threshold = cms.double(1.0)
            ),
            histoMax_C3d_seeding_parameters = cms.PSet(
                binSumsHisto = cms.vuint32(13, 11, 9, 9),
                kROverZMax = cms.double(0.1),
                kROverZMin = cms.double(0.025),
                nBins_X1_histo_multicluster = cms.uint32(4),
                nBins_X2_histo_multicluster = cms.uint32(216),
                neighbour_weights = cms.vdouble(
                    0, 0.25, 0, 0.25, 0, 
                    0.25, 0, 0.25, 0
                ),
                seed_position = cms.string('TCWeighted'),
                seed_smoothing_ecal = cms.vdouble(
                    1.0, 1.0, 1.0, 1.0, 1.1, 
                    1.0, 1.0, 1.0, 1.0
                ),
                seed_smoothing_hcal = cms.vdouble(
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 2.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0
                ),
                seeding_space = cms.string('RPhi'),
                threshold_histo_multicluster = cms.double(7.5),
                type_histoalgo = cms.string('HistoMaxC3d')
            ),
            type_multicluster = cms.string('Histo')
        ),
        ProcessorName = cms.string('HGCalBackendLayer2Processor3DClustering'),
        energy_interpretations = cms.VPSet(cms.PSet(
            dr_bylayer = cms.vdouble(
                0.015, 0.015, 0.015, 0.015, 0.015, 
                0.015, 0.015, 0.015, 0.015, 0.015, 
                0.015, 0.015, 0.015, 0.015, 0.015
            ),
            layer_containment_corrs = cms.vdouble(
                0.0, 0.0, 1.28, 1.09, 1.0, 
                1.07, 1.09, 1.04, 1.0, 1.09, 
                1.07, 1.03, 0.93, 1.4, 1.89
            ),
            scale_correction_coeff = cms.vdouble(52.99, -24.96),
            type = cms.string('HGCalTriggerClusterInterpretationEM')
        ))
    )
)


process.hgcalConcentratorProducer = cms.EDProducer("HGCalConcentratorProducer",
    InputTriggerCells = cms.InputTag("hgcalVFEProducer","HGCalVFEProcessorSums"),
    InputTriggerSums = cms.InputTag("hgcalVFEProducer","HGCalVFEProcessorSums"),
    ProcessorParameters = cms.PSet(
        Method = cms.vstring(
            'thresholdSelect', 
            'thresholdSelect', 
            'thresholdSelect'
        ),
        ProcessorName = cms.string('HGCalConcentratorProcessorSelection'),
        coarsenTriggerCells = cms.vuint32(0, 0, 0),
        ctcSize = cms.vuint32(
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2
        ),
        fixedDataSizePerHGCROC = cms.bool(False),
        threshold_scintillator = cms.double(1.35),
        threshold_silicon = cms.double(1.35)
    )
)


process.hgcalConcentratorProducerHFNose = cms.EDProducer("HGCalConcentratorProducer",
    InputTriggerCells = cms.InputTag("hfnoseVFEProducer","HGCalVFEProcessorSums"),
    InputTriggerSums = cms.InputTag("hfnoseVFEProducer","HGCalVFEProcessorSums"),
    ProcessorParameters = cms.PSet(
        Method = cms.vstring(
            'thresholdSelect', 
            'thresholdSelect', 
            'thresholdSelect'
        ),
        ProcessorName = cms.string('HGCalConcentratorProcessorSelection'),
        coarsenTriggerCells = cms.vuint32(0, 0, 0),
        ctcSize = cms.vuint32(
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2, 2, 2, 2, 
            2, 2
        ),
        fixedDataSizePerHGCROC = cms.bool(False),
        threshold_scintillator = cms.double(1.35),
        threshold_silicon = cms.double(1.35)
    )
)


process.hgcalDigis = cms.EDProducer("HGCalRawToDigiFake",
    bhDigis = cms.InputTag("simHGCalUnsuppressedDigis","HEback"),
    eeDigis = cms.InputTag("simHGCalUnsuppressedDigis","EE"),
    fhDigis = cms.InputTag("simHGCalUnsuppressedDigis","HEfront"),
    mightGet = cms.optional.untracked.vstring
)


process.hgcalLayerClusters = cms.EDProducer("HGCalLayerClusterProducer",
    HFNoseInput = cms.InputTag("HGCalRecHit","HGCHFNoseRecHits"),
    HGCBHInput = cms.InputTag("HGCalRecHit","HGCHEBRecHits"),
    HGCEEInput = cms.InputTag("HGCalRecHit","HGCEERecHits"),
    HGCFHInput = cms.InputTag("HGCalRecHit","HGCHEFRecHits"),
    detector = cms.string('all'),
    doSharing = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    nHitsTime = cms.uint32(3),
    plugin = cms.PSet(
        dEdXweights = cms.vdouble(
            0.0, 8.894541, 10.937907, 10.937907, 10.937907, 
            10.937907, 10.937907, 10.937907, 10.937907, 10.937907, 
            10.932882, 10.932882, 10.937907, 10.937907, 10.938169, 
            10.938169, 10.938169, 10.938169, 10.938169, 10.938169, 
            10.938169, 10.938169, 10.938169, 10.938169, 10.938169, 
            10.938169, 10.938169, 10.938169, 32.332097, 51.574301, 
            51.444192, 51.444192, 51.444192, 51.444192, 51.444192, 
            51.444192, 51.444192, 51.444192, 51.444192, 51.444192, 
            69.513118, 87.582044, 87.582044, 87.582044, 87.582044, 
            87.582044, 87.214571, 86.888309, 86.92952, 86.92952, 
            86.92952
        ),
        deltac = cms.vdouble(1.3, 1.3, 5, 0.0315),
        deltasi_index_regemfac = cms.int32(3),
        dependSensor = cms.bool(True),
        ecut = cms.double(3),
        fcPerEle = cms.double(0.00016020506),
        fcPerMip = cms.vdouble(
            2.06, 3.43, 5.15, 2.06, 3.43, 
            5.15
        ),
        kappa = cms.double(9),
        maxNumberOfThickIndices = cms.uint32(6),
        noiseMip = cms.PSet(
            refToPSet_ = cms.string('HGCAL_noise_heback')
        ),
        noises = cms.vdouble(
            2000.0, 2400.0, 2000.0, 2000.0, 2400.0, 
            2000.0
        ),
        positionDeltaRho2 = cms.double(1.69),
        sciThicknessCorrection = cms.double(0.9),
        thicknessCorrection = cms.vdouble(
            0.77, 0.77, 0.77, 0.84, 0.84, 
            0.84
        ),
        thresholdW0 = cms.vdouble(2.9, 2.9, 2.9),
        type = cms.string('CLUE'),
        use2x2 = cms.bool(True),
        verbosity = cms.untracked.uint32(3)
    ),
    timeClname = cms.string('timeLayerCluster'),
    timeOffset = cms.double(5)
)


process.hgcalLayerClustersHFNose = cms.EDProducer("HGCalLayerClusterProducer",
    HFNoseInput = cms.InputTag("HGCalRecHit","HGCHFNoseRecHits"),
    HGCBHInput = cms.InputTag("HGCalRecHit","HGCHEBRecHits"),
    HGCEEInput = cms.InputTag("HGCalRecHit","HGCEERecHits"),
    HGCFHInput = cms.InputTag("HGCalRecHit","HGCHEFRecHits"),
    detector = cms.string('HFNose'),
    doSharing = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    nHitsTime = cms.uint32(3),
    plugin = cms.PSet(
        dEdXweights = cms.vdouble(
            0.0, 39.500245, 39.756638, 39.756638, 39.756638, 
            39.756638, 66.020266, 92.283895, 92.283895
        ),
        deltac = cms.vdouble(1.3, 1.3, 5, 0.0315),
        deltasi_index_regemfac = cms.int32(3),
        dependSensor = cms.bool(True),
        ecut = cms.double(3),
        fcPerEle = cms.double(0.00016020506),
        fcPerMip = cms.vdouble(1.25, 2.57, 3.88),
        kappa = cms.double(9),
        maxNumberOfThickIndices = cms.uint32(3),
        noiseMip = cms.PSet(
            refToPSet_ = cms.string('HGCAL_noise_heback')
        ),
        noises = cms.vdouble(2000.0, 2400.0, 2000.0),
        positionDeltaRho2 = cms.double(1.69),
        sciThicknessCorrection = cms.double(0.9),
        thicknessCorrection = cms.vdouble(1.132, 1.092, 1.084),
        thresholdW0 = cms.vdouble(2.9, 2.9, 2.9),
        type = cms.string('CLUE'),
        use2x2 = cms.bool(True),
        verbosity = cms.untracked.uint32(3)
    ),
    timeClname = cms.string('timeLayerCluster'),
    timeOffset = cms.double(5)
)


process.hgcalMultiClusters = cms.EDProducer("HGCalMultiClusterProducer",
    HGCBHInput = cms.InputTag("HGCalRecHit","HGCHEBRecHits"),
    HGCEEInput = cms.InputTag("HGCalRecHit","HGCEERecHits"),
    HGCFHInput = cms.InputTag("HGCalRecHit","HGCHEFRecHits"),
    HGCLayerClusters = cms.InputTag("hgcalLayerClusters"),
    HGCLayerClustersSharing = cms.InputTag("hgcalLayerClusters","sharing"),
    doSharing = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    minClusters = cms.uint32(3),
    multiclusterRadii = cms.vdouble(2, 5, 5),
    verbosity = cms.untracked.uint32(3)
)


process.hgcalTowerMapProducer = cms.EDProducer("HGCalTowerMapProducer",
    InputTriggerCells = cms.InputTag("hgcalVFEProducer","HGCalVFEProcessorSums"),
    ProcessorParameters = cms.PSet(
        ProcessorName = cms.string('HGCalTowerMapProcessor'),
        towermap_parameters = cms.PSet(
            L1TTriggerTowerConfig = cms.PSet(
                binsEta = cms.vdouble(),
                binsPhi = cms.vdouble(),
                maxEta = cms.double(3.0),
                maxPhi = cms.double(3.14159265359),
                minEta = cms.double(1.479),
                minPhi = cms.double(-3.14159265359),
                nBinsEta = cms.int32(18),
                nBinsPhi = cms.int32(72),
                readMappingFile = cms.bool(False)
            ),
            layerWeights = cms.vdouble(),
            useLayerWeights = cms.bool(False)
        )
    )
)


process.hgcalTowerMapProducerHFNose = cms.EDProducer("HGCalTowerMapProducer",
    InputTriggerCells = cms.InputTag("hfnoseVFEProducer","HFNoseVFEProcessorSums"),
    ProcessorParameters = cms.PSet(
        ProcessorName = cms.string('HGCalTowerMapProcessor'),
        towermap_parameters = cms.PSet(
            L1TTriggerTowerConfig = cms.PSet(
                binsEta = cms.vdouble(),
                binsPhi = cms.vdouble(),
                maxEta = cms.double(3.0),
                maxPhi = cms.double(3.14159265359),
                minEta = cms.double(1.479),
                minPhi = cms.double(-3.14159265359),
                nBinsEta = cms.int32(18),
                nBinsPhi = cms.int32(72),
                readMappingFile = cms.bool(False)
            ),
            layerWeights = cms.vdouble(),
            useLayerWeights = cms.bool(False)
        )
    )
)


process.hgcalTowerProducer = cms.EDProducer("HGCalTowerProducer",
    InputTowerMaps = cms.InputTag("hgcalTowerMapProducer","HGCalTowerMapProcessor"),
    ProcessorParameters = cms.PSet(
        ProcessorName = cms.string('HGCalTowerProcessor')
    )
)


process.hgcalTowerProducerHFNose = cms.EDProducer("HGCalTowerProducer",
    InputTowerMaps = cms.InputTag("hgcalTowerMapProducerHFNose","HGCalTowerMapProcessor"),
    ProcessorParameters = cms.PSet(
        ProcessorName = cms.string('HGCalTowerProcessor')
    )
)


process.hgcalTrackCollection = cms.EDProducer("HGCalTrackCollectionProducer",
    DPtOverPtCuts_byTrackAlgo = cms.vdouble(
        10.0, 10.0, 10.0, 10.0, 10.0, 
        5.0
    ),
    NHitCuts_byTrackAlgo = cms.vuint32(
        3, 3, 3, 3, 3, 
        32700
    ),
    hgcalGeometryNames = cms.PSet(
        HGC_ECAL = cms.string('HGCalEESensitive')
    ),
    src = cms.InputTag("pfTrack"),
    trackQuality = cms.string('highPurity'),
    useIterativeTracking = cms.bool(True)
)


process.hgcalVFEProducer = cms.EDProducer("HGCalVFEProducer",
    ProcessorParameters = cms.PSet(
        ProcessorName = cms.string('HGCalVFEProcessorSums'),
        ThicknessCorrections = cms.vdouble(1.66504854369, 1.0, 0.666019417476),
        adcnBits_sc = cms.uint32(10),
        adcnBits_si = cms.uint32(10),
        adcsaturation_sc = cms.double(68.75),
        adcsaturation_si = cms.double(100),
        dEdXweights = cms.vdouble(
            0, 8.894541, 0, 21.875814, 0, 
            21.875814, 0, 21.875814, 0, 21.875814, 
            0, 21.865764, 0, 21.875814, 0, 
            21.876338, 0, 21.876338, 0, 21.876338, 
            0, 21.876338, 0, 21.876338, 0, 
            21.876338, 0, 21.876338, 0, 83.906398, 
            51.444192, 51.444192, 51.444192, 51.444192, 51.444192, 
            51.444192, 51.444192, 51.444192, 51.444192, 51.444192, 
            69.513118, 87.582044, 87.582044, 87.582044, 87.582044, 
            87.582044, 87.214571, 86.888309, 86.92952, 86.92952, 
            86.92952
        ),
        dEdXweightsNose = cms.vdouble(
            0.0, 39.500245, 39.756638, 39.756638, 39.756638, 
            39.756638, 66.020266, 92.283895, 92.283895
        ),
        exponentBits = cms.uint32(4),
        fCperMIP = cms.double(3.43),
        fCperMIPnose = cms.vdouble(1.25, 2.57, 3.88),
        linLSB_sc = cms.double(0.067138671875),
        linLSB_si = cms.double(0.09765625),
        linnBits = cms.uint32(16),
        mantissaBits = cms.uint32(4),
        noiseScintillator = cms.PSet(
            refToPSet_ = cms.string('HGCAL_noise_heback')
        ),
        noiseSilicon = cms.PSet(
            refToPSet_ = cms.string('HGCAL_noise_fC')
        ),
        noiseThreshold = cms.double(3),
        oot_coefficients = cms.vdouble(0.0, 0.0),
        rounding = cms.bool(True),
        scintillatorCellLSB_MIP = cms.double(0.067138671875),
        siliconCellLSB_fC = cms.double(0.09765625),
        tdcOnset_sc = cms.double(55),
        tdcOnset_si = cms.double(60),
        tdcnBits_sc = cms.uint32(12),
        tdcnBits_si = cms.uint32(12),
        tdcsaturation_sc = cms.double(1000),
        tdcsaturation_si = cms.double(10000),
        thickCorr = cms.double(0.77),
        thickCorrNose = cms.vdouble(1.132, 1.092, 1.084)
    ),
    bhDigis = cms.InputTag("simHGCalUnsuppressedDigis","HEback"),
    eeDigis = cms.InputTag("simHGCalUnsuppressedDigis","EE"),
    fhDigis = cms.InputTag("simHGCalUnsuppressedDigis","HEfront")
)


process.hiCentrality = cms.EDProducer("CentralityProducer",
    TrackQuality = cms.string('highPurity'),
    UseQuality = cms.bool(True),
    doPixelCut = cms.bool(True),
    hfEtaCut = cms.double(4),
    lowGainZDC = cms.bool(True),
    midRapidityRange = cms.double(1),
    produceETmidRapidity = cms.bool(True),
    produceEcalhits = cms.bool(True),
    produceHFhits = cms.bool(True),
    produceHFtowers = cms.bool(True),
    producePixelTracks = cms.bool(True),
    producePixelhits = cms.bool(True),
    produceTracks = cms.bool(True),
    produceZDChits = cms.bool(True),
    reUseCentrality = cms.bool(False),
    srcEBhits = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    srcEEhits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    srcHFhits = cms.InputTag("hfreco"),
    srcPixelTracks = cms.InputTag("hiPixel3PrimTracks"),
    srcPixelhits = cms.InputTag("siPixelRecHits"),
    srcReUse = cms.InputTag("hiCentrality"),
    srcTowers = cms.InputTag("towerMaker"),
    srcTracks = cms.InputTag("hiGeneralTracks"),
    srcVertex = cms.InputTag("hiSelectedVertex"),
    srcZDChits = cms.InputTag("zdcreco"),
    trackEtaCut = cms.double(2),
    trackPtCut = cms.double(1)
)


process.hiClusterCompatibility = cms.EDProducer("ClusterCompatibilityProducer",
    inputTag = cms.InputTag("siPixelRecHits"),
    maxZ = cms.double(40.05),
    minZ = cms.double(-40.0),
    zStep = cms.double(0.2)
)


process.hiConformalPixelFilter = cms.EDProducer("HIPixelTrackFilterProducer",
    VertexCollection = cms.InputTag("hiSelectedPixelVertex"),
    chi2 = cms.double(80.0),
    clusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
    lipMax = cms.double(999.0),
    mightGet = cms.optional.untracked.vstring,
    nSigmaLipMaxTolerance = cms.double(14.0),
    nSigmaTipMaxTolerance = cms.double(999.0),
    ptMax = cms.double(999999),
    ptMin = cms.double(0.25),
    tipMax = cms.double(999.0),
    useClusterShape = cms.bool(False)
)


process.hiConformalPixelTracks = cms.EDProducer("PixelTrackProducer",
    Cleaner = cms.string('trackCleaner'),
    Filter = cms.InputTag("hiConformalPixelFilter"),
    Fitter = cms.InputTag("pixelFitterByConformalMappingAndLine"),
    SeedingHitSets = cms.InputTag("hiConformalPixelTracksHitTriplets")
)


process.hiConformalPixelTracksHitDoublets = cms.EDProducer("HitPairEDProducer",
    clusterCheck = cms.InputTag(""),
    layerPairs = cms.vuint32(0),
    maxElement = cms.uint32(50000000),
    maxElementTotal = cms.uint32(50000000),
    mightGet = cms.optional.untracked.vstring,
    produceIntermediateHitDoublets = cms.bool(True),
    produceSeedingHitSets = cms.bool(False),
    seedingLayers = cms.InputTag("PixelLayerTriplets"),
    trackingRegions = cms.InputTag("hiTrackingRegionWithVertex"),
    trackingRegionsSeedingLayers = cms.InputTag("")
)


process.hiConformalPixelTracksHitTriplets = cms.EDProducer("PixelTripletHLTEDProducer",
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    doublets = cms.InputTag("hiConformalPixelTracksHitDoublets"),
    extraHitRPhitolerance = cms.double(0.032),
    extraHitRZtolerance = cms.double(0.037),
    maxElement = cms.uint32(5000000),
    mightGet = cms.optional.untracked.vstring,
    phiPreFiltering = cms.double(0.3),
    produceIntermediateHitTriplets = cms.bool(False),
    produceSeedingHitSets = cms.bool(True),
    useBending = cms.bool(True),
    useFixedPreFiltering = cms.bool(False),
    useMultScattering = cms.bool(True)
)


process.hiConformalPixelTracksPhase1Filter = cms.EDProducer("HIPixelTrackFilterProducer",
    VertexCollection = cms.InputTag("offlinePrimaryVertices"),
    chi2 = cms.double(999.9),
    clusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
    lipMax = cms.double(999.0),
    mightGet = cms.optional.untracked.vstring,
    nSigmaLipMaxTolerance = cms.double(999.9),
    nSigmaTipMaxTolerance = cms.double(999.0),
    ptMax = cms.double(999999),
    ptMin = cms.double(0.3),
    tipMax = cms.double(999.0),
    useClusterShape = cms.bool(False)
)


process.hiConformalPixelTracksPhase1HitDoubletsCA = cms.EDProducer("HitPairEDProducer",
    clusterCheck = cms.InputTag("trackerClusterCheck"),
    layerPairs = cms.vuint32(0, 1, 2),
    maxElement = cms.uint32(50000000),
    maxElementTotal = cms.uint32(50000000),
    mightGet = cms.optional.untracked.vstring,
    produceIntermediateHitDoublets = cms.bool(True),
    produceSeedingHitSets = cms.bool(False),
    seedingLayers = cms.InputTag("hiConformalPixelTracksPhase1SeedLayers"),
    trackingRegions = cms.InputTag("hiConformalPixelTracksPhase1TrackingRegions"),
    trackingRegionsSeedingLayers = cms.InputTag("")
)


process.hiConformalPixelTracksPhase1HitQuadrupletsCA = cms.EDProducer("CAHitQuadrupletEDProducer",
    CAHardPtCut = cms.double(0),
    CAOnlyOneLastHitPerLayerFilter = cms.optional.bool,
    CAPhiCut = cms.double(0.2),
    CAThetaCut = cms.double(0.0012),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    doublets = cms.InputTag("hiConformalPixelTracksPhase1HitDoubletsCA"),
    extraHitRPhitolerance = cms.double(0.032),
    fitFastCircle = cms.bool(True),
    fitFastCircleChi2Cut = cms.bool(True),
    maxChi2 = cms.PSet(
        enabled = cms.bool(True),
        pt1 = cms.double(0.7),
        pt2 = cms.double(2),
        value1 = cms.double(200),
        value2 = cms.double(50)
    ),
    mightGet = cms.optional.untracked.vstring,
    useBendingCorrection = cms.bool(True)
)


process.hiConformalPixelTracksPhase1SeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring(
        'BPix1+BPix2+BPix3+BPix4', 
        'BPix1+BPix2+BPix3+FPix1_pos', 
        'BPix1+BPix2+BPix3+FPix1_neg', 
        'BPix1+BPix2+FPix1_pos+FPix2_pos', 
        'BPix1+BPix2+FPix1_neg+FPix2_neg', 
        'BPix1+FPix1_pos+FPix2_pos+FPix3_pos', 
        'BPix1+FPix1_neg+FPix2_neg+FPix3_neg', 
        'FPix1_pos+FPix2_pos+FPix3_pos+FPix4_pos', 
        'FPix1_neg+FPix2_neg+FPix3_neg+FPix4_neg', 
        'FPix2_pos+FPix3_pos+FPix4_pos+FPix5_pos', 
        'FPix2_neg+FPix3_neg+FPix4_neg+FPix5_neg', 
        'FPix3_pos+FPix4_pos+FPix5_pos+FPix6_pos', 
        'FPix3_neg+FPix4_neg+FPix5_neg+FPix6_neg', 
        'FPix4_pos+FPix5_pos+FPix6_pos+FPix7_pos', 
        'FPix4_neg+FPix5_neg+FPix6_neg+FPix7_neg', 
        'FPix5_pos+FPix6_pos+FPix7_pos+FPix8_pos', 
        'FPix5_neg+FPix6_neg+FPix7_neg+FPix8_neg'
    ),
    mightGet = cms.optional.untracked.vstring
)


process.hiConformalPixelTracksPhase1TrackingRegions = cms.EDProducer("GlobalTrackingRegionWithVerticesEDProducer",
    RegionPSet = cms.PSet(
        VertexCollection = cms.InputTag("offlinePrimaryVertices"),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        fixedError = cms.double(0.2),
        halfLengthScaling4BigEvts = cms.bool(False),
        maxNVertices = cms.int32(-1),
        maxPtMin = cms.double(1000),
        minHalfLength = cms.double(0),
        minOriginR = cms.double(0),
        nSigmaZ = cms.double(3.0),
        originRScaling4BigEvts = cms.bool(False),
        originRadius = cms.double(0.2),
        pixelClustersForScaling = cms.InputTag("siPixelClusters"),
        precise = cms.bool(True),
        ptMin = cms.double(0.3),
        ptMinScaling4BigEvts = cms.bool(False),
        scalingEndNPix = cms.double(1),
        scalingStartNPix = cms.double(0),
        sigmaZVertex = cms.double(3),
        useFakeVertices = cms.bool(False),
        useFixedError = cms.bool(True),
        useFoundVertices = cms.bool(True),
        useMultipleScattering = cms.bool(False)
    ),
    mightGet = cms.optional.untracked.vstring
)


process.hiFJGridEmptyAreaCalculator = cms.EDProducer("HiFJGridEmptyAreaCalculator",
    CentralityBinSrc = cms.InputTag("centralityBin","HFtowers"),
    bandWidth = cms.double(0.2),
    doCentrality = cms.bool(True),
    gridWidth = cms.double(0.05),
    hiBinCut = cms.int32(100),
    jetSource = cms.InputTag("kt4PFJetsForRho"),
    keepGridInfo = cms.bool(False),
    mapEtaEdges = cms.InputTag("hiFJRhoProducer","mapEtaEdges"),
    mapToRho = cms.InputTag("hiFJRhoProducer","mapToRho"),
    mapToRhoM = cms.InputTag("hiFJRhoProducer","mapToRhoM"),
    pfCandSource = cms.InputTag("particleFlow")
)


process.hiFJRhoProducer = cms.EDProducer("HiFJRhoProducer",
    etaMaxExcl = cms.double(2.0),
    etaMaxExcl2 = cms.double(3.0),
    etaRanges = cms.vdouble(
        -5.0, -3.0, -2.1, -1.3, 1.3, 
        2.1, 3.0, 5.0
    ),
    jetSource = cms.InputTag("kt4PFJetsForRho"),
    nExcl = cms.int32(2),
    nExcl2 = cms.int32(1),
    ptMinExcl = cms.double(20.0),
    ptMinExcl2 = cms.double(20.0)
)


process.hiFilter = cms.EDProducer("HIPixelTrackFilterProducer",
    VertexCollection = cms.InputTag("hiSelectedPixelVertex"),
    chi2 = cms.double(1000),
    clusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
    lipMax = cms.double(0.3),
    mightGet = cms.optional.untracked.vstring,
    nSigmaLipMaxTolerance = cms.double(0),
    nSigmaTipMaxTolerance = cms.double(6),
    ptMax = cms.double(999999),
    ptMin = cms.double(1.5),
    tipMax = cms.double(0),
    useClusterShape = cms.bool(False)
)


process.hiProtoTrackFilter = cms.EDProducer("HIProtoTrackFilterProducer",
    beamSpot = cms.InputTag("offlineBeamSpot"),
    chi2 = cms.double(1000),
    doVariablePtMin = cms.bool(True),
    mightGet = cms.optional.untracked.vstring,
    ptMin = cms.double(1),
    siPixelRecHits = cms.InputTag("siPixelRecHits"),
    tipMax = cms.double(1)
)


process.hiTrackingRegionFromClusterVtx = cms.EDProducer("HITrackingRegionForPrimaryVtxEDProducer",
    RegionPSet = cms.PSet(
        VertexCollection = cms.InputTag("hiPixelClusterVertex"),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        directionXCoord = cms.double(1),
        directionYCoord = cms.double(1),
        directionZCoord = cms.double(0),
        doVariablePtMin = cms.bool(True),
        fixedError = cms.double(3),
        nSigmaZ = cms.double(3),
        originRadius = cms.double(0.2),
        precise = cms.bool(True),
        ptMin = cms.double(0.7),
        siPixelRecHits = cms.InputTag("siPixelRecHits"),
        sigmaZVertex = cms.double(3),
        useFakeVertices = cms.bool(False),
        useFixedError = cms.bool(True),
        useFoundVertices = cms.bool(True),
        useMultipleScattering = cms.bool(False)
    ),
    mightGet = cms.optional.untracked.vstring
)


process.hiTrackingRegionWithVertex = cms.EDProducer("GlobalTrackingRegionWithVerticesEDProducer",
    RegionPSet = cms.PSet(
        VertexCollection = cms.InputTag("hiSelectedPixelVertex"),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        fixedError = cms.double(0.2),
        halfLengthScaling4BigEvts = cms.bool(False),
        maxNVertices = cms.int32(-1),
        maxPtMin = cms.double(1000),
        minHalfLength = cms.double(0),
        minOriginR = cms.double(0),
        nSigmaZ = cms.double(3.0),
        originRScaling4BigEvts = cms.bool(False),
        originRadius = cms.double(0.2),
        pixelClustersForScaling = cms.InputTag("siPixelClusters"),
        precise = cms.bool(True),
        ptMin = cms.double(1.5),
        ptMinScaling4BigEvts = cms.bool(False),
        scalingEndNPix = cms.double(1),
        scalingStartNPix = cms.double(0),
        sigmaZVertex = cms.double(3.0),
        useFakeVertices = cms.bool(False),
        useFixedError = cms.bool(True),
        useFoundVertices = cms.bool(True),
        useMultipleScattering = cms.bool(False)
    ),
    mightGet = cms.optional.untracked.vstring
)


process.highPtTripletStep = cms.EDProducer("TrackMVAClassifierPrompt",
    beamspot = cms.InputTag("offlineBeamSpot"),
    ignoreVertices = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    mva = cms.PSet(
        GBRForestFileName = cms.string(''),
        GBRForestLabel = cms.string('MVASelectorHighPtTripletStep_Phase1')
    ),
    qualityCuts = cms.vdouble(0.2, 0.3, 0.4),
    src = cms.InputTag("highPtTripletStepTracks"),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.highPtTripletStepClusters = cms.EDProducer("TrackClusterRemoverPhase2",
    TrackQuality = cms.string('highPurity'),
    maxChi2 = cms.double(9.0),
    mightGet = cms.optional.untracked.vstring,
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    oldClusterRemovalInfo = cms.InputTag(""),
    overrideTrkQuals = cms.InputTag("initialStepSelector","initialStep"),
    phase2OTClusters = cms.InputTag("siPhase2Clusters"),
    phase2pixelClusters = cms.InputTag("siPixelClusters"),
    trackClassifier = cms.InputTag("","QualityMasks"),
    trajectories = cms.InputTag("initialStepTracks")
)


process.highPtTripletStepHitDoublets = cms.EDProducer("HitPairEDProducer",
    clusterCheck = cms.InputTag("trackerClusterCheck"),
    layerPairs = cms.vuint32(0, 1),
    maxElement = cms.uint32(50000000),
    maxElementTotal = cms.uint32(50000000),
    mightGet = cms.optional.untracked.vstring,
    produceIntermediateHitDoublets = cms.bool(True),
    produceSeedingHitSets = cms.bool(False),
    seedingLayers = cms.InputTag("highPtTripletStepSeedLayers"),
    trackingRegions = cms.InputTag("highPtTripletStepTrackingRegions"),
    trackingRegionsSeedingLayers = cms.InputTag("")
)


process.highPtTripletStepHitTriplets = cms.EDProducer("CAHitTripletEDProducer",
    CAHardPtCut = cms.double(0.5),
    CAPhiCut = cms.double(0.06),
    CAThetaCut = cms.double(0.003),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('LowPtClusterShapeSeedComparitor'),
        clusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
        clusterShapeHitFilter = cms.string('ClusterShapeHitFilter')
    ),
    doublets = cms.InputTag("highPtTripletStepHitDoublets"),
    extraHitRPhitolerance = cms.double(0.032),
    maxChi2 = cms.PSet(
        enabled = cms.bool(True),
        pt1 = cms.double(0.8),
        pt2 = cms.double(8),
        value1 = cms.double(100),
        value2 = cms.double(6)
    ),
    mightGet = cms.optional.untracked.vstring,
    useBendingCorrection = cms.bool(True)
)


process.highPtTripletStepMasks = cms.EDProducer("FastTrackerRecHitMaskProducer",
    TrackQuality = cms.string('highPurity'),
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    minNumberOfLayersWithMeasBeforeFiltering_ = cms.int32(0),
    oldHitRemovalInfo = cms.InputTag(""),
    recHits = cms.InputTag("fastTrackerRecHits"),
    trackClassifier = cms.InputTag("","QualityMasks"),
    trackQuality = cms.string('hightPurity'),
    trajectories = cms.InputTag("initialStepTracks")
)


process.highPtTripletStepSeedClusterMask = cms.EDProducer("SeedClusterRemoverPhase2",
    oldClusterRemovalInfo = cms.InputTag("initialStepSeedClusterMask"),
    phase2OTClusters = cms.InputTag("siPhase2Clusters"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    trajectories = cms.InputTag("highPtTripletStepSeeds")
)


process.highPtTripletStepSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("highPtTripletStepClusters")
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("highPtTripletStepClusters")
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring(
        'BPix1+BPix2+BPix3', 
        'BPix2+BPix3+BPix4', 
        'BPix1+BPix3+BPix4', 
        'BPix1+BPix2+BPix4', 
        'BPix2+BPix3+FPix1_pos', 
        'BPix2+BPix3+FPix1_neg', 
        'BPix1+BPix2+FPix1_pos', 
        'BPix1+BPix2+FPix1_neg', 
        'BPix2+FPix1_pos+FPix2_pos', 
        'BPix2+FPix1_neg+FPix2_neg', 
        'BPix1+FPix1_pos+FPix2_pos', 
        'BPix1+FPix1_neg+FPix2_neg', 
        'FPix1_pos+FPix2_pos+FPix3_pos', 
        'FPix1_neg+FPix2_neg+FPix3_neg', 
        'BPix1+FPix2_pos+FPix3_pos', 
        'BPix1+FPix2_neg+FPix3_neg', 
        'FPix2_pos+FPix3_pos+FPix4_pos', 
        'FPix2_neg+FPix3_neg+FPix4_neg', 
        'FPix3_pos+FPix4_pos+FPix5_pos', 
        'FPix3_neg+FPix4_neg+FPix5_neg', 
        'FPix4_pos+FPix5_pos+FPix6_pos', 
        'FPix4_neg+FPix5_neg+FPix6_neg', 
        'FPix5_pos+FPix6_pos+FPix7_pos', 
        'FPix5_neg+FPix6_neg+FPix7_neg', 
        'FPix6_pos+FPix7_pos+FPix8_pos', 
        'FPix6_neg+FPix7_neg+FPix8_neg'
    ),
    mightGet = cms.optional.untracked.vstring
)


process.highPtTripletStepSeeds = cms.EDProducer("SeedCreatorFromRegionConsecutiveHitsEDProducer",
    MinOneOverPtError = cms.double(1),
    OriginTransverseErrorMultiplier = cms.double(1),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedMomentumForBOFF = cms.double(5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    forceKinematicWithRegionDirection = cms.bool(False),
    magneticField = cms.string(''),
    mightGet = cms.optional.untracked.vstring,
    propagator = cms.string('PropagatorWithMaterial'),
    seedingHitSets = cms.InputTag("highPtTripletStepHitTriplets")
)


process.highPtTripletStepSelector = cms.EDProducer("MultiTrackSelector",
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("highPtTripletStepTracks"),
    trackSelectors = cms.VPSet(
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(2.0),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.7, 4.0),
            d0_par2 = cms.vdouble(0.6, 4.0),
            dz_par1 = cms.vdouble(0.8, 4.0),
            dz_par2 = cms.vdouble(0.6, 4.0),
            keepAllTracks = cms.bool(False),
            maxNumberLostLayers = cms.uint32(3),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('highPtTripletStepLoose'),
            preFilterName = cms.string(''),
            qualityBit = cms.string('loose'),
            res_par = cms.vdouble(0.003, 0.002),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(1.0),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.6, 4.0),
            d0_par2 = cms.vdouble(0.5, 4.0),
            dz_par1 = cms.vdouble(0.7, 4.0),
            dz_par2 = cms.vdouble(0.6, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('highPtTripletStepTight'),
            preFilterName = cms.string('highPtTripletStepLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.002),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.8),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.6, 4.0),
            d0_par2 = cms.vdouble(0.45, 4.0),
            dz_par1 = cms.vdouble(0.7, 4.0),
            dz_par2 = cms.vdouble(0.55, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(4.1),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(4),
            minNumberLayers = cms.uint32(4),
            min_eta = cms.double(-4.1),
            min_nhits = cms.uint32(4),
            nSigmaZ = cms.double(4.0),
            name = cms.string('highPtTripletStep'),
            preFilterName = cms.string('highPtTripletStepTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        )
    ),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(False),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.highPtTripletStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('highPtTripletStepTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('highPtTripletStepTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    numHitsForSeedCleaner = cms.int32(50),
    onlyPixelHitsForSeedCleaner = cms.bool(True),
    phase2clustersToSkip = cms.InputTag("highPtTripletStepClusters"),
    reverseTrajectories = cms.bool(False),
    src = cms.InputTag("highPtTripletStepSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.highPtTripletStepTrackingRegions = cms.EDProducer("GlobalTrackingRegionFromBeamSpotEDProducer",
    RegionPSet = cms.PSet(
        beamSpot = cms.InputTag("offlineBeamSpot"),
        nSigmaZ = cms.double(4),
        originHalfLength = cms.double(0),
        originRadius = cms.double(0.02),
        precise = cms.bool(True),
        ptMin = cms.double(0.7),
        useMultipleScattering = cms.bool(False)
    ),
    mightGet = cms.optional.untracked.vstring
)


process.highPtTripletStepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('highPtTripletStep'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("highPtTripletStepTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.hltCsc2DRecHits = cms.EDProducer("CSCRecHitDProducer",
    CSCDebug = cms.untracked.bool(False),
    CSCNoOfTimeBinsForDynamicPedestal = cms.int32(2),
    CSCStripClusterChargeCut = cms.double(25.0),
    CSCStripClusterSize = cms.untracked.int32(3),
    CSCStripPeakThreshold = cms.double(10.0),
    CSCStripxtalksOffset = cms.double(0.03),
    CSCUseCalibrations = cms.bool(True),
    CSCUseGasGainCorrections = cms.bool(False),
    CSCUseReducedWireTimeWindow = cms.bool(False),
    CSCUseStaticPedestals = cms.bool(False),
    CSCUseTimingCorrections = cms.bool(True),
    CSCWireClusterDeltaT = cms.int32(1),
    CSCWireTimeWindowHigh = cms.int32(15),
    CSCWireTimeWindowLow = cms.int32(0),
    CSCstripWireDeltaTime = cms.int32(8),
    ConstSyst_ME12 = cms.double(0.02),
    ConstSyst_ME13 = cms.double(0.03),
    ConstSyst_ME1a = cms.double(0.01),
    ConstSyst_ME1b = cms.double(0.02),
    ConstSyst_ME21 = cms.double(0.03),
    ConstSyst_ME22 = cms.double(0.03),
    ConstSyst_ME31 = cms.double(0.03),
    ConstSyst_ME32 = cms.double(0.03),
    ConstSyst_ME41 = cms.double(0.03),
    NoiseLevel_ME12 = cms.double(7.0),
    NoiseLevel_ME13 = cms.double(4.0),
    NoiseLevel_ME1a = cms.double(9.0),
    NoiseLevel_ME1b = cms.double(6.0),
    NoiseLevel_ME21 = cms.double(5.0),
    NoiseLevel_ME22 = cms.double(7.0),
    NoiseLevel_ME31 = cms.double(5.0),
    NoiseLevel_ME32 = cms.double(7.0),
    NoiseLevel_ME41 = cms.double(5.0),
    UseAverageTime = cms.bool(False),
    UseFivePoleFit = cms.bool(True),
    UseParabolaFit = cms.bool(False),
    XTasymmetry_ME12 = cms.double(0.015),
    XTasymmetry_ME13 = cms.double(0.02),
    XTasymmetry_ME1a = cms.double(0.023),
    XTasymmetry_ME1b = cms.double(0.01),
    XTasymmetry_ME21 = cms.double(0.023),
    XTasymmetry_ME22 = cms.double(0.023),
    XTasymmetry_ME31 = cms.double(0.023),
    XTasymmetry_ME32 = cms.double(0.023),
    XTasymmetry_ME41 = cms.double(0.023),
    readBadChambers = cms.bool(True),
    readBadChannels = cms.bool(False),
    stripDigiTag = cms.InputTag("simMuonCSCDigis","MuonCSCStripDigi"),
    wireDigiTag = cms.InputTag("simMuonCSCDigis","MuonCSCWireDigi")
)


process.hltCscSegments = cms.EDProducer("CSCSegmentProducer",
    algo_psets = cms.VPSet(
        cms.PSet(
            algo_name = cms.string('CSCSegAlgoSK'),
            algo_psets = cms.VPSet(
                cms.PSet(
                    chi2Max = cms.double(99999.0),
                    dPhiFineMax = cms.double(0.025),
                    dPhiMax = cms.double(0.003),
                    dRPhiFineMax = cms.double(8.0),
                    dRPhiMax = cms.double(8.0),
                    minLayersApart = cms.int32(2),
                    verboseInfo = cms.untracked.bool(True),
                    wideSeg = cms.double(3.0)
                ), 
                cms.PSet(
                    chi2Max = cms.double(99999.0),
                    dPhiFineMax = cms.double(0.025),
                    dPhiMax = cms.double(0.025),
                    dRPhiFineMax = cms.double(3.0),
                    dRPhiMax = cms.double(8.0),
                    minLayersApart = cms.int32(2),
                    verboseInfo = cms.untracked.bool(True),
                    wideSeg = cms.double(3.0)
                )
            ),
            chamber_types = cms.vstring(
                'ME1/a', 
                'ME1/b', 
                'ME1/2', 
                'ME1/3', 
                'ME2/1', 
                'ME2/2', 
                'ME3/1', 
                'ME3/2', 
                'ME4/1', 
                'ME4/2'
            ),
            parameters_per_chamber_type = cms.vint32(
                2, 1, 1, 1, 1, 
                1, 1, 1, 1, 1
            )
        ), 
        cms.PSet(
            algo_name = cms.string('CSCSegAlgoTC'),
            algo_psets = cms.VPSet(
                cms.PSet(
                    SegmentSorting = cms.int32(1),
                    chi2Max = cms.double(6000.0),
                    chi2ndfProbMin = cms.double(0.0001),
                    dPhiFineMax = cms.double(0.02),
                    dPhiMax = cms.double(0.003),
                    dRPhiFineMax = cms.double(6.0),
                    dRPhiMax = cms.double(1.2),
                    minLayersApart = cms.int32(2),
                    verboseInfo = cms.untracked.bool(True)
                ), 
                cms.PSet(
                    SegmentSorting = cms.int32(1),
                    chi2Max = cms.double(6000.0),
                    chi2ndfProbMin = cms.double(0.0001),
                    dPhiFineMax = cms.double(0.013),
                    dPhiMax = cms.double(0.00198),
                    dRPhiFineMax = cms.double(3.0),
                    dRPhiMax = cms.double(0.6),
                    minLayersApart = cms.int32(2),
                    verboseInfo = cms.untracked.bool(True)
                )
            ),
            chamber_types = cms.vstring(
                'ME1/a', 
                'ME1/b', 
                'ME1/2', 
                'ME1/3', 
                'ME2/1', 
                'ME2/2', 
                'ME3/1', 
                'ME3/2', 
                'ME4/1', 
                'ME4/2'
            ),
            parameters_per_chamber_type = cms.vint32(
                2, 1, 1, 1, 1, 
                1, 1, 1, 1, 1
            )
        ), 
        cms.PSet(
            algo_name = cms.string('CSCSegAlgoDF'),
            algo_psets = cms.VPSet(
                cms.PSet(
                    CSCSegmentDebug = cms.untracked.bool(False),
                    Pruning = cms.untracked.bool(False),
                    chi2Max = cms.double(5000.0),
                    dPhiFineMax = cms.double(0.025),
                    dRPhiFineMax = cms.double(8.0),
                    dXclusBoxMax = cms.double(8.0),
                    dYclusBoxMax = cms.double(8.0),
                    maxDPhi = cms.double(999.0),
                    maxDTheta = cms.double(999.0),
                    maxRatioResidualPrune = cms.double(3.0),
                    minHitsForPreClustering = cms.int32(10),
                    minHitsPerSegment = cms.int32(3),
                    minLayersApart = cms.int32(2),
                    nHitsPerClusterIsShower = cms.int32(20),
                    preClustering = cms.untracked.bool(False),
                    tanPhiMax = cms.double(0.5),
                    tanThetaMax = cms.double(1.2)
                ), 
                cms.PSet(
                    CSCSegmentDebug = cms.untracked.bool(False),
                    Pruning = cms.untracked.bool(False),
                    chi2Max = cms.double(5000.0),
                    dPhiFineMax = cms.double(0.025),
                    dRPhiFineMax = cms.double(12.0),
                    dXclusBoxMax = cms.double(8.0),
                    dYclusBoxMax = cms.double(12.0),
                    maxDPhi = cms.double(999.0),
                    maxDTheta = cms.double(999.0),
                    maxRatioResidualPrune = cms.double(3.0),
                    minHitsForPreClustering = cms.int32(10),
                    minHitsPerSegment = cms.int32(3),
                    minLayersApart = cms.int32(2),
                    nHitsPerClusterIsShower = cms.int32(20),
                    preClustering = cms.untracked.bool(False),
                    tanPhiMax = cms.double(0.8),
                    tanThetaMax = cms.double(2.0)
                ), 
                cms.PSet(
                    CSCSegmentDebug = cms.untracked.bool(False),
                    Pruning = cms.untracked.bool(False),
                    chi2Max = cms.double(5000.0),
                    dPhiFineMax = cms.double(0.025),
                    dRPhiFineMax = cms.double(8.0),
                    dXclusBoxMax = cms.double(8.0),
                    dYclusBoxMax = cms.double(8.0),
                    maxDPhi = cms.double(999.0),
                    maxDTheta = cms.double(999.0),
                    maxRatioResidualPrune = cms.double(3.0),
                    minHitsForPreClustering = cms.int32(30),
                    minHitsPerSegment = cms.int32(3),
                    minLayersApart = cms.int32(2),
                    nHitsPerClusterIsShower = cms.int32(20),
                    preClustering = cms.untracked.bool(False),
                    tanPhiMax = cms.double(0.5),
                    tanThetaMax = cms.double(1.2)
                )
            ),
            chamber_types = cms.vstring(
                'ME1/a', 
                'ME1/b', 
                'ME1/2', 
                'ME1/3', 
                'ME2/1', 
                'ME2/2', 
                'ME3/1', 
                'ME3/2', 
                'ME4/1', 
                'ME4/2'
            ),
            parameters_per_chamber_type = cms.vint32(
                3, 1, 2, 2, 1, 
                2, 1, 2, 1, 2
            )
        ), 
        cms.PSet(
            algo_name = cms.string('CSCSegAlgoST'),
            algo_psets = cms.VPSet(
                cms.PSet(
                    BPMinImprovement = cms.double(10000.0),
                    BrutePruning = cms.bool(True),
                    CSCDebug = cms.untracked.bool(False),
                    CorrectTheErrors = cms.bool(True),
                    Covariance = cms.double(0.0),
                    ForceCovariance = cms.bool(False),
                    ForceCovarianceAll = cms.bool(False),
                    NormChi2Cut2D = cms.double(20.0),
                    NormChi2Cut3D = cms.double(10.0),
                    Pruning = cms.bool(True),
                    SeedBig = cms.double(0.0015),
                    SeedSmall = cms.double(0.0002),
                    curvePenalty = cms.double(2.0),
                    curvePenaltyThreshold = cms.double(0.85),
                    dPhiFineMax = cms.double(0.025),
                    dRPhiFineMax = cms.double(8.0),
                    dXclusBoxMax = cms.double(4.0),
                    dYclusBoxMax = cms.double(8.0),
                    hitDropLimit4Hits = cms.double(0.6),
                    hitDropLimit5Hits = cms.double(0.8),
                    hitDropLimit6Hits = cms.double(0.3333),
                    maxDPhi = cms.double(999.0),
                    maxDTheta = cms.double(999.0),
                    maxRatioResidualPrune = cms.double(3),
                    maxRecHitsInCluster = cms.int32(20),
                    minHitsPerSegment = cms.int32(3),
                    onlyBestSegment = cms.bool(False),
                    preClustering = cms.bool(True),
                    preClusteringUseChaining = cms.bool(True),
                    prePrun = cms.bool(True),
                    prePrunLimit = cms.double(3.17),
                    tanPhiMax = cms.double(0.5),
                    tanThetaMax = cms.double(1.2),
                    useShowering = cms.bool(False),
                    yweightPenalty = cms.double(1.5),
                    yweightPenaltyThreshold = cms.double(1.0)
                ), 
                cms.PSet(
                    BPMinImprovement = cms.double(10000.0),
                    BrutePruning = cms.bool(True),
                    CSCDebug = cms.untracked.bool(False),
                    CorrectTheErrors = cms.bool(True),
                    Covariance = cms.double(0.0),
                    ForceCovariance = cms.bool(False),
                    ForceCovarianceAll = cms.bool(False),
                    NormChi2Cut2D = cms.double(20.0),
                    NormChi2Cut3D = cms.double(10.0),
                    Pruning = cms.bool(True),
                    SeedBig = cms.double(0.0015),
                    SeedSmall = cms.double(0.0002),
                    curvePenalty = cms.double(2.0),
                    curvePenaltyThreshold = cms.double(0.85),
                    dPhiFineMax = cms.double(0.025),
                    dRPhiFineMax = cms.double(8.0),
                    dXclusBoxMax = cms.double(4.0),
                    dYclusBoxMax = cms.double(8.0),
                    hitDropLimit4Hits = cms.double(0.6),
                    hitDropLimit5Hits = cms.double(0.8),
                    hitDropLimit6Hits = cms.double(0.3333),
                    maxDPhi = cms.double(999.0),
                    maxDTheta = cms.double(999.0),
                    maxRatioResidualPrune = cms.double(3),
                    maxRecHitsInCluster = cms.int32(24),
                    minHitsPerSegment = cms.int32(3),
                    onlyBestSegment = cms.bool(False),
                    preClustering = cms.bool(True),
                    preClusteringUseChaining = cms.bool(True),
                    prePrun = cms.bool(True),
                    prePrunLimit = cms.double(3.17),
                    tanPhiMax = cms.double(0.5),
                    tanThetaMax = cms.double(1.2),
                    useShowering = cms.bool(False),
                    yweightPenalty = cms.double(1.5),
                    yweightPenaltyThreshold = cms.double(1.0)
                )
            ),
            chamber_types = cms.vstring(
                'ME1/a', 
                'ME1/b', 
                'ME1/2', 
                'ME1/3', 
                'ME2/1', 
                'ME2/2', 
                'ME3/1', 
                'ME3/2', 
                'ME4/1', 
                'ME4/2'
            ),
            parameters_per_chamber_type = cms.vint32(
                2, 1, 1, 1, 1, 
                1, 1, 1, 1, 1
            )
        ), 
        cms.PSet(
            algo_name = cms.string('CSCSegAlgoRU'),
            algo_psets = cms.VPSet(
                cms.PSet(
                    chi2Max = cms.double(100.0),
                    chi2Norm_2D_ = cms.double(35),
                    chi2_str = cms.double(50.0),
                    dPhiIntMax = cms.double(0.005),
                    dPhiMax = cms.double(0.006),
                    dRIntMax = cms.double(2.0),
                    dRMax = cms.double(1.5),
                    doCollisions = cms.bool(True),
                    enlarge = cms.bool(False),
                    minLayersApart = cms.int32(1),
                    wideSeg = cms.double(3.0)
                ), 
                cms.PSet(
                    chi2Max = cms.double(100.0),
                    chi2Norm_2D_ = cms.double(35),
                    chi2_str = cms.double(50.0),
                    dPhiIntMax = cms.double(0.004),
                    dPhiMax = cms.double(0.005),
                    dRIntMax = cms.double(2.0),
                    dRMax = cms.double(1.5),
                    doCollisions = cms.bool(True),
                    enlarge = cms.bool(False),
                    minLayersApart = cms.int32(1),
                    wideSeg = cms.double(3.0)
                ), 
                cms.PSet(
                    chi2Max = cms.double(100.0),
                    chi2Norm_2D_ = cms.double(35),
                    chi2_str = cms.double(50.0),
                    dPhiIntMax = cms.double(0.003),
                    dPhiMax = cms.double(0.004),
                    dRIntMax = cms.double(2.0),
                    dRMax = cms.double(1.5),
                    doCollisions = cms.bool(True),
                    enlarge = cms.bool(False),
                    minLayersApart = cms.int32(1),
                    wideSeg = cms.double(3.0)
                ), 
                cms.PSet(
                    chi2Max = cms.double(60.0),
                    chi2Norm_2D_ = cms.double(20),
                    chi2_str = cms.double(30.0),
                    dPhiIntMax = cms.double(0.002),
                    dPhiMax = cms.double(0.003),
                    dRIntMax = cms.double(2.0),
                    dRMax = cms.double(1.5),
                    doCollisions = cms.bool(True),
                    enlarge = cms.bool(False),
                    minLayersApart = cms.int32(1),
                    wideSeg = cms.double(3.0)
                ), 
                cms.PSet(
                    chi2Max = cms.double(180.0),
                    chi2Norm_2D_ = cms.double(60),
                    chi2_str = cms.double(80.0),
                    dPhiIntMax = cms.double(0.005),
                    dPhiMax = cms.double(0.007),
                    dRIntMax = cms.double(2.0),
                    dRMax = cms.double(1.5),
                    doCollisions = cms.bool(True),
                    enlarge = cms.bool(False),
                    minLayersApart = cms.int32(1),
                    wideSeg = cms.double(3.0)
                ), 
                cms.PSet(
                    chi2Max = cms.double(100.0),
                    chi2Norm_2D_ = cms.double(35),
                    chi2_str = cms.double(50.0),
                    dPhiIntMax = cms.double(0.004),
                    dPhiMax = cms.double(0.006),
                    dRIntMax = cms.double(2.0),
                    dRMax = cms.double(1.5),
                    doCollisions = cms.bool(True),
                    enlarge = cms.bool(False),
                    minLayersApart = cms.int32(1),
                    wideSeg = cms.double(3.0)
                )
            ),
            chamber_types = cms.vstring(
                'ME1/a', 
                'ME1/b', 
                'ME1/2', 
                'ME1/3', 
                'ME2/1', 
                'ME2/2', 
                'ME3/1', 
                'ME3/2', 
                'ME4/1', 
                'ME4/2'
            ),
            parameters_per_chamber_type = cms.vint32(
                1, 2, 3, 4, 5, 
                6, 5, 6, 5, 6
            )
        )
    ),
    algo_type = cms.int32(5),
    inputObjects = cms.InputTag("hltCsc2DRecHits")
)


process.hltDt1DRecHits = cms.EDProducer("DTRecHitProducer",
    debug = cms.untracked.bool(False),
    dtDigiLabel = cms.InputTag("simMuonDTDigis"),
    recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
    recAlgoConfig = cms.PSet(
        debug = cms.untracked.bool(False),
        doVdriftCorr = cms.bool(True),
        maxTime = cms.double(420.0),
        minTime = cms.double(-3.0),
        stepTwoFromDigi = cms.bool(False),
        tTrigMode = cms.string('DTTTrigSyncFromDB'),
        tTrigModeConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doT0Correction = cms.bool(True),
            doTOFCorrection = cms.bool(True),
            doWirePropCorrection = cms.bool(True),
            tTrigLabel = cms.string(''),
            tofCorrType = cms.int32(0),
            vPropWire = cms.double(24.4),
            wirePropCorrType = cms.int32(0)
        ),
        useUncertDB = cms.bool(True)
    )
)


process.hltDt4DSegments = cms.EDProducer("DTRecSegment4DProducer",
    Reco4DAlgoConfig = cms.PSet(
        AllDTRecHits = cms.bool(True),
        Reco2DAlgoConfig = cms.PSet(
            AlphaMaxPhi = cms.double(1.0),
            AlphaMaxTheta = cms.double(0.9),
            MaxAllowedHits = cms.uint32(50),
            MaxChi2 = cms.double(4.0),
            debug = cms.untracked.bool(False),
            hit_afterT0_resolution = cms.double(0.03),
            nSharedHitsMax = cms.int32(2),
            nUnSharedHitsMin = cms.int32(2),
            performT0SegCorrection = cms.bool(False),
            performT0_vdriftSegCorrection = cms.bool(False),
            perform_delta_rejecting = cms.bool(False),
            recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
            recAlgoConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doVdriftCorr = cms.bool(True),
                maxTime = cms.double(420.0),
                minTime = cms.double(-3.0),
                stepTwoFromDigi = cms.bool(False),
                tTrigMode = cms.string('DTTTrigSyncFromDB'),
                tTrigModeConfig = cms.PSet(
                    debug = cms.untracked.bool(False),
                    doT0Correction = cms.bool(True),
                    doTOFCorrection = cms.bool(True),
                    doWirePropCorrection = cms.bool(True),
                    tTrigLabel = cms.string(''),
                    tofCorrType = cms.int32(0),
                    vPropWire = cms.double(24.4),
                    wirePropCorrType = cms.int32(0)
                ),
                useUncertDB = cms.bool(True)
            ),
            segmCleanerMode = cms.int32(2)
        ),
        Reco2DAlgoName = cms.string('DTMeantimerPatternReco'),
        debug = cms.untracked.bool(False),
        hit_afterT0_resolution = cms.double(0.03),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False),
        performT0_vdriftSegCorrection = cms.bool(False),
        perform_delta_rejecting = cms.bool(False),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doVdriftCorr = cms.bool(True),
            maxTime = cms.double(420.0),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            tTrigModeConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doT0Correction = cms.bool(True),
                doTOFCorrection = cms.bool(True),
                doWirePropCorrection = cms.bool(True),
                tTrigLabel = cms.string(''),
                tofCorrType = cms.int32(0),
                vPropWire = cms.double(24.4),
                wirePropCorrType = cms.int32(0)
            ),
            useUncertDB = cms.bool(True)
        )
    ),
    Reco4DAlgoName = cms.string('DTMeantimerPatternReco4D'),
    debug = cms.untracked.bool(False),
    recHits1DLabel = cms.InputTag("hltDt1DRecHits"),
    recHits2DLabel = cms.InputTag("dt2DSegments")
)


process.hltEcalDetIdToBeRecovered = cms.EDProducer("EcalDetIdToBeRecoveredProducer",
    ebDetIdToBeRecovered = cms.string('ebDetId'),
    ebFEToBeRecovered = cms.string('ebFE'),
    ebIntegrityChIdErrors = cms.InputTag("hltEcalDigis","EcalIntegrityChIdErrors"),
    ebIntegrityGainErrors = cms.InputTag("hltEcalDigis","EcalIntegrityGainErrors"),
    ebIntegrityGainSwitchErrors = cms.InputTag("hltEcalDigis","EcalIntegrityGainSwitchErrors"),
    ebSrFlagCollection = cms.InputTag("hltEcalDigis"),
    eeDetIdToBeRecovered = cms.string('eeDetId'),
    eeFEToBeRecovered = cms.string('eeFE'),
    eeIntegrityChIdErrors = cms.InputTag("hltEcalDigis","EcalIntegrityChIdErrors"),
    eeIntegrityGainErrors = cms.InputTag("hltEcalDigis","EcalIntegrityGainErrors"),
    eeIntegrityGainSwitchErrors = cms.InputTag("hltEcalDigis","EcalIntegrityGainSwitchErrors"),
    eeSrFlagCollection = cms.InputTag("hltEcalDigis"),
    integrityBlockSizeErrors = cms.InputTag("hltEcalDigis","EcalIntegrityBlockSizeErrors"),
    integrityTTIdErrors = cms.InputTag("hltEcalDigis","EcalIntegrityTTIdErrors")
)


process.hltEcalDigis = cms.EDProducer("EcalRawToDigi",
    DoRegional = cms.bool(False),
    FEDs = cms.vint32(
        601, 602, 603, 604, 605, 
        606, 607, 608, 609, 610, 
        611, 612, 613, 614, 615, 
        616, 617, 618, 619, 620, 
        621, 622, 623, 624, 625, 
        626, 627, 628, 629, 630, 
        631, 632, 633, 634, 635, 
        636, 637, 638, 639, 640, 
        641, 642, 643, 644, 645, 
        646, 647, 648, 649, 650, 
        651, 652, 653, 654
    ),
    FedLabel = cms.InputTag("listfeds"),
    InputLabel = cms.InputTag("rawDataCollector"),
    eventPut = cms.bool(True),
    feIdCheck = cms.bool(True),
    feUnpacking = cms.bool(True),
    forceToKeepFRData = cms.bool(False),
    headerUnpacking = cms.bool(True),
    memUnpacking = cms.bool(True),
    mightGet = cms.optional.untracked.vstring,
    numbTriggerTSamples = cms.int32(1),
    numbXtalTSamples = cms.int32(10),
    orderedDCCIdList = cms.vint32(
        1, 2, 3, 4, 5, 
        6, 7, 8, 9, 10, 
        11, 12, 13, 14, 15, 
        16, 17, 18, 19, 20, 
        21, 22, 23, 24, 25, 
        26, 27, 28, 29, 30, 
        31, 32, 33, 34, 35, 
        36, 37, 38, 39, 40, 
        41, 42, 43, 44, 45, 
        46, 47, 48, 49, 50, 
        51, 52, 53, 54
    ),
    orderedFedList = cms.vint32(
        601, 602, 603, 604, 605, 
        606, 607, 608, 609, 610, 
        611, 612, 613, 614, 615, 
        616, 617, 618, 619, 620, 
        621, 622, 623, 624, 625, 
        626, 627, 628, 629, 630, 
        631, 632, 633, 634, 635, 
        636, 637, 638, 639, 640, 
        641, 642, 643, 644, 645, 
        646, 647, 648, 649, 650, 
        651, 652, 653, 654
    ),
    silentMode = cms.untracked.bool(True),
    srpUnpacking = cms.bool(True),
    syncCheck = cms.bool(True),
    tccUnpacking = cms.bool(True)
)


process.hltEcalPreshowerDigis = cms.EDProducer("ESRawToDigi",
    ESdigiCollection = cms.string(''),
    InstanceES = cms.string(''),
    LookupTable = cms.FileInPath('EventFilter/ESDigiToRaw/data/ES_lookup_table.dat'),
    debugMode = cms.untracked.bool(False),
    mightGet = cms.optional.untracked.vstring,
    sourceTag = cms.InputTag("rawDataCollector")
)


process.hltEcalPreshowerRecHit = cms.EDProducer("ESRecHitProducer",
    ESRecoAlgo = cms.int32(0),
    ESdigiCollection = cms.InputTag("hltEcalPreshowerDigis"),
    ESrechitCollection = cms.string('EcalRecHitsES'),
    algo = cms.string('ESRecHitWorker')
)


process.hltEcalRecHit = cms.EDProducer("EcalRecHitProducer",
    ChannelStatusToBeExcluded = cms.vstring(
        'kDAC', 
        'kNoisy', 
        'kNNoisy', 
        'kFixedG6', 
        'kFixedG1', 
        'kFixedG0', 
        'kNonRespondingIsolated', 
        'kDeadVFE', 
        'kDeadFE', 
        'kNoDataNoTP'
    ),
    EBLaserMAX = cms.double(3.0),
    EBLaserMIN = cms.double(0.5),
    EBrechitCollection = cms.string('EcalRecHitsEB'),
    EBuncalibRecHitCollection = cms.InputTag("hltEcalUncalibRecHit","EcalUncalibRecHitsEB"),
    EELaserMAX = cms.double(8.0),
    EELaserMIN = cms.double(0.5),
    EErechitCollection = cms.string('EcalRecHitsEE'),
    EEuncalibRecHitCollection = cms.InputTag("hltEcalUncalibRecHit","EcalUncalibRecHitsEE"),
    algo = cms.string('EcalRecHitWorkerSimple'),
    algoRecover = cms.string('EcalRecHitWorkerRecover'),
    bdtWeightFileCracks = cms.FileInPath('RecoLocalCalo/EcalDeadChannelRecoveryAlgos/data/BDTWeights/bdtgAllRH_8GT700MeV_onlyCracks_ZskimData2017_v1.xml'),
    bdtWeightFileNoCracks = cms.FileInPath('RecoLocalCalo/EcalDeadChannelRecoveryAlgos/data/BDTWeights/bdtgAllRH_8GT700MeV_noCracks_ZskimData2017_v1.xml'),
    cleaningConfig = cms.PSet(
        cThreshold_barrel = cms.double(4),
        cThreshold_double = cms.double(10),
        cThreshold_endcap = cms.double(15),
        e4e1Threshold_barrel = cms.double(0.08),
        e4e1Threshold_endcap = cms.double(0.3),
        e4e1_a_barrel = cms.double(0.02),
        e4e1_a_endcap = cms.double(0.02),
        e4e1_b_barrel = cms.double(0.02),
        e4e1_b_endcap = cms.double(-0.0125),
        e6e2thresh = cms.double(0.04),
        ignoreOutOfTimeThresh = cms.double(1000000000.0),
        tightenCrack_e1_double = cms.double(2),
        tightenCrack_e1_single = cms.double(1),
        tightenCrack_e4e1_single = cms.double(2.5),
        tightenCrack_e6e2_double = cms.double(3)
    ),
    dbStatusToBeExcludedEB = cms.vint32(14, 78, 142),
    dbStatusToBeExcludedEE = cms.vint32(14, 78, 142),
    ebDetIdToBeRecovered = cms.InputTag("hltEcalDetIdToBeRecovered","ebDetId"),
    ebFEToBeRecovered = cms.InputTag("hltEcalDetIdToBeRecovered","ebFE"),
    eeDetIdToBeRecovered = cms.InputTag("hltEcalDetIdToBeRecovered","eeDetId"),
    eeFEToBeRecovered = cms.InputTag("hltEcalDetIdToBeRecovered","eeFE"),
    flagsMapDBReco = cms.PSet(
        kDead = cms.vstring('kNoDataNoTP'),
        kGood = cms.vstring(
            'kOk', 
            'kDAC', 
            'kNoLaser', 
            'kNoisy'
        ),
        kNeighboursRecovered = cms.vstring(
            'kFixedG0', 
            'kNonRespondingIsolated', 
            'kDeadVFE'
        ),
        kNoisy = cms.vstring(
            'kNNoisy', 
            'kFixedG6', 
            'kFixedG1'
        ),
        kTowerRecovered = cms.vstring('kDeadFE')
    ),
    killDeadChannels = cms.bool(True),
    laserCorrection = cms.bool(True),
    logWarningEtThreshold_EB_FE = cms.double(50),
    logWarningEtThreshold_EE_FE = cms.double(50),
    recoverEBFE = cms.bool(True),
    recoverEBIsolatedChannels = cms.bool(False),
    recoverEBVFE = cms.bool(False),
    recoverEEFE = cms.bool(True),
    recoverEEIsolatedChannels = cms.bool(False),
    recoverEEVFE = cms.bool(False),
    singleChannelRecoveryMethod = cms.string('BDTG'),
    singleChannelRecoveryThreshold = cms.double(0.7),
    skipTimeCalib = cms.bool(False),
    sum8ChannelRecoveryThreshold = cms.double(0.0),
    triggerPrimitiveDigiCollection = cms.InputTag("hltEcalDigis","EcalTriggerPrimitives")
)


process.hltEcalUncalibRecHit = cms.EDProducer("EcalUncalibRecHitProducer",
    EBdigiCollection = cms.InputTag("hltEcalDigis","ebDigis"),
    EBhitCollection = cms.string('EcalUncalibRecHitsEB'),
    EEdigiCollection = cms.InputTag("hltEcalDigis","eeDigis"),
    EEhitCollection = cms.string('EcalUncalibRecHitsEE'),
    algo = cms.string('EcalUncalibRecHitWorkerMultiFit'),
    algoPSet = cms.PSet(
        EBamplitudeFitParameters = cms.vdouble(1.138, 1.652),
        EBtimeConstantTerm = cms.double(0.6),
        EBtimeFitLimits_Lower = cms.double(0.2),
        EBtimeFitLimits_Upper = cms.double(1.4),
        EBtimeFitParameters = cms.vdouble(
            -2.015452, 3.130702, -12.3473, 41.88921, -82.83944, 
            91.01147, -50.35761, 11.05621
        ),
        EBtimeNconst = cms.double(28.5),
        EEamplitudeFitParameters = cms.vdouble(1.89, 1.4),
        EEtimeConstantTerm = cms.double(1.0),
        EEtimeFitLimits_Lower = cms.double(0.2),
        EEtimeFitLimits_Upper = cms.double(1.4),
        EEtimeFitParameters = cms.vdouble(
            -2.390548, 3.553628, -17.62341, 67.67538, -133.213, 
            140.7432, -75.41106, 16.20277
        ),
        EEtimeNconst = cms.double(31.8),
        EcalPulseShapeParameters = cms.PSet(
            EBCorrNoiseMatrixG01 = cms.vdouble(
                1.0, 0.73354, 0.64442, 0.58851, 0.55425, 
                0.53082, 0.51916, 0.51097, 0.50732, 0.50409
            ),
            EBCorrNoiseMatrixG06 = cms.vdouble(
                1.0, 0.70946, 0.58021, 0.49846, 0.45006, 
                0.41366, 0.39699, 0.38478, 0.37847, 0.37055
            ),
            EBCorrNoiseMatrixG12 = cms.vdouble(
                1.0, 0.71073, 0.55721, 0.46089, 0.40449, 
                0.35931, 0.33924, 0.32439, 0.31581, 0.30481
            ),
            EBPulseShapeCovariance = cms.vdouble(
                3.001e-06, 1.233e-05, 0.0, -4.416e-06, -4.571e-06, 
                -3.614e-06, -2.636e-06, -1.286e-06, -8.41e-07, -5.296e-07, 
                0.0, 0.0, 1.233e-05, 6.154e-05, 0.0, 
                -2.2e-05, -2.309e-05, -1.838e-05, -1.373e-05, -7.334e-06, 
                -5.088e-06, -3.745e-06, -2.428e-06, 0.0, 0.0, 
                0.0, 0.0, 0.0, 0.0, 0.0, 
                0.0, 0.0, 0.0, 0.0, 0.0, 
                0.0, -4.416e-06, -2.2e-05, 0.0, 8.319e-06, 
                8.545e-06, 6.792e-06, 5.059e-06, 2.678e-06, 1.816e-06, 
                1.223e-06, 8.245e-07, 5.589e-07, -4.571e-06, -2.309e-05, 
                0.0, 8.545e-06, 9.182e-06, 7.219e-06, 5.388e-06, 
                2.853e-06, 1.944e-06, 1.324e-06, 9.083e-07, 6.335e-07, 
                -3.614e-06, -1.838e-05, 0.0, 6.792e-06, 7.219e-06, 
                6.016e-06, 4.437e-06, 2.385e-06, 1.636e-06, 1.118e-06, 
                7.754e-07, 5.556e-07, -2.636e-06, -1.373e-05, 0.0, 
                5.059e-06, 5.388e-06, 4.437e-06, 3.602e-06, 1.917e-06, 
                1.322e-06, 9.079e-07, 6.529e-07, 4.752e-07, -1.286e-06, 
                -7.334e-06, 0.0, 2.678e-06, 2.853e-06, 2.385e-06, 
                1.917e-06, 1.375e-06, 9.1e-07, 6.455e-07, 4.693e-07, 
                3.657e-07, -8.41e-07, -5.088e-06, 0.0, 1.816e-06, 
                1.944e-06, 1.636e-06, 1.322e-06, 9.1e-07, 9.115e-07, 
                6.062e-07, 4.436e-07, 3.422e-07, -5.296e-07, -3.745e-06, 
                0.0, 1.223e-06, 1.324e-06, 1.118e-06, 9.079e-07, 
                6.455e-07, 6.062e-07, 7.217e-07, 4.862e-07, 3.768e-07, 
                0.0, -2.428e-06, 0.0, 8.245e-07, 9.083e-07, 
                7.754e-07, 6.529e-07, 4.693e-07, 4.436e-07, 4.862e-07, 
                6.509e-07, 4.418e-07, 0.0, 0.0, 0.0, 
                5.589e-07, 6.335e-07, 5.556e-07, 4.752e-07, 3.657e-07, 
                3.422e-07, 3.768e-07, 4.418e-07, 6.142e-07
            ),
            EBPulseShapeTemplate = cms.vdouble(
                0.0113979, 0.758151, 1.0, 0.887744, 0.673548, 
                0.474332, 0.319561, 0.215144, 0.147464, 0.101087, 
                0.0693181, 0.0475044
            ),
            EBdigiCollection = cms.string(''),
            EECorrNoiseMatrixG01 = cms.vdouble(
                1.0, 0.72698, 0.62048, 0.55691, 0.51848, 
                0.49147, 0.47813, 0.47007, 0.46621, 0.46265
            ),
            EECorrNoiseMatrixG06 = cms.vdouble(
                1.0, 0.71217, 0.47464, 0.34056, 0.26282, 
                0.20287, 0.17734, 0.16256, 0.15618, 0.14443
            ),
            EECorrNoiseMatrixG12 = cms.vdouble(
                1.0, 0.71373, 0.44825, 0.30152, 0.21609, 
                0.14786, 0.11772, 0.10165, 0.09465, 0.08098
            ),
            EEPulseShapeCovariance = cms.vdouble(
                3.941e-05, 3.333e-05, 0.0, -1.449e-05, -1.661e-05, 
                -1.424e-05, -1.183e-05, -6.842e-06, -4.915e-06, -3.411e-06, 
                0.0, 0.0, 3.333e-05, 2.862e-05, 0.0, 
                -1.244e-05, -1.431e-05, -1.233e-05, -1.032e-05, -5.883e-06, 
                -4.154e-06, -2.902e-06, -2.128e-06, 0.0, 0.0, 
                0.0, 0.0, 0.0, 0.0, 0.0, 
                0.0, 0.0, 0.0, 0.0, 0.0, 
                0.0, -1.449e-05, -1.244e-05, 0.0, 5.84e-06, 
                6.649e-06, 5.72e-06, 4.812e-06, 2.708e-06, 1.869e-06, 
                1.33e-06, 9.186e-07, 6.446e-07, -1.661e-05, -1.431e-05, 
                0.0, 6.649e-06, 7.966e-06, 6.898e-06, 5.794e-06, 
                3.157e-06, 2.184e-06, 1.567e-06, 1.084e-06, 7.575e-07, 
                -1.424e-05, -1.233e-05, 0.0, 5.72e-06, 6.898e-06, 
                6.341e-06, 5.347e-06, 2.859e-06, 1.991e-06, 1.431e-06, 
                9.839e-07, 6.886e-07, -1.183e-05, -1.032e-05, 0.0, 
                4.812e-06, 5.794e-06, 5.347e-06, 4.854e-06, 2.628e-06, 
                1.809e-06, 1.289e-06, 9.02e-07, 6.146e-07, -6.842e-06, 
                -5.883e-06, 0.0, 2.708e-06, 3.157e-06, 2.859e-06, 
                2.628e-06, 1.863e-06, 1.296e-06, 8.882e-07, 6.108e-07, 
                4.283e-07, -4.915e-06, -4.154e-06, 0.0, 1.869e-06, 
                2.184e-06, 1.991e-06, 1.809e-06, 1.296e-06, 1.217e-06, 
                8.669e-07, 5.751e-07, 3.882e-07, -3.411e-06, -2.902e-06, 
                0.0, 1.33e-06, 1.567e-06, 1.431e-06, 1.289e-06, 
                8.882e-07, 8.669e-07, 9.522e-07, 6.717e-07, 4.293e-07, 
                0.0, -2.128e-06, 0.0, 9.186e-07, 1.084e-06, 
                9.839e-07, 9.02e-07, 6.108e-07, 5.751e-07, 6.717e-07, 
                7.911e-07, 5.493e-07, 0.0, 0.0, 0.0, 
                6.446e-07, 7.575e-07, 6.886e-07, 6.146e-07, 4.283e-07, 
                3.882e-07, 4.293e-07, 5.493e-07, 7.027e-07
            ),
            EEPulseShapeTemplate = cms.vdouble(
                0.116442, 0.756246, 1.0, 0.897182, 0.686831, 
                0.491506, 0.344111, 0.245731, 0.174115, 0.123361, 
                0.0874288, 0.061957
            ),
            EEdigiCollection = cms.string(''),
            ESdigiCollection = cms.string(''),
            EcalPreMixStage1 = cms.bool(False),
            EcalPreMixStage2 = cms.bool(False),
            UseLCcorrection = cms.untracked.bool(True)
        ),
        activeBXs = cms.vint32(
            -5, -4, -3, -2, -1, 
            0, 1, 2, 3, 4
        ),
        addPedestalUncertaintyEB = cms.double(0.0),
        addPedestalUncertaintyEE = cms.double(0.0),
        ampErrorCalculation = cms.bool(True),
        amplitudeThresholdEB = cms.double(10),
        amplitudeThresholdEE = cms.double(10),
        chi2ThreshEB_ = cms.double(65.0),
        chi2ThreshEE_ = cms.double(50.0),
        doPrefitEB = cms.bool(False),
        doPrefitEE = cms.bool(False),
        dynamicPedestalsEB = cms.bool(False),
        dynamicPedestalsEE = cms.bool(False),
        ebPulseShape = cms.vdouble(
            5.2e-05, -5.26e-05, 6.66e-05, 0.1168, 0.7575, 
            1.0, 0.8876, 0.6732, 0.4741, 0.3194
        ),
        ebSpikeThreshold = cms.double(1.042),
        eePulseShape = cms.vdouble(
            5.2e-05, -5.26e-05, 6.66e-05, 0.1168, 0.7575, 
            1.0, 0.8876, 0.6732, 0.4741, 0.3194
        ),
        gainSwitchUseMaxSampleEB = cms.bool(True),
        gainSwitchUseMaxSampleEE = cms.bool(False),
        kPoorRecoFlagEB = cms.bool(True),
        kPoorRecoFlagEE = cms.bool(False),
        mitigateBadSamplesEB = cms.bool(False),
        mitigateBadSamplesEE = cms.bool(False),
        outOfTimeThresholdGain12mEB = cms.double(5),
        outOfTimeThresholdGain12mEE = cms.double(1000),
        outOfTimeThresholdGain12pEB = cms.double(5),
        outOfTimeThresholdGain12pEE = cms.double(1000),
        outOfTimeThresholdGain61mEB = cms.double(5),
        outOfTimeThresholdGain61mEE = cms.double(1000),
        outOfTimeThresholdGain61pEB = cms.double(5),
        outOfTimeThresholdGain61pEE = cms.double(1000),
        prefitMaxChiSqEB = cms.double(25.0),
        prefitMaxChiSqEE = cms.double(10.0),
        selectiveBadSampleCriteriaEB = cms.bool(False),
        selectiveBadSampleCriteriaEE = cms.bool(False),
        simplifiedNoiseModelForGainSwitch = cms.bool(True),
        timealgo = cms.string('None'),
        useLumiInfoRunHeader = cms.bool(False)
    )
)


process.hltFixedGridRhoFastjetAllCaloForMuons = cms.EDProducer("FixedGridRhoProducerFastjet",
    gridSpacing = cms.double(0.55),
    maxRapidity = cms.double(2.5),
    pfCandidatesTag = cms.InputTag("hltTowerMakerForAll")
)


process.hltGemRecHits = cms.EDProducer("GEMRecHitProducer",
    applyMasking = cms.bool(False),
    deadFile = cms.optional.FileInPath,
    gemDigiLabel = cms.InputTag("simMuonGEMDigis"),
    maskFile = cms.optional.FileInPath,
    mightGet = cms.optional.untracked.vstring,
    recAlgo = cms.string('GEMRecHitStandardAlgo'),
    recAlgoConfig = cms.PSet(

    )
)


process.hltGemSegments = cms.EDProducer("GEMSegmentProducer",
    algo_name = cms.string('GEMSegmentAlgorithm'),
    algo_pset = cms.PSet(
        GEMDebug = cms.untracked.bool(True),
        clusterOnlySameBXRecHits = cms.bool(True),
        dEtaChainBoxMax = cms.double(0.05),
        dPhiChainBoxMax = cms.double(0.02),
        dXclusBoxMax = cms.double(1.0),
        dYclusBoxMax = cms.double(5.0),
        maxRecHitsInCluster = cms.int32(4),
        minHitsPerSegment = cms.uint32(2),
        preClustering = cms.bool(True),
        preClusteringUseChaining = cms.bool(True)
    ),
    gemRecHitLabel = cms.InputTag("hltGemRecHits")
)


process.hltHbhereco = cms.EDProducer("HBHEPhase1Reconstructor",
    algoConfigClass = cms.string(''),
    algorithm = cms.PSet(
        Class = cms.string('SimpleHBHEPhase1Algo'),
        activeBXs = cms.vint32(
            -3, -2, -1, 0, 1, 
            2, 3, 4
        ),
        applyLegacyHBMCorrection = cms.bool(False),
        applyPedConstraint = cms.bool(True),
        applyPulseJitter = cms.bool(False),
        applyTimeConstraint = cms.bool(True),
        applyTimeSlew = cms.bool(True),
        applyTimeSlewM3 = cms.bool(True),
        calculateArrivalTime = cms.bool(True),
        chiSqSwitch = cms.double(15.0),
        correctForPhaseContainment = cms.bool(True),
        correctionPhaseNS = cms.double(6.0),
        deltaChiSqThresh = cms.double(0.001),
        dynamicPed = cms.bool(False),
        firstSampleShift = cms.int32(0),
        fitTimes = cms.int32(1),
        meanPed = cms.double(0.0),
        meanTime = cms.double(0.0),
        nMaxItersMin = cms.int32(500),
        nMaxItersNNLS = cms.int32(500),
        nnlsThresh = cms.double(1e-11),
        pulseJitter = cms.double(1.0),
        respCorrM3 = cms.double(1.0),
        samplesToAdd = cms.int32(2),
        tdcTimeShift = cms.double(0.0),
        timeMax = cms.double(12.5),
        timeMin = cms.double(-12.5),
        timeSigmaHPD = cms.double(5.0),
        timeSigmaSiPM = cms.double(2.5),
        timeSlewParsType = cms.int32(3),
        ts4Max = cms.vdouble(100.0, 20000.0, 30000.0),
        ts4Min = cms.double(0.0),
        ts4Thresh = cms.double(0.0),
        ts4chi2 = cms.vdouble(15.0, 15.0),
        useM2 = cms.bool(False),
        useM3 = cms.bool(True),
        useMahi = cms.bool(True)
    ),
    digiLabelQIE11 = cms.InputTag("hltHcalDigis"),
    digiLabelQIE8 = cms.InputTag("hltHcalDigis"),
    dropZSmarkedPassed = cms.bool(True),
    flagParametersQIE11 = cms.PSet(

    ),
    flagParametersQIE8 = cms.PSet(
        hitEnergyMinimum = cms.double(1.0),
        hitMultiplicityThreshold = cms.int32(17),
        nominalPedestal = cms.double(3.0),
        pulseShapeParameterSets = cms.VPSet(
            cms.PSet(
                pulseShapeParameters = cms.vdouble(
                    0.0, 100.0, -50.0, 0.0, -15.0, 
                    0.15
                )
            ), 
            cms.PSet(
                pulseShapeParameters = cms.vdouble(
                    100.0, 2000.0, -50.0, 0.0, -5.0, 
                    0.05
                )
            ), 
            cms.PSet(
                pulseShapeParameters = cms.vdouble(
                    2000.0, 1000000.0, -50.0, 0.0, 95.0, 
                    0.0
                )
            ), 
            cms.PSet(
                pulseShapeParameters = cms.vdouble(
                    -1000000.0, 1000000.0, 45.0, 0.1, 1000000.0, 
                    0.0
                )
            )
        )
    ),
    makeRecHits = cms.bool(True),
    processQIE11 = cms.bool(True),
    processQIE8 = cms.bool(True),
    pulseShapeParametersQIE11 = cms.PSet(

    ),
    pulseShapeParametersQIE8 = cms.PSet(
        LeftSlopeCut = cms.vdouble(5.0, 2.55, 2.55),
        LeftSlopeThreshold = cms.vdouble(250.0, 500.0, 100000.0),
        LinearCut = cms.vdouble(-3.0, -0.054, -0.054),
        LinearThreshold = cms.vdouble(20.0, 100.0, 100000.0),
        MinimumChargeThreshold = cms.double(20.0),
        MinimumTS4TS5Threshold = cms.double(100.0),
        R45MinusOneRange = cms.double(0.2),
        R45PlusOneRange = cms.double(0.2),
        RMS8MaxCut = cms.vdouble(-13.5, -11.5, -11.5),
        RMS8MaxThreshold = cms.vdouble(20.0, 100.0, 100000.0),
        RightSlopeCut = cms.vdouble(5.0, 4.15, 4.15),
        RightSlopeSmallCut = cms.vdouble(1.08, 1.16, 1.16),
        RightSlopeSmallThreshold = cms.vdouble(150.0, 200.0, 100000.0),
        RightSlopeThreshold = cms.vdouble(250.0, 400.0, 100000.0),
        TS3TS4ChargeThreshold = cms.double(70.0),
        TS3TS4UpperChargeThreshold = cms.double(20.0),
        TS4TS5ChargeThreshold = cms.double(70.0),
        TS4TS5LowerCut = cms.vdouble(
            -1.0, -0.7, -0.5, -0.4, -0.3, 
            0.1
        ),
        TS4TS5LowerThreshold = cms.vdouble(
            100.0, 120.0, 160.0, 200.0, 300.0, 
            500.0
        ),
        TS4TS5UpperCut = cms.vdouble(1.0, 0.8, 0.75, 0.72),
        TS4TS5UpperThreshold = cms.vdouble(70.0, 90.0, 100.0, 400.0),
        TS5TS6ChargeThreshold = cms.double(70.0),
        TS5TS6UpperChargeThreshold = cms.double(20.0),
        TriangleIgnoreSlow = cms.bool(False),
        TrianglePeakTS = cms.uint32(10000),
        UseDualFit = cms.bool(True)
    ),
    recoParamsFromDB = cms.bool(True),
    saveDroppedInfos = cms.bool(False),
    saveEffectivePedestal = cms.bool(True),
    saveInfos = cms.bool(False),
    setLegacyFlagsQIE11 = cms.bool(False),
    setLegacyFlagsQIE8 = cms.bool(True),
    setNegativeFlagsQIE11 = cms.bool(False),
    setNegativeFlagsQIE8 = cms.bool(True),
    setNoiseFlagsQIE11 = cms.bool(False),
    setNoiseFlagsQIE8 = cms.bool(True),
    setPulseShapeFlagsQIE11 = cms.bool(False),
    setPulseShapeFlagsQIE8 = cms.bool(True),
    sipmQNTStoSum = cms.int32(3),
    sipmQTSShift = cms.int32(0),
    tsFromDB = cms.bool(False),
    use8ts = cms.bool(True)
)


process.hltHcalDigis = cms.EDProducer("HcalRawToDigi",
    ComplainEmptyData = cms.untracked.bool(False),
    ElectronicsMap = cms.string(''),
    ExpectedOrbitMessageTime = cms.untracked.int32(-1),
    FEDs = cms.untracked.vint32(),
    FilterDataQuality = cms.bool(True),
    HcalFirstFED = cms.untracked.int32(700),
    InputLabel = cms.InputTag("rawDataCollector"),
    UnpackCalib = cms.untracked.bool(True),
    UnpackTTP = cms.untracked.bool(True),
    UnpackUMNio = cms.untracked.bool(True),
    UnpackZDC = cms.untracked.bool(True),
    UnpackerMode = cms.untracked.int32(0),
    firstSample = cms.int32(0),
    lastSample = cms.int32(9),
    mightGet = cms.optional.untracked.vstring,
    saveQIE10DataNSamples = cms.untracked.vint32(),
    saveQIE10DataTags = cms.untracked.vstring(),
    saveQIE11DataNSamples = cms.untracked.vint32(),
    saveQIE11DataTags = cms.untracked.vstring(),
    silent = cms.untracked.bool(True)
)


process.hltHfprereco = cms.EDProducer("HFPreReconstructor",
    digiLabel = cms.InputTag("hltHcalDigis"),
    dropZSmarkedPassed = cms.bool(True),
    forceSOI = cms.int32(-1),
    soiShift = cms.int32(0),
    sumAllTimeSlices = cms.bool(False),
    tsFromDB = cms.bool(False)
)


process.hltHfreco = cms.EDProducer("HFPhase1Reconstructor",
    HFStripFilter = cms.PSet(
        gap = cms.int32(2),
        lstrips = cms.int32(2),
        maxStripTime = cms.double(10.0),
        maxThreshold = cms.double(100.0),
        seedHitIetaMax = cms.int32(35),
        stripThreshold = cms.double(40.0),
        timeMax = cms.double(6.0),
        verboseLevel = cms.untracked.int32(10),
        wedgeCut = cms.double(0.05)
    ),
    PETstat = cms.PSet(
        HcalAcceptSeverityLevel = cms.int32(9),
        longETParams = cms.vdouble(
            0.0, 0.0, 0.0, 0.0, 0.0, 
            0.0, 0.0, 0.0, 0.0, 0.0, 
            0.0, 0.0, 0.0
        ),
        longEnergyParams = cms.vdouble(
            43.5, 45.7, 48.32, 51.36, 54.82, 
            58.7, 63.0, 67.72, 72.86, 78.42, 
            84.4, 90.8, 97.62
        ),
        long_R = cms.vdouble(0.98),
        long_R_29 = cms.vdouble(0.8),
        shortETParams = cms.vdouble(
            0.0, 0.0, 0.0, 0.0, 0.0, 
            0.0, 0.0, 0.0, 0.0, 0.0, 
            0.0, 0.0, 0.0
        ),
        shortEnergyParams = cms.vdouble(
            35.1773, 35.37, 35.7933, 36.4472, 37.3317, 
            38.4468, 39.7925, 41.3688, 43.1757, 45.2132, 
            47.4813, 49.98, 52.7093
        ),
        short_R = cms.vdouble(0.8),
        short_R_29 = cms.vdouble(0.8)
    ),
    S8S1stat = cms.PSet(
        HcalAcceptSeverityLevel = cms.int32(9),
        isS8S1 = cms.bool(True),
        longETParams = cms.vdouble(
            0.0, 0.0, 0.0, 0.0, 0.0, 
            0.0, 0.0, 0.0, 0.0, 0.0, 
            0.0, 0.0, 0.0
        ),
        longEnergyParams = cms.vdouble(
            40.0, 100.0, 100.0, 100.0, 100.0, 
            100.0, 100.0, 100.0, 100.0, 100.0, 
            100.0, 100.0, 100.0
        ),
        long_optimumSlope = cms.vdouble(
            0.3, 0.1, 0.1, 0.1, 0.1, 
            0.1, 0.1, 0.1, 0.1, 0.1, 
            0.1, 0.1, 0.1
        ),
        shortETParams = cms.vdouble(
            0.0, 0.0, 0.0, 0.0, 0.0, 
            0.0, 0.0, 0.0, 0.0, 0.0, 
            0.0, 0.0, 0.0
        ),
        shortEnergyParams = cms.vdouble(
            40.0, 100.0, 100.0, 100.0, 100.0, 
            100.0, 100.0, 100.0, 100.0, 100.0, 
            100.0, 100.0, 100.0
        ),
        short_optimumSlope = cms.vdouble(
            0.3, 0.1, 0.1, 0.1, 0.1, 
            0.1, 0.1, 0.1, 0.1, 0.1, 
            0.1, 0.1, 0.1
        )
    ),
    S9S1stat = cms.PSet(
        HcalAcceptSeverityLevel = cms.int32(9),
        isS8S1 = cms.bool(False),
        longETParams = cms.vdouble(
            0.0, 0.0, 0.0, 0.0, 0.0, 
            0.0, 0.0, 0.0, 0.0, 0.0, 
            0.0, 0.0, 0.0
        ),
        longEnergyParams = cms.vdouble(
            43.5, 45.7, 48.32, 51.36, 54.82, 
            58.7, 63.0, 67.72, 72.86, 78.42, 
            84.4, 90.8, 97.62
        ),
        long_optimumSlope = cms.vdouble(
            -99999.0, 0.0164905, 0.0238698, 0.0321383, 0.041296, 
            0.0513428, 0.0622789, 0.0741041, 0.0868186, 0.100422, 
            0.135313, 0.136289, 0.0589927
        ),
        shortETParams = cms.vdouble(
            0.0, 0.0, 0.0, 0.0, 0.0, 
            0.0, 0.0, 0.0, 0.0, 0.0, 
            0.0, 0.0, 0.0
        ),
        shortEnergyParams = cms.vdouble(
            35.1773, 35.37, 35.7933, 36.4472, 37.3317, 
            38.4468, 39.7925, 41.3688, 43.1757, 45.2132, 
            47.4813, 49.98, 52.7093
        ),
        short_optimumSlope = cms.vdouble(
            -99999.0, 0.0164905, 0.0238698, 0.0321383, 0.041296, 
            0.0513428, 0.0622789, 0.0741041, 0.0868186, 0.100422, 
            0.135313, 0.136289, 0.0589927
        )
    ),
    algoConfigClass = cms.string('HFPhase1PMTParams'),
    algorithm = cms.PSet(
        Class = cms.string('HFFlexibleTimeCheck'),
        energyWeights = cms.vdouble(
            1.0, 1.0, 1.0, 0.0, 1.0, 
            0.0, 2.0, 0.0, 2.0, 0.0, 
            2.0, 0.0, 1.0, 0.0, 0.0, 
            1.0, 0.0, 1.0, 0.0, 2.0, 
            0.0, 2.0, 0.0, 2.0, 0.0, 
            1.0
        ),
        rejectAllFailures = cms.bool(True),
        soiPhase = cms.uint32(1),
        tfallIfNoTDC = cms.double(-101.0),
        timeShift = cms.double(0.0),
        tlimits = cms.vdouble(-1000.0, 1000.0, -1000.0, 1000.0),
        triseIfNoTDC = cms.double(-100.0)
    ),
    checkChannelQualityForDepth3and4 = cms.bool(False),
    inputLabel = cms.InputTag("hltHfprereco"),
    runHFStripFilter = cms.bool(False),
    setNoiseFlags = cms.bool(True),
    useChannelQualityFromDB = cms.bool(False)
)


process.hltHoreco = cms.EDProducer("HcalHitReconstructor",
    HFInWindowStat = cms.PSet(

    ),
    PETstat = cms.PSet(

    ),
    S8S1stat = cms.PSet(

    ),
    S9S1stat = cms.PSet(

    ),
    Subdetector = cms.string('HO'),
    correctForPhaseContainment = cms.bool(True),
    correctForTimeslew = cms.bool(True),
    correctTiming = cms.bool(False),
    correctionPhaseNS = cms.double(13.0),
    dataOOTCorrectionCategory = cms.string('Data'),
    dataOOTCorrectionName = cms.string(''),
    digiLabel = cms.InputTag("hltHcalDigis"),
    digiTimeFromDB = cms.bool(True),
    digistat = cms.PSet(

    ),
    dropZSmarkedPassed = cms.bool(True),
    firstAuxTS = cms.int32(4),
    firstSample = cms.int32(4),
    hfTimingTrustParameters = cms.PSet(

    ),
    mcOOTCorrectionCategory = cms.string('MC'),
    mcOOTCorrectionName = cms.string(''),
    recoParamsFromDB = cms.bool(True),
    samplesToAdd = cms.int32(4),
    saturationParameters = cms.PSet(
        maxADCvalue = cms.int32(127)
    ),
    setHSCPFlags = cms.bool(False),
    setNegativeFlags = cms.bool(False),
    setNoiseFlags = cms.bool(False),
    setPulseShapeFlags = cms.bool(False),
    setSaturationFlags = cms.bool(False),
    setTimingTrustFlags = cms.bool(False),
    tsFromDB = cms.bool(True),
    useLeakCorrection = cms.bool(False)
)


process.hltIter0Phase2L3FromL1TkMuonCkfTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('none'),
    SimpleMagneticField = cms.string('ParabolicMf'),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('HLTIter0Phase2L3FromL1TkMuonPSetGroupedCkfTrajectoryBuilderIT')
    ),
    TrajectoryCleaner = cms.string('hltESPTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterialParabolicMf'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialParabolicMfOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(False),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(100000),
    maxSeedsBeforeCleaning = cms.uint32(1000),
    src = cms.InputTag("hltIter0Phase2L3FromL1TkMuonPixelSeedsFromPixelTracks"),
    useHitsSplitting = cms.bool(True)
)


process.hltIter0Phase2L3FromL1TkMuonCtfWithMaterialTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('hltIter0'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(True),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string(''),
    Propagator = cms.string('hltESPRungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("hltIter0Phase2L3FromL1TkMuonCkfTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.hltIter0Phase2L3FromL1TkMuonPixelSeedsFromPixelTracks = cms.EDProducer("SeedGeneratorFromProtoTracksEDProducer",
    InputCollection = cms.InputTag("hltPhase2L3FromL1TkMuonPixelTracks"),
    InputVertexCollection = cms.InputTag("hltPhase2L3FromL1TkMuonTrimmedPixelVertices"),
    SeedCreatorPSet = cms.PSet(
        refToPSet_ = cms.string('hltPhase2SeedFromProtoTracks')
    ),
    TTRHBuilder = cms.string('WithTrackAngle'),
    originHalfLength = cms.double(0.3),
    originRadius = cms.double(0.1),
    useEventsWithNoVertex = cms.bool(True),
    usePV = cms.bool(False),
    useProtoTrackKinematics = cms.bool(False)
)


process.hltIter0Phase2L3FromL1TkMuonTrackCutClassifier = cms.EDProducer("TrackCutClassifier",
    beamspot = cms.InputTag("offlineBeamSpot"),
    ignoreVertices = cms.bool(False),
    mva = cms.PSet(
        dr_par = cms.PSet(
            d0err = cms.vdouble(0.003, 0.003, 3.40282346639e+38),
            d0err_par = cms.vdouble(0.001, 0.001, 3.40282346639e+38),
            dr_exp = cms.vint32(4, 4, 2147483647),
            dr_par1 = cms.vdouble(0.4, 0.4, 3.40282346639e+38),
            dr_par2 = cms.vdouble(0.3, 0.3, 3.40282346639e+38)
        ),
        dz_par = cms.PSet(
            dz_exp = cms.vint32(4, 4, 2147483647),
            dz_par1 = cms.vdouble(0.4, 0.4, 3.40282346639e+38),
            dz_par2 = cms.vdouble(0.35, 0.35, 3.40282346639e+38)
        ),
        maxChi2 = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
        maxChi2n = cms.vdouble(1.2, 1.0, 0.7),
        maxDr = cms.vdouble(0.5, 0.03, 3.40282346639e+38),
        maxDz = cms.vdouble(0.5, 0.2, 3.40282346639e+38),
        maxDzWrtBS = cms.vdouble(3.40282346639e+38, 24.0, 100.0),
        maxLostLayers = cms.vint32(1, 1, 1),
        min3DLayers = cms.vint32(0, 3, 4),
        minLayers = cms.vint32(3, 3, 4),
        minNVtxTrk = cms.int32(3),
        minNdof = cms.vdouble(1e-05, 1e-05, 1e-05),
        minPixelHits = cms.vint32(0, 3, 4)
    ),
    qualityCuts = cms.vdouble(-0.7, 0.1, 0.7),
    src = cms.InputTag("hltIter0Phase2L3FromL1TkMuonCtfWithMaterialTracks"),
    vertices = cms.InputTag("hltPhase2L3FromL1TkMuonTrimmedPixelVertices")
)


process.hltIter0Phase2L3FromL1TkMuonTrackSelectionHighPurity = cms.EDProducer("TrackCollectionFilterCloner",
    copyExtras = cms.untracked.bool(True),
    copyTrajectories = cms.untracked.bool(False),
    minQuality = cms.string('highPurity'),
    originalMVAVals = cms.InputTag("hltIter0Phase2L3FromL1TkMuonTrackCutClassifier","MVAValues"),
    originalQualVals = cms.InputTag("hltIter0Phase2L3FromL1TkMuonTrackCutClassifier","QualityMasks"),
    originalSource = cms.InputTag("hltIter0Phase2L3FromL1TkMuonCtfWithMaterialTracks")
)


process.hltIter2Phase2L3FromL1TkMuonCkfTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("hltIter2Phase2L3FromL1TkMuonMaskedMeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string('ParabolicMf'),
    TrajectoryBuilder = cms.string(''),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('HLTIter2Phase2L3FromL1TkMuonPSetGroupedCkfTrajectoryBuilderIT')
    ),
    TrajectoryCleaner = cms.string('hltESPTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterialParabolicMf'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialParabolicMfOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(False),
    doSeedingRegionRebuilding = cms.bool(False),
    maxNSeeds = cms.uint32(100000),
    maxSeedsBeforeCleaning = cms.uint32(1000),
    src = cms.InputTag("hltIter2Phase2L3FromL1TkMuonPixelSeedsFiltered","","MYHLT"),
    useHitsSplitting = cms.bool(False)
)


process.hltIter2Phase2L3FromL1TkMuonClustersRefRemoval = cms.EDProducer("TrackClusterRemoverPhase2",
    TrackQuality = cms.string('highPurity'),
    maxChi2 = cms.double(16.0),
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    oldClusterRemovalInfo = cms.InputTag(""),
    overrideTrkQuals = cms.InputTag(""),
    phase2OTClusters = cms.InputTag("siPhase2Clusters"),
    phase2pixelClusters = cms.InputTag("siPixelClusters"),
    trackClassifier = cms.InputTag("","QualityMasks"),
    trajectories = cms.InputTag("hltIter0Phase2L3FromL1TkMuonTrackSelectionHighPurity")
)


process.hltIter2Phase2L3FromL1TkMuonCtfWithMaterialTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('hltIter2'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(True),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("hltIter2Phase2L3FromL1TkMuonMaskedMeasurementTrackerEvent"),
    NavigationSchool = cms.string(''),
    Propagator = cms.string('hltESPRungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("hltIter2Phase2L3FromL1TkMuonCkfTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.hltIter2Phase2L3FromL1TkMuonMaskedMeasurementTrackerEvent = cms.EDProducer("MaskedMeasurementTrackerEventProducer",
    OnDemand = cms.bool(False),
    phase2clustersToSkip = cms.InputTag("hltIter2Phase2L3FromL1TkMuonClustersRefRemoval"),
    src = cms.InputTag("MeasurementTrackerEvent")
)


process.hltIter2Phase2L3FromL1TkMuonMerged = cms.EDProducer("TrackListMerger",
    Epsilon = cms.double(-0.001),
    FoundHitBonus = cms.double(5.0),
    LostHitPenalty = cms.double(20.0),
    MaxNormalizedChisq = cms.double(1000.0),
    MinFound = cms.int32(3),
    MinPT = cms.double(0.05),
    ShareFrac = cms.double(0.19),
    TrackProducers = cms.VInputTag("hltIter0Phase2L3FromL1TkMuonTrackSelectionHighPurity", "hltIter2Phase2L3FromL1TkMuonTrackSelectionHighPurity"),
    allowFirstHitShare = cms.bool(True),
    copyExtras = cms.untracked.bool(True),
    copyMVA = cms.bool(False),
    hasSelector = cms.vint32(0, 0),
    indivShareFrac = cms.vdouble(1.0, 1.0),
    newQuality = cms.string('confirmed'),
    selectedTrackQuals = cms.VInputTag("hltIter0Phase2L3FromL1TkMuonTrackSelectionHighPurity", "hltIter2Phase2L3FromL1TkMuonTrackSelectionHighPurity"),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(False),
        tLists = cms.vint32(0, 1)
    )),
    trackAlgoPriorityOrder = cms.string('hltESPTrackAlgoPriorityOrder'),
    writeOnlyTrkQuals = cms.bool(False)
)


process.hltIter2Phase2L3FromL1TkMuonPixelClusterCheck = cms.EDProducer("ClusterCheckerEDProducer",
    ClusterCollectionLabel = cms.InputTag("MeasurementTrackerEvent"),
    MaxNumberOfCosmicClusters = cms.uint32(50000),
    MaxNumberOfPixelClusters = cms.uint32(10000),
    PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
    cut = cms.string(''),
    doClusterCheck = cms.bool(False),
    silentClusterCheck = cms.untracked.bool(False)
)


process.hltIter2Phase2L3FromL1TkMuonPixelHitDoublets = cms.EDProducer("HitPairEDProducer",
    clusterCheck = cms.InputTag("hltIter2Phase2L3FromL1TkMuonPixelClusterCheck"),
    layerPairs = cms.vuint32(0, 1),
    maxElement = cms.uint32(0),
    produceIntermediateHitDoublets = cms.bool(True),
    produceSeedingHitSets = cms.bool(False),
    seedingLayers = cms.InputTag("hltIter2Phase2L3FromL1TkMuonPixelLayerTriplets"),
    trackingRegions = cms.InputTag("hltPhase2L3FromL1TkMuonPixelTracksTrackingRegions"),
    trackingRegionsSeedingLayers = cms.InputTag("")
)


process.hltIter2Phase2L3FromL1TkMuonPixelHitTriplets = cms.EDProducer("CAHitTripletEDProducer",
    CAHardPtCut = cms.double(0.3),
    CAPhiCut = cms.double(0.1),
    CAThetaCut = cms.double(0.015),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    doublets = cms.InputTag("hltIter2Phase2L3FromL1TkMuonPixelHitDoublets"),
    extraHitRPhitolerance = cms.double(0.032),
    maxChi2 = cms.PSet(
        enabled = cms.bool(True),
        pt1 = cms.double(0.8),
        pt2 = cms.double(8.0),
        value1 = cms.double(100.0),
        value2 = cms.double(6.0)
    ),
    useBendingCorrection = cms.bool(True)
)


process.hltIter2Phase2L3FromL1TkMuonPixelLayerTriplets = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("hltIter2Phase2L3FromL1TkMuonClustersRefRemoval")
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("hltIter2Phase2L3FromL1TkMuonClustersRefRemoval")
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring(
        'BPix1+BPix2+BPix3', 
        'BPix2+BPix3+BPix4', 
        'BPix1+BPix3+BPix4', 
        'BPix1+BPix2+BPix4', 
        'BPix2+BPix3+FPix1_pos', 
        'BPix2+BPix3+FPix1_neg', 
        'BPix1+BPix2+FPix1_pos', 
        'BPix1+BPix2+FPix1_neg', 
        'BPix2+FPix1_pos+FPix2_pos', 
        'BPix2+FPix1_neg+FPix2_neg', 
        'BPix1+FPix1_pos+FPix2_pos', 
        'BPix1+FPix1_neg+FPix2_neg', 
        'FPix1_pos+FPix2_pos+FPix3_pos', 
        'FPix1_neg+FPix2_neg+FPix3_neg', 
        'BPix1+BPix3+FPix1_pos', 
        'BPix1+BPix2+FPix2_pos', 
        'BPix1+BPix3+FPix1_neg', 
        'BPix1+BPix2+FPix2_neg', 
        'BPix1+FPix2_neg+FPix3_neg', 
        'BPix1+FPix1_neg+FPix3_neg', 
        'BPix1+FPix2_pos+FPix3_pos', 
        'BPix1+FPix1_pos+FPix3_pos'
    )
)


process.hltIter2Phase2L3FromL1TkMuonPixelSeeds = cms.EDProducer("SeedCreatorFromRegionConsecutiveHitsTripletOnlyEDProducer",
    MinOneOverPtError = cms.double(1.0),
    OriginTransverseErrorMultiplier = cms.double(1.0),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedMomentumForBOFF = cms.double(5.0),
    TTRHBuilder = cms.string('WithTrackAngle'),
    forceKinematicWithRegionDirection = cms.bool(False),
    magneticField = cms.string('ParabolicMf'),
    propagator = cms.string('PropagatorWithMaterialParabolicMf'),
    seedingHitSets = cms.InputTag("hltIter2Phase2L3FromL1TkMuonPixelHitTriplets")
)


process.hltIter2Phase2L3FromL1TkMuonPixelSeedsFiltered = cms.EDProducer("MuonHLTSeedMVAClassifier",
    L1TkMu = cms.InputTag("L1TkMuons","","MYHLT"),
    L2Muon = cms.InputTag("hltL2MuonFromL1TkMuonCandidates","","MYHLT"),
    doSort = cms.bool(False),
    mvaCut_B = cms.double(0),
    mvaCut_E = cms.double(0),
    mvaFile_B_0 = cms.FileInPath('HLTrigger/MuonHLTSeedMVAClassifier/data/PU200_Barrel_NThltIter2FromL1_0.xml'),
    mvaFile_B_1 = cms.FileInPath('HLTrigger/MuonHLTSeedMVAClassifier/data/PU200_Barrel_NThltIter2FromL1_1.xml'),
    mvaFile_B_2 = cms.FileInPath('HLTrigger/MuonHLTSeedMVAClassifier/data/PU200_Barrel_NThltIter2FromL1_2.xml'),
    mvaFile_B_3 = cms.FileInPath('HLTrigger/MuonHLTSeedMVAClassifier/data/PU200_Barrel_NThltIter2FromL1_3.xml'),
    mvaFile_E_0 = cms.FileInPath('HLTrigger/MuonHLTSeedMVAClassifier/data/PU200_Endcap_NThltIter2FromL1_0.xml'),
    mvaFile_E_1 = cms.FileInPath('HLTrigger/MuonHLTSeedMVAClassifier/data/PU200_Endcap_NThltIter2FromL1_1.xml'),
    mvaFile_E_2 = cms.FileInPath('HLTrigger/MuonHLTSeedMVAClassifier/data/PU200_Endcap_NThltIter2FromL1_2.xml'),
    mvaFile_E_3 = cms.FileInPath('HLTrigger/MuonHLTSeedMVAClassifier/data/PU200_Endcap_NThltIter2FromL1_3.xml'),
    mvaScaleMean_B = cms.vdouble(
        0.000703194881993, 3.08981188359e-06, 2.59613491757e-06, 1.37719258533e-06, 3.82594532961e-06, 
        -0.00021582407927, 0.000249656891552, -0.000343988776655, -0.000585463770944, 0.0709317892682, 
        -1.05282128557e-05, 0.101715474828, 0.0972569135971, 0.0848868199517
    ),
    mvaScaleMean_E = cms.vdouble(
        0.000333544383405, 1.1008473944e-06, 2.24234916761e-06, 1.13050755579e-06, 3.63543469127e-06, 
        -2.78107232601e-05, 0.000566807881865, 0.000114494773151, 0.0014294411123, 0.0940466897816, 
        1.59869383095e-05, 0.117432407995, 0.213271662828, 0.203646592
    ),
    mvaScaleStd_B = cms.vdouble(
        0.000881076877579, 2.78865847185e-06, 3.45817625575e-06, 2.68523260404e-06, 6.27869022208e-06, 
        0.0936444818271, 0.597371997825, 0.742754089865, 0.999999828616, 0.0386637793634, 
        0.0780337325204, 0.250328505572, 0.242358790594, 0.220620938324
    ),
    mvaScaleStd_E = cms.vdouble(
        0.000470487609711, 2.38079543031e-06, 9.479424257e-06, 2.54021080817e-06, 5.07665292593e-06, 
        0.0476427385762, 0.666419872434, 0.425050278609, 0.999998978349, 0.0559697341716, 
        0.107217497328, 0.255717695535, 0.30251449474, 0.291716810133
    ),
    nSeedsMax_B = cms.int32(-1),
    nSeedsMax_E = cms.int32(-1),
    src = cms.InputTag("hltIter2Phase2L3FromL1TkMuonPixelSeeds","","MYHLT")
)


process.hltIter2Phase2L3FromL1TkMuonTrackCutClassifier = cms.EDProducer("TrackCutClassifier",
    beamspot = cms.InputTag("offlineBeamSpot"),
    ignoreVertices = cms.bool(False),
    mva = cms.PSet(
        dr_par = cms.PSet(
            d0err = cms.vdouble(0.003, 0.003, 3.40282346639e+38),
            d0err_par = cms.vdouble(0.001, 0.001, 3.40282346639e+38),
            dr_exp = cms.vint32(4, 4, 2147483647),
            dr_par1 = cms.vdouble(3.40282346639e+38, 0.4, 3.40282346639e+38),
            dr_par2 = cms.vdouble(3.40282346639e+38, 0.3, 3.40282346639e+38)
        ),
        dz_par = cms.PSet(
            dz_exp = cms.vint32(4, 4, 2147483647),
            dz_par1 = cms.vdouble(3.40282346639e+38, 0.4, 3.40282346639e+38),
            dz_par2 = cms.vdouble(3.40282346639e+38, 0.35, 3.40282346639e+38)
        ),
        maxChi2 = cms.vdouble(9999.0, 25.0, 3.40282346639e+38),
        maxChi2n = cms.vdouble(1.2, 1.0, 0.7),
        maxDr = cms.vdouble(0.5, 0.03, 3.40282346639e+38),
        maxDz = cms.vdouble(0.5, 0.2, 3.40282346639e+38),
        maxDzWrtBS = cms.vdouble(3.40282346639e+38, 24.0, 100.0),
        maxLostLayers = cms.vint32(1, 1, 1),
        min3DLayers = cms.vint32(0, 0, 0),
        minLayers = cms.vint32(3, 3, 3),
        minNVtxTrk = cms.int32(3),
        minNdof = cms.vdouble(1e-05, 1e-05, 1e-05),
        minPixelHits = cms.vint32(0, 0, 0)
    ),
    qualityCuts = cms.vdouble(-0.7, 0.1, 0.7),
    src = cms.InputTag("hltIter2Phase2L3FromL1TkMuonCtfWithMaterialTracks"),
    vertices = cms.InputTag("hltPhase2L3FromL1TkMuonTrimmedPixelVertices")
)


process.hltIter2Phase2L3FromL1TkMuonTrackSelectionHighPurity = cms.EDProducer("TrackCollectionFilterCloner",
    copyExtras = cms.untracked.bool(True),
    copyTrajectories = cms.untracked.bool(False),
    minQuality = cms.string('highPurity'),
    originalMVAVals = cms.InputTag("hltIter2Phase2L3FromL1TkMuonTrackCutClassifier","MVAValues"),
    originalQualVals = cms.InputTag("hltIter2Phase2L3FromL1TkMuonTrackCutClassifier","QualityMasks"),
    originalSource = cms.InputTag("hltIter2Phase2L3FromL1TkMuonCtfWithMaterialTracks")
)


process.hltL2MuonFromL1TkMuonCandidates = cms.EDProducer("L2MuonCandidateProducer",
    InputObjects = cms.InputTag("hltL2MuonsFromL1TkMuon","UpdatedAtVtx")
)


process.hltL2MuonSeedsFromL1TkMuon = cms.EDProducer("L2MuonSeedGeneratorFromL1TkMu",
    EtaMatchingBins = cms.vdouble(0.0, 2.5),
    InputObjects = cms.InputTag("L1TkMuons","","MYHLT"),
    L1MaxEta = cms.double(2.5),
    L1MinPt = cms.double(0.0),
    MatchDR = cms.vdouble(0.3),
    MinPL1Tk = cms.double(3.5),
    MinPtL1TkBarrel = cms.double(3.5),
    OfflineSeedLabel = cms.untracked.InputTag("hltL2OfflineMuonSeeds"),
    Propagator = cms.string('SteppingHelixPropagatorAny'),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    SetMinPtBarrelTo = cms.double(3.5),
    SetMinPtEndcapTo = cms.double(1.0),
    UseOfflineSeed = cms.untracked.bool(True),
    UseUnassociatedL1 = cms.bool(False)
)


process.hltL2MuonsFromL1TkMuon = cms.EDProducer("L2MuonProducer",
    DoSeedRefit = cms.bool(False),
    InputObjects = cms.InputTag("hltL2MuonSeedsFromL1TkMuon"),
    L2TrajBuilderParameters = cms.PSet(
        BWFilterParameters = cms.PSet(
            BWSeedType = cms.string('fromGenerator'),
            CSCRecSegmentLabel = cms.InputTag("hltCscSegments"),
            DTRecSegmentLabel = cms.InputTag("hltDt4DSegments"),
            EnableCSCMeasurement = cms.bool(True),
            EnableDTMeasurement = cms.bool(True),
            EnableRPCMeasurement = cms.bool(True),
            FitDirection = cms.string('outsideIn'),
            MaxChi2 = cms.double(100.0),
            MuonTrajectoryUpdatorParameters = cms.PSet(
                ExcludeRPCFromFit = cms.bool(False),
                Granularity = cms.int32(0),
                MaxChi2 = cms.double(25.0),
                RescaleError = cms.bool(False),
                RescaleErrorFactor = cms.double(100.0),
                UseInvalidHits = cms.bool(True)
            ),
            NumberOfSigma = cms.double(3.0),
            Propagator = cms.string('hltESPFastSteppingHelixPropagatorAny'),
            RPCRecSegmentLabel = cms.InputTag("hltRpcRecHits")
        ),
        DoBackwardFilter = cms.bool(True),
        DoRefit = cms.bool(False),
        DoSeedRefit = cms.bool(False),
        FilterParameters = cms.PSet(
            CSCRecSegmentLabel = cms.InputTag("hltCscSegments"),
            DTRecSegmentLabel = cms.InputTag("hltDt4DSegments"),
            EnableCSCMeasurement = cms.bool(True),
            EnableDTMeasurement = cms.bool(True),
            EnableGEMMeasurement = cms.bool(True),
            EnableME0Measurement = cms.bool(True),
            EnableRPCMeasurement = cms.bool(True),
            FitDirection = cms.string('insideOut'),
            GEMRecSegmentLabel = cms.InputTag("hltGemRecHits"),
            ME0RecSegmentLabel = cms.InputTag("hltMe0Segments"),
            MaxChi2 = cms.double(1000.0),
            MuonTrajectoryUpdatorParameters = cms.PSet(
                ExcludeRPCFromFit = cms.bool(False),
                Granularity = cms.int32(0),
                MaxChi2 = cms.double(25.0),
                RescaleError = cms.bool(False),
                RescaleErrorFactor = cms.double(100.0),
                UseInvalidHits = cms.bool(True)
            ),
            NumberOfSigma = cms.double(3.0),
            Propagator = cms.string('hltESPFastSteppingHelixPropagatorAny'),
            RPCRecSegmentLabel = cms.InputTag("hltRpcRecHits")
        ),
        NavigationType = cms.string('Standard'),
        SeedPosition = cms.string('in'),
        SeedPropagator = cms.string('hltESPFastSteppingHelixPropagatorAny'),
        SeedTransformerParameters = cms.PSet(
            Fitter = cms.string('hltESPKFFittingSmootherForL2Muon'),
            MuonRecHitBuilder = cms.string('hltESPMuonTransientTrackingRecHitBuilder'),
            NMinRecHits = cms.uint32(2),
            Propagator = cms.string('hltESPFastSteppingHelixPropagatorAny'),
            RescaleError = cms.double(100.0),
            UseSubRecHits = cms.bool(False)
        )
    ),
    MuonTrajectoryBuilder = cms.string('Exhaustive'),
    SeedTransformerParameters = cms.PSet(
        Fitter = cms.string('hltESPKFFittingSmootherForL2Muon'),
        MuonRecHitBuilder = cms.string('hltESPMuonTransientTrackingRecHitBuilder'),
        NMinRecHits = cms.uint32(2),
        Propagator = cms.string('hltESPFastSteppingHelixPropagatorAny'),
        RescaleError = cms.double(100.0),
        UseSubRecHits = cms.bool(False)
    ),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring(
            'hltESPFastSteppingHelixPropagatorAny', 
            'hltESPFastSteppingHelixPropagatorOpposite'
        ),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPosition = cms.vdouble(0.0, 0.0, 0.0),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('hltESPFastSteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('hltESPKFTrajectorySmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        VertexConstraint = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot")
    )
)


process.hltL2OfflineMuonSeeds = cms.EDProducer("MuonSeedGenerator",
    CSCRecSegmentLabel = cms.InputTag("hltCscSegments"),
    CSC_01 = cms.vdouble(
        0.166, 0.0, 0.0, 0.031, 0.0, 
        0.0
    ),
    CSC_01_1_scale = cms.vdouble(-1.915329, 0.0),
    CSC_02 = cms.vdouble(
        0.612, -0.207, 0.0, 0.067, -0.001, 
        0.0
    ),
    CSC_03 = cms.vdouble(
        0.787, -0.338, 0.029, 0.101, -0.008, 
        0.0
    ),
    CSC_12 = cms.vdouble(
        -0.161, 0.254, -0.047, 0.042, -0.007, 
        0.0
    ),
    CSC_12_1_scale = cms.vdouble(-6.434242, 0.0),
    CSC_12_2_scale = cms.vdouble(-1.63622, 0.0),
    CSC_12_3_scale = cms.vdouble(-1.63622, 0.0),
    CSC_13 = cms.vdouble(
        0.901, -1.302, 0.533, 0.045, 0.005, 
        0.0
    ),
    CSC_13_2_scale = cms.vdouble(-6.077936, 0.0),
    CSC_13_3_scale = cms.vdouble(-1.701268, 0.0),
    CSC_14 = cms.vdouble(
        0.606, -0.181, -0.002, 0.111, -0.003, 
        0.0
    ),
    CSC_14_3_scale = cms.vdouble(-1.969563, 0.0),
    CSC_23 = cms.vdouble(
        -0.081, 0.113, -0.029, 0.015, 0.008, 
        0.0
    ),
    CSC_23_1_scale = cms.vdouble(-19.084285, 0.0),
    CSC_23_2_scale = cms.vdouble(-6.079917, 0.0),
    CSC_24 = cms.vdouble(
        0.004, 0.021, -0.002, 0.053, 0.0, 
        0.0
    ),
    CSC_24_1_scale = cms.vdouble(-6.055701, 0.0),
    CSC_34 = cms.vdouble(
        0.062, -0.067, 0.019, 0.021, 0.003, 
        0.0
    ),
    CSC_34_1_scale = cms.vdouble(-11.520507, 0.0),
    DTRecSegmentLabel = cms.InputTag("hltDt4DSegments"),
    DT_12 = cms.vdouble(
        0.183, 0.054, -0.087, 0.028, 0.002, 
        0.0
    ),
    DT_12_1_scale = cms.vdouble(-3.692398, 0.0),
    DT_12_2_scale = cms.vdouble(-3.518165, 0.0),
    DT_13 = cms.vdouble(
        0.315, 0.068, -0.127, 0.051, -0.002, 
        0.0
    ),
    DT_13_1_scale = cms.vdouble(-4.520923, 0.0),
    DT_13_2_scale = cms.vdouble(-4.257687, 0.0),
    DT_14 = cms.vdouble(
        0.359, 0.052, -0.107, 0.072, -0.004, 
        0.0
    ),
    DT_14_1_scale = cms.vdouble(-5.644816, 0.0),
    DT_14_2_scale = cms.vdouble(-4.808546, 0.0),
    DT_23 = cms.vdouble(
        0.13, 0.023, -0.057, 0.028, 0.004, 
        0.0
    ),
    DT_23_1_scale = cms.vdouble(-5.320346, 0.0),
    DT_23_2_scale = cms.vdouble(-5.117625, 0.0),
    DT_24 = cms.vdouble(
        0.176, 0.014, -0.051, 0.051, 0.003, 
        0.0
    ),
    DT_24_1_scale = cms.vdouble(-7.490909, 0.0),
    DT_24_2_scale = cms.vdouble(-6.63094, 0.0),
    DT_34 = cms.vdouble(
        0.044, 0.004, -0.013, 0.029, 0.003, 
        0.0
    ),
    DT_34_1_scale = cms.vdouble(-13.783765, 0.0),
    DT_34_2_scale = cms.vdouble(-11.901897, 0.0),
    EnableCSCMeasurement = cms.bool(True),
    EnableDTMeasurement = cms.bool(True),
    EnableME0Measurement = cms.bool(False),
    ME0RecSegmentLabel = cms.InputTag("hltMe0Segments"),
    OL_1213 = cms.vdouble(
        0.96, -0.737, 0.0, 0.052, 0.0, 
        0.0
    ),
    OL_1213_0_scale = cms.vdouble(-4.488158, 0.0),
    OL_1222 = cms.vdouble(
        0.848, -0.591, 0.0, 0.062, 0.0, 
        0.0
    ),
    OL_1222_0_scale = cms.vdouble(-5.810449, 0.0),
    OL_1232 = cms.vdouble(
        0.184, 0.0, 0.0, 0.066, 0.0, 
        0.0
    ),
    OL_1232_0_scale = cms.vdouble(-5.964634, 0.0),
    OL_2213 = cms.vdouble(
        0.117, 0.0, 0.0, 0.044, 0.0, 
        0.0
    ),
    OL_2213_0_scale = cms.vdouble(-7.239789, 0.0),
    OL_2222 = cms.vdouble(
        0.107, 0.0, 0.0, 0.04, 0.0, 
        0.0
    ),
    OL_2222_0_scale = cms.vdouble(-7.667231, 0.0),
    SMB_10 = cms.vdouble(
        1.387, -0.038, 0.0, 0.19, 0.0, 
        0.0
    ),
    SMB_10_0_scale = cms.vdouble(2.448566, 0.0),
    SMB_11 = cms.vdouble(
        1.247, 0.72, -0.802, 0.229, -0.075, 
        0.0
    ),
    SMB_11_0_scale = cms.vdouble(2.56363, 0.0),
    SMB_12 = cms.vdouble(
        2.128, -0.956, 0.0, 0.199, 0.0, 
        0.0
    ),
    SMB_12_0_scale = cms.vdouble(2.283221, 0.0),
    SMB_20 = cms.vdouble(
        1.011, -0.052, 0.0, 0.188, 0.0, 
        0.0
    ),
    SMB_20_0_scale = cms.vdouble(1.486168, 0.0),
    SMB_21 = cms.vdouble(
        1.043, -0.124, 0.0, 0.183, 0.0, 
        0.0
    ),
    SMB_21_0_scale = cms.vdouble(1.58384, 0.0),
    SMB_22 = cms.vdouble(
        1.474, -0.758, 0.0, 0.185, 0.0, 
        0.0
    ),
    SMB_22_0_scale = cms.vdouble(1.346681, 0.0),
    SMB_30 = cms.vdouble(
        0.505, -0.022, 0.0, 0.215, 0.0, 
        0.0
    ),
    SMB_30_0_scale = cms.vdouble(-3.629838, 0.0),
    SMB_31 = cms.vdouble(
        0.549, -0.145, 0.0, 0.207, 0.0, 
        0.0
    ),
    SMB_31_0_scale = cms.vdouble(-3.323768, 0.0),
    SMB_32 = cms.vdouble(
        0.67, -0.327, 0.0, 0.22, 0.0, 
        0.0
    ),
    SMB_32_0_scale = cms.vdouble(-3.054156, 0.0),
    SME_11 = cms.vdouble(
        3.295, -1.527, 0.112, 0.378, 0.02, 
        0.0
    ),
    SME_11_0_scale = cms.vdouble(1.325085, 0.0),
    SME_12 = cms.vdouble(
        0.102, 0.599, 0.0, 0.38, 0.0, 
        0.0
    ),
    SME_12_0_scale = cms.vdouble(2.279181, 0.0),
    SME_13 = cms.vdouble(
        -1.286, 1.711, 0.0, 0.356, 0.0, 
        0.0
    ),
    SME_13_0_scale = cms.vdouble(0.104905, 0.0),
    SME_21 = cms.vdouble(
        -0.529, 1.194, -0.358, 0.472, 0.086, 
        0.0
    ),
    SME_21_0_scale = cms.vdouble(-0.040862, 0.0),
    SME_22 = cms.vdouble(
        -1.207, 1.491, -0.251, 0.189, 0.243, 
        0.0
    ),
    SME_22_0_scale = cms.vdouble(-3.457901, 0.0),
    SME_31 = cms.vdouble(
        -1.594, 1.482, -0.317, 0.487, 0.097, 
        0.0
    ),
    SME_32 = cms.vdouble(
        -0.901, 1.333, -0.47, 0.41, 0.073, 
        0.0
    ),
    SME_41 = cms.vdouble(
        -0.003, 0.005, 0.005, 0.608, 0.076, 
        0.0
    ),
    SME_42 = cms.vdouble(
        -0.003, 0.005, 0.005, 0.608, 0.076, 
        0.0
    ),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    crackEtas = cms.vdouble(0.2, 1.6, 1.7),
    crackWindow = cms.double(0.04),
    deltaEtaCrackSearchWindow = cms.double(0.25),
    deltaEtaSearchWindow = cms.double(0.2),
    deltaPhiSearchWindow = cms.double(0.25),
    scaleDT = cms.bool(True)
)


process.hltL3MuonsPhase2L3Links = cms.EDProducer("MuonLinksProducer",
    inputCollection = cms.InputTag("hltPhase2L3Muons")
)


process.hltL3MuonsPhase2L3OI = cms.EDProducer("L3MuonProducer",
    L3TrajBuilderParameters = cms.PSet(
        GlbRefitterParameters = cms.PSet(
            CSCRecSegmentLabel = cms.InputTag("hltCscSegments"),
            Chi2CutCSC = cms.double(150.0),
            Chi2CutDT = cms.double(10.0),
            Chi2CutRPC = cms.double(1.0),
            DTRecSegmentLabel = cms.InputTag("hltDt4DSegments"),
            DYTthrs = cms.vint32(30, 15),
            DoPredictionsOnly = cms.bool(False),
            Fitter = cms.string('hltESPL3MuKFTrajectoryFitter'),
            HitThreshold = cms.int32(1),
            MuonHitsOption = cms.int32(1),
            MuonRecHitBuilder = cms.string('hltESPMuonTransientTrackingRecHitBuilder'),
            PropDirForCosmics = cms.bool(False),
            Propagator = cms.string('hltESPSmartPropagatorAny'),
            RefitDirection = cms.string('insideOut'),
            RefitFlag = cms.bool(True),
            RefitRPCHits = cms.bool(True),
            SkipStation = cms.int32(-1),
            TrackerRecHitBuilder = cms.string('WithTrackAngle'),
            TrackerSkipSection = cms.int32(-1),
            TrackerSkipSystem = cms.int32(-1)
        ),
        GlobalMuonTrackMatcher = cms.PSet(
            Chi2Cut_1 = cms.double(50.0),
            Chi2Cut_2 = cms.double(50.0),
            Chi2Cut_3 = cms.double(200.0),
            DeltaDCut_1 = cms.double(40.0),
            DeltaDCut_2 = cms.double(10.0),
            DeltaDCut_3 = cms.double(15.0),
            DeltaRCut_1 = cms.double(0.1),
            DeltaRCut_2 = cms.double(0.2),
            DeltaRCut_3 = cms.double(1.0),
            Eta_threshold = cms.double(1.2),
            LocChi2Cut = cms.double(0.001),
            MinP = cms.double(2.5),
            MinPt = cms.double(1.0),
            Propagator = cms.string('hltESPSmartPropagator'),
            Pt_threshold1 = cms.double(0.0),
            Pt_threshold2 = cms.double(999999999.0),
            Quality_1 = cms.double(20.0),
            Quality_2 = cms.double(15.0),
            Quality_3 = cms.double(7.0)
        ),
        MuonRecHitBuilder = cms.string('hltESPMuonTransientTrackingRecHitBuilder'),
        MuonTrackingRegionBuilder = cms.PSet(
            DeltaEta = cms.double(0.2),
            DeltaPhi = cms.double(0.15),
            DeltaR = cms.double(0.025),
            DeltaZ = cms.double(24.2),
            EtaR_UpperLimit_Par1 = cms.double(0.25),
            EtaR_UpperLimit_Par2 = cms.double(0.15),
            Eta_fixed = cms.bool(True),
            Eta_min = cms.double(0.1),
            MeasurementTrackerName = cms.InputTag("hltESPMeasurementTracker"),
            OnDemand = cms.int32(-1),
            PhiR_UpperLimit_Par1 = cms.double(0.6),
            PhiR_UpperLimit_Par2 = cms.double(0.2),
            Phi_fixed = cms.bool(True),
            Phi_min = cms.double(0.1),
            Pt_fixed = cms.bool(False),
            Pt_min = cms.double(3.0),
            Rescale_Dz = cms.double(4.0),
            Rescale_eta = cms.double(3.0),
            Rescale_phi = cms.double(3.0),
            UseVertex = cms.bool(False),
            Z_fixed = cms.bool(False),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            input = cms.InputTag("hltL2MuonsFromL1TkMuon","UpdatedAtVtx"),
            maxRegions = cms.int32(2),
            precise = cms.bool(True),
            vertexCollection = cms.InputTag("pixelVertices")
        ),
        PCut = cms.double(2.5),
        PtCut = cms.double(1.0),
        RefitRPCHits = cms.bool(True),
        ScaleTECxFactor = cms.double(-1.0),
        ScaleTECyFactor = cms.double(-1.0),
        TrackTransformer = cms.PSet(
            DoPredictionsOnly = cms.bool(False),
            Fitter = cms.string('hltESPL3MuKFTrajectoryFitter'),
            MuonRecHitBuilder = cms.string('hltESPMuonTransientTrackingRecHitBuilder'),
            Propagator = cms.string('hltESPSmartPropagatorAny'),
            RefitDirection = cms.string('insideOut'),
            RefitRPCHits = cms.bool(True),
            Smoother = cms.string('hltESPKFTrajectorySmootherForMuonTrackLoader'),
            TrackerRecHitBuilder = cms.string('WithTrackAngle')
        ),
        TrackerPropagator = cms.string('SteppingHelixPropagatorAny'),
        TrackerRecHitBuilder = cms.string('WithTrackAngle'),
        tkTrajBeamSpot = cms.InputTag("offlineBeamSpot"),
        tkTrajLabel = cms.InputTag("hltPhase2L3OIMuonTrackSelectionHighPurity"),
        tkTrajMaxChi2 = cms.double(9999.0),
        tkTrajMaxDXYBeamSpot = cms.double(9999.0),
        tkTrajUseVertex = cms.bool(False),
        tkTrajVertex = cms.InputTag("Notused")
    ),
    MuonCollectionLabel = cms.InputTag("hltL2MuonsFromL1TkMuon","UpdatedAtVtx"),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring(
            'hltESPSmartPropagatorAny', 
            'SteppingHelixPropagatorAny', 
            'hltESPSmartPropagator', 
            'hltESPSteppingHelixPropagatorOpposite'
        ),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(True),
        MuonSeededTracksInstance = cms.untracked.string('L2Seeded'),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('hltESPSteppingHelixPropagatorOpposite')
        ),
        PutTkTrackIntoEvent = cms.untracked.bool(False),
        SmoothTkTrack = cms.untracked.bool(False),
        Smoother = cms.string('hltESPKFTrajectorySmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    )
)


process.hltMe0RecHits = cms.EDProducer("ME0RecHitProducer",
    me0DigiLabel = cms.InputTag("simMuonME0PseudoReDigis"),
    recAlgo = cms.string('ME0RecHitStandardAlgo'),
    recAlgoConfig = cms.PSet(

    )
)


process.hltMe0Segments = cms.EDProducer("ME0SegmentProducer",
    algo_psets = cms.VPSet(
        cms.PSet(
            algo_name = cms.string('ME0SegmentAlgorithm'),
            algo_pset = cms.PSet(
                ME0Debug = cms.untracked.bool(True),
                dEtaChainBoxMax = cms.double(0.05),
                dPhiChainBoxMax = cms.double(0.02),
                dTimeChainBoxMax = cms.double(15.0),
                dXclusBoxMax = cms.double(1.0),
                dYclusBoxMax = cms.double(5.0),
                maxRecHitsInCluster = cms.int32(6),
                minHitsPerSegment = cms.uint32(3),
                preClustering = cms.bool(True),
                preClusteringUseChaining = cms.bool(True)
            )
        ), 
        cms.PSet(
            algo_name = cms.string('ME0SegAlgoRU'),
            algo_pset = cms.PSet(
                allowWideSegments = cms.bool(True),
                doCollisions = cms.bool(True),
                maxChi2Additional = cms.double(100.0),
                maxChi2GoodSeg = cms.double(50),
                maxChi2Prune = cms.double(50),
                maxETASeeds = cms.double(0.1),
                maxPhiAdditional = cms.double(0.001096605744),
                maxPhiSeeds = cms.double(0.001096605744),
                maxTOFDiff = cms.double(25),
                minNumberOfHits = cms.uint32(4),
                requireCentralBX = cms.bool(True)
            )
        )
    ),
    algo_type = cms.int32(2),
    me0RecHitLabel = cms.InputTag("hltMe0RecHits")
)


process.hltParticleFlowClusterECALUncorrectedUnseeded = cms.EDProducer("PFClusterProducer",
    energyCorrector = cms.PSet(

    ),
    initialClusteringStep = cms.PSet(
        algoName = cms.string('Basic2DGenericTopoClusterizer'),
        thresholdsByDetector = cms.VPSet(
            cms.PSet(
                detector = cms.string('ECAL_BARREL'),
                gatheringThreshold = cms.double(0.08),
                gatheringThresholdPt = cms.double(0.0)
            ), 
            cms.PSet(
                detector = cms.string('ECAL_ENDCAP'),
                gatheringThreshold = cms.double(0.3),
                gatheringThresholdPt = cms.double(0.0)
            )
        ),
        useCornerCells = cms.bool(True)
    ),
    pfClusterBuilder = cms.PSet(
        algoName = cms.string('Basic2DGenericPFlowClusterizer'),
        allCellsPositionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.08),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(-1),
            timeResolutionCalcBarrel = cms.PSet(
                constantTerm = cms.double(0.428192),
                constantTermLowE = cms.double(0.0),
                corrTermLowE = cms.double(0.0510871),
                noiseTerm = cms.double(1.10889),
                noiseTermLowE = cms.double(1.31883),
                threshHighE = cms.double(5.0),
                threshLowE = cms.double(0.5)
            ),
            timeResolutionCalcEndcap = cms.PSet(
                constantTerm = cms.double(0.0),
                constantTermLowE = cms.double(0.0),
                corrTermLowE = cms.double(0.0),
                noiseTerm = cms.double(5.72489999999),
                noiseTermLowE = cms.double(6.92683000001),
                threshHighE = cms.double(10.0),
                threshLowE = cms.double(1.0)
            )
        ),
        excludeOtherSeeds = cms.bool(True),
        maxIterations = cms.uint32(50),
        minFracTot = cms.double(1e-20),
        minFractionToKeep = cms.double(1e-07),
        positionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.08),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(9),
            timeResolutionCalcBarrel = cms.PSet(
                constantTerm = cms.double(0.428192),
                constantTermLowE = cms.double(0.0),
                corrTermLowE = cms.double(0.0510871),
                noiseTerm = cms.double(1.10889),
                noiseTermLowE = cms.double(1.31883),
                threshHighE = cms.double(5.0),
                threshLowE = cms.double(0.5)
            ),
            timeResolutionCalcEndcap = cms.PSet(
                constantTerm = cms.double(0.0),
                constantTermLowE = cms.double(0.0),
                corrTermLowE = cms.double(0.0),
                noiseTerm = cms.double(5.72489999999),
                noiseTermLowE = cms.double(6.92683000001),
                threshHighE = cms.double(10.0),
                threshLowE = cms.double(1.0)
            )
        ),
        positionCalcForConvergence = cms.PSet(
            T0_EB = cms.double(7.4),
            T0_EE = cms.double(3.1),
            T0_ES = cms.double(1.2),
            W0 = cms.double(4.2),
            X0 = cms.double(0.89),
            algoName = cms.string('ECAL2DPositionCalcWithDepthCorr'),
            minAllowedNormalization = cms.double(0.0),
            minFractionInCalc = cms.double(0.0)
        ),
        recHitEnergyNorms = cms.VPSet(
            cms.PSet(
                detector = cms.string('ECAL_BARREL'),
                recHitEnergyNorm = cms.double(0.08)
            ), 
            cms.PSet(
                detector = cms.string('ECAL_ENDCAP'),
                recHitEnergyNorm = cms.double(0.3)
            )
        ),
        showerSigma = cms.double(1.5),
        stoppingTolerance = cms.double(1e-08)
    ),
    positionReCalc = cms.PSet(
        T0_EB = cms.double(7.4),
        T0_EE = cms.double(3.1),
        T0_ES = cms.double(1.2),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89),
        algoName = cms.string('ECAL2DPositionCalcWithDepthCorr'),
        minAllowedNormalization = cms.double(0.0),
        minFractionInCalc = cms.double(0.0)
    ),
    recHitCleaners = cms.VPSet(),
    recHitsSource = cms.InputTag("hltParticleFlowRecHitECALUnseeded"),
    seedCleaners = cms.VPSet(cms.PSet(
        RecHitFlagsToBeExcluded = cms.vstring(),
        algoName = cms.string('FlagsCleanerECAL')
    )),
    seedFinder = cms.PSet(
        algoName = cms.string('LocalMaximumSeedFinder'),
        nNeighbours = cms.int32(8),
        thresholdsByDetector = cms.VPSet(
            cms.PSet(
                detector = cms.string('ECAL_ENDCAP'),
                seedingThreshold = cms.double(0.6),
                seedingThresholdPt = cms.double(0.15)
            ), 
            cms.PSet(
                detector = cms.string('ECAL_BARREL'),
                seedingThreshold = cms.double(0.23),
                seedingThresholdPt = cms.double(0.0)
            )
        )
    )
)


process.hltParticleFlowClusterECALUnseeded = cms.EDProducer("CorrectedECALPFClusterProducer",
    energyCorrector = cms.PSet(
        applyCrackCorrections = cms.bool(False),
        applyMVACorrections = cms.bool(True),
        autoDetectBunchSpacing = cms.bool(True),
        bunchSpacing = cms.int32(25),
        ebSrFlagLabel = cms.InputTag("hltEcalDigis"),
        eeSrFlagLabel = cms.InputTag("hltEcalDigis"),
        maxPtForMVAEvaluation = cms.double(300.0),
        recHitsEBLabel = cms.InputTag("hltEcalRecHit","EcalRecHitsEB"),
        recHitsEELabel = cms.InputTag("hltEcalRecHit","EcalRecHitsEE"),
        setEnergyUncertainty = cms.bool(False),
        srfAwareCorrection = cms.bool(True)
    ),
    inputECAL = cms.InputTag("hltParticleFlowClusterECALUncorrectedUnseeded"),
    inputPS = cms.InputTag("hltParticleFlowClusterPSUnseeded"),
    mightGet = cms.optional.untracked.vstring,
    minimumPSEnergy = cms.double(0)
)


process.hltParticleFlowClusterHBHEForMuons = cms.EDProducer("PFClusterProducer",
    energyCorrector = cms.PSet(

    ),
    initialClusteringStep = cms.PSet(
        algoName = cms.string('Basic2DGenericTopoClusterizer'),
        thresholdsByDetector = cms.VPSet(
            cms.PSet(
                depths = cms.vint32(1, 2, 3, 4),
                detector = cms.string('HCAL_BARREL1'),
                gatheringThreshold = cms.vdouble(0.8, 0.8, 0.8, 0.8),
                gatheringThresholdPt = cms.vdouble(0.0, 0.0, 0.0, 0.0)
            ), 
            cms.PSet(
                depths = cms.vint32(
                    1, 2, 3, 4, 5, 
                    6, 7
                ),
                detector = cms.string('HCAL_ENDCAP'),
                gatheringThreshold = cms.vdouble(
                    0.8, 0.8, 0.8, 0.8, 0.8, 
                    0.8, 0.8
                ),
                gatheringThresholdPt = cms.vdouble(
                    0.0, 0.0, 0.0, 0.0, 0.0, 
                    0.0, 0.0
                )
            )
        ),
        useCornerCells = cms.bool(True)
    ),
    pfClusterBuilder = cms.PSet(
        algoName = cms.string('Basic2DGenericPFlowClusterizer'),
        allCellsPositionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.8),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(-1)
        ),
        clusterTimeResFromSeed = cms.bool(False),
        excludeOtherSeeds = cms.bool(True),
        maxIterations = cms.uint32(50),
        maxNSigmaTime = cms.double(10.0),
        minChi2Prob = cms.double(0.0),
        minFracTot = cms.double(1e-20),
        minFractionToKeep = cms.double(1e-07),
        positionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.8),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(5)
        ),
        recHitEnergyNorms = cms.VPSet(
            cms.PSet(
                depths = cms.vint32(1, 2, 3, 4),
                detector = cms.string('HCAL_BARREL1'),
                recHitEnergyNorm = cms.vdouble(0.8, 0.8, 0.8, 0.8)
            ), 
            cms.PSet(
                depths = cms.vint32(
                    1, 2, 3, 4, 5, 
                    6, 7
                ),
                detector = cms.string('HCAL_ENDCAP'),
                recHitEnergyNorm = cms.vdouble(
                    0.8, 0.8, 0.8, 0.8, 0.8, 
                    0.8, 0.8
                )
            )
        ),
        showerSigma = cms.double(10.0),
        stoppingTolerance = cms.double(1e-08),
        timeResolutionCalcBarrel = cms.PSet(
            constantTerm = cms.double(2.82),
            constantTermLowE = cms.double(4.24),
            corrTermLowE = cms.double(0.0),
            noiseTerm = cms.double(21.86),
            noiseTermLowE = cms.double(8.0),
            threshHighE = cms.double(15.0),
            threshLowE = cms.double(6.0)
        ),
        timeResolutionCalcEndcap = cms.PSet(
            constantTerm = cms.double(2.82),
            constantTermLowE = cms.double(4.24),
            corrTermLowE = cms.double(0.0),
            noiseTerm = cms.double(21.86),
            noiseTermLowE = cms.double(8.0),
            threshHighE = cms.double(15.0),
            threshLowE = cms.double(6.0)
        ),
        timeSigmaEB = cms.double(10.0),
        timeSigmaEE = cms.double(10.0)
    ),
    positionReCalc = cms.PSet(

    ),
    recHitCleaners = cms.VPSet(),
    recHitsSource = cms.InputTag("hltParticleFlowRecHitHBHEForMuons"),
    seedFinder = cms.PSet(
        algoName = cms.string('LocalMaximumSeedFinder'),
        nNeighbours = cms.int32(4),
        thresholdsByDetector = cms.VPSet(
            cms.PSet(
                depths = cms.vint32(1, 2, 3, 4),
                detector = cms.string('HCAL_BARREL1'),
                seedingThreshold = cms.vdouble(1.0, 1.0, 1.0, 1.0),
                seedingThresholdPt = cms.vdouble(0.0, 0.0, 0.0, 0.0)
            ), 
            cms.PSet(
                depths = cms.vint32(
                    1, 2, 3, 4, 5, 
                    6, 7
                ),
                detector = cms.string('HCAL_ENDCAP'),
                seedingThreshold = cms.vdouble(
                    1.1, 1.1, 1.1, 1.1, 1.1, 
                    1.1, 1.1
                ),
                seedingThresholdPt = cms.vdouble(
                    0.0, 0.0, 0.0, 0.0, 0.0, 
                    0.0, 0.0
                )
            )
        )
    )
)


process.hltParticleFlowClusterHCALForMuons = cms.EDProducer("PFMultiDepthClusterProducer",
    clustersSource = cms.InputTag("hltParticleFlowClusterHBHEForMuons"),
    energyCorrector = cms.PSet(

    ),
    pfClusterBuilder = cms.PSet(
        algoName = cms.string('PFMultiDepthClusterizer'),
        allCellsPositionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.8),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(-1)
        ),
        minFractionToKeep = cms.double(1e-07),
        nSigmaEta = cms.double(2.0),
        nSigmaPhi = cms.double(2.0)
    ),
    positionReCalc = cms.PSet(

    )
)


process.hltParticleFlowClusterPSUnseeded = cms.EDProducer("PFClusterProducer",
    energyCorrector = cms.PSet(

    ),
    initialClusteringStep = cms.PSet(
        algoName = cms.string('Basic2DGenericTopoClusterizer'),
        thresholdsByDetector = cms.VPSet(
            cms.PSet(
                detector = cms.string('PS1'),
                gatheringThreshold = cms.double(6e-05),
                gatheringThresholdPt = cms.double(0.0)
            ), 
            cms.PSet(
                detector = cms.string('PS2'),
                gatheringThreshold = cms.double(6e-05),
                gatheringThresholdPt = cms.double(0.0)
            )
        ),
        useCornerCells = cms.bool(False)
    ),
    pfClusterBuilder = cms.PSet(
        algoName = cms.string('Basic2DGenericPFlowClusterizer'),
        excludeOtherSeeds = cms.bool(True),
        maxIterations = cms.uint32(50),
        minFracTot = cms.double(1e-20),
        minFractionToKeep = cms.double(1e-07),
        positionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(6e-05),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(-1)
        ),
        recHitEnergyNorms = cms.VPSet(
            cms.PSet(
                detector = cms.string('PS1'),
                recHitEnergyNorm = cms.double(6e-05)
            ), 
            cms.PSet(
                detector = cms.string('PS2'),
                recHitEnergyNorm = cms.double(6e-05)
            )
        ),
        showerSigma = cms.double(0.3),
        stoppingTolerance = cms.double(1e-08)
    ),
    positionReCalc = cms.PSet(

    ),
    recHitCleaners = cms.VPSet(),
    recHitsSource = cms.InputTag("hltParticleFlowRecHitPSUnseeded"),
    seedCleaners = cms.VPSet(),
    seedFinder = cms.PSet(
        algoName = cms.string('LocalMaximumSeedFinder'),
        nNeighbours = cms.int32(4),
        thresholdsByDetector = cms.VPSet(
            cms.PSet(
                detector = cms.string('PS1'),
                seedingThreshold = cms.double(0.00012),
                seedingThresholdPt = cms.double(0.0)
            ), 
            cms.PSet(
                detector = cms.string('PS2'),
                seedingThreshold = cms.double(0.00012),
                seedingThresholdPt = cms.double(0.0)
            )
        )
    )
)


process.hltParticleFlowRecHitECALUnseeded = cms.EDProducer("PFRecHitProducer",
    navigator = cms.PSet(
        barrel = cms.PSet(

        ),
        endcap = cms.PSet(

        ),
        name = cms.string('PFRecHitECALNavigator')
    ),
    producers = cms.VPSet(
        cms.PSet(
            name = cms.string('PFEBRecHitCreator'),
            qualityTests = cms.VPSet(
                cms.PSet(
                    applySelectionsToAllCrystals = cms.bool(True),
                    name = cms.string('PFRecHitQTestDBThreshold')
                ), 
                cms.PSet(
                    cleaningThreshold = cms.double(2.0),
                    name = cms.string('PFRecHitQTestECAL'),
                    skipTTRecoveredHits = cms.bool(True),
                    timingCleaning = cms.bool(True),
                    topologicalCleaning = cms.bool(True)
                )
            ),
            srFlags = cms.InputTag(""),
            src = cms.InputTag("hltEcalRecHit","EcalRecHitsEB")
        ), 
        cms.PSet(
            name = cms.string('PFEERecHitCreator'),
            qualityTests = cms.VPSet(
                cms.PSet(
                    applySelectionsToAllCrystals = cms.bool(True),
                    name = cms.string('PFRecHitQTestDBThreshold')
                ), 
                cms.PSet(
                    cleaningThreshold = cms.double(2.0),
                    name = cms.string('PFRecHitQTestECAL'),
                    skipTTRecoveredHits = cms.bool(True),
                    timingCleaning = cms.bool(True),
                    topologicalCleaning = cms.bool(True)
                )
            ),
            srFlags = cms.InputTag(""),
            src = cms.InputTag("hltEcalRecHit","EcalRecHitsEE")
        )
    )
)


process.hltParticleFlowRecHitHBHEForMuons = cms.EDProducer("PFRecHitProducer",
    navigator = cms.PSet(
        name = cms.string('PFRecHitHCALNavigator'),
        sigmaCut = cms.double(4.0),
        timeResolutionCalc = cms.PSet(
            constantTerm = cms.double(1.92),
            constantTermLowE = cms.double(6.0),
            corrTermLowE = cms.double(0.0),
            noiseTerm = cms.double(8.64),
            noiseTermLowE = cms.double(0.0),
            threshHighE = cms.double(8.0),
            threshLowE = cms.double(2.0)
        )
    ),
    producers = cms.VPSet(cms.PSet(
        name = cms.string('PFHBHERecHitCreator'),
        qualityTests = cms.VPSet(
            cms.PSet(
                cuts = cms.VPSet(
                    cms.PSet(
                        depth = cms.vint32(1, 2, 3, 4),
                        detectorEnum = cms.int32(1),
                        threshold = cms.vdouble(0.8, 0.8, 0.8, 0.8)
                    ), 
                    cms.PSet(
                        depth = cms.vint32(
                            1, 2, 3, 4, 5, 
                            6, 7
                        ),
                        detectorEnum = cms.int32(2),
                        threshold = cms.vdouble(
                            0.8, 0.8, 0.8, 0.8, 0.8, 
                            0.8, 0.8
                        )
                    )
                ),
                name = cms.string('PFRecHitQTestThreshold'),
                threshold = cms.double(0.8)
            ), 
            cms.PSet(
                cleaningThresholds = cms.vdouble(0.0),
                flags = cms.vstring('Standard'),
                maxSeverities = cms.vint32(11),
                name = cms.string('PFRecHitQTestHCALChannel')
            )
        ),
        src = cms.InputTag("hltHbhereco")
    ))
)


process.hltParticleFlowRecHitPSUnseeded = cms.EDProducer("PFRecHitProducer",
    navigator = cms.PSet(
        name = cms.string('PFRecHitPreshowerNavigator')
    ),
    producers = cms.VPSet(cms.PSet(
        name = cms.string('PFPSRecHitCreator'),
        qualityTests = cms.VPSet(
            cms.PSet(
                name = cms.string('PFRecHitQTestThreshold'),
                threshold = cms.double(0.0)
            ), 
            cms.PSet(
                cleaningThreshold = cms.double(0.0),
                name = cms.string('PFRecHitQTestES'),
                topologicalCleaning = cms.bool(True)
            )
        ),
        src = cms.InputTag("hltEcalPreshowerRecHit","EcalRecHitsES")
    ))
)


process.hltPhase2L3FromL1TkMuonPixelLayerQuadruplets = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring(
        'BPix1+BPix2+BPix3+BPix4', 
        'BPix1+BPix2+BPix3+FPix1_pos', 
        'BPix1+BPix2+BPix3+FPix1_neg', 
        'BPix1+BPix2+FPix1_pos+FPix2_pos', 
        'BPix1+BPix2+FPix1_neg+FPix2_neg', 
        'BPix1+FPix1_pos+FPix2_pos+FPix3_pos', 
        'BPix1+FPix1_neg+FPix2_neg+FPix3_neg'
    )
)


process.hltPhase2L3FromL1TkMuonPixelTracks = cms.EDProducer("PixelTrackProducer",
    Cleaner = cms.string('hltPixelTracksCleanerBySharedHits'),
    Filter = cms.InputTag("hltPhase2L3MuonPixelTracksFilter"),
    Fitter = cms.InputTag("hltPhase2L3MuonPixelTracksFitter"),
    SeedingHitSets = cms.InputTag("hltPhase2L3FromL1TkMuonPixelTracksHitQuadruplets"),
    passLabel = cms.string('')
)


process.hltPhase2L3FromL1TkMuonPixelTracksHitDoublets = cms.EDProducer("HitPairEDProducer",
    clusterCheck = cms.InputTag(""),
    layerPairs = cms.vuint32(0, 1, 2),
    maxElement = cms.uint32(0),
    produceIntermediateHitDoublets = cms.bool(True),
    produceSeedingHitSets = cms.bool(False),
    seedingLayers = cms.InputTag("hltPhase2L3FromL1TkMuonPixelLayerQuadruplets"),
    trackingRegions = cms.InputTag("hltPhase2L3FromL1TkMuonPixelTracksTrackingRegions"),
    trackingRegionsSeedingLayers = cms.InputTag("")
)


process.hltPhase2L3FromL1TkMuonPixelTracksHitQuadruplets = cms.EDProducer("CAHitQuadrupletEDProducer",
    CAHardPtCut = cms.double(0.0),
    CAPhiCut = cms.double(0.2),
    CAThetaCut = cms.double(0.005),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('LowPtClusterShapeSeedComparitor'),
        clusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
        clusterShapeHitFilter = cms.string('ClusterShapeHitFilter')
    ),
    doublets = cms.InputTag("hltPhase2L3FromL1TkMuonPixelTracksHitDoublets"),
    extraHitRPhitolerance = cms.double(0.032),
    fitFastCircle = cms.bool(True),
    fitFastCircleChi2Cut = cms.bool(True),
    maxChi2 = cms.PSet(
        enabled = cms.bool(True),
        pt1 = cms.double(0.7),
        pt2 = cms.double(2.0),
        value1 = cms.double(200.0),
        value2 = cms.double(50.0)
    ),
    useBendingCorrection = cms.bool(True)
)


process.hltPhase2L3FromL1TkMuonPixelTracksTrackingRegions = cms.EDProducer("CandidateSeededTrackingRegionsEDProducer",
    RegionPSet = cms.PSet(
        beamSpot = cms.InputTag("offlineBeamSpot"),
        deltaEta = cms.double(0.035),
        deltaPhi = cms.double(0.02),
        input = cms.InputTag("L1TkMuons","","MYHLT"),
        maxNRegions = cms.int32(10000),
        maxNVertices = cms.int32(1),
        measurementTrackerName = cms.InputTag(""),
        mode = cms.string('BeamSpotSigma'),
        nSigmaZBeamSpot = cms.double(4.0),
        nSigmaZVertex = cms.double(3.0),
        originRadius = cms.double(0.2),
        precise = cms.bool(True),
        ptMin = cms.double(2.0),
        searchOpt = cms.bool(False),
        vertexCollection = cms.InputTag("notUsed"),
        whereToUseMeasurementTracker = cms.string('Never'),
        zErrorBeamSpot = cms.double(24.2),
        zErrorVetex = cms.double(0.2)
    )
)


process.hltPhase2L3FromL1TkMuonPixelVertices = cms.EDProducer("PixelVertexProducer",
    Finder = cms.string('DivisiveVertexFinder'),
    Method2 = cms.bool(True),
    NTrkMin = cms.int32(2),
    PVcomparer = cms.PSet(
        refToPSet_ = cms.string('hltPhase2PSetPvClusterComparerForIT')
    ),
    PtMin = cms.double(1.0),
    TrackCollection = cms.InputTag("hltPhase2L3FromL1TkMuonPixelTracks"),
    UseError = cms.bool(True),
    Verbosity = cms.int32(0),
    WtAverage = cms.bool(True),
    ZOffset = cms.double(5.0),
    ZSeparation = cms.double(0.05),
    beamSpot = cms.InputTag("offlineBeamSpot")
)


process.hltPhase2L3FromL1TkMuonTrimmedPixelVertices = cms.EDProducer("PixelVertexCollectionTrimmer",
    PVcomparer = cms.PSet(
        refToPSet_ = cms.string('hltPhase2PSetPvClusterComparerForIT')
    ),
    fractionSumPt2 = cms.double(0.3),
    maxVtx = cms.uint32(100),
    minSumPt2 = cms.double(0.0),
    src = cms.InputTag("hltPhase2L3FromL1TkMuonPixelVertices")
)


process.hltPhase2L3GlbMuon = cms.EDProducer("L3MuonProducer",
    L3TrajBuilderParameters = cms.PSet(
        GlbRefitterParameters = cms.PSet(
            CSCRecSegmentLabel = cms.InputTag("hltCscSegments"),
            Chi2CutCSC = cms.double(150.0),
            Chi2CutDT = cms.double(10.0),
            Chi2CutRPC = cms.double(1.0),
            DTRecSegmentLabel = cms.InputTag("hltDt4DSegments"),
            DYTthrs = cms.vint32(30, 15),
            DoPredictionsOnly = cms.bool(False),
            Fitter = cms.string('hltESPL3MuKFTrajectoryFitter'),
            HitThreshold = cms.int32(1),
            MuonHitsOption = cms.int32(1),
            MuonRecHitBuilder = cms.string('hltESPMuonTransientTrackingRecHitBuilder'),
            PropDirForCosmics = cms.bool(False),
            Propagator = cms.string('hltESPSmartPropagatorAny'),
            RefitDirection = cms.string('insideOut'),
            RefitFlag = cms.bool(True),
            RefitRPCHits = cms.bool(True),
            SkipStation = cms.int32(-1),
            TrackerRecHitBuilder = cms.string('WithTrackAngle'),
            TrackerSkipSection = cms.int32(-1),
            TrackerSkipSystem = cms.int32(-1)
        ),
        GlobalMuonTrackMatcher = cms.PSet(
            Chi2Cut_1 = cms.double(50.0),
            Chi2Cut_2 = cms.double(50.0),
            Chi2Cut_3 = cms.double(200.0),
            DeltaDCut_1 = cms.double(40.0),
            DeltaDCut_2 = cms.double(10.0),
            DeltaDCut_3 = cms.double(15.0),
            DeltaRCut_1 = cms.double(0.1),
            DeltaRCut_2 = cms.double(0.2),
            DeltaRCut_3 = cms.double(1.0),
            Eta_threshold = cms.double(1.2),
            LocChi2Cut = cms.double(0.001),
            MinP = cms.double(2.5),
            MinPt = cms.double(1.0),
            Propagator = cms.string('hltESPSmartPropagator'),
            Pt_threshold1 = cms.double(0.0),
            Pt_threshold2 = cms.double(999999999.0),
            Quality_1 = cms.double(20.0),
            Quality_2 = cms.double(15.0),
            Quality_3 = cms.double(7.0)
        ),
        MuonRecHitBuilder = cms.string('hltESPMuonTransientTrackingRecHitBuilder'),
        MuonTrackingRegionBuilder = cms.PSet(
            DeltaEta = cms.double(0.2),
            DeltaPhi = cms.double(0.15),
            DeltaR = cms.double(0.025),
            DeltaZ = cms.double(24.2),
            EtaR_UpperLimit_Par1 = cms.double(0.25),
            EtaR_UpperLimit_Par2 = cms.double(0.15),
            Eta_fixed = cms.bool(True),
            Eta_min = cms.double(0.1),
            MeasurementTrackerName = cms.InputTag("hltESPMeasurementTracker"),
            OnDemand = cms.int32(-1),
            PhiR_UpperLimit_Par1 = cms.double(0.6),
            PhiR_UpperLimit_Par2 = cms.double(0.2),
            Phi_fixed = cms.bool(True),
            Phi_min = cms.double(0.1),
            Pt_fixed = cms.bool(False),
            Pt_min = cms.double(3.0),
            Rescale_Dz = cms.double(4.0),
            Rescale_eta = cms.double(3.0),
            Rescale_phi = cms.double(3.0),
            UseVertex = cms.bool(False),
            Z_fixed = cms.bool(False),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            input = cms.InputTag("hltL2MuonsFromL1TkMuon","UpdatedAtVtx"),
            maxRegions = cms.int32(2),
            precise = cms.bool(True),
            vertexCollection = cms.InputTag("pixelVertices")
        ),
        PCut = cms.double(2.5),
        PtCut = cms.double(1.0),
        RefitRPCHits = cms.bool(True),
        ScaleTECxFactor = cms.double(-1.0),
        ScaleTECyFactor = cms.double(-1.0),
        TrackTransformer = cms.PSet(
            DoPredictionsOnly = cms.bool(False),
            Fitter = cms.string('hltESPL3MuKFTrajectoryFitter'),
            MuonRecHitBuilder = cms.string('hltESPMuonTransientTrackingRecHitBuilder'),
            Propagator = cms.string('hltESPSmartPropagatorAny'),
            RefitDirection = cms.string('insideOut'),
            RefitRPCHits = cms.bool(True),
            Smoother = cms.string('hltESPKFTrajectorySmootherForMuonTrackLoader'),
            TrackerRecHitBuilder = cms.string('WithTrackAngle')
        ),
        TrackerPropagator = cms.string('SteppingHelixPropagatorAny'),
        TrackerRecHitBuilder = cms.string('WithTrackAngle'),
        tkTrajBeamSpot = cms.InputTag("offlineBeamSpot"),
        tkTrajLabel = cms.InputTag("hltPhase2L3MuonMerged"),
        tkTrajMaxChi2 = cms.double(9999.0),
        tkTrajMaxDXYBeamSpot = cms.double(9999.0),
        tkTrajUseVertex = cms.bool(False),
        tkTrajVertex = cms.InputTag("Notused")
    ),
    MuonCollectionLabel = cms.InputTag("hltL2MuonsFromL1TkMuon","UpdatedAtVtx"),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring(
            'hltESPSmartPropagatorAny', 
            'SteppingHelixPropagatorAny', 
            'hltESPSmartPropagator', 
            'hltESPSteppingHelixPropagatorOpposite'
        ),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(True),
        MuonSeededTracksInstance = cms.untracked.string('L2Seeded'),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('hltESPSteppingHelixPropagatorOpposite')
        ),
        PutTkTrackIntoEvent = cms.untracked.bool(False),
        SmoothTkTrack = cms.untracked.bool(False),
        Smoother = cms.string('hltESPKFTrajectorySmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    )
)


process.hltPhase2L3MuonCandidates = cms.EDProducer("L3MuonCandidateProducerFromMuons",
    InputObjects = cms.InputTag("hltPhase2L3Muons")
)


process.hltPhase2L3MuonGeneralTracks = cms.EDProducer("TrackListMerger",
    Epsilon = cms.double(-0.001),
    FoundHitBonus = cms.double(5.0),
    LostHitPenalty = cms.double(5.0),
    MaxNormalizedChisq = cms.double(1000.0),
    MinFound = cms.int32(3),
    MinPT = cms.double(0.9),
    ShareFrac = cms.double(0.19),
    TrackProducers = cms.VInputTag("hltPhase2L3MuonInitialStepTracksSelectionHighPurity", "hltPhase2L3MuonHighPtTripletStepTracksSelectionHighPurity"),
    allowFirstHitShare = cms.bool(True),
    copyExtras = cms.untracked.bool(True),
    copyMVA = cms.bool(False),
    hasSelector = cms.vint32(0, 0),
    indivShareFrac = cms.vdouble(1.0, 1.0),
    makeReKeyedSeeds = cms.untracked.bool(False),
    newQuality = cms.string('confirmed'),
    selectedTrackQuals = cms.VInputTag(cms.InputTag("hltPhase2L3MuonInitialStepTracksSelectionHighPurity"), cms.InputTag("hltPhase2L3MuonHighPtTripletStepTracksSelectionHighPurity")),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(True),
        tLists = cms.vint32(0, 1)
    )),
    trackAlgoPriorityOrder = cms.string('hltPhase2L3MuonTrackAlgoPriorityOrder'),
    writeOnlyTrkQuals = cms.bool(False)
)


process.hltPhase2L3MuonHighPtTripletStepClusters = cms.EDProducer("TrackClusterRemoverPhase2",
    TrackQuality = cms.string('highPurity'),
    maxChi2 = cms.double(9.0),
    mightGet = cms.optional.untracked.vstring,
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    oldClusterRemovalInfo = cms.InputTag(""),
    overrideTrkQuals = cms.InputTag(""),
    phase2OTClusters = cms.InputTag("siPhase2Clusters"),
    phase2pixelClusters = cms.InputTag("siPixelClusters"),
    trackClassifier = cms.InputTag("","QualityMasks"),
    trajectories = cms.InputTag("hltPhase2L3MuonInitialStepTracksSelectionHighPurity")
)


process.hltPhase2L3MuonHighPtTripletStepHitDoublets = cms.EDProducer("HitPairEDProducer",
    clusterCheck = cms.InputTag("trackerClusterCheck"),
    layerPairs = cms.vuint32(0, 1),
    maxElement = cms.uint32(50000000),
    maxElementTotal = cms.uint32(50000000),
    mightGet = cms.optional.untracked.vstring,
    produceIntermediateHitDoublets = cms.bool(True),
    produceSeedingHitSets = cms.bool(False),
    seedingLayers = cms.InputTag("hltPhase2L3MuonHighPtTripletStepSeedLayers"),
    trackingRegions = cms.InputTag("hltPhase2L3MuonHighPtTripletStepTrackingRegions"),
    trackingRegionsSeedingLayers = cms.InputTag("")
)


process.hltPhase2L3MuonHighPtTripletStepHitTriplets = cms.EDProducer("CAHitTripletEDProducer",
    CAHardPtCut = cms.double(0.5),
    CAPhiCut = cms.double(0.06),
    CAThetaCut = cms.double(0.003),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('LowPtClusterShapeSeedComparitor'),
        clusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
        clusterShapeHitFilter = cms.string('ClusterShapeHitFilter')
    ),
    doublets = cms.InputTag("hltPhase2L3MuonHighPtTripletStepHitDoublets"),
    extraHitRPhitolerance = cms.double(0.032),
    maxChi2 = cms.PSet(
        enabled = cms.bool(True),
        pt1 = cms.double(0.8),
        pt2 = cms.double(8),
        value1 = cms.double(100),
        value2 = cms.double(6)
    ),
    mightGet = cms.optional.untracked.vstring,
    useBendingCorrection = cms.bool(True)
)


process.hltPhase2L3MuonHighPtTripletStepSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("hltPhase2L3MuonHighPtTripletStepClusters")
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("hltPhase2L3MuonHighPtTripletStepClusters")
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring(
        'BPix1+BPix2+BPix3', 
        'BPix2+BPix3+BPix4', 
        'BPix1+BPix3+BPix4', 
        'BPix1+BPix2+BPix4', 
        'BPix2+BPix3+FPix1_pos', 
        'BPix2+BPix3+FPix1_neg', 
        'BPix1+BPix2+FPix1_pos', 
        'BPix1+BPix2+FPix1_neg', 
        'BPix2+FPix1_pos+FPix2_pos', 
        'BPix2+FPix1_neg+FPix2_neg', 
        'BPix1+FPix1_pos+FPix2_pos', 
        'BPix1+FPix1_neg+FPix2_neg', 
        'FPix1_pos+FPix2_pos+FPix3_pos', 
        'FPix1_neg+FPix2_neg+FPix3_neg', 
        'BPix1+FPix2_pos+FPix3_pos', 
        'BPix1+FPix2_neg+FPix3_neg', 
        'FPix2_pos+FPix3_pos+FPix4_pos', 
        'FPix2_neg+FPix3_neg+FPix4_neg', 
        'FPix3_pos+FPix4_pos+FPix5_pos', 
        'FPix3_neg+FPix4_neg+FPix5_neg', 
        'FPix4_pos+FPix5_pos+FPix6_pos', 
        'FPix4_neg+FPix5_neg+FPix6_neg', 
        'FPix5_pos+FPix6_pos+FPix7_pos', 
        'FPix5_neg+FPix6_neg+FPix7_neg', 
        'FPix6_pos+FPix7_pos+FPix8_pos', 
        'FPix6_neg+FPix7_neg+FPix8_neg'
    ),
    mightGet = cms.optional.untracked.vstring
)


process.hltPhase2L3MuonHighPtTripletStepSeeds = cms.EDProducer("SeedCreatorFromRegionConsecutiveHitsEDProducer",
    MinOneOverPtError = cms.double(1),
    OriginTransverseErrorMultiplier = cms.double(1),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedMomentumForBOFF = cms.double(5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    forceKinematicWithRegionDirection = cms.bool(False),
    magneticField = cms.string(''),
    propagator = cms.string('PropagatorWithMaterial'),
    seedingHitSets = cms.InputTag("hltPhase2L3MuonHighPtTripletStepHitTriplets")
)


process.hltPhase2L3MuonHighPtTripletStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string('ParabolicMf'),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('hltPhase2L3MuonHighPtTripletStepTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('hltPhase2L3MuonHighPtTripletStepTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(100000),
    maxSeedsBeforeCleaning = cms.uint32(1000),
    numHitsForSeedCleaner = cms.int32(50),
    onlyPixelHitsForSeedCleaner = cms.bool(True),
    phase2clustersToSkip = cms.InputTag("hltPhase2L3MuonHighPtTripletStepClusters"),
    propagatorAlongTISE = cms.string('PropagatorWithMaterialParabolicMf'),
    propagatorOppositeTISE = cms.string('PropagatorWithMaterialParabolicMfOpposite'),
    reverseTrajectories = cms.bool(False),
    src = cms.InputTag("hltPhase2L3MuonHighPtTripletStepSeeds"),
    useHitsSplitting = cms.bool(False)
)


process.hltPhase2L3MuonHighPtTripletStepTrackCutClassifier = cms.EDProducer("TrackCutClassifier",
    beamspot = cms.InputTag("offlineBeamSpot"),
    ignoreVertices = cms.bool(False),
    mva = cms.PSet(
        dr_par = cms.PSet(
            d0err = cms.vdouble(0.003, 0.003, 0.003),
            d0err_par = cms.vdouble(0.002, 0.002, 0.001),
            dr_exp = cms.vint32(4, 4, 4),
            dr_par1 = cms.vdouble(0.7, 0.6, 0.6),
            dr_par2 = cms.vdouble(0.6, 0.5, 0.45)
        ),
        dz_par = cms.PSet(
            dz_exp = cms.vint32(4, 4, 4),
            dz_par1 = cms.vdouble(0.8, 0.7, 0.7),
            dz_par2 = cms.vdouble(0.6, 0.6, 0.55)
        ),
        maxChi2 = cms.vdouble(9999.0, 9999.0, 9999.0),
        maxChi2n = cms.vdouble(2.0, 1.0, 0.8),
        maxDr = cms.vdouble(0.5, 0.03, 3.40282346639e+38),
        maxDz = cms.vdouble(0.5, 0.2, 3.40282346639e+38),
        maxDzWrtBS = cms.vdouble(3.40282346639e+38, 24.0, 15.0),
        maxLostLayers = cms.vint32(3, 3, 2),
        min3DLayers = cms.vint32(3, 3, 4),
        minLayers = cms.vint32(3, 3, 4),
        minNVtxTrk = cms.int32(3),
        minNdof = cms.vdouble(1e-05, 1e-05, 1e-05),
        minPixelHits = cms.vint32(0, 0, 3)
    ),
    qualityCuts = cms.vdouble(-0.7, 0.1, 0.7),
    src = cms.InputTag("hltPhase2L3MuonHighPtTripletStepTracks"),
    vertices = cms.InputTag("hltPhase2L3MuonPixelVertices")
)


process.hltPhase2L3MuonHighPtTripletStepTrackingRegions = cms.EDProducer("CandidateSeededTrackingRegionsEDProducer",
    RegionPSet = cms.PSet(
        beamSpot = cms.InputTag("offlineBeamSpot"),
        deltaEta = cms.double(0.4),
        deltaPhi = cms.double(0.4),
        input = cms.InputTag("hltPhase2L3MuonCandidates"),
        maxNRegions = cms.int32(10000),
        maxNVertices = cms.int32(1),
        measurementTrackerName = cms.InputTag(""),
        mode = cms.string('BeamSpotSigma'),
        nSigmaZBeamSpot = cms.double(4.0),
        nSigmaZVertex = cms.double(3.0),
        originRadius = cms.double(0.2),
        precise = cms.bool(True),
        ptMin = cms.double(0.9),
        searchOpt = cms.bool(False),
        vertexCollection = cms.InputTag("notUsed"),
        whereToUseMeasurementTracker = cms.string('Never'),
        zErrorBeamSpot = cms.double(24.2),
        zErrorVetex = cms.double(0.2)
    )
)


process.hltPhase2L3MuonHighPtTripletStepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('highPtTripletStep'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("hltPhase2L3MuonHighPtTripletStepTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.hltPhase2L3MuonHighPtTripletStepTracksSelectionHighPurity = cms.EDProducer("TrackCollectionFilterCloner",
    copyExtras = cms.untracked.bool(True),
    copyTrajectories = cms.untracked.bool(False),
    minQuality = cms.string('highPurity'),
    originalMVAVals = cms.InputTag("hltPhase2L3MuonHighPtTripletStepTrackCutClassifier","MVAValues"),
    originalQualVals = cms.InputTag("hltPhase2L3MuonHighPtTripletStepTrackCutClassifier","QualityMasks"),
    originalSource = cms.InputTag("hltPhase2L3MuonHighPtTripletStepTracks")
)


process.hltPhase2L3MuonInitialStepSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring(
        'BPix1+BPix2+BPix3+BPix4', 
        'BPix1+BPix2+BPix3+FPix1_pos', 
        'BPix1+BPix2+BPix3+FPix1_neg', 
        'BPix1+BPix2+FPix1_pos+FPix2_pos', 
        'BPix1+BPix2+FPix1_neg+FPix2_neg', 
        'BPix1+FPix1_pos+FPix2_pos+FPix3_pos', 
        'BPix1+FPix1_neg+FPix2_neg+FPix3_neg', 
        'FPix1_pos+FPix2_pos+FPix3_pos+FPix4_pos', 
        'FPix1_neg+FPix2_neg+FPix3_neg+FPix4_neg', 
        'FPix2_pos+FPix3_pos+FPix4_pos+FPix5_pos', 
        'FPix2_neg+FPix3_neg+FPix4_neg+FPix5_neg', 
        'FPix3_pos+FPix4_pos+FPix5_pos+FPix6_pos', 
        'FPix3_neg+FPix4_neg+FPix5_neg+FPix6_neg', 
        'FPix4_pos+FPix5_pos+FPix6_pos+FPix7_pos', 
        'FPix4_neg+FPix5_neg+FPix6_neg+FPix7_neg', 
        'FPix5_pos+FPix6_pos+FPix7_pos+FPix8_pos', 
        'FPix5_neg+FPix6_neg+FPix7_neg+FPix8_neg'
    ),
    mightGet = cms.optional.untracked.vstring
)


process.hltPhase2L3MuonInitialStepSeeds = cms.EDProducer("SeedGeneratorFromProtoTracksEDProducer",
    InputCollection = cms.InputTag("hltPhase2L3MuonPixelTracks"),
    InputVertexCollection = cms.InputTag(""),
    SeedCreatorPSet = cms.PSet(
        refToPSet_ = cms.string('hltPhase2L3MuonSeedFromProtoTracks')
    ),
    TTRHBuilder = cms.string('WithTrackAngle'),
    originHalfLength = cms.double(0.3),
    originRadius = cms.double(0.1),
    useEventsWithNoVertex = cms.bool(True),
    usePV = cms.bool(True),
    useProtoTrackKinematics = cms.bool(False)
)


process.hltPhase2L3MuonInitialStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string('ParabolicMf'),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('hltPhase2L3MuonInitialStepTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(100000),
    maxSeedsBeforeCleaning = cms.uint32(1000),
    numHitsForSeedCleaner = cms.int32(50),
    onlyPixelHitsForSeedCleaner = cms.bool(True),
    propagatorAlongTISE = cms.string('PropagatorWithMaterialParabolicMf'),
    propagatorOppositeTISE = cms.string('PropagatorWithMaterialParabolicMfOpposite'),
    reverseTrajectories = cms.bool(False),
    src = cms.InputTag("hltPhase2L3MuonInitialStepSeeds"),
    useHitsSplitting = cms.bool(False)
)


process.hltPhase2L3MuonInitialStepTrackCutClassifier = cms.EDProducer("TrackCutClassifier",
    beamspot = cms.InputTag("offlineBeamSpot"),
    ignoreVertices = cms.bool(False),
    mva = cms.PSet(
        dr_par = cms.PSet(
            d0err = cms.vdouble(0.003, 0.003, 0.003),
            d0err_par = cms.vdouble(0.001, 0.001, 0.001),
            dr_exp = cms.vint32(4, 4, 4),
            dr_par1 = cms.vdouble(0.8, 0.7, 0.6),
            dr_par2 = cms.vdouble(0.6, 0.5, 0.45)
        ),
        dz_par = cms.PSet(
            dz_exp = cms.vint32(4, 4, 4),
            dz_par1 = cms.vdouble(0.9, 0.8, 0.7),
            dz_par2 = cms.vdouble(0.8, 0.7, 0.55)
        ),
        maxChi2 = cms.vdouble(9999.0, 25.0, 16.0),
        maxChi2n = cms.vdouble(2.0, 1.4, 1.2),
        maxDr = cms.vdouble(0.5, 0.03, 3.40282346639e+38),
        maxDz = cms.vdouble(0.5, 0.2, 3.40282346639e+38),
        maxDzWrtBS = cms.vdouble(3.40282346639e+38, 24.0, 15.0),
        maxLostLayers = cms.vint32(3, 2, 2),
        min3DLayers = cms.vint32(3, 3, 3),
        minLayers = cms.vint32(3, 3, 3),
        minNVtxTrk = cms.int32(3),
        minNdof = cms.vdouble(1e-05, 1e-05, 1e-05),
        minPixelHits = cms.vint32(0, 0, 3)
    ),
    qualityCuts = cms.vdouble(-0.7, 0.1, 0.7),
    src = cms.InputTag("hltPhase2L3MuonInitialStepTracks"),
    vertices = cms.InputTag("hltPhase2L3MuonPixelVertices")
)


process.hltPhase2L3MuonInitialStepTrackingRegions = cms.EDProducer("CandidateSeededTrackingRegionsEDProducer",
    RegionPSet = cms.PSet(
        beamSpot = cms.InputTag("offlineBeamSpot"),
        deltaEta = cms.double(0.4),
        deltaPhi = cms.double(0.4),
        input = cms.InputTag("hltPhase2L3MuonCandidates"),
        maxNRegions = cms.int32(10000),
        maxNVertices = cms.int32(1),
        measurementTrackerName = cms.InputTag(""),
        mode = cms.string('BeamSpotSigma'),
        nSigmaZBeamSpot = cms.double(4.0),
        nSigmaZVertex = cms.double(3.0),
        originRadius = cms.double(0.2),
        precise = cms.bool(True),
        ptMin = cms.double(0.9),
        searchOpt = cms.bool(False),
        vertexCollection = cms.InputTag("notUsed"),
        whereToUseMeasurementTracker = cms.string('Never'),
        zErrorBeamSpot = cms.double(24.2),
        zErrorVetex = cms.double(0.2)
    )
)


process.hltPhase2L3MuonInitialStepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('initialStep'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("hltPhase2L3MuonInitialStepTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.hltPhase2L3MuonInitialStepTracksSelectionHighPurity = cms.EDProducer("TrackCollectionFilterCloner",
    copyExtras = cms.untracked.bool(True),
    copyTrajectories = cms.untracked.bool(False),
    minQuality = cms.string('highPurity'),
    originalMVAVals = cms.InputTag("hltPhase2L3MuonInitialStepTrackCutClassifier","MVAValues"),
    originalQualVals = cms.InputTag("hltPhase2L3MuonInitialStepTrackCutClassifier","QualityMasks"),
    originalSource = cms.InputTag("hltPhase2L3MuonInitialStepTracks")
)


process.hltPhase2L3MuonMerged = cms.EDProducer("TrackListMerger",
    Epsilon = cms.double(-0.001),
    FoundHitBonus = cms.double(5.0),
    LostHitPenalty = cms.double(20.0),
    MaxNormalizedChisq = cms.double(1000.0),
    MinFound = cms.int32(3),
    MinPT = cms.double(0.05),
    ShareFrac = cms.double(0.19),
    TrackProducers = cms.VInputTag("hltPhase2L3OIMuonTrackSelectionHighPurity", "hltIter2Phase2L3FromL1TkMuonMerged"),
    allowFirstHitShare = cms.bool(True),
    copyExtras = cms.untracked.bool(True),
    copyMVA = cms.bool(False),
    hasSelector = cms.vint32(0, 0),
    indivShareFrac = cms.vdouble(1.0, 1.0),
    newQuality = cms.string('confirmed'),
    selectedTrackQuals = cms.VInputTag("hltPhase2L3OIMuonTrackSelectionHighPurity", "hltIter2Phase2L3FromL1TkMuonMerged"),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(False),
        tLists = cms.vint32(0, 1)
    )),
    trackAlgoPriorityOrder = cms.string('hltESPTrackAlgoPriorityOrder'),
    writeOnlyTrkQuals = cms.bool(False)
)


process.hltPhase2L3MuonPixelFitterByHelixProjections = cms.EDProducer("PixelFitterByHelixProjectionsProducer",
    scaleErrorsForBPix1 = cms.bool(False),
    scaleFactor = cms.double(0.65)
)


process.hltPhase2L3MuonPixelTrackFilterByKinematics = cms.EDProducer("PixelTrackFilterByKinematicsProducer",
    chi2 = cms.double(1000.0),
    nSigmaInvPtTolerance = cms.double(0.0),
    nSigmaTipMaxTolerance = cms.double(0.0),
    ptMin = cms.double(0.9),
    tipMax = cms.double(1.0)
)


process.hltPhase2L3MuonPixelTracks = cms.EDProducer("PixelTrackProducer",
    Cleaner = cms.string('hltPhase2L3MuonPixelTrackCleanerBySharedHits'),
    Filter = cms.InputTag("hltPhase2L3MuonPixelTrackFilterByKinematics"),
    Fitter = cms.InputTag("hltPhase2L3MuonPixelFitterByHelixProjections"),
    SeedingHitSets = cms.InputTag("hltPhase2L3MuonPixelTracksHitQuadruplets"),
    mightGet = cms.optional.untracked.vstring,
    passLabel = cms.string('hltPhase2L3MuonPixelTracks')
)


process.hltPhase2L3MuonPixelTracksFilter = cms.EDProducer("PixelTrackFilterByKinematicsProducer",
    chi2 = cms.double(1000.0),
    nSigmaInvPtTolerance = cms.double(0.0),
    nSigmaTipMaxTolerance = cms.double(0.0),
    ptMin = cms.double(0.9),
    tipMax = cms.double(1.0)
)


process.hltPhase2L3MuonPixelTracksFitter = cms.EDProducer("PixelFitterByHelixProjectionsProducer",
    scaleErrorsForBPix1 = cms.bool(False),
    scaleFactor = cms.double(0.65)
)


process.hltPhase2L3MuonPixelTracksHitDoublets = cms.EDProducer("HitPairEDProducer",
    clusterCheck = cms.InputTag("trackerClusterCheck"),
    layerPairs = cms.vuint32(0, 1, 2),
    maxElement = cms.uint32(5000000),
    maxElementTotal = cms.uint32(50000000),
    mightGet = cms.optional.untracked.vstring,
    produceIntermediateHitDoublets = cms.bool(True),
    produceSeedingHitSets = cms.bool(False),
    seedingLayers = cms.InputTag("hltPhase2L3MuonPixelTracksSeedLayers"),
    trackingRegions = cms.InputTag("hltPhase2L3MuonPixelTracksTrackingRegions"),
    trackingRegionsSeedingLayers = cms.InputTag("")
)


process.hltPhase2L3MuonPixelTracksHitQuadruplets = cms.EDProducer("CAHitQuadrupletEDProducer",
    CAHardPtCut = cms.double(0),
    CAOnlyOneLastHitPerLayerFilter = cms.optional.bool,
    CAPhiCut = cms.double(0.2),
    CAThetaCut = cms.double(0.0012),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('LowPtClusterShapeSeedComparitor'),
        clusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
        clusterShapeHitFilter = cms.string('ClusterShapeHitFilter')
    ),
    doublets = cms.InputTag("hltPhase2L3MuonPixelTracksHitDoublets"),
    extraHitRPhitolerance = cms.double(0.032),
    fitFastCircle = cms.bool(True),
    fitFastCircleChi2Cut = cms.bool(True),
    maxChi2 = cms.PSet(
        enabled = cms.bool(True),
        pt1 = cms.double(0.7),
        pt2 = cms.double(2.0),
        value1 = cms.double(200.0),
        value2 = cms.double(50.0)
    ),
    mightGet = cms.optional.untracked.vstring,
    useBendingCorrection = cms.bool(True)
)


process.hltPhase2L3MuonPixelTracksSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring(
        'BPix1+BPix2+BPix3+BPix4', 
        'BPix1+BPix2+BPix3+FPix1_pos', 
        'BPix1+BPix2+BPix3+FPix1_neg', 
        'BPix1+BPix2+FPix1_pos+FPix2_pos', 
        'BPix1+BPix2+FPix1_neg+FPix2_neg', 
        'BPix1+FPix1_pos+FPix2_pos+FPix3_pos', 
        'BPix1+FPix1_neg+FPix2_neg+FPix3_neg', 
        'FPix1_pos+FPix2_pos+FPix3_pos+FPix4_pos', 
        'FPix1_neg+FPix2_neg+FPix3_neg+FPix4_neg', 
        'FPix2_pos+FPix3_pos+FPix4_pos+FPix5_pos', 
        'FPix2_neg+FPix3_neg+FPix4_neg+FPix5_neg', 
        'FPix3_pos+FPix4_pos+FPix5_pos+FPix6_pos', 
        'FPix3_neg+FPix4_neg+FPix5_neg+FPix6_neg', 
        'FPix4_pos+FPix5_pos+FPix6_pos+FPix7_pos', 
        'FPix4_neg+FPix5_neg+FPix6_neg+FPix7_neg', 
        'FPix5_pos+FPix6_pos+FPix7_pos+FPix8_pos', 
        'FPix5_neg+FPix6_neg+FPix7_neg+FPix8_neg'
    ),
    mightGet = cms.optional.untracked.vstring
)


process.hltPhase2L3MuonPixelTracksTrackingRegions = cms.EDProducer("CandidateSeededTrackingRegionsEDProducer",
    RegionPSet = cms.PSet(
        beamSpot = cms.InputTag("offlineBeamSpot"),
        deltaEta = cms.double(0.4),
        deltaPhi = cms.double(0.4),
        input = cms.InputTag("hltPhase2L3MuonCandidates"),
        maxNRegions = cms.int32(10000),
        maxNVertices = cms.int32(1),
        measurementTrackerName = cms.InputTag(""),
        mode = cms.string('BeamSpotSigma'),
        nSigmaZBeamSpot = cms.double(4.0),
        nSigmaZVertex = cms.double(3.0),
        originRadius = cms.double(0.2),
        precise = cms.bool(True),
        ptMin = cms.double(0.9),
        searchOpt = cms.bool(False),
        vertexCollection = cms.InputTag("notUsed"),
        whereToUseMeasurementTracker = cms.string('Never'),
        zErrorBeamSpot = cms.double(24.2),
        zErrorVetex = cms.double(0.2)
    )
)


process.hltPhase2L3MuonPixelVertices = cms.EDProducer("PixelVertexProducer",
    Finder = cms.string('DivisiveVertexFinder'),
    Method2 = cms.bool(True),
    NTrkMin = cms.int32(2),
    PVcomparer = cms.PSet(
        refToPSet_ = cms.string('hltPhase2L3MuonPSetPvClusterComparerForIT')
    ),
    PtMin = cms.double(1.0),
    TrackCollection = cms.InputTag("hltPhase2L3MuonPixelTracks"),
    UseError = cms.bool(True),
    Verbosity = cms.int32(0),
    WtAverage = cms.bool(True),
    ZOffset = cms.double(5.0),
    ZSeparation = cms.double(0.005),
    beamSpot = cms.InputTag("offlineBeamSpot")
)


process.hltPhase2L3MuonTracks = cms.EDProducer("HLTMuonTrackSelector",
    copyExtras = cms.untracked.bool(True),
    copyMVA = cms.bool(False),
    copyTrajectories = cms.untracked.bool(False),
    muon = cms.InputTag("hltPhase2L3Muons"),
    originalMVAVals = cms.InputTag("none"),
    track = cms.InputTag("hltPhase2L3MuonMerged")
)


process.hltPhase2L3Muons = cms.EDProducer("MuonIDFilterProducerForHLT",
    allowedTypeMask = cms.uint32(0),
    applyTriggerIdLoose = cms.bool(True),
    inputMuonCollection = cms.InputTag("hltPhase2L3MuonsNoID"),
    maxNormalizedChi2 = cms.double(9999.0),
    minNMuonHits = cms.int32(0),
    minNMuonStations = cms.int32(0),
    minNTrkLayers = cms.int32(0),
    minPixHits = cms.int32(0),
    minPixLayer = cms.int32(0),
    minPt = cms.double(0.0),
    minTrkHits = cms.int32(0),
    requiredTypeMask = cms.uint32(0),
    typeMuon = cms.uint32(0)
)


process.hltPhase2L3MuonsEcalIsoBase = cms.EDProducer("MuonHLTEcalPFClusterIsolationProducer",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    doRhoCorrection = cms.bool(False),
    drMax = cms.double(1.0),
    drVetoBarrel = cms.double(0.05),
    drVetoEndcap = cms.double(0.05),
    effectiveAreas = cms.vdouble(0.35, 0.193),
    energyBarrel = cms.double(0.0),
    energyEndcap = cms.double(0.0),
    etaStripBarrel = cms.double(0.0),
    etaStripEndcap = cms.double(0.0),
    pfClusterProducer = cms.InputTag("hltParticleFlowClusterECALUnseeded"),
    recoCandidateProducer = cms.InputTag("hltPhase2L3MuonCandidates"),
    rhoMax = cms.double(99999999.0),
    rhoProducer = cms.InputTag("hltFixedGridRhoFastjetAllCaloForMuons"),
    rhoScale = cms.double(1.0)
)


process.hltPhase2L3MuonsEcalIsodR0p3dRVeto0p000 = cms.EDProducer("MuonHLTEcalPFClusterIsolationProducer",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    doRhoCorrection = cms.bool(False),
    drMax = cms.double(0.3),
    drVetoBarrel = cms.double(0.0),
    drVetoEndcap = cms.double(0.0),
    effectiveAreas = cms.vdouble(0.35, 0.193),
    energyBarrel = cms.double(0.0),
    energyEndcap = cms.double(0.0),
    etaStripBarrel = cms.double(0.0),
    etaStripEndcap = cms.double(0.0),
    pfClusterProducer = cms.InputTag("hltParticleFlowClusterECALUnseeded"),
    recoCandidateProducer = cms.InputTag("hltPhase2L3MuonCandidates"),
    rhoMax = cms.double(99999999.0),
    rhoProducer = cms.InputTag("hltFixedGridRhoFastjetAllCaloForMuons"),
    rhoScale = cms.double(1.0)
)


process.hltPhase2L3MuonsHcalIsoBase = cms.EDProducer("MuonHLTHcalPFClusterIsolationProducer",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    doRhoCorrection = cms.bool(False),
    drMax = cms.double(1.0),
    drVetoBarrel = cms.double(0.1),
    drVetoEndcap = cms.double(0.1),
    effectiveAreas = cms.vdouble(0.227, 0.372),
    energyBarrel = cms.double(0.0),
    energyEndcap = cms.double(0.0),
    etaStripBarrel = cms.double(0.0),
    etaStripEndcap = cms.double(0.0),
    pfClusterProducerHCAL = cms.InputTag("hltParticleFlowClusterHCALForMuons"),
    pfClusterProducerHFEM = cms.InputTag(""),
    pfClusterProducerHFHAD = cms.InputTag(""),
    recoCandidateProducer = cms.InputTag("hltPhase2L3MuonCandidates"),
    rhoMax = cms.double(99999999.0),
    rhoProducer = cms.InputTag("hltFixedGridRhoFastjetAllCaloForMuons"),
    rhoScale = cms.double(1.0),
    useEt = cms.bool(True),
    useHF = cms.bool(False)
)


process.hltPhase2L3MuonsHcalIsodR0p3dRVeto0p000 = cms.EDProducer("MuonHLTHcalPFClusterIsolationProducer",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    doRhoCorrection = cms.bool(False),
    drMax = cms.double(0.3),
    drVetoBarrel = cms.double(0.0),
    drVetoEndcap = cms.double(0.0),
    effectiveAreas = cms.vdouble(0.227, 0.372),
    energyBarrel = cms.double(0.0),
    energyEndcap = cms.double(0.0),
    etaStripBarrel = cms.double(0.0),
    etaStripEndcap = cms.double(0.0),
    pfClusterProducerHCAL = cms.InputTag("hltParticleFlowClusterHCALForMuons"),
    pfClusterProducerHFEM = cms.InputTag(""),
    pfClusterProducerHFHAD = cms.InputTag(""),
    recoCandidateProducer = cms.InputTag("hltPhase2L3MuonCandidates"),
    rhoMax = cms.double(99999999.0),
    rhoProducer = cms.InputTag("hltFixedGridRhoFastjetAllCaloForMuons"),
    rhoScale = cms.double(1.0),
    useEt = cms.bool(True),
    useHF = cms.bool(False)
)


process.hltPhase2L3MuonsHgcalLCIsoBase = cms.EDProducer("MuonHLTHGCalLayerClusterIsolationProducer",
    doRhoCorrection = cms.bool(False),
    drMax = cms.double(1.0),
    drVetoEM = cms.double(0.0),
    drVetoHad = cms.double(0.0),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    layerClusterProducer = cms.InputTag("hgcalLayerClusters"),
    minEnergyEM = cms.double(0.0),
    minEnergyHad = cms.double(0.0),
    minEtEM = cms.double(0.0),
    minEtHad = cms.double(0.0),
    recoCandidateProducer = cms.InputTag("hltPhase2L3MuonCandidates"),
    rhoMax = cms.double(99999999.0),
    rhoProducer = cms.InputTag("hltFixedGridRhoFastjetAllCaloForMuons"),
    rhoScale = cms.double(1.0),
    useEt = cms.bool(False)
)


process.hltPhase2L3MuonsHgcalLCIsodR0p2dRVetoEM0p00dRVetoHad0p02minEEM0p00minEHad0p00 = cms.EDProducer("MuonHLTHGCalLayerClusterIsolationProducer",
    doRhoCorrection = cms.bool(False),
    drMax = cms.double(0.2),
    drVetoEM = cms.double(0.0),
    drVetoHad = cms.double(0.02),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    layerClusterProducer = cms.InputTag("hgcalLayerClusters"),
    minEnergyEM = cms.double(0.0),
    minEnergyHad = cms.double(0.0),
    minEtEM = cms.double(0.0),
    minEtHad = cms.double(0.0),
    recoCandidateProducer = cms.InputTag("hltPhase2L3MuonCandidates"),
    rhoMax = cms.double(99999999.0),
    rhoProducer = cms.InputTag("hltFixedGridRhoFastjetAllCaloForMuons"),
    rhoScale = cms.double(1.0),
    useEt = cms.bool(False)
)


process.hltPhase2L3MuonsNoID = cms.EDProducer("MuonIdProducer",
    CaloExtractorPSet = cms.PSet(
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        DR_Max = cms.double(1.0),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DR_Veto_HO = cms.double(0.1),
        DepositInstanceLabels = cms.vstring(
            'ecal', 
            'hcal', 
            'ho'
        ),
        DepositLabel = cms.untracked.string('Cal'),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Noise_EB = cms.double(0.025),
        Noise_EE = cms.double(0.1),
        Noise_HB = cms.double(0.2),
        Noise_HE = cms.double(0.2),
        Noise_HO = cms.double(0.2),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('hltESPFastSteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('hltESPFastSteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Threshold_HO = cms.double(0.5),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("hltCscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("Notused"),
            DTRecSegment4DCollectionLabel = cms.InputTag("hltDt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("Notused"),
            EERecHitCollectionLabel = cms.InputTag("Notused"),
            HBHERecHitCollectionLabel = cms.InputTag("Notused"),
            HORecHitCollectionLabel = cms.InputTag("Notused"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            dRHcal = cms.double(1.0),
            dRHcalPreselection = cms.double(1.0),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        ),
        UseRecHitsFlag = cms.bool(False)
    ),
    JetExtractorPSet = cms.PSet(
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.1),
        ExcludeMuonVeto = cms.bool(True),
        JetCollectionLabel = cms.InputTag("Notused"),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('hltESPFastSteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('hltESPFastSteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold = cms.double(5.0),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("hltCscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("Notused"),
            DTRecSegment4DCollectionLabel = cms.InputTag("hltDt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("Notused"),
            EERecHitCollectionLabel = cms.InputTag("Notused"),
            HBHERecHitCollectionLabel = cms.InputTag("Notused"),
            HORecHitCollectionLabel = cms.InputTag("Notused"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            dRHcal = cms.double(0.5),
            dRHcalPreselection = cms.double(0.5),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        )
    ),
    MuonCaloCompatibility = cms.PSet(
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        allSiPMHO = cms.bool(False),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    TimingFillerParameters = cms.PSet(
        CSCTimingParameters = cms.PSet(
            CSCStripError = cms.double(7.0),
            CSCStripTimeOffset = cms.double(0.0),
            CSCTimeOffset = cms.double(0.0),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            CSCsegments = cms.InputTag("hltCscSegments"),
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("hltCscSegments"),
                DTradius = cms.double(0.01),
                DTsegments = cms.InputTag("hltDt4DSegments"),
                TightMatchCSC = cms.bool(True),
                TightMatchDT = cms.bool(False)
            ),
            PruneCut = cms.double(100.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('hltESPFastSteppingHelixPropagatorAny'),
                RPCLayers = cms.bool(True)
            ),
            UseStripTime = cms.bool(True),
            UseWireTime = cms.bool(True),
            debug = cms.bool(False)
        ),
        DTTimingParameters = cms.PSet(
            DTTimeOffset = cms.double(2.7),
            DTsegments = cms.InputTag("hltDt4DSegments"),
            DoWireCorr = cms.bool(False),
            DropTheta = cms.bool(True),
            HitError = cms.double(6.0),
            HitsMin = cms.int32(5),
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("hltCscSegments"),
                DTradius = cms.double(0.01),
                DTsegments = cms.InputTag("hltDt4DSegments"),
                TightMatchCSC = cms.bool(True),
                TightMatchDT = cms.bool(False)
            ),
            PruneCut = cms.double(10000.0),
            RequireBothProjections = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('hltESPFastSteppingHelixPropagatorAny'),
                RPCLayers = cms.bool(True)
            ),
            UseSegmentT0 = cms.bool(False),
            debug = cms.bool(False)
        ),
        EcalEnergyCut = cms.double(0.4),
        ErrorCSC = cms.double(7.4),
        ErrorDT = cms.double(6.0),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        UseCSC = cms.bool(True),
        UseDT = cms.bool(True),
        UseECAL = cms.bool(True)
    ),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("hltCscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("Notused"),
        DTRecSegment4DCollectionLabel = cms.InputTag("hltDt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("Notused"),
        EERecHitCollectionLabel = cms.InputTag("Notused"),
        GEMSegmentCollectionLabel = cms.InputTag("hltGemSegments"),
        HBHERecHitCollectionLabel = cms.InputTag("Notused"),
        HORecHitCollectionLabel = cms.InputTag("Notused"),
        ME0SegmentCollectionLabel = cms.InputTag("hltMe0Segments"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        dRHcal = cms.double(9999.0),
        dRHcalPreselection = cms.double(0.2),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(False),
        useGEM = cms.bool(True),
        useHO = cms.bool(False),
        useHcal = cms.bool(False),
        useME0 = cms.bool(True),
        useMuon = cms.bool(True),
        usePreshower = cms.bool(False)
    ),
    TrackExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.01),
        Diff_r = cms.double(0.1),
        Diff_z = cms.double(0.2),
        NHits_Min = cms.uint32(0),
        Pt_Min = cms.double(-1.0),
        inputTrackCollection = cms.InputTag("hltPhase2L3MuonMerged")
    ),
    TrackerKinkFinderParameters = cms.PSet(
        diagonalOnly = cms.bool(False),
        usePosition = cms.bool(False)
    ),
    addExtraSoftMuons = cms.bool(False),
    arbitrateTrackerMuons = cms.bool(True),
    arbitrationCleanerOptions = cms.PSet(
        ClusterDPhi = cms.double(0.6),
        ClusterDTheta = cms.double(0.02),
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        OverlapDTheta = cms.double(0.02)
    ),
    debugWithTruthMatching = cms.bool(False),
    ecalDepositName = cms.string('ecal'),
    fillCaloCompatibility = cms.bool(False),
    fillEnergy = cms.bool(False),
    fillGlobalTrackQuality = cms.bool(False),
    fillGlobalTrackRefits = cms.bool(False),
    fillIsolation = cms.bool(False),
    fillMatching = cms.bool(True),
    fillTrackerKink = cms.bool(False),
    globalTrackQualityInputTag = cms.InputTag("glbTrackQual"),
    hcalDepositName = cms.string('hcal'),
    hoDepositName = cms.string('ho'),
    inputCollectionLabels = cms.VInputTag("hltPhase2L3MuonMerged", "hltPhase2L3GlbMuon", "hltL2MuonsFromL1TkMuon:UpdatedAtVtx"),
    inputCollectionTypes = cms.vstring(
        'inner tracks', 
        'links', 
        'outer tracks'
    ),
    jetDepositName = cms.string('jets'),
    maxAbsDx = cms.double(3.0),
    maxAbsDy = cms.double(9999.0),
    maxAbsEta = cms.double(3.0),
    maxAbsPullX = cms.double(4.0),
    maxAbsPullY = cms.double(9999.0),
    minCaloCompatibility = cms.double(0.6),
    minNumberOfMatches = cms.int32(1),
    minP = cms.double(0.0),
    minPCaloMuon = cms.double(1000000000.0),
    minPt = cms.double(2.0),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    runArbitrationCleaner = cms.bool(False),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    trackDepositName = cms.string('tracker'),
    writeIsoDeposits = cms.bool(False)
)


process.hltPhase2L3MuonsNoIDTracks = cms.EDProducer("MuonTrackProducer",
    ignoreMissingMuonCollection = cms.untracked.bool(True),
    inputCSCSegmentCollection = cms.InputTag("hltCscSegments"),
    inputDTRecSegment4DCollection = cms.InputTag("hltDt4DSegments"),
    muonsTag = cms.InputTag("hltPhase2L3MuonsNoID"),
    selectionTags = cms.vstring('All'),
    trackType = cms.string('recomuonTrack')
)


process.hltPhase2L3MuonsTracks = cms.EDProducer("MuonTrackProducer",
    ignoreMissingMuonCollection = cms.untracked.bool(True),
    inputCSCSegmentCollection = cms.InputTag("hltCscSegments"),
    inputDTRecSegment4DCollection = cms.InputTag("hltDt4DSegments"),
    muonsTag = cms.InputTag("hltPhase2L3Muons"),
    selectionTags = cms.vstring('All'),
    trackType = cms.string('recomuonTrack')
)


process.hltPhase2L3MuonsTrkIsoRegionalNewBase = cms.EDProducer("L3MuonCombinedRelativeIsolationProducer",
    CaloDepositsLabel = cms.InputTag("notUsed"),
    CaloExtractorPSet = cms.PSet(
        CaloTowerCollectionLabel = cms.InputTag("hltTowerMakerForAll"),
        ComponentName = cms.string('CaloExtractor'),
        DR_Max = cms.double(0.3),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DepositLabel = cms.untracked.string('EcalPlusHcal'),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Vertex_Constraint_XY = cms.bool(False),
        Vertex_Constraint_Z = cms.bool(False),
        Weight_E = cms.double(1.0),
        Weight_H = cms.double(1.0)
    ),
    CutsPSet = cms.PSet(
        ComponentName = cms.string('SimpleCuts'),
        ConeSizes = cms.vdouble(1.0),
        EtaBounds = cms.vdouble(2.411),
        Thresholds = cms.vdouble(1000000000.0),
        applyCutsORmaxNTracks = cms.bool(False),
        maxNTracks = cms.int32(-1)
    ),
    OutputMuIsoDeposits = cms.bool(True),
    TrackPt_Min = cms.double(-1.0),
    TrkExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('PixelTrackExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.01),
        DR_VetoPt = cms.double(0.025),
        DepositLabel = cms.untracked.string('PXLS'),
        Diff_r = cms.double(0.1),
        Diff_z = cms.double(0.2),
        NHits_Min = cms.uint32(0),
        PropagateTracksToRadius = cms.bool(True),
        PtVeto_Min = cms.double(2.0),
        Pt_Min = cms.double(-1.0),
        ReferenceRadius = cms.double(6.0),
        VetoLeadingTrack = cms.bool(True),
        inputTrackCollection = cms.InputTag("hltPhase2L3MuonGeneralTracks")
    ),
    UseCaloIso = cms.bool(False),
    UseRhoCorrectedCaloDeposits = cms.bool(False),
    inputMuonCollection = cms.InputTag("hltPhase2L3MuonCandidates"),
    printDebug = cms.bool(False)
)


process.hltPhase2L3MuonsTrkIsoRegionalNewdR0p3dRVeto0p005dz0p25dr0p20ChisqInfPtMin0p0 = cms.EDProducer("L3MuonCombinedRelativeIsolationProducer",
    CaloDepositsLabel = cms.InputTag("notUsed"),
    CaloExtractorPSet = cms.PSet(
        CaloTowerCollectionLabel = cms.InputTag("hltTowerMakerForAll"),
        ComponentName = cms.string('CaloExtractor'),
        DR_Max = cms.double(0.3),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DepositLabel = cms.untracked.string('EcalPlusHcal'),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Vertex_Constraint_XY = cms.bool(False),
        Vertex_Constraint_Z = cms.bool(False),
        Weight_E = cms.double(1.0),
        Weight_H = cms.double(1.0)
    ),
    CutsPSet = cms.PSet(
        ComponentName = cms.string('SimpleCuts'),
        ConeSizes = cms.vdouble(0.3),
        EtaBounds = cms.vdouble(2.411),
        Thresholds = cms.vdouble(1000000000.0),
        applyCutsORmaxNTracks = cms.bool(False),
        maxNTracks = cms.int32(-1)
    ),
    OutputMuIsoDeposits = cms.bool(True),
    TrackPt_Min = cms.double(-1.0),
    TrkExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('PixelTrackExtractor'),
        DR_Max = cms.double(0.3),
        DR_Veto = cms.double(0.005),
        DR_VetoPt = cms.double(0.025),
        DepositLabel = cms.untracked.string('PXLS'),
        Diff_r = cms.double(0.2),
        Diff_z = cms.double(0.25),
        NHits_Min = cms.uint32(0),
        PropagateTracksToRadius = cms.bool(True),
        PtVeto_Min = cms.double(2.0),
        Pt_Min = cms.double(-1.0),
        ReferenceRadius = cms.double(6.0),
        VetoLeadingTrack = cms.bool(True),
        inputTrackCollection = cms.InputTag("hltPhase2L3MuonGeneralTracks")
    ),
    UseCaloIso = cms.bool(False),
    UseRhoCorrectedCaloDeposits = cms.bool(False),
    inputMuonCollection = cms.InputTag("hltPhase2L3MuonCandidates"),
    printDebug = cms.bool(False)
)


process.hltPhase2L3MuonsTrkIsoRegionalNewdR0p3dRVeto0p005dz0p25dr0p20ChisqInfPtMin0p0Cut0p07 = cms.EDProducer("L3MuonCombinedRelativeIsolationProducer",
    CaloDepositsLabel = cms.InputTag("notUsed"),
    CaloExtractorPSet = cms.PSet(
        CaloTowerCollectionLabel = cms.InputTag("hltTowerMakerForAll"),
        ComponentName = cms.string('CaloExtractor'),
        DR_Max = cms.double(0.3),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DepositLabel = cms.untracked.string('EcalPlusHcal'),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Vertex_Constraint_XY = cms.bool(False),
        Vertex_Constraint_Z = cms.bool(False),
        Weight_E = cms.double(1.0),
        Weight_H = cms.double(1.0)
    ),
    CutsPSet = cms.PSet(
        ComponentName = cms.string('SimpleCuts'),
        ConeSizes = cms.vdouble(0.3),
        EtaBounds = cms.vdouble(2.411),
        Thresholds = cms.vdouble(0.07),
        applyCutsORmaxNTracks = cms.bool(False),
        maxNTracks = cms.int32(-1)
    ),
    OutputMuIsoDeposits = cms.bool(True),
    TrackPt_Min = cms.double(-1.0),
    TrkExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('PixelTrackExtractor'),
        DR_Max = cms.double(0.3),
        DR_Veto = cms.double(0.005),
        DR_VetoPt = cms.double(0.025),
        DepositLabel = cms.untracked.string('PXLS'),
        Diff_r = cms.double(0.2),
        Diff_z = cms.double(0.25),
        NHits_Min = cms.uint32(0),
        PropagateTracksToRadius = cms.bool(True),
        PtVeto_Min = cms.double(2.0),
        Pt_Min = cms.double(-1.0),
        ReferenceRadius = cms.double(6.0),
        VetoLeadingTrack = cms.bool(True),
        inputTrackCollection = cms.InputTag("hltPhase2L3MuonGeneralTracks")
    ),
    UseCaloIso = cms.bool(False),
    UseRhoCorrectedCaloDeposits = cms.bool(False),
    inputMuonCollection = cms.InputTag("hltPhase2L3MuonCandidates"),
    printDebug = cms.bool(False)
)


process.hltPhase2L3MuonsTrkIsoRegionalNewdR0p3dRVeto0p005dz0p25dr0p20ChisqInfPtMin0p0Cut0p4 = cms.EDProducer("L3MuonCombinedRelativeIsolationProducer",
    CaloDepositsLabel = cms.InputTag("notUsed"),
    CaloExtractorPSet = cms.PSet(
        CaloTowerCollectionLabel = cms.InputTag("hltTowerMakerForAll"),
        ComponentName = cms.string('CaloExtractor'),
        DR_Max = cms.double(0.3),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DepositLabel = cms.untracked.string('EcalPlusHcal'),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Vertex_Constraint_XY = cms.bool(False),
        Vertex_Constraint_Z = cms.bool(False),
        Weight_E = cms.double(1.0),
        Weight_H = cms.double(1.0)
    ),
    CutsPSet = cms.PSet(
        ComponentName = cms.string('SimpleCuts'),
        ConeSizes = cms.vdouble(0.3),
        EtaBounds = cms.vdouble(2.411),
        Thresholds = cms.vdouble(0.4),
        applyCutsORmaxNTracks = cms.bool(False),
        maxNTracks = cms.int32(-1)
    ),
    OutputMuIsoDeposits = cms.bool(True),
    TrackPt_Min = cms.double(-1.0),
    TrkExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('PixelTrackExtractor'),
        DR_Max = cms.double(0.3),
        DR_Veto = cms.double(0.005),
        DR_VetoPt = cms.double(0.025),
        DepositLabel = cms.untracked.string('PXLS'),
        Diff_r = cms.double(0.2),
        Diff_z = cms.double(0.25),
        NHits_Min = cms.uint32(0),
        PropagateTracksToRadius = cms.bool(True),
        PtVeto_Min = cms.double(2.0),
        Pt_Min = cms.double(-1.0),
        ReferenceRadius = cms.double(6.0),
        VetoLeadingTrack = cms.bool(True),
        inputTrackCollection = cms.InputTag("hltPhase2L3MuonGeneralTracks")
    ),
    UseCaloIso = cms.bool(False),
    UseRhoCorrectedCaloDeposits = cms.bool(False),
    inputMuonCollection = cms.InputTag("hltPhase2L3MuonCandidates"),
    printDebug = cms.bool(False)
)


process.hltPhase2L3OIL3MuonCandidates = cms.EDProducer("L3MuonCandidateProducer",
    InputLinksObjects = cms.InputTag("hltPhase2L3OIL3MuonsLinksCombination"),
    InputObjects = cms.InputTag("hltPhase2L3OIL3Muons"),
    MuonPtOption = cms.string('Tracker')
)


process.hltPhase2L3OIL3Muons = cms.EDProducer("L3TrackCombiner",
    labels = cms.VInputTag("hltL3MuonsPhase2L3OI")
)


process.hltPhase2L3OIL3MuonsLinksCombination = cms.EDProducer("L3TrackLinksCombiner",
    labels = cms.VInputTag("hltL3MuonsPhase2L3OI")
)


process.hltPhase2L3OIMuCtfWithMaterialTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('iter10'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(True),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string(''),
    Propagator = cms.string('hltESPRungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("hltPhase2L3OITrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.hltPhase2L3OIMuonTrackCutClassifier = cms.EDProducer("TrackCutClassifier",
    beamspot = cms.InputTag("offlineBeamSpot"),
    ignoreVertices = cms.bool(True),
    mva = cms.PSet(
        dr_par = cms.PSet(
            d0err = cms.vdouble(0.003, 0.003, 3.40282346639e+38),
            d0err_par = cms.vdouble(0.001, 0.001, 3.40282346639e+38),
            dr_exp = cms.vint32(4, 4, 2147483647),
            dr_par1 = cms.vdouble(0.4, 0.4, 3.40282346639e+38),
            dr_par2 = cms.vdouble(0.3, 0.3, 3.40282346639e+38)
        ),
        dz_par = cms.PSet(
            dz_exp = cms.vint32(4, 4, 2147483647),
            dz_par1 = cms.vdouble(0.4, 0.4, 3.40282346639e+38),
            dz_par2 = cms.vdouble(0.35, 0.35, 3.40282346639e+38)
        ),
        maxChi2 = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
        maxChi2n = cms.vdouble(10.0, 1.0, 0.4),
        maxDr = cms.vdouble(0.5, 0.03, 3.40282346639e+38),
        maxDz = cms.vdouble(0.5, 0.2, 3.40282346639e+38),
        maxDzWrtBS = cms.vdouble(3.40282346639e+38, 24.0, 100.0),
        maxLostLayers = cms.vint32(4, 3, 2),
        min3DLayers = cms.vint32(1, 2, 1),
        minLayers = cms.vint32(3, 5, 5),
        minNVtxTrk = cms.int32(3),
        minNdof = cms.vdouble(1e-05, 1e-05, 1e-05),
        minPixelHits = cms.vint32(0, 0, 1)
    ),
    qualityCuts = cms.vdouble(-0.7, 0.1, 0.7),
    src = cms.InputTag("hltPhase2L3OIMuCtfWithMaterialTracks"),
    vertices = cms.InputTag("Notused")
)


process.hltPhase2L3OIMuonTrackSelectionHighPurity = cms.EDProducer("TrackCollectionFilterCloner",
    copyExtras = cms.untracked.bool(True),
    copyTrajectories = cms.untracked.bool(False),
    minQuality = cms.string('highPurity'),
    originalMVAVals = cms.InputTag("hltPhase2L3OIMuonTrackCutClassifier","MVAValues"),
    originalQualVals = cms.InputTag("hltPhase2L3OIMuonTrackCutClassifier","QualityMasks"),
    originalSource = cms.InputTag("hltPhase2L3OIMuCtfWithMaterialTracks")
)


process.hltPhase2L3OISeedsFromL2Muons = cms.EDProducer("TSGForOIFromL2",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    SF1 = cms.double(3.0),
    SF2 = cms.double(4.0),
    SF3 = cms.double(5.0),
    SF4 = cms.double(7.0),
    SF5 = cms.double(10.0),
    SF6 = cms.double(2.0),
    UseHitLessSeeds = cms.bool(True),
    adjustErrorsDynamicallyForHitless = cms.bool(True),
    adjustErrorsDynamicallyForHits = cms.bool(False),
    debug = cms.untracked.bool(False),
    estimator = cms.string('hltESPChi2MeasurementEstimator100'),
    eta1 = cms.double(0.2),
    eta2 = cms.double(0.3),
    eta3 = cms.double(1.0),
    eta4 = cms.double(1.2),
    eta5 = cms.double(1.6),
    eta6 = cms.double(1.4),
    eta7 = cms.double(2.1),
    fixedErrorRescaleFactorForHitless = cms.double(2.0),
    fixedErrorRescaleFactorForHits = cms.double(1.0),
    hitsToTry = cms.int32(1),
    layersToTry = cms.int32(2),
    maxEtaForTOB = cms.double(1.8),
    maxHitSeeds = cms.uint32(1),
    maxHitlessSeeds = cms.uint32(5),
    maxSeeds = cms.uint32(20),
    minEtaForTEC = cms.double(0.7),
    numL2ValidHitsCutAllEndcap = cms.uint32(30),
    numL2ValidHitsCutAllEta = cms.uint32(20),
    pT1 = cms.double(13.0),
    pT2 = cms.double(30.0),
    pT3 = cms.double(70.0),
    propagatorName = cms.string('PropagatorWithMaterialParabolicMf'),
    src = cms.InputTag("hltL2MuonsFromL1TkMuon","UpdatedAtVtx"),
    tsosDiff1 = cms.double(0.2),
    tsosDiff2 = cms.double(0.02)
)


process.hltPhase2L3OITrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('CkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('HLTPSetMuonCkfTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('muonSeededTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(False),
    doSeedingRegionRebuilding = cms.bool(False),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    src = cms.InputTag("hltPhase2L3OISeedsFromL2Muons"),
    useHitsSplitting = cms.bool(False)
)


process.hltRpcRecHits = cms.EDProducer("RPCRecHitProducer",
    deadSource = cms.string('File'),
    deadvecfile = cms.FileInPath('RecoLocalMuon/RPCRecHit/data/RPCDeadVec.dat'),
    maskSource = cms.string('File'),
    maskvecfile = cms.FileInPath('RecoLocalMuon/RPCRecHit/data/RPCMaskVec.dat'),
    recAlgo = cms.string('RPCRecHitStandardAlgo'),
    recAlgoConfig = cms.PSet(

    ),
    rpcDigiLabel = cms.InputTag("simMuonRPCDigis")
)


process.hltScalersRawToDigi = cms.EDProducer("ScalersRawToDigi",
    scalersInputTag = cms.InputTag("rawDataCollector")
)


process.hltTPClusterProducer = cms.EDProducer("ClusterTPAssociationProducer",
    mightGet = cms.optional.untracked.vstring,
    phase2OTClusterSrc = cms.InputTag("siPhase2Clusters"),
    phase2OTSimLinkSrc = cms.InputTag("simSiPixelDigis","Tracker"),
    pixelClusterSrc = cms.InputTag("siPixelClusters"),
    pixelSimLinkSrc = cms.InputTag("simSiPixelDigis","Pixel"),
    simTrackSrc = cms.InputTag("g4SimHits"),
    stripClusterSrc = cms.InputTag("siStripClusters"),
    stripSimLinkSrc = cms.InputTag("simSiStripDigis"),
    trackingParticleSrc = cms.InputTag("mix","MergedTrackTruth")
)


process.hltTowerMakerForAll = cms.EDProducer("CaloTowersCreator",
    AllowMissingInputs = cms.bool(False),
    EBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBSumThreshold = cms.double(0.2),
    EBThreshold = cms.double(0.07),
    EBWeight = cms.double(1.0),
    EBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EESumThreshold = cms.double(0.45),
    EEThreshold = cms.double(0.3),
    EEWeight = cms.double(1.0),
    EEWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EcalRecHitSeveritiesToBeExcluded = cms.vstring(
        'kTime', 
        'kWeird', 
        'kBad'
    ),
    EcalSeveritiesToBeUsedInBadTowers = cms.vstring(),
    EcutTower = cms.double(-1000.0),
    HBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HBThreshold = cms.double(0.3),
    HBThreshold1 = cms.double(0.1),
    HBThreshold2 = cms.double(0.2),
    HBWeight = cms.double(1.0),
    HBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HEDGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HEDThreshold = cms.double(0.2),
    HEDThreshold1 = cms.double(0.1),
    HEDWeight = cms.double(1.0),
    HEDWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HESGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HESThreshold = cms.double(0.2),
    HESThreshold1 = cms.double(0.1),
    HESWeight = cms.double(1.0),
    HESWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF1Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF1Threshold = cms.double(0.5),
    HF1Weight = cms.double(1.0),
    HF1Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF2Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF2Threshold = cms.double(0.85),
    HF2Weight = cms.double(1.0),
    HF2Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HOThreshold0 = cms.double(1.1),
    HOThresholdMinus1 = cms.double(3.5),
    HOThresholdMinus2 = cms.double(3.5),
    HOThresholdPlus1 = cms.double(3.5),
    HOThresholdPlus2 = cms.double(3.5),
    HOWeight = cms.double(1.0),
    HOWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HcalAcceptSeverityLevel = cms.uint32(9),
    HcalAcceptSeverityLevelForRejectedHit = cms.uint32(9999),
    HcalPhase = cms.int32(1),
    HcalThreshold = cms.double(-1000.0),
    MomConstrMethod = cms.int32(1),
    MomEBDepth = cms.double(0.3),
    MomEEDepth = cms.double(0.0),
    MomHBDepth = cms.double(0.2),
    MomHEDepth = cms.double(0.4),
    UseEcalRecoveredHits = cms.bool(False),
    UseEtEBTreshold = cms.bool(False),
    UseEtEETreshold = cms.bool(False),
    UseHO = cms.bool(False),
    UseHcalRecoveredHits = cms.bool(True),
    UseRejectedHitsOnly = cms.bool(False),
    UseRejectedRecoveredEcalHits = cms.bool(False),
    UseRejectedRecoveredHcalHits = cms.bool(True),
    UseSymEBTreshold = cms.bool(True),
    UseSymEETreshold = cms.bool(True),
    ecalInputs = cms.VInputTag("hltEcalRecHit:EcalRecHitsEB", "hltEcalRecHit:EcalRecHitsEE"),
    hbheInput = cms.InputTag("hltHbhereco"),
    hfInput = cms.InputTag("hltHfreco"),
    hoInput = cms.InputTag("hltHoreco"),
    missingHcalRescaleFactorForEcal = cms.double(0)
)


process.hltTrackAssociatorByHits = cms.EDProducer("QuickTrackAssociatorByHitsProducer",
    AbsoluteNumberOfHits = cms.bool(False),
    Cut_RecoToSim = cms.double(0.75),
    PixelHitWeight = cms.double(1.0),
    Purity_SimToReco = cms.double(0.75),
    Quality_SimToReco = cms.double(0.5),
    SimToRecoDenominator = cms.string('reco'),
    ThreeHitTracksAreSpecial = cms.bool(False),
    UseGrouped = cms.bool(False),
    UseSplitting = cms.bool(False),
    cluster2TPSrc = cms.InputTag("hltTPClusterProducer"),
    useClusterTPAssociation = cms.bool(True)
)


process.hltTriggerSummaryAOD = cms.EDProducer("TriggerSummaryProducerAOD",
    moduleLabelPatternsToMatch = cms.vstring(
        'hlt*', 
        'L1Tk*'
    ),
    moduleLabelPatternsToSkip = cms.vstring(),
    processName = cms.string('@'),
    throw = cms.bool(False)
)


process.hltTriggerSummaryRAW = cms.EDProducer("TriggerSummaryProducerRAW",
    processName = cms.string('@')
)


process.horeco = cms.EDProducer("HcalHitReconstructor",
    Subdetector = cms.string('HO'),
    correctForPhaseContainment = cms.bool(True),
    correctForTimeslew = cms.bool(True),
    correctTiming = cms.bool(True),
    correctionPhaseNS = cms.double(13.0),
    dataOOTCorrectionCategory = cms.string('Data'),
    dataOOTCorrectionName = cms.string(''),
    digiLabel = cms.InputTag("hcalDigis"),
    dropZSmarkedPassed = cms.bool(True),
    firstAuxTS = cms.int32(4),
    firstSample = cms.int32(4),
    mcOOTCorrectionCategory = cms.string('MC'),
    mcOOTCorrectionName = cms.string(''),
    recoParamsFromDB = cms.bool(True),
    samplesToAdd = cms.int32(4),
    saturationParameters = cms.PSet(
        maxADCvalue = cms.int32(127)
    ),
    setHSCPFlags = cms.bool(True),
    setNegativeFlags = cms.bool(False),
    setNoiseFlags = cms.bool(True),
    setPulseShapeFlags = cms.bool(False),
    setSaturationFlags = cms.bool(True),
    setTimingTrustFlags = cms.bool(False),
    tsFromDB = cms.bool(True),
    useLeakCorrection = cms.bool(False)
)


process.horecoMB = cms.EDProducer("HcalSimpleReconstructor",
    Subdetector = cms.string('HO'),
    correctForPhaseContainment = cms.bool(True),
    correctForTimeslew = cms.bool(True),
    correctionPhaseNS = cms.double(13),
    digiLabel = cms.InputTag("hcalDigis"),
    dropZSmarkedPassed = cms.bool(False),
    firstSample = cms.int32(4),
    mightGet = cms.optional.untracked.vstring,
    samplesToAdd = cms.int32(4),
    tsFromDB = cms.bool(True)
)


process.hpsPFTauBasicDiscriminators = cms.EDProducer("PFRecoTauDiscriminationByIsolationContainer",
    IDWPdefinitions = cms.VPSet(
        cms.PSet(
            IDname = cms.string('ByLooseCombinedIsolationDBSumPtCorr3Hits'),
            maximumAbsoluteValues = cms.vdouble(2.5, 1000000000.0),
            maximumRelativeValues = cms.vdouble(-1.0, 0.1),
            referenceRawIDNames = cms.vstring(
                'ByRawCombinedIsolationDBSumPtCorr3Hits', 
                'PhotonPtSumOutsideSignalCone'
            )
        ), 
        cms.PSet(
            IDname = cms.string('ByMediumCombinedIsolationDBSumPtCorr3Hits'),
            maximumAbsoluteValues = cms.vdouble(1.5, 1000000000.0),
            maximumRelativeValues = cms.vdouble(-1.0, 0.1),
            referenceRawIDNames = cms.vstring(
                'ByRawCombinedIsolationDBSumPtCorr3Hits', 
                'PhotonPtSumOutsideSignalCone'
            )
        ), 
        cms.PSet(
            IDname = cms.string('ByTightCombinedIsolationDBSumPtCorr3Hits'),
            maximumAbsoluteValues = cms.vdouble(0.8, 1000000000.0),
            maximumRelativeValues = cms.vdouble(-1.0, 0.1),
            referenceRawIDNames = cms.vstring(
                'ByRawCombinedIsolationDBSumPtCorr3Hits', 
                'PhotonPtSumOutsideSignalCone'
            )
        ), 
        cms.PSet(
            IDname = cms.string('ByLooseChargedIsolation'),
            maximumAbsoluteValues = cms.vdouble(2.5),
            referenceRawIDNames = cms.vstring('ChargedIsoPtSum')
        ), 
        cms.PSet(
            IDname = cms.string('ByPhotonPtSumOutsideSignalCone'),
            maximumRelativeValues = cms.vdouble(0.1),
            referenceRawIDNames = cms.vstring('PhotonPtSumOutsideSignalCone')
        )
    ),
    IDdefinitions = cms.VPSet(
        cms.PSet(
            ApplyDiscriminationByTrackerIsolation = cms.bool(True),
            IDname = cms.string('ChargedIsoPtSum'),
            storeRawSumPt = cms.bool(True)
        ), 
        cms.PSet(
            ApplyDiscriminationByECALIsolation = cms.bool(True),
            IDname = cms.string('NeutralIsoPtSum'),
            storeRawSumPt = cms.bool(True)
        ), 
        cms.PSet(
            ApplyDiscriminationByWeightedECALIsolation = cms.bool(True),
            IDname = cms.string('NeutralIsoPtSumWeight'),
            UseAllPFCandsForWeights = cms.bool(True),
            storeRawSumPt = cms.bool(True)
        ), 
        cms.PSet(
            IDname = cms.string('TauFootprintCorrection'),
            storeRawFootprintCorrection = cms.bool(True)
        ), 
        cms.PSet(
            IDname = cms.string('PhotonPtSumOutsideSignalCone'),
            storeRawPhotonSumPt_outsideSignalCone = cms.bool(True)
        ), 
        cms.PSet(
            IDname = cms.string('PUcorrPtSum'),
            applyDeltaBetaCorrection = cms.bool(True),
            storeRawPUsumPt = cms.bool(True)
        ), 
        cms.PSet(
            ApplyDiscriminationByECALIsolation = cms.bool(True),
            ApplyDiscriminationByTrackerIsolation = cms.bool(True),
            IDname = cms.string('ByRawCombinedIsolationDBSumPtCorr3Hits'),
            applyDeltaBetaCorrection = cms.bool(True),
            storeRawSumPt = cms.bool(True)
        )
    ),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    WeightECALIsolation = cms.double(1.0),
    applyFootprintCorrection = cms.bool(False),
    applyRhoCorrection = cms.bool(False),
    customOuterCone = cms.double(0.5),
    deltaBetaFactor = cms.string('0.2000'),
    deltaBetaPUTrackPtCutOverride = cms.bool(True),
    deltaBetaPUTrackPtCutOverride_val = cms.double(0.5),
    footprintCorrections = cms.VPSet(
        cms.PSet(
            offset = cms.string('0.0'),
            selection = cms.string('decayMode() = 0')
        ), 
        cms.PSet(
            offset = cms.string('0.0'),
            selection = cms.string('decayMode() = 1 || decayMode() = 2')
        ), 
        cms.PSet(
            offset = cms.string('2.7'),
            selection = cms.string('decayMode() = 5')
        ), 
        cms.PSet(
            offset = cms.string('0.0'),
            selection = cms.string('decayMode() = 6')
        ), 
        cms.PSet(
            offset = cms.string('max(2.0, 0.22*pt() - 2.0)'),
            selection = cms.string('decayMode() = 10')
        )
    ),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    mightGet = cms.optional.untracked.vstring,
    minTauPtForNoIso = cms.double(-99.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.15),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.05),
            minGammaEt = cms.double(1.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.8),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        leadingTrkOrPFCandOption = cms.string('leadPFCand'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        pvFindingAlgo = cms.string('closestInDeltaZ'),
        recoverLeadingTrk = cms.bool(False),
        signalQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.4),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(1.0),
            minNeutralHadronEt = cms.double(30.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        vertexTrackFiltering = cms.bool(False),
        vxAssocQualityCuts = cms.PSet(
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(1.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        )
    ),
    rhoConeSize = cms.double(0.5),
    rhoProducer = cms.InputTag("fixedGridRhoFastjetAll"),
    rhoUEOffsetCorrection = cms.double(1.0),
    verbosity = cms.int32(0),
    vertexSrc = cms.InputTag("offlinePrimaryVertices")
)


process.hpsPFTauBasicDiscriminatorsdR03 = cms.EDProducer("PFRecoTauDiscriminationByIsolationContainer",
    IDWPdefinitions = cms.VPSet(
        cms.PSet(
            IDname = cms.string('ByLooseCombinedIsolationDBSumPtCorr3HitsdR03'),
            maximumAbsoluteValues = cms.vdouble(2.5, 1000000000.0),
            maximumRelativeValues = cms.vdouble(-1.0, 0.1),
            referenceRawIDNames = cms.vstring(
                'ByRawCombinedIsolationDBSumPtCorr3HitsdR03', 
                'PhotonPtSumOutsideSignalConedR03'
            )
        ), 
        cms.PSet(
            IDname = cms.string('ByMediumCombinedIsolationDBSumPtCorr3HitsdR03'),
            maximumAbsoluteValues = cms.vdouble(1.5, 1000000000.0),
            maximumRelativeValues = cms.vdouble(-1.0, 0.1),
            referenceRawIDNames = cms.vstring(
                'ByRawCombinedIsolationDBSumPtCorr3HitsdR03', 
                'PhotonPtSumOutsideSignalConedR03'
            )
        ), 
        cms.PSet(
            IDname = cms.string('ByTightCombinedIsolationDBSumPtCorr3HitsdR03'),
            maximumAbsoluteValues = cms.vdouble(0.8, 1000000000.0),
            maximumRelativeValues = cms.vdouble(-1.0, 0.1),
            referenceRawIDNames = cms.vstring(
                'ByRawCombinedIsolationDBSumPtCorr3HitsdR03', 
                'PhotonPtSumOutsideSignalConedR03'
            )
        )
    ),
    IDdefinitions = cms.VPSet(
        cms.PSet(
            ApplyDiscriminationByTrackerIsolation = cms.bool(True),
            IDname = cms.string('ChargedIsoPtSumdR03'),
            storeRawSumPt = cms.bool(True)
        ), 
        cms.PSet(
            ApplyDiscriminationByECALIsolation = cms.bool(True),
            IDname = cms.string('NeutralIsoPtSumdR03'),
            storeRawSumPt = cms.bool(True)
        ), 
        cms.PSet(
            ApplyDiscriminationByWeightedECALIsolation = cms.bool(True),
            IDname = cms.string('NeutralIsoPtSumWeightdR03'),
            UseAllPFCandsForWeights = cms.bool(True),
            storeRawSumPt = cms.bool(True)
        ), 
        cms.PSet(
            IDname = cms.string('TauFootprintCorrectiondR03'),
            storeRawFootprintCorrection = cms.bool(True)
        ), 
        cms.PSet(
            IDname = cms.string('PhotonPtSumOutsideSignalConedR03'),
            storeRawPhotonSumPt_outsideSignalCone = cms.bool(True)
        ), 
        cms.PSet(
            IDname = cms.string('PUcorrPtSumdR03'),
            applyDeltaBetaCorrection = cms.bool(True),
            storeRawPUsumPt = cms.bool(True)
        ), 
        cms.PSet(
            ApplyDiscriminationByECALIsolation = cms.bool(True),
            ApplyDiscriminationByTrackerIsolation = cms.bool(True),
            IDname = cms.string('ByRawCombinedIsolationDBSumPtCorr3HitsdR03'),
            applyDeltaBetaCorrection = cms.bool(True),
            storeRawSumPt = cms.bool(True)
        )
    ),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    WeightECALIsolation = cms.double(1.0),
    applyFootprintCorrection = cms.bool(False),
    applyRhoCorrection = cms.bool(False),
    customOuterCone = cms.double(0.3),
    deltaBetaFactor = cms.string('0.0720'),
    deltaBetaPUTrackPtCutOverride = cms.bool(True),
    deltaBetaPUTrackPtCutOverride_val = cms.double(0.5),
    footprintCorrections = cms.VPSet(
        cms.PSet(
            offset = cms.string('0.0'),
            selection = cms.string('decayMode() = 0')
        ), 
        cms.PSet(
            offset = cms.string('0.0'),
            selection = cms.string('decayMode() = 1 || decayMode() = 2')
        ), 
        cms.PSet(
            offset = cms.string('2.7'),
            selection = cms.string('decayMode() = 5')
        ), 
        cms.PSet(
            offset = cms.string('0.0'),
            selection = cms.string('decayMode() = 6')
        ), 
        cms.PSet(
            offset = cms.string('max(2.0, 0.22*pt() - 2.0)'),
            selection = cms.string('decayMode() = 10')
        )
    ),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    mightGet = cms.optional.untracked.vstring,
    minTauPtForNoIso = cms.double(-99.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.15),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.05),
            minGammaEt = cms.double(1.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.8),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        leadingTrkOrPFCandOption = cms.string('leadPFCand'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        pvFindingAlgo = cms.string('closestInDeltaZ'),
        recoverLeadingTrk = cms.bool(False),
        signalQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.4),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(1.0),
            minNeutralHadronEt = cms.double(30.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        vertexTrackFiltering = cms.bool(False),
        vxAssocQualityCuts = cms.PSet(
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(1.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        )
    ),
    rhoConeSize = cms.double(0.5),
    rhoProducer = cms.InputTag("fixedGridRhoFastjetAll"),
    rhoUEOffsetCorrection = cms.double(1.0),
    verbosity = cms.int32(0),
    vertexSrc = cms.InputTag("offlinePrimaryVertices")
)


process.hpsPFTauDiscriminationByDeadECALElectronRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstElectronDeadECAL",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    dR = cms.double(0.08),
    extrapolateToECalEntrance = cms.bool(True),
    mightGet = cms.optional.untracked.vstring,
    minStatus = cms.uint32(12),
    verbosity = cms.int32(0)
)


process.hpsPFTauDiscriminationByDecayModeFinding = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    decayModes = cms.VPSet(
        cms.PSet(
            applyBendCorrection = cms.PSet(
                eta = cms.bool(True),
                mass = cms.bool(True),
                phi = cms.bool(True)
            ),
            assumeStripMass = cms.double(-1.0),
            maxMass = cms.string('1.'),
            maxPi0Mass = cms.double(1000000000.0),
            minMass = cms.double(-1000.0),
            minPi0Mass = cms.double(-1000.0),
            nCharged = cms.uint32(1),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(0),
            nTracksMin = cms.uint32(1)
        ), 
        cms.PSet(
            applyBendCorrection = cms.PSet(
                eta = cms.bool(True),
                mass = cms.bool(True),
                phi = cms.bool(True)
            ),
            assumeStripMass = cms.double(0.1349),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/100.), 4.2))'),
            maxPi0Mass = cms.double(1000000000.0),
            minMass = cms.double(0.3),
            minPi0Mass = cms.double(-1000.0),
            nCharged = cms.uint32(1),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(1),
            nTracksMin = cms.uint32(1)
        ), 
        cms.PSet(
            applyBendCorrection = cms.PSet(
                eta = cms.bool(True),
                mass = cms.bool(True),
                phi = cms.bool(True)
            ),
            assumeStripMass = cms.double(0.0),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/100.), 4.0))'),
            maxPi0Mass = cms.double(0.2),
            minMass = cms.double(0.4),
            minPi0Mass = cms.double(0.05),
            nCharged = cms.uint32(1),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(2),
            nTracksMin = cms.uint32(1)
        ), 
        cms.PSet(
            applyBendCorrection = cms.PSet(
                eta = cms.bool(False),
                mass = cms.bool(False),
                phi = cms.bool(False)
            ),
            assumeStripMass = cms.double(-1.0),
            maxMass = cms.string('1.5'),
            maxPi0Mass = cms.double(1000000000.0),
            minMass = cms.double(0.8),
            minPi0Mass = cms.double(-1000.0),
            nCharged = cms.uint32(3),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(0),
            nTracksMin = cms.uint32(2)
        )
    ),
    matchingCone = cms.double(0.5),
    minPixelHits = cms.int32(1),
    minTauPt = cms.double(0.0),
    requireTauChargedHadronsToBeChargedPFCands = cms.bool(True),
    verbosity = cms.int32(0)
)


process.hpsPFTauDiscriminationByDecayModeFindingNewDMs = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    decayModes = cms.VPSet(
        cms.PSet(
            applyBendCorrection = cms.PSet(
                eta = cms.bool(True),
                mass = cms.bool(True),
                phi = cms.bool(True)
            ),
            assumeStripMass = cms.double(-1.0),
            maxMass = cms.string('1.'),
            maxPi0Mass = cms.double(1000000000.0),
            minMass = cms.double(-1000.0),
            minPi0Mass = cms.double(-1000.0),
            nCharged = cms.uint32(1),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(0),
            nTracksMin = cms.uint32(1)
        ), 
        cms.PSet(
            applyBendCorrection = cms.PSet(
                eta = cms.bool(True),
                mass = cms.bool(True),
                phi = cms.bool(True)
            ),
            assumeStripMass = cms.double(0.1349),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/100.), 4.2))'),
            maxPi0Mass = cms.double(1000000000.0),
            minMass = cms.double(0.3),
            minPi0Mass = cms.double(-1000.0),
            nCharged = cms.uint32(1),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(1),
            nTracksMin = cms.uint32(1)
        ), 
        cms.PSet(
            applyBendCorrection = cms.PSet(
                eta = cms.bool(True),
                mass = cms.bool(True),
                phi = cms.bool(True)
            ),
            assumeStripMass = cms.double(0.0),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/100.), 4.0))'),
            maxPi0Mass = cms.double(0.2),
            minMass = cms.double(0.4),
            minPi0Mass = cms.double(0.05),
            nCharged = cms.uint32(1),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(2),
            nTracksMin = cms.uint32(1)
        ), 
        cms.PSet(
            applyBendCorrection = cms.PSet(
                eta = cms.bool(False),
                mass = cms.bool(False),
                phi = cms.bool(False)
            ),
            assumeStripMass = cms.double(-1.0),
            maxMass = cms.string('1.2'),
            maxPi0Mass = cms.double(1000000000.0),
            minMass = cms.double(0.0),
            minPi0Mass = cms.double(-1000.0),
            nCharged = cms.uint32(2),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(0),
            nTracksMin = cms.uint32(2)
        ), 
        cms.PSet(
            applyBendCorrection = cms.PSet(
                eta = cms.bool(False),
                mass = cms.bool(False),
                phi = cms.bool(False)
            ),
            assumeStripMass = cms.double(-1.0),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/100.), 4.0))'),
            maxPi0Mass = cms.double(1000000000.0),
            minMass = cms.double(0.0),
            minPi0Mass = cms.double(-1000.0),
            nCharged = cms.uint32(2),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(1),
            nTracksMin = cms.uint32(2)
        ), 
        cms.PSet(
            applyBendCorrection = cms.PSet(
                eta = cms.bool(False),
                mass = cms.bool(False),
                phi = cms.bool(False)
            ),
            assumeStripMass = cms.double(-1.0),
            maxMass = cms.string('1.5'),
            maxPi0Mass = cms.double(1000000000.0),
            minMass = cms.double(0.8),
            minPi0Mass = cms.double(-1000.0),
            nCharged = cms.uint32(3),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(0),
            nTracksMin = cms.uint32(2)
        ), 
        cms.PSet(
            applyBendCorrection = cms.PSet(
                eta = cms.bool(False),
                mass = cms.bool(False),
                phi = cms.bool(False)
            ),
            assumeStripMass = cms.double(-1.0),
            maxMass = cms.string('1.6'),
            maxPi0Mass = cms.double(1000000000.0),
            minMass = cms.double(0.9),
            minPi0Mass = cms.double(-1000.0),
            nCharged = cms.uint32(3),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(1),
            nTracksMin = cms.uint32(2)
        )
    ),
    matchingCone = cms.double(0.5),
    minPixelHits = cms.int32(1),
    minTauPt = cms.double(0.0),
    requireTauChargedHadronsToBeChargedPFCands = cms.bool(False),
    verbosity = cms.int32(0)
)


process.hpsPFTauDiscriminationByDecayModeFindingOldDMs = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    decayModes = cms.VPSet(
        cms.PSet(
            applyBendCorrection = cms.PSet(
                eta = cms.bool(True),
                mass = cms.bool(True),
                phi = cms.bool(True)
            ),
            assumeStripMass = cms.double(-1.0),
            maxMass = cms.string('1.'),
            maxPi0Mass = cms.double(1000000000.0),
            minMass = cms.double(-1000.0),
            minPi0Mass = cms.double(-1000.0),
            nCharged = cms.uint32(1),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(0),
            nTracksMin = cms.uint32(1)
        ), 
        cms.PSet(
            applyBendCorrection = cms.PSet(
                eta = cms.bool(True),
                mass = cms.bool(True),
                phi = cms.bool(True)
            ),
            assumeStripMass = cms.double(0.1349),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/100.), 4.2))'),
            maxPi0Mass = cms.double(1000000000.0),
            minMass = cms.double(0.3),
            minPi0Mass = cms.double(-1000.0),
            nCharged = cms.uint32(1),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(1),
            nTracksMin = cms.uint32(1)
        ), 
        cms.PSet(
            applyBendCorrection = cms.PSet(
                eta = cms.bool(True),
                mass = cms.bool(True),
                phi = cms.bool(True)
            ),
            assumeStripMass = cms.double(0.0),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/100.), 4.0))'),
            maxPi0Mass = cms.double(0.2),
            minMass = cms.double(0.4),
            minPi0Mass = cms.double(0.05),
            nCharged = cms.uint32(1),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(2),
            nTracksMin = cms.uint32(1)
        ), 
        cms.PSet(
            applyBendCorrection = cms.PSet(
                eta = cms.bool(False),
                mass = cms.bool(False),
                phi = cms.bool(False)
            ),
            assumeStripMass = cms.double(-1.0),
            maxMass = cms.string('1.5'),
            maxPi0Mass = cms.double(1000000000.0),
            minMass = cms.double(0.8),
            minPi0Mass = cms.double(-1000.0),
            nCharged = cms.uint32(3),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(0),
            nTracksMin = cms.uint32(2)
        )
    ),
    matchingCone = cms.double(0.5),
    minPixelHits = cms.int32(1),
    minTauPt = cms.double(0.0),
    requireTauChargedHadronsToBeChargedPFCands = cms.bool(True),
    verbosity = cms.int32(0)
)


process.hpsPFTauDiscriminationByIsolationMVArun2v1DBdR03oldDMwLT = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    inputFileName = cms.FileInPath('RecoTauTag/RecoTau/data/emptyMVAinputFile'),
    loadMVAfromDB = cms.bool(True),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.string('RecoTauTag_tauIdMVAIsoDBoldDMdR0p3wLT'),
        variable = cms.string('pt')
    )),
    mightGet = cms.optional.untracked.vstring,
    mvaOutput_normalization = cms.string('RecoTauTag_tauIdMVAIsoDBoldDMdR0p3wLT_mvaOutput_normalization'),
    rawValues = cms.vstring('discriminator'),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByIsolationMVArun2v1DBdR03oldDMwLTraw"),
    verbosity = cms.int32(0),
    workingPoints = cms.vstring(
        '_VVLoose', 
        '_VLoose', 
        '_Loose', 
        '_Medium', 
        '_Tight', 
        '_VTight', 
        '_VVTight'
    )
)


process.hpsPFTauDiscriminationByIsolationMVArun2v1DBdR03oldDMwLTraw = cms.EDProducer("PFRecoTauDiscriminationByMVAIsolationRun2",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    inputFileName = cms.optional.FileInPath,
    inputIDNameSuffix = cms.string('dR03'),
    loadMVAfromDB = cms.bool(True),
    mightGet = cms.optional.untracked.vstring,
    mvaName = cms.string('RecoTauTag_tauIdMVAIsoDBoldDMdR0p3wLT'),
    mvaOpt = cms.string('DBoldDMwLTwGJ'),
    srcBasicTauDiscriminators = cms.InputTag("hpsPFTauBasicDiscriminatorsdR03"),
    srcTauTransverseImpactParameters = cms.InputTag("hpsPFTauTransverseImpactParameters"),
    verbosity = cms.int32(0)
)


process.hpsPFTauDiscriminationByIsolationMVArun2v1DBnewDMwLT = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    inputFileName = cms.FileInPath('RecoTauTag/RecoTau/data/emptyMVAinputFile'),
    loadMVAfromDB = cms.bool(True),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.string('RecoTauTag_tauIdMVAIsoDBnewDMwLT'),
        variable = cms.string('pt')
    )),
    mightGet = cms.optional.untracked.vstring,
    mvaOutput_normalization = cms.string('RecoTauTag_tauIdMVAIsoDBnewDMwLT_mvaOutput_normalization'),
    rawValues = cms.vstring('discriminator'),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByIsolationMVArun2v1DBnewDMwLTraw"),
    verbosity = cms.int32(0),
    workingPoints = cms.vstring(
        '_VVLoose', 
        '_VLoose', 
        '_Loose', 
        '_Medium', 
        '_Tight', 
        '_VTight', 
        '_VVTight'
    )
)


process.hpsPFTauDiscriminationByIsolationMVArun2v1DBnewDMwLTraw = cms.EDProducer("PFRecoTauDiscriminationByMVAIsolationRun2",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    inputFileName = cms.optional.FileInPath,
    inputIDNameSuffix = cms.string(''),
    loadMVAfromDB = cms.bool(True),
    mightGet = cms.optional.untracked.vstring,
    mvaName = cms.string('RecoTauTag_tauIdMVAIsoDBnewDMwLT'),
    mvaOpt = cms.string('DBnewDMwLTwGJ'),
    srcBasicTauDiscriminators = cms.InputTag("hpsPFTauBasicDiscriminators"),
    srcTauTransverseImpactParameters = cms.InputTag("hpsPFTauTransverseImpactParameters"),
    verbosity = cms.int32(0)
)


process.hpsPFTauDiscriminationByIsolationMVArun2v1DBoldDMwLT = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    inputFileName = cms.FileInPath('RecoTauTag/RecoTau/data/emptyMVAinputFile'),
    loadMVAfromDB = cms.bool(True),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.string('RecoTauTag_tauIdMVAIsoDBoldDMwLT'),
        variable = cms.string('pt')
    )),
    mightGet = cms.optional.untracked.vstring,
    mvaOutput_normalization = cms.string('RecoTauTag_tauIdMVAIsoDBoldDMwLT_mvaOutput_normalization'),
    rawValues = cms.vstring('discriminator'),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByIsolationMVArun2v1DBoldDMwLTraw"),
    verbosity = cms.int32(0),
    workingPoints = cms.vstring(
        '_VVLoose', 
        '_VLoose', 
        '_Loose', 
        '_Medium', 
        '_Tight', 
        '_VTight', 
        '_VVTight'
    )
)


process.hpsPFTauDiscriminationByIsolationMVArun2v1DBoldDMwLTraw = cms.EDProducer("PFRecoTauDiscriminationByMVAIsolationRun2",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    inputFileName = cms.optional.FileInPath,
    inputIDNameSuffix = cms.string(''),
    loadMVAfromDB = cms.bool(True),
    mightGet = cms.optional.untracked.vstring,
    mvaName = cms.string('RecoTauTag_tauIdMVAIsoDBoldDMwLT'),
    mvaOpt = cms.string('DBoldDMwLTwGJ'),
    srcBasicTauDiscriminators = cms.InputTag("hpsPFTauBasicDiscriminators"),
    srcTauTransverseImpactParameters = cms.InputTag("hpsPFTauTransverseImpactParameters"),
    verbosity = cms.int32(0)
)


process.hpsPFTauDiscriminationByLooseElectronRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstElectron",
    ApplyCut_BremCombined = cms.bool(False),
    ApplyCut_BremsRecoveryEOverPLead = cms.bool(False),
    ApplyCut_EOverPLead = cms.bool(False),
    ApplyCut_EcalCrackCut = cms.bool(False),
    ApplyCut_ElectronPreID = cms.bool(False),
    ApplyCut_ElectronPreID_2D = cms.bool(False),
    ApplyCut_EmFraction = cms.bool(False),
    ApplyCut_Hcal3x3OverPLead = cms.bool(False),
    ApplyCut_HcalMaxOverPLead = cms.bool(False),
    ApplyCut_HcalTotOverPLead = cms.bool(False),
    ApplyCut_PFElectronMVA = cms.bool(True),
    BremCombined_Fraction = cms.double(0.99),
    BremCombined_HOP = cms.double(0.1),
    BremCombined_Mass = cms.double(0.55),
    BremCombined_StripSize = cms.double(0.03),
    BremsRecoveryEOverPLead_maxValue = cms.double(1.8),
    BremsRecoveryEOverPLead_minValue = cms.double(0.8),
    EOverPLead_maxValue = cms.double(1.8),
    EOverPLead_minValue = cms.double(0.8),
    ElecPreID0_EOverPLead_maxValue = cms.double(0.95),
    ElecPreID0_HOverPLead_minValue = cms.double(0.05),
    ElecPreID1_EOverPLead_maxValue = cms.double(0.8),
    ElecPreID1_HOverPLead_minValue = cms.double(0.15),
    EmFraction_maxValue = cms.double(0.9),
    Hcal3x3OverPLead_minValue = cms.double(0.1),
    HcalMaxOverPLead_minValue = cms.double(0.1),
    HcalTotOverPLead_minValue = cms.double(0.1),
    PFElectronMVA_maxValue = cms.double(0.6),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    )
)


process.hpsPFTauDiscriminationByMVA6ElectronRejection = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    inputFileName = cms.FileInPath('RecoTauTag/RecoTau/data/emptyMVAinputFile'),
    loadMVAfromDB = cms.bool(True),
    mapping = cms.VPSet(
        cms.PSet(
            category = cms.uint32(0),
            cut = cms.string('RecoTauTag_antiElectronMVA_NoEleMatch_woGwoGSF_BL'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.string('RecoTauTag_antiElectronMVA_NoEleMatch_wGwoGSF_BL'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.string('RecoTauTag_antiElectronMVA_woGwGSF_BL'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.string('RecoTauTag_antiElectronMVA_wGwGSF_BL'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.string('RecoTauTag_antiElectronMVA_NoEleMatch_woGwoGSF_EC'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(10),
            cut = cms.string('RecoTauTag_antiElectronMVA_NoEleMatch_wGwoGSF_EC'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(13),
            cut = cms.string('RecoTauTag_antiElectronMVA_woGwGSF_EC'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(15),
            cut = cms.string('RecoTauTag_antiElectronMVA_wGwGSF_EC'),
            variable = cms.string('pt')
        )
    ),
    mightGet = cms.optional.untracked.vstring,
    mvaOutput_normalization = cms.string(''),
    rawValues = cms.vstring(
        'discriminator', 
        'category'
    ),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA6rawElectronRejection"),
    verbosity = cms.int32(0),
    workingPoints = cms.vstring(
        '_VLoose', 
        '_Loose', 
        '_Medium', 
        '_Tight', 
        '_VTight'
    )
)


process.hpsPFTauDiscriminationByMVA6rawElectronRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstElectronMVA6",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    loadMVAfromDB = cms.bool(True),
    method = cms.string('BDTG'),
    minMVANoEleMatchWOgWOgsfBL = cms.double(0.0),
    minMVANoEleMatchWOgWOgsfEC = cms.double(0.0),
    minMVANoEleMatchWgWOgsfBL = cms.double(0.0),
    minMVANoEleMatchWgWOgsfEC = cms.double(0.0),
    minMVAWOgWgsfBL = cms.double(0.0),
    minMVAWOgWgsfEC = cms.double(0.0),
    minMVAWgWgsfBL = cms.double(0.0),
    minMVAWgWgsfEC = cms.double(0.0),
    mvaName_NoEleMatch_wGwoGSF_BL = cms.string('RecoTauTag_antiElectronMVA_NoEleMatch_wGwoGSF_BL'),
    mvaName_NoEleMatch_wGwoGSF_EC = cms.string('RecoTauTag_antiElectronMVA_NoEleMatch_wGwoGSF_EC'),
    mvaName_NoEleMatch_woGwoGSF_BL = cms.string('RecoTauTag_antiElectronMVA_NoEleMatch_woGwoGSF_BL'),
    mvaName_NoEleMatch_woGwoGSF_EC = cms.string('RecoTauTag_antiElectronMVA_NoEleMatch_woGwoGSF_EC'),
    mvaName_wGwGSF_BL = cms.string('RecoTauTag_antiElectronMVA_wGwGSF_BL'),
    mvaName_wGwGSF_EC = cms.string('RecoTauTag_antiElectronMVA_wGwGSF_EC'),
    mvaName_woGwGSF_BL = cms.string('RecoTauTag_antiElectronMVA_woGwGSF_BL'),
    mvaName_woGwGSF_EC = cms.string('RecoTauTag_antiElectronMVA_woGwGSF_EC'),
    returnMVA = cms.bool(True),
    srcGsfElectrons = cms.InputTag("gedGsfElectrons"),
    usePhiAtEcalEntranceExtrapolation = cms.bool(False),
    verbosity = cms.int32(0),
    vetoEcalCracks = cms.bool(False)
)


process.hpsPFTauDiscriminationByMediumElectronRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstElectron",
    ApplyCut_BremCombined = cms.bool(False),
    ApplyCut_BremsRecoveryEOverPLead = cms.bool(False),
    ApplyCut_EOverPLead = cms.bool(False),
    ApplyCut_EcalCrackCut = cms.bool(True),
    ApplyCut_ElectronPreID = cms.bool(False),
    ApplyCut_ElectronPreID_2D = cms.bool(False),
    ApplyCut_EmFraction = cms.bool(False),
    ApplyCut_Hcal3x3OverPLead = cms.bool(False),
    ApplyCut_HcalMaxOverPLead = cms.bool(False),
    ApplyCut_HcalTotOverPLead = cms.bool(False),
    ApplyCut_PFElectronMVA = cms.bool(True),
    BremCombined_Fraction = cms.double(0.99),
    BremCombined_HOP = cms.double(0.1),
    BremCombined_Mass = cms.double(0.55),
    BremCombined_StripSize = cms.double(0.03),
    BremsRecoveryEOverPLead_maxValue = cms.double(1.8),
    BremsRecoveryEOverPLead_minValue = cms.double(0.8),
    EOverPLead_maxValue = cms.double(1.8),
    EOverPLead_minValue = cms.double(0.8),
    ElecPreID0_EOverPLead_maxValue = cms.double(0.95),
    ElecPreID0_HOverPLead_minValue = cms.double(0.05),
    ElecPreID1_EOverPLead_maxValue = cms.double(0.8),
    ElecPreID1_HOverPLead_minValue = cms.double(0.15),
    EmFraction_maxValue = cms.double(0.9),
    Hcal3x3OverPLead_minValue = cms.double(0.1),
    HcalMaxOverPLead_minValue = cms.double(0.1),
    HcalTotOverPLead_minValue = cms.double(0.1),
    PFElectronMVA_maxValue = cms.double(-0.1),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    )
)


process.hpsPFTauDiscriminationByMuonRejection3 = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon2Container",
    IDWPdefinitions = cms.VPSet(
        cms.PSet(
            HoPMin = cms.double(0.2),
            IDname = cms.string('ByLooseMuonRejection3'),
            discriminatorOption = cms.string('custom'),
            doCaloMuonVeto = cms.bool(True),
            maxNumberOfHitsLast2Stations = cms.int32(-1),
            maxNumberOfMatches = cms.int32(1)
        ), 
        cms.PSet(
            HoPMin = cms.double(0.2),
            IDname = cms.string('ByTightMuonRejection3'),
            discriminatorOption = cms.string('custom'),
            doCaloMuonVeto = cms.bool(True),
            maxNumberOfHitsLast2Stations = cms.int32(0),
            maxNumberOfMatches = cms.int32(1)
        )
    ),
    IDdefinitions = cms.VPSet(),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    dRmuonMatch = cms.double(0.3),
    dRmuonMatchLimitedToJetArea = cms.bool(False),
    maskHitsCSC = cms.vint32(0, 0, 0, 0),
    maskHitsDT = cms.vint32(0, 0, 0, 0),
    maskHitsRPC = cms.vint32(0, 0, 0, 0),
    maskMatchesCSC = cms.vint32(1, 0, 0, 0),
    maskMatchesDT = cms.vint32(0, 0, 0, 0),
    maskMatchesRPC = cms.vint32(0, 0, 0, 0),
    mightGet = cms.optional.untracked.vstring,
    minPtMatchedMuon = cms.double(5),
    srcMuons = cms.InputTag("muons"),
    verbosity = cms.int32(0)
)


process.hpsPFTauDiscriminationByTightElectronRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstElectron",
    ApplyCut_BremCombined = cms.bool(True),
    ApplyCut_BremsRecoveryEOverPLead = cms.bool(False),
    ApplyCut_EOverPLead = cms.bool(False),
    ApplyCut_EcalCrackCut = cms.bool(True),
    ApplyCut_ElectronPreID = cms.bool(False),
    ApplyCut_ElectronPreID_2D = cms.bool(False),
    ApplyCut_EmFraction = cms.bool(False),
    ApplyCut_Hcal3x3OverPLead = cms.bool(False),
    ApplyCut_HcalMaxOverPLead = cms.bool(False),
    ApplyCut_HcalTotOverPLead = cms.bool(False),
    ApplyCut_PFElectronMVA = cms.bool(True),
    BremCombined_Fraction = cms.double(0.99),
    BremCombined_HOP = cms.double(0.1),
    BremCombined_Mass = cms.double(0.55),
    BremCombined_StripSize = cms.double(0.03),
    BremsRecoveryEOverPLead_maxValue = cms.double(1.8),
    BremsRecoveryEOverPLead_minValue = cms.double(0.8),
    EOverPLead_maxValue = cms.double(1.8),
    EOverPLead_minValue = cms.double(0.8),
    ElecPreID0_EOverPLead_maxValue = cms.double(0.95),
    ElecPreID0_HOverPLead_minValue = cms.double(0.05),
    ElecPreID1_EOverPLead_maxValue = cms.double(0.8),
    ElecPreID1_HOverPLead_minValue = cms.double(0.15),
    EmFraction_maxValue = cms.double(0.9),
    Hcal3x3OverPLead_minValue = cms.double(0.1),
    HcalMaxOverPLead_minValue = cms.double(0.1),
    HcalTotOverPLead_minValue = cms.double(0.1),
    PFElectronMVA_maxValue = cms.double(-0.1),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    )
)


process.hpsPFTauPrimaryVertexProducer = cms.EDProducer("PFTauPrimaryVertexProducer",
    Algorithm = cms.int32(0),
    ElectronTag = cms.InputTag(""),
    MuonTag = cms.InputTag(""),
    PFTauTag = cms.InputTag("hpsPFTauProducer"),
    PVTag = cms.InputTag("offlinePrimaryVertices"),
    RemoveElectronTracks = cms.bool(False),
    RemoveMuonTracks = cms.bool(False),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    cut = cms.string('pt > 18.0 & abs(eta) < 2.4'),
    discriminators = cms.VPSet(cms.PSet(
        discriminator = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
        selectionCut = cms.double(0.5)
    )),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.15),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.05),
            minGammaEt = cms.double(1.5),
            minTrackHits = cms.uint32(8),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(1.0),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        leadingTrkOrPFCandOption = cms.string('leadPFCand'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        pvFindingAlgo = cms.string('closestInDeltaZ'),
        recoverLeadingTrk = cms.bool(False),
        signalQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.4),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(1.0),
            minNeutralHadronEt = cms.double(30.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        vertexTrackFiltering = cms.bool(False),
        vxAssocQualityCuts = cms.PSet(
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(1.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        )
    ),
    useBeamSpot = cms.bool(True),
    useSelectedTaus = cms.bool(False)
)


process.hpsPFTauProducer = cms.EDProducer("RecoTauPiZeroUnembedder",
    src = cms.InputTag("hpsPFTauProducerSansRefs")
)


process.hpsPFTauProducerSansRefs = cms.EDProducer("RecoTauCleaner",
    cleaners = cms.VPSet(
        cms.PSet(
            name = cms.string('Charge'),
            nprongs = cms.vuint32(1, 3),
            passForCharge = cms.int32(1),
            plugin = cms.string('RecoTauChargeCleanerPlugin'),
            selectionFailValue = cms.double(0),
            tolerance = cms.double(0)
        ), 
        cms.PSet(
            name = cms.string('HPS_Select'),
            plugin = cms.string('RecoTauDiscriminantCleanerPlugin'),
            src = cms.InputTag("hpsSelectionDiscriminator"),
            tolerance = cms.double(0)
        ), 
        cms.PSet(
            minTrackPt = cms.double(5.0),
            name = cms.string('killSoftTwoProngTaus'),
            plugin = cms.string('RecoTauSoftTwoProngTausCleanerPlugin'),
            tolerance = cms.double(0)
        ), 
        cms.PSet(
            name = cms.string('ChargedHadronMultiplicity'),
            plugin = cms.string('RecoTauChargedHadronMultiplicityCleanerPlugin'),
            tolerance = cms.double(0)
        ), 
        cms.PSet(
            name = cms.string('Pt'),
            plugin = cms.string('RecoTauStringCleanerPlugin'),
            selection = cms.string('leadCand().isNonnull()'),
            selectionFailValue = cms.double(1000.0),
            selectionPassFunction = cms.string('-pt()'),
            tolerance = cms.double(0.01)
        ), 
        cms.PSet(
            name = cms.string('StripMultiplicity'),
            plugin = cms.string('RecoTauStringCleanerPlugin'),
            selection = cms.string('leadCand().isNonnull()'),
            selectionFailValue = cms.double(1000.0),
            selectionPassFunction = cms.string('-signalPiZeroCandidates().size()'),
            tolerance = cms.double(0)
        ), 
        cms.PSet(
            name = cms.string('CombinedIsolation'),
            plugin = cms.string('RecoTauStringCleanerPlugin'),
            selection = cms.string('leadCand().isNonnull()'),
            selectionFailValue = cms.double(1000.0),
            selectionPassFunction = cms.string('isolationPFChargedHadrCandsPtSum() + isolationPFGammaCandsEtSum()'),
            tolerance = cms.double(0)
        )
    ),
    outputSelection = cms.string(''),
    src = cms.InputTag("combinatoricRecoTaus"),
    verbosity = cms.int32(0)
)


process.hpsPFTauSecondaryVertexProducer = cms.EDProducer("PFTauSecondaryVertexProducer",
    PFTauTag = cms.InputTag("hpsPFTauProducer")
)


process.hpsPFTauTransverseImpactParameters = cms.EDProducer("PFTauTransverseImpactParameters",
    PFTauPVATag = cms.InputTag("hpsPFTauPrimaryVertexProducer"),
    PFTauSVATag = cms.InputTag("hpsPFTauSecondaryVertexProducer"),
    PFTauTag = cms.InputTag("hpsPFTauProducer"),
    useFullCalculation = cms.bool(True)
)


process.hpsSelectionDiscriminator = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("combinatoricRecoTaus"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    decayModes = cms.VPSet(
        cms.PSet(
            applyBendCorrection = cms.PSet(
                eta = cms.bool(True),
                mass = cms.bool(True),
                phi = cms.bool(True)
            ),
            assumeStripMass = cms.double(-1.0),
            maxMass = cms.string('1.'),
            maxPi0Mass = cms.double(1000000000.0),
            minMass = cms.double(-1000.0),
            minPi0Mass = cms.double(-1000.0),
            nCharged = cms.uint32(1),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(0),
            nTracksMin = cms.uint32(1)
        ), 
        cms.PSet(
            applyBendCorrection = cms.PSet(
                eta = cms.bool(True),
                mass = cms.bool(True),
                phi = cms.bool(True)
            ),
            assumeStripMass = cms.double(0.1349),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/100.), 4.2))'),
            maxPi0Mass = cms.double(1000000000.0),
            minMass = cms.double(0.3),
            minPi0Mass = cms.double(-1000.0),
            nCharged = cms.uint32(1),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(1),
            nTracksMin = cms.uint32(1)
        ), 
        cms.PSet(
            applyBendCorrection = cms.PSet(
                eta = cms.bool(True),
                mass = cms.bool(True),
                phi = cms.bool(True)
            ),
            assumeStripMass = cms.double(0.0),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/100.), 4.0))'),
            maxPi0Mass = cms.double(0.2),
            minMass = cms.double(0.4),
            minPi0Mass = cms.double(0.05),
            nCharged = cms.uint32(1),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(2),
            nTracksMin = cms.uint32(1)
        ), 
        cms.PSet(
            applyBendCorrection = cms.PSet(
                eta = cms.bool(False),
                mass = cms.bool(False),
                phi = cms.bool(False)
            ),
            assumeStripMass = cms.double(-1.0),
            maxMass = cms.string('1.2'),
            maxPi0Mass = cms.double(1000000000.0),
            minMass = cms.double(0.0),
            minPi0Mass = cms.double(-1000.0),
            nCharged = cms.uint32(2),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(0),
            nTracksMin = cms.uint32(2)
        ), 
        cms.PSet(
            applyBendCorrection = cms.PSet(
                eta = cms.bool(False),
                mass = cms.bool(False),
                phi = cms.bool(False)
            ),
            assumeStripMass = cms.double(-1.0),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/100.), 4.0))'),
            maxPi0Mass = cms.double(1000000000.0),
            minMass = cms.double(0.0),
            minPi0Mass = cms.double(-1000.0),
            nCharged = cms.uint32(2),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(1),
            nTracksMin = cms.uint32(2)
        ), 
        cms.PSet(
            applyBendCorrection = cms.PSet(
                eta = cms.bool(False),
                mass = cms.bool(False),
                phi = cms.bool(False)
            ),
            assumeStripMass = cms.double(-1.0),
            maxMass = cms.string('1.5'),
            maxPi0Mass = cms.double(1000000000.0),
            minMass = cms.double(0.8),
            minPi0Mass = cms.double(-1000.0),
            nCharged = cms.uint32(3),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(0),
            nTracksMin = cms.uint32(2)
        ), 
        cms.PSet(
            applyBendCorrection = cms.PSet(
                eta = cms.bool(False),
                mass = cms.bool(False),
                phi = cms.bool(False)
            ),
            assumeStripMass = cms.double(-1.0),
            maxMass = cms.string('1.6'),
            maxPi0Mass = cms.double(1000000000.0),
            minMass = cms.double(0.9),
            minPi0Mass = cms.double(-1000.0),
            nCharged = cms.uint32(3),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(1),
            nTracksMin = cms.uint32(2)
        )
    ),
    matchingCone = cms.double(0.5),
    minPixelHits = cms.int32(1),
    minTauPt = cms.double(0.0),
    requireTauChargedHadronsToBeChargedPFCands = cms.bool(False),
    verbosity = cms.int32(0)
)


process.hybridSuperClusters = cms.EDProducer("UnifiedSCCollectionProducer",
    bcCollection = cms.string('hybridBarrelBasicClusters'),
    bcCollectionUncleanOnly = cms.string('uncleanOnlyHybridBarrelBasicClusters'),
    cleanBcCollection = cms.InputTag("cleanedHybridSuperClusters","hybridBarrelBasicClusters"),
    cleanScCollection = cms.InputTag("cleanedHybridSuperClusters"),
    scCollection = cms.string(''),
    scCollectionUncleanOnly = cms.string('uncleanOnlyHybridSuperClusters'),
    uncleanBcCollection = cms.InputTag("uncleanedHybridSuperClusters","hybridBarrelBasicClusters"),
    uncleanScCollection = cms.InputTag("uncleanedHybridSuperClusters")
)


process.ic5JetTracksAssociatorAtVertex = cms.EDProducer("JetTracksAssociatorAtVertex",
    coneSize = cms.double(0.4),
    jets = cms.InputTag("iterativeCone5CaloJets"),
    pvSrc = cms.InputTag("offlinePrimaryVertices"),
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False)
)


process.impactParameterMVABJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('impactParameterMVAComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.impactParameterTagInfos = cms.EDProducer("TrackIPProducer",
    computeGhostTrack = cms.bool(True),
    computeProbabilities = cms.bool(True),
    ghostTrackPriorDeltaR = cms.double(0.03),
    jetDirectionUsingGhostTrack = cms.bool(False),
    jetDirectionUsingTracks = cms.bool(False),
    jetTracks = cms.InputTag("ak4JetTracksAssociatorAtVertexPF"),
    maximumChiSquared = cms.double(5.0),
    maximumLongitudinalImpactParameter = cms.double(17.0),
    maximumTransverseImpactParameter = cms.double(0.2),
    minimumNumberOfHits = cms.int32(8),
    minimumNumberOfPixelHits = cms.int32(2),
    minimumTransverseMomentum = cms.double(1.0),
    primaryVertex = cms.InputTag("offlinePrimaryVertices"),
    useTrackQuality = cms.bool(False)
)


process.inOutConversionTrackProducer = cms.EDProducer("ConversionTrackProducer",
    TrackProducer = cms.string('ckfInOutTracksFromConversions'),
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    filterOnConvTrackHyp = cms.bool(True),
    minConvRadius = cms.double(2.0),
    setArbitratedEcalSeeded = cms.bool(True),
    setArbitratedMerged = cms.bool(True),
    setArbitratedMergedEcalGeneral = cms.bool(True),
    setIsGsfTrackOpen = cms.bool(False),
    setTrackerOnly = cms.bool(False),
    useTrajectory = cms.bool(False)
)


process.inOutOldEGConversionTrackProducer = cms.EDProducer("ConversionTrackProducer",
    TrackProducer = cms.string('ckfInOutTracksFromOldEGConversions'),
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    filterOnConvTrackHyp = cms.bool(True),
    minConvRadius = cms.double(2.0),
    setArbitratedEcalSeeded = cms.bool(True),
    setArbitratedMerged = cms.bool(True),
    setArbitratedMergedEcalGeneral = cms.bool(True),
    setIsGsfTrackOpen = cms.bool(False),
    setTrackerOnly = cms.bool(False),
    useTrajectory = cms.bool(False)
)


process.inOutOutInConversionTrackMerger = cms.EDProducer("ConversionTrackMerger",
    ShareFrac = cms.double(0.19),
    TrackProducer1 = cms.InputTag("inOutConversionTrackProducer"),
    TrackProducer2 = cms.InputTag("outInConversionTrackProducer"),
    allowFirstHitShare = cms.bool(True),
    arbitratedEcalSeededPreferCollection = cms.int32(3),
    arbitratedMergedEcalGeneralPreferCollection = cms.int32(3),
    arbitratedMergedPreferCollection = cms.int32(3),
    checkCharge = cms.bool(True),
    minProb = cms.double(1e-06),
    outputPreferCollection = cms.int32(-1),
    trackerOnlyPreferCollection = cms.int32(-1)
)


process.inOutOutInOldEGConversionTrackMerger = cms.EDProducer("ConversionTrackMerger",
    ShareFrac = cms.double(0.19),
    TrackProducer1 = cms.InputTag("inOutOldEGConversionTrackProducer"),
    TrackProducer2 = cms.InputTag("outInOldEGConversionTrackProducer"),
    allowFirstHitShare = cms.bool(True),
    arbitratedEcalSeededPreferCollection = cms.int32(3),
    arbitratedMergedEcalGeneralPreferCollection = cms.int32(3),
    arbitratedMergedPreferCollection = cms.int32(3),
    checkCharge = cms.bool(True),
    minProb = cms.double(1e-06),
    outputPreferCollection = cms.int32(-1),
    trackerOnlyPreferCollection = cms.int32(-1)
)


process.inclusiveCandidateSecondaryVertices = cms.EDProducer("CandidateVertexMerger",
    maxFraction = cms.double(0.2),
    minSignificance = cms.double(10.0),
    secondaryVertices = cms.InputTag("candidateVertexArbitrator")
)


process.inclusiveCandidateSecondaryVerticesCvsL = cms.EDProducer("CandidateVertexMerger",
    maxFraction = cms.double(0.2),
    minSignificance = cms.double(10.0),
    secondaryVertices = cms.InputTag("candidateVertexArbitratorCvsL")
)


process.inclusiveCandidateVertexFinder = cms.EDProducer("InclusiveCandidateVertexFinder",
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterizer = cms.PSet(
        clusterMaxDistance = cms.double(0.05),
        clusterMaxSignificance = cms.double(4.5),
        clusterMinAngleCosine = cms.double(0.5),
        distanceRatio = cms.double(20),
        maxTimeSignificance = cms.double(3.5),
        seedMax3DIPSignificance = cms.double(9999),
        seedMax3DIPValue = cms.double(9999),
        seedMin3DIPSignificance = cms.double(1.2),
        seedMin3DIPValue = cms.double(0.005)
    ),
    fitterRatio = cms.double(0.25),
    fitterSigmacut = cms.double(3),
    fitterTini = cms.double(256),
    maxNTracks = cms.uint32(30),
    maximumLongitudinalImpactParameter = cms.double(0.3),
    maximumTimeSignificance = cms.double(3),
    mightGet = cms.optional.untracked.vstring,
    minHits = cms.uint32(0),
    minPt = cms.double(0.8),
    primaryVertices = cms.InputTag("offlinePrimaryVertices"),
    tracks = cms.InputTag("particleFlow"),
    useDirectVertexFitter = cms.bool(True),
    useVertexReco = cms.bool(True),
    vertexMinAngleCosine = cms.double(0.95),
    vertexMinDLen2DSig = cms.double(2.5),
    vertexMinDLenSig = cms.double(0.5),
    vertexReco = cms.PSet(
        finder = cms.string('avr'),
        primcut = cms.double(1),
        seccut = cms.double(3),
        smoothing = cms.bool(True)
    )
)


process.inclusiveCandidateVertexFinderCvsL = cms.EDProducer("InclusiveCandidateVertexFinder",
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterizer = cms.PSet(
        clusterMaxDistance = cms.double(0.05),
        clusterMaxSignificance = cms.double(4.5),
        clusterMinAngleCosine = cms.double(0.5),
        distanceRatio = cms.double(20),
        maxTimeSignificance = cms.double(3.5),
        seedMax3DIPSignificance = cms.double(9999),
        seedMax3DIPValue = cms.double(9999),
        seedMin3DIPSignificance = cms.double(1.2),
        seedMin3DIPValue = cms.double(0.005)
    ),
    fitterRatio = cms.double(0.25),
    fitterSigmacut = cms.double(3),
    fitterTini = cms.double(256),
    maxNTracks = cms.uint32(30),
    maximumLongitudinalImpactParameter = cms.double(0.3),
    maximumTimeSignificance = cms.double(3),
    mightGet = cms.optional.untracked.vstring,
    minHits = cms.uint32(0),
    minPt = cms.double(0.8),
    primaryVertices = cms.InputTag("offlinePrimaryVertices"),
    tracks = cms.InputTag("particleFlow"),
    useDirectVertexFitter = cms.bool(True),
    useVertexReco = cms.bool(True),
    vertexMinAngleCosine = cms.double(0.95),
    vertexMinDLen2DSig = cms.double(1.25),
    vertexMinDLenSig = cms.double(0.25),
    vertexReco = cms.PSet(
        finder = cms.string('avr'),
        primcut = cms.double(1),
        seccut = cms.double(3),
        smoothing = cms.bool(True)
    )
)


process.inclusiveCandidateVertexFinderDefault = cms.EDProducer("InclusiveCandidateVertexFinder",
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterizer = cms.PSet(
        clusterMaxDistance = cms.double(0.05),
        clusterMaxSignificance = cms.double(4.5),
        clusterMinAngleCosine = cms.double(0.5),
        distanceRatio = cms.double(20),
        maxTimeSignificance = cms.double(3.5),
        seedMax3DIPSignificance = cms.double(9999),
        seedMax3DIPValue = cms.double(9999),
        seedMin3DIPSignificance = cms.double(1.2),
        seedMin3DIPValue = cms.double(0.005)
    ),
    fitterRatio = cms.double(0.25),
    fitterSigmacut = cms.double(3),
    fitterTini = cms.double(256),
    maxNTracks = cms.uint32(30),
    maximumLongitudinalImpactParameter = cms.double(0.3),
    maximumTimeSignificance = cms.double(3),
    mightGet = cms.optional.untracked.vstring,
    minHits = cms.uint32(0),
    minPt = cms.double(0.8),
    primaryVertices = cms.InputTag("offlinePrimaryVertices"),
    tracks = cms.InputTag("particleFlow"),
    useDirectVertexFitter = cms.bool(True),
    useVertexReco = cms.bool(True),
    vertexMinAngleCosine = cms.double(0.95),
    vertexMinDLen2DSig = cms.double(2.5),
    vertexMinDLenSig = cms.double(0.5),
    vertexReco = cms.PSet(
        finder = cms.string('avr'),
        primcut = cms.double(1),
        seccut = cms.double(3),
        smoothing = cms.bool(True)
    )
)


process.inclusiveSecondaryVertexFinderFilteredNegativeTagInfos = cms.EDProducer("SecondaryVertexProducer",
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    constraint = cms.string('BeamSpot'),
    extSVCollection = cms.InputTag("bToCharmDecayVertexMerged"),
    extSVDeltaRToJet = cms.double(-0.4),
    minimumTrackWeight = cms.double(0.5),
    trackIPTagInfos = cms.InputTag("impactParameterTagInfos"),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(2),
        ptMin = cms.double(1.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(8),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip3dSig'),
    useExternalSV = cms.bool(True),
    usePVError = cms.bool(True),
    vertexCuts = cms.PSet(
        distSig2dMax = cms.double(-2.0),
        distSig2dMin = cms.double(-99999.9),
        distSig3dMax = cms.double(99999.9),
        distSig3dMin = cms.double(-99999.9),
        distVal2dMax = cms.double(-0.01),
        distVal2dMin = cms.double(-2.5),
        distVal3dMax = cms.double(99999.9),
        distVal3dMin = cms.double(-99999.9),
        fracPV = cms.double(0.79),
        massMax = cms.double(6.5),
        maxDeltaRToJetAxis = cms.double(-0.5),
        minimumTrackWeight = cms.double(0.5),
        multiplicityMin = cms.uint32(2),
        useTrackWeights = cms.bool(True),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        )
    ),
    vertexReco = cms.PSet(
        finder = cms.string('avr'),
        minweight = cms.double(0.5),
        primcut = cms.double(1.8),
        seccut = cms.double(6.0),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001)
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    )
)


process.inclusiveSecondaryVertexFinderFilteredTagInfos = cms.EDProducer("SecondaryVertexProducer",
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    constraint = cms.string('BeamSpot'),
    extSVCollection = cms.InputTag("bToCharmDecayVertexMerged"),
    extSVDeltaRToJet = cms.double(0.4),
    minimumTrackWeight = cms.double(0.5),
    trackIPTagInfos = cms.InputTag("impactParameterTagInfos"),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(2),
        ptMin = cms.double(1.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(8),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip3dSig'),
    useExternalSV = cms.bool(True),
    usePVError = cms.bool(True),
    vertexCuts = cms.PSet(
        distSig2dMax = cms.double(99999.9),
        distSig2dMin = cms.double(2.0),
        distSig3dMax = cms.double(99999.9),
        distSig3dMin = cms.double(-99999.9),
        distVal2dMax = cms.double(2.5),
        distVal2dMin = cms.double(0.01),
        distVal3dMax = cms.double(99999.9),
        distVal3dMin = cms.double(-99999.9),
        fracPV = cms.double(0.79),
        massMax = cms.double(6.5),
        maxDeltaRToJetAxis = cms.double(0.4),
        minimumTrackWeight = cms.double(0.5),
        multiplicityMin = cms.uint32(2),
        useTrackWeights = cms.bool(True),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        )
    ),
    vertexReco = cms.PSet(
        finder = cms.string('avr'),
        minweight = cms.double(0.5),
        primcut = cms.double(1.8),
        seccut = cms.double(6.0),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001)
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    )
)


process.inclusiveSecondaryVertexFinderNegativeTagInfos = cms.EDProducer("SecondaryVertexProducer",
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    constraint = cms.string('BeamSpot'),
    extSVCollection = cms.InputTag("inclusiveSecondaryVertices"),
    extSVDeltaRToJet = cms.double(-0.3),
    minimumTrackWeight = cms.double(0.5),
    trackIPTagInfos = cms.InputTag("impactParameterTagInfos"),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(2),
        ptMin = cms.double(1.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(8),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip3dSig'),
    useExternalSV = cms.bool(True),
    usePVError = cms.bool(True),
    vertexCuts = cms.PSet(
        distSig2dMax = cms.double(-2.0),
        distSig2dMin = cms.double(-99999.9),
        distSig3dMax = cms.double(99999.9),
        distSig3dMin = cms.double(-99999.9),
        distVal2dMax = cms.double(-0.01),
        distVal2dMin = cms.double(-2.5),
        distVal3dMax = cms.double(99999.9),
        distVal3dMin = cms.double(-99999.9),
        fracPV = cms.double(0.79),
        massMax = cms.double(6.5),
        maxDeltaRToJetAxis = cms.double(-0.5),
        minimumTrackWeight = cms.double(0.5),
        multiplicityMin = cms.uint32(2),
        useTrackWeights = cms.bool(True),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        )
    ),
    vertexReco = cms.PSet(
        finder = cms.string('avr'),
        minweight = cms.double(0.5),
        primcut = cms.double(1.8),
        seccut = cms.double(6.0),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001)
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    )
)


process.inclusiveSecondaryVertexFinderTagInfos = cms.EDProducer("SecondaryVertexProducer",
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    constraint = cms.string('BeamSpot'),
    extSVCollection = cms.InputTag("inclusiveSecondaryVertices"),
    extSVDeltaRToJet = cms.double(0.3),
    minimumTrackWeight = cms.double(0.5),
    trackIPTagInfos = cms.InputTag("impactParameterTagInfos"),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(2),
        ptMin = cms.double(1.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(8),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip3dSig'),
    useExternalSV = cms.bool(True),
    usePVError = cms.bool(True),
    vertexCuts = cms.PSet(
        distSig2dMax = cms.double(99999.9),
        distSig2dMin = cms.double(2.0),
        distSig3dMax = cms.double(99999.9),
        distSig3dMin = cms.double(-99999.9),
        distVal2dMax = cms.double(2.5),
        distVal2dMin = cms.double(0.01),
        distVal3dMax = cms.double(99999.9),
        distVal3dMin = cms.double(-99999.9),
        fracPV = cms.double(0.79),
        massMax = cms.double(6.5),
        maxDeltaRToJetAxis = cms.double(0.4),
        minimumTrackWeight = cms.double(0.5),
        multiplicityMin = cms.uint32(2),
        useTrackWeights = cms.bool(True),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        )
    ),
    vertexReco = cms.PSet(
        finder = cms.string('avr'),
        minweight = cms.double(0.5),
        primcut = cms.double(1.8),
        seccut = cms.double(6.0),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001)
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    )
)


process.inclusiveSecondaryVertices = cms.EDProducer("VertexMerger",
    maxFraction = cms.double(0.2),
    minSignificance = cms.double(10.0),
    secondaryVertices = cms.InputTag("trackVertexArbitrator")
)


process.inclusiveVertexFinder = cms.EDProducer("InclusiveVertexFinder",
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterizer = cms.PSet(
        clusterMaxDistance = cms.double(0.05),
        clusterMaxSignificance = cms.double(4.5),
        clusterMinAngleCosine = cms.double(0.5),
        distanceRatio = cms.double(20),
        maxTimeSignificance = cms.double(3.5),
        seedMax3DIPSignificance = cms.double(9999),
        seedMax3DIPValue = cms.double(9999),
        seedMin3DIPSignificance = cms.double(1.2),
        seedMin3DIPValue = cms.double(0.005)
    ),
    fitterRatio = cms.double(0.25),
    fitterSigmacut = cms.double(3),
    fitterTini = cms.double(256),
    maxNTracks = cms.uint32(30),
    maximumLongitudinalImpactParameter = cms.double(0.3),
    maximumTimeSignificance = cms.double(3),
    mightGet = cms.optional.untracked.vstring,
    minHits = cms.uint32(8),
    minPt = cms.double(0.8),
    primaryVertices = cms.InputTag("offlinePrimaryVertices"),
    tracks = cms.InputTag("generalTracks"),
    useDirectVertexFitter = cms.bool(True),
    useVertexReco = cms.bool(True),
    vertexMinAngleCosine = cms.double(0.95),
    vertexMinDLen2DSig = cms.double(2.5),
    vertexMinDLenSig = cms.double(0.5),
    vertexReco = cms.PSet(
        finder = cms.string('avr'),
        primcut = cms.double(1),
        seccut = cms.double(3),
        smoothing = cms.bool(True)
    )
)


process.inclusiveVertexFinderDefault = cms.EDProducer("InclusiveVertexFinder",
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterizer = cms.PSet(
        clusterMaxDistance = cms.double(0.05),
        clusterMaxSignificance = cms.double(4.5),
        clusterMinAngleCosine = cms.double(0.5),
        distanceRatio = cms.double(20),
        maxTimeSignificance = cms.double(3.5),
        seedMax3DIPSignificance = cms.double(9999),
        seedMax3DIPValue = cms.double(9999),
        seedMin3DIPSignificance = cms.double(1.2),
        seedMin3DIPValue = cms.double(0.005)
    ),
    fitterRatio = cms.double(0.25),
    fitterSigmacut = cms.double(3),
    fitterTini = cms.double(256),
    maxNTracks = cms.uint32(30),
    maximumLongitudinalImpactParameter = cms.double(0.3),
    maximumTimeSignificance = cms.double(3),
    mightGet = cms.optional.untracked.vstring,
    minHits = cms.uint32(8),
    minPt = cms.double(0.8),
    primaryVertices = cms.InputTag("offlinePrimaryVertices"),
    tracks = cms.InputTag("generalTracks"),
    useDirectVertexFitter = cms.bool(True),
    useVertexReco = cms.bool(True),
    vertexMinAngleCosine = cms.double(0.95),
    vertexMinDLen2DSig = cms.double(2.5),
    vertexMinDLenSig = cms.double(0.5),
    vertexReco = cms.PSet(
        finder = cms.string('avr'),
        primcut = cms.double(1),
        seccut = cms.double(3),
        smoothing = cms.bool(True)
    )
)


process.initialStep = cms.EDProducer("ClassifierMerger",
    inputClassifiers = cms.vstring(
        'initialStepClassifier1', 
        'initialStepClassifier2', 
        'initialStepClassifier3'
    ),
    mightGet = cms.optional.untracked.vstring
)


process.initialStepClassifier1 = cms.EDProducer("TrackMVAClassifierPrompt",
    beamspot = cms.InputTag("offlineBeamSpot"),
    ignoreVertices = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    mva = cms.PSet(
        GBRForestFileName = cms.string(''),
        GBRForestLabel = cms.string('MVASelectorIter0_13TeV')
    ),
    qualityCuts = cms.vdouble(-0.9, -0.8, -0.7),
    src = cms.InputTag("initialStepTracks"),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.initialStepClassifier2 = cms.EDProducer("TrackMVAClassifierDetached",
    beamspot = cms.InputTag("offlineBeamSpot"),
    ignoreVertices = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    mva = cms.PSet(
        GBRForestFileName = cms.string(''),
        GBRForestLabel = cms.string('MVASelectorIter3_13TeV')
    ),
    qualityCuts = cms.vdouble(-0.5, 0.0, 0.5),
    src = cms.InputTag("initialStepTracks"),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.initialStepClassifier3 = cms.EDProducer("TrackMVAClassifierPrompt",
    beamspot = cms.InputTag("offlineBeamSpot"),
    ignoreVertices = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    mva = cms.PSet(
        GBRForestFileName = cms.string(''),
        GBRForestLabel = cms.string('MVASelectorIter1_13TeV')
    ),
    qualityCuts = cms.vdouble(-0.6, -0.3, -0.1),
    src = cms.InputTag("initialStepTracks"),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.initialStepHitDoublets = cms.EDProducer("HitPairEDProducer",
    clusterCheck = cms.InputTag("trackerClusterCheck"),
    layerPairs = cms.vuint32(0, 1, 2),
    maxElement = cms.uint32(50000000),
    maxElementTotal = cms.uint32(50000000),
    mightGet = cms.optional.untracked.vstring,
    produceIntermediateHitDoublets = cms.bool(True),
    produceSeedingHitSets = cms.bool(False),
    seedingLayers = cms.InputTag("initialStepSeedLayers"),
    trackingRegions = cms.InputTag("initialStepTrackingRegions"),
    trackingRegionsSeedingLayers = cms.InputTag("")
)


process.initialStepHitDoubletsPreSplitting = cms.EDProducer("HitPairEDProducer",
    clusterCheck = cms.InputTag("trackerClusterCheckPreSplitting"),
    layerPairs = cms.vuint32(0),
    maxElement = cms.uint32(50000000),
    maxElementTotal = cms.uint32(50000000),
    mightGet = cms.optional.untracked.vstring,
    produceIntermediateHitDoublets = cms.bool(True),
    produceSeedingHitSets = cms.bool(False),
    seedingLayers = cms.InputTag("initialStepSeedLayersPreSplitting"),
    trackingRegions = cms.InputTag("initialStepTrackingRegionsPreSplitting"),
    trackingRegionsSeedingLayers = cms.InputTag("")
)


process.initialStepHitQuadruplets = cms.EDProducer("CAHitQuadrupletEDProducer",
    CAHardPtCut = cms.double(0),
    CAOnlyOneLastHitPerLayerFilter = cms.optional.bool,
    CAPhiCut = cms.double(0.175),
    CAThetaCut = cms.double(0.001),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('LowPtClusterShapeSeedComparitor'),
        clusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
        clusterShapeHitFilter = cms.string('ClusterShapeHitFilter')
    ),
    doublets = cms.InputTag("initialStepHitDoublets"),
    extraHitRPhitolerance = cms.double(0.032),
    fitFastCircle = cms.bool(True),
    fitFastCircleChi2Cut = cms.bool(True),
    maxChi2 = cms.PSet(
        enabled = cms.bool(True),
        pt1 = cms.double(0.7),
        pt2 = cms.double(2),
        value1 = cms.double(200),
        value2 = cms.double(50)
    ),
    mightGet = cms.optional.untracked.vstring,
    useBendingCorrection = cms.bool(True)
)


process.initialStepHitQuadrupletsPreSplitting = cms.EDProducer("CAHitQuadrupletEDProducer",
    CAHardPtCut = cms.double(0),
    CAOnlyOneLastHitPerLayerFilter = cms.optional.bool,
    CAPhiCut = cms.double(0.2),
    CAThetaCut = cms.double(0.0012),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('LowPtClusterShapeSeedComparitor'),
        clusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCachePreSplitting"),
        clusterShapeHitFilter = cms.string('ClusterShapeHitFilter')
    ),
    doublets = cms.InputTag("initialStepHitDoubletsPreSplitting"),
    extraHitRPhitolerance = cms.double(0.032),
    fitFastCircle = cms.bool(True),
    fitFastCircleChi2Cut = cms.bool(True),
    maxChi2 = cms.PSet(
        enabled = cms.bool(True),
        pt1 = cms.double(0.7),
        pt2 = cms.double(2),
        value1 = cms.double(200),
        value2 = cms.double(50)
    ),
    mightGet = cms.optional.untracked.vstring,
    useBendingCorrection = cms.bool(True)
)


process.initialStepHitTriplets = cms.EDProducer("PixelTripletHLTEDProducer",
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('LowPtClusterShapeSeedComparitor'),
        clusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
        clusterShapeHitFilter = cms.string('ClusterShapeHitFilter')
    ),
    doublets = cms.InputTag("initialStepHitDoublets"),
    extraHitRPhitolerance = cms.double(0.032),
    extraHitRZtolerance = cms.double(0.037),
    maxElement = cms.uint32(0),
    mightGet = cms.optional.untracked.vstring,
    phiPreFiltering = cms.double(0.3),
    produceIntermediateHitTriplets = cms.bool(False),
    produceSeedingHitSets = cms.bool(True),
    useBending = cms.bool(True),
    useFixedPreFiltering = cms.bool(False),
    useMultScattering = cms.bool(True)
)


process.initialStepHitTripletsPreSplitting = cms.EDProducer("PixelTripletHLTEDProducer",
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('LowPtClusterShapeSeedComparitor'),
        clusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCachePreSplitting"),
        clusterShapeHitFilter = cms.string('ClusterShapeHitFilter')
    ),
    doublets = cms.InputTag("initialStepHitDoubletsPreSplitting"),
    extraHitRPhitolerance = cms.double(0.032),
    extraHitRZtolerance = cms.double(0.037),
    maxElement = cms.uint32(0),
    mightGet = cms.optional.untracked.vstring,
    phiPreFiltering = cms.double(0.3),
    produceIntermediateHitTriplets = cms.bool(False),
    produceSeedingHitSets = cms.bool(True),
    useBending = cms.bool(True),
    useFixedPreFiltering = cms.bool(False),
    useMultScattering = cms.bool(True)
)


process.initialStepSeedClusterMask = cms.EDProducer("SeedClusterRemoverPhase2",
    oldClusterRemovalInfo = cms.InputTag("highPtTripletStepClusters"),
    phase2OTClusters = cms.InputTag("siPhase2Clusters"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    trajectories = cms.InputTag("initialStepSeeds")
)


process.initialStepSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring(
        'BPix1+BPix2+BPix3+BPix4', 
        'BPix1+BPix2+BPix3+FPix1_pos', 
        'BPix1+BPix2+BPix3+FPix1_neg', 
        'BPix1+BPix2+FPix1_pos+FPix2_pos', 
        'BPix1+BPix2+FPix1_neg+FPix2_neg', 
        'BPix1+FPix1_pos+FPix2_pos+FPix3_pos', 
        'BPix1+FPix1_neg+FPix2_neg+FPix3_neg', 
        'FPix1_pos+FPix2_pos+FPix3_pos+FPix4_pos', 
        'FPix1_neg+FPix2_neg+FPix3_neg+FPix4_neg', 
        'FPix2_pos+FPix3_pos+FPix4_pos+FPix5_pos', 
        'FPix2_neg+FPix3_neg+FPix4_neg+FPix5_neg', 
        'FPix3_pos+FPix4_pos+FPix5_pos+FPix6_pos', 
        'FPix3_neg+FPix4_neg+FPix5_neg+FPix6_neg', 
        'FPix4_pos+FPix5_pos+FPix6_pos+FPix7_pos', 
        'FPix4_neg+FPix5_neg+FPix6_neg+FPix7_neg', 
        'FPix5_pos+FPix6_pos+FPix7_pos+FPix8_pos', 
        'FPix5_neg+FPix6_neg+FPix7_neg+FPix8_neg'
    ),
    mightGet = cms.optional.untracked.vstring
)


process.initialStepSeedLayersPreSplitting = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHitsPreSplitting'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHitsPreSplitting'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring(
        'BPix1+BPix2+BPix3', 
        'BPix2+BPix3+BPix4', 
        'BPix2+BPix3+FPix1_pos', 
        'BPix2+BPix3+FPix1_neg', 
        'BPix1+BPix2+FPix1_pos', 
        'BPix1+BPix2+FPix1_neg', 
        'BPix2+FPix1_pos+FPix2_pos', 
        'BPix2+FPix1_neg+FPix2_neg', 
        'BPix1+FPix1_pos+FPix2_pos', 
        'BPix1+FPix1_neg+FPix2_neg', 
        'BPix1+FPix2_pos+FPix3_pos', 
        'BPix1+FPix2_neg+FPix3_neg', 
        'FPix1_pos+FPix2_pos+FPix3_pos', 
        'FPix1_neg+FPix2_neg+FPix3_neg', 
        'FPix2_pos+FPix3_pos+FPix4_pos', 
        'FPix2_neg+FPix3_neg+FPix4_neg', 
        'FPix3_pos+FPix4_pos+FPix5_pos', 
        'FPix3_neg+FPix4_neg+FPix5_neg', 
        'FPix4_pos+FPix5_pos+FPix6_pos', 
        'FPix4_neg+FPix5_neg+FPix6_neg', 
        'FPix5_pos+FPix6_pos+FPix7_pos', 
        'FPix5_neg+FPix6_neg+FPix7_neg', 
        'FPix6_pos+FPix7_pos+FPix8_pos', 
        'FPix6_neg+FPix7_neg+FPix8_neg', 
        'FPix6_pos+FPix7_pos+FPix9_pos', 
        'FPix6_neg+FPix7_neg+FPix9_neg'
    ),
    mightGet = cms.optional.untracked.vstring
)


process.initialStepSeeds = cms.EDProducer("SeedCreatorFromRegionConsecutiveHitsTripletOnlyEDProducer",
    MinOneOverPtError = cms.double(1),
    OriginTransverseErrorMultiplier = cms.double(1),
    SeedComparitorPSet = cms.PSet(
        ClusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
        ClusterShapeHitFilterName = cms.string('ClusterShapeHitFilter'),
        ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
        FilterAtHelixStage = cms.bool(False),
        FilterPixelHits = cms.bool(True),
        FilterStripHits = cms.bool(False)
    ),
    SeedMomentumForBOFF = cms.double(5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    forceKinematicWithRegionDirection = cms.bool(False),
    magneticField = cms.string(''),
    mightGet = cms.optional.untracked.vstring,
    propagator = cms.string('PropagatorWithMaterial'),
    seedingHitSets = cms.InputTag("initialStepHitQuadruplets")
)


process.initialStepSeedsPreSplitting = cms.EDProducer("SeedCreatorFromRegionConsecutiveHitsEDProducer",
    MinOneOverPtError = cms.double(1),
    OriginTransverseErrorMultiplier = cms.double(1),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedMomentumForBOFF = cms.double(5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    forceKinematicWithRegionDirection = cms.bool(False),
    magneticField = cms.string(''),
    mightGet = cms.optional.untracked.vstring,
    propagator = cms.string('PropagatorWithMaterial'),
    seedingHitSets = cms.InputTag("initialStepHitTripletsPreSplitting")
)


process.initialStepSelector = cms.EDProducer("MultiTrackSelector",
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("initialStepTracks"),
    trackSelectors = cms.VPSet(
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(2.0),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.8, 4.0),
            d0_par2 = cms.vdouble(0.6, 4.0),
            dz_par1 = cms.vdouble(0.9, 4.0),
            dz_par2 = cms.vdouble(0.8, 4.0),
            keepAllTracks = cms.bool(False),
            maxNumberLostLayers = cms.uint32(3),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('initialStepLoose'),
            preFilterName = cms.string(''),
            qualityBit = cms.string('loose'),
            res_par = cms.vdouble(0.003, 0.002),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(1.4),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.7, 4.0),
            d0_par2 = cms.vdouble(0.5, 4.0),
            dz_par1 = cms.vdouble(0.8, 4.0),
            dz_par2 = cms.vdouble(0.7, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('initialStepTight'),
            preFilterName = cms.string('initialStepLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.002),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(1.2),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.6, 4.0),
            d0_par2 = cms.vdouble(0.45, 4.0),
            dz_par1 = cms.vdouble(0.7, 4.0),
            dz_par2 = cms.vdouble(0.55, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(4.1),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-4.1),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('initialStep'),
            preFilterName = cms.string('initialStepTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        )
    ),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(False),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.initialStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('initialStepTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    numHitsForSeedCleaner = cms.int32(50),
    onlyPixelHitsForSeedCleaner = cms.bool(True),
    reverseTrajectories = cms.bool(False),
    src = cms.InputTag("initialStepSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.initialStepTrackCandidatesMkFit = cms.EDProducer("MkFitProducer",
    backwardFitInCMSSW = cms.bool(False),
    buildingRoutine = cms.string('cloneEngine'),
    hitsSeeds = cms.InputTag("initialStepTrackCandidatesMkFitInput"),
    mightGet = cms.optional.untracked.vstring,
    mkFitSilent = cms.untracked.bool(True),
    seedCleaning = cms.string('N2')
)


process.initialStepTrackCandidatesMkFitInput = cms.EDProducer("MkFitInputConverter",
    mightGet = cms.optional.untracked.vstring,
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutLoose')
    ),
    pixelRecHits = cms.InputTag("siPixelRecHits"),
    seeds = cms.InputTag("initialStepSeeds"),
    stripRphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    stripStereoRecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHit"),
    ttrhBuilder = cms.ESInputTag("","WithTrackAngle")
)


process.initialStepTrackCandidatesPreSplitting = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEventPreSplitting"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('initialStepTrajectoryBuilderPreSplitting')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    numHitsForSeedCleaner = cms.int32(50),
    onlyPixelHitsForSeedCleaner = cms.bool(True),
    reverseTrajectories = cms.bool(False),
    src = cms.InputTag("initialStepSeedsPreSplitting"),
    useHitsSplitting = cms.bool(True)
)


process.initialStepTrackRefsForJets = cms.EDProducer("ChargedRefCandidateProducer",
    particleType = cms.string('pi+'),
    src = cms.InputTag("initialStepTracks")
)


process.initialStepTrackRefsForJetsPreSplitting = cms.EDProducer("ChargedRefCandidateProducer",
    particleType = cms.string('pi+'),
    src = cms.InputTag("initialStepTracksPreSplitting")
)


process.initialStepTrackingRegions = cms.EDProducer("GlobalTrackingRegionFromBeamSpotEDProducer",
    RegionPSet = cms.PSet(
        beamSpot = cms.InputTag("offlineBeamSpot"),
        nSigmaZ = cms.double(4),
        originHalfLength = cms.double(0),
        originRadius = cms.double(0.03),
        precise = cms.bool(True),
        ptMin = cms.double(0.6),
        useMultipleScattering = cms.bool(False)
    ),
    mightGet = cms.optional.untracked.vstring
)


process.initialStepTrackingRegionsPreSplitting = cms.EDProducer("GlobalTrackingRegionFromBeamSpotEDProducer",
    RegionPSet = cms.PSet(
        beamSpot = cms.InputTag("offlineBeamSpot"),
        nSigmaZ = cms.double(4),
        originHalfLength = cms.double(0),
        originRadius = cms.double(0.02),
        precise = cms.bool(True),
        ptMin = cms.double(0.6),
        useMultipleScattering = cms.bool(False)
    ),
    mightGet = cms.optional.untracked.vstring
)


process.initialStepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('initialStep'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("initialStepTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.initialStepTracksPreSplitting = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('initialStep'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEventPreSplitting"),
    NavigationSchool = cms.string(''),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("initialStepTrackCandidatesPreSplitting"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.interestingEcalDetIdEB = cms.EDProducer("InterestingDetIdCollectionProducer",
    basicClustersLabel = cms.InputTag("hybridSuperClusters","hybridBarrelBasicClusters"),
    etaSize = cms.int32(5),
    interestingDetIdCollection = cms.string(''),
    keepNextToBoundary = cms.bool(True),
    keepNextToDead = cms.bool(True),
    phiSize = cms.int32(5),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    severityLevel = cms.int32(1)
)


process.interestingEcalDetIdEBU = cms.EDProducer("InterestingDetIdCollectionProducer",
    basicClustersLabel = cms.InputTag("hybridSuperClusters","uncleanOnlyHybridBarrelBasicClusters"),
    etaSize = cms.int32(5),
    interestingDetIdCollection = cms.string(''),
    keepNextToBoundary = cms.bool(True),
    keepNextToDead = cms.bool(True),
    phiSize = cms.int32(5),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    severityLevel = cms.int32(1)
)


process.interestingEcalDetIdEE = cms.EDProducer("InterestingDetIdCollectionProducer",
    basicClustersLabel = cms.InputTag("multi5x5SuperClusters","multi5x5EndcapBasicClusters"),
    etaSize = cms.int32(5),
    interestingDetIdCollection = cms.string(''),
    keepNextToBoundary = cms.bool(True),
    keepNextToDead = cms.bool(True),
    phiSize = cms.int32(5),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    severityLevel = cms.int32(1)
)


process.interestingEcalDetIdOOTPFEB = cms.EDProducer("InterestingDetIdCollectionProducer",
    basicClustersLabel = cms.InputTag("particleFlowSuperClusterOOTECAL","particleFlowBasicClusterOOTECALBarrel"),
    etaSize = cms.int32(5),
    interestingDetIdCollection = cms.string(''),
    keepNextToBoundary = cms.bool(True),
    keepNextToDead = cms.bool(True),
    phiSize = cms.int32(5),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    severityLevel = cms.int32(1)
)


process.interestingEcalDetIdOOTPFEE = cms.EDProducer("InterestingDetIdCollectionProducer",
    basicClustersLabel = cms.InputTag("particleFlowSuperClusterOOTECAL","particleFlowBasicClusterOOTECALEndcap"),
    etaSize = cms.int32(5),
    interestingDetIdCollection = cms.string(''),
    keepNextToBoundary = cms.bool(True),
    keepNextToDead = cms.bool(True),
    phiSize = cms.int32(5),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    severityLevel = cms.int32(1)
)


process.interestingEcalDetIdOOTPFES = cms.EDProducer("InterestingDetIdCollectionProducer",
    basicClustersLabel = cms.InputTag("particleFlowSuperClusterOOTECAL","particleFlowBasicClusterOOTECALPreshower"),
    etaSize = cms.int32(5),
    interestingDetIdCollection = cms.string(''),
    keepNextToBoundary = cms.bool(False),
    keepNextToDead = cms.bool(False),
    phiSize = cms.int32(5),
    recHitsLabel = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    severityLevel = cms.int32(-1)
)


process.interestingEcalDetIdPFEB = cms.EDProducer("InterestingDetIdCollectionProducer",
    basicClustersLabel = cms.InputTag("particleFlowSuperClusterECAL","particleFlowBasicClusterECALBarrel"),
    etaSize = cms.int32(5),
    interestingDetIdCollection = cms.string(''),
    keepNextToBoundary = cms.bool(True),
    keepNextToDead = cms.bool(True),
    phiSize = cms.int32(5),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    severityLevel = cms.int32(1)
)


process.interestingEcalDetIdPFEE = cms.EDProducer("InterestingDetIdCollectionProducer",
    basicClustersLabel = cms.InputTag("particleFlowSuperClusterECAL","particleFlowBasicClusterECALEndcap"),
    etaSize = cms.int32(5),
    interestingDetIdCollection = cms.string(''),
    keepNextToBoundary = cms.bool(True),
    keepNextToDead = cms.bool(True),
    phiSize = cms.int32(5),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    severityLevel = cms.int32(1)
)


process.interestingEcalDetIdPFES = cms.EDProducer("InterestingDetIdCollectionProducer",
    basicClustersLabel = cms.InputTag("particleFlowSuperClusterECAL","particleFlowBasicClusterECALPreshower"),
    etaSize = cms.int32(5),
    interestingDetIdCollection = cms.string(''),
    keepNextToBoundary = cms.bool(False),
    keepNextToDead = cms.bool(False),
    phiSize = cms.int32(5),
    recHitsLabel = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    severityLevel = cms.int32(-1)
)


process.interestingEcalDetIdRefinedEB = cms.EDProducer("InterestingDetIdCollectionProducer",
    basicClustersLabel = cms.InputTag("particleFlowEGamma","EBEEClusters"),
    etaSize = cms.int32(5),
    interestingDetIdCollection = cms.string(''),
    keepNextToBoundary = cms.bool(True),
    keepNextToDead = cms.bool(True),
    phiSize = cms.int32(5),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    severityLevel = cms.int32(1)
)


process.interestingEcalDetIdRefinedEE = cms.EDProducer("InterestingDetIdCollectionProducer",
    basicClustersLabel = cms.InputTag("particleFlowEGamma","EBEEClusters"),
    etaSize = cms.int32(5),
    interestingDetIdCollection = cms.string(''),
    keepNextToBoundary = cms.bool(True),
    keepNextToDead = cms.bool(True),
    phiSize = cms.int32(5),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    severityLevel = cms.int32(1)
)


process.interestingEcalDetIdRefinedES = cms.EDProducer("InterestingDetIdCollectionProducer",
    basicClustersLabel = cms.InputTag("particleFlowEGamma","ESClusters"),
    etaSize = cms.int32(5),
    interestingDetIdCollection = cms.string(''),
    keepNextToBoundary = cms.bool(False),
    keepNextToDead = cms.bool(False),
    phiSize = cms.int32(5),
    recHitsLabel = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    severityLevel = cms.int32(-1)
)


process.interestingEleIsoDetId = cms.EDProducer("EleIsoDetIdCollectionProducer",
    RecHitFlagToBeExcludedEB = cms.vstring(
        'kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'
    ),
    RecHitFlagToBeExcludedEE = cms.vstring(
        'kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'
    ),
    RecHitSeverityToBeExcludedEB = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    RecHitSeverityToBeExcludedEE = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    emObjectLabel = cms.InputTag("gedGsfElectrons"),
    energyCut = cms.double(0.04),
    etCandCut = cms.double(0.0),
    etCut = cms.double(0),
    innerRadius = cms.double(0.0),
    interestingDetIdCollection = cms.string(''),
    outerRadius = cms.double(0.6),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB")
)


process.interestingGamIsoDetId = cms.EDProducer("GamIsoDetIdCollectionProducer",
    RecHitFlagToBeExcludedEB = cms.vstring(
        'kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'
    ),
    RecHitFlagToBeExcludedEE = cms.vstring(
        'kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'
    ),
    RecHitSeverityToBeExcludedEB = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    RecHitSeverityToBeExcludedEE = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    emObjectLabel = cms.InputTag("photons"),
    energyCut = cms.double(0.04),
    etCandCut = cms.double(0.0),
    etCut = cms.double(0),
    innerRadius = cms.double(0.0),
    interestingDetIdCollection = cms.string(''),
    outerRadius = cms.double(0.6),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB")
)


process.interestingGamIsoDetIdEB = cms.EDProducer("GamIsoDetIdCollectionProducer",
    RecHitFlagToBeExcludedEB = cms.vstring(
        'kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'
    ),
    RecHitFlagToBeExcludedEE = cms.vstring(
        'kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'
    ),
    RecHitSeverityToBeExcludedEB = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    RecHitSeverityToBeExcludedEE = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    emObjectLabel = cms.InputTag("photons"),
    energyCut = cms.double(0.095),
    etCandCut = cms.double(0.0),
    etCut = cms.double(0),
    innerRadius = cms.double(0.0),
    interestingDetIdCollection = cms.string(''),
    outerRadius = cms.double(0.6),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB")
)


process.interestingGamIsoDetIdEE = cms.EDProducer("GamIsoDetIdCollectionProducer",
    RecHitFlagToBeExcludedEB = cms.vstring(
        'kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'
    ),
    RecHitFlagToBeExcludedEE = cms.vstring(
        'kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'
    ),
    RecHitSeverityToBeExcludedEB = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    RecHitSeverityToBeExcludedEE = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    emObjectLabel = cms.InputTag("photons"),
    energyCut = cms.double(0.0),
    etCandCut = cms.double(0.0),
    etCut = cms.double(0.11),
    innerRadius = cms.double(0.0),
    interestingDetIdCollection = cms.string(''),
    outerRadius = cms.double(0.6),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE")
)


process.interestingGedEgammaIsoESDetId = cms.EDProducer("EgammaIsoESDetIdCollectionProducer",
    ecalPFClustersLabel = cms.InputTag("particleFlowClusterECALRemade"),
    eeClusToESMapLabel = cms.InputTag("particleFlowClusterECALRemade"),
    elesLabel = cms.InputTag("gedGsfElectrons"),
    interestingDetIdCollection = cms.string(''),
    maxDR = cms.double(0.4),
    minEleEt = cms.double(20),
    minPhoEt = cms.double(20),
    minSCEt = cms.double(500),
    phosLabel = cms.InputTag("gedPhotons"),
    superClustersLabel = cms.InputTag("particleFlowEGamma")
)


process.interestingGedEgammaIsoHCALDetId = cms.EDProducer("EgammaIsoHcalDetIdCollectionProducer",
    elesLabel = cms.InputTag("gedGsfElectrons"),
    hitSelection = cms.PSet(
        maxDIEta = cms.int32(5),
        maxDIPhi = cms.int32(5),
        minEnergyHB = cms.double(0.1),
        minEnergyHEDefault = cms.double(0.2),
        minEnergyHEDepth1 = cms.double(0.1)
    ),
    interestingDetIdCollection = cms.string(''),
    mightGet = cms.optional.untracked.vstring,
    minEleEt = cms.double(20),
    minPhoEt = cms.double(20),
    minSCEt = cms.double(20),
    phosLabel = cms.InputTag("gedPhotons"),
    recHitsLabel = cms.InputTag("hbhereco"),
    superClustersLabel = cms.InputTag("particleFlowEGamma")
)


process.interestingGedEleIsoDetIdEB = cms.EDProducer("EleIsoDetIdCollectionProducer",
    RecHitFlagToBeExcludedEB = cms.vstring(
        'kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'
    ),
    RecHitFlagToBeExcludedEE = cms.vstring(
        'kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'
    ),
    RecHitSeverityToBeExcludedEB = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    RecHitSeverityToBeExcludedEE = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    emObjectLabel = cms.InputTag("gedGsfElectrons"),
    energyCut = cms.double(0.095),
    etCandCut = cms.double(0.0),
    etCut = cms.double(0),
    innerRadius = cms.double(0.0),
    interestingDetIdCollection = cms.string(''),
    outerRadius = cms.double(0.6),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB")
)


process.interestingGedEleIsoDetIdEE = cms.EDProducer("EleIsoDetIdCollectionProducer",
    RecHitFlagToBeExcludedEB = cms.vstring(
        'kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'
    ),
    RecHitFlagToBeExcludedEE = cms.vstring(
        'kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'
    ),
    RecHitSeverityToBeExcludedEB = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    RecHitSeverityToBeExcludedEE = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    emObjectLabel = cms.InputTag("gedGsfElectrons"),
    energyCut = cms.double(0.0),
    etCandCut = cms.double(0.0),
    etCut = cms.double(0.11),
    innerRadius = cms.double(0.0),
    interestingDetIdCollection = cms.string(''),
    outerRadius = cms.double(0.6),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE")
)


process.interestingGedGamIsoDetIdEB = cms.EDProducer("GamIsoDetIdCollectionProducer",
    RecHitFlagToBeExcludedEB = cms.vstring(
        'kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'
    ),
    RecHitFlagToBeExcludedEE = cms.vstring(
        'kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'
    ),
    RecHitSeverityToBeExcludedEB = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    RecHitSeverityToBeExcludedEE = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    emObjectLabel = cms.InputTag("gedPhotons"),
    energyCut = cms.double(0.095),
    etCandCut = cms.double(0.0),
    etCut = cms.double(0),
    innerRadius = cms.double(0.0),
    interestingDetIdCollection = cms.string(''),
    outerRadius = cms.double(0.6),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB")
)


process.interestingGedGamIsoDetIdEE = cms.EDProducer("GamIsoDetIdCollectionProducer",
    RecHitFlagToBeExcludedEB = cms.vstring(
        'kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'
    ),
    RecHitFlagToBeExcludedEE = cms.vstring(
        'kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'
    ),
    RecHitSeverityToBeExcludedEB = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    RecHitSeverityToBeExcludedEE = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    emObjectLabel = cms.InputTag("gedPhotons"),
    energyCut = cms.double(0.0),
    etCandCut = cms.double(0.0),
    etCut = cms.double(0.11),
    innerRadius = cms.double(0.0),
    interestingDetIdCollection = cms.string(''),
    outerRadius = cms.double(0.6),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE")
)


process.interestingOotEgammaIsoESDetId = cms.EDProducer("EgammaIsoESDetIdCollectionProducer",
    ecalPFClustersLabel = cms.InputTag("particleFlowClusterOOTECAL"),
    eeClusToESMapLabel = cms.InputTag("particleFlowClusterOOTECAL"),
    elesLabel = cms.InputTag(""),
    interestingDetIdCollection = cms.string(''),
    maxDR = cms.double(0.4),
    minEleEt = cms.double(20),
    minPhoEt = cms.double(20),
    minSCEt = cms.double(500),
    phosLabel = cms.InputTag("ootPhotons"),
    superClustersLabel = cms.InputTag("")
)


process.interestingOotEgammaIsoHCALDetId = cms.EDProducer("EgammaIsoHcalDetIdCollectionProducer",
    elesLabel = cms.InputTag(""),
    hitSelection = cms.PSet(
        maxDIEta = cms.int32(5),
        maxDIPhi = cms.int32(5),
        minEnergyHB = cms.double(0.8),
        minEnergyHEDefault = cms.double(0.2),
        minEnergyHEDepth1 = cms.double(0.1)
    ),
    interestingDetIdCollection = cms.string(''),
    mightGet = cms.optional.untracked.vstring,
    minEleEt = cms.double(20),
    minPhoEt = cms.double(20),
    minSCEt = cms.double(20),
    phosLabel = cms.InputTag("ootPhotons"),
    recHitsLabel = cms.InputTag("hbhereco"),
    superClustersLabel = cms.InputTag("")
)


process.interestingOotGamIsoDetIdEB = cms.EDProducer("GamIsoDetIdCollectionProducer",
    RecHitFlagToBeExcludedEB = cms.vstring(
        'kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'
    ),
    RecHitFlagToBeExcludedEE = cms.vstring(
        'kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'
    ),
    RecHitSeverityToBeExcludedEB = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    RecHitSeverityToBeExcludedEE = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    emObjectLabel = cms.InputTag("ootPhotons"),
    energyCut = cms.double(0.095),
    etCandCut = cms.double(0.0),
    etCut = cms.double(0),
    innerRadius = cms.double(0.0),
    interestingDetIdCollection = cms.string(''),
    outerRadius = cms.double(0.6),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB")
)


process.interestingOotGamIsoDetIdEE = cms.EDProducer("GamIsoDetIdCollectionProducer",
    RecHitFlagToBeExcludedEB = cms.vstring(
        'kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'
    ),
    RecHitFlagToBeExcludedEE = cms.vstring(
        'kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'
    ),
    RecHitSeverityToBeExcludedEB = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    RecHitSeverityToBeExcludedEE = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    emObjectLabel = cms.InputTag("ootPhotons"),
    energyCut = cms.double(0.0),
    etCandCut = cms.double(0.0),
    etCut = cms.double(0.11),
    innerRadius = cms.double(0.0),
    interestingDetIdCollection = cms.string(''),
    outerRadius = cms.double(0.6),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE")
)


process.interestingTrackEcalDetIds = cms.EDProducer("InterestingTrackEcalDetIdProducer",
    MinTrackPt = cms.double(50.0),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        dRHcal = cms.double(9999.0),
        dRHcalPreselection = cms.double(0.2),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(True),
        useGEM = cms.bool(False),
        useHO = cms.bool(True),
        useHcal = cms.bool(True),
        useME0 = cms.bool(False),
        useMuon = cms.bool(True),
        usePreshower = cms.bool(False)
    ),
    TrackCollection = cms.InputTag("generalTracks")
)


process.islandBasicClusters = cms.EDProducer("IslandClusterProducer",
    IslandBarrelSeedThr = cms.double(0.5),
    IslandEndcapSeedThr = cms.double(0.18),
    RecHitFlagToBeExcludedEB = cms.vstring(
        'kWeird', 
        'kDiWeird', 
        'kOutOfTime', 
        'kTowerRecovered'
    ),
    RecHitFlagToBeExcludedEE = cms.vstring(
        'kWeird', 
        'kDiWeird', 
        'kOutOfTime', 
        'kTowerRecovered'
    ),
    SeedRecHitFlagToBeExcludedEB = cms.vstring(
        'kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'
    ),
    SeedRecHitFlagToBeExcludedEE = cms.vstring(
        'kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'
    ),
    VerbosityLevel = cms.string('ERROR'),
    barrelClusterCollection = cms.string('islandBarrelBasicClusters'),
    barrelHits = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    barrelShapeAssociation = cms.string('islandBarrelShapeAssoc'),
    clustershapecollectionEB = cms.string('islandBarrelShape'),
    clustershapecollectionEE = cms.string('islandEndcapShape'),
    endcapClusterCollection = cms.string('islandEndcapBasicClusters'),
    endcapHits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    endcapShapeAssociation = cms.string('islandEndcapShapeAssoc'),
    posCalcParameters = cms.PSet(
        LogWeighted = cms.bool(True),
        T0_barl = cms.double(7.4),
        T0_endc = cms.double(3.1),
        T0_endcPresh = cms.double(1.2),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    )
)


process.islandPhotonCore = cms.EDProducer("PhotonCoreProducer",
    conversionProducer = cms.InputTag(""),
    minSCEt = cms.double(8.0),
    photonCoreCollection = cms.string(''),
    pixelSeedProducer = cms.InputTag("electronMergedSeeds"),
    risolveConversionAmbiguity = cms.bool(True),
    scHybridBarrelProducer = cms.InputTag("correctedIslandBarrelSuperClusters"),
    scIslandEndcapProducer = cms.InputTag("correctedIslandEndcapSuperClusters")
)


process.islandPhotons = cms.EDProducer("PhotonProducer",
    RecHitFlagToBeExcludedEB = cms.vstring(
        'kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'
    ),
    RecHitFlagToBeExcludedEE = cms.vstring(
        'kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'
    ),
    RecHitSeverityToBeExcludedEB = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    RecHitSeverityToBeExcludedEE = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    barrelEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    candidateP4type = cms.string('fromEcalEnergy'),
    ecalRecHitSumEtOffsetBarrel = cms.double(999999999),
    ecalRecHitSumEtOffsetEndcap = cms.double(999999999),
    ecalRecHitSumEtSlopeBarrel = cms.double(0.0),
    ecalRecHitSumEtSlopeEndcap = cms.double(0.0),
    endcapEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    energyRegressionWeightsDBLocation = cms.string('wgbrph'),
    energyRegressionWeightsFileLocation = cms.string('/afs/cern.ch/user/b/bendavid/cmspublic/regweights/gbrph.root'),
    hOverEConeSize = cms.double(0.15),
    hbheInstance = cms.string(''),
    hbheModule = cms.string('hbhereco'),
    hcalTowerSumEtOffsetBarrel = cms.double(999999999),
    hcalTowerSumEtOffsetEndcap = cms.double(999999999),
    hcalTowerSumEtSlopeBarrel = cms.double(0.0),
    hcalTowerSumEtSlopeEndcap = cms.double(0.0),
    hcalTowers = cms.InputTag("towerMaker"),
    highEt = cms.double(100.0),
    isolationSumsCalculatorSet = cms.PSet(
        ComponentName = cms.string('isolationSumsCalculator'),
        EcalRecHitEtaSliceA_Barrel = cms.double(2.5),
        EcalRecHitEtaSliceA_Endcap = cms.double(2.5),
        EcalRecHitEtaSliceB_Barrel = cms.double(2.5),
        EcalRecHitEtaSliceB_Endcap = cms.double(2.5),
        EcalRecHitInnerRadiusA_Barrel = cms.double(3.5),
        EcalRecHitInnerRadiusA_Endcap = cms.double(3.5),
        EcalRecHitInnerRadiusB_Barrel = cms.double(3.5),
        EcalRecHitInnerRadiusB_Endcap = cms.double(3.5),
        EcalRecHitOuterRadiusA_Barrel = cms.double(0.4),
        EcalRecHitOuterRadiusA_Endcap = cms.double(0.4),
        EcalRecHitOuterRadiusB_Barrel = cms.double(0.3),
        EcalRecHitOuterRadiusB_Endcap = cms.double(0.3),
        EcalRecHitThreshEA_Barrel = cms.double(0.095),
        EcalRecHitThreshEA_Endcap = cms.double(0.0),
        EcalRecHitThreshEB_Barrel = cms.double(0.095),
        EcalRecHitThreshEB_Endcap = cms.double(0.0),
        EcalRecHitThreshEtA_Barrel = cms.double(0.0),
        EcalRecHitThreshEtA_Endcap = cms.double(0.11),
        EcalRecHitThreshEtB_Barrel = cms.double(0.0),
        EcalRecHitThreshEtB_Endcap = cms.double(0.11),
        HcalDepth1TowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalDepth1TowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalDepth1TowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalDepth1TowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalDepth1TowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth1TowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalDepth1TowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalDepth1TowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalDepth1TowerThreshEA_Barrel = cms.double(0.0),
        HcalDepth1TowerThreshEA_Endcap = cms.double(0.0),
        HcalDepth1TowerThreshEB_Barrel = cms.double(0.0),
        HcalDepth1TowerThreshEB_Endcap = cms.double(0.0),
        HcalDepth2TowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalDepth2TowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalDepth2TowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalDepth2TowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalDepth2TowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth2TowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalDepth2TowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalDepth2TowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalDepth2TowerThreshEA_Barrel = cms.double(0.0),
        HcalDepth2TowerThreshEA_Endcap = cms.double(0.0),
        HcalDepth2TowerThreshEB_Barrel = cms.double(0.0),
        HcalDepth2TowerThreshEB_Endcap = cms.double(0.0),
        HcalRecHitCollection = cms.InputTag("towerMaker"),
        HcalTowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalTowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalTowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalTowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalTowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalTowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalTowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalTowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalTowerThreshEA_Barrel = cms.double(0.0),
        HcalTowerThreshEA_Endcap = cms.double(0.0),
        HcalTowerThreshEB_Barrel = cms.double(0.0),
        HcalTowerThreshEB_Endcap = cms.double(0.0),
        TrackConeInnerRadiusA_Barrel = cms.double(0.04),
        TrackConeInnerRadiusA_Endcap = cms.double(0.04),
        TrackConeInnerRadiusB_Barrel = cms.double(0.04),
        TrackConeInnerRadiusB_Endcap = cms.double(0.04),
        TrackConeOuterRadiusA_Barrel = cms.double(0.4),
        TrackConeOuterRadiusA_Endcap = cms.double(0.4),
        TrackConeOuterRadiusB_Barrel = cms.double(0.3),
        TrackConeOuterRadiusB_Endcap = cms.double(0.3),
        barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        beamSpotProducer = cms.InputTag("offlineBeamSpot"),
        endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        isolationtrackEtaSliceA_Barrel = cms.double(0.015),
        isolationtrackEtaSliceA_Endcap = cms.double(0.015),
        isolationtrackEtaSliceB_Barrel = cms.double(0.015),
        isolationtrackEtaSliceB_Endcap = cms.double(0.015),
        isolationtrackThresholdA_Barrel = cms.double(0.0),
        isolationtrackThresholdA_Endcap = cms.double(0.0),
        isolationtrackThresholdB_Barrel = cms.double(0.0),
        isolationtrackThresholdB_Endcap = cms.double(0.0),
        longImpactParameterA_Barrel = cms.double(0.2),
        longImpactParameterA_Endcap = cms.double(0.2),
        longImpactParameterB_Barrel = cms.double(0.2),
        longImpactParameterB_Endcap = cms.double(0.2),
        moduleEtaBoundary = cms.vdouble(
            0.0, 0.02, 0.43, 0.46, 0.78, 
            0.81, 1.13, 1.15, 1.45, 1.58
        ),
        modulePhiBoundary = cms.double(0.0087),
        trackProducer = cms.InputTag("generalTracks"),
        transImpactParameterA_Barrel = cms.double(0.1),
        transImpactParameterA_Endcap = cms.double(0.1),
        transImpactParameterB_Barrel = cms.double(0.1),
        transImpactParameterB_Endcap = cms.double(0.1),
        useNumCrystals = cms.bool(True),
        vetoClustered = cms.bool(False)
    ),
    maxHoverEBarrel = cms.double(0.99),
    maxHoverEEndcap = cms.double(0.5),
    minR9Barrel = cms.double(10.0),
    minR9Endcap = cms.double(10.0),
    minSCEtBarrel = cms.double(5.0),
    minSCEtEndcap = cms.double(15.0),
    mipVariableSet = cms.PSet(
        ComponentName = cms.string('mipVariable'),
        HaloDiscThreshold = cms.double(70.0),
        ResidualWidth = cms.double(0.23),
        XRangeFit = cms.double(180.0),
        YRangeFit = cms.double(7.0),
        barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE")
    ),
    nTrackHollowConeBarrel = cms.double(999999999),
    nTrackHollowConeEndcap = cms.double(999999999),
    nTrackSolidConeBarrel = cms.double(999999999),
    nTrackSolidConeEndcap = cms.double(999999999),
    photonCoreProducer = cms.InputTag("islandPhotonCore"),
    photonEcalEnergyCorrFunction = cms.string('EcalClusterEnergyCorrectionObjectSpecific'),
    posCalcParameters = cms.PSet(
        LogWeighted = cms.bool(True),
        T0_barl = cms.double(7.4),
        T0_endc = cms.double(6.3),
        T0_endcPresh = cms.double(3.6),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    posCalc_logweight = cms.bool(True),
    posCalc_t0_barl = cms.double(7.7),
    posCalc_t0_endc = cms.double(6.3),
    posCalc_t0_endcPresh = cms.double(3.6),
    posCalc_w0 = cms.double(4.2),
    posCalc_x0 = cms.double(0.89),
    primaryVertexProducer = cms.InputTag("offlinePrimaryVerticesWithBS"),
    regressionWeightsFromDB = cms.bool(True),
    runMIPTagger = cms.bool(True),
    sigmaIetaIetaCutBarrel = cms.double(999999999),
    sigmaIetaIetaCutEndcap = cms.double(999999999),
    superClusterCrackEnergyCorrFunction = cms.string('EcalClusterCrackCorrection'),
    superClusterEnergyCorrFunction = cms.string('EcalClusterEnergyCorrection'),
    superClusterEnergyErrorFunction = cms.string('EcalClusterEnergyUncertainty'),
    trackPtSumHollowConeBarrel = cms.double(999999999),
    trackPtSumHollowConeEndcap = cms.double(999999999),
    trackPtSumSolidConeBarrel = cms.double(999999999),
    trackPtSumSolidConeEndcap = cms.double(999999999),
    usePrimaryVertex = cms.bool(True)
)


process.islandSuperClusters = cms.EDProducer("SuperClusterProducer",
    VerbosityLevel = cms.string('ERROR'),
    barrelClusterCollection = cms.string('islandBarrelBasicClusters'),
    barrelClusterProducer = cms.string('islandBasicClusters'),
    barrelEtaSearchRoad = cms.double(0.06),
    barrelPhiSearchRoad = cms.double(0.8),
    barrelSuperclusterCollection = cms.string('islandBarrelSuperClusters'),
    doBarrel = cms.bool(True),
    doEndcaps = cms.bool(True),
    endcapClusterCollection = cms.string('islandEndcapBasicClusters'),
    endcapClusterProducer = cms.string('islandBasicClusters'),
    endcapEtaSearchRoad = cms.double(0.14),
    endcapPhiSearchRoad = cms.double(0.6),
    endcapSuperclusterCollection = cms.string('islandEndcapSuperClusters'),
    posCalcParameters = cms.PSet(
        LogWeighted = cms.bool(True),
        T0_barl = cms.double(7.4),
        T0_endc = cms.double(3.1),
        T0_endcPresh = cms.double(1.2),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    seedTransverseEnergyThreshold = cms.double(1.0)
)


process.iterativeCone5JetExtender = cms.EDProducer("JetExtender",
    coneSize = cms.double(0.5),
    jet2TracksAtCALO = cms.InputTag("iterativeCone5JetTracksAssociatorAtCaloFace"),
    jet2TracksAtVX = cms.InputTag("iterativeCone5JetTracksAssociatorAtVertex"),
    jets = cms.InputTag("iterativeCone5CaloJets")
)


process.iterativeCone5JetTracksAssociatorAtCaloFace = cms.EDProducer("JetTracksAssociatorAtCaloFace",
    coneSize = cms.double(0.4),
    extrapolations = cms.InputTag("trackExtrapolator"),
    jets = cms.InputTag("iterativeCone5CaloJets"),
    trackQuality = cms.string('goodIterative'),
    tracks = cms.InputTag("generalTracks")
)


process.iterativeCone5JetTracksAssociatorAtVertex = cms.EDProducer("JetTracksAssociatorAtVertex",
    coneSize = cms.double(0.4),
    jets = cms.InputTag("iterativeCone5CaloJets"),
    pvSrc = cms.InputTag("offlinePrimaryVertices"),
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False)
)


process.jetBProbabilityBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('jetBProbabilityComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.jetCoreClusterSplitter = cms.EDProducer("JetCoreClusterSplitter",
    centralMIPCharge = cms.double(26000),
    chargeFractionMin = cms.double(2.0),
    chargePerUnit = cms.double(2000),
    cores = cms.InputTag("ak5CaloJets"),
    deltaRmax = cms.double(0.05),
    forceXError = cms.double(100),
    forceYError = cms.double(150),
    fractionalWidth = cms.double(0.4),
    pixelCPE = cms.string('PixelCPEGeneric'),
    pixelClusters = cms.InputTag("siPixelCluster"),
    ptMin = cms.double(200),
    verbose = cms.bool(False),
    vertices = cms.InputTag("offlinePrimaryVertices")
)


process.jetCoreRegionalStep = cms.EDProducer("TrackCutClassifier",
    beamspot = cms.InputTag("offlineBeamSpot"),
    ignoreVertices = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    mva = cms.PSet(
        dr_par = cms.PSet(
            d0err = cms.vdouble(0.003, 0.003, 0.003),
            d0err_par = cms.vdouble(0.001, 0.001, 0.001),
            drWPVerr_par = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
            dr_exp = cms.vint32(2147483647, 2147483647, 2147483647),
            dr_par1 = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
            dr_par2 = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38)
        ),
        dz_par = cms.PSet(
            dzWPVerr_par = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
            dz_exp = cms.vint32(2147483647, 2147483647, 2147483647),
            dz_par1 = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
            dz_par2 = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38)
        ),
        isHLT = cms.bool(False),
        maxChi2 = cms.vdouble(9999.0, 9999.0, 9999.0),
        maxChi2n = cms.vdouble(1.6, 1.0, 0.7),
        maxDr = cms.vdouble(0.3, 0.2, 0.1),
        maxDz = cms.vdouble(0.5, 0.35, 0.2),
        maxDzWrtBS = cms.vdouble(3.40282346639e+38, 24, 15),
        maxLostLayers = cms.vint32(4, 3, 2),
        maxRelPtErr = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
        min3DLayers = cms.vint32(1, 2, 3),
        minHits = cms.vint32(0, 0, 1),
        minHits4pass = cms.vint32(2147483647, 2147483647, 2147483647),
        minLayers = cms.vint32(3, 5, 5),
        minNVtxTrk = cms.int32(2),
        minNdof = cms.vdouble(-1, -1, -1),
        minPixelHits = cms.vint32(1, 1, 1)
    ),
    qualityCuts = cms.vdouble(-0.7, 0.1, 0.7),
    src = cms.InputTag("jetCoreRegionalStepTracks"),
    vertices = cms.InputTag("firstStepGoodPrimaryVertices")
)


process.jetCoreRegionalStepHitDoublets = cms.EDProducer("HitPairEDProducer",
    clusterCheck = cms.InputTag("trackerClusterCheck"),
    layerPairs = cms.vuint32(0),
    maxElement = cms.uint32(0),
    maxElementTotal = cms.uint32(12000000),
    mightGet = cms.optional.untracked.vstring,
    produceIntermediateHitDoublets = cms.bool(False),
    produceSeedingHitSets = cms.bool(True),
    seedingLayers = cms.InputTag("jetCoreRegionalStepSeedLayers"),
    trackingRegions = cms.InputTag("jetCoreRegionalStepTrackingRegions"),
    trackingRegionsSeedingLayers = cms.InputTag("")
)


process.jetCoreRegionalStepSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        hitErrorRPhi = cms.double(0.0027),
        hitErrorRZ = cms.double(0.006),
        useErrorsFromParam = cms.bool(True)
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        hitErrorRPhi = cms.double(0.0051),
        hitErrorRZ = cms.double(0.0036),
        useErrorsFromParam = cms.bool(True)
    ),
    TIB = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit")
    ),
    layerList = cms.vstring(
        'BPix1+BPix2', 
        'BPix1+BPix3', 
        'BPix2+BPix3', 
        'BPix1+FPix1_pos', 
        'BPix1+FPix1_neg', 
        'BPix2+FPix1_pos', 
        'BPix2+FPix1_neg', 
        'FPix1_pos+FPix2_pos', 
        'FPix1_neg+FPix2_neg', 
        'BPix3+TIB1', 
        'BPix3+TIB2'
    )
)


process.jetCoreRegionalStepSeeds = cms.EDProducer("SeedCreatorFromRegionConsecutiveHitsEDProducer",
    MinOneOverPtError = cms.double(1),
    OriginTransverseErrorMultiplier = cms.double(1),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedMomentumForBOFF = cms.double(5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    forceKinematicWithRegionDirection = cms.bool(True),
    magneticField = cms.string(''),
    mightGet = cms.optional.untracked.vstring,
    propagator = cms.string('PropagatorWithMaterial'),
    seedingHitSets = cms.InputTag("jetCoreRegionalStepHitDoublets")
)


process.jetCoreRegionalStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('jetCoreRegionalStepTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(10000),
    reverseTrajectories = cms.bool(False),
    src = cms.InputTag("jetCoreRegionalStepSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.jetCoreRegionalStepTrackingRegions = cms.EDProducer("TauRegionalPixelSeedTrackingRegionEDProducer",
    RegionPSet = cms.PSet(
        JetSrc = cms.InputTag("jetsForCoreTracking"),
        deltaEtaRegion = cms.double(0.2),
        deltaPhiRegion = cms.double(0.2),
        howToUseMeasurementTracker = cms.string('Never'),
        measurementTrackerName = cms.InputTag("MeasurementTrackerEvent"),
        originHalfLength = cms.double(0.2),
        originRadius = cms.double(0.2),
        ptMin = cms.double(10),
        searchOpt = cms.bool(False),
        vertexSrc = cms.InputTag("firstStepGoodPrimaryVertices")
    ),
    mightGet = cms.optional.untracked.vstring
)


process.jetCoreRegionalStepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('jetCoreRegionalStep'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("jetCoreRegionalStepTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.jetProbabilityBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('jetProbabilityComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.kinematicFilter = cms.EDProducer("PixelTrackFilterByKinematicsProducer",
    chi2 = cms.double(1000),
    mightGet = cms.optional.untracked.vstring,
    nSigmaInvPtTolerance = cms.double(0),
    nSigmaTipMaxTolerance = cms.double(0),
    ptMin = cms.double(0.7),
    tipMax = cms.double(1)
)


process.kt4JetExtender = cms.EDProducer("JetExtender",
    coneSize = cms.double(0.5),
    jet2TracksAtCALO = cms.InputTag("kt4JetTracksAssociatorAtCaloFace"),
    jet2TracksAtVX = cms.InputTag("kt4JetTracksAssociatorAtVertex"),
    jets = cms.InputTag("kt4CaloJets")
)


process.kt4JetTracksAssociatorAtCaloFace = cms.EDProducer("JetTracksAssociatorAtCaloFace",
    coneSize = cms.double(0.4),
    extrapolations = cms.InputTag("trackExtrapolator"),
    jets = cms.InputTag("kt4CaloJets"),
    trackQuality = cms.string('goodIterative'),
    tracks = cms.InputTag("generalTracks")
)


process.kt4JetTracksAssociatorAtVertex = cms.EDProducer("JetTracksAssociatorAtVertex",
    coneSize = cms.double(0.4),
    jets = cms.InputTag("kt4CaloJets"),
    pvSrc = cms.InputTag("offlinePrimaryVertices"),
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False)
)


process.kt4PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('Kt'),
    jetPtMin = cms.double(5.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    rParam = cms.double(0.4),
    src = cms.InputTag("particleFlow"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.kt4PFJetsForRho = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.005),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.5),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doFastJetNonUniform = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(True),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('Kt'),
    jetPtMin = cms.double(0.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    puCenters = cms.vdouble(
        -5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5
    ),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.4),
    src = cms.InputTag("particleFlow"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.kt6PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('Kt'),
    jetPtMin = cms.double(5.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    rParam = cms.double(0.6),
    src = cms.InputTag("particleFlow"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.l1EGammaEEProducer = cms.EDProducer("L1EGammaEEProducer",
    Multiclusters = cms.InputTag("hgcalBackEndLayer2Producer","HGCalBackendLayer2Processor3DClustering"),
    calibrationConfig = cms.PSet(
        calibrationFile = cms.FileInPath('L1Trigger/L1TCalorimeter/data/calib_ee_v1.json')
    )
)


process.l1NNTauProducer = cms.EDProducer("L1NNTauProducer",
    L1PFObjects = cms.InputTag("l1pfCandidates","PF"),
    NNFileName = cms.string('L1Trigger/Phase2L1ParticleFlow/data/tau_3layer.pb'),
    conesize = cms.double(0.4),
    maxtaus = cms.int32(5),
    mightGet = cms.optional.untracked.vstring,
    nparticles = cms.int32(10),
    seedpt = cms.double(20),
    tausize = cms.double(0.1)
)


process.l1NNTauProducerPuppi = cms.EDProducer("L1NNTauProducer",
    L1PFObjects = cms.InputTag("l1pfCandidates","Puppi"),
    NNFileName = cms.string('L1Trigger/Phase2L1ParticleFlow/data/tau_3layer_puppi.pb'),
    conesize = cms.double(0.4),
    maxtaus = cms.int32(5),
    mightGet = cms.optional.untracked.vstring,
    nparticles = cms.int32(10),
    seedpt = cms.double(20),
    tausize = cms.double(0.1)
)


process.l1PFMetCalo = cms.EDProducer("PFMETProducer",
    alias = cms.string('@module_label'),
    applyWeight = cms.bool(False),
    calculateSignificance = cms.bool(False),
    globalThreshold = cms.double(0),
    mightGet = cms.optional.untracked.vstring,
    parameters = cms.PSet(

    ),
    src = cms.InputTag("l1pfCandidates","Calo"),
    srcJetResPhi = cms.optional.string,
    srcJetResPt = cms.optional.string,
    srcJetSF = cms.optional.string,
    srcJets = cms.optional.InputTag,
    srcLeptons = cms.optional.VInputTag,
    srcRho = cms.optional.InputTag,
    srcWeights = cms.InputTag("")
)


process.l1PFMetPF = cms.EDProducer("PFMETProducer",
    alias = cms.string('@module_label'),
    applyWeight = cms.bool(False),
    calculateSignificance = cms.bool(False),
    globalThreshold = cms.double(0),
    mightGet = cms.optional.untracked.vstring,
    parameters = cms.PSet(

    ),
    src = cms.InputTag("l1pfCandidates","PF"),
    srcJetResPhi = cms.optional.string,
    srcJetResPt = cms.optional.string,
    srcJetSF = cms.optional.string,
    srcJets = cms.optional.InputTag,
    srcLeptons = cms.optional.VInputTag,
    srcRho = cms.optional.InputTag,
    srcWeights = cms.InputTag("")
)


process.l1PFMetPuppi = cms.EDProducer("PFMETProducer",
    alias = cms.string('@module_label'),
    applyWeight = cms.bool(False),
    calculateSignificance = cms.bool(False),
    globalThreshold = cms.double(0),
    mightGet = cms.optional.untracked.vstring,
    parameters = cms.PSet(

    ),
    src = cms.InputTag("l1pfCandidates","Puppi"),
    srcJetResPhi = cms.optional.string,
    srcJetResPt = cms.optional.string,
    srcJetSF = cms.optional.string,
    srcJets = cms.optional.InputTag,
    srcLeptons = cms.optional.VInputTag,
    srcRho = cms.optional.InputTag,
    srcWeights = cms.InputTag("")
)


process.l1pfCandidates = cms.EDProducer("L1TPFCandMultiMerger",
    labelsToMerge = cms.vstring(
        'Calo', 
        'TK', 
        'TKVtx', 
        'PF', 
        'Puppi'
    ),
    pfProducers = cms.VInputTag(cms.InputTag("l1pfProducerBarrel"), cms.InputTag("l1pfProducerHGCal"), cms.InputTag("l1pfProducerHGCalNoTK"), cms.InputTag("l1pfProducerHF"))
)


process.l1pfProducer = cms.EDProducer("L1TPFProducer",
    debug = cms.untracked.int32(0),
    emClusters = cms.VInputTag(cms.InputTag("pfClustersFromHGC3DClustersEM"), cms.InputTag("pfClustersFromL1EGClusters")),
    emPtCut = cms.double(0.5),
    etaCharged = cms.double(2.5),
    hadClusters = cms.VInputTag(cms.InputTag("pfClustersFromCombinedCalo","calibrated")),
    hadPtCut = cms.double(1.0),
    linking = cms.PSet(
        caloEmPtMinFrac = cms.double(0.5),
        caloReLink = cms.bool(False),
        caloReLinkDR = cms.double(0.3),
        caloReLinkThreshold = cms.double(0.5),
        ecalPriority = cms.bool(True),
        emCaloDR = cms.double(0.1),
        emCaloSubtractionPtSlope = cms.double(1.2),
        emCaloUseAlsoCaloSigma = cms.bool(True),
        maxInvisiblePt = cms.double(10.0),
        rescaleTracks = cms.bool(False),
        rescaleUnmatchedTrack = cms.bool(False),
        sumTkCaloErr2 = cms.bool(True),
        tightTrackMaxChi2 = cms.double(50),
        tightTrackMaxInvisiblePt = cms.double(20),
        tightTrackMinStubs = cms.uint32(6),
        trackCaloDR = cms.double(0.15),
        trackCaloLinkMetric = cms.string('bestByDRPt'),
        trackCaloNSigmaHigh = cms.double(1.0),
        trackCaloNSigmaLow = cms.double(2.0),
        trackEmDR = cms.double(0.04),
        trackEmMayUseCaloMomenta = cms.bool(True),
        trackEmUseAlsoTrackSigma = cms.bool(True),
        trackMuDR = cms.double(0.2),
        trackMuMatch = cms.string('boxBestByPtRatio'),
        useCaloTrkWeightedAverage = cms.bool(False),
        useTrackCaloSigma = cms.bool(True)
    ),
    muons = cms.InputTag("simGmtStage2Digis"),
    pfAlgo = cms.string('PFAlgo3'),
    puAlgo = cms.string('Puppi'),
    puppiDr = cms.double(0.3),
    puppiDrMin = cms.double(0.1),
    puppiEtaCuts = cms.vdouble(1.5, 2.5, 3.0, 5.5),
    puppiPtCuts = cms.vdouble(0.0, 3.0, 6.0, 8.0),
    puppiPtCutsPhotons = cms.vdouble(0.0, 3.0, 6.0, 8.0),
    puppiPtMax = cms.double(999),
    puppiUsingBareTracks = cms.bool(False),
    tkMuons = cms.InputTag("L1TkMuons"),
    tracks = cms.InputTag("pfTracksFromL1Tracks"),
    trkMaxChi2 = cms.double(15),
    trkMinStubs = cms.uint32(4),
    trkPtCut = cms.double(2.0),
    useStandaloneMuons = cms.bool(True),
    useTrackerMuons = cms.bool(False),
    vtxAdaptiveCut = cms.bool(True),
    vtxAlgo = cms.string('TP'),
    vtxRes = cms.double(0.333)
)


process.l1pfProducerBarrel = cms.EDProducer("L1TPFProducer",
    debug = cms.untracked.int32(0),
    emClusters = cms.VInputTag(cms.InputTag("pfClustersFromL1EGClusters")),
    emPtCut = cms.double(0.5),
    etaCharged = cms.double(2.5),
    hadClusters = cms.VInputTag(cms.InputTag("pfClustersFromCombinedCaloHCal","calibrated")),
    hadPtCut = cms.double(1.0),
    linking = cms.PSet(
        caloEmPtMinFrac = cms.double(0.5),
        caloReLink = cms.bool(False),
        caloReLinkDR = cms.double(0.3),
        caloReLinkThreshold = cms.double(0.5),
        ecalPriority = cms.bool(True),
        emCaloDR = cms.double(0.1),
        emCaloSubtractionPtSlope = cms.double(1.2),
        emCaloUseAlsoCaloSigma = cms.bool(True),
        maxInvisiblePt = cms.double(10.0),
        rescaleTracks = cms.bool(False),
        rescaleUnmatchedTrack = cms.bool(False),
        sumTkCaloErr2 = cms.bool(True),
        tightTrackMaxChi2 = cms.double(50),
        tightTrackMaxInvisiblePt = cms.double(20),
        tightTrackMinStubs = cms.uint32(6),
        trackCaloDR = cms.double(0.15),
        trackCaloLinkMetric = cms.string('bestByDRPt'),
        trackCaloNSigmaHigh = cms.double(1.0),
        trackCaloNSigmaLow = cms.double(2.0),
        trackEmDR = cms.double(0.04),
        trackEmMayUseCaloMomenta = cms.bool(True),
        trackEmUseAlsoTrackSigma = cms.bool(True),
        trackMuDR = cms.double(0.2),
        trackMuMatch = cms.string('boxBestByPtRatio'),
        useCaloTrkWeightedAverage = cms.bool(False),
        useTrackCaloSigma = cms.bool(True)
    ),
    muons = cms.InputTag("simGmtStage2Digis"),
    pfAlgo = cms.string('PFAlgo3'),
    puAlgo = cms.string('LinearizedPuppi'),
    puppiAlphaCrops = cms.vdouble(4),
    puppiAlphaCropsPhotons = cms.vdouble(4),
    puppiAlphaSlopes = cms.vdouble(0.7),
    puppiAlphaSlopesPhotons = cms.vdouble(0.7),
    puppiAlphaZeros = cms.vdouble(6.0),
    puppiAlphaZerosPhotons = cms.vdouble(6.0),
    puppiDr = cms.double(0.3),
    puppiDrMin = cms.double(0.07),
    puppiEtaCuts = cms.vdouble(1.6),
    puppiPriors = cms.vdouble(5.0),
    puppiPriorsPhotons = cms.vdouble(1.0),
    puppiPtCuts = cms.vdouble(1.0),
    puppiPtCutsPhotons = cms.vdouble(1.0),
    puppiPtMax = cms.double(50.0),
    puppiPtSlopes = cms.vdouble(0.3),
    puppiPtSlopesPhotons = cms.vdouble(0.3),
    puppiPtZeros = cms.vdouble(4.0),
    puppiPtZerosPhotons = cms.vdouble(2.5),
    puppiUsingBareTracks = cms.bool(True),
    regions = cms.VPSet(cms.PSet(
        etaBoundaries = cms.vdouble(-1.5, 1.5),
        etaExtra = cms.double(0.3),
        phiExtra = cms.double(0.0),
        phiSlices = cms.uint32(1)
    )),
    tkMuons = cms.InputTag("L1TkMuons"),
    trackRegionMode = cms.string('atCalo'),
    tracks = cms.InputTag("pfTracksFromL1TracksBarrel"),
    trkMaxChi2 = cms.double(15),
    trkMinStubs = cms.uint32(4),
    trkPtCut = cms.double(2.0),
    useRelativeRegionalCoordinates = cms.bool(False),
    useStandaloneMuons = cms.bool(True),
    useTrackerMuons = cms.bool(False),
    vtxAdaptiveCut = cms.bool(True),
    vtxAlgo = cms.string('external'),
    vtxCollection = cms.InputTag("L1TkPrimaryVertex"),
    vtxFormat = cms.string('TkPrimaryVertex'),
    vtxRes = cms.double(0.333)
)


process.l1pfProducerHF = cms.EDProducer("L1TPFProducer",
    debug = cms.untracked.int32(0),
    emClusters = cms.VInputTag(),
    emPtCut = cms.double(0.5),
    etaCharged = cms.double(2.5),
    hadClusters = cms.VInputTag(cms.InputTag("pfClustersFromCombinedCaloHF","calibrated")),
    hadPtCut = cms.double(15),
    linking = cms.PSet(
        caloEmPtMinFrac = cms.double(0.5),
        caloReLink = cms.bool(False),
        caloReLinkDR = cms.double(0.3),
        caloReLinkThreshold = cms.double(0.5),
        ecalPriority = cms.bool(True),
        emCaloDR = cms.double(0.1),
        emCaloSubtractionPtSlope = cms.double(1.2),
        emCaloUseAlsoCaloSigma = cms.bool(True),
        maxInvisiblePt = cms.double(10.0),
        rescaleTracks = cms.bool(False),
        rescaleUnmatchedTrack = cms.bool(False),
        sumTkCaloErr2 = cms.bool(True),
        tightTrackMaxChi2 = cms.double(50),
        tightTrackMaxInvisiblePt = cms.double(20),
        tightTrackMinStubs = cms.uint32(6),
        trackCaloDR = cms.double(0.15),
        trackCaloLinkMetric = cms.string('bestByDRPt'),
        trackCaloNSigmaHigh = cms.double(1.0),
        trackCaloNSigmaLow = cms.double(2.0),
        trackEmDR = cms.double(0.04),
        trackEmMayUseCaloMomenta = cms.bool(True),
        trackEmUseAlsoTrackSigma = cms.bool(True),
        trackMuDR = cms.double(0.2),
        trackMuMatch = cms.string('boxBestByPtRatio'),
        useCaloTrkWeightedAverage = cms.bool(False),
        useTrackCaloSigma = cms.bool(True)
    ),
    muons = cms.InputTag("simGmtStage2Digis"),
    pfAlgo = cms.string('PFAlgo3'),
    puAlgo = cms.string('LinearizedPuppi'),
    puppiAlphaCrops = cms.vdouble(4),
    puppiAlphaCropsPhotons = cms.vdouble(4),
    puppiAlphaSlopes = cms.vdouble(0.6),
    puppiAlphaSlopesPhotons = cms.vdouble(0.6),
    puppiAlphaZeros = cms.vdouble(9.0),
    puppiAlphaZerosPhotons = cms.vdouble(9.0),
    puppiDr = cms.double(0.3),
    puppiDrMin = cms.double(0.1),
    puppiEtaCuts = cms.vdouble(5.5),
    puppiPriors = cms.vdouble(6.0),
    puppiPriorsPhotons = cms.vdouble(6.0),
    puppiPtCuts = cms.vdouble(10.0),
    puppiPtCutsPhotons = cms.vdouble(10.0),
    puppiPtMax = cms.double(100.0),
    puppiPtSlopes = cms.vdouble(0.25),
    puppiPtSlopesPhotons = cms.vdouble(0.25),
    puppiPtZeros = cms.vdouble(14.0),
    puppiPtZerosPhotons = cms.vdouble(14.0),
    puppiUsingBareTracks = cms.bool(False),
    regions = cms.VPSet(
        cms.PSet(
            etaBoundaries = cms.vdouble(-5.5, -3),
            etaExtra = cms.double(0.0),
            phiExtra = cms.double(0.0),
            phiSlices = cms.uint32(1)
        ), 
        cms.PSet(
            etaBoundaries = cms.vdouble(3, 5.5),
            etaExtra = cms.double(0.0),
            phiExtra = cms.double(0.0),
            phiSlices = cms.uint32(1)
        )
    ),
    tkMuons = cms.InputTag("L1TkMuons"),
    trackRegionMode = cms.string('atCalo'),
    tracks = cms.InputTag(""),
    trkMaxChi2 = cms.double(15),
    trkMinStubs = cms.uint32(4),
    trkPtCut = cms.double(2.0),
    useRelativeRegionalCoordinates = cms.bool(False),
    useStandaloneMuons = cms.bool(True),
    useTrackerMuons = cms.bool(False),
    vtxAdaptiveCut = cms.bool(True),
    vtxAlgo = cms.string('external'),
    vtxCollection = cms.InputTag("L1TkPrimaryVertex"),
    vtxFormat = cms.string('TkPrimaryVertex'),
    vtxRes = cms.double(0.333)
)


process.l1pfProducerHGCal = cms.EDProducer("L1TPFProducer",
    debug = cms.untracked.int32(0),
    emClusters = cms.VInputTag(),
    emPtCut = cms.double(0.5),
    etaCharged = cms.double(2.5),
    hadClusters = cms.VInputTag(cms.InputTag("pfClustersFromHGC3DClusters")),
    hadPtCut = cms.double(1.0),
    linking = cms.PSet(
        caloEmPtMinFrac = cms.double(0.5),
        caloReLink = cms.bool(False),
        caloReLinkDR = cms.double(0.3),
        caloReLinkThreshold = cms.double(0.5),
        ecalPriority = cms.bool(False),
        emCaloDR = cms.double(0.1),
        emCaloSubtractionPtSlope = cms.double(1.2),
        emCaloUseAlsoCaloSigma = cms.bool(True),
        maxInvisiblePt = cms.double(10.0),
        rescaleTracks = cms.bool(False),
        rescaleUnmatchedTrack = cms.bool(False),
        sumTkCaloErr2 = cms.bool(True),
        tightTrackMaxChi2 = cms.double(50),
        tightTrackMaxInvisiblePt = cms.double(20),
        tightTrackMinStubs = cms.uint32(6),
        trackCaloDR = cms.double(0.1),
        trackCaloLinkMetric = cms.string('bestByDRPt'),
        trackCaloNSigmaHigh = cms.double(1.0),
        trackCaloNSigmaLow = cms.double(2.0),
        trackEmDR = cms.double(0.04),
        trackEmMayUseCaloMomenta = cms.bool(True),
        trackEmUseAlsoTrackSigma = cms.bool(True),
        trackMuDR = cms.double(0.2),
        trackMuMatch = cms.string('boxBestByPtRatio'),
        useCaloTrkWeightedAverage = cms.bool(False),
        useTrackCaloSigma = cms.bool(True)
    ),
    muons = cms.InputTag("simGmtStage2Digis"),
    pfAlgo = cms.string('PFAlgo2HGC'),
    puAlgo = cms.string('LinearizedPuppi'),
    puppiAlphaCrops = cms.vdouble(3, 3, 4),
    puppiAlphaCropsPhotons = cms.vdouble(3, 3, 4),
    puppiAlphaSlopes = cms.vdouble(1.5, 1.5, 2.2),
    puppiAlphaSlopesPhotons = cms.vdouble(1.5, 1.5, 2.2),
    puppiAlphaZeros = cms.vdouble(6.0, 6.0, 9.0),
    puppiAlphaZerosPhotons = cms.vdouble(6.0, 6.0, 9.0),
    puppiDr = cms.double(0.3),
    puppiDrMin = cms.double(0.04),
    puppiEtaCuts = cms.vdouble(2.0, 2.4, 3.1),
    puppiPriors = cms.vdouble(5.0, 5.0, 7.0),
    puppiPriorsPhotons = cms.vdouble(1.5, 1.5, 5.0),
    puppiPtCuts = cms.vdouble(1.0, 2.0, 4.0),
    puppiPtCutsPhotons = cms.vdouble(1.0, 2.0, 4.0),
    puppiPtMax = cms.double(50.0),
    puppiPtSlopes = cms.vdouble(0.3, 0.3, 0.3),
    puppiPtSlopesPhotons = cms.vdouble(0.4, 0.4, 0.4),
    puppiPtZeros = cms.vdouble(5.0, 7.0, 9.0),
    puppiPtZerosPhotons = cms.vdouble(3.0, 4.0, 5.0),
    puppiUsingBareTracks = cms.bool(True),
    regions = cms.VPSet(
        cms.PSet(
            etaBoundaries = cms.vdouble(-2.5, -1.5),
            etaExtra = cms.double(0.3),
            phiExtra = cms.double(0.0),
            phiSlices = cms.uint32(1)
        ), 
        cms.PSet(
            etaBoundaries = cms.vdouble(1.5, 2.5),
            etaExtra = cms.double(0.3),
            phiExtra = cms.double(0.0),
            phiSlices = cms.uint32(1)
        )
    ),
    tkMuons = cms.InputTag("L1TkMuons"),
    trackRegionMode = cms.string('atCalo'),
    tracks = cms.InputTag("pfTracksFromL1TracksHGCal"),
    trkMaxChi2 = cms.double(15),
    trkMinStubs = cms.uint32(4),
    trkPtCut = cms.double(2.0),
    useRelativeRegionalCoordinates = cms.bool(False),
    useStandaloneMuons = cms.bool(True),
    useTrackerMuons = cms.bool(False),
    vtxAdaptiveCut = cms.bool(True),
    vtxAlgo = cms.string('external'),
    vtxCollection = cms.InputTag("L1TkPrimaryVertex"),
    vtxFormat = cms.string('TkPrimaryVertex'),
    vtxRes = cms.double(0.333)
)


process.l1pfProducerHGCalNoTK = cms.EDProducer("L1TPFProducer",
    debug = cms.untracked.int32(0),
    emClusters = cms.VInputTag(),
    emPtCut = cms.double(0.5),
    etaCharged = cms.double(2.5),
    hadClusters = cms.VInputTag(cms.InputTag("pfClustersFromHGC3DClusters")),
    hadPtCut = cms.double(1.0),
    linking = cms.PSet(
        caloEmPtMinFrac = cms.double(0.5),
        caloReLink = cms.bool(False),
        caloReLinkDR = cms.double(0.3),
        caloReLinkThreshold = cms.double(0.5),
        ecalPriority = cms.bool(False),
        emCaloDR = cms.double(0.1),
        emCaloSubtractionPtSlope = cms.double(1.2),
        emCaloUseAlsoCaloSigma = cms.bool(True),
        maxInvisiblePt = cms.double(10.0),
        rescaleTracks = cms.bool(False),
        rescaleUnmatchedTrack = cms.bool(False),
        sumTkCaloErr2 = cms.bool(True),
        tightTrackMaxChi2 = cms.double(50),
        tightTrackMaxInvisiblePt = cms.double(20),
        tightTrackMinStubs = cms.uint32(6),
        trackCaloDR = cms.double(0.1),
        trackCaloLinkMetric = cms.string('bestByDRPt'),
        trackCaloNSigmaHigh = cms.double(1.0),
        trackCaloNSigmaLow = cms.double(2.0),
        trackEmDR = cms.double(0.04),
        trackEmMayUseCaloMomenta = cms.bool(True),
        trackEmUseAlsoTrackSigma = cms.bool(True),
        trackMuDR = cms.double(0.2),
        trackMuMatch = cms.string('boxBestByPtRatio'),
        useCaloTrkWeightedAverage = cms.bool(False),
        useTrackCaloSigma = cms.bool(True)
    ),
    muons = cms.InputTag("simGmtStage2Digis"),
    pfAlgo = cms.string('PFAlgo2HGC'),
    puAlgo = cms.string('LinearizedPuppi'),
    puppiAlphaCrops = cms.vdouble(3, 3, 4),
    puppiAlphaCropsPhotons = cms.vdouble(3, 3, 4),
    puppiAlphaSlopes = cms.vdouble(1.5, 1.5, 2.2),
    puppiAlphaSlopesPhotons = cms.vdouble(1.5, 1.5, 2.2),
    puppiAlphaZeros = cms.vdouble(6.0, 6.0, 9.0),
    puppiAlphaZerosPhotons = cms.vdouble(6.0, 6.0, 9.0),
    puppiDr = cms.double(0.3),
    puppiDrMin = cms.double(0.04),
    puppiEtaCuts = cms.vdouble(2.0, 2.4, 3.1),
    puppiPriors = cms.vdouble(5.0, 5.0, 7.0),
    puppiPriorsPhotons = cms.vdouble(1.5, 1.5, 5.0),
    puppiPtCuts = cms.vdouble(1.0, 2.0, 4.0),
    puppiPtCutsPhotons = cms.vdouble(1.0, 2.0, 4.0),
    puppiPtMax = cms.double(50.0),
    puppiPtSlopes = cms.vdouble(0.3, 0.3, 0.3),
    puppiPtSlopesPhotons = cms.vdouble(0.4, 0.4, 0.4),
    puppiPtZeros = cms.vdouble(5.0, 7.0, 9.0),
    puppiPtZerosPhotons = cms.vdouble(3.0, 4.0, 5.0),
    puppiUsingBareTracks = cms.bool(True),
    regions = cms.VPSet(
        cms.PSet(
            etaBoundaries = cms.vdouble(-3, -2.5),
            etaExtra = cms.double(0.3),
            phiExtra = cms.double(0.0),
            phiSlices = cms.uint32(1)
        ), 
        cms.PSet(
            etaBoundaries = cms.vdouble(2.5, 3),
            etaExtra = cms.double(0.3),
            phiExtra = cms.double(0.0),
            phiSlices = cms.uint32(1)
        )
    ),
    tkMuons = cms.InputTag("L1TkMuons"),
    trackRegionMode = cms.string('atCalo'),
    tracks = cms.InputTag("pfTracksFromL1TracksHGCal"),
    trkMaxChi2 = cms.double(15),
    trkMinStubs = cms.uint32(4),
    trkPtCut = cms.double(2.0),
    useRelativeRegionalCoordinates = cms.bool(False),
    useStandaloneMuons = cms.bool(True),
    useTrackerMuons = cms.bool(False),
    vtxAdaptiveCut = cms.bool(True),
    vtxAlgo = cms.string('external'),
    vtxCollection = cms.InputTag("L1TkPrimaryVertex"),
    vtxFormat = cms.string('TkPrimaryVertex'),
    vtxRes = cms.double(0.333)
)


process.l1pfProducerTSA = cms.EDProducer("L1TPFProducer",
    debug = cms.untracked.int32(0),
    emClusters = cms.VInputTag(cms.InputTag("pfClustersFromL1EGClusters")),
    emPtCut = cms.double(0.5),
    etaCharged = cms.double(2.5),
    hadClusters = cms.VInputTag(cms.InputTag("pfClustersFromCombinedCaloHCal","calibrated")),
    hadPtCut = cms.double(1.0),
    linking = cms.PSet(
        caloEmPtMinFrac = cms.double(0.5),
        caloReLink = cms.bool(False),
        caloReLinkDR = cms.double(0.3),
        caloReLinkThreshold = cms.double(0.5),
        ecalPriority = cms.bool(True),
        emCaloDR = cms.double(0.1),
        emCaloSubtractionPtSlope = cms.double(1.2),
        emCaloUseAlsoCaloSigma = cms.bool(True),
        maxInvisiblePt = cms.double(10.0),
        rescaleTracks = cms.bool(False),
        rescaleUnmatchedTrack = cms.bool(False),
        sumTkCaloErr2 = cms.bool(True),
        tightTrackMaxChi2 = cms.double(50),
        tightTrackMaxInvisiblePt = cms.double(20),
        tightTrackMinStubs = cms.uint32(6),
        trackCaloDR = cms.double(0.15),
        trackCaloLinkMetric = cms.string('bestByDRPt'),
        trackCaloNSigmaHigh = cms.double(1.0),
        trackCaloNSigmaLow = cms.double(2.0),
        trackEmDR = cms.double(0.04),
        trackEmMayUseCaloMomenta = cms.bool(True),
        trackEmUseAlsoTrackSigma = cms.bool(True),
        trackMuDR = cms.double(0.2),
        trackMuMatch = cms.string('boxBestByPtRatio'),
        useCaloTrkWeightedAverage = cms.bool(False),
        useTrackCaloSigma = cms.bool(True)
    ),
    muons = cms.InputTag("simGmtStage2Digis"),
    pfAlgo = cms.string('PFAlgo3'),
    puAlgo = cms.string('LinearizedPuppi'),
    puppiAlphaCrops = cms.vdouble(4),
    puppiAlphaCropsPhotons = cms.vdouble(4),
    puppiAlphaSlopes = cms.vdouble(0.7),
    puppiAlphaSlopesPhotons = cms.vdouble(0.7),
    puppiAlphaZeros = cms.vdouble(6.0),
    puppiAlphaZerosPhotons = cms.vdouble(6.0),
    puppiDr = cms.double(0.3),
    puppiDrMin = cms.double(0.07),
    puppiEtaCuts = cms.vdouble(1.6),
    puppiPriors = cms.vdouble(5.0),
    puppiPriorsPhotons = cms.vdouble(1.0),
    puppiPtCuts = cms.vdouble(1.0),
    puppiPtCutsPhotons = cms.vdouble(1.0),
    puppiPtMax = cms.double(50.0),
    puppiPtSlopes = cms.vdouble(0.3),
    puppiPtSlopesPhotons = cms.vdouble(0.3),
    puppiPtZeros = cms.vdouble(4.0),
    puppiPtZerosPhotons = cms.vdouble(2.5),
    puppiUsingBareTracks = cms.bool(True),
    regions = cms.VPSet(cms.PSet(
        etaBoundaries = cms.vdouble(-3, 3),
        etaExtra = cms.double(0.0),
        phiExtra = cms.double(0.0),
        phiSlices = cms.uint32(18)
    )),
    tkMuons = cms.InputTag("L1TkMuons"),
    trackRegionMode = cms.string('atVertex'),
    tracks = cms.InputTag("pfTracksFromL1TracksBarrel"),
    trkMaxChi2 = cms.double(15),
    trkMinStubs = cms.uint32(4),
    trkPtCut = cms.double(2.0),
    useRelativeRegionalCoordinates = cms.bool(False),
    useStandaloneMuons = cms.bool(True),
    useTrackerMuons = cms.bool(False),
    vtxAdaptiveCut = cms.bool(True),
    vtxAlgo = cms.string('external'),
    vtxCollection = cms.InputTag("L1TkPrimaryVertex"),
    vtxFormat = cms.string('TkPrimaryVertex'),
    vtxRes = cms.double(0.333)
)


process.logErrorHarvester = cms.EDProducer("LogErrorHarvester",
    includeModules = cms.untracked.vstring( (
        'filteredLayerClustersHAD', 
        'siPixelClusters', 
        'gedElPFIsoDepositCharged', 
        'ecalMultiFitUncalibRecHit', 
        'duplicateDisplacedTrackClassifier', 
        'dt1DRecHits', 
        'correctedHybridSuperClusters', 
        'pfGhostTrackVertexTagInfos', 
        'particleFlowSuperClusterECAL', 
        'ticlTrackstersHAD', 
        'uncleanedOnlyAllConversions', 
        'tripletElectronHitDoublets', 
        'convStepTracks', 
        'duplicateTrackClassifier', 
        'caloMetM', 
        'inclusiveCandidateSecondaryVerticesCvsL', 
        'ak4TrackJets', 
        'zdcreco', 
        'offlinePrimaryVertices4D', 
        'lowPtTripletStepSeeds', 
        'ticlTrackstersEM', 
        'siPixelClustersPreSplitting', 
        'trackRefsForJetsBeforeSorting4D', 
        'trackRefsForJetsBeforeSorting', 
        'ootPhotonsTmp', 
        'muonEcalDetIds', 
        'tripletElectronSeeds', 
        'interestingGedEleIsoDetIdEB', 
        'HGCalRecHit', 
        'fixedGridRhoFastjetAll', 
        'pfAllNeutralHadrons', 
        'gedGsfElectrons', 
        'quickTrackAssociatorByHits', 
        'interestingEcalDetIdEBU', 
        'ticlMultiClustersFromTrackstersEM', 
        'cosmicDCTracks', 
        'filteredLayerClustersTrkEM', 
        'interestingEcalDetIdPFEE', 
        'interestingEcalDetIdPFEB', 
        'conversionStepTracks', 
        'hpsPFTauProducer', 
        'interestingEcalDetIdPFES', 
        'gedElPFIsoValueNeutral03', 
        'lowPtGsfElectronSeeds', 
        'muPFSumDRIsoValueGammaHighThreshold03', 
        'muPFSumDRIsoValueGammaHighThreshold04', 
        'lowPtGsfElePfGsfTracks', 
        'hpsPFTauDiscriminationByDecayModeFinding', 
        'lowPtQuadStepTrackingRegions', 
        'ootPhotonEcalPFClusterIsolationProducer', 
        'muPFMeanDRIsoValueCharged04', 
        'hpsPFTauProducerSansRefs', 
        'lowPtGsfEleGsfTracks', 
        'detachedQuadStepTracks', 
        'muPFMeanDRIsoValueNeutralHighThreshold03', 
        'ak4JetTracksAssociatorAtVertexPF', 
        'muPFMeanDRIsoValueNeutralHighThreshold04', 
        'ticlMultiClustersFromTrackstersMerge', 
        'electronCkfTrackCandidates', 
        'uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower', 
        'BeamHaloSummary', 
        'ak4JetExtender', 
        'particleFlowEGamma', 
        'particleFlowDisplacedVertexCandidate', 
        'puppiNoLep', 
        'uncleanedOnlyInOutOutInConversionTrackMerger', 
        'ckfOutInTracksFromConversions', 
        'gedElPFIsoDepositChargedAll', 
        'pfDeepCMVATagInfos', 
        'ecalDrivenGsfElectronsFromMultiCl', 
        'trackWithVertexRefSelectorBeforeSorting4D', 
        'offlinePrimaryVertices4DnoPIDWithBS', 
        'ak4JetID', 
        'JPTeidTight', 
        'ak8PFJetsPuppi', 
        'detachedQuadStepSeedLayers', 
        'lowPtQuadStepSelector', 
        'muidTMLastStationAngTight', 
        'muonSeededTracksOutInDisplacedClassifier', 
        'interestingEcalDetIdEE', 
        'generalTracks', 
        'lowPtGsfElectrons', 
        'convStepSelector', 
        'vertexMerger', 
        'muonShowerInformation', 
        'globalMuons', 
        'trackRefsForJets', 
        'dedxTruncated40', 
        'ak4JetTracksAssociatorAtVertex', 
        'ctppsLocalTrackLiteProducer', 
        'highPtTripletStepTrackCandidates', 
        'bunchSpacingProducer', 
        'pfTICL', 
        'pfNoPileUpCandidates', 
        'siPixelClusterShapeCache', 
        'lowPtQuadStepSeeds', 
        'hpsPFTauBasicDiscriminators', 
        'mtdClusters', 
        'uncleanedOnlyCorrectedHybridSuperClusters', 
        'hfprereco', 
        'pfV0', 
        'lowPtQuadStepClusters', 
        'hpsPFTauDiscriminationByMediumElectronRejection', 
        'hpsPFTauDiscriminationByMuonRejection3', 
        'initialStepHitDoublets', 
        'gedGsfElectronCores', 
        'interestingOotEgammaIsoESDetId', 
        'pfAllPhotons', 
        'muonSeededTracksInOutSelector', 
        'particleBasedIsolationTmp', 
        'lowPtGsfElePfTracks', 
        'pixelPairStepClusters', 
        'ecalTPSkim', 
        'hpsPFTauDiscriminationByIsolationMVArun2v1DBnewDMwLT', 
        'lowPtTripletStepTrackingRegions', 
        'cosmicMuons1Leg', 
        'unsortedOfflinePrimaryVertices4DnoPID', 
        'siPixelRecHitsPreSplitting', 
        'ticlTrackstersTrk', 
        'interestingOotGamIsoDetIdEE', 
        'me0Segments', 
        'pixelPairStepSeedClusterMask', 
        'particleFlowRecHitHBHE', 
        'conversionTrackCandidates', 
        'lowPtTripletStepHitTriplets', 
        'hpsPFTauDiscriminationByIsolationMVArun2v1DBdR03oldDMwLT', 
        'dt4DSegments', 
        'ckfInOutTracksFromConversions', 
        'ancientMuonSeed', 
        'initialStepSelector', 
        'offlinePrimaryVertices4DWithBS', 
        'detachedQuadStepTrackingRegions', 
        'earlyMuons', 
        'candidateVertexMerger', 
        'tripletElectronHitTriplets', 
        'eidLoose', 
        'ak4PFJetsCHS', 
        'muonSeededTrackCandidatesOutIn', 
        'siPixelRecHits', 
        'ticlMultiClustersFromTrackstersHAD', 
        'ak4PFL1FastjetCorrector', 
        'detachedQuadStepSeeds', 
        'softPFElectronBJetTags', 
        'electronGsfTracks', 
        'caloMetBEFO', 
        'multi5x5BasicClustersUncleaned', 
        'gedElPFIsoValueGamma03', 
        'pfTrack', 
        'particleFlow', 
        'hgcalLayerClusters', 
        'muPFIsoDepositCharged', 
        'ak4PFL1FastL2L3Corrector', 
        'muidTMOneStationTight', 
        'conversionStepConversionTrackProducer', 
        'allConversions', 
        'initialStepSeedClusterMask', 
        'particleFlowBadHcalPseudoCluster', 
        'reducedEcalRecHitsEE', 
        'ak8PFJetsPuppiConstituents', 
        'gsfConversionTrackProducer', 
        'reducedEcalRecHitsEB', 
        'uncleanedOnlyGsfElectrons', 
        'uncleanedOnlyGeneralConversionTrackProducer', 
        'softPFMuonBJetTags', 
        'pfJetProbabilityBJetTags', 
        'eidTight', 
        'hgcalMultiClusters', 
        'lowPtTripletStepTrackCandidates', 
        'hpsPFTauDiscriminationByIsolationMVArun2v1DBoldDMwLTraw', 
        'totemRPClusterProducer', 
        'ctppsPixelClusters', 
        'candidateVertexArbitrator', 
        'muonSeededTracksOutInSelector', 
        'ak8PFJetsPuppiSoftDropMass', 
        'displacedStandAloneMuons', 
        'muPFMeanDRIsoValueGammaHighThreshold04', 
        'gedPhotonsTmp', 
        'tripletElectronSeedLayers', 
        'ecalCompactTrigPrim', 
        'fixedGridRhoFastjetCentralCalo', 
        'particleFlowClusterHBHE', 
        'clusterSummaryProducer', 
        'pfDisplacedTrackerVertex', 
        'firstStepPrimaryVertices', 
        'pfSimpleInclusiveSecondaryVertexHighEffBJetTags', 
        'gsfTrackTimeValueMapProducer', 
        'hpsPFTauDiscriminationByIsolationMVArun2v1DBoldDMwLT', 
        'muidTM2DCompatibilityLoose', 
        'inclusiveCandidateSecondaryVertices', 
        'egmGedGsfElectronPFPileUpIsolation', 
        'dt1DCosmicRecHits', 
        'unsortedOfflinePrimaryVertices', 
        'inOutConversionTrackProducer', 
        'inclusiveVertexFinder', 
        'pixelPairStepSeeds', 
        'interestingEcalDetIdRefinedES', 
        'ootPhotons', 
        'pfSecondaryVertexTagInfos', 
        'lowPtGsfEleCkfTrackCandidates', 
        'ak4PFL2RelativeCorrector', 
        'ak4PFJetTracksAssociatorAtVertex', 
        'photonIDValueMaps', 
        'softPFElectronsTagInfos', 
        'particleFlowBlock', 
        'muPFSumDRIsoValueGamma03', 
        'ak4PFL3AbsoluteCorrector', 
        'muidGMTkKinkTight', 
        'uncleanedOnlyGeneralInOutOutInConversionTrackMerger', 
        'uncleanedOnlyGsfElectronCores', 
        'trackWithVertexRefSelectorBeforeSorting', 
        'muidTMLastStationOptimizedLowPtTight', 
        'hpsPFTauDiscriminationByLooseElectronRejection', 
        'pfPileUpIso', 
        'muons1stStep', 
        'CosmicMuonSeed', 
        'hpsPFTauSecondaryVertexProducer', 
        'ecalBarrelClusterFastTimer', 
        'muIsoDepositJets', 
        'muPFMeanDRIsoValueGammaHighThreshold03', 
        'ctppsProtons', 
        'lowPtGsfElectronSuperClusters', 
        'pfImpactParameterTagInfos', 
        'muIsoDepositTk', 
        'ticlMultiClustersFromTrackstersTrk', 
        'cosmicDCSeeds', 
        'generalInOutOutInConversionTrackMerger', 
        'tevMuons', 
        'ak4JetTracksAssociatorAtCaloFace', 
        'rpcRecHits', 
        'interestingEcalDetIdRefinedEB', 
        'pfInclusiveSecondaryVertexFinderCvsLTagInfos', 
        'initialStepSeedLayers', 
        'muPFIsoDepositGamma', 
        'interestingGamIsoDetIdEE', 
        'ecalRecHit', 
        'ecalDrivenElectronSeedsFromMultiCl', 
        'initialStepHitQuadruplets', 
        'multi5x5SuperClustersWithPreshower', 
        'dedxPixelHarmonic2', 
        'lowPtQuadStepSeedLayers', 
        'hpsPFTauDiscriminationByTightElectronRejection', 
        'pixelPairStepTrackCandidates', 
        'fixedGridRhoFastjetCentral', 
        'particleFlowRecHitPS', 
        'interestingEcalDetIdOOTPFEB', 
        'ootPhotonCore', 
        'pfInclusiveSecondaryVertexFinderTagInfos', 
        'mtdRecHits', 
        'pfAllChargedHadrons', 
        'ak4CaloJets', 
        'pixelPairStepSelector', 
        'lowPtQuadStepHitQuadruplets', 
        'trackRefsForJetsBeforeSorting4DnoPID', 
        'highPtTripletStepSeedClusterMask', 
        'muonSeededSeedsInOut', 
        'ak4PFJetsLegacyHPSPiZeros', 
        'pfNoPileUpIso', 
        'caloTowerForTrk', 
        'muPFSumDRIsoValueNeutralHighThreshold04', 
        'hybridSuperClusters', 
        'cleanedHybridSuperClusters', 
        'interestingTrackEcalDetIds', 
        'ak4JetTracksAssociatorAtVertexJPT', 
        'pfPileUpAllChargedParticles', 
        'muPFIsoValueGamma04', 
        'muidAllArbitrated', 
        'pfMetPuppi', 
        'muPFIsoValueChargedAll04', 
        'muPFIsoValueChargedAll03', 
        'standAloneMuons', 
        'interestingEcalDetIdOOTPFES', 
        'eidRobustHighEnergy', 
        'refittedStandAloneMuons', 
        'particleFlowForChargedMET', 
        'cosmicsVetoTracksRaw', 
        'highPtTripletStepSeeds', 
        'uncleanedOnlyConversionTrackCandidates', 
        'pixelPairStepHitDoublets', 
        'trackExtenderWithMTD', 
        'hpsPFTauDiscriminationByDecayModeFindingNewDMs', 
        'cscSegments', 
        'muPFIsoDepositNeutral', 
        'ak4PFJets', 
        'displacedGlobalMuons', 
        'dedxHitInfo', 
        'selectDigi', 
        'electronMergedSeeds', 
        'hfRecoEcalCandidate', 
        'egmElectronIsolationCITK', 
        'highPtTripletStepSelector', 
        'interestingEcalDetIdOOTPFEE', 
        'uncleanedOnlyElectronGsfTracks', 
        'preDuplicateMergingDisplacedTracks', 
        'eidRobustTight', 
        'totemRPUVPatternFinder', 
        'inclusiveSecondaryVertices', 
        'muPFSumDRIsoValueNeutral04', 
        'gsfGeneralInOutOutInConversionTrackMerger', 
        'interestingGedEgammaIsoHCALDetId', 
        'simPFProducer', 
        'hgcalTrackCollection', 
        'MeasurementTrackerEventPreSplitting', 
        'muPFSumDRIsoValueNeutral03', 
        'highPtTripletStepTracks', 
        'mergedDuplicateDisplacedTracks', 
        'gedGsfElectronValueMapsTmp', 
        'gsfTracksOpenConversionTrackProducer', 
        'horeco', 
        'multi5x5SuperClustersCleaned', 
        'particleFlowPtrs', 
        'pfDeepCMVAJetTags', 
        'ticlSeedingTrk', 
        'lowPtTripletStepClusters', 
        'duplicateDisplacedTrackCandidates', 
        'pfChMet', 
        'dedxHarmonic2', 
        'candidateVertexMergerCvsL', 
        'recoTauPileUpVertices', 
        'ak4JetTracksAssociatorExplicit', 
        'interestingOotGamIsoDetIdEB', 
        'lowPtTripletStepTracks', 
        'photonHcalPFClusterIsolationProducer', 
        'uncleanedOnlyInOutConversionTrackProducer', 
        'muPFMeanDRIsoValueCharged03', 
        'interestingEcalDetIdEB', 
        'hpsPFTauDiscriminationByMVA6rawElectronRejection', 
        'ctppsDiamondRecHits', 
        'cosmicMuons', 
        'ecalDetIdToBeRecovered', 
        'gedElPFIsoValueCharged03', 
        'lowPtQuadStepHitDoublets', 
        'gemRecHits', 
        'totemTimingLocalTracks', 
        'interestingGedEgammaIsoESDetId', 
        'ak4PFCHSL1FastL2L3Corrector', 
        'muonMETValueMapProducer', 
        'hfEMClusters', 
        'particleFlowClusterHO', 
        'muidTMOneStationLoose', 
        'mergedDuplicateTracks', 
        'muonsFromCosmics', 
        'muPFSumDRIsoValueChargedAll03', 
        'particleFlowClusterHF', 
        'muPFSumDRIsoValueChargedAll04', 
        'hpsPFTauDiscriminationByIsolationMVArun2v1DBdR03oldDMwLTraw', 
        'towerMaker', 
        'egmElectronIsolationPileUpCITK', 
        'recoTauAK4PFJets08Region', 
        'particleFlowRecHitECAL', 
        'softPFMuonsTagInfos', 
        'trackerClusterCheck', 
        'trackExtrapolator', 
        'muPFSumDRIsoValueGamma04', 
        'particleFlowClusterECALUncorrected', 
        'conversions', 
        'gedPhotons', 
        'particleFlowClusterECAL', 
        'particleFlowRecHitOOTECAL', 
        'photonEcalPFClusterIsolationProducer', 
        'preDuplicateMergingGeneralTracks', 
        'HcalHaloData', 
        'photonConvTrajSeedFromSingleLeg', 
        'pixelPairStepSeedLayers', 
        'muPFSumDRIsoValueNeutralHighThreshold03', 
        'particleFlowRecHitHO', 
        'pfAllChargedParticles', 
        'particleFlowDisplacedVertex', 
        'particleFlowRecHitHF', 
        'highPtTripletStepClusters', 
        'filteredLayerClustersEM', 
        'convLayerPairs', 
        'newCombinedSeeds', 
        'particleFlowClusterOOTECAL', 
        'particleFlowClusterHGCalFromMultiCl', 
        'hpsPFTauTransverseImpactParameters', 
        'inclusiveCandidateVertexFinder', 
        'hpsPFTauDiscriminationByIsolationMVArun2v1DBnewDMwLTraw', 
        'earlyGeneralTracks', 
        'inclusiveCandidateVertexFinderCvsL', 
        'muPFMeanDRIsoValueNeutral03', 
        'ak8PFJetsPuppiSoftDrop', 
        'pixelClusterTagInfos', 
        'ctppsPixelRecHits', 
        'gedElPFIsoValueChargedAll03', 
        'mvaElectrons', 
        'detachedQuadStepClusters', 
        'muidGMStaChiCompatibility', 
        'particleFlowTmp', 
        'muPFIsoValueNeutralHighThreshold04', 
        'ecalDetailedTimeRecHit', 
        'muPFIsoValueNeutralHighThreshold03', 
        'muPFIsoValueGammaHighThreshold03', 
        'pfCombinedMVAV2BJetTags', 
        'muonsFromCosmics1Leg', 
        'ak4PFCHSL2RelativeCorrector', 
        'ak4PFCHSL3AbsoluteCorrector', 
        'electronEcalPFClusterIsolationProducer', 
        'photons', 
        'ctppsDiamondLocalTracks', 
        'generalV0Candidates', 
        'pfCombinedInclusiveSecondaryVertexV2BJetTags', 
        'muPFIsoValueGammaHighThreshold04', 
        'particleFlowSuperClusterHGCal', 
        'earlyDisplacedMuons', 
        'hbhereco', 
        'interestingEcalDetIdRefinedEE', 
        'tripletElectronTrackingRegions', 
        'hpsPFTauDiscriminationByDecayModeFindingOldDMs', 
        'lowPtGsfElectronID', 
        'detachedQuadStep', 
        'particleFlowTimeAssignerECAL', 
        'ecalDrivenGsfElectronCoresFromMultiCl', 
        'tofPID4DnoPID', 
        'PhotonIDProd', 
        'ticlLayerTileProducer', 
        'gedElPFIsoValuePU03', 
        'interestingGedGamIsoDetIdEE', 
        'interestingGedGamIsoDetIdEB', 
        'fixedGridRhoAll', 
        'particleFlowClusterHGCal', 
        'unsortedOfflinePrimaryVertices4D', 
        'muons', 
        'lowPtTripletStepSelector', 
        'ticlTrackstersTrkEM', 
        'pfMet', 
        'muidTrackerMuonArbitrated', 
        'cosmicsVetoTrackCandidates', 
        'gemSegments', 
        'muPFSumDRIsoValuePU03', 
        'muPFSumDRIsoValuePU04', 
        'siPhase2Clusters', 
        'cosmicsVetoTracks', 
        'uncleanedOnlyPfTrack', 
        'muPFIsoDepositPU', 
        'pfPileUp', 
        'particleFlowClusterHCAL', 
        'particleFlowClusterPS', 
        'muidTMLastStationAngLoose', 
        'egmPhotonIsolationCITK', 
        'lowPtQuadStepTracks', 
        'particleFlowTmpPtrs', 
        'ecalDrivenGsfElectronCores', 
        'gedPhotonCore', 
        'particleFlowClusterOOTECALUncorrected', 
        'pfJetBProbabilityBJetTags', 
        'ecalPreshowerRecHit', 
        'reducedHcalRecHits', 
        'cosmicsVeto', 
        'highPtTripletStepTrackingRegions', 
        'ak4PFJetsPuppi', 
        'electronCkfTrackCandidatesFromMultiCl', 
        'hpsPFTauDiscriminationByMVA6ElectronRejection', 
        'trackTimeValueMapProducer', 
        'detachedQuadStepHitDoublets', 
        'pfAllNeutralHadronsAndPhotons', 
        'muidTMLastStationOptimizedLowPtLoose', 
        'muonSeededSeedsOutInDisplaced', 
        'uncleanedOnlyCkfOutInTracksFromConversions', 
        'ak4PFCHSL1FastjetCorrector', 
        'muidTMOneStationAngLoose', 
        'electronHcalPFClusterIsolationProducer', 
        'initialStepTracks', 
        'outInConversionTrackProducer', 
        'uncleanedOnlyGsfConversionTrackProducer', 
        'gedElPFIsoDepositPU', 
        'ctppsPixelLocalTracks', 
        'pfTrackCountingHighEffBJetTags', 
        'lowPtGsfElectronCores', 
        'pixelPairStepTrackingRegions', 
        'dt4DCosmicSegments', 
        'offlinePrimaryVerticesWithBS', 
        'csc2DRecHits', 
        'muPFIsoDepositChargedAll', 
        'uncleanedHybridSuperClusters', 
        'detachedQuadStepHitQuadruplets', 
        'multi5x5BasicClustersCleaned', 
        'puppi', 
        'ak4CaloJetsForTrk', 
        'hpsPFTauPrimaryVertexProducer', 
        'offlinePrimaryVertices4DnoPID', 
        'muidGMTkChiCompatibility', 
        'muidRPCMuLoose', 
        'CSCHaloData', 
        'candidateVertexArbitratorCvsL', 
        'particleBasedIsolation', 
        'pfCombinedCvsLJetTags', 
        'lowPtGsfElectronSeedValueMaps', 
        'firstStepPrimaryVerticesUnsorted', 
        'glbTrackQual', 
        'muonSeededSeedsOutIn', 
        'muidTMLastStationTight', 
        'caloMetBE', 
        'uncleanedOnlyPfTrackElec', 
        'pfCombinedCvsBJetTags', 
        'muonSeededTracksOutInDisplaced', 
        'caloMet', 
        'uncleanedOnlyElectronSeeds', 
        'muPFIsoValueNeutral04', 
        'muPFIsoValueNeutral03', 
        'lowPtTripletStepSeedLayers', 
        'hpsPFTauDiscriminationByDeadECALElectronRejection', 
        'ticlTrackstersMerge', 
        'hpsPFTauBasicDiscriminatorsdR03', 
        'displacedTracks', 
        'muonSeededTrackCandidatesInOut', 
        'GlobalHaloData', 
        'muonSeededTracksInOut', 
        'convTrackCandidates', 
        'muPFIsoValueCharged04', 
        'muPFIsoValueCharged03', 
        'muPFMeanDRIsoValueGamma03', 
        'particleFlowSuperClusterHGCalFromMultiCl', 
        'gedElPFIsoDepositNeutral', 
        'muPFMeanDRIsoValueGamma04', 
        'trackerDrivenElectronSeeds', 
        'highPtTripletStepHitDoublets', 
        'gedGsfElectronsTmp', 
        'muonSeededTracksOutIn', 
        'me0RecHits', 
        'displacedMuonSeeds', 
        'HGCalUncalibRecHit', 
        'fixedGridRhoFastjetCentralChargedPileUp', 
        'muidTMOneStationAngTight', 
        'pfConversions', 
        'photonCoreFromMultiCl', 
        'pfPileUpJME', 
        'correctedMulti5x5SuperClustersWithPreshower', 
        'eidRobustLoose', 
        'pfCombinedSecondaryVertexV2BJetTags', 
        'gsfTracksOpenConversions', 
        'hpsSelectionDiscriminator', 
        'muPFSumDRIsoValueCharged03', 
        'inOutOutInConversionTrackMerger', 
        'cosmicsVetoSeeds', 
        'multi5x5SuperClusters', 
        'goodOfflinePrimaryVertices', 
        'pfNoPileUp', 
        'duplicateTrackCandidates', 
        'pfDeepCSVTagInfos', 
        'uncleanedOnlyElectronCkfTrackCandidates', 
        'gedElPFIsoDepositGamma', 
        'pfGhostTrackBJetTags', 
        'MeasurementTrackerEvent', 
        'pfRecoTauTagInfoProducer', 
        'pixelPairStepTracks', 
        'trackVertexArbitrator', 
        'electronsWithPresel', 
        'pfDeepCSVJetTags', 
        'pfTrackElec', 
        'trackWithVertexRefSelector', 
        'highPtTripletStepSeedLayers', 
        'JetPlusTrackZSPCorJetAntiKt4', 
        'lowPtTripletStepHitDoublets', 
        'PhotonIDProdGED', 
        'lowPtGsfToTrackLinks', 
        'particleFlowTmpBarrel', 
        'totemTimingRecHits', 
        'initialStepTrackingRegions', 
        'ecalDrivenElectronSeeds', 
        'multi5x5SuperClustersUncleaned', 
        'highPtTripletStepHitTriplets', 
        'initialStepSeeds', 
        'photonCore', 
        'electronMergedSeedsFromMultiCl', 
        'interestingOotEgammaIsoHCALDetId', 
        'muPFMeanDRIsoValuePU03', 
        'muPFMeanDRIsoValuePU04', 
        'multi5x5PreshowerClusterShape', 
        'interestingGamIsoDetIdEB', 
        'uncleanedOnlyPfConversions', 
        'pfNoPileUpJME', 
        'ecalDrivenGsfElectrons', 
        'mtdTrackQualityMVA', 
        'muPFMeanDRIsoValueNeutral04', 
        'muidTM2DCompatibilityTight', 
        'fixedGridRhoFastjetAllCalo', 
        'muPFIsoValueGamma03', 
        'egmGedGsfElectronPFNoPileUpIsolation', 
        'fixedGridRhoFastjetCentralNeutral', 
        'uncleanedOnlyGsfGeneralInOutOutInConversionTrackMerger', 
        'electronGsfTracksFromMultiCl', 
        'EcalHaloData', 
        'tpClusterProducer', 
        'towerMakerWithHO', 
        'initialStepTrackCandidates', 
        'uncleanedOnlyMulti5x5SuperClustersWithPreshower', 
        'tofPID', 
        'muidGlobalMuonPromptTight', 
        'hfreco', 
        'pfSimpleSecondaryVertexHighEffBJetTags', 
        'uncleanedOnlyOutInConversionTrackProducer', 
        'photonsFromMultiCl', 
        'offlinePrimaryVertices', 
        'uncleanedOnlyCkfInOutTracksFromConversions', 
        'cosmicDCCkfTrackCandidates', 
        'ticlSeedingGlobal', 
        'mtdTrackingRecHits', 
        'ootPhotonHcalPFClusterIsolationProducer', 
        'particleFlowSuperClusterOOTECAL', 
        'chargedHadronPFTrackIsolation', 
        'totemRPLocalTrackFitter', 
        'fixedGridRhoFastjetAllTmp', 
        'interestingGedEleIsoDetIdEE', 
        'dedxPixelAndStripHarmonic2T085', 
        'generalConversionStepConversionTrackMerger', 
        'siPixelClusterShapeCachePreSplitting', 
        'generalConversionTrackProducer', 
        'filteredLayerClustersTrk', 
        'initialStepTrackRefsForJets', 
        'trackWithVertexRefSelectorBeforeSorting4DnoPID', 
        'convClusters', 
        'muIsoDepositCalByAssociatorTowers', 
        'detachedQuadStepTrackCandidates', 
        'totemRPRecHitProducer', 
        'detachedQuadStepSelector', 
        'particleFlowRecHitHGC', 
        'lowPtQuadStepTrackCandidates', 
        'muPFIsoValuePU04', 
        'muPFIsoValuePU03', 
        'muonSeededTrackCandidatesOutInDisplaced', 
        'ak4PFJetsRecoTauChargedHadrons', 
        'mtdUncalibratedRecHits', 
        'logErrorHarvester', 
        'pfChargeBJetTags', 
        'offlineBeamSpot', 
        'muidTMLastStationLoose', 
        'ticlMultiClustersFromTrackstersTrkEM', 
        'muPFSumDRIsoValueCharged04', 
        'muPFMeanDRIsoValueChargedAll04', 
        'combinatoricRecoTaus', 
        'muPFMeanDRIsoValueChargedAll03'
     ) )
)


process.lowPtGsfEleCkfTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('lowPtGsfEleTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('electronTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    reverseTrajectories = cms.bool(False),
    src = cms.InputTag("lowPtGsfElectronSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.lowPtGsfEleGsfTracks = cms.EDProducer("GsfTrackProducer",
    AlgorithmName = cms.string('gsf'),
    Fitter = cms.string('lowPtGsfEleFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('fwdGsfElectronPropagator'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(False),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    producer = cms.string(''),
    src = cms.InputTag("lowPtGsfEleCkfTrackCandidates"),
    useHitsSplitting = cms.bool(False)
)


process.lowPtGsfElePfGsfTracks = cms.EDProducer("PFElecTkProducer",
    AbsEtaBarrelEndcapsSeparation = cms.double(1.479),
    Fitter = cms.string('GsfElectronFittingSmoother'),
    GsfTrackModuleLabel = cms.InputTag("lowPtGsfEleGsfTracks"),
    MaxConvBremRecoPT = cms.double(49.0),
    MinDEtaGsfSC = cms.double(0.06),
    MinDPhiGsfSC = cms.double(0.15),
    MinSCEnergy = cms.double(4.0),
    ModeMomentum = cms.bool(True),
    PFConversions = cms.InputTag("pfConversions"),
    PFEcalClusters = cms.InputTag("particleFlowClusterECAL"),
    PFNuclear = cms.InputTag("pfDisplacedTrackerVertex"),
    PFRecTrackLabel = cms.InputTag("lowPtGsfElePfTracks"),
    PFV0 = cms.InputTag("pfV0"),
    PrimaryVertexLabel = cms.InputTag("offlinePrimaryVertices"),
    Propagator = cms.string('fwdElectronPropagator'),
    PtLowHighSeparation = cms.double(20),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajInEvents = cms.bool(False),
    applyAlsoGsfAngularCleaning = cms.bool(True),
    applyEGSelection = cms.bool(False),
    applyGsfTrackCleaning = cms.bool(False),
    debugGsfCleaning = cms.bool(False),
    maxDEtaGsfAngularCleaning = cms.double(0.05),
    maxDPhiBremTangGsfAngularCleaning = cms.double(0.05),
    pf_convBremFinderID_mvaCutBarrelHighPt = cms.double(0.97),
    pf_convBremFinderID_mvaCutBarrelLowPt = cms.double(0.6),
    pf_convBremFinderID_mvaCutEndcapsHighPt = cms.double(0.995),
    pf_convBremFinderID_mvaCutEndcapsLowPt = cms.double(0.9),
    pf_convBremFinderID_mvaWeightFileBarrelHighPt = cms.FileInPath('RecoParticleFlow/PFTracking/data/TMVAClassification_ConvBremFinder_Testetgt20absetalt1_479_BDT.weights.xml'),
    pf_convBremFinderID_mvaWeightFileBarrelLowPt = cms.FileInPath('RecoParticleFlow/PFTracking/data/TMVAClassification_ConvBremFinder_Testetlt20absetalt1_479_BDT.weights.xml'),
    pf_convBremFinderID_mvaWeightFileEndcapsHighPt = cms.FileInPath('RecoParticleFlow/PFTracking/data/TMVAClassification_ConvBremFinder_Testetgt20absetagt1_479_BDT.weights.xml'),
    pf_convBremFinderID_mvaWeightFileEndcapsLowPt = cms.FileInPath('RecoParticleFlow/PFTracking/data/TMVAClassification_ConvBremFinder_Testetlt20absetagt1_479_BDT.weights.xml'),
    useConvBremFinder = cms.bool(True),
    useConversions = cms.bool(False),
    useFifthStepForEcalDrivenGsf = cms.bool(False),
    useFifthStepForTrackerDrivenGsf = cms.bool(True),
    useNuclear = cms.bool(False),
    useV0 = cms.bool(False)
)


process.lowPtGsfElePfTracks = cms.EDProducer("PFTrackProducer",
    GsfTrackModuleLabel = cms.InputTag(""),
    GsfTracksInEvents = cms.bool(False),
    MuColl = cms.InputTag("muons1stStep"),
    PrimaryVertexLabel = cms.InputTag("offlinePrimaryVertices"),
    TkColList = cms.VInputTag("generalTracks"),
    TrackQuality = cms.string('highPurity'),
    TrajInEvents = cms.bool(False),
    UseQuality = cms.bool(True)
)


process.lowPtGsfElectronCores = cms.EDProducer("LowPtGsfElectronCoreProducer",
    ctfTracks = cms.InputTag("generalTracks"),
    gsfPfRecTracks = cms.InputTag("lowPtGsfElePfGsfTracks"),
    mightGet = cms.optional.untracked.vstring,
    superClusters = cms.InputTag("lowPtGsfElectronSuperClusters")
)


process.lowPtGsfElectronID = cms.EDProducer("LowPtGsfElectronIDProducer",
    MaxPtThreshold = cms.double(15),
    MinPtThreshold = cms.double(0.5),
    ModelNames = cms.vstring(''),
    ModelThresholds = cms.vdouble(-10),
    ModelWeights = cms.vstring('RecoEgamma/ElectronIdentification/data/LowPtElectrons/RunII_Autumn18_LowPtElectrons_mva_id.xml.gz'),
    PassThrough = cms.bool(False),
    electrons = cms.InputTag("lowPtGsfElectrons"),
    mightGet = cms.optional.untracked.vstring,
    rho = cms.InputTag("fixedGridRhoFastjetAllTmp")
)


process.lowPtGsfElectronSeedValueMaps = cms.EDProducer("LowPtGsfElectronSeedValueMapsProducer",
    ModelNames = cms.vstring(
        'unbiased', 
        'ptbiased'
    ),
    gsfTracks = cms.InputTag("lowPtGsfEleGsfTracks"),
    mightGet = cms.optional.untracked.vstring,
    preIdsValueMap = cms.InputTag("lowPtGsfElectronSeeds")
)


process.lowPtGsfElectronSeeds = cms.EDProducer("LowPtGsfElectronSeedProducer",
    BeamSpot = cms.InputTag("offlineBeamSpot"),
    EBRecHits = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    EERecHits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    Fitter = cms.string('GsfTrajectoryFitter_forPreId'),
    MaxPtThreshold = cms.double(15.0),
    MinPtThreshold = cms.double(1.0),
    ModelNames = cms.vstring(
        'unbiased', 
        'ptbiased'
    ),
    ModelThresholds = cms.vdouble(3.05, 2.42),
    ModelWeights = cms.vstring(
        'RecoEgamma/ElectronIdentification/data/LowPtElectrons/RunII_Autumn18_LowPtElectrons_unbiased.xml.gz', 
        'RecoEgamma/ElectronIdentification/data/LowPtElectrons/RunII_Autumn18_LowPtElectrons_displaced_pt_eta_biased.xml.gz'
    ),
    PassThrough = cms.bool(False),
    Smoother = cms.string('GsfTrajectorySmoother_forPreId'),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    UsePfTracks = cms.bool(True),
    ecalClusters = cms.InputTag("particleFlowClusterECAL"),
    hcalClusters = cms.InputTag("particleFlowClusterHCAL"),
    pfTracks = cms.InputTag("lowPtGsfElePfTracks"),
    rho = cms.InputTag("fixedGridRhoFastjetAllTmp"),
    tracks = cms.InputTag("generalTracks")
)


process.lowPtGsfElectronSeedsTmp = cms.EDProducer("LowPtGsfElectronSeedProducer",
    BeamSpot = cms.InputTag("offlineBeamSpot"),
    EBRecHits = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    EERecHits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    Fitter = cms.string('GsfTrajectoryFitter_forPreId'),
    MaxPtThreshold = cms.double(15.0),
    MinPtThreshold = cms.double(1.0),
    ModelNames = cms.vstring(
        'unbiased', 
        'ptbiased'
    ),
    ModelThresholds = cms.vdouble(3.05, 2.42),
    ModelWeights = cms.vstring(
        'RecoEgamma/ElectronIdentification/data/LowPtElectrons/RunII_Autumn18_LowPtElectrons_unbiased.xml.gz', 
        'RecoEgamma/ElectronIdentification/data/LowPtElectrons/RunII_Autumn18_LowPtElectrons_displaced_pt_eta_biased.xml.gz'
    ),
    PassThrough = cms.bool(False),
    Smoother = cms.string('GsfTrajectorySmoother_forPreId'),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    UsePfTracks = cms.bool(True),
    ecalClusters = cms.InputTag("particleFlowClusterECAL"),
    hcalClusters = cms.InputTag("particleFlowClusterHCAL"),
    pfTracks = cms.InputTag("lowPtGsfElePfTracks"),
    rho = cms.InputTag("fixedGridRhoFastjetAllTmp"),
    tracks = cms.InputTag("generalTracksBeforeMixing")
)


process.lowPtGsfElectronSuperClusters = cms.EDProducer("LowPtGsfElectronSCProducer",
    MaxDeltaR2 = cms.double(0.5),
    ecalClusters = cms.InputTag("particleFlowClusterECAL"),
    gsfPfRecTracks = cms.InputTag("lowPtGsfElePfGsfTracks"),
    hcalClusters = cms.InputTag("particleFlowClusterHCAL"),
    mightGet = cms.optional.untracked.vstring
)


process.lowPtGsfElectrons = cms.EDProducer("GsfElectronProducer",
    ElecMVAFilesString = cms.vstring(
        'RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_10_17Feb2011.weights.xml', 
        'RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_12_17Feb2011.weights.xml', 
        'RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_20_17Feb2011.weights.xml', 
        'RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_22_17Feb2011.weights.xml'
    ),
    MaxElePtForOnlyMVA = cms.double(50),
    PreSelectMVA = cms.double(-0.1),
    SoftElecMVAFilesString = cms.vstring('RecoEgamma/ElectronIdentification/data/TMVA_BDTSoftElectrons_7Feb2014.weights.xml'),
    ambClustersOverlapStrategy = cms.uint32(1),
    ambSortingStrategy = cms.uint32(1),
    applyAmbResolution = cms.bool(False),
    applyPreselection = cms.bool(False),
    barrelRecHitCollectionTag = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    checkHcalStatus = cms.bool(True),
    combinationRegressionWeightFile = cms.vstring(),
    combinationRegressionWeightLabels = cms.vstring(),
    combinationWeightsFromDB = cms.bool(True),
    conversionsTag = cms.InputTag("allConversions"),
    crackCorrectionFunction = cms.string('EcalClusterCrackCorrection'),
    ctfTracksCheck = cms.bool(True),
    ctfTracksTag = cms.InputTag("generalTracks"),
    eMinBarrel = cms.double(0.095),
    eMinEndcaps = cms.double(0),
    ecalDrivenEcalEnergyFromClassBasedParameterization = cms.bool(True),
    ecalDrivenEcalErrorFromClassBasedParameterization = cms.bool(True),
    ecalRefinedRegressionWeightFiles = cms.vstring(),
    ecalRefinedRegressionWeightLabels = cms.vstring(),
    ecalWeightsFromDB = cms.bool(True),
    egmPFCandidatesTag = cms.InputTag("particleFlowEGamma"),
    endcapRecHitCollectionTag = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    etMinBarrel = cms.double(0),
    etMinEndcaps = cms.double(0.11),
    etMinHcal = cms.double(0),
    fillConvVtxFitProb = cms.bool(True),
    gsfElectronCoresTag = cms.InputTag("lowPtGsfElectronCores"),
    gsfPfRecTracksTag = cms.InputTag("pfTrackElec"),
    hcalTowers = cms.InputTag("towerMaker"),
    ignoreNotPreselected = cms.bool(True),
    intRadiusEcalBarrel = cms.double(3),
    intRadiusEcalEndcaps = cms.double(3),
    intRadiusHcal = cms.double(0.15),
    jurassicWidth = cms.double(1.5),
    mightGet = cms.optional.untracked.vstring,
    preselection = cms.PSet(
        hOverEConeSize = cms.double(0.15),
        hOverEPtMin = cms.double(0),
        isBarrel = cms.bool(False),
        isEndcaps = cms.bool(False),
        isFiducial = cms.bool(False),
        maxDeltaEtaBarrel = cms.double(0.02),
        maxDeltaEtaEndcaps = cms.double(0.02),
        maxDeltaPhiBarrel = cms.double(0.15),
        maxDeltaPhiEndcaps = cms.double(0.15),
        maxEOverPBarrel = cms.double(999999999),
        maxEOverPEndcaps = cms.double(999999999),
        maxFbremBarrel = cms.double(999999999),
        maxFbremEndcaps = cms.double(999999999),
        maxHBarrelCone = cms.double(0),
        maxHBarrelTower = cms.double(0),
        maxHEndcapsCone = cms.double(0),
        maxHEndcapsTower = cms.double(0),
        maxHOverEBarrelCone = cms.double(0.15),
        maxHOverEBarrelTower = cms.double(0.15),
        maxHOverEEndcapsCone = cms.double(0.15),
        maxHOverEEndcapsTower = cms.double(0.15),
        maxSigmaIetaIetaBarrel = cms.double(999999999),
        maxSigmaIetaIetaEndcaps = cms.double(999999999),
        maxTIP = cms.double(999999999),
        minEOverPBarrel = cms.double(0),
        minEOverPEndcaps = cms.double(0),
        minMVA = cms.double(-0.4),
        minMvaByPassForIsolated = cms.double(-0.4),
        minSCEtBarrel = cms.double(4),
        minSCEtEndcaps = cms.double(4),
        seedFromTEC = cms.bool(True)
    ),
    pureTrackerDrivenEcalErrorFromSimpleParameterization = cms.bool(True),
    recHitFlagsToBeExcludedBarrel = cms.vstring(
        'kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'
    ),
    recHitFlagsToBeExcludedEndcaps = cms.vstring(
        'kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'
    ),
    recHitSeverityToBeExcludedBarrel = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    recHitSeverityToBeExcludedEndcaps = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    resetMvaValuesUsingPFCandidates = cms.bool(False),
    seedsTag = cms.InputTag("ecalDrivenElectronSeeds"),
    superClusterErrorFunction = cms.string('EcalClusterEnergyUncertaintyObjectSpecific'),
    trkIsol03Cfg = cms.PSet(
        barrelCuts = cms.PSet(
            algosToReject = cms.vstring('jetCoreRegionalStep'),
            allowedQualities = cms.vstring(),
            maxDPtPt = cms.double(-1),
            maxDR = cms.double(0.3),
            maxDZ = cms.double(0.2),
            minDEta = cms.double(0.015),
            minDR = cms.double(0.0),
            minHits = cms.int32(-1),
            minPixelHits = cms.int32(-1),
            minPt = cms.double(0.7)
        ),
        endcapCuts = cms.PSet(
            algosToReject = cms.vstring('jetCoreRegionalStep'),
            allowedQualities = cms.vstring(),
            maxDPtPt = cms.double(-1),
            maxDR = cms.double(0.3),
            maxDZ = cms.double(0.2),
            minDEta = cms.double(0.015),
            minDR = cms.double(0.0),
            minHits = cms.int32(-1),
            minPixelHits = cms.int32(-1),
            minPt = cms.double(0.7)
        )
    ),
    trkIsol04Cfg = cms.PSet(
        barrelCuts = cms.PSet(
            algosToReject = cms.vstring('jetCoreRegionalStep'),
            allowedQualities = cms.vstring(),
            maxDPtPt = cms.double(-1),
            maxDR = cms.double(0.4),
            maxDZ = cms.double(0.2),
            minDEta = cms.double(0.015),
            minDR = cms.double(0.0),
            minHits = cms.int32(-1),
            minPixelHits = cms.int32(-1),
            minPt = cms.double(0.7)
        ),
        endcapCuts = cms.PSet(
            algosToReject = cms.vstring('jetCoreRegionalStep'),
            allowedQualities = cms.vstring(),
            maxDPtPt = cms.double(-1),
            maxDR = cms.double(0.4),
            maxDZ = cms.double(0.2),
            minDEta = cms.double(0.015),
            minDR = cms.double(0.0),
            minHits = cms.int32(-1),
            minPixelHits = cms.int32(-1),
            minPt = cms.double(0.7)
        )
    ),
    trkIsolHEEP03Cfg = cms.PSet(
        barrelCuts = cms.PSet(
            algosToReject = cms.vstring(),
            allowedQualities = cms.vstring(),
            maxDPtPt = cms.double(0.1),
            maxDR = cms.double(0.3),
            maxDZ = cms.double(0.1),
            minDEta = cms.double(0.005),
            minDR = cms.double(0.0),
            minHits = cms.int32(8),
            minPixelHits = cms.int32(1),
            minPt = cms.double(1.0)
        ),
        endcapCuts = cms.PSet(
            algosToReject = cms.vstring(),
            allowedQualities = cms.vstring(),
            maxDPtPt = cms.double(0.1),
            maxDR = cms.double(0.3),
            maxDZ = cms.double(0.5),
            minDEta = cms.double(0.005),
            minDR = cms.double(0.0),
            minHits = cms.int32(8),
            minPixelHits = cms.int32(1),
            minPt = cms.double(1.0)
        )
    ),
    trkIsolHEEP04Cfg = cms.PSet(
        barrelCuts = cms.PSet(
            algosToReject = cms.vstring(),
            allowedQualities = cms.vstring(),
            maxDPtPt = cms.double(0.1),
            maxDR = cms.double(0.4),
            maxDZ = cms.double(0.1),
            minDEta = cms.double(0.005),
            minDR = cms.double(0.0),
            minHits = cms.int32(8),
            minPixelHits = cms.int32(1),
            minPt = cms.double(1.0)
        ),
        endcapCuts = cms.PSet(
            algosToReject = cms.vstring(),
            allowedQualities = cms.vstring(),
            maxDPtPt = cms.double(0.1),
            maxDR = cms.double(0.4),
            maxDZ = cms.double(0.5),
            minDEta = cms.double(0.005),
            minDR = cms.double(0.0),
            minHits = cms.int32(8),
            minPixelHits = cms.int32(1),
            minPt = cms.double(1.0)
        )
    ),
    useCombinationRegression = cms.bool(False),
    useDefaultEnergyCorrection = cms.bool(True),
    useEcalRegression = cms.bool(False),
    useGsfPfRecTracks = cms.bool(True),
    useNumCrystals = cms.bool(True),
    vetoClustered = cms.bool(False),
    vtxTag = cms.InputTag("offlinePrimaryVertices")
)


process.lowPtGsfToTrackLinks = cms.EDProducer("LowPtGSFToTrackLinker",
    gsfPreID = cms.InputTag("lowPtGsfElectronSeeds"),
    gsfTracks = cms.InputTag("lowPtGsfEleGsfTracks"),
    mightGet = cms.optional.untracked.vstring,
    tracks = cms.InputTag("generalTracks")
)


process.lowPtQuadStep = cms.EDProducer("TrackMVAClassifierPrompt",
    beamspot = cms.InputTag("offlineBeamSpot"),
    ignoreVertices = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    mva = cms.PSet(
        GBRForestFileName = cms.string(''),
        GBRForestLabel = cms.string('MVASelectorLowPtQuadStep_Phase1')
    ),
    qualityCuts = cms.vdouble(-0.7, -0.35, -0.15),
    src = cms.InputTag("lowPtQuadStepTracks"),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.lowPtQuadStepClusters = cms.EDProducer("TrackClusterRemoverPhase2",
    TrackQuality = cms.string('highPurity'),
    maxChi2 = cms.double(9.0),
    mightGet = cms.optional.untracked.vstring,
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    oldClusterRemovalInfo = cms.InputTag("highPtTripletStepClusters"),
    overrideTrkQuals = cms.InputTag("highPtTripletStepSelector","highPtTripletStep"),
    phase2OTClusters = cms.InputTag("siPhase2Clusters"),
    phase2pixelClusters = cms.InputTag("siPixelClusters"),
    trackClassifier = cms.InputTag("","QualityMasks"),
    trajectories = cms.InputTag("highPtTripletStepTracks")
)


process.lowPtQuadStepHitDoublets = cms.EDProducer("HitPairEDProducer",
    clusterCheck = cms.InputTag("trackerClusterCheck"),
    layerPairs = cms.vuint32(0, 1, 2),
    maxElement = cms.uint32(50000000),
    maxElementTotal = cms.uint32(50000000),
    mightGet = cms.optional.untracked.vstring,
    produceIntermediateHitDoublets = cms.bool(True),
    produceSeedingHitSets = cms.bool(False),
    seedingLayers = cms.InputTag("lowPtQuadStepSeedLayers"),
    trackingRegions = cms.InputTag("lowPtQuadStepTrackingRegions"),
    trackingRegionsSeedingLayers = cms.InputTag("")
)


process.lowPtQuadStepHitQuadruplets = cms.EDProducer("CAHitQuadrupletEDProducer",
    CAHardPtCut = cms.double(0),
    CAOnlyOneLastHitPerLayerFilter = cms.optional.bool,
    CAPhiCut = cms.double(0.25),
    CAThetaCut = cms.double(0.0015),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('LowPtClusterShapeSeedComparitor'),
        clusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
        clusterShapeHitFilter = cms.string('ClusterShapeHitFilter')
    ),
    doublets = cms.InputTag("lowPtQuadStepHitDoublets"),
    extraHitRPhitolerance = cms.double(0.032),
    fitFastCircle = cms.bool(True),
    fitFastCircleChi2Cut = cms.bool(True),
    maxChi2 = cms.PSet(
        enabled = cms.bool(True),
        pt1 = cms.double(0.7),
        pt2 = cms.double(2),
        value1 = cms.double(1000),
        value2 = cms.double(150)
    ),
    mightGet = cms.optional.untracked.vstring,
    useBendingCorrection = cms.bool(True)
)


process.lowPtQuadStepMasks = cms.EDProducer("FastTrackerRecHitMaskProducer",
    TrackQuality = cms.string('highPurity'),
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    minNumberOfLayersWithMeasBeforeFiltering_ = cms.int32(0),
    oldHitRemovalInfo = cms.InputTag("highPtTripletStepMasks"),
    recHits = cms.InputTag("fastTrackerRecHits"),
    trackClassifier = cms.InputTag("","QualityMasks"),
    trackQuality = cms.string('hightPurity'),
    trajectories = cms.InputTag("highPtTripletStepTracks")
)


process.lowPtQuadStepSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("lowPtQuadStepClusters")
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("lowPtQuadStepClusters")
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring(
        'BPix1+BPix2+BPix3+BPix4', 
        'BPix1+BPix2+BPix3+FPix1_pos', 
        'BPix1+BPix2+BPix3+FPix1_neg', 
        'BPix1+BPix2+FPix1_pos+FPix2_pos', 
        'BPix1+BPix2+FPix1_neg+FPix2_neg', 
        'BPix1+FPix1_pos+FPix2_pos+FPix3_pos', 
        'BPix1+FPix1_neg+FPix2_neg+FPix3_neg', 
        'FPix1_pos+FPix2_pos+FPix3_pos+FPix4_pos', 
        'FPix1_neg+FPix2_neg+FPix3_neg+FPix4_neg', 
        'FPix2_pos+FPix3_pos+FPix4_pos+FPix5_pos', 
        'FPix2_neg+FPix3_neg+FPix4_neg+FPix5_neg', 
        'FPix3_pos+FPix4_pos+FPix5_pos+FPix6_pos', 
        'FPix3_neg+FPix4_neg+FPix5_neg+FPix6_neg', 
        'FPix4_pos+FPix5_pos+FPix6_pos+FPix7_pos', 
        'FPix4_neg+FPix5_neg+FPix6_neg+FPix7_neg', 
        'FPix5_pos+FPix6_pos+FPix7_pos+FPix8_pos', 
        'FPix5_neg+FPix6_neg+FPix7_neg+FPix8_neg'
    ),
    mightGet = cms.optional.untracked.vstring
)


process.lowPtQuadStepSeeds = cms.EDProducer("SeedCreatorFromRegionConsecutiveHitsEDProducer",
    MinOneOverPtError = cms.double(1),
    OriginTransverseErrorMultiplier = cms.double(1),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedMomentumForBOFF = cms.double(5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    forceKinematicWithRegionDirection = cms.bool(False),
    magneticField = cms.string(''),
    mightGet = cms.optional.untracked.vstring,
    propagator = cms.string('PropagatorWithMaterial'),
    seedingHitSets = cms.InputTag("lowPtQuadStepHitQuadruplets")
)


process.lowPtQuadStepSelector = cms.EDProducer("MultiTrackSelector",
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("lowPtQuadStepTracks"),
    trackSelectors = cms.VPSet(
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(2.0),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.8, 4.0),
            d0_par2 = cms.vdouble(0.6, 4.0),
            dz_par1 = cms.vdouble(0.7, 4.0),
            dz_par2 = cms.vdouble(0.6, 4.0),
            keepAllTracks = cms.bool(False),
            maxNumberLostLayers = cms.uint32(2),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('lowPtQuadStepLoose'),
            preFilterName = cms.string(''),
            qualityBit = cms.string('loose'),
            res_par = cms.vdouble(0.003, 0.002),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(1.4),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.7, 4.0),
            d0_par2 = cms.vdouble(0.5, 4.0),
            dz_par1 = cms.vdouble(0.6, 4.0),
            dz_par2 = cms.vdouble(0.5, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('lowPtQuadStepTight'),
            preFilterName = cms.string('lowPtQuadStepLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.002),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(1.2),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.5, 4.0),
            d0_par2 = cms.vdouble(0.45, 4.0),
            dz_par1 = cms.vdouble(0.5, 4.0),
            dz_par2 = cms.vdouble(0.45, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(4.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-4.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('lowPtQuadStep'),
            preFilterName = cms.string('lowPtQuadStepTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        )
    ),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(False),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.lowPtQuadStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('lowPtQuadStepTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('lowPtQuadStepTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    numHitsForSeedCleaner = cms.int32(50),
    onlyPixelHitsForSeedCleaner = cms.bool(True),
    phase2clustersToSkip = cms.InputTag("lowPtQuadStepClusters"),
    reverseTrajectories = cms.bool(False),
    src = cms.InputTag("lowPtQuadStepSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.lowPtQuadStepTrackingRegions = cms.EDProducer("GlobalTrackingRegionFromBeamSpotEDProducer",
    RegionPSet = cms.PSet(
        beamSpot = cms.InputTag("offlineBeamSpot"),
        nSigmaZ = cms.double(4),
        originHalfLength = cms.double(0),
        originRadius = cms.double(0.025),
        precise = cms.bool(True),
        ptMin = cms.double(0.35),
        useMultipleScattering = cms.bool(False)
    ),
    mightGet = cms.optional.untracked.vstring
)


process.lowPtQuadStepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('lowPtQuadStep'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("lowPtQuadStepTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.lowPtTripletStep = cms.EDProducer("TrackMVAClassifierPrompt",
    beamspot = cms.InputTag("offlineBeamSpot"),
    ignoreVertices = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    mva = cms.PSet(
        GBRForestFileName = cms.string(''),
        GBRForestLabel = cms.string('MVASelectorIter1_13TeV')
    ),
    qualityCuts = cms.vdouble(-0.6, -0.3, -0.1),
    src = cms.InputTag("lowPtTripletStepTracks"),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.lowPtTripletStepClusters = cms.EDProducer("TrackClusterRemoverPhase2",
    TrackQuality = cms.string('highPurity'),
    maxChi2 = cms.double(9.0),
    mightGet = cms.optional.untracked.vstring,
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    oldClusterRemovalInfo = cms.InputTag("lowPtQuadStepClusters"),
    overrideTrkQuals = cms.InputTag("lowPtQuadStepSelector","lowPtQuadStep"),
    phase2OTClusters = cms.InputTag("siPhase2Clusters"),
    phase2pixelClusters = cms.InputTag("siPixelClusters"),
    trackClassifier = cms.InputTag("","QualityMasks"),
    trajectories = cms.InputTag("lowPtQuadStepTracks")
)


process.lowPtTripletStepHitDoublets = cms.EDProducer("HitPairEDProducer",
    clusterCheck = cms.InputTag("trackerClusterCheck"),
    layerPairs = cms.vuint32(0, 1),
    maxElement = cms.uint32(50000000),
    maxElementTotal = cms.uint32(50000000),
    mightGet = cms.optional.untracked.vstring,
    produceIntermediateHitDoublets = cms.bool(True),
    produceSeedingHitSets = cms.bool(False),
    seedingLayers = cms.InputTag("lowPtTripletStepSeedLayers"),
    trackingRegions = cms.InputTag("lowPtTripletStepTrackingRegions"),
    trackingRegionsSeedingLayers = cms.InputTag("")
)


process.lowPtTripletStepHitTriplets = cms.EDProducer("CAHitTripletEDProducer",
    CAHardPtCut = cms.double(0),
    CAPhiCut = cms.double(0.05),
    CAThetaCut = cms.double(0.002),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('LowPtClusterShapeSeedComparitor'),
        clusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
        clusterShapeHitFilter = cms.string('ClusterShapeHitFilter')
    ),
    doublets = cms.InputTag("lowPtTripletStepHitDoublets"),
    extraHitRPhitolerance = cms.double(0.032),
    maxChi2 = cms.PSet(
        enabled = cms.bool(True),
        pt1 = cms.double(0.8),
        pt2 = cms.double(2),
        value1 = cms.double(70),
        value2 = cms.double(8)
    ),
    mightGet = cms.optional.untracked.vstring,
    useBendingCorrection = cms.bool(True)
)


process.lowPtTripletStepMasks = cms.EDProducer("FastTrackerRecHitMaskProducer",
    TrackQuality = cms.string('highPurity'),
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    minNumberOfLayersWithMeasBeforeFiltering_ = cms.int32(0),
    oldHitRemovalInfo = cms.InputTag("lowPtQuadStepMasks"),
    recHits = cms.InputTag("fastTrackerRecHits"),
    trackClassifier = cms.InputTag("","QualityMasks"),
    trackQuality = cms.string('hightPurity'),
    trajectories = cms.InputTag("lowPtQuadStepTracks")
)


process.lowPtTripletStepSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("lowPtTripletStepClusters")
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("lowPtTripletStepClusters")
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring(
        'BPix1+BPix2+BPix3', 
        'BPix2+BPix3+BPix4', 
        'BPix1+BPix2+FPix1_pos', 
        'BPix1+BPix2+FPix1_neg', 
        'BPix1+FPix1_pos+FPix2_pos', 
        'BPix1+FPix1_neg+FPix2_neg', 
        'FPix1_pos+FPix2_pos+FPix3_pos', 
        'FPix1_neg+FPix2_neg+FPix3_neg', 
        'FPix2_pos+FPix3_pos+FPix4_pos', 
        'FPix2_neg+FPix3_neg+FPix4_neg', 
        'FPix3_pos+FPix4_pos+FPix5_pos', 
        'FPix3_neg+FPix4_neg+FPix5_neg', 
        'FPix4_pos+FPix5_pos+FPix6_pos', 
        'FPix4_neg+FPix5_neg+FPix6_neg'
    ),
    mightGet = cms.optional.untracked.vstring
)


process.lowPtTripletStepSeeds = cms.EDProducer("SeedCreatorFromRegionConsecutiveHitsEDProducer",
    MinOneOverPtError = cms.double(1),
    OriginTransverseErrorMultiplier = cms.double(1),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedMomentumForBOFF = cms.double(5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    forceKinematicWithRegionDirection = cms.bool(False),
    magneticField = cms.string(''),
    mightGet = cms.optional.untracked.vstring,
    propagator = cms.string('PropagatorWithMaterial'),
    seedingHitSets = cms.InputTag("lowPtTripletStepHitTriplets")
)


process.lowPtTripletStepSelector = cms.EDProducer("MultiTrackSelector",
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("lowPtTripletStepTracks"),
    trackSelectors = cms.VPSet(
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(1.2),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.7, 4.0),
            d0_par2 = cms.vdouble(0.6, 4.0),
            dz_par1 = cms.vdouble(0.7, 4.0),
            dz_par2 = cms.vdouble(0.6, 4.0),
            keepAllTracks = cms.bool(False),
            maxNumberLostLayers = cms.uint32(2),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('lowPtTripletStepLoose'),
            preFilterName = cms.string(''),
            qualityBit = cms.string('loose'),
            res_par = cms.vdouble(0.003, 0.002),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.7),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.6, 4.0),
            d0_par2 = cms.vdouble(0.5, 4.0),
            dz_par1 = cms.vdouble(0.6, 4.0),
            dz_par2 = cms.vdouble(0.5, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('lowPtTripletStepTight'),
            preFilterName = cms.string('lowPtTripletStepLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.002),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.4),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.5, 4.0),
            d0_par2 = cms.vdouble(0.45, 4.0),
            dz_par1 = cms.vdouble(0.5, 4.0),
            dz_par2 = cms.vdouble(0.45, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(4.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(4),
            minNumberLayers = cms.uint32(4),
            min_eta = cms.double(-4.0),
            min_nhits = cms.uint32(3),
            nSigmaZ = cms.double(4.0),
            name = cms.string('lowPtTripletStep'),
            preFilterName = cms.string('lowPtTripletStepTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        )
    ),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(False),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.lowPtTripletStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('lowPtTripletStepTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('lowPtTripletStepTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    numHitsForSeedCleaner = cms.int32(50),
    onlyPixelHitsForSeedCleaner = cms.bool(True),
    phase2clustersToSkip = cms.InputTag("lowPtTripletStepClusters"),
    reverseTrajectories = cms.bool(False),
    src = cms.InputTag("lowPtTripletStepSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.lowPtTripletStepTrackingRegions = cms.EDProducer("GlobalTrackingRegionFromBeamSpotEDProducer",
    RegionPSet = cms.PSet(
        beamSpot = cms.InputTag("offlineBeamSpot"),
        nSigmaZ = cms.double(4),
        originHalfLength = cms.double(0),
        originRadius = cms.double(0.02),
        precise = cms.bool(True),
        ptMin = cms.double(0.4),
        useMultipleScattering = cms.bool(False)
    ),
    mightGet = cms.optional.untracked.vstring
)


process.lowPtTripletStepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('lowPtTripletStep'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("lowPtTripletStepTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.lumiProducer = cms.EDProducer("LumiProducer",
    connect = cms.string('frontier://LumiProd/CMS_LUMI_PROD'),
    lumiversion = cms.untracked.string(''),
    ncacheEntries = cms.untracked.uint32(5)
)


process.me0RecHits = cms.EDProducer("ME0RecHitProducer",
    me0DigiLabel = cms.InputTag("simMuonME0PseudoReDigis"),
    recAlgo = cms.string('ME0RecHitStandardAlgo'),
    recAlgoConfig = cms.PSet(

    )
)


process.me0RecHitsCoarse = cms.EDProducer("ME0RecHitProducer",
    me0DigiLabel = cms.InputTag("simMuonME0PseudoReDigisCoarse"),
    recAlgo = cms.string('ME0RecHitStandardAlgo'),
    recAlgoConfig = cms.PSet(

    )
)


process.me0Segments = cms.EDProducer("ME0SegmentProducer",
    algo_psets = cms.VPSet(
        cms.PSet(
            algo_name = cms.string('ME0SegmentAlgorithm'),
            algo_pset = cms.PSet(
                ME0Debug = cms.untracked.bool(True),
                dEtaChainBoxMax = cms.double(0.05),
                dPhiChainBoxMax = cms.double(0.02),
                dTimeChainBoxMax = cms.double(15.0),
                dXclusBoxMax = cms.double(1.0),
                dYclusBoxMax = cms.double(5.0),
                maxRecHitsInCluster = cms.int32(6),
                minHitsPerSegment = cms.uint32(3),
                preClustering = cms.bool(True),
                preClusteringUseChaining = cms.bool(True)
            )
        ), 
        cms.PSet(
            algo_name = cms.string('ME0SegAlgoRU'),
            algo_pset = cms.PSet(
                allowWideSegments = cms.bool(True),
                doCollisions = cms.bool(True),
                maxChi2Additional = cms.double(100.0),
                maxChi2GoodSeg = cms.double(50),
                maxChi2Prune = cms.double(50),
                maxETASeeds = cms.double(0.1),
                maxPhiAdditional = cms.double(0.001096605744),
                maxPhiSeeds = cms.double(0.001096605744),
                maxTOFDiff = cms.double(25),
                minNumberOfHits = cms.uint32(4),
                requireCentralBX = cms.bool(True)
            )
        )
    ),
    algo_type = cms.int32(2),
    me0RecHitLabel = cms.InputTag("me0RecHits")
)


process.me0TriggerConvertedPseudoDigis = cms.EDProducer("ME0TriggerPseudoProducer",
    DeltaPhiResolution = cms.untracked.double(0.25),
    ME0SegmentProducer = cms.InputTag("me0Segments"),
    info = cms.untracked.int32(0)
)


process.me0TriggerDigis = cms.EDProducer("ME0TriggerProducer",
    ME0PadDigis = cms.InputTag("simMuonME0PadDigis"),
    tmbParam = cms.PSet(
        verbosity = cms.int32(0)
    )
)


process.me0TriggerPseudoDigis = cms.EDProducer("ME0SegmentProducer",
    algo_psets = cms.VPSet(
        cms.PSet(
            algo_name = cms.string('ME0SegmentAlgorithm'),
            algo_pset = cms.PSet(
                ME0Debug = cms.untracked.bool(True),
                dEtaChainBoxMax = cms.double(0.05),
                dPhiChainBoxMax = cms.double(0.02),
                dTimeChainBoxMax = cms.double(15.0),
                dXclusBoxMax = cms.double(1.0),
                dYclusBoxMax = cms.double(5.0),
                maxRecHitsInCluster = cms.int32(6),
                minHitsPerSegment = cms.uint32(3),
                preClustering = cms.bool(True),
                preClusteringUseChaining = cms.bool(True)
            )
        ), 
        cms.PSet(
            algo_name = cms.string('ME0SegAlgoRU'),
            algo_pset = cms.PSet(
                allowWideSegments = cms.bool(True),
                doCollisions = cms.bool(True),
                maxChi2Additional = cms.double(100.0),
                maxChi2GoodSeg = cms.double(50),
                maxChi2Prune = cms.double(50),
                maxETASeeds = cms.double(0.1),
                maxPhiAdditional = cms.double(0.0021875),
                maxPhiSeeds = cms.double(0.0021875),
                maxTOFDiff = cms.double(25),
                minNumberOfHits = cms.uint32(4),
                requireCentralBX = cms.bool(True)
            )
        )
    ),
    algo_type = cms.int32(2),
    me0RecHitLabel = cms.InputTag("me0RecHitsCoarse")
)


process.mergedDuplicateDisplacedTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('undefAlgorithm'),
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("duplicateDisplacedTrackCandidates","candidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.mergedDuplicateTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('undefAlgorithm'),
    Fitter = cms.string('RKFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("duplicateTrackCandidates","candidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.mergedStandAloneMuonSeeds = cms.EDProducer("MuonSeedMerger",
    SeedCollections = cms.VInputTag(cms.InputTag("ancientMuonSeed"), cms.InputTag("MuonSeed"))
)


process.mixedTripletStep = cms.EDProducer("ClassifierMerger",
    inputClassifiers = cms.vstring(
        'mixedTripletStepClassifier1', 
        'mixedTripletStepClassifier2'
    ),
    mightGet = cms.optional.untracked.vstring
)


process.mixedTripletStepClassifier1 = cms.EDProducer("TrackMVAClassifierDetached",
    beamspot = cms.InputTag("offlineBeamSpot"),
    ignoreVertices = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    mva = cms.PSet(
        GBRForestFileName = cms.string(''),
        GBRForestLabel = cms.string('MVASelectorIter4_13TeV')
    ),
    qualityCuts = cms.vdouble(-0.5, 0.0, 0.5),
    src = cms.InputTag("mixedTripletStepTracks"),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.mixedTripletStepClassifier2 = cms.EDProducer("TrackMVAClassifierPrompt",
    beamspot = cms.InputTag("offlineBeamSpot"),
    ignoreVertices = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    mva = cms.PSet(
        GBRForestFileName = cms.string(''),
        GBRForestLabel = cms.string('MVASelectorIter0_13TeV')
    ),
    qualityCuts = cms.vdouble(-0.2, -0.2, -0.2),
    src = cms.InputTag("mixedTripletStepTracks"),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.mixedTripletStepClusters = cms.EDProducer("TrackClusterRemoverPhase2",
    TrackQuality = cms.string('highPurity'),
    maxChi2 = cms.double(9.0),
    mightGet = cms.optional.untracked.vstring,
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    oldClusterRemovalInfo = cms.InputTag(""),
    overrideTrkQuals = cms.InputTag(""),
    phase2OTClusters = cms.InputTag("siPhase2Clusters"),
    phase2pixelClusters = cms.InputTag("siPixelClusters"),
    trackClassifier = cms.InputTag("","QualityMasks"),
    trajectories = cms.InputTag("")
)


process.mixedTripletStepHitDoubletsA = cms.EDProducer("HitPairEDProducer",
    clusterCheck = cms.InputTag("trackerClusterCheck"),
    layerPairs = cms.vuint32(0),
    maxElement = cms.uint32(50000000),
    maxElementTotal = cms.uint32(50000000),
    mightGet = cms.optional.untracked.vstring,
    produceIntermediateHitDoublets = cms.bool(True),
    produceSeedingHitSets = cms.bool(False),
    seedingLayers = cms.InputTag("mixedTripletStepSeedLayersA"),
    trackingRegions = cms.InputTag("mixedTripletStepTrackingRegionsA"),
    trackingRegionsSeedingLayers = cms.InputTag("")
)


process.mixedTripletStepHitDoubletsB = cms.EDProducer("HitPairEDProducer",
    clusterCheck = cms.InputTag("trackerClusterCheck"),
    layerPairs = cms.vuint32(0),
    maxElement = cms.uint32(50000000),
    maxElementTotal = cms.uint32(50000000),
    mightGet = cms.optional.untracked.vstring,
    produceIntermediateHitDoublets = cms.bool(True),
    produceSeedingHitSets = cms.bool(False),
    seedingLayers = cms.InputTag("mixedTripletStepSeedLayersB"),
    trackingRegions = cms.InputTag("mixedTripletStepTrackingRegionsB"),
    trackingRegionsSeedingLayers = cms.InputTag("")
)


process.mixedTripletStepHitTripletsA = cms.EDProducer("PixelTripletLargeTipEDProducer",
    doublets = cms.InputTag("mixedTripletStepHitDoubletsA"),
    extraHitRPhitolerance = cms.double(0),
    extraHitRZtolerance = cms.double(0),
    maxElement = cms.uint32(0),
    mightGet = cms.optional.untracked.vstring,
    phiPreFiltering = cms.double(0.3),
    produceIntermediateHitTriplets = cms.bool(False),
    produceSeedingHitSets = cms.bool(True),
    useBending = cms.bool(True),
    useFixedPreFiltering = cms.bool(False),
    useMultScattering = cms.bool(True)
)


process.mixedTripletStepHitTripletsB = cms.EDProducer("PixelTripletLargeTipEDProducer",
    doublets = cms.InputTag("mixedTripletStepHitDoubletsB"),
    extraHitRPhitolerance = cms.double(0),
    extraHitRZtolerance = cms.double(0),
    maxElement = cms.uint32(0),
    mightGet = cms.optional.untracked.vstring,
    phiPreFiltering = cms.double(0.3),
    produceIntermediateHitTriplets = cms.bool(False),
    produceSeedingHitSets = cms.bool(True),
    useBending = cms.bool(True),
    useFixedPreFiltering = cms.bool(False),
    useMultScattering = cms.bool(True)
)


process.mixedTripletStepMasks = cms.EDProducer("FastTrackerRecHitMaskProducer",
    TrackQuality = cms.string('highPurity'),
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    minNumberOfLayersWithMeasBeforeFiltering_ = cms.int32(0),
    oldHitRemovalInfo = cms.InputTag("pixelPairStepMasks"),
    recHits = cms.InputTag("fastTrackerRecHits"),
    trackClassifier = cms.InputTag("","QualityMasks"),
    trackQuality = cms.string('hightPurity'),
    trajectories = cms.InputTag("")
)


process.mixedTripletStepSeedClusterMask = cms.EDProducer("SeedClusterRemover",
    Common = cms.PSet(
        maxChi2 = cms.double(9.0)
    ),
    oldClusterRemovalInfo = cms.InputTag("pixelPairStepSeedClusterMask"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    trajectories = cms.InputTag("mixedTripletStepSeeds")
)


process.mixedTripletStepSeedLayersA = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("mixedTripletStepClusters")
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("mixedTripletStepClusters")
    ),
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(1),
        minRing = cms.int32(1),
        skipClusters = cms.InputTag("mixedTripletStepClusters"),
        useRingSlector = cms.bool(True)
    ),
    layerList = cms.vstring(
        'BPix2+FPix1_pos+FPix2_pos', 
        'BPix2+FPix1_neg+FPix2_neg'
    )
)


process.mixedTripletStepSeedLayersB = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("mixedTripletStepClusters")
    ),
    TIB = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        skipClusters = cms.InputTag("mixedTripletStepClusters")
    ),
    layerList = cms.vstring('BPix2+BPix3+TIB1')
)


process.mixedTripletStepSeeds = cms.EDProducer("SeedCombiner",
    seedCollections = cms.VInputTag(cms.InputTag("mixedTripletStepSeedsA"), cms.InputTag("mixedTripletStepSeedsB"))
)


process.mixedTripletStepSeedsA = cms.EDProducer("SeedCreatorFromRegionConsecutiveHitsTripletOnlyEDProducer",
    MinOneOverPtError = cms.double(1),
    OriginTransverseErrorMultiplier = cms.double(1),
    SeedComparitorPSet = cms.PSet(
        ClusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
        ClusterShapeHitFilterName = cms.string('mixedTripletStepClusterShapeHitFilter'),
        ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
        FilterAtHelixStage = cms.bool(False),
        FilterPixelHits = cms.bool(True),
        FilterStripHits = cms.bool(True)
    ),
    SeedMomentumForBOFF = cms.double(5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    forceKinematicWithRegionDirection = cms.bool(False),
    magneticField = cms.string(''),
    mightGet = cms.optional.untracked.vstring,
    propagator = cms.string('PropagatorWithMaterial'),
    seedingHitSets = cms.InputTag("mixedTripletStepHitTripletsA")
)


process.mixedTripletStepSeedsB = cms.EDProducer("SeedCreatorFromRegionConsecutiveHitsTripletOnlyEDProducer",
    MinOneOverPtError = cms.double(1),
    OriginTransverseErrorMultiplier = cms.double(1),
    SeedComparitorPSet = cms.PSet(
        ClusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
        ClusterShapeHitFilterName = cms.string('mixedTripletStepClusterShapeHitFilter'),
        ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
        FilterAtHelixStage = cms.bool(False),
        FilterPixelHits = cms.bool(True),
        FilterStripHits = cms.bool(True)
    ),
    SeedMomentumForBOFF = cms.double(5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    forceKinematicWithRegionDirection = cms.bool(False),
    magneticField = cms.string(''),
    mightGet = cms.optional.untracked.vstring,
    propagator = cms.string('PropagatorWithMaterial'),
    seedingHitSets = cms.InputTag("mixedTripletStepHitTripletsB")
)


process.mixedTripletStepSelector = cms.EDProducer("MultiTrackSelector",
    GBRForestLabel = cms.string('MVASelectorIter4'),
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("mixedTripletStepTracks"),
    trackSelectors = cms.VPSet(
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(1.2),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(1.2, 3.0),
            d0_par2 = cms.vdouble(1.3, 3.0),
            dz_par1 = cms.vdouble(1.2, 3.0),
            dz_par2 = cms.vdouble(1.3, 3.0),
            keepAllTracks = cms.bool(False),
            maxNumberLostLayers = cms.uint32(1),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(2),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('mixedTripletStepVtxLoose'),
            preFilterName = cms.string(''),
            qualityBit = cms.string('loose'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.6),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(1.2, 4.0),
            d0_par2 = cms.vdouble(1.2, 4.0),
            dz_par1 = cms.vdouble(1.2, 4.0),
            dz_par2 = cms.vdouble(1.2, 4.0),
            keepAllTracks = cms.bool(False),
            maxNumberLostLayers = cms.uint32(1),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(4),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('mixedTripletStepTrkLoose'),
            preFilterName = cms.string(''),
            qualityBit = cms.string('loose'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.6),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(1.1, 3.0),
            d0_par2 = cms.vdouble(1.2, 3.0),
            dz_par1 = cms.vdouble(1.1, 3.0),
            dz_par2 = cms.vdouble(1.2, 3.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('mixedTripletStepVtxTight'),
            preFilterName = cms.string('mixedTripletStepVtxLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.4),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(1.1, 4.0),
            d0_par2 = cms.vdouble(1.1, 4.0),
            dz_par1 = cms.vdouble(1.1, 4.0),
            dz_par2 = cms.vdouble(1.1, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(4),
            minNumberLayers = cms.uint32(5),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('mixedTripletStepTrkTight'),
            preFilterName = cms.string('mixedTripletStepTrkLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.4),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(1.1, 3.0),
            d0_par2 = cms.vdouble(1.2, 3.0),
            dz_par1 = cms.vdouble(1.1, 3.0),
            dz_par2 = cms.vdouble(1.2, 3.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('mixedTripletStepVtx'),
            preFilterName = cms.string('mixedTripletStepVtxTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.3),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.9, 4.0),
            d0_par2 = cms.vdouble(0.9, 4.0),
            dz_par1 = cms.vdouble(0.9, 4.0),
            dz_par2 = cms.vdouble(0.9, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(0),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(4),
            minNumberLayers = cms.uint32(5),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('mixedTripletStepTrk'),
            preFilterName = cms.string('mixedTripletStepTrkTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        )
    ),
    useAnyMVA = cms.bool(False),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(False),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.mixedTripletStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('mixedTripletStepTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('mixedTripletStepTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    clustersToSkip = cms.InputTag("mixedTripletStepClusters"),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    numHitsForSeedCleaner = cms.int32(50),
    reverseTrajectories = cms.bool(False),
    src = cms.InputTag("mixedTripletStepSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.mixedTripletStepTrackingRegionsA = cms.EDProducer("GlobalTrackingRegionFromBeamSpotEDProducer",
    RegionPSet = cms.PSet(
        beamSpot = cms.InputTag("offlineBeamSpot"),
        nSigmaZ = cms.double(0),
        originHalfLength = cms.double(15.0),
        originRadius = cms.double(1.5),
        precise = cms.bool(True),
        ptMin = cms.double(0.4),
        useMultipleScattering = cms.bool(False)
    ),
    mightGet = cms.optional.untracked.vstring
)


process.mixedTripletStepTrackingRegionsB = cms.EDProducer("GlobalTrackingRegionFromBeamSpotEDProducer",
    RegionPSet = cms.PSet(
        beamSpot = cms.InputTag("offlineBeamSpot"),
        nSigmaZ = cms.double(0),
        originHalfLength = cms.double(10.0),
        originRadius = cms.double(1.5),
        precise = cms.bool(True),
        ptMin = cms.double(0.6),
        useMultipleScattering = cms.bool(False)
    ),
    mightGet = cms.optional.untracked.vstring
)


process.mixedTripletStepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('mixedTripletStep'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("mixedTripletStepTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.mtdClusters = cms.EDProducer("MTDClusterProducer",
    BarrelClusterName = cms.string('FTLBarrel'),
    ClusterMode = cms.string('MTDThresholdClusterizer'),
    ClusterThreshold = cms.double(0),
    EndcapClusterName = cms.string('FTLEndcap'),
    HitThreshold = cms.double(0),
    SeedThreshold = cms.double(0),
    TimeThreshold = cms.double(10),
    mightGet = cms.optional.untracked.vstring,
    srcBarrel = cms.InputTag("mtdRecHits","FTLBarrel"),
    srcEndcap = cms.InputTag("mtdRecHits","FTLEndcap")
)


process.mtdRecHits = cms.EDProducer("MTDRecHitProducer",
    BarrelHitsName = cms.string('FTLBarrel'),
    EndcapHitsName = cms.string('FTLEndcap'),
    barrel = cms.PSet(
        algoName = cms.string('MTDRecHitAlgo'),
        calibrationConstant = cms.double(0.03125),
        thresholdToKeep = cms.double(1.0)
    ),
    barrelUncalibratedRecHits = cms.InputTag("mtdUncalibratedRecHits","FTLBarrel"),
    endcap = cms.PSet(
        algoName = cms.string('MTDRecHitAlgo'),
        calibrationConstant = cms.double(0.085),
        thresholdToKeep = cms.double(0.0425)
    ),
    endcapUncalibratedRecHits = cms.InputTag("mtdUncalibratedRecHits","FTLEndcap")
)


process.mtdTrackQualityMVA = cms.EDProducer("MTDTrackQualityMVAProducer",
    btlMatchChi2Src = cms.InputTag("trackExtenderWithMTD","btlMatchChi2"),
    btlMatchTimeChi2Src = cms.InputTag("trackExtenderWithMTD","btlMatchTimeChi2"),
    etlMatchChi2Src = cms.InputTag("trackExtenderWithMTD","etlMatchChi2"),
    etlMatchTimeChi2Src = cms.InputTag("trackExtenderWithMTD","etlMatchTimeChi2"),
    mightGet = cms.optional.untracked.vstring,
    mtdTimeSrc = cms.InputTag("trackExtenderWithMTD","tmtd"),
    pathLengthSrc = cms.InputTag("trackExtenderWithMTD","pathLength"),
    qualityBDT_weights_file = cms.FileInPath('RecoMTD/TimingIDTools/data/clf4D_MTDquality_bo.xml'),
    trackAssocSrc = cms.InputTag("trackExtenderWithMTD","generalTrackassoc"),
    tracksMTDSrc = cms.InputTag("trackExtenderWithMTD"),
    tracksSrc = cms.InputTag("generalTracks")
)


process.mtdTrackQualityMVAProducer = cms.EDProducer("MTDTrackQualityMVAProducer",
    btlMatchChi2Src = cms.InputTag("trackExtenderWithMTD","btlMatchChi2"),
    btlMatchTimeChi2Src = cms.InputTag("trackExtenderWithMTD","btlMatchTimeChi2"),
    etlMatchChi2Src = cms.InputTag("trackExtenderWithMTD","etlMatchChi2"),
    etlMatchTimeChi2Src = cms.InputTag("trackExtenderWithMTD","etlMatchTimeChi2"),
    mightGet = cms.optional.untracked.vstring,
    mtdTimeSrc = cms.InputTag("trackExtenderWithMTD","tmtd"),
    pathLengthSrc = cms.InputTag("trackExtenderWithMTD","pathLength"),
    qualityBDT_weights_file = cms.FileInPath('RecoMTD/TimingIDTools/data/clf4D_MTDquality_bo.xml'),
    trackAssocSrc = cms.InputTag("trackExtenderWithMTD","generalTrackassoc"),
    tracksMTDSrc = cms.InputTag("trackExtenderWithMTD"),
    tracksSrc = cms.InputTag("generalTracks")
)


process.mtdTrackingRecHits = cms.EDProducer("MTDTrackingRecHitProducer",
    barrelClusters = cms.InputTag("mtdClusters","FTLBarrel"),
    endcapClusters = cms.InputTag("mtdClusters","FTLEndcap"),
    mightGet = cms.optional.untracked.vstring
)


process.mtdUncalibratedRecHits = cms.EDProducer("MTDUncalibratedRecHitProducer",
    BarrelHitsName = cms.string('FTLBarrel'),
    EndcapHitsName = cms.string('FTLEndcap'),
    barrel = cms.PSet(
        adcNbits = cms.uint32(10),
        adcSaturation = cms.double(600.0),
        algoName = cms.string('BTLUncalibRecHitAlgo'),
        timeCorr_p0 = cms.double(2.21103),
        timeCorr_p1 = cms.double(-0.933552),
        timeCorr_p2 = cms.double(0.0),
        timeResolutionInNs = cms.double(0.025),
        toaLSB_ns = cms.double(0.02)
    ),
    barrelDigis = cms.InputTag("mix","FTLBarrel"),
    endcap = cms.PSet(
        adcNbits = cms.uint32(8),
        adcSaturation = cms.double(25),
        algoName = cms.string('ETLUncalibRecHitAlgo'),
        timeResolutionInNs = cms.double(0.025),
        toaLSB_ns = cms.double(0.013),
        tofDelay = cms.double(1)
    ),
    endcapDigis = cms.InputTag("mix","FTLEndcap")
)


process.muIsoDepositCalByAssociatorHits = cms.EDProducer("MuIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        DR_Max = cms.double(0.5),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DR_Veto_HO = cms.double(0.1),
        DepositInstanceLabels = cms.vstring(
            'ecal', 
            'hcal', 
            'ho'
        ),
        DepositLabel = cms.untracked.string('Cal'),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Noise_EB = cms.double(0.025),
        Noise_EE = cms.double(0.1),
        Noise_HB = cms.double(0.2),
        Noise_HE = cms.double(0.2),
        Noise_HO = cms.double(0.2),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold_E = cms.double(0.025),
        Threshold_H = cms.double(0.1),
        Threshold_HO = cms.double(0.1),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            dRHcal = cms.double(1.0),
            dRHcalPreselection = cms.double(1.0),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(False),
            useEcal = cms.bool(True),
            useGEM = cms.bool(False),
            useHO = cms.bool(True),
            useHcal = cms.bool(True),
            useME0 = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        ),
        UseRecHitsFlag = cms.bool(True)
    ),
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        InputType = cms.string('MuonCollection'),
        MultipleDepositsFlag = cms.bool(True),
        MuonTrackRefType = cms.string('bestTrkSta'),
        inputMuonCollection = cms.InputTag("muons1stStep")
    )
)


process.muIsoDepositCalByAssociatorTowers = cms.EDProducer("MuIsoDepositCopyProducer",
    depositNames = cms.vstring(
        'ecal', 
        'hcal', 
        'ho'
    ),
    inputTags = cms.VInputTag(cms.InputTag("muons1stStep","ecal"), cms.InputTag("muons1stStep","hcal"), cms.InputTag("muons1stStep","ho"))
)


process.muIsoDepositJets = cms.EDProducer("MuIsoDepositCopyProducer",
    depositNames = cms.vstring(''),
    inputTags = cms.VInputTag(cms.InputTag("muons1stStep","jets"))
)


process.muIsoDepositTk = cms.EDProducer("MuIsoDepositCopyProducer",
    depositNames = cms.vstring(''),
    inputTags = cms.VInputTag(cms.InputTag("muons1stStep","tracker"))
)


process.muPFIsoDepositCharged = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(0.4),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedHadrons")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("muons1stStep"),
    trackType = cms.string('candidate')
)


process.muPFIsoDepositChargedAll = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(0.4),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedParticles")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("muons1stStep"),
    trackType = cms.string('candidate')
)


process.muPFIsoDepositGamma = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(0.4),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllPhotons")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("muons1stStep"),
    trackType = cms.string('candidate')
)


process.muPFIsoDepositNeutral = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(0.4),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllNeutralHadrons")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("muons1stStep"),
    trackType = cms.string('candidate')
)


process.muPFIsoDepositPU = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(0.4),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfPileUpAllChargedParticles")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("muons1stStep"),
    trackType = cms.string('candidate')
)


process.muPFIsoValueCharged03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositCharged"),
        vetos = cms.vstring(
            '0.0001', 
            'Threshold(0.0)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFIsoValueCharged04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositCharged"),
        vetos = cms.vstring(
            '0.0001', 
            'Threshold(0.0)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFIsoValueChargedAll03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositChargedAll"),
        vetos = cms.vstring(
            '0.0001', 
            'Threshold(0.0)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFIsoValueChargedAll04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositChargedAll"),
        vetos = cms.vstring(
            '0.0001', 
            'Threshold(0.0)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFIsoValueGamma03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositGamma"),
        vetos = cms.vstring(
            '0.01', 
            'Threshold(0.5)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFIsoValueGamma04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositGamma"),
        vetos = cms.vstring(
            '0.01', 
            'Threshold(0.5)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFIsoValueGammaHighThreshold03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositGamma"),
        vetos = cms.vstring(
            '0.01', 
            'Threshold(1.0)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFIsoValueGammaHighThreshold04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositGamma"),
        vetos = cms.vstring(
            '0.01', 
            'Threshold(1.0)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFIsoValueNeutral03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositNeutral"),
        vetos = cms.vstring(
            '0.01', 
            'Threshold(0.5)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFIsoValueNeutral04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositNeutral"),
        vetos = cms.vstring(
            '0.01', 
            'Threshold(0.5)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFIsoValueNeutralHighThreshold03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositNeutral"),
        vetos = cms.vstring(
            '0.01', 
            'Threshold(1.0)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFIsoValueNeutralHighThreshold04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositNeutral"),
        vetos = cms.vstring(
            '0.01', 
            'Threshold(1.0)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFIsoValuePU03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositPU"),
        vetos = cms.vstring(
            '0.01', 
            'Threshold(0.5)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFIsoValuePU04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositPU"),
        vetos = cms.vstring(
            '0.01', 
            'Threshold(0.5)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFMeanDRIsoValueCharged03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('meanDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositCharged"),
        vetos = cms.vstring(
            '0.0001', 
            'Threshold(0.0)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFMeanDRIsoValueCharged04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('meanDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositCharged"),
        vetos = cms.vstring(
            '0.0001', 
            'Threshold(0.0)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFMeanDRIsoValueChargedAll03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('meanDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositChargedAll"),
        vetos = cms.vstring(
            '0.0001', 
            'Threshold(0.0)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFMeanDRIsoValueChargedAll04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('meanDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositChargedAll"),
        vetos = cms.vstring(
            '0.0001', 
            'Threshold(0.0)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFMeanDRIsoValueGamma03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('meanDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositGamma"),
        vetos = cms.vstring(
            '0.01', 
            'Threshold(0.5)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFMeanDRIsoValueGamma04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('meanDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositGamma"),
        vetos = cms.vstring(
            '0.01', 
            'Threshold(0.5)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFMeanDRIsoValueGammaHighThreshold03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('meanDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositGamma"),
        vetos = cms.vstring(
            '0.01', 
            'Threshold(1.0)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFMeanDRIsoValueGammaHighThreshold04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('meanDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositGamma"),
        vetos = cms.vstring(
            '0.01', 
            'Threshold(1.0)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFMeanDRIsoValueNeutral03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('meanDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositNeutral"),
        vetos = cms.vstring(
            '0.01', 
            'Threshold(0.5)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFMeanDRIsoValueNeutral04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('meanDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositNeutral"),
        vetos = cms.vstring(
            '0.01', 
            'Threshold(0.5)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFMeanDRIsoValueNeutralHighThreshold03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('meanDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositNeutral"),
        vetos = cms.vstring(
            '0.01', 
            'Threshold(1.0)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFMeanDRIsoValueNeutralHighThreshold04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('meanDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositNeutral"),
        vetos = cms.vstring(
            '0.01', 
            'Threshold(1.0)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFMeanDRIsoValuePU03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('meanDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositPU"),
        vetos = cms.vstring(
            '0.01', 
            'Threshold(0.5)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFMeanDRIsoValuePU04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('meanDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositPU"),
        vetos = cms.vstring(
            '0.01', 
            'Threshold(0.5)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFSumDRIsoValueCharged03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('sumDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositCharged"),
        vetos = cms.vstring(
            '0.0001', 
            'Threshold(0.0)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFSumDRIsoValueCharged04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('sumDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositCharged"),
        vetos = cms.vstring(
            '0.0001', 
            'Threshold(0.0)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFSumDRIsoValueChargedAll03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('sumDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositChargedAll"),
        vetos = cms.vstring(
            '0.0001', 
            'Threshold(0.0)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFSumDRIsoValueChargedAll04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('sumDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositChargedAll"),
        vetos = cms.vstring(
            '0.0001', 
            'Threshold(0.0)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFSumDRIsoValueGamma03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('sumDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositGamma"),
        vetos = cms.vstring(
            '0.01', 
            'Threshold(0.5)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFSumDRIsoValueGamma04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('sumDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositGamma"),
        vetos = cms.vstring(
            '0.01', 
            'Threshold(0.5)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFSumDRIsoValueGammaHighThreshold03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('sumDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositGamma"),
        vetos = cms.vstring(
            '0.01', 
            'Threshold(1.0)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFSumDRIsoValueGammaHighThreshold04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('sumDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositGamma"),
        vetos = cms.vstring(
            '0.01', 
            'Threshold(1.0)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFSumDRIsoValueNeutral03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('sumDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositNeutral"),
        vetos = cms.vstring(
            '0.01', 
            'Threshold(0.5)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFSumDRIsoValueNeutral04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('sumDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositNeutral"),
        vetos = cms.vstring(
            '0.01', 
            'Threshold(0.5)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFSumDRIsoValueNeutralHighThreshold03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('sumDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositNeutral"),
        vetos = cms.vstring(
            '0.01', 
            'Threshold(1.0)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFSumDRIsoValueNeutralHighThreshold04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('sumDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositNeutral"),
        vetos = cms.vstring(
            '0.01', 
            'Threshold(1.0)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFSumDRIsoValuePU03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('sumDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositPU"),
        vetos = cms.vstring(
            '0.01', 
            'Threshold(0.5)'
        ),
        weight = cms.string('1')
    ))
)


process.muPFSumDRIsoValuePU04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('sumDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositPU"),
        vetos = cms.vstring(
            '0.01', 
            'Threshold(0.5)'
        ),
        weight = cms.string('1')
    ))
)


process.muParamGlobalIsoDepositCalByAssociatorHits = cms.EDProducer("MuIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        DR_Max = cms.double(0.5),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DR_Veto_HO = cms.double(0.1),
        DepositInstanceLabels = cms.vstring(
            'ecal', 
            'hcal', 
            'ho'
        ),
        DepositLabel = cms.untracked.string('Cal'),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Noise_EB = cms.double(0.025),
        Noise_EE = cms.double(0.1),
        Noise_HB = cms.double(0.2),
        Noise_HE = cms.double(0.2),
        Noise_HO = cms.double(0.2),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold_E = cms.double(0.025),
        Threshold_H = cms.double(0.1),
        Threshold_HO = cms.double(0.1),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            dRHcal = cms.double(1.0),
            dRHcalPreselection = cms.double(1.0),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(False),
            useEcal = cms.bool(True),
            useGEM = cms.bool(False),
            useHO = cms.bool(True),
            useHcal = cms.bool(True),
            useME0 = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        ),
        UseRecHitsFlag = cms.bool(True)
    ),
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        InputType = cms.string('MuonCollection'),
        MultipleDepositsFlag = cms.bool(True),
        MuonTrackRefType = cms.string('bestTrkSta'),
        inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons")
    )
)


process.muParamGlobalIsoDepositCalByAssociatorTowers = cms.EDProducer("MuIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        DR_Max = cms.double(0.5),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DR_Veto_HO = cms.double(0.1),
        DepositInstanceLabels = cms.vstring(
            'ecal', 
            'hcal', 
            'ho'
        ),
        DepositLabel = cms.untracked.string('Cal'),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Noise_EB = cms.double(0.025),
        Noise_EE = cms.double(0.1),
        Noise_HB = cms.double(0.2),
        Noise_HE = cms.double(0.2),
        Noise_HO = cms.double(0.2),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Threshold_HO = cms.double(0.5),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            dRHcal = cms.double(1.0),
            dRHcalPreselection = cms.double(1.0),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useGEM = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useME0 = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        ),
        UseRecHitsFlag = cms.bool(False)
    ),
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        InputType = cms.string('MuonCollection'),
        MultipleDepositsFlag = cms.bool(True),
        MuonTrackRefType = cms.string('bestTrkSta'),
        inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons")
    )
)


process.muParamGlobalIsoDepositCalEcal = cms.EDProducer("MuIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        ComponentName = cms.string('CaloExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DepositLabel = cms.untracked.string('EcalPlusHcal'),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Vertex_Constraint_XY = cms.bool(False),
        Vertex_Constraint_Z = cms.bool(False),
        Weight_E = cms.double(1.0),
        Weight_H = cms.double(0.0)
    ),
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        InputType = cms.string('MuonCollection'),
        MultipleDepositsFlag = cms.bool(False),
        MuonTrackRefType = cms.string('track'),
        inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons")
    )
)


process.muParamGlobalIsoDepositCalHcal = cms.EDProducer("MuIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        ComponentName = cms.string('CaloExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DepositLabel = cms.untracked.string('EcalPlusHcal'),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Vertex_Constraint_XY = cms.bool(False),
        Vertex_Constraint_Z = cms.bool(False),
        Weight_E = cms.double(0.0),
        Weight_H = cms.double(1.0)
    ),
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        InputType = cms.string('MuonCollection'),
        MultipleDepositsFlag = cms.bool(False),
        MuonTrackRefType = cms.string('track'),
        inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons")
    )
)


process.muParamGlobalIsoDepositCtfTk = cms.EDProducer("MuIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(0.5),
        DR_Veto = cms.double(0.01),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(0.1),
        Diff_z = cms.double(0.2),
        NHits_Min = cms.uint32(0),
        Pt_Min = cms.double(-1.0),
        inputTrackCollection = cms.InputTag("ctfGSWithMaterialTracks")
    ),
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        InputType = cms.string('MuonCollection'),
        MultipleDepositsFlag = cms.bool(False),
        MuonTrackRefType = cms.string('bestTrkSta'),
        inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons")
    )
)


process.muParamGlobalIsoDepositGsTk = cms.EDProducer("MuIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(0.5),
        DR_Veto = cms.double(0.01),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(0.1),
        Diff_z = cms.double(0.2),
        NHits_Min = cms.uint32(0),
        Pt_Min = cms.double(-1.0),
        inputTrackCollection = cms.InputTag("ctfGSWithMaterialTracks")
    ),
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        InputType = cms.string('MuonCollection'),
        MultipleDepositsFlag = cms.bool(False),
        MuonTrackRefType = cms.string('track'),
        inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons")
    )
)


process.muParamGlobalIsoDepositJets = cms.EDProducer("MuIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.1),
        ExcludeMuonVeto = cms.bool(True),
        JetCollectionLabel = cms.InputTag("ak4CaloJets"),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold = cms.double(5.0),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            dRHcal = cms.double(0.5),
            dRHcalPreselection = cms.double(0.5),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useGEM = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useME0 = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        )
    ),
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        InputType = cms.string('MuonCollection'),
        MultipleDepositsFlag = cms.bool(False),
        MuonTrackRefType = cms.string('bestTrkSta'),
        inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons")
    )
)


process.muParamGlobalIsoDepositTk = cms.EDProducer("MuIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(0.5),
        DR_Veto = cms.double(0.01),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(0.1),
        Diff_z = cms.double(0.2),
        NHits_Min = cms.uint32(0),
        Pt_Min = cms.double(-1.0),
        inputTrackCollection = cms.InputTag("generalTracks")
    ),
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        InputType = cms.string('MuonCollection'),
        MultipleDepositsFlag = cms.bool(False),
        MuonTrackRefType = cms.string('track'),
        inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons")
    )
)


process.muidAllArbitrated = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('AllArbitrated')
)


process.muidGMStaChiCompatibility = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('GMStaChiCompatibility')
)


process.muidGMTkChiCompatibility = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('GMTkChiCompatibility')
)


process.muidGMTkKinkTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('GMTkKinkTight')
)


process.muidGlobalMuonPromptTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('GlobalMuonPromptTight')
)


process.muidRPCMuLoose = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('RPCMuLoose')
)


process.muidTM2DCompatibilityLoose = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TM2DCompatibilityLoose')
)


process.muidTM2DCompatibilityTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TM2DCompatibilityTight')
)


process.muidTMLastStationAngLoose = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMLastStationAngLoose')
)


process.muidTMLastStationAngTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMLastStationAngTight')
)


process.muidTMLastStationLoose = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMLastStationLoose')
)


process.muidTMLastStationOptimizedLowPtLoose = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMLastStationOptimizedLowPtLoose')
)


process.muidTMLastStationOptimizedLowPtTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMLastStationOptimizedLowPtTight')
)


process.muidTMLastStationTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMLastStationTight')
)


process.muidTMOneStationAngLoose = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMOneStationAngLoose')
)


process.muidTMOneStationAngTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMOneStationAngTight')
)


process.muidTMOneStationLoose = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMOneStationLoose')
)


process.muidTMOneStationTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMOneStationTight')
)


process.muidTrackerMuonArbitrated = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TrackerMuonArbitrated')
)


process.multi5x5BasicClustersCleaned = cms.EDProducer("Multi5x5ClusterProducer",
    IslandBarrelSeedThr = cms.double(0.5),
    IslandEndcapSeedThr = cms.double(0.18),
    RecHitFlagToBeExcluded = cms.vstring(
        'kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'
    ),
    barrelClusterCollection = cms.string('multi5x5BarrelBasicClusters'),
    barrelHitTag = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    doBarrel = cms.bool(False),
    doEndcap = cms.bool(True),
    endcapClusterCollection = cms.string('multi5x5EndcapBasicClusters'),
    endcapHitTag = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    posCalcParameters = cms.PSet(
        LogWeighted = cms.bool(True),
        T0_barl = cms.double(7.4),
        T0_endc = cms.double(3.1),
        T0_endcPresh = cms.double(1.2),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    reassignSeedCrysToClusterItSeeds = cms.bool(True)
)


process.multi5x5BasicClustersUncleaned = cms.EDProducer("Multi5x5ClusterProducer",
    IslandBarrelSeedThr = cms.double(0.5),
    IslandEndcapSeedThr = cms.double(0.18),
    RecHitFlagToBeExcluded = cms.vstring(),
    barrelClusterCollection = cms.string('multi5x5BarrelBasicClusters'),
    barrelHitTag = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    doBarrel = cms.bool(False),
    doEndcap = cms.bool(True),
    endcapClusterCollection = cms.string('multi5x5EndcapBasicClusters'),
    endcapHitTag = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    posCalcParameters = cms.PSet(
        LogWeighted = cms.bool(True),
        T0_barl = cms.double(7.4),
        T0_endc = cms.double(3.1),
        T0_endcPresh = cms.double(1.2),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    reassignSeedCrysToClusterItSeeds = cms.bool(True)
)


process.multi5x5PreshowerClusterShape = cms.EDProducer("PreshowerClusterShapeProducer",
    PreshowerClusterShapeCollectionX = cms.string('multi5x5PreshowerXClustersShape'),
    PreshowerClusterShapeCollectionY = cms.string('multi5x5PreshowerYClustersShape'),
    debugLevel = cms.string('INFO'),
    endcapSClusterProducer = cms.InputTag("correctedMulti5x5SuperClustersWithPreshower"),
    preshPi0Nstrip = cms.int32(5),
    preshRecHitProducer = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    preshStripEnergyCut = cms.double(0.0)
)


process.multi5x5SuperClusters = cms.EDProducer("UnifiedSCCollectionProducer",
    bcCollection = cms.string('multi5x5EndcapBasicClusters'),
    bcCollectionUncleanOnly = cms.string('uncleanOnlyMulti5x5EndcapBasicClusters'),
    cleanBcCollection = cms.InputTag("multi5x5BasicClustersCleaned","multi5x5EndcapBasicClusters"),
    cleanScCollection = cms.InputTag("multi5x5SuperClustersCleaned","multi5x5EndcapSuperClusters"),
    scCollection = cms.string('multi5x5EndcapSuperClusters'),
    scCollectionUncleanOnly = cms.string('uncleanOnlyMulti5x5EndcapSuperClusters'),
    uncleanBcCollection = cms.InputTag("multi5x5BasicClustersUncleaned","multi5x5EndcapBasicClusters"),
    uncleanScCollection = cms.InputTag("multi5x5SuperClustersUncleaned","multi5x5EndcapSuperClusters")
)


process.multi5x5SuperClustersCleaned = cms.EDProducer("Multi5x5SuperClusterProducer",
    barrelClusterTag = cms.InputTag("multi5x5BasicClusters","multi5x5BarrelBasicClustersCleaned"),
    barrelEtaSearchRoad = cms.double(0.06),
    barrelPhiSearchRoad = cms.double(0.8),
    barrelSuperclusterCollection = cms.string('multi5x5BarrelSuperClusters'),
    bremRecoveryPset = cms.PSet(
        barrel = cms.PSet(
            cryMin = cms.int32(2),
            cryVec = cms.vint32(
                16, 13, 11, 10, 9, 
                8, 7, 6, 5, 4, 
                3
            ),
            etVec = cms.vdouble(
                5.0, 10.0, 15.0, 20.0, 30.0, 
                40.0, 45.0, 55.0, 135.0, 195.0, 
                225.0
            )
        ),
        endcap = cms.PSet(
            a = cms.double(47.85),
            b = cms.double(108.8),
            c = cms.double(0.1201)
        )
    ),
    doBarrel = cms.bool(False),
    doEndcaps = cms.bool(True),
    dynamicPhiRoad = cms.bool(False),
    endcapClusterTag = cms.InputTag("multi5x5BasicClustersCleaned","multi5x5EndcapBasicClusters"),
    endcapEtaSearchRoad = cms.double(0.14),
    endcapPhiSearchRoad = cms.double(0.6),
    endcapSuperclusterCollection = cms.string('multi5x5EndcapSuperClusters'),
    seedTransverseEnergyThreshold = cms.double(1.0)
)


process.multi5x5SuperClustersUncleaned = cms.EDProducer("Multi5x5SuperClusterProducer",
    barrelClusterTag = cms.InputTag("multi5x5BasicClusters","multi5x5BarrelBasicClustersCleaned"),
    barrelEtaSearchRoad = cms.double(0.06),
    barrelPhiSearchRoad = cms.double(0.8),
    barrelSuperclusterCollection = cms.string('multi5x5BarrelSuperClusters'),
    bremRecoveryPset = cms.PSet(
        barrel = cms.PSet(
            cryMin = cms.int32(2),
            cryVec = cms.vint32(
                16, 13, 11, 10, 9, 
                8, 7, 6, 5, 4, 
                3
            ),
            etVec = cms.vdouble(
                5.0, 10.0, 15.0, 20.0, 30.0, 
                40.0, 45.0, 55.0, 135.0, 195.0, 
                225.0
            )
        ),
        endcap = cms.PSet(
            a = cms.double(47.85),
            b = cms.double(108.8),
            c = cms.double(0.1201)
        )
    ),
    doBarrel = cms.bool(False),
    doEndcaps = cms.bool(True),
    dynamicPhiRoad = cms.bool(False),
    endcapClusterProducer = cms.string('multi5x5BasicClustersUncleaned'),
    endcapClusterTag = cms.InputTag("multi5x5BasicClustersCleaned","multi5x5EndcapBasicClusters"),
    endcapEtaSearchRoad = cms.double(0.14),
    endcapPhiSearchRoad = cms.double(0.6),
    endcapSuperclusterCollection = cms.string('multi5x5EndcapSuperClusters'),
    seedTransverseEnergyThreshold = cms.double(1.0)
)


process.multi5x5SuperClustersWithPreshower = cms.EDProducer("PreshowerPhiClusterProducer",
    assocSClusterCollection = cms.string(''),
    endcapSClusterProducer = cms.InputTag("multi5x5SuperClusters","multi5x5EndcapSuperClusters"),
    esPhiClusterDeltaEta = cms.double(0.15),
    esPhiClusterDeltaPhi = cms.double(0.12),
    esStripEnergyCut = cms.double(0.0),
    etThresh = cms.double(0.0),
    preshClusterCollectionX = cms.string('preshowerXClusters'),
    preshClusterCollectionY = cms.string('preshowerYClusters'),
    preshRecHitProducer = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES")
)


process.muonCSCDigis = cms.EDProducer("CSCDCCUnpacker",
    Debug = cms.untracked.bool(False),
    ErrorMask = cms.uint32(0),
    ExaminerMask = cms.uint32(535558134),
    FormatedEventDump = cms.untracked.bool(False),
    InputObjects = cms.InputTag("rawDataCollector"),
    PrintEventNumber = cms.untracked.bool(False),
    SuppressZeroLCT = cms.untracked.bool(True),
    UnpackStatusDigis = cms.bool(False),
    UseExaminer = cms.bool(True),
    UseFormatStatus = cms.bool(True),
    UseSelectiveUnpacking = cms.bool(True),
    VisualFEDInspect = cms.untracked.bool(False),
    VisualFEDShort = cms.untracked.bool(False),
    mightGet = cms.optional.untracked.vstring,
    runDQM = cms.untracked.bool(False)
)


process.muonDTDigis = cms.EDProducer("DTuROSRawToDigi",
    debug = cms.untracked.bool(False),
    inputLabel = cms.InputTag("rawDataCollector")
)


process.muonEcalDetIds = cms.EDProducer("InterestingEcalDetIdProducer",
    inputCollection = cms.InputTag("muons1stStep")
)


process.muonGEMDigis = cms.EDProducer("GEMRawToDigiModule",
    InputLabel = cms.InputTag("rawDataCollector"),
    mightGet = cms.optional.untracked.vstring,
    unPackStatusDigis = cms.bool(False),
    useDBEMap = cms.bool(False)
)


process.muonMETValueMapProducer = cms.EDProducer("MuonMETValueMapProducer",
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        dRHcal = cms.double(9999.0),
        dRHcalPreselection = cms.double(0.2),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(True),
        useEcal = cms.bool(False),
        useGEM = cms.bool(False),
        useHO = cms.bool(False),
        useHcal = cms.bool(False),
        useME0 = cms.bool(False),
        useMuon = cms.bool(False),
        usePreshower = cms.bool(False)
    ),
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    isAlsoTkMu = cms.bool(True),
    maxEta = cms.double(2.5),
    maxNormChi2 = cms.double(10.0),
    maxd0 = cms.double(0.2),
    minPt = cms.double(10.0),
    minnHits = cms.int32(11),
    minnValidStaHits = cms.int32(1),
    muonInputTag = cms.InputTag("muons"),
    towerEtThreshold = cms.double(0.3),
    useHO = cms.bool(False),
    useRecHits = cms.bool(False),
    useTrackAssociatorPositions = cms.bool(True)
)


process.muonRPCDigis = cms.EDProducer("RPCUnpackingModule",
    InputLabel = cms.InputTag("rawDataCollector"),
    doSynchro = cms.bool(True),
    mightGet = cms.optional.untracked.vstring
)


process.muonSeededSeedsInOut = cms.EDProducer("MuonReSeeder",
    DoPredictionsOnly = cms.bool(False),
    Fitter = cms.string('KFFitterForRefitInsideOut'),
    MTDRecHitBuilder = cms.string('MTDRecHitBuilder'),
    MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
    Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
    RefitDirection = cms.string('alongMomentum'),
    RefitRPCHits = cms.bool(True),
    Smoother = cms.string('KFSmootherForRefitInsideOut'),
    TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
    cut = cms.string('pt > 2'),
    debug = cms.untracked.bool(False),
    insideOut = cms.bool(True),
    layersToKeep = cms.int32(5),
    src = cms.InputTag("earlyMuons")
)


process.muonSeededSeedsInOutAsTracks = cms.EDProducer("FakeTrackProducerFromSeed",
    src = cms.InputTag("muonSeededSeedsInOut")
)


process.muonSeededSeedsOutIn = cms.EDProducer("OutsideInMuonSeeder",
    cut = cms.string('pt > 10 && outerTrack.hitPattern.muonStationsWithValidHits >= 2'),
    debug = cms.untracked.bool(False),
    errorRescaleFactor = cms.double(2.0),
    fromVertex = cms.bool(True),
    hitCollector = cms.string('hitCollectorForOutInMuonSeeds'),
    hitsToTry = cms.int32(3),
    layersToTry = cms.int32(3),
    maxEtaForTOB = cms.double(1.8),
    minEtaForTEC = cms.double(0.7),
    muonPropagator = cms.string('SteppingHelixPropagatorAlong'),
    src = cms.InputTag("earlyMuons"),
    trackerPropagator = cms.string('PropagatorWithMaterial')
)


process.muonSeededSeedsOutInAsTracks = cms.EDProducer("FakeTrackProducerFromSeed",
    src = cms.InputTag("muonSeededSeedsOutIn")
)


process.muonSeededSeedsOutInDisplaced = cms.EDProducer("OutsideInMuonSeeder",
    cut = cms.string('pt > 10 && outerTrack.hitPattern.muonStationsWithValidHits >= 2'),
    debug = cms.untracked.bool(False),
    errorRescaleFactor = cms.double(2.0),
    fromVertex = cms.bool(False),
    hitCollector = cms.string('hitCollectorForOutInMuonSeeds'),
    hitsToTry = cms.int32(3),
    layersToTry = cms.int32(3),
    maxEtaForTOB = cms.double(1.8),
    minEtaForTEC = cms.double(0.7),
    muonPropagator = cms.string('SteppingHelixPropagatorAlong'),
    src = cms.InputTag("earlyDisplacedMuons"),
    trackerPropagator = cms.string('PropagatorWithMaterial')
)


process.muonSeededSeedsOutInDisplacedAsTracks = cms.EDProducer("FakeTrackProducerFromSeed",
    src = cms.InputTag("muonSeededSeedsOutInDisplaced")
)


process.muonSeededTrackCandidatesInOut = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('none'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('muonSeededTrajectoryBuilderForInOut')
    ),
    TrajectoryCleaner = cms.string('muonSeededTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    reverseTrajectories = cms.bool(False),
    src = cms.InputTag("muonSeededSeedsInOut"),
    useHitsSplitting = cms.bool(True)
)


process.muonSeededTrackCandidatesInOutAsTracks = cms.EDProducer("FakeTrackProducerFromCandidate",
    src = cms.InputTag("muonSeededTrackCandidatesInOut")
)


process.muonSeededTrackCandidatesOutIn = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('muonSeededTrajectoryBuilderForOutIn')
    ),
    TrajectoryCleaner = cms.string('muonSeededTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    numHitsForSeedCleaner = cms.int32(50),
    onlyPixelHitsForSeedCleaner = cms.bool(False),
    reverseTrajectories = cms.bool(False),
    src = cms.InputTag("muonSeededSeedsOutIn"),
    useHitsSplitting = cms.bool(True)
)


process.muonSeededTrackCandidatesOutInAsTracks = cms.EDProducer("FakeTrackProducerFromCandidate",
    src = cms.InputTag("muonSeededTrackCandidatesOutIn")
)


process.muonSeededTrackCandidatesOutInDisplaced = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('muonSeededTrajectoryBuilderForOutInDisplaced')
    ),
    TrajectoryCleaner = cms.string('muonSeededTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    numHitsForSeedCleaner = cms.int32(50),
    onlyPixelHitsForSeedCleaner = cms.bool(False),
    reverseTrajectories = cms.bool(False),
    src = cms.InputTag("muonSeededSeedsOutInDisplaced"),
    useHitsSplitting = cms.bool(True)
)


process.muonSeededTrackCandidatesOutInDisplacedAsTracks = cms.EDProducer("FakeTrackProducerFromCandidate",
    src = cms.InputTag("muonSeededTrackCandidatesOutInDisplaced")
)


process.muonSeededTracksInOut = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('muonSeededStepInOut'),
    Fitter = cms.string('muonSeededFittingSmootherWithOutliersRejectionAndRK'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("muonSeededTrackCandidatesInOut"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.muonSeededTracksInOutClassifier = cms.EDProducer("TrackCutClassifier",
    beamspot = cms.InputTag("offlineBeamSpot"),
    ignoreVertices = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    mva = cms.PSet(
        dr_par = cms.PSet(
            d0err = cms.vdouble(0.003, 0.003, 0.003),
            d0err_par = cms.vdouble(0.001, 0.001, 0.001),
            drWPVerr_par = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
            dr_exp = cms.vint32(2147483647, 2147483647, 2147483647),
            dr_par1 = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
            dr_par2 = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38)
        ),
        dz_par = cms.PSet(
            dzWPVerr_par = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
            dz_exp = cms.vint32(2147483647, 2147483647, 2147483647),
            dz_par1 = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
            dz_par2 = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38)
        ),
        isHLT = cms.bool(False),
        maxChi2 = cms.vdouble(9999.0, 9999.0, 9999.0),
        maxChi2n = cms.vdouble(10.0, 1.0, 0.4),
        maxDr = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
        maxDz = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
        maxDzWrtBS = cms.vdouble(3.40282346639e+38, 24, 15),
        maxLostLayers = cms.vint32(4, 3, 2),
        maxRelPtErr = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
        min3DLayers = cms.vint32(1, 2, 2),
        minHits = cms.vint32(0, 0, 1),
        minHits4pass = cms.vint32(2147483647, 2147483647, 2147483647),
        minLayers = cms.vint32(3, 5, 5),
        minNVtxTrk = cms.int32(2),
        minNdof = cms.vdouble(-1, -1, -1),
        minPixelHits = cms.vint32(0, 0, 0)
    ),
    qualityCuts = cms.vdouble(-0.7, 0.1, 0.7),
    src = cms.InputTag("muonSeededTracksInOut"),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.muonSeededTracksInOutSelector = cms.EDProducer("MultiTrackSelector",
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("muonSeededTracksInOut"),
    trackSelectors = cms.VPSet(
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(False),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(10.0),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.55, 4.0),
            d0_par2 = cms.vdouble(0.55, 4.0),
            dz_par1 = cms.vdouble(0.65, 4.0),
            dz_par2 = cms.vdouble(0.45, 4.0),
            keepAllTracks = cms.bool(False),
            maxNumberLostLayers = cms.uint32(4),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(7),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(5),
            nSigmaZ = cms.double(4.0),
            name = cms.string('muonSeededTracksInOutLoose'),
            preFilterName = cms.string(''),
            qualityBit = cms.string('loose'),
            res_par = cms.vdouble(0.003, 0.01),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(False),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(1.0),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.3, 4.0),
            d0_par2 = cms.vdouble(0.4, 4.0),
            dz_par1 = cms.vdouble(0.35, 4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(3),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(10),
            minNumber3DLayers = cms.uint32(2),
            minNumberLayers = cms.uint32(5),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(6),
            nSigmaZ = cms.double(4.0),
            name = cms.string('muonSeededTracksInOutTight'),
            preFilterName = cms.string('muonSeededTracksInOutLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.01),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(False),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.4),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.3, 4.0),
            d0_par2 = cms.vdouble(0.4, 4.0),
            dz_par1 = cms.vdouble(0.35, 4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(2),
            minNumberLayers = cms.uint32(5),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(7),
            nSigmaZ = cms.double(4.0),
            name = cms.string('muonSeededTracksInOutHighPurity'),
            preFilterName = cms.string('muonSeededTracksInOutTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        )
    ),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(False),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.muonSeededTracksOutIn = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('muonSeededStepOutIn'),
    Fitter = cms.string('muonSeededFittingSmootherWithOutliersRejectionAndRK'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("muonSeededTrackCandidatesOutIn"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.muonSeededTracksOutInClassifier = cms.EDProducer("TrackCutClassifier",
    beamspot = cms.InputTag("offlineBeamSpot"),
    ignoreVertices = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    mva = cms.PSet(
        dr_par = cms.PSet(
            d0err = cms.vdouble(0.003, 0.003, 0.003),
            d0err_par = cms.vdouble(0.001, 0.001, 0.001),
            drWPVerr_par = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
            dr_exp = cms.vint32(2147483647, 2147483647, 2147483647),
            dr_par1 = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
            dr_par2 = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38)
        ),
        dz_par = cms.PSet(
            dzWPVerr_par = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
            dz_exp = cms.vint32(2147483647, 2147483647, 2147483647),
            dz_par1 = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
            dz_par2 = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38)
        ),
        isHLT = cms.bool(False),
        maxChi2 = cms.vdouble(9999.0, 9999.0, 9999.0),
        maxChi2n = cms.vdouble(10.0, 1.0, 0.4),
        maxDr = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
        maxDz = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
        maxDzWrtBS = cms.vdouble(3.40282346639e+38, 24, 15),
        maxLostLayers = cms.vint32(4, 3, 2),
        maxRelPtErr = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
        min3DLayers = cms.vint32(1, 2, 2),
        minHits = cms.vint32(0, 0, 1),
        minHits4pass = cms.vint32(2147483647, 2147483647, 2147483647),
        minLayers = cms.vint32(3, 5, 5),
        minNVtxTrk = cms.int32(2),
        minNdof = cms.vdouble(-1, -1, -1),
        minPixelHits = cms.vint32(0, 0, 0)
    ),
    qualityCuts = cms.vdouble(-0.7, 0.1, 0.7),
    src = cms.InputTag("muonSeededTracksOutIn"),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.muonSeededTracksOutInDisplaced = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('muonSeededStepOutIn'),
    Fitter = cms.string('muonSeededFittingSmootherWithOutliersRejectionAndRK'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("muonSeededTrackCandidatesOutInDisplaced"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.muonSeededTracksOutInDisplacedClassifier = cms.EDProducer("TrackCutClassifier",
    beamspot = cms.InputTag("offlineBeamSpot"),
    ignoreVertices = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    mva = cms.PSet(
        dr_par = cms.PSet(
            d0err = cms.vdouble(0.003, 0.003, 0.003),
            d0err_par = cms.vdouble(0.001, 0.001, 0.001),
            drWPVerr_par = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
            dr_exp = cms.vint32(2147483647, 2147483647, 2147483647),
            dr_par1 = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
            dr_par2 = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38)
        ),
        dz_par = cms.PSet(
            dzWPVerr_par = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
            dz_exp = cms.vint32(2147483647, 2147483647, 2147483647),
            dz_par1 = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
            dz_par2 = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38)
        ),
        isHLT = cms.bool(False),
        maxChi2 = cms.vdouble(9999.0, 9999.0, 9999.0),
        maxChi2n = cms.vdouble(10.0, 1.0, 0.4),
        maxDr = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
        maxDz = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
        maxDzWrtBS = cms.vdouble(3.40282346639e+38, 24, 15),
        maxLostLayers = cms.vint32(4, 3, 2),
        maxRelPtErr = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
        min3DLayers = cms.vint32(1, 2, 2),
        minHits = cms.vint32(0, 0, 1),
        minHits4pass = cms.vint32(2147483647, 2147483647, 2147483647),
        minLayers = cms.vint32(3, 5, 5),
        minNVtxTrk = cms.int32(2),
        minNdof = cms.vdouble(-1, -1, -1),
        minPixelHits = cms.vint32(0, 0, 0)
    ),
    qualityCuts = cms.vdouble(-0.7, 0.1, 0.7),
    src = cms.InputTag("muonSeededTracksOutInDisplaced"),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.muonSeededTracksOutInSelector = cms.EDProducer("MultiTrackSelector",
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("muonSeededTracksOutIn"),
    trackSelectors = cms.VPSet(
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(False),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(10.0),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.55, 4.0),
            d0_par2 = cms.vdouble(0.55, 4.0),
            dz_par1 = cms.vdouble(0.65, 4.0),
            dz_par2 = cms.vdouble(0.45, 4.0),
            keepAllTracks = cms.bool(False),
            maxNumberLostLayers = cms.uint32(4),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(7),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(5),
            nSigmaZ = cms.double(4.0),
            name = cms.string('muonSeededTracksOutInLoose'),
            preFilterName = cms.string(''),
            qualityBit = cms.string('loose'),
            res_par = cms.vdouble(0.003, 0.01),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(False),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(1.0),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.3, 4.0),
            d0_par2 = cms.vdouble(0.4, 4.0),
            dz_par1 = cms.vdouble(0.35, 4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(3),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(10),
            minNumber3DLayers = cms.uint32(2),
            minNumberLayers = cms.uint32(5),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(6),
            nSigmaZ = cms.double(4.0),
            name = cms.string('muonSeededTracksOutInTight'),
            preFilterName = cms.string('muonSeededTracksOutInLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.01),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(False),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.4),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.3, 4.0),
            d0_par2 = cms.vdouble(0.4, 4.0),
            dz_par1 = cms.vdouble(0.35, 4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(2),
            minNumberLayers = cms.uint32(5),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(7),
            nSigmaZ = cms.double(4.0),
            name = cms.string('muonSeededTracksOutInHighPurity'),
            preFilterName = cms.string('muonSeededTracksOutInTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        )
    ),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(False),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.muonSelectionTypeValueMapProducer = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('All')
)


process.muonShowerInformation = cms.EDProducer("MuonShowerInformationProducer",
    ServiceParameters = cms.PSet(
        CSCLayers = cms.untracked.bool(True),
        GEMLayers = cms.untracked.bool(True),
        ME0Layers = cms.bool(True),
        Propagators = cms.untracked.vstring(
            'SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'
        ),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    ShowerInformationFillerParameters = cms.PSet(
        CSCRecSegmentLabel = cms.InputTag("csc2DRecHits"),
        CSCSegmentLabel = cms.InputTag("cscSegments"),
        DT4DRecSegmentLabel = cms.InputTag("dt4DSegments"),
        DTRecSegmentLabel = cms.InputTag("dt1DRecHits"),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
        ServiceParameters = cms.PSet(
            CSCLayers = cms.untracked.bool(True),
            GEMLayers = cms.untracked.bool(True),
            ME0Layers = cms.bool(True),
            Propagators = cms.untracked.vstring(
                'SteppingHelixPropagatorAny', 
                'SteppingHelixPropagatorAlong', 
                'SteppingHelixPropagatorOpposite', 
                'SteppingHelixPropagatorL2Any', 
                'SteppingHelixPropagatorL2Along', 
                'SteppingHelixPropagatorL2Opposite', 
                'SteppingHelixPropagatorAnyNoError', 
                'SteppingHelixPropagatorAlongNoError', 
                'SteppingHelixPropagatorOppositeNoError', 
                'SteppingHelixPropagatorL2AnyNoError', 
                'SteppingHelixPropagatorL2AlongNoError', 
                'SteppingHelixPropagatorL2OppositeNoError', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite', 
                'SmartPropagator', 
                'SmartPropagatorOpposite', 
                'SmartPropagatorAnyOpposite', 
                'SmartPropagatorAny', 
                'SmartPropagatorRK', 
                'SmartPropagatorAnyRK', 
                'StraightLinePropagator'
            ),
            RPCLayers = cms.bool(True),
            UseMuonNavigation = cms.untracked.bool(True)
        ),
        TrackerRecHitBuilder = cms.string('WithTrackAngle')
    ),
    muonCollection = cms.InputTag("muons1stStep"),
    trackCollection = cms.InputTag("generalTracks")
)


process.muons = cms.EDProducer("MuonProducer",
    ActivateDebug = cms.untracked.bool(False),
    ComputeStandardSelectors = cms.bool(True),
    CosmicIdMap = cms.InputTag("cosmicsVeto"),
    EcalIsoDeposits = cms.InputTag("muIsoDepositCalByAssociatorTowers","ecal"),
    FillCosmicsIdMap = cms.bool(True),
    FillDetectorBasedIsolation = cms.bool(True),
    FillPFIsolation = cms.bool(True),
    FillPFMomentumAndAssociation = cms.bool(True),
    FillSelectorMaps = cms.bool(True),
    FillShoweringInfo = cms.bool(True),
    FillTimingInfo = cms.bool(True),
    HcalIsoDeposits = cms.InputTag("muIsoDepositCalByAssociatorTowers","hcal"),
    HoIsoDeposits = cms.InputTag("muIsoDepositCalByAssociatorTowers","ho"),
    InputMuons = cms.InputTag("muons1stStep"),
    JetIsoDeposits = cms.InputTag("muIsoDepositJets"),
    PFCandidates = cms.InputTag("particleFlowTmp"),
    PFIsolation = cms.PSet(
        pfIsoMeanDRProfileR03 = cms.PSet(
            chargedHadron = cms.InputTag("muPFMeanDRIsoValueCharged03"),
            chargedParticle = cms.InputTag("muPFMeanDRIsoValueChargedAll03"),
            neutralHadron = cms.InputTag("muPFMeanDRIsoValueNeutral03"),
            neutralHadronHighThreshold = cms.InputTag("muPFMeanDRIsoValueNeutralHighThreshold03"),
            photon = cms.InputTag("muPFMeanDRIsoValueGamma03"),
            photonHighThreshold = cms.InputTag("muPFMeanDRIsoValueGammaHighThreshold03"),
            pu = cms.InputTag("muPFMeanDRIsoValuePU03")
        ),
        pfIsoMeanDRProfileR04 = cms.PSet(
            chargedHadron = cms.InputTag("muPFMeanDRIsoValueCharged04"),
            chargedParticle = cms.InputTag("muPFMeanDRIsoValueChargedAll04"),
            neutralHadron = cms.InputTag("muPFMeanDRIsoValueNeutral04"),
            neutralHadronHighThreshold = cms.InputTag("muPFMeanDRIsoValueNeutralHighThreshold04"),
            photon = cms.InputTag("muPFMeanDRIsoValueGamma04"),
            photonHighThreshold = cms.InputTag("muPFMeanDRIsoValueGammaHighThreshold04"),
            pu = cms.InputTag("muPFMeanDRIsoValuePU04")
        ),
        pfIsoSumDRProfileR03 = cms.PSet(
            chargedHadron = cms.InputTag("muPFSumDRIsoValueCharged03"),
            chargedParticle = cms.InputTag("muPFSumDRIsoValueChargedAll03"),
            neutralHadron = cms.InputTag("muPFSumDRIsoValueNeutral03"),
            neutralHadronHighThreshold = cms.InputTag("muPFSumDRIsoValueNeutralHighThreshold03"),
            photon = cms.InputTag("muPFSumDRIsoValueGamma03"),
            photonHighThreshold = cms.InputTag("muPFSumDRIsoValueGammaHighThreshold03"),
            pu = cms.InputTag("muPFSumDRIsoValuePU03")
        ),
        pfIsoSumDRProfileR04 = cms.PSet(
            chargedHadron = cms.InputTag("muPFSumDRIsoValueCharged04"),
            chargedParticle = cms.InputTag("muPFSumDRIsoValueChargedAll04"),
            neutralHadron = cms.InputTag("muPFSumDRIsoValueNeutral04"),
            neutralHadronHighThreshold = cms.InputTag("muPFSumDRIsoValueNeutralHighThreshold04"),
            photon = cms.InputTag("muPFSumDRIsoValueGamma04"),
            photonHighThreshold = cms.InputTag("muPFSumDRIsoValueGammaHighThreshold04"),
            pu = cms.InputTag("muPFSumDRIsoValuePU04")
        ),
        pfIsolationR03 = cms.PSet(
            chargedHadron = cms.InputTag("muPFIsoValueCharged03"),
            chargedParticle = cms.InputTag("muPFIsoValueChargedAll03"),
            neutralHadron = cms.InputTag("muPFIsoValueNeutral03"),
            neutralHadronHighThreshold = cms.InputTag("muPFIsoValueNeutralHighThreshold03"),
            photon = cms.InputTag("muPFIsoValueGamma03"),
            photonHighThreshold = cms.InputTag("muPFIsoValueGammaHighThreshold03"),
            pu = cms.InputTag("muPFIsoValuePU03")
        ),
        pfIsolationR04 = cms.PSet(
            chargedHadron = cms.InputTag("muPFIsoValueCharged04"),
            chargedParticle = cms.InputTag("muPFIsoValueChargedAll04"),
            neutralHadron = cms.InputTag("muPFIsoValueNeutral04"),
            neutralHadronHighThreshold = cms.InputTag("muPFIsoValueNeutralHighThreshold04"),
            photon = cms.InputTag("muPFIsoValueGamma04"),
            photonHighThreshold = cms.InputTag("muPFIsoValueGammaHighThreshold04"),
            pu = cms.InputTag("muPFIsoValuePU04")
        )
    ),
    SelectorMaps = cms.VInputTag(
        cms.InputTag("muidTMLastStationOptimizedLowPtLoose"), cms.InputTag("muidTMLastStationOptimizedLowPtTight"), cms.InputTag("muidTM2DCompatibilityLoose"), cms.InputTag("muidTM2DCompatibilityTight"), cms.InputTag("muidTrackerMuonArbitrated"), 
        cms.InputTag("muidTMLastStationAngLoose"), cms.InputTag("muidGlobalMuonPromptTight"), cms.InputTag("muidGMStaChiCompatibility"), cms.InputTag("muidTMLastStationAngTight"), cms.InputTag("muidGMTkChiCompatibility"), 
        cms.InputTag("muidTMOneStationAngTight"), cms.InputTag("muidTMOneStationAngLoose"), cms.InputTag("muidTMLastStationLoose"), cms.InputTag("muidTMLastStationTight"), cms.InputTag("muidTMOneStationTight"), 
        cms.InputTag("muidTMOneStationLoose"), cms.InputTag("muidAllArbitrated"), cms.InputTag("muidGMTkKinkTight"), cms.InputTag("muidRPCMuLoose")
    ),
    ShowerInfoMap = cms.InputTag("muonShowerInformation"),
    TrackIsoDeposits = cms.InputTag("muIsoDepositTk"),
    vertices = cms.InputTag("offlinePrimaryVertices")
)


process.muons1stStep = cms.EDProducer("MuonIdProducer",
    CaloExtractorPSet = cms.PSet(
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        DR_Max = cms.double(0.5),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DR_Veto_HO = cms.double(0.1),
        DepositInstanceLabels = cms.vstring(
            'ecal', 
            'hcal', 
            'ho'
        ),
        DepositLabel = cms.untracked.string('Cal'),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Noise_EB = cms.double(0.025),
        Noise_EE = cms.double(0.1),
        Noise_HB = cms.double(0.2),
        Noise_HE = cms.double(0.2),
        Noise_HO = cms.double(0.2),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Threshold_HO = cms.double(0.5),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            dRHcal = cms.double(1.0),
            dRHcalPreselection = cms.double(1.0),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useGEM = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useME0 = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        ),
        UseRecHitsFlag = cms.bool(False)
    ),
    JetExtractorPSet = cms.PSet(
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.1),
        ExcludeMuonVeto = cms.bool(True),
        JetCollectionLabel = cms.InputTag("ak4CaloJets"),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold = cms.double(5.0),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            dRHcal = cms.double(0.5),
            dRHcalPreselection = cms.double(0.5),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useGEM = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useME0 = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        )
    ),
    MuonCaloCompatibility = cms.PSet(
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        allSiPMHO = cms.bool(False),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    ShowerDigiFillerParameters = cms.PSet(
        cscDigiCollectionLabel = cms.InputTag("muonCSCDigis","MuonCSCStripDigi"),
        digiMaxDistanceX = cms.double(25.0),
        dtDigiCollectionLabel = cms.InputTag("muonDTDigis")
    ),
    TimingFillerParameters = cms.PSet(
        CSCTimingParameters = cms.PSet(
            CSCStripError = cms.double(7.0),
            CSCStripTimeOffset = cms.double(0.0),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            PruneCut = cms.double(9.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring(
                    'SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'
                ),
                RPCLayers = cms.bool(True)
            ),
            UseStripTime = cms.bool(True),
            UseWireTime = cms.bool(True),
            debug = cms.bool(False)
        ),
        DTTimingParameters = cms.PSet(
            DTTimeOffset = cms.double(0.0),
            DoWireCorr = cms.bool(True),
            DropTheta = cms.bool(True),
            HitError = cms.double(2.8),
            HitsMin = cms.int32(3),
            PruneCut = cms.double(5.0),
            RequireBothProjections = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring(
                    'SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'
                ),
                RPCLayers = cms.bool(True)
            ),
            UseSegmentT0 = cms.bool(False),
            debug = cms.bool(False)
        ),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        MatchParameters = cms.PSet(
            CSCsegments = cms.InputTag("cscSegments"),
            DTradius = cms.double(0.01),
            DTsegments = cms.InputTag("dt4DSegments"),
            RPChits = cms.InputTag("rpcRecHits"),
            TightMatchCSC = cms.bool(True),
            TightMatchDT = cms.bool(False)
        ),
        UseCSC = cms.bool(True),
        UseDT = cms.bool(True),
        UseECAL = cms.bool(False)
    ),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        dRHcal = cms.double(9999.0),
        dRHcalPreselection = cms.double(0.2),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(True),
        useGEM = cms.bool(True),
        useHO = cms.bool(True),
        useHcal = cms.bool(True),
        useME0 = cms.bool(True),
        useMuon = cms.bool(True),
        usePreshower = cms.bool(False)
    ),
    TrackExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(0.5),
        DR_Veto = cms.double(0.01),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(0.1),
        Diff_z = cms.double(0.2),
        NHits_Min = cms.uint32(0),
        Pt_Min = cms.double(-1.0),
        inputTrackCollection = cms.InputTag("generalTracks")
    ),
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        MTDRecHitBuilder = cms.string('MTDRecHitBuilder'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        diagonalOnly = cms.bool(False),
        usePosition = cms.bool(True)
    ),
    addExtraSoftMuons = cms.bool(False),
    arbitrateTrackerMuons = cms.bool(True),
    arbitrationCleanerOptions = cms.PSet(
        ClusterDPhi = cms.double(0.6),
        ClusterDTheta = cms.double(0.02),
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        OverlapDTheta = cms.double(0.02)
    ),
    debugWithTruthMatching = cms.bool(False),
    ecalDepositName = cms.string('ecal'),
    fillCaloCompatibility = cms.bool(True),
    fillEnergy = cms.bool(True),
    fillGlobalTrackQuality = cms.bool(True),
    fillGlobalTrackRefits = cms.bool(True),
    fillIsolation = cms.bool(True),
    fillMatching = cms.bool(True),
    fillShowerDigis = cms.bool(True),
    fillTrackerKink = cms.bool(True),
    globalTrackQualityInputTag = cms.InputTag("glbTrackQual"),
    hcalDepositName = cms.string('hcal'),
    hoDepositName = cms.string('ho'),
    inputCollectionLabels = cms.VInputTag(
        cms.InputTag("generalTracks"), cms.InputTag("globalMuons"), cms.InputTag("standAloneMuons","UpdatedAtVtx"), cms.InputTag("tevMuons","firstHit"), cms.InputTag("tevMuons","picky"), 
        cms.InputTag("tevMuons","dyt")
    ),
    inputCollectionTypes = cms.vstring(
        'inner tracks', 
        'links', 
        'outer tracks', 
        'tev firstHit', 
        'tev picky', 
        'tev dyt'
    ),
    jetDepositName = cms.string('jets'),
    maxAbsDx = cms.double(3.0),
    maxAbsDy = cms.double(9999.0),
    maxAbsEta = cms.double(3.0),
    maxAbsPullX = cms.double(3.0),
    maxAbsPullY = cms.double(9999.0),
    minCaloCompatibility = cms.double(0.6),
    minNumberOfMatches = cms.int32(1),
    minP = cms.double(2.5),
    minPCaloMuon = cms.double(1000000000.0),
    minPt = cms.double(0.5),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    runArbitrationCleaner = cms.bool(True),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    storeCrossedHcalRecHits = cms.bool(True),
    trackDepositName = cms.string('tracker'),
    writeIsoDeposits = cms.bool(True)
)


process.muonsFromCosmics = cms.EDProducer("MuonIdProducer",
    CaloExtractorPSet = cms.PSet(
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        DR_Max = cms.double(0.5),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DR_Veto_HO = cms.double(0.1),
        DepositInstanceLabels = cms.vstring(
            'ecal', 
            'hcal', 
            'ho'
        ),
        DepositLabel = cms.untracked.string('Cal'),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Noise_EB = cms.double(0.025),
        Noise_EE = cms.double(0.1),
        Noise_HB = cms.double(0.2),
        Noise_HE = cms.double(0.2),
        Noise_HO = cms.double(0.2),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Threshold_HO = cms.double(0.5),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            dRHcal = cms.double(1.0),
            dRHcalPreselection = cms.double(1.0),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useGEM = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useME0 = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        ),
        UseRecHitsFlag = cms.bool(False)
    ),
    JetExtractorPSet = cms.PSet(
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.1),
        ExcludeMuonVeto = cms.bool(True),
        JetCollectionLabel = cms.InputTag("ak4CaloJets"),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold = cms.double(5.0),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            dRHcal = cms.double(0.5),
            dRHcalPreselection = cms.double(0.5),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useGEM = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useME0 = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        )
    ),
    MuonCaloCompatibility = cms.PSet(
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        allSiPMHO = cms.bool(False),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    ShowerDigiFillerParameters = cms.PSet(
        cscDigiCollectionLabel = cms.InputTag("muonCSCDigis","MuonCSCStripDigi"),
        digiMaxDistanceX = cms.double(25.0),
        dtDigiCollectionLabel = cms.InputTag("muonDTDigis")
    ),
    TimingFillerParameters = cms.PSet(
        CSCTimingParameters = cms.PSet(
            CSCStripError = cms.double(7.0),
            CSCStripTimeOffset = cms.double(0.0),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            PruneCut = cms.double(9999),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring(
                    'SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'
                ),
                RPCLayers = cms.bool(True)
            ),
            UseStripTime = cms.bool(True),
            UseWireTime = cms.bool(True),
            debug = cms.bool(False)
        ),
        DTTimingParameters = cms.PSet(
            DTTimeOffset = cms.double(0.0),
            DoWireCorr = cms.bool(True),
            DropTheta = cms.bool(True),
            HitError = cms.double(2.8),
            HitsMin = cms.int32(3),
            PruneCut = cms.double(9999),
            RequireBothProjections = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring(
                    'SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'
                ),
                RPCLayers = cms.bool(True)
            ),
            UseSegmentT0 = cms.bool(False),
            debug = cms.bool(False)
        ),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        MatchParameters = cms.PSet(
            CSCsegments = cms.InputTag("cscSegments"),
            DTradius = cms.double(0.01),
            DTsegments = cms.InputTag("dt4DCosmicSegments"),
            RPChits = cms.InputTag("rpcRecHits"),
            TightMatchCSC = cms.bool(True),
            TightMatchDT = cms.bool(False)
        ),
        UseCSC = cms.bool(True),
        UseDT = cms.bool(True),
        UseECAL = cms.bool(False)
    ),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DCosmicSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        dRHcal = cms.double(9999.0),
        dRHcalPreselection = cms.double(0.2),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(True),
        useGEM = cms.bool(True),
        useHO = cms.bool(True),
        useHcal = cms.bool(True),
        useME0 = cms.bool(True),
        useMuon = cms.bool(True),
        usePreshower = cms.bool(False)
    ),
    TrackExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(0.5),
        DR_Veto = cms.double(0.01),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(0.1),
        Diff_z = cms.double(0.2),
        NHits_Min = cms.uint32(0),
        Pt_Min = cms.double(-1.0),
        inputTrackCollection = cms.InputTag("cosmicMuons")
    ),
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        MTDRecHitBuilder = cms.string('MTDRecHitBuilder'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        diagonalOnly = cms.bool(False),
        usePosition = cms.bool(True)
    ),
    addExtraSoftMuons = cms.bool(False),
    arbitrateTrackerMuons = cms.bool(True),
    arbitrationCleanerOptions = cms.PSet(
        ClusterDPhi = cms.double(0.6),
        ClusterDTheta = cms.double(0.02),
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        OverlapDTheta = cms.double(0.02)
    ),
    debugWithTruthMatching = cms.bool(False),
    ecalDepositName = cms.string('ecal'),
    fillCaloCompatibility = cms.bool(True),
    fillEnergy = cms.bool(True),
    fillGlobalTrackQuality = cms.bool(False),
    fillGlobalTrackRefits = cms.bool(False),
    fillIsolation = cms.bool(False),
    fillMatching = cms.bool(True),
    fillShowerDigis = cms.bool(True),
    fillTrackerKink = cms.bool(True),
    globalTrackQualityInputTag = cms.InputTag("glbTrackQual"),
    hcalDepositName = cms.string('hcal'),
    hoDepositName = cms.string('ho'),
    inputCollectionLabels = cms.VInputTag("cosmicMuons"),
    inputCollectionTypes = cms.vstring('outer tracks'),
    jetDepositName = cms.string('jets'),
    maxAbsDx = cms.double(3.0),
    maxAbsDy = cms.double(9999.0),
    maxAbsEta = cms.double(3.0),
    maxAbsPullX = cms.double(3.0),
    maxAbsPullY = cms.double(9999.0),
    minCaloCompatibility = cms.double(0.6),
    minNumberOfMatches = cms.int32(1),
    minP = cms.double(2.5),
    minPCaloMuon = cms.double(1000000000.0),
    minPt = cms.double(0.5),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    runArbitrationCleaner = cms.bool(True),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    storeCrossedHcalRecHits = cms.bool(True),
    trackDepositName = cms.string('tracker'),
    writeIsoDeposits = cms.bool(True)
)


process.muonsFromCosmics1Leg = cms.EDProducer("MuonIdProducer",
    CaloExtractorPSet = cms.PSet(
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        DR_Max = cms.double(0.5),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DR_Veto_HO = cms.double(0.1),
        DepositInstanceLabels = cms.vstring(
            'ecal', 
            'hcal', 
            'ho'
        ),
        DepositLabel = cms.untracked.string('Cal'),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Noise_EB = cms.double(0.025),
        Noise_EE = cms.double(0.1),
        Noise_HB = cms.double(0.2),
        Noise_HE = cms.double(0.2),
        Noise_HO = cms.double(0.2),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Threshold_HO = cms.double(0.5),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            dRHcal = cms.double(1.0),
            dRHcalPreselection = cms.double(1.0),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useGEM = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useME0 = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        ),
        UseRecHitsFlag = cms.bool(False)
    ),
    JetExtractorPSet = cms.PSet(
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.1),
        ExcludeMuonVeto = cms.bool(True),
        JetCollectionLabel = cms.InputTag("ak4CaloJets"),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold = cms.double(5.0),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            dRHcal = cms.double(0.5),
            dRHcalPreselection = cms.double(0.5),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useGEM = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useME0 = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        )
    ),
    MuonCaloCompatibility = cms.PSet(
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        allSiPMHO = cms.bool(False),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    ShowerDigiFillerParameters = cms.PSet(
        cscDigiCollectionLabel = cms.InputTag("muonCSCDigis","MuonCSCStripDigi"),
        digiMaxDistanceX = cms.double(25.0),
        dtDigiCollectionLabel = cms.InputTag("muonDTDigis")
    ),
    TimingFillerParameters = cms.PSet(
        CSCTimingParameters = cms.PSet(
            CSCStripError = cms.double(7.0),
            CSCStripTimeOffset = cms.double(0.0),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            PruneCut = cms.double(9999),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring(
                    'SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'
                ),
                RPCLayers = cms.bool(True)
            ),
            UseStripTime = cms.bool(True),
            UseWireTime = cms.bool(True),
            debug = cms.bool(False)
        ),
        DTTimingParameters = cms.PSet(
            DTTimeOffset = cms.double(0.0),
            DoWireCorr = cms.bool(True),
            DropTheta = cms.bool(True),
            HitError = cms.double(2.8),
            HitsMin = cms.int32(3),
            PruneCut = cms.double(9999),
            RequireBothProjections = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring(
                    'SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'
                ),
                RPCLayers = cms.bool(True)
            ),
            UseSegmentT0 = cms.bool(False),
            debug = cms.bool(False)
        ),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        MatchParameters = cms.PSet(
            CSCsegments = cms.InputTag("cscSegments"),
            DTradius = cms.double(0.01),
            DTsegments = cms.InputTag("dt4DCosmicSegments"),
            RPChits = cms.InputTag("rpcRecHits"),
            TightMatchCSC = cms.bool(True),
            TightMatchDT = cms.bool(False)
        ),
        UseCSC = cms.bool(True),
        UseDT = cms.bool(True),
        UseECAL = cms.bool(False)
    ),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DCosmicSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        dRHcal = cms.double(9999.0),
        dRHcalPreselection = cms.double(0.2),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(True),
        useGEM = cms.bool(True),
        useHO = cms.bool(True),
        useHcal = cms.bool(True),
        useME0 = cms.bool(True),
        useMuon = cms.bool(True),
        usePreshower = cms.bool(False)
    ),
    TrackExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(0.5),
        DR_Veto = cms.double(0.01),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(0.1),
        Diff_z = cms.double(0.2),
        NHits_Min = cms.uint32(0),
        Pt_Min = cms.double(-1.0),
        inputTrackCollection = cms.InputTag("cosmicMuons1Leg")
    ),
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        MTDRecHitBuilder = cms.string('MTDRecHitBuilder'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        diagonalOnly = cms.bool(False),
        usePosition = cms.bool(True)
    ),
    addExtraSoftMuons = cms.bool(False),
    arbitrateTrackerMuons = cms.bool(True),
    arbitrationCleanerOptions = cms.PSet(
        ClusterDPhi = cms.double(0.6),
        ClusterDTheta = cms.double(0.02),
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        OverlapDTheta = cms.double(0.02)
    ),
    debugWithTruthMatching = cms.bool(False),
    ecalDepositName = cms.string('ecal'),
    fillCaloCompatibility = cms.bool(True),
    fillEnergy = cms.bool(True),
    fillGlobalTrackQuality = cms.bool(False),
    fillGlobalTrackRefits = cms.bool(False),
    fillIsolation = cms.bool(False),
    fillMatching = cms.bool(True),
    fillShowerDigis = cms.bool(True),
    fillTrackerKink = cms.bool(True),
    globalTrackQualityInputTag = cms.InputTag("glbTrackQual"),
    hcalDepositName = cms.string('hcal'),
    hoDepositName = cms.string('ho'),
    inputCollectionLabels = cms.VInputTag("cosmicMuons1Leg"),
    inputCollectionTypes = cms.vstring('outer tracks'),
    jetDepositName = cms.string('jets'),
    maxAbsDx = cms.double(3.0),
    maxAbsDy = cms.double(9999.0),
    maxAbsEta = cms.double(3.0),
    maxAbsPullX = cms.double(3.0),
    maxAbsPullY = cms.double(9999.0),
    minCaloCompatibility = cms.double(0.6),
    minNumberOfMatches = cms.int32(1),
    minP = cms.double(2.5),
    minPCaloMuon = cms.double(1000000000.0),
    minPt = cms.double(0.5),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    runArbitrationCleaner = cms.bool(True),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    storeCrossedHcalRecHits = cms.bool(True),
    trackDepositName = cms.string('tracker'),
    writeIsoDeposits = cms.bool(True)
)


process.muonsWithSET = cms.EDProducer("MuonIdProducer",
    CaloExtractorPSet = cms.PSet(
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        DR_Max = cms.double(0.5),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DR_Veto_HO = cms.double(0.1),
        DepositInstanceLabels = cms.vstring(
            'ecal', 
            'hcal', 
            'ho'
        ),
        DepositLabel = cms.untracked.string('Cal'),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Noise_EB = cms.double(0.025),
        Noise_EE = cms.double(0.1),
        Noise_HB = cms.double(0.2),
        Noise_HE = cms.double(0.2),
        Noise_HO = cms.double(0.2),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Threshold_HO = cms.double(0.5),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            dRHcal = cms.double(1.0),
            dRHcalPreselection = cms.double(1.0),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useGEM = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useME0 = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        ),
        UseRecHitsFlag = cms.bool(False)
    ),
    JetExtractorPSet = cms.PSet(
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.1),
        ExcludeMuonVeto = cms.bool(True),
        JetCollectionLabel = cms.InputTag("ak4CaloJets"),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold = cms.double(5.0),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            dRHcal = cms.double(0.5),
            dRHcalPreselection = cms.double(0.5),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useGEM = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useME0 = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        )
    ),
    MuonCaloCompatibility = cms.PSet(
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        allSiPMHO = cms.bool(False),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    ShowerDigiFillerParameters = cms.PSet(
        cscDigiCollectionLabel = cms.InputTag("muonCSCDigis","MuonCSCStripDigi"),
        digiMaxDistanceX = cms.double(25.0),
        dtDigiCollectionLabel = cms.InputTag("muonDTDigis")
    ),
    TimingFillerParameters = cms.PSet(
        CSCTimingParameters = cms.PSet(
            CSCStripError = cms.double(7.0),
            CSCStripTimeOffset = cms.double(0.0),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            PruneCut = cms.double(9.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring(
                    'SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'
                ),
                RPCLayers = cms.bool(True)
            ),
            UseStripTime = cms.bool(True),
            UseWireTime = cms.bool(True),
            debug = cms.bool(False)
        ),
        DTTimingParameters = cms.PSet(
            DTTimeOffset = cms.double(0.0),
            DoWireCorr = cms.bool(True),
            DropTheta = cms.bool(True),
            HitError = cms.double(2.8),
            HitsMin = cms.int32(3),
            PruneCut = cms.double(5.0),
            RequireBothProjections = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring(
                    'SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'
                ),
                RPCLayers = cms.bool(True)
            ),
            UseSegmentT0 = cms.bool(False),
            debug = cms.bool(False)
        ),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        MatchParameters = cms.PSet(
            CSCsegments = cms.InputTag("cscSegments"),
            DTradius = cms.double(0.01),
            DTsegments = cms.InputTag("dt4DSegments"),
            RPChits = cms.InputTag("rpcRecHits"),
            TightMatchCSC = cms.bool(True),
            TightMatchDT = cms.bool(False)
        ),
        UseCSC = cms.bool(True),
        UseDT = cms.bool(True),
        UseECAL = cms.bool(False)
    ),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        dRHcal = cms.double(9999.0),
        dRHcalPreselection = cms.double(0.2),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(True),
        useGEM = cms.bool(True),
        useHO = cms.bool(True),
        useHcal = cms.bool(True),
        useME0 = cms.bool(True),
        useMuon = cms.bool(True),
        usePreshower = cms.bool(False)
    ),
    TrackExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(0.5),
        DR_Veto = cms.double(0.01),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(0.1),
        Diff_z = cms.double(0.2),
        NHits_Min = cms.uint32(0),
        Pt_Min = cms.double(-1.0),
        inputTrackCollection = cms.InputTag("generalTracks")
    ),
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        MTDRecHitBuilder = cms.string('MTDRecHitBuilder'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        diagonalOnly = cms.bool(False),
        usePosition = cms.bool(True)
    ),
    addExtraSoftMuons = cms.bool(False),
    arbitrateTrackerMuons = cms.bool(True),
    arbitrationCleanerOptions = cms.PSet(
        ClusterDPhi = cms.double(0.6),
        ClusterDTheta = cms.double(0.02),
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        OverlapDTheta = cms.double(0.02)
    ),
    debugWithTruthMatching = cms.bool(False),
    ecalDepositName = cms.string('ecal'),
    fillCaloCompatibility = cms.bool(True),
    fillEnergy = cms.bool(True),
    fillGlobalTrackQuality = cms.bool(True),
    fillGlobalTrackRefits = cms.bool(True),
    fillIsolation = cms.bool(True),
    fillMatching = cms.bool(True),
    fillShowerDigis = cms.bool(True),
    fillTrackerKink = cms.bool(True),
    globalTrackQualityInputTag = cms.InputTag("glbTrackQual"),
    hcalDepositName = cms.string('hcal'),
    hoDepositName = cms.string('ho'),
    inputCollectionLabels = cms.VInputTag("generalTracks", "globalSETMuons", cms.InputTag("standAloneSETMuons","UpdatedAtVtx")),
    inputCollectionTypes = cms.vstring(
        'inner tracks', 
        'links', 
        'outer tracks'
    ),
    jetDepositName = cms.string('jets'),
    maxAbsDx = cms.double(3.0),
    maxAbsDy = cms.double(9999.0),
    maxAbsEta = cms.double(3.0),
    maxAbsPullX = cms.double(3.0),
    maxAbsPullY = cms.double(9999.0),
    minCaloCompatibility = cms.double(0.6),
    minNumberOfMatches = cms.int32(1),
    minP = cms.double(2.5),
    minPCaloMuon = cms.double(1000000000.0),
    minPt = cms.double(0.5),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    runArbitrationCleaner = cms.bool(True),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    storeCrossedHcalRecHits = cms.bool(True),
    trackDepositName = cms.string('tracker'),
    writeIsoDeposits = cms.bool(True)
)


process.muontiming = cms.EDProducer("MuonTimingProducer",
    MuonCollection = cms.InputTag("muons"),
    TimingFillerParameters = cms.PSet(
        CSCTimingParameters = cms.PSet(
            CSCStripError = cms.double(7.0),
            CSCStripTimeOffset = cms.double(0.0),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            PruneCut = cms.double(9.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring(
                    'SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'
                ),
                RPCLayers = cms.bool(True)
            ),
            UseStripTime = cms.bool(True),
            UseWireTime = cms.bool(True),
            debug = cms.bool(False)
        ),
        DTTimingParameters = cms.PSet(
            DTTimeOffset = cms.double(0.0),
            DoWireCorr = cms.bool(True),
            DropTheta = cms.bool(True),
            HitError = cms.double(2.8),
            HitsMin = cms.int32(3),
            PruneCut = cms.double(5.0),
            RequireBothProjections = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring(
                    'SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'
                ),
                RPCLayers = cms.bool(True)
            ),
            UseSegmentT0 = cms.bool(False),
            debug = cms.bool(False)
        ),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        MatchParameters = cms.PSet(
            CSCsegments = cms.InputTag("cscSegments"),
            DTradius = cms.double(0.01),
            DTsegments = cms.InputTag("dt4DSegments"),
            RPChits = cms.InputTag("rpcRecHits"),
            TightMatchCSC = cms.bool(True),
            TightMatchDT = cms.bool(False)
        ),
        UseCSC = cms.bool(True),
        UseDT = cms.bool(True),
        UseECAL = cms.bool(False)
    )
)


process.mustacheConversionTrackCandidates = cms.EDProducer("ConversionTrackCandidateProducer",
    InOutRedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    MeasurementTrackerName = cms.string(''),
    MissingHitPenalty = cms.double(20.0),
    OutInRedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    RecHitFlagToBeExcludedEB = cms.vstring(
        'kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'
    ),
    RecHitFlagToBeExcludedEE = cms.vstring(
        'kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'
    ),
    RecHitSeverityToBeExcludedEB = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    RecHitSeverityToBeExcludedEE = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    TrajectoryBuilder = cms.string('TrajectoryBuilderForConversions'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('TrajectoryBuilderForConversions')
    ),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('alongMomElePropagator'),
        propagatorOppositeTISE = cms.string('oppositeToMomElePropagator')
    ),
    ValidHitBonus = cms.double(5.0),
    allowSharedFirstHit = cms.bool(True),
    barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    bcBarrelCollection = cms.InputTag("particleFlowSuperClusterECAL","particleFlowBasicClusterECALBarrel"),
    bcECut = cms.double(1.5),
    bcEndcapCollection = cms.InputTag("particleFlowSuperClusterECAL","particleFlowBasicClusterECALEndcap"),
    bcEtCut = cms.double(1.5),
    ecalIsoCut_offset = cms.double(999999999),
    ecalIsoCut_slope = cms.double(0.0),
    endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    fractionShared = cms.double(0.5),
    hOverEConeSize = cms.double(0.15),
    hcalTowers = cms.InputTag("towerMaker"),
    inOutTrackCandidateCollection = cms.string('inOutTracksFromConversions'),
    inOutTrackCandidateSCAssociationCollection = cms.string('inOutTrackCandidateSCAssociationCollection'),
    isoConeR = cms.double(0.4),
    isoEMin = cms.double(0.08),
    isoEtMin = cms.double(0.0),
    isoEtaSlice = cms.double(2.5),
    isoInnerConeR = cms.double(3.5),
    maxHOverE = cms.double(0.15),
    maxNumOfSeedsInOut = cms.int32(50),
    maxNumOfSeedsOutIn = cms.int32(50),
    minSCEt = cms.double(20.0),
    outInTrackCandidateCollection = cms.string('outInTracksFromConversions'),
    outInTrackCandidateSCAssociationCollection = cms.string('outInTrackCandidateSCAssociationCollection'),
    scHybridBarrelProducer = cms.InputTag("particleFlowSuperClusterECAL","particleFlowSuperClusterECALBarrel"),
    scIslandEndcapProducer = cms.InputTag("particleFlowSuperClusterECAL","particleFlowSuperClusterECALEndcapWithPreshower"),
    useEtCut = cms.bool(True),
    useHitsSplitting = cms.bool(False),
    useNumXstals = cms.bool(True),
    vetoClusteredHits = cms.bool(False)
)


process.mvaElectrons = cms.EDProducer("ElectronIdMVABased",
    HZZmvaWeightFile = cms.vstring(
        'RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_10_17Feb2011.weights.xml', 
        'RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_12_17Feb2011.weights.xml', 
        'RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_20_17Feb2011.weights.xml', 
        'RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_22_17Feb2011.weights.xml'
    ),
    electronTag = cms.InputTag("electronsWithPresel"),
    thresholdBarrel = cms.double(-0.1875),
    thresholdEndcap = cms.double(-0.1075),
    thresholdIsoDR03Barrel = cms.double(10.0),
    thresholdIsoDR03Endcap = cms.double(10.0),
    vertexTag = cms.InputTag("offlinePrimaryVertices")
)


process.negativeCombinedInclusiveSecondaryVertexV2BJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('negativeCombinedSecondaryVertexV2Computer'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("inclusiveSecondaryVertexFinderNegativeTagInfos"))
)


process.negativeCombinedMVAV2BJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('negativeCombinedMVAV2Computer'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("secondaryVertexNegativeTagInfos"), cms.InputTag("inclusiveSecondaryVertexFinderNegativeTagInfos"), cms.InputTag("softPFMuonsTagInfos"), cms.InputTag("softPFElectronsTagInfos"))
)


process.negativeCombinedSecondaryVertexV2BJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('negativeCombinedSecondaryVertexV2Computer'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("secondaryVertexNegativeTagInfos"))
)


process.negativeOnlyJetBProbabilityBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('negativeOnlyJetBProbabilityComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.negativeOnlyJetProbabilityBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('negativeOnlyJetProbabilityComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.negativeSimpleInclusiveSecondaryVertexHighEffBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex2TrkComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("inclusiveSecondaryVertexFinderFilteredNegativeTagInfos"))
)


process.negativeSimpleInclusiveSecondaryVertexHighPurBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex3TrkComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("inclusiveSecondaryVertexFinderFilteredNegativeTagInfos"))
)


process.negativeSimpleSecondaryVertexHighEffBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex2TrkComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexNegativeTagInfos"))
)


process.negativeSimpleSecondaryVertexHighPurBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex3TrkComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexNegativeTagInfos"))
)


process.negativeSoftPFElectronBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('negativeSoftPFElectronComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFElectronsTagInfos"))
)


process.negativeSoftPFElectronByIP2dBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('negativeSoftPFElectronByIP2dComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFElectronsTagInfos"))
)


process.negativeSoftPFElectronByIP3dBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('negativeSoftPFElectronByIP3dComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFElectronsTagInfos"))
)


process.negativeSoftPFElectronByPtBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('negativeSoftPFElectronByPtComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFElectronsTagInfos"))
)


process.negativeSoftPFMuonBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('negativeSoftPFMuonComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFMuonsTagInfos"))
)


process.negativeSoftPFMuonByIP2dBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('negativeSoftPFMuonByIP2dComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFMuonsTagInfos"))
)


process.negativeSoftPFMuonByIP3dBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('negativeSoftPFMuonByIP3dComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFMuonsTagInfos"))
)


process.negativeSoftPFMuonByPtBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('negativeSoftPFMuonByPtComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFMuonsTagInfos"))
)


process.negativeTrackCountingHighEffBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('negativeTrackCounting3D2ndComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.negativeTrackCountingHighPurBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('negativeTrackCounting3D3rdComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.newCombinedSeeds = cms.EDProducer("SeedCombiner",
    seedCollections = cms.VInputTag("initialStepSeeds", "highPtTripletStepSeeds", "tripletElectronSeeds")
)


process.offlineBeamSpot = cms.EDProducer("BeamSpotProducer")


process.offlinePrimaryVertices = cms.EDProducer("RecoChargedRefCandidatePrimaryVertexSorter",
    assignment = cms.PSet(
        maxDistanceToJetAxis = cms.double(0.07),
        maxDtSigForPrimaryAssignment = cms.double(4.0),
        maxDxyForJetAxisAssigment = cms.double(0.1),
        maxDxyForNotReconstructedPrimary = cms.double(0.01),
        maxDxySigForNotReconstructedPrimary = cms.double(2),
        maxDzErrorForPrimaryAssignment = cms.double(0.05),
        maxDzForJetAxisAssigment = cms.double(0.1),
        maxDzForPrimaryAssignment = cms.double(0.1),
        maxDzSigForPrimaryAssignment = cms.double(5.0),
        maxJetDeltaR = cms.double(0.5),
        minJetPt = cms.double(25),
        preferHighRanked = cms.bool(False),
        useTiming = cms.bool(False)
    ),
    jets = cms.InputTag("ak4CaloJetsForTrk"),
    particles = cms.InputTag("trackRefsForJetsBeforeSorting"),
    produceAssociationToOriginalVertices = cms.bool(False),
    produceNoPileUpCollection = cms.bool(False),
    producePileUpCollection = cms.bool(False),
    produceSortedVertices = cms.bool(True),
    qualityForPrimary = cms.int32(3),
    sorting = cms.PSet(

    ),
    trackTimeResoTag = cms.InputTag(""),
    trackTimeTag = cms.InputTag(""),
    usePVMET = cms.bool(True),
    vertices = cms.InputTag("unsortedOfflinePrimaryVertices")
)


process.offlinePrimaryVertices4D = cms.EDProducer("RecoChargedRefCandidatePrimaryVertexSorter",
    assignment = cms.PSet(
        maxDistanceToJetAxis = cms.double(0.07),
        maxDtSigForPrimaryAssignment = cms.double(4.0),
        maxDxyForJetAxisAssigment = cms.double(0.1),
        maxDxyForNotReconstructedPrimary = cms.double(0.01),
        maxDxySigForNotReconstructedPrimary = cms.double(2),
        maxDzErrorForPrimaryAssignment = cms.double(0.05),
        maxDzForJetAxisAssigment = cms.double(0.1),
        maxDzForPrimaryAssignment = cms.double(0.1),
        maxDzSigForPrimaryAssignment = cms.double(5.0),
        maxJetDeltaR = cms.double(0.5),
        minJetPt = cms.double(25),
        preferHighRanked = cms.bool(False),
        useTiming = cms.bool(True)
    ),
    jets = cms.InputTag("ak4CaloJetsForTrk"),
    particles = cms.InputTag("trackRefsForJetsBeforeSorting4D"),
    produceAssociationToOriginalVertices = cms.bool(False),
    produceNoPileUpCollection = cms.bool(False),
    producePileUpCollection = cms.bool(False),
    produceSortedVertices = cms.bool(True),
    qualityForPrimary = cms.int32(3),
    sorting = cms.PSet(

    ),
    trackTimeResoTag = cms.InputTag("tofPID4DnoPID","sigmat0safe"),
    trackTimeTag = cms.InputTag("tofPID4DnoPID","t0safe"),
    usePVMET = cms.bool(True),
    vertices = cms.InputTag("unsortedOfflinePrimaryVertices4D")
)


process.offlinePrimaryVertices4DWithBS = cms.EDProducer("RecoChargedRefCandidatePrimaryVertexSorter",
    assignment = cms.PSet(
        maxDistanceToJetAxis = cms.double(0.07),
        maxDtSigForPrimaryAssignment = cms.double(4.0),
        maxDxyForJetAxisAssigment = cms.double(0.1),
        maxDxyForNotReconstructedPrimary = cms.double(0.01),
        maxDxySigForNotReconstructedPrimary = cms.double(2),
        maxDzErrorForPrimaryAssignment = cms.double(0.05),
        maxDzForJetAxisAssigment = cms.double(0.1),
        maxDzForPrimaryAssignment = cms.double(0.1),
        maxDzSigForPrimaryAssignment = cms.double(5.0),
        maxJetDeltaR = cms.double(0.5),
        minJetPt = cms.double(25),
        preferHighRanked = cms.bool(False),
        useTiming = cms.bool(True)
    ),
    jets = cms.InputTag("ak4CaloJetsForTrk"),
    particles = cms.InputTag("trackRefsForJetsBeforeSorting4D"),
    produceAssociationToOriginalVertices = cms.bool(False),
    produceNoPileUpCollection = cms.bool(False),
    producePileUpCollection = cms.bool(False),
    produceSortedVertices = cms.bool(True),
    qualityForPrimary = cms.int32(3),
    sorting = cms.PSet(

    ),
    trackTimeResoTag = cms.InputTag("tofPID4DnoPID","sigmat0safe"),
    trackTimeTag = cms.InputTag("tofPID4DnoPID","t0safe"),
    usePVMET = cms.bool(True),
    vertices = cms.InputTag("unsortedOfflinePrimaryVertices4D","WithBS")
)


process.offlinePrimaryVertices4DnoPID = cms.EDProducer("RecoChargedRefCandidatePrimaryVertexSorter",
    assignment = cms.PSet(
        maxDistanceToJetAxis = cms.double(0.07),
        maxDtSigForPrimaryAssignment = cms.double(4.0),
        maxDxyForJetAxisAssigment = cms.double(0.1),
        maxDxyForNotReconstructedPrimary = cms.double(0.01),
        maxDxySigForNotReconstructedPrimary = cms.double(2),
        maxDzErrorForPrimaryAssignment = cms.double(0.05),
        maxDzForJetAxisAssigment = cms.double(0.1),
        maxDzForPrimaryAssignment = cms.double(0.1),
        maxDzSigForPrimaryAssignment = cms.double(5.0),
        maxJetDeltaR = cms.double(0.5),
        minJetPt = cms.double(25),
        preferHighRanked = cms.bool(False),
        useTiming = cms.bool(True)
    ),
    jets = cms.InputTag("ak4CaloJetsForTrk"),
    particles = cms.InputTag("trackRefsForJetsBeforeSorting4DnoPID"),
    produceAssociationToOriginalVertices = cms.bool(False),
    produceNoPileUpCollection = cms.bool(False),
    producePileUpCollection = cms.bool(False),
    produceSortedVertices = cms.bool(True),
    qualityForPrimary = cms.int32(3),
    sorting = cms.PSet(

    ),
    trackTimeResoTag = cms.InputTag("trackExtenderWithMTD","generalTracksigmat0"),
    trackTimeTag = cms.InputTag("trackExtenderWithMTD","generalTrackt0"),
    usePVMET = cms.bool(True),
    vertices = cms.InputTag("unsortedOfflinePrimaryVertices4DnoPID")
)


process.offlinePrimaryVertices4DnoPIDWithBS = cms.EDProducer("RecoChargedRefCandidatePrimaryVertexSorter",
    assignment = cms.PSet(
        maxDistanceToJetAxis = cms.double(0.07),
        maxDtSigForPrimaryAssignment = cms.double(4.0),
        maxDxyForJetAxisAssigment = cms.double(0.1),
        maxDxyForNotReconstructedPrimary = cms.double(0.01),
        maxDxySigForNotReconstructedPrimary = cms.double(2),
        maxDzErrorForPrimaryAssignment = cms.double(0.05),
        maxDzForJetAxisAssigment = cms.double(0.1),
        maxDzForPrimaryAssignment = cms.double(0.1),
        maxDzSigForPrimaryAssignment = cms.double(5.0),
        maxJetDeltaR = cms.double(0.5),
        minJetPt = cms.double(25),
        preferHighRanked = cms.bool(False),
        useTiming = cms.bool(True)
    ),
    jets = cms.InputTag("ak4CaloJetsForTrk"),
    particles = cms.InputTag("trackRefsForJetsBeforeSorting4DnoPID"),
    produceAssociationToOriginalVertices = cms.bool(False),
    produceNoPileUpCollection = cms.bool(False),
    producePileUpCollection = cms.bool(False),
    produceSortedVertices = cms.bool(True),
    qualityForPrimary = cms.int32(3),
    sorting = cms.PSet(

    ),
    trackTimeResoTag = cms.InputTag("trackExtenderWithMTD","generalTracksigmat0"),
    trackTimeTag = cms.InputTag("trackExtenderWithMTD","generalTrackt0"),
    usePVMET = cms.bool(True),
    vertices = cms.InputTag("unsortedOfflinePrimaryVertices4DnoPID","WithBS")
)


process.offlinePrimaryVertices4DwithPID = cms.EDProducer("RecoChargedRefCandidatePrimaryVertexSorter",
    assignment = cms.PSet(
        maxDistanceToJetAxis = cms.double(0.07),
        maxDtSigForPrimaryAssignment = cms.double(4.0),
        maxDxyForJetAxisAssigment = cms.double(0.1),
        maxDxyForNotReconstructedPrimary = cms.double(0.01),
        maxDxySigForNotReconstructedPrimary = cms.double(2),
        maxDzErrorForPrimaryAssignment = cms.double(0.05),
        maxDzForJetAxisAssigment = cms.double(0.1),
        maxDzForPrimaryAssignment = cms.double(0.1),
        maxDzSigForPrimaryAssignment = cms.double(5.0),
        maxJetDeltaR = cms.double(0.5),
        minJetPt = cms.double(25),
        preferHighRanked = cms.bool(False),
        useTiming = cms.bool(True)
    ),
    jets = cms.InputTag("ak4CaloJetsForTrk"),
    particles = cms.InputTag("trackRefsForJetsBeforeSorting4DwithPID"),
    produceAssociationToOriginalVertices = cms.bool(False),
    produceNoPileUpCollection = cms.bool(False),
    producePileUpCollection = cms.bool(False),
    produceSortedVertices = cms.bool(True),
    qualityForPrimary = cms.int32(3),
    sorting = cms.PSet(

    ),
    trackTimeResoTag = cms.InputTag("tofPID4DnoPID","sigmat0safe"),
    trackTimeTag = cms.InputTag("tofPID4DnoPID","t0safe"),
    usePVMET = cms.bool(True),
    vertices = cms.InputTag("unsortedOfflinePrimaryVertices4DwithPID")
)


process.offlinePrimaryVertices4DwithPIDWithBS = cms.EDProducer("RecoChargedRefCandidatePrimaryVertexSorter",
    assignment = cms.PSet(
        maxDistanceToJetAxis = cms.double(0.07),
        maxDtSigForPrimaryAssignment = cms.double(4.0),
        maxDxyForJetAxisAssigment = cms.double(0.1),
        maxDxyForNotReconstructedPrimary = cms.double(0.01),
        maxDxySigForNotReconstructedPrimary = cms.double(2),
        maxDzErrorForPrimaryAssignment = cms.double(0.05),
        maxDzForJetAxisAssigment = cms.double(0.1),
        maxDzForPrimaryAssignment = cms.double(0.1),
        maxDzSigForPrimaryAssignment = cms.double(5.0),
        maxJetDeltaR = cms.double(0.5),
        minJetPt = cms.double(25),
        preferHighRanked = cms.bool(False),
        useTiming = cms.bool(True)
    ),
    jets = cms.InputTag("ak4CaloJetsForTrk"),
    particles = cms.InputTag("trackRefsForJetsBeforeSorting4DwithPID"),
    produceAssociationToOriginalVertices = cms.bool(False),
    produceNoPileUpCollection = cms.bool(False),
    producePileUpCollection = cms.bool(False),
    produceSortedVertices = cms.bool(True),
    qualityForPrimary = cms.int32(3),
    sorting = cms.PSet(

    ),
    trackTimeResoTag = cms.InputTag("tofPID4DnoPID","sigmat0safe"),
    trackTimeTag = cms.InputTag("tofPID4DnoPID","t0safe"),
    usePVMET = cms.bool(True),
    vertices = cms.InputTag("unsortedOfflinePrimaryVertices4DwithPID","WithBS")
)


process.offlinePrimaryVerticesWithBS = cms.EDProducer("RecoChargedRefCandidatePrimaryVertexSorter",
    assignment = cms.PSet(
        maxDistanceToJetAxis = cms.double(0.07),
        maxDtSigForPrimaryAssignment = cms.double(4.0),
        maxDxyForJetAxisAssigment = cms.double(0.1),
        maxDxyForNotReconstructedPrimary = cms.double(0.01),
        maxDxySigForNotReconstructedPrimary = cms.double(2),
        maxDzErrorForPrimaryAssignment = cms.double(0.05),
        maxDzForJetAxisAssigment = cms.double(0.1),
        maxDzForPrimaryAssignment = cms.double(0.1),
        maxDzSigForPrimaryAssignment = cms.double(5.0),
        maxJetDeltaR = cms.double(0.5),
        minJetPt = cms.double(25),
        preferHighRanked = cms.bool(False),
        useTiming = cms.bool(False)
    ),
    jets = cms.InputTag("ak4CaloJetsForTrk"),
    particles = cms.InputTag("trackRefsForJetsBeforeSorting"),
    produceAssociationToOriginalVertices = cms.bool(False),
    produceNoPileUpCollection = cms.bool(False),
    producePileUpCollection = cms.bool(False),
    produceSortedVertices = cms.bool(True),
    qualityForPrimary = cms.int32(3),
    sorting = cms.PSet(

    ),
    trackTimeResoTag = cms.InputTag(""),
    trackTimeTag = cms.InputTag(""),
    usePVMET = cms.bool(True),
    vertices = cms.InputTag("unsortedOfflinePrimaryVertices","WithBS")
)


process.oldegConversionTrackCandidates = cms.EDProducer("ConversionTrackCandidateProducer",
    InOutRedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    MeasurementTrackerName = cms.string(''),
    MissingHitPenalty = cms.double(20.0),
    OutInRedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    RecHitFlagToBeExcludedEB = cms.vstring(
        'kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'
    ),
    RecHitFlagToBeExcludedEE = cms.vstring(
        'kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'
    ),
    RecHitSeverityToBeExcludedEB = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    RecHitSeverityToBeExcludedEE = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    TrajectoryBuilder = cms.string('TrajectoryBuilderForConversions'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('TrajectoryBuilderForConversions')
    ),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('alongMomElePropagator'),
        propagatorOppositeTISE = cms.string('oppositeToMomElePropagator')
    ),
    ValidHitBonus = cms.double(5.0),
    allowSharedFirstHit = cms.bool(True),
    barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    bcBarrelCollection = cms.InputTag("hybridSuperClusters","hybridBarrelBasicClusters"),
    bcECut = cms.double(1.5),
    bcEndcapCollection = cms.InputTag("multi5x5SuperClusters","multi5x5EndcapBasicClusters"),
    bcEtCut = cms.double(1.5),
    ecalIsoCut_offset = cms.double(999999999),
    ecalIsoCut_slope = cms.double(0.0),
    endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    fractionShared = cms.double(0.5),
    hOverEConeSize = cms.double(0.15),
    hcalTowers = cms.InputTag("towerMaker"),
    inOutTrackCandidateCollection = cms.string('inOutTracksFromConversions'),
    inOutTrackCandidateSCAssociationCollection = cms.string('inOutTrackCandidateSCAssociationCollection'),
    isoConeR = cms.double(0.4),
    isoEMin = cms.double(0.08),
    isoEtMin = cms.double(0.0),
    isoEtaSlice = cms.double(2.5),
    isoInnerConeR = cms.double(3.5),
    maxHOverE = cms.double(0.15),
    maxNumOfSeedsInOut = cms.int32(50),
    maxNumOfSeedsOutIn = cms.int32(50),
    minSCEt = cms.double(20.0),
    outInTrackCandidateCollection = cms.string('outInTracksFromConversions'),
    outInTrackCandidateSCAssociationCollection = cms.string('outInTrackCandidateSCAssociationCollection'),
    scHybridBarrelProducer = cms.InputTag("correctedHybridSuperClusters"),
    scIslandEndcapProducer = cms.InputTag("correctedMulti5x5SuperClustersWithPreshower"),
    useEtCut = cms.bool(True),
    useHitsSplitting = cms.bool(False),
    useNumXstals = cms.bool(True),
    vetoClusteredHits = cms.bool(False)
)


process.oldegConversions = cms.EDProducer("ConvertedPhotonProducer",
    AlgorithmName = cms.string('ecalSeeded'),
    MVA_weights_location = cms.string('RecoEgamma/EgammaTools/data/TMVAnalysis_Likelihood.weights.txt'),
    bcBarrelCollection = cms.InputTag("hybridSuperClusters","hybridBarrelBasicClusters"),
    bcEndcapCollection = cms.InputTag("multi5x5SuperClusters","multi5x5EndcapBasicClusters"),
    cleanedConvertedPhotonCollection = cms.string(''),
    conversionIOTrackProducer = cms.string('ckfInOutTracksFromOldEGConversions'),
    conversionOITrackProducer = cms.string('ckfOutInTracksFromOldEGConversions'),
    convertedPhotonCollection = cms.string('uncleanedConversions'),
    dRForConversionRecovery = cms.double(0.3),
    deltaCotCut = cms.double(0.05),
    generalTracksSrc = cms.InputTag("generalTracks"),
    hOverEConeSize = cms.double(0.15),
    hcalTowers = cms.InputTag("towerMaker"),
    inOutTrackCollection = cms.string(''),
    inOutTrackSCAssociation = cms.string('inOutTrackSCAssociationCollection'),
    maxDelta = cms.double(0.01),
    maxHOverE = cms.double(0.15),
    maxNbrOfIterations = cms.int32(40),
    maxNumOfCandidates = cms.int32(3),
    maxReducedChiSq = cms.double(225.0),
    minApproachDisCut = cms.double(0.0),
    minChiSqImprovement = cms.double(50.0),
    minSCEt = cms.double(20.0),
    outInTrackCollection = cms.string(''),
    outInTrackSCAssociation = cms.string('outInTrackSCAssociationCollection'),
    recoverOneTrackCase = cms.bool(True),
    risolveConversionAmbiguity = cms.bool(True),
    scHybridBarrelProducer = cms.InputTag("correctedHybridSuperClusters"),
    scIslandEndcapProducer = cms.InputTag("correctedMulti5x5SuperClustersWithPreshower")
)


process.omtfStage2Digis = cms.EDProducer("OmtfUnpacker",
    inputLabel = cms.InputTag("rawDataCollector"),
    skipRpc = cms.bool(False)
)


process.onlineMetaDataDigis = cms.EDProducer("OnlineMetaDataRawToDigi",
    mightGet = cms.optional.untracked.vstring,
    onlineMetaDataInputLabel = cms.InputTag("rawDataCollector")
)


process.onlineMetaDataRawToDigi = cms.EDProducer("OnlineMetaDataRawToDigi",
    mightGet = cms.optional.untracked.vstring,
    onlineMetaDataInputLabel = cms.InputTag("rawDataCollector")
)


process.ootPhotonCore = cms.EDProducer("PhotonCoreProducer",
    conversionProducer = cms.InputTag("conversions"),
    minSCEt = cms.double(10.0),
    photonCoreCollection = cms.string(''),
    pixelSeedProducer = cms.InputTag("electronMergedSeeds"),
    risolveConversionAmbiguity = cms.bool(True),
    scHybridBarrelProducer = cms.InputTag("particleFlowSuperClusterOOTECAL","particleFlowSuperClusterOOTECALBarrel"),
    scIslandEndcapProducer = cms.InputTag("particleFlowSuperClusterOOTECAL","particleFlowSuperClusterOOTECALEndcapWithPreshower")
)


process.ootPhotonEcalPFClusterIsolationProducer = cms.EDProducer("PhotonEcalPFClusterIsolationProducer",
    candidateProducer = cms.InputTag("ootPhotonsTmp"),
    drMax = cms.double(0.3),
    drVetoBarrel = cms.double(0),
    drVetoEndcap = cms.double(0),
    energyBarrel = cms.double(0),
    energyEndcap = cms.double(0),
    etaStripBarrel = cms.double(0),
    etaStripEndcap = cms.double(0),
    pfClusterProducer = cms.InputTag("particleFlowClusterOOTECAL")
)


process.ootPhotonHcalPFClusterIsolationProducer = cms.EDProducer("PhotonHcalPFClusterIsolationProducer",
    candidateProducer = cms.InputTag("ootPhotonsTmp"),
    drMax = cms.double(0.3),
    drVetoBarrel = cms.double(0),
    drVetoEndcap = cms.double(0),
    energyBarrel = cms.double(0),
    energyEndcap = cms.double(0),
    etaStripBarrel = cms.double(0),
    etaStripEndcap = cms.double(0),
    pfClusterProducerHCAL = cms.InputTag("particleFlowClusterHCAL"),
    useHF = cms.bool(False)
)


process.ootPhotons = cms.EDProducer("GEDPhotonProducer",
    PFIsolationCalculatorSet = cms.PSet(
        ComponentName = cms.string('pfIsolationCalculator'),
        applyDzDxyVeto = cms.bool(True),
        applyMissHitPhVeto = cms.bool(False),
        applyPFPUVeto = cms.bool(True),
        applyVeto = cms.bool(True),
        checkClosestZVertex = cms.bool(True),
        coneDR = cms.double(0.3),
        deltaRVetoBarrel = cms.bool(True),
        deltaRVetoBarrelCharged = cms.double(0.02),
        deltaRVetoBarrelNeutrals = cms.double(-1.0),
        deltaRVetoBarrelPhotons = cms.double(-1.0),
        deltaRVetoEndcap = cms.bool(True),
        deltaRVetoEndcapCharged = cms.double(0.02),
        deltaRVetoEndcapNeutrals = cms.double(-1.0),
        deltaRVetoEndcapPhotons = cms.double(0.07),
        numberOfCrystalEndcapPhotons = cms.double(4.0),
        numberOfRings = cms.int32(1),
        particleType = cms.int32(1),
        rectangleDeltaEtaVetoBarrelCharged = cms.double(-1),
        rectangleDeltaEtaVetoBarrelNeutrals = cms.double(-1),
        rectangleDeltaEtaVetoBarrelPhotons = cms.double(0.015),
        rectangleDeltaEtaVetoEndcapCharged = cms.double(-1),
        rectangleDeltaEtaVetoEndcapNeutrals = cms.double(-1),
        rectangleDeltaEtaVetoEndcapPhotons = cms.double(-1),
        rectangleDeltaPhiVetoBarrelCharged = cms.double(-1),
        rectangleDeltaPhiVetoBarrelNeutrals = cms.double(-1),
        rectangleDeltaPhiVetoBarrelPhotons = cms.double(1.0),
        rectangleDeltaPhiVetoEndcapCharged = cms.double(-1),
        rectangleDeltaPhiVetoEndcapNeutrals = cms.double(-1),
        rectangleDeltaPhiVetoEndcapPhotons = cms.double(-1),
        rectangleVetoBarrel = cms.bool(True),
        rectangleVetoEndcap = cms.bool(False),
        ringSize = cms.double(0.3),
        useCrystalSize = cms.bool(True)
    ),
    RecHitFlagToBeExcludedEB = cms.vstring(
        'kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'
    ),
    RecHitFlagToBeExcludedEE = cms.vstring(
        'kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'
    ),
    RecHitSeverityToBeExcludedEB = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    RecHitSeverityToBeExcludedEE = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    barrelEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    candidateP4type = cms.string('fromEcalEnergy'),
    checkHcalStatus = cms.bool(True),
    ecalRecHitSumEtOffsetBarrel = cms.double(999999999),
    ecalRecHitSumEtOffsetEndcap = cms.double(999999999),
    ecalRecHitSumEtSlopeBarrel = cms.double(0.0),
    ecalRecHitSumEtSlopeEndcap = cms.double(0.0),
    endcapEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    energyRegressionWeightsDBLocation = cms.string('wgbrph'),
    energyRegressionWeightsFileLocation = cms.string('/afs/cern.ch/user/b/bendavid/cmspublic/regweights/gbrph.root'),
    hOverEConeSize = cms.double(0.15),
    hbheInstance = cms.string(''),
    hbheModule = cms.string('hbhereco'),
    hcalTowerSumEtOffsetBarrel = cms.double(999999999),
    hcalTowerSumEtOffsetEndcap = cms.double(999999999),
    hcalTowerSumEtSlopeBarrel = cms.double(0.0),
    hcalTowerSumEtSlopeEndcap = cms.double(0.0),
    hcalTowers = cms.InputTag("towerMaker"),
    highEt = cms.double(100.0),
    isolationSumsCalculatorSet = cms.PSet(
        ComponentName = cms.string('isolationSumsCalculator'),
        EcalRecHitEtaSliceA_Barrel = cms.double(2.5),
        EcalRecHitEtaSliceA_Endcap = cms.double(2.5),
        EcalRecHitEtaSliceB_Barrel = cms.double(2.5),
        EcalRecHitEtaSliceB_Endcap = cms.double(2.5),
        EcalRecHitInnerRadiusA_Barrel = cms.double(3.5),
        EcalRecHitInnerRadiusA_Endcap = cms.double(3.5),
        EcalRecHitInnerRadiusB_Barrel = cms.double(3.5),
        EcalRecHitInnerRadiusB_Endcap = cms.double(3.5),
        EcalRecHitOuterRadiusA_Barrel = cms.double(0.4),
        EcalRecHitOuterRadiusA_Endcap = cms.double(0.4),
        EcalRecHitOuterRadiusB_Barrel = cms.double(0.3),
        EcalRecHitOuterRadiusB_Endcap = cms.double(0.3),
        EcalRecHitThreshEA_Barrel = cms.double(0.095),
        EcalRecHitThreshEA_Endcap = cms.double(0.0),
        EcalRecHitThreshEB_Barrel = cms.double(0.095),
        EcalRecHitThreshEB_Endcap = cms.double(0.0),
        EcalRecHitThreshEtA_Barrel = cms.double(0.0),
        EcalRecHitThreshEtA_Endcap = cms.double(0.11),
        EcalRecHitThreshEtB_Barrel = cms.double(0.0),
        EcalRecHitThreshEtB_Endcap = cms.double(0.11),
        HcalDepth1TowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalDepth1TowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalDepth1TowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalDepth1TowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalDepth1TowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth1TowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalDepth1TowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalDepth1TowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalDepth1TowerThreshEA_Barrel = cms.double(0.0),
        HcalDepth1TowerThreshEA_Endcap = cms.double(0.0),
        HcalDepth1TowerThreshEB_Barrel = cms.double(0.0),
        HcalDepth1TowerThreshEB_Endcap = cms.double(0.0),
        HcalDepth2TowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalDepth2TowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalDepth2TowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalDepth2TowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalDepth2TowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth2TowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalDepth2TowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalDepth2TowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalDepth2TowerThreshEA_Barrel = cms.double(0.0),
        HcalDepth2TowerThreshEA_Endcap = cms.double(0.0),
        HcalDepth2TowerThreshEB_Barrel = cms.double(0.0),
        HcalDepth2TowerThreshEB_Endcap = cms.double(0.0),
        HcalRecHitCollection = cms.InputTag("towerMaker"),
        HcalTowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalTowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalTowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalTowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalTowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalTowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalTowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalTowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalTowerThreshEA_Barrel = cms.double(0.0),
        HcalTowerThreshEA_Endcap = cms.double(0.0),
        HcalTowerThreshEB_Barrel = cms.double(0.0),
        HcalTowerThreshEB_Endcap = cms.double(0.0),
        TrackConeInnerRadiusA_Barrel = cms.double(0.04),
        TrackConeInnerRadiusA_Endcap = cms.double(0.04),
        TrackConeInnerRadiusB_Barrel = cms.double(0.04),
        TrackConeInnerRadiusB_Endcap = cms.double(0.04),
        TrackConeOuterRadiusA_Barrel = cms.double(0.4),
        TrackConeOuterRadiusA_Endcap = cms.double(0.4),
        TrackConeOuterRadiusB_Barrel = cms.double(0.3),
        TrackConeOuterRadiusB_Endcap = cms.double(0.3),
        barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        beamSpotProducer = cms.InputTag("offlineBeamSpot"),
        endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        isolationtrackEtaSliceA_Barrel = cms.double(0.015),
        isolationtrackEtaSliceA_Endcap = cms.double(0.015),
        isolationtrackEtaSliceB_Barrel = cms.double(0.015),
        isolationtrackEtaSliceB_Endcap = cms.double(0.015),
        isolationtrackThresholdA_Barrel = cms.double(0.0),
        isolationtrackThresholdA_Endcap = cms.double(0.0),
        isolationtrackThresholdB_Barrel = cms.double(0.0),
        isolationtrackThresholdB_Endcap = cms.double(0.0),
        longImpactParameterA_Barrel = cms.double(0.2),
        longImpactParameterA_Endcap = cms.double(0.2),
        longImpactParameterB_Barrel = cms.double(0.2),
        longImpactParameterB_Endcap = cms.double(0.2),
        moduleEtaBoundary = cms.vdouble(
            0.0, 0.02, 0.43, 0.46, 0.78, 
            0.81, 1.13, 1.15, 1.45, 1.58
        ),
        modulePhiBoundary = cms.double(0.0087),
        trackProducer = cms.InputTag("generalTracks"),
        transImpactParameterA_Barrel = cms.double(0.1),
        transImpactParameterA_Endcap = cms.double(0.1),
        transImpactParameterB_Barrel = cms.double(0.1),
        transImpactParameterB_Endcap = cms.double(0.1),
        useNumCrystals = cms.bool(True),
        vetoClustered = cms.bool(False)
    ),
    maxHoverEBarrel = cms.double(0.5),
    maxHoverEEndcap = cms.double(0.5),
    minR9Barrel = cms.double(0.94),
    minR9Endcap = cms.double(0.95),
    minSCEtBarrel = cms.double(10.0),
    minSCEtEndcap = cms.double(10.0),
    mipVariableSet = cms.PSet(
        ComponentName = cms.string('mipVariable'),
        HaloDiscThreshold = cms.double(70.0),
        ResidualWidth = cms.double(0.23),
        XRangeFit = cms.double(180.0),
        YRangeFit = cms.double(7.0),
        barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE")
    ),
    nTrackHollowConeBarrel = cms.double(999999999),
    nTrackHollowConeEndcap = cms.double(999999999),
    nTrackSolidConeBarrel = cms.double(999999999),
    nTrackSolidConeEndcap = cms.double(999999999),
    outputPhotonCollection = cms.string(''),
    pfCandidates = cms.InputTag("particleFlowTmp"),
    pfECALClusIsolation = cms.InputTag("ootPhotonEcalPFClusterIsolationProducer"),
    pfEgammaCandidates = cms.InputTag(""),
    pfHCALClusIsolation = cms.InputTag("ootPhotonHcalPFClusterIsolationProducer"),
    pfIsolCfg = cms.PSet(
        chargedHadronIso = cms.InputTag(""),
        chargedHadronPFPVIso = cms.InputTag(""),
        chargedHadronWorstVtxGeomVetoIso = cms.InputTag(""),
        chargedHadronWorstVtxIso = cms.InputTag(""),
        neutralHadronIso = cms.InputTag(""),
        photonIso = cms.InputTag("")
    ),
    photonEcalEnergyCorrFunction = cms.string('EcalClusterEnergyCorrectionObjectSpecific'),
    photonProducer = cms.InputTag("ootPhotonsTmp"),
    posCalcParameters = cms.PSet(
        LogWeighted = cms.bool(True),
        T0_barl = cms.double(7.4),
        T0_endc = cms.double(6.3),
        T0_endcPresh = cms.double(3.6),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    posCalc_logweight = cms.bool(True),
    posCalc_t0_barl = cms.double(7.7),
    posCalc_t0_endc = cms.double(6.3),
    posCalc_t0_endcPresh = cms.double(3.6),
    posCalc_w0 = cms.double(4.2),
    posCalc_x0 = cms.double(0.89),
    preshowerHits = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    primaryVertexProducer = cms.InputTag("offlinePrimaryVerticesWithBS"),
    reconstructionStep = cms.string('ootfinal'),
    regressionWeightsFromDB = cms.bool(True),
    runMIPTagger = cms.bool(True),
    sigmaIetaIetaCutBarrel = cms.double(999999999),
    sigmaIetaIetaCutEndcap = cms.double(999999999),
    superClusterCrackEnergyCorrFunction = cms.string('EcalClusterCrackCorrection'),
    superClusterEnergyCorrFunction = cms.string('EcalClusterEnergyCorrection'),
    superClusterEnergyErrorFunction = cms.string('EcalClusterEnergyUncertainty'),
    trackPtSumHollowConeBarrel = cms.double(999999999),
    trackPtSumHollowConeEndcap = cms.double(999999999),
    trackPtSumSolidConeBarrel = cms.double(999999999),
    trackPtSumSolidConeEndcap = cms.double(999999999),
    usePrimaryVertex = cms.bool(True),
    useRegression = cms.bool(True),
    valueMapPhotons = cms.string('')
)


process.ootPhotonsTmp = cms.EDProducer("GEDPhotonProducer",
    PFIsolationCalculatorSet = cms.PSet(
        ComponentName = cms.string('pfIsolationCalculator'),
        applyDzDxyVeto = cms.bool(True),
        applyMissHitPhVeto = cms.bool(False),
        applyPFPUVeto = cms.bool(True),
        applyVeto = cms.bool(True),
        checkClosestZVertex = cms.bool(True),
        coneDR = cms.double(0.3),
        deltaRVetoBarrel = cms.bool(True),
        deltaRVetoBarrelCharged = cms.double(0.02),
        deltaRVetoBarrelNeutrals = cms.double(-1.0),
        deltaRVetoBarrelPhotons = cms.double(-1.0),
        deltaRVetoEndcap = cms.bool(True),
        deltaRVetoEndcapCharged = cms.double(0.02),
        deltaRVetoEndcapNeutrals = cms.double(-1.0),
        deltaRVetoEndcapPhotons = cms.double(0.07),
        numberOfCrystalEndcapPhotons = cms.double(4.0),
        numberOfRings = cms.int32(1),
        particleType = cms.int32(1),
        rectangleDeltaEtaVetoBarrelCharged = cms.double(-1),
        rectangleDeltaEtaVetoBarrelNeutrals = cms.double(-1),
        rectangleDeltaEtaVetoBarrelPhotons = cms.double(0.015),
        rectangleDeltaEtaVetoEndcapCharged = cms.double(-1),
        rectangleDeltaEtaVetoEndcapNeutrals = cms.double(-1),
        rectangleDeltaEtaVetoEndcapPhotons = cms.double(-1),
        rectangleDeltaPhiVetoBarrelCharged = cms.double(-1),
        rectangleDeltaPhiVetoBarrelNeutrals = cms.double(-1),
        rectangleDeltaPhiVetoBarrelPhotons = cms.double(1.0),
        rectangleDeltaPhiVetoEndcapCharged = cms.double(-1),
        rectangleDeltaPhiVetoEndcapNeutrals = cms.double(-1),
        rectangleDeltaPhiVetoEndcapPhotons = cms.double(-1),
        rectangleVetoBarrel = cms.bool(True),
        rectangleVetoEndcap = cms.bool(False),
        ringSize = cms.double(0.3),
        useCrystalSize = cms.bool(True)
    ),
    RecHitFlagToBeExcludedEB = cms.vstring(
        'kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'
    ),
    RecHitFlagToBeExcludedEE = cms.vstring(
        'kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'
    ),
    RecHitSeverityToBeExcludedEB = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    RecHitSeverityToBeExcludedEE = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    barrelEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    candidateP4type = cms.string('fromEcalEnergy'),
    checkHcalStatus = cms.bool(True),
    ecalRecHitSumEtOffsetBarrel = cms.double(999999999),
    ecalRecHitSumEtOffsetEndcap = cms.double(999999999),
    ecalRecHitSumEtSlopeBarrel = cms.double(0.0),
    ecalRecHitSumEtSlopeEndcap = cms.double(0.0),
    endcapEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    energyRegressionWeightsDBLocation = cms.string('wgbrph'),
    energyRegressionWeightsFileLocation = cms.string('/afs/cern.ch/user/b/bendavid/cmspublic/regweights/gbrph.root'),
    hOverEConeSize = cms.double(0.15),
    hbheInstance = cms.string(''),
    hbheModule = cms.string('hbhereco'),
    hcalTowerSumEtOffsetBarrel = cms.double(999999999),
    hcalTowerSumEtOffsetEndcap = cms.double(999999999),
    hcalTowerSumEtSlopeBarrel = cms.double(0.0),
    hcalTowerSumEtSlopeEndcap = cms.double(0.0),
    hcalTowers = cms.InputTag("towerMaker"),
    highEt = cms.double(100.0),
    isolationSumsCalculatorSet = cms.PSet(
        ComponentName = cms.string('isolationSumsCalculator'),
        EcalRecHitEtaSliceA_Barrel = cms.double(2.5),
        EcalRecHitEtaSliceA_Endcap = cms.double(2.5),
        EcalRecHitEtaSliceB_Barrel = cms.double(2.5),
        EcalRecHitEtaSliceB_Endcap = cms.double(2.5),
        EcalRecHitInnerRadiusA_Barrel = cms.double(3.5),
        EcalRecHitInnerRadiusA_Endcap = cms.double(3.5),
        EcalRecHitInnerRadiusB_Barrel = cms.double(3.5),
        EcalRecHitInnerRadiusB_Endcap = cms.double(3.5),
        EcalRecHitOuterRadiusA_Barrel = cms.double(0.4),
        EcalRecHitOuterRadiusA_Endcap = cms.double(0.4),
        EcalRecHitOuterRadiusB_Barrel = cms.double(0.3),
        EcalRecHitOuterRadiusB_Endcap = cms.double(0.3),
        EcalRecHitThreshEA_Barrel = cms.double(0.095),
        EcalRecHitThreshEA_Endcap = cms.double(0.0),
        EcalRecHitThreshEB_Barrel = cms.double(0.095),
        EcalRecHitThreshEB_Endcap = cms.double(0.0),
        EcalRecHitThreshEtA_Barrel = cms.double(0.0),
        EcalRecHitThreshEtA_Endcap = cms.double(0.11),
        EcalRecHitThreshEtB_Barrel = cms.double(0.0),
        EcalRecHitThreshEtB_Endcap = cms.double(0.11),
        HcalDepth1TowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalDepth1TowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalDepth1TowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalDepth1TowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalDepth1TowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth1TowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalDepth1TowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalDepth1TowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalDepth1TowerThreshEA_Barrel = cms.double(0.0),
        HcalDepth1TowerThreshEA_Endcap = cms.double(0.0),
        HcalDepth1TowerThreshEB_Barrel = cms.double(0.0),
        HcalDepth1TowerThreshEB_Endcap = cms.double(0.0),
        HcalDepth2TowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalDepth2TowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalDepth2TowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalDepth2TowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalDepth2TowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth2TowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalDepth2TowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalDepth2TowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalDepth2TowerThreshEA_Barrel = cms.double(0.0),
        HcalDepth2TowerThreshEA_Endcap = cms.double(0.0),
        HcalDepth2TowerThreshEB_Barrel = cms.double(0.0),
        HcalDepth2TowerThreshEB_Endcap = cms.double(0.0),
        HcalRecHitCollection = cms.InputTag("towerMaker"),
        HcalTowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalTowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalTowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalTowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalTowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalTowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalTowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalTowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalTowerThreshEA_Barrel = cms.double(0.0),
        HcalTowerThreshEA_Endcap = cms.double(0.0),
        HcalTowerThreshEB_Barrel = cms.double(0.0),
        HcalTowerThreshEB_Endcap = cms.double(0.0),
        TrackConeInnerRadiusA_Barrel = cms.double(0.04),
        TrackConeInnerRadiusA_Endcap = cms.double(0.04),
        TrackConeInnerRadiusB_Barrel = cms.double(0.04),
        TrackConeInnerRadiusB_Endcap = cms.double(0.04),
        TrackConeOuterRadiusA_Barrel = cms.double(0.4),
        TrackConeOuterRadiusA_Endcap = cms.double(0.4),
        TrackConeOuterRadiusB_Barrel = cms.double(0.3),
        TrackConeOuterRadiusB_Endcap = cms.double(0.3),
        barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        beamSpotProducer = cms.InputTag("offlineBeamSpot"),
        endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        isolationtrackEtaSliceA_Barrel = cms.double(0.015),
        isolationtrackEtaSliceA_Endcap = cms.double(0.015),
        isolationtrackEtaSliceB_Barrel = cms.double(0.015),
        isolationtrackEtaSliceB_Endcap = cms.double(0.015),
        isolationtrackThresholdA_Barrel = cms.double(0.0),
        isolationtrackThresholdA_Endcap = cms.double(0.0),
        isolationtrackThresholdB_Barrel = cms.double(0.0),
        isolationtrackThresholdB_Endcap = cms.double(0.0),
        longImpactParameterA_Barrel = cms.double(0.2),
        longImpactParameterA_Endcap = cms.double(0.2),
        longImpactParameterB_Barrel = cms.double(0.2),
        longImpactParameterB_Endcap = cms.double(0.2),
        moduleEtaBoundary = cms.vdouble(
            0.0, 0.02, 0.43, 0.46, 0.78, 
            0.81, 1.13, 1.15, 1.45, 1.58
        ),
        modulePhiBoundary = cms.double(0.0087),
        trackProducer = cms.InputTag("generalTracks"),
        transImpactParameterA_Barrel = cms.double(0.1),
        transImpactParameterA_Endcap = cms.double(0.1),
        transImpactParameterB_Barrel = cms.double(0.1),
        transImpactParameterB_Endcap = cms.double(0.1),
        useNumCrystals = cms.bool(True),
        vetoClustered = cms.bool(False)
    ),
    maxHoverEBarrel = cms.double(0.5),
    maxHoverEEndcap = cms.double(0.5),
    minR9Barrel = cms.double(0.94),
    minR9Endcap = cms.double(0.95),
    minSCEtBarrel = cms.double(10.0),
    minSCEtEndcap = cms.double(10.0),
    mipVariableSet = cms.PSet(
        ComponentName = cms.string('mipVariable'),
        HaloDiscThreshold = cms.double(70.0),
        ResidualWidth = cms.double(0.23),
        XRangeFit = cms.double(180.0),
        YRangeFit = cms.double(7.0),
        barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE")
    ),
    nTrackHollowConeBarrel = cms.double(999999999),
    nTrackHollowConeEndcap = cms.double(999999999),
    nTrackSolidConeBarrel = cms.double(999999999),
    nTrackSolidConeEndcap = cms.double(999999999),
    outputPhotonCollection = cms.string(''),
    pfCandidates = cms.InputTag("particleFlowTmp"),
    pfEgammaCandidates = cms.InputTag(""),
    photonEcalEnergyCorrFunction = cms.string('EcalClusterEnergyCorrectionObjectSpecific'),
    photonProducer = cms.InputTag("ootPhotonCore"),
    posCalcParameters = cms.PSet(
        LogWeighted = cms.bool(True),
        T0_barl = cms.double(7.4),
        T0_endc = cms.double(6.3),
        T0_endcPresh = cms.double(3.6),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    posCalc_logweight = cms.bool(True),
    posCalc_t0_barl = cms.double(7.7),
    posCalc_t0_endc = cms.double(6.3),
    posCalc_t0_endcPresh = cms.double(3.6),
    posCalc_w0 = cms.double(4.2),
    posCalc_x0 = cms.double(0.89),
    preshowerHits = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    primaryVertexProducer = cms.InputTag("offlinePrimaryVerticesWithBS"),
    reconstructionStep = cms.string('oot'),
    regressionWeightsFromDB = cms.bool(True),
    runMIPTagger = cms.bool(True),
    sigmaIetaIetaCutBarrel = cms.double(999999999),
    sigmaIetaIetaCutEndcap = cms.double(999999999),
    superClusterCrackEnergyCorrFunction = cms.string('EcalClusterCrackCorrection'),
    superClusterEnergyCorrFunction = cms.string('EcalClusterEnergyCorrection'),
    superClusterEnergyErrorFunction = cms.string('EcalClusterEnergyUncertainty'),
    trackPtSumHollowConeBarrel = cms.double(999999999),
    trackPtSumHollowConeEndcap = cms.double(999999999),
    trackPtSumSolidConeBarrel = cms.double(999999999),
    trackPtSumSolidConeEndcap = cms.double(999999999),
    usePrimaryVertex = cms.bool(True),
    useRegression = cms.bool(True),
    valueMapPhotons = cms.string('')
)


process.outInConversionTrackProducer = cms.EDProducer("ConversionTrackProducer",
    TrackProducer = cms.string('ckfOutInTracksFromConversions'),
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    filterOnConvTrackHyp = cms.bool(True),
    minConvRadius = cms.double(2.0),
    setArbitratedEcalSeeded = cms.bool(True),
    setArbitratedMerged = cms.bool(True),
    setArbitratedMergedEcalGeneral = cms.bool(True),
    setIsGsfTrackOpen = cms.bool(False),
    setTrackerOnly = cms.bool(False),
    useTrajectory = cms.bool(False)
)


process.outInOldEGConversionTrackProducer = cms.EDProducer("ConversionTrackProducer",
    TrackProducer = cms.string('ckfOutInTracksFromOldEGConversions'),
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    filterOnConvTrackHyp = cms.bool(True),
    minConvRadius = cms.double(2.0),
    setArbitratedEcalSeeded = cms.bool(True),
    setArbitratedMerged = cms.bool(True),
    setArbitratedMergedEcalGeneral = cms.bool(True),
    setIsGsfTrackOpen = cms.bool(False),
    setTrackerOnly = cms.bool(False),
    useTrajectory = cms.bool(False)
)


process.pACentrality = cms.EDProducer("CentralityProducer",
    TrackQuality = cms.string('highPurity'),
    UseQuality = cms.bool(True),
    doPixelCut = cms.bool(True),
    hfEtaCut = cms.double(4),
    lowGainZDC = cms.bool(True),
    midRapidityRange = cms.double(1),
    produceETmidRapidity = cms.bool(True),
    produceEcalhits = cms.bool(True),
    produceHFhits = cms.bool(True),
    produceHFtowers = cms.bool(True),
    producePixelTracks = cms.bool(True),
    producePixelhits = cms.bool(True),
    produceTracks = cms.bool(True),
    produceZDChits = cms.bool(True),
    reUseCentrality = cms.bool(False),
    srcEBhits = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    srcEEhits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    srcHFhits = cms.InputTag("hfreco"),
    srcPixelTracks = cms.InputTag("pixelTracks"),
    srcPixelhits = cms.InputTag("siPixelRecHits"),
    srcReUse = cms.InputTag("pACentrality"),
    srcTowers = cms.InputTag("towerMaker"),
    srcTracks = cms.InputTag("generalTracks"),
    srcVertex = cms.InputTag("offlinePrimaryVertices"),
    srcZDChits = cms.InputTag("zdcreco"),
    trackEtaCut = cms.double(2),
    trackPtCut = cms.double(1)
)


process.particleBasedIsolation = cms.EDProducer("ParticleBasedIsoProducer",
    electronProducer = cms.InputTag("gedGsfElectrons"),
    electronTmpProducer = cms.InputTag("gedGsfElectronsTmp"),
    pfBlockBasedIsolationSetUp = cms.PSet(
        ComponentName = cms.string('pfBlockBasedIsolation'),
        coneSize = cms.double(9999999999)
    ),
    pfCandidates = cms.InputTag("particleFlow"),
    pfEgammaCandidates = cms.InputTag("particleFlowEGamma"),
    photonProducer = cms.InputTag("gedPhotons"),
    photonTmpProducer = cms.InputTag("gedPhotonsTmp"),
    valueMapElePFblockIso = cms.string('gedGsfElectrons'),
    valueMapEleToEG = cms.string(''),
    valueMapPhoPFblockIso = cms.string('gedPhotons'),
    valueMapPhoToEG = cms.string('valMapPFEgammaCandToPhoton')
)


process.particleBasedIsolationTmp = cms.EDProducer("ParticleBasedIsoProducer",
    electronProducer = cms.InputTag("gedGsfElectronsTmp"),
    electronTmpProducer = cms.InputTag("gedGsfElectronsTmp"),
    pfBlockBasedIsolationSetUp = cms.PSet(
        ComponentName = cms.string('pfBlockBasedIsolation'),
        coneSize = cms.double(9999999999)
    ),
    pfCandidates = cms.InputTag("particleFlowTmp"),
    pfEgammaCandidates = cms.InputTag("particleFlowEGamma"),
    photonProducer = cms.InputTag("gedPhotonsTmp"),
    photonTmpProducer = cms.InputTag("gedPhotonsTmp"),
    valueMapElePFblockIso = cms.string('gedGsfElectronsTmp'),
    valueMapEleToEG = cms.string(''),
    valueMapPhoPFblockIso = cms.string('gedPhotonsTmp'),
    valueMapPhoToEG = cms.string('valMapPFEgammaCandToPhoton')
)


process.particleFlow = cms.EDProducer("PFLinker",
    FillMuonRefs = cms.bool(True),
    GsfElectrons = cms.InputTag("gedGsfElectrons"),
    Muons = cms.InputTag("muons","muons1stStep2muonsMap"),
    OutputPF = cms.string(''),
    PFCandidate = cms.VInputTag(cms.InputTag("particleFlowTmp")),
    Photons = cms.InputTag("gedPhotons"),
    ProducePFCandidates = cms.bool(True),
    ValueMapElectrons = cms.string('electrons'),
    ValueMapMerged = cms.string('all'),
    ValueMapPhotons = cms.string('photons'),
    forceElectronsInHGCAL = cms.bool(True)
)


process.particleFlowBadHcalPseudoCluster = cms.EDProducer("PFBadHcalPseudoClusterProducer",
    debug = cms.untracked.bool(False),
    enable = cms.bool(False),
    mightGet = cms.optional.untracked.vstring
)


process.particleFlowBlock = cms.EDProducer("PFBlockProducer",
    debug = cms.untracked.bool(False),
    elementImporters = cms.VPSet(
        cms.PSet(
            gsfsAreSecondary = cms.bool(False),
            importerName = cms.string('GSFTrackImporter'),
            source = cms.InputTag("pfTrackElec"),
            superClustersArePF = cms.bool(True)
        ), 
        cms.PSet(
            importerName = cms.string('ConvBremTrackImporter'),
            source = cms.InputTag("pfTrackElec")
        ), 
        cms.PSet(
            importerName = cms.string('SuperClusterImporter'),
            maximumHoverE = cms.double(0.5),
            minPTforBypass = cms.double(100.0),
            minSuperClusterPt = cms.double(10.0),
            source_eb = cms.InputTag("particleFlowSuperClusterECAL","particleFlowSuperClusterECALBarrel"),
            source_ee = cms.InputTag("particleFlowSuperClusterECAL","particleFlowSuperClusterECALEndcapWithPreshower"),
            source_towers = cms.InputTag("towerMaker"),
            superClustersArePF = cms.bool(True)
        ), 
        cms.PSet(
            importerName = cms.string('ConversionTrackImporter'),
            source = cms.InputTag("pfConversions")
        ), 
        cms.PSet(
            importerName = cms.string('NuclearInteractionTrackImporter'),
            source = cms.InputTag("pfDisplacedTrackerVertex")
        ), 
        cms.PSet(
            DPtOverPtCuts_byTrackAlgo = cms.vdouble(
                10.0, 10.0, 10.0, 10.0, 10.0, 
                5.0
            ),
            NHitCuts_byTrackAlgo = cms.vuint32(
                3, 3, 3, 3, 3, 
                3
            ),
            cleanBadConvertedBrems = cms.bool(True),
            importerName = cms.string('GeneralTracksImporterWithVeto'),
            muonSrc = cms.InputTag("muons1stStep"),
            source = cms.InputTag("pfTrack"),
            trackQuality = cms.string('highPurity'),
            useIterativeTracking = cms.bool(True),
            veto = cms.InputTag("hgcalTrackCollection","TracksInHGCal")
        ), 
        cms.PSet(
            BCtoPFCMap = cms.InputTag("particleFlowSuperClusterECAL","PFClusterAssociationEBEE"),
            importerName = cms.string('ECALClusterImporter'),
            source = cms.InputTag("particleFlowClusterECAL")
        ), 
        cms.PSet(
            importerName = cms.string('GenericClusterImporter'),
            source = cms.InputTag("particleFlowClusterHCAL")
        ), 
        cms.PSet(
            importerName = cms.string('GenericClusterImporter'),
            source = cms.InputTag("particleFlowBadHcalPseudoCluster")
        ), 
        cms.PSet(
            importerName = cms.string('GenericClusterImporter'),
            source = cms.InputTag("particleFlowClusterHO")
        ), 
        cms.PSet(
            importerName = cms.string('GenericClusterImporter'),
            source = cms.InputTag("particleFlowClusterHF")
        ), 
        cms.PSet(
            importerName = cms.string('GenericClusterImporter'),
            source = cms.InputTag("particleFlowClusterPS")
        ), 
        cms.PSet(
            importerName = cms.string('TrackTimingImporter'),
            timeErrorMap = cms.InputTag("tofPID","sigmat0"),
            timeErrorMapGsf = cms.InputTag("tofPID","sigmat0"),
            timeQualityMap = cms.InputTag("mtdTrackQualityMVA","mtdQualMVA"),
            timeQualityMapGsf = cms.InputTag("mtdTrackQualityMVA","mtdQualMVA"),
            timeQualityThreshold = cms.double(0.5),
            timeValueMap = cms.InputTag("tofPID","t0"),
            timeValueMapGsf = cms.InputTag("tofPID","t0")
        )
    ),
    linkDefinitions = cms.VPSet(
        cms.PSet(
            linkType = cms.string('PS1:ECAL'),
            linkerName = cms.string('PreshowerAndECALLinker'),
            useKDTree = cms.bool(True)
        ), 
        cms.PSet(
            linkType = cms.string('PS2:ECAL'),
            linkerName = cms.string('PreshowerAndECALLinker'),
            useKDTree = cms.bool(True)
        ), 
        cms.PSet(
            linkType = cms.string('TRACK:ECAL'),
            linkerName = cms.string('TrackAndECALLinker'),
            useKDTree = cms.bool(True)
        ), 
        cms.PSet(
            linkType = cms.string('TRACK:HCAL'),
            linkerName = cms.string('TrackAndHCALLinker'),
            trajectoryLayerEntrance = cms.string('HCALEntrance'),
            trajectoryLayerExit = cms.string('HCALExit'),
            useKDTree = cms.bool(True)
        ), 
        cms.PSet(
            linkType = cms.string('TRACK:HO'),
            linkerName = cms.string('TrackAndHOLinker'),
            useKDTree = cms.bool(False)
        ), 
        cms.PSet(
            linkType = cms.string('ECAL:HCAL'),
            linkerName = cms.string('ECALAndHCALLinker'),
            useKDTree = cms.bool(False)
        ), 
        cms.PSet(
            linkType = cms.string('HCAL:HO'),
            linkerName = cms.string('HCALAndHOLinker'),
            useKDTree = cms.bool(False)
        ), 
        cms.PSet(
            linkType = cms.string('HFEM:HFHAD'),
            linkerName = cms.string('HFEMAndHFHADLinker'),
            useKDTree = cms.bool(False)
        ), 
        cms.PSet(
            linkType = cms.string('TRACK:TRACK'),
            linkerName = cms.string('TrackAndTrackLinker'),
            useKDTree = cms.bool(False)
        ), 
        cms.PSet(
            linkType = cms.string('ECAL:ECAL'),
            linkerName = cms.string('ECALAndECALLinker'),
            useKDTree = cms.bool(False)
        ), 
        cms.PSet(
            linkType = cms.string('GSF:ECAL'),
            linkerName = cms.string('GSFAndECALLinker'),
            useKDTree = cms.bool(False)
        ), 
        cms.PSet(
            linkType = cms.string('TRACK:GSF'),
            linkerName = cms.string('TrackAndGSFLinker'),
            useConvertedBrems = cms.bool(True),
            useKDTree = cms.bool(False)
        ), 
        cms.PSet(
            linkType = cms.string('GSF:BREM'),
            linkerName = cms.string('GSFAndBREMLinker'),
            useKDTree = cms.bool(False)
        ), 
        cms.PSet(
            linkType = cms.string('GSF:GSF'),
            linkerName = cms.string('GSFAndGSFLinker'),
            useKDTree = cms.bool(False)
        ), 
        cms.PSet(
            linkType = cms.string('ECAL:BREM'),
            linkerName = cms.string('ECALAndBREMLinker'),
            useKDTree = cms.bool(False)
        ), 
        cms.PSet(
            linkType = cms.string('GSF:HCAL'),
            linkerName = cms.string('GSFAndHCALLinker'),
            useKDTree = cms.bool(False)
        ), 
        cms.PSet(
            linkType = cms.string('HCAL:BREM'),
            linkerName = cms.string('HCALAndBREMLinker'),
            useKDTree = cms.bool(False)
        ), 
        cms.PSet(
            SuperClusterMatchByRef = cms.bool(True),
            linkType = cms.string('SC:ECAL'),
            linkerName = cms.string('SCAndECALLinker'),
            useKDTree = cms.bool(False)
        ), 
        cms.PSet(
            linkType = cms.string('TRACK:HFEM'),
            linkerName = cms.string('TrackAndHCALLinker'),
            trajectoryLayerEntrance = cms.string('VFcalEntrance'),
            trajectoryLayerExit = cms.string(''),
            useKDTree = cms.bool(True)
        ), 
        cms.PSet(
            linkType = cms.string('TRACK:HFHAD'),
            linkerName = cms.string('TrackAndHCALLinker'),
            trajectoryLayerEntrance = cms.string('VFcalEntrance'),
            trajectoryLayerExit = cms.string(''),
            useKDTree = cms.bool(True)
        )
    ),
    verbose = cms.untracked.bool(False)
)


process.particleFlowClusterECAL = cms.EDProducer("CorrectedECALPFClusterProducer",
    energyCorrector = cms.PSet(
        applyCrackCorrections = cms.bool(False),
        applyMVACorrections = cms.bool(True),
        autoDetectBunchSpacing = cms.bool(True),
        bunchSpacing = cms.int32(25),
        ebSrFlagLabel = cms.InputTag("ecalDigis"),
        eeSrFlagLabel = cms.InputTag("ecalDigis"),
        maxPtForMVAEvaluation = cms.double(300.0),
        recHitsEBLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        recHitsEELabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        setEnergyUncertainty = cms.bool(False),
        srfAwareCorrection = cms.bool(True)
    ),
    inputECAL = cms.InputTag("particleFlowTimeAssignerECAL"),
    inputPS = cms.InputTag("particleFlowClusterPS"),
    mightGet = cms.optional.untracked.vstring,
    minimumPSEnergy = cms.double(0)
)


process.particleFlowClusterECALUncorrected = cms.EDProducer("PFClusterProducer",
    energyCorrector = cms.PSet(

    ),
    initialClusteringStep = cms.PSet(
        algoName = cms.string('Basic2DGenericTopoClusterizer'),
        thresholdsByDetector = cms.VPSet(
            cms.PSet(
                detector = cms.string('ECAL_BARREL'),
                gatheringThreshold = cms.double(0.175),
                gatheringThresholdPt = cms.double(0.0)
            ), 
            cms.PSet(
                detector = cms.string('ECAL_ENDCAP'),
                gatheringThreshold = cms.double(0.3),
                gatheringThresholdPt = cms.double(0.0)
            )
        ),
        useCornerCells = cms.bool(True)
    ),
    pfClusterBuilder = cms.PSet(
        algoName = cms.string('Basic2DGenericPFlowClusterizer'),
        allCellsPositionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.08),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(-1),
            timeResolutionCalcBarrel = cms.PSet(
                constantTerm = cms.double(0.428192),
                constantTermLowE = cms.double(0.0),
                corrTermLowE = cms.double(0.0510871),
                noiseTerm = cms.double(1.10889),
                noiseTermLowE = cms.double(1.31883),
                threshHighE = cms.double(5.0),
                threshLowE = cms.double(0.5)
            ),
            timeResolutionCalcEndcap = cms.PSet(
                constantTerm = cms.double(0.0),
                constantTermLowE = cms.double(0.0),
                corrTermLowE = cms.double(0.0),
                noiseTerm = cms.double(5.72489999999),
                noiseTermLowE = cms.double(6.92683000001),
                threshHighE = cms.double(10.0),
                threshLowE = cms.double(1.0)
            )
        ),
        excludeOtherSeeds = cms.bool(True),
        maxIterations = cms.uint32(50),
        minFracTot = cms.double(1e-20),
        minFractionToKeep = cms.double(1e-07),
        positionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.08),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(9),
            timeResolutionCalcBarrel = cms.PSet(
                constantTerm = cms.double(0.428192),
                constantTermLowE = cms.double(0.0),
                corrTermLowE = cms.double(0.0510871),
                noiseTerm = cms.double(1.10889),
                noiseTermLowE = cms.double(1.31883),
                threshHighE = cms.double(5.0),
                threshLowE = cms.double(0.5)
            ),
            timeResolutionCalcEndcap = cms.PSet(
                constantTerm = cms.double(0.0),
                constantTermLowE = cms.double(0.0),
                corrTermLowE = cms.double(0.0),
                noiseTerm = cms.double(5.72489999999),
                noiseTermLowE = cms.double(6.92683000001),
                threshHighE = cms.double(10.0),
                threshLowE = cms.double(1.0)
            )
        ),
        positionCalcForConvergence = cms.PSet(
            T0_EB = cms.double(7.4),
            T0_EE = cms.double(3.1),
            T0_ES = cms.double(1.2),
            W0 = cms.double(4.2),
            X0 = cms.double(0.89),
            algoName = cms.string('ECAL2DPositionCalcWithDepthCorr'),
            minAllowedNormalization = cms.double(0.0),
            minFractionInCalc = cms.double(0.0)
        ),
        recHitEnergyNorms = cms.VPSet(
            cms.PSet(
                detector = cms.string('ECAL_BARREL'),
                recHitEnergyNorm = cms.double(0.08)
            ), 
            cms.PSet(
                detector = cms.string('ECAL_ENDCAP'),
                recHitEnergyNorm = cms.double(0.3)
            )
        ),
        showerSigma = cms.double(1.5),
        stoppingTolerance = cms.double(1e-08)
    ),
    positionReCalc = cms.PSet(
        T0_EB = cms.double(7.4),
        T0_EE = cms.double(3.1),
        T0_ES = cms.double(1.2),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89),
        algoName = cms.string('ECAL2DPositionCalcWithDepthCorr'),
        minAllowedNormalization = cms.double(0.0),
        minFractionInCalc = cms.double(0.0)
    ),
    recHitCleaners = cms.VPSet(),
    recHitsSource = cms.InputTag("particleFlowRecHitECAL"),
    seedCleaners = cms.VPSet(cms.PSet(
        RecHitFlagsToBeExcluded = cms.vstring(),
        algoName = cms.string('FlagsCleanerECAL')
    )),
    seedFinder = cms.PSet(
        algoName = cms.string('LocalMaximumSeedFinder'),
        nNeighbours = cms.int32(8),
        thresholdsByDetector = cms.VPSet(
            cms.PSet(
                detector = cms.string('ECAL_ENDCAP'),
                seedingThreshold = cms.double(0.6),
                seedingThresholdPt = cms.double(0.15)
            ), 
            cms.PSet(
                detector = cms.string('ECAL_BARREL'),
                seedingThreshold = cms.double(0.4375),
                seedingThresholdPt = cms.double(0.0)
            )
        )
    )
)


process.particleFlowClusterHBHE = cms.EDProducer("PFClusterProducer",
    energyCorrector = cms.PSet(

    ),
    initialClusteringStep = cms.PSet(
        algoName = cms.string('Basic2DGenericTopoClusterizer'),
        thresholdsByDetector = cms.VPSet(
            cms.PSet(
                depths = cms.vint32(1, 2, 3, 4),
                detector = cms.string('HCAL_BARREL1'),
                gatheringThreshold = cms.vdouble(0.8, 1.2, 1.2, 1.2),
                gatheringThresholdPt = cms.vdouble(0.0, 0.0, 0.0, 0.0)
            ), 
            cms.PSet(
                depths = cms.vint32(
                    1, 2, 3, 4, 5, 
                    6, 7
                ),
                detector = cms.string('HCAL_ENDCAP'),
                gatheringThreshold = cms.vdouble(
                    0.1, 0.2, 0.2, 0.2, 0.2, 
                    0.2, 0.2
                ),
                gatheringThresholdPt = cms.vdouble(
                    0.0, 0.0, 0.0, 0.0, 0.0, 
                    0.0, 0.0
                )
            )
        ),
        useCornerCells = cms.bool(True)
    ),
    pfClusterBuilder = cms.PSet(
        algoName = cms.string('Basic2DGenericPFlowClusterizer'),
        allCellsPositionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominatorByDetector = cms.VPSet(
                cms.PSet(
                    depths = cms.vint32(1, 2, 3, 4),
                    detector = cms.string('HCAL_BARREL1'),
                    logWeightDenominator = cms.vdouble(0.8, 1.2, 1.2, 1.2)
                ), 
                cms.PSet(
                    depths = cms.vint32(
                        1, 2, 3, 4, 5, 
                        6, 7
                    ),
                    detector = cms.string('HCAL_ENDCAP'),
                    logWeightDenominator = cms.vdouble(
                        0.1, 0.2, 0.2, 0.2, 0.2, 
                        0.2, 0.2
                    )
                )
            ),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(-1)
        ),
        clusterTimeResFromSeed = cms.bool(False),
        excludeOtherSeeds = cms.bool(True),
        maxIterations = cms.uint32(50),
        maxNSigmaTime = cms.double(10.0),
        minChi2Prob = cms.double(0.0),
        minFracTot = cms.double(1e-20),
        minFractionToKeep = cms.double(1e-07),
        positionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominatorByDetector = cms.VPSet(
                cms.PSet(
                    depths = cms.vint32(1, 2, 3, 4),
                    detector = cms.string('HCAL_BARREL1'),
                    logWeightDenominator = cms.vdouble(0.8, 1.2, 1.2, 1.2)
                ), 
                cms.PSet(
                    depths = cms.vint32(
                        1, 2, 3, 4, 5, 
                        6, 7
                    ),
                    detector = cms.string('HCAL_ENDCAP'),
                    logWeightDenominator = cms.vdouble(
                        0.1, 0.2, 0.2, 0.2, 0.2, 
                        0.2, 0.2
                    )
                )
            ),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(5)
        ),
        recHitEnergyNorms = cms.VPSet(
            cms.PSet(
                depths = cms.vint32(1, 2, 3, 4),
                detector = cms.string('HCAL_BARREL1'),
                recHitEnergyNorm = cms.vdouble(0.8, 1.2, 1.2, 1.2)
            ), 
            cms.PSet(
                depths = cms.vint32(
                    1, 2, 3, 4, 5, 
                    6, 7
                ),
                detector = cms.string('HCAL_ENDCAP'),
                recHitEnergyNorm = cms.vdouble(
                    0.1, 0.2, 0.2, 0.2, 0.2, 
                    0.2, 0.2
                )
            )
        ),
        showerSigma = cms.double(10.0),
        stoppingTolerance = cms.double(1e-08),
        timeResolutionCalcBarrel = cms.PSet(
            constantTerm = cms.double(2.82),
            constantTermLowE = cms.double(4.24),
            corrTermLowE = cms.double(0.0),
            noiseTerm = cms.double(21.86),
            noiseTermLowE = cms.double(8),
            threshHighE = cms.double(15.0),
            threshLowE = cms.double(6.0)
        ),
        timeResolutionCalcEndcap = cms.PSet(
            constantTerm = cms.double(2.82),
            constantTermLowE = cms.double(4.24),
            corrTermLowE = cms.double(0.0),
            noiseTerm = cms.double(21.86),
            noiseTermLowE = cms.double(8),
            threshHighE = cms.double(15.0),
            threshLowE = cms.double(6.0)
        ),
        timeSigmaEB = cms.double(10.0),
        timeSigmaEE = cms.double(10.0)
    ),
    positionReCalc = cms.PSet(

    ),
    recHitCleaners = cms.VPSet(),
    recHitsSource = cms.InputTag("particleFlowRecHitHBHE"),
    seedCleaners = cms.VPSet(),
    seedFinder = cms.PSet(
        algoName = cms.string('LocalMaximumSeedFinder'),
        nNeighbours = cms.int32(4),
        thresholdsByDetector = cms.VPSet(
            cms.PSet(
                depths = cms.vint32(1, 2, 3, 4),
                detector = cms.string('HCAL_BARREL1'),
                seedingThreshold = cms.vdouble(1.0, 1.5, 1.5, 1.5),
                seedingThresholdPt = cms.vdouble(0.0, 0.0, 0.0, 0.0)
            ), 
            cms.PSet(
                depths = cms.vint32(
                    1, 2, 3, 4, 5, 
                    6, 7
                ),
                detector = cms.string('HCAL_ENDCAP'),
                seedingThreshold = cms.vdouble(
                    0.1375, 0.275, 0.275, 0.275, 0.275, 
                    0.275, 0.275
                ),
                seedingThresholdPt = cms.vdouble(
                    0.0, 0.0, 0.0, 0.0, 0.0, 
                    0.0, 0.0
                )
            )
        )
    )
)


process.particleFlowClusterHBHEOnly = cms.EDProducer("PFClusterProducer",
    energyCorrector = cms.PSet(

    ),
    initialClusteringStep = cms.PSet(
        algoName = cms.string('Basic2DGenericTopoClusterizer'),
        thresholdsByDetector = cms.VPSet(
            cms.PSet(
                depths = cms.vint32(1, 2, 3, 4),
                detector = cms.string('HCAL_BARREL1'),
                gatheringThreshold = cms.vdouble(0.1, 0.2, 0.3, 0.3),
                gatheringThresholdPt = cms.vdouble(0.0, 0.0, 0.0, 0.0)
            ), 
            cms.PSet(
                depths = cms.vint32(
                    1, 2, 3, 4, 5, 
                    6, 7
                ),
                detector = cms.string('HCAL_ENDCAP'),
                gatheringThreshold = cms.vdouble(
                    0.1, 0.2, 0.2, 0.2, 0.2, 
                    0.2, 0.2
                ),
                gatheringThresholdPt = cms.vdouble(
                    0.0, 0.0, 0.0, 0.0, 0.0, 
                    0.0, 0.0
                )
            )
        ),
        useCornerCells = cms.bool(True)
    ),
    pfClusterBuilder = cms.PSet(
        algoName = cms.string('Basic2DGenericPFlowClusterizer'),
        allCellsPositionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominatorByDetector = cms.VPSet(
                cms.PSet(
                    depths = cms.vint32(1, 2, 3, 4),
                    detector = cms.string('HCAL_BARREL1'),
                    logWeightDenominator = cms.vdouble(0.1, 0.2, 0.3, 0.3)
                ), 
                cms.PSet(
                    depths = cms.vint32(
                        1, 2, 3, 4, 5, 
                        6, 7
                    ),
                    detector = cms.string('HCAL_ENDCAP'),
                    logWeightDenominator = cms.vdouble(
                        0.1, 0.2, 0.2, 0.2, 0.2, 
                        0.2, 0.2
                    )
                )
            ),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(-1)
        ),
        clusterTimeResFromSeed = cms.bool(False),
        excludeOtherSeeds = cms.bool(True),
        maxIterations = cms.uint32(50),
        maxNSigmaTime = cms.double(10.0),
        minChi2Prob = cms.double(0.0),
        minFracTot = cms.double(1e-20),
        minFractionToKeep = cms.double(1e-07),
        positionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominatorByDetector = cms.VPSet(
                cms.PSet(
                    depths = cms.vint32(1, 2, 3, 4),
                    detector = cms.string('HCAL_BARREL1'),
                    logWeightDenominator = cms.vdouble(0.1, 0.2, 0.3, 0.3)
                ), 
                cms.PSet(
                    depths = cms.vint32(
                        1, 2, 3, 4, 5, 
                        6, 7
                    ),
                    detector = cms.string('HCAL_ENDCAP'),
                    logWeightDenominator = cms.vdouble(
                        0.1, 0.2, 0.2, 0.2, 0.2, 
                        0.2, 0.2
                    )
                )
            ),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(5)
        ),
        recHitEnergyNorms = cms.VPSet(
            cms.PSet(
                depths = cms.vint32(1, 2, 3, 4),
                detector = cms.string('HCAL_BARREL1'),
                recHitEnergyNorm = cms.vdouble(0.1, 0.2, 0.3, 0.3)
            ), 
            cms.PSet(
                depths = cms.vint32(
                    1, 2, 3, 4, 5, 
                    6, 7
                ),
                detector = cms.string('HCAL_ENDCAP'),
                recHitEnergyNorm = cms.vdouble(
                    0.1, 0.2, 0.2, 0.2, 0.2, 
                    0.2, 0.2
                )
            )
        ),
        showerSigma = cms.double(10.0),
        stoppingTolerance = cms.double(1e-08),
        timeResolutionCalcBarrel = cms.PSet(
            constantTerm = cms.double(2.82),
            constantTermLowE = cms.double(4.24),
            corrTermLowE = cms.double(0.0),
            noiseTerm = cms.double(21.86),
            noiseTermLowE = cms.double(8),
            threshHighE = cms.double(15.0),
            threshLowE = cms.double(6.0)
        ),
        timeResolutionCalcEndcap = cms.PSet(
            constantTerm = cms.double(2.82),
            constantTermLowE = cms.double(4.24),
            corrTermLowE = cms.double(0.0),
            noiseTerm = cms.double(21.86),
            noiseTermLowE = cms.double(8),
            threshHighE = cms.double(15.0),
            threshLowE = cms.double(6.0)
        ),
        timeSigmaEB = cms.double(10.0),
        timeSigmaEE = cms.double(10.0)
    ),
    positionReCalc = cms.PSet(

    ),
    recHitCleaners = cms.VPSet(),
    recHitsSource = cms.InputTag("particleFlowRecHitHBHEOnly"),
    seedCleaners = cms.VPSet(),
    seedFinder = cms.PSet(
        algoName = cms.string('LocalMaximumSeedFinder'),
        nNeighbours = cms.int32(4),
        thresholdsByDetector = cms.VPSet(
            cms.PSet(
                depths = cms.vint32(1, 2, 3, 4),
                detector = cms.string('HCAL_BARREL1'),
                seedingThreshold = cms.vdouble(0.125, 0.25, 0.35, 0.35),
                seedingThresholdPt = cms.vdouble(0.0, 0.0, 0.0, 0.0)
            ), 
            cms.PSet(
                depths = cms.vint32(
                    1, 2, 3, 4, 5, 
                    6, 7
                ),
                detector = cms.string('HCAL_ENDCAP'),
                seedingThreshold = cms.vdouble(
                    0.1375, 0.275, 0.275, 0.275, 0.275, 
                    0.275, 0.275
                ),
                seedingThresholdPt = cms.vdouble(
                    0.0, 0.0, 0.0, 0.0, 0.0, 
                    0.0, 0.0
                )
            )
        )
    )
)


process.particleFlowClusterHCAL = cms.EDProducer("PFMultiDepthClusterProducer",
    clustersSource = cms.InputTag("particleFlowClusterHBHE"),
    energyCorrector = cms.PSet(

    ),
    pfClusterBuilder = cms.PSet(
        algoName = cms.string('PFMultiDepthClusterizer'),
        allCellsPositionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominatorByDetector = cms.VPSet(
                cms.PSet(
                    depths = cms.vint32(1, 2, 3, 4),
                    detector = cms.string('HCAL_BARREL1'),
                    logWeightDenominator = cms.vdouble(0.8, 1.2, 1.2, 1.2)
                ), 
                cms.PSet(
                    depths = cms.vint32(
                        1, 2, 3, 4, 5, 
                        6, 7
                    ),
                    detector = cms.string('HCAL_ENDCAP'),
                    logWeightDenominator = cms.vdouble(
                        0.1, 0.2, 0.2, 0.2, 0.2, 
                        0.2, 0.2
                    )
                )
            ),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(-1)
        ),
        minFractionToKeep = cms.double(1e-07),
        nSigmaEta = cms.double(2.0),
        nSigmaPhi = cms.double(2.0)
    ),
    positionReCalc = cms.PSet(

    )
)


process.particleFlowClusterHCALOnly = cms.EDProducer("PFMultiDepthClusterProducer",
    clustersSource = cms.InputTag("particleFlowClusterHBHEOnly"),
    energyCorrector = cms.PSet(

    ),
    pfClusterBuilder = cms.PSet(
        algoName = cms.string('PFMultiDepthClusterizer'),
        allCellsPositionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominatorByDetector = cms.VPSet(
                cms.PSet(
                    depths = cms.vint32(1, 2, 3, 4),
                    detector = cms.string('HCAL_BARREL1'),
                    logWeightDenominator = cms.vdouble(0.1, 0.2, 0.3, 0.3)
                ), 
                cms.PSet(
                    depths = cms.vint32(
                        1, 2, 3, 4, 5, 
                        6, 7
                    ),
                    detector = cms.string('HCAL_ENDCAP'),
                    logWeightDenominator = cms.vdouble(
                        0.1, 0.2, 0.2, 0.2, 0.2, 
                        0.2, 0.2
                    )
                )
            ),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(-1)
        ),
        minFractionToKeep = cms.double(1e-07),
        nSigmaEta = cms.double(2.0),
        nSigmaPhi = cms.double(2.0)
    ),
    positionReCalc = cms.PSet(

    )
)


process.particleFlowClusterHF = cms.EDProducer("PFClusterProducer",
    energyCorrector = cms.PSet(

    ),
    initialClusteringStep = cms.PSet(
        algoName = cms.string('Basic2DGenericTopoClusterizer'),
        thresholdsByDetector = cms.VPSet(
            cms.PSet(
                detector = cms.string('HF_EM'),
                gatheringThreshold = cms.double(0.8),
                gatheringThresholdPt = cms.double(0.0)
            ), 
            cms.PSet(
                detector = cms.string('HF_HAD'),
                gatheringThreshold = cms.double(0.8),
                gatheringThresholdPt = cms.double(0.0)
            )
        ),
        useCornerCells = cms.bool(False)
    ),
    pfClusterBuilder = cms.PSet(
        algoName = cms.string('Basic2DGenericPFlowClusterizer'),
        allCellsPositionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.8),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(-1)
        ),
        excludeOtherSeeds = cms.bool(True),
        maxIterations = cms.uint32(50),
        minFracTot = cms.double(1e-20),
        minFractionToKeep = cms.double(1e-07),
        positionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.8),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(5)
        ),
        recHitEnergyNorms = cms.VPSet(
            cms.PSet(
                detector = cms.string('HF_EM'),
                recHitEnergyNorm = cms.double(0.8)
            ), 
            cms.PSet(
                detector = cms.string('HF_HAD'),
                recHitEnergyNorm = cms.double(0.8)
            )
        ),
        showerSigma = cms.double(10.0),
        stoppingTolerance = cms.double(1e-08)
    ),
    positionReCalc = cms.PSet(

    ),
    recHitCleaners = cms.VPSet(),
    recHitsSource = cms.InputTag("particleFlowRecHitHF"),
    seedCleaners = cms.VPSet(),
    seedFinder = cms.PSet(
        algoName = cms.string('LocalMaximumSeedFinder'),
        nNeighbours = cms.int32(0),
        thresholdsByDetector = cms.VPSet(
            cms.PSet(
                detector = cms.string('HF_EM'),
                seedingThreshold = cms.double(1.4),
                seedingThresholdPt = cms.double(0.0)
            ), 
            cms.PSet(
                detector = cms.string('HF_HAD'),
                seedingThreshold = cms.double(1.4),
                seedingThresholdPt = cms.double(0.0)
            )
        )
    )
)


process.particleFlowClusterHGCal = cms.EDProducer("PFClusterProducer",
    energyCorrector = cms.PSet(

    ),
    initialClusteringStep = cms.PSet(
        algoName = cms.string('RealisticSimClusterMapper'),
        calibMaxEta = cms.double(3.0),
        calibMinEta = cms.double(1.4),
        egammaCalib = cms.vdouble(
            1.0, 1.0, 1.01, 1.01, 1.02, 
            1.01, 1.01, 1.01
        ),
        exclusiveFraction = cms.double(0.6),
        hadronCalib = cms.vdouble(
            1.28, 1.28, 1.24, 1.19, 1.17, 
            1.17, 1.17, 1.17
        ),
        invisibleFraction = cms.double(0.6),
        maxDforTimingSquared = cms.double(4.0),
        maxDistance = cms.double(10.0),
        maxDistanceFilter = cms.bool(True),
        minNHitsforTiming = cms.uint32(3),
        simClusterSrc = cms.InputTag("mix","MergedCaloTruth"),
        thresholdsByDetector = cms.VPSet(),
        timeOffset = cms.double(5),
        useMCFractionsForExclEnergy = cms.bool(False)
    ),
    pfClusterBuilder = cms.PSet(

    ),
    positionReCalc = cms.PSet(
        algoName = cms.string('Cluster3DPCACalculator'),
        minFractionInCalc = cms.double(1e-09),
        updateTiming = cms.bool(False)
    ),
    recHitCleaners = cms.VPSet(),
    recHitsSource = cms.InputTag("particleFlowRecHitHGC"),
    seedCleaners = cms.VPSet(),
    seedFinder = cms.PSet(
        algoName = cms.string('PassThruSeedFinder'),
        nNeighbours = cms.int32(8),
        thresholdsByDetector = cms.VPSet()
    )
)


process.particleFlowClusterHGCalFromMultiCl = cms.EDProducer("PFClusterProducer",
    energyCorrector = cms.PSet(

    ),
    initialClusteringStep = cms.PSet(
        algoName = cms.string('PFClusterFromHGCalMultiCluster'),
        clusterSrc = cms.InputTag("ticlMultiClustersFromTrackstersMerge"),
        filterByTracksterPID = cms.bool(False),
        filter_on_categories = cms.vint32(0, 1),
        pid_threshold = cms.double(0.8),
        thresholdsByDetector = cms.VPSet(),
        tracksterSrc = cms.InputTag("ticlTrackstersMerge")
    ),
    pfClusterBuilder = cms.PSet(

    ),
    positionReCalc = cms.PSet(
        algoName = cms.string('Cluster3DPCACalculator'),
        minFractionInCalc = cms.double(1e-09),
        updateTiming = cms.bool(False)
    ),
    recHitCleaners = cms.VPSet(),
    recHitsSource = cms.InputTag("particleFlowRecHitHGC"),
    seedCleaners = cms.VPSet(),
    seedFinder = cms.PSet(
        algoName = cms.string('PassThruSeedFinder'),
        nNeighbours = cms.int32(8),
        thresholdsByDetector = cms.VPSet()
    )
)


process.particleFlowClusterHO = cms.EDProducer("PFClusterProducer",
    energyCorrector = cms.PSet(

    ),
    initialClusteringStep = cms.PSet(
        algoName = cms.string('Basic2DGenericTopoClusterizer'),
        thresholdsByDetector = cms.VPSet(
            cms.PSet(
                detector = cms.string('HCAL_BARREL2_RING0'),
                gatheringThreshold = cms.double(0.05),
                gatheringThresholdPt = cms.double(0.0)
            ), 
            cms.PSet(
                detector = cms.string('HCAL_BARREL2_RING1'),
                gatheringThreshold = cms.double(0.05),
                gatheringThresholdPt = cms.double(0.0)
            )
        ),
        useCornerCells = cms.bool(True)
    ),
    pfClusterBuilder = cms.PSet(
        algoName = cms.string('Basic2DGenericPFlowClusterizer'),
        allCellsPositionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.05),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(-1)
        ),
        excludeOtherSeeds = cms.bool(True),
        maxIterations = cms.uint32(50),
        minFracTot = cms.double(1e-20),
        minFractionToKeep = cms.double(1e-07),
        positionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.05),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(5)
        ),
        recHitEnergyNorms = cms.VPSet(
            cms.PSet(
                detector = cms.string('HCAL_BARREL2_RING0'),
                recHitEnergyNorm = cms.double(0.05)
            ), 
            cms.PSet(
                detector = cms.string('HCAL_BARREL2_RING1'),
                recHitEnergyNorm = cms.double(0.05)
            )
        ),
        showerSigma = cms.double(10.0),
        stoppingTolerance = cms.double(1e-08)
    ),
    positionReCalc = cms.PSet(

    ),
    recHitCleaners = cms.VPSet(),
    recHitsSource = cms.InputTag("particleFlowRecHitHO"),
    seedCleaners = cms.VPSet(),
    seedFinder = cms.PSet(
        algoName = cms.string('LocalMaximumSeedFinder'),
        nNeighbours = cms.int32(4),
        thresholdsByDetector = cms.VPSet(
            cms.PSet(
                detector = cms.string('HCAL_BARREL2_RING0'),
                seedingThreshold = cms.double(0.08),
                seedingThresholdPt = cms.double(0.0)
            ), 
            cms.PSet(
                detector = cms.string('HCAL_BARREL2_RING1'),
                seedingThreshold = cms.double(0.08),
                seedingThresholdPt = cms.double(0.0)
            )
        )
    )
)


process.particleFlowClusterOOTECAL = cms.EDProducer("CorrectedECALPFClusterProducer",
    energyCorrector = cms.PSet(
        applyCrackCorrections = cms.bool(False),
        applyMVACorrections = cms.bool(True),
        autoDetectBunchSpacing = cms.bool(True),
        bunchSpacing = cms.int32(25),
        ebSrFlagLabel = cms.InputTag("ecalDigis"),
        eeSrFlagLabel = cms.InputTag("ecalDigis"),
        maxPtForMVAEvaluation = cms.double(300.0),
        recHitsEBLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        recHitsEELabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        setEnergyUncertainty = cms.bool(False),
        srfAwareCorrection = cms.bool(True)
    ),
    inputECAL = cms.InputTag("particleFlowClusterOOTECALUncorrected"),
    inputPS = cms.InputTag("particleFlowClusterPS"),
    mightGet = cms.optional.untracked.vstring,
    minimumPSEnergy = cms.double(0)
)


process.particleFlowClusterOOTECALUncorrected = cms.EDProducer("PFClusterProducer",
    energyCorrector = cms.PSet(

    ),
    initialClusteringStep = cms.PSet(
        algoName = cms.string('Basic2DGenericTopoClusterizer'),
        thresholdsByDetector = cms.VPSet(
            cms.PSet(
                detector = cms.string('ECAL_BARREL'),
                gatheringThreshold = cms.double(0.08),
                gatheringThresholdPt = cms.double(0.0)
            ), 
            cms.PSet(
                detector = cms.string('ECAL_ENDCAP'),
                gatheringThreshold = cms.double(0.3),
                gatheringThresholdPt = cms.double(0.0)
            )
        ),
        useCornerCells = cms.bool(True)
    ),
    pfClusterBuilder = cms.PSet(
        algoName = cms.string('Basic2DGenericPFlowClusterizer'),
        allCellsPositionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.08),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(-1),
            timeResolutionCalcBarrel = cms.PSet(
                constantTerm = cms.double(0.428192),
                constantTermLowE = cms.double(0.0),
                corrTermLowE = cms.double(0.0510871),
                noiseTerm = cms.double(1.10889),
                noiseTermLowE = cms.double(1.31883),
                threshHighE = cms.double(5.0),
                threshLowE = cms.double(0.5)
            ),
            timeResolutionCalcEndcap = cms.PSet(
                constantTerm = cms.double(0.0),
                constantTermLowE = cms.double(0.0),
                corrTermLowE = cms.double(0.0),
                noiseTerm = cms.double(5.72489999999),
                noiseTermLowE = cms.double(6.92683000001),
                threshHighE = cms.double(10.0),
                threshLowE = cms.double(1.0)
            )
        ),
        excludeOtherSeeds = cms.bool(True),
        maxIterations = cms.uint32(50),
        minFracTot = cms.double(1e-20),
        minFractionToKeep = cms.double(1e-07),
        positionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.08),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(9),
            timeResolutionCalcBarrel = cms.PSet(
                constantTerm = cms.double(0.428192),
                constantTermLowE = cms.double(0.0),
                corrTermLowE = cms.double(0.0510871),
                noiseTerm = cms.double(1.10889),
                noiseTermLowE = cms.double(1.31883),
                threshHighE = cms.double(5.0),
                threshLowE = cms.double(0.5)
            ),
            timeResolutionCalcEndcap = cms.PSet(
                constantTerm = cms.double(0.0),
                constantTermLowE = cms.double(0.0),
                corrTermLowE = cms.double(0.0),
                noiseTerm = cms.double(5.72489999999),
                noiseTermLowE = cms.double(6.92683000001),
                threshHighE = cms.double(10.0),
                threshLowE = cms.double(1.0)
            )
        ),
        positionCalcForConvergence = cms.PSet(
            T0_EB = cms.double(7.4),
            T0_EE = cms.double(3.1),
            T0_ES = cms.double(1.2),
            W0 = cms.double(4.2),
            X0 = cms.double(0.89),
            algoName = cms.string('ECAL2DPositionCalcWithDepthCorr'),
            minAllowedNormalization = cms.double(0.0),
            minFractionInCalc = cms.double(0.0)
        ),
        recHitEnergyNorms = cms.VPSet(
            cms.PSet(
                detector = cms.string('ECAL_BARREL'),
                recHitEnergyNorm = cms.double(0.08)
            ), 
            cms.PSet(
                detector = cms.string('ECAL_ENDCAP'),
                recHitEnergyNorm = cms.double(0.3)
            )
        ),
        showerSigma = cms.double(1.5),
        stoppingTolerance = cms.double(1e-08)
    ),
    positionReCalc = cms.PSet(
        T0_EB = cms.double(7.4),
        T0_EE = cms.double(3.1),
        T0_ES = cms.double(1.2),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89),
        algoName = cms.string('ECAL2DPositionCalcWithDepthCorr'),
        minAllowedNormalization = cms.double(0.0),
        minFractionInCalc = cms.double(0.0)
    ),
    recHitCleaners = cms.VPSet(),
    recHitsSource = cms.InputTag("particleFlowRecHitOOTECAL"),
    seedCleaners = cms.VPSet(cms.PSet(
        RecHitFlagsToBeExcluded = cms.vstring(),
        algoName = cms.string('FlagsCleanerECAL')
    )),
    seedFinder = cms.PSet(
        algoName = cms.string('LocalMaximumSeedFinder'),
        nNeighbours = cms.int32(8),
        thresholdsByDetector = cms.VPSet(
            cms.PSet(
                detector = cms.string('ECAL_ENDCAP'),
                seedingThreshold = cms.double(0.6),
                seedingThresholdPt = cms.double(0.15)
            ), 
            cms.PSet(
                detector = cms.string('ECAL_BARREL'),
                seedingThreshold = cms.double(0.23),
                seedingThresholdPt = cms.double(0.0)
            )
        )
    )
)


process.particleFlowClusterPS = cms.EDProducer("PFClusterProducer",
    energyCorrector = cms.PSet(

    ),
    initialClusteringStep = cms.PSet(
        algoName = cms.string('Basic2DGenericTopoClusterizer'),
        thresholdsByDetector = cms.VPSet(
            cms.PSet(
                detector = cms.string('PS1'),
                gatheringThreshold = cms.double(6e-05),
                gatheringThresholdPt = cms.double(0.0)
            ), 
            cms.PSet(
                detector = cms.string('PS2'),
                gatheringThreshold = cms.double(6e-05),
                gatheringThresholdPt = cms.double(0.0)
            )
        ),
        useCornerCells = cms.bool(False)
    ),
    pfClusterBuilder = cms.PSet(
        algoName = cms.string('Basic2DGenericPFlowClusterizer'),
        excludeOtherSeeds = cms.bool(True),
        maxIterations = cms.uint32(50),
        minFracTot = cms.double(1e-20),
        minFractionToKeep = cms.double(1e-07),
        positionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(6e-05),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(-1)
        ),
        recHitEnergyNorms = cms.VPSet(
            cms.PSet(
                detector = cms.string('PS1'),
                recHitEnergyNorm = cms.double(6e-05)
            ), 
            cms.PSet(
                detector = cms.string('PS2'),
                recHitEnergyNorm = cms.double(6e-05)
            )
        ),
        showerSigma = cms.double(0.3),
        stoppingTolerance = cms.double(1e-08)
    ),
    positionReCalc = cms.PSet(

    ),
    recHitCleaners = cms.VPSet(),
    recHitsSource = cms.InputTag("particleFlowRecHitPS"),
    seedCleaners = cms.VPSet(),
    seedFinder = cms.PSet(
        algoName = cms.string('LocalMaximumSeedFinder'),
        nNeighbours = cms.int32(4),
        thresholdsByDetector = cms.VPSet(
            cms.PSet(
                detector = cms.string('PS1'),
                seedingThreshold = cms.double(0.00012),
                seedingThresholdPt = cms.double(0.0)
            ), 
            cms.PSet(
                detector = cms.string('PS2'),
                seedingThreshold = cms.double(0.00012),
                seedingThresholdPt = cms.double(0.0)
            )
        )
    )
)


process.particleFlowDisplacedVertex = cms.EDProducer("PFDisplacedVertexProducer",
    avfParameters = cms.PSet(
        Tini = cms.double(256.0),
        ratio = cms.double(0.25),
        sigmacut = cms.double(6.0)
    ),
    debug = cms.untracked.bool(False),
    longSize = cms.double(5),
    mainVertexLabel = cms.InputTag("offlinePrimaryVertices"),
    minAdaptWeight = cms.double(0.5),
    offlineBeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    primaryVertexCut = cms.double(1.8),
    switchOff2TrackVertex = cms.untracked.bool(True),
    tecCut = cms.double(220),
    tobCut = cms.double(100),
    tracksSelectorParameters = cms.PSet(
        bSelectTracks = cms.bool(True),
        dxy_min = cms.double(0.2),
        nChi2_max = cms.double(5.0),
        nChi2_min = cms.double(0.5),
        nHits_min = cms.int32(6),
        nOuterHits_max = cms.int32(9),
        pt_min = cms.double(0.2),
        quality = cms.string('HighPurity')
    ),
    transvSize = cms.double(1.0),
    verbose = cms.untracked.bool(False),
    vertexCandidatesLabel = cms.InputTag("particleFlowDisplacedVertexCandidate"),
    vertexIdentifierParameters = cms.PSet(
        angles = cms.vdouble(15, 15),
        bIdentifyVertices = cms.bool(True),
        logPrimSec_min = cms.double(0.0),
        looper_eta_max = cms.double(0.1),
        masses = cms.vdouble(
            0.05, 0.485, 0.515, 0.48, 0.52, 
            1.107, 1.125, 0.2
        ),
        pt_kink_min = cms.double(3.0),
        pt_min = cms.double(0.5)
    )
)


process.particleFlowDisplacedVertexCandidate = cms.EDProducer("PFDisplacedVertexCandidateProducer",
    dcaCut = cms.double(0.5),
    dcaPInnerHitCut = cms.double(1000.0),
    debug = cms.untracked.bool(False),
    mainVertexLabel = cms.InputTag("offlinePrimaryVertices"),
    offlineBeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    primaryVertexCut = cms.double(1.8),
    trackCollection = cms.InputTag("generalTracks"),
    tracksSelectorParameters = cms.PSet(
        dxy = cms.double(0.2),
        nChi2_max = cms.double(5.0),
        pt_min = cms.double(0.2),
        pt_min_prim = cms.double(0.8)
    ),
    verbose = cms.untracked.bool(False)
)


process.particleFlowEGamma = cms.EDProducer("PFEGammaProducer",
    EEtoPS_source = cms.InputTag("particleFlowClusterECAL"),
    blocks = cms.InputTag("particleFlowBlock"),
    mightGet = cms.optional.untracked.vstring,
    pf_convID_mvaWeightFile = cms.FileInPath('RecoParticleFlow/PFProducer/data/pfConversionAug0411_BDT.weights.xml.gz'),
    pf_conv_mvaCut = cms.double(0),
    pf_electronID_crackCorrection = cms.bool(False),
    pf_electronID_mvaWeightFile = cms.FileInPath('RecoParticleFlow/PFProducer/data/PfElectrons23Jan_BDT.weights.xml.gz'),
    pf_electron_mvaCut = cms.double(-0.1),
    produceEGCandsWithNoSuperCluster = cms.bool(False),
    vertexCollection = cms.InputTag("offlinePrimaryVertices")
)


process.particleFlowForChargedMET = cms.EDProducer("ParticleFlowForChargedMETProducer",
    PFCollectionLabel = cms.InputTag("particleFlow"),
    PVCollectionLabel = cms.InputTag("offlinePrimaryVertices"),
    dzCut = cms.double(0.2),
    neutralEtThreshold = cms.double(-1.0)
)


process.particleFlowPtrs = cms.EDProducer("PFCandidateFwdPtrProducer",
    src = cms.InputTag("particleFlow")
)


process.particleFlowRecHitECAL = cms.EDProducer("PFRecHitProducer",
    navigator = cms.PSet(
        barrel = cms.PSet(

        ),
        endcap = cms.PSet(

        ),
        name = cms.string('PFRecHitECALNavigator')
    ),
    producers = cms.VPSet(
        cms.PSet(
            name = cms.string('PFEBRecHitCreator'),
            qualityTests = cms.VPSet(
                cms.PSet(
                    applySelectionsToAllCrystals = cms.bool(True),
                    name = cms.string('PFRecHitQTestDBThreshold')
                ), 
                cms.PSet(
                    cleaningThreshold = cms.double(2.0),
                    name = cms.string('PFRecHitQTestECAL'),
                    skipTTRecoveredHits = cms.bool(True),
                    timingCleaning = cms.bool(True),
                    topologicalCleaning = cms.bool(True)
                )
            ),
            srFlags = cms.InputTag(""),
            src = cms.InputTag("ecalRecHit","EcalRecHitsEB")
        ), 
        cms.PSet(
            name = cms.string('PFEERecHitCreator'),
            qualityTests = cms.VPSet(
                cms.PSet(
                    applySelectionsToAllCrystals = cms.bool(True),
                    name = cms.string('PFRecHitQTestDBThreshold')
                ), 
                cms.PSet(
                    cleaningThreshold = cms.double(2.0),
                    name = cms.string('PFRecHitQTestECAL'),
                    skipTTRecoveredHits = cms.bool(True),
                    timingCleaning = cms.bool(True),
                    topologicalCleaning = cms.bool(True)
                )
            ),
            srFlags = cms.InputTag(""),
            src = cms.InputTag("ecalRecHit","EcalRecHitsEE")
        )
    )
)


process.particleFlowRecHitHBHE = cms.EDProducer("PFRecHitProducer",
    navigator = cms.PSet(
        hcalEnums = cms.vint32(1, 2),
        name = cms.string('PFRecHitHCALDenseIdNavigator')
    ),
    producers = cms.VPSet(cms.PSet(
        name = cms.string('PFHBHERecHitCreator'),
        qualityTests = cms.VPSet(
            cms.PSet(
                cuts = cms.VPSet(
                    cms.PSet(
                        depth = cms.vint32(1, 2, 3, 4),
                        detectorEnum = cms.int32(1),
                        threshold = cms.vdouble(0.8, 1.2, 1.2, 1.2)
                    ), 
                    cms.PSet(
                        depth = cms.vint32(
                            1, 2, 3, 4, 5, 
                            6, 7
                        ),
                        detectorEnum = cms.int32(2),
                        threshold = cms.vdouble(
                            0.1, 0.2, 0.2, 0.2, 0.2, 
                            0.2, 0.2
                        )
                    )
                ),
                name = cms.string('PFRecHitQTestHCALThresholdVsDepth')
            ), 
            cms.PSet(
                cleaningThresholds = cms.vdouble(0.0),
                flags = cms.vstring('Standard'),
                maxSeverities = cms.vint32(11),
                name = cms.string('PFRecHitQTestHCALChannel')
            )
        ),
        src = cms.InputTag("hbhereco")
    ))
)


process.particleFlowRecHitHBHEOnly = cms.EDProducer("PFRecHitProducer",
    navigator = cms.PSet(
        hcalEnums = cms.vint32(1, 2),
        name = cms.string('PFRecHitHCALDenseIdNavigator')
    ),
    producers = cms.VPSet(cms.PSet(
        name = cms.string('PFHBHERecHitCreator'),
        qualityTests = cms.VPSet(
            cms.PSet(
                cuts = cms.VPSet(
                    cms.PSet(
                        depth = cms.vint32(1, 2, 3, 4),
                        detectorEnum = cms.int32(1),
                        threshold = cms.vdouble(0.1, 0.2, 0.3, 0.3)
                    ), 
                    cms.PSet(
                        depth = cms.vint32(
                            1, 2, 3, 4, 5, 
                            6, 7
                        ),
                        detectorEnum = cms.int32(2),
                        threshold = cms.vdouble(
                            0.1, 0.2, 0.2, 0.2, 0.2, 
                            0.2, 0.2
                        )
                    )
                ),
                name = cms.string('PFRecHitQTestHCALThresholdVsDepth')
            ), 
            cms.PSet(
                cleaningThresholds = cms.vdouble(0.0),
                flags = cms.vstring('Standard'),
                maxSeverities = cms.vint32(11),
                name = cms.string('PFRecHitQTestHCALChannel')
            )
        ),
        src = cms.InputTag("hbheprereco")
    ))
)


process.particleFlowRecHitHF = cms.EDProducer("PFRecHitProducer",
    navigator = cms.PSet(
        hcalEnums = cms.vint32(4),
        name = cms.string('PFRecHitHCALDenseIdNavigator')
    ),
    producers = cms.VPSet(cms.PSet(
        EMDepthCorrection = cms.double(22.0),
        HADDepthCorrection = cms.double(25.0),
        HFCalib29 = cms.double(1.07),
        LongFibre_Cut = cms.double(120.0),
        LongFibre_Fraction = cms.double(0.1),
        ShortFibre_Cut = cms.double(60.0),
        ShortFibre_Fraction = cms.double(0.01),
        name = cms.string('PFHFRecHitCreator'),
        qualityTests = cms.VPSet(
            cms.PSet(
                cleaningThresholds = cms.vdouble(0.0, 120.0, 60.0),
                flags = cms.vstring(
                    'Standard', 
                    'HFLong', 
                    'HFShort'
                ),
                maxSeverities = cms.vint32(11, 9, 9),
                name = cms.string('PFRecHitQTestHCALChannel')
            ), 
            cms.PSet(
                cuts = cms.VPSet(cms.PSet(
                    depth = cms.vint32(1, 2),
                    detectorEnum = cms.int32(4),
                    threshold = cms.vdouble(1.2, 1.8)
                )),
                name = cms.string('PFRecHitQTestHCALThresholdVsDepth')
            )
        ),
        src = cms.InputTag("hfreco"),
        thresh_HF = cms.double(0.4)
    ))
)


process.particleFlowRecHitHGC = cms.EDProducer("PFRecHitProducer",
    navigator = cms.PSet(
        hgcee = cms.PSet(
            name = cms.string('PFRecHitHGCEENavigator'),
            topologySource = cms.string('HGCalEESensitive')
        ),
        hgcheb = cms.PSet(
            name = cms.string('PFRecHitHGCHENavigator'),
            topologySource = cms.string('HGCalHEScintillatorSensitive')
        ),
        hgchef = cms.PSet(
            name = cms.string('PFRecHitHGCHENavigator'),
            topologySource = cms.string('HGCalHESiliconSensitive')
        ),
        name = cms.string('PFRecHitHGCNavigator')
    ),
    producers = cms.VPSet(
        cms.PSet(
            geometryInstance = cms.string('HGCalEESensitive'),
            name = cms.string('PFHGCalEERecHitCreator'),
            qualityTests = cms.VPSet(cms.PSet(
                name = cms.string('PFRecHitQTestHGCalThresholdSNR'),
                thresholdSNR = cms.double(5.0)
            )),
            src = cms.InputTag("HGCalRecHit","HGCEERecHits")
        ), 
        cms.PSet(
            geometryInstance = cms.string('HGCalHESiliconSensitive'),
            name = cms.string('PFHGCalHSiRecHitCreator'),
            qualityTests = cms.VPSet(cms.PSet(
                name = cms.string('PFRecHitQTestHGCalThresholdSNR'),
                thresholdSNR = cms.double(5.0)
            )),
            src = cms.InputTag("HGCalRecHit","HGCHEFRecHits")
        ), 
        cms.PSet(
            geometryInstance = cms.string(''),
            name = cms.string('PFHGCalHScRecHitCreator'),
            qualityTests = cms.VPSet(cms.PSet(
                name = cms.string('PFRecHitQTestHGCalThresholdSNR'),
                thresholdSNR = cms.double(5.0)
            )),
            src = cms.InputTag("HGCalRecHit","HGCHEBRecHits")
        )
    )
)


process.particleFlowRecHitHO = cms.EDProducer("PFRecHitProducer",
    navigator = cms.PSet(
        hcalEnums = cms.vint32(3),
        name = cms.string('PFRecHitHCALDenseIdNavigator')
    ),
    producers = cms.VPSet(cms.PSet(
        name = cms.string('PFHORecHitCreator'),
        qualityTests = cms.VPSet(
            cms.PSet(
                name = cms.string('PFRecHitQTestThreshold'),
                threshold = cms.double(0.05)
            ), 
            cms.PSet(
                cleaningThresholds = cms.vdouble(0.0),
                flags = cms.vstring('Standard'),
                maxSeverities = cms.vint32(11),
                name = cms.string('PFRecHitQTestHCALChannel')
            )
        ),
        src = cms.InputTag("horeco")
    ))
)


process.particleFlowRecHitOOTECAL = cms.EDProducer("PFRecHitProducer",
    navigator = cms.PSet(
        barrel = cms.PSet(

        ),
        endcap = cms.PSet(

        ),
        name = cms.string('PFRecHitECALNavigator')
    ),
    producers = cms.VPSet(
        cms.PSet(
            name = cms.string('PFEBRecHitCreator'),
            qualityTests = cms.VPSet(
                cms.PSet(
                    applySelectionsToAllCrystals = cms.bool(True),
                    name = cms.string('PFRecHitQTestDBThreshold')
                ), 
                cms.PSet(
                    cleaningThreshold = cms.double(2.0),
                    name = cms.string('PFRecHitQTestECAL'),
                    skipTTRecoveredHits = cms.bool(True),
                    timingCleaning = cms.bool(False),
                    topologicalCleaning = cms.bool(True)
                )
            ),
            srFlags = cms.InputTag(""),
            src = cms.InputTag("ecalRecHit","EcalRecHitsEB")
        ), 
        cms.PSet(
            name = cms.string('PFEERecHitCreator'),
            qualityTests = cms.VPSet(
                cms.PSet(
                    applySelectionsToAllCrystals = cms.bool(True),
                    name = cms.string('PFRecHitQTestDBThreshold')
                ), 
                cms.PSet(
                    cleaningThreshold = cms.double(2.0),
                    name = cms.string('PFRecHitQTestECAL'),
                    skipTTRecoveredHits = cms.bool(True),
                    timingCleaning = cms.bool(False),
                    topologicalCleaning = cms.bool(True)
                )
            ),
            srFlags = cms.InputTag(""),
            src = cms.InputTag("ecalRecHit","EcalRecHitsEE")
        )
    )
)


process.particleFlowRecHitPS = cms.EDProducer("PFRecHitProducer",
    navigator = cms.PSet(
        name = cms.string('PFRecHitPreshowerNavigator')
    ),
    producers = cms.VPSet(cms.PSet(
        name = cms.string('PFPSRecHitCreator'),
        qualityTests = cms.VPSet(
            cms.PSet(
                name = cms.string('PFRecHitQTestThreshold'),
                threshold = cms.double(0.0)
            ), 
            cms.PSet(
                cleaningThreshold = cms.double(0.0),
                name = cms.string('PFRecHitQTestES'),
                topologicalCleaning = cms.bool(True)
            )
        ),
        src = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES")
    ))
)


process.particleFlowSimParticle = cms.EDProducer("PFSimParticleProducer",
    Fitter = cms.string('KFFittingSmoother'),
    MCTruthMatchingInfo = cms.untracked.bool(False),
    ParticleFilter = cms.PSet(
        EMin = cms.double(0),
        chargedPtMin = cms.double(0),
        etaMax = cms.double(5.3),
        invisibleParticles = cms.vint32(),
        protonEMin = cms.double(5000.0),
        rMax = cms.double(129.0),
        zMax = cms.double(317.0)
    ),
    Propagator = cms.string('PropagatorWithMaterial'),
    RecTracks = cms.InputTag("trackerDrivenElectronSeeds"),
    TTRHBuilder = cms.string('WithTrackAngle'),
    ecalRecHitsEB = cms.InputTag("caloRecHits","EcalRecHitsEB"),
    ecalRecHitsEE = cms.InputTag("caloRecHits","EcalRecHitsEE"),
    fastSimProducer = cms.untracked.InputTag("fastSimProducer","EcalHitsEB"),
    process_Particles = cms.untracked.bool(True),
    process_RecTracks = cms.untracked.bool(False),
    sim = cms.InputTag("g4SimHits"),
    verbose = cms.untracked.bool(False)
)


process.particleFlowSuperClusterECAL = cms.EDProducer("PFECALSuperClusterProducer",
    BeamSpot = cms.InputTag("offlineBeamSpot"),
    ClusteringType = cms.string('Mustache'),
    ESAssociation = cms.InputTag("particleFlowClusterECAL"),
    EnergyWeight = cms.string('Raw'),
    PFBasicClusterCollectionBarrel = cms.string('particleFlowBasicClusterECALBarrel'),
    PFBasicClusterCollectionEndcap = cms.string('particleFlowBasicClusterECALEndcap'),
    PFBasicClusterCollectionPreshower = cms.string('particleFlowBasicClusterECALPreshower'),
    PFClusters = cms.InputTag("particleFlowClusterECAL"),
    PFSuperClusterCollectionBarrel = cms.string('particleFlowSuperClusterECALBarrel'),
    PFSuperClusterCollectionEndcap = cms.string('particleFlowSuperClusterECALEndcap'),
    PFSuperClusterCollectionEndcapWithPreshower = cms.string('particleFlowSuperClusterECALEndcapWithPreshower'),
    applyCrackCorrections = cms.bool(False),
    barrelRecHits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    doSatelliteClusterMerge = cms.bool(False),
    dropUnseedable = cms.bool(False),
    endcapRecHits = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    etawidth_SuperClusterBarrel = cms.double(0.04),
    etawidth_SuperClusterEndcap = cms.double(0.04),
    isOOTCollection = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    phiwidth_SuperClusterBarrel = cms.double(0.6),
    phiwidth_SuperClusterEndcap = cms.double(0.6),
    regressionConfig = cms.PSet(
        applySigmaIetaIphiBug = cms.bool(False),
        eRecHitThreshold = cms.double(1),
        ecalRecHitsEB = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        ecalRecHitsEE = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        hgcalCylinderR = cms.double(2.79999995232),
        hgcalRecHits = cms.InputTag(""),
        isHLT = cms.bool(False),
        isPhaseII = cms.bool(False),
        regressionKeyEB = cms.string('pfscecal_EBCorrection_offline_v2'),
        regressionKeyEE = cms.string('pfscecal_EECorrection_offline_v2'),
        regressionMaxEB = cms.double(2),
        regressionMaxEE = cms.double(2),
        regressionMinEB = cms.double(0.2),
        regressionMinEE = cms.double(0.2),
        uncertaintyKeyEB = cms.string('pfscecal_EBUncertainty_offline_v2'),
        uncertaintyKeyEE = cms.string('pfscecal_EEUncertainty_offline_v2'),
        uncertaintyMaxEB = cms.double(0.5),
        uncertaintyMaxEE = cms.double(0.5),
        uncertaintyMinEB = cms.double(0.0002),
        uncertaintyMinEE = cms.double(0.0002),
        vertexCollection = cms.InputTag("offlinePrimaryVertices")
    ),
    satelliteClusterSeedThreshold = cms.double(50),
    satelliteMajorityFraction = cms.double(0.5),
    seedThresholdIsET = cms.bool(True),
    thresh_PFClusterBarrel = cms.double(0),
    thresh_PFClusterES = cms.double(0),
    thresh_PFClusterEndcap = cms.double(0),
    thresh_PFClusterSeedBarrel = cms.double(1),
    thresh_PFClusterSeedEndcap = cms.double(1),
    thresh_SCEt = cms.double(4),
    useDynamicDPhiWindow = cms.bool(True),
    useRegression = cms.bool(True),
    use_preshower = cms.bool(True),
    verbose = cms.untracked.bool(False)
)


process.particleFlowSuperClusterECALBox = cms.EDProducer("PFECALSuperClusterProducer",
    BeamSpot = cms.InputTag("offlineBeamSpot"),
    ClusteringType = cms.string('Box'),
    ESAssociation = cms.InputTag("particleFlowClusterECAL"),
    EnergyWeight = cms.string('Raw'),
    PFBasicClusterCollectionBarrel = cms.string('particleFlowBasicClusterECALBarrel'),
    PFBasicClusterCollectionEndcap = cms.string('particleFlowBasicClusterECALEndcap'),
    PFBasicClusterCollectionPreshower = cms.string('particleFlowBasicClusterECALPreshower'),
    PFClusters = cms.InputTag("particleFlowClusterECAL"),
    PFSuperClusterCollectionBarrel = cms.string('particleFlowSuperClusterECALBarrel'),
    PFSuperClusterCollectionEndcap = cms.string('particleFlowSuperClusterECALEndcap'),
    PFSuperClusterCollectionEndcapWithPreshower = cms.string('particleFlowSuperClusterECALEndcapWithPreshower'),
    applyCrackCorrections = cms.bool(False),
    doSatelliteClusterMerge = cms.bool(False),
    dropUnseedable = cms.bool(False),
    etawidth_SuperClusterBarrel = cms.double(0.04),
    etawidth_SuperClusterEndcap = cms.double(0.04),
    phiwidth_SuperClusterBarrel = cms.double(0.28),
    phiwidth_SuperClusterEndcap = cms.double(0.28),
    regressionConfig = cms.PSet(
        applySigmaIetaIphiBug = cms.bool(False),
        ecalRecHitsEB = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        ecalRecHitsEE = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        regressionKeyEB = cms.string('pfscecal_EBCorrection_offline_v2'),
        regressionKeyEE = cms.string('pfscecal_EECorrection_offline_v2'),
        uncertaintyKeyEB = cms.string('pfscecal_EBUncertainty_offline_v2'),
        uncertaintyKeyEE = cms.string('pfscecal_EEUncertainty_offline_v2'),
        vertexCollection = cms.InputTag("offlinePrimaryVertices")
    ),
    satelliteClusterSeedThreshold = cms.double(50.0),
    satelliteMajorityFraction = cms.double(0.5),
    seedThresholdIsET = cms.bool(True),
    thresh_PFClusterBarrel = cms.double(0.5),
    thresh_PFClusterES = cms.double(0.0),
    thresh_PFClusterEndcap = cms.double(0.5),
    thresh_PFClusterSeedBarrel = cms.double(3.0),
    thresh_PFClusterSeedEndcap = cms.double(5.0),
    thresh_SCEt = cms.double(4.0),
    useDynamicDPhiWindow = cms.bool(False),
    useRegression = cms.bool(False),
    use_preshower = cms.bool(True),
    verbose = cms.untracked.bool(False)
)


process.particleFlowSuperClusterECALMustache = cms.EDProducer("PFECALSuperClusterProducer",
    BeamSpot = cms.InputTag("offlineBeamSpot"),
    ClusteringType = cms.string('Mustache'),
    ESAssociation = cms.InputTag("particleFlowClusterECAL"),
    EnergyWeight = cms.string('Raw'),
    PFBasicClusterCollectionBarrel = cms.string('particleFlowBasicClusterECALBarrel'),
    PFBasicClusterCollectionEndcap = cms.string('particleFlowBasicClusterECALEndcap'),
    PFBasicClusterCollectionPreshower = cms.string('particleFlowBasicClusterECALPreshower'),
    PFClusters = cms.InputTag("particleFlowClusterECAL"),
    PFSuperClusterCollectionBarrel = cms.string('particleFlowSuperClusterECALBarrel'),
    PFSuperClusterCollectionEndcap = cms.string('particleFlowSuperClusterECALEndcap'),
    PFSuperClusterCollectionEndcapWithPreshower = cms.string('particleFlowSuperClusterECALEndcapWithPreshower'),
    applyCrackCorrections = cms.bool(False),
    barrelRecHits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    doSatelliteClusterMerge = cms.bool(False),
    dropUnseedable = cms.bool(False),
    endcapRecHits = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    etawidth_SuperClusterBarrel = cms.double(0.04),
    etawidth_SuperClusterEndcap = cms.double(0.04),
    isOOTCollection = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    phiwidth_SuperClusterBarrel = cms.double(0.6),
    phiwidth_SuperClusterEndcap = cms.double(0.6),
    regressionConfig = cms.PSet(
        applySigmaIetaIphiBug = cms.bool(False),
        eRecHitThreshold = cms.double(1),
        ecalRecHitsEB = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        ecalRecHitsEE = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        hgcalCylinderR = cms.double(2.79999995232),
        hgcalRecHits = cms.InputTag(""),
        isHLT = cms.bool(False),
        isPhaseII = cms.bool(False),
        regressionKeyEB = cms.string('pfscecal_EBCorrection_offline_v2'),
        regressionKeyEE = cms.string('pfscecal_EECorrection_offline_v2'),
        regressionMaxEB = cms.double(2),
        regressionMaxEE = cms.double(2),
        regressionMinEB = cms.double(0.2),
        regressionMinEE = cms.double(0.2),
        uncertaintyKeyEB = cms.string('pfscecal_EBUncertainty_offline_v2'),
        uncertaintyKeyEE = cms.string('pfscecal_EEUncertainty_offline_v2'),
        uncertaintyMaxEB = cms.double(0.5),
        uncertaintyMaxEE = cms.double(0.5),
        uncertaintyMinEB = cms.double(0.0002),
        uncertaintyMinEE = cms.double(0.0002),
        vertexCollection = cms.InputTag("offlinePrimaryVertices")
    ),
    satelliteClusterSeedThreshold = cms.double(50),
    satelliteMajorityFraction = cms.double(0.5),
    seedThresholdIsET = cms.bool(True),
    thresh_PFClusterBarrel = cms.double(0),
    thresh_PFClusterES = cms.double(0),
    thresh_PFClusterEndcap = cms.double(0),
    thresh_PFClusterSeedBarrel = cms.double(1),
    thresh_PFClusterSeedEndcap = cms.double(1),
    thresh_SCEt = cms.double(4),
    useDynamicDPhiWindow = cms.bool(True),
    useRegression = cms.bool(True),
    use_preshower = cms.bool(True),
    verbose = cms.untracked.bool(False)
)


process.particleFlowSuperClusterECALOnly = cms.EDProducer("PFECALSuperClusterProducer",
    BeamSpot = cms.InputTag("offlineBeamSpot"),
    ClusteringType = cms.string('Mustache'),
    ESAssociation = cms.InputTag("particleFlowClusterECAL"),
    EnergyWeight = cms.string('Raw'),
    PFBasicClusterCollectionBarrel = cms.string('particleFlowBasicClusterECALBarrel'),
    PFBasicClusterCollectionEndcap = cms.string('particleFlowBasicClusterECALEndcap'),
    PFBasicClusterCollectionPreshower = cms.string('particleFlowBasicClusterECALPreshower'),
    PFClusters = cms.InputTag("particleFlowClusterECAL"),
    PFSuperClusterCollectionBarrel = cms.string('particleFlowSuperClusterECALBarrel'),
    PFSuperClusterCollectionEndcap = cms.string('particleFlowSuperClusterECALEndcap'),
    PFSuperClusterCollectionEndcapWithPreshower = cms.string('particleFlowSuperClusterECALEndcapWithPreshower'),
    applyCrackCorrections = cms.bool(False),
    barrelRecHits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    doSatelliteClusterMerge = cms.bool(False),
    dropUnseedable = cms.bool(False),
    endcapRecHits = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    etawidth_SuperClusterBarrel = cms.double(0.04),
    etawidth_SuperClusterEndcap = cms.double(0.04),
    isOOTCollection = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    phiwidth_SuperClusterBarrel = cms.double(0.6),
    phiwidth_SuperClusterEndcap = cms.double(0.6),
    regressionConfig = cms.PSet(
        applySigmaIetaIphiBug = cms.bool(False),
        eRecHitThreshold = cms.double(1),
        ecalRecHitsEB = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        ecalRecHitsEE = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        hgcalCylinderR = cms.double(2.79999995232),
        hgcalRecHits = cms.InputTag(""),
        isHLT = cms.bool(True),
        isPhaseII = cms.bool(False),
        regressionKeyEB = cms.string('pfscecal_EBCorrection_online'),
        regressionKeyEE = cms.string('pfscecal_EECorrection_online'),
        regressionMaxEB = cms.double(2),
        regressionMaxEE = cms.double(2),
        regressionMinEB = cms.double(0.2),
        regressionMinEE = cms.double(0.2),
        uncertaintyKeyEB = cms.string('pfscecal_EBUncertainty_online'),
        uncertaintyKeyEE = cms.string('pfscecal_EEUncertainty_online'),
        uncertaintyMaxEB = cms.double(0.5),
        uncertaintyMaxEE = cms.double(0.5),
        uncertaintyMinEB = cms.double(0.0002),
        uncertaintyMinEE = cms.double(0.0002),
        vertexCollection = cms.InputTag("")
    ),
    satelliteClusterSeedThreshold = cms.double(50),
    satelliteMajorityFraction = cms.double(0.5),
    seedThresholdIsET = cms.bool(True),
    thresh_PFClusterBarrel = cms.double(0.5),
    thresh_PFClusterES = cms.double(0.5),
    thresh_PFClusterEndcap = cms.double(0.5),
    thresh_PFClusterSeedBarrel = cms.double(1),
    thresh_PFClusterSeedEndcap = cms.double(1),
    thresh_SCEt = cms.double(4),
    useDynamicDPhiWindow = cms.bool(True),
    useRegression = cms.bool(True),
    use_preshower = cms.bool(True),
    verbose = cms.untracked.bool(False)
)


process.particleFlowSuperClusterHGCal = cms.EDProducer("PFECALSuperClusterProducer",
    BeamSpot = cms.InputTag("offlineBeamSpot"),
    ClusteringType = cms.string('Mustache'),
    ESAssociation = cms.InputTag("particleFlowClusterECAL"),
    EnergyWeight = cms.string('Raw'),
    PFBasicClusterCollectionBarrel = cms.string('particleFlowBasicClusterECALBarrel'),
    PFBasicClusterCollectionEndcap = cms.string(''),
    PFBasicClusterCollectionPreshower = cms.string('particleFlowBasicClusterECALPreshower'),
    PFClusters = cms.InputTag("particleFlowClusterHGCal"),
    PFSuperClusterCollectionBarrel = cms.string('particleFlowSuperClusterECALBarrel'),
    PFSuperClusterCollectionEndcap = cms.string(''),
    PFSuperClusterCollectionEndcapWithPreshower = cms.string(''),
    applyCrackCorrections = cms.bool(False),
    barrelRecHits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    doSatelliteClusterMerge = cms.bool(False),
    dropUnseedable = cms.bool(True),
    endcapRecHits = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    etawidth_SuperClusterBarrel = cms.double(0.04),
    etawidth_SuperClusterEndcap = cms.double(0.04),
    isOOTCollection = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    phiwidth_SuperClusterBarrel = cms.double(0.6),
    phiwidth_SuperClusterEndcap = cms.double(0.6),
    regressionConfig = cms.PSet(
        applySigmaIetaIphiBug = cms.bool(False),
        eRecHitThreshold = cms.double(1),
        ecalRecHitsEB = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        ecalRecHitsEE = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        hgcalCylinderR = cms.double(2.79999995232),
        hgcalRecHits = cms.InputTag(""),
        isHLT = cms.bool(False),
        isPhaseII = cms.bool(False),
        regressionKeyEB = cms.string('pfscecal_EBCorrection_offline_v2'),
        regressionKeyEE = cms.string('pfscecal_EECorrection_offline_v2'),
        regressionMaxEB = cms.double(2),
        regressionMaxEE = cms.double(2),
        regressionMinEB = cms.double(0.2),
        regressionMinEE = cms.double(0.2),
        uncertaintyKeyEB = cms.string('pfscecal_EBUncertainty_offline_v2'),
        uncertaintyKeyEE = cms.string('pfscecal_EEUncertainty_offline_v2'),
        uncertaintyMaxEB = cms.double(0.5),
        uncertaintyMaxEE = cms.double(0.5),
        uncertaintyMinEB = cms.double(0.0002),
        uncertaintyMinEE = cms.double(0.0002),
        vertexCollection = cms.InputTag("offlinePrimaryVertices")
    ),
    satelliteClusterSeedThreshold = cms.double(50),
    satelliteMajorityFraction = cms.double(0.5),
    seedThresholdIsET = cms.bool(True),
    thresh_PFClusterBarrel = cms.double(0),
    thresh_PFClusterES = cms.double(0),
    thresh_PFClusterEndcap = cms.double(0.15),
    thresh_PFClusterSeedBarrel = cms.double(1),
    thresh_PFClusterSeedEndcap = cms.double(1),
    thresh_SCEt = cms.double(4),
    useDynamicDPhiWindow = cms.bool(True),
    useRegression = cms.bool(False),
    use_preshower = cms.bool(False),
    verbose = cms.untracked.bool(False)
)


process.particleFlowSuperClusterHGCalFromMultiCl = cms.EDProducer("PFECALSuperClusterProducer",
    BeamSpot = cms.InputTag("offlineBeamSpot"),
    ClusteringType = cms.string('Mustache'),
    ESAssociation = cms.InputTag("particleFlowClusterECAL"),
    EnergyWeight = cms.string('Raw'),
    PFBasicClusterCollectionBarrel = cms.string('particleFlowBasicClusterECALBarrel'),
    PFBasicClusterCollectionEndcap = cms.string(''),
    PFBasicClusterCollectionPreshower = cms.string('particleFlowBasicClusterECALPreshower'),
    PFClusters = cms.InputTag("particleFlowClusterHGCalFromMultiCl"),
    PFSuperClusterCollectionBarrel = cms.string('particleFlowSuperClusterECALBarrel'),
    PFSuperClusterCollectionEndcap = cms.string(''),
    PFSuperClusterCollectionEndcapWithPreshower = cms.string(''),
    applyCrackCorrections = cms.bool(False),
    barrelRecHits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    doSatelliteClusterMerge = cms.bool(False),
    dropUnseedable = cms.bool(True),
    endcapRecHits = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    etawidth_SuperClusterBarrel = cms.double(0.04),
    etawidth_SuperClusterEndcap = cms.double(0.04),
    isOOTCollection = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    phiwidth_SuperClusterBarrel = cms.double(0.6),
    phiwidth_SuperClusterEndcap = cms.double(0.6),
    regressionConfig = cms.PSet(
        applySigmaIetaIphiBug = cms.bool(False),
        eRecHitThreshold = cms.double(1),
        ecalRecHitsEB = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        ecalRecHitsEE = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        hgcalCylinderR = cms.double(2.79999995232),
        hgcalRecHits = cms.InputTag("particleFlowRecHitHGC"),
        isHLT = cms.bool(False),
        isPhaseII = cms.bool(True),
        regressionKeyEB = cms.string('pfscecal_EBCorrection_offline_v2'),
        regressionKeyEE = cms.string('superclus_hgcal_mean_offline'),
        regressionMaxEB = cms.double(2),
        regressionMaxEE = cms.double(2),
        regressionMinEB = cms.double(0.2),
        regressionMinEE = cms.double(0.2),
        uncertaintyKeyEB = cms.string('pfscecal_EBUncertainty_offline_v2'),
        uncertaintyKeyEE = cms.string('superclus_hgcal_sigma_offline'),
        uncertaintyMaxEB = cms.double(0.5),
        uncertaintyMaxEE = cms.double(0.5),
        uncertaintyMinEB = cms.double(0.0002),
        uncertaintyMinEE = cms.double(0.0002),
        vertexCollection = cms.InputTag("offlinePrimaryVertices")
    ),
    satelliteClusterSeedThreshold = cms.double(50),
    satelliteMajorityFraction = cms.double(0.5),
    seedThresholdIsET = cms.bool(True),
    thresh_PFClusterBarrel = cms.double(0),
    thresh_PFClusterES = cms.double(0),
    thresh_PFClusterEndcap = cms.double(0.15),
    thresh_PFClusterSeedBarrel = cms.double(1),
    thresh_PFClusterSeedEndcap = cms.double(1),
    thresh_SCEt = cms.double(4),
    useDynamicDPhiWindow = cms.bool(True),
    useRegression = cms.bool(True),
    use_preshower = cms.bool(False),
    verbose = cms.untracked.bool(False)
)


process.particleFlowSuperClusterOOTECAL = cms.EDProducer("PFECALSuperClusterProducer",
    BeamSpot = cms.InputTag("offlineBeamSpot"),
    ClusteringType = cms.string('Mustache'),
    ESAssociation = cms.InputTag("particleFlowClusterOOTECAL"),
    EnergyWeight = cms.string('Raw'),
    PFBasicClusterCollectionBarrel = cms.string('particleFlowBasicClusterOOTECALBarrel'),
    PFBasicClusterCollectionEndcap = cms.string('particleFlowBasicClusterOOTECALEndcap'),
    PFBasicClusterCollectionPreshower = cms.string('particleFlowBasicClusterOOTECALPreshower'),
    PFClusters = cms.InputTag("particleFlowClusterOOTECAL"),
    PFSuperClusterCollectionBarrel = cms.string('particleFlowSuperClusterOOTECALBarrel'),
    PFSuperClusterCollectionEndcap = cms.string('particleFlowSuperClusterOOTECALEndcap'),
    PFSuperClusterCollectionEndcapWithPreshower = cms.string('particleFlowSuperClusterOOTECALEndcapWithPreshower'),
    applyCrackCorrections = cms.bool(False),
    barrelRecHits = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    doSatelliteClusterMerge = cms.bool(False),
    dropUnseedable = cms.bool(False),
    endcapRecHits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    etawidth_SuperClusterBarrel = cms.double(0.04),
    etawidth_SuperClusterEndcap = cms.double(0.04),
    isOOTCollection = cms.bool(True),
    mightGet = cms.optional.untracked.vstring,
    phiwidth_SuperClusterBarrel = cms.double(0.6),
    phiwidth_SuperClusterEndcap = cms.double(0.6),
    regressionConfig = cms.PSet(
        applySigmaIetaIphiBug = cms.bool(False),
        eRecHitThreshold = cms.double(1),
        ecalRecHitsEB = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        ecalRecHitsEE = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        hgcalCylinderR = cms.double(2.79999995232),
        hgcalRecHits = cms.InputTag(""),
        isHLT = cms.bool(False),
        isPhaseII = cms.bool(False),
        regressionKeyEB = cms.string('pfscecal_EBCorrection_offline_v2'),
        regressionKeyEE = cms.string('pfscecal_EECorrection_offline_v2'),
        regressionMaxEB = cms.double(2),
        regressionMaxEE = cms.double(2),
        regressionMinEB = cms.double(0.2),
        regressionMinEE = cms.double(0.2),
        uncertaintyKeyEB = cms.string('pfscecal_EBUncertainty_offline_v2'),
        uncertaintyKeyEE = cms.string('pfscecal_EEUncertainty_offline_v2'),
        uncertaintyMaxEB = cms.double(0.5),
        uncertaintyMaxEE = cms.double(0.5),
        uncertaintyMinEB = cms.double(0.0002),
        uncertaintyMinEE = cms.double(0.0002),
        vertexCollection = cms.InputTag("offlinePrimaryVertices")
    ),
    satelliteClusterSeedThreshold = cms.double(50),
    satelliteMajorityFraction = cms.double(0.5),
    seedThresholdIsET = cms.bool(True),
    thresh_PFClusterBarrel = cms.double(0),
    thresh_PFClusterES = cms.double(0),
    thresh_PFClusterEndcap = cms.double(0),
    thresh_PFClusterSeedBarrel = cms.double(1),
    thresh_PFClusterSeedEndcap = cms.double(1),
    thresh_SCEt = cms.double(4),
    useDynamicDPhiWindow = cms.bool(True),
    useRegression = cms.bool(True),
    use_preshower = cms.bool(True),
    verbose = cms.untracked.bool(False)
)


process.particleFlowTimeAssignerECAL = cms.EDProducer("PFClusterTimeAssigner",
    mightGet = cms.optional.untracked.vstring,
    src = cms.InputTag("particleFlowClusterECALUncorrected"),
    timeResoSrc = cms.InputTag("ecalBarrelClusterFastTimer","PerfectResolutionModelResolution"),
    timeSrc = cms.InputTag("ecalBarrelClusterFastTimer","PerfectResolutionModel")
)


process.particleFlowTmp = cms.EDProducer("PFCandidateListMerger",
    src = cms.VInputTag("particleFlowTmpBarrel", "simPFProducer")
)


process.particleFlowTmpBarrel = cms.EDProducer("PFProducer",
    GedElectronValueMap = cms.InputTag("gedGsfElectronValueMapsTmp"),
    GedPhotonValueMap = cms.InputTag("gedPhotonsTmp","valMapPFEgammaCandToPhoton"),
    PFEGammaCandidates = cms.InputTag("particleFlowEGamma"),
    PFEGammaFiltersParameters = cms.PSet(
        electron_ecalDrivenHademPreselCut = cms.double(0.15),
        electron_iso_combIso_barrel = cms.double(10),
        electron_iso_combIso_endcap = cms.double(10),
        electron_iso_mva_barrel = cms.double(-0.1875),
        electron_iso_mva_endcap = cms.double(-0.1075),
        electron_iso_pt = cms.double(10),
        electron_maxElePtForOnlyMVAPresel = cms.double(50),
        electron_missinghits = cms.uint32(1),
        electron_noniso_mvaCut = cms.double(-0.1),
        electron_protectionsForBadHcal = cms.PSet(
            dEta = cms.vdouble(0.0064, 0.01264),
            dPhi = cms.vdouble(0.0547, 0.0394),
            eInvPInv = cms.vdouble(0.184, 0.0721),
            enableProtections = cms.bool(False),
            full5x5_sigmaIetaIeta = cms.vdouble(0.0106, 0.0387)
        ),
        electron_protectionsForJetMET = cms.PSet(
            maxDPhiIN = cms.double(0.1),
            maxE = cms.double(50),
            maxEcalEOverPRes = cms.double(0.2),
            maxEcalEOverP_1 = cms.double(0.5),
            maxEcalEOverP_2 = cms.double(0.2),
            maxEeleOverPout = cms.double(0.2),
            maxEeleOverPoutRes = cms.double(0.5),
            maxEleHcalEOverEcalE = cms.double(0.1),
            maxHcalE = cms.double(10),
            maxHcalEOverEcalE = cms.double(0.1),
            maxHcalEOverP = cms.double(1),
            maxNtracks = cms.double(3),
            maxTrackPOverEele = cms.double(1)
        ),
        photon_HoE = cms.double(0.05),
        photon_MinEt = cms.double(10),
        photon_SigmaiEtaiEta_barrel = cms.double(0.0125),
        photon_SigmaiEtaiEta_endcap = cms.double(0.034),
        photon_combIso = cms.double(10),
        photon_protectionsForBadHcal = cms.PSet(
            enableProtections = cms.bool(False),
            solidConeTrkIsoOffset = cms.double(10),
            solidConeTrkIsoSlope = cms.double(0.3)
        ),
        photon_protectionsForJetMET = cms.PSet(
            sumPtTrackIso = cms.double(4),
            sumPtTrackIsoSlope = cms.double(0.001)
        )
    ),
    PFHFCleaningParameters = cms.PSet(
        maxDeltaPhiPt = cms.double(7),
        maxSignificance = cms.double(2.5),
        minDeltaMet = cms.double(0.4),
        minHFCleaningPt = cms.double(5),
        minSignificance = cms.double(2.5),
        minSignificanceReduction = cms.double(1.4)
    ),
    PFMuonAlgoParameters = cms.PSet(
        electron_ecalDrivenHademPreselCut = cms.double(0.15),
        electron_iso_combIso_barrel = cms.double(10),
        electron_iso_combIso_endcap = cms.double(10),
        electron_iso_mva_barrel = cms.double(-0.1875),
        electron_iso_mva_endcap = cms.double(-0.1075),
        electron_iso_pt = cms.double(10),
        electron_maxElePtForOnlyMVAPresel = cms.double(50),
        electron_missinghits = cms.uint32(1),
        electron_noniso_mvaCut = cms.double(-0.1),
        electron_protectionsForBadHcal = cms.PSet(
            dEta = cms.vdouble(0.0064, 0.01264),
            dPhi = cms.vdouble(0.0547, 0.0394),
            eInvPInv = cms.vdouble(0.184, 0.0721),
            enableProtections = cms.bool(False),
            full5x5_sigmaIetaIeta = cms.vdouble(0.0106, 0.0387)
        ),
        electron_protectionsForJetMET = cms.PSet(
            maxDPhiIN = cms.double(0.1),
            maxE = cms.double(50),
            maxEcalEOverPRes = cms.double(0.2),
            maxEcalEOverP_1 = cms.double(0.5),
            maxEcalEOverP_2 = cms.double(0.2),
            maxEeleOverPout = cms.double(0.2),
            maxEeleOverPoutRes = cms.double(0.5),
            maxEleHcalEOverEcalE = cms.double(0.1),
            maxHcalE = cms.double(10),
            maxHcalEOverEcalE = cms.double(0.1),
            maxHcalEOverP = cms.double(1),
            maxNtracks = cms.double(3),
            maxTrackPOverEele = cms.double(1)
        ),
        photon_HoE = cms.double(0.05),
        photon_MinEt = cms.double(10),
        photon_SigmaiEtaiEta_barrel = cms.double(0.0125),
        photon_SigmaiEtaiEta_endcap = cms.double(0.034),
        photon_combIso = cms.double(10),
        photon_protectionsForBadHcal = cms.PSet(
            enableProtections = cms.bool(False),
            solidConeTrkIsoOffset = cms.double(10),
            solidConeTrkIsoSlope = cms.double(0.3)
        ),
        photon_protectionsForJetMET = cms.PSet(
            sumPtTrackIso = cms.double(4),
            sumPtTrackIsoSlope = cms.double(0.001)
        )
    ),
    blocks = cms.InputTag("particleFlowBlock"),
    calibHF_a_EMHAD = cms.vdouble(
        1, 1, 1, 1, 1, 
        1, 1, 1, 1, 1
    ),
    calibHF_a_EMonly = cms.vdouble(
        1, 1, 1, 1, 1, 
        1, 1, 1, 1, 1
    ),
    calibHF_b_EMHAD = cms.vdouble(
        1, 1, 1, 1, 1, 
        1, 1, 1, 1, 1
    ),
    calibHF_b_HADonly = cms.vdouble(
        1, 1, 1, 1, 1, 
        1, 1, 1, 1, 1
    ),
    calibHF_eta_step = cms.vdouble(
        0, 2.9, 3, 3.2, 4.2, 
        4.4, 4.6, 4.8, 5.2, 5.4
    ),
    calibHF_use = cms.bool(False),
    calibrationsLabel = cms.string(''),
    cleanedHF = cms.VInputTag("particleFlowRecHitHF:Cleaned", "particleFlowClusterHF:Cleaned"),
    debug = cms.untracked.bool(False),
    dptRel_DispVtx = cms.double(10),
    egammaElectrons = cms.InputTag("mvaElectrons"),
    factors_45 = cms.vdouble(10, 100),
    goodPixelTrackDeadHcal_chi2n = cms.double(2),
    goodPixelTrackDeadHcal_dxy = cms.double(0.02),
    goodPixelTrackDeadHcal_dz = cms.double(0.05),
    goodPixelTrackDeadHcal_maxLost3Hit = cms.int32(0),
    goodPixelTrackDeadHcal_maxLost4Hit = cms.int32(1),
    goodPixelTrackDeadHcal_maxPt = cms.double(50),
    goodPixelTrackDeadHcal_minEta = cms.double(2.3),
    goodPixelTrackDeadHcal_ptErrRel = cms.double(1),
    goodTrackDeadHcal_chi2n = cms.double(5),
    goodTrackDeadHcal_dxy = cms.double(0.5),
    goodTrackDeadHcal_layers = cms.uint32(4),
    goodTrackDeadHcal_ptErrRel = cms.double(0.2),
    goodTrackDeadHcal_validFr = cms.double(0.5),
    iCfgCandConnector = cms.PSet(
        bCalibPrimary = cms.bool(True),
        bCorrect = cms.bool(True),
        dptRel_MergedTrack = cms.double(5),
        dptRel_PrimaryTrack = cms.double(10),
        nuclCalibFactors = cms.vdouble(0.8, 0.15, 0.5, 0.5, 0.05),
        ptErrorSecondary = cms.double(1)
    ),
    mightGet = cms.optional.untracked.vstring,
    muon_ECAL = cms.vdouble(0.5, 0.5),
    muon_HCAL = cms.vdouble(3, 3),
    muon_HO = cms.vdouble(0.9, 0.9),
    muons = cms.InputTag("muons1stStep"),
    nsigma_TRACK = cms.double(1),
    pf_nsigma_ECAL = cms.double(0),
    pf_nsigma_HCAL = cms.double(1),
    pf_nsigma_HFEM = cms.double(1),
    pf_nsigma_HFHAD = cms.double(1),
    postHFCleaning = cms.bool(False),
    postMuonCleaning = cms.bool(True),
    pt_Error = cms.double(1),
    rejectTracks_Bad = cms.bool(True),
    rejectTracks_Step45 = cms.bool(True),
    resolHF_square = cms.vdouble(7.834401, 0.012996, 0),
    useCalibrationsFromDB = cms.bool(True),
    useEGammaElectrons = cms.bool(True),
    useEGammaFilters = cms.bool(True),
    useHO = cms.bool(True),
    usePFConversions = cms.bool(True),
    usePFDecays = cms.bool(False),
    usePFNuclearInteractions = cms.bool(True),
    useProtectionsForJetMET = cms.bool(True),
    useVerticesForNeutral = cms.bool(True),
    verbose = cms.untracked.bool(False),
    vertexCollection = cms.InputTag("offlinePrimaryVertices")
)


process.particleFlowTmpPtrs = cms.EDProducer("PFCandidateFwdPtrProducer",
    src = cms.InputTag("particleFlowTmp")
)


process.pfAllElectronsClones = cms.EDProducer("PFCandidateProductFromFwdPtrProducer",
    src = cms.InputTag("pfAllElectrons")
)


process.pfAllMuonsClones = cms.EDProducer("PFCandidateProductFromFwdPtrProducer",
    src = cms.InputTag("pfAllMuons")
)


process.pfBoostedDoubleSVAK8TagInfos = cms.EDProducer("BoostedDoubleSVProducer",
    R0 = cms.double(0.8),
    beta = cms.double(1.0),
    maxSVDeltaRToJet = cms.double(0.7),
    svTagInfos = cms.InputTag("pfInclusiveSecondaryVertexFinderAK8TagInfos"),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.8),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    weights = cms.InputTag("")
)


process.pfBoostedDoubleSVCA15TagInfos = cms.EDProducer("BoostedDoubleSVProducer",
    R0 = cms.double(1.5),
    beta = cms.double(1.0),
    maxSVDeltaRToJet = cms.double(1.0),
    svTagInfos = cms.InputTag("pfInclusiveSecondaryVertexFinderCA15TagInfos"),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(1.5),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    weights = cms.InputTag("")
)


process.pfBoostedDoubleSecondaryVertexAK8BJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidateBoostedDoubleSecondaryVertexAK8Computer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfBoostedDoubleSVAK8TagInfos"))
)


process.pfBoostedDoubleSecondaryVertexCA15BJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidateBoostedDoubleSecondaryVertexCA15Computer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfBoostedDoubleSVCA15TagInfos"))
)


process.pfChMet = cms.EDProducer("PFMETProducer",
    alias = cms.string('pfChMet'),
    applyWeight = cms.bool(False),
    calculateSignificance = cms.bool(False),
    globalThreshold = cms.double(0),
    mightGet = cms.optional.untracked.vstring,
    parameters = cms.PSet(

    ),
    src = cms.InputTag("particleFlowForChargedMET"),
    srcJetResPhi = cms.optional.string,
    srcJetResPt = cms.optional.string,
    srcJetSF = cms.optional.string,
    srcJets = cms.optional.InputTag,
    srcLeptons = cms.optional.VInputTag,
    srcRho = cms.optional.InputTag,
    srcWeights = cms.InputTag("")
)


process.pfChargeBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidateChargeBTagComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"), cms.InputTag("pfInclusiveSecondaryVertexFinderTagInfos"), cms.InputTag("softPFMuonsTagInfos"), cms.InputTag("softPFElectronsTagInfos"))
)


process.pfClustersFromCombinedCalo = cms.EDProducer("L1TPFCaloProducer",
    debug = cms.untracked.int32(0),
    ecalCandidates = cms.VInputTag(cms.InputTag("pfClustersFromL1EGClusters")),
    ecalClusterer = cms.PSet(
        energyShareAlgo = cms.string('fractions'),
        energyWeightedPosition = cms.bool(True),
        grid = cms.string('phase2'),
        minClusterEt = cms.double(0.5),
        seedEt = cms.double(0.5),
        zsEt = cms.double(0.4)
    ),
    emCorrector = cms.string(''),
    hadCorrector = cms.string('L1Trigger/Phase2L1ParticleFlow/data/hadcorr.root'),
    hadCorrectorEmfMax = cms.double(-1.0),
    hcCorrector = cms.string(''),
    hcalCandidates = cms.VInputTag(),
    hcalClusterer = cms.PSet(
        energyShareAlgo = cms.string('fractions'),
        energyWeightedPosition = cms.bool(True),
        grid = cms.string('phase2'),
        minClusterEt = cms.double(0.8),
        seedEt = cms.double(0.5),
        zsEt = cms.double(0.4)
    ),
    hcalDigis = cms.VInputTag(cms.InputTag("simHcalTriggerPrimitiveDigis")),
    hcalDigisBarrel = cms.bool(False),
    hcalDigisHF = cms.bool(True),
    hcalHGCTowers = cms.VInputTag(cms.InputTag("hgcalTowerProducer","HGCalTowerProcessor")),
    hcalHGCTowersHadOnly = cms.bool(False),
    linker = cms.PSet(
        algo = cms.string('flat'),
        energyShareAlgo = cms.string('fractions'),
        energyWeightedPosition = cms.bool(True),
        grid = cms.string('phase2'),
        hoeCut = cms.double(0.1),
        minClusterEt = cms.double(1.0),
        minHadronEt = cms.double(1.0),
        minHadronRawEt = cms.double(1.0),
        minPhotonEt = cms.double(1.0),
        noEmInHGC = cms.bool(False),
        seedEt = cms.double(1.0),
        zsEt = cms.double(0.0)
    ),
    phase2barrelCaloTowers = cms.VInputTag(cms.InputTag("L1EGammaClusterEmuProducer")),
    resol = cms.PSet(
        etaBins = cms.vdouble(
            1.3, 1.7, 2.8, 3.2, 4.0, 
            5.0
        ),
        kind = cms.string('calo'),
        offset = cms.vdouble(
            2.572, 1.759, 1.858, 2.407, 1.185, 
            1.658
        ),
        scale = cms.vdouble(
            0.132, 0.24, 0.09, 0.138, 0.143, 
            0.147
        )
    )
)


process.pfClustersFromCombinedCaloHCal = cms.EDProducer("L1TPFCaloProducer",
    debug = cms.untracked.int32(0),
    ecalCandidates = cms.VInputTag(cms.InputTag("pfClustersFromL1EGClusters")),
    ecalClusterer = cms.PSet(
        energyShareAlgo = cms.string('fractions'),
        energyWeightedPosition = cms.bool(True),
        grid = cms.string('phase2'),
        minClusterEt = cms.double(0.5),
        seedEt = cms.double(0.5),
        zsEt = cms.double(0.4)
    ),
    emCorrector = cms.string(''),
    hadCorrector = cms.string('L1Trigger/Phase2L1ParticleFlow/data/hadcorr_barrel_110X.root'),
    hadCorrectorEmfMax = cms.double(-1.0),
    hcCorrector = cms.string(''),
    hcalCandidates = cms.VInputTag(),
    hcalClusterer = cms.PSet(
        energyShareAlgo = cms.string('fractions'),
        energyWeightedPosition = cms.bool(True),
        grid = cms.string('phase2'),
        minClusterEt = cms.double(0.8),
        seedEt = cms.double(0.5),
        zsEt = cms.double(0.4)
    ),
    hcalDigis = cms.VInputTag(),
    hcalDigisBarrel = cms.bool(True),
    hcalDigisHF = cms.bool(False),
    hcalHGCTowers = cms.VInputTag(),
    hcalHGCTowersHadOnly = cms.bool(False),
    linker = cms.PSet(
        algo = cms.string('flat'),
        energyShareAlgo = cms.string('fractions'),
        energyWeightedPosition = cms.bool(True),
        grid = cms.string('phase2'),
        hoeCut = cms.double(0.1),
        minClusterEt = cms.double(1.0),
        minHadronEt = cms.double(1.0),
        minHadronRawEt = cms.double(1.0),
        minPhotonEt = cms.double(1.0),
        noEmInHGC = cms.bool(False),
        seedEt = cms.double(1.0),
        zsEt = cms.double(0.0)
    ),
    phase2barrelCaloTowers = cms.VInputTag(cms.InputTag("L1EGammaClusterEmuProducer")),
    resol = cms.PSet(
        etaBins = cms.vdouble(0.7, 1.2, 1.6),
        kind = cms.string('calo'),
        offset = cms.vdouble(2.909, 2.864, 0.294),
        scale = cms.vdouble(0.119, 0.127, 0.442)
    )
)


process.pfClustersFromCombinedCaloHF = cms.EDProducer("L1TPFCaloProducer",
    debug = cms.untracked.int32(0),
    ecalCandidates = cms.VInputTag(),
    ecalClusterer = cms.PSet(
        energyShareAlgo = cms.string('fractions'),
        energyWeightedPosition = cms.bool(True),
        grid = cms.string('phase2'),
        minClusterEt = cms.double(0.5),
        seedEt = cms.double(0.5),
        zsEt = cms.double(0.4)
    ),
    emCorrector = cms.string(''),
    hadCorrector = cms.string('L1Trigger/Phase2L1ParticleFlow/data/hfcorr_110X.root'),
    hadCorrectorEmfMax = cms.double(-1.0),
    hcCorrector = cms.string(''),
    hcalCandidates = cms.VInputTag(cms.InputTag("hgcalBackEndLayer2Producer","HGCalBackendLayer2Processor3DClustering")),
    hcalClusterer = cms.PSet(
        energyShareAlgo = cms.string('fractions'),
        energyWeightedPosition = cms.bool(True),
        grid = cms.string('phase2'),
        minClusterEt = cms.double(0.8),
        seedEt = cms.double(0.5),
        zsEt = cms.double(0.4)
    ),
    hcalDigis = cms.VInputTag(cms.InputTag("simHcalTriggerPrimitiveDigis")),
    hcalDigisBarrel = cms.bool(False),
    hcalDigisHF = cms.bool(True),
    hcalHGCTowers = cms.VInputTag(),
    hcalHGCTowersHadOnly = cms.bool(False),
    linker = cms.PSet(
        algo = cms.string('flat'),
        energyShareAlgo = cms.string('fractions'),
        energyWeightedPosition = cms.bool(True),
        grid = cms.string('phase2'),
        hoeCut = cms.double(0.1),
        minClusterEt = cms.double(1.0),
        minHadronEt = cms.double(1.0),
        minHadronRawEt = cms.double(1.0),
        minPhotonEt = cms.double(1.0),
        noEmInHGC = cms.bool(False),
        seedEt = cms.double(1.0),
        zsEt = cms.double(0.0)
    ),
    phase2barrelCaloTowers = cms.VInputTag(),
    resol = cms.PSet(
        etaBins = cms.vdouble(3.5, 4.0, 4.5, 5.0),
        kind = cms.string('calo'),
        offset = cms.vdouble(-1.125, 1.22, 1.514, 1.414),
        scale = cms.vdouble(0.868, 0.159, 0.148, 0.194)
    )
)


process.pfClustersFromHGC3DClusters = cms.EDProducer("PFClusterProducerFromHGC3DClusters",
    corrector = cms.string('L1Trigger/Phase2L1ParticleFlow/data/hadcorr_HGCal3D_TC_110X.root'),
    correctorEmfMax = cms.double(1.125),
    emOnly = cms.bool(False),
    emVsPUID = cms.PSet(
        isPUFilter = cms.bool(True),
        method = cms.string('BDT'),
        preselection = cms.string(''),
        variables = cms.VPSet(
            cms.PSet(
                name = cms.string('fabs(eta)'),
                value = cms.string('abs(eta())')
            ), 
            cms.PSet(
                name = cms.string('coreShowerLength'),
                value = cms.string('coreShowerLength()')
            ), 
            cms.PSet(
                name = cms.string('maxLayer'),
                value = cms.string('maxLayer()')
            ), 
            cms.PSet(
                name = cms.string('sigmaPhiPhiTot'),
                value = cms.string('sigmaPhiPhiTot()')
            )
        ),
        weightsFile = cms.string('L1Trigger/Phase2L1ParticleFlow/data/hgcal_egID/Photon_Pion_vs_Neutrino_BDTweights.xml.gz'),
        wp = cms.string('-0.02')
    ),
    emVsPionID = cms.PSet(
        isPUFilter = cms.bool(False),
        method = cms.string('BDT'),
        preselection = cms.string(''),
        variables = cms.VPSet(
            cms.PSet(
                name = cms.string('fabs(eta)'),
                value = cms.string('abs(eta())')
            ), 
            cms.PSet(
                name = cms.string('coreShowerLength'),
                value = cms.string('coreShowerLength()')
            ), 
            cms.PSet(
                name = cms.string('maxLayer'),
                value = cms.string('maxLayer()')
            ), 
            cms.PSet(
                name = cms.string('hOverE'),
                value = cms.string('hOverE()')
            ), 
            cms.PSet(
                name = cms.string('sigmaZZ'),
                value = cms.string('sigmaZZ()')
            )
        ),
        weightsFile = cms.string('L1Trigger/Phase2L1ParticleFlow/data/hgcal_egID/Photon_vs_Pion_BDTweights.xml.gz'),
        wp = cms.string('0.01')
    ),
    etMin = cms.double(1.0),
    preEmId = cms.string('hOverE < 0.3 && hOverE >= 0'),
    resol = cms.PSet(
        etaBins = cms.vdouble(
            1.7, 1.9, 2.2, 2.5, 2.8, 
            2.9
        ),
        kind = cms.string('calo'),
        offset = cms.vdouble(
            1.793, 1.827, 2.363, 2.538, 2.812, 
            2.642
        ),
        scale = cms.vdouble(
            0.138, 0.137, 0.124, 0.115, 0.106, 
            0.121
        )
    ),
    src = cms.InputTag("hgcalBackEndLayer2Producer","HGCalBackendLayer2Processor3DClustering")
)


process.pfClustersFromL1EGClusters = cms.EDProducer("PFClusterProducerFromL1EGClusters",
    corrector = cms.string(''),
    etMin = cms.double(0.5),
    resol = cms.PSet(
        etaBins = cms.vdouble(0.7, 1.2, 1.6),
        kind = cms.string('calo'),
        offset = cms.vdouble(0.838, 0.924, 1.101),
        scale = cms.vdouble(0.012, 0.017, 0.018)
    ),
    src = cms.InputTag("L1EGammaClusterEmuProducer")
)


process.pfCombinedCvsBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('charmTagsComputerCvsB'),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"), cms.InputTag("pfInclusiveSecondaryVertexFinderCvsLTagInfos"), cms.InputTag("softPFMuonsTagInfos"), cms.InputTag("softPFElectronsTagInfos"))
)


process.pfCombinedCvsLJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('charmTagsComputerCvsL'),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"), cms.InputTag("pfInclusiveSecondaryVertexFinderCvsLTagInfos"), cms.InputTag("softPFMuonsTagInfos"), cms.InputTag("softPFElectronsTagInfos"))
)


process.pfCombinedInclusiveSecondaryVertexV2BJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidateCombinedSecondaryVertexV2Computer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"), cms.InputTag("pfInclusiveSecondaryVertexFinderTagInfos"))
)


process.pfCombinedMVAV2BJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidateCombinedMVAV2Computer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"), cms.InputTag("pfSecondaryVertexTagInfos"), cms.InputTag("pfInclusiveSecondaryVertexFinderTagInfos"), cms.InputTag("softPFMuonsTagInfos"), cms.InputTag("softPFElectronsTagInfos"))
)


process.pfCombinedSecondaryVertexV2BJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidateCombinedSecondaryVertexV2Computer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"), cms.InputTag("pfSecondaryVertexTagInfos"))
)


process.pfConversions = cms.EDProducer("PFConversionProducer",
    PrimaryVertexLabel = cms.InputTag("offlinePrimaryVertices"),
    conversionCollection = cms.InputTag("allConversions")
)


process.pfDeepBoostedDiscriminatorsJetTags = cms.EDProducer("BTagProbabilityToDiscriminator",
    discriminators = cms.VPSet(
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfDeepBoostedJetTags","probTbcq"), cms.InputTag("pfDeepBoostedJetTags","probTbqq"), cms.InputTag("pfDeepBoostedJetTags","probQCDbb"), cms.InputTag("pfDeepBoostedJetTags","probQCDcc"), cms.InputTag("pfDeepBoostedJetTags","probQCDb"), 
                cms.InputTag("pfDeepBoostedJetTags","probQCDc"), cms.InputTag("pfDeepBoostedJetTags","probQCDothers")
            ),
            name = cms.string('TvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfDeepBoostedJetTags","probTbcq"), cms.InputTag("pfDeepBoostedJetTags","probTbqq"))
        ), 
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfDeepBoostedJetTags","probWcq"), cms.InputTag("pfDeepBoostedJetTags","probWqq"), cms.InputTag("pfDeepBoostedJetTags","probQCDbb"), cms.InputTag("pfDeepBoostedJetTags","probQCDcc"), cms.InputTag("pfDeepBoostedJetTags","probQCDb"), 
                cms.InputTag("pfDeepBoostedJetTags","probQCDc"), cms.InputTag("pfDeepBoostedJetTags","probQCDothers")
            ),
            name = cms.string('WvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfDeepBoostedJetTags","probWcq"), cms.InputTag("pfDeepBoostedJetTags","probWqq"))
        ), 
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfDeepBoostedJetTags","probZbb"), cms.InputTag("pfDeepBoostedJetTags","probZcc"), cms.InputTag("pfDeepBoostedJetTags","probZqq"), cms.InputTag("pfDeepBoostedJetTags","probQCDbb"), cms.InputTag("pfDeepBoostedJetTags","probQCDcc"), 
                cms.InputTag("pfDeepBoostedJetTags","probQCDb"), cms.InputTag("pfDeepBoostedJetTags","probQCDc"), cms.InputTag("pfDeepBoostedJetTags","probQCDothers")
            ),
            name = cms.string('ZvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfDeepBoostedJetTags","probZbb"), cms.InputTag("pfDeepBoostedJetTags","probZcc"), cms.InputTag("pfDeepBoostedJetTags","probZqq"))
        ), 
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfDeepBoostedJetTags","probZbb"), cms.InputTag("pfDeepBoostedJetTags","probQCDbb"), cms.InputTag("pfDeepBoostedJetTags","probQCDcc"), cms.InputTag("pfDeepBoostedJetTags","probQCDb"), cms.InputTag("pfDeepBoostedJetTags","probQCDc"), 
                cms.InputTag("pfDeepBoostedJetTags","probQCDothers")
            ),
            name = cms.string('ZbbvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfDeepBoostedJetTags","probZbb"))
        ), 
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfDeepBoostedJetTags","probHbb"), cms.InputTag("pfDeepBoostedJetTags","probQCDbb"), cms.InputTag("pfDeepBoostedJetTags","probQCDcc"), cms.InputTag("pfDeepBoostedJetTags","probQCDb"), cms.InputTag("pfDeepBoostedJetTags","probQCDc"), 
                cms.InputTag("pfDeepBoostedJetTags","probQCDothers")
            ),
            name = cms.string('HbbvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfDeepBoostedJetTags","probHbb"))
        ), 
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfDeepBoostedJetTags","probHqqqq"), cms.InputTag("pfDeepBoostedJetTags","probQCDbb"), cms.InputTag("pfDeepBoostedJetTags","probQCDcc"), cms.InputTag("pfDeepBoostedJetTags","probQCDb"), cms.InputTag("pfDeepBoostedJetTags","probQCDc"), 
                cms.InputTag("pfDeepBoostedJetTags","probQCDothers")
            ),
            name = cms.string('H4qvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfDeepBoostedJetTags","probHqqqq"))
        )
    )
)


process.pfDeepBoostedJetTagInfos = cms.EDProducer("DeepBoostedJetTagInfoProducer",
    jet_radius = cms.double(0.8),
    jets = cms.InputTag("ak8PFJetsPuppi"),
    mightGet = cms.optional.untracked.vstring,
    min_jet_pt = cms.double(150),
    min_pt_for_track_properties = cms.double(-1),
    pf_candidates = cms.InputTag("particleFlow"),
    puppi_value_map = cms.InputTag("puppi"),
    secondary_vertices = cms.InputTag("inclusiveCandidateSecondaryVertices"),
    use_puppiP4 = cms.bool(True),
    vertex_associator = cms.InputTag("primaryVertexAssociation","original"),
    vertices = cms.InputTag("offlinePrimaryVertices")
)


process.pfDeepBoostedJetTags = cms.EDProducer("DeepBoostedJetONNXJetTagsProducer",
    debugMode = cms.untracked.bool(False),
    flav_names = cms.vstring(
        'probTbcq', 
        'probTbqq', 
        'probTbc', 
        'probTbq', 
        'probWcq', 
        'probWqq', 
        'probZbb', 
        'probZcc', 
        'probZqq', 
        'probHbb', 
        'probHcc', 
        'probHqqqq', 
        'probQCDbb', 
        'probQCDcc', 
        'probQCDb', 
        'probQCDc', 
        'probQCDothers'
    ),
    mightGet = cms.optional.untracked.vstring,
    model_path = cms.FileInPath('RecoBTag/Combined/data/DeepBoostedJet/V02/full/resnet.onnx'),
    preprocessParams = cms.PSet(
        input_names = cms.vstring(
            'pfcand', 
            'sv'
        ),
        pfcand = cms.PSet(
            input_shape = cms.vuint32(1, 42, 100, 1),
            var_infos = cms.PSet(
                pfcand_VTX_ass = cms.PSet(
                    median = cms.double(7.0),
                    norm_factor = cms.double(1.0)
                ),
                pfcand_abseta = cms.PSet(
                    median = cms.double(0.632648706436),
                    norm_factor = cms.double(1.59032225958)
                ),
                pfcand_btagEtaRel = cms.PSet(
                    median = cms.double(1.19703966379),
                    norm_factor = cms.double(0.521026991705)
                ),
                pfcand_btagJetDistVal = cms.PSet(
                    median = cms.double(-0.000215483247302),
                    norm_factor = cms.double(161.385119349)
                ),
                pfcand_btagPParRatio = cms.PSet(
                    median = cms.double(0.839023888111),
                    norm_factor = cms.double(1.19186117841)
                ),
                pfcand_btagPtRatio = cms.PSet(
                    median = cms.double(0.0173742230982),
                    norm_factor = cms.double(4.25351138308)
                ),
                pfcand_btagSip2dSig = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(1.41174531059)
                ),
                pfcand_btagSip2dVal = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(495.583709284)
                ),
                pfcand_btagSip3dSig = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(0.831133090749)
                ),
                pfcand_btagSip3dVal = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(233.664322627)
                ),
                pfcand_charge = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(1.0)
                ),
                pfcand_deltaR = cms.PSet(
                    median = cms.double(0.252654820681),
                    norm_factor = cms.double(3.50836328292)
                ),
                pfcand_detadeta = cms.PSet(
                    median = cms.double(1.15567200254e-08),
                    norm_factor = cms.double(1644010.14927)
                ),
                pfcand_dlambdadz = cms.PSet(
                    median = cms.double(-1.2810873784e-07),
                    norm_factor = cms.double(268715.13012)
                ),
                pfcand_dphidphi = cms.PSet(
                    median = cms.double(1.130510352e-08),
                    norm_factor = cms.double(796482.476472)
                ),
                pfcand_dphidxy = cms.PSet(
                    median = cms.double(-9.61654578191e-08),
                    norm_factor = cms.double(204149.346943)
                ),
                pfcand_dptdpt = cms.PSet(
                    median = cms.double(4.11880840545e-08),
                    norm_factor = cms.double(66429.1000843)
                ),
                pfcand_drminsv = cms.PSet(
                    median = cms.double(0.192182734609),
                    norm_factor = cms.double(2.38205282141)
                ),
                pfcand_drsubjet1 = cms.PSet(
                    median = cms.double(0.258241385221),
                    norm_factor = cms.double(2.92607580997)
                ),
                pfcand_drsubjet2 = cms.PSet(
                    median = cms.double(0.305164307356),
                    norm_factor = cms.double(2.88195895791)
                ),
                pfcand_dxy = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(415.415835966)
                ),
                pfcand_dxydxy = cms.PSet(
                    median = cms.double(9.32332170578e-07),
                    norm_factor = cms.double(45949.2394216)
                ),
                pfcand_dxydz = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(10598589.4298)
                ),
                pfcand_dxysig = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(1.54565964258)
                ),
                pfcand_dz = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(264.770519024)
                ),
                pfcand_dzdz = cms.PSet(
                    median = cms.double(1.58729170607e-06),
                    norm_factor = cms.double(36545.958354)
                ),
                pfcand_dzsig = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(1.23840120847)
                ),
                pfcand_erel_log = cms.PSet(
                    median = cms.double(-5.38221979141),
                    norm_factor = cms.double(0.556499386531)
                ),
                pfcand_etarel = cms.PSet(
                    median = cms.double(-0.00711047858931),
                    norm_factor = cms.double(4.2642743837)
                ),
                pfcand_hcalFrac = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(1.0)
                ),
                pfcand_isChargedHad = cms.PSet(
                    median = cms.double(1.0),
                    norm_factor = cms.double(1.0)
                ),
                pfcand_isEl = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(1.0)
                ),
                pfcand_isGamma = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(1.0)
                ),
                pfcand_isMu = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(1.0)
                ),
                pfcand_isNeutralHad = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(1.0)
                ),
                pfcand_lostInnerHits = cms.PSet(
                    median = cms.double(-1.0),
                    norm_factor = cms.double(1.0)
                ),
                pfcand_normchi2 = cms.PSet(
                    median = cms.double(2.0),
                    norm_factor = cms.double(0.00100300902708)
                ),
                pfcand_phirel = cms.PSet(
                    median = cms.double(-1.71389010575e-05),
                    norm_factor = cms.double(4.22784626632)
                ),
                pfcand_pt_log = cms.PSet(
                    median = cms.double(1.03476798534),
                    norm_factor = cms.double(0.542224410728)
                ),
                pfcand_ptrel_log = cms.PSet(
                    median = cms.double(-5.37407469749),
                    norm_factor = cms.double(0.554677114485)
                ),
                pfcand_puppiw = cms.PSet(
                    median = cms.double(1.0),
                    norm_factor = cms.double(255.000015199)
                ),
                pfcand_quality = cms.PSet(
                    median = cms.double(5.0),
                    norm_factor = cms.double(0.2)
                )
            ),
            var_length = cms.uint32(100),
            var_names = cms.vstring(
                'pfcand_pt_log', 
                'pfcand_ptrel_log', 
                'pfcand_erel_log', 
                'pfcand_phirel', 
                'pfcand_etarel', 
                'pfcand_deltaR', 
                'pfcand_abseta', 
                'pfcand_puppiw', 
                'pfcand_drminsv', 
                'pfcand_drsubjet1', 
                'pfcand_drsubjet2', 
                'pfcand_charge', 
                'pfcand_isMu', 
                'pfcand_isEl', 
                'pfcand_isChargedHad', 
                'pfcand_isGamma', 
                'pfcand_isNeutralHad', 
                'pfcand_hcalFrac', 
                'pfcand_VTX_ass', 
                'pfcand_lostInnerHits', 
                'pfcand_normchi2', 
                'pfcand_quality', 
                'pfcand_dz', 
                'pfcand_dzsig', 
                'pfcand_dxy', 
                'pfcand_dxysig', 
                'pfcand_dptdpt', 
                'pfcand_detadeta', 
                'pfcand_dphidphi', 
                'pfcand_dxydxy', 
                'pfcand_dzdz', 
                'pfcand_dxydz', 
                'pfcand_dphidxy', 
                'pfcand_dlambdadz', 
                'pfcand_btagEtaRel', 
                'pfcand_btagPtRatio', 
                'pfcand_btagPParRatio', 
                'pfcand_btagSip2dVal', 
                'pfcand_btagSip2dSig', 
                'pfcand_btagSip3dVal', 
                'pfcand_btagSip3dSig', 
                'pfcand_btagJetDistVal'
            )
        ),
        sv = cms.PSet(
            input_shape = cms.vuint32(1, 15, 7, 1),
            var_infos = cms.PSet(
                sv_abseta = cms.PSet(
                    median = cms.double(0.616221785545),
                    norm_factor = cms.double(1.49676942133)
                ),
                sv_costhetasvpv = cms.PSet(
                    median = cms.double(0.999747157097),
                    norm_factor = cms.double(174.907183727)
                ),
                sv_d3d = cms.PSet(
                    median = cms.double(0.5242870152),
                    norm_factor = cms.double(0.255813267634)
                ),
                sv_d3dsig = cms.PSet(
                    median = cms.double(9.12465429306),
                    norm_factor = cms.double(0.0238374692882)
                ),
                sv_deltaR = cms.PSet(
                    median = cms.double(0.140969499946),
                    norm_factor = cms.double(4.30546783192)
                ),
                sv_dxy = cms.PSet(
                    median = cms.double(0.387232214212),
                    norm_factor = cms.double(0.360931771841)
                ),
                sv_dxysig = cms.PSet(
                    median = cms.double(9.11130714417),
                    norm_factor = cms.double(0.0238327380073)
                ),
                sv_erel_log = cms.PSet(
                    median = cms.double(-2.82667005062),
                    norm_factor = cms.double(0.704463981589)
                ),
                sv_etarel = cms.PSet(
                    median = cms.double(-0.0037129354896),
                    norm_factor = cms.double(6.99426943996)
                ),
                sv_mass = cms.PSet(
                    median = cms.double(1.34319722652),
                    norm_factor = cms.double(0.368495534421)
                ),
                sv_normchi2 = cms.PSet(
                    median = cms.double(0.819934427738),
                    norm_factor = cms.double(0.725797320076)
                ),
                sv_ntracks = cms.PSet(
                    median = cms.double(3.0),
                    norm_factor = cms.double(0.5)
                ),
                sv_phirel = cms.PSet(
                    median = cms.double(0.000521215377375),
                    norm_factor = cms.double(7.16761972364)
                ),
                sv_pt_log = cms.PSet(
                    median = cms.double(3.64881515503),
                    norm_factor = cms.double(0.725050067872)
                ),
                sv_ptrel_log = cms.PSet(
                    median = cms.double(-2.81496477127),
                    norm_factor = cms.double(0.701236308041)
                )
            ),
            var_length = cms.uint32(7),
            var_names = cms.vstring(
                'sv_pt_log', 
                'sv_ptrel_log', 
                'sv_erel_log', 
                'sv_phirel', 
                'sv_etarel', 
                'sv_deltaR', 
                'sv_abseta', 
                'sv_mass', 
                'sv_ntracks', 
                'sv_normchi2', 
                'sv_dxy', 
                'sv_dxysig', 
                'sv_d3d', 
                'sv_d3dsig', 
                'sv_costhetasvpv'
            )
        )
    ),
    src = cms.InputTag("pfDeepBoostedJetTagInfos")
)


process.pfDeepCMVADiscriminatorsJetTags = cms.EDProducer("BTagProbabilityToDiscriminator",
    discriminators = cms.VPSet(
        cms.PSet(
            denominator = cms.VInputTag(),
            name = cms.string('BvsAll'),
            numerator = cms.VInputTag(cms.InputTag("pfDeepCMVAJetTags","probb"), cms.InputTag("pfDeepCMVAJetTags","probbb"))
        ), 
        cms.PSet(
            denominator = cms.VInputTag(cms.InputTag("pfDeepCMVAJetTags","probc"), cms.InputTag("pfDeepCMVAJetTags","probb"), cms.InputTag("pfDeepCMVAJetTags","probbb")),
            name = cms.string('CvsB'),
            numerator = cms.VInputTag(cms.InputTag("pfDeepCMVAJetTags","probc"))
        ), 
        cms.PSet(
            denominator = cms.VInputTag(cms.InputTag("pfDeepCMVAJetTags","probc"), cms.InputTag("pfDeepCMVAJetTags","probudsg")),
            name = cms.string('CvsL'),
            numerator = cms.VInputTag(cms.InputTag("pfDeepCMVAJetTags","probc"))
        )
    )
)


process.pfDeepCMVAJetTags = cms.EDProducer("DeepFlavourJetTagsProducer",
    NNConfig = cms.FileInPath('RecoBTag/Combined/data/Model_DeepCMVA.json'),
    checkSVForDefaults = cms.bool(False),
    meanPadding = cms.bool(False),
    src = cms.InputTag("pfDeepCMVATagInfos"),
    toAdd = cms.PSet(

    )
)


process.pfDeepCMVANegativeTagInfos = cms.EDProducer("DeepCMVATagInfoProducer",
    cMVAPtThreshold = cms.double(200),
    deepNNTagInfos = cms.InputTag("pfDeepCSVNegativeTagInfos"),
    elInfoSrc = cms.InputTag("softPFElectronsTagInfos"),
    ipInfoSrc = cms.InputTag("pfImpactParameterTagInfos"),
    jpComputerSrc = cms.string('candidateJetProbabilityComputer'),
    jpbComputerSrc = cms.string('candidateJetBProbabilityComputer'),
    muInfoSrc = cms.InputTag("softPFMuonsTagInfos"),
    softelComputerSrc = cms.string('softPFElectronComputer'),
    softmuComputerSrc = cms.string('softPFMuonComputer')
)


process.pfDeepCMVAPositiveTagInfos = cms.EDProducer("DeepCMVATagInfoProducer",
    cMVAPtThreshold = cms.double(200),
    deepNNTagInfos = cms.InputTag("pfDeepCSVPositiveTagInfos"),
    elInfoSrc = cms.InputTag("softPFElectronsTagInfos"),
    ipInfoSrc = cms.InputTag("pfImpactParameterTagInfos"),
    jpComputerSrc = cms.string('candidateJetProbabilityComputer'),
    jpbComputerSrc = cms.string('candidateJetBProbabilityComputer'),
    muInfoSrc = cms.InputTag("softPFMuonsTagInfos"),
    softelComputerSrc = cms.string('softPFElectronComputer'),
    softmuComputerSrc = cms.string('softPFMuonComputer')
)


process.pfDeepCMVATagInfos = cms.EDProducer("DeepCMVATagInfoProducer",
    cMVAPtThreshold = cms.double(200),
    deepNNTagInfos = cms.InputTag("pfDeepCSVTagInfos"),
    elInfoSrc = cms.InputTag("softPFElectronsTagInfos"),
    ipInfoSrc = cms.InputTag("pfImpactParameterTagInfos"),
    jpComputerSrc = cms.string('candidateJetProbabilityComputer'),
    jpbComputerSrc = cms.string('candidateJetBProbabilityComputer'),
    muInfoSrc = cms.InputTag("softPFMuonsTagInfos"),
    softelComputerSrc = cms.string('softPFElectronComputer'),
    softmuComputerSrc = cms.string('softPFMuonComputer')
)


process.pfDeepCSVDiscriminatorsJetTags = cms.EDProducer("BTagProbabilityToDiscriminator",
    discriminators = cms.VPSet(
        cms.PSet(
            denominator = cms.VInputTag(),
            name = cms.string('BvsAll'),
            numerator = cms.VInputTag(cms.InputTag("pfDeepCSVJetTags","probb"), cms.InputTag("pfDeepCSVJetTags","probbb"))
        ), 
        cms.PSet(
            denominator = cms.VInputTag(cms.InputTag("pfDeepCSVJetTags","probc"), cms.InputTag("pfDeepCSVJetTags","probb"), cms.InputTag("pfDeepCSVJetTags","probbb")),
            name = cms.string('CvsB'),
            numerator = cms.VInputTag(cms.InputTag("pfDeepCSVJetTags","probc"))
        ), 
        cms.PSet(
            denominator = cms.VInputTag(cms.InputTag("pfDeepCSVJetTags","probudsg"), cms.InputTag("pfDeepCSVJetTags","probc")),
            name = cms.string('CvsL'),
            numerator = cms.VInputTag(cms.InputTag("pfDeepCSVJetTags","probc"))
        )
    )
)


process.pfDeepCSVJetTags = cms.EDProducer("DeepFlavourJetTagsProducer",
    NNConfig = cms.FileInPath('RecoBTag/Combined/data/DeepCSV_PhaseII.json'),
    checkSVForDefaults = cms.bool(True),
    meanPadding = cms.bool(True),
    src = cms.InputTag("pfDeepCSVTagInfos"),
    toAdd = cms.PSet(

    )
)


process.pfDeepCSVNegativeTagInfos = cms.EDProducer("DeepNNTagInfoProducer",
    computer = cms.PSet(
        SoftLeptonFlip = cms.bool(False),
        charmCut = cms.double(1.5),
        correctVertexMass = cms.bool(True),
        minimumTrackWeight = cms.double(0.5),
        pseudoMultiplicityMin = cms.uint32(2),
        pseudoVertexV0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        trackFlip = cms.bool(True),
        trackMultiplicityMin = cms.uint32(2),
        trackPairV0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.03)
        ),
        trackPseudoSelection = cms.PSet(
            a_dR = cms.double(-0.001053),
            a_pT = cms.double(0.005263),
            b_dR = cms.double(0.6263),
            b_pT = cms.double(0.3684),
            jetDeltaRMax = cms.double(0.3),
            maxDecayLen = cms.double(5),
            maxDistToAxis = cms.double(0.07),
            max_pT = cms.double(500),
            max_pT_dRcut = cms.double(0.1),
            max_pT_trackPTcut = cms.double(3),
            min_pT = cms.double(120),
            min_pT_dRcut = cms.double(0.5),
            normChi2Max = cms.double(99999.9),
            pixelHitsMin = cms.uint32(0),
            ptMin = cms.double(0.0),
            qualityClass = cms.string('any'),
            sip2dSigMax = cms.double(-2.0),
            sip2dSigMin = cms.double(-99999.9),
            sip2dValMax = cms.double(99999.9),
            sip2dValMin = cms.double(-99999.9),
            sip3dSigMax = cms.double(10.0),
            sip3dSigMin = cms.double(-99999.9),
            sip3dValMax = cms.double(99999.9),
            sip3dValMin = cms.double(-99999.9),
            totalHitsMin = cms.uint32(0),
            useVariableJTA = cms.bool(False)
        ),
        trackSelection = cms.PSet(
            a_dR = cms.double(-0.001053),
            a_pT = cms.double(0.005263),
            b_dR = cms.double(0.6263),
            b_pT = cms.double(0.3684),
            jetDeltaRMax = cms.double(0.3),
            maxDecayLen = cms.double(5),
            maxDistToAxis = cms.double(0.07),
            max_pT = cms.double(500),
            max_pT_dRcut = cms.double(0.1),
            max_pT_trackPTcut = cms.double(3),
            min_pT = cms.double(120),
            min_pT_dRcut = cms.double(0.5),
            normChi2Max = cms.double(99999.9),
            pixelHitsMin = cms.uint32(0),
            ptMin = cms.double(0.0),
            qualityClass = cms.string('any'),
            sip2dSigMax = cms.double(99999.9),
            sip2dSigMin = cms.double(-99999.9),
            sip2dValMax = cms.double(99999.9),
            sip2dValMin = cms.double(-99999.9),
            sip3dSigMax = cms.double(10.0),
            sip3dSigMin = cms.double(-99999.9),
            sip3dValMax = cms.double(99999.9),
            sip3dValMin = cms.double(-99999.9),
            totalHitsMin = cms.uint32(0),
            useVariableJTA = cms.bool(False)
        ),
        trackSort = cms.string('sip2dSig'),
        useTrackWeights = cms.bool(True),
        vertexFlip = cms.bool(True)
    ),
    svTagInfos = cms.InputTag("pfInclusiveSecondaryVertexFinderNegativeTagInfos")
)


process.pfDeepCSVPositiveTagInfos = cms.EDProducer("DeepNNTagInfoProducer",
    computer = cms.PSet(
        SoftLeptonFlip = cms.bool(False),
        charmCut = cms.double(1.5),
        correctVertexMass = cms.bool(True),
        minimumTrackWeight = cms.double(0.5),
        pseudoMultiplicityMin = cms.uint32(2),
        pseudoVertexV0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        trackFlip = cms.bool(False),
        trackMultiplicityMin = cms.uint32(2),
        trackPairV0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.03)
        ),
        trackPseudoSelection = cms.PSet(
            a_dR = cms.double(-0.001053),
            a_pT = cms.double(0.005263),
            b_dR = cms.double(0.6263),
            b_pT = cms.double(0.3684),
            jetDeltaRMax = cms.double(0.3),
            maxDecayLen = cms.double(5),
            maxDistToAxis = cms.double(0.07),
            max_pT = cms.double(500),
            max_pT_dRcut = cms.double(0.1),
            max_pT_trackPTcut = cms.double(3),
            min_pT = cms.double(120),
            min_pT_dRcut = cms.double(0.5),
            normChi2Max = cms.double(99999.9),
            pixelHitsMin = cms.uint32(0),
            ptMin = cms.double(0.0),
            qualityClass = cms.string('any'),
            sip2dSigMax = cms.double(99999.9),
            sip2dSigMin = cms.double(2.0),
            sip2dValMax = cms.double(99999.9),
            sip2dValMin = cms.double(-99999.9),
            sip3dSigMax = cms.double(99999.9),
            sip3dSigMin = cms.double(0),
            sip3dValMax = cms.double(99999.9),
            sip3dValMin = cms.double(-99999.9),
            totalHitsMin = cms.uint32(0),
            useVariableJTA = cms.bool(False)
        ),
        trackSelection = cms.PSet(
            a_dR = cms.double(-0.001053),
            a_pT = cms.double(0.005263),
            b_dR = cms.double(0.6263),
            b_pT = cms.double(0.3684),
            jetDeltaRMax = cms.double(0.3),
            maxDecayLen = cms.double(5),
            maxDistToAxis = cms.double(0.07),
            max_pT = cms.double(500),
            max_pT_dRcut = cms.double(0.1),
            max_pT_trackPTcut = cms.double(3),
            min_pT = cms.double(120),
            min_pT_dRcut = cms.double(0.5),
            normChi2Max = cms.double(99999.9),
            pixelHitsMin = cms.uint32(0),
            ptMin = cms.double(0.0),
            qualityClass = cms.string('any'),
            sip2dSigMax = cms.double(99999.9),
            sip2dSigMin = cms.double(-99999.9),
            sip2dValMax = cms.double(99999.9),
            sip2dValMin = cms.double(-99999.9),
            sip3dSigMax = cms.double(99999.9),
            sip3dSigMin = cms.double(0),
            sip3dValMax = cms.double(99999.9),
            sip3dValMin = cms.double(-99999.9),
            totalHitsMin = cms.uint32(0),
            useVariableJTA = cms.bool(False)
        ),
        trackSort = cms.string('sip2dSig'),
        useTrackWeights = cms.bool(True),
        vertexFlip = cms.bool(False)
    ),
    svTagInfos = cms.InputTag("pfInclusiveSecondaryVertexFinderTagInfos")
)


process.pfDeepCSVTagInfos = cms.EDProducer("DeepNNTagInfoProducer",
    computer = cms.PSet(
        SoftLeptonFlip = cms.bool(False),
        charmCut = cms.double(1.5),
        correctVertexMass = cms.bool(True),
        minimumTrackWeight = cms.double(0.5),
        pseudoMultiplicityMin = cms.uint32(2),
        pseudoVertexV0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        trackFlip = cms.bool(False),
        trackMultiplicityMin = cms.uint32(2),
        trackPairV0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.03)
        ),
        trackPseudoSelection = cms.PSet(
            a_dR = cms.double(-0.001053),
            a_pT = cms.double(0.005263),
            b_dR = cms.double(0.6263),
            b_pT = cms.double(0.3684),
            jetDeltaRMax = cms.double(0.3),
            maxDecayLen = cms.double(5),
            maxDistToAxis = cms.double(0.07),
            max_pT = cms.double(500),
            max_pT_dRcut = cms.double(0.1),
            max_pT_trackPTcut = cms.double(3),
            min_pT = cms.double(120),
            min_pT_dRcut = cms.double(0.5),
            normChi2Max = cms.double(99999.9),
            pixelHitsMin = cms.uint32(0),
            ptMin = cms.double(0.0),
            qualityClass = cms.string('any'),
            sip2dSigMax = cms.double(99999.9),
            sip2dSigMin = cms.double(2.0),
            sip2dValMax = cms.double(99999.9),
            sip2dValMin = cms.double(-99999.9),
            sip3dSigMax = cms.double(99999.9),
            sip3dSigMin = cms.double(-99999.9),
            sip3dValMax = cms.double(99999.9),
            sip3dValMin = cms.double(-99999.9),
            totalHitsMin = cms.uint32(0),
            useVariableJTA = cms.bool(False)
        ),
        trackSelection = cms.PSet(
            a_dR = cms.double(-0.001053),
            a_pT = cms.double(0.005263),
            b_dR = cms.double(0.6263),
            b_pT = cms.double(0.3684),
            jetDeltaRMax = cms.double(0.3),
            maxDecayLen = cms.double(5),
            maxDistToAxis = cms.double(0.07),
            max_pT = cms.double(500),
            max_pT_dRcut = cms.double(0.1),
            max_pT_trackPTcut = cms.double(3),
            min_pT = cms.double(120),
            min_pT_dRcut = cms.double(0.5),
            normChi2Max = cms.double(99999.9),
            pixelHitsMin = cms.uint32(0),
            ptMin = cms.double(0.0),
            qualityClass = cms.string('any'),
            sip2dSigMax = cms.double(99999.9),
            sip2dSigMin = cms.double(-99999.9),
            sip2dValMax = cms.double(99999.9),
            sip2dValMin = cms.double(-99999.9),
            sip3dSigMax = cms.double(99999.9),
            sip3dSigMin = cms.double(-99999.9),
            sip3dValMax = cms.double(99999.9),
            sip3dValMin = cms.double(-99999.9),
            totalHitsMin = cms.uint32(0),
            useVariableJTA = cms.bool(False)
        ),
        trackSort = cms.string('sip2dSig'),
        useTrackWeights = cms.bool(True),
        vertexFlip = cms.bool(False)
    ),
    svTagInfos = cms.InputTag("pfInclusiveSecondaryVertexFinderTagInfos")
)


process.pfDeepDoubleBvLJetTags = cms.EDProducer("DeepDoubleXONNXJetTagsProducer",
    flav_names = cms.vstring(
        'probQCD', 
        'probHbb'
    ),
    flavor = cms.string('BvL'),
    input_names = cms.vstring(
        'input_1', 
        'input_2', 
        'input_3'
    ),
    mightGet = cms.optional.untracked.vstring,
    model_path = cms.FileInPath('RecoBTag/Combined/data/DeepDoubleX/94X/V01/DDB.onnx'),
    output_names = cms.vstring(),
    src = cms.InputTag("pfDeepDoubleXTagInfos")
)


process.pfDeepDoubleCvBJetTags = cms.EDProducer("DeepDoubleXONNXJetTagsProducer",
    flav_names = cms.vstring(
        'probHbb', 
        'probHcc'
    ),
    flavor = cms.string('CvB'),
    input_names = cms.vstring(
        'input_1', 
        'input_2', 
        'input_3'
    ),
    mightGet = cms.optional.untracked.vstring,
    model_path = cms.FileInPath('RecoBTag/Combined/data/DeepDoubleX/94X/V01/DDCvB.onnx'),
    output_names = cms.vstring(),
    src = cms.InputTag("pfDeepDoubleXTagInfos")
)


process.pfDeepDoubleCvLJetTags = cms.EDProducer("DeepDoubleXONNXJetTagsProducer",
    flav_names = cms.vstring(
        'probQCD', 
        'probHcc'
    ),
    flavor = cms.string('CvL'),
    input_names = cms.vstring(
        'input_1', 
        'input_2', 
        'input_3'
    ),
    mightGet = cms.optional.untracked.vstring,
    model_path = cms.FileInPath('RecoBTag/Combined/data/DeepDoubleX/94X/V01/DDC.onnx'),
    output_names = cms.vstring(),
    src = cms.InputTag("pfDeepDoubleXTagInfos")
)


process.pfDeepDoubleXTagInfos = cms.EDProducer("DeepDoubleXTagInfoProducer",
    jet_radius = cms.double(0.8),
    jets = cms.InputTag("ak8PFJetsPuppi"),
    mightGet = cms.optional.untracked.vstring,
    min_candidate_pt = cms.double(0.95),
    min_jet_pt = cms.double(150),
    secondary_vertices = cms.InputTag("inclusiveCandidateSecondaryVertices"),
    shallow_tag_infos = cms.InputTag("pfBoostedDoubleSVAK8TagInfos"),
    vertices = cms.InputTag("offlinePrimaryVertices")
)


process.pfDeepFlavourJetTags = cms.EDProducer("DeepFlavourONNXJetTagsProducer",
    flav_names = cms.vstring(
        'probb', 
        'probbb', 
        'problepb', 
        'probc', 
        'probuds', 
        'probg'
    ),
    input_names = cms.vstring(
        'input_1', 
        'input_2', 
        'input_3', 
        'input_4', 
        'input_5'
    ),
    mightGet = cms.optional.untracked.vstring,
    model_path = cms.FileInPath('RecoBTag/Combined/data/DeepFlavourV03_10X_training/model.onnx'),
    output_names = cms.vstring('ID_pred/Softmax:0'),
    src = cms.InputTag("pfDeepFlavourTagInfos")
)


process.pfDeepFlavourTagInfos = cms.EDProducer("DeepFlavourTagInfoProducer",
    candidates = cms.InputTag("packedPFCandidates"),
    compute_probabilities = cms.bool(False),
    fallback_puppi_weight = cms.bool(False),
    fallback_vertex_association = cms.bool(False),
    flip = cms.bool(False),
    jet_radius = cms.double(0.4),
    jets = cms.InputTag("ak4PFJetsCHS"),
    max_jet_eta = cms.double(2.5),
    mightGet = cms.optional.untracked.vstring,
    min_candidate_pt = cms.double(0.95),
    min_jet_pt = cms.double(15),
    puppi_value_map = cms.InputTag("puppi"),
    run_deepVertex = cms.bool(False),
    secondary_vertices = cms.InputTag("inclusiveCandidateSecondaryVertices"),
    shallow_tag_infos = cms.InputTag("pfDeepCSVTagInfos"),
    vertex_associator = cms.InputTag("primaryVertexAssociation","original"),
    vertices = cms.InputTag("offlinePrimaryVertices")
)


process.pfDeepVertexJetTags = cms.EDProducer("DeepVertexTFJetTagsProducer",
    batch_eval = cms.bool(False),
    flav_table = cms.PSet(
        probb = cms.vuint32(0),
        probc = cms.vuint32(1),
        probg = cms.vuint32(3),
        probuds = cms.vuint32(2)
    ),
    graph_path = cms.FileInPath('RecoBTag/Combined/data/DeepVertex/Converted_retraining.pb'),
    input_names = cms.vstring(
        'input_1', 
        'input_2', 
        'input_3', 
        'input_4', 
        'input_5', 
        'input_6', 
        'input_7', 
        'input_8', 
        'input_9', 
        'input_10', 
        'input_11', 
        'input_12'
    ),
    lp_names = cms.vstring(),
    max_jet_eta = cms.double(2.5),
    mightGet = cms.optional.untracked.vstring,
    min_jet_pt = cms.double(15),
    nThreads = cms.uint32(1),
    output_names = cms.vstring('output_node0'),
    singleThreadPool = cms.string('no_threads'),
    src = cms.InputTag("pfDeepFlavourTagInfos")
)


process.pfDisplacedTrackerVertex = cms.EDProducer("PFDisplacedTrackerVertexProducer",
    displacedTrackerVertexColl = cms.InputTag("particleFlowDisplacedVertex"),
    trackColl = cms.InputTag("generalTracks")
)


process.pfElectronInterestingEcalDetIdEB = cms.EDProducer("InterestingDetIdCollectionProducer",
    basicClustersLabel = cms.InputTag("pfElectronTranslator","pf"),
    etaSize = cms.int32(5),
    interestingDetIdCollection = cms.string(''),
    keepNextToBoundary = cms.bool(True),
    keepNextToDead = cms.bool(True),
    phiSize = cms.int32(5),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    severityLevel = cms.int32(1)
)


process.pfElectronInterestingEcalDetIdEE = cms.EDProducer("InterestingDetIdCollectionProducer",
    basicClustersLabel = cms.InputTag("pfElectronTranslator","pf"),
    etaSize = cms.int32(5),
    interestingDetIdCollection = cms.string(''),
    keepNextToBoundary = cms.bool(True),
    keepNextToDead = cms.bool(True),
    phiSize = cms.int32(5),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    severityLevel = cms.int32(1)
)


process.pfElectronTranslator = cms.EDProducer("PFElectronTranslator",
    CheckStatusFlag = cms.bool(True),
    ElectronMVA = cms.string('pf'),
    ElectronSC = cms.string('pf'),
    GSFTracks = cms.InputTag("electronGsfTracks"),
    MVACutBlock = cms.PSet(
        MVACut = cms.double(-1.0)
    ),
    PFBasicClusters = cms.string('pf'),
    PFCandidate = cms.InputTag("pfSelectedElectrons"),
    PFCandidateElectron = cms.InputTag("particleFlowTmp","electrons"),
    PFGsfElectron = cms.string('pf'),
    PFGsfElectronCore = cms.string('pf'),
    PFPreshowerClusters = cms.string('pf'),
    PFSuperClusters = cms.string('pf'),
    isolationValues = cms.PSet(
        pfSumChargedHadronPt = cms.InputTag("elPFIsoValueCharged04PFId"),
        pfSumNeutralHadronEt = cms.InputTag("elPFIsoValueNeutral04PFId"),
        pfSumPUPt = cms.InputTag("elPFIsoValuePU04PFId"),
        pfSumPhotonEt = cms.InputTag("elPFIsoValueGamma04PFId")
    ),
    useIsolationValues = cms.bool(False)
)


process.pfGhostTrackBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidateGhostTrackComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"), cms.InputTag("pfGhostTrackVertexTagInfos"))
)


process.pfGhostTrackVertexTagInfos = cms.EDProducer("CandSecondaryVertexProducer",
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    constraint = cms.string('BeamSpot'),
    extSVCollection = cms.InputTag("secondaryVertices"),
    extSVDeltaRToJet = cms.double(0.3),
    minimumTrackWeight = cms.double(0.5),
    trackIPTagInfos = cms.InputTag("pfImpactParameterTagInfos"),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(1),
        ptMin = cms.double(1.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip3dSig'),
    useExternalSV = cms.bool(False),
    usePVError = cms.bool(True),
    vertexCuts = cms.PSet(
        distSig2dMax = cms.double(99999.9),
        distSig2dMin = cms.double(3.0),
        distSig3dMax = cms.double(99999.9),
        distSig3dMin = cms.double(-99999.9),
        distVal2dMax = cms.double(2.5),
        distVal2dMin = cms.double(0.01),
        distVal3dMax = cms.double(99999.9),
        distVal3dMin = cms.double(-99999.9),
        fracPV = cms.double(0.65),
        massMax = cms.double(6.5),
        maxDeltaRToJetAxis = cms.double(0.4),
        minimumTrackWeight = cms.double(0.5),
        multiplicityMin = cms.uint32(1),
        useTrackWeights = cms.bool(True),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        )
    ),
    vertexReco = cms.PSet(
        finder = cms.string('gtvr'),
        fitType = cms.string('RefitGhostTrackWithVertices'),
        maxFitChi2 = cms.double(10.0),
        mergeThreshold = cms.double(3.0),
        primcut = cms.double(2.0),
        seccut = cms.double(4.0)
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    )
)


process.pfImpactParameterAK8TagInfos = cms.EDProducer("CandIPProducer",
    candidates = cms.InputTag("particleFlow"),
    computeGhostTrack = cms.bool(False),
    computeProbabilities = cms.bool(False),
    ghostTrackPriorDeltaR = cms.double(0.03),
    jetDirectionUsingGhostTrack = cms.bool(False),
    jetDirectionUsingTracks = cms.bool(False),
    jets = cms.InputTag("ak8PFJetsPuppi"),
    maxDeltaR = cms.double(0.8),
    maximumChiSquared = cms.double(5.0),
    maximumLongitudinalImpactParameter = cms.double(17.0),
    maximumTransverseImpactParameter = cms.double(0.2),
    minimumNumberOfHits = cms.int32(0),
    minimumNumberOfPixelHits = cms.int32(1),
    minimumTransverseMomentum = cms.double(1.0),
    primaryVertex = cms.InputTag("offlinePrimaryVertices"),
    useTrackQuality = cms.bool(False)
)


process.pfImpactParameterCA15TagInfos = cms.EDProducer("CandIPProducer",
    candidates = cms.InputTag("particleFlow"),
    computeGhostTrack = cms.bool(False),
    computeProbabilities = cms.bool(False),
    ghostTrackPriorDeltaR = cms.double(0.03),
    jetDirectionUsingGhostTrack = cms.bool(False),
    jetDirectionUsingTracks = cms.bool(False),
    jets = cms.InputTag("ca15PFJetsCHS"),
    maxDeltaR = cms.double(1.5),
    maximumChiSquared = cms.double(5.0),
    maximumLongitudinalImpactParameter = cms.double(17.0),
    maximumTransverseImpactParameter = cms.double(0.2),
    minimumNumberOfHits = cms.int32(0),
    minimumNumberOfPixelHits = cms.int32(1),
    minimumTransverseMomentum = cms.double(1.0),
    primaryVertex = cms.InputTag("offlinePrimaryVertices"),
    useTrackQuality = cms.bool(False)
)


process.pfImpactParameterTagInfos = cms.EDProducer("CandIPProducer",
    candidates = cms.InputTag("particleFlow"),
    computeGhostTrack = cms.bool(True),
    computeProbabilities = cms.bool(True),
    ghostTrackPriorDeltaR = cms.double(0.03),
    jetDirectionUsingGhostTrack = cms.bool(False),
    jetDirectionUsingTracks = cms.bool(False),
    jets = cms.InputTag("ak4PFJetsCHS"),
    maxDeltaR = cms.double(0.4),
    maximumChiSquared = cms.double(5.0),
    maximumLongitudinalImpactParameter = cms.double(17.0),
    maximumTransverseImpactParameter = cms.double(0.2),
    minimumNumberOfHits = cms.int32(0),
    minimumNumberOfPixelHits = cms.int32(1),
    minimumTransverseMomentum = cms.double(1.0),
    primaryVertex = cms.InputTag("offlinePrimaryVertices"),
    useTrackQuality = cms.bool(False)
)


process.pfInclusiveSecondaryVertexFinderAK8TagInfos = cms.EDProducer("CandSecondaryVertexProducer",
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    constraint = cms.string('BeamSpot'),
    extSVCollection = cms.InputTag("inclusiveCandidateSecondaryVertices"),
    extSVDeltaRToJet = cms.double(0.8),
    minimumTrackWeight = cms.double(0.5),
    trackIPTagInfos = cms.InputTag("pfImpactParameterAK8TagInfos"),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.8),
        maxDecayLen = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(1),
        ptMin = cms.double(1.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip3dSig'),
    useExternalSV = cms.bool(True),
    usePVError = cms.bool(True),
    vertexCuts = cms.PSet(
        distSig2dMax = cms.double(99999.9),
        distSig2dMin = cms.double(2.0),
        distSig3dMax = cms.double(99999.9),
        distSig3dMin = cms.double(-99999.9),
        distVal2dMax = cms.double(2.5),
        distVal2dMin = cms.double(0.01),
        distVal3dMax = cms.double(99999.9),
        distVal3dMin = cms.double(-99999.9),
        fracPV = cms.double(0.79),
        massMax = cms.double(6.5),
        maxDeltaRToJetAxis = cms.double(0.8),
        minimumTrackWeight = cms.double(0.5),
        multiplicityMin = cms.uint32(2),
        useTrackWeights = cms.bool(True),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        )
    ),
    vertexReco = cms.PSet(
        finder = cms.string('avr'),
        minweight = cms.double(0.5),
        primcut = cms.double(1.8),
        seccut = cms.double(6.0),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001)
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    )
)


process.pfInclusiveSecondaryVertexFinderCA15TagInfos = cms.EDProducer("CandSecondaryVertexProducer",
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    constraint = cms.string('BeamSpot'),
    extSVCollection = cms.InputTag("inclusiveCandidateSecondaryVertices"),
    extSVDeltaRToJet = cms.double(1.5),
    minimumTrackWeight = cms.double(0.5),
    trackIPTagInfos = cms.InputTag("pfImpactParameterCA15TagInfos"),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(1.5),
        maxDecayLen = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(1),
        ptMin = cms.double(1.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip3dSig'),
    useExternalSV = cms.bool(True),
    usePVError = cms.bool(True),
    vertexCuts = cms.PSet(
        distSig2dMax = cms.double(99999.9),
        distSig2dMin = cms.double(2.0),
        distSig3dMax = cms.double(99999.9),
        distSig3dMin = cms.double(-99999.9),
        distVal2dMax = cms.double(2.5),
        distVal2dMin = cms.double(0.01),
        distVal3dMax = cms.double(99999.9),
        distVal3dMin = cms.double(-99999.9),
        fracPV = cms.double(0.79),
        massMax = cms.double(6.5),
        maxDeltaRToJetAxis = cms.double(1.5),
        minimumTrackWeight = cms.double(0.5),
        multiplicityMin = cms.uint32(2),
        useTrackWeights = cms.bool(True),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        )
    ),
    vertexReco = cms.PSet(
        finder = cms.string('avr'),
        minweight = cms.double(0.5),
        primcut = cms.double(1.8),
        seccut = cms.double(6.0),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001)
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    )
)


process.pfInclusiveSecondaryVertexFinderCvsLTagInfos = cms.EDProducer("CandSecondaryVertexProducer",
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    constraint = cms.string('BeamSpot'),
    extSVCollection = cms.InputTag("inclusiveCandidateSecondaryVerticesCvsL"),
    extSVDeltaRToJet = cms.double(0.3),
    minimumTrackWeight = cms.double(0.5),
    trackIPTagInfos = cms.InputTag("pfImpactParameterTagInfos"),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(1),
        ptMin = cms.double(1.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip3dSig'),
    useExternalSV = cms.bool(True),
    usePVError = cms.bool(True),
    vertexCuts = cms.PSet(
        distSig2dMax = cms.double(99999.9),
        distSig2dMin = cms.double(1.5),
        distSig3dMax = cms.double(99999.9),
        distSig3dMin = cms.double(-99999.9),
        distVal2dMax = cms.double(2.5),
        distVal2dMin = cms.double(0.01),
        distVal3dMax = cms.double(99999.9),
        distVal3dMin = cms.double(-99999.9),
        fracPV = cms.double(0.79),
        massMax = cms.double(6.5),
        maxDeltaRToJetAxis = cms.double(0.4),
        minimumTrackWeight = cms.double(0.5),
        multiplicityMin = cms.uint32(2),
        useTrackWeights = cms.bool(True),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        )
    ),
    vertexReco = cms.PSet(
        finder = cms.string('avr'),
        minweight = cms.double(0.5),
        primcut = cms.double(1.8),
        seccut = cms.double(6.0),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001)
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    )
)


process.pfInclusiveSecondaryVertexFinderNegativeCvsLTagInfos = cms.EDProducer("CandSecondaryVertexProducer",
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    constraint = cms.string('BeamSpot'),
    extSVCollection = cms.InputTag("inclusiveCandidateSecondaryVerticesCvsL"),
    extSVDeltaRToJet = cms.double(-0.3),
    minimumTrackWeight = cms.double(0.5),
    trackIPTagInfos = cms.InputTag("pfImpactParameterTagInfos"),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(1),
        ptMin = cms.double(1.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip3dSig'),
    useExternalSV = cms.bool(True),
    usePVError = cms.bool(True),
    vertexCuts = cms.PSet(
        distSig2dMax = cms.double(-1.5),
        distSig2dMin = cms.double(-99999.9),
        distSig3dMax = cms.double(99999.9),
        distSig3dMin = cms.double(-99999.9),
        distVal2dMax = cms.double(-0.01),
        distVal2dMin = cms.double(-2.5),
        distVal3dMax = cms.double(99999.9),
        distVal3dMin = cms.double(-99999.9),
        fracPV = cms.double(0.79),
        massMax = cms.double(6.5),
        maxDeltaRToJetAxis = cms.double(-0.5),
        minimumTrackWeight = cms.double(0.5),
        multiplicityMin = cms.uint32(2),
        useTrackWeights = cms.bool(True),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        )
    ),
    vertexReco = cms.PSet(
        finder = cms.string('avr'),
        minweight = cms.double(0.5),
        primcut = cms.double(1.8),
        seccut = cms.double(6.0),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001)
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    )
)


process.pfInclusiveSecondaryVertexFinderNegativeTagInfos = cms.EDProducer("CandSecondaryVertexProducer",
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    constraint = cms.string('BeamSpot'),
    extSVCollection = cms.InputTag("inclusiveCandidateNegativeSecondaryVertices"),
    extSVDeltaRToJet = cms.double(-0.3),
    minimumTrackWeight = cms.double(0.5),
    trackIPTagInfos = cms.InputTag("pfImpactParameterTagInfos"),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(1),
        ptMin = cms.double(1.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip3dSig'),
    useExternalSV = cms.bool(True),
    usePVError = cms.bool(True),
    vertexCuts = cms.PSet(
        distSig2dMax = cms.double(-2.0),
        distSig2dMin = cms.double(-99999.9),
        distSig3dMax = cms.double(99999.9),
        distSig3dMin = cms.double(-99999.9),
        distVal2dMax = cms.double(-0.01),
        distVal2dMin = cms.double(-2.5),
        distVal3dMax = cms.double(99999.9),
        distVal3dMin = cms.double(-99999.9),
        fracPV = cms.double(0.79),
        massMax = cms.double(6.5),
        maxDeltaRToJetAxis = cms.double(-0.5),
        minimumTrackWeight = cms.double(0.5),
        multiplicityMin = cms.uint32(2),
        useTrackWeights = cms.bool(True),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        )
    ),
    vertexReco = cms.PSet(
        finder = cms.string('avr'),
        minweight = cms.double(0.5),
        primcut = cms.double(1.8),
        seccut = cms.double(6.0),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001)
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    )
)


process.pfInclusiveSecondaryVertexFinderTagInfos = cms.EDProducer("CandSecondaryVertexProducer",
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    constraint = cms.string('BeamSpot'),
    extSVCollection = cms.InputTag("inclusiveCandidateSecondaryVertices"),
    extSVDeltaRToJet = cms.double(0.3),
    minimumTrackWeight = cms.double(0.5),
    trackIPTagInfos = cms.InputTag("pfImpactParameterTagInfos"),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(1),
        ptMin = cms.double(1.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip3dSig'),
    useExternalSV = cms.bool(True),
    usePVError = cms.bool(True),
    vertexCuts = cms.PSet(
        distSig2dMax = cms.double(99999.9),
        distSig2dMin = cms.double(2.0),
        distSig3dMax = cms.double(99999.9),
        distSig3dMin = cms.double(-99999.9),
        distVal2dMax = cms.double(2.5),
        distVal2dMin = cms.double(0.01),
        distVal3dMax = cms.double(99999.9),
        distVal3dMin = cms.double(-99999.9),
        fracPV = cms.double(0.79),
        massMax = cms.double(6.5),
        maxDeltaRToJetAxis = cms.double(0.4),
        minimumTrackWeight = cms.double(0.5),
        multiplicityMin = cms.uint32(2),
        useTrackWeights = cms.bool(True),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        )
    ),
    vertexReco = cms.PSet(
        finder = cms.string('avr'),
        minweight = cms.double(0.5),
        primcut = cms.double(1.8),
        seccut = cms.double(6.0),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001)
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    )
)


process.pfJetBProbabilityBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidateJetBProbabilityComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"))
)


process.pfJetProbabilityBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidateJetProbabilityComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"))
)


process.pfMassDecorrelatedDeepBoostedDiscriminatorsJetTags = cms.EDProducer("BTagProbabilityToDiscriminator",
    discriminators = cms.VPSet(
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probTbcq"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probTbqq"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDbb"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDcc"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDb"), 
                cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDc"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDothers")
            ),
            name = cms.string('TvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probTbcq"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probTbqq"))
        ), 
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probWcq"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probWqq"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDbb"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDcc"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDb"), 
                cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDc"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDothers")
            ),
            name = cms.string('WvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probWcq"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probWqq"))
        ), 
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probZbb"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probZcc"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probZqq"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDbb"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDcc"), 
                cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDb"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDc"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDothers")
            ),
            name = cms.string('ZvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probZbb"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probZcc"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probZqq"))
        ), 
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probZbb"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probHbb"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDbb"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDcc"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDb"), 
                cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDc"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDothers")
            ),
            name = cms.string('ZHbbvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probZbb"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probHbb"))
        ), 
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probZbb"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDbb"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDcc"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDb"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDc"), 
                cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDothers")
            ),
            name = cms.string('ZbbvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probZbb"))
        ), 
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probHbb"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDbb"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDcc"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDb"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDc"), 
                cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDothers")
            ),
            name = cms.string('HbbvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probHbb"))
        ), 
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probHqqqq"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDbb"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDcc"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDb"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDc"), 
                cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDothers")
            ),
            name = cms.string('H4qvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probHqqqq"))
        ), 
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probZcc"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probHcc"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDbb"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDcc"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDb"), 
                cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDc"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDothers")
            ),
            name = cms.string('ZHccvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probZcc"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probHcc"))
        ), 
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probZbb"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probHbb"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDbb"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDcc"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDb"), 
                cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDc"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDothers")
            ),
            name = cms.string('bbvsLight'),
            numerator = cms.VInputTag(cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probZbb"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probHbb"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDbb"))
        ), 
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probZcc"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probHcc"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDbb"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDcc"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDb"), 
                cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDc"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDothers")
            ),
            name = cms.string('ccvsLight'),
            numerator = cms.VInputTag(cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probZcc"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probHcc"), cms.InputTag("pfMassDecorrelatedDeepBoostedJetTags","probQCDcc"))
        )
    )
)


process.pfMassDecorrelatedDeepBoostedJetTags = cms.EDProducer("DeepBoostedJetONNXJetTagsProducer",
    debugMode = cms.untracked.bool(False),
    flav_names = cms.vstring(
        'probTbcq', 
        'probTbqq', 
        'probTbc', 
        'probTbq', 
        'probWcq', 
        'probWqq', 
        'probZbb', 
        'probZcc', 
        'probZqq', 
        'probHbb', 
        'probHcc', 
        'probHqqqq', 
        'probQCDbb', 
        'probQCDcc', 
        'probQCDb', 
        'probQCDc', 
        'probQCDothers'
    ),
    mightGet = cms.optional.untracked.vstring,
    model_path = cms.FileInPath('RecoBTag/Combined/data/DeepBoostedJet/V02/decorrelated/resnet.onnx'),
    preprocessParams = cms.PSet(
        input_names = cms.vstring(
            'pfcand', 
            'sv'
        ),
        pfcand = cms.PSet(
            input_shape = cms.vuint32(1, 36, 100, 1),
            var_infos = cms.PSet(
                pfcand_VTX_ass = cms.PSet(
                    median = cms.double(7.0),
                    norm_factor = cms.double(1.0)
                ),
                pfcand_abseta = cms.PSet(
                    median = cms.double(0.632648706436),
                    norm_factor = cms.double(1.59032225958)
                ),
                pfcand_btagEtaRel = cms.PSet(
                    median = cms.double(1.19703966379),
                    norm_factor = cms.double(0.521026991705)
                ),
                pfcand_btagJetDistVal = cms.PSet(
                    median = cms.double(-0.000215483247302),
                    norm_factor = cms.double(161.385119349)
                ),
                pfcand_btagPParRatio = cms.PSet(
                    median = cms.double(0.839023888111),
                    norm_factor = cms.double(1.19186117841)
                ),
                pfcand_btagPtRatio = cms.PSet(
                    median = cms.double(0.0173742230982),
                    norm_factor = cms.double(4.25351138308)
                ),
                pfcand_btagSip2dSig = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(1.41174531059)
                ),
                pfcand_btagSip2dVal = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(495.583709284)
                ),
                pfcand_btagSip3dSig = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(0.831133090749)
                ),
                pfcand_btagSip3dVal = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(233.664322627)
                ),
                pfcand_charge = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(1.0)
                ),
                pfcand_deltaR = cms.PSet(
                    median = cms.double(0.252654820681),
                    norm_factor = cms.double(3.50836328292)
                ),
                pfcand_detadeta = cms.PSet(
                    median = cms.double(1.15567200254e-08),
                    norm_factor = cms.double(1644010.14927)
                ),
                pfcand_dlambdadz = cms.PSet(
                    median = cms.double(-1.2810873784e-07),
                    norm_factor = cms.double(268715.13012)
                ),
                pfcand_dphidphi = cms.PSet(
                    median = cms.double(1.130510352e-08),
                    norm_factor = cms.double(796482.476472)
                ),
                pfcand_dphidxy = cms.PSet(
                    median = cms.double(-9.61654578191e-08),
                    norm_factor = cms.double(204149.346943)
                ),
                pfcand_dptdpt = cms.PSet(
                    median = cms.double(4.11880840545e-08),
                    norm_factor = cms.double(66429.1000843)
                ),
                pfcand_drminsv = cms.PSet(
                    median = cms.double(0.192182734609),
                    norm_factor = cms.double(2.38205282141)
                ),
                pfcand_drsubjet1 = cms.PSet(
                    median = cms.double(0.258241385221),
                    norm_factor = cms.double(2.92607580997)
                ),
                pfcand_drsubjet2 = cms.PSet(
                    median = cms.double(0.305164307356),
                    norm_factor = cms.double(2.88195895791)
                ),
                pfcand_dxy = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(415.415835966)
                ),
                pfcand_dxydxy = cms.PSet(
                    median = cms.double(9.32332170578e-07),
                    norm_factor = cms.double(45949.2394216)
                ),
                pfcand_dxydz = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(10598589.4298)
                ),
                pfcand_dxysig = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(1.54565964258)
                ),
                pfcand_dz = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(264.770519024)
                ),
                pfcand_dzdz = cms.PSet(
                    median = cms.double(1.58729170607e-06),
                    norm_factor = cms.double(36545.958354)
                ),
                pfcand_dzsig = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(1.23840120847)
                ),
                pfcand_erel_log = cms.PSet(
                    median = cms.double(-5.38221979141),
                    norm_factor = cms.double(0.556499386531)
                ),
                pfcand_etarel = cms.PSet(
                    median = cms.double(-0.00711047858931),
                    norm_factor = cms.double(4.2642743837)
                ),
                pfcand_lostInnerHits = cms.PSet(
                    median = cms.double(-1.0),
                    norm_factor = cms.double(1.0)
                ),
                pfcand_normchi2 = cms.PSet(
                    median = cms.double(2.0),
                    norm_factor = cms.double(0.00100300902708)
                ),
                pfcand_phirel = cms.PSet(
                    median = cms.double(-1.71389010575e-05),
                    norm_factor = cms.double(4.22784626632)
                ),
                pfcand_pt_log = cms.PSet(
                    median = cms.double(1.03476798534),
                    norm_factor = cms.double(0.542224410728)
                ),
                pfcand_ptrel_log = cms.PSet(
                    median = cms.double(-5.37407469749),
                    norm_factor = cms.double(0.554677114485)
                ),
                pfcand_puppiw = cms.PSet(
                    median = cms.double(1.0),
                    norm_factor = cms.double(255.000015199)
                ),
                pfcand_quality = cms.PSet(
                    median = cms.double(5.0),
                    norm_factor = cms.double(0.2)
                )
            ),
            var_length = cms.uint32(100),
            var_names = cms.vstring(
                'pfcand_pt_log', 
                'pfcand_ptrel_log', 
                'pfcand_erel_log', 
                'pfcand_phirel', 
                'pfcand_etarel', 
                'pfcand_deltaR', 
                'pfcand_abseta', 
                'pfcand_puppiw', 
                'pfcand_drminsv', 
                'pfcand_drsubjet1', 
                'pfcand_drsubjet2', 
                'pfcand_charge', 
                'pfcand_VTX_ass', 
                'pfcand_lostInnerHits', 
                'pfcand_normchi2', 
                'pfcand_quality', 
                'pfcand_dz', 
                'pfcand_dzsig', 
                'pfcand_dxy', 
                'pfcand_dxysig', 
                'pfcand_dptdpt', 
                'pfcand_detadeta', 
                'pfcand_dphidphi', 
                'pfcand_dxydxy', 
                'pfcand_dzdz', 
                'pfcand_dxydz', 
                'pfcand_dphidxy', 
                'pfcand_dlambdadz', 
                'pfcand_btagEtaRel', 
                'pfcand_btagPtRatio', 
                'pfcand_btagPParRatio', 
                'pfcand_btagSip2dVal', 
                'pfcand_btagSip2dSig', 
                'pfcand_btagSip3dVal', 
                'pfcand_btagSip3dSig', 
                'pfcand_btagJetDistVal'
            )
        ),
        sv = cms.PSet(
            input_shape = cms.vuint32(1, 15, 7, 1),
            var_infos = cms.PSet(
                sv_abseta = cms.PSet(
                    median = cms.double(0.616221785545),
                    norm_factor = cms.double(1.49676942133)
                ),
                sv_costhetasvpv = cms.PSet(
                    median = cms.double(0.999747157097),
                    norm_factor = cms.double(174.907183727)
                ),
                sv_d3d = cms.PSet(
                    median = cms.double(0.5242870152),
                    norm_factor = cms.double(0.255813267634)
                ),
                sv_d3dsig = cms.PSet(
                    median = cms.double(9.12465429306),
                    norm_factor = cms.double(0.0238374692882)
                ),
                sv_deltaR = cms.PSet(
                    median = cms.double(0.140969499946),
                    norm_factor = cms.double(4.30546783192)
                ),
                sv_dxy = cms.PSet(
                    median = cms.double(0.387232214212),
                    norm_factor = cms.double(0.360931771841)
                ),
                sv_dxysig = cms.PSet(
                    median = cms.double(9.11130714417),
                    norm_factor = cms.double(0.0238327380073)
                ),
                sv_erel_log = cms.PSet(
                    median = cms.double(-2.82667005062),
                    norm_factor = cms.double(0.704463981589)
                ),
                sv_etarel = cms.PSet(
                    median = cms.double(-0.0037129354896),
                    norm_factor = cms.double(6.99426943996)
                ),
                sv_mass = cms.PSet(
                    median = cms.double(1.34319722652),
                    norm_factor = cms.double(0.368495534421)
                ),
                sv_normchi2 = cms.PSet(
                    median = cms.double(0.819934427738),
                    norm_factor = cms.double(0.725797320076)
                ),
                sv_ntracks = cms.PSet(
                    median = cms.double(3.0),
                    norm_factor = cms.double(0.5)
                ),
                sv_phirel = cms.PSet(
                    median = cms.double(0.000521215377375),
                    norm_factor = cms.double(7.16761972364)
                ),
                sv_pt_log = cms.PSet(
                    median = cms.double(3.64881515503),
                    norm_factor = cms.double(0.725050067872)
                ),
                sv_ptrel_log = cms.PSet(
                    median = cms.double(-2.81496477127),
                    norm_factor = cms.double(0.701236308041)
                )
            ),
            var_length = cms.uint32(7),
            var_names = cms.vstring(
                'sv_pt_log', 
                'sv_ptrel_log', 
                'sv_erel_log', 
                'sv_phirel', 
                'sv_etarel', 
                'sv_deltaR', 
                'sv_abseta', 
                'sv_mass', 
                'sv_ntracks', 
                'sv_normchi2', 
                'sv_dxy', 
                'sv_dxysig', 
                'sv_d3d', 
                'sv_d3dsig', 
                'sv_costhetasvpv'
            )
        )
    ),
    src = cms.InputTag("pfDeepBoostedJetTagInfos")
)


process.pfMassDecorrelatedParticleNetDiscriminatorsJetTags = cms.EDProducer("BTagProbabilityToDiscriminator",
    discriminators = cms.VPSet(
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfMassDecorrelatedParticleNetJetTags","probXbb"), cms.InputTag("pfMassDecorrelatedParticleNetJetTags","probQCDbb"), cms.InputTag("pfMassDecorrelatedParticleNetJetTags","probQCDcc"), cms.InputTag("pfMassDecorrelatedParticleNetJetTags","probQCDb"), cms.InputTag("pfMassDecorrelatedParticleNetJetTags","probQCDc"), 
                cms.InputTag("pfMassDecorrelatedParticleNetJetTags","probQCDothers")
            ),
            name = cms.string('XbbvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfMassDecorrelatedParticleNetJetTags","probXbb"))
        ), 
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfMassDecorrelatedParticleNetJetTags","probXcc"), cms.InputTag("pfMassDecorrelatedParticleNetJetTags","probQCDbb"), cms.InputTag("pfMassDecorrelatedParticleNetJetTags","probQCDcc"), cms.InputTag("pfMassDecorrelatedParticleNetJetTags","probQCDb"), cms.InputTag("pfMassDecorrelatedParticleNetJetTags","probQCDc"), 
                cms.InputTag("pfMassDecorrelatedParticleNetJetTags","probQCDothers")
            ),
            name = cms.string('XccvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfMassDecorrelatedParticleNetJetTags","probXcc"))
        ), 
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfMassDecorrelatedParticleNetJetTags","probXqq"), cms.InputTag("pfMassDecorrelatedParticleNetJetTags","probQCDbb"), cms.InputTag("pfMassDecorrelatedParticleNetJetTags","probQCDcc"), cms.InputTag("pfMassDecorrelatedParticleNetJetTags","probQCDb"), cms.InputTag("pfMassDecorrelatedParticleNetJetTags","probQCDc"), 
                cms.InputTag("pfMassDecorrelatedParticleNetJetTags","probQCDothers")
            ),
            name = cms.string('XqqvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfMassDecorrelatedParticleNetJetTags","probXqq"))
        )
    )
)


process.pfMassDecorrelatedParticleNetJetTags = cms.EDProducer("BoostedJetMXNetJetTagsProducer",
    debugMode = cms.untracked.bool(False),
    flav_names = cms.vstring(
        'probXbb', 
        'probXcc', 
        'probXqq', 
        'probQCDbb', 
        'probQCDcc', 
        'probQCDb', 
        'probQCDc', 
        'probQCDothers'
    ),
    mightGet = cms.optional.untracked.vstring,
    model_path = cms.FileInPath('RecoBTag/Combined/data/ParticleNetAK8/MD-2prong/V00/ParticleNet-symbol.json'),
    param_path = cms.FileInPath('RecoBTag/Combined/data/ParticleNetAK8/MD-2prong/V00/ParticleNet-0000.params'),
    preprocessParams = cms.PSet(
        input_names = cms.vstring(
            'pf_points', 
            'pf_features', 
            'pf_mask', 
            'sv_points', 
            'sv_features', 
            'sv_mask'
        ),
        pf_features = cms.PSet(
            input_shape = cms.vuint32(1, 20, 100),
            var_infos = cms.PSet(
                pfcand_VTX_ass = cms.PSet(
                    median = cms.double(7.0),
                    norm_factor = cms.double(1.0)
                ),
                pfcand_abseta = cms.PSet(
                    median = cms.double(0.570207834244),
                    norm_factor = cms.double(1.65039794176)
                ),
                pfcand_btagEtaRel = cms.PSet(
                    median = cms.double(1.02164459229),
                    norm_factor = cms.double(0.450494647657)
                ),
                pfcand_btagJetDistVal = cms.PSet(
                    median = cms.double(-8.01788191893e-05),
                    norm_factor = cms.double(172.900234853)
                ),
                pfcand_btagPParRatio = cms.PSet(
                    median = cms.double(0.777632951736),
                    norm_factor = cms.double(1.28595373661)
                ),
                pfcand_btagPtRatio = cms.PSet(
                    median = cms.double(0.00793754169717),
                    norm_factor = cms.double(4.41778965372)
                ),
                pfcand_btagSip3dSig = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(0.871534329165)
                ),
                pfcand_btagSip3dVal = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(252.165554148)
                ),
                pfcand_charge = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(1.0)
                ),
                pfcand_dxy = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(473.799859238)
                ),
                pfcand_dxysig = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(1.66318902024)
                ),
                pfcand_dz = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(297.458232668)
                ),
                pfcand_dzsig = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(1.38690098449)
                ),
                pfcand_e_log_nopuppi = cms.PSet(
                    median = cms.double(1.42155307531),
                    norm_factor = cms.double(0.519927136489)
                ),
                pfcand_etarel = cms.PSet(
                    median = cms.double(-0.00481873401441),
                    norm_factor = cms.double(4.44798275517)
                ),
                pfcand_isChargedHad = cms.PSet(
                    median = cms.double(1.0),
                    norm_factor = cms.double(1.0)
                ),
                pfcand_isEl = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(1.0)
                ),
                pfcand_isGamma = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(1.0)
                ),
                pfcand_isMu = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(1.0)
                ),
                pfcand_isNeutralHad = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(1.0)
                ),
                pfcand_lostInnerHits = cms.PSet(
                    median = cms.double(-1.0),
                    norm_factor = cms.double(1.0)
                ),
                pfcand_normchi2 = cms.PSet(
                    median = cms.double(3.0),
                    norm_factor = cms.double(0.00100401606426)
                ),
                pfcand_phirel = cms.PSet(
                    median = cms.double(-0.000108399453893),
                    norm_factor = cms.double(4.39792304438)
                ),
                pfcand_pt_log_nopuppi = cms.PSet(
                    median = cms.double(1.12241530418),
                    norm_factor = cms.double(0.514354843556)
                ),
                pfcand_quality = cms.PSet(
                    median = cms.double(5.0),
                    norm_factor = cms.double(0.2)
                )
            ),
            var_length = cms.uint32(100),
            var_names = cms.vstring(
                'pfcand_pt_log_nopuppi', 
                'pfcand_e_log_nopuppi', 
                'pfcand_etarel', 
                'pfcand_phirel', 
                'pfcand_abseta', 
                'pfcand_charge', 
                'pfcand_VTX_ass', 
                'pfcand_lostInnerHits', 
                'pfcand_normchi2', 
                'pfcand_quality', 
                'pfcand_dz', 
                'pfcand_dzsig', 
                'pfcand_dxy', 
                'pfcand_dxysig', 
                'pfcand_btagEtaRel', 
                'pfcand_btagPtRatio', 
                'pfcand_btagPParRatio', 
                'pfcand_btagSip3dVal', 
                'pfcand_btagSip3dSig', 
                'pfcand_btagJetDistVal'
            )
        ),
        pf_mask = cms.PSet(
            input_shape = cms.vuint32(1, 1, 100),
            var_infos = cms.PSet(
                pfcand_mask = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(1.0)
                )
            ),
            var_length = cms.uint32(100),
            var_names = cms.vstring('pfcand_mask')
        ),
        pf_points = cms.PSet(
            input_shape = cms.vuint32(1, 2, 100),
            var_infos = cms.PSet(
                pfcand_etarel = cms.PSet(
                    median = cms.double(-0.00481873401441),
                    norm_factor = cms.double(4.44798275517)
                ),
                pfcand_phirel = cms.PSet(
                    median = cms.double(-0.000108399453893),
                    norm_factor = cms.double(4.39792304438)
                )
            ),
            var_length = cms.uint32(100),
            var_names = cms.vstring(
                'pfcand_etarel', 
                'pfcand_phirel'
            )
        ),
        sv_features = cms.PSet(
            input_shape = cms.vuint32(1, 12, 7),
            var_infos = cms.PSet(
                sv_abseta = cms.PSet(
                    median = cms.double(0.549196600914),
                    norm_factor = cms.double(1.59394768801)
                ),
                sv_costhetasvpv = cms.PSet(
                    median = cms.double(0.999762713909),
                    norm_factor = cms.double(183.233393766)
                ),
                sv_d3d = cms.PSet(
                    median = cms.double(0.551342129707),
                    norm_factor = cms.double(0.223128153806)
                ),
                sv_d3dsig = cms.PSet(
                    median = cms.double(8.35655975342),
                    norm_factor = cms.double(0.0238999954695)
                ),
                sv_dxy = cms.PSet(
                    median = cms.double(0.421502441168),
                    norm_factor = cms.double(0.312218277088)
                ),
                sv_dxysig = cms.PSet(
                    median = cms.double(8.34426879883),
                    norm_factor = cms.double(0.0239017055779)
                ),
                sv_etarel = cms.PSet(
                    median = cms.double(-0.00247404468246),
                    norm_factor = cms.double(8.44460188362)
                ),
                sv_mass = cms.PSet(
                    median = cms.double(1.3346953392),
                    norm_factor = cms.double(0.309230848837)
                ),
                sv_normchi2 = cms.PSet(
                    median = cms.double(0.806915462017),
                    norm_factor = cms.double(0.724496098658)
                ),
                sv_ntracks = cms.PSet(
                    median = cms.double(3.0),
                    norm_factor = cms.double(0.5)
                ),
                sv_phirel = cms.PSet(
                    median = cms.double(0.000502154347487),
                    norm_factor = cms.double(8.73243388771)
                ),
                sv_pt_log = cms.PSet(
                    median = cms.double(3.78325366974),
                    norm_factor = cms.double(0.692538144148)
                )
            ),
            var_length = cms.uint32(7),
            var_names = cms.vstring(
                'sv_pt_log', 
                'sv_mass', 
                'sv_phirel', 
                'sv_etarel', 
                'sv_abseta', 
                'sv_ntracks', 
                'sv_normchi2', 
                'sv_dxy', 
                'sv_dxysig', 
                'sv_d3d', 
                'sv_d3dsig', 
                'sv_costhetasvpv'
            )
        ),
        sv_mask = cms.PSet(
            input_shape = cms.vuint32(1, 1, 7),
            var_infos = cms.PSet(
                sv_mask = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(1.0)
                )
            ),
            var_length = cms.uint32(7),
            var_names = cms.vstring('sv_mask')
        ),
        sv_points = cms.PSet(
            input_shape = cms.vuint32(1, 2, 7),
            var_infos = cms.PSet(
                sv_etarel = cms.PSet(
                    median = cms.double(-0.00247404468246),
                    norm_factor = cms.double(8.44460188362)
                ),
                sv_phirel = cms.PSet(
                    median = cms.double(0.000502154347487),
                    norm_factor = cms.double(8.73243388771)
                )
            ),
            var_length = cms.uint32(7),
            var_names = cms.vstring(
                'sv_phirel', 
                'sv_etarel'
            )
        )
    ),
    src = cms.InputTag("pfParticleNetTagInfos")
)


process.pfMassIndependentDeepDoubleBvLJetTags = cms.EDProducer("DeepDoubleXONNXJetTagsProducer",
    flav_names = cms.vstring(
        'probQCD', 
        'probHbb'
    ),
    flavor = cms.string('BvL'),
    input_names = cms.vstring(
        'input_1', 
        'input_2', 
        'input_3'
    ),
    mightGet = cms.optional.untracked.vstring,
    model_path = cms.FileInPath('RecoBTag/Combined/data/DeepDoubleX/94X/V01/DDB_mass_independent.onnx'),
    output_names = cms.vstring(),
    src = cms.InputTag("pfDeepDoubleXTagInfos")
)


process.pfMassIndependentDeepDoubleCvBJetTags = cms.EDProducer("DeepDoubleXONNXJetTagsProducer",
    flav_names = cms.vstring(
        'probHbb', 
        'probHcc'
    ),
    flavor = cms.string('CvB'),
    input_names = cms.vstring(
        'input_1', 
        'input_2', 
        'input_3'
    ),
    mightGet = cms.optional.untracked.vstring,
    model_path = cms.FileInPath('RecoBTag/Combined/data/DeepDoubleX/94X/V01/DDCvB_mass_independent.onnx'),
    output_names = cms.vstring(),
    src = cms.InputTag("pfDeepDoubleXTagInfos")
)


process.pfMassIndependentDeepDoubleCvLJetTags = cms.EDProducer("DeepDoubleXONNXJetTagsProducer",
    flav_names = cms.vstring(
        'probQCD', 
        'probHcc'
    ),
    flavor = cms.string('CvL'),
    input_names = cms.vstring(
        'input_1', 
        'input_2', 
        'input_3'
    ),
    mightGet = cms.optional.untracked.vstring,
    model_path = cms.FileInPath('RecoBTag/Combined/data/DeepDoubleX/94X/V01/DDC_mass_independent.onnx'),
    output_names = cms.vstring(),
    src = cms.InputTag("pfDeepDoubleXTagInfos")
)


process.pfMet = cms.EDProducer("PFMETProducer",
    alias = cms.string('@module_label'),
    applyWeight = cms.bool(False),
    calculateSignificance = cms.bool(False),
    globalThreshold = cms.double(0),
    mightGet = cms.optional.untracked.vstring,
    parameters = cms.PSet(

    ),
    src = cms.InputTag("particleFlow"),
    srcJetResPhi = cms.optional.string,
    srcJetResPt = cms.optional.string,
    srcJetSF = cms.optional.string,
    srcJets = cms.optional.InputTag,
    srcLeptons = cms.optional.VInputTag,
    srcRho = cms.optional.InputTag,
    srcWeights = cms.InputTag("")
)


process.pfMetPuppi = cms.EDProducer("PFMETProducer",
    alias = cms.string('@module_label'),
    applyWeight = cms.bool(True),
    calculateSignificance = cms.bool(False),
    globalThreshold = cms.double(0),
    mightGet = cms.optional.untracked.vstring,
    parameters = cms.PSet(

    ),
    src = cms.InputTag("particleFlow"),
    srcJetResPhi = cms.optional.string,
    srcJetResPt = cms.optional.string,
    srcJetSF = cms.optional.string,
    srcJets = cms.optional.InputTag,
    srcLeptons = cms.optional.VInputTag,
    srcRho = cms.optional.InputTag,
    srcWeights = cms.InputTag("puppiNoLep")
)


process.pfNegativeCombinedCvsBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('charmTagsNegativeComputerCvsB'),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"), cms.InputTag("pfInclusiveSecondaryVertexFinderNegativeCvsLTagInfos"), cms.InputTag("softPFMuonsTagInfos"), cms.InputTag("softPFElectronsTagInfos"))
)


process.pfNegativeCombinedCvsLJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('charmTagsNegativeComputerCvsL'),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"), cms.InputTag("pfInclusiveSecondaryVertexFinderNegativeCvsLTagInfos"), cms.InputTag("softPFMuonsTagInfos"), cms.InputTag("softPFElectronsTagInfos"))
)


process.pfNegativeCombinedInclusiveSecondaryVertexV2BJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidateNegativeCombinedSecondaryVertexV2Computer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"), cms.InputTag("pfInclusiveSecondaryVertexFinderNegativeTagInfos"))
)


process.pfNegativeCombinedMVAV2BJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidateNegativeCombinedMVAV2Computer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"), cms.InputTag("pfSecondaryVertexNegativeTagInfos"), cms.InputTag("pfInclusiveSecondaryVertexFinderNegativeTagInfos"), cms.InputTag("softPFMuonsTagInfos"), cms.InputTag("softPFElectronsTagInfos"))
)


process.pfNegativeCombinedSecondaryVertexV2BJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidateNegativeCombinedSecondaryVertexV2Computer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"), cms.InputTag("pfSecondaryVertexNegativeTagInfos"))
)


process.pfNegativeDeepCMVAJetTags = cms.EDProducer("DeepFlavourJetTagsProducer",
    NNConfig = cms.FileInPath('RecoBTag/Combined/data/Model_DeepCMVA.json'),
    checkSVForDefaults = cms.bool(False),
    meanPadding = cms.bool(False),
    src = cms.InputTag("pfDeepCMVANegativeTagInfos"),
    toAdd = cms.PSet(

    )
)


process.pfNegativeDeepCSVJetTags = cms.EDProducer("DeepFlavourJetTagsProducer",
    NNConfig = cms.FileInPath('RecoBTag/Combined/data/DeepCSV_PhaseII.json'),
    checkSVForDefaults = cms.bool(True),
    meanPadding = cms.bool(True),
    src = cms.InputTag("pfDeepCSVNegativeTagInfos"),
    toAdd = cms.PSet(

    )
)


process.pfNegativeDeepFlavourJetTags = cms.EDProducer("DeepFlavourONNXJetTagsProducer",
    flav_names = cms.vstring(
        'probb', 
        'probbb', 
        'problepb', 
        'probc', 
        'probuds', 
        'probg'
    ),
    input_names = cms.vstring(
        'input_1', 
        'input_2', 
        'input_3', 
        'input_4', 
        'input_5'
    ),
    mightGet = cms.optional.untracked.vstring,
    model_path = cms.FileInPath('RecoBTag/Combined/data/DeepFlavourV03_10X_training/model.onnx'),
    output_names = cms.vstring('ID_pred/Softmax:0'),
    src = cms.InputTag("pfNegativeDeepFlavourTagInfos")
)


process.pfNegativeDeepFlavourTagInfos = cms.EDProducer("DeepFlavourTagInfoProducer",
    candidates = cms.InputTag("packedPFCandidates"),
    compute_probabilities = cms.bool(False),
    fallback_puppi_weight = cms.bool(False),
    fallback_vertex_association = cms.bool(False),
    flip = cms.bool(True),
    jet_radius = cms.double(0.4),
    jets = cms.InputTag("ak4PFJetsCHS"),
    max_jet_eta = cms.double(2.5),
    mightGet = cms.optional.untracked.vstring,
    min_candidate_pt = cms.double(0.95),
    min_jet_pt = cms.double(15),
    puppi_value_map = cms.InputTag("puppi"),
    run_deepVertex = cms.bool(False),
    secondary_vertices = cms.InputTag("inclusiveCandidateNegativeSecondaryVertices"),
    shallow_tag_infos = cms.InputTag("pfDeepCSVNegativeTagInfos"),
    vertex_associator = cms.InputTag("primaryVertexAssociation","original"),
    vertices = cms.InputTag("offlinePrimaryVertices")
)


process.pfNegativeOnlyJetBProbabilityBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidateNegativeOnlyJetBProbabilityComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"))
)


process.pfNegativeOnlyJetProbabilityBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidateNegativeOnlyJetProbabilityComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"))
)


process.pfNegativeSimpleInclusiveSecondaryVertexHighEffBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidateSimpleSecondaryVertex2TrkComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfInclusiveSecondaryVertexFinderNegativeTagInfos"))
)


process.pfNegativeSimpleInclusiveSecondaryVertexHighPurBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidateSimpleSecondaryVertex3TrkComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfInclusiveSecondaryVertexFinderNegativeTagInfos"))
)


process.pfNegativeSimpleSecondaryVertexHighEffBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidateSimpleSecondaryVertex2TrkComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfSecondaryVertexNegativeTagInfos"))
)


process.pfNegativeSimpleSecondaryVertexHighPurBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidateSimpleSecondaryVertex3TrkComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfSecondaryVertexNegativeTagInfos"))
)


process.pfNegativeTrackCountingHighEffBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidateNegativeTrackCounting3D2ndComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"))
)


process.pfNegativeTrackCountingHighPurBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidateNegativeTrackCounting3D3rdComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"))
)


process.pfNoPileUp = cms.EDProducer("TPPFCandidatesOnPFCandidates",
    bottomCollection = cms.InputTag("particleFlowTmpPtrs"),
    enable = cms.bool(True),
    name = cms.untracked.string('pileUpOnPFCandidates'),
    topCollection = cms.InputTag("pfPileUp"),
    verbose = cms.untracked.bool(False)
)


process.pfNoPileUpIso = cms.EDProducer("TPPFCandidatesOnPFCandidates",
    bottomCollection = cms.InputTag("particleFlowTmpPtrs"),
    enable = cms.bool(True),
    name = cms.untracked.string('pileUpOnPFCandidates'),
    topCollection = cms.InputTag("pfPileUpIso"),
    verbose = cms.untracked.bool(False)
)


process.pfNoPileUpJME = cms.EDProducer("TPPFCandidatesOnPFCandidates",
    bottomCollection = cms.InputTag("particleFlowPtrs"),
    enable = cms.bool(True),
    name = cms.untracked.string('pileUpOnPFCandidates'),
    topCollection = cms.InputTag("pfPileUpJME"),
    verbose = cms.untracked.bool(False)
)


process.pfNuclear = cms.EDProducer("PFNuclearProducer",
    likelihoodCut = cms.double(0.1),
    nuclearColList = cms.VInputTag(cms.InputTag("firstnuclearInteractionMaker"))
)


process.pfParticleNetDiscriminatorsJetTags = cms.EDProducer("BTagProbabilityToDiscriminator",
    discriminators = cms.VPSet(
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfParticleNetJetTags","probTbcq"), cms.InputTag("pfParticleNetJetTags","probTbqq"), cms.InputTag("pfParticleNetJetTags","probQCDbb"), cms.InputTag("pfParticleNetJetTags","probQCDcc"), cms.InputTag("pfParticleNetJetTags","probQCDb"), 
                cms.InputTag("pfParticleNetJetTags","probQCDc"), cms.InputTag("pfParticleNetJetTags","probQCDothers")
            ),
            name = cms.string('TvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfParticleNetJetTags","probTbcq"), cms.InputTag("pfParticleNetJetTags","probTbqq"))
        ), 
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfParticleNetJetTags","probWcq"), cms.InputTag("pfParticleNetJetTags","probWqq"), cms.InputTag("pfParticleNetJetTags","probQCDbb"), cms.InputTag("pfParticleNetJetTags","probQCDcc"), cms.InputTag("pfParticleNetJetTags","probQCDb"), 
                cms.InputTag("pfParticleNetJetTags","probQCDc"), cms.InputTag("pfParticleNetJetTags","probQCDothers")
            ),
            name = cms.string('WvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfParticleNetJetTags","probWcq"), cms.InputTag("pfParticleNetJetTags","probWqq"))
        ), 
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfParticleNetJetTags","probZbb"), cms.InputTag("pfParticleNetJetTags","probZcc"), cms.InputTag("pfParticleNetJetTags","probZqq"), cms.InputTag("pfParticleNetJetTags","probQCDbb"), cms.InputTag("pfParticleNetJetTags","probQCDcc"), 
                cms.InputTag("pfParticleNetJetTags","probQCDb"), cms.InputTag("pfParticleNetJetTags","probQCDc"), cms.InputTag("pfParticleNetJetTags","probQCDothers")
            ),
            name = cms.string('ZvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfParticleNetJetTags","probZbb"), cms.InputTag("pfParticleNetJetTags","probZcc"), cms.InputTag("pfParticleNetJetTags","probZqq"))
        ), 
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfParticleNetJetTags","probZbb"), cms.InputTag("pfParticleNetJetTags","probQCDbb"), cms.InputTag("pfParticleNetJetTags","probQCDcc"), cms.InputTag("pfParticleNetJetTags","probQCDb"), cms.InputTag("pfParticleNetJetTags","probQCDc"), 
                cms.InputTag("pfParticleNetJetTags","probQCDothers")
            ),
            name = cms.string('ZbbvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfParticleNetJetTags","probZbb"))
        ), 
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfParticleNetJetTags","probHbb"), cms.InputTag("pfParticleNetJetTags","probQCDbb"), cms.InputTag("pfParticleNetJetTags","probQCDcc"), cms.InputTag("pfParticleNetJetTags","probQCDb"), cms.InputTag("pfParticleNetJetTags","probQCDc"), 
                cms.InputTag("pfParticleNetJetTags","probQCDothers")
            ),
            name = cms.string('HbbvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfParticleNetJetTags","probHbb"))
        ), 
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfParticleNetJetTags","probHqqqq"), cms.InputTag("pfParticleNetJetTags","probQCDbb"), cms.InputTag("pfParticleNetJetTags","probQCDcc"), cms.InputTag("pfParticleNetJetTags","probQCDb"), cms.InputTag("pfParticleNetJetTags","probQCDc"), 
                cms.InputTag("pfParticleNetJetTags","probQCDothers")
            ),
            name = cms.string('H4qvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfParticleNetJetTags","probHqqqq"))
        )
    )
)


process.pfParticleNetJetTags = cms.EDProducer("BoostedJetMXNetJetTagsProducer",
    debugMode = cms.untracked.bool(False),
    flav_names = cms.vstring(
        'probTbcq', 
        'probTbqq', 
        'probTbc', 
        'probTbq', 
        'probTbel', 
        'probTbmu', 
        'probTbta', 
        'probWcq', 
        'probWqq', 
        'probZbb', 
        'probZcc', 
        'probZqq', 
        'probHbb', 
        'probHcc', 
        'probHqqqq', 
        'probQCDbb', 
        'probQCDcc', 
        'probQCDb', 
        'probQCDc', 
        'probQCDothers'
    ),
    mightGet = cms.optional.untracked.vstring,
    model_path = cms.FileInPath('RecoBTag/Combined/data/ParticleNetAK8/General/V00/ParticleNet-symbol.json'),
    param_path = cms.FileInPath('RecoBTag/Combined/data/ParticleNetAK8/General/V00/ParticleNet-0000.params'),
    preprocessParams = cms.PSet(
        input_names = cms.vstring(
            'pf_points', 
            'pf_features', 
            'pf_mask', 
            'sv_points', 
            'sv_features', 
            'sv_mask'
        ),
        pf_features = cms.PSet(
            input_shape = cms.vuint32(1, 25, 100),
            var_infos = cms.PSet(
                pfcand_VTX_ass = cms.PSet(
                    median = cms.double(7.0),
                    norm_factor = cms.double(1.0)
                ),
                pfcand_abseta = cms.PSet(
                    median = cms.double(0.570207834244),
                    norm_factor = cms.double(1.65039794176)
                ),
                pfcand_btagEtaRel = cms.PSet(
                    median = cms.double(1.02164459229),
                    norm_factor = cms.double(0.450494647657)
                ),
                pfcand_btagJetDistVal = cms.PSet(
                    median = cms.double(-8.01788191893e-05),
                    norm_factor = cms.double(172.900234853)
                ),
                pfcand_btagPParRatio = cms.PSet(
                    median = cms.double(0.777632951736),
                    norm_factor = cms.double(1.28595373661)
                ),
                pfcand_btagPtRatio = cms.PSet(
                    median = cms.double(0.00793754169717),
                    norm_factor = cms.double(4.41778965372)
                ),
                pfcand_btagSip3dSig = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(0.871534329165)
                ),
                pfcand_btagSip3dVal = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(252.165554148)
                ),
                pfcand_charge = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(1.0)
                ),
                pfcand_dxy = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(473.799859238)
                ),
                pfcand_dxysig = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(1.66318902024)
                ),
                pfcand_dz = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(297.458232668)
                ),
                pfcand_dzsig = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(1.38690098449)
                ),
                pfcand_e_log_nopuppi = cms.PSet(
                    median = cms.double(1.42155307531),
                    norm_factor = cms.double(0.519927136489)
                ),
                pfcand_etarel = cms.PSet(
                    median = cms.double(-0.00481873401441),
                    norm_factor = cms.double(4.44798275517)
                ),
                pfcand_isChargedHad = cms.PSet(
                    median = cms.double(1.0),
                    norm_factor = cms.double(1.0)
                ),
                pfcand_isEl = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(1.0)
                ),
                pfcand_isGamma = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(1.0)
                ),
                pfcand_isMu = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(1.0)
                ),
                pfcand_isNeutralHad = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(1.0)
                ),
                pfcand_lostInnerHits = cms.PSet(
                    median = cms.double(-1.0),
                    norm_factor = cms.double(1.0)
                ),
                pfcand_normchi2 = cms.PSet(
                    median = cms.double(3.0),
                    norm_factor = cms.double(0.00100401606426)
                ),
                pfcand_phirel = cms.PSet(
                    median = cms.double(-0.000108399453893),
                    norm_factor = cms.double(4.39792304438)
                ),
                pfcand_pt_log_nopuppi = cms.PSet(
                    median = cms.double(1.12241530418),
                    norm_factor = cms.double(0.514354843556)
                ),
                pfcand_quality = cms.PSet(
                    median = cms.double(5.0),
                    norm_factor = cms.double(0.2)
                )
            ),
            var_length = cms.uint32(100),
            var_names = cms.vstring(
                'pfcand_pt_log_nopuppi', 
                'pfcand_e_log_nopuppi', 
                'pfcand_etarel', 
                'pfcand_phirel', 
                'pfcand_abseta', 
                'pfcand_charge', 
                'pfcand_isMu', 
                'pfcand_isEl', 
                'pfcand_isChargedHad', 
                'pfcand_isGamma', 
                'pfcand_isNeutralHad', 
                'pfcand_VTX_ass', 
                'pfcand_lostInnerHits', 
                'pfcand_normchi2', 
                'pfcand_quality', 
                'pfcand_dz', 
                'pfcand_dzsig', 
                'pfcand_dxy', 
                'pfcand_dxysig', 
                'pfcand_btagEtaRel', 
                'pfcand_btagPtRatio', 
                'pfcand_btagPParRatio', 
                'pfcand_btagSip3dVal', 
                'pfcand_btagSip3dSig', 
                'pfcand_btagJetDistVal'
            )
        ),
        pf_mask = cms.PSet(
            input_shape = cms.vuint32(1, 1, 100),
            var_infos = cms.PSet(
                pfcand_mask = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(1.0)
                )
            ),
            var_length = cms.uint32(100),
            var_names = cms.vstring('pfcand_mask')
        ),
        pf_points = cms.PSet(
            input_shape = cms.vuint32(1, 2, 100),
            var_infos = cms.PSet(
                pfcand_etarel = cms.PSet(
                    median = cms.double(-0.00481873401441),
                    norm_factor = cms.double(4.44798275517)
                ),
                pfcand_phirel = cms.PSet(
                    median = cms.double(-0.000108399453893),
                    norm_factor = cms.double(4.39792304438)
                )
            ),
            var_length = cms.uint32(100),
            var_names = cms.vstring(
                'pfcand_etarel', 
                'pfcand_phirel'
            )
        ),
        sv_features = cms.PSet(
            input_shape = cms.vuint32(1, 12, 7),
            var_infos = cms.PSet(
                sv_abseta = cms.PSet(
                    median = cms.double(0.549196600914),
                    norm_factor = cms.double(1.59394768801)
                ),
                sv_costhetasvpv = cms.PSet(
                    median = cms.double(0.999762713909),
                    norm_factor = cms.double(183.233393766)
                ),
                sv_d3d = cms.PSet(
                    median = cms.double(0.551342129707),
                    norm_factor = cms.double(0.223128153806)
                ),
                sv_d3dsig = cms.PSet(
                    median = cms.double(8.35655975342),
                    norm_factor = cms.double(0.0238999954695)
                ),
                sv_dxy = cms.PSet(
                    median = cms.double(0.421502441168),
                    norm_factor = cms.double(0.312218277088)
                ),
                sv_dxysig = cms.PSet(
                    median = cms.double(8.34426879883),
                    norm_factor = cms.double(0.0239017055779)
                ),
                sv_etarel = cms.PSet(
                    median = cms.double(-0.00247404468246),
                    norm_factor = cms.double(8.44460188362)
                ),
                sv_mass = cms.PSet(
                    median = cms.double(1.3346953392),
                    norm_factor = cms.double(0.309230848837)
                ),
                sv_normchi2 = cms.PSet(
                    median = cms.double(0.806915462017),
                    norm_factor = cms.double(0.724496098658)
                ),
                sv_ntracks = cms.PSet(
                    median = cms.double(3.0),
                    norm_factor = cms.double(0.5)
                ),
                sv_phirel = cms.PSet(
                    median = cms.double(0.000502154347487),
                    norm_factor = cms.double(8.73243388771)
                ),
                sv_pt_log = cms.PSet(
                    median = cms.double(3.78325366974),
                    norm_factor = cms.double(0.692538144148)
                )
            ),
            var_length = cms.uint32(7),
            var_names = cms.vstring(
                'sv_pt_log', 
                'sv_mass', 
                'sv_phirel', 
                'sv_etarel', 
                'sv_abseta', 
                'sv_ntracks', 
                'sv_normchi2', 
                'sv_dxy', 
                'sv_dxysig', 
                'sv_d3d', 
                'sv_d3dsig', 
                'sv_costhetasvpv'
            )
        ),
        sv_mask = cms.PSet(
            input_shape = cms.vuint32(1, 1, 7),
            var_infos = cms.PSet(
                sv_mask = cms.PSet(
                    median = cms.double(0.0),
                    norm_factor = cms.double(1.0)
                )
            ),
            var_length = cms.uint32(7),
            var_names = cms.vstring('sv_mask')
        ),
        sv_points = cms.PSet(
            input_shape = cms.vuint32(1, 2, 7),
            var_infos = cms.PSet(
                sv_etarel = cms.PSet(
                    median = cms.double(-0.00247404468246),
                    norm_factor = cms.double(8.44460188362)
                ),
                sv_phirel = cms.PSet(
                    median = cms.double(0.000502154347487),
                    norm_factor = cms.double(8.73243388771)
                )
            ),
            var_length = cms.uint32(7),
            var_names = cms.vstring(
                'sv_phirel', 
                'sv_etarel'
            )
        )
    ),
    src = cms.InputTag("pfParticleNetTagInfos")
)


process.pfParticleNetTagInfos = cms.EDProducer("DeepBoostedJetTagInfoProducer",
    jet_radius = cms.double(0.8),
    jets = cms.InputTag("ak8PFJetsPuppi"),
    mightGet = cms.optional.untracked.vstring,
    min_jet_pt = cms.double(150),
    min_pt_for_track_properties = cms.double(-1),
    pf_candidates = cms.InputTag("particleFlow"),
    puppi_value_map = cms.InputTag("puppi"),
    secondary_vertices = cms.InputTag("inclusiveCandidateSecondaryVertices"),
    use_puppiP4 = cms.bool(False),
    vertex_associator = cms.InputTag("primaryVertexAssociation","original"),
    vertices = cms.InputTag("offlinePrimaryVertices")
)


process.pfPhotonInterestingEcalDetIdEB = cms.EDProducer("InterestingDetIdCollectionProducer",
    basicClustersLabel = cms.InputTag("pfPhotonTranslator","pfphot"),
    etaSize = cms.int32(5),
    interestingDetIdCollection = cms.string(''),
    keepNextToBoundary = cms.bool(True),
    keepNextToDead = cms.bool(True),
    phiSize = cms.int32(5),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    severityLevel = cms.int32(1)
)


process.pfPhotonInterestingEcalDetIdEE = cms.EDProducer("InterestingDetIdCollectionProducer",
    basicClustersLabel = cms.InputTag("pfPhotonTranslator","pfphot"),
    etaSize = cms.int32(5),
    interestingDetIdCollection = cms.string(''),
    keepNextToBoundary = cms.bool(True),
    keepNextToDead = cms.bool(True),
    phiSize = cms.int32(5),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    severityLevel = cms.int32(1)
)


process.pfPhotonTranslator = cms.EDProducer("PFPhotonTranslator",
    EGPhotons = cms.string('photons'),
    PFBasicClusters = cms.string('pfphot'),
    PFCandidate = cms.InputTag("pfSelectedPhotons"),
    PFConversionCollection = cms.string('pfphot'),
    PFPhotonCores = cms.string('pfphot'),
    PFPhotons = cms.string('pfphot'),
    PFPreshowerClusters = cms.string('pfphot'),
    PFSuperClusters = cms.string('pfphot'),
    barrelEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    endcapEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    hOverEConeSize = cms.double(0.15),
    hcalTowers = cms.InputTag("towerMaker"),
    isolationValues = cms.PSet(
        pfChargedHadrons = cms.InputTag("phPFIsoValueCharged04PFId"),
        pfNeutralHadrons = cms.InputTag("phPFIsoValueNeutral04PFId"),
        pfPhotons = cms.InputTag("phPFIsoValueGamma04PFId")
    ),
    primaryVertexProducer = cms.string('offlinePrimaryVerticesWithBS')
)


process.pfPileUp = cms.EDProducer("PFPileUp",
    Enable = cms.bool(True),
    PFCandidates = cms.InputTag("particleFlowTmpPtrs"),
    Vertices = cms.InputTag("offlinePrimaryVertices"),
    checkClosestZVertex = cms.bool(True),
    verbose = cms.untracked.bool(False)
)


process.pfPileUpIso = cms.EDProducer("PFPileUp",
    Enable = cms.bool(True),
    PFCandidates = cms.InputTag("particleFlowTmpPtrs"),
    Vertices = cms.InputTag("offlinePrimaryVertices"),
    checkClosestZVertex = cms.bool(True),
    verbose = cms.untracked.bool(False)
)


process.pfPileUpJME = cms.EDProducer("PFPileUp",
    Enable = cms.bool(True),
    PFCandidates = cms.InputTag("particleFlowPtrs"),
    Vertices = cms.InputTag("goodOfflinePrimaryVertices"),
    checkClosestZVertex = cms.bool(False),
    verbose = cms.untracked.bool(False)
)


process.pfPositiveCombinedCvsBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('charmTagsPositiveComputerCvsB'),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"), cms.InputTag("pfInclusiveSecondaryVertexFinderCvsLTagInfos"), cms.InputTag("softPFMuonsTagInfos"), cms.InputTag("softPFElectronsTagInfos"))
)


process.pfPositiveCombinedCvsLJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('charmTagsPositiveComputerCvsL'),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"), cms.InputTag("pfInclusiveSecondaryVertexFinderCvsLTagInfos"), cms.InputTag("softPFMuonsTagInfos"), cms.InputTag("softPFElectronsTagInfos"))
)


process.pfPositiveCombinedInclusiveSecondaryVertexV2BJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidatePositiveCombinedSecondaryVertexV2Computer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"), cms.InputTag("pfInclusiveSecondaryVertexFinderTagInfos"))
)


process.pfPositiveCombinedMVAV2BJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidatePositiveCombinedMVAV2Computer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"), cms.InputTag("pfSecondaryVertexTagInfos"), cms.InputTag("pfInclusiveSecondaryVertexFinderTagInfos"), cms.InputTag("softPFMuonsTagInfos"), cms.InputTag("softPFElectronsTagInfos"))
)


process.pfPositiveCombinedSecondaryVertexV2BJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidatePositiveCombinedSecondaryVertexV2Computer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"), cms.InputTag("pfSecondaryVertexTagInfos"))
)


process.pfPositiveDeepCMVAJetTags = cms.EDProducer("DeepFlavourJetTagsProducer",
    NNConfig = cms.FileInPath('RecoBTag/Combined/data/Model_DeepCMVA.json'),
    checkSVForDefaults = cms.bool(False),
    meanPadding = cms.bool(False),
    src = cms.InputTag("pfDeepCMVAPositiveTagInfos"),
    toAdd = cms.PSet(

    )
)


process.pfPositiveDeepCSVJetTags = cms.EDProducer("DeepFlavourJetTagsProducer",
    NNConfig = cms.FileInPath('RecoBTag/Combined/data/DeepCSV_PhaseII.json'),
    checkSVForDefaults = cms.bool(True),
    meanPadding = cms.bool(True),
    src = cms.InputTag("pfDeepCSVPositiveTagInfos"),
    toAdd = cms.PSet(

    )
)


process.pfPositiveOnlyJetBProbabilityBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidatePositiveOnlyJetBProbabilityComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"))
)


process.pfPositiveOnlyJetProbabilityBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidatePositiveOnlyJetProbabilityComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"))
)


process.pfRecoTauDiscriminationAgainstElectron = cms.EDProducer("PFRecoTauDiscriminationAgainstElectron",
    ApplyCut_BremCombined = cms.bool(False),
    ApplyCut_BremsRecoveryEOverPLead = cms.bool(False),
    ApplyCut_EOverPLead = cms.bool(False),
    ApplyCut_EcalCrackCut = cms.bool(False),
    ApplyCut_ElectronPreID = cms.bool(False),
    ApplyCut_ElectronPreID_2D = cms.bool(False),
    ApplyCut_EmFraction = cms.bool(False),
    ApplyCut_Hcal3x3OverPLead = cms.bool(False),
    ApplyCut_HcalMaxOverPLead = cms.bool(False),
    ApplyCut_HcalTotOverPLead = cms.bool(False),
    ApplyCut_PFElectronMVA = cms.bool(True),
    BremCombined_Fraction = cms.double(0.99),
    BremCombined_HOP = cms.double(0.1),
    BremCombined_Mass = cms.double(0.55),
    BremCombined_StripSize = cms.double(0.03),
    BremsRecoveryEOverPLead_maxValue = cms.double(1.8),
    BremsRecoveryEOverPLead_minValue = cms.double(0.8),
    EOverPLead_maxValue = cms.double(1.8),
    EOverPLead_minValue = cms.double(0.8),
    ElecPreID0_EOverPLead_maxValue = cms.double(0.95),
    ElecPreID0_HOverPLead_minValue = cms.double(0.05),
    ElecPreID1_EOverPLead_maxValue = cms.double(0.8),
    ElecPreID1_HOverPLead_minValue = cms.double(0.15),
    EmFraction_maxValue = cms.double(0.9),
    Hcal3x3OverPLead_minValue = cms.double(0.1),
    HcalMaxOverPLead_minValue = cms.double(0.1),
    HcalTotOverPLead_minValue = cms.double(0.1),
    PFElectronMVA_maxValue = cms.double(-0.1),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding"),
            cut = cms.double(0.5)
        )
    )
)


process.pfRecoTauDiscriminationAgainstElectronDeadECAL = cms.EDProducer("PFRecoTauDiscriminationAgainstElectronDeadECAL",
    PFTauProducer = cms.InputTag("fixme"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('AND'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("fixme"),
            cut = cms.double(0)
        ),
        leadTrack = cms.PSet(
            Producer = cms.InputTag("fixme"),
            cut = cms.double(0)
        )
    ),
    dR = cms.double(0.08),
    extrapolateToECalEntrance = cms.bool(True),
    mightGet = cms.optional.untracked.vstring,
    minStatus = cms.uint32(12),
    verbosity = cms.int32(0)
)


process.pfRecoTauDiscriminationAgainstElectronMVA6 = cms.EDProducer("PFRecoTauDiscriminationAgainstElectronMVA6",
    PFTauProducer = cms.InputTag("pfTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding"),
            cut = cms.double(0.5)
        )
    ),
    loadMVAfromDB = cms.bool(True),
    method = cms.string('BDTG'),
    minMVANoEleMatchWOgWOgsfBL = cms.double(0.0),
    minMVANoEleMatchWOgWOgsfEC = cms.double(0.0),
    minMVANoEleMatchWgWOgsfBL = cms.double(0.0),
    minMVANoEleMatchWgWOgsfEC = cms.double(0.0),
    minMVAWOgWgsfBL = cms.double(0.0),
    minMVAWOgWgsfEC = cms.double(0.0),
    minMVAWgWgsfBL = cms.double(0.0),
    minMVAWgWgsfEC = cms.double(0.0),
    mvaName_NoEleMatch_wGwoGSF_BL = cms.string('gbr_NoEleMatch_wGwoGSF_BL'),
    mvaName_NoEleMatch_wGwoGSF_EC = cms.string('gbr_NoEleMatch_wGwoGSF_EC'),
    mvaName_NoEleMatch_woGwoGSF_BL = cms.string('gbr_NoEleMatch_woGwoGSF_BL'),
    mvaName_NoEleMatch_woGwoGSF_EC = cms.string('gbr_NoEleMatch_woGwoGSF_EC'),
    mvaName_wGwGSF_BL = cms.string('gbr_wGwGSF_BL'),
    mvaName_wGwGSF_EC = cms.string('gbr_wGwGSF_EC'),
    mvaName_woGwGSF_BL = cms.string('gbr_woGwGSF_BL'),
    mvaName_woGwGSF_EC = cms.string('gbr_woGwGSF_EC'),
    returnMVA = cms.bool(True),
    srcGsfElectrons = cms.InputTag("gedGsfElectrons"),
    usePhiAtEcalEntranceExtrapolation = cms.bool(False),
    verbosity = cms.int32(0),
    vetoEcalCracks = cms.bool(True)
)


process.pfRecoTauDiscriminationAgainstMuon = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon",
    HoPMin = cms.double(0.2),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding"),
            cut = cms.double(0.5)
        )
    ),
    a = cms.double(0.5),
    b = cms.double(0.5),
    c = cms.double(0.0),
    checkNumMatches = cms.bool(False),
    discriminatorOption = cms.string('noSegMatch'),
    maxNumberOfMatches = cms.int32(0)
)


process.pfRecoTauDiscriminationAgainstMuon2Container = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon2Container",
    IDWPdefinitions = cms.VPSet(cms.PSet(
        HoPMin = cms.double(0.2),
        IDname = cms.string('pfRecoTauDiscriminationAgainstMuon2Container'),
        discriminatorOption = cms.string('loose'),
        doCaloMuonVeto = cms.bool(False),
        maxNumberOfHitsLast2Stations = cms.int32(0),
        maxNumberOfMatches = cms.int32(0)
    )),
    IDdefinitions = cms.VPSet(),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding"),
            cut = cms.double(0.5)
        )
    ),
    dRmuonMatch = cms.double(0.3),
    dRmuonMatchLimitedToJetArea = cms.bool(False),
    maskHitsCSC = cms.vint32(0, 0, 0, 0),
    maskHitsDT = cms.vint32(0, 0, 0, 0),
    maskHitsRPC = cms.vint32(0, 0, 0, 0),
    maskMatchesCSC = cms.vint32(1, 0, 0, 0),
    maskMatchesDT = cms.vint32(0, 0, 0, 0),
    maskMatchesRPC = cms.vint32(0, 0, 0, 0),
    mightGet = cms.optional.untracked.vstring,
    minPtMatchedMuon = cms.double(5),
    srcMuons = cms.InputTag("muons"),
    verbosity = cms.int32(0)
)


process.pfRecoTauDiscriminationAgainstMuonMVA = cms.EDProducer("PFRecoTauDiscriminationAgainstMuonMVA",
    PFTauProducer = cms.InputTag("pfTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding"),
            cut = cms.double(0.5)
        )
    ),
    dRmuonMatch = cms.double(0.3),
    inputFileName = cms.FileInPath('RecoTauTag/RecoTau/data/emptyMVAinputFile'),
    loadMVAfromDB = cms.bool(True),
    mvaMin = cms.double(0.0),
    mvaName = cms.string('againstMuonMVA'),
    returnMVA = cms.bool(True),
    srcMuons = cms.InputTag("muons"),
    verbosity = cms.int32(0)
)


process.pfRecoTauDiscriminationByIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolationContainer",
    IDWPdefinitions = cms.VPSet(),
    IDdefinitions = cms.VPSet(),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding"),
            cut = cms.double(0.5)
        )
    ),
    WeightECALIsolation = cms.double(1.0),
    applyFootprintCorrection = cms.bool(False),
    applyRhoCorrection = cms.bool(False),
    customOuterCone = cms.double(-1.0),
    deltaBetaFactor = cms.string('0.38'),
    deltaBetaPUTrackPtCutOverride = cms.bool(False),
    deltaBetaPUTrackPtCutOverride_val = cms.double(-1.5),
    footprintCorrections = cms.VPSet(
        cms.PSet(
            offset = cms.string('0.0'),
            selection = cms.string('decayMode() = 0')
        ), 
        cms.PSet(
            offset = cms.string('0.0'),
            selection = cms.string('decayMode() = 1 || decayMode() = 2')
        ), 
        cms.PSet(
            offset = cms.string('2.7'),
            selection = cms.string('decayMode() = 5')
        ), 
        cms.PSet(
            offset = cms.string('0.0'),
            selection = cms.string('decayMode() = 6')
        ), 
        cms.PSet(
            offset = cms.string('max(2.0, 0.22*pt() - 2.0)'),
            selection = cms.string('decayMode() = 10')
        )
    ),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    mightGet = cms.optional.untracked.vstring,
    minTauPtForNoIso = cms.double(-99.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.15),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.05),
            minGammaEt = cms.double(1.5),
            minTrackHits = cms.uint32(8),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(1.0),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        leadingTrkOrPFCandOption = cms.string('leadPFCand'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        pvFindingAlgo = cms.string('closestInDeltaZ'),
        recoverLeadingTrk = cms.bool(False),
        signalQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.4),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(1.0),
            minNeutralHadronEt = cms.double(30.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        vertexTrackFiltering = cms.bool(False),
        vxAssocQualityCuts = cms.PSet(
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(1.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        )
    ),
    rhoConeSize = cms.double(0.5),
    rhoProducer = cms.InputTag("fixedGridRhoFastjetAll"),
    rhoUEOffsetCorrection = cms.double(1.0),
    verbosity = cms.int32(0),
    vertexSrc = cms.InputTag("offlinePrimaryVertices")
)


process.pfRecoTauDiscriminationByIsolationContainer = cms.EDProducer("PFRecoTauDiscriminationByIsolationContainer",
    IDWPdefinitions = cms.VPSet(),
    IDdefinitions = cms.VPSet(),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        ),
        leadTrack = cms.PSet(
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding"),
            cut = cms.double(0.5)
        ),
        preIso = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByLooseChargedIsolation"),
            cut = cms.double(0.5)
        )
    ),
    WeightECALIsolation = cms.double(1),
    applyFootprintCorrection = cms.bool(False),
    applyRhoCorrection = cms.bool(False),
    customOuterCone = cms.double(-1),
    deltaBetaFactor = cms.string('0.38'),
    deltaBetaPUTrackPtCutOverride = cms.bool(False),
    deltaBetaPUTrackPtCutOverride_val = cms.double(-1.5),
    footprintCorrections = cms.VPSet(),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    mightGet = cms.optional.untracked.vstring,
    minTauPtForNoIso = cms.double(-99),
    particleFlowSrc = cms.InputTag("particleFlow"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.2),
            maxTrackChi2 = cms.double(100),
            maxTransverseImpactParameter = cms.double(0.03),
            minGammaEt = cms.double(1.5),
            minTrackHits = cms.uint32(8),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(1),
            minTrackVertexWeight = cms.double(-1),
            useTracksInsteadOfPFHadrons = cms.optional.bool
        ),
        leadingTrkOrPFCandOption = cms.string('leadPFCand'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        pvFindingAlgo = cms.string('closestInDeltaZ'),
        recoverLeadingTrk = cms.bool(False),
        signalQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.4),
            maxTrackChi2 = cms.double(100),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(1),
            minNeutralHadronEt = cms.double(30),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1),
            useTracksInsteadOfPFHadrons = cms.optional.bool
        ),
        vertexTrackFiltering = cms.bool(False),
        vxAssocQualityCuts = cms.PSet(
            maxTrackChi2 = cms.double(100),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(1),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1),
            useTracksInsteadOfPFHadrons = cms.optional.bool
        )
    ),
    rhoConeSize = cms.double(0.5),
    rhoProducer = cms.InputTag("fixedGridRhoFastjetAll"),
    rhoUEOffsetCorrection = cms.double(1),
    verbosity = cms.int32(0),
    vertexSrc = cms.InputTag("offlinePrimaryVertices")
)


process.pfRecoTauDiscriminationByLeadingObjectPtCut = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(5.0),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    UseOnlyChargedHadrons = cms.bool(False)
)


process.pfRecoTauDiscriminationByLeadingTrackFinding = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(0.0),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    UseOnlyChargedHadrons = cms.bool(True)
)


process.pfRecoTauDiscriminationByMVAIsolationRun2 = cms.EDProducer("PFRecoTauDiscriminationByMVAIsolationRun2",
    PFTauProducer = cms.InputTag("fixme"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('AND'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("fixme"),
            cut = cms.double(0)
        ),
        leadTrack = cms.PSet(
            Producer = cms.InputTag("fixme"),
            cut = cms.double(0)
        )
    ),
    inputFileName = cms.optional.FileInPath,
    inputIDNameSuffix = cms.string(''),
    loadMVAfromDB = cms.bool(True),
    mightGet = cms.optional.untracked.vstring,
    mvaName = cms.string('tauIdMVAnewDMwLT'),
    mvaOpt = cms.string('newDMwLT'),
    srcBasicTauDiscriminators = cms.InputTag("hpsPFTauBasicDiscriminators"),
    srcTauTransverseImpactParameters = cms.InputTag(""),
    verbosity = cms.int32(0)
)


process.pfRecoTauTagInfoProducer = cms.EDProducer("PFRecoTauTagInfoProducer",
    ChargedHadrCand_AssociationCone = cms.double(0.8),
    ChargedHadrCand_tkPVmaxDZ = cms.double(0.2),
    ChargedHadrCand_tkmaxChi2 = cms.double(100.0),
    ChargedHadrCand_tkmaxipt = cms.double(0.03),
    ChargedHadrCand_tkminPixelHitsn = cms.int32(0),
    ChargedHadrCand_tkminPt = cms.double(0.5),
    ChargedHadrCand_tkminTrackerHitsn = cms.int32(3),
    GammaCand_EcalclusMinEt = cms.double(1.0),
    NeutrHadrCand_HcalclusMinEt = cms.double(1.0),
    PFCandidateProducer = cms.InputTag("particleFlow"),
    PFJetTracksAssociatorProducer = cms.InputTag("ak4PFJetTracksAssociatorAtVertex"),
    PVProducer = cms.InputTag("offlinePrimaryVertices"),
    UsePVconstraint = cms.bool(True),
    smearedPVsigmaX = cms.double(0.0015),
    smearedPVsigmaY = cms.double(0.0015),
    smearedPVsigmaZ = cms.double(0.005),
    tkPVmaxDZ = cms.double(0.2),
    tkmaxChi2 = cms.double(100.0),
    tkmaxipt = cms.double(0.03),
    tkminPixelHitsn = cms.int32(0),
    tkminPt = cms.double(0.5),
    tkminTrackerHitsn = cms.int32(3)
)


process.pfSecondaryVertexNegativeTagInfos = cms.EDProducer("CandSecondaryVertexProducer",
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    constraint = cms.string('BeamSpot'),
    extSVCollection = cms.InputTag("secondaryVertices"),
    extSVDeltaRToJet = cms.double(0.3),
    minimumTrackWeight = cms.double(0.5),
    trackIPTagInfos = cms.InputTag("pfImpactParameterTagInfos"),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(1),
        ptMin = cms.double(1.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip3dSig'),
    useExternalSV = cms.bool(False),
    usePVError = cms.bool(True),
    vertexCuts = cms.PSet(
        distSig2dMax = cms.double(-3.0),
        distSig2dMin = cms.double(-99999.9),
        distSig3dMax = cms.double(99999.9),
        distSig3dMin = cms.double(-99999.9),
        distVal2dMax = cms.double(-0.01),
        distVal2dMin = cms.double(-2.5),
        distVal3dMax = cms.double(99999.9),
        distVal3dMin = cms.double(-99999.9),
        fracPV = cms.double(0.65),
        massMax = cms.double(6.5),
        maxDeltaRToJetAxis = cms.double(-0.5),
        minimumTrackWeight = cms.double(0.5),
        multiplicityMin = cms.uint32(2),
        useTrackWeights = cms.bool(True),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        )
    ),
    vertexReco = cms.PSet(
        finder = cms.string('avr'),
        minweight = cms.double(0.5),
        primcut = cms.double(1.8),
        seccut = cms.double(6.0),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001)
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    )
)


process.pfSecondaryVertexTagInfos = cms.EDProducer("CandSecondaryVertexProducer",
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    constraint = cms.string('BeamSpot'),
    extSVCollection = cms.InputTag("secondaryVertices"),
    extSVDeltaRToJet = cms.double(0.3),
    minimumTrackWeight = cms.double(0.5),
    trackIPTagInfos = cms.InputTag("pfImpactParameterTagInfos"),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(1),
        ptMin = cms.double(1.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip3dSig'),
    useExternalSV = cms.bool(False),
    usePVError = cms.bool(True),
    vertexCuts = cms.PSet(
        distSig2dMax = cms.double(99999.9),
        distSig2dMin = cms.double(3.0),
        distSig3dMax = cms.double(99999.9),
        distSig3dMin = cms.double(-99999.9),
        distVal2dMax = cms.double(2.5),
        distVal2dMin = cms.double(0.01),
        distVal3dMax = cms.double(99999.9),
        distVal3dMin = cms.double(-99999.9),
        fracPV = cms.double(0.65),
        massMax = cms.double(6.5),
        maxDeltaRToJetAxis = cms.double(0.4),
        minimumTrackWeight = cms.double(0.5),
        multiplicityMin = cms.uint32(2),
        useTrackWeights = cms.bool(True),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        )
    ),
    vertexReco = cms.PSet(
        finder = cms.string('avr'),
        minweight = cms.double(0.5),
        primcut = cms.double(1.8),
        seccut = cms.double(6.0),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001)
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    )
)


process.pfSimpleInclusiveSecondaryVertexHighEffBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidateSimpleSecondaryVertex2TrkComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfInclusiveSecondaryVertexFinderTagInfos"))
)


process.pfSimpleInclusiveSecondaryVertexHighPurBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidateSimpleSecondaryVertex3TrkComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfInclusiveSecondaryVertexFinderTagInfos"))
)


process.pfSimpleSecondaryVertexHighEffBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidateSimpleSecondaryVertex2TrkComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfSecondaryVertexTagInfos"))
)


process.pfSimpleSecondaryVertexHighPurBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidateSimpleSecondaryVertex3TrkComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfSecondaryVertexTagInfos"))
)


process.pfTICL = cms.EDProducer("PFTICLProducer",
    mightGet = cms.optional.untracked.vstring,
    ticlCandidateSrc = cms.InputTag("ticlTrackstersMerge")
)


process.pfTrack = cms.EDProducer("PFTrackProducer",
    GsfTrackModuleLabel = cms.InputTag("electronGsfTracks"),
    GsfTracksInEvents = cms.bool(True),
    MuColl = cms.InputTag("muons1stStep"),
    PrimaryVertexLabel = cms.InputTag("offlinePrimaryVertices"),
    TkColList = cms.VInputTag(cms.InputTag("generalTracks")),
    TrackQuality = cms.string('highPurity'),
    TrajInEvents = cms.bool(False),
    UseQuality = cms.bool(True)
)


process.pfTrackCountingHighEffBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidateTrackCounting3D2ndComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"))
)


process.pfTrackCountingHighPurBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidateTrackCounting3D3rdComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"))
)


process.pfTrackElec = cms.EDProducer("PFElecTkProducer",
    AbsEtaBarrelEndcapsSeparation = cms.double(1.479),
    Fitter = cms.string('GsfElectronFittingSmoother'),
    GsfTrackModuleLabel = cms.InputTag("electronGsfTracks"),
    MaxConvBremRecoPT = cms.double(49.0),
    MinDEtaGsfSC = cms.double(0.06),
    MinDPhiGsfSC = cms.double(0.15),
    MinSCEnergy = cms.double(4.0),
    ModeMomentum = cms.bool(True),
    PFConversions = cms.InputTag("pfConversions"),
    PFEcalClusters = cms.InputTag("particleFlowClusterECAL"),
    PFNuclear = cms.InputTag("pfDisplacedTrackerVertex"),
    PFRecTrackLabel = cms.InputTag("pfTrack"),
    PFV0 = cms.InputTag("pfV0"),
    PrimaryVertexLabel = cms.InputTag("offlinePrimaryVertices"),
    Propagator = cms.string('fwdElectronPropagator'),
    PtLowHighSeparation = cms.double(20),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajInEvents = cms.bool(False),
    applyAlsoGsfAngularCleaning = cms.bool(True),
    applyEGSelection = cms.bool(False),
    applyGsfTrackCleaning = cms.bool(True),
    debugGsfCleaning = cms.bool(False),
    maxDEtaGsfAngularCleaning = cms.double(0.05),
    maxDPhiBremTangGsfAngularCleaning = cms.double(0.05),
    pf_convBremFinderID_mvaCutBarrelHighPt = cms.double(0.97),
    pf_convBremFinderID_mvaCutBarrelLowPt = cms.double(0.6),
    pf_convBremFinderID_mvaCutEndcapsHighPt = cms.double(0.995),
    pf_convBremFinderID_mvaCutEndcapsLowPt = cms.double(0.9),
    pf_convBremFinderID_mvaWeightFileBarrelHighPt = cms.FileInPath('RecoParticleFlow/PFTracking/data/TMVAClassification_ConvBremFinder_Testetgt20absetalt1_479_BDT.weights.xml'),
    pf_convBremFinderID_mvaWeightFileBarrelLowPt = cms.FileInPath('RecoParticleFlow/PFTracking/data/TMVAClassification_ConvBremFinder_Testetlt20absetalt1_479_BDT.weights.xml'),
    pf_convBremFinderID_mvaWeightFileEndcapsHighPt = cms.FileInPath('RecoParticleFlow/PFTracking/data/TMVAClassification_ConvBremFinder_Testetgt20absetagt1_479_BDT.weights.xml'),
    pf_convBremFinderID_mvaWeightFileEndcapsLowPt = cms.FileInPath('RecoParticleFlow/PFTracking/data/TMVAClassification_ConvBremFinder_Testetlt20absetagt1_479_BDT.weights.xml'),
    useConvBremFinder = cms.bool(True),
    useConversions = cms.bool(False),
    useFifthStepForEcalDrivenGsf = cms.bool(False),
    useFifthStepForTrackerDrivenGsf = cms.bool(False),
    useNuclear = cms.bool(False),
    useV0 = cms.bool(False)
)


process.pfTracksFromL1Tracks = cms.EDProducer("PFTrackProducerFromL1Tracks",
    L1TrackTag = cms.InputTag("TTTracksFromTrackletEmulation","Level1TTTracks"),
    nParam = cms.uint32(4),
    resolCalo = cms.PSet(
        etaBins = cms.vdouble(
            1.3, 1.7, 2.8, 3.2, 4.0, 
            5.0
        ),
        kind = cms.string('calo'),
        offset = cms.vdouble(
            2.688, 1.382, 2.096, 1.022, 0.757, 
            0.185
        ),
        ptMax = cms.vdouble(
            999999, 999999, 999999, 999999, 999999, 
            999999
        ),
        ptMin = cms.vdouble(
            5.0, 5.0, 5.0, 5.0, 5.0, 
            5.0
        ),
        scale = cms.vdouble(
            0.154, 0.341, 0.105, 0.255, 0.208, 
            0.306
        )
    ),
    resolTrack = cms.PSet(
        etaBins = cms.vdouble(0.8, 1.2, 1.5, 2.0, 2.5),
        kind = cms.string('track'),
        offset = cms.vdouble(0.007, 0.009, 0.011, 0.015, 0.025),
        scale = cms.vdouble(0.275, 0.404, 0.512, 0.48, 1.132)
    )
)


process.pfTracksFromL1TracksBarrel = cms.EDProducer("PFTrackProducerFromL1Tracks",
    L1TrackTag = cms.InputTag("TTTracksFromTrackletEmulation","Level1TTTracks"),
    nParam = cms.uint32(4),
    resolCalo = cms.PSet(
        etaBins = cms.vdouble(0.7, 1.2, 1.6),
        kind = cms.string('calo'),
        offset = cms.vdouble(2.909, 2.864, 0.294),
        scale = cms.vdouble(0.119, 0.127, 0.442)
    ),
    resolTrack = cms.PSet(
        etaBins = cms.vdouble(0.8, 1.2, 1.5, 2.0, 2.5),
        kind = cms.string('track'),
        offset = cms.vdouble(0.007, 0.009, 0.011, 0.015, 0.025),
        scale = cms.vdouble(0.275, 0.404, 0.512, 0.48, 1.132)
    )
)


process.pfTracksFromL1TracksHGCal = cms.EDProducer("PFTrackProducerFromL1Tracks",
    L1TrackTag = cms.InputTag("TTTracksFromTrackletEmulation","Level1TTTracks"),
    nParam = cms.uint32(4),
    resolCalo = cms.PSet(
        etaBins = cms.vdouble(
            1.7, 1.9, 2.2, 2.5, 2.8, 
            2.9
        ),
        kind = cms.string('calo'),
        offset = cms.vdouble(
            1.793, 1.827, 2.363, 2.538, 2.812, 
            2.642
        ),
        scale = cms.vdouble(
            0.138, 0.137, 0.124, 0.115, 0.106, 
            0.121
        )
    ),
    resolTrack = cms.PSet(
        etaBins = cms.vdouble(0.8, 1.2, 1.5, 2.0, 2.5),
        kind = cms.string('track'),
        offset = cms.vdouble(0.007, 0.009, 0.011, 0.015, 0.025),
        scale = cms.vdouble(0.275, 0.404, 0.512, 0.48, 1.132)
    )
)


process.pfV0 = cms.EDProducer("PFV0Producer",
    V0List = cms.VInputTag(cms.InputTag("generalV0Candidates","Kshort"), cms.InputTag("generalV0Candidates","Lambda"))
)


process.phPFIsoDepositCharged = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(0.4),
        DR_Veto = cms.double(0),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedHadrons")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("pfSelectedPhotons"),
    trackType = cms.string('candidate')
)


process.phPFIsoDepositChargedAll = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(0.4),
        DR_Veto = cms.double(0),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedParticles")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("pfSelectedPhotons"),
    trackType = cms.string('candidate')
)


process.phPFIsoDepositGamma = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('PFCandWithSuperClusterExtractor'),
        DR_Max = cms.double(0.4),
        DR_Veto = cms.double(0),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        MissHitSCMatch_Veto = cms.bool(False),
        SCMatch_Veto = cms.bool(True),
        inputCandView = cms.InputTag("pfAllPhotons")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("pfSelectedPhotons"),
    trackType = cms.string('candidate')
)


process.phPFIsoDepositNeutral = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(0.4),
        DR_Veto = cms.double(0),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllNeutralHadrons")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("pfSelectedPhotons"),
    trackType = cms.string('candidate')
)


process.phPFIsoDepositPU = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(0.4),
        DR_Veto = cms.double(0),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfPileUpAllChargedParticles")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("pfSelectedPhotons"),
    trackType = cms.string('candidate')
)


process.phPFIsoValueCharged03PFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("phPFIsoDepositCharged"),
        vetos = cms.vstring(),
        weight = cms.string('1')
    ))
)


process.phPFIsoValueCharged04PFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.4),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("phPFIsoDepositCharged"),
        vetos = cms.vstring(),
        weight = cms.string('1')
    ))
)


process.phPFIsoValueChargedAll03PFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("phPFIsoDepositChargedAll"),
        vetos = cms.vstring(),
        weight = cms.string('1')
    ))
)


process.phPFIsoValueChargedAll04PFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.4),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("phPFIsoDepositChargedAll"),
        vetos = cms.vstring(),
        weight = cms.string('1')
    ))
)


process.phPFIsoValueGamma03PFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("phPFIsoDepositGamma"),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.05)'),
        weight = cms.string('1')
    ))
)


process.phPFIsoValueGamma04PFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.4),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("phPFIsoDepositGamma"),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.05)'),
        weight = cms.string('1')
    ))
)


process.phPFIsoValueNeutral03PFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("phPFIsoDepositNeutral"),
        vetos = cms.vstring(),
        weight = cms.string('1')
    ))
)


process.phPFIsoValueNeutral04PFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.4),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("phPFIsoDepositNeutral"),
        vetos = cms.vstring(),
        weight = cms.string('1')
    ))
)


process.phPFIsoValuePU03PFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("phPFIsoDepositPU"),
        vetos = cms.vstring(),
        weight = cms.string('1')
    ))
)


process.phPFIsoValuePU04PFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.4),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("phPFIsoDepositPU"),
        vetos = cms.vstring(),
        weight = cms.string('1')
    ))
)


process.photonConvTrajSeedFromQuadruplets = cms.EDProducer("PhotonConversionTrajectorySeedProducerFromQuadruplets",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(50000),
        MaxNumberOfPixelClusters = cms.uint32(10000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        doClusterCheck = cms.bool(True)
    ),
    DoxcheckSeedCandidates = cms.bool(False),
    OrderedHitsFactoryPSet = cms.PSet(
        SeedingLayers = cms.InputTag("conv2LayerPairs"),
        maxElement = cms.uint32(900000)
    ),
    QuadCutPSet = cms.PSet(
        Cut_BeamPipeRadius = cms.double(3.0),
        Cut_DeltaRho = cms.double(12.0),
        Cut_maxLegPt = cms.double(10.0),
        Cut_minLegPt = cms.double(0.6),
        Cut_zCA = cms.double(100),
        apply_Arbitration = cms.bool(True),
        apply_ClusterShapeFilter = cms.bool(True),
        apply_DeltaPhiCuts = cms.bool(True),
        apply_zCACut = cms.bool(False),
        rejectAllQuads = cms.bool(False)
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot'),
        RegionPSet = cms.PSet(
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originHalfLength = cms.double(12.0),
            originRadius = cms.double(3.0),
            precise = cms.bool(True),
            ptMin = cms.double(0.2)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ClusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
        ClusterShapeHitFilterName = cms.string('ClusterShapeHitFilter'),
        ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
        FilterAtHelixStage = cms.bool(True),
        FilterPixelHits = cms.bool(False),
        FilterStripHits = cms.bool(True)
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedForPhotonConversionFromQuadruplets'),
        SeedMomentumForBOFF = cms.double(5.0),
        propagator = cms.string('PropagatorWithMaterial')
    ),
    TrackRefitter = cms.InputTag("generalTracks"),
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    newSeedCandidates = cms.string('conv2SeedCandidates'),
    primaryVerticesTag = cms.InputTag("pixelVertices"),
    xcheckSeedCandidates = cms.string('xcheckSeedCandidates')
)


process.photonConvTrajSeedFromSingleLeg = cms.EDProducer("PhotonConversionTrajectorySeedProducerFromSingleLeg",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(1000000),
        MaxNumberOfPixelClusters = cms.uint32(100000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        doClusterCheck = cms.bool(True)
    ),
    DoxcheckSeedCandidates = cms.bool(False),
    OrderedHitsFactoryPSet = cms.PSet(
        SeedingLayers = cms.InputTag("convLayerPairs"),
        maxElement = cms.uint32(100000),
        maxHitPairsPerTrackAndGenerator = cms.uint32(10)
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot'),
        RegionPSet = cms.PSet(
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originHalfLength = cms.double(12.0),
            originRadius = cms.double(3.0),
            precise = cms.bool(True),
            ptMin = cms.double(0.3)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedForPhotonConversion1Leg'),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        propagator = cms.string('PropagatorWithMaterial')
    ),
    TrackRefitter = cms.InputTag("generalTracks"),
    applyTkVtxConstraint = cms.bool(True),
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    maxDZSigmas = cms.double(10.0),
    maxNumSelVtx = cms.uint32(2),
    newSeedCandidates = cms.string('convSeedCandidates'),
    primaryVerticesTag = cms.InputTag("firstStepPrimaryVertices"),
    vtxMinDoF = cms.double(4),
    xcheckSeedCandidates = cms.string('xcheckSeedCandidates')
)


process.photonCore = cms.EDProducer("PhotonCoreProducer",
    conversionProducer = cms.InputTag(""),
    minSCEt = cms.double(10.0),
    photonCoreCollection = cms.string(''),
    pixelSeedProducer = cms.InputTag("electronMergedSeeds"),
    risolveConversionAmbiguity = cms.bool(True),
    scHybridBarrelProducer = cms.InputTag("correctedHybridSuperClusters"),
    scIslandEndcapProducer = cms.InputTag("correctedMulti5x5SuperClustersWithPreshower")
)


process.photonCoreFromMultiCl = cms.EDProducer("PhotonCoreProducer",
    conversionProducer = cms.InputTag(""),
    minSCEt = cms.double(10.0),
    photonCoreCollection = cms.string(''),
    pixelSeedProducer = cms.InputTag("electronMergedSeedsFromMultiCl"),
    risolveConversionAmbiguity = cms.bool(True),
    scHybridBarrelProducer = cms.InputTag("correctedHybridSuperClusters"),
    scIslandEndcapProducer = cms.InputTag("particleFlowSuperClusterHGCalFromMultiCl")
)


process.photonEcalPFClusterIsolationProducer = cms.EDProducer("PhotonEcalPFClusterIsolationProducer",
    candidateProducer = cms.InputTag("gedPhotonsTmp"),
    drMax = cms.double(0.3),
    drVetoBarrel = cms.double(0),
    drVetoEndcap = cms.double(0),
    energyBarrel = cms.double(0),
    energyEndcap = cms.double(0),
    etaStripBarrel = cms.double(0),
    etaStripEndcap = cms.double(0),
    pfClusterProducer = cms.InputTag("particleFlowClusterECAL")
)


process.photonHcalPFClusterIsolationProducer = cms.EDProducer("PhotonHcalPFClusterIsolationProducer",
    candidateProducer = cms.InputTag("gedPhotonsTmp"),
    drMax = cms.double(0.3),
    drVetoBarrel = cms.double(0),
    drVetoEndcap = cms.double(0),
    energyBarrel = cms.double(0),
    energyEndcap = cms.double(0),
    etaStripBarrel = cms.double(0),
    etaStripEndcap = cms.double(0),
    pfClusterProducerHCAL = cms.InputTag("particleFlowClusterHCAL"),
    useHF = cms.bool(False)
)


process.photonIDValueMaps = cms.EDProducer("PhotonIDValueMapProducer",
    ebReducedRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    eeReducedRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    esReducedRecHitCollection = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    isAOD = cms.bool(True),
    particleBasedIsolation = cms.InputTag("particleBasedIsolationTmp","gedPhotonsTmp"),
    pfCandidates = cms.InputTag("particleFlowTmp"),
    src = cms.InputTag("gedPhotonsTmp"),
    vertices = cms.InputTag("offlinePrimaryVertices")
)


process.photonIsolationHIProducerpp = cms.EDProducer("photonIsolationHIProducer",
    basicClusterBarrel = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    basicClusterEndcap = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    ebRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    eeRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    hbhe = cms.InputTag("hbhereco"),
    hf = cms.InputTag("hfreco"),
    ho = cms.InputTag("horeco"),
    photonProducer = cms.InputTag("photons"),
    trackCollection = cms.InputTag("generalTracks"),
    trackQuality = cms.string('highPurity')
)


process.photonIsolationHIProducerppGED = cms.EDProducer("photonIsolationHIProducer",
    basicClusterBarrel = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    basicClusterEndcap = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    ebRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    eeRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    hbhe = cms.InputTag("hbhereco"),
    hf = cms.InputTag("hfreco"),
    ho = cms.InputTag("horeco"),
    photonProducer = cms.InputTag("gedPhotons"),
    trackCollection = cms.InputTag("generalTracks"),
    trackQuality = cms.string('highPurity')
)


process.photonIsolationHIProducerppIsland = cms.EDProducer("photonIsolationHIProducer",
    basicClusterBarrel = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    basicClusterEndcap = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    ebRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    eeRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    hbhe = cms.InputTag("hbhereco"),
    hf = cms.InputTag("hfreco"),
    ho = cms.InputTag("horeco"),
    photonProducer = cms.InputTag("islandPhotons"),
    trackCollection = cms.InputTag("generalTracks"),
    trackQuality = cms.string('highPurity')
)


process.photons = cms.EDProducer("GEDPhotonProducer",
    RecHitFlagToBeExcludedEB = cms.vstring(
        'kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'
    ),
    RecHitFlagToBeExcludedEE = cms.vstring(
        'kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'
    ),
    RecHitSeverityToBeExcludedEB = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    RecHitSeverityToBeExcludedEE = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    barrelEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    candidateP4type = cms.string('fromEcalEnergy'),
    checkHcalStatus = cms.bool(True),
    ecalRecHitSumEtOffsetBarrel = cms.double(999999999),
    ecalRecHitSumEtOffsetEndcap = cms.double(999999999),
    ecalRecHitSumEtSlopeBarrel = cms.double(0.0),
    ecalRecHitSumEtSlopeEndcap = cms.double(0.0),
    endcapEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    energyRegressionWeightsDBLocation = cms.string('wgbrph'),
    energyRegressionWeightsFileLocation = cms.string('/afs/cern.ch/user/b/bendavid/cmspublic/regweights/gbrph.root'),
    hOverEConeSize = cms.double(0.15),
    hbheInstance = cms.string(''),
    hbheModule = cms.string('hbhereco'),
    hcalTowerSumEtOffsetBarrel = cms.double(999999999),
    hcalTowerSumEtOffsetEndcap = cms.double(999999999),
    hcalTowerSumEtSlopeBarrel = cms.double(0.0),
    hcalTowerSumEtSlopeEndcap = cms.double(0.0),
    hcalTowers = cms.InputTag("towerMaker"),
    highEt = cms.double(100.0),
    isolationSumsCalculatorSet = cms.PSet(
        ComponentName = cms.string('isolationSumsCalculator'),
        EcalRecHitEtaSliceA_Barrel = cms.double(2.5),
        EcalRecHitEtaSliceA_Endcap = cms.double(2.5),
        EcalRecHitEtaSliceB_Barrel = cms.double(2.5),
        EcalRecHitEtaSliceB_Endcap = cms.double(2.5),
        EcalRecHitInnerRadiusA_Barrel = cms.double(3.5),
        EcalRecHitInnerRadiusA_Endcap = cms.double(3.5),
        EcalRecHitInnerRadiusB_Barrel = cms.double(3.5),
        EcalRecHitInnerRadiusB_Endcap = cms.double(3.5),
        EcalRecHitOuterRadiusA_Barrel = cms.double(0.4),
        EcalRecHitOuterRadiusA_Endcap = cms.double(0.4),
        EcalRecHitOuterRadiusB_Barrel = cms.double(0.3),
        EcalRecHitOuterRadiusB_Endcap = cms.double(0.3),
        EcalRecHitThreshEA_Barrel = cms.double(0.095),
        EcalRecHitThreshEA_Endcap = cms.double(0.0),
        EcalRecHitThreshEB_Barrel = cms.double(0.095),
        EcalRecHitThreshEB_Endcap = cms.double(0.0),
        EcalRecHitThreshEtA_Barrel = cms.double(0.0),
        EcalRecHitThreshEtA_Endcap = cms.double(0.11),
        EcalRecHitThreshEtB_Barrel = cms.double(0.0),
        EcalRecHitThreshEtB_Endcap = cms.double(0.11),
        HcalDepth1TowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalDepth1TowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalDepth1TowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalDepth1TowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalDepth1TowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth1TowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalDepth1TowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalDepth1TowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalDepth1TowerThreshEA_Barrel = cms.double(0.0),
        HcalDepth1TowerThreshEA_Endcap = cms.double(0.0),
        HcalDepth1TowerThreshEB_Barrel = cms.double(0.0),
        HcalDepth1TowerThreshEB_Endcap = cms.double(0.0),
        HcalDepth2TowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalDepth2TowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalDepth2TowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalDepth2TowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalDepth2TowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth2TowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalDepth2TowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalDepth2TowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalDepth2TowerThreshEA_Barrel = cms.double(0.0),
        HcalDepth2TowerThreshEA_Endcap = cms.double(0.0),
        HcalDepth2TowerThreshEB_Barrel = cms.double(0.0),
        HcalDepth2TowerThreshEB_Endcap = cms.double(0.0),
        HcalRecHitCollection = cms.InputTag("towerMaker"),
        HcalTowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalTowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalTowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalTowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalTowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalTowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalTowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalTowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalTowerThreshEA_Barrel = cms.double(0.0),
        HcalTowerThreshEA_Endcap = cms.double(0.0),
        HcalTowerThreshEB_Barrel = cms.double(0.0),
        HcalTowerThreshEB_Endcap = cms.double(0.0),
        TrackConeInnerRadiusA_Barrel = cms.double(0.04),
        TrackConeInnerRadiusA_Endcap = cms.double(0.04),
        TrackConeInnerRadiusB_Barrel = cms.double(0.04),
        TrackConeInnerRadiusB_Endcap = cms.double(0.04),
        TrackConeOuterRadiusA_Barrel = cms.double(0.4),
        TrackConeOuterRadiusA_Endcap = cms.double(0.4),
        TrackConeOuterRadiusB_Barrel = cms.double(0.3),
        TrackConeOuterRadiusB_Endcap = cms.double(0.3),
        barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        beamSpotProducer = cms.InputTag("offlineBeamSpot"),
        endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        isolationtrackEtaSliceA_Barrel = cms.double(0.015),
        isolationtrackEtaSliceA_Endcap = cms.double(0.015),
        isolationtrackEtaSliceB_Barrel = cms.double(0.015),
        isolationtrackEtaSliceB_Endcap = cms.double(0.015),
        isolationtrackThresholdA_Barrel = cms.double(0.0),
        isolationtrackThresholdA_Endcap = cms.double(0.0),
        isolationtrackThresholdB_Barrel = cms.double(0.0),
        isolationtrackThresholdB_Endcap = cms.double(0.0),
        longImpactParameterA_Barrel = cms.double(0.2),
        longImpactParameterA_Endcap = cms.double(0.2),
        longImpactParameterB_Barrel = cms.double(0.2),
        longImpactParameterB_Endcap = cms.double(0.2),
        moduleEtaBoundary = cms.vdouble(
            0.0, 0.02, 0.43, 0.46, 0.78, 
            0.81, 1.13, 1.15, 1.45, 1.58
        ),
        modulePhiBoundary = cms.double(0.0087),
        trackProducer = cms.InputTag("generalTracks"),
        transImpactParameterA_Barrel = cms.double(0.1),
        transImpactParameterA_Endcap = cms.double(0.1),
        transImpactParameterB_Barrel = cms.double(0.1),
        transImpactParameterB_Endcap = cms.double(0.1),
        useNumCrystals = cms.bool(True),
        vetoClustered = cms.bool(False)
    ),
    maxHoverEBarrel = cms.double(0.5),
    maxHoverEEndcap = cms.double(0.5),
    minR9Barrel = cms.double(0.94),
    minR9Endcap = cms.double(0.95),
    minSCEtBarrel = cms.double(10.0),
    minSCEtEndcap = cms.double(10.0),
    mipVariableSet = cms.PSet(
        ComponentName = cms.string('mipVariable'),
        HaloDiscThreshold = cms.double(70.0),
        ResidualWidth = cms.double(0.23),
        XRangeFit = cms.double(180.0),
        YRangeFit = cms.double(7.0),
        barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE")
    ),
    nTrackHollowConeBarrel = cms.double(999999999),
    nTrackHollowConeEndcap = cms.double(999999999),
    nTrackSolidConeBarrel = cms.double(999999999),
    nTrackSolidConeEndcap = cms.double(999999999),
    outputPhotonCollection = cms.string(''),
    pfEgammaCandidates = cms.InputTag(""),
    photonEcalEnergyCorrFunction = cms.string('EcalClusterEnergyCorrectionObjectSpecific'),
    photonProducer = cms.InputTag("photonCore"),
    posCalcParameters = cms.PSet(
        LogWeighted = cms.bool(True),
        T0_barl = cms.double(7.4),
        T0_endc = cms.double(6.3),
        T0_endcPresh = cms.double(3.6),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    posCalc_logweight = cms.bool(True),
    posCalc_t0_barl = cms.double(7.7),
    posCalc_t0_endc = cms.double(6.3),
    posCalc_t0_endcPresh = cms.double(3.6),
    posCalc_w0 = cms.double(4.2),
    posCalc_x0 = cms.double(0.89),
    preshowerHits = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    primaryVertexProducer = cms.InputTag("offlinePrimaryVerticesWithBS"),
    reconstructionStep = cms.string('tmp'),
    regressionWeightsFromDB = cms.bool(True),
    runMIPTagger = cms.bool(True),
    sigmaIetaIetaCutBarrel = cms.double(999999999),
    sigmaIetaIetaCutEndcap = cms.double(999999999),
    superClusterCrackEnergyCorrFunction = cms.string('EcalClusterCrackCorrection'),
    superClusterEnergyCorrFunction = cms.string('EcalClusterEnergyCorrection'),
    superClusterEnergyErrorFunction = cms.string('EcalClusterEnergyUncertainty'),
    trackPtSumHollowConeBarrel = cms.double(999999999),
    trackPtSumHollowConeEndcap = cms.double(999999999),
    trackPtSumSolidConeBarrel = cms.double(999999999),
    trackPtSumSolidConeEndcap = cms.double(999999999),
    usePrimaryVertex = cms.bool(True),
    valueMapPhotons = cms.string('')
)


process.photonsFromMultiCl = cms.EDProducer("GEDPhotonProducer",
    RecHitFlagToBeExcludedEB = cms.vstring(
        'kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'
    ),
    RecHitFlagToBeExcludedEE = cms.vstring(
        'kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'
    ),
    RecHitSeverityToBeExcludedEB = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    RecHitSeverityToBeExcludedEE = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    barrelEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    candidateP4type = cms.string('fromEcalEnergy'),
    checkHcalStatus = cms.bool(True),
    ecalRecHitSumEtOffsetBarrel = cms.double(999999999),
    ecalRecHitSumEtOffsetEndcap = cms.double(999999999),
    ecalRecHitSumEtSlopeBarrel = cms.double(0.0),
    ecalRecHitSumEtSlopeEndcap = cms.double(0.0),
    endcapEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    energyRegressionWeightsDBLocation = cms.string('wgbrph'),
    energyRegressionWeightsFileLocation = cms.string('/afs/cern.ch/user/b/bendavid/cmspublic/regweights/gbrph.root'),
    hOverEConeSize = cms.double(0.15),
    hbheInstance = cms.string(''),
    hbheModule = cms.string('hbhereco'),
    hcalTowerSumEtOffsetBarrel = cms.double(999999999),
    hcalTowerSumEtOffsetEndcap = cms.double(999999999),
    hcalTowerSumEtSlopeBarrel = cms.double(0.0),
    hcalTowerSumEtSlopeEndcap = cms.double(0.0),
    hcalTowers = cms.InputTag("towerMaker"),
    highEt = cms.double(100.0),
    isolationSumsCalculatorSet = cms.PSet(
        ComponentName = cms.string('isolationSumsCalculator'),
        EcalRecHitEtaSliceA_Barrel = cms.double(2.5),
        EcalRecHitEtaSliceA_Endcap = cms.double(2.5),
        EcalRecHitEtaSliceB_Barrel = cms.double(2.5),
        EcalRecHitEtaSliceB_Endcap = cms.double(2.5),
        EcalRecHitInnerRadiusA_Barrel = cms.double(3.5),
        EcalRecHitInnerRadiusA_Endcap = cms.double(3.5),
        EcalRecHitInnerRadiusB_Barrel = cms.double(3.5),
        EcalRecHitInnerRadiusB_Endcap = cms.double(3.5),
        EcalRecHitOuterRadiusA_Barrel = cms.double(0.4),
        EcalRecHitOuterRadiusA_Endcap = cms.double(0.4),
        EcalRecHitOuterRadiusB_Barrel = cms.double(0.3),
        EcalRecHitOuterRadiusB_Endcap = cms.double(0.3),
        EcalRecHitThreshEA_Barrel = cms.double(0.095),
        EcalRecHitThreshEA_Endcap = cms.double(0.0),
        EcalRecHitThreshEB_Barrel = cms.double(0.095),
        EcalRecHitThreshEB_Endcap = cms.double(0.0),
        EcalRecHitThreshEtA_Barrel = cms.double(0.0),
        EcalRecHitThreshEtA_Endcap = cms.double(0.11),
        EcalRecHitThreshEtB_Barrel = cms.double(0.0),
        EcalRecHitThreshEtB_Endcap = cms.double(0.11),
        HcalDepth1TowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalDepth1TowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalDepth1TowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalDepth1TowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalDepth1TowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth1TowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalDepth1TowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalDepth1TowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalDepth1TowerThreshEA_Barrel = cms.double(0.0),
        HcalDepth1TowerThreshEA_Endcap = cms.double(0.0),
        HcalDepth1TowerThreshEB_Barrel = cms.double(0.0),
        HcalDepth1TowerThreshEB_Endcap = cms.double(0.0),
        HcalDepth2TowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalDepth2TowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalDepth2TowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalDepth2TowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalDepth2TowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth2TowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalDepth2TowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalDepth2TowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalDepth2TowerThreshEA_Barrel = cms.double(0.0),
        HcalDepth2TowerThreshEA_Endcap = cms.double(0.0),
        HcalDepth2TowerThreshEB_Barrel = cms.double(0.0),
        HcalDepth2TowerThreshEB_Endcap = cms.double(0.0),
        HcalRecHitCollection = cms.InputTag("towerMaker"),
        HcalTowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalTowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalTowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalTowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalTowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalTowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalTowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalTowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalTowerThreshEA_Barrel = cms.double(0.0),
        HcalTowerThreshEA_Endcap = cms.double(0.0),
        HcalTowerThreshEB_Barrel = cms.double(0.0),
        HcalTowerThreshEB_Endcap = cms.double(0.0),
        TrackConeInnerRadiusA_Barrel = cms.double(0.04),
        TrackConeInnerRadiusA_Endcap = cms.double(0.04),
        TrackConeInnerRadiusB_Barrel = cms.double(0.04),
        TrackConeInnerRadiusB_Endcap = cms.double(0.04),
        TrackConeOuterRadiusA_Barrel = cms.double(0.4),
        TrackConeOuterRadiusA_Endcap = cms.double(0.4),
        TrackConeOuterRadiusB_Barrel = cms.double(0.3),
        TrackConeOuterRadiusB_Endcap = cms.double(0.3),
        barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        beamSpotProducer = cms.InputTag("offlineBeamSpot"),
        endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        isolationtrackEtaSliceA_Barrel = cms.double(0.015),
        isolationtrackEtaSliceA_Endcap = cms.double(0.015),
        isolationtrackEtaSliceB_Barrel = cms.double(0.015),
        isolationtrackEtaSliceB_Endcap = cms.double(0.015),
        isolationtrackThresholdA_Barrel = cms.double(0.0),
        isolationtrackThresholdA_Endcap = cms.double(0.0),
        isolationtrackThresholdB_Barrel = cms.double(0.0),
        isolationtrackThresholdB_Endcap = cms.double(0.0),
        longImpactParameterA_Barrel = cms.double(0.2),
        longImpactParameterA_Endcap = cms.double(0.2),
        longImpactParameterB_Barrel = cms.double(0.2),
        longImpactParameterB_Endcap = cms.double(0.2),
        moduleEtaBoundary = cms.vdouble(
            0.0, 0.02, 0.43, 0.46, 0.78, 
            0.81, 1.13, 1.15, 1.45, 1.58
        ),
        modulePhiBoundary = cms.double(0.0087),
        trackProducer = cms.InputTag("generalTracks"),
        transImpactParameterA_Barrel = cms.double(0.1),
        transImpactParameterA_Endcap = cms.double(0.1),
        transImpactParameterB_Barrel = cms.double(0.1),
        transImpactParameterB_Endcap = cms.double(0.1),
        useNumCrystals = cms.bool(True),
        vetoClustered = cms.bool(False)
    ),
    maxHoverEBarrel = cms.double(0.5),
    maxHoverEEndcap = cms.double(0.5),
    minR9Barrel = cms.double(0.94),
    minR9Endcap = cms.double(0.95),
    minSCEtBarrel = cms.double(10.0),
    minSCEtEndcap = cms.double(10.0),
    mipVariableSet = cms.PSet(
        ComponentName = cms.string('mipVariable'),
        HaloDiscThreshold = cms.double(70.0),
        ResidualWidth = cms.double(0.23),
        XRangeFit = cms.double(180.0),
        YRangeFit = cms.double(7.0),
        barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE")
    ),
    nTrackHollowConeBarrel = cms.double(999999999),
    nTrackHollowConeEndcap = cms.double(999999999),
    nTrackSolidConeBarrel = cms.double(999999999),
    nTrackSolidConeEndcap = cms.double(999999999),
    outputPhotonCollection = cms.string(''),
    pfEgammaCandidates = cms.InputTag(""),
    photonEcalEnergyCorrFunction = cms.string('EcalClusterEnergyCorrectionObjectSpecific'),
    photonProducer = cms.InputTag("photonCoreFromMultiCl"),
    posCalcParameters = cms.PSet(
        LogWeighted = cms.bool(True),
        T0_barl = cms.double(7.4),
        T0_endc = cms.double(6.3),
        T0_endcPresh = cms.double(3.6),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    posCalc_logweight = cms.bool(True),
    posCalc_t0_barl = cms.double(7.7),
    posCalc_t0_endc = cms.double(6.3),
    posCalc_t0_endcPresh = cms.double(3.6),
    posCalc_w0 = cms.double(4.2),
    posCalc_x0 = cms.double(0.89),
    preshowerHits = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    primaryVertexProducer = cms.InputTag("offlinePrimaryVerticesWithBS"),
    reconstructionStep = cms.string('tmp'),
    regressionWeightsFromDB = cms.bool(True),
    runMIPTagger = cms.bool(True),
    sigmaIetaIetaCutBarrel = cms.double(999999999),
    sigmaIetaIetaCutEndcap = cms.double(999999999),
    superClusterCrackEnergyCorrFunction = cms.string('EcalClusterCrackCorrection'),
    superClusterEnergyCorrFunction = cms.string('EcalClusterEnergyCorrection'),
    superClusterEnergyErrorFunction = cms.string('EcalClusterEnergyUncertainty'),
    trackPtSumHollowConeBarrel = cms.double(999999999),
    trackPtSumHollowConeEndcap = cms.double(999999999),
    trackPtSumSolidConeBarrel = cms.double(999999999),
    trackPtSumSolidConeEndcap = cms.double(999999999),
    usePrimaryVertex = cms.bool(True),
    valueMapPhotons = cms.string('')
)


process.pixelClusterTagInfos = cms.EDProducer("PixelClusterTagInfoProducer",
    addForward = cms.bool(True),
    hadronMass = cms.double(12.0),
    isPhase1 = cms.bool(True),
    jets = cms.InputTag("ak4PFJetsCHS"),
    maxJetEtaCut = cms.double(2.5),
    minAdcCount = cms.int32(-1),
    minJetPtCut = cms.double(100.0),
    pixelhit = cms.InputTag("siPixelClusters"),
    vertices = cms.InputTag("offlinePrimaryVertices")
)


process.pixelFitterByConformalMappingAndLine = cms.EDProducer("PixelFitterByConformalMappingAndLineProducer",
    TTRHBuilder = cms.string('PixelTTRHBuilderWithoutAngle'),
    fixImpactParameter = cms.double(0),
    mightGet = cms.optional.untracked.vstring,
    useFixImpactParameter = cms.bool(False)
)


process.pixelFitterByHelixProjections = cms.EDProducer("PixelFitterByHelixProjectionsProducer",
    mightGet = cms.optional.untracked.vstring,
    scaleErrorsForBPix1 = cms.bool(False),
    scaleFactor = cms.double(0.65)
)


process.pixelLessLayerPairs4PixelLessTracking = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(

    ),
    FPix = cms.PSet(

    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(2),
        minRing = cms.int32(1),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHitUnmatched"),
        stereoRecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHitUnmatched"),
        useRingSlector = cms.bool(True),
        useSimpleRphiHitsCleaner = cms.bool(False)
    ),
    TIB = cms.PSet(

    ),
    TIB1 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHitUnmatched"),
        stereoRecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHitUnmatched"),
        useSimpleRphiHitsCleaner = cms.bool(False)
    ),
    TIB2 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHitUnmatched"),
        stereoRecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHitUnmatched"),
        useSimpleRphiHitsCleaner = cms.bool(False)
    ),
    TIB3 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHitUnmatched"),
        stereoRecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHitUnmatched"),
        useSimpleRphiHitsCleaner = cms.bool(False)
    ),
    TID = cms.PSet(

    ),
    TID1 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(3),
        minRing = cms.int32(1),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHitUnmatched"),
        stereoRecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHitUnmatched"),
        useRingSlector = cms.bool(True),
        useSimpleRphiHitsCleaner = cms.bool(False)
    ),
    TID2 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(3),
        minRing = cms.int32(1),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHitUnmatched"),
        stereoRecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHitUnmatched"),
        useRingSlector = cms.bool(True),
        useSimpleRphiHitsCleaner = cms.bool(False)
    ),
    TID3 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(2),
        minRing = cms.int32(1),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHitUnmatched"),
        stereoRecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHitUnmatched"),
        useRingSlector = cms.bool(True),
        useSimpleRphiHitsCleaner = cms.bool(False)
    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring(
        'TIB1+TIB2', 
        'TIB1+TIB3', 
        'TIB2+TIB3', 
        'TIB1+TID1_pos', 
        'TIB1+TID1_neg', 
        'TIB2+TID1_pos', 
        'TIB2+TID1_neg', 
        'TIB1+TID2_pos', 
        'TIB1+TID2_neg', 
        'TID1_pos+TID2_pos', 
        'TID2_pos+TID3_pos', 
        'TID3_pos+TEC2_pos', 
        'TEC1_pos+TEC2_pos', 
        'TEC2_pos+TEC3_pos', 
        'TID1_neg+TID2_neg', 
        'TID2_neg+TID3_neg', 
        'TID3_neg+TEC2_neg', 
        'TEC1_neg+TEC2_neg', 
        'TEC2_neg+TEC3_neg'
    ),
    mightGet = cms.optional.untracked.vstring
)


process.pixelLessStep = cms.EDProducer("ClassifierMerger",
    inputClassifiers = cms.vstring(
        'pixelLessStepClassifier1', 
        'pixelLessStepClassifier2'
    ),
    mightGet = cms.optional.untracked.vstring
)


process.pixelLessStepClassifier1 = cms.EDProducer("TrackMVAClassifierPrompt",
    beamspot = cms.InputTag("offlineBeamSpot"),
    ignoreVertices = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    mva = cms.PSet(
        GBRForestFileName = cms.string(''),
        GBRForestLabel = cms.string('MVASelectorIter5_13TeV')
    ),
    qualityCuts = cms.vdouble(-0.4, 0.0, 0.4),
    src = cms.InputTag("pixelLessStepTracks"),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.pixelLessStepClassifier2 = cms.EDProducer("TrackMVAClassifierPrompt",
    beamspot = cms.InputTag("offlineBeamSpot"),
    ignoreVertices = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    mva = cms.PSet(
        GBRForestFileName = cms.string(''),
        GBRForestLabel = cms.string('MVASelectorIter0_13TeV')
    ),
    qualityCuts = cms.vdouble(-0.0, 0.0, 0.0),
    src = cms.InputTag("pixelLessStepTracks"),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.pixelLessStepClusters = cms.EDProducer("TrackClusterRemoverPhase2",
    TrackQuality = cms.string('highPurity'),
    maxChi2 = cms.double(9.0),
    mightGet = cms.optional.untracked.vstring,
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    oldClusterRemovalInfo = cms.InputTag(""),
    overrideTrkQuals = cms.InputTag(""),
    phase2OTClusters = cms.InputTag("siPhase2Clusters"),
    phase2pixelClusters = cms.InputTag("siPixelClusters"),
    trackClassifier = cms.InputTag("","QualityMasks"),
    trajectories = cms.InputTag("")
)


process.pixelLessStepHitDoublets = cms.EDProducer("HitPairEDProducer",
    clusterCheck = cms.InputTag("trackerClusterCheck"),
    layerPairs = cms.vuint32(0),
    maxElement = cms.uint32(50000000),
    maxElementTotal = cms.uint32(50000000),
    mightGet = cms.optional.untracked.vstring,
    produceIntermediateHitDoublets = cms.bool(True),
    produceSeedingHitSets = cms.bool(False),
    seedingLayers = cms.InputTag("pixelLessStepSeedLayers"),
    trackingRegions = cms.InputTag("pixelLessStepTrackingRegions"),
    trackingRegionsSeedingLayers = cms.InputTag("")
)


process.pixelLessStepHitTriplets = cms.EDProducer("MultiHitFromChi2EDProducer",
    ClusterShapeHitFilterName = cms.string('ClusterShapeHitFilter'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    chi2VsPtCut = cms.bool(True),
    chi2_cuts = cms.vdouble(3, 4, 5, 5),
    detIdsToDebug = cms.vint32(0, 0, 0),
    doublets = cms.InputTag("pixelLessStepHitDoublets"),
    extraHitRPhitolerance = cms.double(0),
    extraHitRZtolerance = cms.double(0),
    extraPhiKDBox = cms.double(0.005),
    extraRKDBox = cms.double(0.2),
    extraZKDBox = cms.double(0.2),
    fnSigmaRZ = cms.double(2),
    maxChi2 = cms.double(5),
    maxElement = cms.uint32(1000000),
    mightGet = cms.optional.untracked.vstring,
    phiPreFiltering = cms.double(0.3),
    pt_interv = cms.vdouble(0.4, 0.7, 1, 2),
    refitHits = cms.bool(True),
    useFixedPreFiltering = cms.bool(False)
)


process.pixelLessStepMasks = cms.EDProducer("FastTrackerRecHitMaskProducer",
    TrackQuality = cms.string('highPurity'),
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    minNumberOfLayersWithMeasBeforeFiltering_ = cms.int32(0),
    oldHitRemovalInfo = cms.InputTag(""),
    recHits = cms.InputTag("fastTrackerRecHits"),
    trackClassifier = cms.InputTag("","QualityMasks"),
    trackQuality = cms.string('hightPurity'),
    trajectories = cms.InputTag("")
)


process.pixelLessStepSeedClusterMask = cms.EDProducer("SeedClusterRemover",
    Common = cms.PSet(
        maxChi2 = cms.double(9.0)
    ),
    oldClusterRemovalInfo = cms.InputTag("mixedTripletStepSeedClusterMask"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    trajectories = cms.InputTag("pixelLessStepSeeds")
)


process.pixelLessStepSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    MTEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        maxRing = cms.int32(3),
        minRing = cms.int32(3),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        skipClusters = cms.InputTag("pixelLessStepClusters"),
        useRingSlector = cms.bool(True)
    ),
    MTIB = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        skipClusters = cms.InputTag("pixelLessStepClusters")
    ),
    MTID = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        maxRing = cms.int32(3),
        minRing = cms.int32(3),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        skipClusters = cms.InputTag("pixelLessStepClusters"),
        useRingSlector = cms.bool(True)
    ),
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(2),
        minRing = cms.int32(1),
        skipClusters = cms.InputTag("pixelLessStepClusters"),
        useRingSlector = cms.bool(True)
    ),
    TIB = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        skipClusters = cms.InputTag("pixelLessStepClusters")
    ),
    TID = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(2),
        minRing = cms.int32(1),
        skipClusters = cms.InputTag("pixelLessStepClusters"),
        useRingSlector = cms.bool(True)
    ),
    layerList = cms.vstring(
        'TIB1+TIB2+MTIB3', 
        'TIB1+TIB2+MTIB4', 
        'TIB1+TIB2+MTID1_pos', 
        'TIB1+TIB2+MTID1_neg', 
        'TID1_pos+TID2_pos+TID3_pos', 
        'TID1_neg+TID2_neg+TID3_neg', 
        'TID1_pos+TID2_pos+MTID3_pos', 
        'TID1_neg+TID2_neg+MTID3_neg', 
        'TID1_pos+TID2_pos+MTEC1_pos', 
        'TID1_neg+TID2_neg+MTEC1_neg', 
        'TID2_pos+TID3_pos+TEC1_pos', 
        'TID2_neg+TID3_neg+TEC1_neg', 
        'TID2_pos+TID3_pos+MTEC1_pos', 
        'TID2_neg+TID3_neg+MTEC1_neg', 
        'TEC1_pos+TEC2_pos+TEC3_pos', 
        'TEC1_neg+TEC2_neg+TEC3_neg', 
        'TEC1_pos+TEC2_pos+MTEC3_pos', 
        'TEC1_neg+TEC2_neg+MTEC3_neg', 
        'TEC1_pos+TEC2_pos+TEC4_pos', 
        'TEC1_neg+TEC2_neg+TEC4_neg', 
        'TEC1_pos+TEC2_pos+MTEC4_pos', 
        'TEC1_neg+TEC2_neg+MTEC4_neg', 
        'TEC2_pos+TEC3_pos+TEC4_pos', 
        'TEC2_neg+TEC3_neg+TEC4_neg', 
        'TEC2_pos+TEC3_pos+MTEC4_pos', 
        'TEC2_neg+TEC3_neg+MTEC4_neg', 
        'TEC2_pos+TEC3_pos+TEC5_pos', 
        'TEC2_neg+TEC3_neg+TEC5_neg', 
        'TEC2_pos+TEC3_pos+TEC6_pos', 
        'TEC2_neg+TEC3_neg+TEC6_neg', 
        'TEC3_pos+TEC4_pos+TEC5_pos', 
        'TEC3_neg+TEC4_neg+TEC5_neg', 
        'TEC3_pos+TEC4_pos+MTEC5_pos', 
        'TEC3_neg+TEC4_neg+MTEC5_neg', 
        'TEC3_pos+TEC5_pos+TEC6_pos', 
        'TEC3_neg+TEC5_neg+TEC6_neg', 
        'TEC4_pos+TEC5_pos+TEC6_pos', 
        'TEC4_neg+TEC5_neg+TEC6_neg'
    )
)


process.pixelLessStepSeeds = cms.EDProducer("SeedCreatorFromRegionConsecutiveHitsTripletOnlyEDProducer",
    MinOneOverPtError = cms.double(1),
    OriginTransverseErrorMultiplier = cms.double(1),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('CombinedSeedComparitor'),
        comparitors = cms.VPSet(
            cms.PSet(
                ClusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
                ClusterShapeHitFilterName = cms.string('pixelLessStepClusterShapeHitFilter'),
                ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
                FilterAtHelixStage = cms.bool(True),
                FilterPixelHits = cms.bool(False),
                FilterStripHits = cms.bool(True)
            ), 
            cms.PSet(
                ComponentName = cms.string('StripSubClusterShapeSeedFilter'),
                FilterAtHelixStage = cms.bool(False),
                label = cms.untracked.string('Seeds'),
                maxNSat = cms.uint32(3),
                maxTrimmedSizeDiffNeg = cms.double(1.0),
                maxTrimmedSizeDiffPos = cms.double(0.7),
                seedCutMIPs = cms.double(0.35),
                seedCutSN = cms.double(7.0),
                subclusterCutMIPs = cms.double(0.45),
                subclusterCutSN = cms.double(12.0),
                subclusterWindow = cms.double(0.7),
                trimMaxADC = cms.double(30.0),
                trimMaxFracNeigh = cms.double(0.25),
                trimMaxFracTotal = cms.double(0.15)
            )
        ),
        mode = cms.string('and')
    ),
    SeedMomentumForBOFF = cms.double(5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    forceKinematicWithRegionDirection = cms.bool(False),
    magneticField = cms.string(''),
    mightGet = cms.optional.untracked.vstring,
    propagator = cms.string('PropagatorWithMaterial'),
    seedingHitSets = cms.InputTag("pixelLessStepHitTriplets")
)


process.pixelLessStepSelector = cms.EDProducer("MultiTrackSelector",
    GBRForestLabel = cms.string('MVASelectorIter5'),
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("pixelLessStepTracks"),
    trackSelectors = cms.VPSet(
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.5),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(1.3, 4.0),
            d0_par2 = cms.vdouble(1.3, 4.0),
            dz_par1 = cms.vdouble(1.3, 4.0),
            dz_par2 = cms.vdouble(1.3, 4.0),
            keepAllTracks = cms.bool(False),
            maxNumberLostLayers = cms.uint32(1),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(4),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('pixelLessStepLoose'),
            preFilterName = cms.string(''),
            qualityBit = cms.string('loose'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.35),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(1.1, 4.0),
            d0_par2 = cms.vdouble(1.1, 4.0),
            dz_par1 = cms.vdouble(1.1, 4.0),
            dz_par2 = cms.vdouble(1.1, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(0),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(4),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('pixelLessStepTight'),
            preFilterName = cms.string('pixelLessStepLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.2),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.9, 4.0),
            d0_par2 = cms.vdouble(0.9, 4.0),
            dz_par1 = cms.vdouble(0.9, 4.0),
            dz_par2 = cms.vdouble(0.9, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(0),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(4),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('QualityMasks'),
            preFilterName = cms.string('pixelLessStepTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        )
    ),
    useAnyMVA = cms.bool(False),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(False),
    vertices = cms.InputTag("pixelVertices")
)


process.pixelLessStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('pixelLessStepTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('pixelLessStepTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    clustersToSkip = cms.InputTag("pixelLessStepClusters"),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    numHitsForSeedCleaner = cms.int32(50),
    reverseTrajectories = cms.bool(False),
    src = cms.InputTag("pixelLessStepSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.pixelLessStepTrackingRegions = cms.EDProducer("GlobalTrackingRegionFromBeamSpotEDProducer",
    RegionPSet = cms.PSet(
        beamSpot = cms.InputTag("offlineBeamSpot"),
        nSigmaZ = cms.double(0),
        originHalfLength = cms.double(12.0),
        originRadius = cms.double(1.0),
        precise = cms.bool(True),
        ptMin = cms.double(0.4),
        useMultipleScattering = cms.bool(False)
    ),
    mightGet = cms.optional.untracked.vstring
)


process.pixelLessStepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('pixelLessStep'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("pixelLessStepTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.pixelPairElectronHitDoublets = cms.EDProducer("HitPairEDProducer",
    clusterCheck = cms.InputTag("trackerClusterCheck"),
    layerPairs = cms.vuint32(0),
    maxElement = cms.uint32(1000000),
    maxElementTotal = cms.uint32(12000000),
    mightGet = cms.optional.untracked.vstring,
    produceIntermediateHitDoublets = cms.bool(False),
    produceSeedingHitSets = cms.bool(True),
    seedingLayers = cms.InputTag("pixelPairElectronSeedLayers"),
    trackingRegions = cms.InputTag("pixelPairElectronTrackingRegions"),
    trackingRegionsSeedingLayers = cms.InputTag("")
)


process.pixelPairElectronSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("tripletElectronClusterMask")
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("tripletElectronClusterMask")
    ),
    layerList = cms.vstring(
        'BPix1+BPix2', 
        'BPix1+BPix3', 
        'BPix2+BPix3', 
        'BPix1+FPix1_pos', 
        'BPix1+FPix1_neg', 
        'BPix1+FPix2_pos', 
        'BPix1+FPix2_neg', 
        'BPix2+FPix1_pos', 
        'BPix2+FPix1_neg', 
        'FPix1_pos+FPix2_pos', 
        'FPix1_neg+FPix2_neg'
    )
)


process.pixelPairElectronSeeds = cms.EDProducer("SeedCreatorFromRegionConsecutiveHitsEDProducer",
    MinOneOverPtError = cms.double(1),
    OriginTransverseErrorMultiplier = cms.double(1),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedMomentumForBOFF = cms.double(5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    forceKinematicWithRegionDirection = cms.bool(False),
    magneticField = cms.string(''),
    mightGet = cms.optional.untracked.vstring,
    propagator = cms.string('PropagatorWithMaterial'),
    seedingHitSets = cms.InputTag("pixelPairElectronHitDoublets")
)


process.pixelPairElectronTrackingRegions = cms.EDProducer("GlobalTrackingRegionWithVerticesEDProducer",
    RegionPSet = cms.PSet(
        VertexCollection = cms.InputTag("firstStepPrimaryVertices"),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        fixedError = cms.double(0.03),
        halfLengthScaling4BigEvts = cms.bool(False),
        maxNVertices = cms.int32(-1),
        maxPtMin = cms.double(1000),
        minHalfLength = cms.double(0),
        minOriginR = cms.double(0),
        nSigmaZ = cms.double(4),
        originRScaling4BigEvts = cms.bool(False),
        originRadius = cms.double(0.015),
        pixelClustersForScaling = cms.InputTag("siPixelClusters"),
        precise = cms.bool(True),
        ptMin = cms.double(1.0),
        ptMinScaling4BigEvts = cms.bool(False),
        scalingEndNPix = cms.double(1),
        scalingStartNPix = cms.double(0),
        sigmaZVertex = cms.double(3),
        useFakeVertices = cms.bool(False),
        useFixedError = cms.bool(True),
        useFoundVertices = cms.bool(True),
        useMultipleScattering = cms.bool(False)
    ),
    mightGet = cms.optional.untracked.vstring
)


process.pixelPairStep = cms.EDProducer("TrackMVAClassifierPrompt",
    beamspot = cms.InputTag("offlineBeamSpot"),
    ignoreVertices = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    mva = cms.PSet(
        GBRForestFileName = cms.string(''),
        GBRForestLabel = cms.string('MVASelectorIter2_13TeV')
    ),
    qualityCuts = cms.vdouble(-0.2, 0.0, 0.3),
    src = cms.InputTag("pixelPairStepTracks"),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.pixelPairStepClusters = cms.EDProducer("TrackClusterRemoverPhase2",
    TrackQuality = cms.string('highPurity'),
    maxChi2 = cms.double(9.0),
    mightGet = cms.optional.untracked.vstring,
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    oldClusterRemovalInfo = cms.InputTag("detachedQuadStepClusters"),
    overrideTrkQuals = cms.InputTag("detachedQuadStep"),
    phase2OTClusters = cms.InputTag("siPhase2Clusters"),
    phase2pixelClusters = cms.InputTag("siPixelClusters"),
    trackClassifier = cms.InputTag("","QualityMasks"),
    trajectories = cms.InputTag("detachedQuadStepTracks")
)


process.pixelPairStepHitDoublets = cms.EDProducer("HitPairEDProducer",
    clusterCheck = cms.InputTag("trackerClusterCheck"),
    layerPairs = cms.vuint32(0),
    maxElement = cms.uint32(0),
    maxElementTotal = cms.uint32(12000000),
    mightGet = cms.optional.untracked.vstring,
    produceIntermediateHitDoublets = cms.bool(False),
    produceSeedingHitSets = cms.bool(True),
    seedingLayers = cms.InputTag("pixelPairStepSeedLayers"),
    trackingRegions = cms.InputTag("pixelPairStepTrackingRegions"),
    trackingRegionsSeedingLayers = cms.InputTag("")
)


process.pixelPairStepHitDoubletsB = cms.EDProducer("HitPairEDProducer",
    clusterCheck = cms.InputTag("trackerClusterCheck"),
    layerPairs = cms.vuint32(0),
    maxElement = cms.uint32(0),
    maxElementTotal = cms.uint32(12000000),
    mightGet = cms.optional.untracked.vstring,
    produceIntermediateHitDoublets = cms.bool(False),
    produceSeedingHitSets = cms.bool(True),
    seedingLayers = cms.InputTag(""),
    trackingRegions = cms.InputTag(""),
    trackingRegionsSeedingLayers = cms.InputTag("pixelPairStepTrackingRegionsSeedLayersB")
)


process.pixelPairStepMasks = cms.EDProducer("FastTrackerRecHitMaskProducer",
    TrackQuality = cms.string('highPurity'),
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    minNumberOfLayersWithMeasBeforeFiltering_ = cms.int32(0),
    oldHitRemovalInfo = cms.InputTag("detachedQuadStepMasks"),
    recHits = cms.InputTag("fastTrackerRecHits"),
    trackClassifier = cms.InputTag("","QualityMasks"),
    trackQuality = cms.string('hightPurity'),
    trajectories = cms.InputTag("detachedQuadStepTracks")
)


process.pixelPairStepSeedClusterMask = cms.EDProducer("SeedClusterRemoverPhase2",
    oldClusterRemovalInfo = cms.InputTag("highPtTripletStepSeedClusterMask"),
    phase2OTClusters = cms.InputTag("siPhase2Clusters"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    trajectories = cms.InputTag("detachedQuadStepSeeds")
)


process.pixelPairStepSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelPairs'),
        hitErrorRPhi = cms.double(0.0016),
        hitErrorRZ = cms.double(0.0035),
        skipClusters = cms.InputTag("pixelPairStepClusters"),
        useErrorsFromParam = cms.bool(True)
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelPairs'),
        hitErrorRPhi = cms.double(0.003),
        hitErrorRZ = cms.double(0.002),
        skipClusters = cms.InputTag("pixelPairStepClusters"),
        useErrorsFromParam = cms.bool(True)
    ),
    layerList = cms.vstring(
        'BPix1+BPix2', 
        'BPix1+BPix3', 
        'BPix2+BPix3', 
        'BPix1+FPix1_pos', 
        'BPix1+FPix1_neg', 
        'BPix2+FPix1_pos', 
        'BPix2+FPix1_neg'
    )
)


process.pixelPairStepSeeds = cms.EDProducer("SeedCreatorFromRegionConsecutiveHitsEDProducer",
    MinOneOverPtError = cms.double(1),
    OriginTransverseErrorMultiplier = cms.double(1),
    SeedComparitorPSet = cms.PSet(
        ClusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
        ClusterShapeHitFilterName = cms.string('ClusterShapeHitFilter'),
        ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
        FilterAtHelixStage = cms.bool(True),
        FilterPixelHits = cms.bool(True),
        FilterStripHits = cms.bool(False)
    ),
    SeedMomentumForBOFF = cms.double(5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    forceKinematicWithRegionDirection = cms.bool(False),
    magneticField = cms.string(''),
    mightGet = cms.optional.untracked.vstring,
    propagator = cms.string('PropagatorWithMaterial'),
    seedingHitSets = cms.InputTag("pixelPairStepHitDoublets")
)


process.pixelPairStepSeedsA = cms.EDProducer("SeedCreatorFromRegionConsecutiveHitsEDProducer",
    MinOneOverPtError = cms.double(1),
    OriginTransverseErrorMultiplier = cms.double(1),
    SeedComparitorPSet = cms.PSet(
        ClusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
        ClusterShapeHitFilterName = cms.string('ClusterShapeHitFilter'),
        ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
        FilterAtHelixStage = cms.bool(True),
        FilterPixelHits = cms.bool(True),
        FilterStripHits = cms.bool(False)
    ),
    SeedMomentumForBOFF = cms.double(5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    forceKinematicWithRegionDirection = cms.bool(False),
    magneticField = cms.string(''),
    mightGet = cms.optional.untracked.vstring,
    propagator = cms.string('PropagatorWithMaterial'),
    seedingHitSets = cms.InputTag("pixelPairStepHitDoublets")
)


process.pixelPairStepSeedsB = cms.EDProducer("SeedCreatorFromRegionConsecutiveHitsEDProducer",
    MinOneOverPtError = cms.double(1),
    OriginTransverseErrorMultiplier = cms.double(1),
    SeedComparitorPSet = cms.PSet(
        ClusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
        ClusterShapeHitFilterName = cms.string('ClusterShapeHitFilter'),
        ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
        FilterAtHelixStage = cms.bool(True),
        FilterPixelHits = cms.bool(True),
        FilterStripHits = cms.bool(False)
    ),
    SeedMomentumForBOFF = cms.double(5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    forceKinematicWithRegionDirection = cms.bool(False),
    magneticField = cms.string(''),
    mightGet = cms.optional.untracked.vstring,
    propagator = cms.string('PropagatorWithMaterial'),
    seedingHitSets = cms.InputTag("pixelPairStepHitDoubletsB")
)


process.pixelPairStepSelector = cms.EDProducer("MultiTrackSelector",
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("pixelPairStepTracks"),
    trackSelectors = cms.VPSet(
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.7),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.4, 4.0),
            d0_par2 = cms.vdouble(0.6, 4.0),
            dz_par1 = cms.vdouble(0.4, 4.0),
            dz_par2 = cms.vdouble(0.45, 4.0),
            keepAllTracks = cms.bool(False),
            maxNumberLostLayers = cms.uint32(2),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('pixelPairStepLoose'),
            preFilterName = cms.string(''),
            qualityBit = cms.string('loose'),
            res_par = cms.vdouble(0.003, 0.002),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.6),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.35, 4.0),
            d0_par2 = cms.vdouble(0.5, 4.0),
            dz_par1 = cms.vdouble(0.35, 4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(4),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('pixelPairStepTight'),
            preFilterName = cms.string('pixelPairStepLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.002),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.5),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.3, 4.0),
            d0_par2 = cms.vdouble(0.45, 4.0),
            dz_par1 = cms.vdouble(0.3, 4.0),
            dz_par2 = cms.vdouble(0.35, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(4),
            minNumberLayers = cms.uint32(5),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('pixelPairStep'),
            preFilterName = cms.string('pixelPairStepTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        )
    ),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(False),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.pixelPairStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('pixelPairStepTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('pixelPairStepTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    numHitsForSeedCleaner = cms.int32(50),
    onlyPixelHitsForSeedCleaner = cms.bool(True),
    phase2clustersToSkip = cms.InputTag("pixelPairStepClusters"),
    reverseTrajectories = cms.bool(False),
    src = cms.InputTag("pixelPairStepSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.pixelPairStepTrackingRegions = cms.EDProducer("GlobalTrackingRegionWithVerticesEDProducer",
    RegionPSet = cms.PSet(
        VertexCollection = cms.InputTag("firstStepPrimaryVertices"),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        fixedError = cms.double(0.03),
        halfLengthScaling4BigEvts = cms.bool(False),
        maxNVertices = cms.int32(5),
        maxPtMin = cms.double(1000),
        minHalfLength = cms.double(0),
        minOriginR = cms.double(0),
        nSigmaZ = cms.double(4),
        originRScaling4BigEvts = cms.bool(False),
        originRadius = cms.double(0.015),
        pixelClustersForScaling = cms.InputTag("siPixelClusters"),
        precise = cms.bool(True),
        ptMin = cms.double(0.6),
        ptMinScaling4BigEvts = cms.bool(False),
        scalingEndNPix = cms.double(1),
        scalingStartNPix = cms.double(0),
        sigmaZVertex = cms.double(3),
        useFakeVertices = cms.bool(False),
        useFixedError = cms.bool(True),
        useFoundVertices = cms.bool(True),
        useMultipleScattering = cms.bool(False)
    ),
    mightGet = cms.optional.untracked.vstring
)


process.pixelPairStepTrackingRegionsSeedLayersB = cms.EDProducer("PixelInactiveAreaTrackingRegionsSeedingLayersProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("pixelPairStepClusters")
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("pixelPairStepClusters")
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    RegionPSet = cms.PSet(
        beamSpot = cms.InputTag("offlineBeamSpot"),
        deltaEta_Cand = cms.double(-1),
        deltaPhi_Cand = cms.double(-1),
        extraEta = cms.double(0),
        extraPhi = cms.double(0),
        input = cms.InputTag(""),
        maxNVertices = cms.int32(5),
        measurementTrackerName = cms.InputTag(""),
        nSigmaZBeamSpot = cms.double(4),
        nSigmaZVertex = cms.double(3),
        operationMode = cms.string('VerticesFixed'),
        originRadius = cms.double(0.015),
        precise = cms.bool(True),
        ptMin = cms.double(0.6),
        searchOpt = cms.bool(False),
        seedingMode = cms.string('Global'),
        vertexCollection = cms.InputTag("firstStepPrimaryVertices"),
        whereToUseMeasurementTracker = cms.string('Never'),
        zErrorBeamSpot = cms.double(24.2),
        zErrorVertex = cms.double(0.03)
    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    badPixelFEDChannelCollectionLabels = cms.VInputTag("siPixelDigis"),
    createPlottingFiles = cms.untracked.bool(False),
    debug = cms.untracked.bool(False),
    ignoreSingleFPixPanelModules = cms.bool(True),
    inactivePixelDetectorLabels = cms.VInputTag("siPixelDigis"),
    layerList = cms.vstring(
        'BPix1+BPix4', 
        'BPix2+BPix4', 
        'BPix3+BPix4', 
        'BPix1+FPix2_pos', 
        'BPix1+FPix2_neg', 
        'BPix1+FPix3_pos', 
        'BPix1+FPix3_neg', 
        'BPix2+FPix2_pos', 
        'BPix2+FPix2_neg', 
        'BPix3+FPix1_pos', 
        'BPix3+FPix1_neg', 
        'FPix1_pos+FPix2_pos', 
        'FPix1_neg+FPix2_neg', 
        'FPix1_pos+FPix3_pos', 
        'FPix1_neg+FPix3_neg', 
        'FPix2_pos+FPix3_pos', 
        'FPix2_neg+FPix3_neg'
    ),
    mightGet = cms.optional.untracked.vstring
)


process.pixelPairStepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('pixelPairStep'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("pixelPairStepTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.pixelTrackFilterByKinematics = cms.EDProducer("PixelTrackFilterByKinematicsProducer",
    chi2 = cms.double(1000),
    mightGet = cms.optional.untracked.vstring,
    nSigmaInvPtTolerance = cms.double(0),
    nSigmaTipMaxTolerance = cms.double(0),
    ptMin = cms.double(0.1),
    tipMax = cms.double(1)
)


process.pixelTracks = cms.EDProducer("PixelTrackProducer",
    Cleaner = cms.string('pixelTrackCleanerBySharedHits'),
    Filter = cms.InputTag("pixelTrackFilterByKinematics"),
    Fitter = cms.InputTag("pixelFitterByHelixProjections"),
    SeedingHitSets = cms.InputTag("pixelTracksHitQuadruplets"),
    mightGet = cms.optional.untracked.vstring,
    passLabel = cms.string('pixelTracks')
)


process.pixelTracksHitDoublets = cms.EDProducer("HitPairEDProducer",
    clusterCheck = cms.InputTag(""),
    layerPairs = cms.vuint32(0, 1, 2),
    maxElement = cms.uint32(50000000),
    maxElementTotal = cms.uint32(50000000),
    mightGet = cms.optional.untracked.vstring,
    produceIntermediateHitDoublets = cms.bool(True),
    produceSeedingHitSets = cms.bool(False),
    seedingLayers = cms.InputTag("pixelTracksSeedLayers"),
    trackingRegions = cms.InputTag("pixelTracksTrackingRegions"),
    trackingRegionsSeedingLayers = cms.InputTag("")
)


process.pixelTracksHitQuadruplets = cms.EDProducer("CAHitQuadrupletEDProducer",
    CAHardPtCut = cms.double(0),
    CAOnlyOneLastHitPerLayerFilter = cms.optional.bool,
    CAPhiCut = cms.double(0.2),
    CAThetaCut = cms.double(0.0012),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('LowPtClusterShapeSeedComparitor'),
        clusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCachePreSplitting"),
        clusterShapeHitFilter = cms.string('ClusterShapeHitFilter')
    ),
    doublets = cms.InputTag("pixelTracksHitDoublets"),
    extraHitRPhitolerance = cms.double(0.032),
    fitFastCircle = cms.bool(True),
    fitFastCircleChi2Cut = cms.bool(True),
    maxChi2 = cms.PSet(
        enabled = cms.bool(True),
        pt1 = cms.double(0.7),
        pt2 = cms.double(2),
        value1 = cms.double(200),
        value2 = cms.double(50)
    ),
    mightGet = cms.optional.untracked.vstring,
    useBendingCorrection = cms.bool(True)
)


process.pixelTracksHitTriplets = cms.EDProducer("PixelTripletHLTEDProducer",
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('LowPtClusterShapeSeedComparitor'),
        clusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCachePreSplitting"),
        clusterShapeHitFilter = cms.string('ClusterShapeHitFilter')
    ),
    doublets = cms.InputTag("pixelTracksHitDoublets"),
    extraHitRPhitolerance = cms.double(0.032),
    extraHitRZtolerance = cms.double(0.037),
    maxElement = cms.uint32(0),
    mightGet = cms.optional.untracked.vstring,
    phiPreFiltering = cms.double(0.3),
    produceIntermediateHitTriplets = cms.bool(False),
    produceSeedingHitSets = cms.bool(True),
    useBending = cms.bool(True),
    useFixedPreFiltering = cms.bool(False),
    useMultScattering = cms.bool(True)
)


process.pixelTracksSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHitsPreSplitting'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHitsPreSplitting'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring(
        'BPix1+BPix2+BPix3+BPix4', 
        'BPix1+BPix2+BPix3+FPix1_pos', 
        'BPix1+BPix2+BPix3+FPix1_neg', 
        'BPix1+BPix2+FPix1_pos+FPix2_pos', 
        'BPix1+BPix2+FPix1_neg+FPix2_neg', 
        'BPix1+FPix1_pos+FPix2_pos+FPix3_pos', 
        'BPix1+FPix1_neg+FPix2_neg+FPix3_neg', 
        'FPix1_pos+FPix2_pos+FPix3_pos+FPix4_pos', 
        'FPix1_neg+FPix2_neg+FPix3_neg+FPix4_neg', 
        'FPix2_pos+FPix3_pos+FPix4_pos+FPix5_pos', 
        'FPix2_neg+FPix3_neg+FPix4_neg+FPix5_neg', 
        'FPix3_pos+FPix4_pos+FPix5_pos+FPix6_pos', 
        'FPix3_neg+FPix4_neg+FPix5_neg+FPix6_neg', 
        'FPix4_pos+FPix5_pos+FPix6_pos+FPix7_pos', 
        'FPix4_neg+FPix5_neg+FPix6_neg+FPix7_neg', 
        'FPix5_pos+FPix6_pos+FPix7_pos+FPix8_pos', 
        'FPix5_neg+FPix6_neg+FPix7_neg+FPix8_neg'
    ),
    mightGet = cms.optional.untracked.vstring
)


process.pixelTracksTrackingRegions = cms.EDProducer("GlobalTrackingRegionEDProducer",
    RegionPSet = cms.PSet(
        originHalfLength = cms.double(21.2),
        originRadius = cms.double(0.2),
        originXPos = cms.double(0),
        originYPos = cms.double(0),
        originZPos = cms.double(0),
        precise = cms.bool(True),
        ptMin = cms.double(0.9),
        useMultipleScattering = cms.bool(False)
    ),
    mightGet = cms.optional.untracked.vstring
)


process.pixelVertices = cms.EDProducer("PrimaryVertexProducer",
    TkClusParameters = cms.PSet(
        TkDAClusParameters = cms.PSet(
            Tmin = cms.double(2.4),
            Tpurge = cms.double(2.0),
            Tstop = cms.double(0.5),
            coolingFactor = cms.double(0.6),
            d0CutOff = cms.double(3.0),
            dzCutOff = cms.double(4.0),
            uniquetrkweight = cms.double(0.9),
            vertexSize = cms.double(0.01),
            zmerge = cms.double(0.01)
        ),
        algorithm = cms.string('DA_vect')
    ),
    TkFilterParameters = cms.PSet(
        algorithm = cms.string('filter'),
        maxD0Significance = cms.double(100.0),
        maxEta = cms.double(100.0),
        maxNormalizedChi2 = cms.double(100.0),
        minPixelLayersWithHits = cms.int32(3),
        minPt = cms.double(0.0),
        minSiliconLayersWithHits = cms.int32(3),
        trackQuality = cms.string('any')
    ),
    TrackLabel = cms.InputTag("pixelTracks"),
    beamSpotLabel = cms.InputTag("offlineBeamSpot"),
    verbose = cms.untracked.bool(False),
    vertexCollections = cms.VPSet(cms.PSet(
        algorithm = cms.string('AdaptiveVertexFitter'),
        chi2cutoff = cms.double(3.0),
        label = cms.string(''),
        maxDistanceToBeam = cms.double(2.0),
        minNdof = cms.double(2.0),
        useBeamConstraint = cms.bool(False)
    ))
)


process.positiveCombinedInclusiveSecondaryVertexV2BJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('positiveCombinedSecondaryVertexV2Computer'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("inclusiveSecondaryVertexFinderTagInfos"))
)


process.positiveCombinedMVAV2BJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('positiveCombinedMVAV2Computer'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("secondaryVertexPositiveTagInfos"), cms.InputTag("inclusiveSecondaryVertexFinderPositiveTagInfos"), cms.InputTag("softPFMuonsTagInfos"), cms.InputTag("softPFElectronsTagInfos"))
)


process.positiveCombinedSecondaryVertexV2BJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('positiveCombinedSecondaryVertexV2Computer'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("secondaryVertexTagInfos"))
)


process.positiveOnlyJetBProbabilityBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('positiveOnlyJetBProbabilityComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.positiveOnlyJetProbabilityBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('positiveOnlyJetProbabilityComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.positiveSoftPFElectronBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('positiveSoftPFElectronComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFElectronsTagInfos"))
)


process.positiveSoftPFElectronByIP2dBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('positiveSoftPFElectronByIP2dComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFElectronsTagInfos"))
)


process.positiveSoftPFElectronByIP3dBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('positiveSoftPFElectronByIP3dComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFElectronsTagInfos"))
)


process.positiveSoftPFElectronByPtBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('positiveSoftPFElectronByPtComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFElectronsTagInfos"))
)


process.positiveSoftPFMuonBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('positiveSoftPFMuonComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFMuonsTagInfos"))
)


process.positiveSoftPFMuonByIP2dBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('positiveSoftPFMuonByIP2dComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFMuonsTagInfos"))
)


process.positiveSoftPFMuonByIP3dBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('positiveSoftPFMuonByIP3dComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFMuonsTagInfos"))
)


process.positiveSoftPFMuonByPtBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('positiveSoftPFMuonByPtComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFMuonsTagInfos"))
)


process.preDuplicateMergingDisplacedTracks = cms.EDProducer("TrackCollectionMerger",
    allowFirstHitShare = cms.bool(True),
    copyExtras = cms.untracked.bool(True),
    copyTrajectories = cms.untracked.bool(False),
    enableMerging = cms.bool(True),
    foundHitBonus = cms.double(100.0),
    inputClassifiers = cms.vstring('muonSeededTracksOutInDisplacedClassifier'),
    lostHitPenalty = cms.double(1.0),
    mightGet = cms.optional.untracked.vstring,
    minQuality = cms.string('loose'),
    minShareHits = cms.uint32(2),
    shareFrac = cms.double(0.19),
    trackAlgoPriorityOrder = cms.string('trackAlgoPriorityOrder'),
    trackProducers = cms.VInputTag("muonSeededTracksOutInDisplaced")
)


process.preDuplicateMergingGeneralTracks = cms.EDProducer("TrackListMerger",
    Epsilon = cms.double(-0.001),
    FoundHitBonus = cms.double(100.0),
    LostHitPenalty = cms.double(1.0),
    MaxNormalizedChisq = cms.double(1000.0),
    MinFound = cms.int32(3),
    MinPT = cms.double(0.05),
    ShareFrac = cms.double(0.19),
    TrackProducers = cms.VInputTag(cms.InputTag("earlyGeneralTracks"), cms.InputTag("muonSeededTracksInOut"), cms.InputTag("muonSeededTracksOutIn")),
    allowFirstHitShare = cms.bool(True),
    copyExtras = cms.untracked.bool(True),
    copyMVA = cms.bool(True),
    hasSelector = cms.vint32(0, 1, 1),
    indivShareFrac = cms.vdouble(
        1.0, 0.16, 0.095, 0.09, 0.095, 
        0.095, 0.095, 0.08
    ),
    makeReKeyedSeeds = cms.untracked.bool(False),
    mvaValueTags = cms.VInputTag(cms.InputTag("earlyGeneralTracks","MVAVals"), cms.InputTag("muonSeededTracksInOutSelector","MVAVals"), cms.InputTag("muonSeededTracksOutInSelector","MVAVals")),
    newQuality = cms.string('confirmed'),
    selectedTrackQuals = cms.VInputTag(cms.InputTag("muonSeededTracksInOutSelector","muonSeededTracksInOutHighPurity"), cms.InputTag("muonSeededTracksInOutSelector","muonSeededTracksInOutHighPurity"), cms.InputTag("muonSeededTracksOutInSelector","muonSeededTracksOutInHighPurity")),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(False),
        tLists = cms.vint32(0, 1, 2)
    )),
    trackAlgoPriorityOrder = cms.string('trackAlgoPriorityOrder'),
    writeOnlyTrkQuals = cms.bool(False)
)


process.primaryVertexAssociation = cms.EDProducer("PFCandidatePrimaryVertexSorter",
    assignment = cms.PSet(
        maxDistanceToJetAxis = cms.double(0.07),
        maxDtSigForPrimaryAssignment = cms.double(3.0),
        maxDxyForJetAxisAssigment = cms.double(0.1),
        maxDxyForNotReconstructedPrimary = cms.double(0.01),
        maxDxySigForNotReconstructedPrimary = cms.double(2),
        maxDzErrorForPrimaryAssignment = cms.double(0.05),
        maxDzForJetAxisAssigment = cms.double(0.1),
        maxDzForPrimaryAssignment = cms.double(0.1),
        maxDzSigForPrimaryAssignment = cms.double(5.0),
        maxJetDeltaR = cms.double(0.5),
        minJetPt = cms.double(25),
        preferHighRanked = cms.bool(False),
        useTiming = cms.bool(False)
    ),
    jets = cms.InputTag("ak4PFJets"),
    particles = cms.InputTag("particleFlow"),
    produceAssociationToOriginalVertices = cms.bool(True),
    produceNoPileUpCollection = cms.bool(False),
    producePileUpCollection = cms.bool(False),
    produceSortedVertices = cms.bool(False),
    qualityForPrimary = cms.int32(2),
    sorting = cms.PSet(

    ),
    usePVMET = cms.bool(True),
    vertices = cms.InputTag("offlinePrimaryVertices")
)


process.puppi = cms.EDProducer("PuppiProducer",
    DeltaZCut = cms.double(0.1),
    DeltaZCutForChargedFromPUVtxs = cms.double(0.2),
    EtaMaxCharged = cms.double(99999.0),
    EtaMaxPhotons = cms.double(2.5),
    EtaMinUseDeltaZ = cms.double(-1.0),
    MinPuppiWeight = cms.double(0.01),
    NumOfPUVtxsForCharged = cms.uint32(0),
    PUProxyValue = cms.InputTag(""),
    PtMaxCharged = cms.double(-1.0),
    PtMaxNeutrals = cms.double(200.0),
    PtMaxNeutralsStartSlope = cms.double(0.0),
    PtMaxPhotons = cms.double(-1.0),
    UseDeltaZCut = cms.bool(True),
    UseFromPVLooseTight = cms.bool(False),
    algos = cms.VPSet(
        cms.PSet(
            EtaMaxExtrap = cms.double(2.0),
            MedEtaSF = cms.vdouble(1.0, 1.0),
            MinNeutralPt = cms.vdouble(0.2, 0.2),
            MinNeutralPtSlope = cms.vdouble(0.015, 0.03),
            RMSEtaSF = cms.vdouble(1.0, 1.0),
            etaMax = cms.vdouble(2.5, 3.5),
            etaMin = cms.vdouble(0.0, 2.5),
            ptMin = cms.vdouble(0.0, 0.0),
            puppiAlgos = cms.VPSet(cms.PSet(
                algoId = cms.int32(5),
                applyLowPUCorr = cms.bool(True),
                combOpt = cms.int32(0),
                cone = cms.double(0.4),
                rmsPtMin = cms.double(0.1),
                rmsScaleFactor = cms.double(1.0),
                useCharged = cms.bool(True)
            ))
        ), 
        cms.PSet(
            EtaMaxExtrap = cms.double(2.0),
            MedEtaSF = cms.vdouble(0.75),
            MinNeutralPt = cms.vdouble(2.0),
            MinNeutralPtSlope = cms.vdouble(0.08),
            RMSEtaSF = cms.vdouble(1.0),
            etaMax = cms.vdouble(10.0),
            etaMin = cms.vdouble(3.5),
            ptMin = cms.vdouble(0.0),
            puppiAlgos = cms.VPSet(cms.PSet(
                algoId = cms.int32(5),
                applyLowPUCorr = cms.bool(True),
                combOpt = cms.int32(0),
                cone = cms.double(0.4),
                rmsPtMin = cms.double(0.5),
                rmsScaleFactor = cms.double(1.0),
                useCharged = cms.bool(False)
            ))
        )
    ),
    applyCHS = cms.bool(True),
    candName = cms.InputTag("particleFlow"),
    clonePackedCands = cms.bool(False),
    invertPuppi = cms.bool(False),
    puppiDiagnostics = cms.bool(False),
    puppiNoLep = cms.bool(False),
    useExistingWeights = cms.bool(False),
    useExp = cms.bool(False),
    usePUProxyValue = cms.bool(False),
    vertexName = cms.InputTag("offlinePrimaryVertices"),
    vtxNdofCut = cms.int32(4),
    vtxZCut = cms.double(24)
)


process.puppiNoLep = cms.EDProducer("PuppiProducer",
    DeltaZCut = cms.double(0.1),
    DeltaZCutForChargedFromPUVtxs = cms.double(0.2),
    EtaMaxCharged = cms.double(99999.0),
    EtaMaxPhotons = cms.double(2.5),
    EtaMinUseDeltaZ = cms.double(-1.0),
    MinPuppiWeight = cms.double(0.01),
    NumOfPUVtxsForCharged = cms.uint32(0),
    PUProxyValue = cms.InputTag(""),
    PtMaxCharged = cms.double(-1.0),
    PtMaxNeutrals = cms.double(200.0),
    PtMaxNeutralsStartSlope = cms.double(0.0),
    PtMaxPhotons = cms.double(20.0),
    UseDeltaZCut = cms.bool(True),
    UseFromPVLooseTight = cms.bool(False),
    algos = cms.VPSet(
        cms.PSet(
            EtaMaxExtrap = cms.double(2.0),
            MedEtaSF = cms.vdouble(1.0, 1.0),
            MinNeutralPt = cms.vdouble(0.2, 0.2),
            MinNeutralPtSlope = cms.vdouble(0.015, 0.03),
            RMSEtaSF = cms.vdouble(1.0, 1.0),
            etaMax = cms.vdouble(2.5, 3.5),
            etaMin = cms.vdouble(0.0, 2.5),
            ptMin = cms.vdouble(0.0, 0.0),
            puppiAlgos = cms.VPSet(cms.PSet(
                algoId = cms.int32(5),
                applyLowPUCorr = cms.bool(True),
                combOpt = cms.int32(0),
                cone = cms.double(0.4),
                rmsPtMin = cms.double(0.1),
                rmsScaleFactor = cms.double(1.0),
                useCharged = cms.bool(True)
            ))
        ), 
        cms.PSet(
            EtaMaxExtrap = cms.double(2.0),
            MedEtaSF = cms.vdouble(0.75),
            MinNeutralPt = cms.vdouble(2.0),
            MinNeutralPtSlope = cms.vdouble(0.08),
            RMSEtaSF = cms.vdouble(1.0),
            etaMax = cms.vdouble(10.0),
            etaMin = cms.vdouble(3.5),
            ptMin = cms.vdouble(0.0),
            puppiAlgos = cms.VPSet(cms.PSet(
                algoId = cms.int32(5),
                applyLowPUCorr = cms.bool(True),
                combOpt = cms.int32(0),
                cone = cms.double(0.4),
                rmsPtMin = cms.double(0.5),
                rmsScaleFactor = cms.double(1.0),
                useCharged = cms.bool(False)
            ))
        )
    ),
    applyCHS = cms.bool(True),
    candName = cms.InputTag("particleFlow"),
    clonePackedCands = cms.bool(False),
    invertPuppi = cms.bool(False),
    puppiDiagnostics = cms.bool(False),
    puppiNoLep = cms.bool(True),
    useExistingWeights = cms.bool(False),
    useExp = cms.bool(False),
    usePUProxyValue = cms.bool(False),
    vertexName = cms.InputTag("offlinePrimaryVertices"),
    vtxNdofCut = cms.int32(4),
    vtxZCut = cms.double(24)
)


process.quickTrackAssociatorByHits = cms.EDProducer("QuickTrackAssociatorByHitsProducer",
    AbsoluteNumberOfHits = cms.bool(False),
    Cut_RecoToSim = cms.double(0.75),
    PixelHitWeight = cms.double(1.0),
    Purity_SimToReco = cms.double(0.75),
    Quality_SimToReco = cms.double(0.5),
    SimToRecoDenominator = cms.string('reco'),
    ThreeHitTracksAreSpecial = cms.bool(True),
    cluster2TPSrc = cms.InputTag("tpClusterProducer"),
    useClusterTPAssociation = cms.bool(True)
)


process.quickTrackAssociatorByHitsTrackerHitAssociator = cms.EDProducer("QuickTrackAssociatorByHitsProducer",
    AbsoluteNumberOfHits = cms.bool(False),
    Cut_RecoToSim = cms.double(0.75),
    PixelHitWeight = cms.double(1.0),
    Purity_SimToReco = cms.double(0.75),
    Quality_SimToReco = cms.double(0.5),
    SimToRecoDenominator = cms.string('reco'),
    ThreeHitTracksAreSpecial = cms.bool(True),
    associatePixel = cms.bool(True),
    associateStrip = cms.bool(True),
    cluster2TPSrc = cms.InputTag("tpClusterProducer"),
    pixelSimLinkSrc = cms.InputTag("simSiPixelDigis"),
    stripSimLinkSrc = cms.InputTag("simSiStripDigis"),
    useClusterTPAssociation = cms.bool(False)
)


process.randomEngineStateProducer = cms.EDProducer("RandomEngineStateProducer")


process.recoTauAK4PFJets08Region = cms.EDProducer("RecoTauJetRegionProducer",
    deltaR = cms.double(0.8),
    maxJetAbsEta = cms.double(4.0),
    minJetPt = cms.double(14.0),
    pfCandAssocMapSrc = cms.InputTag(""),
    pfCandSrc = cms.InputTag("particleFlow"),
    src = cms.InputTag("ak4PFJets"),
    verbosity = cms.int32(0)
)


process.recoTauDiscriminantCutMultiplexerDefault = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    PFTauProducer = cms.InputTag("fixme"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('AND'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("fixme"),
            cut = cms.double(0)
        ),
        leadTrack = cms.PSet(
            Producer = cms.InputTag("fixme"),
            cut = cms.double(0)
        )
    ),
    inputFileName = cms.FileInPath('RecoTauTag/RecoTau/data/emptyMVAinputFile'),
    loadMVAfromDB = cms.bool(True),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.string('fixme')
    )),
    mightGet = cms.optional.untracked.vstring,
    mvaOutput_normalization = cms.string(''),
    rawValues = cms.vstring('discriminator'),
    toMultiplex = cms.InputTag("fixme"),
    verbosity = cms.int32(0),
    workingPoints = cms.vdouble(0)
)


process.reducedEcalRecHitsEB = cms.EDProducer("ReducedRecHitCollectionProducer",
    interestingDetIdCollections = cms.VInputTag(
        cms.InputTag("interestingEcalDetIdEB"), cms.InputTag("interestingEcalDetIdEBU"), cms.InputTag("interestingEcalDetIdPFEB"), cms.InputTag("interestingEcalDetIdRefinedEB"), cms.InputTag("interestingEcalDetIdOOTPFEB"), 
        cms.InputTag("interestingGedEleIsoDetIdEB"), cms.InputTag("interestingGedGamIsoDetIdEB"), cms.InputTag("interestingOotGamIsoDetIdEB"), cms.InputTag("interestingGamIsoDetIdEB"), cms.InputTag("muonEcalDetIds"), 
        cms.InputTag("interestingTrackEcalDetIds")
    ),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    reducedHitsCollection = cms.string('')
)


process.reducedEcalRecHitsEE = cms.EDProducer("ReducedRecHitCollectionProducer",
    interestingDetIdCollections = cms.VInputTag(
        cms.InputTag("interestingEcalDetIdEE"), cms.InputTag("interestingEcalDetIdPFEE"), cms.InputTag("interestingEcalDetIdRefinedEE"), cms.InputTag("interestingEcalDetIdOOTPFEE"), cms.InputTag("interestingGedEleIsoDetIdEE"), 
        cms.InputTag("interestingGedGamIsoDetIdEE"), cms.InputTag("interestingOotGamIsoDetIdEE"), cms.InputTag("interestingGamIsoDetIdEE"), cms.InputTag("muonEcalDetIds"), cms.InputTag("interestingTrackEcalDetIds")
    ),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    reducedHitsCollection = cms.string('')
)


process.reducedEcalRecHitsES = cms.EDProducer("ReducedESRecHitCollectionProducer",
    EcalRecHitCollectionES = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    EndcapSuperClusterCollection = cms.InputTag("correctedMulti5x5SuperClustersWithPreshower"),
    OutputLabel_ES = cms.string(''),
    interestingDetIds = cms.VInputTag(cms.InputTag("interestingEcalDetIdPFES"), cms.InputTag("interestingEcalDetIdRefinedES"), cms.InputTag("interestingEcalDetIdOOTPFES")),
    interestingDetIdsNotToClean = cms.VInputTag(cms.InputTag("interestingGedEgammaIsoESDetId"), cms.InputTag("interestingOotEgammaIsoESDetId")),
    scEtThreshold = cms.double(15)
)


process.reducedHcalRecHits = cms.EDProducer("HcalHitSelection",
    hbheTag = cms.InputTag("hbhereco"),
    hfTag = cms.InputTag("hfreco"),
    hoSeverityLevel = cms.int32(13),
    hoTag = cms.InputTag("horeco"),
    interestingDetIds = cms.VInputTag(cms.InputTag("interestingGedEgammaIsoHCALDetId"), cms.InputTag("interestingOotEgammaIsoHCALDetId"))
)


process.refittedStandAloneMuons = cms.EDProducer("StandAloneMuonProducer",
    InputObjects = cms.InputTag("ancientMuonSeed"),
    MuonTrajectoryBuilder = cms.string('Exhaustive'),
    STATrajBuilderParameters = cms.PSet(
        BWFilterParameters = cms.PSet(
            BWSeedType = cms.string('fromGenerator'),
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            EnableCSCMeasurement = cms.bool(True),
            EnableDTMeasurement = cms.bool(True),
            EnableGEMMeasurement = cms.bool(True),
            EnableME0Measurement = cms.bool(True),
            EnableRPCMeasurement = cms.bool(True),
            FitDirection = cms.string('outsideIn'),
            GEMRecSegmentLabel = cms.InputTag("gemRecHits"),
            ME0RecSegmentLabel = cms.InputTag("me0Segments"),
            MaxChi2 = cms.double(100.0),
            MuonTrajectoryUpdatorParameters = cms.PSet(
                ExcludeRPCFromFit = cms.bool(False),
                Granularity = cms.int32(0),
                MaxChi2 = cms.double(25.0),
                RescaleError = cms.bool(False),
                RescaleErrorFactor = cms.double(100.0),
                UseInvalidHits = cms.bool(True)
            ),
            NumberOfSigma = cms.double(3.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            RPCRecSegmentLabel = cms.InputTag("rpcRecHits")
        ),
        DoBackwardFilter = cms.bool(True),
        DoRefit = cms.bool(True),
        DoSeedRefit = cms.bool(False),
        FilterParameters = cms.PSet(
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            EnableCSCMeasurement = cms.bool(True),
            EnableDTMeasurement = cms.bool(True),
            EnableGEMMeasurement = cms.bool(True),
            EnableME0Measurement = cms.bool(True),
            EnableRPCMeasurement = cms.bool(True),
            FitDirection = cms.string('insideOut'),
            GEMRecSegmentLabel = cms.InputTag("gemRecHits"),
            ME0RecSegmentLabel = cms.InputTag("me0Segments"),
            MaxChi2 = cms.double(1000.0),
            MuonTrajectoryUpdatorParameters = cms.PSet(
                ExcludeRPCFromFit = cms.bool(False),
                Granularity = cms.int32(0),
                MaxChi2 = cms.double(25.0),
                RescaleError = cms.bool(False),
                RescaleErrorFactor = cms.double(100.0),
                UseInvalidHits = cms.bool(True)
            ),
            NumberOfSigma = cms.double(3.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            RPCRecSegmentLabel = cms.InputTag("rpcRecHits")
        ),
        NavigationType = cms.string('Standard'),
        RefitterParameters = cms.PSet(
            FitterName = cms.string('KFFitterSmootherSTA'),
            ForceAllIterations = cms.bool(False),
            MaxFractionOfLostHits = cms.double(0.05),
            NumberOfIterations = cms.uint32(3),
            RescaleError = cms.double(100.0)
        ),
        SeedPosition = cms.string('in'),
        SeedPropagator = cms.string('SteppingHelixPropagatorAny'),
        SeedTransformerParameters = cms.PSet(
            Fitter = cms.string('KFFitterSmootherSTA'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            NMinRecHits = cms.uint32(2),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            RescaleError = cms.double(100.0),
            UseSubRecHits = cms.bool(False)
        )
    ),
    ServiceParameters = cms.PSet(
        CSCLayers = cms.untracked.bool(True),
        GEMLayers = cms.untracked.bool(True),
        ME0Layers = cms.bool(True),
        Propagators = cms.untracked.vstring(
            'SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'
        ),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot")
    )
)


process.regionalCosmicCkfTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('CosmicNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('GroupedCkfTrajectoryBuilderP5')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    reverseTrajectories = cms.bool(False),
    src = cms.InputTag("regionalCosmicTrackerSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.regionalCosmicTrackerSeedingLayers = cms.EDProducer("SeedingLayersEDProducer",
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        maxRing = cms.int32(7),
        minRing = cms.int32(6),
        useRingSlector = cms.bool(False)
    ),
    TOB = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        )
    ),
    layerList = cms.vstring(
        'TOB6+TOB5', 
        'TOB6+TOB4', 
        'TOB6+TOB3', 
        'TOB5+TOB4', 
        'TOB5+TOB3', 
        'TOB4+TOB3', 
        'TEC1_neg+TOB6', 
        'TEC1_neg+TOB5', 
        'TEC1_neg+TOB4', 
        'TEC1_pos+TOB6', 
        'TEC1_pos+TOB5', 
        'TEC1_pos+TOB4'
    )
)


process.regionalCosmicTrackerSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(10000),
        MaxNumberOfPixelClusters = cms.uint32(10000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        doClusterCheck = cms.bool(False)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('GenericPairGenerator'),
        LayerSrc = cms.InputTag("regionalCosmicTrackerSeedingLayers")
    ),
    RegionFactoryPSet = cms.PSet(
        CollectionsPSet = cms.PSet(
            recoL2MuonsCollection = cms.InputTag(""),
            recoMuonsCollection = cms.InputTag(""),
            recoTrackMuonsCollection = cms.InputTag("cosmicMuons")
        ),
        ComponentName = cms.string('CosmicRegionalSeedGenerator'),
        RegionInJetsCheckPSet = cms.PSet(
            deltaRExclusionSize = cms.double(0.3),
            doJetsExclusionCheck = cms.bool(True),
            jetsPtMin = cms.double(5),
            recoCaloJetsCollection = cms.InputTag("ak4CaloJets")
        ),
        RegionPSet = cms.PSet(
            deltaEtaRegion = cms.double(0.1),
            deltaPhiRegion = cms.double(0.1),
            measurementTrackerName = cms.string(''),
            precise = cms.bool(True),
            ptMin = cms.double(1.0),
            rVertex = cms.double(5),
            zVertex = cms.double(5)
        ),
        ToolsPSet = cms.PSet(
            regionBase = cms.string('seedOnCosmicMuon'),
            thePropagatorName = cms.string('AnalyticalPropagator')
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('CosmicSeedCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        maxseeds = cms.int32(10000),
        propagator = cms.string('PropagatorWithMaterialParabolicMf')
    )
)


process.regionalCosmicTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('ctf'),
    Fitter = cms.string('FittingSmootherRKP5'),
    GeometricInnerState = cms.bool(True),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("regionalCosmicCkfTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.rpcCPPFRawToDigi = cms.EDProducer("RPCAMCRawToDigi",
    RPCAMCUnpacker = cms.string('RPCCPPFUnpacker'),
    RPCAMCUnpackerSettings = cms.PSet(
        bxMax = cms.int32(2),
        bxMin = cms.int32(-2),
        fillAMCCounters = cms.bool(True)
    ),
    calculateCRC = cms.bool(True),
    fillCounters = cms.bool(True),
    inputTag = cms.InputTag("rawDataCollector")
)


process.rpcRecHits = cms.EDProducer("RPCRecHitProducer",
    deadSource = cms.string('File'),
    deadvecfile = cms.FileInPath('RecoLocalMuon/RPCRecHit/data/RPCDeadVec.dat'),
    maskSource = cms.string('File'),
    maskvecfile = cms.FileInPath('RecoLocalMuon/RPCRecHit/data/RPCMaskVec.dat'),
    recAlgo = cms.string('RPCRecHitStandardAlgo'),
    recAlgoConfig = cms.PSet(

    ),
    rpcDigiLabel = cms.InputTag("simMuonRPCDigis")
)


process.rpcTriggerDigis = cms.EDProducer("RPCTrigger",
    RPCTriggerDebug = cms.untracked.int32(0),
    label = cms.string('muonRPCDigis')
)


process.rpcTwinMuxRawToDigi = cms.EDProducer("RPCTwinMuxRawToDigi",
    bxMax = cms.int32(2),
    bxMin = cms.int32(-2),
    calculateCRC = cms.bool(True),
    fillCounters = cms.bool(True),
    inputTag = cms.InputTag("rawDataCollector"),
    mightGet = cms.optional.untracked.vstring
)


process.scalersRawToDigi = cms.EDProducer("ScalersRawToDigi",
    mightGet = cms.optional.untracked.vstring,
    scalersInputTag = cms.InputTag("rawDataCollector")
)


process.secondaryVertexNegativeTagInfos = cms.EDProducer("SecondaryVertexProducer",
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    constraint = cms.string('BeamSpot'),
    extSVCollection = cms.InputTag("secondaryVertices"),
    extSVDeltaRToJet = cms.double(0.3),
    minimumTrackWeight = cms.double(0.5),
    trackIPTagInfos = cms.InputTag("impactParameterTagInfos"),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(2),
        ptMin = cms.double(1.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(8),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip3dSig'),
    useExternalSV = cms.bool(False),
    usePVError = cms.bool(True),
    vertexCuts = cms.PSet(
        distSig2dMax = cms.double(-3.0),
        distSig2dMin = cms.double(-99999.9),
        distSig3dMax = cms.double(99999.9),
        distSig3dMin = cms.double(-99999.9),
        distVal2dMax = cms.double(-0.01),
        distVal2dMin = cms.double(-2.5),
        distVal3dMax = cms.double(99999.9),
        distVal3dMin = cms.double(-99999.9),
        fracPV = cms.double(0.65),
        massMax = cms.double(6.5),
        maxDeltaRToJetAxis = cms.double(-0.5),
        minimumTrackWeight = cms.double(0.5),
        multiplicityMin = cms.uint32(2),
        useTrackWeights = cms.bool(True),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        )
    ),
    vertexReco = cms.PSet(
        finder = cms.string('avr'),
        minweight = cms.double(0.5),
        primcut = cms.double(1.8),
        seccut = cms.double(6.0),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001)
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    )
)


process.secondaryVertexTagInfos = cms.EDProducer("SecondaryVertexProducer",
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    constraint = cms.string('BeamSpot'),
    extSVCollection = cms.InputTag("secondaryVertices"),
    extSVDeltaRToJet = cms.double(0.3),
    minimumTrackWeight = cms.double(0.5),
    trackIPTagInfos = cms.InputTag("impactParameterTagInfos"),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(2),
        ptMin = cms.double(1.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(8),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip3dSig'),
    useExternalSV = cms.bool(False),
    usePVError = cms.bool(True),
    vertexCuts = cms.PSet(
        distSig2dMax = cms.double(99999.9),
        distSig2dMin = cms.double(3.0),
        distSig3dMax = cms.double(99999.9),
        distSig3dMin = cms.double(-99999.9),
        distVal2dMax = cms.double(2.5),
        distVal2dMin = cms.double(0.01),
        distVal3dMax = cms.double(99999.9),
        distVal3dMin = cms.double(-99999.9),
        fracPV = cms.double(0.65),
        massMax = cms.double(6.5),
        maxDeltaRToJetAxis = cms.double(0.4),
        minimumTrackWeight = cms.double(0.5),
        multiplicityMin = cms.uint32(2),
        useTrackWeights = cms.bool(True),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        )
    ),
    vertexReco = cms.PSet(
        finder = cms.string('avr'),
        minweight = cms.double(0.5),
        primcut = cms.double(1.8),
        seccut = cms.double(6.0),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001)
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    )
)


process.seedClusterRemover = cms.EDProducer("SeedClusterRemover",
    Common = cms.PSet(
        maxChi2 = cms.double(9.0)
    ),
    pixelClusters = cms.InputTag("siPixelClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    trajectories = cms.InputTag("initialStepSeeds")
)


process.seedClusterRemoverPhase2 = cms.EDProducer("SeedClusterRemoverPhase2",
    phase2OTClusters = cms.InputTag("siPhase2Clusters"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    trajectories = cms.InputTag("initialStepSeeds")
)


process.seedGeneratorFromRegionHitsEDProducer = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(1000000),
        MaxNumberOfPixelClusters = cms.uint32(100000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        doClusterCheck = cms.bool(True)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string(''),
        SeedingLayers = cms.InputTag(""),
        maxElement = cms.uint32(1000000)
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot'),
        RegionPSet = cms.PSet(
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originHalfLength = cms.double(21.2),
            originRadius = cms.double(0.2),
            precise = cms.bool(True),
            ptMin = cms.double(0.9),
            useMultipleScattering = cms.bool(False)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterialParabolicMf')
    )
)


process.seedingLayersEDProducer = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(

    ),
    FPix = cms.PSet(

    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring(),
    mightGet = cms.optional.untracked.vstring
)


process.selectDigi = cms.EDProducer("EcalDigiSelector",
    EcalEBDigiTag = cms.InputTag("ecalDigis","ebDigis"),
    EcalEBRecHitTag = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    EcalEEDigiTag = cms.InputTag("ecalDigis","eeDigis"),
    EcalEERecHitTag = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    barrelSuperClusterProducer = cms.InputTag("uncleanedHybridSuperClusters"),
    cluster_pt_thresh = cms.double(10.0),
    endcapSuperClusterProducer = cms.InputTag("correctedMulti5x5SuperClustersWithPreshower"),
    nclus_sel = cms.int32(2),
    selectedEcalEBDigiCollection = cms.string('selectedEcalEBDigiCollection'),
    selectedEcalEEDigiCollection = cms.string('selectedEcalEEDigiCollection'),
    single_cluster_thresh = cms.double(15.0)
)


process.siPhase2Clusters = cms.EDProducer("Phase2TrackerClusterizer",
    maxClusterSize = cms.uint32(0),
    maxNumberClusters = cms.uint32(0),
    src = cms.InputTag("mix","Tracker")
)


process.siPixelClusterShapeCache = cms.EDProducer("SiPixelClusterShapeCacheProducer",
    mightGet = cms.optional.untracked.vstring,
    onDemand = cms.bool(False),
    src = cms.InputTag("siPixelClusters")
)


process.siPixelClusterShapeCachePreSplitting = cms.EDProducer("SiPixelClusterShapeCacheProducer",
    mightGet = cms.optional.untracked.vstring,
    onDemand = cms.bool(False),
    src = cms.InputTag("siPixelClustersPreSplitting")
)


process.siPixelClusters = cms.EDProducer("SiPixelClusterProducer",
    ChannelThreshold = cms.int32(1000),
    ClusterMode = cms.string('PixelThresholdClusterizer'),
    ClusterThreshold = cms.int32(4000),
    ClusterThreshold_L1 = cms.int32(4000),
    ElectronPerADCGain = cms.double(600.0),
    MissCalibrate = cms.bool(False),
    Phase2Calibration = cms.bool(True),
    Phase2DigiBaseline = cms.double(1200),
    Phase2KinkADC = cms.int32(8),
    Phase2ReadoutMode = cms.int32(-1),
    SeedThreshold = cms.int32(1000),
    SplitClusters = cms.bool(False),
    VCaltoElectronGain = cms.int32(1),
    VCaltoElectronGain_L1 = cms.int32(1),
    VCaltoElectronOffset = cms.int32(0),
    VCaltoElectronOffset_L1 = cms.int32(0),
    maxNumberOfClusters = cms.int32(-1),
    mightGet = cms.optional.untracked.vstring,
    payloadType = cms.string('Offline'),
    src = cms.InputTag("simSiPixelDigis","Pixel")
)


process.siPixelClustersPreSplitting = cms.EDProducer("SiPixelClusterProducer",
    ChannelThreshold = cms.int32(1000),
    ClusterMode = cms.string('PixelThresholdClusterizer'),
    ClusterThreshold = cms.int32(4000),
    ClusterThreshold_L1 = cms.int32(4000),
    ElectronPerADCGain = cms.double(600.0),
    MissCalibrate = cms.bool(False),
    Phase2Calibration = cms.bool(True),
    Phase2DigiBaseline = cms.double(1200),
    Phase2KinkADC = cms.int32(8),
    Phase2ReadoutMode = cms.int32(-1),
    SeedThreshold = cms.int32(1000),
    SplitClusters = cms.bool(False),
    VCaltoElectronGain = cms.int32(1),
    VCaltoElectronGain_L1 = cms.int32(1),
    VCaltoElectronOffset = cms.int32(0),
    VCaltoElectronOffset_L1 = cms.int32(0),
    maxNumberOfClusters = cms.int32(-1),
    mightGet = cms.optional.untracked.vstring,
    payloadType = cms.string('Offline'),
    src = cms.InputTag("simSiPixelDigis","Pixel")
)


process.siPixelDigis = cms.EDProducer("SiPixelRawToDigi",
    CablingMapLabel = cms.string(''),
    CheckPixelOrder = cms.optional.bool,
    ErrorList = cms.vint32(29),
    IncludeErrors = cms.bool(True),
    InputLabel = cms.InputTag("rawDataCollector"),
    Regions = cms.PSet(
        beamSpot = cms.optional.InputTag,
        deltaPhi = cms.optional.vdouble,
        inputs = cms.optional.VInputTag,
        maxZ = cms.optional.vdouble
    ),
    Timing = cms.untracked.bool(False),
    UsePhase1 = cms.bool(False),
    UsePilotBlade = cms.bool(False),
    UseQualityInfo = cms.bool(False),
    UserErrorList = cms.vint32(40),
    mightGet = cms.optional.untracked.vstring
)


process.siPixelRecHits = cms.EDProducer("SiPixelRecHitConverter",
    CPE = cms.string('PixelCPEGeneric'),
    VerboseLevel = cms.untracked.int32(0),
    src = cms.InputTag("siPixelClusters")
)


process.siPixelRecHitsPreSplitting = cms.EDProducer("SiPixelRecHitConverter",
    CPE = cms.string('PixelCPEGeneric'),
    VerboseLevel = cms.untracked.int32(0),
    src = cms.InputTag("siPixelClustersPreSplitting")
)


process.siStripClusters = cms.EDProducer("SiStripClusterizer",
    Clusterizer = cms.PSet(
        Algorithm = cms.string('ThreeThresholdAlgorithm'),
        ChannelThreshold = cms.double(2.0),
        ClusterThreshold = cms.double(5.0),
        MaxAdjacentBad = cms.uint32(0),
        MaxSequentialBad = cms.uint32(1),
        MaxSequentialHoles = cms.uint32(0),
        QualityLabel = cms.string(''),
        RemoveApvShots = cms.bool(True),
        SeedThreshold = cms.double(3.0),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        )
    ),
    DigiProducersList = cms.VInputTag(cms.InputTag("simSiStripDigis","ZeroSuppressed"), cms.InputTag("siStripZeroSuppression","VirginRaw"), cms.InputTag("siStripZeroSuppression","ProcessedRaw"), cms.InputTag("siStripZeroSuppression","ScopeMode"))
)


process.siStripDigis = cms.EDProducer("SiStripRawToDigiModule",
    AppendedBytes = cms.int32(0),
    DoAPVEmulatorCheck = cms.bool(False),
    DoAllCorruptBufferChecks = cms.bool(False),
    ErrorThreshold = cms.uint32(7174),
    LegacyUnpacker = cms.bool(False),
    MarkModulesOnMissingFeds = cms.bool(True),
    ProductLabel = cms.InputTag("rawDataCollector"),
    TriggerFedId = cms.int32(0),
    UnpackBadChannels = cms.bool(False),
    UnpackCommonModeValues = cms.bool(False),
    UseDaqRegister = cms.bool(False),
    UseFedKey = cms.bool(False)
)


process.siStripMatchedRecHits = cms.EDProducer("SiStripRecHitConverter",
    ClusterProducer = cms.InputTag("siStripClusters"),
    MaskBadAPVFibers = cms.bool(False),
    Matcher = cms.ESInputTag("SiStripRecHitMatcherESProducer","StandardMatcher"),
    StripCPE = cms.ESInputTag("StripCPEfromTrackAngleESProducer","StripCPEfromTrackAngle"),
    VerbosityLevel = cms.optional.untracked.int32,
    doMatching = cms.bool(True),
    matchedRecHits = cms.string('matchedRecHit'),
    mightGet = cms.optional.untracked.vstring,
    rphiRecHits = cms.string('rphiRecHit'),
    siStripQualityLabel = cms.ESInputTag("",""),
    stereoRecHits = cms.string('stereoRecHit'),
    useSiStripQuality = cms.bool(False)
)


process.siStripZeroSuppression = cms.EDProducer("SiStripZeroSuppression",
    Algorithms = cms.PSet(
        APVInspectMode = cms.string('BaselineFollower'),
        APVRestoreMode = cms.string('BaselineFollower'),
        ApplyBaselineCleaner = cms.bool(True),
        ApplyBaselineRejection = cms.bool(True),
        CleaningSequence = cms.uint32(1),
        CommonModeNoiseSubtractionMode = cms.string('IteratedMedian'),
        CutToAvoidSignal = cms.double(2.0),
        DeltaCMThreshold = cms.uint32(20),
        Deviation = cms.uint32(25),
        ForceNoRestore = cms.bool(False),
        Fraction = cms.double(0.2),
        Iterations = cms.int32(3),
        MeanCM = cms.int32(0),
        PedestalSubtractionFedMode = cms.bool(False),
        SiStripFedZeroSuppressionMode = cms.uint32(4),
        TruncateInSuppressor = cms.bool(True),
        Use10bitsTruncation = cms.bool(False),
        consecThreshold = cms.uint32(5),
        discontinuityThreshold = cms.int32(12),
        distortionThreshold = cms.uint32(20),
        doAPVRestore = cms.bool(True),
        filteredBaselineDerivativeSumSquare = cms.double(30),
        filteredBaselineMax = cms.double(6),
        hitStripThreshold = cms.uint32(40),
        lastGradient = cms.int32(10),
        minStripsToFit = cms.uint32(4),
        nSaturatedStrip = cms.uint32(2),
        nSigmaNoiseDerTh = cms.uint32(4),
        nSmooth = cms.uint32(9),
        restoreThreshold = cms.double(0.5),
        sizeWindow = cms.int32(1),
        slopeX = cms.int32(3),
        slopeY = cms.int32(4),
        useCMMeanMap = cms.bool(False),
        useRealMeanCM = cms.bool(False),
        widthCluster = cms.int32(64)
    ),
    RawDigiProducersList = cms.VInputTag(cms.InputTag("simSiStripDigis","VirginRaw"), cms.InputTag("simSiStripDigis","ProcessedRaw"), cms.InputTag("simSiStripDigis","ScopeMode")),
    fixCM = cms.bool(False),
    produceBaselinePoints = cms.bool(False),
    produceCalculatedBaseline = cms.bool(False),
    produceHybridFormat = cms.bool(False),
    produceRawDigis = cms.bool(True),
    storeCM = cms.bool(True),
    storeInZScollBadAPV = cms.bool(True)
)


process.simBmtfDigis = cms.EDProducer("L1TMuonBarrelTrackProducer",
    DTDigi_Source = cms.InputTag("simTwinMuxDigis"),
    DTDigi_Theta_Source = cms.InputTag("simTwinMuxDigis"),
    Debug = cms.untracked.int32(0)
)


process.simBscDigis = cms.EDProducer("BSCTrigger",
    bitNames = cms.vstring(
        'L1Tech_BSC_minBias_inner_threshold1', 
        'L1Tech_BSC_minBias_inner_threshold2', 
        'L1Tech_BSC_minBias_OR', 
        'L1Tech_BSC_HighMultiplicity', 
        'L1Tech_BSC_halo_beam2_inner', 
        'L1Tech_BSC_halo_beam2_outer', 
        'L1Tech_BSC_halo_beam1_inner', 
        'L1Tech_BSC_halo_beam1_outer', 
        'L1Tech_BSC_minBias_threshold1', 
        'L1Tech_BSC_minBias_threshold2', 
        'L1Tech_BSC_splash_beam1', 
        'L1Tech_BSC_splash_beam2'
    ),
    bitNumbers = cms.vuint32(
        32, 33, 34, 35, 36, 
        37, 38, 39, 40, 41, 
        42, 43
    ),
    coincidence = cms.double(72.85),
    resolution = cms.double(3.0),
    theHits = cms.InputTag("mix","g4SimHitsBSCHits")
)


process.simCaloStage1Digis = cms.EDProducer("L1TStage1Layer2Producer",
    CaloEmCands = cms.InputTag("simRctUpgradeFormatDigis"),
    CaloRegions = cms.InputTag("simRctUpgradeFormatDigis"),
    conditionsLabel = cms.string('')
)


process.simCaloStage1FinalDigis = cms.EDProducer("L1TPhysicalEtAdder",
    InputCollection = cms.InputTag("simCaloStage1Digis"),
    InputHFCountsCollection = cms.InputTag("simCaloStage1Digis","HFBitCounts"),
    InputHFSumsCollection = cms.InputTag("simCaloStage1Digis","HFRingSums"),
    InputIsoTauCollection = cms.InputTag("simCaloStage1Digis","isoTaus"),
    InputPreGtJetCollection = cms.InputTag("simCaloStage1Digis","preGtJets"),
    InputRlxTauCollection = cms.InputTag("simCaloStage1Digis","rlxTaus")
)


process.simCaloStage1LegacyFormatDigis = cms.EDProducer("L1TCaloUpgradeToGCTConverter",
    InputCollection = cms.InputTag("simCaloStage1FinalDigis"),
    InputHFCountsCollection = cms.InputTag("simCaloStage1Digis","HFBitCounts"),
    InputHFSumsCollection = cms.InputTag("simCaloStage1Digis","HFRingSums"),
    InputIsoTauCollection = cms.InputTag("simCaloStage1Digis","isoTaus"),
    InputRlxTauCollection = cms.InputTag("simCaloStage1Digis","rlxTaus")
)


process.simCaloStage2Digis = cms.EDProducer("L1TStage2Layer2Producer",
    firmware = cms.int32(1),
    towerToken = cms.InputTag("simCaloStage2Layer1Digis"),
    useStaticConfig = cms.bool(False)
)


process.simCaloStage2Layer1Digis = cms.EDProducer("L1TCaloLayer1",
    ecalToken = cms.InputTag("simEcalTriggerPrimitiveDigis"),
    firmwareVersion = cms.int32(3),
    hcalToken = cms.InputTag("simHcalTriggerPrimitiveDigis"),
    unpackEcalMask = cms.bool(False),
    unpackHcalMask = cms.bool(False),
    useCalib = cms.bool(True),
    useECALLUT = cms.bool(True),
    useHCALLUT = cms.bool(True),
    useHFLUT = cms.bool(True),
    useLSB = cms.bool(True),
    verbose = cms.bool(False)
)


process.simCastorTechTrigDigis = cms.EDProducer("CastorTTRecord",
    CastorDigiCollection = cms.InputTag("simCastorDigis"),
    CastorSignalTS = cms.uint32(4),
    TriggerBitNames = cms.vstring(
        'L1Tech_CASTOR_0.v0', 
        'L1Tech_CASTOR_TotalEnergy.v0', 
        'L1Tech_CASTOR_EM.v0', 
        'L1Tech_CASTOR_HaloMuon.v0'
    ),
    TriggerThresholds = cms.vdouble(
        50, 48000, 1500, 100, 50, 
        65000
    ),
    ttpBits = cms.vuint32(60, 61, 62, 63)
)


process.simCscTriggerPrimitiveDigis = cms.EDProducer("CSCTriggerPrimitivesProducer",
    CSCComparatorDigiProducer = cms.InputTag("simMuonCSCDigis","MuonCSCComparatorDigi"),
    CSCWireDigiProducer = cms.InputTag("simMuonCSCDigis","MuonCSCWireDigi"),
    GEMPadDigiClusterProducer = cms.InputTag("simMuonGEMPadDigiClusters"),
    GEMPadDigiProducer = cms.InputTag("simMuonGEMPadDigis"),
    MaxBX = cms.int32(11),
    MinBX = cms.int32(5),
    alctParam07 = cms.PSet(
        alctAccelMode = cms.uint32(0),
        alctDriftDelay = cms.uint32(2),
        alctEarlyTbins = cms.int32(4),
        alctFifoPretrig = cms.uint32(10),
        alctFifoTbins = cms.uint32(16),
        alctGhostCancellationBxDepth = cms.int32(4),
        alctGhostCancellationSideQuality = cms.bool(False),
        alctHitPersist = cms.uint32(6),
        alctL1aWindowWidth = cms.uint32(7),
        alctNarrowMaskForR1 = cms.bool(False),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctNplanesHitAccelPretrig = cms.uint32(3),
        alctNplanesHitPattern = cms.uint32(4),
        alctNplanesHitPretrig = cms.uint32(3),
        alctPretrigDeadtime = cms.uint32(4),
        alctTrigMode = cms.uint32(2),
        alctUseCorrectedBx = cms.bool(False),
        verbosity = cms.int32(0)
    ),
    alctSLHC = cms.PSet(
        alctAccelMode = cms.uint32(0),
        alctDriftDelay = cms.uint32(2),
        alctEarlyTbins = cms.int32(4),
        alctFifoPretrig = cms.uint32(10),
        alctFifoTbins = cms.uint32(16),
        alctGhostCancellationBxDepth = cms.int32(1),
        alctGhostCancellationSideQuality = cms.bool(True),
        alctHitPersist = cms.uint32(6),
        alctL1aWindowWidth = cms.uint32(7),
        alctNarrowMaskForR1 = cms.bool(True),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctNplanesHitAccelPretrig = cms.uint32(3),
        alctNplanesHitPattern = cms.uint32(4),
        alctNplanesHitPretrig = cms.uint32(3),
        alctPretrigDeadtime = cms.uint32(0),
        alctTrigMode = cms.uint32(2),
        alctUseCorrectedBx = cms.bool(True),
        verbosity = cms.int32(0)
    ),
    alctSLHCME21 = cms.PSet(
        alctAccelMode = cms.uint32(0),
        alctDriftDelay = cms.uint32(2),
        alctEarlyTbins = cms.int32(4),
        alctFifoPretrig = cms.uint32(10),
        alctFifoTbins = cms.uint32(16),
        alctGhostCancellationBxDepth = cms.int32(1),
        alctGhostCancellationSideQuality = cms.bool(True),
        alctHitPersist = cms.uint32(6),
        alctL1aWindowWidth = cms.uint32(7),
        alctNarrowMaskForR1 = cms.bool(True),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctNplanesHitAccelPretrig = cms.uint32(3),
        alctNplanesHitPattern = cms.uint32(3),
        alctNplanesHitPretrig = cms.uint32(3),
        alctPretrigDeadtime = cms.uint32(0),
        alctTrigMode = cms.uint32(2),
        alctUseCorrectedBx = cms.bool(True),
        verbosity = cms.int32(0)
    ),
    alctSLHCME3141 = cms.PSet(
        alctAccelMode = cms.uint32(0),
        alctDriftDelay = cms.uint32(2),
        alctEarlyTbins = cms.int32(4),
        alctFifoPretrig = cms.uint32(10),
        alctFifoTbins = cms.uint32(16),
        alctGhostCancellationBxDepth = cms.int32(4),
        alctGhostCancellationSideQuality = cms.bool(False),
        alctHitPersist = cms.uint32(6),
        alctL1aWindowWidth = cms.uint32(7),
        alctNarrowMaskForR1 = cms.bool(False),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctNplanesHitAccelPretrig = cms.uint32(3),
        alctNplanesHitPattern = cms.uint32(4),
        alctNplanesHitPretrig = cms.uint32(3),
        alctPretrigDeadtime = cms.uint32(4),
        alctTrigMode = cms.uint32(2),
        alctUseCorrectedBx = cms.bool(False),
        verbosity = cms.int32(0)
    ),
    checkBadChambers = cms.bool(False),
    clctParam07 = cms.PSet(
        clctDriftDelay = cms.uint32(2),
        clctFifoPretrig = cms.uint32(7),
        clctFifoTbins = cms.uint32(12),
        clctHitPersist = cms.uint32(4),
        clctMinSeparation = cms.uint32(10),
        clctNplanesHitPattern = cms.uint32(4),
        clctNplanesHitPretrig = cms.uint32(3),
        clctPidThreshPretrig = cms.uint32(2),
        clctStartBxShift = cms.int32(0),
        useComparatorCodes = cms.bool(False),
        useRun3Patterns = cms.bool(False),
        verbosity = cms.int32(0)
    ),
    clctSLHC = cms.PSet(
        clctDriftDelay = cms.uint32(2),
        clctFifoPretrig = cms.uint32(7),
        clctFifoTbins = cms.uint32(12),
        clctHitPersist = cms.uint32(4),
        clctMinSeparation = cms.uint32(5),
        clctNplanesHitPattern = cms.uint32(3),
        clctNplanesHitPretrig = cms.uint32(3),
        clctPidThreshPretrig = cms.uint32(2),
        clctPretriggerTriggerZone = cms.uint32(224),
        clctStartBxShift = cms.int32(0),
        clctStateMachineZone = cms.uint32(4),
        clctUseCorrectedBx = cms.bool(False),
        useComparatorCodes = cms.bool(False),
        useDeadTimeZoning = cms.bool(True),
        useDynamicStateMachineZone = cms.bool(True),
        useRun3Patterns = cms.bool(False),
        verbosity = cms.int32(0)
    ),
    clctSLHCME21 = cms.PSet(
        clctDriftDelay = cms.uint32(2),
        clctFifoPretrig = cms.uint32(7),
        clctFifoTbins = cms.uint32(12),
        clctHitPersist = cms.uint32(4),
        clctMinSeparation = cms.uint32(5),
        clctNplanesHitPattern = cms.uint32(3),
        clctNplanesHitPretrig = cms.uint32(3),
        clctPidThreshPretrig = cms.uint32(2),
        clctPretriggerTriggerZone = cms.uint32(224),
        clctStartBxShift = cms.int32(0),
        clctStateMachineZone = cms.uint32(4),
        clctUseCorrectedBx = cms.bool(False),
        useComparatorCodes = cms.bool(False),
        useDeadTimeZoning = cms.bool(True),
        useDynamicStateMachineZone = cms.bool(False),
        useRun3Patterns = cms.bool(False),
        verbosity = cms.int32(0)
    ),
    clctSLHCME3141 = cms.PSet(
        clctDriftDelay = cms.uint32(2),
        clctFifoPretrig = cms.uint32(7),
        clctFifoTbins = cms.uint32(12),
        clctHitPersist = cms.uint32(4),
        clctMinSeparation = cms.uint32(5),
        clctNplanesHitPattern = cms.uint32(4),
        clctNplanesHitPretrig = cms.uint32(3),
        clctPidThreshPretrig = cms.uint32(2),
        clctPretriggerTriggerZone = cms.uint32(224),
        clctStartBxShift = cms.int32(0),
        clctStateMachineZone = cms.uint32(4),
        clctUseCorrectedBx = cms.bool(False),
        useComparatorCodes = cms.bool(False),
        useDeadTimeZoning = cms.bool(True),
        useDynamicStateMachineZone = cms.bool(False),
        useRun3Patterns = cms.bool(False),
        verbosity = cms.int32(0)
    ),
    commonParam = cms.PSet(
        alctClctOffset = cms.uint32(1),
        disableME1a = cms.bool(False),
        disableME42 = cms.bool(False),
        enableAlctSLHC = cms.bool(True),
        gangedME1a = cms.bool(False),
        isSLHC = cms.bool(True),
        runME11ILT = cms.bool(True),
        runME11Up = cms.bool(True),
        runME21ILT = cms.bool(True),
        runME21Up = cms.bool(True),
        runME31Up = cms.bool(True),
        runME41Up = cms.bool(True),
        useClusters = cms.bool(False),
        verbosity = cms.int32(0)
    ),
    copadParamGE11 = cms.PSet(
        maxDeltaBX = cms.uint32(0),
        maxDeltaPad = cms.uint32(2),
        maxDeltaRoll = cms.uint32(1),
        verbosity = cms.uint32(0)
    ),
    copadParamGE21 = cms.PSet(
        maxDeltaBX = cms.uint32(0),
        maxDeltaPad = cms.uint32(2),
        maxDeltaRoll = cms.uint32(1),
        verbosity = cms.uint32(0)
    ),
    debugParameters = cms.bool(True),
    me11tmbSLHCGEM = cms.PSet(
        alctTrigEnable = cms.uint32(0),
        buildLCTfromALCTandGEM_ME1a = cms.bool(False),
        buildLCTfromALCTandGEM_ME1b = cms.bool(True),
        buildLCTfromCLCTandGEM_ME1a = cms.bool(False),
        buildLCTfromCLCTandGEM_ME1b = cms.bool(True),
        clctToAlct = cms.bool(False),
        clctTrigEnable = cms.uint32(0),
        debugLUTs = cms.bool(False),
        debugMatching = cms.bool(False),
        doLCTGhostBustingWithGEMs = cms.bool(False),
        dropLowQualityALCTsNoGEMs_ME1a = cms.bool(False),
        dropLowQualityALCTsNoGEMs_ME1b = cms.bool(False),
        dropLowQualityCLCTsNoGEMs_ME1a = cms.bool(False),
        dropLowQualityCLCTsNoGEMs_ME1b = cms.bool(True),
        matchEarliestAlctOnly = cms.bool(False),
        matchEarliestClctOnly = cms.bool(False),
        matchTrigEnable = cms.uint32(1),
        matchTrigWindowSize = cms.uint32(3),
        maxDeltaBXCoPad = cms.int32(1),
        maxDeltaBXPad = cms.int32(1),
        maxDeltaPadL1Even = cms.int32(12),
        maxDeltaPadL1Odd = cms.int32(24),
        maxDeltaPadL2Even = cms.int32(12),
        maxDeltaPadL2Odd = cms.int32(24),
        maxLCTs = cms.uint32(2),
        mpcBlockMe1a = cms.uint32(0),
        promoteALCTGEMpattern = cms.bool(True),
        promoteALCTGEMquality = cms.bool(True),
        promoteCLCTGEMquality_ME1a = cms.bool(True),
        promoteCLCTGEMquality_ME1b = cms.bool(True),
        tmbCrossBxAlgorithm = cms.uint32(2),
        tmbDropUsedAlcts = cms.bool(False),
        tmbDropUsedClcts = cms.bool(False),
        tmbEarlyTbins = cms.int32(4),
        tmbL1aWindowSize = cms.uint32(7),
        tmbReadoutEarliest2 = cms.bool(False),
        useHighMultiplicityBits = cms.bool(False),
        useOldLCTDataFormat = cms.bool(True),
        verbosity = cms.int32(0)
    ),
    me21tmbSLHCGEM = cms.PSet(
        alctTrigEnable = cms.uint32(0),
        buildLCTfromALCTandGEM = cms.bool(True),
        buildLCTfromCLCTandGEM = cms.bool(True),
        clctToAlct = cms.bool(False),
        clctTrigEnable = cms.uint32(0),
        debugLUTs = cms.bool(False),
        debugMatching = cms.bool(False),
        doLCTGhostBustingWithGEMs = cms.bool(False),
        dropLowQualityALCTsNoGEMs = cms.bool(True),
        dropLowQualityCLCTsNoGEMs = cms.bool(True),
        matchEarliestAlctOnly = cms.bool(False),
        matchEarliestClctOnly = cms.bool(False),
        matchTrigEnable = cms.uint32(1),
        matchTrigWindowSize = cms.uint32(3),
        maxDeltaBXCoPad = cms.int32(1),
        maxDeltaBXPad = cms.int32(1),
        maxDeltaPadL1Even = cms.int32(12),
        maxDeltaPadL1Odd = cms.int32(24),
        maxDeltaPadL2Even = cms.int32(12),
        maxDeltaPadL2Odd = cms.int32(24),
        maxLCTs = cms.uint32(2),
        mpcBlockMe1a = cms.uint32(0),
        promoteALCTGEMpattern = cms.bool(True),
        promoteALCTGEMquality = cms.bool(True),
        promoteCLCTGEMquality = cms.bool(True),
        tmbCrossBxAlgorithm = cms.uint32(2),
        tmbDropUsedAlcts = cms.bool(False),
        tmbDropUsedClcts = cms.bool(False),
        tmbEarlyTbins = cms.int32(4),
        tmbL1aWindowSize = cms.uint32(7),
        tmbReadoutEarliest2 = cms.bool(False),
        useHighMultiplicityBits = cms.bool(False),
        useOldLCTDataFormat = cms.bool(True),
        verbosity = cms.int32(0)
    ),
    meX1tmbSLHC = cms.PSet(
        alctTrigEnable = cms.uint32(0),
        clctToAlct = cms.bool(False),
        clctTrigEnable = cms.uint32(0),
        debugLUTs = cms.bool(False),
        debugMatching = cms.bool(False),
        matchEarliestAlctOnly = cms.bool(False),
        matchEarliestClctOnly = cms.bool(False),
        matchTrigEnable = cms.uint32(1),
        matchTrigWindowSize = cms.uint32(3),
        maxLCTs = cms.uint32(2),
        mpcBlockMe1a = cms.uint32(0),
        tmbCrossBxAlgorithm = cms.uint32(2),
        tmbDropUsedAlcts = cms.bool(False),
        tmbDropUsedClcts = cms.bool(False),
        tmbEarlyTbins = cms.int32(4),
        tmbL1aWindowSize = cms.uint32(7),
        tmbReadoutEarliest2 = cms.bool(False),
        useHighMultiplicityBits = cms.bool(False),
        verbosity = cms.int32(0)
    ),
    mpcRun2 = cms.PSet(
        dropInvalidStubs = cms.bool(False),
        dropLowQualityStubs = cms.bool(False),
        sortStubs = cms.bool(False)
    ),
    savePreTriggers = cms.bool(False),
    tmbParam = cms.PSet(
        alctTrigEnable = cms.uint32(0),
        clctToAlct = cms.bool(False),
        clctTrigEnable = cms.uint32(0),
        matchTrigEnable = cms.uint32(1),
        matchTrigWindowSize = cms.uint32(7),
        mpcBlockMe1a = cms.uint32(0),
        tmbDropUsedAlcts = cms.bool(True),
        tmbDropUsedClcts = cms.bool(False),
        tmbEarlyTbins = cms.int32(4),
        tmbL1aWindowSize = cms.uint32(7),
        tmbReadoutEarliest2 = cms.bool(True),
        useHighMultiplicityBits = cms.bool(False),
        verbosity = cms.int32(0)
    ),
    tmbSLHC = cms.PSet(
        alctTrigEnable = cms.uint32(0),
        clctToAlct = cms.bool(False),
        clctTrigEnable = cms.uint32(0),
        debugLUTs = cms.bool(False),
        debugMatching = cms.bool(False),
        ignoreAlctCrossClct = cms.bool(False),
        matchEarliestAlctOnly = cms.bool(False),
        matchEarliestClctOnly = cms.bool(False),
        matchTrigEnable = cms.uint32(1),
        matchTrigWindowSize = cms.uint32(3),
        maxLCTs = cms.uint32(2),
        mpcBlockMe1a = cms.uint32(0),
        tmbCrossBxAlgorithm = cms.uint32(1),
        tmbDropUsedAlcts = cms.bool(False),
        tmbDropUsedClcts = cms.bool(False),
        tmbEarlyTbins = cms.int32(4),
        tmbL1aWindowSize = cms.uint32(7),
        tmbReadoutEarliest2 = cms.bool(False),
        useHighMultiplicityBits = cms.bool(False),
        verbosity = cms.int32(0)
    ),
    writeOutAllALCTs = cms.bool(False),
    writeOutAllCLCTs = cms.bool(False)
)


process.simCsctfDigis = cms.EDProducer("CSCTFCandidateProducer",
    CSCTrackProducer = cms.untracked.InputTag("simCsctfTrackDigis"),
    MuonSorter = cms.PSet(
        MaxBX = cms.int32(11),
        MinBX = cms.int32(5)
    )
)


process.simCsctfTrackDigis = cms.EDProducer("CSCTFTrackProducer",
    DTproducer = cms.untracked.InputTag("simDtTriggerPrimitiveDigis"),
    DtDirectProd = cms.untracked.InputTag("csctfunpacker","DT"),
    SectorProcessor = cms.PSet(
        AllowALCTonly = cms.bool(False),
        AllowCLCTonly = cms.bool(False),
        BXAdepth = cms.uint32(2),
        CoreLatency = cms.uint32(7),
        EtaMax = cms.vuint32(
            127, 127, 127, 127, 127, 
            24, 24, 127
        ),
        EtaMin = cms.vuint32(
            0, 0, 0, 0, 0, 
            0, 0, 0
        ),
        EtaWindows = cms.vuint32(
            4, 4, 6, 6, 6, 
            6, 6
        ),
        MaxBX = cms.int32(11),
        MinBX = cms.int32(5),
        PTLUT = cms.PSet(
            LowQualityFlag = cms.untracked.uint32(4),
            PtMethod = cms.untracked.uint32(34),
            ReadPtLUT = cms.bool(False)
        ),
        PreTrigger = cms.uint32(2),
        QualityEnableME1a = cms.uint32(65535),
        QualityEnableME1b = cms.uint32(65535),
        QualityEnableME1c = cms.uint32(65535),
        QualityEnableME1d = cms.uint32(65535),
        QualityEnableME1e = cms.uint32(65535),
        QualityEnableME1f = cms.uint32(65535),
        QualityEnableME2a = cms.uint32(65535),
        QualityEnableME2b = cms.uint32(65535),
        QualityEnableME2c = cms.uint32(65535),
        QualityEnableME3a = cms.uint32(65535),
        QualityEnableME3b = cms.uint32(65535),
        QualityEnableME3c = cms.uint32(65535),
        QualityEnableME4a = cms.uint32(65535),
        QualityEnableME4b = cms.uint32(65535),
        QualityEnableME4c = cms.uint32(65535),
        SRLUT = cms.PSet(
            Binary = cms.untracked.bool(False),
            LUTPath = cms.untracked.string('./'),
            ReadLUTs = cms.untracked.bool(False),
            UseMiniLUTs = cms.untracked.bool(True)
        ),
        curvedp = cms.uint32(15),
        firmwareDD = cms.uint32(20091026),
        firmwareFA = cms.uint32(20091026),
        firmwareSP = cms.uint32(20140515),
        firmwareVM = cms.uint32(20091026),
        gangedME1a = cms.untracked.bool(False),
        initializeFromPSet = cms.bool(False),
        isCoreVerbose = cms.bool(False),
        kill_fiber = cms.uint32(0),
        maxdeta112_accp = cms.uint32(29),
        maxdeta113_accp = cms.uint32(38),
        maxdeta12_accp = cms.uint32(17),
        maxdeta13_accp = cms.uint32(27),
        maxdphi112_accp = cms.uint32(64),
        maxdphi113_accp = cms.uint32(64),
        maxdphi12_accp = cms.uint32(64),
        maxdphi13_accp = cms.uint32(64),
        mbaPhiOff = cms.uint32(0),
        mbbPhiOff = cms.uint32(1982),
        mindeta112_accp = cms.uint32(14),
        mindeta113_accp = cms.uint32(21),
        mindeta12_accp = cms.uint32(12),
        mindeta13_accp = cms.uint32(13),
        mindetap = cms.uint32(7),
        mindetap_halo = cms.uint32(8),
        mindphip = cms.uint32(180),
        mindphip_halo = cms.uint32(128),
        rescaleSinglesPhi = cms.bool(True),
        run_core = cms.bool(True),
        singlesTrackOutput = cms.uint32(1),
        straightp = cms.uint32(19),
        trigger_on_MB1a = cms.bool(False),
        trigger_on_MB1d = cms.bool(False),
        trigger_on_ME1a = cms.bool(False),
        trigger_on_ME1b = cms.bool(False),
        trigger_on_ME2 = cms.bool(False),
        trigger_on_ME3 = cms.bool(False),
        trigger_on_ME4 = cms.bool(False),
        widePhi = cms.uint32(0)
    ),
    SectorReceiverInput = cms.untracked.InputTag("simCscTriggerPrimitiveDigis","MPCSORTED"),
    isTMB07 = cms.bool(True),
    readDtDirect = cms.bool(False),
    useDT = cms.bool(True)
)


process.simDtTriggerPrimitiveDigis = cms.EDProducer("DTTrigProd",
    DTTFSectorNumbering = cms.bool(True),
    debug = cms.untracked.bool(False),
    digiTag = cms.InputTag("simMuonDTDigis"),
    lutBtic = cms.untracked.int32(31),
    lutDumpFlag = cms.untracked.bool(False)
)


process.simDttfDigis = cms.EDProducer("DTTrackFinder",
    BX_max = cms.untracked.int32(7),
    BX_min = cms.untracked.int32(-9),
    CSCStub_Source = cms.InputTag("simCsctfTrackDigis"),
    CSC_Eta_Cancellation = cms.untracked.bool(False),
    DTDigi_Source = cms.InputTag("simDtTriggerPrimitiveDigis"),
    Debug = cms.untracked.int32(0),
    EtaTrackFinder = cms.untracked.bool(True),
    Extrapolation_21 = cms.untracked.bool(False),
    Extrapolation_Filter = cms.untracked.int32(1),
    Extrapolation_nbits_Phi = cms.untracked.int32(8),
    Extrapolation_nbits_PhiB = cms.untracked.int32(8),
    Open_LUTs = cms.untracked.bool(False),
    OutOfTime_Filter = cms.untracked.bool(False),
    OutOfTime_Filter_Window = cms.untracked.int32(1),
    Overlap = cms.untracked.bool(True),
    PHI_Assignment_nbits_Phi = cms.untracked.int32(10),
    PHI_Assignment_nbits_PhiB = cms.untracked.int32(10),
    PT_Assignment_nbits_Phi = cms.untracked.int32(12),
    PT_Assignment_nbits_PhiB = cms.untracked.int32(10)
)


process.simEcalTriggerPrimitiveDigis = cms.EDProducer("EcalTrigPrimProducer",
    BarrelOnly = cms.bool(True),
    Debug = cms.bool(False),
    Famos = cms.bool(False),
    InstanceEB = cms.string(''),
    InstanceEE = cms.string(''),
    Label = cms.string('simEcalUnsuppressedDigis'),
    TcpOutput = cms.bool(False),
    binOfMaximum = cms.int32(6)
)


process.simEmtfDigis = cms.EDProducer("L1TMuonEndCapTrackProducer",
    BXWindow = cms.int32(2),
    CPPFEnable = cms.bool(False),
    CPPFInput = cms.InputTag("simCPPFDigis"),
    CSCComparatorInput = cms.InputTag("simMuonCSCDigis","MuonCSCComparatorDigi"),
    CSCEnable = cms.bool(True),
    CSCInput = cms.InputTag("simCscTriggerPrimitiveDigis","MPCSORTED"),
    CSCInputBXShift = cms.int32(-8),
    DTEnable = cms.bool(False),
    DTPhiInput = cms.InputTag("simTwinMuxDigis"),
    DTThetaInput = cms.InputTag("simDtTriggerPrimitiveDigis"),
    Era = cms.string('Run2_2018'),
    FWConfig = cms.bool(True),
    GEMEnable = cms.bool(False),
    GEMInput = cms.InputTag("simMuonGEMPadDigiClusters"),
    GEMInputBXShift = cms.int32(0),
    IRPCEnable = cms.bool(False),
    ME0Enable = cms.bool(False),
    ME0Input = cms.InputTag("me0TriggerConvertedPseudoDigis"),
    ME0InputBXShift = cms.int32(-8),
    MaxBX = cms.int32(3),
    MinBX = cms.int32(-3),
    RPCEnable = cms.bool(True),
    RPCInput = cms.InputTag("simMuonRPCDigis"),
    RPCInputBXShift = cms.int32(0),
    spGCParams16 = cms.PSet(
        BugSameSectorPt0 = cms.bool(False),
        MaxRoadsPerZone = cms.int32(3),
        MaxTracks = cms.int32(3),
        UseSecondEarliest = cms.bool(True)
    ),
    spPAParams16 = cms.PSet(
        Bug9BitDPhi = cms.bool(False),
        BugGMTPhi = cms.bool(False),
        BugMode7CLCT = cms.bool(False),
        BugNegPt = cms.bool(False),
        FixMode15HighPt = cms.bool(True),
        ModeQualVer = cms.int32(2),
        PromoteMode7 = cms.bool(False),
        ReadPtLUTFile = cms.bool(False)
    ),
    spPCParams16 = cms.PSet(
        DuplicateTheta = cms.bool(True),
        FixME11Edges = cms.bool(True),
        FixZonePhi = cms.bool(True),
        IncludeNeighbor = cms.bool(True),
        UseNewZones = cms.bool(False),
        ZoneBoundaries = cms.vint32(0, 41, 49, 87, 127),
        ZoneOverlap = cms.int32(2)
    ),
    spPRParams16 = cms.PSet(
        PatternDefinitions = cms.vstring(
            '4,15:15,7:7,7:7,7:7', 
            '3,16:16,7:7,7:6,7:6', 
            '3,14:14,7:7,8:7,8:7', 
            '2,18:17,7:7,7:5,7:5', 
            '2,13:12,7:7,10:7,10:7', 
            '1,22:19,7:7,7:0,7:0', 
            '1,11:8,7:7,14:7,14:7', 
            '0,30:23,7:7,7:0,7:0', 
            '0,7:0,7:7,14:7,14:7'
        ),
        SymPatternDefinitions = cms.vstring(
            '4,15:15:15:15,7:7:7:7,7:7:7:7,7:7:7:7', 
            '3,16:16:14:14,7:7:7:7,8:7:7:6,8:7:7:6', 
            '2,18:17:13:12,7:7:7:7,10:7:7:4,10:7:7:4', 
            '1,22:19:11:8,7:7:7:7,14:7:7:0,14:7:7:0', 
            '0,30:23:7:0,7:7:7:7,14:7:7:0,14:7:7:0'
        ),
        UseSymmetricalPatterns = cms.bool(True)
    ),
    spTBParams16 = cms.PSet(
        BugAmbigThetaWin = cms.bool(False),
        BugME11Dupes = cms.bool(False),
        BugSt2PhDiff = cms.bool(False),
        ThetaWindow = cms.int32(8),
        ThetaWindowZone0 = cms.int32(4),
        TwoStationSameBX = cms.bool(True),
        UseSingleHits = cms.bool(False)
    ),
    verbosity = cms.untracked.int32(0)
)


process.simEmtfDigisData = cms.EDProducer("L1TMuonEndCapTrackProducer",
    BXWindow = cms.int32(2),
    CPPFEnable = cms.bool(True),
    CPPFInput = cms.InputTag("emtfStage2Digis"),
    CSCComparatorInput = cms.InputTag("muonCSCDigis","MuonCSCComparatorDigi"),
    CSCEnable = cms.bool(True),
    CSCInput = cms.InputTag("emtfStage2Digis"),
    CSCInputBXShift = cms.int32(-8),
    DTEnable = cms.bool(False),
    DTPhiInput = cms.InputTag("bmtfDigis"),
    DTThetaInput = cms.InputTag("bmtfDigis"),
    Era = cms.string('Run2_2018'),
    FWConfig = cms.bool(True),
    GEMEnable = cms.bool(False),
    GEMInput = cms.InputTag("simMuonGEMPadDigiClusters"),
    GEMInputBXShift = cms.int32(0),
    IRPCEnable = cms.bool(False),
    ME0Enable = cms.bool(False),
    ME0Input = cms.InputTag("me0TriggerConvertedPseudoDigis"),
    ME0InputBXShift = cms.int32(-8),
    MaxBX = cms.int32(3),
    MinBX = cms.int32(-3),
    RPCEnable = cms.bool(True),
    RPCInput = cms.InputTag("muonRPCDigis"),
    RPCInputBXShift = cms.int32(0),
    spGCParams16 = cms.PSet(
        BugSameSectorPt0 = cms.bool(False),
        MaxRoadsPerZone = cms.int32(3),
        MaxTracks = cms.int32(3),
        UseSecondEarliest = cms.bool(True)
    ),
    spPAParams16 = cms.PSet(
        Bug9BitDPhi = cms.bool(False),
        BugGMTPhi = cms.bool(False),
        BugMode7CLCT = cms.bool(False),
        BugNegPt = cms.bool(False),
        FixMode15HighPt = cms.bool(True),
        ModeQualVer = cms.int32(2),
        PromoteMode7 = cms.bool(False),
        ReadPtLUTFile = cms.bool(False)
    ),
    spPCParams16 = cms.PSet(
        DuplicateTheta = cms.bool(True),
        FixME11Edges = cms.bool(True),
        FixZonePhi = cms.bool(True),
        IncludeNeighbor = cms.bool(True),
        UseNewZones = cms.bool(False),
        ZoneBoundaries = cms.vint32(0, 41, 49, 87, 127),
        ZoneOverlap = cms.int32(2)
    ),
    spPRParams16 = cms.PSet(
        PatternDefinitions = cms.vstring(
            '4,15:15,7:7,7:7,7:7', 
            '3,16:16,7:7,7:6,7:6', 
            '3,14:14,7:7,8:7,8:7', 
            '2,18:17,7:7,7:5,7:5', 
            '2,13:12,7:7,10:7,10:7', 
            '1,22:19,7:7,7:0,7:0', 
            '1,11:8,7:7,14:7,14:7', 
            '0,30:23,7:7,7:0,7:0', 
            '0,7:0,7:7,14:7,14:7'
        ),
        SymPatternDefinitions = cms.vstring(
            '4,15:15:15:15,7:7:7:7,7:7:7:7,7:7:7:7', 
            '3,16:16:14:14,7:7:7:7,8:7:7:6,8:7:7:6', 
            '2,18:17:13:12,7:7:7:7,10:7:7:4,10:7:7:4', 
            '1,22:19:11:8,7:7:7:7,14:7:7:0,14:7:7:0', 
            '0,30:23:7:0,7:7:7:7,14:7:7:0,14:7:7:0'
        ),
        UseSymmetricalPatterns = cms.bool(True)
    ),
    spTBParams16 = cms.PSet(
        BugAmbigThetaWin = cms.bool(False),
        BugME11Dupes = cms.bool(False),
        BugSt2PhDiff = cms.bool(False),
        ThetaWindow = cms.int32(8),
        ThetaWindowZone0 = cms.int32(4),
        TwoStationSameBX = cms.bool(True),
        UseSingleHits = cms.bool(False)
    ),
    verbosity = cms.untracked.int32(0)
)


process.simEmtfDigisMC = cms.EDProducer("L1TMuonEndCapTrackProducer",
    BXWindow = cms.int32(2),
    CPPFEnable = cms.bool(False),
    CPPFInput = cms.InputTag("simCPPFDigis"),
    CSCComparatorInput = cms.InputTag("simMuonCSCDigis","MuonCSCComparatorDigi"),
    CSCEnable = cms.bool(True),
    CSCInput = cms.InputTag("simCscTriggerPrimitiveDigis","MPCSORTED"),
    CSCInputBXShift = cms.int32(-8),
    DTEnable = cms.bool(False),
    DTPhiInput = cms.InputTag("simTwinMuxDigis"),
    DTThetaInput = cms.InputTag("simDtTriggerPrimitiveDigis"),
    Era = cms.string('Run2_2018'),
    FWConfig = cms.bool(True),
    GEMEnable = cms.bool(False),
    GEMInput = cms.InputTag("simMuonGEMPadDigiClusters"),
    GEMInputBXShift = cms.int32(0),
    IRPCEnable = cms.bool(False),
    ME0Enable = cms.bool(False),
    ME0Input = cms.InputTag("me0TriggerConvertedPseudoDigis"),
    ME0InputBXShift = cms.int32(-8),
    MaxBX = cms.int32(3),
    MinBX = cms.int32(-3),
    RPCEnable = cms.bool(True),
    RPCInput = cms.InputTag("simMuonRPCDigis"),
    RPCInputBXShift = cms.int32(0),
    spGCParams16 = cms.PSet(
        BugSameSectorPt0 = cms.bool(False),
        MaxRoadsPerZone = cms.int32(3),
        MaxTracks = cms.int32(3),
        UseSecondEarliest = cms.bool(True)
    ),
    spPAParams16 = cms.PSet(
        Bug9BitDPhi = cms.bool(False),
        BugGMTPhi = cms.bool(False),
        BugMode7CLCT = cms.bool(False),
        BugNegPt = cms.bool(False),
        FixMode15HighPt = cms.bool(True),
        ModeQualVer = cms.int32(2),
        PromoteMode7 = cms.bool(False),
        ReadPtLUTFile = cms.bool(False)
    ),
    spPCParams16 = cms.PSet(
        DuplicateTheta = cms.bool(True),
        FixME11Edges = cms.bool(True),
        FixZonePhi = cms.bool(True),
        IncludeNeighbor = cms.bool(True),
        UseNewZones = cms.bool(False),
        ZoneBoundaries = cms.vint32(0, 41, 49, 87, 127),
        ZoneOverlap = cms.int32(2)
    ),
    spPRParams16 = cms.PSet(
        PatternDefinitions = cms.vstring(
            '4,15:15,7:7,7:7,7:7', 
            '3,16:16,7:7,7:6,7:6', 
            '3,14:14,7:7,8:7,8:7', 
            '2,18:17,7:7,7:5,7:5', 
            '2,13:12,7:7,10:7,10:7', 
            '1,22:19,7:7,7:0,7:0', 
            '1,11:8,7:7,14:7,14:7', 
            '0,30:23,7:7,7:0,7:0', 
            '0,7:0,7:7,14:7,14:7'
        ),
        SymPatternDefinitions = cms.vstring(
            '4,15:15:15:15,7:7:7:7,7:7:7:7,7:7:7:7', 
            '3,16:16:14:14,7:7:7:7,8:7:7:6,8:7:7:6', 
            '2,18:17:13:12,7:7:7:7,10:7:7:4,10:7:7:4', 
            '1,22:19:11:8,7:7:7:7,14:7:7:0,14:7:7:0', 
            '0,30:23:7:0,7:7:7:7,14:7:7:0,14:7:7:0'
        ),
        UseSymmetricalPatterns = cms.bool(True)
    ),
    spTBParams16 = cms.PSet(
        BugAmbigThetaWin = cms.bool(False),
        BugME11Dupes = cms.bool(False),
        BugSt2PhDiff = cms.bool(False),
        ThetaWindow = cms.int32(8),
        ThetaWindowZone0 = cms.int32(4),
        TwoStationSameBX = cms.bool(True),
        UseSingleHits = cms.bool(False)
    ),
    verbosity = cms.untracked.int32(0)
)


process.simGctDigis = cms.EDProducer("L1GctEmulator",
    conditionsLabel = cms.string(''),
    hardwareTest = cms.bool(False),
    ignoreRCTTauVetoBitsForIsolation = cms.bool(False),
    inputLabel = cms.InputTag("simRctDigis"),
    jetFinderType = cms.string('hardwareJetFinder'),
    postSamples = cms.uint32(1),
    preSamples = cms.uint32(1),
    useImprovedTauAlgorithm = cms.bool(True),
    writeInternalData = cms.bool(False)
)


process.simGmtCaloSumDigis = cms.EDProducer("L1TMuonCaloSumProducer",
    caloStage2Layer2Label = cms.InputTag("simCaloStage2Layer1Digis")
)


process.simGmtDigis = cms.EDProducer("L1MuGlobalMuonTrigger",
    BX_max = cms.int32(4),
    BX_max_readout = cms.int32(2),
    BX_min = cms.int32(-4),
    BX_min_readout = cms.int32(-2),
    CSCCandidates = cms.InputTag("simCsctfDigis","CSC"),
    DTCandidates = cms.InputTag("simDttfDigis","DT"),
    Debug = cms.untracked.int32(0),
    MipIsoData = cms.InputTag("simRctDigis"),
    RPCbCandidates = cms.InputTag("simRpcTriggerDigis","RPCb"),
    RPCfCandidates = cms.InputTag("simRpcTriggerDigis","RPCf"),
    SendMipIso = cms.untracked.bool(False),
    WriteLUTsAndRegs = cms.untracked.bool(False)
)


process.simGmtStage2Digis = cms.EDProducer("L1TMuonProducer",
    autoBxRange = cms.bool(True),
    autoCancelMode = cms.bool(True),
    barrelTFInput = cms.InputTag("simKBmtfDigis","BMTF"),
    bmtfCancelMode = cms.string('kftracks'),
    bxMax = cms.int32(2),
    bxMin = cms.int32(-2),
    emtfCancelMode = cms.string('coordinate'),
    forwardTFInput = cms.InputTag("simEmtfDigis","EMTF"),
    overlapTFInput = cms.InputTag("simOmtfDigis","OMTF"),
    triggerTowerInput = cms.InputTag("simGmtCaloSumDigis","TriggerTowerSums")
)


process.simGtDigis = cms.EDProducer("L1GlobalTrigger",
    AlgorithmTriggersUnmasked = cms.bool(False),
    AlgorithmTriggersUnprescaled = cms.bool(False),
    AlternativeNrBxBoardDaq = cms.uint32(0),
    AlternativeNrBxBoardEvm = cms.uint32(0),
    BstLengthBytes = cms.int32(-1),
    CastorInputTag = cms.InputTag("castorL1Digis"),
    EmulateBxInEvent = cms.int32(3),
    GctInputTag = cms.InputTag("simGctDigis"),
    GmtInputTag = cms.InputTag("simGmtDigis"),
    ProduceL1GtDaqRecord = cms.bool(True),
    ProduceL1GtEvmRecord = cms.bool(True),
    ProduceL1GtObjectMapRecord = cms.bool(True),
    ReadTechnicalTriggerRecords = cms.bool(True),
    RecordLength = cms.vint32(3, 0),
    TechnicalTriggersInputTags = cms.VInputTag("simBscDigis", "simRpcTechTrigDigis", "simHcalTechTrigDigis", "simCastorTechTrigDigis"),
    TechnicalTriggersUnmasked = cms.bool(False),
    TechnicalTriggersUnprescaled = cms.bool(False),
    TechnicalTriggersVetoUnmasked = cms.bool(False),
    WritePsbL1GtDaqRecord = cms.bool(True)
)


process.simGtExtFakeStage2Digis = cms.EDProducer("L1TExtCondProducer",
    bxFirst = cms.int32(-2),
    bxLast = cms.int32(2),
    setBptxAND = cms.bool(True),
    setBptxMinus = cms.bool(True),
    setBptxOR = cms.bool(True),
    setBptxPlus = cms.bool(True),
    tcdsRecordLabel = cms.InputTag("")
)


process.simGtStage2Digis = cms.EDProducer("L1TGlobalProducer",
    AlgoBlkInputTag = cms.InputTag("gtStage2Digis"),
    AlgorithmTriggersUnmasked = cms.bool(True),
    AlgorithmTriggersUnprescaled = cms.bool(True),
    EGammaInputTag = cms.InputTag("simCaloStage2Digis"),
    EtSumInputTag = cms.InputTag("simCaloStage2Digis"),
    ExtInputTag = cms.InputTag("simGtExtFakeStage2Digis"),
    GetPrescaleColumnFromData = cms.bool(False),
    JetInputTag = cms.InputTag("simCaloStage2Digis"),
    MuonInputTag = cms.InputTag("simGmtStage2Digis"),
    TauInputTag = cms.InputTag("simCaloStage2Digis")
)


process.simHcalTechTrigDigis = cms.EDProducer("HcalTTPTriggerRecord",
    ttpBitNames = cms.vstring(
        'L1Tech_HCAL_HF_MM_or_PP_or_PM.v0', 
        'L1Tech_HCAL_HF_coincidence_PM.v1', 
        'L1Tech_HCAL_HF_MMP_or_MPP.v0'
    ),
    ttpBits = cms.vuint32(8, 9, 10),
    ttpDigiCollection = cms.InputTag("simHcalTTPDigis")
)


process.simHcalTriggerPrimitiveDigis = cms.EDProducer("HcalTrigPrimDigiProducer",
    FG_HF_thresholds = cms.vuint32(17, 255),
    FG_threshold = cms.uint32(12),
    FrontEndFormatError = cms.bool(False),
    InputTagFEDRaw = cms.InputTag("rawDataCollector"),
    LSConfig = cms.untracked.PSet(
        HcalFeatureHFEMBit = cms.bool(False),
        Long_Short_Offset = cms.double(10.1),
        Long_vrs_Short_Slope = cms.double(100.2),
        Min_Long_Energy = cms.double(10),
        Min_Short_Energy = cms.double(10)
    ),
    MinSignalThreshold = cms.uint32(0),
    PMTNoiseThreshold = cms.uint32(0),
    PeakFinderAlgorithm = cms.int32(2),
    RunZS = cms.bool(False),
    ZS_threshold = cms.uint32(1),
    inputLabel = cms.VInputTag(cms.InputTag("simHcalUnsuppressedDigis"), cms.InputTag("simHcalUnsuppressedDigis")),
    inputUpgradeLabel = cms.VInputTag(cms.InputTag("simHcalUnsuppressedDigis","HBHEQIE11DigiCollection"), cms.InputTag("simHcalUnsuppressedDigis","HFQIE10DigiCollection")),
    latency = cms.int32(1),
    numberOfPresamples = cms.int32(2),
    numberOfPresamplesHF = cms.int32(1),
    numberOfSamples = cms.int32(4),
    numberOfSamplesHF = cms.int32(2),
    peakFilter = cms.bool(True),
    tpScales = cms.PSet(
        HBHE = cms.PSet(
            LSBQIE11 = cms.double(0.0625),
            LSBQIE11Overlap = cms.double(0.0625),
            LSBQIE8 = cms.double(0.125)
        ),
        HF = cms.PSet(
            NCTShift = cms.int32(2),
            RCTShift = cms.int32(3)
        )
    ),
    upgradeHB = cms.bool(True),
    upgradeHE = cms.bool(True),
    upgradeHF = cms.bool(True),
    useTDCInMinBiasBits = cms.bool(False),
    weights = cms.vdouble(1.0, 1.0)
)


process.simKBmtfDigis = cms.EDProducer("L1TMuonBarrelKalmanTrackProducer",
    algoSettings = cms.PSet(
        aPhi = cms.vdouble(1.942, 0.03125, 0.0273438, 0.015625),
        aPhiB = cms.vdouble(-1.508, -0.123047, -0.174805, -0.144531),
        aPhiBNLO = cms.vdouble(0.000331, 0, 0, 0),
        bPhi = cms.vdouble(-1, 0.154297, 0.173828, 0.147461),
        bPhiB = cms.vdouble(-1, 1.15332, 1.17285, 1.14648),
        chiSquare = cms.vdouble(0.0, 0.109375, 0.234375, 0.359375),
        chiSquareCut = cms.vint32(126, 126, 126, 126, 126),
        chiSquareCutCurvMax = cms.vint32(2500, 2500, 2500, 2500, 2500),
        chiSquareCutPattern = cms.vint32(7, 11, 13, 14, 15),
        chiSquareCutTight = cms.vint32(
            40, 126, 60, 126, 126, 
            126
        ),
        combos1 = cms.vint32(),
        combos2 = cms.vint32(3),
        combos3 = cms.vint32(5, 6, 7),
        combos4 = cms.vint32(
            9, 10, 11, 12, 13, 
            14, 15
        ),
        eLoss = cms.vdouble(0.000765, 0, 0, 0),
        etaLUT0 = cms.vdouble(8.946, 7.508, 6.279, 6.399),
        etaLUT1 = cms.vdouble(0.159, 0.116, 0.088, 0.128),
        initialK = cms.vdouble(-1.196, -1.581, -2.133, -2.263),
        initialK2 = cms.vdouble(-0.000326, -0.0007165, 0.002305, -0.00563),
        lutFile = cms.string('L1Trigger/L1TMuon/data/bmtf_luts/kalmanLUTs.root'),
        mScatteringPhi = cms.vdouble(0.00249, 5.47e-05, 3.49e-05, 1.37e-05),
        mScatteringPhiB = cms.vdouble(0.00722, 0.003461, 0.004447, 0.00412),
        phiAt2 = cms.double(0.15918),
        pointResolutionPhi = cms.double(1.0),
        pointResolutionPhiB = cms.double(500.0),
        pointResolutionVertex = cms.double(1.0),
        trackComp = cms.vdouble(1.75, 1.25, 0.625, 0.25),
        trackCompCut = cms.vint32(
            15, 15, 15, 15, 15, 
            15
        ),
        trackCompCutCurvMax = cms.vint32(
            34, 34, 34, 34, 34, 
            34
        ),
        trackCompCutPattern = cms.vint32(
            3, 5, 6, 9, 10, 
            12
        ),
        trackCompErr1 = cms.vdouble(2.0, 2.0, 2.0, 2.0),
        trackCompErr2 = cms.vdouble(0.21875, 0.21875, 0.21875, 0.3125),
        useOfflineAlgo = cms.bool(False),
        verbose = cms.bool(False)
    ),
    bx = cms.vint32(-2, -1, 0, 1, 2),
    src = cms.InputTag("simKBmtfStubs"),
    trackFinderSettings = cms.PSet(
        sectorSettings = cms.PSet(
            regionSettings = cms.PSet(
                verbose = cms.int32(0)
            ),
            verbose = cms.int32(0),
            wheelsToProcess = cms.vint32(-2, -1, 0, 1, 2)
        ),
        sectorsToProcess = cms.vint32(
            0, 1, 2, 3, 4, 
            5, 6, 7, 8, 9, 
            10, 11
        ),
        verbose = cms.int32(0)
    )
)


process.simKBmtfStubs = cms.EDProducer("L1TMuonBarrelKalmanStubProducer",
    cotTheta_1 = cms.vint32(
        105, 101, 97, 93, 88, 
        84, 79, 69, 64, 58, 
        52, 46, 40, 34, 21, 
        14, 7, 0, -7, -14, 
        -21, -34, -40, -46, -52, 
        -58, -64, -69, -79, -84, 
        -88, -93, -97, -101, -105
    ),
    cotTheta_2 = cms.vint32(
        93, 89, 85, 81, 77, 
        73, 68, 60, 55, 50, 
        45, 40, 34, 29, 17, 
        12, 6, 0, -6, -12, 
        -17, -29, -34, -40, -45, 
        -50, -55, -60, -68, -73, 
        -77, -81, -85, -89, -93
    ),
    cotTheta_3 = cms.vint32(
        81, 77, 74, 70, 66, 
        62, 58, 51, 46, 42, 
        38, 33, 29, 24, 15, 
        10, 5, 0, -5, -10, 
        -15, -24, -29, -33, -38, 
        -42, -46, -51, -58, -62, 
        -66, -70, -74, -77, -81
    ),
    disableMasks = cms.bool(False),
    maxBX = cms.int32(2),
    minBX = cms.int32(-2),
    minPhiQuality = cms.int32(0),
    minThetaQuality = cms.int32(0),
    srcPhi = cms.InputTag("simTwinMuxDigis"),
    srcTheta = cms.InputTag("simDtTriggerPrimitiveDigis"),
    verbose = cms.int32(0)
)


process.simMuonGEMPadDigiClusters = cms.EDProducer("GEMPadDigiClusterProducer",
    InputCollection = cms.InputTag("simMuonGEMPadDigis"),
    maxClusterSize = cms.uint32(8),
    maxClustersOHGE11 = cms.uint32(4),
    maxClustersOHGE21 = cms.uint32(5),
    mightGet = cms.optional.untracked.vstring,
    nOHGE11 = cms.uint32(2),
    nOHGE21 = cms.uint32(4)
)


process.simMuonGEMPadDigiClustersDef = cms.EDProducer("GEMPadDigiClusterProducer",
    InputCollection = cms.InputTag("simMuonGEMPadDigis"),
    maxClusterSize = cms.uint32(8),
    maxClustersOHGE11 = cms.uint32(4),
    maxClustersOHGE21 = cms.uint32(5),
    mightGet = cms.optional.untracked.vstring,
    nOHGE11 = cms.uint32(2),
    nOHGE21 = cms.uint32(4)
)


process.simMuonGEMPadDigis = cms.EDProducer("GEMPadDigiProducer",
    InputCollection = cms.InputTag("simMuonGEMDigis"),
    mightGet = cms.optional.untracked.vstring
)


process.simMuonGEMPadDigisDef = cms.EDProducer("GEMPadDigiProducer",
    InputCollection = cms.InputTag("simMuonGEMDigis"),
    mightGet = cms.optional.untracked.vstring
)


process.simMuonME0PadDigis = cms.EDProducer("ME0PadDigiProducer",
    InputCollection = cms.InputTag("simMuonME0Digis")
)


process.simMuonME0PseudoReDigis = cms.EDProducer("ME0ReDigiProducer",
    inputCollection = cms.string('simMuonME0PseudoDigis'),
    layerReadout = cms.vint32(
        1, 1, 1, 1, 1, 
        1
    ),
    maxBXReadout = cms.int32(1),
    mergeDigis = cms.bool(True),
    minBXReadout = cms.int32(-1),
    neutronAcceptance = cms.double(2.0),
    numberOfPartitions = cms.uint32(8),
    numberOfStrips = cms.uint32(384),
    timeResolution = cms.double(5),
    useCusGeoFor1PartGeo = cms.bool(True),
    usePads = cms.bool(False)
)


process.simMuonME0PseudoReDigisCoarse = cms.EDProducer("ME0ReDigiProducer",
    inputCollection = cms.string('simMuonME0PseudoDigis'),
    layerReadout = cms.vint32(
        1, 1, 1, 1, 1, 
        1
    ),
    maxBXReadout = cms.int32(1),
    mergeDigis = cms.bool(True),
    minBXReadout = cms.int32(-1),
    neutronAcceptance = cms.double(2.0),
    numberOfPartitions = cms.uint32(8),
    numberOfStrips = cms.uint32(384),
    timeResolution = cms.double(5),
    useCusGeoFor1PartGeo = cms.bool(True),
    usePads = cms.bool(True)
)


process.simOmtfDigis = cms.EDProducer("L1TMuonOverlapTrackProducer",
    XMLDumpFileName = cms.string('TestEvents.xml'),
    dropCSCPrimitives = cms.bool(False),
    dropDTPrimitives = cms.bool(False),
    dropRPCPrimitives = cms.bool(False),
    dumpDetailedResultToXML = cms.bool(False),
    dumpGPToXML = cms.bool(False),
    dumpResultToXML = cms.bool(False),
    eventsXMLFiles = cms.vstring('TestEvents.xml'),
    readEventsFromXML = cms.bool(False),
    srcCSC = cms.InputTag("simCscTriggerPrimitiveDigis","MPCSORTED"),
    srcDTPh = cms.InputTag("simDtTriggerPrimitiveDigis"),
    srcDTTh = cms.InputTag("simDtTriggerPrimitiveDigis"),
    srcRPC = cms.InputTag("simMuonRPCDigis")
)


process.simPFProducer = cms.EDProducer("SimPFProducer",
    associators = cms.VInputTag(cms.InputTag("quickTrackAssociatorByHits")),
    caloParticlesSrc = cms.InputTag("mix","MergedCaloTruth"),
    gsfTrackSrc = cms.InputTag("electronGsfTracks"),
    gsfTrackTimeErrorMap = cms.InputTag("tofPID","sigmat0"),
    gsfTrackTimeQualityMap = cms.InputTag("mtdTrackQualityMVA","mtdQualMVA"),
    gsfTrackTimeValueMap = cms.InputTag("tofPID","t0"),
    muonSrc = cms.InputTag("muons1stStep"),
    neutralEMThreshold = cms.double(0.25),
    neutralHADThreshold = cms.double(0.25),
    pfRecTrackSrc = cms.InputTag("hgcalTrackCollection","TracksInHGCal"),
    simClusterTruthSrc = cms.InputTag("mix","MergedCaloTruth"),
    simClustersSrc = cms.InputTag("particleFlowClusterHGCal"),
    superClusterThreshold = cms.double(4.0),
    timingQualityThreshold = cms.double(0.5),
    trackSrc = cms.InputTag("generalTracks"),
    trackTimeErrorMap = cms.InputTag("tofPID","sigmat0"),
    trackTimeQualityMap = cms.InputTag("mtdTrackQualityMVA","mtdQualMVA"),
    trackTimeValueMap = cms.InputTag("tofPID","t0"),
    trackingParticleSrc = cms.InputTag("mix","MergedTrackTruth")
)


process.simRctDigis = cms.EDProducer("L1RCTProducer",
    BunchCrossings = cms.vint32(0),
    conditionsLabel = cms.string(''),
    ecalDigis = cms.VInputTag("simEcalTriggerPrimitiveDigis"),
    getFedsFromOmds = cms.bool(False),
    hcalDigis = cms.VInputTag("simHcalTriggerPrimitiveDigis"),
    queryDelayInLS = cms.uint32(10),
    queryIntervalInLS = cms.uint32(100),
    useEcal = cms.bool(True),
    useHcal = cms.bool(True)
)


process.simRctUpgradeFormatDigis = cms.EDProducer("L1TCaloRCTToUpgradeConverter",
    emTag = cms.InputTag("simRctDigis"),
    regionTag = cms.InputTag("simRctDigis")
)


process.simRpcTechTrigDigis = cms.EDProducer("RPCTechnicalTrigger",
    BitNames = cms.vstring(
        'L1Tech_RPC_TTU_barrel_Cosmics/v0', 
        'L1Tech_RPC_TTU_pointing_Cosmics/v0', 
        'L1Tech_RPC_TTU_RBplus2_Cosmics/v0', 
        'L1Tech_RPC_TTU_RBplus1_Cosmics/v0', 
        'L1Tech_RPC_TTU_RB0_Cosmics/v0', 
        'L1Tech_RPC_TTU_RBminus1_Cosmics/v0', 
        'L1Tech_RPC_TTU_RBminus2_Cosmics/v0'
    ),
    BitNumbers = cms.vuint32(
        24, 25, 26, 27, 28, 
        29, 30
    ),
    ConfigFile = cms.string('hardware-pseudoconfig.txt'),
    RPCDigiLabel = cms.InputTag("simMuonRPCDigis"),
    RPCSimLinkInstance = cms.InputTag("RPCDigiSimLink"),
    UseEventSetup = cms.untracked.int32(0),
    UseRPCSimLink = cms.untracked.int32(0),
    Verbosity = cms.untracked.int32(0)
)


process.simRpcTriggerDigis = cms.EDProducer("RPCTrigger",
    RPCTriggerDebug = cms.untracked.int32(0),
    label = cms.string('simMuonRPCDigis')
)


process.simTwinMuxDigis = cms.EDProducer("L1TTwinMuxProducer",
    DTDigi_Source = cms.InputTag("simDtTriggerPrimitiveDigis"),
    DTThetaDigi_Source = cms.InputTag("simDtTriggerPrimitiveDigis"),
    RPC_Source = cms.InputTag("simMuonRPCDigis")
)


process.simpleInclusiveSecondaryVertexHighEffBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex2TrkComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("inclusiveSecondaryVertexFinderFilteredTagInfos"))
)


process.simpleInclusiveSecondaryVertexHighPurBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex3TrkComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("inclusiveSecondaryVertexFinderFilteredTagInfos"))
)


process.simpleSecondaryVertexHighEffBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex2TrkComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexTagInfos"))
)


process.simpleSecondaryVertexHighPurBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex3TrkComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexTagInfos"))
)


process.sisCone5JetExtender = cms.EDProducer("JetExtender",
    coneSize = cms.double(0.5),
    jet2TracksAtCALO = cms.InputTag("sisCone5JetTracksAssociatorAtCaloFace"),
    jet2TracksAtVX = cms.InputTag("sisCone5JetTracksAssociatorAtVertex"),
    jets = cms.InputTag("sisCone5CaloJets")
)


process.sisCone5JetTracksAssociatorAtCaloFace = cms.EDProducer("JetTracksAssociatorAtCaloFace",
    coneSize = cms.double(0.4),
    extrapolations = cms.InputTag("trackExtrapolator"),
    jets = cms.InputTag("sisCone5CaloJets"),
    trackQuality = cms.string('goodIterative'),
    tracks = cms.InputTag("generalTracks")
)


process.sisCone5JetTracksAssociatorAtVertex = cms.EDProducer("JetTracksAssociatorAtVertex",
    coneSize = cms.double(0.4),
    jets = cms.InputTag("sisCone5CaloJets"),
    pvSrc = cms.InputTag("offlinePrimaryVertices"),
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False)
)


process.softKiller = cms.EDProducer("SoftKillerProducer",
    PFCandidates = cms.InputTag("particleFlow"),
    Rho_EtaMax = cms.double(5.0),
    rParam = cms.double(0.4)
)


process.softPFElectronBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('softPFElectronComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFElectronsTagInfos"))
)


process.softPFElectronByIP2dBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('softPFElectronByIP2dComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFElectronsTagInfos"))
)


process.softPFElectronByIP3dBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('softPFElectronByIP3dComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFElectronsTagInfos"))
)


process.softPFElectronByPtBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('softPFElectronByPtComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFElectronsTagInfos"))
)


process.softPFElectronsTagInfos = cms.EDProducer("SoftPFElectronTagInfoProducer",
    DeltaRElectronJet = cms.double(0.4),
    MaxSip3Dsig = cms.double(200),
    electrons = cms.InputTag("gedGsfElectrons"),
    jets = cms.InputTag("ak4PFJetsCHS"),
    primaryVertex = cms.InputTag("offlinePrimaryVertices")
)


process.softPFMuonBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('softPFMuonComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFMuonsTagInfos"))
)


process.softPFMuonByIP2dBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('softPFMuonByIP2dComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFMuonsTagInfos"))
)


process.softPFMuonByIP3dBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('softPFMuonByIP3dComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFMuonsTagInfos"))
)


process.softPFMuonByPtBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('softPFMuonByPtComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFMuonsTagInfos"))
)


process.softPFMuonsTagInfos = cms.EDProducer("SoftPFMuonTagInfoProducer",
    filterIpsig = cms.double(4.0),
    filterPromptMuons = cms.bool(False),
    filterRatio1 = cms.double(0.4),
    filterRatio2 = cms.double(0.7),
    jets = cms.InputTag("ak4PFJetsCHS"),
    muonPt = cms.double(2.0),
    muonSIPsig = cms.double(200.0),
    muons = cms.InputTag("muons"),
    primaryVertex = cms.InputTag("offlinePrimaryVertices")
)


process.sortedPrimaryVertices = cms.EDProducer("RecoChargedRefCandidatePrimaryVertexSorter",
    assignment = cms.PSet(
        maxDistanceToJetAxis = cms.double(0.07),
        maxDtSigForPrimaryAssignment = cms.double(4.0),
        maxDxyForJetAxisAssigment = cms.double(0.1),
        maxDxyForNotReconstructedPrimary = cms.double(0.01),
        maxDxySigForNotReconstructedPrimary = cms.double(2),
        maxDzErrorForPrimaryAssignment = cms.double(0.05),
        maxDzForJetAxisAssigment = cms.double(0.1),
        maxDzForPrimaryAssignment = cms.double(0.1),
        maxDzSigForPrimaryAssignment = cms.double(5.0),
        maxJetDeltaR = cms.double(0.5),
        minJetPt = cms.double(25),
        preferHighRanked = cms.bool(False),
        useTiming = cms.bool(False)
    ),
    jets = cms.InputTag("ak4CaloJetsForTrk"),
    particles = cms.InputTag("trackRefsForJets"),
    produceAssociationToOriginalVertices = cms.bool(False),
    produceNoPileUpCollection = cms.bool(False),
    producePileUpCollection = cms.bool(False),
    produceSortedVertices = cms.bool(True),
    qualityForPrimary = cms.int32(3),
    sorting = cms.PSet(

    ),
    trackTimeResoTag = cms.InputTag(""),
    trackTimeTag = cms.InputTag(""),
    usePVMET = cms.bool(True),
    vertices = cms.InputTag("offlinePrimaryVertices")
)


process.standAloneMuons = cms.EDProducer("StandAloneMuonProducer",
    InputObjects = cms.InputTag("ancientMuonSeed"),
    MuonTrajectoryBuilder = cms.string('Exhaustive'),
    STATrajBuilderParameters = cms.PSet(
        BWFilterParameters = cms.PSet(
            BWSeedType = cms.string('fromGenerator'),
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            EnableCSCMeasurement = cms.bool(True),
            EnableDTMeasurement = cms.bool(True),
            EnableGEMMeasurement = cms.bool(True),
            EnableME0Measurement = cms.bool(True),
            EnableRPCMeasurement = cms.bool(True),
            FitDirection = cms.string('outsideIn'),
            GEMRecSegmentLabel = cms.InputTag("gemRecHits"),
            ME0RecSegmentLabel = cms.InputTag("me0Segments"),
            MaxChi2 = cms.double(100.0),
            MuonTrajectoryUpdatorParameters = cms.PSet(
                ExcludeRPCFromFit = cms.bool(False),
                Granularity = cms.int32(0),
                MaxChi2 = cms.double(25.0),
                RescaleError = cms.bool(False),
                RescaleErrorFactor = cms.double(100.0),
                UseInvalidHits = cms.bool(True)
            ),
            NumberOfSigma = cms.double(3.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            RPCRecSegmentLabel = cms.InputTag("rpcRecHits")
        ),
        DoBackwardFilter = cms.bool(True),
        DoRefit = cms.bool(False),
        DoSeedRefit = cms.bool(False),
        FilterParameters = cms.PSet(
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            EnableCSCMeasurement = cms.bool(True),
            EnableDTMeasurement = cms.bool(True),
            EnableGEMMeasurement = cms.bool(True),
            EnableME0Measurement = cms.bool(True),
            EnableRPCMeasurement = cms.bool(True),
            FitDirection = cms.string('insideOut'),
            GEMRecSegmentLabel = cms.InputTag("gemRecHits"),
            ME0RecSegmentLabel = cms.InputTag("me0Segments"),
            MaxChi2 = cms.double(1000.0),
            MuonTrajectoryUpdatorParameters = cms.PSet(
                ExcludeRPCFromFit = cms.bool(False),
                Granularity = cms.int32(0),
                MaxChi2 = cms.double(25.0),
                RescaleError = cms.bool(False),
                RescaleErrorFactor = cms.double(100.0),
                UseInvalidHits = cms.bool(True)
            ),
            NumberOfSigma = cms.double(3.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            RPCRecSegmentLabel = cms.InputTag("rpcRecHits")
        ),
        NavigationType = cms.string('Standard'),
        RefitterParameters = cms.PSet(
            FitterName = cms.string('KFFitterSmootherSTA'),
            ForceAllIterations = cms.bool(False),
            MaxFractionOfLostHits = cms.double(0.05),
            NumberOfIterations = cms.uint32(3),
            RescaleError = cms.double(100.0)
        ),
        SeedPosition = cms.string('in'),
        SeedPropagator = cms.string('SteppingHelixPropagatorAny'),
        SeedTransformerParameters = cms.PSet(
            Fitter = cms.string('KFFitterSmootherSTA'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            NMinRecHits = cms.uint32(2),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            RescaleError = cms.double(100.0),
            UseSubRecHits = cms.bool(False)
        )
    ),
    ServiceParameters = cms.PSet(
        CSCLayers = cms.untracked.bool(True),
        GEMLayers = cms.untracked.bool(True),
        ME0Layers = cms.bool(True),
        Propagators = cms.untracked.vstring(
            'SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'
        ),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot")
    )
)


process.standAloneSETMuons = cms.EDProducer("StandAloneMuonProducer",
    InputObjects = cms.InputTag("SETMuonSeed"),
    MuonTrajectoryBuilder = cms.string('DirectMuonTrajectoryBuilder'),
    STATrajBuilderParameters = cms.PSet(
        SeedTransformerParameters = cms.PSet(
            Fitter = cms.string('KFFitterSmootherSTA'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            NMinRecHits = cms.uint32(2),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            RescaleError = cms.double(1.0),
            UseSubRecHits = cms.bool(False)
        )
    ),
    ServiceParameters = cms.PSet(
        CSCLayers = cms.untracked.bool(True),
        GEMLayers = cms.untracked.bool(True),
        ME0Layers = cms.bool(True),
        Propagators = cms.untracked.vstring(
            'SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'
        ),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot")
    )
)


process.stripPairElectronHitDoublets = cms.EDProducer("HitPairEDProducer",
    clusterCheck = cms.InputTag("trackerClusterCheck"),
    layerPairs = cms.vuint32(0),
    maxElement = cms.uint32(1000000),
    maxElementTotal = cms.uint32(12000000),
    mightGet = cms.optional.untracked.vstring,
    produceIntermediateHitDoublets = cms.bool(False),
    produceSeedingHitSets = cms.bool(True),
    seedingLayers = cms.InputTag("stripPairElectronSeedLayers"),
    trackingRegions = cms.InputTag("stripPairElectronTrackingRegions"),
    trackingRegionsSeedingLayers = cms.InputTag("")
)


process.stripPairElectronSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(2),
        minRing = cms.int32(1),
        skipClusters = cms.InputTag("tripletElectronClusterMask"),
        useRingSlector = cms.bool(True)
    ),
    TIB = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        skipClusters = cms.InputTag("tripletElectronClusterMask")
    ),
    TID = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(2),
        minRing = cms.int32(1),
        skipClusters = cms.InputTag("tripletElectronClusterMask"),
        useRingSlector = cms.bool(True)
    ),
    layerList = cms.vstring(
        'TIB1+TIB2', 
        'TIB1+TID1_pos', 
        'TIB1+TID1_neg', 
        'TID2_pos+TID3_pos', 
        'TID2_neg+TID3_neg', 
        'TEC1_pos+TEC2_pos', 
        'TEC2_pos+TEC3_pos', 
        'TEC3_pos+TEC4_pos', 
        'TEC3_pos+TEC5_pos', 
        'TEC1_neg+TEC2_neg', 
        'TEC2_neg+TEC3_neg', 
        'TEC3_neg+TEC4_neg', 
        'TEC3_neg+TEC5_neg'
    )
)


process.stripPairElectronSeeds = cms.EDProducer("SeedCreatorFromRegionConsecutiveHitsEDProducer",
    MinOneOverPtError = cms.double(1),
    OriginTransverseErrorMultiplier = cms.double(1),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedMomentumForBOFF = cms.double(5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    forceKinematicWithRegionDirection = cms.bool(False),
    magneticField = cms.string(''),
    mightGet = cms.optional.untracked.vstring,
    propagator = cms.string('PropagatorWithMaterial'),
    seedingHitSets = cms.InputTag("stripPairElectronHitDoublets")
)


process.stripPairElectronTrackingRegions = cms.EDProducer("GlobalTrackingRegionFromBeamSpotEDProducer",
    RegionPSet = cms.PSet(
        beamSpot = cms.InputTag("offlineBeamSpot"),
        nSigmaZ = cms.double(0),
        originHalfLength = cms.double(12.0),
        originRadius = cms.double(0.4),
        precise = cms.bool(True),
        ptMin = cms.double(1.0),
        useMultipleScattering = cms.bool(False)
    ),
    mightGet = cms.optional.untracked.vstring
)


process.tauRegionalPixelSeedGenerator = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitPairGenerator'),
        SeedingLayers = cms.InputTag("PixelLayerPairs")
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('TauRegionalPixelSeedGenerator'),
        RegionPSet = cms.PSet(
            JetSrc = cms.InputTag("iterativeConePu5CaloJets"),
            deltaEtaRegion = cms.double(0.1),
            deltaPhiRegion = cms.double(0.1),
            howToUseMeasurementTracker = cms.string('ForSiStrips'),
            measurementTrackerName = cms.InputTag("MeasurementTrackerEvent"),
            originHalfLength = cms.double(0.2),
            originRadius = cms.double(0.2),
            originZPos = cms.double(0.0),
            precise = cms.bool(True),
            ptMin = cms.double(5.0),
            vertexSrc = cms.InputTag("hiSelectedPixelVertex")
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    TTRHBuilder = cms.string('WithTrackAngle')
)


process.tcdsDigis = cms.EDProducer("TcdsRawToDigi",
    InputLabel = cms.InputTag("rawDataCollector"),
    mightGet = cms.optional.untracked.vstring
)


process.tcdsRawToDigi = cms.EDProducer("TcdsRawToDigi",
    InputLabel = cms.InputTag("rawDataCollector"),
    mightGet = cms.optional.untracked.vstring
)


process.tevMuons = cms.EDProducer("TevMuonProducer",
    MuonCollectionLabel = cms.InputTag("globalMuons"),
    RefitIndex = cms.vint32(1, 2, 3, 4),
    Refits = cms.vstring(
        'default', 
        'firstHit', 
        'picky', 
        'dyt'
    ),
    RefitterParameters = cms.PSet(
        CSCRecSegmentLabel = cms.InputTag("csc2DRecHits"),
        Chi2CutCSC = cms.double(1.0),
        Chi2CutDT = cms.double(30.0),
        Chi2CutGEM = cms.double(1.0),
        Chi2CutME0 = cms.double(1.0),
        Chi2CutRPC = cms.double(1.0),
        Chi2ProbabilityCut = cms.double(30.0),
        DTRecSegmentLabel = cms.InputTag("dt1DRecHits"),
        DYTselector = cms.int32(1),
        DYTthrs = cms.vint32(10, 10),
        DYTthrsParameters = cms.PSet(
            eta0p8 = cms.vdouble(1, -0.919853, 0.990742),
            eta1p2 = cms.vdouble(1, -0.897354, 0.987738),
            eta2p0 = cms.vdouble(4, -0.986855, 0.998516),
            eta2p2 = cms.vdouble(1, -0.940342, 0.992955),
            eta2p4 = cms.vdouble(1, -0.947633, 0.993762)
        ),
        DYTupdator = cms.bool(True),
        DYTuseAPE = cms.bool(False),
        DYTuseThrsParametrization = cms.bool(True),
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        GEMRecHitLabel = cms.InputTag("gemRecHits"),
        HitThreshold = cms.int32(1),
        ME0RecHitLabel = cms.InputTag("me0Segments"),
        MuonHitsOption = cms.int32(1),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        PropDirForCosmics = cms.bool(False),
        Propagator = cms.string('SmartPropagatorAnyRK'),
        PtCut = cms.double(1.0),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
        RefitDirection = cms.string('insideOut'),
        RefitFlag = cms.bool(True),
        RefitRPCHits = cms.bool(True),
        SkipStation = cms.int32(-1),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        TrackerSkipSection = cms.int32(-1),
        TrackerSkipSystem = cms.int32(-1)
    ),
    ServiceParameters = cms.PSet(
        CSCLayers = cms.untracked.bool(True),
        GEMLayers = cms.untracked.bool(True),
        ME0Layers = cms.bool(True),
        Propagators = cms.untracked.vstring(
            'SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'
        ),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(True),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    )
)


process.ticlLayerTileHFNose = cms.EDProducer("TICLLayerTileProducer",
    detector = cms.string('HFNose'),
    layer_HFNose_clusters = cms.InputTag("hgcalLayerClustersHFNose"),
    layer_clusters = cms.InputTag("hgcalLayerClusters"),
    mightGet = cms.optional.untracked.vstring
)


process.ticlLayerTileProducer = cms.EDProducer("TICLLayerTileProducer",
    detector = cms.string('HGCAL'),
    layer_HFNose_clusters = cms.InputTag("hgcalLayerClustersHFNose"),
    layer_clusters = cms.InputTag("hgcalLayerClusters"),
    mightGet = cms.optional.untracked.vstring
)


process.ticlMultiClustersFromTrackstersEM = cms.EDProducer("MultiClustersFromTrackstersProducer",
    LayerClusters = cms.InputTag("hgcalLayerClusters"),
    Tracksters = cms.InputTag("ticlTrackstersEM"),
    mightGet = cms.optional.untracked.vstring,
    verbosity = cms.untracked.uint32(3)
)


process.ticlMultiClustersFromTrackstersHAD = cms.EDProducer("MultiClustersFromTrackstersProducer",
    LayerClusters = cms.InputTag("hgcalLayerClusters"),
    Tracksters = cms.InputTag("ticlTrackstersHAD"),
    mightGet = cms.optional.untracked.vstring,
    verbosity = cms.untracked.uint32(3)
)


process.ticlMultiClustersFromTrackstersMIP = cms.EDProducer("MultiClustersFromTrackstersProducer",
    LayerClusters = cms.InputTag("hgcalLayerClusters"),
    Tracksters = cms.InputTag("ticlTrackstersMIP"),
    mightGet = cms.optional.untracked.vstring,
    verbosity = cms.untracked.uint32(3)
)


process.ticlMultiClustersFromTrackstersMerge = cms.EDProducer("MultiClustersFromTrackstersProducer",
    LayerClusters = cms.InputTag("hgcalLayerClusters"),
    Tracksters = cms.InputTag("ticlTrackstersMerge"),
    mightGet = cms.optional.untracked.vstring,
    verbosity = cms.untracked.uint32(3)
)


process.ticlMultiClustersFromTrackstersTrk = cms.EDProducer("MultiClustersFromTrackstersProducer",
    LayerClusters = cms.InputTag("hgcalLayerClusters"),
    Tracksters = cms.InputTag("ticlTrackstersTrk"),
    mightGet = cms.optional.untracked.vstring,
    verbosity = cms.untracked.uint32(3)
)


process.ticlMultiClustersFromTrackstersTrkEM = cms.EDProducer("MultiClustersFromTrackstersProducer",
    LayerClusters = cms.InputTag("hgcalLayerClusters"),
    Tracksters = cms.InputTag("ticlTrackstersTrkEM"),
    mightGet = cms.optional.untracked.vstring,
    verbosity = cms.untracked.uint32(3)
)


process.ticlSeedingGlobal = cms.EDProducer("TICLSeedingRegionProducer",
    mightGet = cms.optional.untracked.vstring,
    seedingPSet = cms.PSet(
        algo_verbosity = cms.int32(0),
        type = cms.string('SeedingRegionGlobal')
    )
)


process.ticlSeedingGlobalHFNose = cms.EDProducer("TICLSeedingRegionProducer",
    mightGet = cms.optional.untracked.vstring,
    seedingPSet = cms.PSet(
        algo_verbosity = cms.int32(0),
        type = cms.string('SeedingRegionGlobal')
    )
)


process.ticlSeedingTrk = cms.EDProducer("TICLSeedingRegionProducer",
    mightGet = cms.optional.untracked.vstring,
    seedingPSet = cms.PSet(
        algo_verbosity = cms.int32(0),
        type = cms.string('SeedingRegionByTracks')
    )
)


process.ticlTrackstersEM = cms.EDProducer("TrackstersProducer",
    algo_verbosity = cms.int32(0),
    detector = cms.string('HGCAL'),
    eid_graph_path = cms.string('RecoHGCal/TICL/data/tf_models/energy_id_v0.pb'),
    eid_input_name = cms.string('input'),
    eid_min_cluster_energy = cms.double(1),
    eid_n_clusters = cms.int32(10),
    eid_n_layers = cms.int32(50),
    eid_output_name_energy = cms.string('output/regressed_energy'),
    eid_output_name_id = cms.string('output/id_probabilities'),
    energy_em_over_total_threshold = cms.double(0.9),
    etaLimitIncreaseWindow = cms.double(2.1),
    filter_on_categories = cms.vint32(0, 1),
    filtered_mask = cms.InputTag("filteredLayerClustersEM","EM"),
    itername = cms.string('EM'),
    layer_clusters = cms.InputTag("hgcalLayerClusters"),
    layer_clusters_hfnose_tiles = cms.InputTag("ticlLayerTileHFNose"),
    layer_clusters_tiles = cms.InputTag("ticlLayerTileProducer"),
    max_delta_time = cms.double(3),
    max_longitudinal_sigmaPCA = cms.double(10),
    max_missing_layers_in_trackster = cms.int32(1),
    max_out_in_hops = cms.int32(1),
    mightGet = cms.optional.untracked.vstring,
    min_cos_pointing = cms.double(0.9),
    min_cos_theta = cms.double(0.97),
    min_layers_per_trackster = cms.int32(10),
    oneTracksterPerTrackSeed = cms.bool(False),
    original_mask = cms.InputTag("ticlTrackstersTrkEM"),
    out_in_dfs = cms.bool(True),
    pid_threshold = cms.double(0.5),
    promoteEmptyRegionToTrackster = cms.bool(False),
    root_doublet_max_distance_from_seed_squared = cms.double(9999),
    seeding_regions = cms.InputTag("ticlSeedingGlobal"),
    shower_start_max_layer = cms.int32(5),
    skip_layers = cms.int32(2),
    time_layerclusters = cms.InputTag("hgcalLayerClusters","timeLayerCluster")
)


process.ticlTrackstersHAD = cms.EDProducer("TrackstersProducer",
    algo_verbosity = cms.int32(0),
    detector = cms.string('HGCAL'),
    eid_graph_path = cms.string('RecoHGCal/TICL/data/tf_models/energy_id_v0.pb'),
    eid_input_name = cms.string('input'),
    eid_min_cluster_energy = cms.double(1),
    eid_n_clusters = cms.int32(10),
    eid_n_layers = cms.int32(50),
    eid_output_name_energy = cms.string('output/regressed_energy'),
    eid_output_name_id = cms.string('output/id_probabilities'),
    energy_em_over_total_threshold = cms.double(-1),
    etaLimitIncreaseWindow = cms.double(2.1),
    filter_on_categories = cms.vint32(0),
    filtered_mask = cms.InputTag("filteredLayerClustersHAD","HAD"),
    itername = cms.string('HADRONIC'),
    layer_clusters = cms.InputTag("hgcalLayerClusters"),
    layer_clusters_hfnose_tiles = cms.InputTag("ticlLayerTileHFNose"),
    layer_clusters_tiles = cms.InputTag("ticlLayerTileProducer"),
    max_delta_time = cms.double(-1),
    max_longitudinal_sigmaPCA = cms.double(9999),
    max_missing_layers_in_trackster = cms.int32(9999),
    max_out_in_hops = cms.int32(10),
    mightGet = cms.optional.untracked.vstring,
    min_cos_pointing = cms.double(0.819),
    min_cos_theta = cms.double(0.866),
    min_layers_per_trackster = cms.int32(12),
    oneTracksterPerTrackSeed = cms.bool(False),
    original_mask = cms.InputTag("ticlTrackstersTrk"),
    out_in_dfs = cms.bool(True),
    pid_threshold = cms.double(0),
    promoteEmptyRegionToTrackster = cms.bool(False),
    root_doublet_max_distance_from_seed_squared = cms.double(9999),
    seeding_regions = cms.InputTag("ticlSeedingGlobal"),
    shower_start_max_layer = cms.int32(9999),
    skip_layers = cms.int32(1),
    time_layerclusters = cms.InputTag("hgcalLayerClusters","timeLayerCluster")
)


process.ticlTrackstersHFNoseEM = cms.EDProducer("TrackstersProducer",
    algo_verbosity = cms.int32(0),
    detector = cms.string('HFNose'),
    eid_graph_path = cms.string('RecoHGCal/TICL/data/tf_models/energy_id_v0.pb'),
    eid_input_name = cms.string('input'),
    eid_min_cluster_energy = cms.double(1),
    eid_n_clusters = cms.int32(10),
    eid_n_layers = cms.int32(50),
    eid_output_name_energy = cms.string('output/regressed_energy'),
    eid_output_name_id = cms.string('output/id_probabilities'),
    energy_em_over_total_threshold = cms.double(0.9),
    etaLimitIncreaseWindow = cms.double(2.1),
    filter_on_categories = cms.vint32(0, 1),
    filtered_mask = cms.InputTag("filteredLayerClustersHFNoseEM","EMn"),
    itername = cms.string('EM'),
    layer_clusters = cms.InputTag("hgcalLayerClustersHFNose"),
    layer_clusters_hfnose_tiles = cms.InputTag("ticlLayerTileHFNose"),
    layer_clusters_tiles = cms.InputTag("ticlLayerTileProducer"),
    max_delta_time = cms.double(3),
    max_longitudinal_sigmaPCA = cms.double(10),
    max_missing_layers_in_trackster = cms.int32(1),
    max_out_in_hops = cms.int32(1),
    mightGet = cms.optional.untracked.vstring,
    min_cos_pointing = cms.double(0.9),
    min_cos_theta = cms.double(0.97),
    min_layers_per_trackster = cms.int32(6),
    oneTracksterPerTrackSeed = cms.bool(False),
    original_mask = cms.InputTag("hgcalLayerClustersHFNose","InitialLayerClustersMask"),
    out_in_dfs = cms.bool(True),
    pid_threshold = cms.double(0.5),
    promoteEmptyRegionToTrackster = cms.bool(False),
    root_doublet_max_distance_from_seed_squared = cms.double(9999),
    seeding_regions = cms.InputTag("ticlSeedingGlobalHFNose"),
    shower_start_max_layer = cms.int32(5),
    skip_layers = cms.int32(2),
    time_layerclusters = cms.InputTag("hgcalLayerClustersHFNose","timeLayerCluster")
)


process.ticlTrackstersHFNoseMIP = cms.EDProducer("TrackstersProducer",
    algo_verbosity = cms.int32(0),
    detector = cms.string('HFNose'),
    eid_graph_path = cms.string('RecoHGCal/TICL/data/tf_models/energy_id_v0.pb'),
    eid_input_name = cms.string('input'),
    eid_min_cluster_energy = cms.double(1),
    eid_n_clusters = cms.int32(10),
    eid_n_layers = cms.int32(50),
    eid_output_name_energy = cms.string('output/regressed_energy'),
    eid_output_name_id = cms.string('output/id_probabilities'),
    energy_em_over_total_threshold = cms.double(-1),
    etaLimitIncreaseWindow = cms.double(2.1),
    filter_on_categories = cms.vint32(0),
    filtered_mask = cms.InputTag("filteredLayerClustersHFNoseMIP","MIPn"),
    itername = cms.string('MIP'),
    layer_clusters = cms.InputTag("hgcalLayerClustersHFNose"),
    layer_clusters_hfnose_tiles = cms.InputTag("ticlLayerTileHFNose"),
    layer_clusters_tiles = cms.InputTag("ticlLayerTileProducer"),
    max_delta_time = cms.double(-1),
    max_longitudinal_sigmaPCA = cms.double(9999),
    max_missing_layers_in_trackster = cms.int32(9999),
    max_out_in_hops = cms.int32(10),
    mightGet = cms.optional.untracked.vstring,
    min_cos_pointing = cms.double(0.5),
    min_cos_theta = cms.double(0.99),
    min_layers_per_trackster = cms.int32(6),
    oneTracksterPerTrackSeed = cms.bool(False),
    original_mask = cms.InputTag("hgcalLayerClustersHFNose","InitialLayerClustersMask"),
    out_in_dfs = cms.bool(False),
    pid_threshold = cms.double(0),
    promoteEmptyRegionToTrackster = cms.bool(False),
    root_doublet_max_distance_from_seed_squared = cms.double(9999),
    seeding_regions = cms.InputTag("ticlSeedingGlobalHFNose"),
    shower_start_max_layer = cms.int32(9999),
    skip_layers = cms.int32(3),
    time_layerclusters = cms.InputTag("hgcalLayerClustersHFNose","timeLayerCluster")
)


process.ticlTrackstersMIP = cms.EDProducer("TrackstersProducer",
    algo_verbosity = cms.int32(0),
    detector = cms.string('HGCAL'),
    eid_graph_path = cms.string('RecoHGCal/TICL/data/tf_models/energy_id_v0.pb'),
    eid_input_name = cms.string('input'),
    eid_min_cluster_energy = cms.double(1),
    eid_n_clusters = cms.int32(10),
    eid_n_layers = cms.int32(50),
    eid_output_name_energy = cms.string('output/regressed_energy'),
    eid_output_name_id = cms.string('output/id_probabilities'),
    energy_em_over_total_threshold = cms.double(-1),
    etaLimitIncreaseWindow = cms.double(2.1),
    filter_on_categories = cms.vint32(0),
    filtered_mask = cms.InputTag("filteredLayerClustersMIP","MIP"),
    itername = cms.string('MIP'),
    layer_clusters = cms.InputTag("hgcalLayerClusters"),
    layer_clusters_hfnose_tiles = cms.InputTag("ticlLayerTileHFNose"),
    layer_clusters_tiles = cms.InputTag("ticlLayerTileProducer"),
    max_delta_time = cms.double(-1),
    max_longitudinal_sigmaPCA = cms.double(9999),
    max_missing_layers_in_trackster = cms.int32(9999),
    max_out_in_hops = cms.int32(10),
    mightGet = cms.optional.untracked.vstring,
    min_cos_pointing = cms.double(0.5),
    min_cos_theta = cms.double(0.99),
    min_layers_per_trackster = cms.int32(10),
    oneTracksterPerTrackSeed = cms.bool(False),
    original_mask = cms.InputTag("hgcalLayerClusters","InitialLayerClustersMask"),
    out_in_dfs = cms.bool(False),
    pid_threshold = cms.double(0),
    promoteEmptyRegionToTrackster = cms.bool(False),
    root_doublet_max_distance_from_seed_squared = cms.double(9999),
    seeding_regions = cms.InputTag("ticlSeedingGlobal"),
    shower_start_max_layer = cms.int32(9999),
    skip_layers = cms.int32(3),
    time_layerclusters = cms.InputTag("hgcalLayerClusters","timeLayerCluster")
)


process.ticlTrackstersMerge = cms.EDProducer("TrackstersMergeProducer",
    cosangle_align = cms.double(0.9945),
    debug = cms.bool(True),
    e_over_h_threshold = cms.double(1),
    eid_graph_path = cms.string('RecoHGCal/TICL/data/tf_models/energy_id_v0.pb'),
    eid_input_name = cms.string('input'),
    eid_min_cluster_energy = cms.double(1),
    eid_n_clusters = cms.int32(10),
    eid_n_layers = cms.int32(50),
    eid_output_name_energy = cms.string('output/regressed_energy'),
    eid_output_name_id = cms.string('output/id_probabilities'),
    eta_bin_window = cms.int32(1),
    halo_max_distance2 = cms.double(4),
    layer_clusters = cms.InputTag("hgcalLayerClusters"),
    mightGet = cms.optional.untracked.vstring,
    optimiseAcrossTracksters = cms.bool(True),
    phi_bin_window = cms.int32(1),
    pt_neutral_threshold = cms.double(2),
    pt_sigma_high = cms.double(2),
    pt_sigma_low = cms.double(2),
    resol_calo_offset_em = cms.double(1.5),
    resol_calo_offset_had = cms.double(1.5),
    resol_calo_scale_em = cms.double(0.15),
    resol_calo_scale_had = cms.double(0.15),
    seedingTrk = cms.InputTag("ticlSeedingTrk"),
    track_max_eta = cms.double(3),
    track_max_missing_outerhits = cms.int32(5),
    track_min_eta = cms.double(1.48),
    track_min_pt = cms.double(1),
    tracks = cms.InputTag("generalTracks"),
    trackstersem = cms.InputTag("ticlTrackstersEM"),
    trackstershad = cms.InputTag("ticlTrackstersHAD"),
    tracksterstrk = cms.InputTag("ticlTrackstersTrk"),
    tracksterstrkem = cms.InputTag("ticlTrackstersTrkEM")
)


process.ticlTrackstersTrk = cms.EDProducer("TrackstersProducer",
    algo_verbosity = cms.int32(2),
    detector = cms.string('HGCAL'),
    eid_graph_path = cms.string('RecoHGCal/TICL/data/tf_models/energy_id_v0.pb'),
    eid_input_name = cms.string('input'),
    eid_min_cluster_energy = cms.double(1),
    eid_n_clusters = cms.int32(10),
    eid_n_layers = cms.int32(50),
    eid_output_name_energy = cms.string('output/regressed_energy'),
    eid_output_name_id = cms.string('output/id_probabilities'),
    energy_em_over_total_threshold = cms.double(-1),
    etaLimitIncreaseWindow = cms.double(2.1),
    filter_on_categories = cms.vint32(2, 4),
    filtered_mask = cms.InputTag("filteredLayerClustersTrk","Trk"),
    itername = cms.string('TRK'),
    layer_clusters = cms.InputTag("hgcalLayerClusters"),
    layer_clusters_hfnose_tiles = cms.InputTag("ticlLayerTileHFNose"),
    layer_clusters_tiles = cms.InputTag("ticlLayerTileProducer"),
    max_delta_time = cms.double(-1.0),
    max_longitudinal_sigmaPCA = cms.double(9999),
    max_missing_layers_in_trackster = cms.int32(9999),
    max_out_in_hops = cms.int32(10),
    mightGet = cms.optional.untracked.vstring,
    min_cos_pointing = cms.double(0.798),
    min_cos_theta = cms.double(0.866),
    min_layers_per_trackster = cms.int32(10),
    oneTracksterPerTrackSeed = cms.bool(True),
    original_mask = cms.InputTag("ticlTrackstersEM"),
    out_in_dfs = cms.bool(True),
    pid_threshold = cms.double(0),
    promoteEmptyRegionToTrackster = cms.bool(True),
    root_doublet_max_distance_from_seed_squared = cms.double(9999),
    seeding_regions = cms.InputTag("ticlSeedingTrk"),
    shower_start_max_layer = cms.int32(9999),
    skip_layers = cms.int32(3),
    time_layerclusters = cms.InputTag("hgcalLayerClusters","timeLayerCluster")
)


process.ticlTrackstersTrkEM = cms.EDProducer("TrackstersProducer",
    algo_verbosity = cms.int32(0),
    detector = cms.string('HGCAL'),
    eid_graph_path = cms.string('RecoHGCal/TICL/data/tf_models/energy_id_v0.pb'),
    eid_input_name = cms.string('input'),
    eid_min_cluster_energy = cms.double(1),
    eid_n_clusters = cms.int32(10),
    eid_n_layers = cms.int32(50),
    eid_output_name_energy = cms.string('output/regressed_energy'),
    eid_output_name_id = cms.string('output/id_probabilities'),
    energy_em_over_total_threshold = cms.double(0.9),
    etaLimitIncreaseWindow = cms.double(2.1),
    filter_on_categories = cms.vint32(0, 1),
    filtered_mask = cms.InputTag("filteredLayerClustersTrkEM","TrkEM"),
    itername = cms.string('TrkEM'),
    layer_clusters = cms.InputTag("hgcalLayerClusters"),
    layer_clusters_hfnose_tiles = cms.InputTag("ticlLayerTileHFNose"),
    layer_clusters_tiles = cms.InputTag("ticlLayerTileProducer"),
    max_delta_time = cms.double(3),
    max_longitudinal_sigmaPCA = cms.double(10),
    max_missing_layers_in_trackster = cms.int32(2),
    max_out_in_hops = cms.int32(1),
    mightGet = cms.optional.untracked.vstring,
    min_cos_pointing = cms.double(0.94),
    min_cos_theta = cms.double(0.97),
    min_layers_per_trackster = cms.int32(10),
    oneTracksterPerTrackSeed = cms.bool(False),
    original_mask = cms.InputTag("hgcalLayerClusters","InitialLayerClustersMask"),
    out_in_dfs = cms.bool(True),
    pid_threshold = cms.double(0.5),
    promoteEmptyRegionToTrackster = cms.bool(False),
    root_doublet_max_distance_from_seed_squared = cms.double(0.0025),
    seeding_regions = cms.InputTag("ticlSeedingTrk"),
    shower_start_max_layer = cms.int32(5),
    skip_layers = cms.int32(2),
    time_layerclusters = cms.InputTag("hgcalLayerClusters","timeLayerCluster")
)


process.tobTecStep = cms.EDProducer("ClassifierMerger",
    inputClassifiers = cms.vstring(
        'tobTecStepClassifier1', 
        'tobTecStepClassifier2'
    ),
    mightGet = cms.optional.untracked.vstring
)


process.tobTecStepClassifier1 = cms.EDProducer("TrackMVAClassifierDetached",
    beamspot = cms.InputTag("offlineBeamSpot"),
    ignoreVertices = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    mva = cms.PSet(
        GBRForestFileName = cms.string(''),
        GBRForestLabel = cms.string('MVASelectorIter6_13TeV')
    ),
    qualityCuts = cms.vdouble(-0.6, -0.45, -0.3),
    src = cms.InputTag("tobTecStepTracks"),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.tobTecStepClassifier2 = cms.EDProducer("TrackMVAClassifierPrompt",
    beamspot = cms.InputTag("offlineBeamSpot"),
    ignoreVertices = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    mva = cms.PSet(
        GBRForestFileName = cms.string(''),
        GBRForestLabel = cms.string('MVASelectorIter0_13TeV')
    ),
    qualityCuts = cms.vdouble(0.0, 0.0, 0.0),
    src = cms.InputTag("tobTecStepTracks"),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.tobTecStepClusters = cms.EDProducer("TrackClusterRemoverPhase2",
    TrackQuality = cms.string('highPurity'),
    maxChi2 = cms.double(9.0),
    mightGet = cms.optional.untracked.vstring,
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    oldClusterRemovalInfo = cms.InputTag(""),
    overrideTrkQuals = cms.InputTag(""),
    phase2OTClusters = cms.InputTag("siPhase2Clusters"),
    phase2pixelClusters = cms.InputTag("siPixelClusters"),
    trackClassifier = cms.InputTag("","QualityMasks"),
    trajectories = cms.InputTag("")
)


process.tobTecStepHitDoubletsPair = cms.EDProducer("HitPairEDProducer",
    clusterCheck = cms.InputTag("trackerClusterCheck"),
    layerPairs = cms.vuint32(0),
    maxElement = cms.uint32(0),
    maxElementTotal = cms.uint32(12000000),
    mightGet = cms.optional.untracked.vstring,
    produceIntermediateHitDoublets = cms.bool(False),
    produceSeedingHitSets = cms.bool(True),
    seedingLayers = cms.InputTag("tobTecStepSeedLayersPair"),
    trackingRegions = cms.InputTag("tobTecStepTrackingRegionsPair"),
    trackingRegionsSeedingLayers = cms.InputTag("")
)


process.tobTecStepHitDoubletsTripl = cms.EDProducer("HitPairEDProducer",
    clusterCheck = cms.InputTag("trackerClusterCheck"),
    layerPairs = cms.vuint32(0),
    maxElement = cms.uint32(50000000),
    maxElementTotal = cms.uint32(50000000),
    mightGet = cms.optional.untracked.vstring,
    produceIntermediateHitDoublets = cms.bool(True),
    produceSeedingHitSets = cms.bool(False),
    seedingLayers = cms.InputTag("tobTecStepSeedLayersTripl"),
    trackingRegions = cms.InputTag("tobTecStepTrackingRegionsTripl"),
    trackingRegionsSeedingLayers = cms.InputTag("")
)


process.tobTecStepHitTripletsTripl = cms.EDProducer("MultiHitFromChi2EDProducer",
    ClusterShapeHitFilterName = cms.string('ClusterShapeHitFilter'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    chi2VsPtCut = cms.bool(True),
    chi2_cuts = cms.vdouble(3, 4, 5, 5),
    detIdsToDebug = cms.vint32(0, 0, 0),
    doublets = cms.InputTag("tobTecStepHitDoubletsTripl"),
    extraHitRPhitolerance = cms.double(0),
    extraHitRZtolerance = cms.double(0),
    extraPhiKDBox = cms.double(0.01),
    extraRKDBox = cms.double(0.2),
    extraZKDBox = cms.double(0.2),
    fnSigmaRZ = cms.double(2),
    maxChi2 = cms.double(5),
    maxElement = cms.uint32(1000000),
    mightGet = cms.optional.untracked.vstring,
    phiPreFiltering = cms.double(0.3),
    pt_interv = cms.vdouble(0.4, 0.7, 1, 2),
    refitHits = cms.bool(True),
    useFixedPreFiltering = cms.bool(False)
)


process.tobTecStepMasks = cms.EDProducer("FastTrackerRecHitMaskProducer",
    TrackQuality = cms.string('highPurity'),
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    minNumberOfLayersWithMeasBeforeFiltering_ = cms.int32(0),
    oldHitRemovalInfo = cms.InputTag(""),
    recHits = cms.InputTag("fastTrackerRecHits"),
    trackClassifier = cms.InputTag("","QualityMasks"),
    trackQuality = cms.string('hightPurity'),
    trajectories = cms.InputTag("")
)


process.tobTecStepSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTiny')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(5),
        minRing = cms.int32(5),
        skipClusters = cms.InputTag("tobTecStepClusters"),
        useRingSlector = cms.bool(True)
    ),
    TOB = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTiny')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        skipClusters = cms.InputTag("tobTecStepClusters")
    ),
    layerList = cms.vstring(
        'TOB1+TOB2', 
        'TOB1+TEC1_pos', 
        'TOB1+TEC1_neg', 
        'TEC1_pos+TEC2_pos', 
        'TEC2_pos+TEC3_pos', 
        'TEC3_pos+TEC4_pos', 
        'TEC4_pos+TEC5_pos', 
        'TEC5_pos+TEC6_pos', 
        'TEC6_pos+TEC7_pos', 
        'TEC1_neg+TEC2_neg', 
        'TEC2_neg+TEC3_neg', 
        'TEC3_neg+TEC4_neg', 
        'TEC4_neg+TEC5_neg', 
        'TEC5_neg+TEC6_neg', 
        'TEC6_neg+TEC7_neg'
    )
)


process.tobTecStepSeedLayersPair = cms.EDProducer("SeedingLayersEDProducer",
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(5),
        minRing = cms.int32(5),
        skipClusters = cms.InputTag("tobTecStepClusters"),
        useRingSlector = cms.bool(True)
    ),
    TOB = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        skipClusters = cms.InputTag("tobTecStepClusters")
    ),
    layerList = cms.vstring(
        'TOB1+TEC1_pos', 
        'TOB1+TEC1_neg', 
        'TEC1_pos+TEC2_pos', 
        'TEC1_neg+TEC2_neg', 
        'TEC2_pos+TEC3_pos', 
        'TEC2_neg+TEC3_neg', 
        'TEC3_pos+TEC4_pos', 
        'TEC3_neg+TEC4_neg', 
        'TEC4_pos+TEC5_pos', 
        'TEC4_neg+TEC5_neg', 
        'TEC5_pos+TEC6_pos', 
        'TEC5_neg+TEC6_neg', 
        'TEC6_pos+TEC7_pos', 
        'TEC6_neg+TEC7_neg'
    )
)


process.tobTecStepSeedLayersTripl = cms.EDProducer("SeedingLayersEDProducer",
    MTEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        maxRing = cms.int32(7),
        minRing = cms.int32(6),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        skipClusters = cms.InputTag("tobTecStepClusters"),
        useRingSlector = cms.bool(True)
    ),
    MTOB = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        skipClusters = cms.InputTag("tobTecStepClusters")
    ),
    TOB = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        skipClusters = cms.InputTag("tobTecStepClusters")
    ),
    layerList = cms.vstring(
        'TOB1+TOB2+MTOB3', 
        'TOB1+TOB2+MTOB4', 
        'TOB1+TOB2+MTEC1_pos', 
        'TOB1+TOB2+MTEC1_neg'
    )
)


process.tobTecStepSeeds = cms.EDProducer("SeedCombiner",
    seedCollections = cms.VInputTag(cms.InputTag("tobTecStepSeedsTripl"), cms.InputTag("tobTecStepSeedsPair"))
)


process.tobTecStepSeedsPair = cms.EDProducer("SeedCreatorFromRegionConsecutiveHitsEDProducer",
    MinOneOverPtError = cms.double(1),
    OriginTransverseErrorMultiplier = cms.double(1),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('CombinedSeedComparitor'),
        comparitors = cms.VPSet(
            cms.PSet(
                ClusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
                ClusterShapeHitFilterName = cms.string('tobTecStepClusterShapeHitFilter'),
                ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
                FilterAtHelixStage = cms.bool(True),
                FilterPixelHits = cms.bool(False),
                FilterStripHits = cms.bool(True)
            ), 
            cms.PSet(
                ComponentName = cms.string('StripSubClusterShapeSeedFilter'),
                FilterAtHelixStage = cms.bool(False),
                label = cms.untracked.string('Seeds'),
                maxNSat = cms.uint32(3),
                maxTrimmedSizeDiffNeg = cms.double(1.0),
                maxTrimmedSizeDiffPos = cms.double(0.7),
                seedCutMIPs = cms.double(0.35),
                seedCutSN = cms.double(7.0),
                subclusterCutMIPs = cms.double(0.45),
                subclusterCutSN = cms.double(12.0),
                subclusterWindow = cms.double(0.7),
                trimMaxADC = cms.double(30.0),
                trimMaxFracNeigh = cms.double(0.25),
                trimMaxFracTotal = cms.double(0.15)
            )
        ),
        mode = cms.string('and')
    ),
    SeedMomentumForBOFF = cms.double(5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    forceKinematicWithRegionDirection = cms.bool(False),
    magneticField = cms.string(''),
    mightGet = cms.optional.untracked.vstring,
    propagator = cms.string('PropagatorWithMaterial'),
    seedingHitSets = cms.InputTag("tobTecStepHitDoubletsPair")
)


process.tobTecStepSeedsTripl = cms.EDProducer("SeedCreatorFromRegionConsecutiveHitsEDProducer",
    MinOneOverPtError = cms.double(1),
    OriginTransverseErrorMultiplier = cms.double(1),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('CombinedSeedComparitor'),
        comparitors = cms.VPSet(
            cms.PSet(
                ClusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
                ClusterShapeHitFilterName = cms.string('tobTecStepClusterShapeHitFilter'),
                ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
                FilterAtHelixStage = cms.bool(True),
                FilterPixelHits = cms.bool(False),
                FilterStripHits = cms.bool(True)
            ), 
            cms.PSet(
                ComponentName = cms.string('StripSubClusterShapeSeedFilter'),
                FilterAtHelixStage = cms.bool(False),
                label = cms.untracked.string('Seeds'),
                maxNSat = cms.uint32(3),
                maxTrimmedSizeDiffNeg = cms.double(1.0),
                maxTrimmedSizeDiffPos = cms.double(0.7),
                seedCutMIPs = cms.double(0.35),
                seedCutSN = cms.double(7.0),
                subclusterCutMIPs = cms.double(0.45),
                subclusterCutSN = cms.double(12.0),
                subclusterWindow = cms.double(0.7),
                trimMaxADC = cms.double(30.0),
                trimMaxFracNeigh = cms.double(0.25),
                trimMaxFracTotal = cms.double(0.15)
            )
        ),
        mode = cms.string('and')
    ),
    SeedMomentumForBOFF = cms.double(5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    forceKinematicWithRegionDirection = cms.bool(False),
    magneticField = cms.string(''),
    mightGet = cms.optional.untracked.vstring,
    propagator = cms.string('PropagatorWithMaterial'),
    seedingHitSets = cms.InputTag("tobTecStepHitTripletsTripl")
)


process.tobTecStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('tobTecStepTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('tobTecStepTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    clustersToSkip = cms.InputTag("tobTecStepClusters"),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    numHitsForSeedCleaner = cms.int32(50),
    onlyPixelHitsForSeedCleaner = cms.bool(True),
    reverseTrajectories = cms.bool(False),
    src = cms.InputTag("tobTecStepSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.tobTecStepTrackingRegionsPair = cms.EDProducer("GlobalTrackingRegionFromBeamSpotEDProducer",
    RegionPSet = cms.PSet(
        beamSpot = cms.InputTag("offlineBeamSpot"),
        nSigmaZ = cms.double(0),
        originHalfLength = cms.double(30.0),
        originRadius = cms.double(6.0),
        precise = cms.bool(True),
        ptMin = cms.double(0.6),
        useMultipleScattering = cms.bool(False)
    ),
    mightGet = cms.optional.untracked.vstring
)


process.tobTecStepTrackingRegionsTripl = cms.EDProducer("GlobalTrackingRegionFromBeamSpotEDProducer",
    RegionPSet = cms.PSet(
        beamSpot = cms.InputTag("offlineBeamSpot"),
        nSigmaZ = cms.double(0),
        originHalfLength = cms.double(20.0),
        originRadius = cms.double(3.5),
        precise = cms.bool(True),
        ptMin = cms.double(0.55),
        useMultipleScattering = cms.bool(False)
    ),
    mightGet = cms.optional.untracked.vstring
)


process.tobTecStepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('tobTecStep'),
    Fitter = cms.string('tobTecFlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("tobTecStepTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.tofPID = cms.EDProducer("TOFPIDProducer",
    fixedT0Error = cms.double(0),
    maxDtSignificance = cms.double(5),
    maxDz = cms.double(0.1),
    mightGet = cms.optional.untracked.vstring,
    minProbHeavy = cms.double(0.75),
    pSrc = cms.InputTag("trackExtenderWithMTD","generalTrackp"),
    pathLengthSrc = cms.InputTag("trackExtenderWithMTD","generalTrackPathLength"),
    sigmat0Src = cms.InputTag("trackExtenderWithMTD","generalTracksigmat0"),
    sigmatmtdSrc = cms.InputTag("trackExtenderWithMTD","generalTracksigmatmtd"),
    t0Src = cms.InputTag("trackExtenderWithMTD","generalTrackt0"),
    tmtdSrc = cms.InputTag("trackExtenderWithMTD","generalTracktmtd"),
    tracksSrc = cms.InputTag("generalTracks"),
    vtxMaxSigmaT = cms.double(0.025),
    vtxsSrc = cms.InputTag("unsortedOfflinePrimaryVertices4D")
)


process.tofPID4DnoPID = cms.EDProducer("TOFPIDProducer",
    fixedT0Error = cms.double(0),
    maxDtSignificance = cms.double(5),
    maxDz = cms.double(0.1),
    mightGet = cms.optional.untracked.vstring,
    minProbHeavy = cms.double(0.75),
    pSrc = cms.InputTag("trackExtenderWithMTD","generalTrackp"),
    pathLengthSrc = cms.InputTag("trackExtenderWithMTD","generalTrackPathLength"),
    sigmat0Src = cms.InputTag("trackExtenderWithMTD","generalTracksigmat0"),
    sigmatmtdSrc = cms.InputTag("trackExtenderWithMTD","generalTracksigmatmtd"),
    t0Src = cms.InputTag("trackExtenderWithMTD","generalTrackt0"),
    tmtdSrc = cms.InputTag("trackExtenderWithMTD","generalTracktmtd"),
    tracksSrc = cms.InputTag("generalTracks"),
    vtxMaxSigmaT = cms.double(0.025),
    vtxsSrc = cms.InputTag("unsortedOfflinePrimaryVertices4DnoPID")
)


process.totemRPClusterProducer = cms.EDProducer("TotemRPClusterProducer",
    mightGet = cms.optional.untracked.vstring,
    tagDigi = cms.InputTag("totemRPRawToDigi","TrackingStrip"),
    verbosity = cms.int32(0)
)


process.totemRPLocalTrackFitter = cms.EDProducer("TotemRPLocalTrackFitter",
    mightGet = cms.optional.untracked.vstring,
    tagUVPattern = cms.InputTag("totemRPUVPatternFinder"),
    verbosity = cms.int32(0)
)


process.totemRPRawToDigi = cms.EDProducer("TotemVFATRawToDigi",
    RawToDigi = cms.PSet(
        BC_fraction = cms.untracked.double(0.6),
        BC_min = cms.untracked.uint32(10),
        EC_fraction = cms.untracked.double(0.6),
        EC_min = cms.untracked.uint32(10),
        printErrorSummary = cms.untracked.uint32(0),
        printUnknownFrameSummary = cms.untracked.uint32(0),
        testBCMostFrequent = cms.uint32(2),
        testCRC = cms.uint32(2),
        testECMostFrequent = cms.uint32(2),
        testFootprint = cms.uint32(2),
        testID = cms.uint32(2),
        verbosity = cms.untracked.uint32(0)
    ),
    RawUnpacking = cms.PSet(
        verbosity = cms.untracked.uint32(0)
    ),
    fedIds = cms.vuint32(),
    rawDataTag = cms.InputTag("rawDataCollector"),
    subSystem = cms.string('TrackingStrip')
)


process.totemRPRecHitProducer = cms.EDProducer("TotemRPRecHitProducer",
    mightGet = cms.optional.untracked.vstring,
    tagCluster = cms.InputTag("totemRPClusterProducer"),
    verbosity = cms.int32(0)
)


process.totemRPUVPatternFinder = cms.EDProducer("TotemRPUVPatternFinder",
    allowAmbiguousCombination = cms.bool(False),
    clusterSize_a = cms.double(0.02),
    clusterSize_b = cms.double(0.3),
    exceptionalSettings = cms.VPSet(),
    maxHitsPerPlaneToSearch = cms.uint32(5),
    max_a_toFit = cms.double(10),
    mightGet = cms.optional.untracked.vstring,
    minPlanesPerProjectionToFit = cms.uint32(3),
    minPlanesPerProjectionToSearch = cms.uint32(3),
    tagRecHit = cms.InputTag("totemRPRecHitProducer"),
    threshold = cms.double(2.99),
    verbosity = cms.untracked.uint32(0)
)


process.totemTimingLocalTracks = cms.EDProducer("TotemTimingLocalTrackFitter",
    maxPlaneActiveChannels = cms.int32(2),
    mightGet = cms.optional.untracked.vstring,
    recHitsTag = cms.InputTag("totemTimingRecHits"),
    trackingAlgorithmParams = cms.PSet(
        pixelEfficiencyFunction = cms.string('(x>[0]-0.5*[1]-0.05)*(x<[0]+0.5*[1]-0.05)+0*[2]'),
        resolution = cms.double(0.01),
        sigma = cms.double(0),
        threshold = cms.double(1.5),
        thresholdFromMaximum = cms.double(0.5),
        tolerance = cms.double(0.1),
        yPosition = cms.double(0),
        yWidth = cms.double(0)
    )
)


process.totemTimingRawToDigi = cms.EDProducer("TotemVFATRawToDigi",
    RawToDigi = cms.PSet(
        printErrorSummary = cms.untracked.uint32(0),
        printUnknownFrameSummary = cms.untracked.uint32(0),
        testBCMostFrequent = cms.uint32(0),
        testCRC = cms.uint32(0),
        testECMostFrequent = cms.uint32(0),
        testFootprint = cms.uint32(0),
        testID = cms.uint32(0),
        verbosity = cms.untracked.uint32(0)
    ),
    RawUnpacking = cms.PSet(
        verbosity = cms.untracked.uint32(0)
    ),
    fedIds = cms.vuint32(),
    rawDataTag = cms.InputTag("rawDataCollector"),
    subSystem = cms.string('TotemTiming')
)


process.totemTimingRecHits = cms.EDProducer("TotemTimingRecHitProducer",
    baselinePoints = cms.int32(8),
    cfdFraction = cms.double(0.3),
    digiTag = cms.InputTag("totemTimingRawToDigi","TotemTiming"),
    hysteresis = cms.double(0.005),
    lowPassFrequency = cms.double(0.7),
    mergeTimePeaks = cms.bool(True),
    mightGet = cms.optional.untracked.vstring,
    saturationLimit = cms.double(0.85),
    smoothingPoints = cms.int32(20),
    timingCalibrationTag = cms.string('GlobalTag:TotemTimingCalibration')
)


process.totemTriggerRawToDigi = cms.EDProducer("TotemTriggerRawToDigi",
    fedId = cms.uint32(0),
    rawDataTag = cms.InputTag("rawDataCollector")
)


process.towerMaker = cms.EDProducer("CaloTowersCreator",
    AllowMissingInputs = cms.bool(False),
    EBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBSumThreshold = cms.double(0.2),
    EBThreshold = cms.double(0.07),
    EBWeight = cms.double(1.0),
    EBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EESumThreshold = cms.double(0.45),
    EEThreshold = cms.double(0.3),
    EEWeight = cms.double(1.0),
    EEWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EcalRecHitSeveritiesToBeExcluded = cms.vstring(
        'kTime', 
        'kWeird', 
        'kBad'
    ),
    EcalSeveritiesToBeUsedInBadTowers = cms.vstring(),
    EcutTower = cms.double(-1000.0),
    HBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HBThreshold = cms.double(1.2),
    HBThreshold1 = cms.double(0.8),
    HBThreshold2 = cms.double(1.2),
    HBWeight = cms.double(1.0),
    HBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HEDGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HEDThreshold = cms.double(0.2),
    HEDThreshold1 = cms.double(0.1),
    HEDWeight = cms.double(1.0),
    HEDWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HESGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HESThreshold = cms.double(0.2),
    HESThreshold1 = cms.double(0.1),
    HESWeight = cms.double(1.0),
    HESWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF1Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF1Threshold = cms.double(0.5),
    HF1Weight = cms.double(1.0),
    HF1Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF2Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF2Threshold = cms.double(0.85),
    HF2Weight = cms.double(1.0),
    HF2Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HOThreshold0 = cms.double(1.1),
    HOThresholdMinus1 = cms.double(3.5),
    HOThresholdMinus2 = cms.double(3.5),
    HOThresholdPlus1 = cms.double(3.5),
    HOThresholdPlus2 = cms.double(3.5),
    HOWeight = cms.double(1.0),
    HOWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HcalAcceptSeverityLevel = cms.uint32(9),
    HcalAcceptSeverityLevelForRejectedHit = cms.uint32(9999),
    HcalPhase = cms.int32(1),
    HcalThreshold = cms.double(-1000.0),
    MomConstrMethod = cms.int32(1),
    MomEBDepth = cms.double(0.3),
    MomEEDepth = cms.double(0.0),
    MomHBDepth = cms.double(0.2),
    MomHEDepth = cms.double(0.4),
    UseEcalRecoveredHits = cms.bool(False),
    UseEtEBTreshold = cms.bool(False),
    UseEtEETreshold = cms.bool(False),
    UseHO = cms.bool(False),
    UseHcalRecoveredHits = cms.bool(True),
    UseRejectedHitsOnly = cms.bool(False),
    UseRejectedRecoveredEcalHits = cms.bool(False),
    UseRejectedRecoveredHcalHits = cms.bool(True),
    UseSymEBTreshold = cms.bool(True),
    UseSymEETreshold = cms.bool(True),
    ecalInputs = cms.VInputTag(cms.InputTag("ecalRecHit","EcalRecHitsEB"), cms.InputTag("ecalRecHit","EcalRecHitsEE")),
    hbheInput = cms.InputTag("hbhereco"),
    hfInput = cms.InputTag("hfreco"),
    hoInput = cms.InputTag("horeco"),
    missingHcalRescaleFactorForEcal = cms.double(0)
)


process.towerMakerWithHO = cms.EDProducer("CaloTowersCreator",
    AllowMissingInputs = cms.bool(False),
    EBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBSumThreshold = cms.double(0.2),
    EBThreshold = cms.double(0.07),
    EBWeight = cms.double(1.0),
    EBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EESumThreshold = cms.double(0.45),
    EEThreshold = cms.double(0.3),
    EEWeight = cms.double(1.0),
    EEWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EcalRecHitSeveritiesToBeExcluded = cms.vstring(
        'kTime', 
        'kWeird', 
        'kBad'
    ),
    EcalSeveritiesToBeUsedInBadTowers = cms.vstring(),
    EcutTower = cms.double(-1000.0),
    HBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HBThreshold = cms.double(1.2),
    HBThreshold1 = cms.double(0.8),
    HBThreshold2 = cms.double(1.2),
    HBWeight = cms.double(1.0),
    HBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HEDGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HEDThreshold = cms.double(0.2),
    HEDThreshold1 = cms.double(0.1),
    HEDWeight = cms.double(1.0),
    HEDWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HESGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HESThreshold = cms.double(0.2),
    HESThreshold1 = cms.double(0.1),
    HESWeight = cms.double(1.0),
    HESWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF1Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF1Threshold = cms.double(0.5),
    HF1Weight = cms.double(1.0),
    HF1Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF2Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF2Threshold = cms.double(0.85),
    HF2Weight = cms.double(1.0),
    HF2Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HOThreshold0 = cms.double(1.1),
    HOThresholdMinus1 = cms.double(3.5),
    HOThresholdMinus2 = cms.double(3.5),
    HOThresholdPlus1 = cms.double(3.5),
    HOThresholdPlus2 = cms.double(3.5),
    HOWeight = cms.double(1.0),
    HOWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HcalAcceptSeverityLevel = cms.uint32(9),
    HcalAcceptSeverityLevelForRejectedHit = cms.uint32(9999),
    HcalPhase = cms.int32(1),
    HcalThreshold = cms.double(-1000.0),
    MomConstrMethod = cms.int32(1),
    MomEBDepth = cms.double(0.3),
    MomEEDepth = cms.double(0.0),
    MomHBDepth = cms.double(0.2),
    MomHEDepth = cms.double(0.4),
    UseEcalRecoveredHits = cms.bool(False),
    UseEtEBTreshold = cms.bool(False),
    UseEtEETreshold = cms.bool(False),
    UseHO = cms.bool(True),
    UseHcalRecoveredHits = cms.bool(True),
    UseRejectedHitsOnly = cms.bool(False),
    UseRejectedRecoveredEcalHits = cms.bool(False),
    UseRejectedRecoveredHcalHits = cms.bool(True),
    UseSymEBTreshold = cms.bool(True),
    UseSymEETreshold = cms.bool(True),
    ecalInputs = cms.VInputTag(cms.InputTag("ecalRecHit","EcalRecHitsEB"), cms.InputTag("ecalRecHit","EcalRecHitsEE")),
    hbheInput = cms.InputTag("hbhereco"),
    hfInput = cms.InputTag("hfreco"),
    hoInput = cms.InputTag("horeco"),
    missingHcalRescaleFactorForEcal = cms.double(0)
)


process.tpClusterProducer = cms.EDProducer("ClusterTPAssociationProducer",
    mightGet = cms.optional.untracked.vstring,
    phase2OTClusterSrc = cms.InputTag("siPhase2Clusters"),
    phase2OTSimLinkSrc = cms.InputTag("simSiPixelDigis","Tracker"),
    pixelClusterSrc = cms.InputTag("siPixelClusters"),
    pixelSimLinkSrc = cms.InputTag("simSiPixelDigis","Pixel"),
    simTrackSrc = cms.InputTag("g4SimHits"),
    stripClusterSrc = cms.InputTag("siStripClusters"),
    stripSimLinkSrc = cms.InputTag("simSiStripDigis"),
    trackingParticleSrc = cms.InputTag("mix","MergedTrackTruth")
)


process.trackClusterRemover = cms.EDProducer("TrackClusterRemover",
    TrackQuality = cms.string('highPurity'),
    maxChi2 = cms.double(30),
    mightGet = cms.optional.untracked.vstring,
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    oldClusterRemovalInfo = cms.InputTag(""),
    overrideTrkQuals = cms.InputTag(""),
    pixelClusters = cms.InputTag("siPixelClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    trackClassifier = cms.InputTag("","QualityMasks"),
    trajectories = cms.InputTag("")
)


process.trackCountingHighEffBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('trackCounting3D2ndComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.trackCountingHighPurBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('trackCounting3D3rdComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.trackExtenderWithMTD = cms.EDProducer("TrackExtenderWithMTD",
    MTDRecHitBuilder = cms.string('MTDRecHitBuilder'),
    Propagator = cms.string('PropagatorWithMaterialForMTD'),
    TrackTransformer = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        MTDRecHitBuilder = cms.string('MTDRecHitBuilder'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        Propagator = cms.string('PropagatorWithMaterialForMTD'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithTrackAngle')
    ),
    TransientTrackBuilder = cms.string('TransientTrackBuilder'),
    beamSpotSrc = cms.InputTag("offlineBeamSpot"),
    bsTimeSpread = cms.double(0.2),
    btlChi2Cut = cms.double(50),
    btlTimeChi2Cut = cms.double(10),
    dZCut = cms.double(0.1),
    estimatorMaxChi2 = cms.double(500),
    estimatorMaxNSigma = cms.double(10),
    etlChi2Cut = cms.double(50),
    etlTimeChi2Cut = cms.double(10),
    genVtxPositionSrc = cms.InputTag("genParticles","xyz0"),
    genVtxTimeSrc = cms.InputTag("genParticles","t0"),
    hitsSrc = cms.InputTag("mtdTrackingRecHits"),
    mightGet = cms.optional.untracked.vstring,
    tracksSrc = cms.InputTag("generalTracks"),
    updateTrackExtra = cms.bool(True),
    updateTrackHitPattern = cms.bool(True),
    updateTrackTrajectory = cms.bool(True),
    useSimVertex = cms.bool(False),
    useVertex = cms.bool(False),
    vtxSrc = cms.InputTag("offlinePrimaryVertices4D")
)


process.trackExtenderWithMTDBase = cms.EDProducer("TrackExtenderWithMTD",
    MTDRecHitBuilder = cms.string('MTDRecHitBuilder'),
    Propagator = cms.string('PropagatorWithMaterialForMTD'),
    TrackTransformer = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        MTDRecHitBuilder = cms.string('MTDRecHitBuilder'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        Propagator = cms.string('PropagatorWithMaterialForMTD'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithTrackAngle')
    ),
    TransientTrackBuilder = cms.string('TransientTrackBuilder'),
    beamSpotSrc = cms.InputTag("offlineBeamSpot"),
    bsTimeSpread = cms.double(0.2),
    btlChi2Cut = cms.double(50),
    btlTimeChi2Cut = cms.double(10),
    dZCut = cms.double(0.1),
    estimatorMaxChi2 = cms.double(500),
    estimatorMaxNSigma = cms.double(10),
    etlChi2Cut = cms.double(50),
    etlTimeChi2Cut = cms.double(10),
    genVtxPositionSrc = cms.InputTag("genParticles","xyz0"),
    genVtxTimeSrc = cms.InputTag("genParticles","t0"),
    hitsSrc = cms.InputTag("mtdTrackingRecHits"),
    mightGet = cms.optional.untracked.vstring,
    tracksSrc = cms.InputTag("generalTracks"),
    updateTrackExtra = cms.bool(True),
    updateTrackHitPattern = cms.bool(True),
    updateTrackTrajectory = cms.bool(True),
    useSimVertex = cms.bool(False),
    useVertex = cms.bool(False),
    vtxSrc = cms.InputTag("offlinePrimaryVertices4D")
)


process.trackExtrapolator = cms.EDProducer("TrackExtrapolator",
    trackQuality = cms.string('goodIterative'),
    trackSrc = cms.InputTag("generalTracks")
)


process.trackRefsForJets = cms.EDProducer("ChargedRefCandidateProducer",
    particleType = cms.string('pi+'),
    src = cms.InputTag("trackWithVertexRefSelector")
)


process.trackRefsForJetsBeforeSorting = cms.EDProducer("ChargedRefCandidateProducer",
    particleType = cms.string('pi+'),
    src = cms.InputTag("trackWithVertexRefSelectorBeforeSorting")
)


process.trackRefsForJetsBeforeSorting4D = cms.EDProducer("ChargedRefCandidateProducer",
    particleType = cms.string('pi+'),
    src = cms.InputTag("trackWithVertexRefSelectorBeforeSorting4D")
)


process.trackRefsForJetsBeforeSorting4DnoPID = cms.EDProducer("ChargedRefCandidateProducer",
    particleType = cms.string('pi+'),
    src = cms.InputTag("trackWithVertexRefSelectorBeforeSorting4DnoPID")
)


process.trackVertexArbitrator = cms.EDProducer("TrackVertexArbitrator",
    beamSpot = cms.InputTag("offlineBeamSpot"),
    dLenFraction = cms.double(0.333),
    dRCut = cms.double(0.4),
    distCut = cms.double(0.04),
    fitterRatio = cms.double(0.25),
    fitterSigmacut = cms.double(3),
    fitterTini = cms.double(256),
    maxTimeSignificance = cms.double(3.5),
    mightGet = cms.optional.untracked.vstring,
    primaryVertices = cms.InputTag("offlinePrimaryVertices"),
    secondaryVertices = cms.InputTag("vertexMerger"),
    sigCut = cms.double(5),
    trackMinLayers = cms.int32(4),
    trackMinPixels = cms.int32(1),
    trackMinPt = cms.double(0.4),
    tracks = cms.InputTag("generalTracks")
)


process.trackVertexArbitratorDefault = cms.EDProducer("TrackVertexArbitrator",
    beamSpot = cms.InputTag("offlineBeamSpot"),
    dLenFraction = cms.double(0.333),
    dRCut = cms.double(0.4),
    distCut = cms.double(0.04),
    fitterRatio = cms.double(0.25),
    fitterSigmacut = cms.double(3),
    fitterTini = cms.double(256),
    maxTimeSignificance = cms.double(3.5),
    mightGet = cms.optional.untracked.vstring,
    primaryVertices = cms.InputTag("offlinePrimaryVertices"),
    secondaryVertices = cms.InputTag("vertexMerger"),
    sigCut = cms.double(5),
    trackMinLayers = cms.int32(4),
    trackMinPixels = cms.int32(1),
    trackMinPt = cms.double(0.4),
    tracks = cms.InputTag("generalTracks")
)


process.trackWithVertexRefSelector = cms.EDProducer("TrackWithVertexRefSelector",
    copyExtras = cms.untracked.bool(False),
    copyTrajectories = cms.untracked.bool(False),
    d0Max = cms.double(999.0),
    dzMax = cms.double(999.0),
    etaMax = cms.double(5.0),
    etaMin = cms.double(0.0),
    nSigmaDtVertex = cms.double(0),
    nVertices = cms.uint32(0),
    normalizedChi2 = cms.double(999999.0),
    numberOfLostHits = cms.uint32(999),
    numberOfValidHits = cms.uint32(0),
    numberOfValidPixelHits = cms.uint32(0),
    ptErrorCut = cms.double(0.2),
    ptMax = cms.double(500.0),
    ptMin = cms.double(0.3),
    quality = cms.string('highPurity'),
    rhoVtx = cms.double(0.2),
    src = cms.InputTag("generalTracks"),
    timeResosTag = cms.InputTag(""),
    timesTag = cms.InputTag(""),
    useVtx = cms.bool(True),
    vertexTag = cms.InputTag("offlinePrimaryVertices"),
    vtxFallback = cms.bool(True),
    zetaVtx = cms.double(1.0)
)


process.trackWithVertexRefSelectorBeforeSorting = cms.EDProducer("TrackWithVertexRefSelector",
    copyExtras = cms.untracked.bool(False),
    copyTrajectories = cms.untracked.bool(False),
    d0Max = cms.double(999.0),
    dzMax = cms.double(999.0),
    etaMax = cms.double(5.0),
    etaMin = cms.double(0.0),
    nSigmaDtVertex = cms.double(0),
    nVertices = cms.uint32(0),
    normalizedChi2 = cms.double(999999.0),
    numberOfLostHits = cms.uint32(999),
    numberOfValidHits = cms.uint32(0),
    numberOfValidPixelHits = cms.uint32(0),
    ptErrorCut = cms.double(9e+99),
    ptMax = cms.double(9e+99),
    ptMin = cms.double(0.3),
    quality = cms.string('highPurity'),
    rhoVtx = cms.double(0.2),
    src = cms.InputTag("generalTracks"),
    timeResosTag = cms.InputTag(""),
    timesTag = cms.InputTag(""),
    useVtx = cms.bool(True),
    vertexTag = cms.InputTag("unsortedOfflinePrimaryVertices"),
    vtxFallback = cms.bool(True),
    zetaVtx = cms.double(1.0)
)


process.trackWithVertexRefSelectorBeforeSorting4D = cms.EDProducer("TrackWithVertexRefSelector",
    copyExtras = cms.untracked.bool(False),
    copyTrajectories = cms.untracked.bool(False),
    d0Max = cms.double(999.0),
    dzMax = cms.double(999.0),
    etaMax = cms.double(5.0),
    etaMin = cms.double(0.0),
    nSigmaDtVertex = cms.double(0),
    nVertices = cms.uint32(0),
    normalizedChi2 = cms.double(999999.0),
    numberOfLostHits = cms.uint32(999),
    numberOfValidHits = cms.uint32(0),
    numberOfValidPixelHits = cms.uint32(0),
    ptErrorCut = cms.double(9e+99),
    ptMax = cms.double(9e+99),
    ptMin = cms.double(0.3),
    quality = cms.string('highPurity'),
    rhoVtx = cms.double(0.2),
    src = cms.InputTag("generalTracks"),
    timeResosTag = cms.InputTag(""),
    timesTag = cms.InputTag(""),
    useVtx = cms.bool(True),
    vertexTag = cms.InputTag("unsortedOfflinePrimaryVertices4D"),
    vtxFallback = cms.bool(True),
    zetaVtx = cms.double(1.0)
)


process.trackWithVertexRefSelectorBeforeSorting4DnoPID = cms.EDProducer("TrackWithVertexRefSelector",
    copyExtras = cms.untracked.bool(False),
    copyTrajectories = cms.untracked.bool(False),
    d0Max = cms.double(999.0),
    dzMax = cms.double(999.0),
    etaMax = cms.double(5.0),
    etaMin = cms.double(0.0),
    nSigmaDtVertex = cms.double(0),
    nVertices = cms.uint32(0),
    normalizedChi2 = cms.double(999999.0),
    numberOfLostHits = cms.uint32(999),
    numberOfValidHits = cms.uint32(0),
    numberOfValidPixelHits = cms.uint32(0),
    ptErrorCut = cms.double(9e+99),
    ptMax = cms.double(9e+99),
    ptMin = cms.double(0.3),
    quality = cms.string('highPurity'),
    rhoVtx = cms.double(0.2),
    src = cms.InputTag("generalTracks"),
    timeResosTag = cms.InputTag(""),
    timesTag = cms.InputTag(""),
    useVtx = cms.bool(True),
    vertexTag = cms.InputTag("unsortedOfflinePrimaryVertices4DnoPID"),
    vtxFallback = cms.bool(True),
    zetaVtx = cms.double(1.0)
)


process.trackerClusterCheck = cms.EDProducer("ClusterCheckerEDProducer",
    ClusterCollectionLabel = cms.InputTag("siStripClusters"),
    MaxNumberOfCosmicClusters = cms.uint32(400000),
    MaxNumberOfPixelClusters = cms.uint32(40000),
    PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
    cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
    doClusterCheck = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    silentClusterCheck = cms.untracked.bool(False)
)


process.trackerClusterCheckPreSplitting = cms.EDProducer("ClusterCheckerEDProducer",
    ClusterCollectionLabel = cms.InputTag("siStripClusters"),
    MaxNumberOfCosmicClusters = cms.uint32(400000),
    MaxNumberOfPixelClusters = cms.uint32(40000),
    PixelClusterCollectionLabel = cms.InputTag("siPixelClustersPreSplitting"),
    cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
    doClusterCheck = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    silentClusterCheck = cms.untracked.bool(False)
)


process.trackerDrivenElectronSeeds = cms.EDProducer("GoodSeedProducer",
    ApplyIsolation = cms.bool(False),
    ClusterThreshold = cms.double(0.5),
    EOverPLead_minValue = cms.double(0.95),
    EcalStripSumE_deltaEta = cms.double(0.03),
    EcalStripSumE_deltaPhiOverQ_maxValue = cms.double(0.5),
    EcalStripSumE_deltaPhiOverQ_minValue = cms.double(-0.1),
    EcalStripSumE_minClusEnergy = cms.double(0.1),
    EtaMap = cms.string('RecoParticleFlow/PFBlockProducer/data/resmap_ECAL_eta.dat'),
    Fitter = cms.string('GsfTrajectoryFitter_forPreId'),
    HOverPLead_maxValue = cms.double(0.05),
    HcalWindow = cms.double(0.184),
    MaxEOverP = cms.double(3.0),
    MaxEta = cms.double(2.4),
    MaxPt = cms.double(50.0),
    MinEOverP = cms.double(0.3),
    MinPt = cms.double(2.0),
    Min_dr = cms.double(0.2),
    NHitsInSeed = cms.int32(3),
    PFEcalClusterLabel = cms.InputTag("particleFlowClusterECAL"),
    PFHcalClusterLabel = cms.InputTag("particleFlowClusterHCAL"),
    PFPSClusterLabel = cms.InputTag("particleFlowClusterPS"),
    PSThresholdFile = cms.string('RecoParticleFlow/PFTracking/data/PSThreshold.dat'),
    PhiMap = cms.string('RecoParticleFlow/PFBlockProducer/data/resmap_ECAL_phi.dat'),
    PreCkfLabel = cms.string('SeedsForCkf'),
    PreGsfLabel = cms.string('SeedsForGsf'),
    PreIdLabel = cms.string('preid'),
    ProducePreId = cms.untracked.bool(True),
    PtThresholdSavePreId = cms.untracked.double(1.0),
    Smoother = cms.string('GsfTrajectorySmoother_forPreId'),
    TMVAMethod = cms.string('BDT'),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    ThresholdFile = cms.string('RecoParticleFlow/PFTracking/data/Threshold.dat'),
    TkColList = cms.VInputTag(cms.InputTag("generalTracks")),
    TrackQuality = cms.string('highPurity'),
    UsePreShower = cms.bool(False),
    UseQuality = cms.bool(True),
    UseTMVA = cms.untracked.bool(True),
    Weights1 = cms.string('RecoParticleFlow/PFTracking/data/MVA_BDTTrackDrivenSeed_cat1.xml'),
    Weights2 = cms.string('RecoParticleFlow/PFTracking/data/MVA_BDTTrackDrivenSeed_cat2.xml'),
    Weights3 = cms.string('RecoParticleFlow/PFTracking/data/MVA_BDTTrackDrivenSeed_cat3.xml'),
    Weights4 = cms.string('RecoParticleFlow/PFTracking/data/MVA_BDTTrackDrivenSeed_cat4.xml'),
    Weights5 = cms.string('RecoParticleFlow/PFTracking/data/MVA_BDTTrackDrivenSeed_cat5.xml'),
    Weights6 = cms.string('RecoParticleFlow/PFTracking/data/MVA_BDTTrackDrivenSeed_cat6.xml'),
    Weights7 = cms.string('RecoParticleFlow/PFTracking/data/MVA_BDTTrackDrivenSeed_cat7.xml'),
    Weights8 = cms.string('RecoParticleFlow/PFTracking/data/MVA_BDTTrackDrivenSeed_cat8.xml'),
    Weights9 = cms.string('RecoParticleFlow/PFTracking/data/MVA_BDTTrackDrivenSeed_cat9.xml')
)


process.trackerDrivenElectronSeedsTmp = cms.EDProducer("GoodSeedProducer",
    ApplyIsolation = cms.bool(False),
    ClusterThreshold = cms.double(0.5),
    EOverPLead_minValue = cms.double(0.95),
    EcalStripSumE_deltaEta = cms.double(0.03),
    EcalStripSumE_deltaPhiOverQ_maxValue = cms.double(0.5),
    EcalStripSumE_deltaPhiOverQ_minValue = cms.double(-0.1),
    EcalStripSumE_minClusEnergy = cms.double(0.1),
    EtaMap = cms.string('RecoParticleFlow/PFBlockProducer/data/resmap_ECAL_eta.dat'),
    Fitter = cms.string('GsfTrajectoryFitter_forPreId'),
    HOverPLead_maxValue = cms.double(0.05),
    HcalWindow = cms.double(0.184),
    MaxEOverP = cms.double(3.0),
    MaxEta = cms.double(2.4),
    MaxPt = cms.double(50.0),
    MinEOverP = cms.double(0.3),
    MinPt = cms.double(2.0),
    Min_dr = cms.double(0.2),
    NHitsInSeed = cms.int32(3),
    PFEcalClusterLabel = cms.InputTag("particleFlowClusterECAL"),
    PFHcalClusterLabel = cms.InputTag("particleFlowClusterHCAL"),
    PFPSClusterLabel = cms.InputTag("particleFlowClusterPS"),
    PSThresholdFile = cms.string('RecoParticleFlow/PFTracking/data/PSThreshold.dat'),
    PhiMap = cms.string('RecoParticleFlow/PFBlockProducer/data/resmap_ECAL_phi.dat'),
    PreCkfLabel = cms.string('SeedsForCkf'),
    PreGsfLabel = cms.string('SeedsForGsf'),
    PreIdLabel = cms.string('preid'),
    ProducePreId = cms.untracked.bool(True),
    PtThresholdSavePreId = cms.untracked.double(1.0),
    Smoother = cms.string('GsfTrajectorySmoother_forPreId'),
    TMVAMethod = cms.string('BDT'),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    ThresholdFile = cms.string('RecoParticleFlow/PFTracking/data/Threshold.dat'),
    TkColList = cms.VInputTag(cms.InputTag("generalTracksBeforeMixing")),
    TrackQuality = cms.string('highPurity'),
    UsePreShower = cms.bool(False),
    UseQuality = cms.bool(True),
    UseTMVA = cms.untracked.bool(True),
    Weights1 = cms.string('RecoParticleFlow/PFTracking/data/MVA_BDTTrackDrivenSeed_cat1.xml'),
    Weights2 = cms.string('RecoParticleFlow/PFTracking/data/MVA_BDTTrackDrivenSeed_cat2.xml'),
    Weights3 = cms.string('RecoParticleFlow/PFTracking/data/MVA_BDTTrackDrivenSeed_cat3.xml'),
    Weights4 = cms.string('RecoParticleFlow/PFTracking/data/MVA_BDTTrackDrivenSeed_cat4.xml'),
    Weights5 = cms.string('RecoParticleFlow/PFTracking/data/MVA_BDTTrackDrivenSeed_cat5.xml'),
    Weights6 = cms.string('RecoParticleFlow/PFTracking/data/MVA_BDTTrackDrivenSeed_cat6.xml'),
    Weights7 = cms.string('RecoParticleFlow/PFTracking/data/MVA_BDTTrackDrivenSeed_cat7.xml'),
    Weights8 = cms.string('RecoParticleFlow/PFTracking/data/MVA_BDTTrackDrivenSeed_cat8.xml'),
    Weights9 = cms.string('RecoParticleFlow/PFTracking/data/MVA_BDTTrackDrivenSeed_cat9.xml')
)


process.tripletElectronClusterMask = cms.EDProducer("SeedClusterRemoverPhase2",
    oldClusterRemovalInfo = cms.InputTag("pixelLessStepSeedClusterMask"),
    phase2OTClusters = cms.InputTag("siPhase2Clusters"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    trajectories = cms.InputTag("tripletElectronSeeds")
)


process.tripletElectronHitDoublets = cms.EDProducer("HitPairEDProducer",
    clusterCheck = cms.InputTag("trackerClusterCheck"),
    layerPairs = cms.vuint32(0),
    maxElement = cms.uint32(50000000),
    maxElementTotal = cms.uint32(50000000),
    mightGet = cms.optional.untracked.vstring,
    produceIntermediateHitDoublets = cms.bool(True),
    produceSeedingHitSets = cms.bool(False),
    seedingLayers = cms.InputTag("tripletElectronSeedLayers"),
    trackingRegions = cms.InputTag("tripletElectronTrackingRegions"),
    trackingRegionsSeedingLayers = cms.InputTag("")
)


process.tripletElectronHitTriplets = cms.EDProducer("PixelTripletHLTEDProducer",
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    doublets = cms.InputTag("tripletElectronHitDoublets"),
    extraHitRPhitolerance = cms.double(0.032),
    extraHitRZtolerance = cms.double(0.037),
    maxElement = cms.uint32(0),
    mightGet = cms.optional.untracked.vstring,
    phiPreFiltering = cms.double(0.3),
    produceIntermediateHitTriplets = cms.bool(False),
    produceSeedingHitSets = cms.bool(True),
    useBending = cms.bool(True),
    useFixedPreFiltering = cms.bool(False),
    useMultScattering = cms.bool(True)
)


process.tripletElectronSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelTriplets'),
        skipClusters = cms.InputTag("pixelPairStepSeedClusterMask")
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelTriplets'),
        skipClusters = cms.InputTag("pixelPairStepSeedClusterMask")
    ),
    layerList = cms.vstring(
        'BPix1+BPix2+BPix3', 
        'BPix2+BPix3+BPix4', 
        'BPix1+BPix3+BPix4', 
        'BPix1+BPix2+BPix4', 
        'BPix2+BPix3+FPix1_pos', 
        'BPix2+BPix3+FPix1_neg', 
        'BPix1+BPix2+FPix1_pos', 
        'BPix1+BPix2+FPix1_neg', 
        'BPix1+BPix3+FPix1_pos', 
        'BPix1+BPix3+FPix1_neg', 
        'BPix2+FPix1_pos+FPix2_pos', 
        'BPix2+FPix1_neg+FPix2_neg', 
        'BPix1+FPix1_pos+FPix2_pos', 
        'BPix1+FPix1_neg+FPix2_neg', 
        'BPix1+BPix2+FPix2_pos', 
        'BPix1+BPix2+FPix2_neg', 
        'FPix1_pos+FPix2_pos+FPix3_pos', 
        'FPix1_neg+FPix2_neg+FPix3_neg', 
        'BPix1+FPix2_pos+FPix3_pos', 
        'BPix1+FPix2_neg+FPix3_neg', 
        'BPix1+FPix1_pos+FPix3_pos', 
        'BPix1+FPix1_neg+FPix3_neg'
    )
)


process.tripletElectronSeeds = cms.EDProducer("SeedCreatorFromRegionConsecutiveHitsEDProducer",
    MinOneOverPtError = cms.double(1),
    OriginTransverseErrorMultiplier = cms.double(1),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedMomentumForBOFF = cms.double(5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    forceKinematicWithRegionDirection = cms.bool(False),
    magneticField = cms.string(''),
    mightGet = cms.optional.untracked.vstring,
    propagator = cms.string('PropagatorWithMaterial'),
    seedingHitSets = cms.InputTag("tripletElectronHitTriplets")
)


process.tripletElectronTrackingRegions = cms.EDProducer("GlobalTrackingRegionFromBeamSpotEDProducer",
    RegionPSet = cms.PSet(
        beamSpot = cms.InputTag("offlineBeamSpot"),
        nSigmaZ = cms.double(4),
        originHalfLength = cms.double(0),
        originRadius = cms.double(0.02),
        precise = cms.bool(True),
        ptMin = cms.double(1.0),
        useMultipleScattering = cms.bool(False)
    ),
    mightGet = cms.optional.untracked.vstring
)


process.twinMuxStage2Digis = cms.EDProducer("L1TTwinMuxRawToDigi",
    DTTM7_FED_Source = cms.InputTag("rawDataCollector"),
    amcsecmap = cms.untracked.vint64(20015998343868, 20015998343868, 20015998343868, 20015998343868, 20015998343868),
    debug = cms.untracked.bool(False),
    feds = cms.untracked.vint32(1395, 1391, 1390, 1393, 1394),
    wheels = cms.untracked.vint32(-2, -1, 0, 1, 2)
)


process.uncleanedHybridSuperClusters = cms.EDProducer("HybridClusterProducer",
    HybridBarrelSeedThr = cms.double(1.0),
    RecHitFlagToBeExcluded = cms.vstring(
        'kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'
    ),
    RecHitSeverityToBeExcluded = cms.vstring(),
    basicclusterCollection = cms.string('hybridBarrelBasicClusters'),
    clustershapecollection = cms.string(''),
    dynamicEThresh = cms.bool(False),
    dynamicPhiRoad = cms.bool(False),
    eThreshA = cms.double(0.003),
    eThreshB = cms.double(0.1),
    eseed = cms.double(0.35),
    ethresh = cms.double(0.1),
    ewing = cms.double(0.0),
    excludeFlagged = cms.bool(False),
    posCalcParameters = cms.PSet(
        LogWeighted = cms.bool(True),
        T0_barl = cms.double(7.4),
        T0_endc = cms.double(3.1),
        T0_endcPresh = cms.double(1.2),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    recHitsCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    shapeAssociation = cms.string('hybridShapeAssoc'),
    step = cms.int32(17),
    superclusterCollection = cms.string(''),
    useEtForXi = cms.bool(True),
    xi = cms.double(0.0)
)


process.uncleanedOnlyAllConversions = cms.EDProducer("ConversionProducer",
    AlgorithmName = cms.string('mixed'),
    AllowD0 = cms.bool(True),
    AllowDeltaCot = cms.bool(True),
    AllowDeltaPhi = cms.bool(False),
    AllowMinApproach = cms.bool(True),
    AllowOppCharge = cms.bool(True),
    AllowRightBC = cms.bool(False),
    AllowSingleLeg = cms.bool(False),
    AllowTrackBC = cms.bool(False),
    AllowVertex = cms.bool(True),
    DeltaCotTheta = cms.double(0.1),
    DeltaPhi = cms.double(0.2),
    EnergyBC = cms.double(0.3),
    EnergyTotalBC = cms.double(0.3),
    HalfwayEta = cms.double(0.1),
    MaxChi2Left = cms.double(10.0),
    MaxChi2Right = cms.double(10.0),
    MinApproachHigh = cms.double(1.0),
    MinApproachLow = cms.double(-0.25),
    MinHitsLeft = cms.int32(4),
    MinHitsRight = cms.int32(2),
    UsePvtx = cms.bool(True),
    bcBarrelCollection = cms.InputTag("hybridSuperClusters","uncleanOnlyHybridSuperClusters"),
    bcEndcapCollection = cms.InputTag("multi5x5SuperClusters","uncleanOnlyMulti5x5EndcapBasicClusters"),
    bypassPreselEcal = cms.bool(False),
    bypassPreselEcalEcal = cms.bool(True),
    bypassPreselGsf = cms.bool(False),
    convertedPhotonCollection = cms.string(''),
    d0 = cms.double(0.0),
    dEtaTrackBC = cms.double(0.2),
    dEtacutForSCmatching = cms.double(0.03),
    dPhiTrackBC = cms.double(1.0),
    dPhicutForSCmatching = cms.double(0.05),
    deltaEta = cms.double(0.4),
    dz = cms.double(5.0),
    maxDelta = cms.double(0.01),
    maxNbrOfIterations = cms.int32(40),
    maxNumOfTrackInPU = cms.int32(999999),
    maxReducedChiSq = cms.double(225.0),
    maxTrackRho = cms.double(120.0),
    maxTrackZ = cms.double(300.0),
    minChiSqImprovement = cms.double(50.0),
    minSCEt = cms.double(10.0),
    primaryVertexProducer = cms.InputTag("offlinePrimaryVerticesWithBS"),
    rCut = cms.double(2.0),
    scBarrelProducer = cms.InputTag("uncleanedOnlyCorrectedHybridSuperClusters"),
    scEndcapProducer = cms.InputTag("uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower"),
    src = cms.InputTag("uncleanedOnlyGsfGeneralInOutOutInConversionTrackMerger"),
    vtxChi2 = cms.double(0.0005)
)


process.uncleanedOnlyCkfInOutTracksFromConversions = cms.EDProducer("TrackProducerWithSCAssociation",
    AlgorithmName = cms.string('inOutEcalSeededConv'),
    ComponentName = cms.string('uncleanedOnlyCkfInOutTracksFromConversions'),
    Fitter = cms.string('KFFittingSmootherForInOut'),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('alongMomElePropagator'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(False),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    producer = cms.string('uncleanedOnlyConversionTrackCandidates'),
    recoTrackSCAssociationCollection = cms.string('inOutTrackSCAssociationCollection'),
    src = cms.InputTag("uncleanedOnlyConversionTrackCandidates","inOutTracksFromConversions"),
    trackCandidateSCAssociationCollection = cms.string('inOutTrackCandidateSCAssociationCollection')
)


process.uncleanedOnlyCkfOutInTracksFromConversions = cms.EDProducer("TrackProducerWithSCAssociation",
    AlgorithmName = cms.string('outInEcalSeededConv'),
    ComponentName = cms.string('uncleanedOnlyCkfOutInTracksFromConversions'),
    Fitter = cms.string('KFFitterForOutIn'),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('alongMomElePropagator'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(False),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    producer = cms.string('uncleanedOnlyConversionTrackCandidates'),
    recoTrackSCAssociationCollection = cms.string('outInTrackSCAssociationCollection'),
    src = cms.InputTag("uncleanedOnlyConversionTrackCandidates","outInTracksFromConversions"),
    trackCandidateSCAssociationCollection = cms.string('outInTrackCandidateSCAssociationCollection')
)


process.uncleanedOnlyConversionTrackCandidates = cms.EDProducer("ConversionTrackCandidateProducer",
    InOutRedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    MeasurementTrackerName = cms.string(''),
    MissingHitPenalty = cms.double(20.0),
    OutInRedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    RecHitFlagToBeExcludedEB = cms.vstring(
        'kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'
    ),
    RecHitFlagToBeExcludedEE = cms.vstring(
        'kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'
    ),
    RecHitSeverityToBeExcludedEB = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    RecHitSeverityToBeExcludedEE = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    TrajectoryBuilder = cms.string('TrajectoryBuilderForConversions'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('TrajectoryBuilderForConversions')
    ),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('alongMomElePropagator'),
        propagatorOppositeTISE = cms.string('oppositeToMomElePropagator')
    ),
    ValidHitBonus = cms.double(5.0),
    allowSharedFirstHit = cms.bool(True),
    barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    bcBarrelCollection = cms.InputTag("hybridSuperClusters","uncleanOnlyHybridSuperClusters"),
    bcECut = cms.double(1.5),
    bcEndcapCollection = cms.InputTag("multi5x5SuperClusters","uncleanOnlyMulti5x5EndcapBasicClusters"),
    bcEtCut = cms.double(1.5),
    ecalIsoCut_offset = cms.double(999999999),
    ecalIsoCut_slope = cms.double(0.0),
    endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    fractionShared = cms.double(0.5),
    hOverEConeSize = cms.double(0.15),
    hcalTowers = cms.InputTag("towerMaker"),
    inOutTrackCandidateCollection = cms.string('inOutTracksFromConversions'),
    inOutTrackCandidateSCAssociationCollection = cms.string('inOutTrackCandidateSCAssociationCollection'),
    isoConeR = cms.double(0.4),
    isoEMin = cms.double(0.08),
    isoEtMin = cms.double(0.0),
    isoEtaSlice = cms.double(2.5),
    isoInnerConeR = cms.double(3.5),
    maxHOverE = cms.double(0.15),
    maxNumOfSeedsInOut = cms.int32(50),
    maxNumOfSeedsOutIn = cms.int32(50),
    minSCEt = cms.double(20.0),
    outInTrackCandidateCollection = cms.string('outInTracksFromConversions'),
    outInTrackCandidateSCAssociationCollection = cms.string('outInTrackCandidateSCAssociationCollection'),
    scHybridBarrelProducer = cms.InputTag("uncleanedOnlyCorrectedHybridSuperClusters"),
    scIslandEndcapProducer = cms.InputTag("uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower"),
    useEtCut = cms.bool(True),
    useHitsSplitting = cms.bool(False),
    useNumXstals = cms.bool(True),
    vetoClusteredHits = cms.bool(False)
)


process.uncleanedOnlyCorrectedHybridSuperClusters = cms.EDProducer("EgammaSCCorrectionMaker",
    applyCrackCorrection = cms.bool(True),
    applyEnergyCorrection = cms.bool(True),
    applyLocalContCorrection = cms.bool(True),
    corectedSuperClusterCollection = cms.string(''),
    crackCorrectorName = cms.string('EcalClusterCrackCorrection'),
    energyCorrectorName = cms.string('EcalClusterEnergyCorrectionObjectSpecific'),
    etThresh = cms.double(0.0),
    hyb_fCorrPset = cms.PSet(
        brLinearHighThr = cms.double(8.0),
        brLinearLowThr = cms.double(1.1),
        fBremVec = cms.vdouble(-0.04382, 0.1169, 0.9267, -0.0009413, 1.419),
        fEtEtaVec = cms.vdouble(
            0, 1.00121, -0.63672, 0, 0, 
            0, 0.5655, 6.457, 0.5081, 8.0, 
            1.023, -0.00181
        )
    ),
    localContCorrectorName = cms.string('EcalBasicClusterLocalContCorrection'),
    modeEB = cms.int32(0),
    modeEE = cms.int32(0),
    rawSuperClusterProducer = cms.InputTag("hybridSuperClusters","uncleanOnlyHybridSuperClusters"),
    recHitProducer = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    sigmaElectronicNoise = cms.double(0.03),
    superClusterAlgo = cms.string('Hybrid')
)


process.uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower = cms.EDProducer("EgammaSCCorrectionMaker",
    VerbosityLevel = cms.string('ERROR'),
    applyCrackCorrection = cms.bool(True),
    applyEnergyCorrection = cms.bool(True),
    applyLocalContCorrection = cms.bool(False),
    corectedSuperClusterCollection = cms.string(''),
    crackCorrectorName = cms.string('EcalClusterCrackCorrection'),
    energyCorrectorName = cms.string('EcalClusterEnergyCorrectionObjectSpecific'),
    etThresh = cms.double(0.0),
    fix_fCorrPset = cms.PSet(
        brLinearHighThr = cms.double(6.0),
        brLinearLowThr = cms.double(0.9),
        fBremVec = cms.vdouble(-0.05228, 0.08738, 0.9508, 0.002677, 1.221),
        fEtEtaVec = cms.vdouble(
            1, -0.4386, -32.38, 0.6372, 15.67, 
            -0.0928, -2.462, 1.138, 20.93
        )
    ),
    localContCorrectorName = cms.string('EcalBasicClusterLocalContCorrection'),
    modeEB = cms.int32(0),
    modeEE = cms.int32(0),
    rawSuperClusterProducer = cms.InputTag("uncleanedOnlyMulti5x5SuperClustersWithPreshower"),
    recHitProducer = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    sigmaElectronicNoise = cms.double(0.15),
    superClusterAlgo = cms.string('Multi5x5')
)


process.uncleanedOnlyElectronCkfTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('TrajectoryBuilderForElectrons')
    ),
    TrajectoryCleaner = cms.string('electronTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    reverseTrajectories = cms.bool(False),
    src = cms.InputTag("uncleanedOnlyElectronSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.uncleanedOnlyElectronGsfTracks = cms.EDProducer("GsfTrackProducer",
    AlgorithmName = cms.string('gsf'),
    Fitter = cms.string('GsfElectronFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('fwdGsfElectronPropagator'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(False),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    producer = cms.string(''),
    src = cms.InputTag("uncleanedOnlyElectronCkfTrackCandidates"),
    useHitsSplitting = cms.bool(False)
)


process.uncleanedOnlyElectronSeeds = cms.EDProducer("ElectronSeedProducer",
    DeltaPhi1High = cms.double(0.08),
    DeltaPhi1Low = cms.double(0.23),
    DeltaPhi2B = cms.double(0.008),
    DeltaPhi2F = cms.double(0.012),
    HGCalConfig = cms.PSet(
        HGCBHInput = cms.InputTag("HGCalRecHit","HGCHEBRecHits"),
        HGCEEInput = cms.InputTag("HGCalRecHit","HGCEERecHits"),
        HGCFHInput = cms.InputTag("HGCalRecHit","HGCHEFRecHits")
    ),
    HighPtThreshold = cms.double(35),
    LowPtThreshold = cms.double(5),
    PhiMax2B = cms.double(0.002),
    PhiMax2F = cms.double(0.003),
    SCEtCut = cms.double(0),
    SizeWindowENeg = cms.double(0.675),
    allowHGCal = cms.bool(True),
    applyHOverECut = cms.bool(True),
    barrelSuperClusters = cms.InputTag("uncleanedOnlyCorrectedHybridSuperClusters"),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    deltaZ1WithVertex = cms.double(25),
    dynamicPhiRoad = cms.bool(True),
    ePhiMax1 = cms.double(0.075),
    ePhiMin1 = cms.double(-0.125),
    endcapSuperClusters = cms.InputTag("uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower"),
    hOverEConeSize = cms.double(0.15),
    hOverEPtMin = cms.double(0),
    hcalTowers = cms.InputTag("towerMaker"),
    initialSeedsVector = cms.VInputTag("initialStepSeeds", "highPtTripletStepSeeds", "tripletElectronSeeds"),
    maxHOverEBarrel = cms.double(0.15),
    maxHOverEEndcaps = cms.double(0.15),
    mightGet = cms.optional.untracked.vstring,
    nSigmasDeltaZ1 = cms.double(5),
    pPhiMax1 = cms.double(0.125),
    pPhiMin1 = cms.double(-0.075),
    r2MaxF = cms.double(0.15),
    rMaxI = cms.double(0.2),
    useRecoVertex = cms.bool(False),
    vertices = cms.InputTag("offlinePrimaryVerticesWithBS"),
    z2MaxB = cms.double(0.09)
)


process.uncleanedOnlyGeneralConversionTrackProducer = cms.EDProducer("ConversionTrackProducer",
    TrackProducer = cms.string('generalTracks'),
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    filterOnConvTrackHyp = cms.bool(True),
    minConvRadius = cms.double(2.0),
    setArbitratedEcalSeeded = cms.bool(False),
    setArbitratedMerged = cms.bool(True),
    setArbitratedMergedEcalGeneral = cms.bool(True),
    setIsGsfTrackOpen = cms.bool(False),
    setTrackerOnly = cms.bool(True),
    useTrajectory = cms.bool(False)
)


process.uncleanedOnlyGeneralInOutOutInConversionTrackMerger = cms.EDProducer("ConversionTrackMerger",
    ShareFrac = cms.double(0.19),
    TrackProducer1 = cms.InputTag("uncleanedOnlyInOutOutInConversionTrackMerger"),
    TrackProducer2 = cms.InputTag("uncleanedOnlyGeneralConversionTrackProducer"),
    allowFirstHitShare = cms.bool(True),
    arbitratedEcalSeededPreferCollection = cms.int32(-1),
    arbitratedMergedEcalGeneralPreferCollection = cms.int32(2),
    arbitratedMergedPreferCollection = cms.int32(3),
    checkCharge = cms.bool(True),
    minProb = cms.double(1e-06),
    outputPreferCollection = cms.int32(-1),
    trackerOnlyPreferCollection = cms.int32(-1)
)


process.uncleanedOnlyGsfConversionTrackProducer = cms.EDProducer("ConversionTrackProducer",
    TrackProducer = cms.string('uncleanedOnlyElectronGsfTracks'),
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    filterOnConvTrackHyp = cms.bool(False),
    minConvRadius = cms.double(2.0),
    setArbitratedEcalSeeded = cms.bool(False),
    setArbitratedMerged = cms.bool(True),
    setArbitratedMergedEcalGeneral = cms.bool(False),
    setIsGsfTrackOpen = cms.bool(False),
    setTrackerOnly = cms.bool(False),
    useTrajectory = cms.bool(False)
)


process.uncleanedOnlyGsfElectronCores = cms.EDProducer("GsfElectronCoreEcalDrivenProducer",
    ctfTracks = cms.InputTag("generalTracks"),
    gsfPfRecTracks = cms.InputTag("uncleanedOnlyPfTrackElec"),
    gsfTracks = cms.InputTag("uncleanedOnlyElectronGsfTracks"),
    mightGet = cms.optional.untracked.vstring,
    useGsfPfRecTracks = cms.bool(True)
)


process.uncleanedOnlyGsfElectrons = cms.EDProducer("GsfElectronProducer",
    ElecMVAFilesString = cms.vstring(
        'RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_10_17Feb2011.weights.xml', 
        'RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_12_17Feb2011.weights.xml', 
        'RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_20_17Feb2011.weights.xml', 
        'RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_22_17Feb2011.weights.xml'
    ),
    MaxElePtForOnlyMVA = cms.double(50),
    PreSelectMVA = cms.double(-0.1),
    SoftElecMVAFilesString = cms.vstring('RecoEgamma/ElectronIdentification/data/TMVA_BDTSoftElectrons_7Feb2014.weights.xml'),
    ambClustersOverlapStrategy = cms.uint32(1),
    ambSortingStrategy = cms.uint32(1),
    applyAmbResolution = cms.bool(False),
    applyPreselection = cms.bool(False),
    barrelRecHitCollectionTag = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    checkHcalStatus = cms.bool(True),
    combinationRegressionWeightFile = cms.vstring(),
    combinationRegressionWeightLabels = cms.vstring(),
    combinationWeightsFromDB = cms.bool(True),
    conversionsTag = cms.InputTag("allConversions"),
    crackCorrectionFunction = cms.string('EcalClusterCrackCorrection'),
    ctfTracksCheck = cms.bool(True),
    ctfTracksTag = cms.InputTag("generalTracks"),
    eMinBarrel = cms.double(0.095),
    eMinEndcaps = cms.double(0),
    ecalDrivenEcalEnergyFromClassBasedParameterization = cms.bool(True),
    ecalDrivenEcalErrorFromClassBasedParameterization = cms.bool(True),
    ecalRefinedRegressionWeightFiles = cms.vstring(),
    ecalRefinedRegressionWeightLabels = cms.vstring(),
    ecalWeightsFromDB = cms.bool(True),
    egmPFCandidatesTag = cms.InputTag("particleFlowEGamma"),
    endcapRecHitCollectionTag = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    etMinBarrel = cms.double(0),
    etMinEndcaps = cms.double(0.11),
    etMinHcal = cms.double(0),
    fillConvVtxFitProb = cms.bool(True),
    gsfElectronCoresTag = cms.InputTag("uncleanedOnlyGsfElectronCores"),
    gsfPfRecTracksTag = cms.InputTag("uncleanedOnlyPfTrackElec"),
    hcalTowers = cms.InputTag("towerMaker"),
    ignoreNotPreselected = cms.bool(True),
    intRadiusEcalBarrel = cms.double(3),
    intRadiusEcalEndcaps = cms.double(3),
    intRadiusHcal = cms.double(0.15),
    jurassicWidth = cms.double(1.5),
    mightGet = cms.optional.untracked.vstring,
    preselection = cms.PSet(
        hOverEConeSize = cms.double(0.15),
        hOverEPtMin = cms.double(0),
        isBarrel = cms.bool(False),
        isEndcaps = cms.bool(False),
        isFiducial = cms.bool(False),
        maxDeltaEtaBarrel = cms.double(0.02),
        maxDeltaEtaEndcaps = cms.double(0.02),
        maxDeltaPhiBarrel = cms.double(0.15),
        maxDeltaPhiEndcaps = cms.double(0.15),
        maxEOverPBarrel = cms.double(999999999),
        maxEOverPEndcaps = cms.double(999999999),
        maxFbremBarrel = cms.double(999999999),
        maxFbremEndcaps = cms.double(999999999),
        maxHBarrelCone = cms.double(0),
        maxHBarrelTower = cms.double(0),
        maxHEndcapsCone = cms.double(0),
        maxHEndcapsTower = cms.double(0),
        maxHOverEBarrelCone = cms.double(0.15),
        maxHOverEBarrelTower = cms.double(0.15),
        maxHOverEEndcapsCone = cms.double(0.15),
        maxHOverEEndcapsTower = cms.double(0.15),
        maxSigmaIetaIetaBarrel = cms.double(999999999),
        maxSigmaIetaIetaEndcaps = cms.double(999999999),
        maxTIP = cms.double(999999999),
        minEOverPBarrel = cms.double(0),
        minEOverPEndcaps = cms.double(0),
        minMVA = cms.double(-0.4),
        minMvaByPassForIsolated = cms.double(-0.4),
        minSCEtBarrel = cms.double(4),
        minSCEtEndcaps = cms.double(4),
        seedFromTEC = cms.bool(True)
    ),
    pureTrackerDrivenEcalErrorFromSimpleParameterization = cms.bool(True),
    recHitFlagsToBeExcludedBarrel = cms.vstring(
        'kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'
    ),
    recHitFlagsToBeExcludedEndcaps = cms.vstring(
        'kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'
    ),
    recHitSeverityToBeExcludedBarrel = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    recHitSeverityToBeExcludedEndcaps = cms.vstring(
        'kWeird', 
        'kBad', 
        'kTime'
    ),
    resetMvaValuesUsingPFCandidates = cms.bool(False),
    seedsTag = cms.InputTag("uncleanedOnlyElectronSeeds"),
    superClusterErrorFunction = cms.string('EcalClusterEnergyUncertaintyObjectSpecific'),
    trkIsol03Cfg = cms.PSet(
        barrelCuts = cms.PSet(
            algosToReject = cms.vstring('jetCoreRegionalStep'),
            allowedQualities = cms.vstring(),
            maxDPtPt = cms.double(-1),
            maxDR = cms.double(0.3),
            maxDZ = cms.double(0.2),
            minDEta = cms.double(0.015),
            minDR = cms.double(0.0),
            minHits = cms.int32(-1),
            minPixelHits = cms.int32(-1),
            minPt = cms.double(0.7)
        ),
        endcapCuts = cms.PSet(
            algosToReject = cms.vstring('jetCoreRegionalStep'),
            allowedQualities = cms.vstring(),
            maxDPtPt = cms.double(-1),
            maxDR = cms.double(0.3),
            maxDZ = cms.double(0.2),
            minDEta = cms.double(0.015),
            minDR = cms.double(0.0),
            minHits = cms.int32(-1),
            minPixelHits = cms.int32(-1),
            minPt = cms.double(0.7)
        )
    ),
    trkIsol04Cfg = cms.PSet(
        barrelCuts = cms.PSet(
            algosToReject = cms.vstring('jetCoreRegionalStep'),
            allowedQualities = cms.vstring(),
            maxDPtPt = cms.double(-1),
            maxDR = cms.double(0.4),
            maxDZ = cms.double(0.2),
            minDEta = cms.double(0.015),
            minDR = cms.double(0.0),
            minHits = cms.int32(-1),
            minPixelHits = cms.int32(-1),
            minPt = cms.double(0.7)
        ),
        endcapCuts = cms.PSet(
            algosToReject = cms.vstring('jetCoreRegionalStep'),
            allowedQualities = cms.vstring(),
            maxDPtPt = cms.double(-1),
            maxDR = cms.double(0.4),
            maxDZ = cms.double(0.2),
            minDEta = cms.double(0.015),
            minDR = cms.double(0.0),
            minHits = cms.int32(-1),
            minPixelHits = cms.int32(-1),
            minPt = cms.double(0.7)
        )
    ),
    trkIsolHEEP03Cfg = cms.PSet(
        barrelCuts = cms.PSet(
            algosToReject = cms.vstring(),
            allowedQualities = cms.vstring(),
            maxDPtPt = cms.double(0.1),
            maxDR = cms.double(0.3),
            maxDZ = cms.double(0.1),
            minDEta = cms.double(0.005),
            minDR = cms.double(0.0),
            minHits = cms.int32(8),
            minPixelHits = cms.int32(1),
            minPt = cms.double(1.0)
        ),
        endcapCuts = cms.PSet(
            algosToReject = cms.vstring(),
            allowedQualities = cms.vstring(),
            maxDPtPt = cms.double(0.1),
            maxDR = cms.double(0.3),
            maxDZ = cms.double(0.5),
            minDEta = cms.double(0.005),
            minDR = cms.double(0.0),
            minHits = cms.int32(8),
            minPixelHits = cms.int32(1),
            minPt = cms.double(1.0)
        )
    ),
    trkIsolHEEP04Cfg = cms.PSet(
        barrelCuts = cms.PSet(
            algosToReject = cms.vstring(),
            allowedQualities = cms.vstring(),
            maxDPtPt = cms.double(0.1),
            maxDR = cms.double(0.4),
            maxDZ = cms.double(0.1),
            minDEta = cms.double(0.005),
            minDR = cms.double(0.0),
            minHits = cms.int32(8),
            minPixelHits = cms.int32(1),
            minPt = cms.double(1.0)
        ),
        endcapCuts = cms.PSet(
            algosToReject = cms.vstring(),
            allowedQualities = cms.vstring(),
            maxDPtPt = cms.double(0.1),
            maxDR = cms.double(0.4),
            maxDZ = cms.double(0.5),
            minDEta = cms.double(0.005),
            minDR = cms.double(0.0),
            minHits = cms.int32(8),
            minPixelHits = cms.int32(1),
            minPt = cms.double(1.0)
        )
    ),
    useCombinationRegression = cms.bool(False),
    useDefaultEnergyCorrection = cms.bool(True),
    useEcalRegression = cms.bool(False),
    useGsfPfRecTracks = cms.bool(True),
    useNumCrystals = cms.bool(True),
    vetoClustered = cms.bool(False),
    vtxTag = cms.InputTag("offlinePrimaryVertices")
)


process.uncleanedOnlyGsfGeneralInOutOutInConversionTrackMerger = cms.EDProducer("ConversionTrackMerger",
    ShareFrac = cms.double(0.19),
    TrackProducer1 = cms.InputTag("uncleanedOnlyGeneralInOutOutInConversionTrackMerger"),
    TrackProducer2 = cms.InputTag("uncleanedOnlyGsfConversionTrackProducer"),
    allowFirstHitShare = cms.bool(True),
    arbitratedEcalSeededPreferCollection = cms.int32(-1),
    arbitratedMergedEcalGeneralPreferCollection = cms.int32(-1),
    arbitratedMergedPreferCollection = cms.int32(2),
    checkCharge = cms.bool(True),
    minProb = cms.double(1e-06),
    outputPreferCollection = cms.int32(-1),
    trackerOnlyPreferCollection = cms.int32(-1)
)


process.uncleanedOnlyInOutConversionTrackProducer = cms.EDProducer("ConversionTrackProducer",
    TrackProducer = cms.string('uncleanedOnlyCkfInOutTracksFromConversions'),
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    filterOnConvTrackHyp = cms.bool(True),
    minConvRadius = cms.double(2.0),
    setArbitratedEcalSeeded = cms.bool(True),
    setArbitratedMerged = cms.bool(True),
    setArbitratedMergedEcalGeneral = cms.bool(True),
    setIsGsfTrackOpen = cms.bool(False),
    setTrackerOnly = cms.bool(False),
    useTrajectory = cms.bool(False)
)


process.uncleanedOnlyInOutOutInConversionTrackMerger = cms.EDProducer("ConversionTrackMerger",
    ShareFrac = cms.double(0.19),
    TrackProducer1 = cms.InputTag("uncleanedOnlyInOutConversionTrackProducer"),
    TrackProducer2 = cms.InputTag("uncleanedOnlyOutInConversionTrackProducer"),
    allowFirstHitShare = cms.bool(True),
    arbitratedEcalSeededPreferCollection = cms.int32(3),
    arbitratedMergedEcalGeneralPreferCollection = cms.int32(3),
    arbitratedMergedPreferCollection = cms.int32(3),
    checkCharge = cms.bool(True),
    minProb = cms.double(1e-06),
    outputPreferCollection = cms.int32(-1),
    trackerOnlyPreferCollection = cms.int32(-1)
)


process.uncleanedOnlyMulti5x5SuperClustersWithPreshower = cms.EDProducer("PreshowerPhiClusterProducer",
    assocSClusterCollection = cms.string(''),
    endcapSClusterProducer = cms.InputTag("multi5x5SuperClusters","uncleanOnlyMulti5x5EndcapSuperClusters"),
    esPhiClusterDeltaEta = cms.double(0.15),
    esPhiClusterDeltaPhi = cms.double(0.12),
    esStripEnergyCut = cms.double(0.0),
    etThresh = cms.double(0.0),
    preshClusterCollectionX = cms.string('preshowerXClusters'),
    preshClusterCollectionY = cms.string('preshowerYClusters'),
    preshRecHitProducer = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES")
)


process.uncleanedOnlyOutInConversionTrackProducer = cms.EDProducer("ConversionTrackProducer",
    TrackProducer = cms.string('uncleanedOnlyCkfOutInTracksFromConversions'),
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    filterOnConvTrackHyp = cms.bool(True),
    minConvRadius = cms.double(2.0),
    setArbitratedEcalSeeded = cms.bool(True),
    setArbitratedMerged = cms.bool(True),
    setArbitratedMergedEcalGeneral = cms.bool(True),
    setIsGsfTrackOpen = cms.bool(False),
    setTrackerOnly = cms.bool(False),
    useTrajectory = cms.bool(False)
)


process.uncleanedOnlyPfConversions = cms.EDProducer("PFConversionProducer",
    PrimaryVertexLabel = cms.InputTag("offlinePrimaryVertices"),
    conversionCollection = cms.InputTag("allConversions")
)


process.uncleanedOnlyPfTrack = cms.EDProducer("PFTrackProducer",
    GsfTrackModuleLabel = cms.InputTag("uncleanedOnlyElectronGsfTracks"),
    GsfTracksInEvents = cms.bool(True),
    MuColl = cms.InputTag("muons1stStep"),
    PrimaryVertexLabel = cms.InputTag("offlinePrimaryVertices"),
    TkColList = cms.VInputTag(cms.InputTag("generalTracks")),
    TrackQuality = cms.string('highPurity'),
    TrajInEvents = cms.bool(False),
    UseQuality = cms.bool(True)
)


process.uncleanedOnlyPfTrackElec = cms.EDProducer("PFElecTkProducer",
    AbsEtaBarrelEndcapsSeparation = cms.double(1.479),
    Fitter = cms.string('GsfElectronFittingSmoother'),
    GsfTrackModuleLabel = cms.InputTag("uncleanedOnlyElectronGsfTracks"),
    MaxConvBremRecoPT = cms.double(49.0),
    MinDEtaGsfSC = cms.double(0.06),
    MinDPhiGsfSC = cms.double(0.15),
    MinSCEnergy = cms.double(4.0),
    ModeMomentum = cms.bool(True),
    PFConversions = cms.InputTag("uncleanedOnlyPfConversions"),
    PFEcalClusters = cms.InputTag("particleFlowClusterECAL"),
    PFNuclear = cms.InputTag("pfDisplacedTrackerVertex"),
    PFRecTrackLabel = cms.InputTag("uncleanedOnlyPfTrack"),
    PFV0 = cms.InputTag("pfV0"),
    PrimaryVertexLabel = cms.InputTag("offlinePrimaryVertices"),
    Propagator = cms.string('fwdElectronPropagator'),
    PtLowHighSeparation = cms.double(20),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajInEvents = cms.bool(False),
    applyAlsoGsfAngularCleaning = cms.bool(True),
    applyEGSelection = cms.bool(False),
    applyGsfTrackCleaning = cms.bool(True),
    debugGsfCleaning = cms.bool(False),
    maxDEtaGsfAngularCleaning = cms.double(0.05),
    maxDPhiBremTangGsfAngularCleaning = cms.double(0.05),
    pf_convBremFinderID_mvaCutBarrelHighPt = cms.double(0.97),
    pf_convBremFinderID_mvaCutBarrelLowPt = cms.double(0.6),
    pf_convBremFinderID_mvaCutEndcapsHighPt = cms.double(0.995),
    pf_convBremFinderID_mvaCutEndcapsLowPt = cms.double(0.9),
    pf_convBremFinderID_mvaWeightFileBarrelHighPt = cms.FileInPath('RecoParticleFlow/PFTracking/data/TMVAClassification_ConvBremFinder_Testetgt20absetalt1_479_BDT.weights.xml'),
    pf_convBremFinderID_mvaWeightFileBarrelLowPt = cms.FileInPath('RecoParticleFlow/PFTracking/data/TMVAClassification_ConvBremFinder_Testetlt20absetalt1_479_BDT.weights.xml'),
    pf_convBremFinderID_mvaWeightFileEndcapsHighPt = cms.FileInPath('RecoParticleFlow/PFTracking/data/TMVAClassification_ConvBremFinder_Testetgt20absetagt1_479_BDT.weights.xml'),
    pf_convBremFinderID_mvaWeightFileEndcapsLowPt = cms.FileInPath('RecoParticleFlow/PFTracking/data/TMVAClassification_ConvBremFinder_Testetlt20absetagt1_479_BDT.weights.xml'),
    useConvBremFinder = cms.bool(True),
    useConversions = cms.bool(False),
    useFifthStepForEcalDrivenGsf = cms.bool(False),
    useFifthStepForTrackerDrivenGsf = cms.bool(False),
    useNuclear = cms.bool(False),
    useV0 = cms.bool(False)
)


process.unsortedOfflinePrimaryVertices = cms.EDProducer("PrimaryVertexProducer",
    TkClusParameters = cms.PSet(
        TkDAClusParameters = cms.PSet(
            Tmin = cms.double(2.0),
            Tpurge = cms.double(2.0),
            Tstop = cms.double(0.5),
            convergence_mode = cms.int32(0),
            coolingFactor = cms.double(0.6),
            d0CutOff = cms.double(3.0),
            delta_highT = cms.double(0.01),
            delta_lowT = cms.double(0.001),
            dzCutOff = cms.double(3.0),
            uniquetrkweight = cms.double(0.8),
            vertexSize = cms.double(0.006),
            zmerge = cms.double(0.01),
            zrange = cms.double(4.0)
        ),
        algorithm = cms.string('DA_vect')
    ),
    TkFilterParameters = cms.PSet(
        algorithm = cms.string('filter'),
        maxD0Error = cms.double(1.0),
        maxD0Significance = cms.double(4.0),
        maxDzError = cms.double(1.0),
        maxEta = cms.double(4.0),
        maxNormalizedChi2 = cms.double(10.0),
        minPixelLayersWithHits = cms.int32(2),
        minPt = cms.double(0.0),
        minSiliconLayersWithHits = cms.int32(5),
        trackQuality = cms.string('any')
    ),
    TrackLabel = cms.InputTag("generalTracks"),
    beamSpotLabel = cms.InputTag("offlineBeamSpot"),
    verbose = cms.untracked.bool(False),
    vertexCollections = cms.VPSet(
        cms.PSet(
            algorithm = cms.string('AdaptiveVertexFitter'),
            chi2cutoff = cms.double(2.5),
            label = cms.string(''),
            maxDistanceToBeam = cms.double(1.0),
            minNdof = cms.double(0.0),
            useBeamConstraint = cms.bool(False)
        ), 
        cms.PSet(
            algorithm = cms.string('AdaptiveVertexFitter'),
            chi2cutoff = cms.double(2.5),
            label = cms.string('WithBS'),
            maxDistanceToBeam = cms.double(1.0),
            minNdof = cms.double(2.0),
            useBeamConstraint = cms.bool(True)
        )
    )
)


process.unsortedOfflinePrimaryVertices4D = cms.EDProducer("PrimaryVertexProducer",
    TkClusParameters = cms.PSet(
        TkDAClusParameters = cms.PSet(
            Tmin = cms.double(4.0),
            Tpurge = cms.double(4.0),
            Tstop = cms.double(2.0),
            convergence_mode = cms.int32(0),
            coolingFactor = cms.double(0.6),
            d0CutOff = cms.double(3.0),
            delta_highT = cms.double(0.01),
            delta_lowT = cms.double(0.001),
            dtCutOff = cms.double(4.0),
            dzCutOff = cms.double(3.0),
            t0Max = cms.double(1.0),
            tmerge = cms.double(0.1),
            uniquetrkweight = cms.double(0.8),
            verbose = cms.untracked.bool(False),
            vertexSize = cms.double(0.006),
            vertexSizeTime = cms.double(0.008),
            zmerge = cms.double(0.01),
            zrange = cms.double(4.0)
        ),
        algorithm = cms.string('DA2D_vect')
    ),
    TkFilterParameters = cms.PSet(
        algorithm = cms.string('filter'),
        maxD0Error = cms.double(1.0),
        maxD0Significance = cms.double(4.0),
        maxDzError = cms.double(1.0),
        maxEta = cms.double(4.0),
        maxNormalizedChi2 = cms.double(10.0),
        minPixelLayersWithHits = cms.int32(2),
        minPt = cms.double(0.0),
        minSiliconLayersWithHits = cms.int32(5),
        trackQuality = cms.string('any')
    ),
    TrackLabel = cms.InputTag("generalTracks"),
    TrackTimeResosLabel = cms.InputTag("tofPID4DnoPID","sigmat0safe"),
    TrackTimesLabel = cms.InputTag("tofPID4DnoPID","t0safe"),
    beamSpotLabel = cms.InputTag("offlineBeamSpot"),
    verbose = cms.untracked.bool(False),
    vertexCollections = cms.VPSet(
        cms.PSet(
            algorithm = cms.string('AdaptiveVertexFitter'),
            chi2cutoff = cms.double(2.5),
            label = cms.string(''),
            maxDistanceToBeam = cms.double(1.0),
            minNdof = cms.double(0.0),
            useBeamConstraint = cms.bool(False)
        ), 
        cms.PSet(
            algorithm = cms.string('AdaptiveVertexFitter'),
            chi2cutoff = cms.double(2.5),
            label = cms.string('WithBS'),
            maxDistanceToBeam = cms.double(1.0),
            minNdof = cms.double(2.0),
            useBeamConstraint = cms.bool(True)
        )
    )
)


process.unsortedOfflinePrimaryVertices4DnoPID = cms.EDProducer("PrimaryVertexProducer",
    TkClusParameters = cms.PSet(
        TkDAClusParameters = cms.PSet(
            Tmin = cms.double(4.0),
            Tpurge = cms.double(4.0),
            Tstop = cms.double(2.0),
            convergence_mode = cms.int32(0),
            coolingFactor = cms.double(0.6),
            d0CutOff = cms.double(3.0),
            delta_highT = cms.double(0.01),
            delta_lowT = cms.double(0.001),
            dtCutOff = cms.double(4.0),
            dzCutOff = cms.double(3.0),
            t0Max = cms.double(1.0),
            tmerge = cms.double(0.1),
            uniquetrkweight = cms.double(0.8),
            verbose = cms.untracked.bool(False),
            vertexSize = cms.double(0.006),
            vertexSizeTime = cms.double(0.008),
            zmerge = cms.double(0.01),
            zrange = cms.double(4.0)
        ),
        algorithm = cms.string('DA2D_vect')
    ),
    TkFilterParameters = cms.PSet(
        algorithm = cms.string('filter'),
        maxD0Error = cms.double(1.0),
        maxD0Significance = cms.double(4.0),
        maxDzError = cms.double(1.0),
        maxEta = cms.double(4.0),
        maxNormalizedChi2 = cms.double(10.0),
        minPixelLayersWithHits = cms.int32(2),
        minPt = cms.double(0.0),
        minSiliconLayersWithHits = cms.int32(5),
        trackQuality = cms.string('any')
    ),
    TrackLabel = cms.InputTag("generalTracks"),
    TrackTimeResosLabel = cms.InputTag("trackExtenderWithMTD","generalTracksigmat0"),
    TrackTimesLabel = cms.InputTag("trackExtenderWithMTD","generalTrackt0"),
    beamSpotLabel = cms.InputTag("offlineBeamSpot"),
    verbose = cms.untracked.bool(False),
    vertexCollections = cms.VPSet(
        cms.PSet(
            algorithm = cms.string('AdaptiveVertexFitter'),
            chi2cutoff = cms.double(2.5),
            label = cms.string(''),
            maxDistanceToBeam = cms.double(1.0),
            minNdof = cms.double(0.0),
            useBeamConstraint = cms.bool(False)
        ), 
        cms.PSet(
            algorithm = cms.string('AdaptiveVertexFitter'),
            chi2cutoff = cms.double(2.5),
            label = cms.string('WithBS'),
            maxDistanceToBeam = cms.double(1.0),
            minNdof = cms.double(2.0),
            useBeamConstraint = cms.bool(True)
        )
    )
)


process.unsortedOfflinePrimaryVertices4DwithPID = cms.EDProducer("PrimaryVertexProducer",
    TkClusParameters = cms.PSet(
        TkDAClusParameters = cms.PSet(
            Tmin = cms.double(4.0),
            Tpurge = cms.double(4.0),
            Tstop = cms.double(2.0),
            convergence_mode = cms.int32(0),
            coolingFactor = cms.double(0.6),
            d0CutOff = cms.double(3.0),
            delta_highT = cms.double(0.01),
            delta_lowT = cms.double(0.001),
            dtCutOff = cms.double(4.0),
            dzCutOff = cms.double(3.0),
            t0Max = cms.double(1.0),
            tmerge = cms.double(0.1),
            uniquetrkweight = cms.double(0.8),
            verbose = cms.untracked.bool(False),
            vertexSize = cms.double(0.006),
            vertexSizeTime = cms.double(0.008),
            zmerge = cms.double(0.01),
            zrange = cms.double(4.0)
        ),
        algorithm = cms.string('DA2D_vect')
    ),
    TkFilterParameters = cms.PSet(
        algorithm = cms.string('filter'),
        maxD0Error = cms.double(1.0),
        maxD0Significance = cms.double(4.0),
        maxDzError = cms.double(1.0),
        maxEta = cms.double(4.0),
        maxNormalizedChi2 = cms.double(10.0),
        minPixelLayersWithHits = cms.int32(2),
        minPt = cms.double(0.0),
        minSiliconLayersWithHits = cms.int32(5),
        trackQuality = cms.string('any')
    ),
    TrackLabel = cms.InputTag("generalTracks"),
    TrackTimeResosLabel = cms.InputTag("tofPID4DnoPID","sigmat0safe"),
    TrackTimesLabel = cms.InputTag("tofPID4DnoPID","t0safe"),
    beamSpotLabel = cms.InputTag("offlineBeamSpot"),
    verbose = cms.untracked.bool(False),
    vertexCollections = cms.VPSet(
        cms.PSet(
            algorithm = cms.string('AdaptiveVertexFitter'),
            chi2cutoff = cms.double(2.5),
            label = cms.string(''),
            maxDistanceToBeam = cms.double(1.0),
            minNdof = cms.double(0.0),
            useBeamConstraint = cms.bool(False)
        ), 
        cms.PSet(
            algorithm = cms.string('AdaptiveVertexFitter'),
            chi2cutoff = cms.double(2.5),
            label = cms.string('WithBS'),
            maxDistanceToBeam = cms.double(1.0),
            minNdof = cms.double(2.0),
            useBeamConstraint = cms.bool(True)
        )
    )
)


process.vertexMerger = cms.EDProducer("VertexMerger",
    maxFraction = cms.double(0.7),
    minSignificance = cms.double(2),
    secondaryVertices = cms.InputTag("inclusiveVertexFinder")
)


process.zdcreco = cms.EDProducer("ZdcHitReconstructor",
    AuxTSvec = cms.vint32(4, 5, 6, 7),
    Subdetector = cms.string('ZDC'),
    correctForPhaseContainment = cms.bool(False),
    correctForTimeslew = cms.bool(False),
    correctTiming = cms.bool(True),
    correctionPhaseNS = cms.double(0.0),
    digiLabelQIE10ZDC = cms.InputTag("hcalDigis","ZDC"),
    digiLabelcastor = cms.InputTag("castorDigis"),
    digiLabelhcal = cms.InputTag("hcalDigis"),
    dropZSmarkedPassed = cms.bool(True),
    lowGainFrac = cms.double(8.15),
    lowGainOffset = cms.int32(1),
    recoMethod = cms.int32(2),
    saturationParameters = cms.PSet(
        maxADCvalue = cms.int32(127)
    ),
    setHSCPFlags = cms.bool(True),
    setNoiseFlags = cms.bool(True),
    setSaturationFlags = cms.bool(True),
    setTimingTrustFlags = cms.bool(False)
)


process.Skimmer = cms.EDFilter("DYmuSkimmer",
    gen_particle_src = cms.InputTag("genParticles"),
    pu_info_src = cms.InputTag("addPileupInfo"),
    pu_max = cms.double(999.0),
    pu_min = cms.double(-999.0)
)


process.bVertexFilter = cms.EDFilter("BVertexFilter",
    minVertices = cms.int32(0),
    primaryVertices = cms.InputTag("offlinePrimaryVertices"),
    secondaryVertices = cms.InputTag("secondaryVertices"),
    useVertexKinematicAsJetAxis = cms.bool(True),
    vertexFilter = cms.PSet(
        distSig2dMax = cms.double(99999.9),
        distSig2dMin = cms.double(3.0),
        distSig3dMax = cms.double(99999.9),
        distSig3dMin = cms.double(-99999.9),
        distVal2dMax = cms.double(2.5),
        distVal2dMin = cms.double(0.01),
        distVal3dMax = cms.double(99999.9),
        distVal3dMin = cms.double(-99999.9),
        fracPV = cms.double(0.65),
        massMax = cms.double(6.5),
        maxDeltaRToJetAxis = cms.double(0.1),
        minimumTrackWeight = cms.double(0.5),
        multiplicityMin = cms.uint32(2),
        useTrackWeights = cms.bool(True),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        )
    )
)


process.bcToEFilter = cms.EDFilter("BCToEFilter",
    filterAlgoPSet = cms.PSet(
        eTThreshold = cms.double(10),
        genParSource = cms.InputTag("genParticles")
    )
)


process.electronsWithPresel = cms.EDFilter("GsfElectronSelector",
    cut = cms.string('pt > 5 && ecalDrivenSeed && passingCutBasedPreselection'),
    src = cms.InputTag("ecalDrivenGsfElectrons")
)


process.emEnrichingFilter = cms.EDFilter("EMEnrichingFilter",
    filterAlgoPSet = cms.PSet(
        caloIsoMax = cms.double(10.0),
        clusterThreshold = cms.double(20.0),
        genParSource = cms.InputTag("genParticles"),
        hOverEMax = cms.double(0.5),
        isoConeSize = cms.double(0.2),
        isoGenParConeSize = cms.double(0.1),
        isoGenParETMin = cms.double(20.0),
        requireTrackMatch = cms.bool(False),
        tkIsoMax = cms.double(5.0)
    )
)


process.firstStepGoodPrimaryVertices = cms.EDFilter("PrimaryVertexObjectFilter",
    filterParams = cms.PSet(
        maxRho = cms.double(2.0),
        maxZ = cms.double(15.0),
        minNdof = cms.double(25.0)
    ),
    src = cms.InputTag("firstStepPrimaryVertices")
)


process.goodOfflinePrimaryVertices = cms.EDFilter("VertexSelector",
    cut = cms.string('!isFake && ndof >= 4.0 && abs(z) <= 24.0 && abs(position.Rho) <= 2.0'),
    filter = cms.bool(False),
    src = cms.InputTag("offlinePrimaryVertices")
)


process.hltBoolEnd = cms.EDFilter("HLTBool",
    result = cms.bool(True)
)


process.hltBoolFalse = cms.EDFilter("HLTBool",
    result = cms.bool(False)
)


process.hltDiMuon178RelTrkIsoFiltered0p4 = cms.EDFilter("HLTMuonIsoFilter",
    CandTag = cms.InputTag("hltPhase2L3MuonCandidates"),
    DepTag = cms.VInputTag("hltPhase2L3MuonsTrkIsoRegionalNewdR0p3dRVeto0p005dz0p25dr0p20ChisqInfPtMin0p0Cut0p4"),
    IsolatorPSet = cms.PSet(

    ),
    MinN = cms.int32(2),
    PreviousCandTag = cms.InputTag("hltL3fL1DoubleMu155fPreFiltered8"),
    saveTags = cms.bool(True)
)


process.hltDiMuon178RelTrkIsoFiltered0p4DzFiltered0p2 = cms.EDFilter("HLT2MuonMuonDZ",
    MaxDZ = cms.double(0.2),
    MinDR = cms.double(0.001),
    MinN = cms.int32(1),
    MinPixHitsForDZ = cms.int32(0),
    checkSC = cms.bool(False),
    inputTag1 = cms.InputTag("hltDiMuon178RelTrkIsoFiltered0p4"),
    inputTag2 = cms.InputTag("hltDiMuon178RelTrkIsoFiltered0p4"),
    originTag1 = cms.VInputTag("hltPhase2L3MuonCandidates"),
    originTag2 = cms.VInputTag("hltPhase2L3MuonCandidates"),
    saveTags = cms.bool(True),
    triggerType1 = cms.int32(83),
    triggerType2 = cms.int32(83)
)


process.hltDoubleMuon7DR0 = cms.EDFilter("HLT2L1TkMuonL1TkMuonMuRefDR",
    MinDR = cms.double(0),
    MinN = cms.int32(1),
    inputTag1 = cms.InputTag("hltL1TkDoubleMuFiltered7"),
    inputTag2 = cms.InputTag("hltL1TkDoubleMuFiltered7"),
    originTag1 = cms.VInputTag("L1TkMuons::MYHLT"),
    originTag2 = cms.VInputTag("L1TkMuons::MYHLT"),
    saveTags = cms.bool(True)
)


process.hltDoubleMuon7DZ1p0 = cms.EDFilter("HLT2L1TkMuonL1TkMuonDZ",
    MaxDZ = cms.double(1.0),
    MinDR = cms.double(-1),
    MinN = cms.int32(1),
    MinPixHitsForDZ = cms.int32(0),
    checkSC = cms.bool(False),
    inputTag1 = cms.InputTag("hltL1TkDoubleMuFiltered7"),
    inputTag2 = cms.InputTag("hltL1TkDoubleMuFiltered7"),
    originTag1 = cms.VInputTag("L1TkMuons::MYHLT"),
    originTag2 = cms.VInputTag("L1TkMuons::MYHLT"),
    saveTags = cms.bool(True),
    triggerType1 = cms.int32(-114),
    triggerType2 = cms.int32(-114)
)


process.hltL1SingleMuFiltered5 = cms.EDFilter("L1TTkMuonFilter",
    MaxEta = cms.double(2.4),
    MinEta = cms.double(-2.4),
    MinN = cms.int32(1),
    MinPt = cms.double(5.0),
    Scalings = cms.PSet(
        barrel = cms.vdouble(0.820128, 1.04124, 0.0),
        endcap = cms.vdouble(0.864715, 1.03215, 0.0),
        overlap = cms.vdouble(0.920897, 1.03712, 0.0)
    ),
    inputTag = cms.InputTag("L1TkMuons","","MYHLT"),
    saveTags = cms.bool(True)
)


process.hltL1TkDoubleMuFiltered7 = cms.EDFilter("L1TTkMuonFilter",
    MaxEta = cms.double(2.4),
    MinEta = cms.double(-2.4),
    MinN = cms.int32(2),
    MinPt = cms.double(7.0),
    Scalings = cms.PSet(
        barrel = cms.vdouble(0.820128, 1.04124, 0.0),
        endcap = cms.vdouble(0.864715, 1.03215, 0.0),
        overlap = cms.vdouble(0.920897, 1.03712, 0.0)
    ),
    inputTag = cms.InputTag("L1TkMuons","","MYHLT"),
    saveTags = cms.bool(True)
)


process.hltL1TkSingleMuFiltered15 = cms.EDFilter("L1TTkMuonFilter",
    MaxEta = cms.double(2.4),
    MinEta = cms.double(-2.4),
    MinN = cms.int32(1),
    MinPt = cms.double(15.0),
    Scalings = cms.PSet(
        barrel = cms.vdouble(0.820128, 1.04124, 0.0),
        endcap = cms.vdouble(0.864715, 1.03215, 0.0),
        overlap = cms.vdouble(0.920897, 1.03712, 0.0)
    ),
    inputTag = cms.InputTag("L1TkMuons","","MYHLT"),
    saveTags = cms.bool(True)
)


process.hltL1TkSingleMuFiltered22 = cms.EDFilter("L1TTkMuonFilter",
    MaxEta = cms.double(2.4),
    MinEta = cms.double(-2.4),
    MinN = cms.int32(1),
    MinPt = cms.double(22.0),
    Scalings = cms.PSet(
        barrel = cms.vdouble(0.820128, 1.04124, 0.0),
        endcap = cms.vdouble(0.864715, 1.03215, 0.0),
        overlap = cms.vdouble(0.920897, 1.03712, 0.0)
    ),
    inputTag = cms.InputTag("L1TkMuons","","MYHLT"),
    saveTags = cms.bool(True)
)


process.hltL1TripleMuFiltered3 = cms.EDFilter("L1TTkMuonFilter",
    MaxEta = cms.double(2.4),
    MinEta = cms.double(-2.4),
    MinN = cms.int32(3),
    MinPt = cms.double(3.0),
    Scalings = cms.PSet(
        barrel = cms.vdouble(0.820128, 1.04124, 0.0),
        endcap = cms.vdouble(0.864715, 1.03215, 0.0),
        overlap = cms.vdouble(0.920897, 1.03712, 0.0)
    ),
    inputTag = cms.InputTag("L1TkMuons","","MYHLT"),
    saveTags = cms.bool(True)
)


process.hltL3crIsoL1TkSingleMu22L3f24QL3pfecalIsoFiltered0p41 = cms.EDFilter("HLTMuonGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltL3fL1TkSingleMu22L3Filtered24Q"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltPhase2L3MuonCandidates"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(-1.0),
    thrOverE2EE = cms.vdouble(-1.0),
    thrOverEEB = cms.vdouble(0.41),
    thrOverEEE = cms.vdouble(0.41),
    thrRegularEB = cms.vdouble(-1.0),
    thrRegularEE = cms.vdouble(-1.0),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltPhase2L3MuonsEcalIsodR0p3dRVeto0p000")
)


process.hltL3crIsoL1TkSingleMu22L3f24QL3pfhcalIsoFiltered0p40 = cms.EDFilter("HLTMuonGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltL3crIsoL1TkSingleMu22L3f24QL3pfecalIsoFiltered0p41"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltPhase2L3MuonCandidates"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(-1.0),
    thrOverE2EE = cms.vdouble(-1.0),
    thrOverEEB = cms.vdouble(0.4),
    thrOverEEE = cms.vdouble(0.4),
    thrRegularEB = cms.vdouble(-1.0),
    thrRegularEE = cms.vdouble(-1.0),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltPhase2L3MuonsHcalIsodR0p3dRVeto0p000")
)


process.hltL3crIsoL1TkSingleMu22L3f24QL3pfhgcalIsoFiltered4p70 = cms.EDFilter("HLTMuonGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltL3crIsoL1TkSingleMu22L3f24QL3pfhcalIsoFiltered0p40"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltPhase2L3MuonCandidates"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(-1.0),
    thrOverE2EE = cms.vdouble(-1.0),
    thrOverEEB = cms.vdouble(4.7),
    thrOverEEE = cms.vdouble(4.7),
    thrRegularEB = cms.vdouble(-1.0),
    thrRegularEE = cms.vdouble(-1.0),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltPhase2L3MuonsHgcalLCIsodR0p2dRVetoEM0p00dRVetoHad0p02minEEM0p00minEHad0p00")
)


process.hltL3crIsoL1TkSingleMu22L3f24QL3trkIsoRegionalNewFiltered0p07EcalHcalHgcalTrk = cms.EDFilter("HLTMuonIsoFilter",
    CandTag = cms.InputTag("hltPhase2L3MuonCandidates"),
    DepTag = cms.VInputTag("hltPhase2L3MuonsTrkIsoRegionalNewdR0p3dRVeto0p005dz0p25dr0p20ChisqInfPtMin0p0Cut0p07"),
    IsolatorPSet = cms.PSet(

    ),
    MinN = cms.int32(1),
    PreviousCandTag = cms.InputTag("hltL3crIsoL1TkSingleMu22L3f24QL3pfhgcalIsoFiltered4p70"),
    saveTags = cms.bool(True)
)


process.hltL3fL1DoubleMu155fFiltered17 = cms.EDFilter("HLTMuonTrkL1TkMuFilter",
    inputCandCollection = cms.InputTag("hltPhase2L3MuonCandidates"),
    inputMuonCollection = cms.InputTag("hltPhase2L3Muons"),
    maxAbsEta = cms.double(1e+99),
    maxNormalizedChi2 = cms.double(1e+99),
    minMuonHits = cms.int32(-1),
    minMuonStations = cms.int32(1),
    minN = cms.uint32(1),
    minPt = cms.double(17.0),
    minTrkHits = cms.int32(-1),
    previousCandTag = cms.InputTag("hltL1TkSingleMuFiltered15"),
    saveTags = cms.bool(True)
)


process.hltL3fL1DoubleMu155fFiltered37 = cms.EDFilter("HLTMuonTrkL1TkMuFilter",
    inputCandCollection = cms.InputTag("hltPhase2L3MuonCandidates"),
    inputMuonCollection = cms.InputTag("hltPhase2L3Muons"),
    maxAbsEta = cms.double(1e+99),
    maxNormalizedChi2 = cms.double(1e+99),
    minMuonHits = cms.int32(-1),
    minMuonStations = cms.int32(1),
    minN = cms.uint32(1),
    minPt = cms.double(37.0),
    minTrkHits = cms.int32(-1),
    previousCandTag = cms.InputTag("hltL1TkSingleMuFiltered15"),
    saveTags = cms.bool(True)
)


process.hltL3fL1DoubleMu155fPreFiltered27 = cms.EDFilter("HLTMuonTrkL1TkMuFilter",
    inputCandCollection = cms.InputTag("hltPhase2L3MuonCandidates"),
    inputMuonCollection = cms.InputTag("hltPhase2L3Muons"),
    maxAbsEta = cms.double(1e+99),
    maxNormalizedChi2 = cms.double(1e+99),
    minMuonHits = cms.int32(-1),
    minMuonStations = cms.int32(1),
    minN = cms.uint32(2),
    minPt = cms.double(27.0),
    minTrkHits = cms.int32(-1),
    previousCandTag = cms.InputTag("hltL1TkDoubleMuFiltered7"),
    saveTags = cms.bool(True)
)


process.hltL3fL1DoubleMu155fPreFiltered8 = cms.EDFilter("HLTMuonTrkL1TkMuFilter",
    inputCandCollection = cms.InputTag("hltPhase2L3MuonCandidates"),
    inputMuonCollection = cms.InputTag("hltPhase2L3Muons"),
    maxAbsEta = cms.double(1e+99),
    maxNormalizedChi2 = cms.double(1e+99),
    minMuonHits = cms.int32(-1),
    minMuonStations = cms.int32(1),
    minN = cms.uint32(2),
    minPt = cms.double(8.0),
    minTrkHits = cms.int32(-1),
    previousCandTag = cms.InputTag("hltL1TkDoubleMuFiltered7"),
    saveTags = cms.bool(True)
)


process.hltL3fL1TkSingleMu22L3Filtered24Q = cms.EDFilter("HLTMuonTrkL1TkMuFilter",
    inputCandCollection = cms.InputTag("hltPhase2L3MuonCandidates"),
    inputMuonCollection = cms.InputTag("hltPhase2L3Muons"),
    maxAbsEta = cms.double(1e+99),
    maxNormalizedChi2 = cms.double(1e+99),
    minMuonHits = cms.int32(-1),
    minMuonStations = cms.int32(1),
    minN = cms.uint32(1),
    minPt = cms.double(24.0),
    minTrkHits = cms.int32(-1),
    previousCandTag = cms.InputTag("hltL1TkSingleMuFiltered22"),
    saveTags = cms.bool(True)
)


process.hltL3fL1TkSingleMu22L3Filtered50Q = cms.EDFilter("HLTMuonTrkL1TkMuFilter",
    inputCandCollection = cms.InputTag("hltPhase2L3MuonCandidates"),
    inputMuonCollection = cms.InputTag("hltPhase2L3Muons"),
    maxAbsEta = cms.double(1e+99),
    maxNormalizedChi2 = cms.double(1e+99),
    minMuonHits = cms.int32(-1),
    minMuonStations = cms.int32(1),
    minN = cms.uint32(1),
    minPt = cms.double(50.0),
    minTrkHits = cms.int32(-1),
    previousCandTag = cms.InputTag("hltL1TkSingleMuFiltered22"),
    saveTags = cms.bool(True)
)


process.hltL3fL1TkTripleMu533L31055DZFiltered0p2 = cms.EDFilter("HLT2MuonMuonDZ",
    MaxDZ = cms.double(0.2),
    MinDR = cms.double(0.001),
    MinN = cms.int32(3),
    MinPixHitsForDZ = cms.int32(1),
    checkSC = cms.bool(False),
    inputTag1 = cms.InputTag("hltL3fL1TkTripleMu533PreFiltered555"),
    inputTag2 = cms.InputTag("hltL3fL1TkTripleMu533PreFiltered555"),
    originTag1 = cms.VInputTag("hltPhase2L3MuonCandidates"),
    originTag2 = cms.VInputTag("hltPhase2L3MuonCandidates"),
    saveTags = cms.bool(True),
    triggerType1 = cms.int32(83),
    triggerType2 = cms.int32(83)
)


process.hltL3fL1TkTripleMu533L3Filtered1055 = cms.EDFilter("HLTMuonTrkL1TkMuFilter",
    inputCandCollection = cms.InputTag("hltPhase2L3MuonCandidates"),
    inputMuonCollection = cms.InputTag("hltPhase2L3Muons"),
    maxAbsEta = cms.double(2.5),
    maxNormalizedChi2 = cms.double(1e+99),
    minMuonHits = cms.int32(-1),
    minMuonStations = cms.int32(1),
    minN = cms.uint32(1),
    minPt = cms.double(10.0),
    minTrkHits = cms.int32(-1),
    previousCandTag = cms.InputTag("hltL1TripleMuFiltered3"),
    saveTags = cms.bool(True)
)


process.hltL3fL1TkTripleMu533PreFiltered555 = cms.EDFilter("HLTMuonTrkL1TkMuFilter",
    inputCandCollection = cms.InputTag("hltPhase2L3MuonCandidates"),
    inputMuonCollection = cms.InputTag("hltPhase2L3Muons"),
    maxAbsEta = cms.double(2.5),
    maxNormalizedChi2 = cms.double(1e+99),
    minMuonHits = cms.int32(-1),
    minMuonStations = cms.int32(1),
    minN = cms.uint32(3),
    minPt = cms.double(5.0),
    minTrkHits = cms.int32(-1),
    previousCandTag = cms.InputTag("hltL1TripleMuFiltered3"),
    saveTags = cms.bool(True)
)


process.hltTriggerType = cms.EDFilter("HLTTriggerTypeFilter",
    SelectedTriggerType = cms.int32(1)
)


process.hltTripleMuon3DR0 = cms.EDFilter("HLT2L1TkMuonL1TkMuonMuRefDR",
    MinDR = cms.double(0),
    MinN = cms.int32(3),
    inputTag1 = cms.InputTag("hltL1TripleMuFiltered3"),
    inputTag2 = cms.InputTag("hltL1TripleMuFiltered3"),
    originTag1 = cms.VInputTag("L1TkMuons::MYHLT"),
    originTag2 = cms.VInputTag("L1TkMuons::MYHLT"),
    saveTags = cms.bool(True)
)


process.hltTripleMuon3DZ1p0 = cms.EDFilter("HLT2L1TkMuonL1TkMuonDZ",
    MaxDZ = cms.double(1.0),
    MinDR = cms.double(-1),
    MinN = cms.int32(3),
    MinPixHitsForDZ = cms.int32(0),
    checkSC = cms.bool(False),
    inputTag1 = cms.InputTag("hltL1TripleMuFiltered3"),
    inputTag2 = cms.InputTag("hltL1TripleMuFiltered3"),
    originTag1 = cms.VInputTag("L1TkMuons::MYHLT"),
    originTag2 = cms.VInputTag("L1TkMuons::MYHLT"),
    saveTags = cms.bool(True),
    triggerType1 = cms.int32(-114),
    triggerType2 = cms.int32(-114)
)


process.inclusiveSecondaryVerticesFiltered = cms.EDFilter("BVertexFilter",
    minVertices = cms.int32(0),
    primaryVertices = cms.InputTag("offlinePrimaryVertices"),
    secondaryVertices = cms.InputTag("inclusiveSecondaryVertices"),
    useVertexKinematicAsJetAxis = cms.bool(True),
    vertexFilter = cms.PSet(
        distSig2dMax = cms.double(99999.9),
        distSig2dMin = cms.double(3.0),
        distSig3dMax = cms.double(99999.9),
        distSig3dMin = cms.double(-99999.9),
        distVal2dMax = cms.double(2.5),
        distVal2dMin = cms.double(0.01),
        distVal3dMax = cms.double(99999.9),
        distVal3dMin = cms.double(-99999.9),
        fracPV = cms.double(0.65),
        massMax = cms.double(6.5),
        maxDeltaRToJetAxis = cms.double(0.1),
        minimumTrackWeight = cms.double(0.5),
        multiplicityMin = cms.uint32(2),
        useTrackWeights = cms.bool(True),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        )
    )
)


process.jetsForCoreTracking = cms.EDFilter("CandPtrSelector",
    cut = cms.string('pt > 100 && abs(eta) < 2.5'),
    src = cms.InputTag("ak4CaloJetsForTrk")
)


process.jetsForCoreTrackingPreSplitting = cms.EDFilter("CandPtrSelector",
    cut = cms.string('pt > 100 && abs(eta) < 2.5'),
    src = cms.InputTag("ak4CaloJetsForTrkPreSplitting")
)


process.muGenFilter = cms.EDFilter("MCSmartSingleParticleFilter",
    MaxDecayRadius = cms.untracked.vdouble(2000.0, 2000.0),
    MaxDecayZ = cms.untracked.vdouble(4000.0, 4000.0),
    MaxEta = cms.untracked.vdouble(2.5, 2.5),
    MinDecayZ = cms.untracked.vdouble(-4000.0, -4000.0),
    MinEta = cms.untracked.vdouble(-2.5, -2.5),
    MinPt = cms.untracked.vdouble(5.0, 5.0),
    ParticleID = cms.untracked.vint32(13, -13),
    Status = cms.untracked.vint32(1, 1),
    moduleLabel = cms.untracked.InputTag("generatorSmeared","","SIM")
)


process.pfAllChargedHadrons = cms.EDFilter("PFCandidateFwdPtrCollectionPdgIdFilter",
    makeClones = cms.bool(True),
    pdgId = cms.vint32(
        211, -211, 321, -321, 999211, 
        2212, -2212
    ),
    src = cms.InputTag("pfNoPileUpIso")
)


process.pfAllChargedParticles = cms.EDFilter("PFCandidateFwdPtrCollectionPdgIdFilter",
    makeClones = cms.bool(True),
    pdgId = cms.vint32(
        211, -211, 321, -321, 999211, 
        2212, -2212, 11, -11, 13, 
        -13
    ),
    src = cms.InputTag("pfNoPileUpIso")
)


process.pfAllElectrons = cms.EDFilter("PFCandidateFwdPtrCollectionPdgIdFilter",
    makeClones = cms.bool(True),
    pdgId = cms.vint32(11, -11),
    src = cms.InputTag("pfNoMuon")
)


process.pfAllMuons = cms.EDFilter("PFCandidateFwdPtrCollectionPdgIdFilter",
    makeClones = cms.bool(True),
    pdgId = cms.vint32(-13, 13),
    src = cms.InputTag("pfNoPileUp")
)


process.pfAllNeutralHadrons = cms.EDFilter("PFCandidateFwdPtrCollectionPdgIdFilter",
    makeClones = cms.bool(True),
    pdgId = cms.vint32(111, 130, 310, 2112),
    src = cms.InputTag("pfNoPileUpIso")
)


process.pfAllNeutralHadronsAndPhotons = cms.EDFilter("PFCandidateFwdPtrCollectionPdgIdFilter",
    makeClones = cms.bool(True),
    pdgId = cms.vint32(22, 111, 130, 310, 2112),
    src = cms.InputTag("pfNoPileUpIso")
)


process.pfAllPhotons = cms.EDFilter("PFCandidateFwdPtrCollectionPdgIdFilter",
    makeClones = cms.bool(True),
    pdgId = cms.vint32(22),
    src = cms.InputTag("pfNoPileUpIso")
)


process.pfNoPileUpCandidates = cms.EDFilter("PFCandidateFwdPtrCollectionPdgIdFilter",
    makeClones = cms.bool(True),
    pdgId = cms.vint32(
        211, -211, 321, -321, 999211, 
        2212, -2212, 22, 111, 130, 
        310, 2112
    ),
    src = cms.InputTag("pfNoPileUpIso")
)


process.pfNoPileUpJMEHI = cms.EDFilter("GenericPFCandidateSelector",
    cut = cms.string('pt>9999'),
    src = cms.InputTag("particleFlow")
)


process.pfPileUpAllChargedParticles = cms.EDFilter("PFCandidateFwdPtrCollectionPdgIdFilter",
    makeClones = cms.bool(True),
    pdgId = cms.vint32(
        211, -211, 321, -321, 999211, 
        2212, -2212, 11, -11, 13, 
        -13
    ),
    src = cms.InputTag("pfPileUpIso")
)


process.pfSelectedElectrons = cms.EDFilter("GenericPFCandidateSelector",
    cut = cms.string('abs(pdgId())==11'),
    src = cms.InputTag("particleFlowTmp")
)


process.pfSelectedPhotons = cms.EDFilter("GenericPFCandidateSelector",
    cut = cms.string('pdgId()==22 && mva_nothing_gamma>0'),
    src = cms.InputTag("particleFlowTmp")
)


process.recoTauPileUpVertices = cms.EDFilter("RecoTauPileUpVertexSelector",
    filter = cms.bool(False),
    minTrackSumPt = cms.double(5),
    src = cms.InputTag("offlinePrimaryVertices")
)


process.GenMuAnalyzerFromFileIn = cms.EDAnalyzer("GenMuAnalyzer",
    L1TT_src = cms.InputTag("TTTracksFromTrackletEmulation","Level1TTTracks","RECO"),
    L1TkMuon_src = cms.InputTag("L1TkMuons","","RECO"),
    genParticle_src = cms.InputTag("genParticles"),
    pt_min = cms.double(10.0)
)


process.GenMuAnalyzerReEmu = cms.EDAnalyzer("GenMuAnalyzer",
    L1TT_src = cms.InputTag("TTTracksFromTrackletEmulation","Level1TTTracks","RECO"),
    L1TkMuon_src = cms.InputTag("L1TkMuons","","MYHLT"),
    genParticle_src = cms.InputTag("genParticles"),
    pt_min = cms.double(10.0)
)


process.ntupler = cms.EDAnalyzer("MuonHLTNtupler",
    DebugMode = cms.bool(False),
    L1Muon = cms.untracked.InputTag("simGmtStage2Digis","","MYHLT"),
    L1TrackInputTag = cms.InputTag("TTTracksFromTrackletEmulation","Level1TTTracks"),
    L2Muon = cms.untracked.InputTag("hltL2MuonFromL1TkMuonCandidates","","MYHLT"),
    L3Muon = cms.untracked.InputTag("hltPhase2L3MuonCandidates","","MYHLT"),
    PUSummaryInfo = cms.untracked.InputTag("addPileupInfo"),
    SaveAllTracks = cms.bool(True),
    TkMuon = cms.untracked.InputTag("hltHighPtTkMuonCands","","MYHLT"),
    TkMuonToken = cms.InputTag("L1TkMuons","","MYHLT"),
    associationLabels = cms.untracked.VInputTag(
        "AhltPhase2L3OIMuonTrackSelectionHighPurity", "AhltIter0Phase2L3FromL1TkMuonTrackSelectionHighPurity", "AhltIter2Phase2L3FromL1TkMuonTrackSelectionHighPurity", "AhltIter2Phase2L3FromL1TkMuonMerged", "AhltPhase2L3MuonsNoID", 
        "AhltPhase2L3Muons"
    ),
    associator = cms.untracked.InputTag("hltTrackAssociatorByHits"),
    doMVA = cms.bool(True),
    doSeed = cms.bool(False),
    genEventInfo = cms.untracked.InputTag("generator"),
    genParticle = cms.untracked.InputTag("genParticles"),
    hltIter0IterL3FromL1MuonPixelSeedsFromPixelTracks = cms.untracked.InputTag("hltIter0IterL3FromL1MuonPixelSeedsFromPixelTracks","","MYHLT"),
    hltIter0IterL3FromL1MuonTrack = cms.untracked.InputTag("hltIter0Phase2L3FromL1TkMuonTrackSelectionHighPurity","","MYHLT"),
    hltIter0IterL3MuonPixelSeedsFromPixelTracks = cms.untracked.InputTag("hltIter0IterL3MuonPixelSeedsFromPixelTracks","","MYHLT"),
    hltIter0IterL3MuonTrack = cms.untracked.InputTag("hltIter0IterL3MuonTrackSelectionHighPurity","","MYHLT"),
    hltIter2IterL3FromL1MuonPixelSeeds = cms.untracked.InputTag("hltIter2Phase2L3FromL1TkMuonPixelSeedsFiltered","","MYHLT"),
    hltIter2IterL3FromL1MuonTrack = cms.untracked.InputTag("hltIter2Phase2L3FromL1TkMuonTrackSelectionHighPurity","","MYHLT"),
    hltIter2IterL3MuonPixelSeeds = cms.untracked.InputTag("hltIter2IterL3MuonPixelSeeds","","MYHLT"),
    hltIter2IterL3MuonTrack = cms.untracked.InputTag("hltIter2IterL3MuonTrackSelectionHighPurity","","MYHLT"),
    hltIter3IterL3FromL1MuonPixelSeeds = cms.untracked.InputTag("hltIter3IterL3FromL1MuonPixelSeeds","","MYHLT"),
    hltIter3IterL3FromL1MuonTrack = cms.untracked.InputTag("hltIter3IterL3FromL1MuonTrackSelectionHighPurity","","MYHLT"),
    hltIter3IterL3MuonPixelSeeds = cms.untracked.InputTag("hltIter3IterL3MuonPixelSeeds","","MYHLT"),
    hltIter3IterL3MuonTrack = cms.untracked.InputTag("hltIter3IterL3MuonTrackSelectionHighPurity","","MYHLT"),
    hltIterL3FromL1MuonTrimmedPixelVertices = cms.untracked.InputTag("hltIterL3FromL1MuonTrimmedPixelVertices","","MYHLT"),
    hltIterL3MuonTrimmedPixelVertices = cms.untracked.InputTag("hltIterL3MuonTrimmedPixelVertices","","MYHLT"),
    hltIterL3OIMuonTrack = cms.untracked.InputTag("hltIterL3OIMuonTrackSelectionHighPurity","","MYHLT"),
    hltIterL3OISeedsFromL2Muons = cms.untracked.InputTag("hltIterL3OISeedsFromL2Muons","","MYHLT"),
    iterL3FromL2 = cms.untracked.InputTag("hltIterL3MuonsFromL2LinksCombination","","MYHLT"),
    iterL3IOFromL1 = cms.untracked.InputTag("hltIter2Phase2L3FromL1TkMuonMerged","","MYHLT"),
    iterL3IOFromL2 = cms.untracked.InputTag("hltL3MuonsIterL3IO","","MYHLT"),
    iterL3Muon = cms.untracked.InputTag("hltPhase2L3Muons","","MYHLT"),
    iterL3MuonNoID = cms.untracked.InputTag("hltPhase2L3MuonsNoID","","MYHLT"),
    iterL3OI = cms.untracked.InputTag("hltL3MuonsPhase2L3OI","","MYHLT"),
    l1TkPrimaryVertex = cms.InputTag("L1TkPrimaryVertex"),
    lumiScaler = cms.untracked.InputTag("hltScalersRawToDigi","","MYHLT"),
    mvaFileHltIter2IterL3FromL1MuonPixelSeeds_B_0 = cms.FileInPath('HLTrigger/MuonHLTSeedMVAClassifier/data/PU200_Barrel_NThltIter2FromL1_0.xml'),
    mvaFileHltIter2IterL3FromL1MuonPixelSeeds_B_1 = cms.FileInPath('HLTrigger/MuonHLTSeedMVAClassifier/data/PU200_Barrel_NThltIter2FromL1_1.xml'),
    mvaFileHltIter2IterL3FromL1MuonPixelSeeds_B_2 = cms.FileInPath('HLTrigger/MuonHLTSeedMVAClassifier/data/PU200_Barrel_NThltIter2FromL1_2.xml'),
    mvaFileHltIter2IterL3FromL1MuonPixelSeeds_B_3 = cms.FileInPath('HLTrigger/MuonHLTSeedMVAClassifier/data/PU200_Barrel_NThltIter2FromL1_3.xml'),
    mvaFileHltIter2IterL3FromL1MuonPixelSeeds_E_0 = cms.FileInPath('HLTrigger/MuonHLTSeedMVAClassifier/data/PU200_Endcap_NThltIter2FromL1_0.xml'),
    mvaFileHltIter2IterL3FromL1MuonPixelSeeds_E_1 = cms.FileInPath('HLTrigger/MuonHLTSeedMVAClassifier/data/PU200_Endcap_NThltIter2FromL1_1.xml'),
    mvaFileHltIter2IterL3FromL1MuonPixelSeeds_E_2 = cms.FileInPath('HLTrigger/MuonHLTSeedMVAClassifier/data/PU200_Endcap_NThltIter2FromL1_2.xml'),
    mvaFileHltIter2IterL3FromL1MuonPixelSeeds_E_3 = cms.FileInPath('HLTrigger/MuonHLTSeedMVAClassifier/data/PU200_Endcap_NThltIter2FromL1_3.xml'),
    mvaScaleMeanHltIter2IterL3FromL1MuonPixelSeeds_B = cms.untracked.vdouble(
        0.000703194881993, 3.08981188359e-06, 2.59613491757e-06, 1.37719258533e-06, 3.82594532961e-06, 
        -0.00021582407927, 0.000249656891552, -0.000343988776655, -0.000585463770944, 0.0709317892682, 
        -1.05282128557e-05, 0.101715474828, 0.0972569135971, 0.0848868199517
    ),
    mvaScaleMeanHltIter2IterL3FromL1MuonPixelSeeds_E = cms.untracked.vdouble(
        0.000333544383405, 1.1008473944e-06, 2.24234916761e-06, 1.13050755579e-06, 3.63543469127e-06, 
        -2.78107232601e-05, 0.000566807881865, 0.000114494773151, 0.0014294411123, 0.0940466897816, 
        1.59869383095e-05, 0.117432407995, 0.213271662828, 0.203646592
    ),
    mvaScaleStdHltIter2IterL3FromL1MuonPixelSeeds_B = cms.untracked.vdouble(
        0.000881076877579, 2.78865847185e-06, 3.45817625575e-06, 2.68523260404e-06, 6.27869022208e-06, 
        0.0936444818271, 0.597371997825, 0.742754089865, 0.999999828616, 0.0386637793634, 
        0.0780337325204, 0.250328505572, 0.242358790594, 0.220620938324
    ),
    mvaScaleStdHltIter2IterL3FromL1MuonPixelSeeds_E = cms.untracked.vdouble(
        0.000470487609711, 2.38079543031e-06, 9.479424257e-06, 2.54021080817e-06, 5.07665292593e-06, 
        0.0476427385762, 0.666419872434, 0.425050278609, 0.999998978349, 0.0559697341716, 
        0.107217497328, 0.255717695535, 0.30251449474, 0.291716810133
    ),
    myTriggerEvent = cms.untracked.InputTag("hltTriggerSummaryAOD","","MYHLT"),
    myTriggerResults = cms.untracked.InputTag("TriggerResults","","MYHLT"),
    offlineLumiScaler = cms.untracked.InputTag("scalersRawToDigi"),
    offlineMuon = cms.untracked.InputTag("slimmedMuons"),
    offlineVertex = cms.untracked.InputTag("offlinePrimaryVertices"),
    pfIsoLabels = cms.untracked.VInputTag(),
    pfIsoTags = cms.untracked.vstring(),
    trackCollectionLabels = cms.untracked.VInputTag(
        "hltPhase2L3OIMuonTrackSelectionHighPurity", "hltIter0Phase2L3FromL1TkMuonTrackSelectionHighPurity", "hltIter2Phase2L3FromL1TkMuonTrackSelectionHighPurity", "hltIter2Phase2L3FromL1TkMuonMerged", "hltPhase2L3MuonsNoIDTracks", 
        "hltPhase2L3MuonsTracks"
    ),
    trackCollectionNames = cms.untracked.vstring(
        'hltPhase2L3OI', 
        'hltIter0Phase2L3FromL1TkMuon', 
        'hltIter2Phase2L3FromL1TkMuon', 
        'hltPhase2L3IOFromL1', 
        'hltPhase2L3MuonsNoID', 
        'hltPhase2L3Muons'
    ),
    trackingParticle = cms.untracked.InputTag("mix","MergedTrackTruth"),
    triggerEvent = cms.untracked.InputTag("hltTriggerSummaryAOD","","HLT"),
    triggerResults = cms.untracked.InputTag("TriggerResults","","HLT"),
    trkIsoLabels = cms.untracked.VInputTag(),
    trkIsoTags = cms.untracked.vstring()
)


process.seedNtupler = cms.EDAnalyzer("MuonHLTSeedNtupler",
    L1Muon = cms.untracked.InputTag("simGmtStage2Digis","","MYHLT"),
    L1TkMuon = cms.untracked.InputTag("L1TkMuons","","MYHLT"),
    L1TkPrimaryVertex = cms.untracked.InputTag("L1TkPrimaryVertex","","MYHLT"),
    L1TrackInputTag = cms.InputTag("TTTracksFromTrackletEmulation","Level1TTTracks","RECO"),
    L2Muon = cms.untracked.InputTag("hltL2MuonFromL1TkMuonCandidates","","MYHLT"),
    PUSummaryInfo = cms.untracked.InputTag("addPileupInfo"),
    associator = cms.untracked.InputTag("hltTrackAssociatorByHits"),
    genParticle = cms.untracked.InputTag("genParticles"),
    hltIter0IterL3FromL1MuonPixelSeedsFromPixelTracks = cms.untracked.InputTag("hltIter0Phase2L3FromL1TkMuonPixelSeedsFromPixelTracks","","MYHLT"),
    hltIter0IterL3FromL1MuonTrack = cms.untracked.InputTag("hltIter0Phase2L3FromL1TkMuonTrackSelectionHighPurity","","MYHLT"),
    hltIter0IterL3MuonPixelSeedsFromPixelTracks = cms.untracked.InputTag("hltIter0IterL3MuonPixelSeedsFromPixelTracks","","MYHLT"),
    hltIter0IterL3MuonTrack = cms.untracked.InputTag("hltIter0IterL3MuonTrackSelectionHighPurity","","MYHLT"),
    hltIter2IterL3FromL1MuonPixelSeeds = cms.untracked.InputTag("hltIter2Phase2L3FromL1TkMuonPixelSeedsFiltered","","MYHLT"),
    hltIter2IterL3FromL1MuonTrack = cms.untracked.InputTag("hltIter2Phase2L3FromL1TkMuonTrackSelectionHighPurity","","MYHLT"),
    hltIter2IterL3MuonPixelSeeds = cms.untracked.InputTag("hltIter2IterL3MuonPixelSeeds","","MYHLT"),
    hltIter2IterL3MuonTrack = cms.untracked.InputTag("hltIter2IterL3MuonTrackSelectionHighPurity","","MYHLT"),
    hltIter3IterL3FromL1MuonPixelSeeds = cms.untracked.InputTag("hltIter3IterL3FromL1MuonPixelSeeds","","MYHLT"),
    hltIter3IterL3FromL1MuonTrack = cms.untracked.InputTag("hltIter3IterL3FromL1MuonTrackSelectionHighPurity","","MYHLT"),
    hltIter3IterL3MuonPixelSeeds = cms.untracked.InputTag("hltIter3IterL3MuonPixelSeeds","","MYHLT"),
    hltIter3IterL3MuonTrack = cms.untracked.InputTag("hltIter3IterL3MuonTrackSelectionHighPurity","","MYHLT"),
    hltIterL3OIMuonTrack = cms.untracked.InputTag("hltPhase2L3OIMuonTrackSelectionHighPurity","","MYHLT"),
    hltIterL3OISeedsFromL2Muons = cms.untracked.InputTag("hltPhase2L3OISeedsFromL2Muons","","MYHLT"),
    mvaFileHltIter2IterL3FromL1MuonPixelSeeds_B_0 = cms.FileInPath('HLTrigger/MuonHLTSeedMVAClassifier/data/PU200_Barrel_NThltIter2FromL1_0.xml'),
    mvaFileHltIter2IterL3FromL1MuonPixelSeeds_B_1 = cms.FileInPath('HLTrigger/MuonHLTSeedMVAClassifier/data/PU200_Barrel_NThltIter2FromL1_1.xml'),
    mvaFileHltIter2IterL3FromL1MuonPixelSeeds_B_2 = cms.FileInPath('HLTrigger/MuonHLTSeedMVAClassifier/data/PU200_Barrel_NThltIter2FromL1_2.xml'),
    mvaFileHltIter2IterL3FromL1MuonPixelSeeds_B_3 = cms.FileInPath('HLTrigger/MuonHLTSeedMVAClassifier/data/PU200_Barrel_NThltIter2FromL1_3.xml'),
    mvaFileHltIter2IterL3FromL1MuonPixelSeeds_E_0 = cms.FileInPath('HLTrigger/MuonHLTSeedMVAClassifier/data/PU200_Endcap_NThltIter2FromL1_0.xml'),
    mvaFileHltIter2IterL3FromL1MuonPixelSeeds_E_1 = cms.FileInPath('HLTrigger/MuonHLTSeedMVAClassifier/data/PU200_Endcap_NThltIter2FromL1_1.xml'),
    mvaFileHltIter2IterL3FromL1MuonPixelSeeds_E_2 = cms.FileInPath('HLTrigger/MuonHLTSeedMVAClassifier/data/PU200_Endcap_NThltIter2FromL1_2.xml'),
    mvaFileHltIter2IterL3FromL1MuonPixelSeeds_E_3 = cms.FileInPath('HLTrigger/MuonHLTSeedMVAClassifier/data/PU200_Endcap_NThltIter2FromL1_3.xml'),
    mvaScaleMeanHltIter2IterL3FromL1MuonPixelSeeds_B = cms.vdouble(
        0.000703194881993, 3.08981188359e-06, 2.59613491757e-06, 1.37719258533e-06, 3.82594532961e-06, 
        -0.00021582407927, 0.000249656891552, -0.000343988776655, -0.000585463770944, 0.0709317892682, 
        -1.05282128557e-05, 0.101715474828, 0.0972569135971, 0.0848868199517
    ),
    mvaScaleMeanHltIter2IterL3FromL1MuonPixelSeeds_E = cms.vdouble(
        0.000333544383405, 1.1008473944e-06, 2.24234916761e-06, 1.13050755579e-06, 3.63543469127e-06, 
        -2.78107232601e-05, 0.000566807881865, 0.000114494773151, 0.0014294411123, 0.0940466897816, 
        1.59869383095e-05, 0.117432407995, 0.213271662828, 0.203646592
    ),
    mvaScaleStdHltIter2IterL3FromL1MuonPixelSeeds_B = cms.vdouble(
        0.000881076877579, 2.78865847185e-06, 3.45817625575e-06, 2.68523260404e-06, 6.27869022208e-06, 
        0.0936444818271, 0.597371997825, 0.742754089865, 0.999999828616, 0.0386637793634, 
        0.0780337325204, 0.250328505572, 0.242358790594, 0.220620938324
    ),
    mvaScaleStdHltIter2IterL3FromL1MuonPixelSeeds_E = cms.vdouble(
        0.000470487609711, 2.38079543031e-06, 9.479424257e-06, 2.54021080817e-06, 5.07665292593e-06, 
        0.0476427385762, 0.666419872434, 0.425050278609, 0.999998978349, 0.0559697341716, 
        0.107217497328, 0.255717695535, 0.30251449474, 0.291716810133
    ),
    offlineVertex = cms.untracked.InputTag("offlinePrimaryVertices"),
    trackingParticle = cms.untracked.InputTag("mix","MergedTrackTruth")
)


process.DBService = cms.Service("DBService")


process.DQMStore = cms.Service("DQMStore",
    enableMultiThread = cms.untracked.bool(True),
    saveByLumi = cms.untracked.bool(False),
    trackME = cms.untracked.string(''),
    verbose = cms.untracked.int32(0)
)


process.MessageLogger = cms.Service("MessageLogger",
    FrameworkJobReport = cms.untracked.PSet(
        FwkJob = cms.untracked.PSet(
            limit = cms.untracked.int32(10000000),
            optionalPSet = cms.untracked.bool(True)
        ),
        default = cms.untracked.PSet(
            limit = cms.untracked.int32(0)
        ),
        optionalPSet = cms.untracked.bool(True)
    ),
    categories = cms.untracked.vstring(
        'FwkJob', 
        'FwkReport', 
        'FwkSummary', 
        'Root_NoDictionary', 
        'TriggerSummaryProducerAOD', 
        'L1GtTrigReport', 
        'L1TGlobalSummary', 
        'HLTrigReport', 
        'FastReport'
    ),
    cerr = cms.untracked.PSet(
        FwkJob = cms.untracked.PSet(
            limit = cms.untracked.int32(0),
            optionalPSet = cms.untracked.bool(True)
        ),
        FwkReport = cms.untracked.PSet(
            limit = cms.untracked.int32(10000000),
            optionalPSet = cms.untracked.bool(True),
            reportEvery = cms.untracked.int32(1000)
        ),
        FwkSummary = cms.untracked.PSet(
            limit = cms.untracked.int32(10000000),
            optionalPSet = cms.untracked.bool(True),
            reportEvery = cms.untracked.int32(1)
        ),
        INFO = cms.untracked.PSet(
            limit = cms.untracked.int32(0)
        ),
        Root_NoDictionary = cms.untracked.PSet(
            limit = cms.untracked.int32(0),
            optionalPSet = cms.untracked.bool(True)
        ),
        default = cms.untracked.PSet(
            limit = cms.untracked.int32(10000000)
        ),
        noTimeStamps = cms.untracked.bool(False),
        optionalPSet = cms.untracked.bool(True),
        threshold = cms.untracked.string('INFO')
    ),
    cerr_stats = cms.untracked.PSet(
        optionalPSet = cms.untracked.bool(True),
        output = cms.untracked.string('cerr'),
        threshold = cms.untracked.string('WARNING')
    ),
    cout = cms.untracked.PSet(
        placeholder = cms.untracked.bool(True)
    ),
    debugModules = cms.untracked.vstring(),
    debugs = cms.untracked.PSet(
        placeholder = cms.untracked.bool(True)
    ),
    default = cms.untracked.PSet(

    ),
    destinations = cms.untracked.vstring(
        'warnings', 
        'errors', 
        'infos', 
        'debugs', 
        'cout', 
        'cerr'
    ),
    errors = cms.untracked.PSet(
        placeholder = cms.untracked.bool(True)
    ),
    fwkJobReports = cms.untracked.vstring('FrameworkJobReport'),
    infos = cms.untracked.PSet(
        Root_NoDictionary = cms.untracked.PSet(
            limit = cms.untracked.int32(0),
            optionalPSet = cms.untracked.bool(True)
        ),
        optionalPSet = cms.untracked.bool(True),
        placeholder = cms.untracked.bool(True)
    ),
    statistics = cms.untracked.vstring('cerr_stats'),
    suppressDebug = cms.untracked.vstring(),
    suppressInfo = cms.untracked.vstring(),
    suppressWarning = cms.untracked.vstring('particleFlowDisplacedVertexCandidate'),
    warnings = cms.untracked.PSet(
        placeholder = cms.untracked.bool(True)
    )
)


process.RandomNumberGeneratorService = cms.Service("RandomNumberGeneratorService",
    CTPPSFastRecHits = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(1357987)
    ),
    LHCTransport = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(87654321)
    ),
    MuonSimHits = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(987346)
    ),
    VtxSmeared = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(98765432)
    ),
    ecalBarrelClusterFastTimer = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(1234567)
    ),
    ecalPreshowerRecHit = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(6541321)
    ),
    ecalRecHit = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(654321)
    ),
    externalLHEProducer = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(234567)
    ),
    famosPileUp = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(918273)
    ),
    fastSimProducer = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(13579)
    ),
    fastTrackerRecHits = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(24680)
    ),
    g4SimHits = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(11)
    ),
    generator = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(123456789)
    ),
    gsfTrackTimeValueMapProducer = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(1234567)
    ),
    hbhereco = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(541321)
    ),
    hfreco = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(541321)
    ),
    hiSignal = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(123456789)
    ),
    hiSignalG4SimHits = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(11)
    ),
    hiSignalLHCTransport = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(88776655)
    ),
    horeco = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(541321)
    ),
    l1ParamMuons = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(6453209)
    ),
    mix = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(12345)
    ),
    mixData = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(12345)
    ),
    mixGenPU = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(918273)
    ),
    mixRecoTracks = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(918273)
    ),
    mixSimCaloHits = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(918273)
    ),
    paramMuons = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(54525)
    ),
    saveFileName = cms.untracked.string(''),
    simBeamSpotFilter = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(87654321)
    ),
    simMuonCSCDigis = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(11223344)
    ),
    simMuonDTDigis = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(1234567)
    ),
    simMuonGEMDigis = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(1234567)
    ),
    simMuonME0Digis = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(1234567)
    ),
    simMuonME0PseudoDigis = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(1234567)
    ),
    simMuonME0PseudoReDigis = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(7654321)
    ),
    simMuonME0PseudoReDigisCoarse = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(2234567)
    ),
    simMuonRPCDigis = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(1234567)
    ),
    simSiStripDigiSimLink = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(1234567)
    ),
    trackTimeValueMapProducer = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(1234567)
    )
)


process.TFileService = cms.Service("TFileService",
    closeFileFast = cms.untracked.bool(False),
    fileName = cms.string('ntuple_cut0p02.root')
)


process.AnalyticalPropagator = cms.ESProducer("AnalyticalPropagatorESProducer",
    ComponentName = cms.string('AnalyticalPropagator'),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum')
)


process.AnalyticalPropagatorParabolicMF = cms.ESProducer("AnalyticalPropagatorESProducer",
    ComponentName = cms.string('AnalyticalPropagatorParabolicMf'),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string('ParabolicMf')
)


process.AnyDirectionAnalyticalPropagator = cms.ESProducer("AnalyticalPropagatorESProducer",
    ComponentName = cms.string('AnyDirectionAnalyticalPropagator'),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('anyDirection')
)


process.BeamHaloMPropagatorAlong = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('BeamHaloMPropagatorAlong'),
    Mass = cms.double(0.105),
    MaxDPhi = cms.double(10000),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(True)
)


process.BeamHaloMPropagatorOpposite = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('BeamHaloMPropagatorOpposite'),
    Mass = cms.double(0.105),
    MaxDPhi = cms.double(10000),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(True)
)


process.BeamHaloPropagatorAlong = cms.ESProducer("BeamHaloPropagatorESProducer",
    ComponentName = cms.string('BeamHaloPropagatorAlong'),
    CrossingTrackerPropagator = cms.string('BeamHaloSHPropagatorAlong'),
    EndCapTrackerPropagator = cms.string('BeamHaloMPropagatorAlong'),
    PropagationDirection = cms.string('alongMomentum')
)


process.BeamHaloPropagatorAny = cms.ESProducer("BeamHaloPropagatorESProducer",
    ComponentName = cms.string('BeamHaloPropagatorAny'),
    CrossingTrackerPropagator = cms.string('BeamHaloSHPropagatorAny'),
    EndCapTrackerPropagator = cms.string('BeamHaloMPropagatorAlong'),
    PropagationDirection = cms.string('anyDirection')
)


process.BeamHaloPropagatorOpposite = cms.ESProducer("BeamHaloPropagatorESProducer",
    ComponentName = cms.string('BeamHaloPropagatorOpposite'),
    CrossingTrackerPropagator = cms.string('BeamHaloSHPropagatorOpposite'),
    EndCapTrackerPropagator = cms.string('BeamHaloMPropagatorOpposite'),
    PropagationDirection = cms.string('oppositeToMomentum')
)


process.BeamHaloSHPropagatorAlong = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('BeamHaloSHPropagatorAlong'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('alongMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False)
)


process.BeamHaloSHPropagatorAny = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('BeamHaloSHPropagatorAny'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('anyDirection'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False)
)


process.BeamHaloSHPropagatorOpposite = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('BeamHaloSHPropagatorOpposite'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False)
)


process.CSCChannelMapperESProducer = cms.ESProducer("CSCChannelMapperESProducer",
    AlgoName = cms.string('CSCChannelMapperPostls1')
)


process.CSCGeometryESModule = cms.ESProducer("CSCGeometryESModule",
    alignmentsLabel = cms.string(''),
    appendToDataLabel = cms.string(''),
    applyAlignment = cms.bool(True),
    debugV = cms.untracked.bool(False),
    useCentreTIOffsets = cms.bool(False),
    useDDD = cms.bool(True),
    useGangedStripsInME1a = cms.bool(False),
    useOnlyWiresInME1a = cms.bool(False),
    useRealWireGeometry = cms.bool(True)
)


process.CSCIndexerESProducer = cms.ESProducer("CSCIndexerESProducer",
    AlgoName = cms.string('CSCIndexerPostls1')
)


process.CaloGeometryBuilder = cms.ESProducer("CaloGeometryBuilder",
    SelectedCalos = cms.vstring(
        'HCAL', 
        'ZDC', 
        'EcalBarrel', 
        'TOWER', 
        'HGCalEESensitive', 
        'HGCalHESiliconSensitive', 
        'HGCalHEScintillatorSensitive'
    )
)


process.CaloTPGTranscoder = cms.ESProducer("CaloTPGTranscoderULUTs",
    LUTfactor = cms.vint32(1, 2, 5, 0),
    RCTLSB = cms.double(0.25),
    ZS = cms.vint32(4, 2, 1, 0),
    hcalLUT1 = cms.FileInPath('CalibCalorimetry/CaloTPG/data/outputLUTtranscoder_physics.dat'),
    hcalLUT2 = cms.FileInPath('CalibCalorimetry/CaloTPG/data/TPGcalcDecompress2.txt'),
    ietaLowerBound = cms.vint32(1, 18, 27, 29),
    ietaUpperBound = cms.vint32(17, 26, 28, 32),
    linearLUTs = cms.bool(True),
    nominal_gain = cms.double(0.177),
    read_Ascii_Compression_LUTs = cms.bool(False),
    read_Ascii_RCT_LUTs = cms.bool(False),
    tpScales = cms.PSet(
        HBHE = cms.PSet(
            LSBQIE11 = cms.double(0.0625),
            LSBQIE11Overlap = cms.double(0.0625),
            LSBQIE8 = cms.double(0.125)
        ),
        HF = cms.PSet(
            NCTShift = cms.int32(2),
            RCTShift = cms.int32(3)
        )
    )
)


process.CaloTopologyBuilder = cms.ESProducer("CaloTopologyBuilder")


process.CaloTowerConstituentsMapBuilder = cms.ESProducer("CaloTowerConstituentsMapBuilder",
    MapAuto = cms.untracked.bool(False),
    MapFile = cms.untracked.string(''),
    SkipHE = cms.untracked.bool(True),
    appendToDataLabel = cms.string('')
)


process.CaloTowerHardcodeGeometryEP = cms.ESProducer("CaloTowerHardcodeGeometryEP")


process.CaloTowerTopologyEP = cms.ESProducer("CaloTowerTopologyEP")


process.CastorDbProducer = cms.ESProducer("CastorDbProducer",
    appendToDataLabel = cms.string('')
)


process.CastorHardcodeGeometryEP = cms.ESProducer("CastorHardcodeGeometryEP")


process.Chi2EstimatorForMuRefit = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('Chi2EstimatorForMuRefit'),
    MaxChi2 = cms.double(100000.0),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    nSigma = cms.double(3)
)


process.Chi2EstimatorForMuonTrackLoader = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('Chi2EstimatorForMuonTrackLoader'),
    MaxChi2 = cms.double(100000.0),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    nSigma = cms.double(3)
)


process.Chi2EstimatorForRefit = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('Chi2EstimatorForRefit'),
    MaxChi2 = cms.double(100000.0),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    nSigma = cms.double(3.0)
)


process.Chi2MeasurementEstimator = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('Chi2'),
    MaxChi2 = cms.double(30),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    nSigma = cms.double(3)
)


process.Chi2MeasurementEstimatorForInOut = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('Chi2ForInOut'),
    MaxChi2 = cms.double(100.0),
    MaxDisplacement = cms.double(100),
    MaxSagitta = cms.double(-1),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    nSigma = cms.double(3)
)


process.Chi2MeasurementEstimatorForOutIn = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('Chi2ForOutIn'),
    MaxChi2 = cms.double(500.0),
    MaxDisplacement = cms.double(100),
    MaxSagitta = cms.double(-1.0),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    nSigma = cms.double(3)
)


process.Chi2MeasurementEstimatorForP5 = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('Chi2MeasurementEstimatorForP5'),
    MaxChi2 = cms.double(100.0),
    MaxDisplacement = cms.double(100),
    MaxSagitta = cms.double(-1),
    MinPtForHitRecoveryInGluedDet = cms.double(100000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    nSigma = cms.double(4.0)
)


process.CloseComponentsMerger5D = cms.ESProducer("CloseComponentsMergerESProducer5D",
    ComponentName = cms.string('CloseComponentsMerger5D'),
    DistanceMeasure = cms.string('KullbackLeiblerDistance5D'),
    MaxComponents = cms.int32(12)
)


process.CloseComponentsMerger_forPreId = cms.ESProducer("CloseComponentsMergerESProducer5D",
    ComponentName = cms.string('CloseComponentsMerger_forPreId'),
    DistanceMeasure = cms.string('KullbackLeiblerDistance5D'),
    MaxComponents = cms.int32(4)
)


process.ClusterShapeHitFilterESProducer = cms.ESProducer("ClusterShapeHitFilterESProducer",
    ComponentName = cms.string('ClusterShapeHitFilter'),
    PixelShapeFile = cms.string('RecoPixelVertexing/PixelLowPtUtilities/data/ITShapePhase2_all.par'),
    PixelShapeFileL1 = cms.string('RecoPixelVertexing/PixelLowPtUtilities/data/ITShapePhase2_all.par'),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    )
)


process.DTGeometryESModule = cms.ESProducer("DTGeometryESModule",
    alignmentsLabel = cms.string(''),
    appendToDataLabel = cms.string(''),
    applyAlignment = cms.bool(True),
    fromDDD = cms.bool(True)
)


process.DummyDetLayerGeometry = cms.ESProducer("DetLayerGeometryESProducer",
    ComponentName = cms.string('DummyDetLayerGeometry')
)


process.EcalBarrelGeometryEP = cms.ESProducer("EcalBarrelGeometryEP",
    applyAlignment = cms.bool(False)
)


process.EcalElectronicsMappingBuilder = cms.ESProducer("EcalElectronicsMappingBuilder")


process.EcalLaserCorrectionService = cms.ESProducer("EcalLaserCorrectionService")


process.EcalTrigTowerConstituentsMapBuilder = cms.ESProducer("EcalTrigTowerConstituentsMapBuilder",
    MapFile = cms.untracked.string('Geometry/EcalMapping/data/EndCap_TTMap.txt')
)


process.ElectronChi2 = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('ElectronChi2'),
    MaxChi2 = cms.double(2000.0),
    MaxDisplacement = cms.double(100),
    MaxSagitta = cms.double(-1),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    nSigma = cms.double(3)
)


process.ElectronMaterialEffects = cms.ESProducer("GsfMaterialEffectsESProducer",
    BetheHeitlerCorrection = cms.int32(2),
    BetheHeitlerParametrization = cms.string('BetheHeitler_cdfmom_nC6_O5.par'),
    ComponentName = cms.string('ElectronMaterialEffects'),
    EnergyLossUpdator = cms.string('GsfBetheHeitlerUpdator'),
    Mass = cms.double(0.000511),
    MultipleScatteringUpdator = cms.string('MultipleScatteringUpdator')
)


process.ElectronMaterialEffects_forPreId = cms.ESProducer("GsfMaterialEffectsESProducer",
    BetheHeitlerCorrection = cms.int32(2),
    BetheHeitlerParametrization = cms.string('BetheHeitler_cdfmom_nC3_O5.par'),
    ComponentName = cms.string('ElectronMaterialEffects_forPreId'),
    EnergyLossUpdator = cms.string('GsfBetheHeitlerUpdator'),
    Mass = cms.double(0.000511),
    MultipleScatteringUpdator = cms.string('MultipleScatteringUpdator')
)


process.EstimatorForSTA = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('Chi2STA'),
    MaxChi2 = cms.double(1000.0),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    nSigma = cms.double(3)
)


process.FittingSmootherRKP5 = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(False),
    ComponentName = cms.string('FittingSmootherRKP5'),
    EstimateCut = cms.double(20.0),
    Fitter = cms.string('RKFitter'),
    LogPixelProbabilityCut = cms.double(0),
    MaxFractionOutliers = cms.double(0.3),
    MaxNumberOfOutliers = cms.int32(3),
    MinDof = cms.int32(2),
    MinNumberOfHits = cms.int32(4),
    NoInvalidHitsBeginEnd = cms.bool(True),
    NoOutliersBeginEnd = cms.bool(False),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('RKSmoother'),
    appendToDataLabel = cms.string('')
)


process.FlexibleKFFittingSmoother = cms.ESProducer("FlexibleKFFittingSmootherESProducer",
    ComponentName = cms.string('FlexibleKFFittingSmoother'),
    appendToDataLabel = cms.string(''),
    looperFitter = cms.string('LooperFittingSmoother'),
    standardFitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK')
)


process.GEMGeometryESModule = cms.ESProducer("GEMGeometryESModule",
    alignmentsLabel = cms.string(''),
    applyAlignment = cms.bool(False),
    useDDD = cms.bool(True)
)


process.GlbMuKFFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('GlbMuKFFitter'),
    Estimator = cms.string('Chi2EstimatorForMuRefit'),
    Propagator = cms.string('SmartPropagatorAnyRK'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    minHits = cms.int32(3)
)


process.GlobalDetLayerGeometry = cms.ESProducer("GlobalDetLayerGeometryESProducer",
    ComponentName = cms.string('GlobalDetLayerGeometry')
)


process.GlobalParameters = cms.ESProducer("StableParametersTrivialProducer",
    NumberChips = cms.uint32(1),
    NumberL1EGamma = cms.uint32(12),
    NumberL1Jet = cms.uint32(12),
    NumberL1Muon = cms.uint32(8),
    NumberL1Tau = cms.uint32(12),
    NumberPhysTriggers = cms.uint32(512),
    OrderOfChip = cms.vint32(1),
    PinsOnChip = cms.uint32(512)
)


process.GlobalTrackingGeometryESProducer = cms.ESProducer("GlobalTrackingGeometryESProducer")


process.GsfElectronFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('GsfElectronFittingSmoother'),
    EstimateCut = cms.double(-1),
    Fitter = cms.string('GsfTrajectoryFitter'),
    LogPixelProbabilityCut = cms.double(0),
    MaxFractionOutliers = cms.double(0.3),
    MaxNumberOfOutliers = cms.int32(3),
    MinDof = cms.int32(2),
    MinNumberOfHits = cms.int32(5),
    NoInvalidHitsBeginEnd = cms.bool(True),
    NoOutliersBeginEnd = cms.bool(False),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('GsfTrajectorySmoother'),
    appendToDataLabel = cms.string('')
)


process.GsfTrajectoryFitter = cms.ESProducer("GsfTrajectoryFitterESProducer",
    ComponentName = cms.string('GsfTrajectoryFitter'),
    GeometricalPropagator = cms.string('fwdAnalyticalPropagator'),
    MaterialEffectsUpdator = cms.string('ElectronMaterialEffects'),
    Merger = cms.string('CloseComponentsMerger5D'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.GsfTrajectoryFitter_forPreId = cms.ESProducer("GsfTrajectoryFitterESProducer",
    ComponentName = cms.string('GsfTrajectoryFitter_forPreId'),
    GeometricalPropagator = cms.string('fwdAnalyticalPropagator'),
    MaterialEffectsUpdator = cms.string('ElectronMaterialEffects_forPreId'),
    Merger = cms.string('CloseComponentsMerger_forPreId'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.GsfTrajectorySmoother = cms.ESProducer("GsfTrajectorySmootherESProducer",
    ComponentName = cms.string('GsfTrajectorySmoother'),
    ErrorRescaling = cms.double(100.0),
    GeometricalPropagator = cms.string('bwdAnalyticalPropagator'),
    MaterialEffectsUpdator = cms.string('ElectronMaterialEffects'),
    Merger = cms.string('CloseComponentsMerger5D'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.GsfTrajectorySmoother_forPreId = cms.ESProducer("GsfTrajectorySmootherESProducer",
    ComponentName = cms.string('GsfTrajectorySmoother_forPreId'),
    ErrorRescaling = cms.double(100.0),
    GeometricalPropagator = cms.string('bwdAnalyticalPropagator'),
    MaterialEffectsUpdator = cms.string('ElectronMaterialEffects_forPreId'),
    Merger = cms.string('CloseComponentsMerger_forPreId'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.HGCalEEGeometryESProducer = cms.ESProducer("HGCalGeometryESProducer",
    Name = cms.untracked.string('HGCalEESensitive')
)


process.HGCalEETopologyBuilder = cms.ESProducer("HGCalTopologyBuilder",
    Name = cms.string('HGCalEESensitive'),
    Type = cms.int32(8)
)


process.HGCalHESciGeometryESProducer = cms.ESProducer("HGCalGeometryESProducer",
    Name = cms.untracked.string('HGCalHEScintillatorSensitive')
)


process.HGCalHESciTopologyBuilder = cms.ESProducer("HGCalTopologyBuilder",
    Name = cms.string('HGCalHEScintillatorSensitive'),
    Type = cms.int32(10)
)


process.HGCalHESilGeometryESProducer = cms.ESProducer("HGCalGeometryESProducer",
    Name = cms.untracked.string('HGCalHESiliconSensitive')
)


process.HGCalHESilTopologyBuilder = cms.ESProducer("HGCalTopologyBuilder",
    Name = cms.string('HGCalHESiliconSensitive'),
    Type = cms.int32(9)
)


process.HcalHardcodeGeometryEP = cms.ESProducer("HcalHardcodeGeometryEP",
    UseOldLoader = cms.bool(False)
)


process.HcalTPGCoderULUT = cms.ESProducer("HcalTPGCoderULUT",
    FGLUTs = cms.FileInPath('CalibCalorimetry/HcalTPGAlgos/data/HBHE_FG_LUT.dat'),
    FG_HF_thresholds = cms.vuint32(17, 255),
    LUTGenerationMode = cms.bool(True),
    MaskBit = cms.int32(32768),
    RCalibFile = cms.FileInPath('CalibCalorimetry/HcalTPGAlgos/data/RecHit-TPG-calib.dat'),
    inputLUTs = cms.FileInPath('CalibCalorimetry/HcalTPGAlgos/data/inputLUTcoder_physics.dat'),
    linearLUTs = cms.bool(True),
    read_Ascii_LUTs = cms.bool(False),
    read_FG_LUTs = cms.bool(False),
    read_XML_LUTs = cms.bool(False),
    tpScales = cms.PSet(
        HBHE = cms.PSet(
            LSBQIE11 = cms.double(0.0625),
            LSBQIE11Overlap = cms.double(0.0625),
            LSBQIE8 = cms.double(0.125)
        ),
        HF = cms.PSet(
            NCTShift = cms.int32(2),
            RCTShift = cms.int32(3)
        )
    )
)


process.HcalTrigTowerGeometryESProducer = cms.ESProducer("HcalTrigTowerGeometryESProducer")


process.KFFitterForRefitInsideOut = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('KFFitterForRefitInsideOut'),
    Estimator = cms.string('Chi2EstimatorForRefit'),
    Propagator = cms.string('SmartPropagatorAnyRK'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    minHits = cms.int32(3)
)


process.KFFitterForRefitOutsideIn = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('KFFitterForRefitOutsideIn'),
    Estimator = cms.string('Chi2EstimatorForRefit'),
    Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    minHits = cms.int32(3)
)


process.KFFittingSmootheForSTA = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('KFFitterSmootherSTA'),
    EstimateCut = cms.double(-1),
    Fitter = cms.string('KFFitterSTA'),
    LogPixelProbabilityCut = cms.double(0),
    MaxFractionOutliers = cms.double(0.3),
    MaxNumberOfOutliers = cms.int32(3),
    MinDof = cms.int32(2),
    MinNumberOfHits = cms.int32(5),
    NoInvalidHitsBeginEnd = cms.bool(True),
    NoOutliersBeginEnd = cms.bool(False),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('KFSmootherSTA'),
    appendToDataLabel = cms.string('')
)


process.KFFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('KFFittingSmoother'),
    EstimateCut = cms.double(-1),
    Fitter = cms.string('KFFitter'),
    LogPixelProbabilityCut = cms.double(0),
    MaxFractionOutliers = cms.double(0.3),
    MaxNumberOfOutliers = cms.int32(3),
    MinDof = cms.int32(2),
    MinNumberOfHits = cms.int32(5),
    NoInvalidHitsBeginEnd = cms.bool(True),
    NoOutliersBeginEnd = cms.bool(False),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('KFSmoother'),
    appendToDataLabel = cms.string('')
)


process.KFFittingSmootherBeamHalo = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('KFFittingSmootherBH'),
    EstimateCut = cms.double(-1),
    Fitter = cms.string('KFFitterBH'),
    LogPixelProbabilityCut = cms.double(0),
    MaxFractionOutliers = cms.double(0.3),
    MaxNumberOfOutliers = cms.int32(3),
    MinDof = cms.int32(2),
    MinNumberOfHits = cms.int32(5),
    NoInvalidHitsBeginEnd = cms.bool(True),
    NoOutliersBeginEnd = cms.bool(False),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('KFSmootherBH'),
    appendToDataLabel = cms.string('')
)


process.KFFittingSmootherForInOut = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('KFFittingSmootherForInOut'),
    EstimateCut = cms.double(-1),
    Fitter = cms.string('KFFitterForInOut'),
    LogPixelProbabilityCut = cms.double(0),
    MaxFractionOutliers = cms.double(0.3),
    MaxNumberOfOutliers = cms.int32(3),
    MinDof = cms.int32(2),
    MinNumberOfHits = cms.int32(3),
    NoInvalidHitsBeginEnd = cms.bool(True),
    NoOutliersBeginEnd = cms.bool(False),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('KFSmootherForInOut'),
    appendToDataLabel = cms.string('')
)


process.KFFittingSmootherWithOutliersRejectionAndRK = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    EstimateCut = cms.double(20.0),
    Fitter = cms.string('RKFitter'),
    LogPixelProbabilityCut = cms.double(0),
    MaxFractionOutliers = cms.double(0.3),
    MaxNumberOfOutliers = cms.int32(3),
    MinDof = cms.int32(2),
    MinNumberOfHits = cms.int32(3),
    NoInvalidHitsBeginEnd = cms.bool(True),
    NoOutliersBeginEnd = cms.bool(False),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('RKSmoother'),
    appendToDataLabel = cms.string('')
)


process.KFSmootherForMuonTrackLoader = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('KFSmootherForMuonTrackLoader'),
    Estimator = cms.string('Chi2EstimatorForMuonTrackLoader'),
    Propagator = cms.string('SmartPropagatorAnyRK'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    errorRescaling = cms.double(10.0),
    minHits = cms.int32(3)
)


process.KFSmootherForMuonTrackLoaderL3 = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('KFSmootherForMuonTrackLoaderL3'),
    Estimator = cms.string('Chi2EstimatorForMuonTrackLoader'),
    Propagator = cms.string('SmartPropagatorAnyOpposite'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    errorRescaling = cms.double(10.0),
    minHits = cms.int32(3)
)


process.KFSmootherForRefitInsideOut = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('KFSmootherForRefitInsideOut'),
    Estimator = cms.string('Chi2EstimatorForRefit'),
    Propagator = cms.string('SmartPropagatorAnyRK'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3)
)


process.KFSmootherForRefitOutsideIn = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('KFSmootherForRefitOutsideIn'),
    Estimator = cms.string('Chi2EstimatorForRefit'),
    Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3)
)


process.KFSwitching1DUpdatorESProducer = cms.ESProducer("KFSwitching1DUpdatorESProducer",
    ComponentName = cms.string('KFSwitching1DUpdator'),
    doEndCap = cms.bool(False)
)


process.KFTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('KFFitter'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('PropagatorWithMaterial'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    minHits = cms.int32(3)
)


process.KFTrajectoryFitterBeamHalo = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('KFFitterBH'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('BeamHaloPropagatorAlong'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    minHits = cms.int32(3)
)


process.KFTrajectoryFitterForInOut = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('KFFitterForInOut'),
    Estimator = cms.string('Chi2ForInOut'),
    Propagator = cms.string('alongMomElePropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    minHits = cms.int32(3)
)


process.KFTrajectoryFitterForOutIn = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('KFFitterForOutIn'),
    Estimator = cms.string('Chi2ForOutIn'),
    Propagator = cms.string('alongMomElePropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    minHits = cms.int32(3)
)


process.KFTrajectoryFitterForSTA = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('KFFitterSTA'),
    Estimator = cms.string('Chi2STA'),
    Propagator = cms.string('SteppingHelixPropagatorAny'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    minHits = cms.int32(3)
)


process.KFTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('KFSmoother'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('PropagatorWithMaterial'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    errorRescaling = cms.double(100),
    minHits = cms.int32(3)
)


process.KFTrajectorySmootherBeamHalo = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('KFSmootherBH'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('BeamHaloPropagatorAlong'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    errorRescaling = cms.double(100),
    minHits = cms.int32(3)
)


process.KFTrajectorySmootherForInOut = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('KFSmootherForInOut'),
    Estimator = cms.string('Chi2ForInOut'),
    Propagator = cms.string('oppositeToMomElePropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    errorRescaling = cms.double(100),
    minHits = cms.int32(3)
)


process.KFTrajectorySmootherForSTA = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('KFSmootherSTA'),
    Estimator = cms.string('Chi2STA'),
    Propagator = cms.string('SteppingHelixPropagatorOpposite'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    errorRescaling = cms.double(100),
    minHits = cms.int32(3)
)


process.KFUpdatorESProducer = cms.ESProducer("KFUpdatorESProducer",
    ComponentName = cms.string('KFUpdator')
)


process.KullbackLeiblerDistance5D = cms.ESProducer("DistanceBetweenComponentsESProducer5D",
    ComponentName = cms.string('KullbackLeiblerDistance5D'),
    DistanceMeasure = cms.string('KullbackLeibler')
)


process.L1DTConfigFromDB = cms.ESProducer("DTConfigDBProducer",
    DTTPGMap = cms.untracked.PSet(
    **dict(
        [
            ("wh0st1se1" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se10" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se11" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se12" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se2" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se3" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se4" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se5" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se6" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se7" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se8" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se9" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st2se1" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se10" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se11" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se12" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se2" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se3" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se4" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se5" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se6" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se7" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se8" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se9" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st3se1" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se10" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se11" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se12" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se2" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se3" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se4" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se5" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se6" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se7" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se8" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se9" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st4se1" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se10" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh0st4se11" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("wh0st4se12" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh0st4se13" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh0st4se14" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh0st4se2" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se3" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se4" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh0st4se5" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se6" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se7" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se8" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh0st4se9" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("wh1st1se1" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se10" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se11" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se12" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se2" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se3" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se4" , cms.untracked.vint32(50, 48, 50, 13) ),
            ("wh1st1se5" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se6" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se7" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se8" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se9" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st2se1" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se10" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se11" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se12" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se2" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se3" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se4" , cms.untracked.vint32(60, 48, 60, 15) ),
            ("wh1st2se5" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se6" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se7" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se8" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se9" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st3se1" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se10" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se11" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se12" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se2" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se3" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se4" , cms.untracked.vint32(72, 48, 72, 18) ),
            ("wh1st3se5" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se6" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se7" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se8" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se9" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st4se1" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se10" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh1st4se11" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("wh1st4se12" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh1st4se13" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh1st4se14" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh1st4se2" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se3" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se4" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh1st4se5" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se6" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se7" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se8" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh1st4se9" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("wh2st1se1" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se10" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se11" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se12" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se2" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se3" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se4" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se5" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se6" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se7" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se8" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se9" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st2se1" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se10" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se11" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se12" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se2" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se3" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se4" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se5" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se6" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se7" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se8" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se9" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st3se1" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se10" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se11" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se12" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se2" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se3" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se4" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se5" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se6" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se7" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se8" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se9" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st4se1" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se10" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh2st4se11" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("wh2st4se12" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh2st4se13" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh2st4se14" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh2st4se2" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se3" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se4" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh2st4se5" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se6" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se7" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se8" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh2st4se9" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("whm1st1se1" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se10" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se11" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se12" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se2" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se3" , cms.untracked.vint32(50, 48, 50, 13) ),
            ("whm1st1se4" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se5" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se6" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se7" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se8" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se9" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st2se1" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se10" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se11" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se12" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se2" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se3" , cms.untracked.vint32(60, 48, 60, 15) ),
            ("whm1st2se4" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se5" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se6" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se7" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se8" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se9" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st3se1" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se10" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se11" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se12" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se2" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se3" , cms.untracked.vint32(72, 48, 72, 18) ),
            ("whm1st3se4" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se5" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se6" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se7" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se8" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se9" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st4se1" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se10" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("whm1st4se11" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("whm1st4se12" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("whm1st4se13" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("whm1st4se14" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("whm1st4se2" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se3" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se4" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("whm1st4se5" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se6" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se7" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se8" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("whm1st4se9" , cms.untracked.vint32(48, 0, 48, 12) ),
        ] +
        [
            ("whm2st1se1" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se10" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se11" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se12" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se2" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se3" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se4" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se5" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se6" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se7" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se8" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se9" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st2se1" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se10" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se11" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se12" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se2" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se3" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se4" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se5" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se6" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se7" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se8" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se9" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st3se1" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se10" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se11" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se12" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se2" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se3" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se4" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se5" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se6" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se7" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se8" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se9" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st4se1" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se10" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("whm2st4se11" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("whm2st4se12" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("whm2st4se13" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("whm2st4se14" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("whm2st4se2" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se3" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se4" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("whm2st4se5" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se6" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se7" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se8" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("whm2st4se9" , cms.untracked.vint32(48, 0, 48, 12) ),
            ]
        )
    ),
    DTTPGParameters = cms.PSet(
        Debug = cms.untracked.bool(False),
        SectCollParameters = cms.PSet(
            Debug = cms.untracked.bool(False),
            SCCSP1 = cms.int32(0),
            SCCSP2 = cms.int32(0),
            SCCSP3 = cms.int32(0),
            SCCSP4 = cms.int32(0),
            SCCSP5 = cms.int32(0),
            SCECF1 = cms.bool(False),
            SCECF2 = cms.bool(False),
            SCECF3 = cms.bool(False),
            SCECF4 = cms.bool(False)
        ),
        TUParameters = cms.PSet(
            BtiParameters = cms.PSet(
                AC1 = cms.int32(0),
                AC2 = cms.int32(3),
                ACH = cms.int32(1),
                ACL = cms.int32(2),
                CH = cms.int32(41),
                CL = cms.int32(22),
                DEAD = cms.int32(31),
                Debug = cms.untracked.int32(0),
                KACCTHETA = cms.int32(1),
                KMAX = cms.int32(64),
                LH = cms.int32(21),
                LL = cms.int32(2),
                LTS = cms.int32(3),
                PTMS0 = cms.int32(0),
                PTMS1 = cms.int32(0),
                PTMS10 = cms.int32(1),
                PTMS11 = cms.int32(1),
                PTMS12 = cms.int32(1),
                PTMS13 = cms.int32(1),
                PTMS14 = cms.int32(1),
                PTMS15 = cms.int32(1),
                PTMS16 = cms.int32(1),
                PTMS17 = cms.int32(1),
                PTMS18 = cms.int32(1),
                PTMS19 = cms.int32(1),
                PTMS2 = cms.int32(0),
                PTMS20 = cms.int32(1),
                PTMS21 = cms.int32(1),
                PTMS22 = cms.int32(1),
                PTMS23 = cms.int32(1),
                PTMS24 = cms.int32(1),
                PTMS25 = cms.int32(1),
                PTMS26 = cms.int32(1),
                PTMS27 = cms.int32(1),
                PTMS28 = cms.int32(1),
                PTMS29 = cms.int32(1),
                PTMS3 = cms.int32(0),
                PTMS30 = cms.int32(0),
                PTMS31 = cms.int32(0),
                PTMS4 = cms.int32(1),
                PTMS5 = cms.int32(1),
                PTMS6 = cms.int32(1),
                PTMS7 = cms.int32(1),
                PTMS8 = cms.int32(1),
                PTMS9 = cms.int32(1),
                RE43 = cms.int32(2),
                RH = cms.int32(61),
                RL = cms.int32(42),
                RON = cms.bool(True),
                SET = cms.int32(7),
                ST43 = cms.int32(42),
                WEN0 = cms.int32(1),
                WEN1 = cms.int32(1),
                WEN2 = cms.int32(1),
                WEN3 = cms.int32(1),
                WEN4 = cms.int32(1),
                WEN5 = cms.int32(1),
                WEN6 = cms.int32(1),
                WEN7 = cms.int32(1),
                WEN8 = cms.int32(1),
                XON = cms.bool(False)
            ),
            Debug = cms.untracked.bool(False),
            LutParameters = cms.PSet(
                BTIC = cms.untracked.int32(0),
                D = cms.untracked.double(0),
                Debug = cms.untracked.bool(False),
                WHEEL = cms.untracked.int32(-1),
                XCN = cms.untracked.double(0)
            ),
            TSPhiParameters = cms.PSet(
                Debug = cms.untracked.bool(False),
                TSMCCE1 = cms.bool(True),
                TSMCCE2 = cms.bool(False),
                TSMCCEC = cms.bool(False),
                TSMCGS1 = cms.bool(True),
                TSMCGS2 = cms.bool(True),
                TSMGS1 = cms.int32(1),
                TSMGS2 = cms.int32(1),
                TSMHSP = cms.int32(1),
                TSMHTE1 = cms.bool(True),
                TSMHTE2 = cms.bool(False),
                TSMHTEC = cms.bool(False),
                TSMMSK1 = cms.int32(312),
                TSMMSK2 = cms.int32(312),
                TSMNOE1 = cms.bool(True),
                TSMNOE2 = cms.bool(False),
                TSMNOEC = cms.bool(False),
                TSMWORD = cms.int32(255),
                TSSCCE1 = cms.bool(True),
                TSSCCE2 = cms.bool(False),
                TSSCCEC = cms.bool(False),
                TSSCGS1 = cms.bool(True),
                TSSCGS2 = cms.bool(True),
                TSSGS1 = cms.int32(1),
                TSSGS2 = cms.int32(1),
                TSSHTE1 = cms.bool(True),
                TSSHTE2 = cms.bool(False),
                TSSHTEC = cms.bool(False),
                TSSMSK1 = cms.int32(312),
                TSSMSK2 = cms.int32(312),
                TSSNOE1 = cms.bool(True),
                TSSNOE2 = cms.bool(False),
                TSSNOEC = cms.bool(False),
                TSTREN0 = cms.bool(True),
                TSTREN1 = cms.bool(True),
                TSTREN10 = cms.bool(True),
                TSTREN11 = cms.bool(True),
                TSTREN12 = cms.bool(True),
                TSTREN13 = cms.bool(True),
                TSTREN14 = cms.bool(True),
                TSTREN15 = cms.bool(True),
                TSTREN16 = cms.bool(True),
                TSTREN17 = cms.bool(True),
                TSTREN18 = cms.bool(True),
                TSTREN19 = cms.bool(True),
                TSTREN2 = cms.bool(True),
                TSTREN20 = cms.bool(True),
                TSTREN21 = cms.bool(True),
                TSTREN22 = cms.bool(True),
                TSTREN23 = cms.bool(True),
                TSTREN3 = cms.bool(True),
                TSTREN4 = cms.bool(True),
                TSTREN5 = cms.bool(True),
                TSTREN6 = cms.bool(True),
                TSTREN7 = cms.bool(True),
                TSTREN8 = cms.bool(True),
                TSTREN9 = cms.bool(True)
            ),
            TSThetaParameters = cms.PSet(
                Debug = cms.untracked.bool(False)
            ),
            TracoParameters = cms.PSet(
                BTIC = cms.int32(32),
                DD = cms.int32(18),
                Debug = cms.untracked.int32(0),
                FHISM = cms.int32(0),
                FHTMSK = cms.int32(0),
                FHTPRF = cms.int32(1),
                FLTMSK = cms.int32(1),
                FPRGCOMP = cms.int32(2),
                FSLMSK = cms.int32(0),
                IBTIOFF = cms.int32(0),
                KPRGCOM = cms.int32(255),
                KRAD = cms.int32(0),
                LTF = cms.int32(0),
                LTS = cms.int32(0),
                LVALIDIFH = cms.int32(0),
                REUSEI = cms.int32(1),
                REUSEO = cms.int32(1),
                SHISM = cms.int32(0),
                SHTMSK = cms.int32(0),
                SHTPRF = cms.int32(1),
                SLTMSK = cms.int32(1),
                SPRGCOMP = cms.int32(2),
                SSLMSK = cms.int32(0),
                TRGENB0 = cms.int32(1),
                TRGENB1 = cms.int32(1),
                TRGENB10 = cms.int32(1),
                TRGENB11 = cms.int32(1),
                TRGENB12 = cms.int32(1),
                TRGENB13 = cms.int32(1),
                TRGENB14 = cms.int32(1),
                TRGENB15 = cms.int32(1),
                TRGENB2 = cms.int32(1),
                TRGENB3 = cms.int32(1),
                TRGENB4 = cms.int32(1),
                TRGENB5 = cms.int32(1),
                TRGENB6 = cms.int32(1),
                TRGENB7 = cms.int32(1),
                TRGENB8 = cms.int32(1),
                TRGENB9 = cms.int32(1)
            )
        )
    ),
    TracoLutsFromDB = cms.bool(True),
    UseBtiAcceptParam = cms.bool(True),
    UseT0 = cms.bool(False),
    bxOffset = cms.int32(19),
    cfgConfig = cms.bool(False),
    debug = cms.bool(False),
    debugBti = cms.int32(0),
    debugDB = cms.bool(False),
    debugLUTs = cms.bool(False),
    debugPed = cms.bool(False),
    debugSC = cms.bool(False),
    debugTSP = cms.bool(False),
    debugTST = cms.bool(False),
    debugTU = cms.bool(False),
    debugTraco = cms.int32(0),
    finePhase = cms.double(25.0)
)


process.LooperFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('LooperFittingSmoother'),
    EstimateCut = cms.double(20.0),
    Fitter = cms.string('LooperFitter'),
    LogPixelProbabilityCut = cms.double(-14.0),
    MaxFractionOutliers = cms.double(0.3),
    MaxNumberOfOutliers = cms.int32(3),
    MinDof = cms.int32(2),
    MinNumberOfHits = cms.int32(3),
    NoInvalidHitsBeginEnd = cms.bool(True),
    NoOutliersBeginEnd = cms.bool(False),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('LooperSmoother'),
    appendToDataLabel = cms.string('')
)


process.LooperTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('LooperFitter'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('PropagatorWithMaterialForLoopers'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    minHits = cms.int32(3)
)


process.LooperTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('LooperSmoother'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('PropagatorWithMaterialForLoopers'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    errorRescaling = cms.double(10.0),
    minHits = cms.int32(3)
)


process.ME0GeometryESModule = cms.ESProducer("ME0GeometryESModule",
    use10EtaPart = cms.bool(True),
    useDDD = cms.bool(True)
)


process.MRHChi2MeasurementEstimator = cms.ESProducer("MRHChi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('MRHChi2'),
    MaxChi2 = cms.double(30.0),
    nSigma = cms.double(3.0)
)


process.MRHFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('MRHFittingSmoother'),
    EstimateCut = cms.double(-1),
    Fitter = cms.string('MRHFitter'),
    LogPixelProbabilityCut = cms.double(0),
    MaxFractionOutliers = cms.double(0.3),
    MaxNumberOfOutliers = cms.int32(3),
    MinDof = cms.int32(2),
    MinNumberOfHits = cms.int32(5),
    NoInvalidHitsBeginEnd = cms.bool(True),
    NoOutliersBeginEnd = cms.bool(False),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('MRHSmoother'),
    appendToDataLabel = cms.string('')
)


process.MRHTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('MRHFitter'),
    Estimator = cms.string('MRHChi2'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    minHits = cms.int32(3)
)


process.MRHTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('MRHSmoother'),
    Estimator = cms.string('MRHChi2'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    errorRescaling = cms.double(100),
    minHits = cms.int32(3)
)


process.MTDCPEESProducer = cms.ESProducer("MTDCPEESProducer",
    appendToDataLabel = cms.string('')
)


process.MTDTimeCalibESProducer = cms.ESProducer("MTDTimeCalibESProducer",
    BTLLightCollSlope = cms.double(0.075),
    BTLLightCollTime = cms.double(0.2),
    BTLTimeOffset = cms.double(0.0115),
    ETLTimeOffset = cms.double(0.0066),
    appendToDataLabel = cms.string('')
)


process.MTDTransientTrackingRecHitBuilder = cms.ESProducer("MTDTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('MTDRecHitBuilder')
)


process.MaterialPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('PropagatorWithMaterial'),
    Mass = cms.double(0.105),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(False)
)


process.MaterialPropagatorParabolicMF = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('PropagatorWithMaterialParabolicMf'),
    Mass = cms.double(0.105),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string('ParabolicMf'),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(False)
)


process.MeasurementTracker = cms.ESProducer("MeasurementTrackerESProducer",
    ComponentName = cms.string(''),
    DebugPixelModuleQualityDB = cms.untracked.bool(False),
    DebugPixelROCQualityDB = cms.untracked.bool(False),
    DebugStripAPVFiberQualityDB = cms.untracked.bool(False),
    DebugStripModuleQualityDB = cms.untracked.bool(False),
    DebugStripStripQualityDB = cms.untracked.bool(False),
    HitMatcher = cms.string('StandardMatcher'),
    MaskBadAPVFibers = cms.bool(True),
    Phase2StripCPE = cms.string('Phase2StripCPE'),
    PixelCPE = cms.string('PixelCPEGeneric'),
    SiStripQualityLabel = cms.string(''),
    StripCPE = cms.string('StripCPEfromTrackAngle'),
    UsePixelModuleQualityDB = cms.bool(True),
    UsePixelROCQualityDB = cms.bool(True),
    UseStripAPVFiberQualityDB = cms.bool(True),
    UseStripModuleQualityDB = cms.bool(True),
    UseStripStripQualityDB = cms.bool(True),
    appendToDataLabel = cms.string(''),
    badStripCuts = cms.PSet(
        TEC = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        ),
        TIB = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        ),
        TID = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        ),
        TOB = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        )
    )
)


process.MuonDetLayerGeometryESProducer = cms.ESProducer("MuonDetLayerGeometryESProducer")


process.MuonNumberingInitialization = cms.ESProducer("MuonNumberingInitialization")


process.MuonTransientTrackingRecHitBuilderESProducer = cms.ESProducer("MuonTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('MuonRecHitBuilder')
)


process.OppositeAnalyticalPropagator = cms.ESProducer("AnalyticalPropagatorESProducer",
    ComponentName = cms.string('AnalyticalPropagatorOpposite'),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('oppositeToMomentum')
)


process.OppositeAnalyticalPropagatorParabolicMF = cms.ESProducer("AnalyticalPropagatorESProducer",
    ComponentName = cms.string('AnalyticalPropagatorParabolicMfOpposite'),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SimpleMagneticField = cms.string('ParabolicMf')
)


process.OppositeMaterialPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('PropagatorWithMaterialOpposite'),
    Mass = cms.double(0.105),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(False)
)


process.OppositeMaterialPropagatorParabolicMF = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('PropagatorWithMaterialParabolicMfOpposite'),
    Mass = cms.double(0.105),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SimpleMagneticField = cms.string('ParabolicMf'),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(False)
)


process.ParabolicParametrizedMagneticFieldProducer = cms.ESProducer("AutoParametrizedMagneticFieldProducer",
    label = cms.untracked.string('ParabolicMf'),
    valueOverride = cms.int32(-1),
    version = cms.string('Parabolic')
)


process.PixelCPEGenericESProducer = cms.ESProducer("PixelCPEGenericESProducer",
    Alpha2Order = cms.bool(True),
    ClusterProbComputationFlag = cms.int32(0),
    ComponentName = cms.string('PixelCPEGeneric'),
    DoCosmics = cms.bool(False),
    DoLorentz = cms.bool(False),
    EdgeClusterErrorX = cms.double(50),
    EdgeClusterErrorY = cms.double(85),
    IrradiationBiasCorrection = cms.bool(False),
    LoadTemplatesFromDB = cms.bool(True),
    MagneticFieldRecord = cms.ESInputTag("",""),
    NoTemplateErrorsWhenNoTrkAngles = cms.bool(True),
    SmallPitch = cms.bool(False),
    TruncatePixelCharge = cms.bool(False),
    Upgrade = cms.bool(True),
    UseErrorsFromTemplates = cms.bool(True),
    appendToDataLabel = cms.string(''),
    eff_charge_cut_highX = cms.double(1),
    eff_charge_cut_highY = cms.double(1),
    eff_charge_cut_lowX = cms.double(0),
    eff_charge_cut_lowY = cms.double(0),
    inflate_all_errors_no_trk_angle = cms.bool(False),
    inflate_errors = cms.bool(False),
    lAOffset = cms.double(0),
    lAWidthBPix = cms.double(0),
    lAWidthFPix = cms.double(0),
    size_cutX = cms.double(3),
    size_cutY = cms.double(3),
    useLAAlignmentOffsets = cms.bool(False),
    useLAWidthFromDB = cms.bool(True)
)


process.PropagatorWithMaterialForLoopers = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('PropagatorWithMaterialForLoopers'),
    Mass = cms.double(0.1396),
    MaxDPhi = cms.double(4.0),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1),
    useOldAnalPropLogic = cms.bool(False),
    useRungeKutta = cms.bool(False)
)


process.PropagatorWithMaterialForLoopersOpposite = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('PropagatorWithMaterialForLoopersOpposite'),
    Mass = cms.double(0.1396),
    MaxDPhi = cms.double(4.0),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1),
    useOldAnalPropLogic = cms.bool(False),
    useRungeKutta = cms.bool(False)
)


process.PropagatorWithMaterialForMTD = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('PropagatorWithMaterialForMTD'),
    Mass = cms.double(0.13957018),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('anyDirection'),
    ptMin = cms.double(0.1),
    useOldAnalPropLogic = cms.bool(False),
    useRungeKutta = cms.bool(False)
)


process.RK1DFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('RK1DFittingSmoother'),
    EstimateCut = cms.double(-1),
    Fitter = cms.string('RK1DFitter'),
    LogPixelProbabilityCut = cms.double(0),
    MaxFractionOutliers = cms.double(0.3),
    MaxNumberOfOutliers = cms.int32(3),
    MinDof = cms.int32(2),
    MinNumberOfHits = cms.int32(5),
    NoInvalidHitsBeginEnd = cms.bool(True),
    NoOutliersBeginEnd = cms.bool(False),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('RK1DSmoother'),
    appendToDataLabel = cms.string('')
)


process.RK1DTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('RK1DFitter'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFSwitching1DUpdator'),
    appendToDataLabel = cms.string(''),
    minHits = cms.int32(3)
)


process.RK1DTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('RK1DSmoother'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFSwitching1DUpdator'),
    appendToDataLabel = cms.string(''),
    errorRescaling = cms.double(100),
    minHits = cms.int32(3)
)


process.RKFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('RKFittingSmoother'),
    EstimateCut = cms.double(-1),
    Fitter = cms.string('RKFitter'),
    LogPixelProbabilityCut = cms.double(0),
    MaxFractionOutliers = cms.double(0.3),
    MaxNumberOfOutliers = cms.int32(3),
    MinDof = cms.int32(2),
    MinNumberOfHits = cms.int32(5),
    NoInvalidHitsBeginEnd = cms.bool(True),
    NoOutliersBeginEnd = cms.bool(False),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('RKSmoother'),
    appendToDataLabel = cms.string('')
)


process.RKOutliers1DFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('RKOutliers1DFittingSmoother'),
    EstimateCut = cms.double(20.0),
    Fitter = cms.string('RK1DFitter'),
    LogPixelProbabilityCut = cms.double(0),
    MaxFractionOutliers = cms.double(0.3),
    MaxNumberOfOutliers = cms.int32(3),
    MinDof = cms.int32(2),
    MinNumberOfHits = cms.int32(3),
    NoInvalidHitsBeginEnd = cms.bool(True),
    NoOutliersBeginEnd = cms.bool(False),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('RK1DSmoother'),
    appendToDataLabel = cms.string('')
)


process.RKTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('RKFitter'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    minHits = cms.int32(3)
)


process.RKTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('RKSmoother'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    errorRescaling = cms.double(100),
    minHits = cms.int32(3)
)


process.RPCConeBuilder = cms.ESProducer("RPCConeBuilder",
    towerBeg = cms.int32(0),
    towerEnd = cms.int32(16)
)


process.RPCGeometryESModule = cms.ESProducer("RPCGeometryESModule",
    compatibiltyWith11 = cms.untracked.bool(True),
    useDDD = cms.untracked.bool(True)
)


process.RungeKuttaTrackerPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('RungeKuttaTrackerPropagator'),
    Mass = cms.double(0.105),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(True)
)


process.RungeKuttaTrackerPropagatorOpposite = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('RungeKuttaTrackerPropagatorOpposite'),
    Mass = cms.double(0.105),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(True)
)


process.SiStripRecHitMatcherESProducer = cms.ESProducer("SiStripRecHitMatcherESProducer",
    ComponentName = cms.string('StandardMatcher'),
    NSigmaInside = cms.double(3.0),
    PreFilter = cms.bool(False)
)


process.SmartPropagator = cms.ESProducer("SmartPropagatorESProducer",
    ComponentName = cms.string('SmartPropagator'),
    Epsilon = cms.double(5.0),
    MuonPropagator = cms.string('SteppingHelixPropagatorAlong'),
    PropagationDirection = cms.string('alongMomentum'),
    TrackerPropagator = cms.string('PropagatorWithMaterial')
)


process.SmartPropagatorAny = cms.ESProducer("SmartPropagatorESProducer",
    ComponentName = cms.string('SmartPropagatorAny'),
    Epsilon = cms.double(5.0),
    MuonPropagator = cms.string('SteppingHelixPropagatorAny'),
    PropagationDirection = cms.string('alongMomentum'),
    TrackerPropagator = cms.string('PropagatorWithMaterial')
)


process.SmartPropagatorAnyOpposite = cms.ESProducer("SmartPropagatorESProducer",
    ComponentName = cms.string('SmartPropagatorAnyOpposite'),
    Epsilon = cms.double(5.0),
    MuonPropagator = cms.string('SteppingHelixPropagatorAny'),
    PropagationDirection = cms.string('oppositeToMomentum'),
    TrackerPropagator = cms.string('PropagatorWithMaterialOpposite')
)


process.SmartPropagatorAnyRK = cms.ESProducer("SmartPropagatorESProducer",
    ComponentName = cms.string('SmartPropagatorAnyRK'),
    Epsilon = cms.double(5.0),
    MuonPropagator = cms.string('SteppingHelixPropagatorAny'),
    PropagationDirection = cms.string('alongMomentum'),
    TrackerPropagator = cms.string('RungeKuttaTrackerPropagator')
)


process.SmartPropagatorAnyRKOpposite = cms.ESProducer("SmartPropagatorESProducer",
    ComponentName = cms.string('SmartPropagatorAnyRKOpposite'),
    Epsilon = cms.double(5.0),
    MuonPropagator = cms.string('SteppingHelixPropagatorAny'),
    PropagationDirection = cms.string('oppositeToMomentum'),
    TrackerPropagator = cms.string('RungeKuttaTrackerPropagatorOpposite')
)


process.SmartPropagatorOpposite = cms.ESProducer("SmartPropagatorESProducer",
    ComponentName = cms.string('SmartPropagatorOpposite'),
    Epsilon = cms.double(5.0),
    MuonPropagator = cms.string('SteppingHelixPropagatorOpposite'),
    PropagationDirection = cms.string('oppositeToMomentum'),
    TrackerPropagator = cms.string('PropagatorWithMaterialOpposite')
)


process.SmartPropagatorRK = cms.ESProducer("SmartPropagatorESProducer",
    ComponentName = cms.string('SmartPropagatorRK'),
    Epsilon = cms.double(5.0),
    MuonPropagator = cms.string('SteppingHelixPropagatorAlong'),
    PropagationDirection = cms.string('alongMomentum'),
    TrackerPropagator = cms.string('RungeKuttaTrackerPropagator')
)


process.SmartPropagatorRKOpposite = cms.ESProducer("SmartPropagatorESProducer",
    ComponentName = cms.string('SmartPropagatorRKOpposite'),
    Epsilon = cms.double(5.0),
    MuonPropagator = cms.string('SteppingHelixPropagatorOpposite'),
    PropagationDirection = cms.string('oppositeToMomentum'),
    TrackerPropagator = cms.string('RungeKuttaTrackerPropagatorOpposite')
)


process.SteppingHelixPropagatorAlong = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorAlong'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('alongMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False)
)


process.SteppingHelixPropagatorAlongNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorAlongNoError'),
    NoErrorPropagation = cms.bool(True),
    PropagationDirection = cms.string('alongMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False)
)


process.SteppingHelixPropagatorAny = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorAny'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('anyDirection'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False)
)


process.SteppingHelixPropagatorAnyNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorAnyNoError'),
    NoErrorPropagation = cms.bool(True),
    PropagationDirection = cms.string('anyDirection'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False)
)


process.SteppingHelixPropagatorL2Along = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorL2Along'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('alongMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(True)
)


process.SteppingHelixPropagatorL2AlongNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorL2AlongNoError'),
    NoErrorPropagation = cms.bool(True),
    PropagationDirection = cms.string('alongMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(True)
)


process.SteppingHelixPropagatorL2Any = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorL2Any'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('anyDirection'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(True)
)


process.SteppingHelixPropagatorL2AnyNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorL2AnyNoError'),
    NoErrorPropagation = cms.bool(True),
    PropagationDirection = cms.string('anyDirection'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(True)
)


process.SteppingHelixPropagatorL2Opposite = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorL2Opposite'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(True)
)


process.SteppingHelixPropagatorL2OppositeNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorL2OppositeNoError'),
    NoErrorPropagation = cms.bool(True),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(True)
)


process.SteppingHelixPropagatorOpposite = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorOpposite'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False)
)


process.SteppingHelixPropagatorOppositeNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorOppositeNoError'),
    NoErrorPropagation = cms.bool(True),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False)
)


process.StraightLinePropagator = cms.ESProducer("StraightLinePropagatorESProducer",
    ComponentName = cms.string('StraightLinePropagator'),
    PropagationDirection = cms.string('alongMomentum')
)


process.StripCPEESProducer = cms.ESProducer("StripCPEESProducer",
    ComponentName = cms.string('SimpleStripCPE'),
    ComponentType = cms.string('SimpleStripCPE'),
    parameters = cms.PSet(

    )
)


process.StripCPEfromTrackAngleESProducer = cms.ESProducer("StripCPEESProducer",
    ComponentName = cms.string('StripCPEfromTrackAngle'),
    ComponentType = cms.string('StripCPEfromTrackAngle'),
    parameters = cms.PSet(
        mLC_P0 = cms.double(-0.326),
        mLC_P1 = cms.double(0.618),
        mLC_P2 = cms.double(0.3),
        mTEC_P0 = cms.double(-1.885),
        mTEC_P1 = cms.double(0.471),
        mTIB_P0 = cms.double(-0.742),
        mTIB_P1 = cms.double(0.202),
        mTID_P0 = cms.double(-1.427),
        mTID_P1 = cms.double(0.433),
        mTOB_P0 = cms.double(-1.026),
        mTOB_P1 = cms.double(0.253),
        maxChgOneMIP = cms.double(6000.0),
        useLegacyError = cms.bool(False)
    )
)


process.TTClusterAlgorithm_neighbor_Phase2TrackerDigi_ = cms.ESProducer("TTClusterAlgorithm_neighbor_Phase2TrackerDigi_")


process.TTClusterAlgorithm_official_Phase2TrackerDigi_ = cms.ESProducer("TTClusterAlgorithm_official_Phase2TrackerDigi_",
    WidthCut = cms.int32(4)
)


process.TTRHBuilderAngleAndTemplate = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('WithAngleAndTemplate'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    Matcher = cms.string('StandardMatcher'),
    Phase2StripCPE = cms.string('Phase2StripCPE'),
    PixelCPE = cms.string('PixelCPETemplateReco'),
    StripCPE = cms.string('StripCPEfromTrackAngle')
)


process.TTStubAlgorithm_cbc3_Phase2TrackerDigi_ = cms.ESProducer("TTStubAlgorithm_cbc3_Phase2TrackerDigi_",
    zMatching2S = cms.bool(True),
    zMatchingPS = cms.bool(True)
)


process.TTStubAlgorithm_official_Phase2TrackerDigi_ = cms.ESProducer("TTStubAlgorithm_official_Phase2TrackerDigi_",
    BarrelCut = cms.vdouble(
        0, 2, 2.5, 3.5, 4.5, 
        5.5, 7
    ),
    EndcapCutSet = cms.VPSet(
        cms.PSet(
            EndcapCut = cms.vdouble(0)
        ), 
        cms.PSet(
            EndcapCut = cms.vdouble(
                0, 1, 2.5, 2.5, 3, 
                2.5, 3, 3.5, 4, 4, 
                4.5, 3.5, 4, 4.5, 5, 
                5.5
            )
        ), 
        cms.PSet(
            EndcapCut = cms.vdouble(
                0, 0.5, 2.5, 2.5, 3, 
                2.5, 3, 3, 3.5, 3.5, 
                4, 3.5, 3.5, 4, 4.5, 
                5
            )
        ), 
        cms.PSet(
            EndcapCut = cms.vdouble(
                0, 1, 3, 3, 2.5, 
                3.5, 3.5, 3.5, 4, 3.5, 
                3.5, 4, 4.5
            )
        ), 
        cms.PSet(
            EndcapCut = cms.vdouble(
                0, 1, 2.5, 3, 2.5, 
                3.5, 3, 3, 3.5, 3.5, 
                3.5, 4, 4
            )
        ), 
        cms.PSet(
            EndcapCut = cms.vdouble(
                0, 0.5, 1.5, 3, 2.5, 
                3.5, 3, 3, 3.5, 4, 
                3.5, 4, 3.5
            )
        )
    ),
    NTiltedRings = cms.vdouble(
        0.0, 12.0, 12.0, 12.0, 0.0, 
        0.0, 0.0
    ),
    TiltedBarrelCutSet = cms.VPSet(
        cms.PSet(
            TiltedCut = cms.vdouble(0)
        ), 
        cms.PSet(
            TiltedCut = cms.vdouble(
                0, 3, 3, 2.5, 3, 
                3, 2.5, 2.5, 2, 1.5, 
                1.5, 1, 1
            )
        ), 
        cms.PSet(
            TiltedCut = cms.vdouble(
                0, 3.5, 3, 3, 3, 
                3, 2.5, 2.5, 3, 3, 
                2.5, 2.5, 2.5
            )
        ), 
        cms.PSet(
            TiltedCut = cms.vdouble(
                0, 4, 4, 4, 3.5, 
                3.5, 3.5, 3.5, 3, 3, 
                3, 3, 3
            )
        )
    ),
    zMatching2S = cms.bool(True),
    zMatchingPS = cms.bool(True)
)


process.TrackTriggerSetup = cms.ESProducer("trackerDTC::ProducerES",
    DTC = cms.PSet(
        DepthMemory = cms.int32(64),
        NumATCASlots = cms.int32(12),
        NumDTCsPerRegion = cms.int32(24),
        NumModulesPerDTC = cms.int32(72),
        NumOverlappingRegions = cms.int32(2),
        NumRegions = cms.int32(9),
        NumRoutingBlocks = cms.int32(2),
        OffsetDetIdDSV = cms.int32(1),
        OffsetDetIdTP = cms.int32(-1),
        OffsetLayerDisks = cms.int32(10),
        OffsetLayerId = cms.int32(1),
        WidthQoverPt = cms.int32(9),
        WidthRowLUT = cms.int32(4)
    ),
    DuplicateRemoval = cms.PSet(
        DepthMemory = cms.int32(16),
        WidthCot = cms.int32(16),
        WidthPhi0 = cms.int32(12),
        WidthQoverPt = cms.int32(15),
        WidthZ0 = cms.int32(12)
    ),
    Firmware = cms.PSet(
        BField = cms.double(3.81120228767),
        BFieldError = cms.double(1e-06),
        FreqBE = cms.double(360.0),
        FreqLHC = cms.double(40.0),
        HalfLength = cms.double(270.0),
        InnerRadius = cms.double(21.8),
        MaxPitch = cms.double(0.01),
        NumFramesInfra = cms.int32(6),
        OuterRadius = cms.double(112.7),
        SpeedOfLight = cms.double(2.99792458),
        TMP_FE = cms.int32(8),
        TMP_TFP = cms.int32(18)
    ),
    FrontEnd = cms.PSet(
        BaseBend = cms.double(0.25),
        BaseCol = cms.double(1.0),
        BaseRow = cms.double(0.5),
        BaseWindowSize = cms.double(0.5),
        BendCut = cms.double(1.3125),
        WidthBend = cms.int32(6),
        WidthCol = cms.int32(5),
        WidthRow = cms.int32(11)
    ),
    GeometricProcessor = cms.PSet(
        BoundariesEta = cms.vdouble(
            -2.4, -2.08, -1.68, -1.26, -0.9, 
            -0.62, -0.41, -0.2, 0.0, 0.2, 
            0.41, 0.62, 0.9, 1.26, 1.68, 
            2.08, 2.4
        ),
        ChosenRofZ = cms.double(50.0),
        DepthMemory = cms.int32(64),
        NumSectorsPhi = cms.int32(2),
        RangeChiZ = cms.double(90.0)
    ),
    HoughTransform = cms.PSet(
        DepthMemory = cms.int32(32),
        MinLayers = cms.int32(5),
        NumBinsPhiT = cms.int32(32),
        NumBinsQoverPt = cms.int32(16)
    ),
    Hybrid = cms.PSet(
        ChosenRofPhi = cms.double(55.0),
        Disk2SRsSet = cms.VPSet(
            cms.PSet(
                Disk2SRs = cms.vdouble(
                    66.4391, 71.4391, 76.275, 81.275, 82.955, 
                    87.955, 93.815, 98.815, 99.816, 104.816
                )
            ), 
            cms.PSet(
                Disk2SRs = cms.vdouble(
                    66.4391, 71.4391, 76.275, 81.275, 82.955, 
                    87.955, 93.815, 98.815, 99.816, 104.816
                )
            ), 
            cms.PSet(
                Disk2SRs = cms.vdouble(
                    63.9903, 68.9903, 74.275, 79.275, 81.9562, 
                    86.9562, 92.492, 97.492, 99.816, 104.816
                )
            ), 
            cms.PSet(
                Disk2SRs = cms.vdouble(
                    63.9903, 68.9903, 74.275, 79.275, 81.9562, 
                    86.9562, 92.492, 97.492, 99.816, 104.816
                )
            ), 
            cms.PSet(
                Disk2SRs = cms.vdouble(
                    63.9903, 68.9903, 74.275, 79.275, 81.9562, 
                    86.9562, 92.492, 97.492, 99.816, 104.816
                )
            )
        ),
        DiskZs = cms.vdouble(131.1914, 154.9805, 185.332, 221.6016, 265.0195),
        LayerRs = cms.vdouble(
            24.9316, 37.1777, 52.2656, 68.7598, 86.0156, 
            108.3105
        ),
        MaxEta = cms.double(2.5),
        MinPt = cms.double(2.0),
        NumLayers = cms.int32(4),
        NumRingsPS = cms.vint32(11, 11, 8, 8, 8),
        RangesAlpha = cms.vdouble(0.0, 0.0, 0.0, 1024.0),
        RangesR = cms.vdouble(7.5, 7.5, 120.0, 0.0),
        RangesZ = cms.vdouble(240.0, 240.0, 7.5, 7.5),
        WidthsAlpha = cms.vint32(0, 0, 0, 4),
        WidthsBend = cms.vint32(3, 4, 3, 4),
        WidthsPhi = cms.vint32(14, 17, 14, 14),
        WidthsR = cms.vint32(7, 7, 12, 7),
        WidthsZ = cms.vint32(12, 8, 7, 7)
    ),
    KalmanFilter = cms.PSet(
        BaseShiftC00 = cms.int32(5),
        BaseShiftC01 = cms.int32(-3),
        BaseShiftC11 = cms.int32(-7),
        BaseShiftC22 = cms.int32(-3),
        BaseShiftC23 = cms.int32(-5),
        BaseShiftC33 = cms.int32(-3),
        BaseShiftChi2 = cms.int32(-5),
        BaseShiftChi20 = cms.int32(-5),
        BaseShiftChi21 = cms.int32(-5),
        BaseShiftInvR00 = cms.int32(-19),
        BaseShiftInvR11 = cms.int32(-21),
        BaseShiftK00 = cms.int32(-9),
        BaseShiftK10 = cms.int32(-15),
        BaseShiftK21 = cms.int32(-13),
        BaseShiftK31 = cms.int32(-14),
        BaseShiftR00 = cms.int32(-2),
        BaseShiftR11 = cms.int32(3),
        BaseShiftS00 = cms.int32(-1),
        BaseShiftS01 = cms.int32(-7),
        BaseShiftS12 = cms.int32(-3),
        BaseShiftS13 = cms.int32(-3),
        BaseShiftr0 = cms.int32(-3),
        BaseShiftr02 = cms.int32(-5),
        BaseShiftr1 = cms.int32(2),
        BaseShiftr12 = cms.int32(5),
        BaseShiftv0 = cms.int32(-2),
        BaseShiftv1 = cms.int32(3),
        MaxLayers = cms.int32(4),
        MaxSkippedLayers = cms.int32(2),
        MaxStubsPerLayer = cms.int32(4),
        MinLayers = cms.int32(4),
        NumTracks = cms.int32(16),
        WidthLutInvPhi = cms.int32(10),
        WidthLutInvZ = cms.int32(10)
    ),
    MiniHoughTransform = cms.PSet(
        MinLayers = cms.int32(5),
        NumBinsPhiT = cms.int32(2),
        NumBinsQoverPt = cms.int32(2),
        NumDLB = cms.int32(2)
    ),
    ProcessHistory = cms.PSet(
        GeometryConfiguration = cms.string('XMLIdealGeometryESSource@'),
        TTStubAlgorithm = cms.string('TTStubAlgorithm_official_Phase2TrackerDigi_@')
    ),
    SeedFilter = cms.PSet(
        BaseDiffZ = cms.int32(4),
        MinLayers = cms.int32(4),
        PowerBaseCot = cms.int32(-6)
    ),
    SupportedGeometry = cms.PSet(
        XMLFile = cms.string('tracker.xml'),
        XMLLabel = cms.string('geomXMLFiles'),
        XMLPath = cms.string('Geometry/TrackerCommonData/data/PhaseII/'),
        XMLVersions = cms.vstring(
            'TiltedTracker613', 
            'TiltedTracker613_MB_2019_04'
        )
    ),
    TMTT = cms.PSet(
        ChosenRofPhi = cms.double(67.24),
        MaxEta = cms.double(2.4),
        MinPt = cms.double(3.0),
        NumLayers = cms.int32(7),
        WidthPhi = cms.int32(14),
        WidthR = cms.int32(12),
        WidthZ = cms.int32(14)
    ),
    TrackFinding = cms.PSet(
        BeamWindowZ = cms.double(15.0),
        MatchedLayers = cms.int32(4),
        MatchedLayersPS = cms.int32(0),
        UnMatchedStubs = cms.int32(1),
        UnMatchedStubsPS = cms.int32(0)
    ),
    TrackingParticle = cms.PSet(
        MaxD0 = cms.double(5.0),
        MaxEta = cms.double(2.4),
        MaxVertR = cms.double(1.0),
        MaxVertZ = cms.double(30.0),
        MinLayers = cms.int32(4),
        MinLayersPS = cms.int32(0)
    )
)


process.TrackerRecoGeometryESProducer = cms.ESProducer("TrackerRecoGeometryESProducer")


process.TrajectoryCleanerBySharedHitsForConversions = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('TrajectoryCleanerBySharedHitsForConversions'),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(20.0),
    ValidHitBonus = cms.double(5.0),
    allowSharedFirstHit = cms.bool(True),
    fractionShared = cms.double(0.5)
)


process.TransientTrackBuilderESProducer = cms.ESProducer("TransientTrackBuilderESProducer",
    ComponentName = cms.string('TransientTrackBuilder')
)


process.VolumeBasedMagneticFieldESProducer = cms.ESProducer("VolumeBasedMagneticFieldESProducerFromDB",
    debugBuilder = cms.untracked.bool(False),
    label = cms.untracked.string(''),
    valueOverride = cms.int32(-1)
)


process.XMLIdealGeometryESSource_CTPPS = cms.ESProducer("XMLIdealGeometryESProducer",
    appendToDataLabel = cms.string('XMLIdealGeometryESSource_CTPPS'),
    label = cms.string('CTPPS'),
    rootDDName = cms.string('cms:CMSE')
)


process.ZdcHardcodeGeometryEP = cms.ESProducer("ZdcHardcodeGeometryEP")


process.alongMomElePropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('alongMomElePropagator'),
    Mass = cms.double(0.000511),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(False)
)


process.beamHaloNavigationSchoolESProducer = cms.ESProducer("NavigationSchoolESProducer",
    ComponentName = cms.string('BeamHaloNavigationSchool'),
    SimpleMagneticField = cms.string('')
)


process.bwdAnalyticalPropagator = cms.ESProducer("AnalyticalPropagatorESProducer",
    ComponentName = cms.string('bwdAnalyticalPropagator'),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('oppositeToMomentum')
)


process.bwdElectronPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('bwdElectronPropagator'),
    Mass = cms.double(0.000511),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(False)
)


process.bwdGsfElectronPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('bwdGsfElectronPropagator'),
    Mass = cms.double(0.000511),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(False)
)


process.caloConfig = cms.ESProducer("L1TCaloConfigESProducer",
    fwVersionLayer2 = cms.uint32(3),
    l1Epoch = cms.string('Stage1')
)


process.caloDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('CaloDetIdAssociator'),
    etaBinSize = cms.double(0.087),
    nEta = cms.int32(70),
    nPhi = cms.int32(72)
)


process.caloSimulationParameters = cms.ESProducer("CaloSimParametersESModule",
    appendToDataLabel = cms.string(''),
    fromDD4Hep = cms.bool(False)
)


process.candidateBoostedDoubleSecondaryVertexAK8Computer = cms.ESProducer("CandidateBoostedDoubleSecondaryVertexESProducer",
    useAdaBoost = cms.bool(False),
    useCondDB = cms.bool(False),
    useGBRForest = cms.bool(True),
    weightFile = cms.FileInPath('RecoBTag/SecondaryVertex/data/BoostedDoubleSV_AK8_BDT_v4.weights.xml.gz')
)


process.candidateBoostedDoubleSecondaryVertexCA15Computer = cms.ESProducer("CandidateBoostedDoubleSecondaryVertexESProducer",
    useAdaBoost = cms.bool(False),
    useCondDB = cms.bool(False),
    useGBRForest = cms.bool(True),
    weightFile = cms.FileInPath('RecoBTag/SecondaryVertex/data/BoostedDoubleSV_CA15_BDT_v3.weights.xml.gz')
)


process.candidateChargeBTagComputer = cms.ESProducer("CandidateChargeBTagESProducer",
    gbrForestLabel = cms.string(''),
    jetChargeExp = cms.double(0.8),
    svChargeExp = cms.double(0.5),
    useAdaBoost = cms.bool(True),
    useCondDB = cms.bool(False),
    weightFile = cms.FileInPath('RecoBTag/Combined/data/ChargeBTag_4sep_2016.weights.xml.gz')
)


process.candidateCombinedMVAV2Computer = cms.ESProducer("CombinedMVAV2JetTagESProducer",
    gbrForestLabel = cms.string('btag_CombinedMVAv2_BDT'),
    jetTagComputers = cms.vstring(
        'candidateJetProbabilityComputer', 
        'candidateJetBProbabilityComputer', 
        'candidateCombinedSecondaryVertexV2Computer', 
        'softPFMuonComputer', 
        'softPFElectronComputer'
    ),
    mvaName = cms.string('bdt'),
    spectators = cms.vstring(),
    useAdaBoost = cms.bool(False),
    useCondDB = cms.bool(True),
    useGBRForest = cms.bool(True),
    variables = cms.vstring(
        'Jet_CSV', 
        'Jet_CSVIVF', 
        'Jet_JP', 
        'Jet_JBP', 
        'Jet_SoftMu', 
        'Jet_SoftEl'
    ),
    weightFile = cms.FileInPath('RecoBTag/Combined/data/CombinedMVAV2_13_07_2015.weights.xml.gz')
)


process.candidateCombinedSecondaryVertexSoftLeptonComputer = cms.ESProducer("CandidateCombinedSecondaryVertexSoftLeptonESProducer",
    SoftLeptonFlip = cms.bool(False),
    calibrationRecords = cms.vstring(
        'CombinedSVRecoVertexNoSoftLepton', 
        'CombinedSVPseudoVertexNoSoftLepton', 
        'CombinedSVNoVertexNoSoftLepton', 
        'CombinedSVRecoVertexSoftMuon', 
        'CombinedSVPseudoVertexSoftMuon', 
        'CombinedSVNoVertexSoftMuon', 
        'CombinedSVRecoVertexSoftElectron', 
        'CombinedSVPseudoVertexSoftElectron', 
        'CombinedSVNoVertexSoftElectron'
    ),
    categoryVariableName = cms.string('vertexLeptonCategory'),
    charmCut = cms.double(1.5),
    correctVertexMass = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    pseudoMultiplicityMin = cms.uint32(2),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    recordLabel = cms.string(''),
    trackFlip = cms.bool(False),
    trackMultiplicityMin = cms.uint32(2),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useCategories = cms.bool(True),
    useTrackWeights = cms.bool(True),
    vertexFlip = cms.bool(False)
)


process.candidateCombinedSecondaryVertexSoftLeptonCvsLComputer = cms.ESProducer("CandidateCombinedSecondaryVertexSoftLeptonCvsLESProducer",
    SoftLeptonFlip = cms.bool(False),
    calibrationRecords = cms.vstring(
        'CombinedSVRecoVertexNoSoftLeptonCvsL', 
        'CombinedSVPseudoVertexNoSoftLeptonCvsL', 
        'CombinedSVNoVertexNoSoftLeptonCvsL', 
        'CombinedSVRecoVertexSoftMuonCvsL', 
        'CombinedSVPseudoVertexSoftMuonCvsL', 
        'CombinedSVNoVertexSoftMuonCvsL', 
        'CombinedSVRecoVertexSoftElectronCvsL', 
        'CombinedSVPseudoVertexSoftElectronCvsL', 
        'CombinedSVNoVertexSoftElectronCvsL'
    ),
    categoryVariableName = cms.string('vertexLeptonCategory'),
    charmCut = cms.double(1.5),
    correctVertexMass = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    pseudoMultiplicityMin = cms.uint32(2),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    recordLabel = cms.string(''),
    trackFlip = cms.bool(False),
    trackMultiplicityMin = cms.uint32(2),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useCategories = cms.bool(True),
    useTrackWeights = cms.bool(True),
    vertexFlip = cms.bool(False)
)


process.candidateCombinedSecondaryVertexV2Computer = cms.ESProducer("CandidateCombinedSecondaryVertexESProducer",
    SoftLeptonFlip = cms.bool(False),
    calibrationRecords = cms.vstring(
        'CombinedSVIVFV2RecoVertex', 
        'CombinedSVIVFV2PseudoVertex', 
        'CombinedSVIVFV2NoVertex'
    ),
    categoryVariableName = cms.string('vertexCategory'),
    charmCut = cms.double(1.5),
    correctVertexMass = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    pseudoMultiplicityMin = cms.uint32(2),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    recordLabel = cms.string(''),
    trackFlip = cms.bool(False),
    trackMultiplicityMin = cms.uint32(2),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useCategories = cms.bool(True),
    useTrackWeights = cms.bool(True),
    vertexFlip = cms.bool(False)
)


process.candidateGhostTrackComputer = cms.ESProducer("CandidateGhostTrackESProducer",
    calibrationRecords = cms.vstring(
        'GhostTrackRecoVertex', 
        'GhostTrackPseudoVertex', 
        'GhostTrackNoVertex'
    ),
    categoryVariableName = cms.string('vertexCategory'),
    charmCut = cms.double(1.5),
    minimumTrackWeight = cms.double(0.5),
    recordLabel = cms.string(''),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useCategories = cms.bool(True)
)


process.candidateJetBProbabilityComputer = cms.ESProducer("CandidateJetBProbabilityESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumProbability = cms.double(0.005),
    numberOfBTracks = cms.uint32(4),
    trackIpSign = cms.int32(1),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False)
)


process.candidateJetProbabilityComputer = cms.ESProducer("CandidateJetProbabilityESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(0.3),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumProbability = cms.double(0.005),
    trackIpSign = cms.int32(1),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False)
)


process.candidateNegativeCombinedMVAV2Computer = cms.ESProducer("CombinedMVAV2JetTagESProducer",
    gbrForestLabel = cms.string('btag_CombinedMVAv2_BDT'),
    jetTagComputers = cms.vstring(
        'candidateNegativeOnlyJetProbabilityComputer', 
        'candidateNegativeOnlyJetBProbabilityComputer', 
        'candidateNegativeCombinedSecondaryVertexV2Computer', 
        'negativeSoftPFMuonComputer', 
        'negativeSoftPFElectronComputer'
    ),
    mvaName = cms.string('bdt'),
    spectators = cms.vstring(),
    useAdaBoost = cms.bool(False),
    useCondDB = cms.bool(True),
    useGBRForest = cms.bool(True),
    variables = cms.vstring(
        'Jet_CSV', 
        'Jet_CSVIVF', 
        'Jet_JP', 
        'Jet_JBP', 
        'Jet_SoftMu', 
        'Jet_SoftEl'
    ),
    weightFile = cms.FileInPath('RecoBTag/Combined/data/CombinedMVAV2_13_07_2015.weights.xml.gz')
)


process.candidateNegativeCombinedSecondaryVertexV2Computer = cms.ESProducer("CandidateCombinedSecondaryVertexESProducer",
    SoftLeptonFlip = cms.bool(False),
    calibrationRecords = cms.vstring(
        'CombinedSVIVFV2RecoVertex', 
        'CombinedSVIVFV2PseudoVertex', 
        'CombinedSVIVFV2NoVertex'
    ),
    categoryVariableName = cms.string('vertexCategory'),
    charmCut = cms.double(1.5),
    correctVertexMass = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    pseudoMultiplicityMin = cms.uint32(2),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    recordLabel = cms.string(''),
    trackFlip = cms.bool(True),
    trackMultiplicityMin = cms.uint32(2),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(-2.0),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useCategories = cms.bool(True),
    useTrackWeights = cms.bool(True),
    vertexFlip = cms.bool(True)
)


process.candidateNegativeOnlyJetBProbabilityComputer = cms.ESProducer("CandidateJetBProbabilityESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumProbability = cms.double(0.005),
    numberOfBTracks = cms.uint32(4),
    trackIpSign = cms.int32(-1),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False)
)


process.candidateNegativeOnlyJetProbabilityComputer = cms.ESProducer("CandidateJetProbabilityESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(0.3),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumProbability = cms.double(0.005),
    trackIpSign = cms.int32(-1),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False)
)


process.candidateNegativeTrackCounting3D2ndComputer = cms.ESProducer("CandidateNegativeTrackCountingESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumImpactParameter = cms.double(-1),
    nthTrack = cms.int32(2),
    trackQualityClass = cms.string('any'),
    useSignedImpactParameterSig = cms.bool(True),
    useVariableJTA = cms.bool(False)
)


process.candidateNegativeTrackCounting3D3rdComputer = cms.ESProducer("CandidateNegativeTrackCountingESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumImpactParameter = cms.double(-1),
    nthTrack = cms.int32(3),
    trackQualityClass = cms.string('any'),
    useSignedImpactParameterSig = cms.bool(True),
    useVariableJTA = cms.bool(False)
)


process.candidatePositiveCombinedMVAV2Computer = cms.ESProducer("CombinedMVAV2JetTagESProducer",
    gbrForestLabel = cms.string('btag_CombinedMVAv2_BDT'),
    jetTagComputers = cms.vstring(
        'candidatePositiveOnlyJetProbabilityComputer', 
        'candidatePositiveOnlyJetBProbabilityComputer', 
        'candidatePositiveCombinedSecondaryVertexV2Computer', 
        'negativeSoftPFMuonComputer', 
        'negativeSoftPFElectronComputer'
    ),
    mvaName = cms.string('bdt'),
    spectators = cms.vstring(),
    useAdaBoost = cms.bool(False),
    useCondDB = cms.bool(True),
    useGBRForest = cms.bool(True),
    variables = cms.vstring(
        'Jet_CSV', 
        'Jet_CSVIVF', 
        'Jet_JP', 
        'Jet_JBP', 
        'Jet_SoftMu', 
        'Jet_SoftEl'
    ),
    weightFile = cms.FileInPath('RecoBTag/Combined/data/CombinedMVAV2_13_07_2015.weights.xml.gz')
)


process.candidatePositiveCombinedSecondaryVertexV2Computer = cms.ESProducer("CandidateCombinedSecondaryVertexESProducer",
    SoftLeptonFlip = cms.bool(False),
    calibrationRecords = cms.vstring(
        'CombinedSVIVFV2RecoVertex', 
        'CombinedSVIVFV2PseudoVertex', 
        'CombinedSVIVFV2NoVertex'
    ),
    categoryVariableName = cms.string('vertexCategory'),
    charmCut = cms.double(1.5),
    correctVertexMass = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    pseudoMultiplicityMin = cms.uint32(2),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    recordLabel = cms.string(''),
    trackFlip = cms.bool(False),
    trackMultiplicityMin = cms.uint32(2),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useCategories = cms.bool(True),
    useTrackWeights = cms.bool(True),
    vertexFlip = cms.bool(False)
)


process.candidatePositiveOnlyJetBProbabilityComputer = cms.ESProducer("CandidateJetBProbabilityESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumProbability = cms.double(0.005),
    numberOfBTracks = cms.uint32(4),
    trackIpSign = cms.int32(1),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False)
)


process.candidatePositiveOnlyJetProbabilityComputer = cms.ESProducer("CandidateJetProbabilityESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(0.3),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumProbability = cms.double(0.005),
    trackIpSign = cms.int32(1),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False)
)


process.candidateSimpleSecondaryVertex2TrkComputer = cms.ESProducer("CandidateSimpleSecondaryVertexESProducer",
    minTracks = cms.uint32(2),
    unBoost = cms.bool(False),
    use3d = cms.bool(True),
    useSignificance = cms.bool(True)
)


process.candidateSimpleSecondaryVertex3TrkComputer = cms.ESProducer("CandidateSimpleSecondaryVertexESProducer",
    minTracks = cms.uint32(3),
    unBoost = cms.bool(False),
    use3d = cms.bool(True),
    useSignificance = cms.bool(True)
)


process.candidateTrackCounting3D2ndComputer = cms.ESProducer("CandidateTrackCountingESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumImpactParameter = cms.double(-1),
    nthTrack = cms.int32(2),
    trackQualityClass = cms.string('any'),
    useSignedImpactParameterSig = cms.bool(True),
    useVariableJTA = cms.bool(False)
)


process.candidateTrackCounting3D3rdComputer = cms.ESProducer("CandidateTrackCountingESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumImpactParameter = cms.double(-1),
    nthTrack = cms.int32(3),
    trackQualityClass = cms.string('any'),
    useSignedImpactParameterSig = cms.bool(True),
    useVariableJTA = cms.bool(False)
)


process.charmTagsComputerCvsB = cms.ESProducer("CharmTaggerESProducer",
    computer = cms.ESInputTag("combinedSecondaryVertexSoftLeptonComputer",""),
    defaultValueNoTracks = cms.bool(False),
    gbrForestLabel = cms.string(''),
    mvaName = cms.string('BDT'),
    slComputerCfg = cms.PSet(
        SoftLeptonFlip = cms.bool(False),
        calibrationRecords = cms.vstring(
            'CombinedSVRecoVertexNoSoftLepton', 
            'CombinedSVPseudoVertexNoSoftLepton', 
            'CombinedSVNoVertexNoSoftLepton', 
            'CombinedSVRecoVertexSoftMuon', 
            'CombinedSVPseudoVertexSoftMuon', 
            'CombinedSVNoVertexSoftMuon', 
            'CombinedSVRecoVertexSoftElectron', 
            'CombinedSVPseudoVertexSoftElectron', 
            'CombinedSVNoVertexSoftElectron'
        ),
        categoryVariableName = cms.string('vertexLeptonCategory'),
        charmCut = cms.double(1.5),
        correctVertexMass = cms.bool(False),
        minimumTrackWeight = cms.double(0.5),
        pseudoMultiplicityMin = cms.uint32(2),
        pseudoVertexV0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        recordLabel = cms.string(''),
        trackFlip = cms.bool(False),
        trackMultiplicityMin = cms.uint32(2),
        trackPairV0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.03)
        ),
        trackPseudoSelection = cms.PSet(
            a_dR = cms.double(-0.001053),
            a_pT = cms.double(0.005263),
            b_dR = cms.double(0.6263),
            b_pT = cms.double(0.3684),
            jetDeltaRMax = cms.double(0.3),
            maxDecayLen = cms.double(5),
            maxDistToAxis = cms.double(0.07),
            max_pT = cms.double(500),
            max_pT_dRcut = cms.double(0.1),
            max_pT_trackPTcut = cms.double(3),
            min_pT = cms.double(120),
            min_pT_dRcut = cms.double(0.5),
            normChi2Max = cms.double(99999.9),
            pixelHitsMin = cms.uint32(0),
            ptMin = cms.double(0.0),
            qualityClass = cms.string('any'),
            sip2dSigMax = cms.double(99999.9),
            sip2dSigMin = cms.double(2.0),
            sip2dValMax = cms.double(99999.9),
            sip2dValMin = cms.double(-99999.9),
            sip3dSigMax = cms.double(99999.9),
            sip3dSigMin = cms.double(-99999.9),
            sip3dValMax = cms.double(99999.9),
            sip3dValMin = cms.double(-99999.9),
            totalHitsMin = cms.uint32(0),
            useVariableJTA = cms.bool(False)
        ),
        trackSelection = cms.PSet(
            a_dR = cms.double(-0.001053),
            a_pT = cms.double(0.005263),
            b_dR = cms.double(0.6263),
            b_pT = cms.double(0.3684),
            jetDeltaRMax = cms.double(0.3),
            maxDecayLen = cms.double(5),
            maxDistToAxis = cms.double(0.07),
            max_pT = cms.double(500),
            max_pT_dRcut = cms.double(0.1),
            max_pT_trackPTcut = cms.double(3),
            min_pT = cms.double(120),
            min_pT_dRcut = cms.double(0.5),
            normChi2Max = cms.double(99999.9),
            pixelHitsMin = cms.uint32(0),
            ptMin = cms.double(0.0),
            qualityClass = cms.string('any'),
            sip2dSigMax = cms.double(99999.9),
            sip2dSigMin = cms.double(-99999.9),
            sip2dValMax = cms.double(99999.9),
            sip2dValMin = cms.double(-99999.9),
            sip3dSigMax = cms.double(99999.9),
            sip3dSigMin = cms.double(-99999.9),
            sip3dValMax = cms.double(99999.9),
            sip3dValMin = cms.double(-99999.9),
            totalHitsMin = cms.uint32(0),
            useVariableJTA = cms.bool(False)
        ),
        trackSort = cms.string('sip2dSig'),
        useCategories = cms.bool(True),
        useTrackWeights = cms.bool(True),
        vertexFlip = cms.bool(False)
    ),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"), cms.InputTag("pfInclusiveSecondaryVertexFinderCvsLTagInfos"), cms.InputTag("softPFMuonsTagInfos"), cms.InputTag("softPFElectronsTagInfos")),
    useAdaBoost = cms.bool(False),
    useCondDB = cms.bool(False),
    useGBRForest = cms.bool(True),
    variables = cms.VPSet(
        cms.PSet(
            default = cms.double(-1),
            name = cms.string('vertexLeptonCategory'),
            taggingVarName = cms.string('vertexLeptonCategory')
        ), 
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(0),
            name = cms.string('trackSip2dSig_0'),
            taggingVarName = cms.string('trackSip2dSig')
        ), 
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(1),
            name = cms.string('trackSip2dSig_1'),
            taggingVarName = cms.string('trackSip2dSig')
        ), 
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(0),
            name = cms.string('trackSip3dSig_0'),
            taggingVarName = cms.string('trackSip3dSig')
        ), 
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(1),
            name = cms.string('trackSip3dSig_1'),
            taggingVarName = cms.string('trackSip3dSig')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('trackPtRel_0'),
            taggingVarName = cms.string('trackPtRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('trackPtRel_1'),
            taggingVarName = cms.string('trackPtRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('trackPPar_0'),
            taggingVarName = cms.string('trackPPar')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('trackPPar_1'),
            taggingVarName = cms.string('trackPPar')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('trackEtaRel_0'),
            taggingVarName = cms.string('trackEtaRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('trackEtaRel_1'),
            taggingVarName = cms.string('trackEtaRel')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackDeltaR_0'),
            taggingVarName = cms.string('trackDeltaR')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackDeltaR_1'),
            taggingVarName = cms.string('trackDeltaR')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackPtRatio_0'),
            taggingVarName = cms.string('trackPtRatio')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackPtRatio_1'),
            taggingVarName = cms.string('trackPtRatio')
        ), 
        cms.PSet(
            default = cms.double(1.1),
            idx = cms.int32(0),
            name = cms.string('trackPParRatio_0'),
            taggingVarName = cms.string('trackPParRatio')
        ), 
        cms.PSet(
            default = cms.double(1.1),
            idx = cms.int32(1),
            name = cms.string('trackPParRatio_1'),
            taggingVarName = cms.string('trackPParRatio')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackJetDist_0'),
            taggingVarName = cms.string('trackJetDist')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackJetDist_1'),
            taggingVarName = cms.string('trackJetDist')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackDecayLenVal_0'),
            taggingVarName = cms.string('trackDecayLenVal')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackDecayLenVal_1'),
            taggingVarName = cms.string('trackDecayLenVal')
        ), 
        cms.PSet(
            default = cms.double(0),
            name = cms.string('jetNSecondaryVertices'),
            taggingVarName = cms.string('jetNSecondaryVertices')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            name = cms.string('jetNTracks'),
            taggingVarName = cms.string('jetNTracks')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            name = cms.string('trackSumJetEtRatio'),
            taggingVarName = cms.string('trackSumJetEtRatio')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            name = cms.string('trackSumJetDeltaR'),
            taggingVarName = cms.string('trackSumJetDeltaR')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('vertexMass_0'),
            taggingVarName = cms.string('vertexMass')
        ), 
        cms.PSet(
            default = cms.double(-10),
            idx = cms.int32(0),
            name = cms.string('vertexEnergyRatio_0'),
            taggingVarName = cms.string('vertexEnergyRatio')
        ), 
        cms.PSet(
            default = cms.double(-999),
            idx = cms.int32(0),
            name = cms.string('trackSip2dSigAboveCharm_0'),
            taggingVarName = cms.string('trackSip2dSigAboveCharm')
        ), 
        cms.PSet(
            default = cms.double(-999),
            idx = cms.int32(0),
            name = cms.string('trackSip3dSigAboveCharm_0'),
            taggingVarName = cms.string('trackSip3dSigAboveCharm')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('flightDistance2dSig_0'),
            taggingVarName = cms.string('flightDistance2dSig')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('flightDistance3dSig_0'),
            taggingVarName = cms.string('flightDistance3dSig')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('vertexJetDeltaR_0'),
            taggingVarName = cms.string('vertexJetDeltaR')
        ), 
        cms.PSet(
            default = cms.double(0),
            idx = cms.int32(0),
            name = cms.string('vertexNTracks_0'),
            taggingVarName = cms.string('vertexNTracks')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('massVertexEnergyFraction_0'),
            taggingVarName = cms.string('massVertexEnergyFraction')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('vertexBoostOverSqrtJetPt_0'),
            taggingVarName = cms.string('vertexBoostOverSqrtJetPt')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonPtRel_0'),
            taggingVarName = cms.string('leptonPtRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonPtRel_1'),
            taggingVarName = cms.string('leptonPtRel')
        ), 
        cms.PSet(
            default = cms.double(-10000),
            idx = cms.int32(0),
            name = cms.string('leptonSip3d_0'),
            taggingVarName = cms.string('leptonSip3d')
        ), 
        cms.PSet(
            default = cms.double(-10000),
            idx = cms.int32(1),
            name = cms.string('leptonSip3d_1'),
            taggingVarName = cms.string('leptonSip3d')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonDeltaR_0'),
            taggingVarName = cms.string('leptonDeltaR')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonDeltaR_1'),
            taggingVarName = cms.string('leptonDeltaR')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonRatioRel_0'),
            taggingVarName = cms.string('leptonRatioRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonRatioRel_1'),
            taggingVarName = cms.string('leptonRatioRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonEtaRel_0'),
            taggingVarName = cms.string('leptonEtaRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonEtaRel_1'),
            taggingVarName = cms.string('leptonEtaRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonRatio_0'),
            taggingVarName = cms.string('leptonRatio')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonRatio_1'),
            taggingVarName = cms.string('leptonRatio')
        )
    ),
    weightFile = cms.FileInPath('RecoBTag/CTagging/data/c_vs_b_sklearn.weight.xml')
)


process.charmTagsComputerCvsL = cms.ESProducer("CharmTaggerESProducer",
    computer = cms.ESInputTag("combinedSecondaryVertexSoftLeptonComputer",""),
    defaultValueNoTracks = cms.bool(False),
    gbrForestLabel = cms.string(''),
    mvaName = cms.string('BDT'),
    slComputerCfg = cms.PSet(
        SoftLeptonFlip = cms.bool(False),
        calibrationRecords = cms.vstring(
            'CombinedSVRecoVertexNoSoftLepton', 
            'CombinedSVPseudoVertexNoSoftLepton', 
            'CombinedSVNoVertexNoSoftLepton', 
            'CombinedSVRecoVertexSoftMuon', 
            'CombinedSVPseudoVertexSoftMuon', 
            'CombinedSVNoVertexSoftMuon', 
            'CombinedSVRecoVertexSoftElectron', 
            'CombinedSVPseudoVertexSoftElectron', 
            'CombinedSVNoVertexSoftElectron'
        ),
        categoryVariableName = cms.string('vertexLeptonCategory'),
        charmCut = cms.double(1.5),
        correctVertexMass = cms.bool(False),
        minimumTrackWeight = cms.double(0.5),
        pseudoMultiplicityMin = cms.uint32(2),
        pseudoVertexV0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        recordLabel = cms.string(''),
        trackFlip = cms.bool(False),
        trackMultiplicityMin = cms.uint32(2),
        trackPairV0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.03)
        ),
        trackPseudoSelection = cms.PSet(
            a_dR = cms.double(-0.001053),
            a_pT = cms.double(0.005263),
            b_dR = cms.double(0.6263),
            b_pT = cms.double(0.3684),
            jetDeltaRMax = cms.double(0.3),
            maxDecayLen = cms.double(5),
            maxDistToAxis = cms.double(0.07),
            max_pT = cms.double(500),
            max_pT_dRcut = cms.double(0.1),
            max_pT_trackPTcut = cms.double(3),
            min_pT = cms.double(120),
            min_pT_dRcut = cms.double(0.5),
            normChi2Max = cms.double(99999.9),
            pixelHitsMin = cms.uint32(0),
            ptMin = cms.double(0.0),
            qualityClass = cms.string('any'),
            sip2dSigMax = cms.double(99999.9),
            sip2dSigMin = cms.double(2.0),
            sip2dValMax = cms.double(99999.9),
            sip2dValMin = cms.double(-99999.9),
            sip3dSigMax = cms.double(99999.9),
            sip3dSigMin = cms.double(-99999.9),
            sip3dValMax = cms.double(99999.9),
            sip3dValMin = cms.double(-99999.9),
            totalHitsMin = cms.uint32(0),
            useVariableJTA = cms.bool(False)
        ),
        trackSelection = cms.PSet(
            a_dR = cms.double(-0.001053),
            a_pT = cms.double(0.005263),
            b_dR = cms.double(0.6263),
            b_pT = cms.double(0.3684),
            jetDeltaRMax = cms.double(0.3),
            maxDecayLen = cms.double(5),
            maxDistToAxis = cms.double(0.07),
            max_pT = cms.double(500),
            max_pT_dRcut = cms.double(0.1),
            max_pT_trackPTcut = cms.double(3),
            min_pT = cms.double(120),
            min_pT_dRcut = cms.double(0.5),
            normChi2Max = cms.double(99999.9),
            pixelHitsMin = cms.uint32(0),
            ptMin = cms.double(0.0),
            qualityClass = cms.string('any'),
            sip2dSigMax = cms.double(99999.9),
            sip2dSigMin = cms.double(-99999.9),
            sip2dValMax = cms.double(99999.9),
            sip2dValMin = cms.double(-99999.9),
            sip3dSigMax = cms.double(99999.9),
            sip3dSigMin = cms.double(-99999.9),
            sip3dValMax = cms.double(99999.9),
            sip3dValMin = cms.double(-99999.9),
            totalHitsMin = cms.uint32(0),
            useVariableJTA = cms.bool(False)
        ),
        trackSort = cms.string('sip2dSig'),
        useCategories = cms.bool(True),
        useTrackWeights = cms.bool(True),
        vertexFlip = cms.bool(False)
    ),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"), cms.InputTag("pfInclusiveSecondaryVertexFinderCvsLTagInfos"), cms.InputTag("softPFMuonsTagInfos"), cms.InputTag("softPFElectronsTagInfos")),
    useAdaBoost = cms.bool(False),
    useCondDB = cms.bool(False),
    useGBRForest = cms.bool(True),
    variables = cms.VPSet(
        cms.PSet(
            default = cms.double(-1),
            name = cms.string('vertexLeptonCategory'),
            taggingVarName = cms.string('vertexLeptonCategory')
        ), 
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(0),
            name = cms.string('trackSip2dSig_0'),
            taggingVarName = cms.string('trackSip2dSig')
        ), 
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(1),
            name = cms.string('trackSip2dSig_1'),
            taggingVarName = cms.string('trackSip2dSig')
        ), 
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(0),
            name = cms.string('trackSip3dSig_0'),
            taggingVarName = cms.string('trackSip3dSig')
        ), 
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(1),
            name = cms.string('trackSip3dSig_1'),
            taggingVarName = cms.string('trackSip3dSig')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('trackPtRel_0'),
            taggingVarName = cms.string('trackPtRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('trackPtRel_1'),
            taggingVarName = cms.string('trackPtRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('trackPPar_0'),
            taggingVarName = cms.string('trackPPar')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('trackPPar_1'),
            taggingVarName = cms.string('trackPPar')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('trackEtaRel_0'),
            taggingVarName = cms.string('trackEtaRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('trackEtaRel_1'),
            taggingVarName = cms.string('trackEtaRel')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackDeltaR_0'),
            taggingVarName = cms.string('trackDeltaR')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackDeltaR_1'),
            taggingVarName = cms.string('trackDeltaR')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackPtRatio_0'),
            taggingVarName = cms.string('trackPtRatio')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackPtRatio_1'),
            taggingVarName = cms.string('trackPtRatio')
        ), 
        cms.PSet(
            default = cms.double(1.1),
            idx = cms.int32(0),
            name = cms.string('trackPParRatio_0'),
            taggingVarName = cms.string('trackPParRatio')
        ), 
        cms.PSet(
            default = cms.double(1.1),
            idx = cms.int32(1),
            name = cms.string('trackPParRatio_1'),
            taggingVarName = cms.string('trackPParRatio')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackJetDist_0'),
            taggingVarName = cms.string('trackJetDist')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackJetDist_1'),
            taggingVarName = cms.string('trackJetDist')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackDecayLenVal_0'),
            taggingVarName = cms.string('trackDecayLenVal')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackDecayLenVal_1'),
            taggingVarName = cms.string('trackDecayLenVal')
        ), 
        cms.PSet(
            default = cms.double(0),
            name = cms.string('jetNSecondaryVertices'),
            taggingVarName = cms.string('jetNSecondaryVertices')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            name = cms.string('jetNTracks'),
            taggingVarName = cms.string('jetNTracks')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            name = cms.string('trackSumJetEtRatio'),
            taggingVarName = cms.string('trackSumJetEtRatio')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            name = cms.string('trackSumJetDeltaR'),
            taggingVarName = cms.string('trackSumJetDeltaR')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('vertexMass_0'),
            taggingVarName = cms.string('vertexMass')
        ), 
        cms.PSet(
            default = cms.double(-10),
            idx = cms.int32(0),
            name = cms.string('vertexEnergyRatio_0'),
            taggingVarName = cms.string('vertexEnergyRatio')
        ), 
        cms.PSet(
            default = cms.double(-999),
            idx = cms.int32(0),
            name = cms.string('trackSip2dSigAboveCharm_0'),
            taggingVarName = cms.string('trackSip2dSigAboveCharm')
        ), 
        cms.PSet(
            default = cms.double(-999),
            idx = cms.int32(0),
            name = cms.string('trackSip3dSigAboveCharm_0'),
            taggingVarName = cms.string('trackSip3dSigAboveCharm')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('flightDistance2dSig_0'),
            taggingVarName = cms.string('flightDistance2dSig')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('flightDistance3dSig_0'),
            taggingVarName = cms.string('flightDistance3dSig')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('vertexJetDeltaR_0'),
            taggingVarName = cms.string('vertexJetDeltaR')
        ), 
        cms.PSet(
            default = cms.double(0),
            idx = cms.int32(0),
            name = cms.string('vertexNTracks_0'),
            taggingVarName = cms.string('vertexNTracks')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('massVertexEnergyFraction_0'),
            taggingVarName = cms.string('massVertexEnergyFraction')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('vertexBoostOverSqrtJetPt_0'),
            taggingVarName = cms.string('vertexBoostOverSqrtJetPt')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonPtRel_0'),
            taggingVarName = cms.string('leptonPtRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonPtRel_1'),
            taggingVarName = cms.string('leptonPtRel')
        ), 
        cms.PSet(
            default = cms.double(-10000),
            idx = cms.int32(0),
            name = cms.string('leptonSip3d_0'),
            taggingVarName = cms.string('leptonSip3d')
        ), 
        cms.PSet(
            default = cms.double(-10000),
            idx = cms.int32(1),
            name = cms.string('leptonSip3d_1'),
            taggingVarName = cms.string('leptonSip3d')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonDeltaR_0'),
            taggingVarName = cms.string('leptonDeltaR')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonDeltaR_1'),
            taggingVarName = cms.string('leptonDeltaR')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonRatioRel_0'),
            taggingVarName = cms.string('leptonRatioRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonRatioRel_1'),
            taggingVarName = cms.string('leptonRatioRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonEtaRel_0'),
            taggingVarName = cms.string('leptonEtaRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonEtaRel_1'),
            taggingVarName = cms.string('leptonEtaRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonRatio_0'),
            taggingVarName = cms.string('leptonRatio')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonRatio_1'),
            taggingVarName = cms.string('leptonRatio')
        )
    ),
    weightFile = cms.FileInPath('RecoBTag/CTagging/data/c_vs_udsg_sklearn.weight.xml')
)


process.charmTagsNegativeComputerCvsB = cms.ESProducer("CharmTaggerESProducer",
    computer = cms.ESInputTag("combinedSecondaryVertexSoftLeptonComputer",""),
    defaultValueNoTracks = cms.bool(False),
    gbrForestLabel = cms.string(''),
    mvaName = cms.string('BDT'),
    slComputerCfg = cms.PSet(
        SoftLeptonFlip = cms.bool(True),
        calibrationRecords = cms.vstring(
            'CombinedSVRecoVertexNoSoftLepton', 
            'CombinedSVPseudoVertexNoSoftLepton', 
            'CombinedSVNoVertexNoSoftLepton', 
            'CombinedSVRecoVertexSoftMuon', 
            'CombinedSVPseudoVertexSoftMuon', 
            'CombinedSVNoVertexSoftMuon', 
            'CombinedSVRecoVertexSoftElectron', 
            'CombinedSVPseudoVertexSoftElectron', 
            'CombinedSVNoVertexSoftElectron'
        ),
        categoryVariableName = cms.string('vertexLeptonCategory'),
        charmCut = cms.double(1.5),
        correctVertexMass = cms.bool(False),
        minimumTrackWeight = cms.double(0.5),
        pseudoMultiplicityMin = cms.uint32(2),
        pseudoVertexV0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        recordLabel = cms.string(''),
        trackFlip = cms.bool(True),
        trackMultiplicityMin = cms.uint32(2),
        trackPairV0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.03)
        ),
        trackPseudoSelection = cms.PSet(
            a_dR = cms.double(-0.001053),
            a_pT = cms.double(0.005263),
            b_dR = cms.double(0.6263),
            b_pT = cms.double(0.3684),
            jetDeltaRMax = cms.double(0.3),
            maxDecayLen = cms.double(5),
            maxDistToAxis = cms.double(0.07),
            max_pT = cms.double(500),
            max_pT_dRcut = cms.double(0.1),
            max_pT_trackPTcut = cms.double(3),
            min_pT = cms.double(120),
            min_pT_dRcut = cms.double(0.5),
            normChi2Max = cms.double(99999.9),
            pixelHitsMin = cms.uint32(0),
            ptMin = cms.double(0.0),
            qualityClass = cms.string('any'),
            sip2dSigMax = cms.double(-2.0),
            sip2dSigMin = cms.double(-99999.9),
            sip2dValMax = cms.double(99999.9),
            sip2dValMin = cms.double(-99999.9),
            sip3dSigMax = cms.double(0),
            sip3dSigMin = cms.double(-99999.9),
            sip3dValMax = cms.double(99999.9),
            sip3dValMin = cms.double(-99999.9),
            totalHitsMin = cms.uint32(0),
            useVariableJTA = cms.bool(False)
        ),
        trackSelection = cms.PSet(
            a_dR = cms.double(-0.001053),
            a_pT = cms.double(0.005263),
            b_dR = cms.double(0.6263),
            b_pT = cms.double(0.3684),
            jetDeltaRMax = cms.double(0.3),
            maxDecayLen = cms.double(5),
            maxDistToAxis = cms.double(0.07),
            max_pT = cms.double(500),
            max_pT_dRcut = cms.double(0.1),
            max_pT_trackPTcut = cms.double(3),
            min_pT = cms.double(120),
            min_pT_dRcut = cms.double(0.5),
            normChi2Max = cms.double(99999.9),
            pixelHitsMin = cms.uint32(0),
            ptMin = cms.double(0.0),
            qualityClass = cms.string('any'),
            sip2dSigMax = cms.double(99999.9),
            sip2dSigMin = cms.double(-99999.9),
            sip2dValMax = cms.double(99999.9),
            sip2dValMin = cms.double(-99999.9),
            sip3dSigMax = cms.double(0),
            sip3dSigMin = cms.double(-99999.9),
            sip3dValMax = cms.double(99999.9),
            sip3dValMin = cms.double(-99999.9),
            totalHitsMin = cms.uint32(0),
            useVariableJTA = cms.bool(False)
        ),
        trackSort = cms.string('sip2dSig'),
        useCategories = cms.bool(True),
        useTrackWeights = cms.bool(True),
        vertexFlip = cms.bool(True)
    ),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"), cms.InputTag("pfInclusiveSecondaryVertexFinderCvsLTagInfos"), cms.InputTag("softPFMuonsTagInfos"), cms.InputTag("softPFElectronsTagInfos")),
    useAdaBoost = cms.bool(False),
    useCondDB = cms.bool(False),
    useGBRForest = cms.bool(True),
    variables = cms.VPSet(
        cms.PSet(
            default = cms.double(-1),
            name = cms.string('vertexLeptonCategory'),
            taggingVarName = cms.string('vertexLeptonCategory')
        ), 
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(0),
            name = cms.string('trackSip2dSig_0'),
            taggingVarName = cms.string('trackSip2dSig')
        ), 
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(1),
            name = cms.string('trackSip2dSig_1'),
            taggingVarName = cms.string('trackSip2dSig')
        ), 
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(0),
            name = cms.string('trackSip3dSig_0'),
            taggingVarName = cms.string('trackSip3dSig')
        ), 
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(1),
            name = cms.string('trackSip3dSig_1'),
            taggingVarName = cms.string('trackSip3dSig')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('trackPtRel_0'),
            taggingVarName = cms.string('trackPtRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('trackPtRel_1'),
            taggingVarName = cms.string('trackPtRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('trackPPar_0'),
            taggingVarName = cms.string('trackPPar')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('trackPPar_1'),
            taggingVarName = cms.string('trackPPar')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('trackEtaRel_0'),
            taggingVarName = cms.string('trackEtaRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('trackEtaRel_1'),
            taggingVarName = cms.string('trackEtaRel')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackDeltaR_0'),
            taggingVarName = cms.string('trackDeltaR')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackDeltaR_1'),
            taggingVarName = cms.string('trackDeltaR')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackPtRatio_0'),
            taggingVarName = cms.string('trackPtRatio')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackPtRatio_1'),
            taggingVarName = cms.string('trackPtRatio')
        ), 
        cms.PSet(
            default = cms.double(1.1),
            idx = cms.int32(0),
            name = cms.string('trackPParRatio_0'),
            taggingVarName = cms.string('trackPParRatio')
        ), 
        cms.PSet(
            default = cms.double(1.1),
            idx = cms.int32(1),
            name = cms.string('trackPParRatio_1'),
            taggingVarName = cms.string('trackPParRatio')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackJetDist_0'),
            taggingVarName = cms.string('trackJetDist')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackJetDist_1'),
            taggingVarName = cms.string('trackJetDist')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackDecayLenVal_0'),
            taggingVarName = cms.string('trackDecayLenVal')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackDecayLenVal_1'),
            taggingVarName = cms.string('trackDecayLenVal')
        ), 
        cms.PSet(
            default = cms.double(0),
            name = cms.string('jetNSecondaryVertices'),
            taggingVarName = cms.string('jetNSecondaryVertices')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            name = cms.string('jetNTracks'),
            taggingVarName = cms.string('jetNTracks')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            name = cms.string('trackSumJetEtRatio'),
            taggingVarName = cms.string('trackSumJetEtRatio')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            name = cms.string('trackSumJetDeltaR'),
            taggingVarName = cms.string('trackSumJetDeltaR')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('vertexMass_0'),
            taggingVarName = cms.string('vertexMass')
        ), 
        cms.PSet(
            default = cms.double(-10),
            idx = cms.int32(0),
            name = cms.string('vertexEnergyRatio_0'),
            taggingVarName = cms.string('vertexEnergyRatio')
        ), 
        cms.PSet(
            default = cms.double(-999),
            idx = cms.int32(0),
            name = cms.string('trackSip2dSigAboveCharm_0'),
            taggingVarName = cms.string('trackSip2dSigAboveCharm')
        ), 
        cms.PSet(
            default = cms.double(-999),
            idx = cms.int32(0),
            name = cms.string('trackSip3dSigAboveCharm_0'),
            taggingVarName = cms.string('trackSip3dSigAboveCharm')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('flightDistance2dSig_0'),
            taggingVarName = cms.string('flightDistance2dSig')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('flightDistance3dSig_0'),
            taggingVarName = cms.string('flightDistance3dSig')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('vertexJetDeltaR_0'),
            taggingVarName = cms.string('vertexJetDeltaR')
        ), 
        cms.PSet(
            default = cms.double(0),
            idx = cms.int32(0),
            name = cms.string('vertexNTracks_0'),
            taggingVarName = cms.string('vertexNTracks')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('massVertexEnergyFraction_0'),
            taggingVarName = cms.string('massVertexEnergyFraction')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('vertexBoostOverSqrtJetPt_0'),
            taggingVarName = cms.string('vertexBoostOverSqrtJetPt')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonPtRel_0'),
            taggingVarName = cms.string('leptonPtRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonPtRel_1'),
            taggingVarName = cms.string('leptonPtRel')
        ), 
        cms.PSet(
            default = cms.double(-10000),
            idx = cms.int32(0),
            name = cms.string('leptonSip3d_0'),
            taggingVarName = cms.string('leptonSip3d')
        ), 
        cms.PSet(
            default = cms.double(-10000),
            idx = cms.int32(1),
            name = cms.string('leptonSip3d_1'),
            taggingVarName = cms.string('leptonSip3d')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonDeltaR_0'),
            taggingVarName = cms.string('leptonDeltaR')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonDeltaR_1'),
            taggingVarName = cms.string('leptonDeltaR')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonRatioRel_0'),
            taggingVarName = cms.string('leptonRatioRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonRatioRel_1'),
            taggingVarName = cms.string('leptonRatioRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonEtaRel_0'),
            taggingVarName = cms.string('leptonEtaRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonEtaRel_1'),
            taggingVarName = cms.string('leptonEtaRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonRatio_0'),
            taggingVarName = cms.string('leptonRatio')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonRatio_1'),
            taggingVarName = cms.string('leptonRatio')
        )
    ),
    weightFile = cms.FileInPath('RecoBTag/CTagging/data/c_vs_b_sklearn.weight.xml')
)


process.charmTagsNegativeComputerCvsL = cms.ESProducer("CharmTaggerESProducer",
    computer = cms.ESInputTag("combinedSecondaryVertexSoftLeptonComputer",""),
    defaultValueNoTracks = cms.bool(False),
    gbrForestLabel = cms.string(''),
    mvaName = cms.string('BDT'),
    slComputerCfg = cms.PSet(
        SoftLeptonFlip = cms.bool(True),
        calibrationRecords = cms.vstring(
            'CombinedSVRecoVertexNoSoftLepton', 
            'CombinedSVPseudoVertexNoSoftLepton', 
            'CombinedSVNoVertexNoSoftLepton', 
            'CombinedSVRecoVertexSoftMuon', 
            'CombinedSVPseudoVertexSoftMuon', 
            'CombinedSVNoVertexSoftMuon', 
            'CombinedSVRecoVertexSoftElectron', 
            'CombinedSVPseudoVertexSoftElectron', 
            'CombinedSVNoVertexSoftElectron'
        ),
        categoryVariableName = cms.string('vertexLeptonCategory'),
        charmCut = cms.double(1.5),
        correctVertexMass = cms.bool(False),
        minimumTrackWeight = cms.double(0.5),
        pseudoMultiplicityMin = cms.uint32(2),
        pseudoVertexV0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        recordLabel = cms.string(''),
        trackFlip = cms.bool(True),
        trackMultiplicityMin = cms.uint32(2),
        trackPairV0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.03)
        ),
        trackPseudoSelection = cms.PSet(
            a_dR = cms.double(-0.001053),
            a_pT = cms.double(0.005263),
            b_dR = cms.double(0.6263),
            b_pT = cms.double(0.3684),
            jetDeltaRMax = cms.double(0.3),
            maxDecayLen = cms.double(5),
            maxDistToAxis = cms.double(0.07),
            max_pT = cms.double(500),
            max_pT_dRcut = cms.double(0.1),
            max_pT_trackPTcut = cms.double(3),
            min_pT = cms.double(120),
            min_pT_dRcut = cms.double(0.5),
            normChi2Max = cms.double(99999.9),
            pixelHitsMin = cms.uint32(0),
            ptMin = cms.double(0.0),
            qualityClass = cms.string('any'),
            sip2dSigMax = cms.double(-2.0),
            sip2dSigMin = cms.double(-99999.9),
            sip2dValMax = cms.double(99999.9),
            sip2dValMin = cms.double(-99999.9),
            sip3dSigMax = cms.double(0),
            sip3dSigMin = cms.double(-99999.9),
            sip3dValMax = cms.double(99999.9),
            sip3dValMin = cms.double(-99999.9),
            totalHitsMin = cms.uint32(0),
            useVariableJTA = cms.bool(False)
        ),
        trackSelection = cms.PSet(
            a_dR = cms.double(-0.001053),
            a_pT = cms.double(0.005263),
            b_dR = cms.double(0.6263),
            b_pT = cms.double(0.3684),
            jetDeltaRMax = cms.double(0.3),
            maxDecayLen = cms.double(5),
            maxDistToAxis = cms.double(0.07),
            max_pT = cms.double(500),
            max_pT_dRcut = cms.double(0.1),
            max_pT_trackPTcut = cms.double(3),
            min_pT = cms.double(120),
            min_pT_dRcut = cms.double(0.5),
            normChi2Max = cms.double(99999.9),
            pixelHitsMin = cms.uint32(0),
            ptMin = cms.double(0.0),
            qualityClass = cms.string('any'),
            sip2dSigMax = cms.double(99999.9),
            sip2dSigMin = cms.double(-99999.9),
            sip2dValMax = cms.double(99999.9),
            sip2dValMin = cms.double(-99999.9),
            sip3dSigMax = cms.double(0),
            sip3dSigMin = cms.double(-99999.9),
            sip3dValMax = cms.double(99999.9),
            sip3dValMin = cms.double(-99999.9),
            totalHitsMin = cms.uint32(0),
            useVariableJTA = cms.bool(False)
        ),
        trackSort = cms.string('sip2dSig'),
        useCategories = cms.bool(True),
        useTrackWeights = cms.bool(True),
        vertexFlip = cms.bool(True)
    ),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"), cms.InputTag("pfInclusiveSecondaryVertexFinderCvsLTagInfos"), cms.InputTag("softPFMuonsTagInfos"), cms.InputTag("softPFElectronsTagInfos")),
    useAdaBoost = cms.bool(False),
    useCondDB = cms.bool(False),
    useGBRForest = cms.bool(True),
    variables = cms.VPSet(
        cms.PSet(
            default = cms.double(-1),
            name = cms.string('vertexLeptonCategory'),
            taggingVarName = cms.string('vertexLeptonCategory')
        ), 
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(0),
            name = cms.string('trackSip2dSig_0'),
            taggingVarName = cms.string('trackSip2dSig')
        ), 
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(1),
            name = cms.string('trackSip2dSig_1'),
            taggingVarName = cms.string('trackSip2dSig')
        ), 
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(0),
            name = cms.string('trackSip3dSig_0'),
            taggingVarName = cms.string('trackSip3dSig')
        ), 
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(1),
            name = cms.string('trackSip3dSig_1'),
            taggingVarName = cms.string('trackSip3dSig')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('trackPtRel_0'),
            taggingVarName = cms.string('trackPtRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('trackPtRel_1'),
            taggingVarName = cms.string('trackPtRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('trackPPar_0'),
            taggingVarName = cms.string('trackPPar')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('trackPPar_1'),
            taggingVarName = cms.string('trackPPar')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('trackEtaRel_0'),
            taggingVarName = cms.string('trackEtaRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('trackEtaRel_1'),
            taggingVarName = cms.string('trackEtaRel')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackDeltaR_0'),
            taggingVarName = cms.string('trackDeltaR')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackDeltaR_1'),
            taggingVarName = cms.string('trackDeltaR')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackPtRatio_0'),
            taggingVarName = cms.string('trackPtRatio')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackPtRatio_1'),
            taggingVarName = cms.string('trackPtRatio')
        ), 
        cms.PSet(
            default = cms.double(1.1),
            idx = cms.int32(0),
            name = cms.string('trackPParRatio_0'),
            taggingVarName = cms.string('trackPParRatio')
        ), 
        cms.PSet(
            default = cms.double(1.1),
            idx = cms.int32(1),
            name = cms.string('trackPParRatio_1'),
            taggingVarName = cms.string('trackPParRatio')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackJetDist_0'),
            taggingVarName = cms.string('trackJetDist')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackJetDist_1'),
            taggingVarName = cms.string('trackJetDist')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackDecayLenVal_0'),
            taggingVarName = cms.string('trackDecayLenVal')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackDecayLenVal_1'),
            taggingVarName = cms.string('trackDecayLenVal')
        ), 
        cms.PSet(
            default = cms.double(0),
            name = cms.string('jetNSecondaryVertices'),
            taggingVarName = cms.string('jetNSecondaryVertices')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            name = cms.string('jetNTracks'),
            taggingVarName = cms.string('jetNTracks')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            name = cms.string('trackSumJetEtRatio'),
            taggingVarName = cms.string('trackSumJetEtRatio')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            name = cms.string('trackSumJetDeltaR'),
            taggingVarName = cms.string('trackSumJetDeltaR')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('vertexMass_0'),
            taggingVarName = cms.string('vertexMass')
        ), 
        cms.PSet(
            default = cms.double(-10),
            idx = cms.int32(0),
            name = cms.string('vertexEnergyRatio_0'),
            taggingVarName = cms.string('vertexEnergyRatio')
        ), 
        cms.PSet(
            default = cms.double(-999),
            idx = cms.int32(0),
            name = cms.string('trackSip2dSigAboveCharm_0'),
            taggingVarName = cms.string('trackSip2dSigAboveCharm')
        ), 
        cms.PSet(
            default = cms.double(-999),
            idx = cms.int32(0),
            name = cms.string('trackSip3dSigAboveCharm_0'),
            taggingVarName = cms.string('trackSip3dSigAboveCharm')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('flightDistance2dSig_0'),
            taggingVarName = cms.string('flightDistance2dSig')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('flightDistance3dSig_0'),
            taggingVarName = cms.string('flightDistance3dSig')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('vertexJetDeltaR_0'),
            taggingVarName = cms.string('vertexJetDeltaR')
        ), 
        cms.PSet(
            default = cms.double(0),
            idx = cms.int32(0),
            name = cms.string('vertexNTracks_0'),
            taggingVarName = cms.string('vertexNTracks')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('massVertexEnergyFraction_0'),
            taggingVarName = cms.string('massVertexEnergyFraction')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('vertexBoostOverSqrtJetPt_0'),
            taggingVarName = cms.string('vertexBoostOverSqrtJetPt')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonPtRel_0'),
            taggingVarName = cms.string('leptonPtRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonPtRel_1'),
            taggingVarName = cms.string('leptonPtRel')
        ), 
        cms.PSet(
            default = cms.double(-10000),
            idx = cms.int32(0),
            name = cms.string('leptonSip3d_0'),
            taggingVarName = cms.string('leptonSip3d')
        ), 
        cms.PSet(
            default = cms.double(-10000),
            idx = cms.int32(1),
            name = cms.string('leptonSip3d_1'),
            taggingVarName = cms.string('leptonSip3d')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonDeltaR_0'),
            taggingVarName = cms.string('leptonDeltaR')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonDeltaR_1'),
            taggingVarName = cms.string('leptonDeltaR')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonRatioRel_0'),
            taggingVarName = cms.string('leptonRatioRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonRatioRel_1'),
            taggingVarName = cms.string('leptonRatioRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonEtaRel_0'),
            taggingVarName = cms.string('leptonEtaRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonEtaRel_1'),
            taggingVarName = cms.string('leptonEtaRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonRatio_0'),
            taggingVarName = cms.string('leptonRatio')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonRatio_1'),
            taggingVarName = cms.string('leptonRatio')
        )
    ),
    weightFile = cms.FileInPath('RecoBTag/CTagging/data/c_vs_udsg_sklearn.weight.xml')
)


process.charmTagsPositiveComputerCvsB = cms.ESProducer("CharmTaggerESProducer",
    computer = cms.ESInputTag("combinedSecondaryVertexSoftLeptonComputer",""),
    defaultValueNoTracks = cms.bool(False),
    gbrForestLabel = cms.string(''),
    mvaName = cms.string('BDT'),
    slComputerCfg = cms.PSet(
        SoftLeptonFlip = cms.bool(False),
        calibrationRecords = cms.vstring(
            'CombinedSVRecoVertexNoSoftLepton', 
            'CombinedSVPseudoVertexNoSoftLepton', 
            'CombinedSVNoVertexNoSoftLepton', 
            'CombinedSVRecoVertexSoftMuon', 
            'CombinedSVPseudoVertexSoftMuon', 
            'CombinedSVNoVertexSoftMuon', 
            'CombinedSVRecoVertexSoftElectron', 
            'CombinedSVPseudoVertexSoftElectron', 
            'CombinedSVNoVertexSoftElectron'
        ),
        categoryVariableName = cms.string('vertexLeptonCategory'),
        charmCut = cms.double(1.5),
        correctVertexMass = cms.bool(False),
        minimumTrackWeight = cms.double(0.5),
        pseudoMultiplicityMin = cms.uint32(2),
        pseudoVertexV0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        recordLabel = cms.string(''),
        trackFlip = cms.bool(False),
        trackMultiplicityMin = cms.uint32(2),
        trackPairV0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.03)
        ),
        trackPseudoSelection = cms.PSet(
            a_dR = cms.double(-0.001053),
            a_pT = cms.double(0.005263),
            b_dR = cms.double(0.6263),
            b_pT = cms.double(0.3684),
            jetDeltaRMax = cms.double(0.3),
            maxDecayLen = cms.double(5),
            maxDistToAxis = cms.double(0.07),
            max_pT = cms.double(500),
            max_pT_dRcut = cms.double(0.1),
            max_pT_trackPTcut = cms.double(3),
            min_pT = cms.double(120),
            min_pT_dRcut = cms.double(0.5),
            normChi2Max = cms.double(99999.9),
            pixelHitsMin = cms.uint32(0),
            ptMin = cms.double(0.0),
            qualityClass = cms.string('any'),
            sip2dSigMax = cms.double(99999.9),
            sip2dSigMin = cms.double(2.0),
            sip2dValMax = cms.double(99999.9),
            sip2dValMin = cms.double(-99999.9),
            sip3dSigMax = cms.double(99999.9),
            sip3dSigMin = cms.double(0),
            sip3dValMax = cms.double(99999.9),
            sip3dValMin = cms.double(-99999.9),
            totalHitsMin = cms.uint32(0),
            useVariableJTA = cms.bool(False)
        ),
        trackSelection = cms.PSet(
            a_dR = cms.double(-0.001053),
            a_pT = cms.double(0.005263),
            b_dR = cms.double(0.6263),
            b_pT = cms.double(0.3684),
            jetDeltaRMax = cms.double(0.3),
            maxDecayLen = cms.double(5),
            maxDistToAxis = cms.double(0.07),
            max_pT = cms.double(500),
            max_pT_dRcut = cms.double(0.1),
            max_pT_trackPTcut = cms.double(3),
            min_pT = cms.double(120),
            min_pT_dRcut = cms.double(0.5),
            normChi2Max = cms.double(99999.9),
            pixelHitsMin = cms.uint32(0),
            ptMin = cms.double(0.0),
            qualityClass = cms.string('any'),
            sip2dSigMax = cms.double(99999.9),
            sip2dSigMin = cms.double(-99999.9),
            sip2dValMax = cms.double(99999.9),
            sip2dValMin = cms.double(-99999.9),
            sip3dSigMax = cms.double(99999.9),
            sip3dSigMin = cms.double(0),
            sip3dValMax = cms.double(99999.9),
            sip3dValMin = cms.double(-99999.9),
            totalHitsMin = cms.uint32(0),
            useVariableJTA = cms.bool(False)
        ),
        trackSort = cms.string('sip2dSig'),
        useCategories = cms.bool(True),
        useTrackWeights = cms.bool(True),
        vertexFlip = cms.bool(False)
    ),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"), cms.InputTag("pfInclusiveSecondaryVertexFinderCvsLTagInfos"), cms.InputTag("softPFMuonsTagInfos"), cms.InputTag("softPFElectronsTagInfos")),
    useAdaBoost = cms.bool(False),
    useCondDB = cms.bool(False),
    useGBRForest = cms.bool(True),
    variables = cms.VPSet(
        cms.PSet(
            default = cms.double(-1),
            name = cms.string('vertexLeptonCategory'),
            taggingVarName = cms.string('vertexLeptonCategory')
        ), 
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(0),
            name = cms.string('trackSip2dSig_0'),
            taggingVarName = cms.string('trackSip2dSig')
        ), 
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(1),
            name = cms.string('trackSip2dSig_1'),
            taggingVarName = cms.string('trackSip2dSig')
        ), 
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(0),
            name = cms.string('trackSip3dSig_0'),
            taggingVarName = cms.string('trackSip3dSig')
        ), 
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(1),
            name = cms.string('trackSip3dSig_1'),
            taggingVarName = cms.string('trackSip3dSig')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('trackPtRel_0'),
            taggingVarName = cms.string('trackPtRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('trackPtRel_1'),
            taggingVarName = cms.string('trackPtRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('trackPPar_0'),
            taggingVarName = cms.string('trackPPar')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('trackPPar_1'),
            taggingVarName = cms.string('trackPPar')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('trackEtaRel_0'),
            taggingVarName = cms.string('trackEtaRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('trackEtaRel_1'),
            taggingVarName = cms.string('trackEtaRel')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackDeltaR_0'),
            taggingVarName = cms.string('trackDeltaR')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackDeltaR_1'),
            taggingVarName = cms.string('trackDeltaR')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackPtRatio_0'),
            taggingVarName = cms.string('trackPtRatio')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackPtRatio_1'),
            taggingVarName = cms.string('trackPtRatio')
        ), 
        cms.PSet(
            default = cms.double(1.1),
            idx = cms.int32(0),
            name = cms.string('trackPParRatio_0'),
            taggingVarName = cms.string('trackPParRatio')
        ), 
        cms.PSet(
            default = cms.double(1.1),
            idx = cms.int32(1),
            name = cms.string('trackPParRatio_1'),
            taggingVarName = cms.string('trackPParRatio')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackJetDist_0'),
            taggingVarName = cms.string('trackJetDist')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackJetDist_1'),
            taggingVarName = cms.string('trackJetDist')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackDecayLenVal_0'),
            taggingVarName = cms.string('trackDecayLenVal')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackDecayLenVal_1'),
            taggingVarName = cms.string('trackDecayLenVal')
        ), 
        cms.PSet(
            default = cms.double(0),
            name = cms.string('jetNSecondaryVertices'),
            taggingVarName = cms.string('jetNSecondaryVertices')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            name = cms.string('jetNTracks'),
            taggingVarName = cms.string('jetNTracks')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            name = cms.string('trackSumJetEtRatio'),
            taggingVarName = cms.string('trackSumJetEtRatio')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            name = cms.string('trackSumJetDeltaR'),
            taggingVarName = cms.string('trackSumJetDeltaR')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('vertexMass_0'),
            taggingVarName = cms.string('vertexMass')
        ), 
        cms.PSet(
            default = cms.double(-10),
            idx = cms.int32(0),
            name = cms.string('vertexEnergyRatio_0'),
            taggingVarName = cms.string('vertexEnergyRatio')
        ), 
        cms.PSet(
            default = cms.double(-999),
            idx = cms.int32(0),
            name = cms.string('trackSip2dSigAboveCharm_0'),
            taggingVarName = cms.string('trackSip2dSigAboveCharm')
        ), 
        cms.PSet(
            default = cms.double(-999),
            idx = cms.int32(0),
            name = cms.string('trackSip3dSigAboveCharm_0'),
            taggingVarName = cms.string('trackSip3dSigAboveCharm')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('flightDistance2dSig_0'),
            taggingVarName = cms.string('flightDistance2dSig')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('flightDistance3dSig_0'),
            taggingVarName = cms.string('flightDistance3dSig')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('vertexJetDeltaR_0'),
            taggingVarName = cms.string('vertexJetDeltaR')
        ), 
        cms.PSet(
            default = cms.double(0),
            idx = cms.int32(0),
            name = cms.string('vertexNTracks_0'),
            taggingVarName = cms.string('vertexNTracks')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('massVertexEnergyFraction_0'),
            taggingVarName = cms.string('massVertexEnergyFraction')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('vertexBoostOverSqrtJetPt_0'),
            taggingVarName = cms.string('vertexBoostOverSqrtJetPt')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonPtRel_0'),
            taggingVarName = cms.string('leptonPtRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonPtRel_1'),
            taggingVarName = cms.string('leptonPtRel')
        ), 
        cms.PSet(
            default = cms.double(-10000),
            idx = cms.int32(0),
            name = cms.string('leptonSip3d_0'),
            taggingVarName = cms.string('leptonSip3d')
        ), 
        cms.PSet(
            default = cms.double(-10000),
            idx = cms.int32(1),
            name = cms.string('leptonSip3d_1'),
            taggingVarName = cms.string('leptonSip3d')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonDeltaR_0'),
            taggingVarName = cms.string('leptonDeltaR')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonDeltaR_1'),
            taggingVarName = cms.string('leptonDeltaR')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonRatioRel_0'),
            taggingVarName = cms.string('leptonRatioRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonRatioRel_1'),
            taggingVarName = cms.string('leptonRatioRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonEtaRel_0'),
            taggingVarName = cms.string('leptonEtaRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonEtaRel_1'),
            taggingVarName = cms.string('leptonEtaRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonRatio_0'),
            taggingVarName = cms.string('leptonRatio')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonRatio_1'),
            taggingVarName = cms.string('leptonRatio')
        )
    ),
    weightFile = cms.FileInPath('RecoBTag/CTagging/data/c_vs_b_sklearn.weight.xml')
)


process.charmTagsPositiveComputerCvsL = cms.ESProducer("CharmTaggerESProducer",
    computer = cms.ESInputTag("combinedSecondaryVertexSoftLeptonComputer",""),
    defaultValueNoTracks = cms.bool(False),
    gbrForestLabel = cms.string(''),
    mvaName = cms.string('BDT'),
    slComputerCfg = cms.PSet(
        SoftLeptonFlip = cms.bool(False),
        calibrationRecords = cms.vstring(
            'CombinedSVRecoVertexNoSoftLepton', 
            'CombinedSVPseudoVertexNoSoftLepton', 
            'CombinedSVNoVertexNoSoftLepton', 
            'CombinedSVRecoVertexSoftMuon', 
            'CombinedSVPseudoVertexSoftMuon', 
            'CombinedSVNoVertexSoftMuon', 
            'CombinedSVRecoVertexSoftElectron', 
            'CombinedSVPseudoVertexSoftElectron', 
            'CombinedSVNoVertexSoftElectron'
        ),
        categoryVariableName = cms.string('vertexLeptonCategory'),
        charmCut = cms.double(1.5),
        correctVertexMass = cms.bool(False),
        minimumTrackWeight = cms.double(0.5),
        pseudoMultiplicityMin = cms.uint32(2),
        pseudoVertexV0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        recordLabel = cms.string(''),
        trackFlip = cms.bool(False),
        trackMultiplicityMin = cms.uint32(2),
        trackPairV0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.03)
        ),
        trackPseudoSelection = cms.PSet(
            a_dR = cms.double(-0.001053),
            a_pT = cms.double(0.005263),
            b_dR = cms.double(0.6263),
            b_pT = cms.double(0.3684),
            jetDeltaRMax = cms.double(0.3),
            maxDecayLen = cms.double(5),
            maxDistToAxis = cms.double(0.07),
            max_pT = cms.double(500),
            max_pT_dRcut = cms.double(0.1),
            max_pT_trackPTcut = cms.double(3),
            min_pT = cms.double(120),
            min_pT_dRcut = cms.double(0.5),
            normChi2Max = cms.double(99999.9),
            pixelHitsMin = cms.uint32(0),
            ptMin = cms.double(0.0),
            qualityClass = cms.string('any'),
            sip2dSigMax = cms.double(99999.9),
            sip2dSigMin = cms.double(2.0),
            sip2dValMax = cms.double(99999.9),
            sip2dValMin = cms.double(-99999.9),
            sip3dSigMax = cms.double(99999.9),
            sip3dSigMin = cms.double(0),
            sip3dValMax = cms.double(99999.9),
            sip3dValMin = cms.double(-99999.9),
            totalHitsMin = cms.uint32(0),
            useVariableJTA = cms.bool(False)
        ),
        trackSelection = cms.PSet(
            a_dR = cms.double(-0.001053),
            a_pT = cms.double(0.005263),
            b_dR = cms.double(0.6263),
            b_pT = cms.double(0.3684),
            jetDeltaRMax = cms.double(0.3),
            maxDecayLen = cms.double(5),
            maxDistToAxis = cms.double(0.07),
            max_pT = cms.double(500),
            max_pT_dRcut = cms.double(0.1),
            max_pT_trackPTcut = cms.double(3),
            min_pT = cms.double(120),
            min_pT_dRcut = cms.double(0.5),
            normChi2Max = cms.double(99999.9),
            pixelHitsMin = cms.uint32(0),
            ptMin = cms.double(0.0),
            qualityClass = cms.string('any'),
            sip2dSigMax = cms.double(99999.9),
            sip2dSigMin = cms.double(-99999.9),
            sip2dValMax = cms.double(99999.9),
            sip2dValMin = cms.double(-99999.9),
            sip3dSigMax = cms.double(99999.9),
            sip3dSigMin = cms.double(0),
            sip3dValMax = cms.double(99999.9),
            sip3dValMin = cms.double(-99999.9),
            totalHitsMin = cms.uint32(0),
            useVariableJTA = cms.bool(False)
        ),
        trackSort = cms.string('sip2dSig'),
        useCategories = cms.bool(True),
        useTrackWeights = cms.bool(True),
        vertexFlip = cms.bool(False)
    ),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"), cms.InputTag("pfInclusiveSecondaryVertexFinderCvsLTagInfos"), cms.InputTag("softPFMuonsTagInfos"), cms.InputTag("softPFElectronsTagInfos")),
    useAdaBoost = cms.bool(False),
    useCondDB = cms.bool(False),
    useGBRForest = cms.bool(True),
    variables = cms.VPSet(
        cms.PSet(
            default = cms.double(-1),
            name = cms.string('vertexLeptonCategory'),
            taggingVarName = cms.string('vertexLeptonCategory')
        ), 
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(0),
            name = cms.string('trackSip2dSig_0'),
            taggingVarName = cms.string('trackSip2dSig')
        ), 
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(1),
            name = cms.string('trackSip2dSig_1'),
            taggingVarName = cms.string('trackSip2dSig')
        ), 
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(0),
            name = cms.string('trackSip3dSig_0'),
            taggingVarName = cms.string('trackSip3dSig')
        ), 
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(1),
            name = cms.string('trackSip3dSig_1'),
            taggingVarName = cms.string('trackSip3dSig')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('trackPtRel_0'),
            taggingVarName = cms.string('trackPtRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('trackPtRel_1'),
            taggingVarName = cms.string('trackPtRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('trackPPar_0'),
            taggingVarName = cms.string('trackPPar')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('trackPPar_1'),
            taggingVarName = cms.string('trackPPar')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('trackEtaRel_0'),
            taggingVarName = cms.string('trackEtaRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('trackEtaRel_1'),
            taggingVarName = cms.string('trackEtaRel')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackDeltaR_0'),
            taggingVarName = cms.string('trackDeltaR')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackDeltaR_1'),
            taggingVarName = cms.string('trackDeltaR')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackPtRatio_0'),
            taggingVarName = cms.string('trackPtRatio')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackPtRatio_1'),
            taggingVarName = cms.string('trackPtRatio')
        ), 
        cms.PSet(
            default = cms.double(1.1),
            idx = cms.int32(0),
            name = cms.string('trackPParRatio_0'),
            taggingVarName = cms.string('trackPParRatio')
        ), 
        cms.PSet(
            default = cms.double(1.1),
            idx = cms.int32(1),
            name = cms.string('trackPParRatio_1'),
            taggingVarName = cms.string('trackPParRatio')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackJetDist_0'),
            taggingVarName = cms.string('trackJetDist')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackJetDist_1'),
            taggingVarName = cms.string('trackJetDist')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackDecayLenVal_0'),
            taggingVarName = cms.string('trackDecayLenVal')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackDecayLenVal_1'),
            taggingVarName = cms.string('trackDecayLenVal')
        ), 
        cms.PSet(
            default = cms.double(0),
            name = cms.string('jetNSecondaryVertices'),
            taggingVarName = cms.string('jetNSecondaryVertices')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            name = cms.string('jetNTracks'),
            taggingVarName = cms.string('jetNTracks')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            name = cms.string('trackSumJetEtRatio'),
            taggingVarName = cms.string('trackSumJetEtRatio')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            name = cms.string('trackSumJetDeltaR'),
            taggingVarName = cms.string('trackSumJetDeltaR')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('vertexMass_0'),
            taggingVarName = cms.string('vertexMass')
        ), 
        cms.PSet(
            default = cms.double(-10),
            idx = cms.int32(0),
            name = cms.string('vertexEnergyRatio_0'),
            taggingVarName = cms.string('vertexEnergyRatio')
        ), 
        cms.PSet(
            default = cms.double(-999),
            idx = cms.int32(0),
            name = cms.string('trackSip2dSigAboveCharm_0'),
            taggingVarName = cms.string('trackSip2dSigAboveCharm')
        ), 
        cms.PSet(
            default = cms.double(-999),
            idx = cms.int32(0),
            name = cms.string('trackSip3dSigAboveCharm_0'),
            taggingVarName = cms.string('trackSip3dSigAboveCharm')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('flightDistance2dSig_0'),
            taggingVarName = cms.string('flightDistance2dSig')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('flightDistance3dSig_0'),
            taggingVarName = cms.string('flightDistance3dSig')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('vertexJetDeltaR_0'),
            taggingVarName = cms.string('vertexJetDeltaR')
        ), 
        cms.PSet(
            default = cms.double(0),
            idx = cms.int32(0),
            name = cms.string('vertexNTracks_0'),
            taggingVarName = cms.string('vertexNTracks')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('massVertexEnergyFraction_0'),
            taggingVarName = cms.string('massVertexEnergyFraction')
        ), 
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('vertexBoostOverSqrtJetPt_0'),
            taggingVarName = cms.string('vertexBoostOverSqrtJetPt')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonPtRel_0'),
            taggingVarName = cms.string('leptonPtRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonPtRel_1'),
            taggingVarName = cms.string('leptonPtRel')
        ), 
        cms.PSet(
            default = cms.double(-10000),
            idx = cms.int32(0),
            name = cms.string('leptonSip3d_0'),
            taggingVarName = cms.string('leptonSip3d')
        ), 
        cms.PSet(
            default = cms.double(-10000),
            idx = cms.int32(1),
            name = cms.string('leptonSip3d_1'),
            taggingVarName = cms.string('leptonSip3d')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonDeltaR_0'),
            taggingVarName = cms.string('leptonDeltaR')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonDeltaR_1'),
            taggingVarName = cms.string('leptonDeltaR')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonRatioRel_0'),
            taggingVarName = cms.string('leptonRatioRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonRatioRel_1'),
            taggingVarName = cms.string('leptonRatioRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonEtaRel_0'),
            taggingVarName = cms.string('leptonEtaRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonEtaRel_1'),
            taggingVarName = cms.string('leptonEtaRel')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonRatio_0'),
            taggingVarName = cms.string('leptonRatio')
        ), 
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonRatio_1'),
            taggingVarName = cms.string('leptonRatio')
        )
    ),
    weightFile = cms.FileInPath('RecoBTag/CTagging/data/c_vs_udsg_sklearn.weight.xml')
)


process.chi2CutForConversionTrajectoryBuilder = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('eleLooseChi2'),
    MaxChi2 = cms.double(100000.0),
    MaxDisplacement = cms.double(100.0),
    MaxSagitta = cms.double(-1),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    nSigma = cms.double(3)
)


process.combinedMVAV2Computer = cms.ESProducer("CombinedMVAV2JetTagESProducer",
    jetTagComputers = cms.vstring(
        'jetProbabilityComputer', 
        'jetBProbabilityComputer', 
        'combinedSecondaryVertexV2Computer', 
        'softPFMuonComputer', 
        'softPFElectronComputer'
    ),
    mvaName = cms.string('bdt'),
    spectators = cms.vstring(),
    useAdaBoost = cms.bool(True),
    useCondDB = cms.bool(False),
    useGBRForest = cms.bool(True),
    variables = cms.vstring(
        'Jet_CSV', 
        'Jet_CSVIVF', 
        'Jet_JP', 
        'Jet_JBP', 
        'Jet_SoftMu', 
        'Jet_SoftEl'
    ),
    weightFile = cms.FileInPath('RecoBTag/Combined/data/CombinedMVAV2_13_07_2015.weights.xml.gz')
)


process.combinedSecondaryVertexV2Computer = cms.ESProducer("CombinedSecondaryVertexESProducer",
    SoftLeptonFlip = cms.bool(False),
    calibrationRecords = cms.vstring(
        'CombinedSVIVFV2RecoVertex', 
        'CombinedSVIVFV2PseudoVertex', 
        'CombinedSVIVFV2NoVertex'
    ),
    categoryVariableName = cms.string('vertexCategory'),
    charmCut = cms.double(1.5),
    correctVertexMass = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    pseudoMultiplicityMin = cms.uint32(2),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    recordLabel = cms.string(''),
    trackFlip = cms.bool(False),
    trackMultiplicityMin = cms.uint32(2),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useCategories = cms.bool(True),
    useTrackWeights = cms.bool(True),
    vertexFlip = cms.bool(False)
)


process.conv2StepFitterSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('conv2StepFitterSmoother'),
    EstimateCut = cms.double(30),
    Fitter = cms.string('RKFitter'),
    LogPixelProbabilityCut = cms.double(0),
    MaxFractionOutliers = cms.double(0.3),
    MaxNumberOfOutliers = cms.int32(3),
    MinDof = cms.int32(2),
    MinNumberOfHits = cms.int32(3),
    NoInvalidHitsBeginEnd = cms.bool(True),
    NoOutliersBeginEnd = cms.bool(False),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('conv2StepRKSmoother'),
    appendToDataLabel = cms.string('')
)


process.conv2StepRKTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('conv2StepRKSmoother'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    errorRescaling = cms.double(10.0),
    minHits = cms.int32(3)
)


process.convStepChi2Est = cms.ESProducer("Chi2ChargeMeasurementEstimatorESProducer",
    ComponentName = cms.string('convStepChi2Est'),
    MaxChi2 = cms.double(30.0),
    MaxDisplacement = cms.double(100),
    MaxSagitta = cms.double(-1.0),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutTight')
    ),
    nSigma = cms.double(3.0),
    pTChargeCutThreshold = cms.double(-1)
)


process.convStepFitterSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('convStepFitterSmoother'),
    EstimateCut = cms.double(30),
    Fitter = cms.string('RKFitter'),
    LogPixelProbabilityCut = cms.double(0),
    MaxFractionOutliers = cms.double(0.3),
    MaxNumberOfOutliers = cms.int32(3),
    MinDof = cms.int32(2),
    MinNumberOfHits = cms.int32(3),
    NoInvalidHitsBeginEnd = cms.bool(True),
    NoOutliersBeginEnd = cms.bool(False),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('convStepRKSmoother'),
    appendToDataLabel = cms.string('')
)


process.convStepRKTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('convStepRKSmoother'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    errorRescaling = cms.double(10.0),
    minHits = cms.int32(3)
)


process.cosmicsNavigationSchoolESProducer = cms.ESProducer("SkippingLayerCosmicNavigationSchoolESProducer",
    ComponentName = cms.string('CosmicNavigationSchool'),
    allSelf = cms.bool(True),
    noPXB = cms.bool(False),
    noPXF = cms.bool(False),
    noTEC = cms.bool(False),
    noTIB = cms.bool(False),
    noTID = cms.bool(False),
    noTOB = cms.bool(False),
    selfSearch = cms.bool(True)
)


process.ctppsGeometryESModule = cms.ESProducer("CTPPSGeometryESModule",
    compactViewTag = cms.string('XMLIdealGeometryESSource_CTPPS'),
    verbosity = cms.untracked.uint32(1)
)


process.ctppsInterpolatedOpticalFunctionsESSource = cms.ESProducer("CTPPSInterpolatedOpticalFunctionsESSource",
    appendToDataLabel = cms.string(''),
    lhcInfoLabel = cms.string(''),
    opticsLabel = cms.string('')
)


process.detachedQuadStepChi2Est = cms.ESProducer("Chi2ChargeMeasurementEstimatorESProducer",
    ComponentName = cms.string('detachedQuadStepChi2Est'),
    MaxChi2 = cms.double(12.0),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    nSigma = cms.double(3),
    pTChargeCutThreshold = cms.double(-1)
)


process.detachedQuadStepTrajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('detachedQuadStepTrajectoryCleanerBySharedHits'),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(20.0),
    ValidHitBonus = cms.double(5.0),
    allowSharedFirstHit = cms.bool(True),
    fractionShared = cms.double(0.13)
)


process.detachedTripletStepChi2Est = cms.ESProducer("Chi2ChargeMeasurementEstimatorESProducer",
    ComponentName = cms.string('detachedTripletStepChi2Est'),
    MaxChi2 = cms.double(9.0),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutTight')
    ),
    nSigma = cms.double(3.0),
    pTChargeCutThreshold = cms.double(-1)
)


process.detachedTripletStepTrajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('detachedTripletStepTrajectoryCleanerBySharedHits'),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(20.0),
    ValidHitBonus = cms.double(5.0),
    allowSharedFirstHit = cms.bool(True),
    fractionShared = cms.double(0.13)
)


process.doubleVertex2TrkComputer = cms.ESProducer("SimpleSecondaryVertexESProducer",
    minTracks = cms.uint32(2),
    minVertices = cms.uint32(2),
    unBoost = cms.bool(False),
    use3d = cms.bool(True),
    useSignificance = cms.bool(True)
)


process.duplicateDisplaceTrackCandidatesChi2Est = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('duplicateDisplacedTrackCandidatesChi2Est'),
    MaxChi2 = cms.double(100),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    nSigma = cms.double(3)
)


process.duplicateTrackCandidatesChi2Est = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('duplicateTrackCandidatesChi2Est'),
    MaxChi2 = cms.double(100),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    nSigma = cms.double(3)
)


process.ecalDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('EcalDetIdAssociator'),
    etaBinSize = cms.double(0.02),
    nEta = cms.int32(300),
    nPhi = cms.int32(360)
)


process.ecalNextToDeadChannelESProducer = cms.ESProducer("EcalNextToDeadChannelESProducer",
    channelStatusThresholdForDead = cms.int32(12)
)


process.ecalSeverityLevel = cms.ESProducer("EcalSeverityLevelESProducer",
    dbstatusMask = cms.PSet(
        kBad = cms.vstring(
            'kNonRespondingIsolated', 
            'kDeadVFE', 
            'kDeadFE', 
            'kNoDataNoTP'
        ),
        kGood = cms.vstring('kOk'),
        kProblematic = cms.vstring(
            'kDAC', 
            'kNoLaser', 
            'kNoisy', 
            'kNNoisy', 
            'kNNNoisy', 
            'kNNNNoisy', 
            'kNNNNNoisy', 
            'kFixedG6', 
            'kFixedG1', 
            'kFixedG0'
        ),
        kRecovered = cms.vstring(),
        kTime = cms.vstring(),
        kWeird = cms.vstring()
    ),
    flagMask = cms.PSet(
        kBad = cms.vstring(
            'kFaultyHardware', 
            'kDead', 
            'kKilled'
        ),
        kGood = cms.vstring('kGood'),
        kProblematic = cms.vstring(
            'kPoorReco', 
            'kPoorCalib', 
            'kNoisy', 
            'kSaturated'
        ),
        kRecovered = cms.vstring(
            'kLeadingEdgeRecovered', 
            'kTowerRecovered'
        ),
        kTime = cms.vstring('kOutOfTime'),
        kWeird = cms.vstring(
            'kWeird', 
            'kDiWeird'
        )
    ),
    timeThresh = cms.double(2.0)
)


process.ecalSimulationParametersEB = cms.ESProducer("EcalSimParametersESModule",
    appendToDataLabel = cms.string(''),
    fromDD4Hep = cms.bool(False),
    name = cms.string('EcalHitsEB')
)


process.ecalSimulationParametersEE = cms.ESProducer("EcalSimParametersESModule",
    appendToDataLabel = cms.string(''),
    fromDD4Hep = cms.bool(False),
    name = cms.string('EcalHitsEE')
)


process.ecalSimulationParametersES = cms.ESProducer("EcalSimParametersESModule",
    appendToDataLabel = cms.string(''),
    fromDD4Hep = cms.bool(False),
    name = cms.string('EcalHitsES')
)


process.electronChi2 = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('electronChi2'),
    MaxChi2 = cms.double(100.0),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    nSigma = cms.double(3)
)


process.electronTrajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('electronTrajectoryCleanerBySharedHits'),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(0.0),
    ValidHitBonus = cms.double(1000.0),
    allowSharedFirstHit = cms.bool(True),
    fractionShared = cms.double(0.19)
)


process.fakeForIdealAlignment = cms.ESProducer("FakeAlignmentProducer",
    appendToDataLabel = cms.string('fakeForIdeal')
)


process.fakeTwinMuxParams = cms.ESProducer("L1TTwinMuxParamsESProducer",
    CorrectDTBxwRPC = cms.bool(True),
    dphiWindowBxShift = cms.uint32(9999),
    fwVersion = cms.uint32(1),
    useLowQDT = cms.bool(False),
    useOnlyDT = cms.bool(False),
    useOnlyRPC = cms.bool(False),
    useRpcBxForDtBelowQuality = cms.uint32(4),
    verbose = cms.bool(False)
)


process.fwdAnalyticalPropagator = cms.ESProducer("AnalyticalPropagatorESProducer",
    ComponentName = cms.string('fwdAnalyticalPropagator'),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum')
)


process.fwdElectronPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('fwdElectronPropagator'),
    Mass = cms.double(0.000511),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(False)
)


process.fwdGsfElectronPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('fwdGsfElectronPropagator'),
    Mass = cms.double(0.000511),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(False)
)


process.ghostTrackComputer = cms.ESProducer("GhostTrackESProducer",
    calibrationRecords = cms.vstring(
        'GhostTrackRecoVertex', 
        'GhostTrackPseudoVertex', 
        'GhostTrackNoVertex'
    ),
    categoryVariableName = cms.string('vertexCategory'),
    charmCut = cms.double(1.5),
    minimumTrackWeight = cms.double(0.5),
    recordLabel = cms.string(''),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useCategories = cms.bool(True)
)


process.hcalDDDRecConstants = cms.ESProducer("HcalDDDRecConstantsESModule",
    appendToDataLabel = cms.string('')
)


process.hcalDDDSimConstants = cms.ESProducer("HcalDDDSimConstantsESModule",
    appendToDataLabel = cms.string('')
)


process.hcalDDDSimulationConstants = cms.ESProducer("HcalDDDSimulationConstantsESModule",
    appendToDataLabel = cms.string('')
)


process.hcalDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('HcalDetIdAssociator'),
    etaBinSize = cms.double(0.087),
    hcalRegion = cms.int32(1),
    nEta = cms.int32(70),
    nPhi = cms.int32(72)
)


process.hcalOOTPileupESProducer = cms.ESProducer("OOTPileupDBCompatibilityESProducer")


process.hcalParameters = cms.ESProducer("HcalParametersESModule",
    appendToDataLabel = cms.string(''),
    fromDD4Hep = cms.bool(False)
)


process.hcalRecAlgos = cms.ESProducer("HcalRecAlgoESProducer",
    DropChannelStatusBits = cms.vstring(
        'HcalCellMask', 
        'HcalCellOff', 
        'HcalCellDead'
    ),
    RecoveredRecHitBits = cms.vstring(''),
    SeverityLevels = cms.VPSet(
        cms.PSet(
            ChannelStatus = cms.vstring(''),
            Level = cms.int32(0),
            RecHitFlags = cms.vstring('')
        ), 
        cms.PSet(
            ChannelStatus = cms.vstring('HcalCellCaloTowerProb'),
            Level = cms.int32(1),
            RecHitFlags = cms.vstring('')
        ), 
        cms.PSet(
            ChannelStatus = cms.vstring('HcalCellExcludeFromHBHENoiseSummary'),
            Level = cms.int32(5),
            RecHitFlags = cms.vstring(
                'HBHEIsolatedNoise', 
                'HFAnomalousHit'
            )
        ), 
        cms.PSet(
            ChannelStatus = cms.vstring(''),
            Level = cms.int32(8),
            RecHitFlags = cms.vstring(
                'HBHEHpdHitMultiplicity', 
                'HBHEFlatNoise', 
                'HBHESpikeNoise', 
                'HBHETS4TS5Noise', 
                'HBHENegativeNoise', 
                'HBHEOOTPU'
            )
        ), 
        cms.PSet(
            ChannelStatus = cms.vstring(''),
            Level = cms.int32(11),
            RecHitFlags = cms.vstring(
                'HFLongShort', 
                'HFS8S1Ratio', 
                'HFPET', 
                'HFSignalAsymmetry'
            )
        ), 
        cms.PSet(
            ChannelStatus = cms.vstring('HcalCellCaloTowerMask'),
            Level = cms.int32(12),
            RecHitFlags = cms.vstring('')
        ), 
        cms.PSet(
            ChannelStatus = cms.vstring('HcalCellHot'),
            Level = cms.int32(15),
            RecHitFlags = cms.vstring('')
        ), 
        cms.PSet(
            ChannelStatus = cms.vstring(
                'HcalCellOff', 
                'HcalCellDead'
            ),
            Level = cms.int32(20),
            RecHitFlags = cms.vstring('')
        )
    ),
    appendToDataLabel = cms.string(''),
    phase = cms.uint32(1)
)


process.hcalSimulationParameters = cms.ESProducer("HcalSimParametersESModule",
    appendToDataLabel = cms.string(''),
    fromDD4Hep = cms.bool(False)
)


process.hcalTopologyIdeal = cms.ESProducer("HcalTopologyIdealEP",
    Exclude = cms.untracked.string(''),
    MergePosition = cms.untracked.bool(False),
    appendToDataLabel = cms.string('')
)


process.hcal_db_producer = cms.ESProducer("HcalDbProducer",
    dump = cms.untracked.vstring(''),
    file = cms.untracked.string('')
)


process.hgcalEENumberingInitialize = cms.ESProducer("HGCalNumberingInitialization",
    Name = cms.untracked.string('HGCalEESensitive')
)


process.hgcalEEParametersInitialize = cms.ESProducer("HGCalParametersESModule",
    appendToDataLabel = cms.string(''),
    fromDD4Hep = cms.bool(False),
    name = cms.string('HGCalEESensitive'),
    name2 = cms.string('HGCalEE'),
    nameC = cms.string('HGCalEECell'),
    nameT = cms.string('HGCal'),
    nameW = cms.string('HGCalEEWafer')
)


process.hgcalHEScNumberingInitialize = cms.ESProducer("HGCalNumberingInitialization",
    Name = cms.untracked.string('HGCalHEScintillatorSensitive')
)


process.hgcalHEScParametersInitialize = cms.ESProducer("HGCalParametersESModule",
    appendToDataLabel = cms.string(''),
    fromDD4Hep = cms.bool(False),
    name = cms.string('HGCalHEScintillatorSensitive'),
    name2 = cms.string('HGCalEE'),
    nameC = cms.string('HGCalCell'),
    nameT = cms.string('HGCal'),
    nameW = cms.string('HGCalWafer')
)


process.hgcalHESiNumberingInitialize = cms.ESProducer("HGCalNumberingInitialization",
    Name = cms.untracked.string('HGCalHESiliconSensitive')
)


process.hgcalHESiParametersInitialize = cms.ESProducer("HGCalParametersESModule",
    appendToDataLabel = cms.string(''),
    fromDD4Hep = cms.bool(False),
    name = cms.string('HGCalHESiliconSensitive'),
    name2 = cms.string('HGCalEE'),
    nameC = cms.string('HGCalHECell'),
    nameT = cms.string('HGCal'),
    nameW = cms.string('HGCalHEWafer')
)


process.hgcalTriggerGeometryESProducer = cms.ESProducer("HGCalTriggerGeometryESProducer",
    TriggerGeometry = cms.PSet(
        DisconnectedLayers = cms.vuint32(
            2, 4, 6, 8, 10, 
            12, 14, 16, 18, 20, 
            22, 24, 26, 28
        ),
        DisconnectedModules = cms.vuint32(0),
        L1TCellNeighborsBHMapping = cms.FileInPath('L1Trigger/L1THGCal/data/triggercell_neighbor_mapping_BH_3x3_30deg_0.txt'),
        L1TCellNeighborsMapping = cms.FileInPath('L1Trigger/L1THGCal/data/triggercell_neighbor_mapping_8inch_aligned_192_432_0.txt'),
        L1TCellsBHMapping = cms.FileInPath('L1Trigger/L1THGCal/data/triggercell_mapping_BH_3x3_30deg_0.txt'),
        L1TCellsMapping = cms.FileInPath('L1Trigger/L1THGCal/data/triggercell_mapping_8inch_aligned_192_432_V8_0.txt'),
        L1TLinksMapping = cms.FileInPath('L1Trigger/L1THGCal/data/links_mapping_V11_decentralized_signaldriven_0.txt'),
        L1TModulesMapping = cms.FileInPath('L1Trigger/L1THGCal/data/panel_mapping_V11_decentralized_march20_1.txt'),
        ScintillatorLinksPerModule = cms.uint32(2),
        ScintillatorModuleSize = cms.uint32(6),
        ScintillatorTriggerCellSize = cms.uint32(2),
        TriggerGeometryName = cms.string('HGCalTriggerGeometryV9Imp2')
    ),
    isV9Geometry = cms.bool(True)
)


process.highPtTripletStepChi2Est = cms.ESProducer("Chi2ChargeMeasurementEstimatorESProducer",
    ComponentName = cms.string('highPtTripletStepChi2Est'),
    MaxChi2 = cms.double(20.0),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    nSigma = cms.double(3),
    pTChargeCutThreshold = cms.double(15.0)
)


process.highPtTripletStepTrajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('highPtTripletStepTrajectoryCleanerBySharedHits'),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(20.0),
    ValidHitBonus = cms.double(5.0),
    allowSharedFirstHit = cms.bool(True),
    fractionShared = cms.double(0.16)
)


process.hitCollectorForCosmicDCSeeds = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('hitCollectorForCosmicDCSeeds'),
    MaxChi2 = cms.double(100.0),
    MaxDisplacement = cms.double(100),
    MaxSagitta = cms.double(-1.0),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    nSigma = cms.double(4.0)
)


process.hitCollectorForOutInMuonSeeds = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('hitCollectorForOutInMuonSeeds'),
    MaxChi2 = cms.double(100.0),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    nSigma = cms.double(4.0)
)


process.hltESPChi2ChargeMeasurementEstimator16 = cms.ESProducer("Chi2ChargeMeasurementEstimatorESProducer",
    ComponentName = cms.string('hltESPChi2ChargeMeasurementEstimator16'),
    MaxChi2 = cms.double(16.0),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2.0),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000.0),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('HLTSiStripClusterChargeCutLoose')
    ),
    nSigma = cms.double(3.0),
    pTChargeCutThreshold = cms.double(-1.0)
)


process.hltESPChi2ChargeMeasurementEstimator30 = cms.ESProducer("Chi2ChargeMeasurementEstimatorESProducer",
    ComponentName = cms.string('hltESPChi2ChargeMeasurementEstimator30'),
    MaxChi2 = cms.double(30.0),
    MaxDisplacement = cms.double(100.0),
    MaxSagitta = cms.double(-1.0),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000.0),
    MinimalTolerance = cms.double(10.0),
    appendToDataLabel = cms.string(''),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('HLTSiStripClusterChargeCutNone')
    ),
    nSigma = cms.double(3.0),
    pTChargeCutThreshold = cms.double(-1.0)
)


process.hltESPChi2ChargeMeasurementEstimator9 = cms.ESProducer("Chi2ChargeMeasurementEstimatorESProducer",
    ComponentName = cms.string('hltESPChi2ChargeMeasurementEstimator9'),
    MaxChi2 = cms.double(9.0),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2.0),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000.0),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('HLTSiStripClusterChargeCutLoose')
    ),
    nSigma = cms.double(3.0),
    pTChargeCutThreshold = cms.double(15.0)
)


process.hltESPChi2MeasurementEstimator100 = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('hltESPChi2MeasurementEstimator100'),
    MaxChi2 = cms.double(40.0),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2.0),
    MinPtForHitRecoveryInGluedDet = cms.double(1e+12),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    nSigma = cms.double(4.0)
)


process.hltESPChi2MeasurementEstimator30 = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('hltESPChi2MeasurementEstimator30'),
    MaxChi2 = cms.double(30.0),
    MaxDisplacement = cms.double(100.0),
    MaxSagitta = cms.double(-1.0),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000.0),
    MinimalTolerance = cms.double(10.0),
    appendToDataLabel = cms.string(''),
    nSigma = cms.double(3.0)
)


process.hltESPDummyDetLayerGeometry = cms.ESProducer("DetLayerGeometryESProducer",
    ComponentName = cms.string('hltESPDummyDetLayerGeometry')
)


process.hltESPFastSteppingHelixPropagatorAny = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('hltESPFastSteppingHelixPropagatorAny'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('anyDirection'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(True)
)


process.hltESPFastSteppingHelixPropagatorOpposite = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('hltESPFastSteppingHelixPropagatorOpposite'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(True)
)


process.hltESPGlobalDetLayerGeometry = cms.ESProducer("GlobalDetLayerGeometryESProducer",
    ComponentName = cms.string('hltESPGlobalDetLayerGeometry')
)


process.hltESPKFFittingSmootherWithOutliersRejectionAndRK = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('hltESPKFFittingSmootherWithOutliersRejectionAndRK'),
    EstimateCut = cms.double(20.0),
    Fitter = cms.string('hltESPRKTrajectoryFitter'),
    LogPixelProbabilityCut = cms.double(-14.0),
    MaxFractionOutliers = cms.double(0.3),
    MaxNumberOfOutliers = cms.int32(3),
    MinDof = cms.int32(2),
    MinNumberOfHits = cms.int32(3),
    NoInvalidHitsBeginEnd = cms.bool(True),
    NoOutliersBeginEnd = cms.bool(False),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('hltESPRKTrajectorySmoother'),
    appendToDataLabel = cms.string('')
)


process.hltESPKFTrajectorySmootherForMuonTrackLoader = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('hltESPKFTrajectorySmootherForMuonTrackLoader'),
    Estimator = cms.string('hltESPChi2MeasurementEstimator30'),
    Propagator = cms.string('hltESPSmartPropagatorAnyOpposite'),
    RecoGeometry = cms.string('hltESPDummyDetLayerGeometry'),
    Updator = cms.string('hltESPKFUpdator'),
    appendToDataLabel = cms.string(''),
    errorRescaling = cms.double(10.0),
    minHits = cms.int32(3)
)


process.hltESPKFUpdator = cms.ESProducer("KFUpdatorESProducer",
    ComponentName = cms.string('hltESPKFUpdator')
)


process.hltESPL3MuKFTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('hltESPL3MuKFTrajectoryFitter'),
    Estimator = cms.string('hltESPChi2MeasurementEstimator30'),
    Propagator = cms.string('hltESPSmartPropagatorAny'),
    RecoGeometry = cms.string('hltESPDummyDetLayerGeometry'),
    Updator = cms.string('hltESPKFUpdator'),
    appendToDataLabel = cms.string(''),
    minHits = cms.int32(3)
)


process.hltESPMeasurementTracker = cms.ESProducer("MeasurementTrackerESProducer",
    ComponentName = cms.string('hltESPMeasurementTracker'),
    DebugPixelModuleQualityDB = cms.untracked.bool(False),
    DebugPixelROCQualityDB = cms.untracked.bool(False),
    DebugStripAPVFiberQualityDB = cms.untracked.bool(False),
    DebugStripModuleQualityDB = cms.untracked.bool(False),
    DebugStripStripQualityDB = cms.untracked.bool(False),
    HitMatcher = cms.string('StandardMatcher'),
    MaskBadAPVFibers = cms.bool(True),
    PixelCPE = cms.string('PixelCPEGeneric'),
    SiStripQualityLabel = cms.string(''),
    StripCPE = cms.string('hltESPStripCPEfromTrackAngle'),
    UsePixelModuleQualityDB = cms.bool(True),
    UsePixelROCQualityDB = cms.bool(True),
    UseStripAPVFiberQualityDB = cms.bool(True),
    UseStripModuleQualityDB = cms.bool(True),
    UseStripStripQualityDB = cms.bool(True),
    badStripCuts = cms.PSet(
        TEC = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        ),
        TIB = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        ),
        TID = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        ),
        TOB = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        )
    )
)


process.hltESPMuonTransientTrackingRecHitBuilder = cms.ESProducer("MuonTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('hltESPMuonTransientTrackingRecHitBuilder')
)


process.hltESPRKTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('hltESPRKTrajectoryFitter'),
    Estimator = cms.string('hltESPChi2MeasurementEstimator30'),
    Propagator = cms.string('hltESPRungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('hltESPGlobalDetLayerGeometry'),
    Updator = cms.string('hltESPKFUpdator'),
    appendToDataLabel = cms.string(''),
    minHits = cms.int32(3)
)


process.hltESPRKTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('hltESPRKTrajectorySmoother'),
    Estimator = cms.string('hltESPChi2MeasurementEstimator30'),
    Propagator = cms.string('hltESPRungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('hltESPGlobalDetLayerGeometry'),
    Updator = cms.string('hltESPKFUpdator'),
    appendToDataLabel = cms.string(''),
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3)
)


process.hltESPRungeKuttaTrackerPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('hltESPRungeKuttaTrackerPropagator'),
    Mass = cms.double(0.105),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(True)
)


process.hltESPSmartPropagator = cms.ESProducer("SmartPropagatorESProducer",
    ComponentName = cms.string('hltESPSmartPropagator'),
    Epsilon = cms.double(5.0),
    MuonPropagator = cms.string('hltESPSteppingHelixPropagatorAlong'),
    PropagationDirection = cms.string('alongMomentum'),
    TrackerPropagator = cms.string('PropagatorWithMaterial')
)


process.hltESPSmartPropagatorAny = cms.ESProducer("SmartPropagatorESProducer",
    ComponentName = cms.string('hltESPSmartPropagatorAny'),
    Epsilon = cms.double(5.0),
    MuonPropagator = cms.string('SteppingHelixPropagatorAny'),
    PropagationDirection = cms.string('alongMomentum'),
    TrackerPropagator = cms.string('PropagatorWithMaterial')
)


process.hltESPSmartPropagatorAnyOpposite = cms.ESProducer("SmartPropagatorESProducer",
    ComponentName = cms.string('hltESPSmartPropagatorAnyOpposite'),
    Epsilon = cms.double(5.0),
    MuonPropagator = cms.string('SteppingHelixPropagatorAny'),
    PropagationDirection = cms.string('oppositeToMomentum'),
    TrackerPropagator = cms.string('PropagatorWithMaterialOpposite')
)


process.hltESPSteppingHelixPropagatorAlong = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('hltESPSteppingHelixPropagatorAlong'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('alongMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False)
)


process.hltESPSteppingHelixPropagatorOpposite = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('hltESPSteppingHelixPropagatorOpposite'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False)
)


process.hltESPTTRHBuilderPixelOnly = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('hltESPTTRHBuilderPixelOnly'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    Matcher = cms.string('StandardMatcher'),
    Phase2StripCPE = cms.string(''),
    PixelCPE = cms.string('PixelCPEGeneric'),
    StripCPE = cms.string('Fake')
)


process.hltESPTrackAlgoPriorityOrder = cms.ESProducer("TrackAlgoPriorityOrderESProducer",
    ComponentName = cms.string('hltESPTrackAlgoPriorityOrder'),
    algoOrder = cms.vstring(),
    appendToDataLabel = cms.string('')
)


process.hltESPTrajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('hltESPTrajectoryCleanerBySharedHits'),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(0.0),
    ValidHitBonus = cms.double(100.0),
    allowSharedFirstHit = cms.bool(False),
    fractionShared = cms.double(0.5)
)


process.hltPhase2L3MuonHighPtTripletStepChi2Est = cms.ESProducer("Chi2ChargeMeasurementEstimatorESProducer",
    ComponentName = cms.string('hltPhase2L3MuonHighPtTripletStepChi2Est'),
    MaxChi2 = cms.double(16.0),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000.0),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutLoose')
    ),
    nSigma = cms.double(3),
    pTChargeCutThreshold = cms.double(-1)
)


process.hltPhase2L3MuonHighPtTripletStepTrajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('hltPhase2L3MuonHighPtTripletStepTrajectoryCleanerBySharedHits'),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(20.0),
    ValidHitBonus = cms.double(5.0),
    allowSharedFirstHit = cms.bool(True),
    fractionShared = cms.double(0.16)
)


process.hltPhase2L3MuonInitialStepChi2Est = cms.ESProducer("Chi2ChargeMeasurementEstimatorESProducer",
    ComponentName = cms.string('hltPhase2L3MuonInitialStepChi2Est'),
    MaxChi2 = cms.double(9.0),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000.0),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutLoose')
    ),
    nSigma = cms.double(3.0),
    pTChargeCutThreshold = cms.double(15.0)
)


process.hltPhase2L3MuonPixelTrackCleanerBySharedHits = cms.ESProducer("PixelTrackCleanerBySharedHitsESProducer",
    ComponentName = cms.string('hltPhase2L3MuonPixelTrackCleanerBySharedHits'),
    appendToDataLabel = cms.string(''),
    useQuadrupletAlgo = cms.bool(False)
)


process.hltPhase2L3MuonTrackAlgoPriorityOrder = cms.ESProducer("TrackAlgoPriorityOrderESProducer",
    ComponentName = cms.string('hltPhase2L3MuonTrackAlgoPriorityOrder'),
    algoOrder = cms.vstring(
        'initialStep', 
        'highPtTripletStep'
    ),
    appendToDataLabel = cms.string('')
)


process.hltPixelTracksCleanerBySharedHits = cms.ESProducer("PixelTrackCleanerBySharedHitsESProducer",
    ComponentName = cms.string('hltPixelTracksCleanerBySharedHits'),
    appendToDataLabel = cms.string(''),
    useQuadrupletAlgo = cms.bool(False)
)


process.hoDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('HODetIdAssociator'),
    etaBinSize = cms.double(0.087),
    nEta = cms.int32(30),
    nPhi = cms.int32(72)
)


process.idealForDigiCSCGeometry = cms.ESProducer("CSCGeometryESModule",
    alignmentsLabel = cms.string('fakeForIdeal'),
    appendToDataLabel = cms.string('idealForDigi'),
    applyAlignment = cms.bool(False),
    debugV = cms.untracked.bool(False),
    useCentreTIOffsets = cms.bool(False),
    useDDD = cms.bool(True),
    useGangedStripsInME1a = cms.bool(False),
    useOnlyWiresInME1a = cms.bool(False),
    useRealWireGeometry = cms.bool(True)
)


process.idealForDigiDTGeometry = cms.ESProducer("DTGeometryESModule",
    alignmentsLabel = cms.string('fakeForIdeal'),
    appendToDataLabel = cms.string('idealForDigi'),
    applyAlignment = cms.bool(False),
    fromDDD = cms.bool(True)
)


process.idealForDigiMTDGeometry = cms.ESProducer("MTDDigiGeometryESModule",
    alignmentsLabel = cms.string('fakeForIdeal'),
    appendToDataLabel = cms.string('idealForDigi'),
    applyAlignment = cms.bool(False),
    fromDDD = cms.bool(True)
)


process.idealForDigiTrackerGeometry = cms.ESProducer("TrackerDigiGeometryESModule",
    alignmentsLabel = cms.string('fakeForIdeal'),
    appendToDataLabel = cms.string('idealForDigi'),
    applyAlignment = cms.bool(False),
    fromDDD = cms.bool(True)
)


process.impactParameterMVAComputer = cms.ESProducer("GenericMVAJetTagESProducer",
    calibrationRecord = cms.string('ImpactParameterMVA'),
    recordLabel = cms.string(''),
    useCategories = cms.bool(False)
)


process.initialStepChi2Est = cms.ESProducer("Chi2ChargeMeasurementEstimatorESProducer",
    ComponentName = cms.string('initialStepChi2Est'),
    MaxChi2 = cms.double(30.0),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    nSigma = cms.double(3.0),
    pTChargeCutThreshold = cms.double(15.0)
)


process.initialStepChi2EstPreSplitting = cms.ESProducer("Chi2ChargeMeasurementEstimatorESProducer",
    ComponentName = cms.string('initialStepChi2EstPreSplitting'),
    MaxChi2 = cms.double(16.0),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutLoose')
    ),
    nSigma = cms.double(3.0),
    pTChargeCutThreshold = cms.double(-1)
)


process.jetBProbabilityComputer = cms.ESProducer("JetBProbabilityESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumProbability = cms.double(0.005),
    numberOfBTracks = cms.uint32(4),
    trackIpSign = cms.int32(1),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False)
)


process.jetCoreRegionalStepChi2Est = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('jetCoreRegionalStepChi2Est'),
    MaxChi2 = cms.double(30.0),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    nSigma = cms.double(3.0)
)


process.jetProbabilityComputer = cms.ESProducer("JetProbabilityESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(0.3),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumProbability = cms.double(0.005),
    trackIpSign = cms.int32(1),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False)
)


process.lowPtGsfEleFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('lowPtGsfEleFittingSmoother'),
    EstimateCut = cms.double(-1),
    Fitter = cms.string('GsfTrajectoryFitter'),
    LogPixelProbabilityCut = cms.double(0),
    MaxFractionOutliers = cms.double(0.3),
    MaxNumberOfOutliers = cms.int32(3),
    MinDof = cms.int32(2),
    MinNumberOfHits = cms.int32(2),
    NoInvalidHitsBeginEnd = cms.bool(True),
    NoOutliersBeginEnd = cms.bool(False),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('GsfTrajectorySmoother'),
    appendToDataLabel = cms.string('')
)


process.lowPtQuadStepChi2Est = cms.ESProducer("Chi2ChargeMeasurementEstimatorESProducer",
    ComponentName = cms.string('lowPtQuadStepChi2Est'),
    MaxChi2 = cms.double(16.0),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    nSigma = cms.double(3),
    pTChargeCutThreshold = cms.double(-1)
)


process.lowPtQuadStepTrajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('lowPtQuadStepTrajectoryCleanerBySharedHits'),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(20.0),
    ValidHitBonus = cms.double(5.0),
    allowSharedFirstHit = cms.bool(True),
    fractionShared = cms.double(0.09)
)


process.lowPtTripletStepChi2Est = cms.ESProducer("Chi2ChargeMeasurementEstimatorESProducer",
    ComponentName = cms.string('lowPtTripletStepChi2Est'),
    MaxChi2 = cms.double(9.0),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutTight')
    ),
    nSigma = cms.double(3.0),
    pTChargeCutThreshold = cms.double(-1)
)


process.lowPtTripletStepTrajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('lowPtTripletStepTrajectoryCleanerBySharedHits'),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(20.0),
    ValidHitBonus = cms.double(5.0),
    allowSharedFirstHit = cms.bool(True),
    fractionShared = cms.double(0.09)
)


process.mixedTripletStepChi2Est = cms.ESProducer("Chi2ChargeMeasurementEstimatorESProducer",
    ComponentName = cms.string('mixedTripletStepChi2Est'),
    MaxChi2 = cms.double(16.0),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutTight')
    ),
    nSigma = cms.double(3.0),
    pTChargeCutThreshold = cms.double(-1)
)


process.mixedTripletStepClusterShapeHitFilter = cms.ESProducer("ClusterShapeHitFilterESProducer",
    ComponentName = cms.string('mixedTripletStepClusterShapeHitFilter'),
    PixelShapeFile = cms.string('RecoPixelVertexing/PixelLowPtUtilities/data/ITShapePhase2_all.par'),
    PixelShapeFileL1 = cms.string('RecoPixelVertexing/PixelLowPtUtilities/data/ITShapePhase2_all.par'),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutTight')
    )
)


process.mixedTripletStepPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('mixedTripletStepPropagator'),
    Mass = cms.double(0.105),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(0.1),
    useRungeKutta = cms.bool(False)
)


process.mixedTripletStepPropagatorOpposite = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('mixedTripletStepPropagatorOpposite'),
    Mass = cms.double(0.105),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(0.1),
    useRungeKutta = cms.bool(False)
)


process.mixedTripletStepTrajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('mixedTripletStepTrajectoryCleanerBySharedHits'),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(20.0),
    ValidHitBonus = cms.double(5.0),
    allowSharedFirstHit = cms.bool(True),
    fractionShared = cms.double(0.11)
)


process.mtdDetLayerGeometry = cms.ESProducer("MTDDetLayerGeometryESProducer")


process.mtdGeometry = cms.ESProducer("MTDDigiGeometryESModule",
    alignmentsLabel = cms.string(''),
    appendToDataLabel = cms.string(''),
    applyAlignment = cms.bool(False),
    fromDDD = cms.bool(True)
)


process.mtdNumberingGeometry = cms.ESProducer("MTDGeometricTimingDetESModule",
    appendToDataLabel = cms.string(''),
    fromDD4hep = cms.bool(False),
    fromDDD = cms.bool(True)
)


process.mtdParameters = cms.ESProducer("MTDParametersESModule",
    appendToDataLabel = cms.string(''),
    fromDD4hep = cms.bool(False)
)


process.mtdTopology = cms.ESProducer("MTDTopologyEP",
    appendToDataLabel = cms.string('')
)


process.muonDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('MuonDetIdAssociator'),
    etaBinSize = cms.double(0.125),
    includeBadChambers = cms.bool(True),
    includeGEM = cms.bool(True),
    includeME0 = cms.bool(True),
    nEta = cms.int32(48),
    nPhi = cms.int32(48)
)


process.muonGeometryConstants = cms.ESProducer("MuonGeometryConstantsESModule",
    appendToDataLabel = cms.string(''),
    fromDD4Hep = cms.bool(False)
)


process.muonSeededFittingSmootherWithOutliersRejectionAndRK = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(False),
    ComponentName = cms.string('muonSeededFittingSmootherWithOutliersRejectionAndRK'),
    EstimateCut = cms.double(50.0),
    Fitter = cms.string('RKFitter'),
    LogPixelProbabilityCut = cms.double(0),
    MaxFractionOutliers = cms.double(0.3),
    MaxNumberOfOutliers = cms.int32(3),
    MinDof = cms.int32(2),
    MinNumberOfHits = cms.int32(3),
    NoInvalidHitsBeginEnd = cms.bool(True),
    NoOutliersBeginEnd = cms.bool(False),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('RKSmoother'),
    appendToDataLabel = cms.string('')
)


process.muonSeededMeasurementEstimatorForInOut = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('muonSeededMeasurementEstimatorForInOut'),
    MaxChi2 = cms.double(400.0),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    nSigma = cms.double(4.0)
)


process.muonSeededMeasurementEstimatorForOutIn = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('muonSeededMeasurementEstimatorForOutIn'),
    MaxChi2 = cms.double(30.0),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(-1.0),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    nSigma = cms.double(3.0)
)


process.muonSeededMeasurementEstimatorForOutInDisplaced = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('muonSeededMeasurementEstimatorForOutInDisplaced'),
    MaxChi2 = cms.double(30.0),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    nSigma = cms.double(3.0)
)


process.muonSeededTrajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('muonSeededTrajectoryCleanerBySharedHits'),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(1.0),
    ValidHitBonus = cms.double(1000.0),
    allowSharedFirstHit = cms.bool(True),
    fractionShared = cms.double(0.1)
)


process.myTTRHBuilderWithoutAngle = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('PixelTTRHBuilderWithoutAngle'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    Matcher = cms.string('StandardMatcher'),
    Phase2StripCPE = cms.string('Phase2StripCPE'),
    PixelCPE = cms.string('PixelCPEGeneric'),
    StripCPE = cms.string('Fake')
)


process.myTTRHBuilderWithoutAngle4MixedPairs = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('TTRHBuilderWithoutAngle4MixedPairs'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    Matcher = cms.string('StandardMatcher'),
    Phase2StripCPE = cms.string('Phase2StripCPE'),
    PixelCPE = cms.string('PixelCPEGeneric'),
    StripCPE = cms.string('Fake')
)


process.myTTRHBuilderWithoutAngle4MixedTriplets = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('TTRHBuilderWithoutAngle4MixedTriplets'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    Matcher = cms.string('StandardMatcher'),
    Phase2StripCPE = cms.string('Phase2StripCPE'),
    PixelCPE = cms.string('PixelCPEGeneric'),
    StripCPE = cms.string('Fake')
)


process.myTTRHBuilderWithoutAngle4PixelPairs = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('TTRHBuilderWithoutAngle4PixelPairs'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    Matcher = cms.string('StandardMatcher'),
    Phase2StripCPE = cms.string('Phase2StripCPE'),
    PixelCPE = cms.string('PixelCPEGeneric'),
    StripCPE = cms.string('Fake')
)


process.myTTRHBuilderWithoutAngle4PixelTriplets = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('TTRHBuilderWithoutAngle4PixelTriplets'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    Matcher = cms.string('StandardMatcher'),
    Phase2StripCPE = cms.string('Phase2StripCPE'),
    PixelCPE = cms.string('PixelCPEGeneric'),
    StripCPE = cms.string('Fake')
)


process.navigationSchoolESProducer = cms.ESProducer("NavigationSchoolESProducer",
    ComponentName = cms.string('SimpleNavigationSchool'),
    SimpleMagneticField = cms.string('')
)


process.negativeCombinedMVAV2Computer = cms.ESProducer("CombinedMVAV2JetTagESProducer",
    jetTagComputers = cms.vstring(
        'negativeOnlyJetProbabilityComputer', 
        'negativeOnlyJetBProbabilityComputer', 
        'negativeCombinedSecondaryVertexV2Computer', 
        'negativeSoftPFMuonComputer', 
        'negativeSoftPFElectronComputer'
    ),
    mvaName = cms.string('bdt'),
    spectators = cms.vstring(),
    useAdaBoost = cms.bool(True),
    useCondDB = cms.bool(False),
    useGBRForest = cms.bool(True),
    variables = cms.vstring(
        'Jet_CSV', 
        'Jet_CSVIVF', 
        'Jet_JP', 
        'Jet_JBP', 
        'Jet_SoftMu', 
        'Jet_SoftEl'
    ),
    weightFile = cms.FileInPath('RecoBTag/Combined/data/CombinedMVAV2_13_07_2015.weights.xml.gz')
)


process.negativeCombinedSecondaryVertexV2Computer = cms.ESProducer("CombinedSecondaryVertexESProducer",
    SoftLeptonFlip = cms.bool(False),
    calibrationRecords = cms.vstring(
        'CombinedSVIVFV2RecoVertex', 
        'CombinedSVIVFV2PseudoVertex', 
        'CombinedSVIVFV2NoVertex'
    ),
    categoryVariableName = cms.string('vertexCategory'),
    charmCut = cms.double(1.5),
    correctVertexMass = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    pseudoMultiplicityMin = cms.uint32(2),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    recordLabel = cms.string(''),
    trackFlip = cms.bool(True),
    trackMultiplicityMin = cms.uint32(2),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(-2.0),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useCategories = cms.bool(True),
    useTrackWeights = cms.bool(True),
    vertexFlip = cms.bool(True)
)


process.negativeOnlyJetBProbabilityComputer = cms.ESProducer("JetBProbabilityESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumProbability = cms.double(0.005),
    numberOfBTracks = cms.uint32(4),
    trackIpSign = cms.int32(-1),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False)
)


process.negativeOnlyJetProbabilityComputer = cms.ESProducer("JetProbabilityESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(0.3),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumProbability = cms.double(0.005),
    trackIpSign = cms.int32(-1),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False)
)


process.negativeSoftPFElectronByIP2dComputer = cms.ESProducer("LeptonTaggerByIPESProducer",
    ipSign = cms.string('negative'),
    use3d = cms.bool(False)
)


process.negativeSoftPFElectronByIP3dComputer = cms.ESProducer("LeptonTaggerByIPESProducer",
    ipSign = cms.string('negative'),
    use3d = cms.bool(True)
)


process.negativeSoftPFElectronByPtComputer = cms.ESProducer("LeptonTaggerByPtESProducer",
    ipSign = cms.string('negative')
)


process.negativeSoftPFElectronComputer = cms.ESProducer("ElectronTaggerESProducer",
    gbrForestLabel = cms.string('btag_SoftPFElectron_BDT'),
    ipSign = cms.string('negative'),
    useAdaBoost = cms.bool(False),
    useCondDB = cms.bool(True),
    useGBRForest = cms.bool(True),
    weightFile = cms.FileInPath('RecoBTag/SoftLepton/data/SoftPFElectron_BDT.weights.xml.gz')
)


process.negativeSoftPFMuonByIP2dComputer = cms.ESProducer("LeptonTaggerByIPESProducer",
    ipSign = cms.string('negative'),
    use3d = cms.bool(False)
)


process.negativeSoftPFMuonByIP3dComputer = cms.ESProducer("LeptonTaggerByIPESProducer",
    ipSign = cms.string('negative'),
    use3d = cms.bool(True)
)


process.negativeSoftPFMuonByPtComputer = cms.ESProducer("LeptonTaggerByPtESProducer",
    ipSign = cms.string('negative')
)


process.negativeSoftPFMuonComputer = cms.ESProducer("MuonTaggerESProducer",
    gbrForestLabel = cms.string('btag_SoftPFMuon_BDT'),
    ipSign = cms.string('negative'),
    useAdaBoost = cms.bool(True),
    useCondDB = cms.bool(True),
    useGBRForest = cms.bool(True),
    weightFile = cms.FileInPath('RecoBTag/SoftLepton/data/SoftPFMuon_BDT.weights.xml.gz')
)


process.negativeTrackCounting3D2ndComputer = cms.ESProducer("NegativeTrackCountingESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumImpactParameter = cms.double(-1),
    nthTrack = cms.int32(2),
    trackQualityClass = cms.string('any'),
    useSignedImpactParameterSig = cms.bool(True),
    useVariableJTA = cms.bool(False)
)


process.negativeTrackCounting3D3rdComputer = cms.ESProducer("NegativeTrackCountingESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumImpactParameter = cms.double(-1),
    nthTrack = cms.int32(3),
    trackQualityClass = cms.string('any'),
    useSignedImpactParameterSig = cms.bool(True),
    useVariableJTA = cms.bool(False)
)


process.oppositeToMomElePropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('oppositeToMomElePropagator'),
    Mass = cms.double(0.000511),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(False)
)


process.phase2StripCPEESProducer = cms.ESProducer("Phase2StripCPEESProducer",
    ComponentType = cms.string('Phase2StripCPE'),
    parameters = cms.PSet(
        LorentzAngle_DB = cms.bool(False),
        TanLorentzAnglePerTesla = cms.double(0.07)
    )
)


process.phase2StripCPEGeometricESProducer = cms.ESProducer("Phase2StripCPEESProducer",
    ComponentType = cms.string('Phase2StripCPEGeometric'),
    parameters = cms.PSet(

    )
)


process.pixelLessStepChi2Est = cms.ESProducer("Chi2ChargeMeasurementEstimatorESProducer",
    ComponentName = cms.string('pixelLessStepChi2Est'),
    MaxChi2 = cms.double(16.0),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutTight')
    ),
    nSigma = cms.double(3.0),
    pTChargeCutThreshold = cms.double(-1)
)


process.pixelLessStepClusterShapeHitFilter = cms.ESProducer("ClusterShapeHitFilterESProducer",
    ComponentName = cms.string('pixelLessStepClusterShapeHitFilter'),
    PixelShapeFile = cms.string('RecoPixelVertexing/PixelLowPtUtilities/data/ITShapePhase2_all.par'),
    PixelShapeFileL1 = cms.string('RecoPixelVertexing/PixelLowPtUtilities/data/ITShapePhase2_all.par'),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutTight')
    ),
    doStripShapeCut = cms.bool(False)
)


process.pixelLessStepTrajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('pixelLessStepTrajectoryCleanerBySharedHits'),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(20.0),
    ValidHitBonus = cms.double(5.0),
    allowSharedFirstHit = cms.bool(True),
    fractionShared = cms.double(0.11)
)


process.pixelPairStepChi2Est = cms.ESProducer("Chi2ChargeMeasurementEstimatorESProducer",
    ComponentName = cms.string('pixelPairStepChi2Est'),
    MaxChi2 = cms.double(9.0),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutLoose')
    ),
    nSigma = cms.double(3.0),
    pTChargeCutThreshold = cms.double(15.0)
)


process.pixelPairStepTrajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('pixelPairStepTrajectoryCleanerBySharedHits'),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(20.0),
    ValidHitBonus = cms.double(5.0),
    allowSharedFirstHit = cms.bool(True),
    fractionShared = cms.double(0.09)
)


process.pixelTrackCleanerBySharedHits = cms.ESProducer("PixelTrackCleanerBySharedHitsESProducer",
    ComponentName = cms.string('pixelTrackCleanerBySharedHits'),
    appendToDataLabel = cms.string(''),
    useQuadrupletAlgo = cms.bool(False)
)


process.positiveCombinedMVAV2Computer = cms.ESProducer("CombinedMVAV2JetTagESProducer",
    jetTagComputers = cms.vstring(
        'positiveOnlyJetProbabilityComputer', 
        'positiveOnlyJetBProbabilityComputer', 
        'positiveCombinedSecondaryVertexV2Computer', 
        'positiveSoftPFMuonComputer', 
        'positiveSoftPFElectronComputer'
    ),
    mvaName = cms.string('bdt'),
    spectators = cms.vstring(),
    useAdaBoost = cms.bool(True),
    useCondDB = cms.bool(False),
    useGBRForest = cms.bool(True),
    variables = cms.vstring(
        'Jet_CSV', 
        'Jet_CSVIVF', 
        'Jet_JP', 
        'Jet_JBP', 
        'Jet_SoftMu', 
        'Jet_SoftEl'
    ),
    weightFile = cms.FileInPath('RecoBTag/Combined/data/CombinedMVAV2_13_07_2015.weights.xml.gz')
)


process.positiveCombinedSecondaryVertexV2Computer = cms.ESProducer("CombinedSecondaryVertexESProducer",
    SoftLeptonFlip = cms.bool(False),
    calibrationRecords = cms.vstring(
        'CombinedSVIVFV2RecoVertex', 
        'CombinedSVIVFV2PseudoVertex', 
        'CombinedSVIVFV2NoVertex'
    ),
    categoryVariableName = cms.string('vertexCategory'),
    charmCut = cms.double(1.5),
    correctVertexMass = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    pseudoMultiplicityMin = cms.uint32(2),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    recordLabel = cms.string(''),
    trackFlip = cms.bool(False),
    trackMultiplicityMin = cms.uint32(2),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useCategories = cms.bool(True),
    useTrackWeights = cms.bool(True),
    vertexFlip = cms.bool(False)
)


process.positiveOnlyJetBProbabilityComputer = cms.ESProducer("JetBProbabilityESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumProbability = cms.double(0.005),
    numberOfBTracks = cms.uint32(4),
    trackIpSign = cms.int32(1),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False)
)


process.positiveOnlyJetProbabilityComputer = cms.ESProducer("JetProbabilityESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(0.3),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumProbability = cms.double(0.005),
    trackIpSign = cms.int32(1),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False)
)


process.positiveSoftPFElectronByIP2dComputer = cms.ESProducer("LeptonTaggerByIPESProducer",
    ipSign = cms.string('positive'),
    use3d = cms.bool(False)
)


process.positiveSoftPFElectronByIP3dComputer = cms.ESProducer("LeptonTaggerByIPESProducer",
    ipSign = cms.string('positive'),
    use3d = cms.bool(True)
)


process.positiveSoftPFElectronByPtComputer = cms.ESProducer("LeptonTaggerByPtESProducer",
    ipSign = cms.string('positive')
)


process.positiveSoftPFElectronComputer = cms.ESProducer("ElectronTaggerESProducer",
    gbrForestLabel = cms.string('btag_SoftPFElectron_BDT'),
    ipSign = cms.string('positive'),
    useAdaBoost = cms.bool(False),
    useCondDB = cms.bool(True),
    useGBRForest = cms.bool(True),
    weightFile = cms.FileInPath('RecoBTag/SoftLepton/data/SoftPFElectron_BDT.weights.xml.gz')
)


process.positiveSoftPFMuonByIP2dComputer = cms.ESProducer("LeptonTaggerByIPESProducer",
    ipSign = cms.string('positive'),
    use3d = cms.bool(False)
)


process.positiveSoftPFMuonByIP3dComputer = cms.ESProducer("LeptonTaggerByIPESProducer",
    ipSign = cms.string('positive'),
    use3d = cms.bool(True)
)


process.positiveSoftPFMuonByPtComputer = cms.ESProducer("LeptonTaggerByPtESProducer",
    ipSign = cms.string('positive')
)


process.positiveSoftPFMuonComputer = cms.ESProducer("MuonTaggerESProducer",
    gbrForestLabel = cms.string('btag_SoftPFMuon_BDT'),
    ipSign = cms.string('positive'),
    useAdaBoost = cms.bool(True),
    useCondDB = cms.bool(True),
    useGBRForest = cms.bool(True),
    weightFile = cms.FileInPath('RecoBTag/SoftLepton/data/SoftPFMuon_BDT.weights.xml.gz')
)


process.preshowerDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('PreshowerDetIdAssociator'),
    etaBinSize = cms.double(0.1),
    nEta = cms.int32(60),
    nPhi = cms.int32(30)
)


process.siPixel2DTemplateDBObjectESProducer = cms.ESProducer("SiPixel2DTemplateDBObjectESProducer")


process.siPixelQualityESProducer = cms.ESProducer("SiPixelQualityESProducer",
    ListOfRecordToMerge = cms.VPSet(
        cms.PSet(
            record = cms.string('SiPixelQualityFromDbRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('SiPixelDetVOffRcd'),
            tag = cms.string('')
        )
    ),
    siPixelQualityLabel = cms.string('')
)


process.siPixelTemplateDBObjectESProducer = cms.ESProducer("SiPixelTemplateDBObjectESProducer")


process.siStripBackPlaneCorrectionDepESProducer = cms.ESProducer("SiStripBackPlaneCorrectionDepESProducer",
    BackPlaneCorrectionDeconvMode = cms.PSet(
        label = cms.untracked.string('deconvolution'),
        record = cms.string('SiStripBackPlaneCorrectionRcd')
    ),
    BackPlaneCorrectionPeakMode = cms.PSet(
        label = cms.untracked.string('peak'),
        record = cms.string('SiStripBackPlaneCorrectionRcd')
    ),
    LatencyRecord = cms.PSet(
        label = cms.untracked.string(''),
        record = cms.string('SiStripLatencyRcd')
    )
)


process.siStripGainESProducer = cms.ESProducer("SiStripGainESProducer",
    APVGain = cms.VPSet(
        cms.PSet(
            Label = cms.untracked.string(''),
            NormalizationFactor = cms.untracked.double(1.0),
            Record = cms.string('SiStripApvGainRcd')
        ), 
        cms.PSet(
            Label = cms.untracked.string(''),
            NormalizationFactor = cms.untracked.double(1.0),
            Record = cms.string('SiStripApvGain2Rcd')
        )
    ),
    AutomaticNormalization = cms.bool(False),
    appendToDataLabel = cms.string(''),
    printDebug = cms.untracked.bool(False)
)


process.siStripLorentzAngleDepESProducer = cms.ESProducer("SiStripLorentzAngleDepESProducer",
    LatencyRecord = cms.PSet(
        label = cms.untracked.string(''),
        record = cms.string('SiStripLatencyRcd')
    ),
    LorentzAngleDeconvMode = cms.PSet(
        label = cms.untracked.string('deconvolution'),
        record = cms.string('SiStripLorentzAngleRcd')
    ),
    LorentzAnglePeakMode = cms.PSet(
        label = cms.untracked.string('peak'),
        record = cms.string('SiStripLorentzAngleRcd')
    )
)


process.siStripQualityESProducer = cms.ESProducer("SiStripQualityESProducer",
    ListOfRecordToMerge = cms.VPSet(
        cms.PSet(
            record = cms.string('SiStripDetVOffRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('SiStripDetCablingRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('RunInfoRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('SiStripBadChannelRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('SiStripBadFiberRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('SiStripBadModuleRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('SiStripBadStripRcd'),
            tag = cms.string('')
        )
    ),
    PrintDebugOutput = cms.bool(False),
    ReduceGranularity = cms.bool(False),
    ThresholdForReducedGranularity = cms.double(0.3),
    UseEmptyRunInfo = cms.bool(False),
    appendToDataLabel = cms.string('')
)


process.simpleSecondaryVertex2TrkComputer = cms.ESProducer("SimpleSecondaryVertexESProducer",
    minTracks = cms.uint32(2),
    unBoost = cms.bool(False),
    use3d = cms.bool(True),
    useSignificance = cms.bool(True)
)


process.simpleSecondaryVertex3TrkComputer = cms.ESProducer("SimpleSecondaryVertexESProducer",
    minTracks = cms.uint32(3),
    unBoost = cms.bool(False),
    use3d = cms.bool(True),
    useSignificance = cms.bool(True)
)


process.sistripconn = cms.ESProducer("SiStripConnectivity")


process.softPFElectronByIP2dComputer = cms.ESProducer("LeptonTaggerByIPESProducer",
    ipSign = cms.string('any'),
    use3d = cms.bool(False)
)


process.softPFElectronByIP3dComputer = cms.ESProducer("LeptonTaggerByIPESProducer",
    ipSign = cms.string('any'),
    use3d = cms.bool(True)
)


process.softPFElectronByPtComputer = cms.ESProducer("LeptonTaggerByPtESProducer",
    ipSign = cms.string('any')
)


process.softPFElectronComputer = cms.ESProducer("ElectronTaggerESProducer",
    gbrForestLabel = cms.string('btag_SoftPFElectron_BDT'),
    ipSign = cms.string('any'),
    useAdaBoost = cms.bool(False),
    useCondDB = cms.bool(True),
    useGBRForest = cms.bool(True),
    weightFile = cms.FileInPath('RecoBTag/SoftLepton/data/SoftPFElectron_BDT.weights.xml.gz')
)


process.softPFMuonByIP2dComputer = cms.ESProducer("LeptonTaggerByIPESProducer",
    ipSign = cms.string('any'),
    use3d = cms.bool(False)
)


process.softPFMuonByIP3dComputer = cms.ESProducer("LeptonTaggerByIPESProducer",
    ipSign = cms.string('any'),
    use3d = cms.bool(True)
)


process.softPFMuonByPtComputer = cms.ESProducer("LeptonTaggerByPtESProducer",
    ipSign = cms.string('any')
)


process.softPFMuonComputer = cms.ESProducer("MuonTaggerESProducer",
    gbrForestLabel = cms.string('btag_SoftPFMuon_BDT'),
    ipSign = cms.string('any'),
    useAdaBoost = cms.bool(True),
    useCondDB = cms.bool(True),
    useGBRForest = cms.bool(True),
    weightFile = cms.FileInPath('RecoBTag/SoftLepton/data/SoftPFMuon_BDT.weights.xml.gz')
)


process.stripCPEESProducer = cms.ESProducer("StripCPEESProducer",
    ComponentName = cms.string('stripCPE'),
    ComponentType = cms.string('SimpleStripCPE'),
    parameters = cms.PSet(

    )
)


process.templates = cms.ESProducer("PixelCPETemplateRecoESProducer",
    Alpha2Order = cms.bool(True),
    ClusterProbComputationFlag = cms.int32(0),
    ComponentName = cms.string('PixelCPETemplateReco'),
    DoLorentz = cms.bool(True),
    LoadTemplatesFromDB = cms.bool(True),
    UseClusterSplitter = cms.bool(False),
    appendToDataLabel = cms.string(''),
    barrelTemplateID = cms.int32(0),
    directoryWithTemplates = cms.int32(0),
    forwardTemplateID = cms.int32(0),
    lAOffset = cms.double(0),
    lAWidthBPix = cms.double(0),
    lAWidthFPix = cms.double(0),
    speed = cms.int32(-2),
    useLAWidthFromDB = cms.bool(True)
)


process.templates2 = cms.ESProducer("PixelCPEClusterRepairESProducer",
    Alpha2Order = cms.bool(True),
    ClusterProbComputationFlag = cms.int32(0),
    ComponentName = cms.string('PixelCPEClusterRepair'),
    DoLorentz = cms.bool(True),
    LoadTemplatesFromDB = cms.bool(True),
    MaxSizeMismatchInY = cms.double(0.3),
    MinChargeRatio = cms.double(0.8),
    Recommend2D = cms.vstring(
        'PXB 2', 
        'PXB 3', 
        'PXB 4'
    ),
    RunDamagedClusters = cms.bool(False),
    UseClusterSplitter = cms.bool(False),
    appendToDataLabel = cms.string(''),
    barrelTemplateID = cms.int32(0),
    directoryWithTemplates = cms.int32(0),
    forwardTemplateID = cms.int32(0),
    lAOffset = cms.double(0),
    lAWidthBPix = cms.double(0),
    lAWidthFPix = cms.double(0),
    speed = cms.int32(-2),
    useLAWidthFromDB = cms.bool(True)
)


process.tobTecFlexibleKFFittingSmoother = cms.ESProducer("FlexibleKFFittingSmootherESProducer",
    ComponentName = cms.string('tobTecFlexibleKFFittingSmoother'),
    appendToDataLabel = cms.string(''),
    looperFitter = cms.string('tobTecStepFitterSmootherForLoopers'),
    standardFitter = cms.string('tobTecStepFitterSmoother')
)


process.tobTecStepChi2Est = cms.ESProducer("Chi2ChargeMeasurementEstimatorESProducer",
    ComponentName = cms.string('tobTecStepChi2Est'),
    MaxChi2 = cms.double(16.0),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutTight')
    ),
    nSigma = cms.double(3.0),
    pTChargeCutThreshold = cms.double(-1)
)


process.tobTecStepClusterShapeHitFilter = cms.ESProducer("ClusterShapeHitFilterESProducer",
    ComponentName = cms.string('tobTecStepClusterShapeHitFilter'),
    PixelShapeFile = cms.string('RecoPixelVertexing/PixelLowPtUtilities/data/ITShapePhase2_all.par'),
    PixelShapeFileL1 = cms.string('RecoPixelVertexing/PixelLowPtUtilities/data/ITShapePhase2_all.par'),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutTight')
    ),
    doStripShapeCut = cms.bool(False)
)


process.tobTecStepFitterSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('tobTecStepFitterSmoother'),
    EstimateCut = cms.double(30),
    Fitter = cms.string('tobTecStepRKFitter'),
    LogPixelProbabilityCut = cms.double(0),
    MaxFractionOutliers = cms.double(0.3),
    MaxNumberOfOutliers = cms.int32(3),
    MinDof = cms.int32(2),
    MinNumberOfHits = cms.int32(7),
    NoInvalidHitsBeginEnd = cms.bool(True),
    NoOutliersBeginEnd = cms.bool(False),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('tobTecStepRKSmoother'),
    appendToDataLabel = cms.string('')
)


process.tobTecStepFitterSmootherForLoopers = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('tobTecStepFitterSmootherForLoopers'),
    EstimateCut = cms.double(30),
    Fitter = cms.string('tobTecStepRKFitterForLoopers'),
    LogPixelProbabilityCut = cms.double(0),
    MaxFractionOutliers = cms.double(0.3),
    MaxNumberOfOutliers = cms.int32(3),
    MinDof = cms.int32(2),
    MinNumberOfHits = cms.int32(7),
    NoInvalidHitsBeginEnd = cms.bool(True),
    NoOutliersBeginEnd = cms.bool(False),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('tobTecStepRKSmootherForLoopers'),
    appendToDataLabel = cms.string('')
)


process.tobTecStepRKTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('tobTecStepRKFitter'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    minHits = cms.int32(7)
)


process.tobTecStepRKTrajectoryFitterForLoopers = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('tobTecStepRKFitterForLoopers'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('PropagatorWithMaterialForLoopers'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    minHits = cms.int32(7)
)


process.tobTecStepRKTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('tobTecStepRKSmoother'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    errorRescaling = cms.double(10.0),
    minHits = cms.int32(7)
)


process.tobTecStepRKTrajectorySmootherForLoopers = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('tobTecStepRKSmootherForLoopers'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('PropagatorWithMaterialForLoopers'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    errorRescaling = cms.double(10.0),
    minHits = cms.int32(7)
)


process.tobTecStepTrajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('tobTecStepTrajectoryCleanerBySharedHits'),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(20.0),
    ValidHitBonus = cms.double(5.0),
    allowSharedFirstHit = cms.bool(True),
    fractionShared = cms.double(0.09)
)


process.trackAlgoPriorityOrder = cms.ESProducer("TrackAlgoPriorityOrderESProducer",
    ComponentName = cms.string('trackAlgoPriorityOrder'),
    algoOrder = cms.vstring(
        'initialStep', 
        'highPtTripletStep', 
        'lowPtQuadStep', 
        'lowPtTripletStep', 
        'detachedQuadStep', 
        'pixelPairStep', 
        'muonSeededStepInOut', 
        'muonSeededStepOutIn'
    ),
    appendToDataLabel = cms.string('')
)


process.trackCleaner = cms.ESProducer("TrackCleanerESProducer",
    ComponentName = cms.string('trackCleaner'),
    appendToDataLabel = cms.string('')
)


process.trackCounting3D2ndComputer = cms.ESProducer("TrackCountingESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumImpactParameter = cms.double(-1),
    nthTrack = cms.int32(2),
    trackQualityClass = cms.string('any'),
    useSignedImpactParameterSig = cms.bool(True),
    useVariableJTA = cms.bool(False)
)


process.trackCounting3D3rdComputer = cms.ESProducer("TrackCountingESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumImpactParameter = cms.double(-1),
    nthTrack = cms.int32(3),
    trackQualityClass = cms.string('any'),
    useSignedImpactParameterSig = cms.bool(True),
    useVariableJTA = cms.bool(False)
)


process.trackSelectionLwtnn = cms.ESProducer("LwtnnESProducer",
    ComponentName = cms.string('trackSelectionLwtnn'),
    appendToDataLabel = cms.string(''),
    fileName = cms.FileInPath('RecoTracker/FinalTrackSelectors/data/LWTNN_network_10_5_X_v1.json')
)


process.trackerGeometry = cms.ESProducer("TrackerDigiGeometryESModule",
    alignmentsLabel = cms.string(''),
    appendToDataLabel = cms.string(''),
    applyAlignment = cms.bool(False),
    fromDDD = cms.bool(True)
)


process.trackerNumberingGeometry = cms.ESProducer("TrackerGeometricDetESModule",
    appendToDataLabel = cms.string(''),
    fromDD4hep = cms.bool(False),
    fromDDD = cms.bool(True)
)


process.trackerParameters = cms.ESProducer("TrackerParametersESModule",
    appendToDataLabel = cms.string('')
)


process.trackerTopology = cms.ESProducer("TrackerTopologyEP",
    appendToDataLabel = cms.string('')
)


process.trajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('TrajectoryCleanerBySharedHits'),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(20.0),
    ValidHitBonus = cms.double(5.0),
    allowSharedFirstHit = cms.bool(True),
    fractionShared = cms.double(0.19)
)


process.ttrhbwor = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('WithoutRefit'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    Matcher = cms.string('Fake'),
    Phase2StripCPE = cms.string('Phase2StripCPE'),
    PixelCPE = cms.string('Fake'),
    StripCPE = cms.string('Fake')
)


process.ttrhbwr = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('WithTrackAngle'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    Matcher = cms.string('StandardMatcher'),
    Phase2StripCPE = cms.string('Phase2StripCPE'),
    PixelCPE = cms.string('PixelCPEGeneric'),
    StripCPE = cms.string('StripCPEfromTrackAngle')
)


process.BTagRecord = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('JetTagComputerRecord')
)


process.CSCChannelMapperESSource = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('CSCChannelMapperRecord')
)


process.CSCIndexerESSource = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('CSCIndexerRecord')
)


process.GlobalParametersRcdSource = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('L1TGlobalParametersRcd')
)


process.GlobalTag = cms.ESSource("PoolDBESSource",
    DBParameters = cms.PSet(
        authenticationPath = cms.untracked.string(''),
        authenticationSystem = cms.untracked.int32(0),
        messageLevel = cms.untracked.int32(0),
        security = cms.untracked.string('')
    ),
    DumpStat = cms.untracked.bool(False),
    ReconnectEachRun = cms.untracked.bool(False),
    RefreshAlways = cms.untracked.bool(False),
    RefreshEachRun = cms.untracked.bool(False),
    RefreshOpenIOVs = cms.untracked.bool(False),
    connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS'),
    globaltag = cms.string('111X_mcRun4_realistic_T15_v5'),
    pfnPostfix = cms.untracked.string(''),
    pfnPrefix = cms.untracked.string(''),
    snapshotTime = cms.string(''),
    toGet = cms.VPSet(
        cms.PSet(
            connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS'),
            record = cms.string('SiPixelGenErrorDBObjectRcd'),
            snapshotTime = cms.string('2020-05-02 23:00:00.000'),
            tag = cms.string('SiPixelGenErrorDBObject_phase2_T15_v5_mc')
        ), 
        cms.PSet(
            connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS'),
            record = cms.string('SiPixelLorentzAngleRcd'),
            snapshotTime = cms.string('2020-05-05 20:00:00.000'),
            tag = cms.string('SiPixelLorentzAngle_phase2_T15_v5_mc')
        ), 
        cms.PSet(
            connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS'),
            label = cms.untracked.string('forWidth'),
            record = cms.string('SiPixelLorentzAngleRcd'),
            snapshotTime = cms.string('2019-11-05 20:00:00.000'),
            tag = cms.string('SiPixelLorentzAngle_phase2_T15_mc_forWidthEmpty')
        ), 
        cms.PSet(
            connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS'),
            label = cms.untracked.string('fromAlignment'),
            record = cms.string('SiPixelLorentzAngleRcd'),
            snapshotTime = cms.string('2019-11-05 20:00:00.000'),
            tag = cms.string('SiPixelLorentzAngle_phase2_T15_mc_forWidthEmpty')
        ), 
        cms.PSet(
            connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS'),
            record = cms.string('SiPixelLorentzAngleSimRcd'),
            snapshotTime = cms.string('2020-05-05 20:00:00.000'),
            tag = cms.string('SiPixelSimLorentzAngle_phase2_T15_v5_mc')
        ), 
        cms.PSet(
            connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS'),
            record = cms.string('SiPixelTemplateDBObjectRcd'),
            snapshotTime = cms.string('2020-05-02 23:00:00.000'),
            tag = cms.string('SiPixelTemplateDBObject_phase2_T15_v5_mc')
        ), 
        cms.PSet(
            connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS'),
            record = cms.string('EcalIntercalibConstantsRcd'),
            tag = cms.string('EcalIntercalibConstants_TL1000_upgrade_8deg_v2_mc')
        ), 
        cms.PSet(
            connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS'),
            record = cms.string('EcalIntercalibConstantsMCRcd'),
            tag = cms.string('EcalIntercalibConstantsMC_TL1000_upgrade_8deg_v2_mc')
        ), 
        cms.PSet(
            connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS'),
            record = cms.string('EcalLaserAPDPNRatiosRcd'),
            tag = cms.string('EcalLaserAPDPNRatios_TL1000_upgrade_8deg_mc')
        ), 
        cms.PSet(
            connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS'),
            record = cms.string('EcalPedestalsRcd'),
            tag = cms.string('EcalPedestals_TL1000_upgradeTIA_8deg_mc')
        ), 
        cms.PSet(
            connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS'),
            record = cms.string('EcalTPGLinearizationConstRcd'),
            tag = cms.string('EcalTPGLinearizationConst_TL1000_upgrade_8deg_mc')
        )
    )
)


process.HBDarkeningEP = cms.ESSource("HBHEDarkeningEP",
    appendToDataLabel = cms.string('HB'),
    dosemaps = cms.VPSet(
        cms.PSet(
            energy = cms.int32(8),
            file = cms.FileInPath('CalibCalorimetry/HcalPlugins/data/dosemapHB_4TeV.txt')
        ), 
        cms.PSet(
            energy = cms.int32(14),
            file = cms.FileInPath('CalibCalorimetry/HcalPlugins/data/dosemapHB_7TeV.txt')
        )
    ),
    drdA = cms.double(2.7383),
    drdB = cms.double(0.37471),
    ieta_shift = cms.int32(1),
    years = cms.VPSet(
        cms.PSet(
            energy = cms.int32(8),
            intlumi = cms.double(5.6),
            lumirate = cms.double(0.005),
            year = cms.string('2011')
        ), 
        cms.PSet(
            energy = cms.int32(8),
            intlumi = cms.double(23.3),
            lumirate = cms.double(0.013),
            year = cms.string('2012')
        ), 
        cms.PSet(
            energy = cms.int32(14),
            intlumi = cms.double(4.1),
            lumirate = cms.double(0.009),
            year = cms.string('2015')
        ), 
        cms.PSet(
            energy = cms.int32(14),
            intlumi = cms.double(41.0),
            lumirate = cms.double(0.026),
            year = cms.string('2016')
        ), 
        cms.PSet(
            energy = cms.int32(14),
            intlumi = cms.double(45.0),
            lumirate = cms.double(0.043),
            year = cms.string('2017')
        ), 
        cms.PSet(
            energy = cms.int32(14),
            intlumi = cms.double(45.0),
            lumirate = cms.double(0.043),
            year = cms.string('2018')
        ), 
        cms.PSet(
            energy = cms.int32(14),
            intlumi = cms.double(45.0),
            lumirate = cms.double(0.05),
            year = cms.string('2021')
        ), 
        cms.PSet(
            energy = cms.int32(14),
            intlumi = cms.double(45.0),
            lumirate = cms.double(0.05),
            year = cms.string('2022')
        ), 
        cms.PSet(
            energy = cms.int32(14),
            intlumi = cms.double(50.0),
            lumirate = cms.double(0.05),
            year = cms.string('2023')
        ), 
        cms.PSet(
            energy = cms.int32(14),
            intlumi = cms.double(2700),
            lumirate = cms.double(0.15),
            year = cms.string('2038')
        )
    )
)


process.HEDarkeningEP = cms.ESSource("HBHEDarkeningEP",
    appendToDataLabel = cms.string('HE'),
    dosemaps = cms.VPSet(
        cms.PSet(
            energy = cms.int32(8),
            file = cms.FileInPath('CalibCalorimetry/HcalPlugins/data/dosemapHE_4TeV.txt')
        ), 
        cms.PSet(
            energy = cms.int32(14),
            file = cms.FileInPath('CalibCalorimetry/HcalPlugins/data/dosemapHE_7TeV.txt')
        )
    ),
    drdA = cms.double(2.7383),
    drdB = cms.double(0.37471),
    ieta_shift = cms.int32(16),
    years = cms.VPSet(
        cms.PSet(
            energy = cms.int32(8),
            intlumi = cms.double(5.6),
            lumirate = cms.double(0.005),
            year = cms.string('2011')
        ), 
        cms.PSet(
            energy = cms.int32(8),
            intlumi = cms.double(23.3),
            lumirate = cms.double(0.013),
            year = cms.string('2012')
        ), 
        cms.PSet(
            energy = cms.int32(14),
            intlumi = cms.double(4.1),
            lumirate = cms.double(0.009),
            year = cms.string('2015')
        ), 
        cms.PSet(
            energy = cms.int32(14),
            intlumi = cms.double(41.0),
            lumirate = cms.double(0.026),
            year = cms.string('2016')
        ), 
        cms.PSet(
            energy = cms.int32(14),
            intlumi = cms.double(45.0),
            lumirate = cms.double(0.043),
            year = cms.string('2017')
        ), 
        cms.PSet(
            energy = cms.int32(14),
            intlumi = cms.double(45.0),
            lumirate = cms.double(0.043),
            year = cms.string('2018')
        ), 
        cms.PSet(
            energy = cms.int32(14),
            intlumi = cms.double(45.0),
            lumirate = cms.double(0.05),
            year = cms.string('2021')
        ), 
        cms.PSet(
            energy = cms.int32(14),
            intlumi = cms.double(45.0),
            lumirate = cms.double(0.05),
            year = cms.string('2022')
        ), 
        cms.PSet(
            energy = cms.int32(14),
            intlumi = cms.double(50.0),
            lumirate = cms.double(0.05),
            year = cms.string('2023')
        ), 
        cms.PSet(
            energy = cms.int32(14),
            intlumi = cms.double(2700),
            lumirate = cms.double(0.15),
            year = cms.string('2038')
        )
    )
)


process.HcalTimeSlewEP = cms.ESSource("HcalTimeSlewEP",
    appendToDataLabel = cms.string('HBHE'),
    timeSlewParametersM2 = cms.VPSet(
        cms.PSet(
            slope = cms.double(-3.178648),
            tmax = cms.double(16.0),
            tzero = cms.double(23.960177)
        ), 
        cms.PSet(
            slope = cms.double(-1.5610227),
            tmax = cms.double(10.0),
            tzero = cms.double(11.977461)
        ), 
        cms.PSet(
            slope = cms.double(-1.075824),
            tmax = cms.double(6.25),
            tzero = cms.double(9.109694)
        )
    ),
    timeSlewParametersM3 = cms.VPSet(
        cms.PSet(
            cap = cms.double(6.0),
            tspar0 = cms.double(12.2999),
            tspar0_siPM = cms.double(0.0),
            tspar1 = cms.double(-2.19142),
            tspar1_siPM = cms.double(0.0),
            tspar2 = cms.double(0.0),
            tspar2_siPM = cms.double(0.0)
        ), 
        cms.PSet(
            cap = cms.double(6.0),
            tspar0 = cms.double(15.5),
            tspar0_siPM = cms.double(0.0),
            tspar1 = cms.double(-3.2),
            tspar1_siPM = cms.double(0.0),
            tspar2 = cms.double(32.0),
            tspar2_siPM = cms.double(0.0)
        ), 
        cms.PSet(
            cap = cms.double(6.0),
            tspar0 = cms.double(12.2999),
            tspar0_siPM = cms.double(0.0),
            tspar1 = cms.double(-2.19142),
            tspar1_siPM = cms.double(0.0),
            tspar2 = cms.double(0.0),
            tspar2_siPM = cms.double(0.0)
        ), 
        cms.PSet(
            cap = cms.double(6.0),
            tspar0 = cms.double(12.2999),
            tspar0_siPM = cms.double(0.0),
            tspar1 = cms.double(-2.19142),
            tspar1_siPM = cms.double(0.0),
            tspar2 = cms.double(0.0),
            tspar2_siPM = cms.double(0.0)
        )
    )
)


process.HepPDTESSource = cms.ESSource("HepPDTESSource",
    pdtFileName = cms.FileInPath('SimGeneral/HepPDTESSource/data/pythiaparticle.tbl')
)


process.XMLIdealGeometryESSource = cms.ESSource("XMLIdealGeometryESSource",
    geomXMLFiles = cms.vstring(
        'Geometry/CMSCommonData/data/materials.xml', 
        'Geometry/CMSCommonData/data/rotations.xml', 
        'Geometry/CMSCommonData/data/extend/v2/cmsextent.xml', 
        'Geometry/CMSCommonData/data/cmsMother.xml', 
        'Geometry/CMSCommonData/data/eta3/etaMax.xml', 
        'Geometry/CMSCommonData/data/cmsTracker.xml', 
        'Geometry/CMSCommonData/data/cmsCalo.xml', 
        'Geometry/CMSCommonData/data/cmsMuon.xml', 
        'Geometry/CMSCommonData/data/mgnt.xml', 
        'Geometry/CMSCommonData/data/beampipe/2026/v1/beampipe.xml', 
        'Geometry/CMSCommonData/data/cmsBeam/2026/v1/cmsBeam.xml', 
        'Geometry/CMSCommonData/data/muonMB.xml', 
        'Geometry/CMSCommonData/data/muonMagnet.xml', 
        'Geometry/CMSCommonData/data/cavern/2021/v1/cavern.xml', 
        'Geometry/CMSCommonData/data/cavernData/2021/v1/cavernData.xml', 
        'Geometry/CMSCommonData/data/cavernFloor/2017/v1/cavernFloor.xml', 
        'Geometry/CMSCommonData/data/cms/2026/v3/cms.xml', 
        'Geometry/CMSCommonData/data/caloBase/2026/v2/caloBase.xml', 
        'Geometry/CMSCommonData/data/muonBase/2026/v3/muonBase.xml', 
        'Geometry/TrackerCommonData/data/PhaseII/trackerParameters.xml', 
        'Geometry/TrackerCommonData/data/pixfwdCommon.xml', 
        'Geometry/TrackerCommonData/data/PhaseII/TiltedTracker613_MB_2019_04/pixfwd.xml', 
        'Geometry/TrackerCommonData/data/PhaseII/TiltedTracker613_MB_2019_04/pixbar.xml', 
        'Geometry/TrackerCommonData/data/trackermaterial.xml', 
        'Geometry/TrackerCommonData/data/PhaseII/TiltedTracker404/otst.xml', 
        'Geometry/TrackerCommonData/data/PhaseII/TiltedTracker613_MB_2019_04/tracker.xml', 
        'Geometry/TrackerCommonData/data/PhaseII/TiltedTracker613_MB_2019_04/pixel.xml', 
        'Geometry/TrackerCommonData/data/PhaseII/TiltedTracker404/trackerbar.xml', 
        'Geometry/TrackerCommonData/data/PhaseII/TiltedTracker404/trackerfwd.xml', 
        'Geometry/TrackerCommonData/data/PhaseII/TiltedTracker404/trackerStructureTopology.xml', 
        'Geometry/TrackerCommonData/data/PhaseII/TiltedTracker613/pixelStructureTopology.xml', 
        'Geometry/TrackerSimData/data/PhaseII/TiltedTracker404/trackersens.xml', 
        'Geometry/TrackerSimData/data/PhaseII/TiltedTracker404/pixelsens.xml', 
        'Geometry/TrackerRecoData/data/PhaseII/TiltedTracker613_MB_2019_04/trackerRecoMaterial.xml', 
        'Geometry/TrackerSimData/data/PhaseII/TiltedTracker404/trackerProdCuts.xml', 
        'Geometry/TrackerSimData/data/PhaseII/TiltedTracker404/pixelProdCuts.xml', 
        'Geometry/TrackerSimData/data/trackerProdCutsBEAM.xml', 
        'Geometry/EcalCommonData/data/eregalgo/2026/v2/eregalgo.xml', 
        'Geometry/EcalCommonData/data/ectkcable/2026/v1/ectkcable.xml', 
        'Geometry/EcalCommonData/data/ectkcablemat/2026/v1/ectkcablemat.xml', 
        'Geometry/EcalCommonData/data/ebalgo.xml', 
        'Geometry/EcalCommonData/data/ebcon.xml', 
        'Geometry/EcalCommonData/data/ebrot.xml', 
        'Geometry/HcalCommonData/data/hcalrotations.xml', 
        'Geometry/HcalCommonData/data/hcal/v2/hcalalgo.xml', 
        'Geometry/HcalCommonData/data/hcalbarrelalgo.xml', 
        'Geometry/HcalCommonData/data/hcalcablealgo/v2/hcalcablealgo.xml', 
        'Geometry/HcalCommonData/data/hcalouteralgo.xml', 
        'Geometry/HcalCommonData/data/hcalforwardalgo.xml', 
        'Geometry/HcalCommonData/data/hcalSimNumbering/NoHE/hcalSimNumbering.xml', 
        'Geometry/HcalCommonData/data/hcalRecNumbering/NoHE/hcalRecNumbering.xml', 
        'Geometry/HcalCommonData/data/average/hcalforwardmaterial.xml', 
        'Geometry/HGCalCommonData/data/hgcalMaterial/v1/hgcalMaterial.xml', 
        'Geometry/HGCalCommonData/data/hgcal/v11/hgcal.xml', 
        'Geometry/HGCalCommonData/data/hgcalcell/v9/hgcalcell.xml', 
        'Geometry/HGCalCommonData/data/hgcalwafer/v9/hgcalwafer.xml', 
        'Geometry/HGCalCommonData/data/hgcalEE/v10/hgcalEE.xml', 
        'Geometry/HGCalCommonData/data/hgcalHEsil/v11/hgcalHEsil.xml', 
        'Geometry/HGCalCommonData/data/hgcalHEmix/v11/hgcalHEmix.xml', 
        'Geometry/HGCalCommonData/data/hgcalCons/v11/hgcalCons.xml', 
        'Geometry/MuonCommonData/data/mbCommon/2021/v1/mbCommon.xml', 
        'Geometry/MuonCommonData/data/mb1/2015/v2/mb1.xml', 
        'Geometry/MuonCommonData/data/mb2/2015/v2/mb2.xml', 
        'Geometry/MuonCommonData/data/mb3/2015/v2/mb3.xml', 
        'Geometry/MuonCommonData/data/mb4/2015/v2/mb4.xml', 
        'Geometry/MuonCommonData/data/mb4Shield/2021/v1/mb4Shield.xml', 
        'Geometry/MuonCommonData/data/muonYoke/2021/v2/muonYoke.xml', 
        'Geometry/MuonCommonData/data/csc/2021/v1/csc.xml', 
        'Geometry/MuonCommonData/data/mf/2026/v2/mf.xml', 
        'Geometry/MuonCommonData/data/rpcf/2026/v2/rpcf.xml', 
        'Geometry/MuonCommonData/data/gemf/TDR_BaseLine/gemf.xml', 
        'Geometry/MuonCommonData/data/gem11/TDR_BaseLine/gem11.xml', 
        'Geometry/MuonCommonData/data/gem21/TDR_Dev/gem21.xml', 
        'Geometry/MuonCommonData/data/mfshield/2026/v1/mfshield.xml', 
        'Geometry/MuonCommonData/data/me0/TDR_Dev/v2/me0.xml', 
        'Geometry/ForwardCommonData/data/forwardshield/2017/v1/forwardshield.xml', 
        'Geometry/ForwardCommonData/data/brmrotations.xml', 
        'Geometry/ForwardCommonData/data/PostLS2/brm.xml', 
        'Geometry/ForwardCommonData/data/zdcmaterials.xml', 
        'Geometry/ForwardCommonData/data/lumimaterials.xml', 
        'Geometry/ForwardCommonData/data/zdcrotations.xml', 
        'Geometry/ForwardCommonData/data/lumirotations.xml', 
        'Geometry/ForwardCommonData/data/zdc.xml', 
        'Geometry/ForwardCommonData/data/zdclumi.xml', 
        'Geometry/ForwardCommonData/data/cmszdc.xml', 
        'Geometry/MTDCommonData/data/btl.xml', 
        'Geometry/MTDCommonData/data/etl/v2/etl.xml', 
        'Geometry/MTDCommonData/data/CrystalBarPhiFlat/v3/mtd.xml', 
        'Geometry/MTDCommonData/data/CrystalBarPhiFlat/mtdStructureTopology.xml', 
        'Geometry/MTDCommonData/data/CrystalBarPhiFlat/mtdParameters.xml', 
        'Geometry/MuonCommonData/data/muonNumbering/TDR_DeV/muonNumbering.xml', 
        'Geometry/EcalSimData/data/PhaseII/ecalsens.xml', 
        'Geometry/HcalCommonData/data/hcalsens/NoHE/hcalsenspmf.xml', 
        'Geometry/HcalSimData/data/hf.xml', 
        'Geometry/HcalSimData/data/hfpmt.xml', 
        'Geometry/HcalSimData/data/hffibrebundle.xml', 
        'Geometry/HcalSimData/data/CaloUtil.xml', 
        'Geometry/HGCalSimData/data/hgcsensv9.xml', 
        'Geometry/MuonSimData/data/PhaseII/ME0EtaPart/muonSens.xml', 
        'Geometry/DTGeometryBuilder/data/dtSpecsFilter.xml', 
        'Geometry/CSCGeometryBuilder/data/cscSpecsFilter.xml', 
        'Geometry/CSCGeometryBuilder/data/cscSpecs.xml', 
        'Geometry/RPCGeometryBuilder/data/2026/v1/RPCSpecs.xml', 
        'Geometry/GEMGeometryBuilder/data/v7/GEMSpecsFilter.xml', 
        'Geometry/GEMGeometryBuilder/data/v7/GEMSpecs.xml', 
        'Geometry/ForwardCommonData/data/brmsens.xml', 
        'Geometry/ForwardSimData/data/zdcsens.xml', 
        'Geometry/MTDSimData/data/CrystalBarPhiFlat/mtdsens.xml', 
        'Geometry/HcalSimData/data/HcalProdCuts.xml', 
        'Geometry/EcalSimData/data/EcalProdCuts.xml', 
        'Geometry/HGCalSimData/data/hgcProdCutsv9.xml', 
        'Geometry/MuonSimData/data/PhaseII/muonProdCuts.xml', 
        'Geometry/ForwardSimData/data/zdcProdCuts.xml', 
        'Geometry/ForwardSimData/data/ForwardShieldProdCuts.xml', 
        'Geometry/MTDSimData/data/CrystalBarPhiFlat/mtdProdCuts.xml', 
        'Geometry/CMSCommonData/data/FieldParameters.xml'
    ),
    rootNodeName = cms.string('cms:OCMS')
)


process.bmbtfParamsSource = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('L1TMuonBarrelParamsRcd')
)


process.caloConfigSource = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('L1TCaloConfigRcd')
)


process.ctppsBeamParametersESSource = cms.ESSource("CTPPSBeamParametersESSource",
    appendToDataLabel = cms.string(''),
    beamDivX45 = cms.double(0.1),
    beamDivX56 = cms.double(0.1),
    beamDivY45 = cms.double(0.1),
    beamDivY56 = cms.double(0.1),
    beamMom45 = cms.double(6500),
    beamMom56 = cms.double(6500),
    betaStarX45 = cms.double(30),
    betaStarX56 = cms.double(30),
    betaStarY45 = cms.double(30),
    betaStarY56 = cms.double(30),
    halfXangleX45 = cms.double(140.0),
    halfXangleX56 = cms.double(140.0),
    halfXangleY45 = cms.double(8e-05),
    halfXangleY56 = cms.double(8e-05),
    setBeamPars = cms.bool(True),
    vtxOffsetX45 = cms.double(0.01),
    vtxOffsetX56 = cms.double(0.01),
    vtxOffsetY45 = cms.double(0.01),
    vtxOffsetY56 = cms.double(0.01),
    vtxOffsetZ45 = cms.double(0.01),
    vtxOffsetZ56 = cms.double(0.01),
    vtxStddevX = cms.double(0.02),
    vtxStddevY = cms.double(0.02),
    vtxStddevZ = cms.double(0.02)
)


process.ctppsOpticalFunctionsESSource = cms.ESSource("CTPPSOpticalFunctionsESSource",
    appendToDataLabel = cms.string(''),
    configuration = cms.VPSet(cms.PSet(
        opticalFunctions = cms.VPSet(
            cms.PSet(
                fileName = cms.FileInPath('CalibPPS/ESProducers/data/optical_functions/2018/version4/120urad.root'),
                xangle = cms.double(120)
            ), 
            cms.PSet(
                fileName = cms.FileInPath('CalibPPS/ESProducers/data/optical_functions/2018/version4/130urad.root'),
                xangle = cms.double(130)
            ), 
            cms.PSet(
                fileName = cms.FileInPath('CalibPPS/ESProducers/data/optical_functions/2018/version4/140urad.root'),
                xangle = cms.double(140)
            )
        ),
        validityRange = cms.EventRange(0, 0, 1, 999999, 0, 0)
    )),
    label = cms.string('')
)


process.eegeom = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('EcalMappingRcd')
)


process.es_hardcode = cms.ESSource("HcalHardcodeCalibrations",
    GainWidthsForTrigPrims = cms.bool(True),
    HBRecalibration = cms.bool(True),
    HBmeanenergies = cms.FileInPath('CalibCalorimetry/HcalPlugins/data/meanenergiesHB.txt'),
    HBreCalibCutoff = cms.double(100.0),
    HERecalibration = cms.bool(False),
    HEmeanenergies = cms.FileInPath('CalibCalorimetry/HcalPlugins/data/meanenergiesHE.txt'),
    HEreCalibCutoff = cms.double(100.0),
    HFRecalParameterBlock = cms.PSet(
        HFdepthOneParameterA = cms.vdouble(
            0.004123, 0.00602, 0.008201, 0.010489, 0.013379, 
            0.016997, 0.021464, 0.027371, 0.034195, 0.044807, 
            0.058939, 0.125497
        ),
        HFdepthOneParameterB = cms.vdouble(
            -4e-06, -2e-06, 0.0, 4e-06, 1.5e-05, 
            2.6e-05, 6.3e-05, 8.4e-05, 0.00016, 0.000107, 
            0.000425, 0.000209
        ),
        HFdepthTwoParameterA = cms.vdouble(
            0.002861, 0.004168, 0.0064, 0.008388, 0.011601, 
            0.014425, 0.018633, 0.023232, 0.028274, 0.035447, 
            0.051579, 0.086593
        ),
        HFdepthTwoParameterB = cms.vdouble(
            -2e-06, -0.0, -7e-06, -6e-06, -2e-06, 
            1e-06, 1.9e-05, 3.1e-05, 6.7e-05, 1.2e-05, 
            0.000157, -3e-06
        )
    ),
    HFRecalibration = cms.bool(True),
    SiPMCharacteristics = cms.VPSet(
        cms.PSet(
            crosstalk = cms.double(0.0),
            nonlin1 = cms.double(1.0),
            nonlin2 = cms.double(0.0),
            nonlin3 = cms.double(0.0),
            pixels = cms.int32(36000)
        ), 
        cms.PSet(
            crosstalk = cms.double(0.0),
            nonlin1 = cms.double(1.0),
            nonlin2 = cms.double(0.0),
            nonlin3 = cms.double(0.0),
            pixels = cms.int32(2500)
        ), 
        cms.PSet(
            crosstalk = cms.double(0.17),
            nonlin1 = cms.double(1.00985),
            nonlin2 = cms.double(7.84089e-06),
            nonlin3 = cms.double(2.86282e-10),
            pixels = cms.int32(27370)
        ), 
        cms.PSet(
            crosstalk = cms.double(0.196),
            nonlin1 = cms.double(1.00546),
            nonlin2 = cms.double(6.40239e-06),
            nonlin3 = cms.double(1.27011e-10),
            pixels = cms.int32(38018)
        ), 
        cms.PSet(
            crosstalk = cms.double(0.17),
            nonlin1 = cms.double(1.00985),
            nonlin2 = cms.double(7.84089e-06),
            nonlin3 = cms.double(2.86282e-10),
            pixels = cms.int32(27370)
        ), 
        cms.PSet(
            crosstalk = cms.double(0.196),
            nonlin1 = cms.double(1.00546),
            nonlin2 = cms.double(6.40239e-06),
            nonlin3 = cms.double(1.27011e-10),
            pixels = cms.int32(38018)
        ), 
        cms.PSet(
            crosstalk = cms.double(0.0),
            nonlin1 = cms.double(1.0),
            nonlin2 = cms.double(0.0),
            nonlin3 = cms.double(0.0),
            pixels = cms.int32(0)
        )
    ),
    hb = cms.PSet(
        darkCurrent = cms.vdouble(0.0),
        doRadiationDamage = cms.bool(False),
        gain = cms.vdouble(0.19),
        gainWidth = cms.vdouble(0.0),
        mcShape = cms.int32(125),
        pedestal = cms.double(3.285),
        pedestalWidth = cms.double(0.809),
        photoelectronsToAnalog = cms.double(0.3305),
        qieOffset = cms.vdouble(-0.49, 1.8, 7.2, 37.9),
        qieSlope = cms.vdouble(0.912, 0.917, 0.922, 0.923),
        qieType = cms.int32(0),
        recoShape = cms.int32(105),
        zsThreshold = cms.int32(8)
    ),
    hbUpgrade = cms.PSet(
        darkCurrent = cms.vdouble(0.01, 0.015),
        doRadiationDamage = cms.bool(True),
        gain = cms.vdouble(0.0006252),
        gainWidth = cms.vdouble(0),
        mcShape = cms.int32(206),
        pedestal = cms.double(17.3),
        pedestalWidth = cms.double(1.5),
        photoelectronsToAnalog = cms.double(40.0),
        qieOffset = cms.vdouble(0.0, 0.0, 0.0, 0.0),
        qieSlope = cms.vdouble(0.05376, 0.05376, 0.05376, 0.05376),
        qieType = cms.int32(2),
        radiationDamage = cms.PSet(
            depVsNeutrons = cms.vdouble(5.543e-10, 8.012e-10),
            depVsTemp = cms.double(0.0631),
            intlumiOffset = cms.double(150),
            intlumiToNeutrons = cms.double(367000000.0),
            temperatureBase = cms.double(20),
            temperatureNew = cms.double(-5)
        ),
        recoShape = cms.int32(206),
        zsThreshold = cms.int32(16)
    ),
    he = cms.PSet(
        darkCurrent = cms.vdouble(0.0),
        doRadiationDamage = cms.bool(False),
        gain = cms.vdouble(0.23),
        gainWidth = cms.vdouble(0),
        mcShape = cms.int32(125),
        pedestal = cms.double(3.163),
        pedestalWidth = cms.double(0.9698),
        photoelectronsToAnalog = cms.double(0.3305),
        qieOffset = cms.vdouble(-0.38, 2.0, 7.6, 39.6),
        qieSlope = cms.vdouble(0.912, 0.916, 0.92, 0.922),
        qieType = cms.int32(0),
        recoShape = cms.int32(105),
        zsThreshold = cms.int32(9)
    ),
    heUpgrade = cms.PSet(
        darkCurrent = cms.vdouble(0.01, 0.015),
        doRadiationDamage = cms.bool(True),
        gain = cms.vdouble(0.0006252),
        gainWidth = cms.vdouble(0),
        mcShape = cms.int32(206),
        pedestal = cms.double(17.3),
        pedestalWidth = cms.double(1.5),
        photoelectronsToAnalog = cms.double(40.0),
        qieOffset = cms.vdouble(0.0, 0.0, 0.0, 0.0),
        qieSlope = cms.vdouble(0.05376, 0.05376, 0.05376, 0.05376),
        qieType = cms.int32(2),
        radiationDamage = cms.PSet(
            depVsNeutrons = cms.vdouble(5.543e-10, 8.012e-10),
            depVsTemp = cms.double(0.0631),
            intlumiOffset = cms.double(75),
            intlumiToNeutrons = cms.double(29200000.0),
            temperatureBase = cms.double(20),
            temperatureNew = cms.double(5)
        ),
        recoShape = cms.int32(206),
        zsThreshold = cms.int32(16)
    ),
    hf = cms.PSet(
        darkCurrent = cms.vdouble(0.0),
        doRadiationDamage = cms.bool(False),
        gain = cms.vdouble(0.14, 0.135),
        gainWidth = cms.vdouble(0.0, 0.0),
        mcShape = cms.int32(301),
        pedestal = cms.double(9.354),
        pedestalWidth = cms.double(2.516),
        photoelectronsToAnalog = cms.double(0.0),
        qieOffset = cms.vdouble(-0.87, 1.4, 7.8, -29.6),
        qieSlope = cms.vdouble(0.359, 0.358, 0.36, 0.367),
        qieType = cms.int32(0),
        recoShape = cms.int32(301),
        zsThreshold = cms.int32(-9999)
    ),
    hfUpgrade = cms.PSet(
        darkCurrent = cms.vdouble(0.0),
        doRadiationDamage = cms.bool(False),
        gain = cms.vdouble(0.14, 0.135),
        gainWidth = cms.vdouble(0.0, 0.0),
        mcShape = cms.int32(301),
        pedestal = cms.double(13.33),
        pedestalWidth = cms.double(3.33),
        photoelectronsToAnalog = cms.double(0.0),
        qieOffset = cms.vdouble(0.0697, -0.7405, 12.38, -671.9),
        qieSlope = cms.vdouble(0.297, 0.298, 0.298, 0.313),
        qieType = cms.int32(1),
        recoShape = cms.int32(301),
        zsThreshold = cms.int32(-9999)
    ),
    ho = cms.PSet(
        darkCurrent = cms.vdouble(0.0),
        doRadiationDamage = cms.bool(False),
        gain = cms.vdouble(0.006, 0.0087),
        gainWidth = cms.vdouble(0.0, 0.0),
        mcShape = cms.int32(201),
        pedestal = cms.double(12.06),
        pedestalWidth = cms.double(0.6285),
        photoelectronsToAnalog = cms.double(4.0),
        qieOffset = cms.vdouble(-0.44, 1.4, 7.1, 38.5),
        qieSlope = cms.vdouble(0.907, 0.915, 0.92, 0.921),
        qieType = cms.int32(0),
        recoShape = cms.int32(201),
        zsThreshold = cms.int32(24)
    ),
    iLumi = cms.double(1000.0),
    killHE = cms.bool(True),
    testHEPlan1 = cms.bool(False),
    testHFQIE10 = cms.bool(False),
    toGet = cms.untracked.vstring(
        'GainWidths', 
        'MCParams', 
        'RecoParams', 
        'RespCorrs', 
        'QIEData', 
        'QIETypes', 
        'Gains', 
        'Pedestals', 
        'PedestalWidths', 
        'EffectivePedestals', 
        'EffectivePedestalWidths', 
        'ChannelQuality', 
        'ZSThresholds', 
        'TimeCorrs', 
        'LUTCorrs', 
        'LutMetadata', 
        'L1TriggerObjects', 
        'PFCorrs', 
        'FrontEndMap', 
        'CovarianceMatrices', 
        'SiPMParameters', 
        'SiPMCharacteristics', 
        'TPChannelParameters', 
        'TPParameters', 
        'FlagHFDigiTimeParams'
    ),
    useHBUpgrade = cms.bool(True),
    useHEUpgrade = cms.bool(True),
    useHFUpgrade = cms.bool(True),
    useHOUpgrade = cms.bool(True),
    useIeta18depth1 = cms.bool(False),
    useLayer0Weight = cms.bool(True)
)


process.essourceEcalNextToDead = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('EcalNextToDeadChannelRcd')
)


process.essourceEcalSev = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('EcalSeverityLevelAlgoRcd')
)


process.essourceSev = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('HcalSeverityLevelComputerRcd')
)


process.l1conddb = cms.ESSource("PoolDBESSource",
    DBParameters = cms.PSet(
        authenticationPath = cms.untracked.string(''),
        authenticationSystem = cms.untracked.int32(0),
        messageLevel = cms.untracked.int32(0),
        security = cms.untracked.string('')
    ),
    connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS'),
    toGet = cms.VPSet(cms.PSet(
        record = cms.string('L1TCaloParamsO2ORcd'),
        tag = cms.string('L1TCaloParams_static_CMSSW_9_2_10_2017_v1_8_2_updateHFSF_v6MET')
    ))
)


process.l1ugmtdb = cms.ESSource("PoolDBESSource",
    DBParameters = cms.PSet(
        authenticationPath = cms.untracked.string(''),
        authenticationSystem = cms.untracked.int32(0),
        messageLevel = cms.untracked.int32(0),
        security = cms.untracked.string('')
    ),
    connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS'),
    toGet = cms.VPSet(cms.PSet(
        record = cms.string('L1TMuonGlobalParamsO2ORcd'),
        tag = cms.string('L1TMuonGlobalParamsPrototype_Stage2v0_hlt')
    ))
)


process.ppsDBESSource = cms.ESSource("PoolDBESSource",
    DumpStat = cms.untracked.bool(False),
    beamEnergy = cms.double(6500),
    label = cms.string(''),
    timetype = cms.untracked.string('runnumber'),
    toGet = cms.VPSet(
        cms.PSet(
            connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS'),
            record = cms.string('LHCInfoRcd'),
            tag = cms.string('LHCInfoEndFill_prompt_v2')
        ), 
        cms.PSet(
            connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS'),
            record = cms.string('CTPPSOpticsRcd'),
            tag = cms.string('PPSOpticalFunctions_offline_v6')
        )
    ),
    validityRange = cms.EventRange(0, 0, 1, 999999, 0, 0),
    xangle = cms.double(-1)
)


process.rpcconesrc = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('L1RPCConeBuilderRcd')
)


process.siPixelFakeGainOfflineESSource = cms.ESSource("SiPixelFakeGainOfflineESSource",
    file = cms.FileInPath('SLHCUpgradeSimulations/Geometry/data/PhaseII/Tilted/EmptyPixelSkimmedGeometry.txt')
)


process.totemDAQMappingESSourceXML_TimingDiamond = cms.ESSource("TotemDAQMappingESSourceXML",
    configuration = cms.VPSet(
        cms.PSet(
            mappingFileNames = cms.vstring(),
            maskFileNames = cms.vstring(),
            validityRange = cms.EventRange(1, 0, 1, 283819, 0, 0)
        ), 
        cms.PSet(
            mappingFileNames = cms.vstring('CondFormats/PPSObjects/xml/mapping_timing_diamond.xml'),
            maskFileNames = cms.vstring(),
            validityRange = cms.EventRange(283820, 0, 1, 292520, 0, 0)
        ), 
        cms.PSet(
            mappingFileNames = cms.vstring('CondFormats/PPSObjects/xml/mapping_timing_diamond_2017.xml'),
            maskFileNames = cms.vstring(),
            validityRange = cms.EventRange(292521, 0, 1, 310000, 0, 0)
        ), 
        cms.PSet(
            mappingFileNames = cms.vstring('CondFormats/PPSObjects/xml/mapping_timing_diamond_2018.xml'),
            maskFileNames = cms.vstring(),
            validityRange = cms.EventRange(310001, 0, 1, 999999999, 0, 0)
        )
    ),
    subSystem = cms.untracked.string('TimingDiamond'),
    verbosity = cms.untracked.uint32(0)
)


process.totemDAQMappingESSourceXML_TotemTiming = cms.ESSource("TotemDAQMappingESSourceXML",
    configuration = cms.VPSet(
        cms.PSet(
            mappingFileNames = cms.vstring(),
            maskFileNames = cms.vstring(),
            validityRange = cms.EventRange(1, 0, 1, 310000, 0, 0)
        ), 
        cms.PSet(
            mappingFileNames = cms.vstring('CondFormats/PPSObjects/xml/mapping_totem_timing_2018.xml'),
            maskFileNames = cms.vstring(),
            validityRange = cms.EventRange(310001, 0, 1, 999999999, 0, 0)
        )
    ),
    subSystem = cms.untracked.string('TotemTiming'),
    verbosity = cms.untracked.uint32(10)
)


process.totemDAQMappingESSourceXML_TrackingStrip = cms.ESSource("TotemDAQMappingESSourceXML",
    configuration = cms.VPSet(
        cms.PSet(
            mappingFileNames = cms.vstring('CondFormats/PPSObjects/xml/mapping_tracking_strip_2016_to_fill_5288.xml'),
            maskFileNames = cms.vstring(),
            validityRange = cms.EventRange(1, 0, 1, 280385, 0, 0)
        ), 
        cms.PSet(
            mappingFileNames = cms.vstring(),
            maskFileNames = cms.vstring(),
            validityRange = cms.EventRange(280386, 0, 1, 281600, 0, 0)
        ), 
        cms.PSet(
            mappingFileNames = cms.vstring('CondFormats/PPSObjects/xml/mapping_tracking_strip_2016_from_fill_5330.xml'),
            maskFileNames = cms.vstring(),
            validityRange = cms.EventRange(281601, 0, 1, 290872, 0, 0)
        ), 
        cms.PSet(
            mappingFileNames = cms.vstring('CondFormats/PPSObjects/xml/mapping_tracking_strip_2017.xml'),
            maskFileNames = cms.vstring(),
            validityRange = cms.EventRange(290873, 0, 1, 311625, 0, 0)
        ), 
        cms.PSet(
            mappingFileNames = cms.vstring('CondFormats/PPSObjects/xml/mapping_tracking_strip_2018.xml'),
            maskFileNames = cms.vstring(),
            validityRange = cms.EventRange(311626, 0, 1, 999999999, 0, 0)
        )
    ),
    subSystem = cms.untracked.string('TrackingStrip'),
    verbosity = cms.untracked.uint32(0)
)


process.tpparams12 = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('EcalTPGPhysicsConstRcd')
)


process.twinmuxParamsSource = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('L1TTwinMuxParamsRcd')
)


process.prefer("TTClusterAlgorithm_official_Phase2TrackerDigi_")

process.prefer("TTStubAlgorithm_official_Phase2TrackerDigi_")

process.prefer("siPixelFakeGainOfflineESSource")

process.prefer("es_hardcode")

process.prefer("ppsDBESSource")

process.me0TriggerRealDigiTask = cms.Task(process.me0TriggerDigis, process.simMuonME0PadDigis)


process.me0LocalRecoTask = cms.Task(process.me0RecHits, process.me0Segments)


process.pfParticleNetTask = cms.Task(process.pfMassDecorrelatedParticleNetJetTags, process.pfParticleNetDiscriminatorsJetTags, process.pfParticleNetJetTags, process.pfParticleNetTagInfos, process.primaryVertexAssociation, process.puppi)


process.ak4JTAExplicitTask = cms.Task(process.ak4JetTracksAssociatorExplicit)


process.hgcalBackEndLayer2HFNose = cms.Task(process.hgcalBackEndLayer2ProducerHFNose)


process.uncleanedOnlyConversionTrackProducersTask = cms.Task(process.uncleanedOnlyGeneralConversionTrackProducer, process.uncleanedOnlyGsfConversionTrackProducer, process.uncleanedOnlyInOutConversionTrackProducer, process.uncleanedOnlyOutInConversionTrackProducer)


process.recoPFMETTask = cms.Task(process.particleFlowForChargedMET, process.pfChMet, process.pfMet, process.pfMetPuppi, process.puppiNoLep)


process.conversionTask = cms.Task(process.conversions)


process.LowPtTripletStepTask = cms.Task(process.lowPtTripletStepClusters, process.lowPtTripletStepHitDoublets, process.lowPtTripletStepHitTriplets, process.lowPtTripletStepSeedLayers, process.lowPtTripletStepSeeds, process.lowPtTripletStepSelector, process.lowPtTripletStepTrackCandidates, process.lowPtTripletStepTrackingRegions, process.lowPtTripletStepTracks)


process.ticlMIPStepTask = cms.Task(process.filteredLayerClustersMIP, process.ticlMultiClustersFromTrackstersMIP, process.ticlSeedingGlobal, process.ticlTrackstersMIP)


process.ticlTrkStepTask = cms.Task(process.filteredLayerClustersTrk, process.ticlMultiClustersFromTrackstersTrk, process.ticlSeedingTrk, process.ticlTrackstersTrk)


process.recoPFJetsHITask = cms.Task(process.PFTowers, process.ak4PFJets, process.ak4PFJetsCHS, process.akCs4PFJets, process.akPu3PFJets, process.akPu4PFJets, process.fixedGridRhoAll, process.fixedGridRhoFastjetAll, process.fixedGridRhoFastjetCentral, process.fixedGridRhoFastjetCentralChargedPileUp, process.fixedGridRhoFastjetCentralNeutral, process.hiFJRhoProducer, process.kt4PFJetsForRho, process.pfNoPileUpJMEHI)


process.fastTimingGlobalRecoTask = cms.Task(process.mtdTrackQualityMVA, process.trackExtenderWithMTD)


process.JetCoreRegionalStepTask = cms.Task(process.firstStepGoodPrimaryVertices, process.jetCoreRegionalStep, process.jetCoreRegionalStepHitDoublets, process.jetCoreRegionalStepSeedLayers, process.jetCoreRegionalStepSeeds, process.jetCoreRegionalStepTrackCandidates, process.jetCoreRegionalStepTrackingRegions, process.jetCoreRegionalStepTracks, process.jetsForCoreTracking)


process.l1PFMetsTask = cms.Task(process.l1PFMetCalo, process.l1PFMetPF, process.l1PFMetPuppi)


process.gedGsfElectronTaskTmp = cms.Task(process.gedGsfElectronCores, process.gedGsfElectronValueMapsTmp, process.gedGsfElectronsTmp)


process.ckfTracksFromOldEGConversionsTask = cms.Task(process.ckfInOutTracksFromOldEGConversions, process.ckfOutInTracksFromOldEGConversions, process.oldegConversionTrackCandidates)


process.seldigisTask = cms.Task(process.selectDigi)


process.hfnoseVFE = cms.Task(process.hfnoseVFEProducer)


process.hpsPFTauBasicDiscriminatorsTask = cms.Task(process.hpsPFTauBasicDiscriminators)


process.gedElectronPFIsolationDepositsTask = cms.Task(process.gedElPFIsoDepositCharged, process.gedElPFIsoDepositChargedAll, process.gedElPFIsoDepositGamma, process.gedElPFIsoDepositNeutral, process.gedElPFIsoDepositPU)


process.lowPtGsfElectronTask = cms.Task(process.lowPtGsfEleCkfTrackCandidates, process.lowPtGsfEleGsfTracks, process.lowPtGsfElePfGsfTracks, process.lowPtGsfElePfTracks, process.lowPtGsfElectronCores, process.lowPtGsfElectronID, process.lowPtGsfElectronSeedValueMaps, process.lowPtGsfElectronSeeds, process.lowPtGsfElectronSuperClusters, process.lowPtGsfElectrons, process.lowPtGsfToTrackLinks)


process.ticlHFNoseEMStepTask = cms.Task(process.filteredLayerClustersHFNoseEM, process.ticlSeedingGlobalHFNose, process.ticlTrackstersHFNoseEM)


process.cosmicsMuonIdTask = cms.Task(process.cosmicsVeto, process.cosmicsVetoSeeds, process.cosmicsVetoTrackCandidates, process.cosmicsVetoTracks, process.cosmicsVetoTracksRaw)


process.gedElectronPFIsolationValuesTask = cms.Task(process.gedElPFIsoValueCharged03, process.gedElPFIsoValueChargedAll03, process.gedElPFIsoValueGamma03, process.gedElPFIsoValueNeutral03, process.gedElPFIsoValuePU03)


process.ticlTracksterMergeTask = cms.Task(process.ticlMultiClustersFromTrackstersMerge, process.ticlTrackstersMerge)


process.hiConformalPixelTracksTaskPhase1 = cms.Task(process.hiConformalPixelTracks, process.hiConformalPixelTracksPhase1Filter, process.hiConformalPixelTracksPhase1HitDoubletsCA, process.hiConformalPixelTracksPhase1HitQuadrupletsCA, process.hiConformalPixelTracksPhase1SeedLayers, process.hiConformalPixelTracksPhase1TrackingRegions, process.pixelFitterByConformalMappingAndLine)


process.particleFlowTrackTask = cms.Task(process.pfTrack, process.pfTrackElec)


process.photonPFIsolationValuesTask = cms.Task(process.phPFIsoValueCharged03PFId, process.phPFIsoValueCharged04PFId, process.phPFIsoValueChargedAll03PFId, process.phPFIsoValueChargedAll04PFId, process.phPFIsoValueGamma03PFId, process.phPFIsoValueGamma04PFId, process.phPFIsoValueNeutral03PFId, process.phPFIsoValueNeutral04PFId, process.phPFIsoValuePU03PFId, process.phPFIsoValuePU04PFId)


process.produceHPSPFTausTask = cms.Task(process.hpsPFTauProducer, process.hpsPFTauProducerSansRefs, process.hpsSelectionDiscriminator)


process.pfDeepBoostedJetTask = cms.Task(process.pfDeepBoostedDiscriminatorsJetTags, process.pfDeepBoostedJetTagInfos, process.pfDeepBoostedJetTags, process.pfMassDecorrelatedDeepBoostedDiscriminatorsJetTags, process.pfMassDecorrelatedDeepBoostedJetTags, process.primaryVertexAssociation, process.puppi)


process.impactParameterTask = cms.Task(process.impactParameterMVABJetTags, process.impactParameterTagInfos, process.jetBProbabilityBJetTags, process.jetProbabilityBJetTags, process.negativeOnlyJetBProbabilityBJetTags, process.negativeOnlyJetProbabilityBJetTags, process.negativeTrackCountingHighEffBJetTags, process.negativeTrackCountingHighPurBJetTags, process.pfImpactParameterAK8TagInfos, process.pfImpactParameterCA15TagInfos, process.pfImpactParameterTagInfos, process.pfJetBProbabilityBJetTags, process.pfJetProbabilityBJetTags, process.pfNegativeOnlyJetBProbabilityBJetTags, process.pfNegativeOnlyJetProbabilityBJetTags, process.pfNegativeTrackCountingHighEffBJetTags, process.pfNegativeTrackCountingHighPurBJetTags, process.pfPositiveOnlyJetBProbabilityBJetTags, process.pfPositiveOnlyJetProbabilityBJetTags, process.pfTrackCountingHighEffBJetTags, process.pfTrackCountingHighPurBJetTags, process.positiveOnlyJetBProbabilityBJetTags, process.positiveOnlyJetProbabilityBJetTags, process.trackCountingHighEffBJetTags, process.trackCountingHighPurBJetTags)


process.muonSeededStepCoreOutInTask = cms.Task(process.muonSeededSeedsOutIn, process.muonSeededTrackCandidatesOutIn, process.muonSeededTracksOutIn)


process.pfNoPileUpIsoTask = cms.Task(process.pfNoPileUpIso, process.pfPileUpIso)


process.hgcalConcentrator = cms.Task(process.hgcalConcentratorProducer)


process.pfDeepFlavourTask = cms.Task(process.pfDeepFlavourJetTags, process.pfDeepFlavourTagInfos, process.primaryVertexAssociation, process.puppi)


process.GsfGlobalElectronTestTask = cms.Task(process.CkfElectronCandidates, process.GsfGlobalElectronTest)


process.secondaryVertexTask = cms.Task(process.bToCharmDecayVertexMerged, process.combinedInclusiveSecondaryVertexV2BJetTags, process.combinedSecondaryVertexV2BJetTags, process.doubleSecondaryVertexHighEffBJetTags, process.ghostTrackBJetTags, process.ghostTrackVertexTagInfos, process.inclusiveSecondaryVertexFinderFilteredNegativeTagInfos, process.inclusiveSecondaryVertexFinderFilteredTagInfos, process.inclusiveSecondaryVertexFinderNegativeTagInfos, process.inclusiveSecondaryVertexFinderTagInfos, process.inclusiveSecondaryVerticesFiltered, process.negativeCombinedInclusiveSecondaryVertexV2BJetTags, process.negativeCombinedSecondaryVertexV2BJetTags, process.negativeSimpleInclusiveSecondaryVertexHighEffBJetTags, process.negativeSimpleInclusiveSecondaryVertexHighPurBJetTags, process.negativeSimpleSecondaryVertexHighEffBJetTags, process.negativeSimpleSecondaryVertexHighPurBJetTags, process.pfBoostedDoubleSVAK8TagInfos, process.pfBoostedDoubleSVCA15TagInfos, process.pfBoostedDoubleSecondaryVertexAK8BJetTags, process.pfBoostedDoubleSecondaryVertexCA15BJetTags, process.pfCombinedInclusiveSecondaryVertexV2BJetTags, process.pfCombinedSecondaryVertexV2BJetTags, process.pfGhostTrackBJetTags, process.pfGhostTrackVertexTagInfos, process.pfInclusiveSecondaryVertexFinderAK8TagInfos, process.pfInclusiveSecondaryVertexFinderCA15TagInfos, process.pfInclusiveSecondaryVertexFinderNegativeTagInfos, process.pfInclusiveSecondaryVertexFinderTagInfos, process.pfNegativeCombinedInclusiveSecondaryVertexV2BJetTags, process.pfNegativeCombinedSecondaryVertexV2BJetTags, process.pfNegativeSimpleInclusiveSecondaryVertexHighEffBJetTags, process.pfNegativeSimpleInclusiveSecondaryVertexHighPurBJetTags, process.pfNegativeSimpleSecondaryVertexHighEffBJetTags, process.pfNegativeSimpleSecondaryVertexHighPurBJetTags, process.pfPositiveCombinedInclusiveSecondaryVertexV2BJetTags, process.pfPositiveCombinedSecondaryVertexV2BJetTags, process.pfSecondaryVertexNegativeTagInfos, process.pfSecondaryVertexTagInfos, process.pfSimpleInclusiveSecondaryVertexHighEffBJetTags, process.pfSimpleInclusiveSecondaryVertexHighPurBJetTags, process.pfSimpleSecondaryVertexHighEffBJetTags, process.pfSimpleSecondaryVertexHighPurBJetTags, process.positiveCombinedInclusiveSecondaryVertexV2BJetTags, process.positiveCombinedSecondaryVertexV2BJetTags, process.secondaryVertexNegativeTagInfos, process.secondaryVertexTagInfos, process.simpleInclusiveSecondaryVertexHighEffBJetTags, process.simpleInclusiveSecondaryVertexHighPurBJetTags, process.simpleSecondaryVertexHighEffBJetTags, process.simpleSecondaryVertexHighPurBJetTags)


process.muIsoDeposits_ParamGlobalMuonsOldTask = cms.Task(process.muParamGlobalIsoDepositCalEcal, process.muParamGlobalIsoDepositCalHcal, process.muParamGlobalIsoDepositGsTk)


process.allConversionTask = cms.Task(process.allConversions)


process.recoJetIdsTask = cms.Task(process.ak4JetID)


process.pfClusteringPSTask = cms.Task(process.particleFlowClusterPS, process.particleFlowRecHitPS)


process.conversionTrackProducersTask = cms.Task(process.conversionStepConversionTrackProducer, process.generalConversionTrackProducer, process.gsfConversionTrackProducer, process.inOutConversionTrackProducer, process.outInConversionTrackProducer)


process.muIsoDeposits_muonsTask = cms.Task(process.muIsoDepositCalByAssociatorTowers, process.muIsoDepositJets, process.muIsoDepositTk)


process.interestingEgammaIsoDetIdsTask = cms.Task(process.interestingGamIsoDetIdEB, process.interestingGamIsoDetIdEE, process.interestingGedEgammaIsoESDetId, process.interestingGedEgammaIsoHCALDetId, process.interestingGedEleIsoDetIdEB, process.interestingGedEleIsoDetIdEE, process.interestingGedGamIsoDetIdEB, process.interestingGedGamIsoDetIdEE, process.interestingOotEgammaIsoESDetId, process.interestingOotEgammaIsoHCALDetId, process.interestingOotGamIsoDetIdEB, process.interestingOotGamIsoDetIdEE)


process.CastorFullRecoTask = cms.Task(process.CastorTowerReco, process.ak5CastorJetID, process.ak5CastorJets, process.ak7CastorJetID, process.ak7CastorJets)


process.hcalOnlyLocalRecoTask = cms.Task(process.hbheprereco, process.hfprereco, process.hfreco, process.horeco)


process.hpsPFTauDiscriminationByIsolationMVArun2v1DBoldDMwLTTask = cms.Task(process.hpsPFTauDiscriminationByIsolationMVArun2v1DBoldDMwLT, process.hpsPFTauDiscriminationByIsolationMVArun2v1DBoldDMwLTraw)


process.electronSeedsSeqTask = cms.Task(process.highPtTripletStepSeedClusterMask, process.initialStepSeedClusterMask, process.newCombinedSeeds, process.pixelPairStepSeedClusterMask, process.tripletElectronHitDoublets, process.tripletElectronHitTriplets, process.tripletElectronSeedLayers, process.tripletElectronSeeds, process.tripletElectronTrackingRegions)


process.RawToDigiTask_pixelOnly = cms.Task(process.siPixelDigis)


process.oldegConversionTrackMergersTask = cms.Task(process.generalInOutOutInOldEGConversionTrackMerger, process.gsfGeneralInOutOutInOldEGConversionTrackMerger, process.inOutOutInOldEGConversionTrackMerger)


process.hgcalTowerMapHFNose = cms.Task(process.hgcalTowerMapProducerHFNose)


process.muoncosmicreco2legsSTATask = cms.Task(process.CosmicMuonSeed, process.cosmicMuons)


process.photonIDTask = cms.Task(process.PhotonIDProd)


process.combinedMVATask = cms.Task(process.combinedMVAV2BJetTags, process.negativeCombinedMVAV2BJetTags, process.pfCombinedMVAV2BJetTags, process.pfNegativeCombinedMVAV2BJetTags, process.pfPositiveCombinedMVAV2BJetTags, process.positiveCombinedMVAV2BJetTags)


process.ak7JTATask = cms.Task(process.ak7JetExtender, process.ak7JetTracksAssociatorAtCaloFace, process.ak7JetTracksAssociatorAtVertex, process.ak7JetTracksAssociatorAtVertexPF)


process.electronPFIsolationDepositsTask = cms.Task(process.elPFIsoDepositCharged, process.elPFIsoDepositChargedAll, process.elPFIsoDepositGamma, process.elPFIsoDepositNeutral, process.elPFIsoDepositPU)


process.reducedEcalRecHitsTask = cms.Task(process.interestingEcalDetIdEB, process.interestingEcalDetIdEBU, process.interestingEcalDetIdEE, process.interestingEcalDetIdOOTPFEB, process.interestingEcalDetIdOOTPFEE, process.interestingEcalDetIdOOTPFES, process.interestingEcalDetIdPFEB, process.interestingEcalDetIdPFEE, process.interestingEcalDetIdPFES, process.interestingEcalDetIdRefinedEB, process.interestingEcalDetIdRefinedEE, process.interestingEcalDetIdRefinedES, process.interestingTrackEcalDetIds, process.reducedEcalRecHitsEB, process.reducedEcalRecHitsEE, process.seldigisTask)


process.hgcalTowerMap = cms.Task(process.hgcalTowerMapProducer)


process.hgcalTowerHFNose = cms.Task(process.hgcalTowerProducerHFNose)


process.ootPhotonTask = cms.Task(process.ootPhotonCore, process.ootPhotons, process.ootPhotonsTmp, process.particleFlowClusterOOTECAL, process.particleFlowClusterOOTECALUncorrected, process.particleFlowRecHitOOTECAL, process.particleFlowSuperClusterOOTECAL)


process.hgcalTower = cms.Task(process.hgcalTowerProducer)


process.muoncosmicreco1legHighLevelTask = cms.Task(process.muonsFromCosmics1Leg)


process.pfGsfElectronMVASelectionTask = cms.Task(process.electronsWithPresel, process.mvaElectrons)


process.gedPhotonTask = cms.Task(process.gedPhotons)


process.particleFlowClusterECALTask = cms.Task(process.ecalBarrelClusterFastTimer, process.particleFlowClusterECAL, process.particleFlowTimeAssignerECAL)


process.particleBasedIsolationTask = cms.Task(process.particleBasedIsolation)


process.hgcalBackEndLayer2 = cms.Task(process.hgcalBackEndLayer2Producer)


process.ckfTracksFromConversionsTask = cms.Task(process.ckfInOutTracksFromConversions, process.ckfOutInTracksFromConversions, process.conversionTrackCandidates)


process.standAloneMuonSeedsTask = cms.Task(process.ancientMuonSeed)


process.particleFlowTrackWithDisplacedVertexTask = cms.Task(process.particleFlowDisplacedVertex, process.particleFlowDisplacedVertexCandidate, process.pfConversions, process.pfDisplacedTrackerVertex, process.pfTrack, process.pfTrackElec, process.pfV0)


process.hgcalConcentratorHFNose = cms.Task(process.hgcalConcentratorProducerHFNose)


process.L1TRawToDigi_Stage1 = cms.Task(process.caloStage1Digis, process.caloStage1FinalDigis, process.caloStage1LegacyFormatDigis, process.csctfDigis, process.dttfDigis, process.gctDigis, process.gtDigis)


process.L1TRawToDigi_Stage2 = cms.Task(process.bmtfDigis, process.caloLayer1Digis, process.caloStage2Digis, process.emtfStage2Digis, process.gmtStage2Digis, process.gtStage2Digis, process.omtfStage2Digis, process.rpcCPPFRawToDigi, process.rpcTwinMuxRawToDigi, process.twinMuxStage2Digis)


process.electronPFIsolationValuesTask = cms.Task(process.elPFIsoValueCharged03, process.elPFIsoValueCharged04, process.elPFIsoValueChargedAll03, process.elPFIsoValueChargedAll04, process.elPFIsoValueGamma03, process.elPFIsoValueGamma04, process.elPFIsoValueNeutral03, process.elPFIsoValueNeutral04, process.elPFIsoValuePU03, process.elPFIsoValuePU04)


process.muonSeededStepDebugDisplacedTask = cms.Task(cms.TaskPlaceholder("muonSeededStepDebugInOutTask"), process.muonSeededSeedsOutInDisplacedAsTracks, process.muonSeededTrackCandidatesOutInDisplacedAsTracks)


process.PixelLessStepTask = cms.Task(process.pixelLessStep, process.pixelLessStepClassifier1, process.pixelLessStepClassifier2, process.pixelLessStepClusters, process.pixelLessStepHitDoublets, process.pixelLessStepHitTriplets, process.pixelLessStepSeedLayers, process.pixelLessStepSeeds, process.pixelLessStepTrackCandidates, process.pixelLessStepTrackingRegions, process.pixelLessStepTracks)


process.l1PFJetsPhase1Task = cms.Task(process.Phase1L1TJetCalibrator, process.Phase1L1TJetProducer)


process.BeamHaloIdTask = cms.Task(process.BeamHaloSummary, process.CSCHaloData, process.EcalHaloData, process.GlobalHaloData, process.HcalHaloData)


process.SimL1TechnicalTriggersTask = cms.Task(process.simGtExtFakeStage2Digis)


process.ticlEMStepTask = cms.Task(process.filteredLayerClustersEM, process.ticlMultiClustersFromTrackstersEM, process.ticlSeedingGlobal, process.ticlTrackstersEM)


process.me0TriggerPseudoDigiTask = cms.Task(process.me0RecHits, process.me0RecHitsCoarse, process.me0Segments, process.me0TriggerConvertedPseudoDigis, process.me0TriggerPseudoDigis, process.simMuonME0PseudoReDigisCoarse)


process.conversionTrackMergersTask = cms.Task(process.generalConversionStepConversionTrackMerger, process.generalInOutOutInConversionTrackMerger, process.gsfGeneralInOutOutInConversionTrackMerger, process.inOutOutInConversionTrackMerger)


process.regionalCosmicTracksTask = cms.Task(process.regionalCosmicCkfTrackCandidates, process.regionalCosmicTrackerSeedingLayers, process.regionalCosmicTrackerSeeds, process.regionalCosmicTracks)


process.muonIdProducerTask = cms.Task(process.glbTrackQual, process.muonEcalDetIds, process.muonShowerInformation, process.muons1stStep)


process.photonTask = cms.Task(process.photonCore, process.photonCoreFromMultiCl, process.photons, process.photonsFromMultiCl)


process.caloJetsForTrkTask = cms.Task(process.ak4CaloJetsForTrk, process.caloTowerForTrk)


process.recoAllJetsPUOffsetCorrTask = cms.Task(process.ak4CaloJetsPUCorr, process.fixedGridRhoFastjetAllCalo, process.fixedGridRhoFastjetCentralCalo)


process.HighPtTripletStepTask = cms.Task(process.highPtTripletStepClusters, process.highPtTripletStepHitDoublets, process.highPtTripletStepHitTriplets, process.highPtTripletStepSeedLayers, process.highPtTripletStepSeeds, process.highPtTripletStepSelector, process.highPtTripletStepTrackCandidates, process.highPtTripletStepTrackingRegions, process.highPtTripletStepTracks)


process.muonSeededStepCoreDisplacedTask = cms.Task(cms.TaskPlaceholder("muonSeededStepCoreInOutTask"), process.muonSeededSeedsOutInDisplaced, process.muonSeededTrackCandidatesOutInDisplaced, process.muonSeededTracksOutInDisplaced)


process.pixeltrackerlocalrecoTask = cms.Task(process.siPhase2Clusters, process.siPixelClustersPreSplitting, process.siPixelRecHitsPreSplitting)


process.recoJetAssociationsExplicitTask = cms.Task(process.ak4JTAExplicitTask)


process.JetPlusTrackCorrectionsAntiKt4Task = cms.Task(process.JPTeidTight, process.JetPlusTrackZSPCorJetAntiKt4, process.ak4JetTracksAssociatorAtCaloFace, process.ak4JetTracksAssociatorAtVertexJPT)


process.particleFlowSuperClusteringTask = cms.Task(process.particleFlowSuperClusterECAL, process.particleFlowSuperClusterHGCal, process.particleFlowSuperClusterHGCalFromMultiCl)


process.TobTecStepTask = cms.Task(process.tobTecStep, process.tobTecStepClassifier1, process.tobTecStepClassifier2, process.tobTecStepClusters, process.tobTecStepHitDoubletsPair, process.tobTecStepHitDoubletsTripl, process.tobTecStepHitTripletsTripl, process.tobTecStepSeedLayersPair, process.tobTecStepSeedLayersTripl, process.tobTecStepSeeds, process.tobTecStepSeedsPair, process.tobTecStepSeedsTripl, process.tobTecStepTrackCandidates, process.tobTecStepTrackingRegionsPair, process.tobTecStepTrackingRegionsTripl, process.tobTecStepTracks)


process.muonSeededStepExtraDisplacedTask = cms.Task(cms.TaskPlaceholder("muonSeededStepExtraInOutTask"), process.muonSeededTracksOutInDisplacedClassifier)


process.dtlocalrecoTask = cms.Task(process.dt1DCosmicRecHits, process.dt1DRecHits, process.dt4DCosmicSegments, process.dt4DSegments)


process.hpsPFTauVertexAndImpactParametersTask = cms.Task(process.hpsPFTauPrimaryVertexProducer, process.hpsPFTauSecondaryVertexProducer, process.hpsPFTauTransverseImpactParameters)


process.uncleanedOnlyTrackingTask = cms.Task(process.uncleanedOnlyElectronCkfTrackCandidates, process.uncleanedOnlyElectronGsfTracks, process.uncleanedOnlyElectronSeeds)


process.InitialStepTask = cms.Task(process.caloJetsForTrkTask, process.firstStepPrimaryVertices, process.firstStepPrimaryVerticesUnsorted, process.initialStepHitDoublets, process.initialStepHitQuadruplets, process.initialStepSeedLayers, process.initialStepSeeds, process.initialStepSelector, process.initialStepTrackCandidates, process.initialStepTrackRefsForJets, process.initialStepTrackingRegions, process.initialStepTracks)


process.pfSortByTypeTask = cms.Task(process.pfAllChargedHadrons, process.pfAllChargedParticles, process.pfAllNeutralHadrons, process.pfAllNeutralHadronsAndPhotons, process.pfAllPhotons, process.pfPileUpAllChargedParticles)


process.islandClusteringTask = cms.Task(process.correctedIslandBarrelSuperClusters, process.correctedIslandEndcapSuperClusters, process.islandBasicClusters, process.islandSuperClusters)


process.ticlHFNoseMIPStepTask = cms.Task(process.filteredLayerClustersHFNoseMIP, process.ticlSeedingGlobalHFNose, process.ticlTrackstersHFNoseMIP)


process.uncleanedOnlyCkfTracksFromConversionsTask = cms.Task(process.uncleanedOnlyCkfInOutTracksFromConversions, process.uncleanedOnlyCkfOutInTracksFromConversions, process.uncleanedOnlyConversionTrackCandidates)


process.Conv2StepTask = cms.Task(process.conv2Clusters, process.conv2LayerPairs, process.conv2StepSelector, process.conv2StepTracks, process.conv2TrackCandidates, process.photonConvTrajSeedFromQuadruplets)


process.muonPFIsolationDepositsTask = cms.Task(process.muPFIsoDepositCharged, process.muPFIsoDepositChargedAll, process.muPFIsoDepositGamma, process.muPFIsoDepositNeutral, process.muPFIsoDepositPU)


process.simMuonGEMPadTask = cms.Task(process.simMuonGEMPadDigiClusters, process.simMuonGEMPadDigis)


process.ctppsPixelLocalReconstructionTask = cms.Task(process.ctppsPixelClusters, process.ctppsPixelLocalTracks, process.ctppsPixelRecHits)


process.PixelPairStepTask = cms.Task(process.pixelPairStepClusters, process.pixelPairStepHitDoublets, process.pixelPairStepSeedLayers, process.pixelPairStepSeeds, process.pixelPairStepSelector, process.pixelPairStepTrackCandidates, process.pixelPairStepTrackingRegions, process.pixelPairStepTracks)


process.L1TRawToDigi_Legacy = cms.Task(process.csctfDigis, process.dttfDigis, process.gctDigis, process.gtDigis, process.gtEvmDigis)


process.muonreco_with_standAloneSET_Task = cms.Task(process.SETMuonSeed, process.standAloneSETMuons)


process.l1ParticleFlow_pf_hf_Task = cms.Task(process.l1pfProducerHF)


process.LowPtQuadStepTask = cms.Task(process.lowPtQuadStepClusters, process.lowPtQuadStepHitDoublets, process.lowPtQuadStepHitQuadruplets, process.lowPtQuadStepSeedLayers, process.lowPtQuadStepSeeds, process.lowPtQuadStepSelector, process.lowPtQuadStepTrackCandidates, process.lowPtQuadStepTrackingRegions, process.lowPtQuadStepTracks)


process.ConvStepTask = cms.Task(process.convClusters, process.convLayerPairs, process.convStepSelector, process.convStepTracks, process.convTrackCandidates, process.photonConvTrajSeedFromSingleLeg)


process.hiConformalPixelTracksTask = cms.Task(process.hiConformalPixelFilter, process.hiConformalPixelTracks, process.hiConformalPixelTracksHitDoublets, process.hiConformalPixelTracksHitTriplets, process.hiTrackingRegionWithVertex, process.pixelFitterByConformalMappingAndLine)


process.pfTrackingGlobalRecoTask = cms.Task(process.particleFlowTrackWithDisplacedVertexTask)


process.uncleanedOnlyElectronsTask = cms.Task(process.uncleanedOnlyGsfElectronCores, process.uncleanedOnlyGsfElectrons)


process.RawToDigiTask_hcalOnly = cms.Task(process.hcalDigis)


process.muontracking_with_SET_Task = cms.Task(process.SETMuonSeed, process.globalSETMuons, process.standAloneSETMuons)


process.hpsPFTauDiscriminationByIsolationMVArun2v1DBdR03oldDMwLTTask = cms.Task(process.hpsPFTauDiscriminationByIsolationMVArun2v1DBdR03oldDMwLT, process.hpsPFTauDiscriminationByIsolationMVArun2v1DBdR03oldDMwLTraw)


process.ctfTracksNoOverlapsTask = cms.Task(process.ckfTrackCandidatesNoOverlaps, process.ctfNoOverlaps)


process.recoJetsTask = cms.Task(process.ak4CaloJets, process.fixedGridRhoFastjetAllCalo, process.fixedGridRhoFastjetCentralCalo)


process.ak4PFL1FastL2L3CorrectorTask = cms.Task(process.ak4PFL1FastL2L3Corrector, process.ak4PFL1FastjetCorrector, process.ak4PFL2RelativeCorrector, process.ak4PFL3AbsoluteCorrector)


process.particleFlowLinksTask = cms.Task(process.chargedHadronPFTrackIsolation, process.particleBasedIsolationTask, process.particleFlow, process.particleFlowPtrs)


process.reducedEcalRecHitsSequenceEcalOnlyTask = cms.Task(process.interestingEcalDetIdEB, process.interestingEcalDetIdEBU, process.interestingEcalDetIdEE, process.reducedEcalRecHitsEB, process.reducedEcalRecHitsEE, process.seldigisTask)


process.gemLocalRecoTask = cms.Task(process.gemRecHits, process.gemSegments)


process.sisCone5JTATask = cms.Task(process.sisCone5JetExtender, process.sisCone5JetTracksAssociatorAtCaloFace, process.sisCone5JetTracksAssociatorAtVertex)


process.pfClusterIsolationTask = cms.Task(process.electronEcalPFClusterIsolationProducer, process.electronHcalPFClusterIsolationProducer, process.ootPhotonEcalPFClusterIsolationProducer, process.ootPhotonHcalPFClusterIsolationProducer, process.photonEcalPFClusterIsolationProducer, process.photonHcalPFClusterIsolationProducer)


process.recoTrackJetsTask = cms.Task(process.ak4TrackJets, process.trackRefsForJets, process.trackWithVertexRefSelector)


process.pfDeepCSVTask = cms.Task(process.pfDeepCMVAJetTags, process.pfDeepCMVATagInfos, process.pfDeepCSVJetTags, process.pfDeepCSVTagInfos)


process.metrecoPlusHCALNoiseTask = cms.Task(process.BeamHaloIdTask, process.caloMet, process.caloMetBE, process.caloMetBEFO, process.caloMetM, process.muonMETValueMapProducer)


process.jetGlobalRecoTask = cms.Task(process.recoJetIdsTask, process.recoJetsTask, process.recoTrackJetsTask)


process.CombinedCharmTagJetTagsTask = cms.Task(process.pfNegativeCombinedCvsBJetTags, process.pfNegativeCombinedCvsLJetTags, process.pfPositiveCombinedCvsBJetTags, process.pfPositiveCombinedCvsLJetTags)


process.pfNoPileUpTask = cms.Task(process.pfNoPileUp, process.pfPileUp)


process.ecalRecHitNoTPTask = cms.Task(process.ecalPreshowerRecHit, process.ecalRecHit)


process.hybridClusteringTask = cms.Task(process.cleanedHybridSuperClusters, process.correctedHybridSuperClusters, process.hybridSuperClusters, process.uncleanedHybridSuperClusters, process.uncleanedOnlyCorrectedHybridSuperClusters)


process.ckfTracksFromMustacheConversionsTask = cms.Task(process.ckfInOutTracksFromMustacheConversions, process.ckfOutInTracksFromMustacheConversions, process.mustacheConversionTrackCandidates)


process.doAlldEdXEstimatorsTask = cms.Task(process.dedxHarmonic2, process.dedxHitInfo, process.dedxPixelAndStripHarmonic2T085, process.dedxPixelHarmonic2, process.dedxTruncated40)


process.pfClusteringHBHEHFOnlyTask = cms.Task(process.particleFlowClusterHBHEOnly, process.particleFlowClusterHCALOnly, process.particleFlowClusterHF, process.particleFlowRecHitHBHEOnly, process.particleFlowRecHitHF)


process.oldegConversionTrackProducersTask = cms.Task(process.inOutOldEGConversionTrackProducer, process.outInOldEGConversionTrackProducer)


process.hcalLocalRecoTaskNZS = cms.Task(process.hbherecoMB, process.hfprerecoMB, process.hfrecoMB, process.horecoMB)


process.generalTracksTask = cms.Task(process.duplicateTrackCandidates, process.duplicateTrackClassifier, process.generalTracks, process.mergedDuplicateTracks)


process.ctppsRawToDigiTask = cms.Task(process.ctppsDiamondRawToDigi, process.ctppsPixelDigis, process.totemRPRawToDigi, process.totemTimingRawToDigi, process.totemTriggerRawToDigi)


process.muonreco_with_SET_Task = cms.Task(process.muontracking_with_SET_Task)


process.hcalLocalRecoTask = cms.Task(process.hfprereco, process.hfreco, process.horeco, process.zdcreco)


process.InitialStepPreSplittingTask = cms.Task(process.MeasurementTrackerEvent, process.siPixelClusterShapeCache, process.siPixelClusters, process.siPixelRecHits)


process.recoTauCommonTask = cms.Task(process.ak4PFJetTracksAssociatorAtVertex, process.pfRecoTauTagInfoProducer, process.recoTauAK4PFJets08Region, process.recoTauPileUpVertices)


process.ctppsDiamondLocalReconstructionTask = cms.Task(process.ctppsDiamondLocalTracks, process.ctppsDiamondRecHits)


process.ctfTracksCombinedSeedsTask = cms.Task(process.MixedLayerPairs, process.PixelLayerTriplets, process.ckfTrackCandidatesCombinedSeeds, process.ctfCombinedSeeds, process.globalCombinedSeeds, process.globalSeedsFromPairsWithVertices, process.globalSeedsFromTriplets)


process.muonSeededStepDisplacedTask = cms.Task(process.earlyDisplacedMuons, process.muonSeededStepCoreDisplacedTask, process.muonSeededStepExtraDisplacedTask)


process.kt4JTATask = cms.Task(process.kt4JetExtender, process.kt4JetTracksAssociatorAtCaloFace, process.kt4JetTracksAssociatorAtVertex)


process.muIsolation_muonsTask = cms.Task(process.muIsoDeposits_muonsTask)


process.cTaggingTask = cms.Task(process.CombinedCharmTagJetTagsTask, process.pfCombinedCvsBJetTags, process.pfCombinedCvsLJetTags, process.pfInclusiveSecondaryVertexFinderCvsLTagInfos, process.pfInclusiveSecondaryVertexFinderNegativeCvsLTagInfos, process.pfSecondaryVertexTagInfos)


process.mvaIsolation2TaskRun2 = cms.Task(process.discriminationByIsolationMVArun2v1, process.discriminationByIsolationMVArun2v1raw, process.hpsPFTauBasicDiscriminators)


process.standalonemuontrackingTask = cms.Task(process.displacedMuonSeeds, process.displacedStandAloneMuons, process.refittedStandAloneMuons, process.standAloneMuonSeedsTask, process.standAloneMuons)


process.DetachedTripletStepTask = cms.Task(process.detachedTripletStep, process.detachedTripletStepClassifier1, process.detachedTripletStepClassifier2, process.detachedTripletStepClusters, process.detachedTripletStepHitDoublets, process.detachedTripletStepHitTriplets, process.detachedTripletStepSeedLayers, process.detachedTripletStepSeeds, process.detachedTripletStepTrackCandidates, process.detachedTripletStepTrackingRegions, process.detachedTripletStepTracks)


process.ak4JTATask = cms.Task(process.ak4JetExtender, process.ak4JetTracksAssociatorAtCaloFace, process.ak4JetTracksAssociatorAtVertex, process.ak4JetTracksAssociatorAtVertexPF)


process.muIsoDeposits_ParamGlobalMuonsTask = cms.Task(process.muParamGlobalIsoDepositCalByAssociatorTowers, process.muParamGlobalIsoDepositJets, process.muParamGlobalIsoDepositTk)


process.conversionOpenTrackTask = cms.Task(process.gsfTracksOpenConversionTrackProducer)


process.inclusiveCandidateVertexingCvsLTask = cms.Task(process.candidateVertexArbitratorCvsL, process.candidateVertexMergerCvsL, process.inclusiveCandidateSecondaryVerticesCvsL, process.inclusiveCandidateVertexFinderCvsL)


process.trackerlocalrecoTask = cms.Task(process.clusterSummaryProducer, process.pixeltrackerlocalrecoTask)


process.photonIDTaskGED = cms.Task(process.PhotonIDProdGED)


process.gsfEcalDrivenElectronTask = cms.Task(process.ecalDrivenGsfElectronCores, process.ecalDrivenGsfElectronCoresFromMultiCl, process.ecalDrivenGsfElectrons, process.ecalDrivenGsfElectronsFromMultiCl)


process.hfEMClusteringTask = cms.Task(process.hfEMClusters, process.hfRecoEcalCandidate)


process.l1ParticleFlow_pf_hgcal_Task = cms.Task(process.l1pfProducerHGCal, process.l1pfProducerHGCalNoTK, process.pfTracksFromL1TracksHGCal)


process.multi5x5ClusteringTask = cms.Task(process.multi5x5BasicClustersCleaned, process.multi5x5BasicClustersUncleaned, process.multi5x5SuperClusters, process.multi5x5SuperClustersCleaned, process.multi5x5SuperClustersUncleaned, process.multi5x5SuperClustersWithPreshower)


process.l1ParticleFlow_calo_Task = cms.Task(process.pfClustersFromCombinedCaloHCal, process.pfClustersFromCombinedCaloHF, process.pfClustersFromHGC3DClusters, process.pfClustersFromL1EGClusters)


process.pfNoPileUpJMETask = cms.Task(process.goodOfflinePrimaryVertices, process.pfNoPileUpJME, process.pfPileUpJME)


process.conversionTrackTaskNoEcalSeeded = cms.Task(process.generalConversionTrackProducer, process.gsfConversionTrackProducer, process.gsfGeneralConversionTrackMerger)


process.muonSelectionTypeTask = cms.Task(process.muidAllArbitrated, process.muidGMStaChiCompatibility, process.muidGMTkChiCompatibility, process.muidGMTkKinkTight, process.muidGlobalMuonPromptTight, process.muidRPCMuLoose, process.muidTM2DCompatibilityLoose, process.muidTM2DCompatibilityTight, process.muidTMLastStationAngLoose, process.muidTMLastStationAngTight, process.muidTMLastStationLoose, process.muidTMLastStationOptimizedLowPtLoose, process.muidTMLastStationOptimizedLowPtTight, process.muidTMLastStationTight, process.muidTMOneStationAngLoose, process.muidTMOneStationAngTight, process.muidTMOneStationLoose, process.muidTMOneStationTight, process.muidTrackerMuonArbitrated)


process.hgcalBackEndLayer1 = cms.Task(process.hgcalBackEndLayer1Producer)


process.hgcalLocalRecoTask = cms.Task(process.HGCalRecHit, process.HGCalUncalibRecHit, process.hgcalLayerClusters, process.hgcalMultiClusters, process.particleFlowClusterHGCal, process.particleFlowClusterHGCalFromMultiCl, process.particleFlowRecHitHGC)


process.ticlLayerTileHFNoseTask = cms.Task(process.ticlLayerTileHFNose)


process.muonSeededStepDebugInOutTask = cms.Task(process.muonSeededSeedsInOutAsTracks, process.muonSeededTrackCandidatesInOutAsTracks)


process.reducedHcalRecHitsTask = cms.Task(process.reducedHcalRecHits)


process.ticlLayerTileTask = cms.Task(process.ticlLayerTileProducer)


process.SimL1TGlobalTask = cms.Task(process.simGtStage2Digis)


process.inclusiveCandidateVertexingTask = cms.Task(process.candidateVertexArbitrator, process.candidateVertexMerger, process.inclusiveCandidateSecondaryVertices, process.inclusiveCandidateVertexFinder)


process.ticlTrkEMStepTask = cms.Task(process.filteredLayerClustersTrkEM, process.ticlMultiClustersFromTrackstersTrkEM, process.ticlSeedingTrk, process.ticlTrackstersTrkEM)


process.metrecoTask = cms.Task(process.BeamHaloIdTask, process.caloMet, process.caloMetBE, process.caloMetBEFO, process.caloMetM, process.muonMETValueMapProducer)


process.ticlPFTask = cms.Task(process.pfTICL)


process.gedPhotonTaskTmp = cms.Task(process.gedPhotonCore, process.gedPhotonsTmp)


process.caloTowersRecTask = cms.Task(process.towerMaker, process.towerMakerWithHO)


process.pfClusteringHBHEHFTask = cms.Task(process.particleFlowClusterHBHE, process.particleFlowClusterHCAL, process.particleFlowClusterHF, process.particleFlowRecHitHBHE, process.particleFlowRecHitHF)


process.striptrackerlocalrecoTask = cms.Task(process.siStripClusters, process.siStripMatchedRecHits, process.siStripZeroSuppression)


process.ctfTracksPixelLessTask = cms.Task(process.ckfTrackCandidatesPixelLess, process.ctfPixelLess, process.globalPixelLessSeeds, process.pixelLessLayerPairs4PixelLessTracking)


process.muonSeededStepExtraInOutTask = cms.Task(process.muonSeededTracksInOutSelector)


process.SimL1TMuonCommonTask = cms.Task(process.simCscTriggerPrimitiveDigis, process.simDtTriggerPrimitiveDigis)


process.cosmicDCTracksSeqTask = cms.Task(process.cosmicDCCkfTrackCandidates, process.cosmicDCSeeds, process.cosmicDCTracks)


process.pfClusteringHOTask = cms.Task(process.particleFlowClusterHO, process.particleFlowRecHitHO)


process.hpsPFTauDiscriminationByIsolationMVArun2v1DBnewDMwLTTask = cms.Task(process.hpsPFTauDiscriminationByIsolationMVArun2v1DBnewDMwLT, process.hpsPFTauDiscriminationByIsolationMVArun2v1DBnewDMwLTraw)


process.inclusiveVertexingTask = cms.Task(process.inclusiveSecondaryVertices, process.inclusiveVertexFinder, process.trackVertexArbitrator, process.vertexMerger)


process.softLeptonTask = cms.Task(process.negativeSoftPFElectronBJetTags, process.negativeSoftPFElectronByIP2dBJetTags, process.negativeSoftPFElectronByIP3dBJetTags, process.negativeSoftPFElectronByPtBJetTags, process.negativeSoftPFMuonBJetTags, process.negativeSoftPFMuonByIP2dBJetTags, process.negativeSoftPFMuonByIP3dBJetTags, process.negativeSoftPFMuonByPtBJetTags, process.positiveSoftPFElectronBJetTags, process.positiveSoftPFElectronByIP2dBJetTags, process.positiveSoftPFElectronByIP3dBJetTags, process.positiveSoftPFElectronByPtBJetTags, process.positiveSoftPFMuonBJetTags, process.positiveSoftPFMuonByIP2dBJetTags, process.positiveSoftPFMuonByIP3dBJetTags, process.positiveSoftPFMuonByPtBJetTags, process.softPFElectronBJetTags, process.softPFElectronByIP2dBJetTags, process.softPFElectronByIP3dBJetTags, process.softPFElectronByPtBJetTags, process.softPFElectronsTagInfos, process.softPFMuonBJetTags, process.softPFMuonByIP2dBJetTags, process.softPFMuonByIP3dBJetTags, process.softPFMuonByPtBJetTags, process.softPFMuonsTagInfos)


process.csclocalrecoTask = cms.Task(process.csc2DRecHits, process.cscSegments)


process.pixelTracksTask = cms.Task(process.pixelFitterByHelixProjections, process.pixelTrackFilterByKinematics, process.pixelTracks, process.pixelTracksHitDoublets, process.pixelTracksHitQuadruplets, process.pixelTracksSeedLayers, process.pixelTracksTrackingRegions)


process.hcalGlobalRecoTask = cms.Task(process.hbhereco)


process.pfClusteringHGCalTask = cms.Task(process.particleFlowRecHitHGC)


process.jetPlusTrackZSPCorJetAntiKt4Task = cms.Task(process.JetPlusTrackCorrectionsAntiKt4Task)


process.hpsPFTauBasicDiscriminatorsdR03Task = cms.Task(process.hpsPFTauBasicDiscriminatorsdR03)


process.recoJetsHITask = cms.Task(process.ak4CaloJets, process.akPu4CaloJets, process.caloTowers, process.caloTowersRecTask, process.fixedGridRhoFastjetAllCalo, process.fixedGridRhoFastjetCentralCalo)


process.eIdTask = cms.Task(process.eidLoose, process.eidRobustHighEnergy, process.eidRobustLoose, process.eidRobustTight, process.eidTight)


process.particleFlowTrackWithV0Task = cms.Task(process.pfTrack, process.pfTrackElec, process.pfV0)


process.displacedTracksTask = cms.Task(process.displacedTracks, process.duplicateDisplacedTrackCandidates, process.duplicateDisplacedTrackClassifier, process.mergedDuplicateDisplacedTracks)


process.muonSeededStepDebugTask = cms.Task(process.muonSeededSeedsOutInAsTracks, process.muonSeededStepDebugInOutTask, process.muonSeededTrackCandidatesOutInAsTracks)


process.ak4PFCHSL1FastL2L3CorrectorTask = cms.Task(process.ak4PFCHSL1FastL2L3Corrector, process.ak4PFCHSL1FastjetCorrector, process.ak4PFCHSL2RelativeCorrector, process.ak4PFCHSL3AbsoluteCorrector)


process.l1ParticleFlow_pf_barrel_Task = cms.Task(process.l1pfProducerBarrel, process.pfTracksFromL1TracksBarrel)


process.hpsPFTauMVAIsolation2Task = cms.Task(process.hpsPFTauDiscriminationByIsolationMVArun2v1DBdR03oldDMwLTTask, process.hpsPFTauDiscriminationByIsolationMVArun2v1DBnewDMwLTTask, process.hpsPFTauDiscriminationByIsolationMVArun2v1DBoldDMwLTTask)


process.recoAllJetsTask = cms.Task(process.ak4CaloJets, process.fixedGridRhoFastjetAllCalo, process.fixedGridRhoFastjetCentralCalo)


process.muoncosmicreco2legsHighLevelTask = cms.Task(process.muonsFromCosmics)


process.vertexrecoTask = cms.Task(process.caloJetsForTrkTask, process.generalV0Candidates, process.inclusiveVertexingTask, process.offlinePrimaryVertices, process.offlinePrimaryVertices4D, process.offlinePrimaryVertices4DWithBS, process.offlinePrimaryVertices4DnoPID, process.offlinePrimaryVertices4DnoPIDWithBS, process.offlinePrimaryVerticesWithBS, process.quickTrackAssociatorByHits, process.tofPID, process.tofPID4DnoPID, process.tpClusterProducer, process.trackRefsForJetsBeforeSorting, process.trackRefsForJetsBeforeSorting4D, process.trackRefsForJetsBeforeSorting4DnoPID, process.trackWithVertexRefSelectorBeforeSorting, process.trackWithVertexRefSelectorBeforeSorting4D, process.trackWithVertexRefSelectorBeforeSorting4DnoPID, process.unsortedOfflinePrimaryVertices, process.unsortedOfflinePrimaryVertices4D, process.unsortedOfflinePrimaryVertices4DnoPID)


process.uncleanedOnlyConversionTrackMergersTask = cms.Task(process.uncleanedOnlyGeneralInOutOutInConversionTrackMerger, process.uncleanedOnlyGsfGeneralInOutOutInConversionTrackMerger, process.uncleanedOnlyInOutOutInConversionTrackMerger)


process.ecalMultiFitUncalibRecHitTask = cms.Task(process.ecalMultiFitUncalibRecHit)


process.MixedTripletStepTask = cms.Task(process.chargeCut2069Clusters, process.mixedTripletStep, process.mixedTripletStepClassifier1, process.mixedTripletStepClassifier2, process.mixedTripletStepClusters, process.mixedTripletStepHitDoubletsA, process.mixedTripletStepHitDoubletsB, process.mixedTripletStepHitTripletsA, process.mixedTripletStepHitTripletsB, process.mixedTripletStepSeedLayersA, process.mixedTripletStepSeedLayersB, process.mixedTripletStepSeeds, process.mixedTripletStepSeedsA, process.mixedTripletStepSeedsB, process.mixedTripletStepTrackCandidates, process.mixedTripletStepTrackingRegionsA, process.mixedTripletStepTrackingRegionsB, process.mixedTripletStepTracks)


process.electronSeedsTask = cms.Task(process.ecalDrivenElectronSeeds, process.ecalDrivenElectronSeedsFromMultiCl, process.electronMergedSeeds, process.electronMergedSeedsFromMultiCl, process.trackerDrivenElectronSeeds)


process.hgcalVFE = cms.Task(process.hgcalVFEProducer)


process.fastTimingLocalRecoTask = cms.Task(process.mtdClusters, process.mtdRecHits, process.mtdTrackingRecHits, process.mtdUncalibratedRecHits)


process.beamhaloTracksTask = cms.Task(process.beamhaloTrackCandidates, process.beamhaloTrackerSeedingLayers, process.beamhaloTrackerSeeds, process.beamhaloTracks)


process.hgcalBackEndLayer1HFNose = cms.Task(process.hgcalBackEndLayer1ProducerHFNose)


process.muoncosmicreco1legSTATask = cms.Task(process.CosmicMuonSeed, process.cosmicMuons1Leg)


process.dtlocalreco_with_2DSegmentsTask = cms.Task(process.dt1DCosmicRecHits, process.dt1DRecHits, process.dt2DCosmicSegments, process.dt2DSegments, process.dt4DCosmicSegments, process.dt4DSegments)


process.muonPFIsolationValuesTask = cms.Task(process.muPFIsoValueCharged03, process.muPFIsoValueCharged04, process.muPFIsoValueChargedAll03, process.muPFIsoValueChargedAll04, process.muPFIsoValueGamma03, process.muPFIsoValueGamma04, process.muPFIsoValueGammaHighThreshold03, process.muPFIsoValueGammaHighThreshold04, process.muPFIsoValueNeutral03, process.muPFIsoValueNeutral04, process.muPFIsoValueNeutralHighThreshold03, process.muPFIsoValueNeutralHighThreshold04, process.muPFIsoValuePU03, process.muPFIsoValuePU04, process.muPFMeanDRIsoValueCharged03, process.muPFMeanDRIsoValueCharged04, process.muPFMeanDRIsoValueChargedAll03, process.muPFMeanDRIsoValueChargedAll04, process.muPFMeanDRIsoValueGamma03, process.muPFMeanDRIsoValueGamma04, process.muPFMeanDRIsoValueGammaHighThreshold03, process.muPFMeanDRIsoValueGammaHighThreshold04, process.muPFMeanDRIsoValueNeutral03, process.muPFMeanDRIsoValueNeutral04, process.muPFMeanDRIsoValueNeutralHighThreshold03, process.muPFMeanDRIsoValueNeutralHighThreshold04, process.muPFMeanDRIsoValuePU03, process.muPFMeanDRIsoValuePU04, process.muPFSumDRIsoValueCharged03, process.muPFSumDRIsoValueCharged04, process.muPFSumDRIsoValueChargedAll03, process.muPFSumDRIsoValueChargedAll04, process.muPFSumDRIsoValueGamma03, process.muPFSumDRIsoValueGamma04, process.muPFSumDRIsoValueGammaHighThreshold03, process.muPFSumDRIsoValueGammaHighThreshold04, process.muPFSumDRIsoValueNeutral03, process.muPFSumDRIsoValueNeutral04, process.muPFSumDRIsoValueNeutralHighThreshold03, process.muPFSumDRIsoValueNeutralHighThreshold04, process.muPFSumDRIsoValuePU03, process.muPFSumDRIsoValuePU04)


process.photonPFIsolationDepositsTask = cms.Task(process.phPFIsoDepositCharged, process.phPFIsoDepositChargedAll, process.phPFIsoDepositGamma, process.phPFIsoDepositNeutral, process.phPFIsoDepositPU)


process.uncleanedOnlyPfTrackingTask = cms.Task(process.uncleanedOnlyPfConversions, process.uncleanedOnlyPfTrack, process.uncleanedOnlyPfTrackElec)


process.totemTimingLocalReconstructionTask = cms.Task(process.totemTimingLocalTracks, process.totemTimingRecHits)


process.particleFlowTmpTask = cms.Task(process.particleFlowTmp)


process.legacyBTaggingTask = cms.Task(process.combinedInclusiveSecondaryVertexV2BJetTags, process.combinedMVAV2BJetTags, process.combinedSecondaryVertexV2BJetTags, process.ghostTrackBJetTags, process.ghostTrackVertexTagInfos, process.impactParameterTagInfos, process.inclusiveSecondaryVertexFinderTagInfos, process.jetBProbabilityBJetTags, process.jetProbabilityBJetTags, process.pixelClusterTagInfos, process.secondaryVertexTagInfos, process.simpleSecondaryVertexHighEffBJetTags, process.softPFElectronBJetTags, process.softPFElectronsTagInfos, process.softPFMuonBJetTags, process.softPFMuonsTagInfos, process.trackCountingHighEffBJetTags)


process.SimL1TCalorimeterTask = cms.Task(process.simCaloStage2Digis, process.simCaloStage2Layer1Digis)


process.iterativeCone5JTATask = cms.Task(process.iterativeCone5JetExtender, process.iterativeCone5JetTracksAssociatorAtCaloFace, process.iterativeCone5JetTracksAssociatorAtVertex)


process.particleFlowTrackWithNuclearTask = cms.Task(process.pfNuclear, process.pfTrack, process.pfTrackElec)


process.l1ParticleFlowTask = cms.Task(process.l1ParticleFlow_calo_Task, process.l1ParticleFlow_pf_barrel_Task, process.l1ParticleFlow_pf_hf_Task, process.l1ParticleFlow_pf_hgcal_Task, process.l1pfCandidates)


process.totemRPLocalReconstructionTask = cms.Task(process.totemRPClusterProducer, process.totemRPLocalTrackFitter, process.totemRPRecHitProducer, process.totemRPUVPatternFinder)


process.muonSeededStepCoreInOutTask = cms.Task(process.muonSeededSeedsInOut, process.muonSeededTrackCandidatesInOut, process.muonSeededTracksInOut)


process.ecalDigisTask = cms.Task(process.ecalDigis)


process.multi5x5PreshowerClusteringTask = cms.Task(process.correctedMulti5x5SuperClustersWithPreshower, process.multi5x5PreshowerClusterShape, process.uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower, process.uncleanedOnlyMulti5x5SuperClustersWithPreshower)


process.me0TriggerAllDigiTask = cms.Task(process.me0TriggerPseudoDigiTask, process.me0TriggerRealDigiTask)


process.DetachedQuadStepTask = cms.Task(process.detachedQuadStep, process.detachedQuadStepClusters, process.detachedQuadStepHitDoublets, process.detachedQuadStepHitQuadruplets, process.detachedQuadStepSeedLayers, process.detachedQuadStepSeeds, process.detachedQuadStepSelector, process.detachedQuadStepTrackCandidates, process.detachedQuadStepTrackingRegions, process.detachedQuadStepTracks)


process.ticlHADStepTask = cms.Task(process.filteredLayerClustersHAD, process.ticlMultiClustersFromTrackstersHAD, process.ticlSeedingGlobal, process.ticlTrackstersHAD)


process.ecalUncalibRecHitTask = cms.Task(process.ecalDetIdToBeRecovered, process.ecalMultiFitUncalibRecHitTask)


process.conversionTrackTask = cms.Task(process.ckfTracksFromConversionsTask, process.conversionTrackMergersTask, process.conversionTrackProducersTask)


process.muIsolationTask = cms.Task(process.muIsolation_muonsTask)


process.muonSeededStepCoreTask = cms.Task(process.muonSeededStepCoreInOutTask, process.muonSeededStepCoreOutInTask)


process.muonlocalrecoTask = cms.Task(process.csclocalrecoTask, process.dtlocalrecoTask, process.gemLocalRecoTask, process.me0LocalRecoTask, process.rpcRecHits)


process.electronGsfTrackingWithTimingTask = cms.Task(process.electronCkfTrackCandidates, process.electronCkfTrackCandidatesFromMultiCl, process.electronGsfTracks, process.electronGsfTracksFromMultiCl, process.electronSeedsTask)


process.muoncosmichighlevelrecoTask = cms.Task(process.cosmicsMuonIdTask, process.muoncosmicreco1legHighLevelTask, process.muoncosmicreco2legsHighLevelTask)


process.jetCorrectorsForRecoTask = cms.Task(process.ak4PFCHSL1FastL2L3CorrectorTask, process.ak4PFL1FastL2L3CorrectorTask)


process.muIsolation_ParamGlobalMuonsOldTask = cms.Task(process.muIsoDeposits_ParamGlobalMuonsOldTask)


process.recoAllPFJetsTask = cms.Task(process.ak4PFJets, process.ak4PFJetsCHS, process.ak4PFJetsPuppi, process.ak8PFJets, process.ak8PFJetsPuppi, process.ak8PFJetsPuppiSoftDrop, process.ak8PFJetsPuppiSoftDropMass, process.fixedGridRhoAll, process.fixedGridRhoFastjetAll, process.fixedGridRhoFastjetCentral, process.fixedGridRhoFastjetCentralChargedPileUp, process.fixedGridRhoFastjetCentralNeutral, process.pfNoPileUpJMETask, process.puppi)


process.recoJetAssociationsTask = cms.Task(process.ak4JTATask)


process.SimL1TMuonTask = cms.Task(process.SimL1TMuonCommonTask, process.me0TriggerAllDigiTask, process.simBmtfDigis, process.simEmtfDigis, process.simGmtCaloSumDigis, process.simGmtStage2Digis, process.simKBmtfDigis, process.simKBmtfStubs, process.simMuonGEMPadTask, process.simOmtfDigis, process.simTwinMuxDigis)


process.recopixelvertexingTask = cms.Task(process.pixelTracksTask, process.pixelVertices)


process.muonPFIsolationTask = cms.Task(process.muonPFIsolationDepositsTask, process.muonPFIsolationValuesTask)


process.reducedRecHitsTask = cms.Task(process.reducedEcalRecHitsTask, process.reducedHcalRecHitsTask)


process.RawToDigiTask_ecalOnly = cms.Task(process.ecalDigisTask, process.ecalPreshowerDigis, process.scalersRawToDigi)


process.hgcalTriggerPrimitivesTask = cms.Task(process.hgcalBackEndLayer1, process.hgcalBackEndLayer2, process.hgcalConcentrator, process.hgcalTower, process.hgcalTowerMap, process.hgcalVFE)


process.recoJPTJetsTask = cms.Task(process.jetPlusTrackZSPCorJetAntiKt4Task)


process.ecalRecHitTask = cms.Task(process.ecalCompactTrigPrim, process.ecalDetailedTimeRecHit, process.ecalRecHitNoTPTask, process.ecalTPSkim)


process.L1TRawToDigiTask = cms.Task(process.L1TRawToDigi_Stage1, process.L1TRawToDigi_Stage2)


process.muonshighlevelrecoTask = cms.Task(process.muonPFIsolationTask, process.muons)


process.pfCTaggingTask = cms.Task(process.inclusiveCandidateVertexingCvsLTask, process.pfCombinedCvsBJetTags, process.pfCombinedCvsLJetTags, process.pfInclusiveSecondaryVertexFinderCvsLTagInfos)


process.reconstruction_hcalOnlyTask = cms.Task(process.bunchSpacingProducer, process.hcalOnlyLocalRecoTask, process.offlineBeamSpot, process.pfClusteringHBHEHFOnlyTask)


process.particleFlowEGammaFullTask = cms.Task(process.gedGsfElectronTaskTmp, process.gedPhotonTaskTmp, process.ootPhotonTask, process.particleFlowEGamma)


process.RawToDigiTask_noTk = cms.Task(process.L1TRawToDigiTask, process.castorDigis, process.ctppsRawToDigiTask, process.ecalDigisTask, process.ecalPreshowerDigis, process.hcalDigis, process.muonCSCDigis, process.muonDTDigis, process.muonRPCDigis, process.onlineMetaDataDigis, process.scalersRawToDigi, process.tcdsDigis)


process.iterTICLTask = cms.Task(process.ticlEMStepTask, process.ticlHADStepTask, process.ticlLayerTileTask, process.ticlPFTask, process.ticlTracksterMergeTask, process.ticlTrkEMStepTask, process.ticlTrkStepTask)


process.recoCTPPSTask = cms.Task(process.ctppsDiamondLocalReconstructionTask, process.ctppsLocalTrackLiteProducer, process.ctppsPixelLocalReconstructionTask, process.ctppsProtons, process.totemRPLocalReconstructionTask, process.totemTimingLocalReconstructionTask)


process.pfParticleSelectionTask = cms.Task(process.pfNoPileUpIsoTask, process.pfNoPileUpTask, process.pfSortByTypeTask)


process.muIsolation_ParamGlobalMuonsTask = cms.Task(process.muIsoDeposits_ParamGlobalMuonsTask)


process.uncleanedOnlyConversionsTask = cms.Task(process.uncleanedOnlyAllConversions, process.uncleanedOnlyCkfTracksFromConversionsTask, process.uncleanedOnlyConversionTrackMergersTask, process.uncleanedOnlyConversionTrackProducersTask)


process.electronGsfTrackingTask = cms.Task(process.electronCkfTrackCandidates, process.electronCkfTrackCandidatesFromMultiCl, process.electronGsfTracks, process.electronGsfTracksFromMultiCl, process.electronSeedsTask)


process.egammaIsolationTask = cms.Task(process.electronEcalRecHitIsolationLcone, process.electronEcalRecHitIsolationScone, process.electronHcalDepth1TowerIsolationLcone, process.electronHcalDepth1TowerIsolationScone, process.electronHcalDepth2TowerIsolationLcone, process.electronHcalDepth2TowerIsolationScone, process.electronHcalTowerIsolationLcone, process.electronHcalTowerIsolationScone, process.electronTrackIsolationLcone, process.electronTrackIsolationScone, process.pfClusterIsolationTask)


process.ecalLocalRecoTask = cms.Task(process.ecalRecHitTask, process.ecalUncalibRecHitTask)


process.iterDisplcedTrackingTask = cms.Task(process.displacedTracksTask, process.muonSeededStepDisplacedTask, process.preDuplicateMergingDisplacedTracks)


process.egammaGlobalRecoTask = cms.Task(process.allConversionTask, process.conversionTrackTask, process.electronGsfTrackingTask)


process.pfClusteringECALTask = cms.Task(process.particleFlowClusterECALTask, process.particleFlowClusterECALUncorrected, process.particleFlowRecHitECAL)


process.muonSeededStepExtraTask = cms.Task(process.muonSeededStepExtraInOutTask, process.muonSeededTracksOutInSelector)


process.ecalClustersNoPFBoxTask = cms.Task(process.hybridClusteringTask, process.multi5x5ClusteringTask, process.multi5x5PreshowerClusteringTask)


process.pfBTaggingTask = cms.Task(process.inclusiveCandidateVertexingTask, process.pfChargeBJetTags, process.pfCombinedInclusiveSecondaryVertexV2BJetTags, process.pfCombinedMVAV2BJetTags, process.pfCombinedSecondaryVertexV2BJetTags, process.pfDeepCSVTask, process.pfGhostTrackBJetTags, process.pfGhostTrackVertexTagInfos, process.pfImpactParameterTagInfos, process.pfInclusiveSecondaryVertexFinderTagInfos, process.pfJetBProbabilityBJetTags, process.pfJetProbabilityBJetTags, process.pfSecondaryVertexTagInfos, process.pfSimpleInclusiveSecondaryVertexHighEffBJetTags, process.pfSimpleSecondaryVertexHighEffBJetTags, process.pfTrackCountingHighEffBJetTags, process.pixelClusterTagInfos, process.softPFElectronBJetTags, process.softPFElectronsTagInfos, process.softPFMuonBJetTags, process.softPFMuonsTagInfos)


process.muoncosmicrecoTask = cms.Task(process.muoncosmicreco1legSTATask, process.muoncosmicreco2legsSTATask)


process.recoPFJetsTask = cms.Task(process.ak4PFJets, process.ak4PFJetsCHS, process.ak4PFJetsPuppi, process.ak8PFJetsPuppi, process.ak8PFJetsPuppiConstituents, process.ak8PFJetsPuppiSoftDrop, process.ak8PFJetsPuppiSoftDropMass, process.fixedGridRhoAll, process.fixedGridRhoFastjetAll, process.fixedGridRhoFastjetCentral, process.fixedGridRhoFastjetCentralChargedPileUp, process.fixedGridRhoFastjetCentralNeutral, process.pfNoPileUpJMETask, process.puppi)


process.recoPFJetsWithSubstructureTask = cms.Task(process.ak4PFJets, process.ak4PFJetsCHS, process.ak4PFJetsPuppi, process.ak4PFJetsSK, process.ak8PFJets, process.ak8PFJetsCS, process.ak8PFJetsCSConstituents, process.ak8PFJetsPuppi, process.ak8PFJetsPuppiConstituents, process.ak8PFJetsPuppiSoftDrop, process.ak8PFJetsPuppiSoftDropMass, process.fixedGridRhoAll, process.fixedGridRhoFastjetAll, process.fixedGridRhoFastjetCentral, process.fixedGridRhoFastjetCentralChargedPileUp, process.fixedGridRhoFastjetCentralNeutral, process.pfNoPileUpJMETask, process.puppi, process.softKiller)


process.egmIsolationTask = cms.Task(process.egmGedGsfElectronPFNoPileUpIsolation, process.egmGedGsfElectronPFPileUpIsolation, process.pfClusterIsolationTask, process.pfNoPileUpCandidates, process.pfParticleSelectionTask)


process.SimL1EmulatorCoreTask = cms.Task(process.SimL1TCalorimeterTask, process.SimL1TGlobalTask, process.SimL1TMuonTask, process.SimL1TechnicalTriggersTask)


process.iterTrackingEarlyTask = cms.Task(process.DetachedQuadStepTask, process.HighPtTripletStepTask, process.InitialStepTask, process.LowPtQuadStepTask, process.LowPtTripletStepTask, process.PixelPairStepTask)


process.muonSeededStepTask = cms.Task(process.earlyMuons, process.muonSeededStepCoreTask, process.muonSeededStepExtraTask)


process.iterHFNoseTICLTask = cms.Task(process.ticlHFNoseEMStepTask, process.ticlHFNoseMIPStepTask, process.ticlLayerTileHFNoseTask)


process.ecalOnlyLocalRecoTask = cms.Task(process.ecalRecHitNoTPTask, process.ecalUncalibRecHitTask)


process.particleFlowClusterTask = cms.Task(process.particleFlowBadHcalPseudoCluster, process.pfClusteringECALTask, process.pfClusteringHBHEHFTask, process.pfClusteringHGCalTask, process.pfClusteringHOTask, process.pfClusteringPSTask)


process.SimL1EmulatorTask = cms.Task(process.L1EGammaClusterEmuProducer, process.L1TkElectronsCrystal, process.L1TkElectronsEllipticMatchCrystal, process.L1TkElectronsEllipticMatchHGC, process.L1TkElectronsHGC, process.L1TkElectronsLooseCrystal, process.L1TkIsoElectronsCrystal, process.L1TkIsoElectronsHGC, process.L1TkMuons, process.L1TkPhotonsCrystal, process.L1TkPhotonsHGC, process.L1TkPrimaryVertex, process.SimL1EmulatorCoreTask, process.hgcalTriggerPrimitivesTask, process.l1EGammaEEProducer, process.l1NNTauProducer, process.l1NNTauProducerPuppi, process.l1PFJetsPhase1Task, process.l1PFMetsTask, process.l1ParticleFlowTask)


process.reconstruction_pixelTrackingOnlyTask = cms.Task(process.offlineBeamSpot, process.pixeltrackerlocalrecoTask, process.recopixelvertexingTask, process.siPixelClusterShapeCachePreSplitting)


process.gedElectronPFIsoTask = cms.Task(process.gedElectronPFIsolationDepositsTask, process.gedElectronPFIsolationValuesTask, process.gedGsfElectrons, process.pfParticleSelectionTask)


process.produceAndDiscriminateHPSPFTausTask = cms.Task(process.hpsPFTauBasicDiscriminatorsTask, process.hpsPFTauBasicDiscriminatorsdR03Task, process.hpsPFTauDiscriminationByDeadECALElectronRejection, process.hpsPFTauDiscriminationByDecayModeFinding, process.hpsPFTauDiscriminationByDecayModeFindingNewDMs, process.hpsPFTauDiscriminationByDecayModeFindingOldDMs, process.hpsPFTauDiscriminationByLooseElectronRejection, process.hpsPFTauDiscriminationByMVA6ElectronRejection, process.hpsPFTauDiscriminationByMVA6rawElectronRejection, process.hpsPFTauDiscriminationByMediumElectronRejection, process.hpsPFTauDiscriminationByMuonRejection3, process.hpsPFTauDiscriminationByTightElectronRejection, process.hpsPFTauMVAIsolation2Task, process.hpsPFTauVertexAndImpactParametersTask, process.produceHPSPFTausTask)


process.muonlocalreco_with_2DSegmentsTask = cms.Task(process.csclocalrecoTask, process.dtlocalreco_with_2DSegmentsTask, process.rpcRecHits)


process.iterTrackingTask = cms.Task(process.ConvStepTask, process.InitialStepPreSplittingTask, process.conversionStepTracks, process.earlyGeneralTracks, process.generalTracksTask, process.iterTrackingEarlyTask, process.muonSeededStepTask, process.preDuplicateMergingGeneralTracks, process.trackerClusterCheck)


process.recoTauClassicHPSTask = cms.Task(process.ak4PFJetsLegacyHPSPiZeros, process.ak4PFJetsRecoTauChargedHadrons, process.combinatoricRecoTaus, process.produceAndDiscriminateHPSPFTausTask)


process.particleFlowClusterWithoutHOTask = cms.Task(process.particleFlowBadHcalPseudoCluster, process.pfClusteringECALTask, process.pfClusteringHBHEHFTask, process.pfClusteringPSTask)


process.calolocalrecoTask = cms.Task(process.ecalLocalRecoTask, process.hcalLocalRecoTask, process.hgcalLocalRecoTask)


process.jetHighLevelRecoTask = cms.Task(process.jetCorrectorsForRecoTask, process.recoJPTJetsTask, process.recoJetAssociationsExplicitTask, process.recoJetAssociationsTask, process.recoPFJetsTask)


process.ecalClustersTask = cms.Task(process.ecalClustersNoPFBoxTask, process.particleFlowSuperClusteringTask)


process.btaggingTask = cms.Task(process.pfBTaggingTask, process.pfCTaggingTask)


process.ckftracksTask = cms.Task(process.doAlldEdXEstimatorsTask, process.electronSeedsSeqTask, process.iterTrackingTask)


process.PFTauTask = cms.Task(process.recoTauClassicHPSTask, process.recoTauCommonTask)


process.ckftracks_plus_pixellessTask = cms.Task(process.ckftracksTask, process.ctfTracksPixelLessTask)


process.egammaHighLevelRecoPostPFTask = cms.Task(process.eIdTask, process.egmIsolationTask, process.hfEMClusteringTask, process.interestingEgammaIsoDetIdsTask, process.photonIDTask, process.photonIDTaskGED)


process.displacedGlobalMuonTrackingTask = cms.Task(process.displacedGlobalMuons, process.iterDisplcedTrackingTask)


process.RawToDigiTask = cms.Task(process.L1TRawToDigiTask, process.ctppsRawToDigiTask, process.ecalDigisTask, process.ecalPreshowerDigis, process.hcalDigis, process.hgcalDigis, process.muonCSCDigis, process.muonDTDigis, process.muonGEMDigis, process.muonRPCDigis, process.onlineMetaDataDigis, process.scalersRawToDigi, process.siStripDigis, process.tcdsDigis)


process.uncleanedOnlyElectronTask = cms.Task(process.uncleanedOnlyConversionsTask, process.uncleanedOnlyElectronsTask, process.uncleanedOnlyPfTrackingTask, process.uncleanedOnlyTrackingTask)


process.ckftracks_woBHTask = cms.Task(process.doAlldEdXEstimatorsTask, process.electronSeedsSeqTask, process.iterTrackingTask)


process.calolocalrecoTaskNZS = cms.Task(process.ecalLocalRecoTask, process.hcalLocalRecoTask, process.hcalLocalRecoTaskNZS)


process.reconstruction_ecalOnlyTask = cms.Task(process.bunchSpacingProducer, process.ecalOnlyLocalRecoTask, process.offlineBeamSpot, process.particleFlowSuperClusterECALOnly, process.pfClusteringECALTask, process.pfClusteringPSTask)


process.pfBasedElectronIsoTask = cms.Task(process.electronPFIsolationDepositsTask, process.electronPFIsolationValuesTask, process.pfParticleSelectionTask)


process.particleFlowEGammaFinalTask = cms.Task(process.egmElectronIsolationCITK, process.egmElectronIsolationPileUpCITK, process.egmPhotonIsolationCITK, process.gedElectronPFIsoTask, process.gedPhotonTask, process.particleBasedIsolationTmp, process.pfNoPileUpCandidates, process.pfNoPileUpIsoTask, process.pfPileUpAllChargedParticles, process.photonIDValueMaps)


process.pfBasedElectronPhotonIsoTask = cms.Task(process.pfParticleSelectionTask, process.pfSelectedElectrons, process.pfSelectedPhotons, process.photonPFIsolationDepositsTask, process.photonPFIsolationValuesTask)


process.trackingGlobalRecoTask = cms.Task(process.ckftracksTask, process.trackExtrapolator)


process.pfElectronTranslatorTask = cms.Task(process.pfBasedElectronPhotonIsoTask, process.pfElectronInterestingEcalDetIdEB, process.pfElectronInterestingEcalDetIdEE, process.pfElectronTranslator)


process.globalmuontrackingTask = cms.Task(process.displacedGlobalMuonTrackingTask, process.globalMuons, process.tevMuons)


process.muontrackingTask = cms.Task(process.globalmuontrackingTask, process.standalonemuontrackingTask)


process.muonGlobalRecoTask = cms.Task(process.globalmuontrackingTask, process.muIsolationTask, process.muonIdProducerTask, process.muonSelectionTypeTask)


process.particleFlowRecoTask = cms.Task(process.fixedGridRhoFastjetAllTmp, process.hgcalTrackCollection, process.particleFlowBlock, process.particleFlowEGammaFinalTask, process.particleFlowEGammaFullTask, process.particleFlowTmp, process.particleFlowTmpBarrel, process.particleFlowTmpPtrs, process.particleFlowTrackWithDisplacedVertexTask, process.pfGsfElectronMVASelectionTask, process.pfParticleSelectionTask, process.pfTrack, process.quickTrackAssociatorByHits, process.simPFProducer, process.tpClusterProducer)


process.ckftracks_wodEdXTask = cms.Task(process.electronSeedsSeqTask, process.iterTrackingTask)


process.localrecoTask = cms.Task(process.bunchSpacingProducer, process.calolocalrecoTask, process.fastTimingLocalRecoTask, process.muonlocalrecoTask, process.recoCTPPSTask, process.trackerlocalrecoTask)


process.pfPhotonTranslatorTask = cms.Task(process.pfBasedElectronPhotonIsoTask, process.pfPhotonInterestingEcalDetIdEB, process.pfPhotonInterestingEcalDetIdEE, process.pfPhotonTranslator)


process.localreco_HcalNZSTask = cms.Task(process.bunchSpacingProducer, process.calolocalrecoTaskNZS, process.fastTimingLocalRecoTask, process.muonlocalrecoTask, process.recoCTPPSTask, process.trackerlocalrecoTask)


process.muonrecoTask = cms.Task(process.muonIdProducerTask, process.muontrackingTask)


process.reconstruction_trackingOnlyTask = cms.Task(process.MeasurementTrackerEventPreSplitting, process.bunchSpacingProducer, process.caloJetsForTrkTask, process.ecalLocalRecoTask, process.fastTimingGlobalRecoTask, process.fastTimingLocalRecoTask, process.generalV0Candidates, process.hcalGlobalRecoTask, process.hcalLocalRecoTask, process.inclusiveVertexingTask, process.muonlocalrecoTask, process.offlineBeamSpot, process.offlinePrimaryVertices, process.offlinePrimaryVertices4D, process.offlinePrimaryVertices4DWithBS, process.offlinePrimaryVertices4DnoPID, process.offlinePrimaryVertices4DnoPIDWithBS, process.offlinePrimaryVerticesWithBS, process.quickTrackAssociatorByHits, process.recoCTPPSTask, process.siPixelClusterShapeCachePreSplitting, process.standalonemuontrackingTask, process.tofPID, process.tofPID4DnoPID, process.tpClusterProducer, process.trackRefsForJetsBeforeSorting, process.trackRefsForJetsBeforeSorting4D, process.trackRefsForJetsBeforeSorting4DnoPID, process.trackWithVertexRefSelectorBeforeSorting, process.trackWithVertexRefSelectorBeforeSorting4D, process.trackWithVertexRefSelectorBeforeSorting4DnoPID, process.trackerlocalrecoTask, process.trackingGlobalRecoTask, process.unsortedOfflinePrimaryVertices, process.unsortedOfflinePrimaryVertices4D, process.unsortedOfflinePrimaryVertices4DnoPID)


process.globalrecoTask = cms.Task(process.MeasurementTrackerEventPreSplitting, process.caloJetsForTrkTask, process.caloTowersRecTask, process.ecalClustersTask, process.egammaGlobalRecoTask, process.fastTimingGlobalRecoTask, process.generalV0Candidates, process.hcalGlobalRecoTask, process.inclusiveVertexingTask, process.iterTICLTask, process.jetGlobalRecoTask, process.muonGlobalRecoTask, process.muoncosmicrecoTask, process.offlineBeamSpot, process.offlinePrimaryVertices, process.offlinePrimaryVertices4D, process.offlinePrimaryVertices4DWithBS, process.offlinePrimaryVertices4DnoPID, process.offlinePrimaryVertices4DnoPIDWithBS, process.offlinePrimaryVerticesWithBS, process.particleFlowClusterTask, process.pfTrackingGlobalRecoTask, process.quickTrackAssociatorByHits, process.siPixelClusterShapeCachePreSplitting, process.standalonemuontrackingTask, process.tofPID, process.tofPID4DnoPID, process.tpClusterProducer, process.trackRefsForJetsBeforeSorting, process.trackRefsForJetsBeforeSorting4D, process.trackRefsForJetsBeforeSorting4DnoPID, process.trackWithVertexRefSelectorBeforeSorting, process.trackWithVertexRefSelectorBeforeSorting4D, process.trackWithVertexRefSelectorBeforeSorting4DnoPID, process.trackingGlobalRecoTask, process.unsortedOfflinePrimaryVertices, process.unsortedOfflinePrimaryVertices4D, process.unsortedOfflinePrimaryVertices4DnoPID)


process.egammaHighLevelRecoPrePFTask = cms.Task(process.conversionTask, process.gsfEcalDrivenElectronTask, process.photonTask, process.uncleanedOnlyElectronTask)


process.highlevelrecoTask = cms.Task(process.PFTauTask, process.btaggingTask, process.conversionOpenTrackTask, process.cosmicDCTracksSeqTask, process.egammaHighLevelRecoPostPFTask, process.egammaHighLevelRecoPrePFTask, process.gsfTracksOpenConversions, process.jetHighLevelRecoTask, process.lowPtGsfElectronTask, process.metrecoPlusHCALNoiseTask, process.muoncosmichighlevelrecoTask, process.muonshighlevelrecoTask, process.particleFlowLinksTask, process.particleFlowRecoTask, process.recoPFMETTask, process.reducedRecHitsTask)


process.muonreco_plus_isolationTask = cms.Task(process.muIsolationTask, process.muonrecoTask)


process.globalreco_plusPLTask = cms.Task(process.ctfTracksPixelLessTask, process.globalrecoTask)


process.reconstruction_withPixellessTkTask = cms.Task(process.MeasurementTrackerEventPreSplitting, process.allConversionTask, process.bunchSpacingProducer, process.caloJetsForTrkTask, process.caloTowersRecTask, process.calolocalrecoTask, process.conversionTrackTask, process.ctfTracksPixelLessTask, process.ecalClustersTask, process.electronCkfTrackCandidates, process.electronCkfTrackCandidatesFromMultiCl, process.electronGsfTracks, process.electronGsfTracksFromMultiCl, process.electronSeedsTask, process.fastTimingGlobalRecoTask, process.fastTimingLocalRecoTask, process.generalV0Candidates, process.hcalGlobalRecoTask, process.highlevelrecoTask, process.inclusiveVertexingTask, process.iterTICLTask, process.jetGlobalRecoTask, process.logErrorHarvester, process.muonGlobalRecoTask, process.muoncosmicrecoTask, process.muonlocalrecoTask, process.offlineBeamSpot, process.offlinePrimaryVertices, process.offlinePrimaryVertices4D, process.offlinePrimaryVertices4DWithBS, process.offlinePrimaryVertices4DnoPID, process.offlinePrimaryVertices4DnoPIDWithBS, process.offlinePrimaryVerticesWithBS, process.particleFlowClusterTask, process.pfTrackingGlobalRecoTask, process.quickTrackAssociatorByHits, process.recoCTPPSTask, process.siPixelClusterShapeCachePreSplitting, process.standalonemuontrackingTask, process.tofPID, process.tofPID4DnoPID, process.tpClusterProducer, process.trackRefsForJetsBeforeSorting, process.trackRefsForJetsBeforeSorting4D, process.trackRefsForJetsBeforeSorting4DnoPID, process.trackWithVertexRefSelectorBeforeSorting, process.trackWithVertexRefSelectorBeforeSorting4D, process.trackWithVertexRefSelectorBeforeSorting4DnoPID, process.trackerlocalrecoTask, process.trackingGlobalRecoTask, process.unsortedOfflinePrimaryVertices, process.unsortedOfflinePrimaryVertices4D, process.unsortedOfflinePrimaryVertices4DnoPID)


process.reconstructionTask = cms.Task(process.MeasurementTrackerEventPreSplitting, process.allConversionTask, process.bunchSpacingProducer, process.caloJetsForTrkTask, process.caloTowersRecTask, process.calolocalrecoTask, process.conversionTrackTask, process.ecalClustersTask, process.electronCkfTrackCandidates, process.electronCkfTrackCandidatesFromMultiCl, process.electronGsfTracks, process.electronGsfTracksFromMultiCl, process.electronSeedsTask, process.fastTimingGlobalRecoTask, process.fastTimingLocalRecoTask, process.generalV0Candidates, process.hcalGlobalRecoTask, process.highlevelrecoTask, process.inclusiveVertexingTask, process.iterTICLTask, process.jetGlobalRecoTask, process.logErrorHarvester, process.muonGlobalRecoTask, process.muoncosmicrecoTask, process.muonlocalrecoTask, process.offlineBeamSpot, process.offlinePrimaryVertices, process.offlinePrimaryVertices4D, process.offlinePrimaryVertices4DWithBS, process.offlinePrimaryVertices4DnoPID, process.offlinePrimaryVertices4DnoPIDWithBS, process.offlinePrimaryVerticesWithBS, process.particleFlowClusterTask, process.pfTrackingGlobalRecoTask, process.quickTrackAssociatorByHits, process.recoCTPPSTask, process.siPixelClusterShapeCachePreSplitting, process.standalonemuontrackingTask, process.tofPID, process.tofPID4DnoPID, process.tpClusterProducer, process.trackRefsForJetsBeforeSorting, process.trackRefsForJetsBeforeSorting4D, process.trackRefsForJetsBeforeSorting4DnoPID, process.trackWithVertexRefSelectorBeforeSorting, process.trackWithVertexRefSelectorBeforeSorting4D, process.trackWithVertexRefSelectorBeforeSorting4DnoPID, process.trackerlocalrecoTask, process.trackingGlobalRecoTask, process.unsortedOfflinePrimaryVertices, process.unsortedOfflinePrimaryVertices4D, process.unsortedOfflinePrimaryVertices4DnoPID)


process.reconstruction_woCosmicMuonsTask = cms.Task(process.globalrecoTask, process.highlevelrecoTask, process.localrecoTask, process.logErrorHarvester)


process.reconstruction_HcalNZSTask = cms.Task(process.MeasurementTrackerEventPreSplitting, process.caloJetsForTrkTask, process.caloTowersRecTask, process.ecalClustersTask, process.egammaGlobalRecoTask, process.fastTimingGlobalRecoTask, process.generalV0Candidates, process.hcalGlobalRecoTask, process.highlevelrecoTask, process.inclusiveVertexingTask, process.iterTICLTask, process.jetGlobalRecoTask, process.localreco_HcalNZSTask, process.logErrorHarvester, process.muonGlobalRecoTask, process.muoncosmicrecoTask, process.offlineBeamSpot, process.offlinePrimaryVertices, process.offlinePrimaryVertices4D, process.offlinePrimaryVertices4DWithBS, process.offlinePrimaryVertices4DnoPID, process.offlinePrimaryVertices4DnoPIDWithBS, process.offlinePrimaryVerticesWithBS, process.particleFlowClusterTask, process.pfTrackingGlobalRecoTask, process.quickTrackAssociatorByHits, process.siPixelClusterShapeCachePreSplitting, process.standalonemuontrackingTask, process.tofPID, process.tofPID4DnoPID, process.tpClusterProducer, process.trackRefsForJetsBeforeSorting, process.trackRefsForJetsBeforeSorting4D, process.trackRefsForJetsBeforeSorting4DnoPID, process.trackWithVertexRefSelectorBeforeSorting, process.trackWithVertexRefSelectorBeforeSorting4D, process.trackWithVertexRefSelectorBeforeSorting4DnoPID, process.trackingGlobalRecoTask, process.unsortedOfflinePrimaryVertices, process.unsortedOfflinePrimaryVertices4D, process.unsortedOfflinePrimaryVertices4DnoPID)


process.regionalCosmicTracksSeq = cms.Sequence(process.regionalCosmicTracksTask)


process.ak7JTA = cms.Sequence(process.ak7JTATask)


process.recopixelvertexing = cms.Sequence(process.recopixelvertexingTask)


process.ckfTracksFromOldEGConversions = cms.Sequence(process.ckfTracksFromOldEGConversionsTask)


process.uncleanedOnlyConversions = cms.Sequence(process.uncleanedOnlyConversionsTask)


process.L1TRawToDigi = cms.Sequence(process.L1TRawToDigiTask)


process.HLTDoLocalPixelSequence = cms.Sequence(process.siPixelClusters+process.siPixelClusterShapeCache+process.siPixelRecHits)


process.btagging = cms.Sequence(process.btaggingTask)


process.uncleanedOnlyPfTracking = cms.Sequence(process.uncleanedOnlyPfTrackingTask)


process.muoncosmicreco = cms.Sequence(process.muoncosmicrecoTask)


process.ckftracks_woBH = cms.Sequence(process.ckftracks_woBHTask)


process.iterativeCone5JTA = cms.Sequence(process.iterativeCone5JTATask)


process.inclusiveCandidateVertexing = cms.Sequence(process.inclusiveCandidateVertexingTask)


process.globalreco_plusPL = cms.Sequence(process.globalreco_plusPLTask)


process.ecalClustersNoPFBox = cms.Sequence(process.ecalClustersNoPFBoxTask)


process.recoTauCommonSequence = cms.Sequence(process.recoTauCommonTask)


process.HLTEndSequence = cms.Sequence(process.hltBoolEnd)


process.dtlocalreco = cms.Sequence(process.dtlocalrecoTask)


process.muonshighlevelreco = cms.Sequence(process.muonshighlevelrecoTask)


process.pixelTracksSequence = cms.Sequence(process.pixelTracksTask)


process.HighPtTripletStep = cms.Sequence(process.HighPtTripletStepTask)


process.recoAllTrackJets = cms.Sequence(cms.Task(process.ak4TrackJets, process.trackRefsForJets, process.trackWithVertexRefSelector))


process.trackerlocalreco = cms.Sequence(process.trackerlocalrecoTask)


process.muonSeededStepExtra = cms.Sequence(process.muonSeededStepExtraTask)


process.iterDisplcedTracking = cms.Sequence(process.iterDisplcedTrackingTask)


process.mvaIsolation2SeqRun2 = cms.Sequence(process.mvaIsolation2TaskRun2)


process.iterTrackingEarly = cms.Sequence(process.iterTrackingEarlyTask)


process.egammaGlobalReco = cms.Sequence(process.egammaGlobalRecoTask)


process.pixeltrackerlocalreco = cms.Sequence(process.pixeltrackerlocalrecoTask)


process.localreco_HcalNZS = cms.Sequence(process.localreco_HcalNZSTask)


process.localreco = cms.Sequence(process.localrecoTask)


process.JetPlusTrackCorrectionsAntiKt4 = cms.Sequence(process.JetPlusTrackCorrectionsAntiKt4Task)


process.conversionTrackSequence = cms.Sequence(process.conversionTrackTask)


process.RawToDigi_pixelOnly = cms.Sequence(process.RawToDigiTask_pixelOnly)


process.pfCTagging = cms.Sequence(process.pfCTaggingTask)


process.egammaHighLevelRecoPostPF = cms.Sequence(process.egammaHighLevelRecoPostPFTask)


process.recoAllPFJets = cms.Sequence(process.recoAllPFJetsTask)


process.beamhaloTracksSeq = cms.Sequence(process.beamhaloTracksTask)


process.hgcalTriggerPrimitives = cms.Sequence(process.hgcalTriggerPrimitivesTask)


process.inclusiveCandidateVertexingCvsL = cms.Sequence(process.inclusiveCandidateVertexingCvsLTask)


process.muIsolation_muons = cms.Sequence(process.muIsolation_muonsTask)


process.conversionTrackProducers = cms.Sequence(process.conversionTrackProducersTask)


process.particleFlowTrackWithNuclear = cms.Sequence(process.particleFlowTrackWithNuclearTask)


process.LowPtQuadStep = cms.Sequence(process.LowPtQuadStepTask)


process.dtlocalreco_with_2DSegments = cms.Sequence(process.dtlocalreco_with_2DSegmentsTask)


process.particleFlowTrackWithV0 = cms.Sequence(process.particleFlowTrackWithV0Task)


process.CastorFullReco = cms.Sequence(process.CastorFullRecoTask)


process.ctfTracksCombinedSeeds = cms.Sequence(process.ctfTracksCombinedSeedsTask)


process.gedElectronPFIsolationValuesSequence = cms.Sequence(process.gedElectronPFIsolationValuesTask)


process.calolocalrecoNZS = cms.Sequence(process.calolocalrecoTaskNZS)


process.endOfProcess = cms.Sequence(process.MEtoEDMConverter)


process.TobTecStep = cms.Sequence(process.TobTecStepTask)


process.muonSeededStepCoreInOut = cms.Sequence(process.muonSeededStepCoreInOutTask)


process.muonlocalreco_with_2DSegments = cms.Sequence(process.muonlocalreco_with_2DSegmentsTask)


process.ecalClusters = cms.Sequence(process.ecalClustersTask)


process.fastTimingGlobalReco = cms.Sequence(process.fastTimingGlobalRecoTask)


process.muonSelectionTypeSequence = cms.Sequence(process.muonSelectionTypeTask)


process.RawToDigi = cms.Sequence(process.RawToDigiTask)


process.inclusiveVertexing = cms.Sequence(process.inclusiveVertexingTask)


process.reconstruction = cms.Sequence(process.reconstructionTask)


process.legacyBTagging = cms.Sequence(process.legacyBTaggingTask)


process.pfNoPileUpSequence = cms.Sequence(process.pfNoPileUpTask)


process.ckftracks = cms.Sequence(process.ckftracksTask)


process.SimL1TCalorimeter = cms.Sequence(process.SimL1TCalorimeterTask)


process.muonSeededStep = cms.Sequence(process.muonSeededStepTask)


process.recoPFMET = cms.Sequence(process.recoPFMETTask)


process.MixedTripletStep = cms.Sequence(process.MixedTripletStepTask)


process.allConversionSequence = cms.Sequence(process.allConversionTask)


process.highlevelreco = cms.Sequence(process.highlevelrecoTask)


process.uncleanedOnlyElectrons = cms.Sequence(process.uncleanedOnlyElectronsTask)


process.gedElectronPFIsolationDepositsSequence = cms.Sequence(process.gedElectronPFIsolationDepositsTask)


process.me0LocalReco = cms.Sequence(process.me0LocalRecoTask)


process.RawToDigi_noTk = cms.Sequence(process.RawToDigiTask_noTk)


process.seldigis = cms.Sequence(process.seldigisTask)


process.eIdSequence = cms.Sequence(process.eIdTask)


process.muoncosmicreco1legSTA = cms.Sequence(process.muoncosmicreco1legSTATask)


process.recoJetAssociationsExplicit = cms.Sequence(process.recoJetAssociationsExplicitTask)


process.recoAllJetIds = cms.Sequence(process.recoJetIdsTask)


process.ak4JTA = cms.Sequence(process.ak4JTATask)


process.gedPhotonSequence = cms.Sequence(process.gedPhotonTask)


process.allConversionOldEGSequence = cms.Sequence(process.allConversionsOldEG)


process.SimL1TMuon = cms.Sequence(process.SimL1TMuonTask)


process.egammaHighLevelRecoPrePF = cms.Sequence(process.egammaHighLevelRecoPrePFTask)


process.electronGsfTrackingWithTiming = cms.Sequence(process.electronGsfTrackingWithTimingTask)


process.hltPhase2L3MuonInitialStepSequence = cms.Sequence(process.hltPhase2L3MuonInitialStepSeeds+process.hltPhase2L3MuonInitialStepTrackCandidates+process.hltPhase2L3MuonInitialStepTracks+process.hltPhase2L3MuonInitialStepTrackCutClassifier+process.hltPhase2L3MuonInitialStepTracksSelectionHighPurity)


process.photonIDSequenceGED = cms.Sequence(process.photonIDTaskGED)


process.SimL1TechnicalTriggers = cms.Sequence(process.SimL1TechnicalTriggersTask)


process.HLTPhase2L3IOFromL1TkMuonTkCandidateSequence = cms.Sequence(process.hltPhase2L3MuonPixelTracksFilter+process.hltPhase2L3MuonPixelTracksFitter+process.hltPhase2L3FromL1TkMuonPixelTracksTrackingRegions+process.hltPhase2L3FromL1TkMuonPixelLayerQuadruplets+process.hltPhase2L3FromL1TkMuonPixelTracksHitDoublets+process.hltPhase2L3FromL1TkMuonPixelTracksHitQuadruplets+process.hltPhase2L3FromL1TkMuonPixelTracks+process.hltPhase2L3FromL1TkMuonPixelVertices+process.hltPhase2L3FromL1TkMuonTrimmedPixelVertices+process.hltIter0Phase2L3FromL1TkMuonPixelSeedsFromPixelTracks+process.hltIter0Phase2L3FromL1TkMuonCkfTrackCandidates+process.hltIter0Phase2L3FromL1TkMuonCtfWithMaterialTracks+process.hltIter0Phase2L3FromL1TkMuonTrackCutClassifier+process.hltIter0Phase2L3FromL1TkMuonTrackSelectionHighPurity+process.hltIter2Phase2L3FromL1TkMuonClustersRefRemoval+process.hltIter2Phase2L3FromL1TkMuonMaskedMeasurementTrackerEvent+process.hltIter2Phase2L3FromL1TkMuonPixelLayerTriplets+process.hltIter2Phase2L3FromL1TkMuonPixelClusterCheck+process.hltIter2Phase2L3FromL1TkMuonPixelHitDoublets+process.hltIter2Phase2L3FromL1TkMuonPixelHitTriplets+process.hltIter2Phase2L3FromL1TkMuonPixelSeeds+process.hltIter2Phase2L3FromL1TkMuonPixelSeedsFiltered+process.hltIter2Phase2L3FromL1TkMuonCkfTrackCandidates+process.hltIter2Phase2L3FromL1TkMuonCtfWithMaterialTracks+process.hltIter2Phase2L3FromL1TkMuonTrackCutClassifier+process.hltIter2Phase2L3FromL1TkMuonTrackSelectionHighPurity+process.hltIter2Phase2L3FromL1TkMuonMerged)


process.muonreco_with_SET = cms.Sequence(process.muonreco_with_SET_Task)


process.particleFlowLinks = cms.Sequence(process.particleFlowLinksTask)


process.muIsolation_ParamGlobalMuons = cms.Sequence(process.muIsolation_ParamGlobalMuonsTask)


process.particleBasedIsolationSequence = cms.Sequence(process.particleBasedIsolationTask)


process.reconstruction_withPixellessTk = cms.Sequence(process.reconstruction_withPixellessTkTask)


process.interestingEgammaIsoDetIds = cms.Sequence(process.interestingEgammaIsoDetIdsTask)


process.ak4PFCHSL1FastL2L3CorrectorChain = cms.Sequence(process.ak4PFCHSL1FastL2L3CorrectorTask)


process.uncleanedOnlyCkfTracksFromConversions = cms.Sequence(process.uncleanedOnlyCkfTracksFromConversionsTask)


process.recoJetIds = cms.Sequence(process.recoJetIdsTask)


process.hpsPFTauMVAIsolation2Seq = cms.Sequence(process.hpsPFTauBasicDiscriminatorsTask, process.hpsPFTauBasicDiscriminatorsdR03Task, process.hpsPFTauMVAIsolation2Task)


process.standalonemuontracking = cms.Sequence(process.standalonemuontrackingTask)


process.cosmicDCTracksSeq = cms.Sequence(process.cosmicDCTracksSeqTask)


process.particleFlowEGammaFinal = cms.Sequence(process.particleFlowEGammaFinalTask)


process.muonPFIsolationSequence = cms.Sequence(process.muonPFIsolationTask)


process.pfClusteringPS = cms.Sequence(process.pfClusteringPSTask)


process.ctppsDiamondLocalReconstruction = cms.Sequence(process.ctppsDiamondLocalReconstructionTask)


process.reconstruction_pixelTrackingOnly = cms.Sequence(process.reconstruction_pixelTrackingOnlyTask)


process.TrackTriggerAssociatorTracks = cms.Sequence(process.TTTrackAssociatorFromPixelDigis)


process.generalTracksSequence = cms.Sequence(process.generalTracksTask)


process.SimL1EmulatorCore = cms.Sequence(process.SimL1EmulatorCoreTask)


process.gsfTracksOpenConversionSequence = cms.Sequence(process.gsfTracksOpenConversions)


process.muonPFIsolationValuesSequence = cms.Sequence(process.muonPFIsolationValuesTask)


process.ecalRecHitNoTPSequence = cms.Sequence(process.ecalRecHitNoTPTask)


process.electronSeeds = cms.Sequence(process.electronSeedsTask)


process.recoPFJetsHI = cms.Sequence(process.recoPFJetsHITask)


process.gemLocalReco = cms.Sequence(process.gemLocalRecoTask)


process.hgcalLocalRecoSequence = cms.Sequence(process.hgcalLocalRecoTask)


process.RawToDigi_ecalOnly = cms.Sequence(process.RawToDigiTask_ecalOnly)


process.muIsoDeposits_ParamGlobalMuonsOld = cms.Sequence(process.muIsoDeposits_ParamGlobalMuonsOldTask)


process.fastTimingLocalReco = cms.Sequence(process.fastTimingLocalRecoTask)


process.reducedRecHits = cms.Sequence(process.reducedRecHitsTask)


process.hltPhase2L3MuonPixelVerticesSequence = cms.Sequence(process.hltPhase2L3MuonPixelVertices)


process.gsfEcalDrivenElectronSequence = cms.Sequence(process.gsfEcalDrivenElectronTask)


process.DetachedTripletStep = cms.Sequence(process.DetachedTripletStepTask)


process.vertexreco = cms.Sequence(process.vertexrecoTask)


process.muIsolation_ParamGlobalMuonsOld = cms.Sequence(process.muIsolation_ParamGlobalMuonsOldTask)


process.uncleanedOnlyConversionTrackMergers = cms.Sequence(process.uncleanedOnlyConversionTrackMergersTask)


process.standAloneMuonSeeds = cms.Sequence(process.standAloneMuonSeedsTask)


process.particleFlowEGammaFull = cms.Sequence(process.particleFlowEGammaFullTask)


process.recoJetAssociations = cms.Sequence(process.recoJetAssociationsTask)


process.SimL1TGlobal = cms.Sequence(process.SimL1TGlobalTask)


process.ctppsPixelLocalReconstruction = cms.Sequence(process.ctppsPixelLocalReconstructionTask)


process.HLTPhase2L3OImuonTkCandidateSequence = cms.Sequence(process.hltPhase2L3OISeedsFromL2Muons+process.hltPhase2L3OITrackCandidates+process.hltPhase2L3OIMuCtfWithMaterialTracks+process.hltPhase2L3OIMuonTrackCutClassifier+process.hltPhase2L3OIMuonTrackSelectionHighPurity+process.hltL3MuonsPhase2L3OI+process.hltPhase2L3OIL3MuonsLinksCombination+process.hltPhase2L3OIL3Muons+process.hltPhase2L3OIL3MuonCandidates)


process.ecalOnlyLocalRecoSequence = cms.Sequence(process.ecalOnlyLocalRecoTask)


process.HLTFastJetForMuons = cms.Sequence(process.hltTowerMakerForAll+process.hltFixedGridRhoFastjetAllCaloForMuons)


process.hiConformalPixelTracksSequencePhase1 = cms.Sequence(process.hiConformalPixelTracksTaskPhase1)


process.photonPFIsolationDepositsSequence = cms.Sequence(process.photonPFIsolationDepositsTask)


process.electronSeedsSeq = cms.Sequence(process.electronSeedsSeqTask)


process.iterTracking = cms.Sequence(process.iterTrackingTask)


process.Conv2Step = cms.Sequence(process.Conv2StepTask)


process.muoncosmicreco2legsSTA = cms.Sequence(process.muoncosmicreco2legsSTATask)


process.ctfTracksPixelLess = cms.Sequence(process.ctfTracksPixelLessTask)


process.muonSeededStepDebugInOut = cms.Sequence(process.muonSeededStepDebugInOutTask)


process.metreco = cms.Sequence(process.metrecoTask)


process.pfParticleSelectionSequence = cms.Sequence(process.pfParticleSelectionTask)


process.ckfTracksFromConversions = cms.Sequence(process.ckfTracksFromConversionsTask)


process.pfGsfElectronMVASelectionSequence = cms.Sequence(process.pfGsfElectronMVASelectionTask)


process.TrackTriggerAssociatorClustersStubs = cms.Sequence(process.TTClusterAssociatorFromPixelDigis+process.TTStubAssociatorFromPixelDigis)


process.oldegConversionTrackMergers = cms.Sequence(process.oldegConversionTrackMergersTask)


process.LowPtTripletStep = cms.Sequence(process.LowPtTripletStepTask)


process.particleFlowClusterECALSequence = cms.Sequence(process.particleFlowClusterECALTask)


process.l1PFMets = cms.Sequence(process.l1PFMetCalo+process.l1PFMetPF+process.l1PFMetPuppi)


process.PFTau = cms.Sequence(process.PFTauTask)


process.hcalGlobalRecoSequence = cms.Sequence(process.hcalGlobalRecoTask)


process.muIsoDeposits_muons = cms.Sequence(process.muIsoDeposits_muonsTask)


process.muonreco_with_standAloneSET = cms.Sequence(process.muonreco_with_standAloneSET_Task)


process.muonGlobalReco = cms.Sequence(process.muonGlobalRecoTask)


process.recoJets = cms.Sequence(process.recoJetsTask)


process.ConvStep = cms.Sequence(process.ConvStepTask)


process.muonSeededStepDisplaced = cms.Sequence(process.muonSeededStepDisplacedTask)


process.reducedEcalRecHitsSequence = cms.Sequence(process.reducedEcalRecHitsTask)


process.ak4JTAExplicit = cms.Sequence(process.ak4JTAExplicitTask)


process.BeamHaloId = cms.Sequence(process.BeamHaloIdTask)


process.DetachedQuadStep = cms.Sequence(process.DetachedQuadStepTask)


process.oldegConversionTrackProducers = cms.Sequence(process.oldegConversionTrackProducersTask)


process.gedPhotonSequenceTmp = cms.Sequence(process.gedPhotonTaskTmp)


process.muIsolation = cms.Sequence(process.muIsolationTask)


process.L1PromptExtendedHybridTracksWithAssociators = cms.Sequence(process.offlineBeamSpot+process.TTTracksFromTrackletEmulation+process.TrackTriggerAssociatorTracks+process.TTTracksFromExtendedTrackletEmulation+process.TTTrackAssociatorFromPixelDigisExtended)


process.HLTDoFullUnpackingEgammaEcalSequence = cms.Sequence(process.bunchSpacingProducer+process.hltEcalDigis+process.hltEcalPreshowerDigis+process.hltEcalUncalibRecHit+process.hltEcalDetIdToBeRecovered+process.hltEcalRecHit+process.hltEcalPreshowerRecHit)


process.HLTHgcalTiclLayerClusteringForMuons = cms.Sequence(process.hgcalDigis+process.HGCalUncalibRecHit+process.HGCalRecHit+process.hgcalLayerClusters)


process.particleFlowClusterWithoutHO = cms.Sequence(process.particleFlowClusterWithoutHOTask)


process.cosmicsMuonIdSequence = cms.Sequence(process.cosmicsMuonIdTask)


process.pfNoPileUpJMESequence = cms.Sequence(process.pfNoPileUpJMETask)


process.islandClusteringSequence = cms.Sequence(process.islandClusteringTask)


process.recoTrackJets = cms.Sequence(process.recoTrackJetsTask)


process.hcalLocalRecoSequence = cms.Sequence(process.hcalLocalRecoTask)


process.RawToDigi_hcalOnly = cms.Sequence(process.RawToDigiTask_hcalOnly)


process.reconstruction_hcalOnly = cms.Sequence(process.reconstruction_hcalOnlyTask)


process.hltPhase2L3MuonPixelTracksSequence = cms.Sequence(process.hltPhase2L3MuonPixelTrackFilterByKinematics+process.hltPhase2L3MuonPixelFitterByHelixProjections+process.hltPhase2L3MuonPixelTracksTrackingRegions+process.hltPhase2L3MuonPixelTracksSeedLayers+process.hltPhase2L3MuonPixelTracksHitDoublets+process.hltPhase2L3MuonPixelTracksHitQuadruplets+process.hltPhase2L3MuonPixelTracks)


process.l1ParticleFlow_pf_barrel = cms.Sequence(process.l1ParticleFlow_pf_barrel_Task)


process.PixelLessStep = cms.Sequence(process.PixelLessStepTask)


process.calolocalreco = cms.Sequence(process.calolocalrecoTask)


process.pfBasedElectronIsoSequence = cms.Sequence(process.pfBasedElectronIsoTask)


process.csclocalreco = cms.Sequence(process.csclocalrecoTask)


process.hcalLocalRecoSequenceNZS = cms.Sequence(process.hcalLocalRecoTaskNZS)


process.photonSequence = cms.Sequence(process.photonTask)


process.muoncosmichighlevelreco = cms.Sequence(process.muoncosmichighlevelrecoTask)


process.JetCoreRegionalStep = cms.Sequence(process.JetCoreRegionalStepTask)


process.trackingGlobalReco = cms.Sequence(process.trackingGlobalRecoTask)


process.ak4PFL1FastL2L3CorrectorChain = cms.Sequence(process.ak4PFL1FastL2L3CorrectorTask)


process.l1ParticleFlow_pf_tsa = cms.Sequence(process.pfTracksFromL1TracksBarrel+process.l1pfProducerTSA)


process.conversionSequence = cms.Sequence(process.conversionTask)


process.muIsoDeposits_ParamGlobalMuons = cms.Sequence(process.muIsoDeposits_ParamGlobalMuonsTask)


process.globalmuontracking = cms.Sequence(process.globalmuontrackingTask)


process.muonSeededStepExtraDisplaced = cms.Sequence(process.muonSeededStepExtraDisplacedTask)


process.ecalUncalibRecHitSequence = cms.Sequence(process.ecalUncalibRecHitTask)


process.l1ParticleFlow_calo = cms.Sequence(process.l1ParticleFlow_calo_Task)


process.pfClusteringECAL = cms.Sequence(process.pfClusteringECALTask)


process.muonreco_plus_isolation = cms.Sequence(process.muonreco_plus_isolationTask)


process.pfBTagging = cms.Sequence(process.pfBTaggingTask)


process.muonreco = cms.Sequence(process.muonrecoTask)


process.striptrackerlocalreco = cms.Sequence(process.striptrackerlocalrecoTask)


process.muonSeededStepCoreOutIn = cms.Sequence(process.muonSeededStepCoreOutInTask)


process.HLTBeamSpot = cms.Sequence(process.hltScalersRawToDigi+process.offlineBeamSpot)


process.recoPFJets = cms.Sequence(process.recoPFJetsTask)


process.totemTimingLocalReconstruction = cms.Sequence(process.totemTimingLocalReconstructionTask)


process.recoCTPPS = cms.Sequence(process.recoCTPPSTask)


process.muoncosmicreco2legsHighLevel = cms.Sequence(process.muoncosmicreco2legsHighLevelTask)


process.hltPhase2L3MuonHighPtTripletStepSequence = cms.Sequence(process.hltPhase2L3MuonHighPtTripletStepClusters+process.hltPhase2L3MuonHighPtTripletStepSeedLayers+process.hltPhase2L3MuonHighPtTripletStepTrackingRegions+process.hltPhase2L3MuonHighPtTripletStepHitDoublets+process.hltPhase2L3MuonHighPtTripletStepHitTriplets+process.hltPhase2L3MuonHighPtTripletStepSeeds+process.hltPhase2L3MuonHighPtTripletStepTrackCandidates+process.hltPhase2L3MuonHighPtTripletStepTracks+process.hltPhase2L3MuonHighPtTripletStepTrackCutClassifier+process.hltPhase2L3MuonHighPtTripletStepTracksSelectionHighPurity)


process.reconstruction_trackingOnly = cms.Sequence(process.reconstruction_trackingOnlyTask)


process.PixelPairStep = cms.Sequence(process.PixelPairStepTask)


process.SimL1TMuonCommon = cms.Sequence(process.SimL1TMuonCommonTask)


process.muonlocalreco = cms.Sequence(process.muonlocalrecoTask)


process.displacedGlobalMuonTracking = cms.Sequence(process.displacedGlobalMuonTrackingTask)


process.produceAndDiscriminateHPSPFTaus = cms.Sequence(process.produceAndDiscriminateHPSPFTausTask)


process.ckftracks_wodEdX = cms.Sequence(process.ckftracks_wodEdXTask)


process.muonSeededStepCore = cms.Sequence(process.muonSeededStepCoreTask)


process.L1ExtendedHybridTracks = cms.Sequence(process.offlineBeamSpot+process.TTTracksFromExtendedTrackletEmulation)


process.uncleanedOnlyConversionTrackProducers = cms.Sequence(process.uncleanedOnlyConversionTrackProducersTask)


process.recoJPTJets = cms.Sequence(process.recoJPTJetsTask)


process.muoncosmicreco1legHighLevel = cms.Sequence(process.muoncosmicreco1legHighLevelTask)


process.pfClusteringHGCal = cms.Sequence(process.pfClusteringHGCalTask)


process.l1ParticleFlow_pf_hgcal = cms.Sequence(process.l1ParticleFlow_pf_hgcal_Task)


process.photonIDSequence = cms.Sequence(process.photonIDTask)


process.gedElectronPFIsoSequence = cms.Sequence(process.gedElectronPFIsoTask)


process.electronGsfTracking = cms.Sequence(process.electronGsfTrackingTask)


process.caloTowersRec = cms.Sequence(process.caloTowersRecTask)


process.recoAllJetsPUOffsetCorr = cms.Sequence(process.recoAllJetsPUOffsetCorrTask)


process.particleFlowTrackWithDisplacedVertex = cms.Sequence(process.particleFlowTrackWithDisplacedVertexTask)


process.pfBasedElectronPhotonIsoSequence = cms.Sequence(process.pfBasedElectronPhotonIsoTask)


process.TrackTriggerClustersStubs = cms.Sequence(process.TTClustersFromPhase2TrackerDigis+process.TTStubsFromPhase2TrackerDigis)


process.uncleanedOnlyElectronSequence = cms.Sequence(process.uncleanedOnlyElectronTask)


process.HLTMuonGemLocalRecoSequence = cms.Sequence(process.hltGemRecHits+process.hltGemSegments+process.hltMe0RecHits+process.hltMe0Segments)


process.tracking_v6_1_L3Muon_NoVertexReco = cms.Sequence(process.trackerClusterCheck+process.hltPhase2L3MuonPixelTracksSequence+process.hltPhase2L3MuonPixelVerticesSequence+process.hltPhase2L3MuonInitialStepSequence+process.hltPhase2L3MuonHighPtTripletStepSequence+process.hltPhase2L3MuonGeneralTracks)


process.pfPhotonTranslatorSequence = cms.Sequence(process.pfPhotonTranslatorTask)


process.reducedHcalRecHitsSequence = cms.Sequence(process.reducedHcalRecHitsTask)


process.ckfTracksFromMustacheConversions = cms.Sequence(process.ckfTracksFromMustacheConversionsTask)


process.oldegConversionSequence = cms.Sequence(process.oldegConversions)


process.pfDeepCSV = cms.Sequence(process.pfDeepCSVTask)


process.muonSeededStepDebugDisplaced = cms.Sequence(process.muonSeededStepDebugDisplacedTask)


process.SimL1Emulator = cms.Sequence(process.SimL1EmulatorTask)


process.reconstruction_woCosmicMuons = cms.Sequence(process.reconstruction_woCosmicMuonsTask)


process.InitialStep = cms.Sequence(process.InitialStepTask)


process.particleFlowSuperClusteringSequence = cms.Sequence(process.particleFlowSuperClusteringTask)


process.electronPFIsolationValuesSequence = cms.Sequence(process.electronPFIsolationValuesTask)


process.conversionTrackMergers = cms.Sequence(process.conversionTrackMergersTask)


process.JetPlusTrackCorrections = cms.Sequence(process.JetPlusTrackCorrectionsAntiKt4)


process.jetHighLevelReco = cms.Sequence(process.jetHighLevelRecoTask)


process.recoJetsHI = cms.Sequence(process.recoJetsHITask)


process.pfSortByTypeSequence = cms.Sequence(process.pfSortByTypeTask)


process.pfClusteringHBHEHF = cms.Sequence(process.pfClusteringHBHEHFTask)


process.ecalLocalRecoSequence = cms.Sequence(process.ecalLocalRecoTask)


process.kt4JTA = cms.Sequence(process.kt4JTATask)


process.pfTrackingGlobalReco = cms.Sequence(process.pfTrackingGlobalRecoTask)


process.multi5x5PreshowerClusteringSequence = cms.Sequence(process.multi5x5PreshowerClusteringTask)


process.globalreco = cms.Sequence(process.globalrecoTask)


process.particleFlowTrack = cms.Sequence(process.particleFlowTrackTask)


process.HLTDoLocalHcalSequence = cms.Sequence(process.hltHcalDigis+process.hltHbhereco+process.hltHfprereco+process.hltHfreco+process.hltHoreco)


process.egmIsolationSequence = cms.Sequence(process.egmIsolationTask)


process.recoAllJets = cms.Sequence(process.recoAllJetsTask)


process.HLTMuonLocalRecoSequence = cms.Sequence(process.hltDt1DRecHits+process.hltDt4DSegments+process.hltCsc2DRecHits+process.hltCscSegments+process.hltRpcRecHits+process.HLTMuonGemLocalRecoSequence)


process.metrecoPlusHCALNoise = cms.Sequence(process.metrecoPlusHCALNoiseTask)


process.sisCone5JTA = cms.Sequence(process.sisCone5JTATask)


process.HLTPFClusteringForMuonsUnseeded = cms.Sequence(process.hltParticleFlowRecHitECALUnseeded+process.hltParticleFlowRecHitPSUnseeded+process.hltParticleFlowClusterPSUnseeded+process.hltParticleFlowClusterECALUncorrectedUnseeded+process.hltParticleFlowClusterECALUnseeded)


process.caloJetsForTrk = cms.Sequence(process.caloJetsForTrkTask)


process.muontracking_with_SET = cms.Sequence(process.muontracking_with_SET_Task)


process.pfNoPileUpIsoSequence = cms.Sequence(process.pfNoPileUpIsoTask)


process.hfEMClusteringSequence = cms.Sequence(process.hfEMClusteringTask)


process.ootPhotonSequence = cms.Sequence(process.ootPhotonTask)


process.recoTauClassicHPSSequence = cms.Sequence(process.recoTauClassicHPSTask)


process.muonSeededStepCoreDisplaced = cms.Sequence(process.muonSeededStepCoreDisplacedTask)


process.produceHPSPFTaus = cms.Sequence(process.produceHPSPFTausTask)


process.GsfGlobalElectronTestSequence = cms.Sequence(process.GsfGlobalElectronTestTask)


process.hpsPFTauVertexAndImpactParametersSeq = cms.Sequence(process.hpsPFTauVertexAndImpactParametersTask)


process.HLTDoLocalStripSequence = cms.Sequence(process.siPhase2Clusters+process.MeasurementTrackerEvent)


process.pfClusterIsolationSequence = cms.Sequence(process.pfClusterIsolationTask)


process.trackAssoSeq = cms.Sequence(process.hltPhase2L3MuonsNoIDTracks+process.hltPhase2L3MuonsTracks+process.AhltPhase2L3OIMuonTrackSelectionHighPurity+process.AhltIter0Phase2L3FromL1TkMuonTrackSelectionHighPurity+process.AhltIter2Phase2L3FromL1TkMuonTrackSelectionHighPurity+process.AhltIter2Phase2L3FromL1TkMuonMerged+process.AhltPhase2L3MuonsNoID+process.AhltPhase2L3Muons)


process.totemRPLocalReconstruction = cms.Sequence(process.totemRPLocalReconstructionTask)


process.uncleanedOnlyTracking = cms.Sequence(process.uncleanedOnlyTrackingTask)


process.multi5x5ClusteringSequence = cms.Sequence(process.multi5x5ClusteringTask)


process.Phase1L1TJetsSequence = cms.Sequence(process.Phase1L1TJetProducer+process.Phase1L1TJetCalibrator)


process.reconstruction_HcalNZS = cms.Sequence(process.reconstruction_HcalNZSTask)


process.HLTPhase2L3MuonRecoNocandSequence = cms.Sequence(process.HLTPhase2L3OImuonTkCandidateSequence+process.HLTPhase2L3IOFromL1TkMuonTkCandidateSequence+process.hltPhase2L3MuonMerged+process.hltPhase2L3GlbMuon+process.hltPhase2L3MuonsNoID+process.hltPhase2L3Muons+process.hltL3MuonsPhase2L3Links+process.hltPhase2L3MuonTracks)


process.jetGlobalReco = cms.Sequence(process.jetGlobalRecoTask)


process.otLocalReco = cms.Sequence(process.MeasurementTrackerEvent+process.bunchSpacingProducer)


process.reducedEcalRecHitsSequenceEcalOnly = cms.Sequence(process.reducedEcalRecHitsSequenceEcalOnlyTask)


process.particleFlowReco = cms.Sequence(process.particleFlowRecoTask)


process.muontracking = cms.Sequence(process.muontrackingTask)


process.particleFlowCluster = cms.Sequence(process.particleFlowClusterTask)


process.muonIdProducerSequence = cms.Sequence(process.muonIdProducerTask)


process.l1PFJets = cms.Sequence(process.ak4PFL1Calo+process.ak4PFL1PF+process.ak4PFL1Puppi+process.ak4PFL1CaloCorrected+process.ak4PFL1PFCorrected+process.ak4PFL1PuppiCorrected)


process.HLTPFHcalClusteringForMuons = cms.Sequence(process.hltParticleFlowRecHitHBHEForMuons+process.hltParticleFlowClusterHBHEForMuons+process.hltParticleFlowClusterHCALForMuons)


process.L1HybridTracks = cms.Sequence(process.offlineBeamSpot+process.TTTracksFromTrackletEmulation)


process.egammaIsolationSequence = cms.Sequence(process.egammaIsolationTask)


process.muonrecoComplete = cms.Sequence(process.muonSelectionTypeTask, process.muonreco_plus_isolationTask)


process.lowPtGsfElectronSequence = cms.Sequence(process.lowPtGsfElectronTask)


process.reconstruction_fromRECO = cms.Sequence(cms.Task(process.ConvStepTask, process.MeasurementTrackerEvent, process.PFTauTask, process.btaggingTask, process.bunchSpacingProducer, process.caloTowersRecTask, process.conversionOpenTrackTask, process.conversionStepTracks, process.cosmicDCTracksSeqTask, process.cscSegments, process.doAlldEdXEstimatorsTask, process.dt4DCosmicSegments, process.dt4DSegments, process.earlyGeneralTracks, process.ecalClustersTask, process.ecalDetailedTimeRecHit, process.egammaGlobalRecoTask, process.egammaHighLevelRecoPostPFTask, process.egammaHighLevelRecoPrePFTask, process.electronSeedsSeqTask, process.fastTimingGlobalRecoTask, process.fastTimingLocalRecoTask, process.gemSegments, process.generalTracksTask, process.gsfTracksOpenConversions, process.hfprereco, process.hgcalLocalRecoTask, process.interestingEcalDetIdEB, process.interestingEcalDetIdEBU, process.interestingEcalDetIdEE, process.interestingEcalDetIdOOTPFEB, process.interestingEcalDetIdOOTPFEE, process.interestingEcalDetIdOOTPFES, process.interestingEcalDetIdPFEB, process.interestingEcalDetIdPFEE, process.interestingEcalDetIdPFES, process.interestingEcalDetIdRefinedEB, process.interestingEcalDetIdRefinedEE, process.interestingEcalDetIdRefinedES, process.interestingTrackEcalDetIds, process.iterTICLTask, process.iterTrackingEarlyTask, process.jetGlobalRecoTask, process.jetHighLevelRecoTask, process.logErrorHarvester, process.lowPtGsfElectronTask, process.me0LocalRecoTask, process.metrecoPlusHCALNoiseTask, process.muonGlobalRecoTask, process.muonSeededStepTask, process.muoncosmichighlevelrecoTask, process.muoncosmicrecoTask, process.muonshighlevelrecoTask, process.offlineBeamSpot, process.particleFlowClusterTask, process.particleFlowLinksTask, process.particleFlowRecoTask, process.pfTrackingGlobalRecoTask, process.preDuplicateMergingGeneralTracks, process.recoCTPPSTask, process.recoPFMETTask, process.reducedEcalRecHitsEB, process.reducedEcalRecHitsEE, process.reducedHcalRecHitsTask, process.siPhase2Clusters, process.siPixelClusterShapeCache, process.siPixelRecHits, process.standalonemuontrackingTask, process.trackExtrapolator, process.trackerClusterCheck, process.vertexrecoTask))


process.L1PromptExtendedHybridTracks = cms.Sequence(process.offlineBeamSpot+process.TTTracksFromTrackletEmulation+process.TTTracksFromExtendedTrackletEmulation)


process.ctfTracksNoOverlaps = cms.Sequence(process.ctfTracksNoOverlapsTask)


process.photonPFIsolationValuesSequence = cms.Sequence(process.photonPFIsolationValuesTask)


process.muonSeededStepExtraInOut = cms.Sequence(process.muonSeededStepExtraInOutTask)


process.muonSeededStepDebug = cms.Sequence(process.muonSeededStepDebugTask)


process.pfClusteringHO = cms.Sequence(process.pfClusteringHOTask)


process.conversionTrackSequenceNoEcalSeeded = cms.Sequence(process.conversionTrackTaskNoEcalSeeded)


process.TrackTriggerAssociatorComplete = cms.Sequence(process.TTClusterAssociatorFromPixelDigis+process.TTStubAssociatorFromPixelDigis+process.TTTrackAssociatorFromPixelDigis)


process.pfElectronTranslatorSequence = cms.Sequence(process.pfElectronTranslatorTask)


process.jetCorrectorsForReco = cms.Sequence(process.jetCorrectorsForRecoTask)


process.recoPFJetsWithSubstructure = cms.Sequence(process.recoPFJetsWithSubstructureTask)


process.ckftracks_plus_pixelless = cms.Sequence(process.ckftracks_plus_pixellessTask)


process.l1ParticleFlow_pf_hf = cms.Sequence(process.l1ParticleFlow_pf_hf_Task)


process.L1HybridTracksWithAssociators = cms.Sequence(process.offlineBeamSpot+process.TTTracksFromTrackletEmulation+process.TrackTriggerAssociatorTracks)


process.L1ExtendedHybridTracksWithAssociators = cms.Sequence(process.offlineBeamSpot+process.TTTracksFromExtendedTrackletEmulation+process.TTTrackAssociatorFromPixelDigisExtended)


process.itLocalReco = cms.Sequence(process.siPhase2Clusters+process.siPixelClusters+process.siPixelClusterShapeCache+process.siPixelRecHits)


process.hybridClusteringSequence = cms.Sequence(process.hybridClusteringTask)


process.InitialStepPreSplitting = cms.Sequence(process.InitialStepPreSplittingTask)


process.ctppsRawToDigi = cms.Sequence(process.ctppsRawToDigiTask)


process.particleFlowTmpSeq = cms.Sequence(process.particleFlowTmpTask)


process.doAlldEdXEstimators = cms.Sequence(process.doAlldEdXEstimatorsTask)


process.ecalRecHitSequence = cms.Sequence(process.ecalRecHitTask)


process.displacedTracksSequence = cms.Sequence(process.displacedTracksTask)


process.muonPFIsolationDepositsSequence = cms.Sequence(process.muonPFIsolationDepositsTask)


process.electronPFIsolationDepositsSequence = cms.Sequence(process.electronPFIsolationDepositsTask)


process.reconstruction_ecalOnly = cms.Sequence(process.reconstruction_ecalOnlyTask)


process.HLTPhase2L3MuonRecoSequence = cms.Sequence(process.HLTPhase2L3MuonRecoNocandSequence+process.hltPhase2L3MuonCandidates)


process.l1ParticleFlow_proper = cms.Sequence(process.l1ParticleFlow_calo+process.l1ParticleFlow_pf_barrel+process.l1ParticleFlow_pf_hgcal+process.l1ParticleFlow_pf_hf+process.l1pfCandidates)


process.HLTPhase2L3MuonCaloIsoSequence = cms.Sequence(process.HLTDoFullUnpackingEgammaEcalSequence+process.HLTDoLocalHcalSequence+process.HLTFastJetForMuons+process.HLTPFClusteringForMuonsUnseeded+process.hltPhase2L3MuonsEcalIsodR0p3dRVeto0p000+process.hltL3crIsoL1TkSingleMu22L3f24QL3pfecalIsoFiltered0p41+process.HLTPFHcalClusteringForMuons+process.hltPhase2L3MuonsHcalIsodR0p3dRVeto0p000+process.hltL3crIsoL1TkSingleMu22L3f24QL3pfhcalIsoFiltered0p40+process.HLTHgcalTiclLayerClusteringForMuons+process.hltPhase2L3MuonsHgcalLCIsodR0p2dRVetoEM0p00dRVetoHad0p02minEEM0p00minEHad0p00+process.hltL3crIsoL1TkSingleMu22L3f24QL3pfhgcalIsoFiltered4p70)


process.L1TrackTrigger = cms.Sequence(process.TrackTriggerClustersStubs+process.TrackerDTCProducer+process.L1PromptExtendedHybridTracks)


process.HLTL2muonrecoFromL1TkMuonNocandSequence = cms.Sequence(process.HLTMuonLocalRecoSequence+process.hltL2OfflineMuonSeeds+process.hltL2MuonSeedsFromL1TkMuon+process.hltL2MuonsFromL1TkMuon)


process.HLTBeginSequence = cms.Sequence(process.hltTriggerType+process.HLTBeamSpot)


process.HLTL2muonrecoSequence = cms.Sequence(process.HLTL2muonrecoFromL1TkMuonNocandSequence+process.hltL2MuonFromL1TkMuonCandidates)


process.HLTPhase2L3MuonCaloIsoSequenceIgnoreFilters = cms.Sequence(process.HLTDoFullUnpackingEgammaEcalSequence+process.HLTDoLocalHcalSequence+process.HLTFastJetForMuons+process.HLTPFClusteringForMuonsUnseeded+process.hltPhase2L3MuonsEcalIsodR0p3dRVeto0p000+cms.ignore(process.hltL3crIsoL1TkSingleMu22L3f24QL3pfecalIsoFiltered0p41)+process.HLTPFHcalClusteringForMuons+process.hltPhase2L3MuonsHcalIsodR0p3dRVeto0p000+cms.ignore(process.hltL3crIsoL1TkSingleMu22L3f24QL3pfhcalIsoFiltered0p40)+process.HLTHgcalTiclLayerClusteringForMuons+process.hltPhase2L3MuonsHgcalLCIsodR0p2dRVetoEM0p00dRVetoHad0p02minEEM0p00minEHad0p00+cms.ignore(process.hltL3crIsoL1TkSingleMu22L3f24QL3pfhgcalIsoFiltered4p70))


process.HLTPhase2L3MuonIsoSequenceTrkRegionalNew = cms.Sequence(process.HLTPhase2L3MuonCaloIsoSequence+process.tracking_v6_1_L3Muon_NoVertexReco+process.hltPhase2L3MuonsTrkIsoRegionalNewdR0p3dRVeto0p005dz0p25dr0p20ChisqInfPtMin0p0Cut0p07+process.hltL3crIsoL1TkSingleMu22L3f24QL3trkIsoRegionalNewFiltered0p07EcalHcalHgcalTrk)


process.l1ParticleFlow = cms.Sequence(process.l1ParticleFlow_proper)


process.HLTPhase2L3MuonIsoSequenceTrkRegionalNewIgnoreFilters = cms.Sequence(process.HLTPhase2L3MuonCaloIsoSequenceIgnoreFilters+process.tracking_v6_1_L3Muon_NoVertexReco+process.hltPhase2L3MuonsTrkIsoRegionalNewdR0p3dRVeto0p005dz0p25dr0p20ChisqInfPtMin0p0Cut0p07+cms.ignore(process.hltL3crIsoL1TkSingleMu22L3f24QL3trkIsoRegionalNewFiltered0p07EcalHcalHgcalTrk))


process.pL1TkPrimaryVertex = cms.Path(process.L1TkPrimaryVertex)


process.pL1TkPhotonsCrystal = cms.Path(process.L1TkPhotonsCrystal)


process.pL1TkIsoElectronsCrystal = cms.Path(process.L1TkIsoElectronsCrystal)


process.pL1TkElectronsLooseCrystal = cms.Path(process.L1TkElectronsLooseCrystal)


process.pL1TkElectronsHGC = cms.Path(process.L1TkElectronsHGC)


process.pL1TkMuon = cms.Path(process.L1TkMuons+process.L1TkMuonsTP)


process.pL1TkElectronsLooseHGC = cms.Path(process.L1TkElectronsLooseHGC)


process.pL1TkElectronsEllipticMatchHGC = cms.Path(process.L1TkElectronsEllipticMatchHGC)


process.pL1TkElectronsCrystal = cms.Path(process.L1TkElectronsCrystal)


process.pL1TkPhotonsHGC = cms.Path(process.L1TkPhotonsHGC)


process.pL1TkIsoElectronsHGC = cms.Path(process.L1TkIsoElectronsHGC)


process.pL1TkElectronsEllipticMatchCrystal = cms.Path(process.L1TkElectronsEllipticMatchCrystal)


process.L1TrackTrigger_step = cms.Path(process.L1TrackTrigger)


process.L1simulation_step = cms.Path(process.SimL1Emulator)


process.HLTriggerFinalPath = cms.Path(process.hltTriggerSummaryAOD+process.hltTriggerSummaryRAW+process.hltBoolFalse)


process.L1_SingleTkMuon_22 = cms.Path(process.HLTBeginSequence+process.hltL1TkSingleMuFiltered22+process.HLTEndSequence)


process.L1_DoubleTkMuon_15_7 = cms.Path(process.HLTBeginSequence+process.hltL1TkDoubleMuFiltered7+process.hltL1TkSingleMuFiltered15+process.hltDoubleMuon7DZ1p0+process.HLTEndSequence)


process.L1_TripleTkMuon_5_3_3 = cms.Path(process.HLTBeginSequence+process.hltL1TripleMuFiltered3+process.hltL1SingleMuFiltered5+process.hltTripleMuon3DZ1p0+process.hltTripleMuon3DR0+process.HLTEndSequence)


process.HLT_Mu50_FromL1TkMuon = cms.Path(process.HLTBeginSequence+process.hltL1TkSingleMuFiltered22+process.HLTMuonLocalRecoSequence+process.HLTDoLocalPixelSequence+process.HLTDoLocalStripSequence+process.HLTL2muonrecoSequence+process.HLTPhase2L3MuonRecoSequence+process.hltL3fL1TkSingleMu22L3Filtered50Q+process.HLTEndSequence)


process.HLT_Mu50_FromL1TkMuon_Open = cms.Path(process.HLTBeginSequence+cms.ignore(process.hltL1TkSingleMuFiltered22)+process.HLTMuonLocalRecoSequence+process.HLTDoLocalPixelSequence+process.HLTDoLocalStripSequence+process.HLTL2muonrecoSequence+process.HLTPhase2L3MuonRecoSequence+cms.ignore(process.hltL3fL1TkSingleMu22L3Filtered50Q)+process.HLTEndSequence)


process.HLT_IsoMu24_FromL1TkMuon = cms.Path(process.HLTBeginSequence+process.hltL1TkSingleMuFiltered22+process.HLTMuonLocalRecoSequence+process.HLTDoLocalPixelSequence+process.HLTDoLocalStripSequence+process.HLTL2muonrecoSequence+process.HLTPhase2L3MuonRecoSequence+process.hltL3fL1TkSingleMu22L3Filtered24Q+process.HLTDoFullUnpackingEgammaEcalSequence+process.HLTDoLocalHcalSequence+process.HLTFastJetForMuons+process.HLTPFClusteringForMuonsUnseeded+process.hltPhase2L3MuonsEcalIsodR0p3dRVeto0p000+process.hltL3crIsoL1TkSingleMu22L3f24QL3pfecalIsoFiltered0p41+process.HLTPFHcalClusteringForMuons+process.hltPhase2L3MuonsHcalIsodR0p3dRVeto0p000+process.hltL3crIsoL1TkSingleMu22L3f24QL3pfhcalIsoFiltered0p40+process.HLTHgcalTiclLayerClusteringForMuons+process.hltPhase2L3MuonsHgcalLCIsodR0p2dRVetoEM0p00dRVetoHad0p02minEEM0p00minEHad0p00+process.hltL3crIsoL1TkSingleMu22L3f24QL3pfhgcalIsoFiltered4p70+process.tracking_v6_1_L3Muon_NoVertexReco+process.hltPhase2L3MuonsTrkIsoRegionalNewdR0p3dRVeto0p005dz0p25dr0p20ChisqInfPtMin0p0Cut0p07+process.hltL3crIsoL1TkSingleMu22L3f24QL3trkIsoRegionalNewFiltered0p07EcalHcalHgcalTrk+process.HLTEndSequence)


process.HLT_Mu37_Mu27_FromL1TkMuon = cms.Path(process.HLTBeginSequence+process.hltL1TkDoubleMuFiltered7+process.hltL1TkSingleMuFiltered15+process.hltDoubleMuon7DZ1p0+process.HLTMuonLocalRecoSequence+process.HLTDoLocalPixelSequence+process.HLTDoLocalStripSequence+process.HLTL2muonrecoSequence+process.HLTPhase2L3MuonRecoSequence+process.hltL3fL1DoubleMu155fPreFiltered27+process.hltL3fL1DoubleMu155fFiltered37+process.HLTEndSequence)


process.HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_FromL1TkMuon = cms.Path(process.HLTBeginSequence+process.hltL1TkDoubleMuFiltered7+process.hltL1TkSingleMuFiltered15+process.hltDoubleMuon7DZ1p0+process.HLTMuonLocalRecoSequence+process.HLTDoLocalPixelSequence+process.HLTDoLocalStripSequence+process.HLTL2muonrecoSequence+process.HLTPhase2L3MuonRecoSequence+process.hltL3fL1DoubleMu155fPreFiltered8+process.hltL3fL1DoubleMu155fFiltered17+process.tracking_v6_1_L3Muon_NoVertexReco+process.hltPhase2L3MuonsTrkIsoRegionalNewdR0p3dRVeto0p005dz0p25dr0p20ChisqInfPtMin0p0Cut0p4+process.hltDiMuon178RelTrkIsoFiltered0p4+process.hltDiMuon178RelTrkIsoFiltered0p4DzFiltered0p2+process.HLTEndSequence)


process.HLT_TriMu_10_5_5_DZ_FromL1TkMuon = cms.Path(process.HLTBeginSequence+process.hltL1TripleMuFiltered3+process.hltL1SingleMuFiltered5+process.hltTripleMuon3DZ1p0+process.hltTripleMuon3DR0+process.HLTMuonLocalRecoSequence+process.HLTDoLocalPixelSequence+process.HLTDoLocalStripSequence+process.HLTL2muonrecoSequence+process.HLTPhase2L3MuonRecoSequence+process.hltL3fL1TkTripleMu533PreFiltered555+process.hltL3fL1TkTripleMu533L3Filtered1055+process.hltL3fL1TkTripleMu533L31055DZFiltered0p2+process.HLTEndSequence)


process.mypath = cms.Path(process.hltTPClusterProducer+process.hltTrackAssociatorByHits+process.trackAssoSeq)


process.myseedpath = cms.Path(process.Skimmer+process.hltTPClusterProducer+process.hltTrackAssociatorByHits+process.seedNtupler)


process.myana = cms.Path(process.GenMuAnalyzerFromFileIn+process.GenMuAnalyzerReEmu)


process.Gen_QCDBCToEFilter = cms.Path(process.bcToEFilter)


process.Gen_QCDEmEnrichingFilter = cms.Path(process.emEnrichingFilter)


process.Gen_QCDEmEnrichingNoBCToEFilter = cms.Path(~process.bcToEFilter+process.emEnrichingFilter)


process.Gen_QCDMuGenFilter = cms.Path(process.muGenFilter)


process.Gen_QCDMuNoEmGenFilter = cms.Path(~process.emEnrichingFilter+process.muGenFilter)


process.Gen_QCDEmNoMuGenFilter = cms.Path(~process.muGenFilter+process.emEnrichingFilter)


process.myendpath = cms.EndPath(process.ntupler)


process.schedule = cms.Schedule(*[ process.L1simulation_step, process.L1_SingleTkMuon_22, process.L1_DoubleTkMuon_15_7, process.L1_TripleTkMuon_5_3_3, process.HLT_Mu50_FromL1TkMuon_Open, process.HLT_Mu50_FromL1TkMuon, process.HLT_IsoMu24_FromL1TkMuon, process.HLT_Mu37_Mu27_FromL1TkMuon, process.HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_FromL1TkMuon, process.HLT_TriMu_10_5_5_DZ_FromL1TkMuon, process.HLTriggerFinalPath, process.Gen_QCDBCToEFilter, process.Gen_QCDEmEnrichingFilter, process.Gen_QCDEmEnrichingNoBCToEFilter, process.Gen_QCDMuGenFilter, process.Gen_QCDMuNoEmGenFilter, process.Gen_QCDEmNoMuGenFilter, process.myana, process.myseedpath ])
