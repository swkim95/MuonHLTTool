import FWCore.ParameterSet.Config as cms
from HeterogeneousCore.AlpakaCore.ProcessAcceleratorAlpaka import ProcessAcceleratorAlpaka
from HeterogeneousCore.CUDACore.ProcessAcceleratorCUDA import ProcessAcceleratorCUDA
from HeterogeneousCore.ROCmCore.ProcessAcceleratorROCm import ProcessAcceleratorROCm

process = cms.Process("MYHLT")

process.source = cms.Source("PoolSource",
    # dropDescendantsOfDroppedBranches = cms.untracked.bool(False),
    fileNames = cms.untracked.vstring('/store/mc/Phase2Spring24DIGIRECOMiniAOD/DYToLL_M-50_TuneCP5_14TeV-pythia8/GEN-SIM-DIGI-RAW-MINIAOD/PU200_Trk1GeV_140X_mcRun4_realistic_v4-v1/2810000/67e21bae-f9cd-43f1-8974-e163400220f7.root'),
    inputCommands = cms.untracked.vstring(
        'keep *',
        'drop l1tPFJets_*_*_*',
        'drop l1tTrackerMuons_l1tTkMuonsGmt*_*_HLT',
        'drop *_hlt*_*_HLT',
        'drop triggerTriggerFilterObjectWithRefs_l1t*_*_HLT'
    ),
    secondaryFileNames = cms.untracked.vstring()
)
process.AODEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    eventAutoFlushCompressedSize = cms.untracked.int32(31457280),
    outputCommands = cms.untracked.vstring( (
        'drop *',
        'keep ClusterSummary_clusterSummaryProducer_*_*',
        'keep *_dt4DSegments_*_*',
        'keep *_dt4DCosmicSegments_*_*',
        'keep *_cscSegments_*_*',
        'keep *_rpcRecHits_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_gemRecHits_*_*',
        'keep *_gemSegments_*_*',
        'keep *_me0RecHits_*_*',
        'keep *_me0Segments_*_*',
        'keep *_castorreco_*_*',
        'keep *_reducedHcalRecHits_*_*',
        'keep HcalUnpackerReport_castorDigis_*_*',
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*',
        'keep HcalUnpackerReport_hcalDigis_*_*',
        'keep *_HGCalRecHit_*_*',
        'keep recoCaloClusters_hgcalMergeLayerClusters_*_*',
        'keep *_hgcalMergeLayerClusters_timeLayerCluster_*',
        'keep *_hgcalMergeLayerClusters_InitialLayerClustersMask_*',
        'keep *_selectDigi_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep recoCaloClusters_hybridSuperClusters_*_*',
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*',
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*',
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterHGCal__*',
        'keep recoCaloClusters_particleFlowSuperClusterHGCal__*',
        'keep recoTracks_GsfGlobalElectronTest_*_*',
        'keep recoGsfTracks_electronGsfTracks_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_conversionStepTracks_*_*',
        'keep recoTracks_beamhaloTracks_*_*',
        'keep recoTracks_ctfPixelLess_*_*',
        'keep *_dedxHarmonic2_*_*',
        'keep *_dedxPixelHarmonic2_*_*',
        'keep *_dedxHitInfo_*_*',
        'keep *_trackExtrapolator_*_*',
        'keep *_generalTracks_MVAValues_*',
        'keep *_generalTracks_MVAVals_*',
        'keep recoCaloJets_ak4CaloJets_*_*',
        'keep *_ak4CaloJets_rho_*',
        'keep *_ak4CaloJets_sigma_*',
        'keep *_ak4PFJetsCHS_*_*',
        'keep floatedmValueMap_puppi_*_*',
        'keep *_ak4PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppiSoftDrop_*_*',
        'keep recoPFJets_ak4PFJets_*_*',
        'keep *_ak4PFJets_rho_*',
        'keep *_ak4PFJets_sigma_*',
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*',
        'keep *_caloTowers_*_*',
        'keep *_CastorTowerReco_*_*',
        'keep *_ak4JetTracksAssociatorAtVertex_*_*',
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*',
        'keep *_ak4JetTracksAssociatorExplicit_*_*',
        'keep *_ak4JetExtender_*_*',
        'keep *_ak4JetID_*_*',
        'keep recoBasicJets_ak5CastorJets_*_*',
        'keep *_ak5CastorJets_rho_*',
        'keep *_ak5CastorJets_sigma_*',
        'keep *_ak5CastorJetID_*_*',
        'keep recoBasicJets_ak7CastorJets_*_*',
        'keep *_ak7CastorJets_rho_*',
        'keep *_ak7CastorJets_sigma_*',
        'keep *_ak7CastorJetID_*_*',
        'keep *_fixedGridRhoAll_*_*',
        'keep *_fixedGridRhoFastjetAll_*_*',
        'keep *_fixedGridRhoFastjetAllTmp_*_*',
        'keep *_fixedGridRhoFastjetCentral_*_*',
        'keep *_fixedGridRhoFastjetAllCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*',
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*',
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*',
        'keep recoCaloMETs_caloMet_*_*',
        'keep recoCaloMETs_caloMetBE_*_*',
        'keep recoCaloMETs_caloMetBEFO_*_*',
        'keep recoCaloMETs_caloMetM_*_*',
        'keep recoPFMETs_pfMet_*_*',
        'keep recoPFMETs_pfChMet_*_*',
        'keep floatedmValueMap_puppiNoLep_*_*',
        'keep recoPFMETs_pfMetPuppi_*_*',
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*',
        'keep HcalNoiseSummary_hcalnoise_*_*',
        'keep recoGlobalHaloData_GlobalHaloData_*_*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep recoMuons_muons_*_*',
        'keep booledmValueMap_muons_*_*',
        'keep doubleedmValueMap_muons_muPFMean*_*',
        'keep doubleedmValueMap_muons_muPFSum*_*',
        'keep *_muons_muonShowerInformation_*',
        'keep recoMuonTimeExtraedmValueMap_muons_*_*',
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*',
        'keep uintedmValueMap_muons_*_*',
        'keep *_particleFlow_muons_*',
        'keep recoMuons_displacedMuons_*_*',
        'keep booledmValueMap_displacedMuons_*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFMean*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFSum*_*',
        'keep recoMuonTimeExtraedmValueMap_displacedMuons_*_*',
        'keep uintedmValueMap_displacedMuons_*_*',
        'keep *_particleFlow_displacedMuons_*',
        'keep recoTracks_standAloneMuons_*_*',
        'keep recoTrackExtras_standAloneMuons_*_*',
        'keep TrackingRecHitsOwned_standAloneMuons_*_*',
        'keep recoTracks_globalMuons_*_*',
        'keep recoTrackExtras_globalMuons_*_*',
        'keep recoTracks_tevMuons_*_*',
        'keep recoTrackExtras_tevMuons_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_displacedTracks_*_*',
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*',
        'keep recoTracks_displacedGlobalMuons_*_*',
        'keep recoTrackExtras_displacedGlobalMuons_*_*',
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*',
        'keep recoTracks_cosmicMuons_*_*',
        'keep recoMuons_muonsFromCosmics_*_*',
        'keep recoTracks_cosmicMuons1Leg_*_*',
        'keep recoMuons_muonsFromCosmics1Leg_*_*',
        'keep recoTracks_refittedStandAloneMuons_*_*',
        'keep recoTrackExtras_refittedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTrackExtras_displacedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*',
        'keep *_muonReducedTrackExtras_*_*',
        'keep *_displacedMuonReducedTrackExtras_*_*',
        'keep *_softPFElectronBJetTags_*_*',
        'keep *_softPFMuonBJetTags_*_*',
        'keep *_pfTrackCountingHighEffBJetTags_*_*',
        'keep *_pfJetProbabilityBJetTags_*_*',
        'keep *_pfJetBProbabilityBJetTags_*_*',
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*',
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*',
        'keep *_pfGhostTrackBJetTags_*_*',
        'keep *_pfCombinedMVAV2BJetTags_*_*',
        'keep *_inclusiveCandidateSecondaryVertices_*_*',
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*',
        'keep *_pfCombinedCvsLJetTags_*_*',
        'keep *_pfCombinedCvsBJetTags_*_*',
        'keep *_pfChargeBJetTags_*_*',
        'keep *_pfDeepCSVJetTags_*_*',
        'keep *_pfDeepCMVAJetTags_*_*',
        'keep *_pixelClusterTagInfos_*_*',
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*',
        'keep recoPFTaus_hpsPFTauProducer_*_*',
        'keep *_hpsPFTauBasicDiscriminators_*_*',
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*',
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*',
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*',
        'keep *_hpsPFTauTransverseImpactParameters_*_*',
        'keep  *_offlinePrimaryVertices__*',
        'keep *_offlinePrimaryVerticesWithBS_*_*',
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*',
        'keep *_nuclearInteractionMaker_*_*',
        'keep *_generalV0Candidates_*_*',
        'keep *_inclusiveSecondaryVertices_*_*',
        'keep *_offlinePrimaryVertices4D__*',
        'keep *_offlinePrimaryVertices4DWithBS__*',
        'keep *_trackTimeValueMapProducer_*_*',
        'keep *_tofPID_*_*',
        'keep recoGsfElectronCores_gsfElectronCores_*_*',
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*',
        'keep recoGsfElectrons_gsfElectrons_*_*',
        'keep recoGsfElectrons_gedGsfElectrons_*_*',
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*',
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*',
        'keep floatedmValueMap_eidRobustLoose_*_*',
        'keep floatedmValueMap_eidRobustTight_*_*',
        'keep floatedmValueMap_eidRobustHighEnergy_*_*',
        'keep floatedmValueMap_eidLoose_*_*',
        'keep floatedmValueMap_eidTight_*_*',
        'keep *_egmGedGsfElectronPFIsolation_*_*',
        'keep recoPhotonCores_gedPhotonCore_*_*',
        'keep recoPhotons_gedPhotons_*_*',
        'keep *_particleBasedIsolation_*_*',
        'keep recoPhotonCores_photonCore_*_*',
        'keep recoPhotons_photons_*_*',
        'keep recoPhotonCores_ootPhotonCore_*_*',
        'keep recoPhotons_ootPhotons_*_*',
        'keep recoConversions_conversions_*_*',
        'drop recoConversions_conversions_uncleanedConversions_*',
        'keep recoConversions_mustacheConversions_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep recoConversions_allConversions_*_*',
        'keep recoConversions_allConversionsOldEG_*_*',
        'keep recoTracks_ckfOutInTracksFromConversions_*_*',
        'keep recoTracks_ckfInOutTracksFromConversions_*_*',
        'keep recoConversions_uncleanedOnlyAllConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep *_PhotonIDProd_*_*',
        'keep *_PhotonIDProdGED_*_*',
        'keep *_hfRecoEcalCandidate_*_*',
        'keep *_hfEMClusters_*_*',
        'keep *_gedGsfElectronCores_*_*',
        'keep *_gedGsfElectrons_*_*',
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*',
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*',
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*',
        'keep *_lowPtGsfToTrackLinks_*_*',
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_rekeyLowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_lowPtGsfElectronID_*_*',
        'keep *_ecalDrivenGsfElectronCores_*_*',
        'keep *_ecalDrivenGsfElectrons_*_*',
        'keep *_ecalDrivenGsfElectronCoresHGC_*_*',
        'keep *_ecalDrivenGsfElectronsHGC_*_*',
        'keep *_photonCoreHGC_*_*',
        'keep *_photonsHGC_*_*',
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*',
        'keep recoCaloClusters_particleFlowEGamma_*_*',
        'keep recoSuperClusters_particleFlowEGamma_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoConversions_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlow_*_*',
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*',
        'keep *_particleFlow_electrons_*',
        'keep *_particleFlow_photons_*',
        'keep *_particleFlow_muons_*',
        'keep recoCaloClusters_pfElectronTranslator_*_*',
        'keep recoPreshowerClusters_pfElectronTranslator_*_*',
        'keep recoSuperClusters_pfElectronTranslator_*_*',
        'keep recoCaloClusters_pfPhotonTranslator_*_*',
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*',
        'keep recoSuperClusters_pfPhotonTranslator_*_*',
        'keep recoPhotons_pfPhotonTranslator_*_*',
        'keep recoPhotonCores_pfPhotonTranslator_*_*',
        'keep recoConversions_pfPhotonTranslator_*_*',
        'keep *_particleFlowPtrs_*_*',
        'keep *_particleFlowTmpPtrs_*_*',
        'keep *_chargedHadronPFTrackIsolation_*_*',
        'keep recoPFRecHits_particleFlowRecHitHGC_Cleaned_*',
        'keep recoSuperClusters_simPFProducer_*_*',
        'keep *_ecalBarrelClusterFastTimer_*_*',
        'keep *_offlineBeamSpot_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_l1L1GtObjectMap_*_*',
        'keep LumiSummary_lumiProducer_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*',
        'drop *_hlt*_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*',
        'keep L1TriggerScalerss_scalersRawToDigi_*_*',
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep BeamSpotOnlines_scalersRawToDigi_*_*',
        'keep DcsStatuss_scalersRawToDigi_*_*',
        'keep CTPPSRecord_onlineMetaDataDigis_*_*',
        'keep DCSRecord_onlineMetaDataDigis_*_*',
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*',
        'keep recoBeamSpot_onlineMetaDataDigis_*_*',
        'keep *_tcdsDigis_*_*',
        'keep *_logErrorHarvester_*_*',
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*',
        'keep TotemFEDInfos_totemRPRawToDigi_*_*',
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*',
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*',
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*',
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*',
        'keep TotemFEDInfos_totemT2Digis_*_*',
        'keep TotemT2DigiedmNewDetSetVector_totemT2Digis_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemT2Digis_*_*',
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*',
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_diamondSampicLocalTracks_*_*',
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*',
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*',
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*',
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*',
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*'
     ) )
)

process.AODSIMEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    eventAutoFlushCompressedSize = cms.untracked.int32(31457280),
    outputCommands = cms.untracked.vstring( (
        'drop *',
        'drop *',
        'keep ClusterSummary_clusterSummaryProducer_*_*',
        'keep *_dt4DSegments_*_*',
        'keep *_dt4DCosmicSegments_*_*',
        'keep *_cscSegments_*_*',
        'keep *_rpcRecHits_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_gemRecHits_*_*',
        'keep *_gemSegments_*_*',
        'keep *_me0RecHits_*_*',
        'keep *_me0Segments_*_*',
        'keep *_castorreco_*_*',
        'keep *_reducedHcalRecHits_*_*',
        'keep HcalUnpackerReport_castorDigis_*_*',
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*',
        'keep HcalUnpackerReport_hcalDigis_*_*',
        'keep *_HGCalRecHit_*_*',
        'keep recoCaloClusters_hgcalMergeLayerClusters_*_*',
        'keep *_hgcalMergeLayerClusters_timeLayerCluster_*',
        'keep *_hgcalMergeLayerClusters_InitialLayerClustersMask_*',
        'keep *_selectDigi_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep recoCaloClusters_hybridSuperClusters_*_*',
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*',
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*',
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterHGCal__*',
        'keep recoCaloClusters_particleFlowSuperClusterHGCal__*',
        'keep recoTracks_GsfGlobalElectronTest_*_*',
        'keep recoGsfTracks_electronGsfTracks_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_conversionStepTracks_*_*',
        'keep recoTracks_beamhaloTracks_*_*',
        'keep recoTracks_ctfPixelLess_*_*',
        'keep *_dedxHarmonic2_*_*',
        'keep *_dedxPixelHarmonic2_*_*',
        'keep *_dedxHitInfo_*_*',
        'keep *_trackExtrapolator_*_*',
        'keep *_generalTracks_MVAValues_*',
        'keep *_generalTracks_MVAVals_*',
        'keep recoCaloJets_ak4CaloJets_*_*',
        'keep *_ak4CaloJets_rho_*',
        'keep *_ak4CaloJets_sigma_*',
        'keep *_ak4PFJetsCHS_*_*',
        'keep floatedmValueMap_puppi_*_*',
        'keep *_ak4PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppiSoftDrop_*_*',
        'keep recoPFJets_ak4PFJets_*_*',
        'keep *_ak4PFJets_rho_*',
        'keep *_ak4PFJets_sigma_*',
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*',
        'keep *_caloTowers_*_*',
        'keep *_CastorTowerReco_*_*',
        'keep *_ak4JetTracksAssociatorAtVertex_*_*',
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*',
        'keep *_ak4JetTracksAssociatorExplicit_*_*',
        'keep *_ak4JetExtender_*_*',
        'keep *_ak4JetID_*_*',
        'keep recoBasicJets_ak5CastorJets_*_*',
        'keep *_ak5CastorJets_rho_*',
        'keep *_ak5CastorJets_sigma_*',
        'keep *_ak5CastorJetID_*_*',
        'keep recoBasicJets_ak7CastorJets_*_*',
        'keep *_ak7CastorJets_rho_*',
        'keep *_ak7CastorJets_sigma_*',
        'keep *_ak7CastorJetID_*_*',
        'keep *_fixedGridRhoAll_*_*',
        'keep *_fixedGridRhoFastjetAll_*_*',
        'keep *_fixedGridRhoFastjetAllTmp_*_*',
        'keep *_fixedGridRhoFastjetCentral_*_*',
        'keep *_fixedGridRhoFastjetAllCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*',
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*',
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*',
        'keep recoCaloMETs_caloMet_*_*',
        'keep recoCaloMETs_caloMetBE_*_*',
        'keep recoCaloMETs_caloMetBEFO_*_*',
        'keep recoCaloMETs_caloMetM_*_*',
        'keep recoPFMETs_pfMet_*_*',
        'keep recoPFMETs_pfChMet_*_*',
        'keep floatedmValueMap_puppiNoLep_*_*',
        'keep recoPFMETs_pfMetPuppi_*_*',
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*',
        'keep HcalNoiseSummary_hcalnoise_*_*',
        'keep recoGlobalHaloData_GlobalHaloData_*_*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep recoMuons_muons_*_*',
        'keep booledmValueMap_muons_*_*',
        'keep doubleedmValueMap_muons_muPFMean*_*',
        'keep doubleedmValueMap_muons_muPFSum*_*',
        'keep *_muons_muonShowerInformation_*',
        'keep recoMuonTimeExtraedmValueMap_muons_*_*',
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*',
        'keep uintedmValueMap_muons_*_*',
        'keep *_particleFlow_muons_*',
        'keep recoMuons_displacedMuons_*_*',
        'keep booledmValueMap_displacedMuons_*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFMean*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFSum*_*',
        'keep recoMuonTimeExtraedmValueMap_displacedMuons_*_*',
        'keep uintedmValueMap_displacedMuons_*_*',
        'keep *_particleFlow_displacedMuons_*',
        'keep recoTracks_standAloneMuons_*_*',
        'keep recoTrackExtras_standAloneMuons_*_*',
        'keep TrackingRecHitsOwned_standAloneMuons_*_*',
        'keep recoTracks_globalMuons_*_*',
        'keep recoTrackExtras_globalMuons_*_*',
        'keep recoTracks_tevMuons_*_*',
        'keep recoTrackExtras_tevMuons_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_displacedTracks_*_*',
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*',
        'keep recoTracks_displacedGlobalMuons_*_*',
        'keep recoTrackExtras_displacedGlobalMuons_*_*',
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*',
        'keep recoTracks_cosmicMuons_*_*',
        'keep recoMuons_muonsFromCosmics_*_*',
        'keep recoTracks_cosmicMuons1Leg_*_*',
        'keep recoMuons_muonsFromCosmics1Leg_*_*',
        'keep recoTracks_refittedStandAloneMuons_*_*',
        'keep recoTrackExtras_refittedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTrackExtras_displacedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*',
        'keep *_muonReducedTrackExtras_*_*',
        'keep *_displacedMuonReducedTrackExtras_*_*',
        'keep *_softPFElectronBJetTags_*_*',
        'keep *_softPFMuonBJetTags_*_*',
        'keep *_pfTrackCountingHighEffBJetTags_*_*',
        'keep *_pfJetProbabilityBJetTags_*_*',
        'keep *_pfJetBProbabilityBJetTags_*_*',
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*',
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*',
        'keep *_pfGhostTrackBJetTags_*_*',
        'keep *_pfCombinedMVAV2BJetTags_*_*',
        'keep *_inclusiveCandidateSecondaryVertices_*_*',
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*',
        'keep *_pfCombinedCvsLJetTags_*_*',
        'keep *_pfCombinedCvsBJetTags_*_*',
        'keep *_pfChargeBJetTags_*_*',
        'keep *_pfDeepCSVJetTags_*_*',
        'keep *_pfDeepCMVAJetTags_*_*',
        'keep *_pixelClusterTagInfos_*_*',
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*',
        'keep recoPFTaus_hpsPFTauProducer_*_*',
        'keep *_hpsPFTauBasicDiscriminators_*_*',
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*',
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*',
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*',
        'keep *_hpsPFTauTransverseImpactParameters_*_*',
        'keep  *_offlinePrimaryVertices__*',
        'keep *_offlinePrimaryVerticesWithBS_*_*',
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*',
        'keep *_nuclearInteractionMaker_*_*',
        'keep *_generalV0Candidates_*_*',
        'keep *_inclusiveSecondaryVertices_*_*',
        'keep *_offlinePrimaryVertices4D__*',
        'keep *_offlinePrimaryVertices4DWithBS__*',
        'keep *_trackTimeValueMapProducer_*_*',
        'keep *_tofPID_*_*',
        'keep recoGsfElectronCores_gsfElectronCores_*_*',
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*',
        'keep recoGsfElectrons_gsfElectrons_*_*',
        'keep recoGsfElectrons_gedGsfElectrons_*_*',
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*',
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*',
        'keep floatedmValueMap_eidRobustLoose_*_*',
        'keep floatedmValueMap_eidRobustTight_*_*',
        'keep floatedmValueMap_eidRobustHighEnergy_*_*',
        'keep floatedmValueMap_eidLoose_*_*',
        'keep floatedmValueMap_eidTight_*_*',
        'keep *_egmGedGsfElectronPFIsolation_*_*',
        'keep recoPhotonCores_gedPhotonCore_*_*',
        'keep recoPhotons_gedPhotons_*_*',
        'keep *_particleBasedIsolation_*_*',
        'keep recoPhotonCores_photonCore_*_*',
        'keep recoPhotons_photons_*_*',
        'keep recoPhotonCores_ootPhotonCore_*_*',
        'keep recoPhotons_ootPhotons_*_*',
        'keep recoConversions_conversions_*_*',
        'drop recoConversions_conversions_uncleanedConversions_*',
        'keep recoConversions_mustacheConversions_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep recoConversions_allConversions_*_*',
        'keep recoConversions_allConversionsOldEG_*_*',
        'keep recoTracks_ckfOutInTracksFromConversions_*_*',
        'keep recoTracks_ckfInOutTracksFromConversions_*_*',
        'keep recoConversions_uncleanedOnlyAllConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep *_PhotonIDProd_*_*',
        'keep *_PhotonIDProdGED_*_*',
        'keep *_hfRecoEcalCandidate_*_*',
        'keep *_hfEMClusters_*_*',
        'keep *_gedGsfElectronCores_*_*',
        'keep *_gedGsfElectrons_*_*',
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*',
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*',
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*',
        'keep *_lowPtGsfToTrackLinks_*_*',
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_rekeyLowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_lowPtGsfElectronID_*_*',
        'keep *_ecalDrivenGsfElectronCores_*_*',
        'keep *_ecalDrivenGsfElectrons_*_*',
        'keep *_ecalDrivenGsfElectronCoresHGC_*_*',
        'keep *_ecalDrivenGsfElectronsHGC_*_*',
        'keep *_photonCoreHGC_*_*',
        'keep *_photonsHGC_*_*',
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*',
        'keep recoCaloClusters_particleFlowEGamma_*_*',
        'keep recoSuperClusters_particleFlowEGamma_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoConversions_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlow_*_*',
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*',
        'keep *_particleFlow_electrons_*',
        'keep *_particleFlow_photons_*',
        'keep *_particleFlow_muons_*',
        'keep recoCaloClusters_pfElectronTranslator_*_*',
        'keep recoPreshowerClusters_pfElectronTranslator_*_*',
        'keep recoSuperClusters_pfElectronTranslator_*_*',
        'keep recoCaloClusters_pfPhotonTranslator_*_*',
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*',
        'keep recoSuperClusters_pfPhotonTranslator_*_*',
        'keep recoPhotons_pfPhotonTranslator_*_*',
        'keep recoPhotonCores_pfPhotonTranslator_*_*',
        'keep recoConversions_pfPhotonTranslator_*_*',
        'keep *_particleFlowPtrs_*_*',
        'keep *_particleFlowTmpPtrs_*_*',
        'keep *_chargedHadronPFTrackIsolation_*_*',
        'keep recoPFRecHits_particleFlowRecHitHGC_Cleaned_*',
        'keep recoSuperClusters_simPFProducer_*_*',
        'keep *_ecalBarrelClusterFastTimer_*_*',
        'keep *_offlineBeamSpot_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_l1L1GtObjectMap_*_*',
        'keep LumiSummary_lumiProducer_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*',
        'drop *_hlt*_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*',
        'keep L1TriggerScalerss_scalersRawToDigi_*_*',
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep BeamSpotOnlines_scalersRawToDigi_*_*',
        'keep DcsStatuss_scalersRawToDigi_*_*',
        'keep CTPPSRecord_onlineMetaDataDigis_*_*',
        'keep DCSRecord_onlineMetaDataDigis_*_*',
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*',
        'keep recoBeamSpot_onlineMetaDataDigis_*_*',
        'keep *_tcdsDigis_*_*',
        'keep *_logErrorHarvester_*_*',
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*',
        'keep TotemFEDInfos_totemRPRawToDigi_*_*',
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*',
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*',
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*',
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*',
        'keep TotemFEDInfos_totemT2Digis_*_*',
        'keep TotemT2DigiedmNewDetSetVector_totemT2Digis_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemT2Digis_*_*',
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*',
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_diamondSampicLocalTracks_*_*',
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*',
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*',
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*',
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*',
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackMCMatch_*_*',
        'keep *_muonSimClassifier_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*',
        'keep recoGenMETs_*_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*',
        'keep *edmValueMap_trackExtenderWithMTD_*_*',
        'keep *_mtdTrackQualityMVA_*_*'
     ) ),
    overrideInputFileSplitLevels = cms.untracked.bool(True)
)

process.BeamSpotAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_offlineBeamSpot_*_*')
)

process.BeamSpotFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_offlineBeamSpot_*_*')
)

process.BeamSpotRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_offlineBeamSpot_*_*')
)

process.BtiParametersBlock = cms.PSet(
    BtiParameters = cms.PSet(
        AC1 = cms.int32(0),
        AC2 = cms.int32(3),
        ACH = cms.int32(1),
        ACL = cms.int32(2),
        CH = cms.int32(41),
        CL = cms.int32(22),
        DEAD = cms.int32(31),
        Debug = cms.untracked.int32(0),
        KACCTHETA = cms.int32(1),
        KMAX = cms.int32(64),
        LH = cms.int32(21),
        LL = cms.int32(2),
        LTS = cms.int32(3),
        PTMS0 = cms.int32(0),
        PTMS1 = cms.int32(0),
        PTMS10 = cms.int32(1),
        PTMS11 = cms.int32(1),
        PTMS12 = cms.int32(1),
        PTMS13 = cms.int32(1),
        PTMS14 = cms.int32(1),
        PTMS15 = cms.int32(1),
        PTMS16 = cms.int32(1),
        PTMS17 = cms.int32(1),
        PTMS18 = cms.int32(1),
        PTMS19 = cms.int32(1),
        PTMS2 = cms.int32(0),
        PTMS20 = cms.int32(1),
        PTMS21 = cms.int32(1),
        PTMS22 = cms.int32(1),
        PTMS23 = cms.int32(1),
        PTMS24 = cms.int32(1),
        PTMS25 = cms.int32(1),
        PTMS26 = cms.int32(1),
        PTMS27 = cms.int32(1),
        PTMS28 = cms.int32(1),
        PTMS29 = cms.int32(1),
        PTMS3 = cms.int32(0),
        PTMS30 = cms.int32(0),
        PTMS31 = cms.int32(0),
        PTMS4 = cms.int32(1),
        PTMS5 = cms.int32(1),
        PTMS6 = cms.int32(1),
        PTMS7 = cms.int32(1),
        PTMS8 = cms.int32(1),
        PTMS9 = cms.int32(1),
        RE43 = cms.int32(2),
        RH = cms.int32(61),
        RL = cms.int32(42),
        RON = cms.bool(True),
        SET = cms.int32(7),
        ST43 = cms.int32(42),
        WEN0 = cms.int32(1),
        WEN1 = cms.int32(1),
        WEN2 = cms.int32(1),
        WEN3 = cms.int32(1),
        WEN4 = cms.int32(1),
        WEN5 = cms.int32(1),
        WEN6 = cms.int32(1),
        WEN7 = cms.int32(1),
        WEN8 = cms.int32(1),
        XON = cms.bool(False)
    )
)

process.CSCSegAlgoDF = cms.PSet(
    algo_name = cms.string('CSCSegAlgoDF'),
    algo_psets = cms.VPSet(
        cms.PSet(
            CSCSegmentDebug = cms.untracked.bool(False),
            Pruning = cms.untracked.bool(False),
            chi2Max = cms.double(5000.0),
            dPhiFineMax = cms.double(0.025),
            dRPhiFineMax = cms.double(8.0),
            dXclusBoxMax = cms.double(8.0),
            dYclusBoxMax = cms.double(8.0),
            maxDPhi = cms.double(999.0),
            maxDTheta = cms.double(999.0),
            maxRatioResidualPrune = cms.double(3.0),
            minHitsForPreClustering = cms.int32(10),
            minHitsPerSegment = cms.int32(3),
            minLayersApart = cms.int32(2),
            nHitsPerClusterIsShower = cms.int32(20),
            preClustering = cms.untracked.bool(False),
            tanPhiMax = cms.double(0.5),
            tanThetaMax = cms.double(1.2)
        ),
        cms.PSet(
            CSCSegmentDebug = cms.untracked.bool(False),
            Pruning = cms.untracked.bool(False),
            chi2Max = cms.double(5000.0),
            dPhiFineMax = cms.double(0.025),
            dRPhiFineMax = cms.double(12.0),
            dXclusBoxMax = cms.double(8.0),
            dYclusBoxMax = cms.double(12.0),
            maxDPhi = cms.double(999.0),
            maxDTheta = cms.double(999.0),
            maxRatioResidualPrune = cms.double(3.0),
            minHitsForPreClustering = cms.int32(10),
            minHitsPerSegment = cms.int32(3),
            minLayersApart = cms.int32(2),
            nHitsPerClusterIsShower = cms.int32(20),
            preClustering = cms.untracked.bool(False),
            tanPhiMax = cms.double(0.8),
            tanThetaMax = cms.double(2.0)
        ),
        cms.PSet(
            CSCSegmentDebug = cms.untracked.bool(False),
            Pruning = cms.untracked.bool(False),
            chi2Max = cms.double(5000.0),
            dPhiFineMax = cms.double(0.025),
            dRPhiFineMax = cms.double(8.0),
            dXclusBoxMax = cms.double(8.0),
            dYclusBoxMax = cms.double(8.0),
            maxDPhi = cms.double(999.0),
            maxDTheta = cms.double(999.0),
            maxRatioResidualPrune = cms.double(3.0),
            minHitsForPreClustering = cms.int32(30),
            minHitsPerSegment = cms.int32(3),
            minLayersApart = cms.int32(2),
            nHitsPerClusterIsShower = cms.int32(20),
            preClustering = cms.untracked.bool(False),
            tanPhiMax = cms.double(0.5),
            tanThetaMax = cms.double(1.2)
        )
    ),
    chamber_types = cms.vstring(
        'ME1/a',
        'ME1/b',
        'ME1/2',
        'ME1/3',
        'ME2/1',
        'ME2/2',
        'ME3/1',
        'ME3/2',
        'ME4/1',
        'ME4/2'
    ),
    parameters_per_chamber_type = cms.vint32(
        3, 1, 2, 2, 1,
        2, 1, 2, 1, 2
    )
)

process.CSCSegAlgoRU = cms.PSet(
    algo_name = cms.string('CSCSegAlgoRU'),
    algo_psets = cms.VPSet(
        cms.PSet(
            chi2Max = cms.double(100.0),
            chi2Norm_2D_ = cms.double(35),
            chi2_str = cms.double(50.0),
            dPhiIntMax = cms.double(0.005),
            dPhiMax = cms.double(0.006),
            dRIntMax = cms.double(2.0),
            dRMax = cms.double(1.5),
            doCollisions = cms.bool(True),
            enlarge = cms.bool(False),
            minLayersApart = cms.int32(1),
            wideSeg = cms.double(3.0)
        ),
        cms.PSet(
            chi2Max = cms.double(100.0),
            chi2Norm_2D_ = cms.double(35),
            chi2_str = cms.double(50.0),
            dPhiIntMax = cms.double(0.004),
            dPhiMax = cms.double(0.005),
            dRIntMax = cms.double(2.0),
            dRMax = cms.double(1.5),
            doCollisions = cms.bool(True),
            enlarge = cms.bool(False),
            minLayersApart = cms.int32(1),
            wideSeg = cms.double(3.0)
        ),
        cms.PSet(
            chi2Max = cms.double(100.0),
            chi2Norm_2D_ = cms.double(35),
            chi2_str = cms.double(50.0),
            dPhiIntMax = cms.double(0.003),
            dPhiMax = cms.double(0.004),
            dRIntMax = cms.double(2.0),
            dRMax = cms.double(1.5),
            doCollisions = cms.bool(True),
            enlarge = cms.bool(False),
            minLayersApart = cms.int32(1),
            wideSeg = cms.double(3.0)
        ),
        cms.PSet(
            chi2Max = cms.double(60.0),
            chi2Norm_2D_ = cms.double(20),
            chi2_str = cms.double(30.0),
            dPhiIntMax = cms.double(0.002),
            dPhiMax = cms.double(0.003),
            dRIntMax = cms.double(2.0),
            dRMax = cms.double(1.5),
            doCollisions = cms.bool(True),
            enlarge = cms.bool(False),
            minLayersApart = cms.int32(1),
            wideSeg = cms.double(3.0)
        ),
        cms.PSet(
            chi2Max = cms.double(180.0),
            chi2Norm_2D_ = cms.double(60),
            chi2_str = cms.double(80.0),
            dPhiIntMax = cms.double(0.005),
            dPhiMax = cms.double(0.007),
            dRIntMax = cms.double(2.0),
            dRMax = cms.double(1.5),
            doCollisions = cms.bool(True),
            enlarge = cms.bool(False),
            minLayersApart = cms.int32(1),
            wideSeg = cms.double(3.0)
        ),
        cms.PSet(
            chi2Max = cms.double(100.0),
            chi2Norm_2D_ = cms.double(35),
            chi2_str = cms.double(50.0),
            dPhiIntMax = cms.double(0.004),
            dPhiMax = cms.double(0.006),
            dRIntMax = cms.double(2.0),
            dRMax = cms.double(1.5),
            doCollisions = cms.bool(True),
            enlarge = cms.bool(False),
            minLayersApart = cms.int32(1),
            wideSeg = cms.double(3.0)
        )
    ),
    chamber_types = cms.vstring(
        'ME1/a',
        'ME1/b',
        'ME1/2',
        'ME1/3',
        'ME2/1',
        'ME2/2',
        'ME3/1',
        'ME3/2',
        'ME4/1',
        'ME4/2'
    ),
    parameters_per_chamber_type = cms.vint32(
        1, 2, 3, 4, 5,
        6, 5, 6, 5, 6
    )
)

process.CSCSegAlgoSK = cms.PSet(
    algo_name = cms.string('CSCSegAlgoSK'),
    algo_psets = cms.VPSet(
        cms.PSet(
            chi2Max = cms.double(99999.0),
            dPhiFineMax = cms.double(0.025),
            dPhiMax = cms.double(0.003),
            dRPhiFineMax = cms.double(8.0),
            dRPhiMax = cms.double(8.0),
            minLayersApart = cms.int32(2),
            verboseInfo = cms.untracked.bool(True),
            wideSeg = cms.double(3.0)
        ),
        cms.PSet(
            chi2Max = cms.double(99999.0),
            dPhiFineMax = cms.double(0.025),
            dPhiMax = cms.double(0.025),
            dRPhiFineMax = cms.double(3.0),
            dRPhiMax = cms.double(8.0),
            minLayersApart = cms.int32(2),
            verboseInfo = cms.untracked.bool(True),
            wideSeg = cms.double(3.0)
        )
    ),
    chamber_types = cms.vstring(
        'ME1/a',
        'ME1/b',
        'ME1/2',
        'ME1/3',
        'ME2/1',
        'ME2/2',
        'ME3/1',
        'ME3/2',
        'ME4/1',
        'ME4/2'
    ),
    parameters_per_chamber_type = cms.vint32(
        2, 1, 1, 1, 1,
        1, 1, 1, 1, 1
    )
)

process.CSCSegAlgoST = cms.PSet(
    algo_name = cms.string('CSCSegAlgoST'),
    algo_psets = cms.VPSet(
        cms.PSet(
            BPMinImprovement = cms.double(10000.0),
            BrutePruning = cms.bool(True),
            CSCDebug = cms.untracked.bool(False),
            CorrectTheErrors = cms.bool(True),
            Covariance = cms.double(0.0),
            ForceCovariance = cms.bool(False),
            ForceCovarianceAll = cms.bool(False),
            NormChi2Cut2D = cms.double(20.0),
            NormChi2Cut3D = cms.double(10.0),
            Pruning = cms.bool(True),
            SeedBig = cms.double(0.0015),
            SeedSmall = cms.double(0.0002),
            curvePenalty = cms.double(2.0),
            curvePenaltyThreshold = cms.double(0.85),
            dPhiFineMax = cms.double(0.025),
            dRPhiFineMax = cms.double(8.0),
            dXclusBoxMax = cms.double(4.0),
            dYclusBoxMax = cms.double(8.0),
            hitDropLimit4Hits = cms.double(0.6),
            hitDropLimit5Hits = cms.double(0.8),
            hitDropLimit6Hits = cms.double(0.3333),
            maxDPhi = cms.double(999.0),
            maxDTheta = cms.double(999.0),
            maxRatioResidualPrune = cms.double(3),
            maxRecHitsInCluster = cms.int32(20),
            minHitsPerSegment = cms.int32(3),
            onlyBestSegment = cms.bool(False),
            preClustering = cms.bool(True),
            preClusteringUseChaining = cms.bool(True),
            prePrun = cms.bool(True),
            prePrunLimit = cms.double(3.17),
            tanPhiMax = cms.double(0.5),
            tanThetaMax = cms.double(1.2),
            useShowering = cms.bool(False),
            yweightPenalty = cms.double(1.5),
            yweightPenaltyThreshold = cms.double(1.0)
        ),
        cms.PSet(
            BPMinImprovement = cms.double(10000.0),
            BrutePruning = cms.bool(True),
            CSCDebug = cms.untracked.bool(False),
            CorrectTheErrors = cms.bool(True),
            Covariance = cms.double(0.0),
            ForceCovariance = cms.bool(False),
            ForceCovarianceAll = cms.bool(False),
            NormChi2Cut2D = cms.double(20.0),
            NormChi2Cut3D = cms.double(10.0),
            Pruning = cms.bool(True),
            SeedBig = cms.double(0.0015),
            SeedSmall = cms.double(0.0002),
            curvePenalty = cms.double(2.0),
            curvePenaltyThreshold = cms.double(0.85),
            dPhiFineMax = cms.double(0.025),
            dRPhiFineMax = cms.double(8.0),
            dXclusBoxMax = cms.double(4.0),
            dYclusBoxMax = cms.double(8.0),
            hitDropLimit4Hits = cms.double(0.6),
            hitDropLimit5Hits = cms.double(0.8),
            hitDropLimit6Hits = cms.double(0.3333),
            maxDPhi = cms.double(999.0),
            maxDTheta = cms.double(999.0),
            maxRatioResidualPrune = cms.double(3),
            maxRecHitsInCluster = cms.int32(24),
            minHitsPerSegment = cms.int32(3),
            onlyBestSegment = cms.bool(False),
            preClustering = cms.bool(True),
            preClusteringUseChaining = cms.bool(True),
            prePrun = cms.bool(True),
            prePrunLimit = cms.double(3.17),
            tanPhiMax = cms.double(0.5),
            tanThetaMax = cms.double(1.2),
            useShowering = cms.bool(False),
            yweightPenalty = cms.double(1.5),
            yweightPenaltyThreshold = cms.double(1.0)
        )
    ),
    chamber_types = cms.vstring(
        'ME1/a',
        'ME1/b',
        'ME1/2',
        'ME1/3',
        'ME2/1',
        'ME2/2',
        'ME3/1',
        'ME3/2',
        'ME4/1',
        'ME4/2'
    ),
    parameters_per_chamber_type = cms.vint32(
        2, 1, 1, 1, 1,
        1, 1, 1, 1, 1
    )
)

process.CSCSegAlgoTC = cms.PSet(
    algo_name = cms.string('CSCSegAlgoTC'),
    algo_psets = cms.VPSet(
        cms.PSet(
            SegmentSorting = cms.int32(1),
            chi2Max = cms.double(6000.0),
            chi2ndfProbMin = cms.double(0.0001),
            dPhiFineMax = cms.double(0.02),
            dPhiMax = cms.double(0.003),
            dRPhiFineMax = cms.double(6.0),
            dRPhiMax = cms.double(1.2),
            minLayersApart = cms.int32(2),
            verboseInfo = cms.untracked.bool(True)
        ),
        cms.PSet(
            SegmentSorting = cms.int32(1),
            chi2Max = cms.double(6000.0),
            chi2ndfProbMin = cms.double(0.0001),
            dPhiFineMax = cms.double(0.013),
            dPhiMax = cms.double(0.00198),
            dRPhiFineMax = cms.double(3.0),
            dRPhiMax = cms.double(0.6),
            minLayersApart = cms.int32(2),
            verboseInfo = cms.untracked.bool(True)
        )
    ),
    chamber_types = cms.vstring(
        'ME1/a',
        'ME1/b',
        'ME1/2',
        'ME1/3',
        'ME2/1',
        'ME2/2',
        'ME3/1',
        'ME3/2',
        'ME4/1',
        'ME4/2'
    ),
    parameters_per_chamber_type = cms.vint32(
        2, 1, 1, 1, 1,
        1, 1, 1, 1, 1
    )
)

process.CkfBaseTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minimumNumberOfHits = cms.int32(5),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.CkfTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('CkfTrajectoryBuilder'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    estimator = cms.string('Chi2'),
    intermediateCleaning = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    updator = cms.string('KFUpdator')
)

process.ClusterShapeTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('ClusterShapeTrajectoryFilter'),
    cacheSrc = cms.InputTag("hltSiPixelClusterShapeCache")
)

process.CommonEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_logErrorHarvester_*_*')
)

process.CondDB = cms.PSet(
    DBParameters = cms.PSet(
        authenticationPath = cms.untracked.string(''),
        authenticationSystem = cms.untracked.int32(0),
        connectionTimeout = cms.untracked.int32(0),
        messageLevel = cms.untracked.int32(0),
        security = cms.untracked.string('')
    ),
    connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS')
)

process.DATAMIXEREventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *',
        'keep CSCDetIdCSCALCTDigiMuonDigiCollection_muonCSCDigis_MuonCSCALCTDigi_*',
        'keep CSCDetIdCSCCLCTDigiMuonDigiCollection_muonCSCDigis_MuonCSCCLCTDigi_*',
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_muonCSCDigis_MuonCSCComparatorDigi_*',
        'keep CSCDetIdCSCCorrelatedLCTDigiMuonDigiCollection_csctfDigis_*_*',
        'keep CSCDetIdCSCCorrelatedLCTDigiMuonDigiCollection_muonCSCDigis_MuonCSCCorrelatedLCTDigi_*',
        'keep CSCDetIdCSCRPCDigiMuonDigiCollection_muonCSCDigis_MuonCSCRPCDigi_*',
        'keep CSCDetIdCSCStripDigiMuonDigiCollection_muonCSCDigis_MuonCSCStripDigi_*',
        'keep CSCDetIdCSCWireDigiMuonDigiCollection_muonCSCDigis_MuonCSCWireDigi_*',
        'keep DTLayerIdDTDigiMuonDigiCollection_muonDTDigis_*_*',
        'keep PixelDigiedmDetSetVector_siPixelDigis_*_*',
        'keep SiStripDigiedmDetSetVector_siStripDigis_*_*',
        'keep RPCDetIdRPCDigiMuonDigiCollection_muonRPCDigis_*_*',
        'keep HBHEDataFramesSorted_hcalDigis_*_*',
        'keep HFDataFramesSorted_hcalDigis_*_*',
        'keep HODataFramesSorted_hcalDigis_*_*',
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_*_*',
        'keep QIE11DataFrameHcalDataFrameContainer_hcalDigis_*_*',
        'keep ZDCDataFramesSorted_hcalDigis_*_*',
        'keep CastorDataFramesSorted_castorDigis_*_*',
        'keep EBDigiCollection_ecalDigis_*_*',
        'keep EEDigiCollection_ecalDigis_*_*',
        'keep ESDigiCollection_ecalPreshowerDigis_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.DQMEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *',
        'keep *_MEtoEDMConverter_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.DTLinearDriftFromDBAlgo = cms.PSet(
    recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
    recAlgoConfig = cms.PSet(
        debug = cms.untracked.bool(False),
        doVdriftCorr = cms.bool(True),
        maxTime = cms.double(420.0),
        minTime = cms.double(-3.0),
        stepTwoFromDigi = cms.bool(False),
        tTrigMode = cms.string('DTTTrigSyncFromDB'),
        tTrigModeConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doT0Correction = cms.bool(True),
            doTOFCorrection = cms.bool(True),
            doWirePropCorrection = cms.bool(True),
            tTrigLabel = cms.string(''),
            tofCorrType = cms.int32(0),
            vPropWire = cms.double(24.4),
            wirePropCorrType = cms.int32(0)
        ),
        useUncertDB = cms.bool(True)
    )
)

process.DTTPGMapBlock = cms.PSet(
    DTTPGMap = cms.untracked.PSet(
    **dict(
        [
            ("wh0st1se1" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se10" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se11" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se12" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se2" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se3" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se4" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se5" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se6" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se7" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se8" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se9" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st2se1" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se10" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se11" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se12" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se2" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se3" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se4" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se5" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se6" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se7" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se8" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se9" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st3se1" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se10" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se11" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se12" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se2" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se3" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se4" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se5" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se6" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se7" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se8" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se9" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st4se1" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se10" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh0st4se11" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("wh0st4se12" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh0st4se13" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh0st4se14" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh0st4se2" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se3" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se4" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh0st4se5" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se6" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se7" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se8" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh0st4se9" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("wh1st1se1" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se10" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se11" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se12" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se2" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se3" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se4" , cms.untracked.vint32(50, 48, 50, 13) ),
            ("wh1st1se5" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se6" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se7" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se8" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se9" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st2se1" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se10" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se11" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se12" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se2" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se3" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se4" , cms.untracked.vint32(60, 48, 60, 15) ),
            ("wh1st2se5" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se6" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se7" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se8" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se9" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st3se1" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se10" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se11" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se12" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se2" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se3" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se4" , cms.untracked.vint32(72, 48, 72, 18) ),
            ("wh1st3se5" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se6" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se7" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se8" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se9" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st4se1" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se10" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh1st4se11" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("wh1st4se12" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh1st4se13" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh1st4se14" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh1st4se2" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se3" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se4" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh1st4se5" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se6" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se7" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se8" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh1st4se9" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("wh2st1se1" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se10" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se11" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se12" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se2" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se3" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se4" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se5" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se6" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se7" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se8" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se9" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st2se1" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se10" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se11" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se12" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se2" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se3" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se4" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se5" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se6" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se7" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se8" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se9" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st3se1" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se10" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se11" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se12" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se2" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se3" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se4" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se5" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se6" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se7" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se8" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se9" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st4se1" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se10" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh2st4se11" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("wh2st4se12" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh2st4se13" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh2st4se14" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh2st4se2" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se3" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se4" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh2st4se5" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se6" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se7" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se8" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh2st4se9" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("whm1st1se1" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se10" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se11" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se12" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se2" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se3" , cms.untracked.vint32(50, 48, 50, 13) ),
            ("whm1st1se4" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se5" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se6" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se7" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se8" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se9" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st2se1" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se10" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se11" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se12" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se2" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se3" , cms.untracked.vint32(60, 48, 60, 15) ),
            ("whm1st2se4" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se5" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se6" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se7" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se8" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se9" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st3se1" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se10" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se11" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se12" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se2" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se3" , cms.untracked.vint32(72, 48, 72, 18) ),
            ("whm1st3se4" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se5" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se6" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se7" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se8" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se9" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st4se1" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se10" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("whm1st4se11" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("whm1st4se12" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("whm1st4se13" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("whm1st4se14" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("whm1st4se2" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se3" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se4" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("whm1st4se5" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se6" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se7" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se8" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("whm1st4se9" , cms.untracked.vint32(48, 0, 48, 12) ),
        ] +
        [
            ("whm2st1se1" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se10" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se11" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se12" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se2" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se3" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se4" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se5" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se6" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se7" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se8" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se9" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st2se1" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se10" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se11" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se12" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se2" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se3" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se4" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se5" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se6" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se7" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se8" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se9" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st3se1" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se10" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se11" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se12" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se2" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se3" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se4" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se5" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se6" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se7" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se8" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se9" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st4se1" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se10" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("whm2st4se11" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("whm2st4se12" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("whm2st4se13" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("whm2st4se14" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("whm2st4se2" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se3" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se4" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("whm2st4se5" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se6" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se7" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se8" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("whm2st4se9" , cms.untracked.vint32(48, 0, 48, 12) ),
            ]
        )
    )
)

process.DTTPGParametersBlock = cms.PSet(
    DTTPGParameters = cms.PSet(
        Debug = cms.untracked.bool(False),
        SectCollParameters = cms.PSet(
            Debug = cms.untracked.bool(False),
            SCCSP1 = cms.int32(0),
            SCCSP2 = cms.int32(0),
            SCCSP3 = cms.int32(0),
            SCCSP4 = cms.int32(0),
            SCCSP5 = cms.int32(0),
            SCECF1 = cms.bool(False),
            SCECF2 = cms.bool(False),
            SCECF3 = cms.bool(False),
            SCECF4 = cms.bool(False)
        ),
        TUParameters = cms.PSet(
            BtiParameters = cms.PSet(
                AC1 = cms.int32(0),
                AC2 = cms.int32(3),
                ACH = cms.int32(1),
                ACL = cms.int32(2),
                CH = cms.int32(41),
                CL = cms.int32(22),
                DEAD = cms.int32(31),
                Debug = cms.untracked.int32(0),
                KACCTHETA = cms.int32(1),
                KMAX = cms.int32(64),
                LH = cms.int32(21),
                LL = cms.int32(2),
                LTS = cms.int32(3),
                PTMS0 = cms.int32(0),
                PTMS1 = cms.int32(0),
                PTMS10 = cms.int32(1),
                PTMS11 = cms.int32(1),
                PTMS12 = cms.int32(1),
                PTMS13 = cms.int32(1),
                PTMS14 = cms.int32(1),
                PTMS15 = cms.int32(1),
                PTMS16 = cms.int32(1),
                PTMS17 = cms.int32(1),
                PTMS18 = cms.int32(1),
                PTMS19 = cms.int32(1),
                PTMS2 = cms.int32(0),
                PTMS20 = cms.int32(1),
                PTMS21 = cms.int32(1),
                PTMS22 = cms.int32(1),
                PTMS23 = cms.int32(1),
                PTMS24 = cms.int32(1),
                PTMS25 = cms.int32(1),
                PTMS26 = cms.int32(1),
                PTMS27 = cms.int32(1),
                PTMS28 = cms.int32(1),
                PTMS29 = cms.int32(1),
                PTMS3 = cms.int32(0),
                PTMS30 = cms.int32(0),
                PTMS31 = cms.int32(0),
                PTMS4 = cms.int32(1),
                PTMS5 = cms.int32(1),
                PTMS6 = cms.int32(1),
                PTMS7 = cms.int32(1),
                PTMS8 = cms.int32(1),
                PTMS9 = cms.int32(1),
                RE43 = cms.int32(2),
                RH = cms.int32(61),
                RL = cms.int32(42),
                RON = cms.bool(True),
                SET = cms.int32(7),
                ST43 = cms.int32(42),
                WEN0 = cms.int32(1),
                WEN1 = cms.int32(1),
                WEN2 = cms.int32(1),
                WEN3 = cms.int32(1),
                WEN4 = cms.int32(1),
                WEN5 = cms.int32(1),
                WEN6 = cms.int32(1),
                WEN7 = cms.int32(1),
                WEN8 = cms.int32(1),
                XON = cms.bool(False)
            ),
            Debug = cms.untracked.bool(False),
            LutParameters = cms.PSet(
                BTIC = cms.untracked.int32(0),
                D = cms.untracked.double(0),
                Debug = cms.untracked.bool(False),
                WHEEL = cms.untracked.int32(-1),
                XCN = cms.untracked.double(0)
            ),
            TSPhiParameters = cms.PSet(
                Debug = cms.untracked.bool(False),
                TSMCCE1 = cms.bool(True),
                TSMCCE2 = cms.bool(False),
                TSMCCEC = cms.bool(False),
                TSMCGS1 = cms.bool(True),
                TSMCGS2 = cms.bool(True),
                TSMGS1 = cms.int32(1),
                TSMGS2 = cms.int32(1),
                TSMHSP = cms.int32(1),
                TSMHTE1 = cms.bool(True),
                TSMHTE2 = cms.bool(False),
                TSMHTEC = cms.bool(False),
                TSMMSK1 = cms.int32(312),
                TSMMSK2 = cms.int32(312),
                TSMNOE1 = cms.bool(True),
                TSMNOE2 = cms.bool(False),
                TSMNOEC = cms.bool(False),
                TSMWORD = cms.int32(255),
                TSSCCE1 = cms.bool(True),
                TSSCCE2 = cms.bool(False),
                TSSCCEC = cms.bool(False),
                TSSCGS1 = cms.bool(True),
                TSSCGS2 = cms.bool(True),
                TSSGS1 = cms.int32(1),
                TSSGS2 = cms.int32(1),
                TSSHTE1 = cms.bool(True),
                TSSHTE2 = cms.bool(False),
                TSSHTEC = cms.bool(False),
                TSSMSK1 = cms.int32(312),
                TSSMSK2 = cms.int32(312),
                TSSNOE1 = cms.bool(True),
                TSSNOE2 = cms.bool(False),
                TSSNOEC = cms.bool(False),
                TSTREN0 = cms.bool(True),
                TSTREN1 = cms.bool(True),
                TSTREN10 = cms.bool(True),
                TSTREN11 = cms.bool(True),
                TSTREN12 = cms.bool(True),
                TSTREN13 = cms.bool(True),
                TSTREN14 = cms.bool(True),
                TSTREN15 = cms.bool(True),
                TSTREN16 = cms.bool(True),
                TSTREN17 = cms.bool(True),
                TSTREN18 = cms.bool(True),
                TSTREN19 = cms.bool(True),
                TSTREN2 = cms.bool(True),
                TSTREN20 = cms.bool(True),
                TSTREN21 = cms.bool(True),
                TSTREN22 = cms.bool(True),
                TSTREN23 = cms.bool(True),
                TSTREN3 = cms.bool(True),
                TSTREN4 = cms.bool(True),
                TSTREN5 = cms.bool(True),
                TSTREN6 = cms.bool(True),
                TSTREN7 = cms.bool(True),
                TSTREN8 = cms.bool(True),
                TSTREN9 = cms.bool(True)
            ),
            TSThetaParameters = cms.PSet(
                Debug = cms.untracked.bool(False)
            ),
            TracoParameters = cms.PSet(
                BTIC = cms.int32(32),
                DD = cms.int32(18),
                Debug = cms.untracked.int32(0),
                FHISM = cms.int32(0),
                FHTMSK = cms.int32(0),
                FHTPRF = cms.int32(1),
                FLTMSK = cms.int32(1),
                FPRGCOMP = cms.int32(2),
                FSLMSK = cms.int32(0),
                IBTIOFF = cms.int32(0),
                KPRGCOM = cms.int32(255),
                KRAD = cms.int32(0),
                LTF = cms.int32(0),
                LTS = cms.int32(0),
                LVALIDIFH = cms.int32(0),
                REUSEI = cms.int32(1),
                REUSEO = cms.int32(1),
                SHISM = cms.int32(0),
                SHTMSK = cms.int32(0),
                SHTPRF = cms.int32(1),
                SLTMSK = cms.int32(1),
                SPRGCOMP = cms.int32(2),
                SSLMSK = cms.int32(0),
                TRGENB0 = cms.int32(1),
                TRGENB1 = cms.int32(1),
                TRGENB10 = cms.int32(1),
                TRGENB11 = cms.int32(1),
                TRGENB12 = cms.int32(1),
                TRGENB13 = cms.int32(1),
                TRGENB14 = cms.int32(1),
                TRGENB15 = cms.int32(1),
                TRGENB2 = cms.int32(1),
                TRGENB3 = cms.int32(1),
                TRGENB4 = cms.int32(1),
                TRGENB5 = cms.int32(1),
                TRGENB6 = cms.int32(1),
                TRGENB7 = cms.int32(1),
                TRGENB8 = cms.int32(1),
                TRGENB9 = cms.int32(1)
            )
        )
    )
)

process.DigiToRawFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep FEDRawDataCollection_source_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*'
    )
)

process.EvtScalersAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*',
        'keep L1TriggerScalerss_scalersRawToDigi_*_*',
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep BeamSpotOnlines_scalersRawToDigi_*_*',
        'keep DcsStatuss_scalersRawToDigi_*_*'
    )
)

process.EvtScalersRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep DcsStatuss_hltScalersRawToDigi_*_*',
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*',
        'keep L1TriggerScalerss_scalersRawToDigi_*_*',
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep BeamSpotOnlines_scalersRawToDigi_*_*',
        'keep DcsStatuss_scalersRawToDigi_*_*'
    )
)

process.FASTPUEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *',
        'keep *_fastSimProducer_*_*',
        'keep *_MuonSimHits_*_*',
        'drop *_fastSimProducer_VertexTypes_*',
        'keep *_generalTracksBeforeMixing_*_*',
        'drop *_generalTracksBeforeMixing_MVAValues_*',
        'drop *_generalTracksBeforeMixing_QualityMasks_*',
        'keep edmHepMCProduct_generatorSmeared_*_*'
    )
)

process.FEVTDEBUGEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring( (
        'drop *',
        'drop *',
        'drop *',
        'drop *',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep DetIds_siStripDigis_*_*',
        'keep DetIdedmEDCollection_siPixelDigis_*_*',
        'keep PixelFEDChanneledmNewDetSetVector_siPixelDigis_*_*',
        'keep *_siPixelClusters_*_*',
        'keep *_siStripClusters_*_*',
        'keep ClusterSummary_clusterSummaryProducer_*_*',
        'keep *_siPhase2Clusters_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_dt1DCosmicRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_dt4DSegments_*_*',
        'keep *_dt4DCosmicSegments_*_*',
        'keep *_cscSegments_*_*',
        'keep *_rpcRecHits_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_gemRecHits_*_*',
        'keep *_gemSegments_*_*',
        'keep *_me0RecHits_*_*',
        'keep *_me0Segments_*_*',
        'keep *_hbhereco_*_*',
        'keep *_hbheprereco_*_*',
        'keep *_hfprereco_*_*',
        'keep *_hfreco_*_*',
        'keep *_horeco_*_*',
        'keep HBHERecHitsSorted_hbherecoMB_*_*',
        'keep HORecHitsSorted_horecoMB_*_*',
        'keep HFRecHitsSorted_hfrecoMB_*_*',
        'keep ZDCDataFramesSorted_hcalDigis_*_*',
        'keep ZDCDataFramesSorted_castorDigis_*_*',
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*',
        'keep ZDCRecHitsSorted_zdcreco_*_*',
        'keep ZDCRecHitsSorted_zdcrecoRun3_*_*',
        'keep *_castorreco_*_*',
        'keep *_reducedHcalRecHits_*_*',
        'keep HcalUnpackerReport_castorDigis_*_*',
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*',
        'keep HcalUnpackerReport_hcalDigis_*_*',
        'keep *_HGCalRecHit_*_*',
        'keep recoCaloClusters_hgcalMergeLayerClusters_*_*',
        'keep *_hgcalMergeLayerClusters_timeLayerCluster_*',
        'keep *_hgcalMergeLayerClusters_InitialLayerClustersMask_*',
        'keep *_ecalPreshowerRecHit_*_*',
        'keep *_ecalRecHit_*_*',
        'keep *_ecalCompactTrigPrim_*_*',
        'keep *_ecalTPSkim_*_*',
        'keep EBSrFlagsSorted_ecalDigis__*',
        'keep EESrFlagsSorted_ecalDigis__*',
        'keep *_mix_EBTimeDigi_*',
        'keep *_mix_EETimeDigi_*',
        'keep *_ecalDetailedTimeRecHit_*_*',
        'keep *_hgcalMultiClusters_*_*',
        'keep *_iterHGCalMultiClusters_*_*',
        'keep *_hybridSuperClusters_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep *_multi5x5SuperClusters_*_*',
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep *_particleFlowSuperClusterECAL_*_*',
        'keep *_particleFlowSuperClusterOOTECAL_*_*',
        'drop recoClusterShapes_*_*_*',
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*',
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*',
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*',
        'keep *_selectDigi_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep recoCaloClusters_hybridSuperClusters_*_*',
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*',
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*',
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterHGCal__*',
        'keep recoCaloClusters_particleFlowSuperClusterHGCal__*',
        'keep *_particleFlowSuperClusterHGCal_*_*',
        'keep *_CkfElectronCandidates_*_*',
        'keep *_GsfGlobalElectronTest_*_*',
        'keep *_electronMergedSeeds_*_*',
        'keep recoGsfTrackExtras_electronGsfTracks_*_*',
        'keep recoTrackExtras_electronGsfTracks_*_*',
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*',
        'keep recoTracks_GsfGlobalElectronTest_*_*',
        'keep recoGsfTracks_electronGsfTracks_*_*',
        'keep recoTrackExtras_generalTracks_*_*',
        'keep TrackingRecHitsOwned_generalTracks_*_*',
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*',
        'keep uints_extraFromSeeds_*_*',
        'keep recoTrackExtras_beamhaloTracks_*_*',
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*',
        'keep recoTrackExtras_conversionStepTracks_*_*',
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*',
        'keep *_ctfPixelLess_*_*',
        'keep *_dedxTruncated40_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_conversionStepTracks_*_*',
        'keep recoTracks_beamhaloTracks_*_*',
        'keep recoTracks_ctfPixelLess_*_*',
        'keep *_dedxHarmonic2_*_*',
        'keep *_dedxPixelHarmonic2_*_*',
        'keep *_dedxHitInfo_*_*',
        'keep *_trackExtrapolator_*_*',
        'keep *_generalTracks_MVAValues_*',
        'keep *_generalTracks_MVAVals_*',
        'keep *_ak4CaloJets_*_*',
        'keep *_ak4PFJets_*_*',
        'keep *_ak4TrackJets_*_*',
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*',
        'keep *_towerMaker_*_*',
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*',
        'keep *_ak5CastorJets_*_*',
        'keep *_ak7CastorJets_*_*',
        'keep recoCaloJets_ak4CaloJets_*_*',
        'keep *_ak4CaloJets_rho_*',
        'keep *_ak4CaloJets_sigma_*',
        'keep *_ak4PFJetsCHS_*_*',
        'keep floatedmValueMap_puppi_*_*',
        'keep *_ak4PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppiSoftDrop_*_*',
        'keep recoPFJets_ak4PFJets_*_*',
        'keep *_ak4PFJets_rho_*',
        'keep *_ak4PFJets_sigma_*',
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*',
        'keep *_caloTowers_*_*',
        'keep *_CastorTowerReco_*_*',
        'keep *_ak4JetTracksAssociatorAtVertex_*_*',
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*',
        'keep *_ak4JetTracksAssociatorExplicit_*_*',
        'keep *_ak4JetExtender_*_*',
        'keep *_ak4JetID_*_*',
        'keep recoBasicJets_ak5CastorJets_*_*',
        'keep *_ak5CastorJets_rho_*',
        'keep *_ak5CastorJets_sigma_*',
        'keep *_ak5CastorJetID_*_*',
        'keep recoBasicJets_ak7CastorJets_*_*',
        'keep *_ak7CastorJets_rho_*',
        'keep *_ak7CastorJets_sigma_*',
        'keep *_ak7CastorJetID_*_*',
        'keep *_fixedGridRhoAll_*_*',
        'keep *_fixedGridRhoFastjetAll_*_*',
        'keep *_fixedGridRhoFastjetAllTmp_*_*',
        'keep *_fixedGridRhoFastjetCentral_*_*',
        'keep *_fixedGridRhoFastjetAllCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*',
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*',
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*',
        'keep recoHcalNoiseRBXs_hcalnoise_*_*',
        'keep recoEcalHaloData_EcalHaloData_*_*',
        'keep recoHcalHaloData_HcalHaloData_*_*',
        'keep recoCaloMETs_caloMet_*_*',
        'keep recoCaloMETs_caloMetBE_*_*',
        'keep recoCaloMETs_caloMetBEFO_*_*',
        'keep recoCaloMETs_caloMetM_*_*',
        'keep recoPFMETs_pfMet_*_*',
        'keep recoPFMETs_pfChMet_*_*',
        'keep floatedmValueMap_puppiNoLep_*_*',
        'keep recoPFMETs_pfMetPuppi_*_*',
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*',
        'keep HcalNoiseSummary_hcalnoise_*_*',
        'keep recoGlobalHaloData_GlobalHaloData_*_*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep *_MuonSeed_*_*',
        'keep *_ancientMuonSeed_*_*',
        'keep *_displacedMuonSeeds_*_*',
        'keep TrackingRecHitsOwned_globalMuons_*_*',
        'keep TrackingRecHitsOwned_tevMuons_*_*',
        'keep *_CosmicMuonSeed_*_*',
        'keep recoTrackExtras_cosmicMuons_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons_*_*',
        'keep recoTrackExtras_cosmicMuons1Leg_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*',
        'keep recoTracks_cosmicsVetoTracks_*_*',
        'keep recoMuons_muons_*_*',
        'keep booledmValueMap_muons_*_*',
        'keep doubleedmValueMap_muons_muPFMean*_*',
        'keep doubleedmValueMap_muons_muPFSum*_*',
        'keep *_muons_muonShowerInformation_*',
        'keep recoMuonTimeExtraedmValueMap_muons_*_*',
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*',
        'keep uintedmValueMap_muons_*_*',
        'keep *_particleFlow_muons_*',
        'keep recoMuons_displacedMuons_*_*',
        'keep booledmValueMap_displacedMuons_*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFMean*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFSum*_*',
        'keep recoMuonTimeExtraedmValueMap_displacedMuons_*_*',
        'keep uintedmValueMap_displacedMuons_*_*',
        'keep *_particleFlow_displacedMuons_*',
        'keep recoTracks_standAloneMuons_*_*',
        'keep recoTrackExtras_standAloneMuons_*_*',
        'keep TrackingRecHitsOwned_standAloneMuons_*_*',
        'keep recoTracks_globalMuons_*_*',
        'keep recoTrackExtras_globalMuons_*_*',
        'keep recoTracks_tevMuons_*_*',
        'keep recoTrackExtras_tevMuons_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_displacedTracks_*_*',
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*',
        'keep recoTracks_displacedGlobalMuons_*_*',
        'keep recoTrackExtras_displacedGlobalMuons_*_*',
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*',
        'keep recoTracks_cosmicMuons_*_*',
        'keep recoMuons_muonsFromCosmics_*_*',
        'keep recoTracks_cosmicMuons1Leg_*_*',
        'keep recoMuons_muonsFromCosmics1Leg_*_*',
        'keep recoTracks_refittedStandAloneMuons_*_*',
        'keep recoTrackExtras_refittedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTrackExtras_displacedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*',
        'keep *_muonReducedTrackExtras_*_*',
        'keep *_displacedMuonReducedTrackExtras_*_*',
        'keep *_muIsoDepositTk_*_*',
        'keep *_muIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muIsoDepositCalByAssociatorHits_*_*',
        'keep *_muIsoDepositJets_*_*',
        'keep *_muIsoDepositTkDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorTowersDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorHitsDisplaced_*_*',
        'keep *_muIsoDepositJetsDisplaced_*_*',
        'keep *_muGlobalIsoDepositCtfTk_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*',
        'keep *_muGlobalIsoDepositJets_*_*',
        'keep *_softPFMuonsTagInfos_*_*',
        'keep *_softPFElectronsTagInfos_*_*',
        'keep *_pfImpactParameterTagInfos_*_*',
        'keep *_pfSecondaryVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_pfGhostTrackVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*',
        'keep *_softPFElectronBJetTags_*_*',
        'keep *_softPFMuonBJetTags_*_*',
        'keep *_pfTrackCountingHighEffBJetTags_*_*',
        'keep *_pfJetProbabilityBJetTags_*_*',
        'keep *_pfJetBProbabilityBJetTags_*_*',
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*',
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*',
        'keep *_pfGhostTrackBJetTags_*_*',
        'keep *_pfCombinedMVAV2BJetTags_*_*',
        'keep *_inclusiveCandidateSecondaryVertices_*_*',
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*',
        'keep *_pfCombinedCvsLJetTags_*_*',
        'keep *_pfCombinedCvsBJetTags_*_*',
        'keep *_pfChargeBJetTags_*_*',
        'keep *_pfDeepCSVJetTags_*_*',
        'keep *_pfDeepCMVAJetTags_*_*',
        'keep *_pixelClusterTagInfos_*_*',
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*',
        'keep recoPFTaus_hpsPFTauProducer_*_*',
        'keep *_hpsPFTauBasicDiscriminators_*_*',
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*',
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*',
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*',
        'keep *_hpsPFTauTransverseImpactParameters_*_*',
        'keep  *_offlinePrimaryVertices__*',
        'keep *_offlinePrimaryVerticesWithBS_*_*',
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*',
        'keep *_nuclearInteractionMaker_*_*',
        'keep *_generalV0Candidates_*_*',
        'keep *_inclusiveSecondaryVertices_*_*',
        'keep *_offlinePrimaryVertices4D__*',
        'keep *_offlinePrimaryVertices4DWithBS__*',
        'keep *_trackTimeValueMapProducer_*_*',
        'keep *_tofPID_*_*',
        'keep *_gedPhotonCore_*_*',
        'keep *_gedPhotons_*_*',
        'keep recoPhotons_mustachePhotons_*_*',
        'keep recoPhotonCores_mustachePhotonCore_*_*',
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep recoGsfElectronCores_gsfElectronCores_*_*',
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*',
        'keep recoGsfElectrons_gsfElectrons_*_*',
        'keep recoGsfElectrons_gedGsfElectrons_*_*',
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*',
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*',
        'keep floatedmValueMap_eidRobustLoose_*_*',
        'keep floatedmValueMap_eidRobustTight_*_*',
        'keep floatedmValueMap_eidRobustHighEnergy_*_*',
        'keep floatedmValueMap_eidLoose_*_*',
        'keep floatedmValueMap_eidTight_*_*',
        'keep *_egmGedGsfElectronPFIsolation_*_*',
        'keep recoPhotonCores_gedPhotonCore_*_*',
        'keep recoPhotons_gedPhotons_*_*',
        'keep *_particleBasedIsolation_*_*',
        'keep recoPhotonCores_photonCore_*_*',
        'keep recoPhotons_photons_*_*',
        'keep recoPhotonCores_ootPhotonCore_*_*',
        'keep recoPhotons_ootPhotons_*_*',
        'keep recoConversions_conversions_*_*',
        'drop recoConversions_conversions_uncleanedConversions_*',
        'keep recoConversions_mustacheConversions_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep recoConversions_allConversions_*_*',
        'keep recoConversions_allConversionsOldEG_*_*',
        'keep recoTracks_ckfOutInTracksFromConversions_*_*',
        'keep recoTracks_ckfInOutTracksFromConversions_*_*',
        'keep recoConversions_uncleanedOnlyAllConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep *_PhotonIDProd_*_*',
        'keep *_PhotonIDProdGED_*_*',
        'keep *_hfRecoEcalCandidate_*_*',
        'keep *_hfEMClusters_*_*',
        'keep *_gedGsfElectronCores_*_*',
        'keep *_gedGsfElectrons_*_*',
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*',
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*',
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*',
        'keep *_lowPtGsfToTrackLinks_*_*',
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_rekeyLowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_lowPtGsfElectronID_*_*',
        'keep *_ecalDrivenGsfElectronCores_*_*',
        'keep *_ecalDrivenGsfElectrons_*_*',
        'keep *_ecalDrivenGsfElectronCoresHGC_*_*',
        'keep *_ecalDrivenGsfElectronsHGC_*_*',
        'keep *_photonCoreHGC_*_*',
        'keep *_photonsHGC_*_*',
        'keep *_pixelTracks_*_*',
        'keep *_pixelVertices_*_*',
        'keep recoPFClusters_particleFlowClusterECAL_*_*',
        'keep recoPFClusters_particleFlowClusterHCAL_*_*',
        'keep recoPFClusters_particleFlowClusterHO_*_*',
        'keep recoPFClusters_particleFlowClusterHF_*_*',
        'keep recoPFClusters_particleFlowClusterPS_*_*',
        'keep recoPFBlocks_particleFlowBlock_*_*',
        'keep recoPFCandidates_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlowTmp_electrons_*',
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*',
        'keep *_pfElectronTranslator_*_*',
        'keep *_pfPhotonTranslator_*_*',
        'keep *_trackerDrivenElectronSeeds_preid_*',
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*',
        'keep recoCaloClusters_particleFlowEGamma_*_*',
        'keep recoSuperClusters_particleFlowEGamma_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoConversions_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlow_*_*',
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*',
        'keep *_particleFlow_electrons_*',
        'keep *_particleFlow_photons_*',
        'keep *_particleFlow_muons_*',
        'keep recoCaloClusters_pfElectronTranslator_*_*',
        'keep recoPreshowerClusters_pfElectronTranslator_*_*',
        'keep recoSuperClusters_pfElectronTranslator_*_*',
        'keep recoCaloClusters_pfPhotonTranslator_*_*',
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*',
        'keep recoSuperClusters_pfPhotonTranslator_*_*',
        'keep recoPhotons_pfPhotonTranslator_*_*',
        'keep recoPhotonCores_pfPhotonTranslator_*_*',
        'keep recoConversions_pfPhotonTranslator_*_*',
        'keep *_particleFlowPtrs_*_*',
        'keep *_particleFlowTmpPtrs_*_*',
        'keep *_chargedHadronPFTrackIsolation_*_*',
        'keep recoPFRecHits_particleFlowRecHitHGC_Cleaned_*',
        'keep recoSuperClusters_simPFProducer_*_*',
        'keep *_ecalBarrelClusterFastTimer_*_*',
        'keep *_particleFlowSuperClusterHGCal_*_*',
        'keep recoPFBlocks_simPFProducer_*_*',
        'keep *_offlineBeamSpot_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_l1L1GtObjectMap_*_*',
        'keep L1MuGMTReadoutCollection_gtDigis_*_*',
        'keep L1GctEmCand*_gctDigis_*_*',
        'keep L1GctJetCand*_gctDigis_*_*',
        'keep L1GctEtHad*_gctDigis_*_*',
        'keep L1GctEtMiss*_gctDigis_*_*',
        'keep L1GctEtTotal*_gctDigis_*_*',
        'keep L1GctHtMiss*_gctDigis_*_*',
        'keep L1GctJetCounts*_gctDigis_*_*',
        'keep L1GctHFRingEtSums*_gctDigis_*_*',
        'keep L1GctHFBitCounts*_gctDigis_*_*',
        'keep LumiDetails_lumiProducer_*_*',
        'keep LumiSummary_lumiProducer_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*',
        'drop *_hlt*_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep DcsStatuss_hltScalersRawToDigi_*_*',
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*',
        'keep L1TriggerScalerss_scalersRawToDigi_*_*',
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep BeamSpotOnlines_scalersRawToDigi_*_*',
        'keep DcsStatuss_scalersRawToDigi_*_*',
        'keep CTPPSRecord_onlineMetaDataDigis_*_*',
        'keep DCSRecord_onlineMetaDataDigis_*_*',
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*',
        'keep recoBeamSpot_onlineMetaDataDigis_*_*',
        'keep *_tcdsDigis_*_*',
        'keep *_logErrorHarvester_*_*',
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*',
        'keep TotemFEDInfos_totemRPRawToDigi_*_*',
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*',
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*',
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*',
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*',
        'keep TotemFEDInfos_totemT2Digis_*_*',
        'keep TotemT2DigiedmNewDetSetVector_totemT2Digis_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemT2Digis_*_*',
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*',
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_diamondSampicLocalTracks_*_*',
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*',
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*',
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*',
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*',
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep *_ticlSimTracksters_*_*',
        'keep *_ticlSimTICLCandidates_*_*',
        'keep *_ticlSimTrackstersFromCP_*_*',
        'keep *_SimTau*_*_*',
        'keep *_ticlTrackstersCLUE3DHigh_*_*',
        'keep *_ticlTrackstersMerge_*_*',
        'keep *_ticlTrackstersHFNoseTrkEM_*_*',
        'keep *_ticlTrackstersHFNoseEM_*_*',
        'keep *_ticlTrackstersHFNoseTrk_*_*',
        'keep *_ticlTrackstersHFNoseMIP_*_*',
        'keep *_ticlTrackstersHFNoseHAD_*_*',
        'keep *_ticlTrackstersHFNoseMerge_*_*',
        'keep *_pfTICL_*_*',
        'keep CaloParticles_mix_*_*',
        'keep SimClusters_mix_*_*',
        'keep *_layerClusterSimClusterAssociationProducer_*_*',
        'keep *_layerClusterCaloParticleAssociationProducer_*_*',
        'keep *_layerClusterSimTracksterAssociationProducer_*_*',
        'keep *_tracksterSimTracksterAssociationLinking_*_*',
        'keep *_tracksterSimTracksterAssociationPR_*_*',
        'keep *_tracksterSimTracksterAssociationLinkingPU_*_*',
        'keep *_tracksterSimTracksterAssociationPRPU_*_*',
        'keep *_tracksterSimTracksterAssociationLinkingbyCLUE3D_*_*',
        'keep *_tracksterSimTracksterAssociationPRbyCLUE3D_*_*',
        'keep Phase2TrackerDigiedmDetSetVector_mix_*_*',
        'keep *_TTClustersFromPhase2TrackerDigis_*_*',
        'keep *_TTStubsFromPhase2TrackerDigis_*_*',
        'keep *_TrackerDTC_*_*',
        'keep *_*_Level1TTTracks_*',
        'keep *_muonGEMDigis_*_*',
        'keep *_muonGEMDigis_*_*',
        'keep *_mtdUncalibratedRecHits_*_*',
        'keep *_mtdTrackingRecHits_*_*',
        'keep *_mtdRecHits_*_*',
        'keep *_mtdClusters_*_*',
        'keep recoTrack*_trackExtenderWithMTD_*_*',
        'keep TrackingRecHitsOwned_trackExtenderWithMTD_*_*',
        'keep *edmValueMap_trackExtenderWithMTD_*_*',
        'keep *_mtdTrackQualityMVA_*_*',
        'keep *_g4SimHits_*_*',
        'keep edmHepMCProduct_source_*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackingParticles_*_*',
        'keep *_prunedDigiSimLinks_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*',
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*',
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*',
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*',
        'keep *_simMuonCSCDigis_*_*',
        'keep *_simMuonRPCDigis_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonME0Digis_*_*',
        'keep EBSrFlagsSorted_simEcalDigis_*_*',
        'keep EESrFlagsSorted_simEcalDigis_*_*',
        'keep *_simHcalUnsuppressedDigis_*_*',
        'keep *_mix_EETimeDigi_*',
        'keep *_mix_EBTimeDigi_*',
        'keep *_simEcalUnsuppressedDigis_*_*',
        'keep *_simHGCalUnsuppressedDigis_EE_*',
        'keep *_simHGCalUnsuppressedDigis_HEfront_*',
        'keep *_simHGCalUnsuppressedDigis_HEback_*',
        'keep *_mix_MergedCaloTruth_*',
        'keep *_mix_MergedMtdTruth_*',
        'keep *_mix_MergedMtdTruthLC_*',
        'keep *_mix_MergedMtdTruthST_*',
        'keep *_mix_FTLBarrel_*',
        'keep *_mix_FTLEndcap_*',
        'keep *_mix_InitialVertices_*',
        'keep *_mtdRecoClusterToSimLayerClusterAssociation_*_*',
        'keep *_mtdSimLayerClusterToTPAssociation_*_*',
        'keep CrossingFramePlaybackInfoNew_*_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int6stdbitsetstdpairs_*_AffectedAPVList_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*',
        'keep *_mix_MergedTrackTruth_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'keep recoGenJets_ak*_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*',
        'keep recoGenMETs_*_*_*',
        'keep FEDRawDataCollection_source_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep *_MEtoEDMConverter_*_*',
        'keep *_randomEngineStateProducer_*_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'keep recoGenMETs_*_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*',
        'keep edmHepMCProduct_source_*_*',
        'keep SimTracks_g4SimHits_*_*',
        'keep SimVertexs_g4SimHits_*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackMCMatch_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*',
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*',
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*',
        'keep *_muonSimClassifier_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonME0Digis_*_*',
        'keep *_simHGCalUnsuppressedDigis_EE_*',
        'keep *_simHGCalUnsuppressedDigis_HEfront_*',
        'keep *_simHGCalUnsuppressedDigis_HEback_*',
        'keep *_mix_MergedCaloTruth_*',
        'keep *_mix_MergedMtdTruth_*',
        'keep *_mix_MergedMtdTruthLC_*',
        'keep *_mix_MergedMtdTruthST_*',
        'keep *_mix_FTLBarrel_*',
        'keep *_mix_FTLEndcap_*',
        'keep *_mix_InitialVertices_*',
        'keep *_mtdRecoClusterToSimLayerClusterAssociation_*_*',
        'keep *_mtdSimLayerClusterToTPAssociation_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*',
        'keep *_simCscTriggerPrimitiveDigis_*_*',
        'keep *_simDtTriggerPrimitiveDigis_*_*',
        'keep *_simRpcTriggerDigis_*_*',
        'keep *_simRctDigis_*_*',
        'keep *_simCsctfDigis_*_*',
        'keep *_simCsctfTrackDigis_*_*',
        'keep *_simDttfDigis_*_*',
        'keep *_simGctDigis_*_*',
        'keep *_simCaloStage1Digis_*_*',
        'keep *_simCaloStage1FinalDigis_*_*',
        'keep *_simCaloStage2Layer1Digis_*_*',
        'keep *_simCaloStage2Digis_*_*',
        'keep *_simGmtDigis_*_*',
        'keep *_simBmtfDigis_*_*',
        'keep *_simKBmtfDigis_*_*',
        'keep *_simOmtfDigis_*_*',
        'keep *_simEmtfDigis_*_*',
        'keep *_simGmtStage2Digis_*_*',
        'keep *_simGtDigis_*_*',
        'keep *_simGtStage2Digis_*_*',
        'keep *_cscTriggerPrimitiveDigis_*_*',
        'keep *_dtTriggerPrimitiveDigis_*_*',
        'keep *_rpcTriggerDigis_*_*',
        'keep *_rctDigis_*_*',
        'keep *_csctfDigis_*_*',
        'keep *_csctfTrackDigis_*_*',
        'keep *_dttfDigis_*_*',
        'keep *_gctDigis_*_*',
        'keep *_gmtDigis_*_*',
        'keep *_gtDigis_*_*',
        'keep *_gtEvmDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_l1L1GtObjectMap_*_*',
        'keep LumiDetails_lumiProducer_*_*',
        'keep LumiSummary_lumiProducer_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*',
        'keep *_simEmtfShowers_*_*',
        'keep *_simGmtShowerDigis_*_*',
        'keep l1tHGCalTriggerCellBXVector_l1tHGCalVFEProducer_*_*',
        'keep l1tHGCalTriggerCellBXVector_l1tHGCalConcentratorProducer_*_*',
        'keep l1tHGCalTowerBXVector_l1tHGCalTowerProducer_*_*',
        'keep l1tHGCalClusterBXVector_l1tHGCalBackEndLayer1Producer_*_*',
        'keep l1tHGCalMulticlusterBXVector_l1tHGCalBackEndLayer2Producer_*_*',
        'keep *_simMuonGEMPadDigis_*_*',
        'keep *_simMuonGEMPadDigiClusters_*_*',
        'keep *_simMuonME0PadDigis__*',
        'keep *_me0TriggerDigis__*',
        'keep *_simMuonME0PseudoReDigisCoarse__*',
        'keep *_me0RecHitsCoarse__*',
        'keep *_me0TriggerPseudoDigis__*',
        'keep *_me0TriggerConvertedPseudoDigis__*',
        'keep *_simKBmtfDigis_*_*',
        'keep *_l1tHGCalVFEProducerhgcalConcentratorProducer_*_*',
        'keep *_l1tHGCalBackEndLayer1Producer_*_*',
        'keep *_l1tHGCalBackEndLayer2Producer_*_*',
        'keep *_l1tHGCalTowerMapProducer_*_*',
        'keep *_l1tHGCalTowerProducer_*_*',
        'keep *_l1tHGCalEnergySplitTowerMapProducer_*_*',
        'keep *_l1tHGCalEnergySplitTowerProducer_*_*',
        'keep *_l1tEGammaClusterEmuProducer_*_*',
        'keep *_l1tVertexFinder_*_*',
        'keep *_l1tVertexFinderEmulator_*_*',
        'keep *_l1tTrackJets_*_*',
        'keep *_l1tTrackJetsExtended_*_*',
        'keep *_l1tTrackFastJets_*_*',
        'keep *_l1tTrackerEtMiss_*_*',
        'keep *_l1tTrackerHTMiss_*_*',
        'keep *_l1tTrackJetsEmulation_*_*',
        'keep *_l1tTrackJetsExtendedEmulation_*_*',
        'keep *_l1tTrackerEmuEtMiss_*_*',
        'keep *_l1tTrackerEmuHTMiss_*_*',
        'keep *_l1tTrackerEmuHTMissExtended_*_*',
        'keep *_l1tTrackTripletEmulation_*_*',
        'keep *_l1tTowerCalibration_*_*',
        'keep *_l1tCaloJet_*_*',
        'keep *_l1tCaloJetHTT_*_*',
        'keep *_l1tPhase2CaloJetEmulator_*_*',
        'keep *_l1tNNCaloTauProducer_*_*',
        'keep *_l1tNNCaloTauEmulator_*_*',
        'keep *_l1tPFClustersFromL1EGClusters_*_*',
        'keep *_l1tPFClustersFromCombinedCaloHCal_*_*',
        'keep *_l1tPFClustersFromCombinedCaloHF_*_*',
        'keep *_l1tPFClustersFromHGC3DClusters_*_*',
        'keep *_l1tPFTracksFromL1TracksBarrel_*_*',
        'keep *_l1tPFTracksFromL1TracksHGCal_*_*',
        'keep *_l1tSC4PFL1PuppiCorrectedEmulator_*_*',
        'keep *_l1tSC4PFL1PuppiCorrectedEmulatorMHT_*_*',
        'keep *_l1tSC4PFL1PuppiExtendedCorrectedEmulator_*_*',
        'keep *_l1tSC4PFL1PuppiExtendedCorrectedEmulatorMHT_*_*',
        'keep *_l1tSC8PFL1PuppiCorrectedEmulator_*_*',
        'keep *_l1tPhase1JetProducer9x9_*_*',
        'keep *_l1tPhase1JetCalibrator9x9_*_*',
        'keep *_l1tPhase1JetSumsProducer9x9_*_*',
        'keep *_l1tPhase1JetProducer9x9trimmed_*_*',
        'keep *_l1tPhase1JetCalibrator9x9trimmed_*_*',
        'keep *_l1tPhase1JetSumsProducer9x9trimmed_*_*',
        'keep *_l1tLayer1Barrel_*_*',
        'keep *_l1tLayer1HGCal_*_*',
        'keep *_l1tLayer1HGCalNoTK_*_*',
        'keep *_l1tLayer1HF_*_*',
        'keep *_l1tLayer1_*_*',
        'keep *_l1tLayer1BarrelExtended_*_*',
        'keep *_l1tLayer1HGCalExtended_*_*',
        'keep *_l1tLayer1Extended_*_*',
        'keep *_l1tLayer1EG_*_*',
        'keep *_l1tLayer2EG_*_*',
        'keep *_l1tMETPFProducer_*_*',
        'keep *_l1tMETMLProducer_*_*',
        'keep *_l1tNNTauProducer_*_*',
        'keep *_l1tNNTauProducerPuppi_*_*',
        'keep *_l1tHPSPFTauProducer_*_*',
        'keep *_l1tBJetProducerPuppi_*_*',
        'keep *_l1tBJetProducerPuppiCorrectedEmulator_*_*',
        'keep *_l1tTOoLLiPProducer_*_*',
        'keep *_l1tTOoLLiPProducerCorrectedEmulator_*_*',
        'keep *_TTStubsFromPhase2TrackerDigis_*_*',
        'keep *_TTClustersFromPhase2TrackerDigis_*_*',
        'keep *_l1tTTTracksFromExtendedTrackletEmulation_*_*',
        'keep *_l1tTTTracksFromTrackletEmulation_*_*',
        'keep *_l1tTkStubsGmt_*_*',
        'keep *_l1tTkMuonsGmt_*_*',
        'keep *_l1tSAMuonsGmt_*_*',
        'keep *_l1tTkMuonsGmtLowPtFix_*_*',
        'keep *_l1tPhase2L1CaloEGammaEmulator_*_*',
        'drop *_trackingtruthprod_*_*',
        'drop *_electrontruth_*_*',
        'keep *_mix_MergedTrackTruth_*',
        'keep CrossingFramePlaybackInfoNew_*_*_*',
        'keep *_simSiPixelDigis_*_*',
        'keep *_simSiStripDigis_*_*',
        'drop *_mix_simSiPixelDigis*_*',
        'drop *_mix_simSiStripDigis*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_trackingParticleRecoTrackAsssociation_*_*',
        'keep *_assoc2secStepTk_*_*',
        'keep *_assoc2thStepTk_*_*',
        'keep *_assoc2GsfTracks_*_*',
        'keep *_assocOutInConversionTracks_*_*',
        'keep *_assocInOutConversionTracks_*_*',
        'keep *_TTClusterAssociatorFromPixelDigis_*_*',
        'keep *_TTStubAssociatorFromPixelDigis_*_*',
        'keep *_simHitTPAssocProducer_*_*',
        'keep *_simMuonCSCDigis_*_*',
        'keep *_simMuonDTDigis_*_*',
        'keep *_simMuonRPCDigis_*_*',
        'keep *_simMuonGEMDigis_*_*',
        'keep *_simMuonME0PseudoDigis_*_*',
        'keep *_simMuonME0PseudoReDigis_*_*',
        'keep *_simMuonME0Digis_*_*',
        'keep *_simEcalDigis_*_*',
        'keep *_simEcalPreshowerDigis_*_*',
        'keep *_simEcalTriggerPrimitiveDigis_*_*',
        'keep *_simEcalEBTriggerPrimitiveDigis_*_*',
        'keep *_simEcalEBTriggerPrimitivePhase2Digis_*_*',
        'keep *_simHcalDigis_*_*',
        'keep ZDCDataFramesSorted_simHcalUnsuppressedDigis_*_*',
        'drop ZDCDataFramesSorted_mix_simHcalUnsuppressedDigis*_*',
        'keep *_simHcalTriggerPrimitiveDigis_*_*',
        'keep *_mix_HcalSamples_*',
        'keep *_mixData_HcalSamples_*',
        'keep *_mix_HcalHits_*',
        'keep *_mixData_HcalHits_*',
        'keep *_DMHcalTriggerPrimitiveDigis_*_*',
        'keep *_simHcalUnsuppressedDigis_*_*',
        'keep *_DMHcalDigis_*_*',
        'keep *_mix_EETimeDigi_*',
        'keep *_mix_EBTimeDigi_*',
        'keep *_simEcalUnsuppressedDigis_*_*',
        'keep *_simHGCalUnsuppressedDigis_EE_*',
        'keep *_simHGCalUnsuppressedDigis_HEfront_*',
        'keep *_simHGCalUnsuppressedDigis_HEback_*',
        'keep *_mix_MergedCaloTruth_*',
        'keep *_mix_MergedMtdTruth_*',
        'keep *_mix_MergedMtdTruthLC_*',
        'keep *_mix_MergedMtdTruthST_*',
        'keep *_mix_FTLBarrel_*',
        'keep *_mix_FTLEndcap_*',
        'keep *_mix_InitialVertices_*',
        'keep *_mtdRecoClusterToSimLayerClusterAssociation_*_*',
        'keep *_mtdSimLayerClusterToTPAssociation_*_*'
     ) ),
    splitLevel = cms.untracked.int32(0)
)

process.FEVTDEBUGHLTEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring( (
        'drop *',
        'drop *',
        'drop *',
        'drop *',
        'drop *',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep DetIds_siStripDigis_*_*',
        'keep DetIdedmEDCollection_siPixelDigis_*_*',
        'keep PixelFEDChanneledmNewDetSetVector_siPixelDigis_*_*',
        'keep *_siPixelClusters_*_*',
        'keep *_siStripClusters_*_*',
        'keep ClusterSummary_clusterSummaryProducer_*_*',
        'keep *_siPhase2Clusters_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_dt1DCosmicRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_dt4DSegments_*_*',
        'keep *_dt4DCosmicSegments_*_*',
        'keep *_cscSegments_*_*',
        'keep *_rpcRecHits_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_gemRecHits_*_*',
        'keep *_gemSegments_*_*',
        'keep *_me0RecHits_*_*',
        'keep *_me0Segments_*_*',
        'keep *_hbhereco_*_*',
        'keep *_hbheprereco_*_*',
        'keep *_hfprereco_*_*',
        'keep *_hfreco_*_*',
        'keep *_horeco_*_*',
        'keep HBHERecHitsSorted_hbherecoMB_*_*',
        'keep HORecHitsSorted_horecoMB_*_*',
        'keep HFRecHitsSorted_hfrecoMB_*_*',
        'keep ZDCDataFramesSorted_hcalDigis_*_*',
        'keep ZDCDataFramesSorted_castorDigis_*_*',
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*',
        'keep ZDCRecHitsSorted_zdcreco_*_*',
        'keep ZDCRecHitsSorted_zdcrecoRun3_*_*',
        'keep *_castorreco_*_*',
        'keep *_reducedHcalRecHits_*_*',
        'keep HcalUnpackerReport_castorDigis_*_*',
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*',
        'keep HcalUnpackerReport_hcalDigis_*_*',
        'keep *_HGCalRecHit_*_*',
        'keep recoCaloClusters_hgcalMergeLayerClusters_*_*',
        'keep *_hgcalMergeLayerClusters_timeLayerCluster_*',
        'keep *_hgcalMergeLayerClusters_InitialLayerClustersMask_*',
        'keep *_ecalPreshowerRecHit_*_*',
        'keep *_ecalRecHit_*_*',
        'keep *_ecalCompactTrigPrim_*_*',
        'keep *_ecalTPSkim_*_*',
        'keep EBSrFlagsSorted_ecalDigis__*',
        'keep EESrFlagsSorted_ecalDigis__*',
        'keep *_mix_EBTimeDigi_*',
        'keep *_mix_EETimeDigi_*',
        'keep *_ecalDetailedTimeRecHit_*_*',
        'keep *_hgcalMultiClusters_*_*',
        'keep *_iterHGCalMultiClusters_*_*',
        'keep *_hybridSuperClusters_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep *_multi5x5SuperClusters_*_*',
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep *_particleFlowSuperClusterECAL_*_*',
        'keep *_particleFlowSuperClusterOOTECAL_*_*',
        'drop recoClusterShapes_*_*_*',
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*',
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*',
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*',
        'keep *_selectDigi_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep recoCaloClusters_hybridSuperClusters_*_*',
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*',
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*',
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterHGCal__*',
        'keep recoCaloClusters_particleFlowSuperClusterHGCal__*',
        'keep *_particleFlowSuperClusterHGCal_*_*',
        'keep *_CkfElectronCandidates_*_*',
        'keep *_GsfGlobalElectronTest_*_*',
        'keep *_electronMergedSeeds_*_*',
        'keep recoGsfTrackExtras_electronGsfTracks_*_*',
        'keep recoTrackExtras_electronGsfTracks_*_*',
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*',
        'keep recoTracks_GsfGlobalElectronTest_*_*',
        'keep recoGsfTracks_electronGsfTracks_*_*',
        'keep recoTrackExtras_generalTracks_*_*',
        'keep TrackingRecHitsOwned_generalTracks_*_*',
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*',
        'keep uints_extraFromSeeds_*_*',
        'keep recoTrackExtras_beamhaloTracks_*_*',
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*',
        'keep recoTrackExtras_conversionStepTracks_*_*',
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*',
        'keep *_ctfPixelLess_*_*',
        'keep *_dedxTruncated40_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_conversionStepTracks_*_*',
        'keep recoTracks_beamhaloTracks_*_*',
        'keep recoTracks_ctfPixelLess_*_*',
        'keep *_dedxHarmonic2_*_*',
        'keep *_dedxPixelHarmonic2_*_*',
        'keep *_dedxHitInfo_*_*',
        'keep *_trackExtrapolator_*_*',
        'keep *_generalTracks_MVAValues_*',
        'keep *_generalTracks_MVAVals_*',
        'keep *_ak4CaloJets_*_*',
        'keep *_ak4PFJets_*_*',
        'keep *_ak4TrackJets_*_*',
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*',
        'keep *_towerMaker_*_*',
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*',
        'keep *_ak5CastorJets_*_*',
        'keep *_ak7CastorJets_*_*',
        'keep recoCaloJets_ak4CaloJets_*_*',
        'keep *_ak4CaloJets_rho_*',
        'keep *_ak4CaloJets_sigma_*',
        'keep *_ak4PFJetsCHS_*_*',
        'keep floatedmValueMap_puppi_*_*',
        'keep *_ak4PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppiSoftDrop_*_*',
        'keep recoPFJets_ak4PFJets_*_*',
        'keep *_ak4PFJets_rho_*',
        'keep *_ak4PFJets_sigma_*',
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*',
        'keep *_caloTowers_*_*',
        'keep *_CastorTowerReco_*_*',
        'keep *_ak4JetTracksAssociatorAtVertex_*_*',
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*',
        'keep *_ak4JetTracksAssociatorExplicit_*_*',
        'keep *_ak4JetExtender_*_*',
        'keep *_ak4JetID_*_*',
        'keep recoBasicJets_ak5CastorJets_*_*',
        'keep *_ak5CastorJets_rho_*',
        'keep *_ak5CastorJets_sigma_*',
        'keep *_ak5CastorJetID_*_*',
        'keep recoBasicJets_ak7CastorJets_*_*',
        'keep *_ak7CastorJets_rho_*',
        'keep *_ak7CastorJets_sigma_*',
        'keep *_ak7CastorJetID_*_*',
        'keep *_fixedGridRhoAll_*_*',
        'keep *_fixedGridRhoFastjetAll_*_*',
        'keep *_fixedGridRhoFastjetAllTmp_*_*',
        'keep *_fixedGridRhoFastjetCentral_*_*',
        'keep *_fixedGridRhoFastjetAllCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*',
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*',
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*',
        'keep recoHcalNoiseRBXs_hcalnoise_*_*',
        'keep recoEcalHaloData_EcalHaloData_*_*',
        'keep recoHcalHaloData_HcalHaloData_*_*',
        'keep recoCaloMETs_caloMet_*_*',
        'keep recoCaloMETs_caloMetBE_*_*',
        'keep recoCaloMETs_caloMetBEFO_*_*',
        'keep recoCaloMETs_caloMetM_*_*',
        'keep recoPFMETs_pfMet_*_*',
        'keep recoPFMETs_pfChMet_*_*',
        'keep floatedmValueMap_puppiNoLep_*_*',
        'keep recoPFMETs_pfMetPuppi_*_*',
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*',
        'keep HcalNoiseSummary_hcalnoise_*_*',
        'keep recoGlobalHaloData_GlobalHaloData_*_*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep *_MuonSeed_*_*',
        'keep *_ancientMuonSeed_*_*',
        'keep *_displacedMuonSeeds_*_*',
        'keep TrackingRecHitsOwned_globalMuons_*_*',
        'keep TrackingRecHitsOwned_tevMuons_*_*',
        'keep *_CosmicMuonSeed_*_*',
        'keep recoTrackExtras_cosmicMuons_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons_*_*',
        'keep recoTrackExtras_cosmicMuons1Leg_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*',
        'keep recoTracks_cosmicsVetoTracks_*_*',
        'keep recoMuons_muons_*_*',
        'keep booledmValueMap_muons_*_*',
        'keep doubleedmValueMap_muons_muPFMean*_*',
        'keep doubleedmValueMap_muons_muPFSum*_*',
        'keep *_muons_muonShowerInformation_*',
        'keep recoMuonTimeExtraedmValueMap_muons_*_*',
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*',
        'keep uintedmValueMap_muons_*_*',
        'keep *_particleFlow_muons_*',
        'keep recoMuons_displacedMuons_*_*',
        'keep booledmValueMap_displacedMuons_*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFMean*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFSum*_*',
        'keep recoMuonTimeExtraedmValueMap_displacedMuons_*_*',
        'keep uintedmValueMap_displacedMuons_*_*',
        'keep *_particleFlow_displacedMuons_*',
        'keep recoTracks_standAloneMuons_*_*',
        'keep recoTrackExtras_standAloneMuons_*_*',
        'keep TrackingRecHitsOwned_standAloneMuons_*_*',
        'keep recoTracks_globalMuons_*_*',
        'keep recoTrackExtras_globalMuons_*_*',
        'keep recoTracks_tevMuons_*_*',
        'keep recoTrackExtras_tevMuons_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_displacedTracks_*_*',
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*',
        'keep recoTracks_displacedGlobalMuons_*_*',
        'keep recoTrackExtras_displacedGlobalMuons_*_*',
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*',
        'keep recoTracks_cosmicMuons_*_*',
        'keep recoMuons_muonsFromCosmics_*_*',
        'keep recoTracks_cosmicMuons1Leg_*_*',
        'keep recoMuons_muonsFromCosmics1Leg_*_*',
        'keep recoTracks_refittedStandAloneMuons_*_*',
        'keep recoTrackExtras_refittedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTrackExtras_displacedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*',
        'keep *_muonReducedTrackExtras_*_*',
        'keep *_displacedMuonReducedTrackExtras_*_*',
        'keep *_muIsoDepositTk_*_*',
        'keep *_muIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muIsoDepositCalByAssociatorHits_*_*',
        'keep *_muIsoDepositJets_*_*',
        'keep *_muIsoDepositTkDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorTowersDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorHitsDisplaced_*_*',
        'keep *_muIsoDepositJetsDisplaced_*_*',
        'keep *_muGlobalIsoDepositCtfTk_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*',
        'keep *_muGlobalIsoDepositJets_*_*',
        'keep *_softPFMuonsTagInfos_*_*',
        'keep *_softPFElectronsTagInfos_*_*',
        'keep *_pfImpactParameterTagInfos_*_*',
        'keep *_pfSecondaryVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_pfGhostTrackVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*',
        'keep *_softPFElectronBJetTags_*_*',
        'keep *_softPFMuonBJetTags_*_*',
        'keep *_pfTrackCountingHighEffBJetTags_*_*',
        'keep *_pfJetProbabilityBJetTags_*_*',
        'keep *_pfJetBProbabilityBJetTags_*_*',
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*',
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*',
        'keep *_pfGhostTrackBJetTags_*_*',
        'keep *_pfCombinedMVAV2BJetTags_*_*',
        'keep *_inclusiveCandidateSecondaryVertices_*_*',
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*',
        'keep *_pfCombinedCvsLJetTags_*_*',
        'keep *_pfCombinedCvsBJetTags_*_*',
        'keep *_pfChargeBJetTags_*_*',
        'keep *_pfDeepCSVJetTags_*_*',
        'keep *_pfDeepCMVAJetTags_*_*',
        'keep *_pixelClusterTagInfos_*_*',
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*',
        'keep recoPFTaus_hpsPFTauProducer_*_*',
        'keep *_hpsPFTauBasicDiscriminators_*_*',
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*',
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*',
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*',
        'keep *_hpsPFTauTransverseImpactParameters_*_*',
        'keep  *_offlinePrimaryVertices__*',
        'keep *_offlinePrimaryVerticesWithBS_*_*',
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*',
        'keep *_nuclearInteractionMaker_*_*',
        'keep *_generalV0Candidates_*_*',
        'keep *_inclusiveSecondaryVertices_*_*',
        'keep *_offlinePrimaryVertices4D__*',
        'keep *_offlinePrimaryVertices4DWithBS__*',
        'keep *_trackTimeValueMapProducer_*_*',
        'keep *_tofPID_*_*',
        'keep *_gedPhotonCore_*_*',
        'keep *_gedPhotons_*_*',
        'keep recoPhotons_mustachePhotons_*_*',
        'keep recoPhotonCores_mustachePhotonCore_*_*',
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep recoGsfElectronCores_gsfElectronCores_*_*',
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*',
        'keep recoGsfElectrons_gsfElectrons_*_*',
        'keep recoGsfElectrons_gedGsfElectrons_*_*',
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*',
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*',
        'keep floatedmValueMap_eidRobustLoose_*_*',
        'keep floatedmValueMap_eidRobustTight_*_*',
        'keep floatedmValueMap_eidRobustHighEnergy_*_*',
        'keep floatedmValueMap_eidLoose_*_*',
        'keep floatedmValueMap_eidTight_*_*',
        'keep *_egmGedGsfElectronPFIsolation_*_*',
        'keep recoPhotonCores_gedPhotonCore_*_*',
        'keep recoPhotons_gedPhotons_*_*',
        'keep *_particleBasedIsolation_*_*',
        'keep recoPhotonCores_photonCore_*_*',
        'keep recoPhotons_photons_*_*',
        'keep recoPhotonCores_ootPhotonCore_*_*',
        'keep recoPhotons_ootPhotons_*_*',
        'keep recoConversions_conversions_*_*',
        'drop recoConversions_conversions_uncleanedConversions_*',
        'keep recoConversions_mustacheConversions_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep recoConversions_allConversions_*_*',
        'keep recoConversions_allConversionsOldEG_*_*',
        'keep recoTracks_ckfOutInTracksFromConversions_*_*',
        'keep recoTracks_ckfInOutTracksFromConversions_*_*',
        'keep recoConversions_uncleanedOnlyAllConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep *_PhotonIDProd_*_*',
        'keep *_PhotonIDProdGED_*_*',
        'keep *_hfRecoEcalCandidate_*_*',
        'keep *_hfEMClusters_*_*',
        'keep *_gedGsfElectronCores_*_*',
        'keep *_gedGsfElectrons_*_*',
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*',
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*',
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*',
        'keep *_lowPtGsfToTrackLinks_*_*',
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_rekeyLowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_lowPtGsfElectronID_*_*',
        'keep *_ecalDrivenGsfElectronCores_*_*',
        'keep *_ecalDrivenGsfElectrons_*_*',
        'keep *_ecalDrivenGsfElectronCoresHGC_*_*',
        'keep *_ecalDrivenGsfElectronsHGC_*_*',
        'keep *_photonCoreHGC_*_*',
        'keep *_photonsHGC_*_*',
        'keep *_pixelTracks_*_*',
        'keep *_pixelVertices_*_*',
        'keep recoPFClusters_particleFlowClusterECAL_*_*',
        'keep recoPFClusters_particleFlowClusterHCAL_*_*',
        'keep recoPFClusters_particleFlowClusterHO_*_*',
        'keep recoPFClusters_particleFlowClusterHF_*_*',
        'keep recoPFClusters_particleFlowClusterPS_*_*',
        'keep recoPFBlocks_particleFlowBlock_*_*',
        'keep recoPFCandidates_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlowTmp_electrons_*',
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*',
        'keep *_pfElectronTranslator_*_*',
        'keep *_pfPhotonTranslator_*_*',
        'keep *_trackerDrivenElectronSeeds_preid_*',
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*',
        'keep recoCaloClusters_particleFlowEGamma_*_*',
        'keep recoSuperClusters_particleFlowEGamma_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoConversions_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlow_*_*',
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*',
        'keep *_particleFlow_electrons_*',
        'keep *_particleFlow_photons_*',
        'keep *_particleFlow_muons_*',
        'keep recoCaloClusters_pfElectronTranslator_*_*',
        'keep recoPreshowerClusters_pfElectronTranslator_*_*',
        'keep recoSuperClusters_pfElectronTranslator_*_*',
        'keep recoCaloClusters_pfPhotonTranslator_*_*',
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*',
        'keep recoSuperClusters_pfPhotonTranslator_*_*',
        'keep recoPhotons_pfPhotonTranslator_*_*',
        'keep recoPhotonCores_pfPhotonTranslator_*_*',
        'keep recoConversions_pfPhotonTranslator_*_*',
        'keep *_particleFlowPtrs_*_*',
        'keep *_particleFlowTmpPtrs_*_*',
        'keep *_chargedHadronPFTrackIsolation_*_*',
        'keep recoPFRecHits_particleFlowRecHitHGC_Cleaned_*',
        'keep recoSuperClusters_simPFProducer_*_*',
        'keep *_ecalBarrelClusterFastTimer_*_*',
        'keep *_particleFlowSuperClusterHGCal_*_*',
        'keep recoPFBlocks_simPFProducer_*_*',
        'keep *_offlineBeamSpot_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_l1L1GtObjectMap_*_*',
        'keep L1MuGMTReadoutCollection_gtDigis_*_*',
        'keep L1GctEmCand*_gctDigis_*_*',
        'keep L1GctJetCand*_gctDigis_*_*',
        'keep L1GctEtHad*_gctDigis_*_*',
        'keep L1GctEtMiss*_gctDigis_*_*',
        'keep L1GctEtTotal*_gctDigis_*_*',
        'keep L1GctHtMiss*_gctDigis_*_*',
        'keep L1GctJetCounts*_gctDigis_*_*',
        'keep L1GctHFRingEtSums*_gctDigis_*_*',
        'keep L1GctHFBitCounts*_gctDigis_*_*',
        'keep LumiDetails_lumiProducer_*_*',
        'keep LumiSummary_lumiProducer_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*',
        'drop *_hlt*_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep DcsStatuss_hltScalersRawToDigi_*_*',
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*',
        'keep L1TriggerScalerss_scalersRawToDigi_*_*',
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep BeamSpotOnlines_scalersRawToDigi_*_*',
        'keep DcsStatuss_scalersRawToDigi_*_*',
        'keep CTPPSRecord_onlineMetaDataDigis_*_*',
        'keep DCSRecord_onlineMetaDataDigis_*_*',
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*',
        'keep recoBeamSpot_onlineMetaDataDigis_*_*',
        'keep *_tcdsDigis_*_*',
        'keep *_logErrorHarvester_*_*',
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*',
        'keep TotemFEDInfos_totemRPRawToDigi_*_*',
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*',
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*',
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*',
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*',
        'keep TotemFEDInfos_totemT2Digis_*_*',
        'keep TotemT2DigiedmNewDetSetVector_totemT2Digis_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemT2Digis_*_*',
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*',
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_diamondSampicLocalTracks_*_*',
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*',
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*',
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*',
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*',
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep *_ticlSimTracksters_*_*',
        'keep *_ticlSimTICLCandidates_*_*',
        'keep *_ticlSimTrackstersFromCP_*_*',
        'keep *_SimTau*_*_*',
        'keep *_ticlTrackstersCLUE3DHigh_*_*',
        'keep *_ticlTrackstersMerge_*_*',
        'keep *_ticlTrackstersHFNoseTrkEM_*_*',
        'keep *_ticlTrackstersHFNoseEM_*_*',
        'keep *_ticlTrackstersHFNoseTrk_*_*',
        'keep *_ticlTrackstersHFNoseMIP_*_*',
        'keep *_ticlTrackstersHFNoseHAD_*_*',
        'keep *_ticlTrackstersHFNoseMerge_*_*',
        'keep *_pfTICL_*_*',
        'keep CaloParticles_mix_*_*',
        'keep SimClusters_mix_*_*',
        'keep *_layerClusterSimClusterAssociationProducer_*_*',
        'keep *_layerClusterCaloParticleAssociationProducer_*_*',
        'keep *_layerClusterSimTracksterAssociationProducer_*_*',
        'keep *_tracksterSimTracksterAssociationLinking_*_*',
        'keep *_tracksterSimTracksterAssociationPR_*_*',
        'keep *_tracksterSimTracksterAssociationLinkingPU_*_*',
        'keep *_tracksterSimTracksterAssociationPRPU_*_*',
        'keep *_tracksterSimTracksterAssociationLinkingbyCLUE3D_*_*',
        'keep *_tracksterSimTracksterAssociationPRbyCLUE3D_*_*',
        'keep Phase2TrackerDigiedmDetSetVector_mix_*_*',
        'keep *_TTClustersFromPhase2TrackerDigis_*_*',
        'keep *_TTStubsFromPhase2TrackerDigis_*_*',
        'keep *_TrackerDTC_*_*',
        'keep *_*_Level1TTTracks_*',
        'keep *_muonGEMDigis_*_*',
        'keep *_muonGEMDigis_*_*',
        'keep *_mtdUncalibratedRecHits_*_*',
        'keep *_mtdTrackingRecHits_*_*',
        'keep *_mtdRecHits_*_*',
        'keep *_mtdClusters_*_*',
        'keep recoTrack*_trackExtenderWithMTD_*_*',
        'keep TrackingRecHitsOwned_trackExtenderWithMTD_*_*',
        'keep *edmValueMap_trackExtenderWithMTD_*_*',
        'keep *_mtdTrackQualityMVA_*_*',
        'keep *_g4SimHits_*_*',
        'keep edmHepMCProduct_source_*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackingParticles_*_*',
        'keep *_prunedDigiSimLinks_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*',
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*',
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*',
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*',
        'keep *_simMuonCSCDigis_*_*',
        'keep *_simMuonRPCDigis_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonME0Digis_*_*',
        'keep EBSrFlagsSorted_simEcalDigis_*_*',
        'keep EESrFlagsSorted_simEcalDigis_*_*',
        'keep *_simHcalUnsuppressedDigis_*_*',
        'keep *_mix_EETimeDigi_*',
        'keep *_mix_EBTimeDigi_*',
        'keep *_simEcalUnsuppressedDigis_*_*',
        'keep *_simHGCalUnsuppressedDigis_EE_*',
        'keep *_simHGCalUnsuppressedDigis_HEfront_*',
        'keep *_simHGCalUnsuppressedDigis_HEback_*',
        'keep *_mix_MergedCaloTruth_*',
        'keep *_mix_MergedMtdTruth_*',
        'keep *_mix_MergedMtdTruthLC_*',
        'keep *_mix_MergedMtdTruthST_*',
        'keep *_mix_FTLBarrel_*',
        'keep *_mix_FTLEndcap_*',
        'keep *_mix_InitialVertices_*',
        'keep *_mtdRecoClusterToSimLayerClusterAssociation_*_*',
        'keep *_mtdSimLayerClusterToTPAssociation_*_*',
        'keep CrossingFramePlaybackInfoNew_*_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int6stdbitsetstdpairs_*_AffectedAPVList_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*',
        'keep *_mix_MergedTrackTruth_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'keep recoGenJets_ak*_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*',
        'keep recoGenMETs_*_*_*',
        'keep FEDRawDataCollection_source_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep *_MEtoEDMConverter_*_*',
        'keep *_randomEngineStateProducer_*_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'keep recoGenMETs_*_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*',
        'keep edmHepMCProduct_source_*_*',
        'keep SimTracks_g4SimHits_*_*',
        'keep SimVertexs_g4SimHits_*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackMCMatch_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*',
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*',
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*',
        'keep *_muonSimClassifier_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonME0Digis_*_*',
        'keep *_simHGCalUnsuppressedDigis_EE_*',
        'keep *_simHGCalUnsuppressedDigis_HEfront_*',
        'keep *_simHGCalUnsuppressedDigis_HEback_*',
        'keep *_mix_MergedCaloTruth_*',
        'keep *_mix_MergedMtdTruth_*',
        'keep *_mix_MergedMtdTruthLC_*',
        'keep *_mix_MergedMtdTruthST_*',
        'keep *_mix_FTLBarrel_*',
        'keep *_mix_FTLEndcap_*',
        'keep *_mix_InitialVertices_*',
        'keep *_mtdRecoClusterToSimLayerClusterAssociation_*_*',
        'keep *_mtdSimLayerClusterToTPAssociation_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*',
        'keep *_simCscTriggerPrimitiveDigis_*_*',
        'keep *_simDtTriggerPrimitiveDigis_*_*',
        'keep *_simRpcTriggerDigis_*_*',
        'keep *_simRctDigis_*_*',
        'keep *_simCsctfDigis_*_*',
        'keep *_simCsctfTrackDigis_*_*',
        'keep *_simDttfDigis_*_*',
        'keep *_simGctDigis_*_*',
        'keep *_simCaloStage1Digis_*_*',
        'keep *_simCaloStage1FinalDigis_*_*',
        'keep *_simCaloStage2Layer1Digis_*_*',
        'keep *_simCaloStage2Digis_*_*',
        'keep *_simGmtDigis_*_*',
        'keep *_simBmtfDigis_*_*',
        'keep *_simKBmtfDigis_*_*',
        'keep *_simOmtfDigis_*_*',
        'keep *_simEmtfDigis_*_*',
        'keep *_simGmtStage2Digis_*_*',
        'keep *_simGtDigis_*_*',
        'keep *_simGtStage2Digis_*_*',
        'keep *_cscTriggerPrimitiveDigis_*_*',
        'keep *_dtTriggerPrimitiveDigis_*_*',
        'keep *_rpcTriggerDigis_*_*',
        'keep *_rctDigis_*_*',
        'keep *_csctfDigis_*_*',
        'keep *_csctfTrackDigis_*_*',
        'keep *_dttfDigis_*_*',
        'keep *_gctDigis_*_*',
        'keep *_gmtDigis_*_*',
        'keep *_gtDigis_*_*',
        'keep *_gtEvmDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_l1L1GtObjectMap_*_*',
        'keep LumiDetails_lumiProducer_*_*',
        'keep LumiSummary_lumiProducer_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*',
        'keep *_simEmtfShowers_*_*',
        'keep *_simGmtShowerDigis_*_*',
        'keep l1tHGCalTriggerCellBXVector_l1tHGCalVFEProducer_*_*',
        'keep l1tHGCalTriggerCellBXVector_l1tHGCalConcentratorProducer_*_*',
        'keep l1tHGCalTowerBXVector_l1tHGCalTowerProducer_*_*',
        'keep l1tHGCalClusterBXVector_l1tHGCalBackEndLayer1Producer_*_*',
        'keep l1tHGCalMulticlusterBXVector_l1tHGCalBackEndLayer2Producer_*_*',
        'keep *_simMuonGEMPadDigis_*_*',
        'keep *_simMuonGEMPadDigiClusters_*_*',
        'keep *_simMuonME0PadDigis__*',
        'keep *_me0TriggerDigis__*',
        'keep *_simMuonME0PseudoReDigisCoarse__*',
        'keep *_me0RecHitsCoarse__*',
        'keep *_me0TriggerPseudoDigis__*',
        'keep *_me0TriggerConvertedPseudoDigis__*',
        'keep *_simKBmtfDigis_*_*',
        'keep *_l1tHGCalVFEProducerhgcalConcentratorProducer_*_*',
        'keep *_l1tHGCalBackEndLayer1Producer_*_*',
        'keep *_l1tHGCalBackEndLayer2Producer_*_*',
        'keep *_l1tHGCalTowerMapProducer_*_*',
        'keep *_l1tHGCalTowerProducer_*_*',
        'keep *_l1tHGCalEnergySplitTowerMapProducer_*_*',
        'keep *_l1tHGCalEnergySplitTowerProducer_*_*',
        'keep *_l1tEGammaClusterEmuProducer_*_*',
        'keep *_l1tVertexFinder_*_*',
        'keep *_l1tVertexFinderEmulator_*_*',
        'keep *_l1tTrackJets_*_*',
        'keep *_l1tTrackJetsExtended_*_*',
        'keep *_l1tTrackFastJets_*_*',
        'keep *_l1tTrackerEtMiss_*_*',
        'keep *_l1tTrackerHTMiss_*_*',
        'keep *_l1tTrackJetsEmulation_*_*',
        'keep *_l1tTrackJetsExtendedEmulation_*_*',
        'keep *_l1tTrackerEmuEtMiss_*_*',
        'keep *_l1tTrackerEmuHTMiss_*_*',
        'keep *_l1tTrackerEmuHTMissExtended_*_*',
        'keep *_l1tTrackTripletEmulation_*_*',
        'keep *_l1tTowerCalibration_*_*',
        'keep *_l1tCaloJet_*_*',
        'keep *_l1tCaloJetHTT_*_*',
        'keep *_l1tPhase2CaloJetEmulator_*_*',
        'keep *_l1tNNCaloTauProducer_*_*',
        'keep *_l1tNNCaloTauEmulator_*_*',
        'keep *_l1tPFClustersFromL1EGClusters_*_*',
        'keep *_l1tPFClustersFromCombinedCaloHCal_*_*',
        'keep *_l1tPFClustersFromCombinedCaloHF_*_*',
        'keep *_l1tPFClustersFromHGC3DClusters_*_*',
        'keep *_l1tPFTracksFromL1TracksBarrel_*_*',
        'keep *_l1tPFTracksFromL1TracksHGCal_*_*',
        'keep *_l1tSC4PFL1PuppiCorrectedEmulator_*_*',
        'keep *_l1tSC4PFL1PuppiCorrectedEmulatorMHT_*_*',
        'keep *_l1tSC4PFL1PuppiExtendedCorrectedEmulator_*_*',
        'keep *_l1tSC4PFL1PuppiExtendedCorrectedEmulatorMHT_*_*',
        'keep *_l1tSC8PFL1PuppiCorrectedEmulator_*_*',
        'keep *_l1tPhase1JetProducer9x9_*_*',
        'keep *_l1tPhase1JetCalibrator9x9_*_*',
        'keep *_l1tPhase1JetSumsProducer9x9_*_*',
        'keep *_l1tPhase1JetProducer9x9trimmed_*_*',
        'keep *_l1tPhase1JetCalibrator9x9trimmed_*_*',
        'keep *_l1tPhase1JetSumsProducer9x9trimmed_*_*',
        'keep *_l1tLayer1Barrel_*_*',
        'keep *_l1tLayer1HGCal_*_*',
        'keep *_l1tLayer1HGCalNoTK_*_*',
        'keep *_l1tLayer1HF_*_*',
        'keep *_l1tLayer1_*_*',
        'keep *_l1tLayer1BarrelExtended_*_*',
        'keep *_l1tLayer1HGCalExtended_*_*',
        'keep *_l1tLayer1Extended_*_*',
        'keep *_l1tLayer1EG_*_*',
        'keep *_l1tLayer2EG_*_*',
        'keep *_l1tMETPFProducer_*_*',
        'keep *_l1tMETMLProducer_*_*',
        'keep *_l1tNNTauProducer_*_*',
        'keep *_l1tNNTauProducerPuppi_*_*',
        'keep *_l1tHPSPFTauProducer_*_*',
        'keep *_l1tBJetProducerPuppi_*_*',
        'keep *_l1tBJetProducerPuppiCorrectedEmulator_*_*',
        'keep *_l1tTOoLLiPProducer_*_*',
        'keep *_l1tTOoLLiPProducerCorrectedEmulator_*_*',
        'keep *_TTStubsFromPhase2TrackerDigis_*_*',
        'keep *_TTClustersFromPhase2TrackerDigis_*_*',
        'keep *_l1tTTTracksFromExtendedTrackletEmulation_*_*',
        'keep *_l1tTTTracksFromTrackletEmulation_*_*',
        'keep *_l1tTkStubsGmt_*_*',
        'keep *_l1tTkMuonsGmt_*_*',
        'keep *_l1tSAMuonsGmt_*_*',
        'keep *_l1tTkMuonsGmtLowPtFix_*_*',
        'keep *_l1tPhase2L1CaloEGammaEmulator_*_*',
        'drop *_trackingtruthprod_*_*',
        'drop *_electrontruth_*_*',
        'keep *_mix_MergedTrackTruth_*',
        'keep CrossingFramePlaybackInfoNew_*_*_*',
        'keep *_simSiPixelDigis_*_*',
        'keep *_simSiStripDigis_*_*',
        'drop *_mix_simSiPixelDigis*_*',
        'drop *_mix_simSiStripDigis*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_trackingParticleRecoTrackAsssociation_*_*',
        'keep *_assoc2secStepTk_*_*',
        'keep *_assoc2thStepTk_*_*',
        'keep *_assoc2GsfTracks_*_*',
        'keep *_assocOutInConversionTracks_*_*',
        'keep *_assocInOutConversionTracks_*_*',
        'keep *_TTClusterAssociatorFromPixelDigis_*_*',
        'keep *_TTStubAssociatorFromPixelDigis_*_*',
        'keep *_simHitTPAssocProducer_*_*',
        'keep *_simMuonCSCDigis_*_*',
        'keep *_simMuonDTDigis_*_*',
        'keep *_simMuonRPCDigis_*_*',
        'keep *_simMuonGEMDigis_*_*',
        'keep *_simMuonME0PseudoDigis_*_*',
        'keep *_simMuonME0PseudoReDigis_*_*',
        'keep *_simMuonME0Digis_*_*',
        'keep *_simEcalDigis_*_*',
        'keep *_simEcalPreshowerDigis_*_*',
        'keep *_simEcalTriggerPrimitiveDigis_*_*',
        'keep *_simEcalEBTriggerPrimitiveDigis_*_*',
        'keep *_simEcalEBTriggerPrimitivePhase2Digis_*_*',
        'keep *_simHcalDigis_*_*',
        'keep ZDCDataFramesSorted_simHcalUnsuppressedDigis_*_*',
        'drop ZDCDataFramesSorted_mix_simHcalUnsuppressedDigis*_*',
        'keep *_simHcalTriggerPrimitiveDigis_*_*',
        'keep *_mix_HcalSamples_*',
        'keep *_mixData_HcalSamples_*',
        'keep *_mix_HcalHits_*',
        'keep *_mixData_HcalHits_*',
        'keep *_DMHcalTriggerPrimitiveDigis_*_*',
        'keep *_simHcalUnsuppressedDigis_*_*',
        'keep *_DMHcalDigis_*_*',
        'keep *_mix_EETimeDigi_*',
        'keep *_mix_EBTimeDigi_*',
        'keep *_simEcalUnsuppressedDigis_*_*',
        'keep *_simHGCalUnsuppressedDigis_EE_*',
        'keep *_simHGCalUnsuppressedDigis_HEfront_*',
        'keep *_simHGCalUnsuppressedDigis_HEback_*',
        'keep *_mix_MergedCaloTruth_*',
        'keep *_mix_MergedMtdTruth_*',
        'keep *_mix_MergedMtdTruthLC_*',
        'keep *_mix_MergedMtdTruthST_*',
        'keep *_mix_FTLBarrel_*',
        'keep *_mix_FTLEndcap_*',
        'keep *_mix_InitialVertices_*',
        'keep *_mtdRecoClusterToSimLayerClusterAssociation_*_*',
        'keep *_mtdSimLayerClusterToTPAssociation_*_*',
        'drop *_hlt*_*_*',
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*',
        'keep *_hltAK4CaloJetsIDPassed_*_*',
        'keep *_hltAK4CaloJets_*_*',
        'keep *_hltAK4PFJetsCorrected_*_*',
        'keep *_hltAK4PFJetsForTaus_*_*',
        'keep *_hltAK4PFJets_*_*',
        'keep *_hltAlCaEtaEBRechitsToDigis_*_*',
        'keep *_hltAlCaEtaEERechitsToDigis_*_*',
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegional_etaEcalRecHitsES_*',
        'keep *_hltAlCaPi0EBRechitsToDigis_*_*',
        'keep *_hltAlCaPi0EERechitsToDigis_*_*',
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegional_pi0EcalRecHitsES_*',
        'keep *_hltAlcaPixelClusterCounts_*_*',
        'keep *_hltBSoftMuonMu5L3_*_*',
        'keep *_hltCsc2DRecHits_*_*',
        'keep *_hltCscSegments_*_*',
        'keep *_hltDeepBLifetimeTagInfosPF_*_*',
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsCalo_*_*',
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsPF_*_*',
        'keep *_hltDeepSecondaryVertexTagInfosPF_*_*',
        'keep *_hltDisplacedhltIter4PFlowTrackSelectionHighPurity_*_*',
        'keep *_hltDoubletRecoveryPFlowTrackSelectionHighPurityPPOnAA_*_*',
        'keep *_hltDoubletRecoveryPFlowTrackSelectionHighPurity_*_*',
        'keep *_hltDt4DSegments_*_*',
        'keep *_hltEcalPhiSymFilter_*_*',
        'keep *_hltEcalRecHit_*_*',
        'keep *_hltEgammaCandidates_*_*',
        'keep *_hltEgammaGsfTracks_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltFastPVPixelTracksMerger_*_*',
        'keep *_hltFastPVPixelTracksRecover_*_*',
        'keep *_hltFastPVPixelTracks_*_*',
        'keep *_hltFastPVPixelVertices_*_*',
        'keep *_hltFastPixelBLifetimeL3Associator_*_*',
        'keep *_hltFastPrimaryVertex_*_*',
        'keep *_hltGlbTrkMuonCandsNoVtx_*_*',
        'keep *_hltGtStage2Digis_*_*',
        'keep *_hltHITrackingSiStripRawToClustersFacilityFullZeroSuppression_*_*',
        'keep *_hltHbhereco_*_*',
        'keep *_hltHfreco_*_*',
        'keep *_hltHoreco_*_*',
        'keep *_hltImpactParameterTagInfos_*_*',
        'keep *_hltInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_hltIsolPixelTrackProdHB_*_*',
        'keep *_hltIsolPixelTrackProdHE_*_*',
        'keep *_hltIter0PFlowCtfWithMaterialTracks_*_*',
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*',
        'keep *_hltIterL3GlbMuon_*_*',
        'keep *_hltIterL3MuonAndMuonFromL1Merged_*_*',
        'keep *_hltIterL3MuonMerged_*_*',
        'keep *_hltIterL3MuonsNoID_*_*',
        'keep *_hltIterL3Muons_*_*',
        'keep *_hltIterL3OIMuonTrackSelectionHighPurity_*_*',
        'keep *_hltL2MuonCandidatesNoVtx_*_*',
        'keep *_hltL2MuonCandidates_*_*',
        'keep *_hltL2MuonSeeds_*_*',
        'keep *_hltL2Muons_*_*',
        'keep *_hltL2TauJets_*_*',
        'keep *_hltL3MuonsIOHit_*_*',
        'keep *_hltL3MuonsLinksCombination_*_*',
        'keep *_hltL3MuonsOIHit_*_*',
        'keep *_hltL3MuonsOIState_*_*',
        'keep *_hltL3Muons_*_*',
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*',
        'keep *_hltL3NoFiltersNoVtxMuons_*_*',
        'keep *_hltL3TkFromL2OICombination_*_*',
        'keep *_hltL3TkTracksFromL2IOHit_*_*',
        'keep *_hltL3TkTracksFromL2OIHit_*_*',
        'keep *_hltL3TkTracksFromL2OIState_*_*',
        'keep *_hltL3TkTracksFromL2_*_*',
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*',
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*',
        'keep *_hltL3TrackCandidateFromL2OIState_*_*',
        'keep *_hltL3TrajSeedIOHit_*_*',
        'keep *_hltL3TrajSeedOIHit_*_*',
        'keep *_hltL3TrajSeedOIState_*_*',
        'keep *_hltL3TrajectorySeed_*_*',
        'keep *_hltMergedTracksForBTag_*_*',
        'keep *_hltMergedTracksPPOnAA_*_*',
        'keep *_hltMergedTracks_*_*',
        'keep *_hltMet_*_*',
        'keep *_hltMuonCSCDigis_*_*',
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*',
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*',
        'keep *_hltMuonDTDigis_*_*',
        'keep *_hltMuonRPCDigis_*_*',
        'keep *_hltOnlineBeamSpot_*_*',
        'keep *_hltPFJetForBtag_*_*',
        'keep *_hltPFJetForPNetAK8_*_*',
        'keep *_hltPFMETNoMuProducer_*_*',
        'keep *_hltPFMETProducer_*_*',
        'keep *_hltPFMETTypeOne_*_*',
        'keep *_hltPFMuonMerging_*_*',
        'keep *_hltPFTau35Track_*_*',
        'keep *_hltPFTau35_*_*',
        'keep *_hltPPSCalibrationRaw_*_*',
        'keep *_hltParticleFlowForTaus_*_*',
        'keep *_hltParticleFlow_*_*',
        'keep *_hltParticleNetDiscriminatorsJetTagsAK8_*_*',
        'keep *_hltParticleNetDiscriminatorsJetTags_*_*',
        'keep *_hltParticleNetJetTagInfos_*_*',
        'keep *_hltPixelTracksPPOnAA_*_*',
        'keep *_hltPixelTracks_*_*',
        'keep *_hltPixelVerticesPPOnAA_*_*',
        'keep *_hltPixelVertices_*_*',
        'keep *_hltRpcRecHits_*_*',
        'keep *_hltSelector4CentralJetsL1FastJet_*_*',
        'keep *_hltSelectorJets20L1FastJet_*_*',
        'keep *_hltSiPixelClustersAfterSplittingPPOnAA_*_*',
        'keep *_hltSiPixelClustersCache_*_*',
        'keep *_hltSiPixelClusters_*_*',
        'keep *_hltSiStripClusterizerForRawPrime_*_*',
        'keep *_hltSiStripClusters2ApproxClusters_*_*',
        'keep *_hltSiStripRawToClustersFacility_*_*',
        'keep *_hltTowerMakerForAll_*_*',
        'keep *_hltTriggerSummaryAOD_*_*',
        'keep *_hltTriggerSummaryRAW_*_*',
        'keep *_hltTrimmedPixelVerticesPPOnAA_*_*',
        'keep *_hltTrimmedPixelVertices_*_*',
        'keep *_hltVerticesL3_*_*',
        'keep *_hltVerticesPFFilterPPOnAA_*_*',
        'keep *_hltVerticesPFFilter_*_*',
        'keep *_hltVerticesPFSelector_*_*',
        'keep DetIds_hltSiStripRawToDigi_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep FEDRawDataCollection_rawDataRepacker_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*',
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*',
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*',
        'keep TrackingRecHitsOwned_hltL3Muons_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep recoCaloJets_*_*_*',
        'keep recoCaloMETs_*_*_*',
        'keep recoCaloMETs_hltMet_*_*',
        'keep recoCompositeCandidates_*_*_*',
        'keep recoElectrons_*_*_*',
        'keep recoIsolatedPixelTrackCandidates_*_*_*',
        'keep recoMETs_*_*_*',
        'keep recoPFJets_*_*_*',
        'keep recoPFTaus_*_*_*',
        'keep recoRecoChargedCandidates_*_*_*',
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*',
        'keep recoRecoEcalCandidates_*_*_*',
        'keep triggerTriggerEventWithRefs_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep triggerTriggerFilterObjectWithRefs_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep *_*_MergedTrackTruth_*',
        'keep *_*_StripDigiSimLink_*',
        'keep *_*_PixelDigiSimLink_*',
        'keep *_hltSiPixelClusters_*_*',
        'keep *_hltSiPhase2Clusters_*_*',
        'keep *_hltPhase2PixelTracks_*_*',
        'keep *_hltPhase2PixelVertices_*_*',
        'keep *_hltGeneralTracks_*_*',
        'keep *_hltOfflinePrimaryVertices_*_*',
        'keep *_hltHGCalRecHit_*_*',
        'keep *_hltEgammaGsfTracksL1Seeded_*_*',
        'keep recoMuons_muons1stStep_*_*',
        'keep *_hltTiclTrackstersCLUE3DHigh_*_*',
        'keep *_hltTiclTrackstersMerge_*_*',
        'keep *_hltPfTICL_*_*',
        'keep *_ticlSimTracksters_*_*',
        'keep *_ticlSimTICLCandidates_*_*',
        'keep *_ticlSimTrackstersFromCP_*_*',
        'keep *_SimTau*_*_*',
        'keep *_ticlTrackstersCLUE3DHigh_*_*',
        'keep *_ticlTrackstersMerge_*_*',
        'keep *_ticlTrackstersHFNoseTrkEM_*_*',
        'keep *_ticlTrackstersHFNoseEM_*_*',
        'keep *_ticlTrackstersHFNoseTrk_*_*',
        'keep *_ticlTrackstersHFNoseMIP_*_*',
        'keep *_ticlTrackstersHFNoseHAD_*_*',
        'keep *_ticlTrackstersHFNoseMerge_*_*',
        'keep *_pfTICL_*_*',
        'keep CaloParticles_mix_*_*',
        'keep SimClusters_mix_*_*',
        'keep *_layerClusterSimClusterAssociationProducer_*_*',
        'keep *_layerClusterCaloParticleAssociationProducer_*_*',
        'keep *_layerClusterSimTracksterAssociationProducer_*_*',
        'keep *_tracksterSimTracksterAssociationLinking_*_*',
        'keep *_tracksterSimTracksterAssociationPR_*_*',
        'keep *_tracksterSimTracksterAssociationLinkingPU_*_*',
        'keep *_tracksterSimTracksterAssociationPRPU_*_*',
        'keep *_tracksterSimTracksterAssociationLinkingbyCLUE3D_*_*',
        'keep *_tracksterSimTracksterAssociationPRbyCLUE3D_*_*'
     ) ),
    splitLevel = cms.untracked.int32(0)
)

process.FEVTEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring( (
        'drop *',
        'drop *',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep DetIds_siStripDigis_*_*',
        'keep DetIdedmEDCollection_siPixelDigis_*_*',
        'keep PixelFEDChanneledmNewDetSetVector_siPixelDigis_*_*',
        'keep *_siPixelClusters_*_*',
        'keep *_siStripClusters_*_*',
        'keep ClusterSummary_clusterSummaryProducer_*_*',
        'keep *_siPhase2Clusters_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_dt1DCosmicRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_dt4DSegments_*_*',
        'keep *_dt4DCosmicSegments_*_*',
        'keep *_cscSegments_*_*',
        'keep *_rpcRecHits_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_gemRecHits_*_*',
        'keep *_gemSegments_*_*',
        'keep *_me0RecHits_*_*',
        'keep *_me0Segments_*_*',
        'keep *_hbhereco_*_*',
        'keep *_hbheprereco_*_*',
        'keep *_hfprereco_*_*',
        'keep *_hfreco_*_*',
        'keep *_horeco_*_*',
        'keep HBHERecHitsSorted_hbherecoMB_*_*',
        'keep HORecHitsSorted_horecoMB_*_*',
        'keep HFRecHitsSorted_hfrecoMB_*_*',
        'keep ZDCDataFramesSorted_hcalDigis_*_*',
        'keep ZDCDataFramesSorted_castorDigis_*_*',
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*',
        'keep ZDCRecHitsSorted_zdcreco_*_*',
        'keep ZDCRecHitsSorted_zdcrecoRun3_*_*',
        'keep *_castorreco_*_*',
        'keep *_reducedHcalRecHits_*_*',
        'keep HcalUnpackerReport_castorDigis_*_*',
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*',
        'keep HcalUnpackerReport_hcalDigis_*_*',
        'keep *_HGCalRecHit_*_*',
        'keep recoCaloClusters_hgcalMergeLayerClusters_*_*',
        'keep *_hgcalMergeLayerClusters_timeLayerCluster_*',
        'keep *_hgcalMergeLayerClusters_InitialLayerClustersMask_*',
        'keep *_ecalPreshowerRecHit_*_*',
        'keep *_ecalRecHit_*_*',
        'keep *_ecalCompactTrigPrim_*_*',
        'keep *_ecalTPSkim_*_*',
        'keep EBSrFlagsSorted_ecalDigis__*',
        'keep EESrFlagsSorted_ecalDigis__*',
        'keep *_mix_EBTimeDigi_*',
        'keep *_mix_EETimeDigi_*',
        'keep *_ecalDetailedTimeRecHit_*_*',
        'keep *_hgcalMultiClusters_*_*',
        'keep *_iterHGCalMultiClusters_*_*',
        'keep *_hybridSuperClusters_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep *_multi5x5SuperClusters_*_*',
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep *_particleFlowSuperClusterECAL_*_*',
        'keep *_particleFlowSuperClusterOOTECAL_*_*',
        'drop recoClusterShapes_*_*_*',
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*',
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*',
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*',
        'keep *_selectDigi_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep recoCaloClusters_hybridSuperClusters_*_*',
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*',
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*',
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterHGCal__*',
        'keep recoCaloClusters_particleFlowSuperClusterHGCal__*',
        'keep *_particleFlowSuperClusterHGCal_*_*',
        'keep *_CkfElectronCandidates_*_*',
        'keep *_GsfGlobalElectronTest_*_*',
        'keep *_electronMergedSeeds_*_*',
        'keep recoGsfTrackExtras_electronGsfTracks_*_*',
        'keep recoTrackExtras_electronGsfTracks_*_*',
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*',
        'keep recoTracks_GsfGlobalElectronTest_*_*',
        'keep recoGsfTracks_electronGsfTracks_*_*',
        'keep recoTrackExtras_generalTracks_*_*',
        'keep TrackingRecHitsOwned_generalTracks_*_*',
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*',
        'keep uints_extraFromSeeds_*_*',
        'keep recoTrackExtras_beamhaloTracks_*_*',
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*',
        'keep recoTrackExtras_conversionStepTracks_*_*',
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*',
        'keep *_ctfPixelLess_*_*',
        'keep *_dedxTruncated40_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_conversionStepTracks_*_*',
        'keep recoTracks_beamhaloTracks_*_*',
        'keep recoTracks_ctfPixelLess_*_*',
        'keep *_dedxHarmonic2_*_*',
        'keep *_dedxPixelHarmonic2_*_*',
        'keep *_dedxHitInfo_*_*',
        'keep *_trackExtrapolator_*_*',
        'keep *_generalTracks_MVAValues_*',
        'keep *_generalTracks_MVAVals_*',
        'keep *_ak4CaloJets_*_*',
        'keep *_ak4PFJets_*_*',
        'keep *_ak4TrackJets_*_*',
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*',
        'keep *_towerMaker_*_*',
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*',
        'keep *_ak5CastorJets_*_*',
        'keep *_ak7CastorJets_*_*',
        'keep recoCaloJets_ak4CaloJets_*_*',
        'keep *_ak4CaloJets_rho_*',
        'keep *_ak4CaloJets_sigma_*',
        'keep *_ak4PFJetsCHS_*_*',
        'keep floatedmValueMap_puppi_*_*',
        'keep *_ak4PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppiSoftDrop_*_*',
        'keep recoPFJets_ak4PFJets_*_*',
        'keep *_ak4PFJets_rho_*',
        'keep *_ak4PFJets_sigma_*',
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*',
        'keep *_caloTowers_*_*',
        'keep *_CastorTowerReco_*_*',
        'keep *_ak4JetTracksAssociatorAtVertex_*_*',
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*',
        'keep *_ak4JetTracksAssociatorExplicit_*_*',
        'keep *_ak4JetExtender_*_*',
        'keep *_ak4JetID_*_*',
        'keep recoBasicJets_ak5CastorJets_*_*',
        'keep *_ak5CastorJets_rho_*',
        'keep *_ak5CastorJets_sigma_*',
        'keep *_ak5CastorJetID_*_*',
        'keep recoBasicJets_ak7CastorJets_*_*',
        'keep *_ak7CastorJets_rho_*',
        'keep *_ak7CastorJets_sigma_*',
        'keep *_ak7CastorJetID_*_*',
        'keep *_fixedGridRhoAll_*_*',
        'keep *_fixedGridRhoFastjetAll_*_*',
        'keep *_fixedGridRhoFastjetAllTmp_*_*',
        'keep *_fixedGridRhoFastjetCentral_*_*',
        'keep *_fixedGridRhoFastjetAllCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*',
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*',
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*',
        'keep recoHcalNoiseRBXs_hcalnoise_*_*',
        'keep recoEcalHaloData_EcalHaloData_*_*',
        'keep recoHcalHaloData_HcalHaloData_*_*',
        'keep recoCaloMETs_caloMet_*_*',
        'keep recoCaloMETs_caloMetBE_*_*',
        'keep recoCaloMETs_caloMetBEFO_*_*',
        'keep recoCaloMETs_caloMetM_*_*',
        'keep recoPFMETs_pfMet_*_*',
        'keep recoPFMETs_pfChMet_*_*',
        'keep floatedmValueMap_puppiNoLep_*_*',
        'keep recoPFMETs_pfMetPuppi_*_*',
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*',
        'keep HcalNoiseSummary_hcalnoise_*_*',
        'keep recoGlobalHaloData_GlobalHaloData_*_*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep *_MuonSeed_*_*',
        'keep *_ancientMuonSeed_*_*',
        'keep *_displacedMuonSeeds_*_*',
        'keep TrackingRecHitsOwned_globalMuons_*_*',
        'keep TrackingRecHitsOwned_tevMuons_*_*',
        'keep *_CosmicMuonSeed_*_*',
        'keep recoTrackExtras_cosmicMuons_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons_*_*',
        'keep recoTrackExtras_cosmicMuons1Leg_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*',
        'keep recoTracks_cosmicsVetoTracks_*_*',
        'keep recoMuons_muons_*_*',
        'keep booledmValueMap_muons_*_*',
        'keep doubleedmValueMap_muons_muPFMean*_*',
        'keep doubleedmValueMap_muons_muPFSum*_*',
        'keep *_muons_muonShowerInformation_*',
        'keep recoMuonTimeExtraedmValueMap_muons_*_*',
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*',
        'keep uintedmValueMap_muons_*_*',
        'keep *_particleFlow_muons_*',
        'keep recoMuons_displacedMuons_*_*',
        'keep booledmValueMap_displacedMuons_*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFMean*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFSum*_*',
        'keep recoMuonTimeExtraedmValueMap_displacedMuons_*_*',
        'keep uintedmValueMap_displacedMuons_*_*',
        'keep *_particleFlow_displacedMuons_*',
        'keep recoTracks_standAloneMuons_*_*',
        'keep recoTrackExtras_standAloneMuons_*_*',
        'keep TrackingRecHitsOwned_standAloneMuons_*_*',
        'keep recoTracks_globalMuons_*_*',
        'keep recoTrackExtras_globalMuons_*_*',
        'keep recoTracks_tevMuons_*_*',
        'keep recoTrackExtras_tevMuons_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_displacedTracks_*_*',
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*',
        'keep recoTracks_displacedGlobalMuons_*_*',
        'keep recoTrackExtras_displacedGlobalMuons_*_*',
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*',
        'keep recoTracks_cosmicMuons_*_*',
        'keep recoMuons_muonsFromCosmics_*_*',
        'keep recoTracks_cosmicMuons1Leg_*_*',
        'keep recoMuons_muonsFromCosmics1Leg_*_*',
        'keep recoTracks_refittedStandAloneMuons_*_*',
        'keep recoTrackExtras_refittedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTrackExtras_displacedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*',
        'keep *_muonReducedTrackExtras_*_*',
        'keep *_displacedMuonReducedTrackExtras_*_*',
        'keep *_muIsoDepositTk_*_*',
        'keep *_muIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muIsoDepositCalByAssociatorHits_*_*',
        'keep *_muIsoDepositJets_*_*',
        'keep *_muIsoDepositTkDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorTowersDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorHitsDisplaced_*_*',
        'keep *_muIsoDepositJetsDisplaced_*_*',
        'keep *_muGlobalIsoDepositCtfTk_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*',
        'keep *_muGlobalIsoDepositJets_*_*',
        'keep *_softPFMuonsTagInfos_*_*',
        'keep *_softPFElectronsTagInfos_*_*',
        'keep *_pfImpactParameterTagInfos_*_*',
        'keep *_pfSecondaryVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_pfGhostTrackVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*',
        'keep *_softPFElectronBJetTags_*_*',
        'keep *_softPFMuonBJetTags_*_*',
        'keep *_pfTrackCountingHighEffBJetTags_*_*',
        'keep *_pfJetProbabilityBJetTags_*_*',
        'keep *_pfJetBProbabilityBJetTags_*_*',
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*',
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*',
        'keep *_pfGhostTrackBJetTags_*_*',
        'keep *_pfCombinedMVAV2BJetTags_*_*',
        'keep *_inclusiveCandidateSecondaryVertices_*_*',
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*',
        'keep *_pfCombinedCvsLJetTags_*_*',
        'keep *_pfCombinedCvsBJetTags_*_*',
        'keep *_pfChargeBJetTags_*_*',
        'keep *_pfDeepCSVJetTags_*_*',
        'keep *_pfDeepCMVAJetTags_*_*',
        'keep *_pixelClusterTagInfos_*_*',
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*',
        'keep recoPFTaus_hpsPFTauProducer_*_*',
        'keep *_hpsPFTauBasicDiscriminators_*_*',
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*',
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*',
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*',
        'keep *_hpsPFTauTransverseImpactParameters_*_*',
        'keep  *_offlinePrimaryVertices__*',
        'keep *_offlinePrimaryVerticesWithBS_*_*',
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*',
        'keep *_nuclearInteractionMaker_*_*',
        'keep *_generalV0Candidates_*_*',
        'keep *_inclusiveSecondaryVertices_*_*',
        'keep *_offlinePrimaryVertices4D__*',
        'keep *_offlinePrimaryVertices4DWithBS__*',
        'keep *_trackTimeValueMapProducer_*_*',
        'keep *_tofPID_*_*',
        'keep *_gedPhotonCore_*_*',
        'keep *_gedPhotons_*_*',
        'keep recoPhotons_mustachePhotons_*_*',
        'keep recoPhotonCores_mustachePhotonCore_*_*',
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep recoGsfElectronCores_gsfElectronCores_*_*',
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*',
        'keep recoGsfElectrons_gsfElectrons_*_*',
        'keep recoGsfElectrons_gedGsfElectrons_*_*',
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*',
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*',
        'keep floatedmValueMap_eidRobustLoose_*_*',
        'keep floatedmValueMap_eidRobustTight_*_*',
        'keep floatedmValueMap_eidRobustHighEnergy_*_*',
        'keep floatedmValueMap_eidLoose_*_*',
        'keep floatedmValueMap_eidTight_*_*',
        'keep *_egmGedGsfElectronPFIsolation_*_*',
        'keep recoPhotonCores_gedPhotonCore_*_*',
        'keep recoPhotons_gedPhotons_*_*',
        'keep *_particleBasedIsolation_*_*',
        'keep recoPhotonCores_photonCore_*_*',
        'keep recoPhotons_photons_*_*',
        'keep recoPhotonCores_ootPhotonCore_*_*',
        'keep recoPhotons_ootPhotons_*_*',
        'keep recoConversions_conversions_*_*',
        'drop recoConversions_conversions_uncleanedConversions_*',
        'keep recoConversions_mustacheConversions_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep recoConversions_allConversions_*_*',
        'keep recoConversions_allConversionsOldEG_*_*',
        'keep recoTracks_ckfOutInTracksFromConversions_*_*',
        'keep recoTracks_ckfInOutTracksFromConversions_*_*',
        'keep recoConversions_uncleanedOnlyAllConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep *_PhotonIDProd_*_*',
        'keep *_PhotonIDProdGED_*_*',
        'keep *_hfRecoEcalCandidate_*_*',
        'keep *_hfEMClusters_*_*',
        'keep *_gedGsfElectronCores_*_*',
        'keep *_gedGsfElectrons_*_*',
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*',
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*',
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*',
        'keep *_lowPtGsfToTrackLinks_*_*',
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_rekeyLowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_lowPtGsfElectronID_*_*',
        'keep *_ecalDrivenGsfElectronCores_*_*',
        'keep *_ecalDrivenGsfElectrons_*_*',
        'keep *_ecalDrivenGsfElectronCoresHGC_*_*',
        'keep *_ecalDrivenGsfElectronsHGC_*_*',
        'keep *_photonCoreHGC_*_*',
        'keep *_photonsHGC_*_*',
        'keep *_pixelTracks_*_*',
        'keep *_pixelVertices_*_*',
        'keep recoPFClusters_particleFlowClusterECAL_*_*',
        'keep recoPFClusters_particleFlowClusterHCAL_*_*',
        'keep recoPFClusters_particleFlowClusterHO_*_*',
        'keep recoPFClusters_particleFlowClusterHF_*_*',
        'keep recoPFClusters_particleFlowClusterPS_*_*',
        'keep recoPFBlocks_particleFlowBlock_*_*',
        'keep recoPFCandidates_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlowTmp_electrons_*',
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*',
        'keep *_pfElectronTranslator_*_*',
        'keep *_pfPhotonTranslator_*_*',
        'keep *_trackerDrivenElectronSeeds_preid_*',
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*',
        'keep recoCaloClusters_particleFlowEGamma_*_*',
        'keep recoSuperClusters_particleFlowEGamma_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoConversions_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlow_*_*',
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*',
        'keep *_particleFlow_electrons_*',
        'keep *_particleFlow_photons_*',
        'keep *_particleFlow_muons_*',
        'keep recoCaloClusters_pfElectronTranslator_*_*',
        'keep recoPreshowerClusters_pfElectronTranslator_*_*',
        'keep recoSuperClusters_pfElectronTranslator_*_*',
        'keep recoCaloClusters_pfPhotonTranslator_*_*',
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*',
        'keep recoSuperClusters_pfPhotonTranslator_*_*',
        'keep recoPhotons_pfPhotonTranslator_*_*',
        'keep recoPhotonCores_pfPhotonTranslator_*_*',
        'keep recoConversions_pfPhotonTranslator_*_*',
        'keep *_particleFlowPtrs_*_*',
        'keep *_particleFlowTmpPtrs_*_*',
        'keep *_chargedHadronPFTrackIsolation_*_*',
        'keep recoPFRecHits_particleFlowRecHitHGC_Cleaned_*',
        'keep recoSuperClusters_simPFProducer_*_*',
        'keep *_ecalBarrelClusterFastTimer_*_*',
        'keep *_particleFlowSuperClusterHGCal_*_*',
        'keep recoPFBlocks_simPFProducer_*_*',
        'keep *_offlineBeamSpot_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_l1L1GtObjectMap_*_*',
        'keep L1MuGMTReadoutCollection_gtDigis_*_*',
        'keep L1GctEmCand*_gctDigis_*_*',
        'keep L1GctJetCand*_gctDigis_*_*',
        'keep L1GctEtHad*_gctDigis_*_*',
        'keep L1GctEtMiss*_gctDigis_*_*',
        'keep L1GctEtTotal*_gctDigis_*_*',
        'keep L1GctHtMiss*_gctDigis_*_*',
        'keep L1GctJetCounts*_gctDigis_*_*',
        'keep L1GctHFRingEtSums*_gctDigis_*_*',
        'keep L1GctHFBitCounts*_gctDigis_*_*',
        'keep LumiDetails_lumiProducer_*_*',
        'keep LumiSummary_lumiProducer_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*',
        'drop *_hlt*_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep DcsStatuss_hltScalersRawToDigi_*_*',
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*',
        'keep L1TriggerScalerss_scalersRawToDigi_*_*',
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep BeamSpotOnlines_scalersRawToDigi_*_*',
        'keep DcsStatuss_scalersRawToDigi_*_*',
        'keep CTPPSRecord_onlineMetaDataDigis_*_*',
        'keep DCSRecord_onlineMetaDataDigis_*_*',
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*',
        'keep recoBeamSpot_onlineMetaDataDigis_*_*',
        'keep *_tcdsDigis_*_*',
        'keep *_logErrorHarvester_*_*',
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*',
        'keep TotemFEDInfos_totemRPRawToDigi_*_*',
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*',
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*',
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*',
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*',
        'keep TotemFEDInfos_totemT2Digis_*_*',
        'keep TotemT2DigiedmNewDetSetVector_totemT2Digis_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemT2Digis_*_*',
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*',
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_diamondSampicLocalTracks_*_*',
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*',
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*',
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*',
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*',
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep *_ticlSimTracksters_*_*',
        'keep *_ticlSimTICLCandidates_*_*',
        'keep *_ticlSimTrackstersFromCP_*_*',
        'keep *_SimTau*_*_*',
        'keep *_ticlTrackstersCLUE3DHigh_*_*',
        'keep *_ticlTrackstersMerge_*_*',
        'keep *_ticlTrackstersHFNoseTrkEM_*_*',
        'keep *_ticlTrackstersHFNoseEM_*_*',
        'keep *_ticlTrackstersHFNoseTrk_*_*',
        'keep *_ticlTrackstersHFNoseMIP_*_*',
        'keep *_ticlTrackstersHFNoseHAD_*_*',
        'keep *_ticlTrackstersHFNoseMerge_*_*',
        'keep *_pfTICL_*_*',
        'keep CaloParticles_mix_*_*',
        'keep SimClusters_mix_*_*',
        'keep *_layerClusterSimClusterAssociationProducer_*_*',
        'keep *_layerClusterCaloParticleAssociationProducer_*_*',
        'keep *_layerClusterSimTracksterAssociationProducer_*_*',
        'keep *_tracksterSimTracksterAssociationLinking_*_*',
        'keep *_tracksterSimTracksterAssociationPR_*_*',
        'keep *_tracksterSimTracksterAssociationLinkingPU_*_*',
        'keep *_tracksterSimTracksterAssociationPRPU_*_*',
        'keep *_tracksterSimTracksterAssociationLinkingbyCLUE3D_*_*',
        'keep *_tracksterSimTracksterAssociationPRbyCLUE3D_*_*',
        'keep Phase2TrackerDigiedmDetSetVector_mix_*_*',
        'keep *_TTClustersFromPhase2TrackerDigis_*_*',
        'keep *_TTStubsFromPhase2TrackerDigis_*_*',
        'keep *_TrackerDTC_*_*',
        'keep *_*_Level1TTTracks_*',
        'keep *_muonGEMDigis_*_*',
        'keep *_muonGEMDigis_*_*',
        'keep *_mtdUncalibratedRecHits_*_*',
        'keep *_mtdTrackingRecHits_*_*',
        'keep *_mtdRecHits_*_*',
        'keep *_mtdClusters_*_*',
        'keep recoTrack*_trackExtenderWithMTD_*_*',
        'keep TrackingRecHitsOwned_trackExtenderWithMTD_*_*',
        'keep *edmValueMap_trackExtenderWithMTD_*_*',
        'keep *_mtdTrackQualityMVA_*_*'
     ) ),
    splitLevel = cms.untracked.int32(0)
)

process.FEVTHLTALLEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring( (
        'drop *',
        'drop *',
        'drop *',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep DetIds_siStripDigis_*_*',
        'keep DetIdedmEDCollection_siPixelDigis_*_*',
        'keep PixelFEDChanneledmNewDetSetVector_siPixelDigis_*_*',
        'keep *_siPixelClusters_*_*',
        'keep *_siStripClusters_*_*',
        'keep ClusterSummary_clusterSummaryProducer_*_*',
        'keep *_siPhase2Clusters_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_dt1DCosmicRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_dt4DSegments_*_*',
        'keep *_dt4DCosmicSegments_*_*',
        'keep *_cscSegments_*_*',
        'keep *_rpcRecHits_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_gemRecHits_*_*',
        'keep *_gemSegments_*_*',
        'keep *_me0RecHits_*_*',
        'keep *_me0Segments_*_*',
        'keep *_hbhereco_*_*',
        'keep *_hbheprereco_*_*',
        'keep *_hfprereco_*_*',
        'keep *_hfreco_*_*',
        'keep *_horeco_*_*',
        'keep HBHERecHitsSorted_hbherecoMB_*_*',
        'keep HORecHitsSorted_horecoMB_*_*',
        'keep HFRecHitsSorted_hfrecoMB_*_*',
        'keep ZDCDataFramesSorted_hcalDigis_*_*',
        'keep ZDCDataFramesSorted_castorDigis_*_*',
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*',
        'keep ZDCRecHitsSorted_zdcreco_*_*',
        'keep ZDCRecHitsSorted_zdcrecoRun3_*_*',
        'keep *_castorreco_*_*',
        'keep *_reducedHcalRecHits_*_*',
        'keep HcalUnpackerReport_castorDigis_*_*',
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*',
        'keep HcalUnpackerReport_hcalDigis_*_*',
        'keep *_HGCalRecHit_*_*',
        'keep recoCaloClusters_hgcalMergeLayerClusters_*_*',
        'keep *_hgcalMergeLayerClusters_timeLayerCluster_*',
        'keep *_hgcalMergeLayerClusters_InitialLayerClustersMask_*',
        'keep *_ecalPreshowerRecHit_*_*',
        'keep *_ecalRecHit_*_*',
        'keep *_ecalCompactTrigPrim_*_*',
        'keep *_ecalTPSkim_*_*',
        'keep EBSrFlagsSorted_ecalDigis__*',
        'keep EESrFlagsSorted_ecalDigis__*',
        'keep *_mix_EBTimeDigi_*',
        'keep *_mix_EETimeDigi_*',
        'keep *_ecalDetailedTimeRecHit_*_*',
        'keep *_hgcalMultiClusters_*_*',
        'keep *_iterHGCalMultiClusters_*_*',
        'keep *_hybridSuperClusters_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep *_multi5x5SuperClusters_*_*',
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep *_particleFlowSuperClusterECAL_*_*',
        'keep *_particleFlowSuperClusterOOTECAL_*_*',
        'drop recoClusterShapes_*_*_*',
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*',
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*',
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*',
        'keep *_selectDigi_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep recoCaloClusters_hybridSuperClusters_*_*',
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*',
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*',
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterHGCal__*',
        'keep recoCaloClusters_particleFlowSuperClusterHGCal__*',
        'keep *_particleFlowSuperClusterHGCal_*_*',
        'keep *_CkfElectronCandidates_*_*',
        'keep *_GsfGlobalElectronTest_*_*',
        'keep *_electronMergedSeeds_*_*',
        'keep recoGsfTrackExtras_electronGsfTracks_*_*',
        'keep recoTrackExtras_electronGsfTracks_*_*',
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*',
        'keep recoTracks_GsfGlobalElectronTest_*_*',
        'keep recoGsfTracks_electronGsfTracks_*_*',
        'keep recoTrackExtras_generalTracks_*_*',
        'keep TrackingRecHitsOwned_generalTracks_*_*',
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*',
        'keep uints_extraFromSeeds_*_*',
        'keep recoTrackExtras_beamhaloTracks_*_*',
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*',
        'keep recoTrackExtras_conversionStepTracks_*_*',
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*',
        'keep *_ctfPixelLess_*_*',
        'keep *_dedxTruncated40_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_conversionStepTracks_*_*',
        'keep recoTracks_beamhaloTracks_*_*',
        'keep recoTracks_ctfPixelLess_*_*',
        'keep *_dedxHarmonic2_*_*',
        'keep *_dedxPixelHarmonic2_*_*',
        'keep *_dedxHitInfo_*_*',
        'keep *_trackExtrapolator_*_*',
        'keep *_generalTracks_MVAValues_*',
        'keep *_generalTracks_MVAVals_*',
        'keep *_ak4CaloJets_*_*',
        'keep *_ak4PFJets_*_*',
        'keep *_ak4TrackJets_*_*',
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*',
        'keep *_towerMaker_*_*',
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*',
        'keep *_ak5CastorJets_*_*',
        'keep *_ak7CastorJets_*_*',
        'keep recoCaloJets_ak4CaloJets_*_*',
        'keep *_ak4CaloJets_rho_*',
        'keep *_ak4CaloJets_sigma_*',
        'keep *_ak4PFJetsCHS_*_*',
        'keep floatedmValueMap_puppi_*_*',
        'keep *_ak4PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppiSoftDrop_*_*',
        'keep recoPFJets_ak4PFJets_*_*',
        'keep *_ak4PFJets_rho_*',
        'keep *_ak4PFJets_sigma_*',
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*',
        'keep *_caloTowers_*_*',
        'keep *_CastorTowerReco_*_*',
        'keep *_ak4JetTracksAssociatorAtVertex_*_*',
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*',
        'keep *_ak4JetTracksAssociatorExplicit_*_*',
        'keep *_ak4JetExtender_*_*',
        'keep *_ak4JetID_*_*',
        'keep recoBasicJets_ak5CastorJets_*_*',
        'keep *_ak5CastorJets_rho_*',
        'keep *_ak5CastorJets_sigma_*',
        'keep *_ak5CastorJetID_*_*',
        'keep recoBasicJets_ak7CastorJets_*_*',
        'keep *_ak7CastorJets_rho_*',
        'keep *_ak7CastorJets_sigma_*',
        'keep *_ak7CastorJetID_*_*',
        'keep *_fixedGridRhoAll_*_*',
        'keep *_fixedGridRhoFastjetAll_*_*',
        'keep *_fixedGridRhoFastjetAllTmp_*_*',
        'keep *_fixedGridRhoFastjetCentral_*_*',
        'keep *_fixedGridRhoFastjetAllCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*',
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*',
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*',
        'keep recoHcalNoiseRBXs_hcalnoise_*_*',
        'keep recoEcalHaloData_EcalHaloData_*_*',
        'keep recoHcalHaloData_HcalHaloData_*_*',
        'keep recoCaloMETs_caloMet_*_*',
        'keep recoCaloMETs_caloMetBE_*_*',
        'keep recoCaloMETs_caloMetBEFO_*_*',
        'keep recoCaloMETs_caloMetM_*_*',
        'keep recoPFMETs_pfMet_*_*',
        'keep recoPFMETs_pfChMet_*_*',
        'keep floatedmValueMap_puppiNoLep_*_*',
        'keep recoPFMETs_pfMetPuppi_*_*',
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*',
        'keep HcalNoiseSummary_hcalnoise_*_*',
        'keep recoGlobalHaloData_GlobalHaloData_*_*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep *_MuonSeed_*_*',
        'keep *_ancientMuonSeed_*_*',
        'keep *_displacedMuonSeeds_*_*',
        'keep TrackingRecHitsOwned_globalMuons_*_*',
        'keep TrackingRecHitsOwned_tevMuons_*_*',
        'keep *_CosmicMuonSeed_*_*',
        'keep recoTrackExtras_cosmicMuons_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons_*_*',
        'keep recoTrackExtras_cosmicMuons1Leg_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*',
        'keep recoTracks_cosmicsVetoTracks_*_*',
        'keep recoMuons_muons_*_*',
        'keep booledmValueMap_muons_*_*',
        'keep doubleedmValueMap_muons_muPFMean*_*',
        'keep doubleedmValueMap_muons_muPFSum*_*',
        'keep *_muons_muonShowerInformation_*',
        'keep recoMuonTimeExtraedmValueMap_muons_*_*',
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*',
        'keep uintedmValueMap_muons_*_*',
        'keep *_particleFlow_muons_*',
        'keep recoMuons_displacedMuons_*_*',
        'keep booledmValueMap_displacedMuons_*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFMean*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFSum*_*',
        'keep recoMuonTimeExtraedmValueMap_displacedMuons_*_*',
        'keep uintedmValueMap_displacedMuons_*_*',
        'keep *_particleFlow_displacedMuons_*',
        'keep recoTracks_standAloneMuons_*_*',
        'keep recoTrackExtras_standAloneMuons_*_*',
        'keep TrackingRecHitsOwned_standAloneMuons_*_*',
        'keep recoTracks_globalMuons_*_*',
        'keep recoTrackExtras_globalMuons_*_*',
        'keep recoTracks_tevMuons_*_*',
        'keep recoTrackExtras_tevMuons_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_displacedTracks_*_*',
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*',
        'keep recoTracks_displacedGlobalMuons_*_*',
        'keep recoTrackExtras_displacedGlobalMuons_*_*',
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*',
        'keep recoTracks_cosmicMuons_*_*',
        'keep recoMuons_muonsFromCosmics_*_*',
        'keep recoTracks_cosmicMuons1Leg_*_*',
        'keep recoMuons_muonsFromCosmics1Leg_*_*',
        'keep recoTracks_refittedStandAloneMuons_*_*',
        'keep recoTrackExtras_refittedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTrackExtras_displacedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*',
        'keep *_muonReducedTrackExtras_*_*',
        'keep *_displacedMuonReducedTrackExtras_*_*',
        'keep *_muIsoDepositTk_*_*',
        'keep *_muIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muIsoDepositCalByAssociatorHits_*_*',
        'keep *_muIsoDepositJets_*_*',
        'keep *_muIsoDepositTkDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorTowersDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorHitsDisplaced_*_*',
        'keep *_muIsoDepositJetsDisplaced_*_*',
        'keep *_muGlobalIsoDepositCtfTk_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*',
        'keep *_muGlobalIsoDepositJets_*_*',
        'keep *_softPFMuonsTagInfos_*_*',
        'keep *_softPFElectronsTagInfos_*_*',
        'keep *_pfImpactParameterTagInfos_*_*',
        'keep *_pfSecondaryVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_pfGhostTrackVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*',
        'keep *_softPFElectronBJetTags_*_*',
        'keep *_softPFMuonBJetTags_*_*',
        'keep *_pfTrackCountingHighEffBJetTags_*_*',
        'keep *_pfJetProbabilityBJetTags_*_*',
        'keep *_pfJetBProbabilityBJetTags_*_*',
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*',
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*',
        'keep *_pfGhostTrackBJetTags_*_*',
        'keep *_pfCombinedMVAV2BJetTags_*_*',
        'keep *_inclusiveCandidateSecondaryVertices_*_*',
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*',
        'keep *_pfCombinedCvsLJetTags_*_*',
        'keep *_pfCombinedCvsBJetTags_*_*',
        'keep *_pfChargeBJetTags_*_*',
        'keep *_pfDeepCSVJetTags_*_*',
        'keep *_pfDeepCMVAJetTags_*_*',
        'keep *_pixelClusterTagInfos_*_*',
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*',
        'keep recoPFTaus_hpsPFTauProducer_*_*',
        'keep *_hpsPFTauBasicDiscriminators_*_*',
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*',
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*',
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*',
        'keep *_hpsPFTauTransverseImpactParameters_*_*',
        'keep  *_offlinePrimaryVertices__*',
        'keep *_offlinePrimaryVerticesWithBS_*_*',
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*',
        'keep *_nuclearInteractionMaker_*_*',
        'keep *_generalV0Candidates_*_*',
        'keep *_inclusiveSecondaryVertices_*_*',
        'keep *_offlinePrimaryVertices4D__*',
        'keep *_offlinePrimaryVertices4DWithBS__*',
        'keep *_trackTimeValueMapProducer_*_*',
        'keep *_tofPID_*_*',
        'keep *_gedPhotonCore_*_*',
        'keep *_gedPhotons_*_*',
        'keep recoPhotons_mustachePhotons_*_*',
        'keep recoPhotonCores_mustachePhotonCore_*_*',
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep recoGsfElectronCores_gsfElectronCores_*_*',
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*',
        'keep recoGsfElectrons_gsfElectrons_*_*',
        'keep recoGsfElectrons_gedGsfElectrons_*_*',
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*',
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*',
        'keep floatedmValueMap_eidRobustLoose_*_*',
        'keep floatedmValueMap_eidRobustTight_*_*',
        'keep floatedmValueMap_eidRobustHighEnergy_*_*',
        'keep floatedmValueMap_eidLoose_*_*',
        'keep floatedmValueMap_eidTight_*_*',
        'keep *_egmGedGsfElectronPFIsolation_*_*',
        'keep recoPhotonCores_gedPhotonCore_*_*',
        'keep recoPhotons_gedPhotons_*_*',
        'keep *_particleBasedIsolation_*_*',
        'keep recoPhotonCores_photonCore_*_*',
        'keep recoPhotons_photons_*_*',
        'keep recoPhotonCores_ootPhotonCore_*_*',
        'keep recoPhotons_ootPhotons_*_*',
        'keep recoConversions_conversions_*_*',
        'drop recoConversions_conversions_uncleanedConversions_*',
        'keep recoConversions_mustacheConversions_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep recoConversions_allConversions_*_*',
        'keep recoConversions_allConversionsOldEG_*_*',
        'keep recoTracks_ckfOutInTracksFromConversions_*_*',
        'keep recoTracks_ckfInOutTracksFromConversions_*_*',
        'keep recoConversions_uncleanedOnlyAllConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep *_PhotonIDProd_*_*',
        'keep *_PhotonIDProdGED_*_*',
        'keep *_hfRecoEcalCandidate_*_*',
        'keep *_hfEMClusters_*_*',
        'keep *_gedGsfElectronCores_*_*',
        'keep *_gedGsfElectrons_*_*',
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*',
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*',
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*',
        'keep *_lowPtGsfToTrackLinks_*_*',
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_rekeyLowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_lowPtGsfElectronID_*_*',
        'keep *_ecalDrivenGsfElectronCores_*_*',
        'keep *_ecalDrivenGsfElectrons_*_*',
        'keep *_ecalDrivenGsfElectronCoresHGC_*_*',
        'keep *_ecalDrivenGsfElectronsHGC_*_*',
        'keep *_photonCoreHGC_*_*',
        'keep *_photonsHGC_*_*',
        'keep *_pixelTracks_*_*',
        'keep *_pixelVertices_*_*',
        'keep recoPFClusters_particleFlowClusterECAL_*_*',
        'keep recoPFClusters_particleFlowClusterHCAL_*_*',
        'keep recoPFClusters_particleFlowClusterHO_*_*',
        'keep recoPFClusters_particleFlowClusterHF_*_*',
        'keep recoPFClusters_particleFlowClusterPS_*_*',
        'keep recoPFBlocks_particleFlowBlock_*_*',
        'keep recoPFCandidates_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlowTmp_electrons_*',
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*',
        'keep *_pfElectronTranslator_*_*',
        'keep *_pfPhotonTranslator_*_*',
        'keep *_trackerDrivenElectronSeeds_preid_*',
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*',
        'keep recoCaloClusters_particleFlowEGamma_*_*',
        'keep recoSuperClusters_particleFlowEGamma_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoConversions_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlow_*_*',
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*',
        'keep *_particleFlow_electrons_*',
        'keep *_particleFlow_photons_*',
        'keep *_particleFlow_muons_*',
        'keep recoCaloClusters_pfElectronTranslator_*_*',
        'keep recoPreshowerClusters_pfElectronTranslator_*_*',
        'keep recoSuperClusters_pfElectronTranslator_*_*',
        'keep recoCaloClusters_pfPhotonTranslator_*_*',
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*',
        'keep recoSuperClusters_pfPhotonTranslator_*_*',
        'keep recoPhotons_pfPhotonTranslator_*_*',
        'keep recoPhotonCores_pfPhotonTranslator_*_*',
        'keep recoConversions_pfPhotonTranslator_*_*',
        'keep *_particleFlowPtrs_*_*',
        'keep *_particleFlowTmpPtrs_*_*',
        'keep *_chargedHadronPFTrackIsolation_*_*',
        'keep recoPFRecHits_particleFlowRecHitHGC_Cleaned_*',
        'keep recoSuperClusters_simPFProducer_*_*',
        'keep *_ecalBarrelClusterFastTimer_*_*',
        'keep *_particleFlowSuperClusterHGCal_*_*',
        'keep recoPFBlocks_simPFProducer_*_*',
        'keep *_offlineBeamSpot_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_l1L1GtObjectMap_*_*',
        'keep L1MuGMTReadoutCollection_gtDigis_*_*',
        'keep L1GctEmCand*_gctDigis_*_*',
        'keep L1GctJetCand*_gctDigis_*_*',
        'keep L1GctEtHad*_gctDigis_*_*',
        'keep L1GctEtMiss*_gctDigis_*_*',
        'keep L1GctEtTotal*_gctDigis_*_*',
        'keep L1GctHtMiss*_gctDigis_*_*',
        'keep L1GctJetCounts*_gctDigis_*_*',
        'keep L1GctHFRingEtSums*_gctDigis_*_*',
        'keep L1GctHFBitCounts*_gctDigis_*_*',
        'keep LumiDetails_lumiProducer_*_*',
        'keep LumiSummary_lumiProducer_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*',
        'drop *_hlt*_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep DcsStatuss_hltScalersRawToDigi_*_*',
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*',
        'keep L1TriggerScalerss_scalersRawToDigi_*_*',
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep BeamSpotOnlines_scalersRawToDigi_*_*',
        'keep DcsStatuss_scalersRawToDigi_*_*',
        'keep CTPPSRecord_onlineMetaDataDigis_*_*',
        'keep DCSRecord_onlineMetaDataDigis_*_*',
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*',
        'keep recoBeamSpot_onlineMetaDataDigis_*_*',
        'keep *_tcdsDigis_*_*',
        'keep *_logErrorHarvester_*_*',
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*',
        'keep TotemFEDInfos_totemRPRawToDigi_*_*',
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*',
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*',
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*',
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*',
        'keep TotemFEDInfos_totemT2Digis_*_*',
        'keep TotemT2DigiedmNewDetSetVector_totemT2Digis_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemT2Digis_*_*',
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*',
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_diamondSampicLocalTracks_*_*',
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*',
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*',
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*',
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*',
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep *_ticlSimTracksters_*_*',
        'keep *_ticlSimTICLCandidates_*_*',
        'keep *_ticlSimTrackstersFromCP_*_*',
        'keep *_SimTau*_*_*',
        'keep *_ticlTrackstersCLUE3DHigh_*_*',
        'keep *_ticlTrackstersMerge_*_*',
        'keep *_ticlTrackstersHFNoseTrkEM_*_*',
        'keep *_ticlTrackstersHFNoseEM_*_*',
        'keep *_ticlTrackstersHFNoseTrk_*_*',
        'keep *_ticlTrackstersHFNoseMIP_*_*',
        'keep *_ticlTrackstersHFNoseHAD_*_*',
        'keep *_ticlTrackstersHFNoseMerge_*_*',
        'keep *_pfTICL_*_*',
        'keep CaloParticles_mix_*_*',
        'keep SimClusters_mix_*_*',
        'keep *_layerClusterSimClusterAssociationProducer_*_*',
        'keep *_layerClusterCaloParticleAssociationProducer_*_*',
        'keep *_layerClusterSimTracksterAssociationProducer_*_*',
        'keep *_tracksterSimTracksterAssociationLinking_*_*',
        'keep *_tracksterSimTracksterAssociationPR_*_*',
        'keep *_tracksterSimTracksterAssociationLinkingPU_*_*',
        'keep *_tracksterSimTracksterAssociationPRPU_*_*',
        'keep *_tracksterSimTracksterAssociationLinkingbyCLUE3D_*_*',
        'keep *_tracksterSimTracksterAssociationPRbyCLUE3D_*_*',
        'keep Phase2TrackerDigiedmDetSetVector_mix_*_*',
        'keep *_TTClustersFromPhase2TrackerDigis_*_*',
        'keep *_TTStubsFromPhase2TrackerDigis_*_*',
        'keep *_TrackerDTC_*_*',
        'keep *_*_Level1TTTracks_*',
        'keep *_muonGEMDigis_*_*',
        'keep *_muonGEMDigis_*_*',
        'keep *_mtdUncalibratedRecHits_*_*',
        'keep *_mtdTrackingRecHits_*_*',
        'keep *_mtdRecHits_*_*',
        'keep *_mtdClusters_*_*',
        'keep recoTrack*_trackExtenderWithMTD_*_*',
        'keep TrackingRecHitsOwned_trackExtenderWithMTD_*_*',
        'keep *edmValueMap_trackExtenderWithMTD_*_*',
        'keep *_mtdTrackQualityMVA_*_*',
        'keep *_*_*_HLT'
     ) ),
    splitLevel = cms.untracked.int32(0)
)

process.FEVTSIMEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring( (
        'drop *',
        'drop *',
        'drop *',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep DetIds_siStripDigis_*_*',
        'keep DetIdedmEDCollection_siPixelDigis_*_*',
        'keep PixelFEDChanneledmNewDetSetVector_siPixelDigis_*_*',
        'keep *_siPixelClusters_*_*',
        'keep *_siStripClusters_*_*',
        'keep ClusterSummary_clusterSummaryProducer_*_*',
        'keep *_siPhase2Clusters_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_dt1DCosmicRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_dt4DSegments_*_*',
        'keep *_dt4DCosmicSegments_*_*',
        'keep *_cscSegments_*_*',
        'keep *_rpcRecHits_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_gemRecHits_*_*',
        'keep *_gemSegments_*_*',
        'keep *_me0RecHits_*_*',
        'keep *_me0Segments_*_*',
        'keep *_hbhereco_*_*',
        'keep *_hbheprereco_*_*',
        'keep *_hfprereco_*_*',
        'keep *_hfreco_*_*',
        'keep *_horeco_*_*',
        'keep HBHERecHitsSorted_hbherecoMB_*_*',
        'keep HORecHitsSorted_horecoMB_*_*',
        'keep HFRecHitsSorted_hfrecoMB_*_*',
        'keep ZDCDataFramesSorted_hcalDigis_*_*',
        'keep ZDCDataFramesSorted_castorDigis_*_*',
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*',
        'keep ZDCRecHitsSorted_zdcreco_*_*',
        'keep ZDCRecHitsSorted_zdcrecoRun3_*_*',
        'keep *_castorreco_*_*',
        'keep *_reducedHcalRecHits_*_*',
        'keep HcalUnpackerReport_castorDigis_*_*',
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*',
        'keep HcalUnpackerReport_hcalDigis_*_*',
        'keep *_HGCalRecHit_*_*',
        'keep recoCaloClusters_hgcalMergeLayerClusters_*_*',
        'keep *_hgcalMergeLayerClusters_timeLayerCluster_*',
        'keep *_hgcalMergeLayerClusters_InitialLayerClustersMask_*',
        'keep *_ecalPreshowerRecHit_*_*',
        'keep *_ecalRecHit_*_*',
        'keep *_ecalCompactTrigPrim_*_*',
        'keep *_ecalTPSkim_*_*',
        'keep EBSrFlagsSorted_ecalDigis__*',
        'keep EESrFlagsSorted_ecalDigis__*',
        'keep *_mix_EBTimeDigi_*',
        'keep *_mix_EETimeDigi_*',
        'keep *_ecalDetailedTimeRecHit_*_*',
        'keep *_hgcalMultiClusters_*_*',
        'keep *_iterHGCalMultiClusters_*_*',
        'keep *_hybridSuperClusters_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep *_multi5x5SuperClusters_*_*',
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep *_particleFlowSuperClusterECAL_*_*',
        'keep *_particleFlowSuperClusterOOTECAL_*_*',
        'drop recoClusterShapes_*_*_*',
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*',
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*',
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*',
        'keep *_selectDigi_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep recoCaloClusters_hybridSuperClusters_*_*',
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*',
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*',
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterHGCal__*',
        'keep recoCaloClusters_particleFlowSuperClusterHGCal__*',
        'keep *_particleFlowSuperClusterHGCal_*_*',
        'keep *_CkfElectronCandidates_*_*',
        'keep *_GsfGlobalElectronTest_*_*',
        'keep *_electronMergedSeeds_*_*',
        'keep recoGsfTrackExtras_electronGsfTracks_*_*',
        'keep recoTrackExtras_electronGsfTracks_*_*',
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*',
        'keep recoTracks_GsfGlobalElectronTest_*_*',
        'keep recoGsfTracks_electronGsfTracks_*_*',
        'keep recoTrackExtras_generalTracks_*_*',
        'keep TrackingRecHitsOwned_generalTracks_*_*',
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*',
        'keep uints_extraFromSeeds_*_*',
        'keep recoTrackExtras_beamhaloTracks_*_*',
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*',
        'keep recoTrackExtras_conversionStepTracks_*_*',
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*',
        'keep *_ctfPixelLess_*_*',
        'keep *_dedxTruncated40_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_conversionStepTracks_*_*',
        'keep recoTracks_beamhaloTracks_*_*',
        'keep recoTracks_ctfPixelLess_*_*',
        'keep *_dedxHarmonic2_*_*',
        'keep *_dedxPixelHarmonic2_*_*',
        'keep *_dedxHitInfo_*_*',
        'keep *_trackExtrapolator_*_*',
        'keep *_generalTracks_MVAValues_*',
        'keep *_generalTracks_MVAVals_*',
        'keep *_ak4CaloJets_*_*',
        'keep *_ak4PFJets_*_*',
        'keep *_ak4TrackJets_*_*',
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*',
        'keep *_towerMaker_*_*',
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*',
        'keep *_ak5CastorJets_*_*',
        'keep *_ak7CastorJets_*_*',
        'keep recoCaloJets_ak4CaloJets_*_*',
        'keep *_ak4CaloJets_rho_*',
        'keep *_ak4CaloJets_sigma_*',
        'keep *_ak4PFJetsCHS_*_*',
        'keep floatedmValueMap_puppi_*_*',
        'keep *_ak4PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppiSoftDrop_*_*',
        'keep recoPFJets_ak4PFJets_*_*',
        'keep *_ak4PFJets_rho_*',
        'keep *_ak4PFJets_sigma_*',
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*',
        'keep *_caloTowers_*_*',
        'keep *_CastorTowerReco_*_*',
        'keep *_ak4JetTracksAssociatorAtVertex_*_*',
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*',
        'keep *_ak4JetTracksAssociatorExplicit_*_*',
        'keep *_ak4JetExtender_*_*',
        'keep *_ak4JetID_*_*',
        'keep recoBasicJets_ak5CastorJets_*_*',
        'keep *_ak5CastorJets_rho_*',
        'keep *_ak5CastorJets_sigma_*',
        'keep *_ak5CastorJetID_*_*',
        'keep recoBasicJets_ak7CastorJets_*_*',
        'keep *_ak7CastorJets_rho_*',
        'keep *_ak7CastorJets_sigma_*',
        'keep *_ak7CastorJetID_*_*',
        'keep *_fixedGridRhoAll_*_*',
        'keep *_fixedGridRhoFastjetAll_*_*',
        'keep *_fixedGridRhoFastjetAllTmp_*_*',
        'keep *_fixedGridRhoFastjetCentral_*_*',
        'keep *_fixedGridRhoFastjetAllCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*',
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*',
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*',
        'keep recoHcalNoiseRBXs_hcalnoise_*_*',
        'keep recoEcalHaloData_EcalHaloData_*_*',
        'keep recoHcalHaloData_HcalHaloData_*_*',
        'keep recoCaloMETs_caloMet_*_*',
        'keep recoCaloMETs_caloMetBE_*_*',
        'keep recoCaloMETs_caloMetBEFO_*_*',
        'keep recoCaloMETs_caloMetM_*_*',
        'keep recoPFMETs_pfMet_*_*',
        'keep recoPFMETs_pfChMet_*_*',
        'keep floatedmValueMap_puppiNoLep_*_*',
        'keep recoPFMETs_pfMetPuppi_*_*',
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*',
        'keep HcalNoiseSummary_hcalnoise_*_*',
        'keep recoGlobalHaloData_GlobalHaloData_*_*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep *_MuonSeed_*_*',
        'keep *_ancientMuonSeed_*_*',
        'keep *_displacedMuonSeeds_*_*',
        'keep TrackingRecHitsOwned_globalMuons_*_*',
        'keep TrackingRecHitsOwned_tevMuons_*_*',
        'keep *_CosmicMuonSeed_*_*',
        'keep recoTrackExtras_cosmicMuons_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons_*_*',
        'keep recoTrackExtras_cosmicMuons1Leg_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*',
        'keep recoTracks_cosmicsVetoTracks_*_*',
        'keep recoMuons_muons_*_*',
        'keep booledmValueMap_muons_*_*',
        'keep doubleedmValueMap_muons_muPFMean*_*',
        'keep doubleedmValueMap_muons_muPFSum*_*',
        'keep *_muons_muonShowerInformation_*',
        'keep recoMuonTimeExtraedmValueMap_muons_*_*',
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*',
        'keep uintedmValueMap_muons_*_*',
        'keep *_particleFlow_muons_*',
        'keep recoMuons_displacedMuons_*_*',
        'keep booledmValueMap_displacedMuons_*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFMean*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFSum*_*',
        'keep recoMuonTimeExtraedmValueMap_displacedMuons_*_*',
        'keep uintedmValueMap_displacedMuons_*_*',
        'keep *_particleFlow_displacedMuons_*',
        'keep recoTracks_standAloneMuons_*_*',
        'keep recoTrackExtras_standAloneMuons_*_*',
        'keep TrackingRecHitsOwned_standAloneMuons_*_*',
        'keep recoTracks_globalMuons_*_*',
        'keep recoTrackExtras_globalMuons_*_*',
        'keep recoTracks_tevMuons_*_*',
        'keep recoTrackExtras_tevMuons_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_displacedTracks_*_*',
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*',
        'keep recoTracks_displacedGlobalMuons_*_*',
        'keep recoTrackExtras_displacedGlobalMuons_*_*',
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*',
        'keep recoTracks_cosmicMuons_*_*',
        'keep recoMuons_muonsFromCosmics_*_*',
        'keep recoTracks_cosmicMuons1Leg_*_*',
        'keep recoMuons_muonsFromCosmics1Leg_*_*',
        'keep recoTracks_refittedStandAloneMuons_*_*',
        'keep recoTrackExtras_refittedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTrackExtras_displacedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*',
        'keep *_muonReducedTrackExtras_*_*',
        'keep *_displacedMuonReducedTrackExtras_*_*',
        'keep *_muIsoDepositTk_*_*',
        'keep *_muIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muIsoDepositCalByAssociatorHits_*_*',
        'keep *_muIsoDepositJets_*_*',
        'keep *_muIsoDepositTkDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorTowersDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorHitsDisplaced_*_*',
        'keep *_muIsoDepositJetsDisplaced_*_*',
        'keep *_muGlobalIsoDepositCtfTk_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*',
        'keep *_muGlobalIsoDepositJets_*_*',
        'keep *_softPFMuonsTagInfos_*_*',
        'keep *_softPFElectronsTagInfos_*_*',
        'keep *_pfImpactParameterTagInfos_*_*',
        'keep *_pfSecondaryVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_pfGhostTrackVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*',
        'keep *_softPFElectronBJetTags_*_*',
        'keep *_softPFMuonBJetTags_*_*',
        'keep *_pfTrackCountingHighEffBJetTags_*_*',
        'keep *_pfJetProbabilityBJetTags_*_*',
        'keep *_pfJetBProbabilityBJetTags_*_*',
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*',
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*',
        'keep *_pfGhostTrackBJetTags_*_*',
        'keep *_pfCombinedMVAV2BJetTags_*_*',
        'keep *_inclusiveCandidateSecondaryVertices_*_*',
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*',
        'keep *_pfCombinedCvsLJetTags_*_*',
        'keep *_pfCombinedCvsBJetTags_*_*',
        'keep *_pfChargeBJetTags_*_*',
        'keep *_pfDeepCSVJetTags_*_*',
        'keep *_pfDeepCMVAJetTags_*_*',
        'keep *_pixelClusterTagInfos_*_*',
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*',
        'keep recoPFTaus_hpsPFTauProducer_*_*',
        'keep *_hpsPFTauBasicDiscriminators_*_*',
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*',
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*',
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*',
        'keep *_hpsPFTauTransverseImpactParameters_*_*',
        'keep  *_offlinePrimaryVertices__*',
        'keep *_offlinePrimaryVerticesWithBS_*_*',
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*',
        'keep *_nuclearInteractionMaker_*_*',
        'keep *_generalV0Candidates_*_*',
        'keep *_inclusiveSecondaryVertices_*_*',
        'keep *_offlinePrimaryVertices4D__*',
        'keep *_offlinePrimaryVertices4DWithBS__*',
        'keep *_trackTimeValueMapProducer_*_*',
        'keep *_tofPID_*_*',
        'keep *_gedPhotonCore_*_*',
        'keep *_gedPhotons_*_*',
        'keep recoPhotons_mustachePhotons_*_*',
        'keep recoPhotonCores_mustachePhotonCore_*_*',
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep recoGsfElectronCores_gsfElectronCores_*_*',
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*',
        'keep recoGsfElectrons_gsfElectrons_*_*',
        'keep recoGsfElectrons_gedGsfElectrons_*_*',
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*',
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*',
        'keep floatedmValueMap_eidRobustLoose_*_*',
        'keep floatedmValueMap_eidRobustTight_*_*',
        'keep floatedmValueMap_eidRobustHighEnergy_*_*',
        'keep floatedmValueMap_eidLoose_*_*',
        'keep floatedmValueMap_eidTight_*_*',
        'keep *_egmGedGsfElectronPFIsolation_*_*',
        'keep recoPhotonCores_gedPhotonCore_*_*',
        'keep recoPhotons_gedPhotons_*_*',
        'keep *_particleBasedIsolation_*_*',
        'keep recoPhotonCores_photonCore_*_*',
        'keep recoPhotons_photons_*_*',
        'keep recoPhotonCores_ootPhotonCore_*_*',
        'keep recoPhotons_ootPhotons_*_*',
        'keep recoConversions_conversions_*_*',
        'drop recoConversions_conversions_uncleanedConversions_*',
        'keep recoConversions_mustacheConversions_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep recoConversions_allConversions_*_*',
        'keep recoConversions_allConversionsOldEG_*_*',
        'keep recoTracks_ckfOutInTracksFromConversions_*_*',
        'keep recoTracks_ckfInOutTracksFromConversions_*_*',
        'keep recoConversions_uncleanedOnlyAllConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep *_PhotonIDProd_*_*',
        'keep *_PhotonIDProdGED_*_*',
        'keep *_hfRecoEcalCandidate_*_*',
        'keep *_hfEMClusters_*_*',
        'keep *_gedGsfElectronCores_*_*',
        'keep *_gedGsfElectrons_*_*',
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*',
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*',
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*',
        'keep *_lowPtGsfToTrackLinks_*_*',
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_rekeyLowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_lowPtGsfElectronID_*_*',
        'keep *_ecalDrivenGsfElectronCores_*_*',
        'keep *_ecalDrivenGsfElectrons_*_*',
        'keep *_ecalDrivenGsfElectronCoresHGC_*_*',
        'keep *_ecalDrivenGsfElectronsHGC_*_*',
        'keep *_photonCoreHGC_*_*',
        'keep *_photonsHGC_*_*',
        'keep *_pixelTracks_*_*',
        'keep *_pixelVertices_*_*',
        'keep recoPFClusters_particleFlowClusterECAL_*_*',
        'keep recoPFClusters_particleFlowClusterHCAL_*_*',
        'keep recoPFClusters_particleFlowClusterHO_*_*',
        'keep recoPFClusters_particleFlowClusterHF_*_*',
        'keep recoPFClusters_particleFlowClusterPS_*_*',
        'keep recoPFBlocks_particleFlowBlock_*_*',
        'keep recoPFCandidates_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlowTmp_electrons_*',
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*',
        'keep *_pfElectronTranslator_*_*',
        'keep *_pfPhotonTranslator_*_*',
        'keep *_trackerDrivenElectronSeeds_preid_*',
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*',
        'keep recoCaloClusters_particleFlowEGamma_*_*',
        'keep recoSuperClusters_particleFlowEGamma_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoConversions_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlow_*_*',
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*',
        'keep *_particleFlow_electrons_*',
        'keep *_particleFlow_photons_*',
        'keep *_particleFlow_muons_*',
        'keep recoCaloClusters_pfElectronTranslator_*_*',
        'keep recoPreshowerClusters_pfElectronTranslator_*_*',
        'keep recoSuperClusters_pfElectronTranslator_*_*',
        'keep recoCaloClusters_pfPhotonTranslator_*_*',
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*',
        'keep recoSuperClusters_pfPhotonTranslator_*_*',
        'keep recoPhotons_pfPhotonTranslator_*_*',
        'keep recoPhotonCores_pfPhotonTranslator_*_*',
        'keep recoConversions_pfPhotonTranslator_*_*',
        'keep *_particleFlowPtrs_*_*',
        'keep *_particleFlowTmpPtrs_*_*',
        'keep *_chargedHadronPFTrackIsolation_*_*',
        'keep recoPFRecHits_particleFlowRecHitHGC_Cleaned_*',
        'keep recoSuperClusters_simPFProducer_*_*',
        'keep *_ecalBarrelClusterFastTimer_*_*',
        'keep *_particleFlowSuperClusterHGCal_*_*',
        'keep recoPFBlocks_simPFProducer_*_*',
        'keep *_offlineBeamSpot_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_l1L1GtObjectMap_*_*',
        'keep L1MuGMTReadoutCollection_gtDigis_*_*',
        'keep L1GctEmCand*_gctDigis_*_*',
        'keep L1GctJetCand*_gctDigis_*_*',
        'keep L1GctEtHad*_gctDigis_*_*',
        'keep L1GctEtMiss*_gctDigis_*_*',
        'keep L1GctEtTotal*_gctDigis_*_*',
        'keep L1GctHtMiss*_gctDigis_*_*',
        'keep L1GctJetCounts*_gctDigis_*_*',
        'keep L1GctHFRingEtSums*_gctDigis_*_*',
        'keep L1GctHFBitCounts*_gctDigis_*_*',
        'keep LumiDetails_lumiProducer_*_*',
        'keep LumiSummary_lumiProducer_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*',
        'drop *_hlt*_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep DcsStatuss_hltScalersRawToDigi_*_*',
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*',
        'keep L1TriggerScalerss_scalersRawToDigi_*_*',
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep BeamSpotOnlines_scalersRawToDigi_*_*',
        'keep DcsStatuss_scalersRawToDigi_*_*',
        'keep CTPPSRecord_onlineMetaDataDigis_*_*',
        'keep DCSRecord_onlineMetaDataDigis_*_*',
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*',
        'keep recoBeamSpot_onlineMetaDataDigis_*_*',
        'keep *_tcdsDigis_*_*',
        'keep *_logErrorHarvester_*_*',
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*',
        'keep TotemFEDInfos_totemRPRawToDigi_*_*',
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*',
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*',
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*',
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*',
        'keep TotemFEDInfos_totemT2Digis_*_*',
        'keep TotemT2DigiedmNewDetSetVector_totemT2Digis_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemT2Digis_*_*',
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*',
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_diamondSampicLocalTracks_*_*',
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*',
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*',
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*',
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*',
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep *_ticlSimTracksters_*_*',
        'keep *_ticlSimTICLCandidates_*_*',
        'keep *_ticlSimTrackstersFromCP_*_*',
        'keep *_SimTau*_*_*',
        'keep *_ticlTrackstersCLUE3DHigh_*_*',
        'keep *_ticlTrackstersMerge_*_*',
        'keep *_ticlTrackstersHFNoseTrkEM_*_*',
        'keep *_ticlTrackstersHFNoseEM_*_*',
        'keep *_ticlTrackstersHFNoseTrk_*_*',
        'keep *_ticlTrackstersHFNoseMIP_*_*',
        'keep *_ticlTrackstersHFNoseHAD_*_*',
        'keep *_ticlTrackstersHFNoseMerge_*_*',
        'keep *_pfTICL_*_*',
        'keep CaloParticles_mix_*_*',
        'keep SimClusters_mix_*_*',
        'keep *_layerClusterSimClusterAssociationProducer_*_*',
        'keep *_layerClusterCaloParticleAssociationProducer_*_*',
        'keep *_layerClusterSimTracksterAssociationProducer_*_*',
        'keep *_tracksterSimTracksterAssociationLinking_*_*',
        'keep *_tracksterSimTracksterAssociationPR_*_*',
        'keep *_tracksterSimTracksterAssociationLinkingPU_*_*',
        'keep *_tracksterSimTracksterAssociationPRPU_*_*',
        'keep *_tracksterSimTracksterAssociationLinkingbyCLUE3D_*_*',
        'keep *_tracksterSimTracksterAssociationPRbyCLUE3D_*_*',
        'keep Phase2TrackerDigiedmDetSetVector_mix_*_*',
        'keep *_TTClustersFromPhase2TrackerDigis_*_*',
        'keep *_TTStubsFromPhase2TrackerDigis_*_*',
        'keep *_TrackerDTC_*_*',
        'keep *_*_Level1TTTracks_*',
        'keep *_muonGEMDigis_*_*',
        'keep *_muonGEMDigis_*_*',
        'keep *_mtdUncalibratedRecHits_*_*',
        'keep *_mtdTrackingRecHits_*_*',
        'keep *_mtdRecHits_*_*',
        'keep *_mtdClusters_*_*',
        'keep recoTrack*_trackExtenderWithMTD_*_*',
        'keep TrackingRecHitsOwned_trackExtenderWithMTD_*_*',
        'keep *edmValueMap_trackExtenderWithMTD_*_*',
        'keep *_mtdTrackQualityMVA_*_*',
        'keep *_g4SimHits_*_*',
        'keep edmHepMCProduct_source_*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackingParticles_*_*',
        'keep *_prunedDigiSimLinks_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*',
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*',
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*',
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*',
        'keep *_simMuonCSCDigis_*_*',
        'keep *_simMuonRPCDigis_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonME0Digis_*_*',
        'keep EBSrFlagsSorted_simEcalDigis_*_*',
        'keep EESrFlagsSorted_simEcalDigis_*_*',
        'keep *_simHcalUnsuppressedDigis_*_*',
        'keep *_mix_EETimeDigi_*',
        'keep *_mix_EBTimeDigi_*',
        'keep *_simEcalUnsuppressedDigis_*_*',
        'keep *_simHGCalUnsuppressedDigis_EE_*',
        'keep *_simHGCalUnsuppressedDigis_HEfront_*',
        'keep *_simHGCalUnsuppressedDigis_HEback_*',
        'keep *_mix_MergedCaloTruth_*',
        'keep *_mix_MergedMtdTruth_*',
        'keep *_mix_MergedMtdTruthLC_*',
        'keep *_mix_MergedMtdTruthST_*',
        'keep *_mix_FTLBarrel_*',
        'keep *_mix_FTLEndcap_*',
        'keep *_mix_InitialVertices_*',
        'keep *_mtdRecoClusterToSimLayerClusterAssociation_*_*',
        'keep *_mtdSimLayerClusterToTPAssociation_*_*',
        'keep CrossingFramePlaybackInfoNew_*_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int6stdbitsetstdpairs_*_AffectedAPVList_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*',
        'keep *_mix_MergedTrackTruth_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'keep recoGenJets_ak*_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*',
        'keep recoGenMETs_*_*_*',
        'keep FEDRawDataCollection_source_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep *_MEtoEDMConverter_*_*',
        'keep *_randomEngineStateProducer_*_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'keep recoGenMETs_*_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*',
        'keep edmHepMCProduct_source_*_*',
        'keep SimTracks_g4SimHits_*_*',
        'keep SimVertexs_g4SimHits_*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackMCMatch_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*',
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*',
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*',
        'keep *_muonSimClassifier_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonME0Digis_*_*',
        'keep *_simHGCalUnsuppressedDigis_EE_*',
        'keep *_simHGCalUnsuppressedDigis_HEfront_*',
        'keep *_simHGCalUnsuppressedDigis_HEback_*',
        'keep *_mix_MergedCaloTruth_*',
        'keep *_mix_MergedMtdTruth_*',
        'keep *_mix_MergedMtdTruthLC_*',
        'keep *_mix_MergedMtdTruthST_*',
        'keep *_mix_FTLBarrel_*',
        'keep *_mix_FTLEndcap_*',
        'keep *_mix_InitialVertices_*',
        'keep *_mtdRecoClusterToSimLayerClusterAssociation_*_*',
        'keep *_mtdSimLayerClusterToTPAssociation_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*'
     ) ),
    splitLevel = cms.untracked.int32(0)
)

process.GENEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep *_externalLHEProducer_LHEScriptOutput_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'keep recoGenJets_ak*_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*',
        'keep recoGenMETs_*_*_*',
        'keep *_randomEngineStateProducer_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.GENRAWEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *',
        'drop *',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'keep edmHepMCProduct_source_*_*',
        'keep SimTracks_g4SimHits_*_*',
        'keep SimVertexs_g4SimHits_*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackingParticles_*_*',
        'keep *_prunedDigiSimLinks_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*',
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*',
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*',
        'keep *_muonSimClassifier_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonME0Digis_*_*',
        'keep *_simHGCalUnsuppressedDigis_EE_*',
        'keep *_simHGCalUnsuppressedDigis_HEfront_*',
        'keep *_simHGCalUnsuppressedDigis_HEback_*',
        'keep *_mix_MergedCaloTruth_*',
        'keep *_mix_MergedMtdTruth_*',
        'keep *_mix_MergedMtdTruthLC_*',
        'keep *_mix_MergedMtdTruthST_*',
        'keep *_mix_FTLBarrel_*',
        'keep *_mix_FTLEndcap_*',
        'keep *_mix_InitialVertices_*',
        'keep *_mtdRecoClusterToSimLayerClusterAssociation_*_*',
        'keep *_mtdSimLayerClusterToTPAssociation_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*',
        'keep recoGenMETs_*_*_*',
        'keep recoGenJets_ak*_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*',
        'keep *_MEtoEDMConverter_*_*',
        'keep *_randomEngineStateProducer_*_*',
        'keep FEDRawDataCollection_source_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep *_logErrorHarvester_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.GeneratorInterfaceAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*'
    )
)

process.GeneratorInterfaceLHE = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep *_externalLHEProducer_LHEScriptOutput_*'
    )
)

process.GeneratorInterfaceRAW = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*'
    )
)

process.GeneratorInterfaceRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*'
    )
)

process.GlobalMuonTrackMatcher = cms.PSet(
    GlobalMuonTrackMatcher = cms.PSet(
        Chi2Cut_1 = cms.double(50.0),
        Chi2Cut_2 = cms.double(50.0),
        Chi2Cut_3 = cms.double(200.0),
        DeltaDCut_1 = cms.double(2.5),
        DeltaDCut_2 = cms.double(10.0),
        DeltaDCut_3 = cms.double(15.0),
        DeltaRCut_1 = cms.double(0.1),
        DeltaRCut_2 = cms.double(0.2),
        DeltaRCut_3 = cms.double(1.0),
        Eta_threshold = cms.double(1.2),
        LocChi2Cut = cms.double(20.0),
        MinP = cms.double(2.5),
        MinPt = cms.double(1.0),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        Pt_threshold1 = cms.double(0.0),
        Pt_threshold2 = cms.double(999999999.0),
        Quality_1 = cms.double(20.0),
        Quality_2 = cms.double(15.0),
        Quality_3 = cms.double(7.0)
    )
)

process.GroupedCkfTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('Chi2'),
    foundHitBonus = cms.double(10.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(5),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.HFNose_noise_fC = cms.PSet(
    doseMap = cms.string(''),
    scaleByDose = cms.bool(False),
    scaleByDoseAlgo = cms.uint32(0),
    scaleByDoseFactor = cms.double(1),
    values = cms.vdouble(0.336430626, 0.336430626, 0.256328096)
)

process.HFRecalParameterBlock = cms.PSet(
    HFdepthOneParameterA = cms.vdouble(
        0.004123, 0.00602, 0.008201, 0.010489, 0.013379,
        0.016997, 0.021464, 0.027371, 0.034195, 0.044807,
        0.058939, 0.125497
    ),
    HFdepthOneParameterB = cms.vdouble(
        -4e-06, -2e-06, 0.0, 4e-06, 1.5e-05,
        2.6e-05, 6.3e-05, 8.4e-05, 0.00016, 0.000107,
        0.000425, 0.000209
    ),
    HFdepthTwoParameterA = cms.vdouble(
        0.002861, 0.004168, 0.0064, 0.008388, 0.011601,
        0.014425, 0.018633, 0.023232, 0.028274, 0.035447,
        0.051579, 0.086593
    ),
    HFdepthTwoParameterB = cms.vdouble(
        -2e-06, -0.0, -7e-06, -6e-06, -2e-06,
        1e-06, 1.9e-05, 3.1e-05, 6.7e-05, 1.2e-05,
        0.000157, -3e-06
    )
)

process.HGCAL_cceParams_toUse = cms.PSet(
    cceParamFine = cms.vdouble(1500000000000000.0, -3.00394e-17, 0.318083),
    cceParamThick = cms.vdouble(600000000000000.0, -7.96539e-16, 0.251751),
    cceParamThin = cms.vdouble(1500000000000000.0, -3.09878e-16, 0.211207)
)

process.HGCAL_chargeCollectionEfficiencies = cms.PSet(
    values = cms.vdouble(1.0, 1.0, 1.0)
)

process.HGCAL_ileakParam_toUse = cms.PSet(
    ileakParam = cms.vdouble(0.993, -42.668)
)

process.HGCAL_noise_fC = cms.PSet(
    doseMap = cms.string(''),
    scaleByDose = cms.bool(False),
    scaleByDoseAlgo = cms.uint32(0),
    scaleByDoseFactor = cms.double(1),
    values = cms.vdouble(0.32041011999999996, 0.384492144, 0.32041011999999996)
)

process.HGCAL_noise_heback = cms.PSet(
    doseMap = cms.string(''),
    noise_MIP = cms.double(0.01),
    referenceIdark = cms.double(-1),
    referenceXtalk = cms.double(-1),
    scaleByDose = cms.bool(False),
    scaleByDoseAlgo = cms.uint32(0),
    scaleByDoseFactor = cms.double(1),
    sipmMap = cms.string('')
)

process.HGCAL_noises = cms.PSet(
    values = cms.vdouble(2000.0, 2400.0, 2000.0)
)

process.HGCAL_reco_constants = cms.PSet(
    dEdXweights = cms.vdouble(
        0.0, 9.205, 11.129999999999999, 11.129999999999999, 11.129999999999999,
        11.129999999999999, 11.129999999999999, 11.129999999999999, 11.129999999999999, 11.129999999999999,
        11.129999999999999, 11.129999999999999, 11.129999999999999, 11.129999999999999, 11.129999999999999,
        11.129999999999999, 11.129999999999999, 11.129999999999999, 13.2, 13.2,
        13.2, 13.2, 13.2, 13.2, 13.2,
        13.2, 35.745000000000005, 59.665000000000006, 60.7, 60.7,
        60.7, 60.7, 60.7, 60.7, 60.7,
        60.7, 60.7, 71.89, 83.08, 83.255,
        83.52000000000001, 83.61, 83.61, 83.61, 83.61,
        83.61, 83.61, 83.61
    ),
    fcPerEle = cms.double(0.00016020506),
    fcPerMip = cms.vdouble(
        2.06, 3.43, 5.15, 2.06, 3.43,
        5.15
    ),
    maxNumberOfThickIndices = cms.uint32(6),
    noiseMip = cms.PSet(
        noise_MIP = cms.double(0.01),
        referenceIdark = cms.double(-1),
        referenceXtalk = cms.double(-1),
        scaleByDose = cms.bool(False),
        scaleByDoseAlgo = cms.uint32(0),
        scaleByDoseFactor = cms.double(1)
    ),
    noises = cms.vdouble(
        2000.0, 2400.0, 2000.0, 2000.0, 2400.0,
        2000.0
    ),
    positionDeltaRho2 = cms.double(1.69),
    sciThicknessCorrection = cms.double(0.69),
    thicknessCorrection = cms.vdouble(
        0.75, 0.76, 0.75, 0.85, 0.85,
        0.84
    ),
    thresholdW0 = cms.vdouble(2.9, 2.9, 2.9)
)

process.HLTDEBUGEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *',
        'keep *_logErrorHarvester_*_*',
        'drop *_hlt*_*_*',
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*',
        'keep *_hltAK4CaloJetsIDPassed_*_*',
        'keep *_hltAK4CaloJets_*_*',
        'keep *_hltAK4PFJetsCorrected_*_*',
        'keep *_hltAK4PFJetsForTaus_*_*',
        'keep *_hltAK4PFJets_*_*',
        'keep *_hltAlCaEtaEBRechitsToDigis_*_*',
        'keep *_hltAlCaEtaEERechitsToDigis_*_*',
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegional_etaEcalRecHitsES_*',
        'keep *_hltAlCaPi0EBRechitsToDigis_*_*',
        'keep *_hltAlCaPi0EERechitsToDigis_*_*',
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegional_pi0EcalRecHitsES_*',
        'keep *_hltAlcaPixelClusterCounts_*_*',
        'keep *_hltBSoftMuonMu5L3_*_*',
        'keep *_hltCsc2DRecHits_*_*',
        'keep *_hltCscSegments_*_*',
        'keep *_hltDeepBLifetimeTagInfosPF_*_*',
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsCalo_*_*',
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsPF_*_*',
        'keep *_hltDeepSecondaryVertexTagInfosPF_*_*',
        'keep *_hltDisplacedhltIter4PFlowTrackSelectionHighPurity_*_*',
        'keep *_hltDoubletRecoveryPFlowTrackSelectionHighPurityPPOnAA_*_*',
        'keep *_hltDoubletRecoveryPFlowTrackSelectionHighPurity_*_*',
        'keep *_hltDt4DSegments_*_*',
        'keep *_hltEcalPhiSymFilter_*_*',
        'keep *_hltEcalRecHit_*_*',
        'keep *_hltEgammaCandidates_*_*',
        'keep *_hltEgammaGsfTracks_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltFastPVPixelTracksMerger_*_*',
        'keep *_hltFastPVPixelTracksRecover_*_*',
        'keep *_hltFastPVPixelTracks_*_*',
        'keep *_hltFastPVPixelVertices_*_*',
        'keep *_hltFastPixelBLifetimeL3Associator_*_*',
        'keep *_hltFastPrimaryVertex_*_*',
        'keep *_hltGlbTrkMuonCandsNoVtx_*_*',
        'keep *_hltGtStage2Digis_*_*',
        'keep *_hltHITrackingSiStripRawToClustersFacilityFullZeroSuppression_*_*',
        'keep *_hltHbhereco_*_*',
        'keep *_hltHfreco_*_*',
        'keep *_hltHoreco_*_*',
        'keep *_hltImpactParameterTagInfos_*_*',
        'keep *_hltInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_hltIsolPixelTrackProdHB_*_*',
        'keep *_hltIsolPixelTrackProdHE_*_*',
        'keep *_hltIter0PFlowCtfWithMaterialTracks_*_*',
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*',
        'keep *_hltIterL3GlbMuon_*_*',
        'keep *_hltIterL3MuonAndMuonFromL1Merged_*_*',
        'keep *_hltIterL3MuonMerged_*_*',
        'keep *_hltIterL3MuonsNoID_*_*',
        'keep *_hltIterL3Muons_*_*',
        'keep *_hltIterL3OIMuonTrackSelectionHighPurity_*_*',
        'keep *_hltL2MuonCandidatesNoVtx_*_*',
        'keep *_hltL2MuonCandidates_*_*',
        'keep *_hltL2MuonSeeds_*_*',
        'keep *_hltL2Muons_*_*',
        'keep *_hltL2TauJets_*_*',
        'keep *_hltL3MuonsIOHit_*_*',
        'keep *_hltL3MuonsLinksCombination_*_*',
        'keep *_hltL3MuonsOIHit_*_*',
        'keep *_hltL3MuonsOIState_*_*',
        'keep *_hltL3Muons_*_*',
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*',
        'keep *_hltL3NoFiltersNoVtxMuons_*_*',
        'keep *_hltL3TkFromL2OICombination_*_*',
        'keep *_hltL3TkTracksFromL2IOHit_*_*',
        'keep *_hltL3TkTracksFromL2OIHit_*_*',
        'keep *_hltL3TkTracksFromL2OIState_*_*',
        'keep *_hltL3TkTracksFromL2_*_*',
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*',
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*',
        'keep *_hltL3TrackCandidateFromL2OIState_*_*',
        'keep *_hltL3TrajSeedIOHit_*_*',
        'keep *_hltL3TrajSeedOIHit_*_*',
        'keep *_hltL3TrajSeedOIState_*_*',
        'keep *_hltL3TrajectorySeed_*_*',
        'keep *_hltMergedTracksForBTag_*_*',
        'keep *_hltMergedTracksPPOnAA_*_*',
        'keep *_hltMergedTracks_*_*',
        'keep *_hltMet_*_*',
        'keep *_hltMuonCSCDigis_*_*',
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*',
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*',
        'keep *_hltMuonDTDigis_*_*',
        'keep *_hltMuonRPCDigis_*_*',
        'keep *_hltOnlineBeamSpot_*_*',
        'keep *_hltPFJetForBtag_*_*',
        'keep *_hltPFJetForPNetAK8_*_*',
        'keep *_hltPFMETNoMuProducer_*_*',
        'keep *_hltPFMETProducer_*_*',
        'keep *_hltPFMETTypeOne_*_*',
        'keep *_hltPFMuonMerging_*_*',
        'keep *_hltPFTau35Track_*_*',
        'keep *_hltPFTau35_*_*',
        'keep *_hltPPSCalibrationRaw_*_*',
        'keep *_hltParticleFlowForTaus_*_*',
        'keep *_hltParticleFlow_*_*',
        'keep *_hltParticleNetDiscriminatorsJetTagsAK8_*_*',
        'keep *_hltParticleNetDiscriminatorsJetTags_*_*',
        'keep *_hltParticleNetJetTagInfos_*_*',
        'keep *_hltPixelTracksPPOnAA_*_*',
        'keep *_hltPixelTracks_*_*',
        'keep *_hltPixelVerticesPPOnAA_*_*',
        'keep *_hltPixelVertices_*_*',
        'keep *_hltRpcRecHits_*_*',
        'keep *_hltSelector4CentralJetsL1FastJet_*_*',
        'keep *_hltSelectorJets20L1FastJet_*_*',
        'keep *_hltSiPixelClustersAfterSplittingPPOnAA_*_*',
        'keep *_hltSiPixelClustersCache_*_*',
        'keep *_hltSiPixelClusters_*_*',
        'keep *_hltSiStripClusterizerForRawPrime_*_*',
        'keep *_hltSiStripClusters2ApproxClusters_*_*',
        'keep *_hltSiStripRawToClustersFacility_*_*',
        'keep *_hltTowerMakerForAll_*_*',
        'keep *_hltTriggerSummaryAOD_*_*',
        'keep *_hltTriggerSummaryRAW_*_*',
        'keep *_hltTrimmedPixelVerticesPPOnAA_*_*',
        'keep *_hltTrimmedPixelVertices_*_*',
        'keep *_hltVerticesL3_*_*',
        'keep *_hltVerticesPFFilterPPOnAA_*_*',
        'keep *_hltVerticesPFFilter_*_*',
        'keep *_hltVerticesPFSelector_*_*',
        'keep DetIds_hltSiStripRawToDigi_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep FEDRawDataCollection_rawDataRepacker_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*',
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*',
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*',
        'keep TrackingRecHitsOwned_hltL3Muons_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep recoCaloJets_*_*_*',
        'keep recoCaloMETs_*_*_*',
        'keep recoCaloMETs_hltMet_*_*',
        'keep recoCompositeCandidates_*_*_*',
        'keep recoElectrons_*_*_*',
        'keep recoIsolatedPixelTrackCandidates_*_*_*',
        'keep recoMETs_*_*_*',
        'keep recoPFJets_*_*_*',
        'keep recoPFTaus_*_*_*',
        'keep recoRecoChargedCandidates_*_*_*',
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*',
        'keep recoRecoEcalCandidates_*_*_*',
        'keep triggerTriggerEventWithRefs_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep triggerTriggerFilterObjectWithRefs_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.HLTDebugFEVT = cms.PSet(
    outputCommands = cms.vstring(
        'drop *_hlt*_*_*',
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*',
        'keep *_hltAK4CaloJetsIDPassed_*_*',
        'keep *_hltAK4CaloJets_*_*',
        'keep *_hltAK4PFJetsCorrected_*_*',
        'keep *_hltAK4PFJetsForTaus_*_*',
        'keep *_hltAK4PFJets_*_*',
        'keep *_hltAlCaEtaEBRechitsToDigis_*_*',
        'keep *_hltAlCaEtaEERechitsToDigis_*_*',
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegional_etaEcalRecHitsES_*',
        'keep *_hltAlCaPi0EBRechitsToDigis_*_*',
        'keep *_hltAlCaPi0EERechitsToDigis_*_*',
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegional_pi0EcalRecHitsES_*',
        'keep *_hltAlcaPixelClusterCounts_*_*',
        'keep *_hltBSoftMuonMu5L3_*_*',
        'keep *_hltCsc2DRecHits_*_*',
        'keep *_hltCscSegments_*_*',
        'keep *_hltDeepBLifetimeTagInfosPF_*_*',
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsCalo_*_*',
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsPF_*_*',
        'keep *_hltDeepSecondaryVertexTagInfosPF_*_*',
        'keep *_hltDisplacedhltIter4PFlowTrackSelectionHighPurity_*_*',
        'keep *_hltDoubletRecoveryPFlowTrackSelectionHighPurityPPOnAA_*_*',
        'keep *_hltDoubletRecoveryPFlowTrackSelectionHighPurity_*_*',
        'keep *_hltDt4DSegments_*_*',
        'keep *_hltEcalPhiSymFilter_*_*',
        'keep *_hltEcalRecHit_*_*',
        'keep *_hltEgammaCandidates_*_*',
        'keep *_hltEgammaGsfTracks_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltFastPVPixelTracksMerger_*_*',
        'keep *_hltFastPVPixelTracksRecover_*_*',
        'keep *_hltFastPVPixelTracks_*_*',
        'keep *_hltFastPVPixelVertices_*_*',
        'keep *_hltFastPixelBLifetimeL3Associator_*_*',
        'keep *_hltFastPrimaryVertex_*_*',
        'keep *_hltGlbTrkMuonCandsNoVtx_*_*',
        'keep *_hltGtStage2Digis_*_*',
        'keep *_hltHITrackingSiStripRawToClustersFacilityFullZeroSuppression_*_*',
        'keep *_hltHbhereco_*_*',
        'keep *_hltHfreco_*_*',
        'keep *_hltHoreco_*_*',
        'keep *_hltImpactParameterTagInfos_*_*',
        'keep *_hltInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_hltIsolPixelTrackProdHB_*_*',
        'keep *_hltIsolPixelTrackProdHE_*_*',
        'keep *_hltIter0PFlowCtfWithMaterialTracks_*_*',
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*',
        'keep *_hltIterL3GlbMuon_*_*',
        'keep *_hltIterL3MuonAndMuonFromL1Merged_*_*',
        'keep *_hltIterL3MuonMerged_*_*',
        'keep *_hltIterL3MuonsNoID_*_*',
        'keep *_hltIterL3Muons_*_*',
        'keep *_hltIterL3OIMuonTrackSelectionHighPurity_*_*',
        'keep *_hltL2MuonCandidatesNoVtx_*_*',
        'keep *_hltL2MuonCandidates_*_*',
        'keep *_hltL2MuonSeeds_*_*',
        'keep *_hltL2Muons_*_*',
        'keep *_hltL2TauJets_*_*',
        'keep *_hltL3MuonsIOHit_*_*',
        'keep *_hltL3MuonsLinksCombination_*_*',
        'keep *_hltL3MuonsOIHit_*_*',
        'keep *_hltL3MuonsOIState_*_*',
        'keep *_hltL3Muons_*_*',
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*',
        'keep *_hltL3NoFiltersNoVtxMuons_*_*',
        'keep *_hltL3TkFromL2OICombination_*_*',
        'keep *_hltL3TkTracksFromL2IOHit_*_*',
        'keep *_hltL3TkTracksFromL2OIHit_*_*',
        'keep *_hltL3TkTracksFromL2OIState_*_*',
        'keep *_hltL3TkTracksFromL2_*_*',
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*',
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*',
        'keep *_hltL3TrackCandidateFromL2OIState_*_*',
        'keep *_hltL3TrajSeedIOHit_*_*',
        'keep *_hltL3TrajSeedOIHit_*_*',
        'keep *_hltL3TrajSeedOIState_*_*',
        'keep *_hltL3TrajectorySeed_*_*',
        'keep *_hltMergedTracksForBTag_*_*',
        'keep *_hltMergedTracksPPOnAA_*_*',
        'keep *_hltMergedTracks_*_*',
        'keep *_hltMet_*_*',
        'keep *_hltMuonCSCDigis_*_*',
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*',
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*',
        'keep *_hltMuonDTDigis_*_*',
        'keep *_hltMuonRPCDigis_*_*',
        'keep *_hltOnlineBeamSpot_*_*',
        'keep *_hltPFJetForBtag_*_*',
        'keep *_hltPFJetForPNetAK8_*_*',
        'keep *_hltPFMETNoMuProducer_*_*',
        'keep *_hltPFMETProducer_*_*',
        'keep *_hltPFMETTypeOne_*_*',
        'keep *_hltPFMuonMerging_*_*',
        'keep *_hltPFTau35Track_*_*',
        'keep *_hltPFTau35_*_*',
        'keep *_hltPPSCalibrationRaw_*_*',
        'keep *_hltParticleFlowForTaus_*_*',
        'keep *_hltParticleFlow_*_*',
        'keep *_hltParticleNetDiscriminatorsJetTagsAK8_*_*',
        'keep *_hltParticleNetDiscriminatorsJetTags_*_*',
        'keep *_hltParticleNetJetTagInfos_*_*',
        'keep *_hltPixelTracksPPOnAA_*_*',
        'keep *_hltPixelTracks_*_*',
        'keep *_hltPixelVerticesPPOnAA_*_*',
        'keep *_hltPixelVertices_*_*',
        'keep *_hltRpcRecHits_*_*',
        'keep *_hltSelector4CentralJetsL1FastJet_*_*',
        'keep *_hltSelectorJets20L1FastJet_*_*',
        'keep *_hltSiPixelClustersAfterSplittingPPOnAA_*_*',
        'keep *_hltSiPixelClustersCache_*_*',
        'keep *_hltSiPixelClusters_*_*',
        'keep *_hltSiStripClusterizerForRawPrime_*_*',
        'keep *_hltSiStripClusters2ApproxClusters_*_*',
        'keep *_hltSiStripRawToClustersFacility_*_*',
        'keep *_hltTowerMakerForAll_*_*',
        'keep *_hltTriggerSummaryAOD_*_*',
        'keep *_hltTriggerSummaryRAW_*_*',
        'keep *_hltTrimmedPixelVerticesPPOnAA_*_*',
        'keep *_hltTrimmedPixelVertices_*_*',
        'keep *_hltVerticesL3_*_*',
        'keep *_hltVerticesPFFilterPPOnAA_*_*',
        'keep *_hltVerticesPFFilter_*_*',
        'keep *_hltVerticesPFSelector_*_*',
        'keep DetIds_hltSiStripRawToDigi_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep FEDRawDataCollection_rawDataRepacker_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*',
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*',
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*',
        'keep TrackingRecHitsOwned_hltL3Muons_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep recoCaloJets_*_*_*',
        'keep recoCaloMETs_*_*_*',
        'keep recoCaloMETs_hltMet_*_*',
        'keep recoCompositeCandidates_*_*_*',
        'keep recoElectrons_*_*_*',
        'keep recoIsolatedPixelTrackCandidates_*_*_*',
        'keep recoMETs_*_*_*',
        'keep recoPFJets_*_*_*',
        'keep recoPFTaus_*_*_*',
        'keep recoRecoChargedCandidates_*_*_*',
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*',
        'keep recoRecoEcalCandidates_*_*_*',
        'keep triggerTriggerEventWithRefs_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep triggerTriggerFilterObjectWithRefs_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*'
    )
)

process.HLTDebugRAW = cms.PSet(
    outputCommands = cms.vstring(
        'drop *_hlt*_*_*',
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*',
        'keep *_hltAK4CaloJetsIDPassed_*_*',
        'keep *_hltAK4CaloJets_*_*',
        'keep *_hltAK4PFJetsCorrected_*_*',
        'keep *_hltAK4PFJetsForTaus_*_*',
        'keep *_hltAK4PFJets_*_*',
        'keep *_hltAlCaEtaEBRechitsToDigis_*_*',
        'keep *_hltAlCaEtaEERechitsToDigis_*_*',
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegional_etaEcalRecHitsES_*',
        'keep *_hltAlCaPi0EBRechitsToDigis_*_*',
        'keep *_hltAlCaPi0EERechitsToDigis_*_*',
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegional_pi0EcalRecHitsES_*',
        'keep *_hltAlcaPixelClusterCounts_*_*',
        'keep *_hltBSoftMuonMu5L3_*_*',
        'keep *_hltCsc2DRecHits_*_*',
        'keep *_hltCscSegments_*_*',
        'keep *_hltDeepBLifetimeTagInfosPF_*_*',
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsCalo_*_*',
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsPF_*_*',
        'keep *_hltDeepSecondaryVertexTagInfosPF_*_*',
        'keep *_hltDisplacedhltIter4PFlowTrackSelectionHighPurity_*_*',
        'keep *_hltDoubletRecoveryPFlowTrackSelectionHighPurityPPOnAA_*_*',
        'keep *_hltDoubletRecoveryPFlowTrackSelectionHighPurity_*_*',
        'keep *_hltDt4DSegments_*_*',
        'keep *_hltEcalPhiSymFilter_*_*',
        'keep *_hltEcalRecHit_*_*',
        'keep *_hltEgammaCandidates_*_*',
        'keep *_hltEgammaGsfTracks_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltFastPVPixelTracksMerger_*_*',
        'keep *_hltFastPVPixelTracksRecover_*_*',
        'keep *_hltFastPVPixelTracks_*_*',
        'keep *_hltFastPVPixelVertices_*_*',
        'keep *_hltFastPixelBLifetimeL3Associator_*_*',
        'keep *_hltFastPrimaryVertex_*_*',
        'keep *_hltGlbTrkMuonCandsNoVtx_*_*',
        'keep *_hltGtStage2Digis_*_*',
        'keep *_hltHITrackingSiStripRawToClustersFacilityFullZeroSuppression_*_*',
        'keep *_hltHbhereco_*_*',
        'keep *_hltHfreco_*_*',
        'keep *_hltHoreco_*_*',
        'keep *_hltImpactParameterTagInfos_*_*',
        'keep *_hltInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_hltIsolPixelTrackProdHB_*_*',
        'keep *_hltIsolPixelTrackProdHE_*_*',
        'keep *_hltIter0PFlowCtfWithMaterialTracks_*_*',
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*',
        'keep *_hltIterL3GlbMuon_*_*',
        'keep *_hltIterL3MuonAndMuonFromL1Merged_*_*',
        'keep *_hltIterL3MuonMerged_*_*',
        'keep *_hltIterL3MuonsNoID_*_*',
        'keep *_hltIterL3Muons_*_*',
        'keep *_hltIterL3OIMuonTrackSelectionHighPurity_*_*',
        'keep *_hltL2MuonCandidatesNoVtx_*_*',
        'keep *_hltL2MuonCandidates_*_*',
        'keep *_hltL2MuonSeeds_*_*',
        'keep *_hltL2Muons_*_*',
        'keep *_hltL2TauJets_*_*',
        'keep *_hltL3MuonsIOHit_*_*',
        'keep *_hltL3MuonsLinksCombination_*_*',
        'keep *_hltL3MuonsOIHit_*_*',
        'keep *_hltL3MuonsOIState_*_*',
        'keep *_hltL3Muons_*_*',
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*',
        'keep *_hltL3NoFiltersNoVtxMuons_*_*',
        'keep *_hltL3TkFromL2OICombination_*_*',
        'keep *_hltL3TkTracksFromL2IOHit_*_*',
        'keep *_hltL3TkTracksFromL2OIHit_*_*',
        'keep *_hltL3TkTracksFromL2OIState_*_*',
        'keep *_hltL3TkTracksFromL2_*_*',
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*',
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*',
        'keep *_hltL3TrackCandidateFromL2OIState_*_*',
        'keep *_hltL3TrajSeedIOHit_*_*',
        'keep *_hltL3TrajSeedOIHit_*_*',
        'keep *_hltL3TrajSeedOIState_*_*',
        'keep *_hltL3TrajectorySeed_*_*',
        'keep *_hltMergedTracksForBTag_*_*',
        'keep *_hltMergedTracksPPOnAA_*_*',
        'keep *_hltMergedTracks_*_*',
        'keep *_hltMet_*_*',
        'keep *_hltMuonCSCDigis_*_*',
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*',
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*',
        'keep *_hltMuonDTDigis_*_*',
        'keep *_hltMuonRPCDigis_*_*',
        'keep *_hltOnlineBeamSpot_*_*',
        'keep *_hltPFJetForBtag_*_*',
        'keep *_hltPFJetForPNetAK8_*_*',
        'keep *_hltPFMETNoMuProducer_*_*',
        'keep *_hltPFMETProducer_*_*',
        'keep *_hltPFMETTypeOne_*_*',
        'keep *_hltPFMuonMerging_*_*',
        'keep *_hltPFTau35Track_*_*',
        'keep *_hltPFTau35_*_*',
        'keep *_hltPPSCalibrationRaw_*_*',
        'keep *_hltParticleFlowForTaus_*_*',
        'keep *_hltParticleFlow_*_*',
        'keep *_hltParticleNetDiscriminatorsJetTagsAK8_*_*',
        'keep *_hltParticleNetDiscriminatorsJetTags_*_*',
        'keep *_hltParticleNetJetTagInfos_*_*',
        'keep *_hltPixelTracksPPOnAA_*_*',
        'keep *_hltPixelTracks_*_*',
        'keep *_hltPixelVerticesPPOnAA_*_*',
        'keep *_hltPixelVertices_*_*',
        'keep *_hltRpcRecHits_*_*',
        'keep *_hltSelector4CentralJetsL1FastJet_*_*',
        'keep *_hltSelectorJets20L1FastJet_*_*',
        'keep *_hltSiPixelClustersAfterSplittingPPOnAA_*_*',
        'keep *_hltSiPixelClustersCache_*_*',
        'keep *_hltSiPixelClusters_*_*',
        'keep *_hltSiStripClusterizerForRawPrime_*_*',
        'keep *_hltSiStripClusters2ApproxClusters_*_*',
        'keep *_hltSiStripRawToClustersFacility_*_*',
        'keep *_hltTowerMakerForAll_*_*',
        'keep *_hltTriggerSummaryAOD_*_*',
        'keep *_hltTriggerSummaryRAW_*_*',
        'keep *_hltTrimmedPixelVerticesPPOnAA_*_*',
        'keep *_hltTrimmedPixelVertices_*_*',
        'keep *_hltVerticesL3_*_*',
        'keep *_hltVerticesPFFilterPPOnAA_*_*',
        'keep *_hltVerticesPFFilter_*_*',
        'keep *_hltVerticesPFSelector_*_*',
        'keep DetIds_hltSiStripRawToDigi_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep FEDRawDataCollection_rawDataRepacker_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*',
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*',
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*',
        'keep TrackingRecHitsOwned_hltL3Muons_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep recoCaloJets_*_*_*',
        'keep recoCaloMETs_*_*_*',
        'keep recoCaloMETs_hltMet_*_*',
        'keep recoCompositeCandidates_*_*_*',
        'keep recoElectrons_*_*_*',
        'keep recoIsolatedPixelTrackCandidates_*_*_*',
        'keep recoMETs_*_*_*',
        'keep recoPFJets_*_*_*',
        'keep recoPFTaus_*_*_*',
        'keep recoRecoChargedCandidates_*_*_*',
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*',
        'keep recoRecoEcalCandidates_*_*_*',
        'keep triggerTriggerEventWithRefs_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep triggerTriggerFilterObjectWithRefs_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*'
    )
)

process.HLTIter0Phase2L3FromL1TkMuonGroupedCkfTrajectoryFilterIT = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(10.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('HLTSiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.HLTIter0Phase2L3FromL1TkMuonPSetGroupedCkfTrajectoryBuilderIT = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('hltESPChi2ChargeMeasurementEstimator30'),
    foundHitBonus = cms.double(1000.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('HLTIter0Phase2L3FromL1TkMuonGroupedCkfTrajectoryFilterIT')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(True),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(1.0),
    maxCand = cms.int32(5),
    minNrOfHitsForRebuild = cms.int32(2),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('HLTIter0Phase2L3FromL1TkMuonGroupedCkfTrajectoryFilterIT')
    ),
    updator = cms.string('hltESPKFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.HLTIter2Phase2L3FromL1TkMuonPSetGroupedCkfTrajectoryBuilderIT = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(False),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('hltESPChi2ChargeMeasurementEstimator30'),
    foundHitBonus = cms.double(1000.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('HLTIter2Phase2L3FromL1TkMuonPSetTrajectoryFilterIT')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(2),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterialParabolicMf'),
    propagatorOpposite = cms.string('PropagatorWithMaterialParabolicMfOpposite'),
    requireSeedHitsInRebuild = cms.bool(False),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('HLTIter2Phase2L3FromL1TkMuonPSetTrajectoryFilterIT')
    ),
    updator = cms.string('hltESPKFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.HLTIter2Phase2L3FromL1TkMuonPSetTrajectoryFilterIT = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(1.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(3),
    maxLostHits = cms.int32(1),
    maxLostHitsFraction = cms.double(999.0),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('HLTSiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.3),
    minimumNumberOfHits = cms.int32(5),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.HLTONLYEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'drop  FEDRawDataCollection_rawDataCollector_*_*',
        'drop  FEDRawDataCollection_source_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.HLTONLYSIMEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'drop  FEDRawDataCollection_rawDataCollector_*_*',
        'drop  FEDRawDataCollection_source_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.HLTPSetMuonCkfTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('MuonCkfTrajectoryBuilder'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    deltaEta = cms.double(-1.0),
    deltaPhi = cms.double(-1.0),
    estimator = cms.string('hltESPChi2ChargeMeasurementEstimator30'),
    intermediateCleaning = cms.bool(False),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    propagatorProximity = cms.string('SteppingHelixPropagatorAny'),
    rescaleErrorIfFail = cms.double(1.0),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('HLTPSetMuonCkfTrajectoryFilter')
    ),
    updator = cms.string('hltESPKFUpdator'),
    useSeedLayer = cms.bool(False)
)

process.HLTPSetMuonCkfTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(1.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(1),
    maxLostHitsFraction = cms.double(999.0),
    maxNumberOfHits = cms.int32(-1),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('HLTSiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minimumNumberOfHits = cms.int32(5),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.HLTPSetTrajectoryBuilderForGsfElectrons = cms.PSet(
    ComponentType = cms.string('CkfTrajectoryBuilder'),
    TTRHBuilder = cms.string('hltESPTTRHBWithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    estimator = cms.string('hltESPChi2ChargeMeasurementEstimator2000'),
    intermediateCleaning = cms.bool(False),
    lostHitPenalty = cms.double(90.0),
    maxCand = cms.int32(5),
    propagatorAlong = cms.string('hltESPFwdElectronPropagator'),
    propagatorOpposite = cms.string('hltESPBwdElectronPropagator'),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('HLTPSetTrajectoryFilterForElectrons')
    ),
    updator = cms.string('hltESPKFUpdator')
)

process.HLTPSetTrajectoryFilterForElectrons = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(1.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(1),
    maxLostHitsFraction = cms.double(999.0),
    maxNumberOfHits = cms.int32(-1),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('HLTSiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(-1),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(2.0),
    minimumNumberOfHits = cms.int32(5),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.HLTSCOUTEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    outputCommands = cms.untracked.vstring(
        'drop *',
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.HLTScouting = cms.PSet(
    outputCommands = cms.vstring(
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*'
    )
)

process.HLTSiStripClusterChargeCutLoose = cms.PSet(
    value = cms.double(1620.0)
)

process.HLTSiStripClusterChargeCutNone = cms.PSet(
    value = cms.double(-1.0)
)

process.HLTriggerAOD = cms.PSet(
    outputCommands = cms.vstring(
        'drop *_hlt*_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*'
    )
)

process.HLTriggerMINIAOD = cms.PSet(
    outputCommands = cms.vstring(
        'drop *_hlt*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*'
    )
)

process.HLTriggerRAW = cms.PSet(
    outputCommands = cms.vstring(
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*'
    )
)

process.HLTriggerRECO = cms.PSet(
    outputCommands = cms.vstring(
        'drop *_hlt*_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*'
    )
)

process.HitPatternHelper_params = cms.PSet(
    hphDebug = cms.bool(False),
    oldKFPSet = cms.PSet(
        AllowOver2EtaSecs = cms.bool(True),
        BeamWindowZ = cms.double(15),
        ChosenRofZ = cms.double(50.0),
        EtaRegions = cms.vdouble(
            -2.4, -2.08, -1.68, -1.26, -0.9,
            -0.62, -0.41, -0.2, 0.0, 0.2,
            0.41, 0.62, 0.9, 1.26, 1.68,
            2.08, 2.4
        )
    ),
    useNewKF = cms.bool(False)
)

process.HoughGrouping = cms.PSet(
    LowerNumber = cms.int32(4),
    MaxDistanceToWire = cms.double(0.03),
    UpperNumber = cms.int32(6),
    allowUncorrelatedPatterns = cms.bool(True),
    anglebinwidth = cms.double(1.0),
    angletan = cms.double(0.3),
    debug = cms.untracked.bool(False),
    maxdeltaAngDeg = cms.double(10),
    maxdeltaPos = cms.double(10),
    minNLayerHits = cms.int32(6),
    minSingleSLHitsMax = cms.int32(3),
    minSingleSLHitsMin = cms.int32(3),
    minUncorrelatedHits = cms.int32(3),
    posbinwidth = cms.double(2.1)
)

process.IOMCRAW = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_randomEngineStateProducer_*_*')
)

process.L1SCOUTEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    outputCommands = cms.untracked.vstring(
        'drop *',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.L1TTriggerTowerConfigHFNose_etaphi = cms.PSet(
    binsEta = cms.vdouble(),
    binsPhi = cms.vdouble(),
    doNose = cms.bool(True),
    maxEta = cms.double(4.2),
    maxPhi = cms.double(3.141592653589793),
    minEta = cms.double(3.0),
    minPhi = cms.double(-3.141592653589793),
    nBinsEta = cms.int32(18),
    nBinsPhi = cms.int32(72),
    readMappingFile = cms.bool(False),
    splitModuleSum = cms.bool(False)
)

process.L1TTriggerTowerConfig_energySplit = cms.PSet(
    binsEta = cms.vdouble(),
    binsPhi = cms.vdouble(),
    doNose = cms.bool(False),
    maxEta = cms.double(3.045),
    maxPhi = cms.double(3.141592653589793),
    minEta = cms.double(1.305),
    minPhi = cms.double(-3.141592653589793),
    moduleTowerMapping = cms.FileInPath('L1Trigger/L1THGCal/data/tower_per_module_silic8_scint16.txt'),
    nBinsEta = cms.int32(20),
    nBinsPhi = cms.int32(72),
    readMappingFile = cms.bool(False),
    splitModuleSum = cms.bool(True)
)

process.L1TTriggerTowerConfig_etaphi = cms.PSet(
    binsEta = cms.vdouble(),
    binsPhi = cms.vdouble(),
    doNose = cms.bool(False),
    maxEta = cms.double(3.0),
    maxPhi = cms.double(3.141592653589793),
    minEta = cms.double(1.479),
    minPhi = cms.double(-3.141592653589793),
    nBinsEta = cms.int32(18),
    nBinsPhi = cms.int32(72),
    readMappingFile = cms.bool(False),
    splitModuleSum = cms.bool(False)
)

process.L1TriggerAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_l1L1GtObjectMap_*_*',
        'keep LumiSummary_lumiProducer_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*'
    )
)

process.L1TriggerFEVTDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_simCscTriggerPrimitiveDigis_*_*',
        'keep *_simDtTriggerPrimitiveDigis_*_*',
        'keep *_simRpcTriggerDigis_*_*',
        'keep *_simRctDigis_*_*',
        'keep *_simCsctfDigis_*_*',
        'keep *_simCsctfTrackDigis_*_*',
        'keep *_simDttfDigis_*_*',
        'keep *_simGctDigis_*_*',
        'keep *_simCaloStage1Digis_*_*',
        'keep *_simCaloStage1FinalDigis_*_*',
        'keep *_simCaloStage2Layer1Digis_*_*',
        'keep *_simCaloStage2Digis_*_*',
        'keep *_simGmtDigis_*_*',
        'keep *_simBmtfDigis_*_*',
        'keep *_simKBmtfDigis_*_*',
        'keep *_simOmtfDigis_*_*',
        'keep *_simEmtfDigis_*_*',
        'keep *_simGmtStage2Digis_*_*',
        'keep *_simGtDigis_*_*',
        'keep *_simGtStage2Digis_*_*',
        'keep *_cscTriggerPrimitiveDigis_*_*',
        'keep *_dtTriggerPrimitiveDigis_*_*',
        'keep *_rpcTriggerDigis_*_*',
        'keep *_rctDigis_*_*',
        'keep *_csctfDigis_*_*',
        'keep *_csctfTrackDigis_*_*',
        'keep *_dttfDigis_*_*',
        'keep *_gctDigis_*_*',
        'keep *_gmtDigis_*_*',
        'keep *_gtDigis_*_*',
        'keep *_gtEvmDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_l1L1GtObjectMap_*_*',
        'keep LumiDetails_lumiProducer_*_*',
        'keep LumiSummary_lumiProducer_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*',
        'keep *_simEmtfShowers_*_*',
        'keep *_simGmtShowerDigis_*_*',
        'keep l1tHGCalTriggerCellBXVector_l1tHGCalVFEProducer_*_*',
        'keep l1tHGCalTriggerCellBXVector_l1tHGCalConcentratorProducer_*_*',
        'keep l1tHGCalTowerBXVector_l1tHGCalTowerProducer_*_*',
        'keep l1tHGCalClusterBXVector_l1tHGCalBackEndLayer1Producer_*_*',
        'keep l1tHGCalMulticlusterBXVector_l1tHGCalBackEndLayer2Producer_*_*',
        'keep *_simMuonGEMPadDigis_*_*',
        'keep *_simMuonGEMPadDigiClusters_*_*',
        'keep *_simMuonME0PadDigis__*',
        'keep *_me0TriggerDigis__*',
        'keep *_simMuonME0PseudoReDigisCoarse__*',
        'keep *_me0RecHitsCoarse__*',
        'keep *_me0TriggerPseudoDigis__*',
        'keep *_me0TriggerConvertedPseudoDigis__*',
        'keep *_simKBmtfDigis_*_*',
        'keep *_l1tHGCalVFEProducerhgcalConcentratorProducer_*_*',
        'keep *_l1tHGCalBackEndLayer1Producer_*_*',
        'keep *_l1tHGCalBackEndLayer2Producer_*_*',
        'keep *_l1tHGCalTowerMapProducer_*_*',
        'keep *_l1tHGCalTowerProducer_*_*',
        'keep *_l1tHGCalEnergySplitTowerMapProducer_*_*',
        'keep *_l1tHGCalEnergySplitTowerProducer_*_*',
        'keep *_l1tEGammaClusterEmuProducer_*_*',
        'keep *_l1tVertexFinder_*_*',
        'keep *_l1tVertexFinderEmulator_*_*',
        'keep *_l1tTrackJets_*_*',
        'keep *_l1tTrackJetsExtended_*_*',
        'keep *_l1tTrackFastJets_*_*',
        'keep *_l1tTrackerEtMiss_*_*',
        'keep *_l1tTrackerHTMiss_*_*',
        'keep *_l1tTrackJetsEmulation_*_*',
        'keep *_l1tTrackJetsExtendedEmulation_*_*',
        'keep *_l1tTrackerEmuEtMiss_*_*',
        'keep *_l1tTrackerEmuHTMiss_*_*',
        'keep *_l1tTrackerEmuHTMissExtended_*_*',
        'keep *_l1tTrackTripletEmulation_*_*',
        'keep *_l1tTowerCalibration_*_*',
        'keep *_l1tCaloJet_*_*',
        'keep *_l1tCaloJetHTT_*_*',
        'keep *_l1tPhase2CaloJetEmulator_*_*',
        'keep *_l1tNNCaloTauProducer_*_*',
        'keep *_l1tNNCaloTauEmulator_*_*',
        'keep *_l1tPFClustersFromL1EGClusters_*_*',
        'keep *_l1tPFClustersFromCombinedCaloHCal_*_*',
        'keep *_l1tPFClustersFromCombinedCaloHF_*_*',
        'keep *_l1tPFClustersFromHGC3DClusters_*_*',
        'keep *_l1tPFTracksFromL1TracksBarrel_*_*',
        'keep *_l1tPFTracksFromL1TracksHGCal_*_*',
        'keep *_l1tSC4PFL1PuppiCorrectedEmulator_*_*',
        'keep *_l1tSC4PFL1PuppiCorrectedEmulatorMHT_*_*',
        'keep *_l1tSC4PFL1PuppiExtendedCorrectedEmulator_*_*',
        'keep *_l1tSC4PFL1PuppiExtendedCorrectedEmulatorMHT_*_*',
        'keep *_l1tSC8PFL1PuppiCorrectedEmulator_*_*',
        'keep *_l1tPhase1JetProducer9x9_*_*',
        'keep *_l1tPhase1JetCalibrator9x9_*_*',
        'keep *_l1tPhase1JetSumsProducer9x9_*_*',
        'keep *_l1tPhase1JetProducer9x9trimmed_*_*',
        'keep *_l1tPhase1JetCalibrator9x9trimmed_*_*',
        'keep *_l1tPhase1JetSumsProducer9x9trimmed_*_*',
        'keep *_l1tLayer1Barrel_*_*',
        'keep *_l1tLayer1HGCal_*_*',
        'keep *_l1tLayer1HGCalNoTK_*_*',
        'keep *_l1tLayer1HF_*_*',
        'keep *_l1tLayer1_*_*',
        'keep *_l1tLayer1BarrelExtended_*_*',
        'keep *_l1tLayer1HGCalExtended_*_*',
        'keep *_l1tLayer1Extended_*_*',
        'keep *_l1tLayer1EG_*_*',
        'keep *_l1tLayer2EG_*_*',
        'keep *_l1tMETPFProducer_*_*',
        'keep *_l1tMETMLProducer_*_*',
        'keep *_l1tNNTauProducer_*_*',
        'keep *_l1tNNTauProducerPuppi_*_*',
        'keep *_l1tHPSPFTauProducer_*_*',
        'keep *_l1tBJetProducerPuppi_*_*',
        'keep *_l1tBJetProducerPuppiCorrectedEmulator_*_*',
        'keep *_l1tTOoLLiPProducer_*_*',
        'keep *_l1tTOoLLiPProducerCorrectedEmulator_*_*',
        'keep *_TTStubsFromPhase2TrackerDigis_*_*',
        'keep *_TTClustersFromPhase2TrackerDigis_*_*',
        'keep *_l1tTTTracksFromExtendedTrackletEmulation_*_*',
        'keep *_l1tTTTracksFromTrackletEmulation_*_*',
        'keep *_l1tTkStubsGmt_*_*',
        'keep *_l1tTkMuonsGmt_*_*',
        'keep *_l1tSAMuonsGmt_*_*',
        'keep *_l1tTkMuonsGmtLowPtFix_*_*',
        'keep *_l1tPhase2L1CaloEGammaEmulator_*_*'
    )
)

process.L1TriggerRAW = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*'
    )
)

process.L1TriggerRAWDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*'
    )
)

process.L1TriggerRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_l1L1GtObjectMap_*_*',
        'keep L1MuGMTReadoutCollection_gtDigis_*_*',
        'keep L1GctEmCand*_gctDigis_*_*',
        'keep L1GctJetCand*_gctDigis_*_*',
        'keep L1GctEtHad*_gctDigis_*_*',
        'keep L1GctEtMiss*_gctDigis_*_*',
        'keep L1GctEtTotal*_gctDigis_*_*',
        'keep L1GctHtMiss*_gctDigis_*_*',
        'keep L1GctJetCounts*_gctDigis_*_*',
        'keep L1GctHFRingEtSums*_gctDigis_*_*',
        'keep L1GctHFBitCounts*_gctDigis_*_*',
        'keep LumiDetails_lumiProducer_*_*',
        'keep LumiSummary_lumiProducer_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*'
    )
)

process.LHEEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep *_externalLHEProducer_LHEScriptOutput_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.LutParametersBlock = cms.PSet(
    LutParameters = cms.PSet(
        BTIC = cms.untracked.int32(0),
        D = cms.untracked.double(0),
        Debug = cms.untracked.bool(False),
        WHEEL = cms.untracked.int32(-1),
        XCN = cms.untracked.double(0)
    )
)

process.ME0SegAlgoRU = cms.PSet(
    algo_name = cms.string('ME0SegAlgoRU'),
    algo_pset = cms.PSet(
        allowWideSegments = cms.bool(True),
        doCollisions = cms.bool(True),
        maxChi2Additional = cms.double(100.0),
        maxChi2GoodSeg = cms.double(50),
        maxChi2Prune = cms.double(50),
        maxETASeeds = cms.double(0.1),
        maxPhiAdditional = cms.double(0.001096605744),
        maxPhiSeeds = cms.double(0.001096605744),
        maxTOFDiff = cms.double(25),
        minNumberOfHits = cms.uint32(4),
        requireCentralBX = cms.bool(True)
    )
)

process.ME0SegmentAlgorithm = cms.PSet(
    algo_name = cms.string('ME0SegmentAlgorithm'),
    algo_pset = cms.PSet(
        ME0Debug = cms.untracked.bool(True),
        dEtaChainBoxMax = cms.double(0.05),
        dPhiChainBoxMax = cms.double(0.02),
        dTimeChainBoxMax = cms.double(15.0),
        dXclusBoxMax = cms.double(1.0),
        dYclusBoxMax = cms.double(5.0),
        maxRecHitsInCluster = cms.int32(6),
        minHitsPerSegment = cms.uint32(3),
        preClustering = cms.bool(True),
        preClusteringUseChaining = cms.bool(True)
    )
)

process.MEtoEDMConverterAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.MEtoEDMConverterFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_MEtoEDMConverter_*_*')
)

process.MEtoEDMConverterRECO = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.MINIAODEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    eventAutoFlushCompressedSize = cms.untracked.int32(-900),
    outputCommands = cms.untracked.vstring(
        'drop *',
        'keep *_slimmedPhotons_*_*',
        'keep *_slimmedOOTPhotons_*_*',
        'keep *_slimmedElectrons_*_*',
        'keep *_slimmedMuons_*_*',
        'keep recoTrackExtras_slimmedMuonTrackExtras_*_*',
        'keep TrackingRecHitsOwned_slimmedMuonTrackExtras_*_*',
        'keep SiPixelClusteredmNewDetSetVector_slimmedMuonTrackExtras_*_*',
        'keep SiStripClusteredmNewDetSetVector_slimmedMuonTrackExtras_*_*',
        'keep *_slimmedTaus_*_*',
        'keep *_slimmedTausBoosted_*_*',
        'keep *_slimmedCaloJets_*_*',
        'keep *_slimmedJPTJets_*_*',
        'keep *_slimmedJets_*_*',
        'keep recoBaseTagInfosOwned_slimmedJets_*_*',
        'keep *_slimmedJetsAK8_*_*',
        'drop recoBaseTagInfosOwned_slimmedJetsAK8_*_*',
        'keep *_slimmedJetsPuppi_*_*',
        'keep *_slimmedMETs_*_*',
        'keep *_slimmedMETsPuppi_*_*',
        'keep *_slimmedSecondaryVertices_*_*',
        'keep *_slimmedLambdaVertices_*_*',
        'keep *_slimmedKshortVertices_*_*',
        'keep *_slimmedJetsAK8PFPuppiSoftDropPacked_SubJets_*',
        'keep recoPhotonCores_reducedEgamma_*_*',
        'keep recoGsfElectronCores_reducedEgamma_*_*',
        'keep recoConversions_reducedEgamma_*_*',
        'keep recoSuperClusters_reducedEgamma_*_*',
        'keep recoCaloClusters_reducedEgamma_*_*',
        'keep EcalRecHitsSorted_reducedEgamma_*_*',
        'keep recoGsfTracks_reducedEgamma_*_*',
        'keep HBHERecHitsSorted_reducedEgamma_*_*',
        'keep *_slimmedHcalRecHits_*_*',
        'drop *_*_caloTowers_*',
        'drop *_*_pfCandidates_*',
        'drop *_*_genJets_*',
        'keep *_offlineBeamSpot_*_*',
        'keep *_offlineSlimmedPrimaryVertices_*_*',
        'keep *_offlineSlimmedPrimaryVerticesWithBS_*_*',
        'keep patPackedCandidates_packedPFCandidates_*_*',
        'keep *_isolatedTracks_*_*',
        'keep *_oniaPhotonCandidates_*_*',
        'keep *_bunchSpacingProducer_*_*',
        'keep double_fixedGridRhoAll__*',
        'keep double_fixedGridRhoFastjetAll__*',
        'keep double_fixedGridRhoFastjetAllTmp__*',
        'keep double_fixedGridRhoFastjetAllCalo__*',
        'keep double_fixedGridRhoFastjetCentral_*_*',
        'keep double_fixedGridRhoFastjetCentralCalo__*',
        'keep double_fixedGridRhoFastjetCentralChargedPileUp__*',
        'keep double_fixedGridRhoFastjetCentralNeutral__*',
        'keep *_slimmedPatTrigger_*_*',
        'keep patPackedTriggerPrescales_patTrigger__*',
        'keep patPackedTriggerPrescales_patTrigger_l1max_*',
        'keep patPackedTriggerPrescales_patTrigger_l1min_*',
        'keep *_l1extraParticles_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep GlobalExtBlkBXVector_simGtExtUnprefireable_*_*',
        'keep *_gtStage2Digis__*',
        'keep *_gmtStage2Digis_Muon_*',
        'keep *_caloStage2Digis_Jet_*',
        'keep *_caloStage2Digis_Tau_*',
        'keep *_caloStage2Digis_EGamma_*',
        'keep *_caloStage2Digis_EtSum_*',
        'keep *_TriggerResults_*_HLT',
        'keep *_TriggerResults_*_*',
        'keep patPackedCandidates_lostTracks_*_*',
        'keep HcalNoiseSummary_hcalnoise__*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTracks_displacedGlobalMuons__*',
        'keep recoTracks_displacedTracks__*',
        'keep *_prefiringweight_*_*',
        'keep *_slimmedLowPtElectrons_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep *_slimmedDisplacedMuons_*_*',
        'keep recoTrackExtras_slimmedDisplacedMuonTrackExtras_*_*',
        'keep TrackingRecHitsOwned_slimmedDisplacedMuonTrackExtras_*_*',
        'keep SiPixelClusteredmNewDetSetVector_slimmedDisplacedMuonTrackExtras_*_*',
        'keep SiStripClusteredmNewDetSetVector_slimmedDisplacedMuonTrackExtras_*_*',
        'keep *_packedPFCandidates_hcalDepthEnergyFractions_*',
        'drop *_packedPFCandidates_hcalDepthEnergyFractions_*',
        'drop *_hlt*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*'
    )
)

process.MINIAODSIMEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    eventAutoFlushCompressedSize = cms.untracked.int32(-900),
    outputCommands = cms.untracked.vstring(
        'drop *',
        'keep *_slimmedPhotons_*_*',
        'keep *_slimmedOOTPhotons_*_*',
        'keep *_slimmedElectrons_*_*',
        'keep *_slimmedMuons_*_*',
        'keep recoTrackExtras_slimmedMuonTrackExtras_*_*',
        'keep TrackingRecHitsOwned_slimmedMuonTrackExtras_*_*',
        'keep SiPixelClusteredmNewDetSetVector_slimmedMuonTrackExtras_*_*',
        'keep SiStripClusteredmNewDetSetVector_slimmedMuonTrackExtras_*_*',
        'keep *_slimmedTaus_*_*',
        'keep *_slimmedTausBoosted_*_*',
        'keep *_slimmedCaloJets_*_*',
        'keep *_slimmedJPTJets_*_*',
        'keep *_slimmedJets_*_*',
        'keep recoBaseTagInfosOwned_slimmedJets_*_*',
        'keep *_slimmedJetsAK8_*_*',
        'drop recoBaseTagInfosOwned_slimmedJetsAK8_*_*',
        'keep *_slimmedJetsPuppi_*_*',
        'keep *_slimmedMETs_*_*',
        'keep *_slimmedMETsPuppi_*_*',
        'keep *_slimmedSecondaryVertices_*_*',
        'keep *_slimmedLambdaVertices_*_*',
        'keep *_slimmedKshortVertices_*_*',
        'keep *_slimmedJetsAK8PFPuppiSoftDropPacked_SubJets_*',
        'keep recoPhotonCores_reducedEgamma_*_*',
        'keep recoGsfElectronCores_reducedEgamma_*_*',
        'keep recoConversions_reducedEgamma_*_*',
        'keep recoSuperClusters_reducedEgamma_*_*',
        'keep recoCaloClusters_reducedEgamma_*_*',
        'keep EcalRecHitsSorted_reducedEgamma_*_*',
        'keep recoGsfTracks_reducedEgamma_*_*',
        'keep HBHERecHitsSorted_reducedEgamma_*_*',
        'keep *_slimmedHcalRecHits_*_*',
        'drop *_*_caloTowers_*',
        'drop *_*_pfCandidates_*',
        'drop *_*_genJets_*',
        'keep *_offlineBeamSpot_*_*',
        'keep *_offlineSlimmedPrimaryVertices_*_*',
        'keep *_offlineSlimmedPrimaryVerticesWithBS_*_*',
        'keep patPackedCandidates_packedPFCandidates_*_*',
        'keep *_isolatedTracks_*_*',
        'keep *_oniaPhotonCandidates_*_*',
        'keep *_bunchSpacingProducer_*_*',
        'keep double_fixedGridRhoAll__*',
        'keep double_fixedGridRhoFastjetAll__*',
        'keep double_fixedGridRhoFastjetAllTmp__*',
        'keep double_fixedGridRhoFastjetAllCalo__*',
        'keep double_fixedGridRhoFastjetCentral_*_*',
        'keep double_fixedGridRhoFastjetCentralCalo__*',
        'keep double_fixedGridRhoFastjetCentralChargedPileUp__*',
        'keep double_fixedGridRhoFastjetCentralNeutral__*',
        'keep *_slimmedPatTrigger_*_*',
        'keep patPackedTriggerPrescales_patTrigger__*',
        'keep patPackedTriggerPrescales_patTrigger_l1max_*',
        'keep patPackedTriggerPrescales_patTrigger_l1min_*',
        'keep *_l1extraParticles_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep GlobalExtBlkBXVector_simGtExtUnprefireable_*_*',
        'keep *_gtStage2Digis__*',
        'keep *_gmtStage2Digis_Muon_*',
        'keep *_caloStage2Digis_Jet_*',
        'keep *_caloStage2Digis_Tau_*',
        'keep *_caloStage2Digis_EGamma_*',
        'keep *_caloStage2Digis_EtSum_*',
        'keep *_TriggerResults_*_HLT',
        'keep *_TriggerResults_*_*',
        'keep patPackedCandidates_lostTracks_*_*',
        'keep HcalNoiseSummary_hcalnoise__*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTracks_displacedGlobalMuons__*',
        'keep recoTracks_displacedTracks__*',
        'keep *_prefiringweight_*_*',
        'keep *_slimmedLowPtElectrons_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep *_slimmedDisplacedMuons_*_*',
        'keep recoTrackExtras_slimmedDisplacedMuonTrackExtras_*_*',
        'keep TrackingRecHitsOwned_slimmedDisplacedMuonTrackExtras_*_*',
        'keep SiPixelClusteredmNewDetSetVector_slimmedDisplacedMuonTrackExtras_*_*',
        'keep SiStripClusteredmNewDetSetVector_slimmedDisplacedMuonTrackExtras_*_*',
        'keep *_packedPFCandidates_hcalDepthEnergyFractions_*',
        'drop *_packedPFCandidates_hcalDepthEnergyFractions_*',
        'keep patPackedGenParticles_packedGenParticles_*_*',
        'keep recoGenParticles_prunedGenParticles_*_*',
        'keep *_packedPFCandidateToGenAssociation_*_*',
        'keep *_lostTracksToGenAssociation_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_*_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep recoGenParticles_genPUProtons_*_*',
        'keep *_slimmedGenJetsFlavourInfos_*_*',
        'keep *_slimmedGenJets__*',
        'keep *_slimmedGenJetsAK8__*',
        'keep *_slimmedGenJetsAK8SoftDropSubJets__*',
        'keep *_genMetTrue_*_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep GenRunInfoProduct_*_*_*',
        'keep *_genParticles_xyz0_*',
        'keep *_genParticles_t0_*',
        'keep PileupSummaryInfos_slimmedAddPileupInfo_*_*',
        'keep L1GtTriggerMenuLite_l1GtTriggerMenuLite__*',
        'keep *_slimmedElectronsHGC_*_*',
        'keep *_slimmedPhotonsHGC_*_*',
        'keep *_offlineSlimmedPrimaryVertices4D_*_*',
        'drop *_hlt*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*'
    )
)

process.MINIGENEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    eventAutoFlushCompressedSize = cms.untracked.int32(15728640),
    outputCommands = cms.untracked.vstring(
        'drop *',
        'keep patPackedGenParticles_packedGenParticles_*_*',
        'keep recoGenParticles_prunedGenParticles_*_*',
        'keep *_packedPFCandidateToGenAssociation_*_*',
        'keep *_lostTracksToGenAssociation_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_*_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep recoGenParticles_genPUProtons_*_*',
        'keep *_slimmedGenJetsFlavourInfos_*_*',
        'keep *_slimmedGenJets__*',
        'keep *_slimmedGenJetsAK8__*',
        'keep *_slimmedGenJetsAK8SoftDropSubJets__*',
        'keep *_genMetTrue_*_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep GenRunInfoProduct_*_*_*',
        'keep *_genParticles_xyz0_*',
        'keep *_genParticles_t0_*'
    )
)

process.MIXINGMODULEEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *',
        'keep *_cfWriter_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.MicroEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_slimmedPhotons_*_*',
        'keep *_slimmedOOTPhotons_*_*',
        'keep *_slimmedElectrons_*_*',
        'keep *_slimmedMuons_*_*',
        'keep recoTrackExtras_slimmedMuonTrackExtras_*_*',
        'keep TrackingRecHitsOwned_slimmedMuonTrackExtras_*_*',
        'keep SiPixelClusteredmNewDetSetVector_slimmedMuonTrackExtras_*_*',
        'keep SiStripClusteredmNewDetSetVector_slimmedMuonTrackExtras_*_*',
        'keep *_slimmedTaus_*_*',
        'keep *_slimmedTausBoosted_*_*',
        'keep *_slimmedCaloJets_*_*',
        'keep *_slimmedJPTJets_*_*',
        'keep *_slimmedJets_*_*',
        'keep recoBaseTagInfosOwned_slimmedJets_*_*',
        'keep *_slimmedJetsAK8_*_*',
        'drop recoBaseTagInfosOwned_slimmedJetsAK8_*_*',
        'keep *_slimmedJetsPuppi_*_*',
        'keep *_slimmedMETs_*_*',
        'keep *_slimmedMETsPuppi_*_*',
        'keep *_slimmedSecondaryVertices_*_*',
        'keep *_slimmedLambdaVertices_*_*',
        'keep *_slimmedKshortVertices_*_*',
        'keep *_slimmedJetsAK8PFPuppiSoftDropPacked_SubJets_*',
        'keep recoPhotonCores_reducedEgamma_*_*',
        'keep recoGsfElectronCores_reducedEgamma_*_*',
        'keep recoConversions_reducedEgamma_*_*',
        'keep recoSuperClusters_reducedEgamma_*_*',
        'keep recoCaloClusters_reducedEgamma_*_*',
        'keep EcalRecHitsSorted_reducedEgamma_*_*',
        'keep recoGsfTracks_reducedEgamma_*_*',
        'keep HBHERecHitsSorted_reducedEgamma_*_*',
        'keep *_slimmedHcalRecHits_*_*',
        'drop *_*_caloTowers_*',
        'drop *_*_pfCandidates_*',
        'drop *_*_genJets_*',
        'keep *_offlineBeamSpot_*_*',
        'keep *_offlineSlimmedPrimaryVertices_*_*',
        'keep *_offlineSlimmedPrimaryVerticesWithBS_*_*',
        'keep patPackedCandidates_packedPFCandidates_*_*',
        'keep *_isolatedTracks_*_*',
        'keep *_oniaPhotonCandidates_*_*',
        'keep *_bunchSpacingProducer_*_*',
        'keep double_fixedGridRhoAll__*',
        'keep double_fixedGridRhoFastjetAll__*',
        'keep double_fixedGridRhoFastjetAllTmp__*',
        'keep double_fixedGridRhoFastjetAllCalo__*',
        'keep double_fixedGridRhoFastjetCentral_*_*',
        'keep double_fixedGridRhoFastjetCentralCalo__*',
        'keep double_fixedGridRhoFastjetCentralChargedPileUp__*',
        'keep double_fixedGridRhoFastjetCentralNeutral__*',
        'keep *_slimmedPatTrigger_*_*',
        'keep patPackedTriggerPrescales_patTrigger__*',
        'keep patPackedTriggerPrescales_patTrigger_l1max_*',
        'keep patPackedTriggerPrescales_patTrigger_l1min_*',
        'keep *_l1extraParticles_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep GlobalExtBlkBXVector_simGtExtUnprefireable_*_*',
        'keep *_gtStage2Digis__*',
        'keep *_gmtStage2Digis_Muon_*',
        'keep *_caloStage2Digis_Jet_*',
        'keep *_caloStage2Digis_Tau_*',
        'keep *_caloStage2Digis_EGamma_*',
        'keep *_caloStage2Digis_EtSum_*',
        'keep *_TriggerResults_*_HLT',
        'keep *_TriggerResults_*_*',
        'keep patPackedCandidates_lostTracks_*_*',
        'keep HcalNoiseSummary_hcalnoise__*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTracks_displacedGlobalMuons__*',
        'keep recoTracks_displacedTracks__*',
        'keep *_prefiringweight_*_*',
        'keep *_slimmedLowPtElectrons_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep *_slimmedDisplacedMuons_*_*',
        'keep recoTrackExtras_slimmedDisplacedMuonTrackExtras_*_*',
        'keep TrackingRecHitsOwned_slimmedDisplacedMuonTrackExtras_*_*',
        'keep SiPixelClusteredmNewDetSetVector_slimmedDisplacedMuonTrackExtras_*_*',
        'keep SiStripClusteredmNewDetSetVector_slimmedDisplacedMuonTrackExtras_*_*',
        'keep *_packedPFCandidates_hcalDepthEnergyFractions_*',
        'drop *_packedPFCandidates_hcalDepthEnergyFractions_*'
    )
)

process.MicroEventContentGEN = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep patPackedGenParticles_packedGenParticles_*_*',
        'keep recoGenParticles_prunedGenParticles_*_*',
        'keep *_packedPFCandidateToGenAssociation_*_*',
        'keep *_lostTracksToGenAssociation_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_*_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep recoGenParticles_genPUProtons_*_*',
        'keep *_slimmedGenJetsFlavourInfos_*_*',
        'keep *_slimmedGenJets__*',
        'keep *_slimmedGenJetsAK8__*',
        'keep *_slimmedGenJetsAK8SoftDropSubJets__*',
        'keep *_genMetTrue_*_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep GenRunInfoProduct_*_*_*',
        'keep *_genParticles_xyz0_*',
        'keep *_genParticles_t0_*'
    )
)

process.MicroEventContentMC = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_slimmedPhotons_*_*',
        'keep *_slimmedOOTPhotons_*_*',
        'keep *_slimmedElectrons_*_*',
        'keep *_slimmedMuons_*_*',
        'keep recoTrackExtras_slimmedMuonTrackExtras_*_*',
        'keep TrackingRecHitsOwned_slimmedMuonTrackExtras_*_*',
        'keep SiPixelClusteredmNewDetSetVector_slimmedMuonTrackExtras_*_*',
        'keep SiStripClusteredmNewDetSetVector_slimmedMuonTrackExtras_*_*',
        'keep *_slimmedTaus_*_*',
        'keep *_slimmedTausBoosted_*_*',
        'keep *_slimmedCaloJets_*_*',
        'keep *_slimmedJPTJets_*_*',
        'keep *_slimmedJets_*_*',
        'keep recoBaseTagInfosOwned_slimmedJets_*_*',
        'keep *_slimmedJetsAK8_*_*',
        'drop recoBaseTagInfosOwned_slimmedJetsAK8_*_*',
        'keep *_slimmedJetsPuppi_*_*',
        'keep *_slimmedMETs_*_*',
        'keep *_slimmedMETsPuppi_*_*',
        'keep *_slimmedSecondaryVertices_*_*',
        'keep *_slimmedLambdaVertices_*_*',
        'keep *_slimmedKshortVertices_*_*',
        'keep *_slimmedJetsAK8PFPuppiSoftDropPacked_SubJets_*',
        'keep recoPhotonCores_reducedEgamma_*_*',
        'keep recoGsfElectronCores_reducedEgamma_*_*',
        'keep recoConversions_reducedEgamma_*_*',
        'keep recoSuperClusters_reducedEgamma_*_*',
        'keep recoCaloClusters_reducedEgamma_*_*',
        'keep EcalRecHitsSorted_reducedEgamma_*_*',
        'keep recoGsfTracks_reducedEgamma_*_*',
        'keep HBHERecHitsSorted_reducedEgamma_*_*',
        'keep *_slimmedHcalRecHits_*_*',
        'drop *_*_caloTowers_*',
        'drop *_*_pfCandidates_*',
        'drop *_*_genJets_*',
        'keep *_offlineBeamSpot_*_*',
        'keep *_offlineSlimmedPrimaryVertices_*_*',
        'keep *_offlineSlimmedPrimaryVerticesWithBS_*_*',
        'keep patPackedCandidates_packedPFCandidates_*_*',
        'keep *_isolatedTracks_*_*',
        'keep *_oniaPhotonCandidates_*_*',
        'keep *_bunchSpacingProducer_*_*',
        'keep double_fixedGridRhoAll__*',
        'keep double_fixedGridRhoFastjetAll__*',
        'keep double_fixedGridRhoFastjetAllTmp__*',
        'keep double_fixedGridRhoFastjetAllCalo__*',
        'keep double_fixedGridRhoFastjetCentral_*_*',
        'keep double_fixedGridRhoFastjetCentralCalo__*',
        'keep double_fixedGridRhoFastjetCentralChargedPileUp__*',
        'keep double_fixedGridRhoFastjetCentralNeutral__*',
        'keep *_slimmedPatTrigger_*_*',
        'keep patPackedTriggerPrescales_patTrigger__*',
        'keep patPackedTriggerPrescales_patTrigger_l1max_*',
        'keep patPackedTriggerPrescales_patTrigger_l1min_*',
        'keep *_l1extraParticles_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep GlobalExtBlkBXVector_simGtExtUnprefireable_*_*',
        'keep *_gtStage2Digis__*',
        'keep *_gmtStage2Digis_Muon_*',
        'keep *_caloStage2Digis_Jet_*',
        'keep *_caloStage2Digis_Tau_*',
        'keep *_caloStage2Digis_EGamma_*',
        'keep *_caloStage2Digis_EtSum_*',
        'keep *_TriggerResults_*_HLT',
        'keep *_TriggerResults_*_*',
        'keep patPackedCandidates_lostTracks_*_*',
        'keep HcalNoiseSummary_hcalnoise__*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTracks_displacedGlobalMuons__*',
        'keep recoTracks_displacedTracks__*',
        'keep *_prefiringweight_*_*',
        'keep *_slimmedLowPtElectrons_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep *_slimmedDisplacedMuons_*_*',
        'keep recoTrackExtras_slimmedDisplacedMuonTrackExtras_*_*',
        'keep TrackingRecHitsOwned_slimmedDisplacedMuonTrackExtras_*_*',
        'keep SiPixelClusteredmNewDetSetVector_slimmedDisplacedMuonTrackExtras_*_*',
        'keep SiStripClusteredmNewDetSetVector_slimmedDisplacedMuonTrackExtras_*_*',
        'keep *_packedPFCandidates_hcalDepthEnergyFractions_*',
        'drop *_packedPFCandidates_hcalDepthEnergyFractions_*',
        'keep patPackedGenParticles_packedGenParticles_*_*',
        'keep recoGenParticles_prunedGenParticles_*_*',
        'keep *_packedPFCandidateToGenAssociation_*_*',
        'keep *_lostTracksToGenAssociation_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_*_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep recoGenParticles_genPUProtons_*_*',
        'keep *_slimmedGenJetsFlavourInfos_*_*',
        'keep *_slimmedGenJets__*',
        'keep *_slimmedGenJetsAK8__*',
        'keep *_slimmedGenJetsAK8SoftDropSubJets__*',
        'keep *_genMetTrue_*_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep GenRunInfoProduct_*_*_*',
        'keep *_genParticles_xyz0_*',
        'keep *_genParticles_t0_*',
        'keep PileupSummaryInfos_slimmedAddPileupInfo_*_*',
        'keep L1GtTriggerMenuLite_l1GtTriggerMenuLite__*',
        'keep *_slimmedElectronsHGC_*_*',
        'keep *_slimmedPhotonsHGC_*_*',
        'keep *_offlineSlimmedPrimaryVertices4D_*_*'
    )
)

process.NANOAODEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(9),
    outputCommands = cms.untracked.vstring(
        'drop *',
        'keep nanoaodFlatTable_*Table_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep String_*_genModel_*',
        'keep nanoaodMergeableCounterTable_*Table_*_*',
        'keep nanoaodUniqueString_nanoMetadata_*_*'
    )
)

process.NANOAODSIMEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(9),
    outputCommands = cms.untracked.vstring(
        'drop *',
        'keep nanoaodFlatTable_*Table_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep String_*_genModel_*',
        'keep nanoaodMergeableCounterTable_*Table_*_*',
        'keep nanoaodUniqueString_nanoMetadata_*_*'
    )
)

process.NanoAODEDMEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *',
        'keep nanoaodFlatTable_*Table_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep String_*_genModel_*',
        'keep nanoaodMergeableCounterTable_*Table_*_*',
        'keep nanoaodUniqueString_nanoMetadata_*_*'
    )
)

process.OnlineMetaDataContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep CTPPSRecord_onlineMetaDataDigis_*_*',
        'keep DCSRecord_onlineMetaDataDigis_*_*',
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*',
        'keep recoBeamSpot_onlineMetaDataDigis_*_*'
    )
)

process.PCCUpdate = cms.PSet(
    applyFixPCC = cms.bool(True)
)

process.PREMIXEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *',
        'keep CrossingFramePlaybackInfoNew_*_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int6stdbitsetstdpairs_*_AffectedAPVList_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*',
        'keep *_mix_MergedTrackTruth_*',
        'keep *_randomEngineStateProducer_*_*',
        'keep *_logErrorHarvester_*_*',
        'keep Phase2TrackerDigiedmDetSetVector_mix_*_*',
        'keep *_*_Phase2OTDigiSimLink_*',
        'keep *_simSiPixelDigis_*_*',
        'keep EBDigiCollection_simEcalDigis_*_*',
        'keep EEDigiCollection_simEcalDigis_*_*',
        'keep ESDigiCollection_simEcalUnsuppressedDigis_*_*',
        'keep *_simHcalDigis_*_*',
        'drop ESDigiCollection_simEcalUnsuppressedDigis_*_*',
        'drop EEDigiCollection_simEcalDigis_*_*',
        'keep *_simHGCalUnsuppressedDigis_EE_*',
        'keep *_simHGCalUnsuppressedDigis_HEfront_*',
        'keep *_simHGCalUnsuppressedDigis_HEback_*',
        'keep *_mix_MergedCaloTruth_*',
        'keep *_mix_MergedMtdTruth_*',
        'keep *_mix_MergedMtdTruthLC_*',
        'keep *_mix_MergedMtdTruthST_*',
        'keep *_mix_FTLBarrel_*',
        'keep *_mix_FTLEndcap_*',
        'keep *_mix_InitialVertices_*',
        'keep *_mtdRecoClusterToSimLayerClusterAssociation_*_*',
        'keep *_mtdSimLayerClusterToTPAssociation_*_*',
        'keep *_mix_FTLBarrel_*',
        'keep *_mix_FTLEndcap_*',
        'keep *_mix_InitialVertices_*',
        'keep *_mtdRecoClusterToSimLayerClusterAssociation_*_*',
        'keep *_mtdSimLayerClusterToTPAssociation_*_*',
        'keep *_mix_g4SimHitsMuonDTHits_*',
        'keep *_mix_g4SimHitsMuonCSCHits_*',
        'keep *_mix_g4SimHitsMuonRPCHits_*',
        'keep *_mix_g4SimHitsMuonGEMHits_*',
        'keep *_mix_g4SimHitsMuonME0Hits_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.PREMIXRAWEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *',
        'drop *',
        'drop *',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep *_g4SimHits_*_*',
        'keep edmHepMCProduct_source_*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackingParticles_*_*',
        'keep *_prunedDigiSimLinks_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*',
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*',
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*',
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*',
        'keep *_simMuonCSCDigis_*_*',
        'keep *_simMuonRPCDigis_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonME0Digis_*_*',
        'keep EBSrFlagsSorted_simEcalDigis_*_*',
        'keep EESrFlagsSorted_simEcalDigis_*_*',
        'keep *_simHcalUnsuppressedDigis_*_*',
        'keep *_mix_EETimeDigi_*',
        'keep *_mix_EBTimeDigi_*',
        'keep *_simEcalUnsuppressedDigis_*_*',
        'keep *_simHGCalUnsuppressedDigis_EE_*',
        'keep *_simHGCalUnsuppressedDigis_HEfront_*',
        'keep *_simHGCalUnsuppressedDigis_HEback_*',
        'keep *_mix_MergedCaloTruth_*',
        'keep *_mix_MergedMtdTruth_*',
        'keep *_mix_MergedMtdTruthLC_*',
        'keep *_mix_MergedMtdTruthST_*',
        'keep *_mix_FTLBarrel_*',
        'keep *_mix_FTLEndcap_*',
        'keep *_mix_InitialVertices_*',
        'keep *_mtdRecoClusterToSimLayerClusterAssociation_*_*',
        'keep *_mtdSimLayerClusterToTPAssociation_*_*',
        'keep CrossingFramePlaybackInfoNew_*_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int6stdbitsetstdpairs_*_AffectedAPVList_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*',
        'keep *_mix_MergedTrackTruth_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'keep recoGenJets_ak*_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*',
        'keep recoGenMETs_*_*_*',
        'keep FEDRawDataCollection_source_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep *_MEtoEDMConverter_*_*',
        'keep *_randomEngineStateProducer_*_*',
        'keep *_logErrorHarvester_*_*',
        'keep *_sim*Digis_*_*',
        'keep *Phase2TrackerDigi*_*_*_*',
        'keep CrossingFramePlaybackInfoNew_*_*_*',
        'drop CrossingFramePlaybackInfoNew_mix_*_*',
        'keep *_*_MergedTrackTruth_*',
        'keep *_*_StripDigiSimLink_*',
        'keep *_*_PixelDigiSimLink_*',
        'keep *_*_MuonCSCStripDigiSimLinks_*',
        'keep *_*_MuonCSCWireDigiSimLinks_*',
        'keep *_*_RPCDigiSimLink_*',
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_*_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.PixelTripletHLTGenerator = cms.PSet(
    ComponentName = cms.string('PixelTripletHLTGenerator'),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    extraHitRPhitolerance = cms.double(0.016),
    extraHitRZtolerance = cms.double(0.02),
    maxElement = cms.uint32(100000),
    phiPreFiltering = cms.double(0.3),
    useBending = cms.bool(True),
    useFixedPreFiltering = cms.bool(False),
    useMultScattering = cms.bool(True)
)

process.PseudoBayesPattern = cms.PSet(
    allowDuplicates = cms.bool(False),
    allowUncorrelatedPatterns = cms.bool(True),
    allowedVariance = cms.int32(1),
    debug = cms.untracked.bool(False),
    maxPathsPerMatch = cms.int32(256),
    minNLayerHits = cms.int32(3),
    minSingleSLHitsMax = cms.int32(3),
    minSingleSLHitsMin = cms.int32(0),
    minUncorrelatedHits = cms.int32(3),
    pattern_filename = cms.FileInPath('L1Trigger/DTTriggerPhase2/data/PseudoBayesPatterns_uncorrelated_v0.root'),
    saveOnPlace = cms.bool(True),
    setLateralities = cms.bool(True)
)

process.RAWAODEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    eventAutoFlushCompressedSize = cms.untracked.int32(31457280),
    outputCommands = cms.untracked.vstring( (
        'drop *',
        'drop *',
        'keep ClusterSummary_clusterSummaryProducer_*_*',
        'keep *_dt4DSegments_*_*',
        'keep *_dt4DCosmicSegments_*_*',
        'keep *_cscSegments_*_*',
        'keep *_rpcRecHits_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_gemRecHits_*_*',
        'keep *_gemSegments_*_*',
        'keep *_me0RecHits_*_*',
        'keep *_me0Segments_*_*',
        'keep *_castorreco_*_*',
        'keep *_reducedHcalRecHits_*_*',
        'keep HcalUnpackerReport_castorDigis_*_*',
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*',
        'keep HcalUnpackerReport_hcalDigis_*_*',
        'keep *_HGCalRecHit_*_*',
        'keep recoCaloClusters_hgcalMergeLayerClusters_*_*',
        'keep *_hgcalMergeLayerClusters_timeLayerCluster_*',
        'keep *_hgcalMergeLayerClusters_InitialLayerClustersMask_*',
        'keep *_selectDigi_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep recoCaloClusters_hybridSuperClusters_*_*',
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*',
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*',
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterHGCal__*',
        'keep recoCaloClusters_particleFlowSuperClusterHGCal__*',
        'keep recoTracks_GsfGlobalElectronTest_*_*',
        'keep recoGsfTracks_electronGsfTracks_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_conversionStepTracks_*_*',
        'keep recoTracks_beamhaloTracks_*_*',
        'keep recoTracks_ctfPixelLess_*_*',
        'keep *_dedxHarmonic2_*_*',
        'keep *_dedxPixelHarmonic2_*_*',
        'keep *_dedxHitInfo_*_*',
        'keep *_trackExtrapolator_*_*',
        'keep *_generalTracks_MVAValues_*',
        'keep *_generalTracks_MVAVals_*',
        'keep recoCaloJets_ak4CaloJets_*_*',
        'keep *_ak4CaloJets_rho_*',
        'keep *_ak4CaloJets_sigma_*',
        'keep *_ak4PFJetsCHS_*_*',
        'keep floatedmValueMap_puppi_*_*',
        'keep *_ak4PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppiSoftDrop_*_*',
        'keep recoPFJets_ak4PFJets_*_*',
        'keep *_ak4PFJets_rho_*',
        'keep *_ak4PFJets_sigma_*',
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*',
        'keep *_caloTowers_*_*',
        'keep *_CastorTowerReco_*_*',
        'keep *_ak4JetTracksAssociatorAtVertex_*_*',
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*',
        'keep *_ak4JetTracksAssociatorExplicit_*_*',
        'keep *_ak4JetExtender_*_*',
        'keep *_ak4JetID_*_*',
        'keep recoBasicJets_ak5CastorJets_*_*',
        'keep *_ak5CastorJets_rho_*',
        'keep *_ak5CastorJets_sigma_*',
        'keep *_ak5CastorJetID_*_*',
        'keep recoBasicJets_ak7CastorJets_*_*',
        'keep *_ak7CastorJets_rho_*',
        'keep *_ak7CastorJets_sigma_*',
        'keep *_ak7CastorJetID_*_*',
        'keep *_fixedGridRhoAll_*_*',
        'keep *_fixedGridRhoFastjetAll_*_*',
        'keep *_fixedGridRhoFastjetAllTmp_*_*',
        'keep *_fixedGridRhoFastjetCentral_*_*',
        'keep *_fixedGridRhoFastjetAllCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*',
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*',
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*',
        'keep recoCaloMETs_caloMet_*_*',
        'keep recoCaloMETs_caloMetBE_*_*',
        'keep recoCaloMETs_caloMetBEFO_*_*',
        'keep recoCaloMETs_caloMetM_*_*',
        'keep recoPFMETs_pfMet_*_*',
        'keep recoPFMETs_pfChMet_*_*',
        'keep floatedmValueMap_puppiNoLep_*_*',
        'keep recoPFMETs_pfMetPuppi_*_*',
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*',
        'keep HcalNoiseSummary_hcalnoise_*_*',
        'keep recoGlobalHaloData_GlobalHaloData_*_*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep recoMuons_muons_*_*',
        'keep booledmValueMap_muons_*_*',
        'keep doubleedmValueMap_muons_muPFMean*_*',
        'keep doubleedmValueMap_muons_muPFSum*_*',
        'keep *_muons_muonShowerInformation_*',
        'keep recoMuonTimeExtraedmValueMap_muons_*_*',
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*',
        'keep uintedmValueMap_muons_*_*',
        'keep *_particleFlow_muons_*',
        'keep recoMuons_displacedMuons_*_*',
        'keep booledmValueMap_displacedMuons_*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFMean*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFSum*_*',
        'keep recoMuonTimeExtraedmValueMap_displacedMuons_*_*',
        'keep uintedmValueMap_displacedMuons_*_*',
        'keep *_particleFlow_displacedMuons_*',
        'keep recoTracks_standAloneMuons_*_*',
        'keep recoTrackExtras_standAloneMuons_*_*',
        'keep TrackingRecHitsOwned_standAloneMuons_*_*',
        'keep recoTracks_globalMuons_*_*',
        'keep recoTrackExtras_globalMuons_*_*',
        'keep recoTracks_tevMuons_*_*',
        'keep recoTrackExtras_tevMuons_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_displacedTracks_*_*',
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*',
        'keep recoTracks_displacedGlobalMuons_*_*',
        'keep recoTrackExtras_displacedGlobalMuons_*_*',
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*',
        'keep recoTracks_cosmicMuons_*_*',
        'keep recoMuons_muonsFromCosmics_*_*',
        'keep recoTracks_cosmicMuons1Leg_*_*',
        'keep recoMuons_muonsFromCosmics1Leg_*_*',
        'keep recoTracks_refittedStandAloneMuons_*_*',
        'keep recoTrackExtras_refittedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTrackExtras_displacedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*',
        'keep *_muonReducedTrackExtras_*_*',
        'keep *_displacedMuonReducedTrackExtras_*_*',
        'keep *_softPFElectronBJetTags_*_*',
        'keep *_softPFMuonBJetTags_*_*',
        'keep *_pfTrackCountingHighEffBJetTags_*_*',
        'keep *_pfJetProbabilityBJetTags_*_*',
        'keep *_pfJetBProbabilityBJetTags_*_*',
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*',
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*',
        'keep *_pfGhostTrackBJetTags_*_*',
        'keep *_pfCombinedMVAV2BJetTags_*_*',
        'keep *_inclusiveCandidateSecondaryVertices_*_*',
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*',
        'keep *_pfCombinedCvsLJetTags_*_*',
        'keep *_pfCombinedCvsBJetTags_*_*',
        'keep *_pfChargeBJetTags_*_*',
        'keep *_pfDeepCSVJetTags_*_*',
        'keep *_pfDeepCMVAJetTags_*_*',
        'keep *_pixelClusterTagInfos_*_*',
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*',
        'keep recoPFTaus_hpsPFTauProducer_*_*',
        'keep *_hpsPFTauBasicDiscriminators_*_*',
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*',
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*',
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*',
        'keep *_hpsPFTauTransverseImpactParameters_*_*',
        'keep  *_offlinePrimaryVertices__*',
        'keep *_offlinePrimaryVerticesWithBS_*_*',
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*',
        'keep *_nuclearInteractionMaker_*_*',
        'keep *_generalV0Candidates_*_*',
        'keep *_inclusiveSecondaryVertices_*_*',
        'keep *_offlinePrimaryVertices4D__*',
        'keep *_offlinePrimaryVertices4DWithBS__*',
        'keep *_trackTimeValueMapProducer_*_*',
        'keep *_tofPID_*_*',
        'keep recoGsfElectronCores_gsfElectronCores_*_*',
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*',
        'keep recoGsfElectrons_gsfElectrons_*_*',
        'keep recoGsfElectrons_gedGsfElectrons_*_*',
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*',
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*',
        'keep floatedmValueMap_eidRobustLoose_*_*',
        'keep floatedmValueMap_eidRobustTight_*_*',
        'keep floatedmValueMap_eidRobustHighEnergy_*_*',
        'keep floatedmValueMap_eidLoose_*_*',
        'keep floatedmValueMap_eidTight_*_*',
        'keep *_egmGedGsfElectronPFIsolation_*_*',
        'keep recoPhotonCores_gedPhotonCore_*_*',
        'keep recoPhotons_gedPhotons_*_*',
        'keep *_particleBasedIsolation_*_*',
        'keep recoPhotonCores_photonCore_*_*',
        'keep recoPhotons_photons_*_*',
        'keep recoPhotonCores_ootPhotonCore_*_*',
        'keep recoPhotons_ootPhotons_*_*',
        'keep recoConversions_conversions_*_*',
        'drop recoConversions_conversions_uncleanedConversions_*',
        'keep recoConversions_mustacheConversions_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep recoConversions_allConversions_*_*',
        'keep recoConversions_allConversionsOldEG_*_*',
        'keep recoTracks_ckfOutInTracksFromConversions_*_*',
        'keep recoTracks_ckfInOutTracksFromConversions_*_*',
        'keep recoConversions_uncleanedOnlyAllConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep *_PhotonIDProd_*_*',
        'keep *_PhotonIDProdGED_*_*',
        'keep *_hfRecoEcalCandidate_*_*',
        'keep *_hfEMClusters_*_*',
        'keep *_gedGsfElectronCores_*_*',
        'keep *_gedGsfElectrons_*_*',
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*',
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*',
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*',
        'keep *_lowPtGsfToTrackLinks_*_*',
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_rekeyLowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_lowPtGsfElectronID_*_*',
        'keep *_ecalDrivenGsfElectronCores_*_*',
        'keep *_ecalDrivenGsfElectrons_*_*',
        'keep *_ecalDrivenGsfElectronCoresHGC_*_*',
        'keep *_ecalDrivenGsfElectronsHGC_*_*',
        'keep *_photonCoreHGC_*_*',
        'keep *_photonsHGC_*_*',
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*',
        'keep recoCaloClusters_particleFlowEGamma_*_*',
        'keep recoSuperClusters_particleFlowEGamma_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoConversions_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlow_*_*',
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*',
        'keep *_particleFlow_electrons_*',
        'keep *_particleFlow_photons_*',
        'keep *_particleFlow_muons_*',
        'keep recoCaloClusters_pfElectronTranslator_*_*',
        'keep recoPreshowerClusters_pfElectronTranslator_*_*',
        'keep recoSuperClusters_pfElectronTranslator_*_*',
        'keep recoCaloClusters_pfPhotonTranslator_*_*',
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*',
        'keep recoSuperClusters_pfPhotonTranslator_*_*',
        'keep recoPhotons_pfPhotonTranslator_*_*',
        'keep recoPhotonCores_pfPhotonTranslator_*_*',
        'keep recoConversions_pfPhotonTranslator_*_*',
        'keep *_particleFlowPtrs_*_*',
        'keep *_particleFlowTmpPtrs_*_*',
        'keep *_chargedHadronPFTrackIsolation_*_*',
        'keep recoPFRecHits_particleFlowRecHitHGC_Cleaned_*',
        'keep recoSuperClusters_simPFProducer_*_*',
        'keep *_ecalBarrelClusterFastTimer_*_*',
        'keep *_offlineBeamSpot_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_l1L1GtObjectMap_*_*',
        'keep LumiSummary_lumiProducer_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*',
        'drop *_hlt*_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*',
        'keep L1TriggerScalerss_scalersRawToDigi_*_*',
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep BeamSpotOnlines_scalersRawToDigi_*_*',
        'keep DcsStatuss_scalersRawToDigi_*_*',
        'keep CTPPSRecord_onlineMetaDataDigis_*_*',
        'keep DCSRecord_onlineMetaDataDigis_*_*',
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*',
        'keep recoBeamSpot_onlineMetaDataDigis_*_*',
        'keep *_tcdsDigis_*_*',
        'keep *_logErrorHarvester_*_*',
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*',
        'keep TotemFEDInfos_totemRPRawToDigi_*_*',
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*',
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*',
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*',
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*',
        'keep TotemFEDInfos_totemT2Digis_*_*',
        'keep TotemT2DigiedmNewDetSetVector_totemT2Digis_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemT2Digis_*_*',
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*',
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_diamondSampicLocalTracks_*_*',
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*',
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*',
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*',
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*',
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep FEDRawDataCollection_source_*_*'
     ) )
)

process.RAWAODSIMEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    eventAutoFlushCompressedSize = cms.untracked.int32(20971520),
    outputCommands = cms.untracked.vstring( (
        'drop *',
        'drop *',
        'drop *',
        'keep ClusterSummary_clusterSummaryProducer_*_*',
        'keep *_dt4DSegments_*_*',
        'keep *_dt4DCosmicSegments_*_*',
        'keep *_cscSegments_*_*',
        'keep *_rpcRecHits_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_gemRecHits_*_*',
        'keep *_gemSegments_*_*',
        'keep *_me0RecHits_*_*',
        'keep *_me0Segments_*_*',
        'keep *_castorreco_*_*',
        'keep *_reducedHcalRecHits_*_*',
        'keep HcalUnpackerReport_castorDigis_*_*',
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*',
        'keep HcalUnpackerReport_hcalDigis_*_*',
        'keep *_HGCalRecHit_*_*',
        'keep recoCaloClusters_hgcalMergeLayerClusters_*_*',
        'keep *_hgcalMergeLayerClusters_timeLayerCluster_*',
        'keep *_hgcalMergeLayerClusters_InitialLayerClustersMask_*',
        'keep *_selectDigi_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep recoCaloClusters_hybridSuperClusters_*_*',
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*',
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*',
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterHGCal__*',
        'keep recoCaloClusters_particleFlowSuperClusterHGCal__*',
        'keep recoTracks_GsfGlobalElectronTest_*_*',
        'keep recoGsfTracks_electronGsfTracks_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_conversionStepTracks_*_*',
        'keep recoTracks_beamhaloTracks_*_*',
        'keep recoTracks_ctfPixelLess_*_*',
        'keep *_dedxHarmonic2_*_*',
        'keep *_dedxPixelHarmonic2_*_*',
        'keep *_dedxHitInfo_*_*',
        'keep *_trackExtrapolator_*_*',
        'keep *_generalTracks_MVAValues_*',
        'keep *_generalTracks_MVAVals_*',
        'keep recoCaloJets_ak4CaloJets_*_*',
        'keep *_ak4CaloJets_rho_*',
        'keep *_ak4CaloJets_sigma_*',
        'keep *_ak4PFJetsCHS_*_*',
        'keep floatedmValueMap_puppi_*_*',
        'keep *_ak4PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppiSoftDrop_*_*',
        'keep recoPFJets_ak4PFJets_*_*',
        'keep *_ak4PFJets_rho_*',
        'keep *_ak4PFJets_sigma_*',
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*',
        'keep *_caloTowers_*_*',
        'keep *_CastorTowerReco_*_*',
        'keep *_ak4JetTracksAssociatorAtVertex_*_*',
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*',
        'keep *_ak4JetTracksAssociatorExplicit_*_*',
        'keep *_ak4JetExtender_*_*',
        'keep *_ak4JetID_*_*',
        'keep recoBasicJets_ak5CastorJets_*_*',
        'keep *_ak5CastorJets_rho_*',
        'keep *_ak5CastorJets_sigma_*',
        'keep *_ak5CastorJetID_*_*',
        'keep recoBasicJets_ak7CastorJets_*_*',
        'keep *_ak7CastorJets_rho_*',
        'keep *_ak7CastorJets_sigma_*',
        'keep *_ak7CastorJetID_*_*',
        'keep *_fixedGridRhoAll_*_*',
        'keep *_fixedGridRhoFastjetAll_*_*',
        'keep *_fixedGridRhoFastjetAllTmp_*_*',
        'keep *_fixedGridRhoFastjetCentral_*_*',
        'keep *_fixedGridRhoFastjetAllCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*',
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*',
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*',
        'keep recoCaloMETs_caloMet_*_*',
        'keep recoCaloMETs_caloMetBE_*_*',
        'keep recoCaloMETs_caloMetBEFO_*_*',
        'keep recoCaloMETs_caloMetM_*_*',
        'keep recoPFMETs_pfMet_*_*',
        'keep recoPFMETs_pfChMet_*_*',
        'keep floatedmValueMap_puppiNoLep_*_*',
        'keep recoPFMETs_pfMetPuppi_*_*',
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*',
        'keep HcalNoiseSummary_hcalnoise_*_*',
        'keep recoGlobalHaloData_GlobalHaloData_*_*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep recoMuons_muons_*_*',
        'keep booledmValueMap_muons_*_*',
        'keep doubleedmValueMap_muons_muPFMean*_*',
        'keep doubleedmValueMap_muons_muPFSum*_*',
        'keep *_muons_muonShowerInformation_*',
        'keep recoMuonTimeExtraedmValueMap_muons_*_*',
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*',
        'keep uintedmValueMap_muons_*_*',
        'keep *_particleFlow_muons_*',
        'keep recoMuons_displacedMuons_*_*',
        'keep booledmValueMap_displacedMuons_*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFMean*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFSum*_*',
        'keep recoMuonTimeExtraedmValueMap_displacedMuons_*_*',
        'keep uintedmValueMap_displacedMuons_*_*',
        'keep *_particleFlow_displacedMuons_*',
        'keep recoTracks_standAloneMuons_*_*',
        'keep recoTrackExtras_standAloneMuons_*_*',
        'keep TrackingRecHitsOwned_standAloneMuons_*_*',
        'keep recoTracks_globalMuons_*_*',
        'keep recoTrackExtras_globalMuons_*_*',
        'keep recoTracks_tevMuons_*_*',
        'keep recoTrackExtras_tevMuons_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_displacedTracks_*_*',
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*',
        'keep recoTracks_displacedGlobalMuons_*_*',
        'keep recoTrackExtras_displacedGlobalMuons_*_*',
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*',
        'keep recoTracks_cosmicMuons_*_*',
        'keep recoMuons_muonsFromCosmics_*_*',
        'keep recoTracks_cosmicMuons1Leg_*_*',
        'keep recoMuons_muonsFromCosmics1Leg_*_*',
        'keep recoTracks_refittedStandAloneMuons_*_*',
        'keep recoTrackExtras_refittedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTrackExtras_displacedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*',
        'keep *_muonReducedTrackExtras_*_*',
        'keep *_displacedMuonReducedTrackExtras_*_*',
        'keep *_softPFElectronBJetTags_*_*',
        'keep *_softPFMuonBJetTags_*_*',
        'keep *_pfTrackCountingHighEffBJetTags_*_*',
        'keep *_pfJetProbabilityBJetTags_*_*',
        'keep *_pfJetBProbabilityBJetTags_*_*',
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*',
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*',
        'keep *_pfGhostTrackBJetTags_*_*',
        'keep *_pfCombinedMVAV2BJetTags_*_*',
        'keep *_inclusiveCandidateSecondaryVertices_*_*',
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*',
        'keep *_pfCombinedCvsLJetTags_*_*',
        'keep *_pfCombinedCvsBJetTags_*_*',
        'keep *_pfChargeBJetTags_*_*',
        'keep *_pfDeepCSVJetTags_*_*',
        'keep *_pfDeepCMVAJetTags_*_*',
        'keep *_pixelClusterTagInfos_*_*',
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*',
        'keep recoPFTaus_hpsPFTauProducer_*_*',
        'keep *_hpsPFTauBasicDiscriminators_*_*',
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*',
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*',
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*',
        'keep *_hpsPFTauTransverseImpactParameters_*_*',
        'keep  *_offlinePrimaryVertices__*',
        'keep *_offlinePrimaryVerticesWithBS_*_*',
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*',
        'keep *_nuclearInteractionMaker_*_*',
        'keep *_generalV0Candidates_*_*',
        'keep *_inclusiveSecondaryVertices_*_*',
        'keep *_offlinePrimaryVertices4D__*',
        'keep *_offlinePrimaryVertices4DWithBS__*',
        'keep *_trackTimeValueMapProducer_*_*',
        'keep *_tofPID_*_*',
        'keep recoGsfElectronCores_gsfElectronCores_*_*',
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*',
        'keep recoGsfElectrons_gsfElectrons_*_*',
        'keep recoGsfElectrons_gedGsfElectrons_*_*',
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*',
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*',
        'keep floatedmValueMap_eidRobustLoose_*_*',
        'keep floatedmValueMap_eidRobustTight_*_*',
        'keep floatedmValueMap_eidRobustHighEnergy_*_*',
        'keep floatedmValueMap_eidLoose_*_*',
        'keep floatedmValueMap_eidTight_*_*',
        'keep *_egmGedGsfElectronPFIsolation_*_*',
        'keep recoPhotonCores_gedPhotonCore_*_*',
        'keep recoPhotons_gedPhotons_*_*',
        'keep *_particleBasedIsolation_*_*',
        'keep recoPhotonCores_photonCore_*_*',
        'keep recoPhotons_photons_*_*',
        'keep recoPhotonCores_ootPhotonCore_*_*',
        'keep recoPhotons_ootPhotons_*_*',
        'keep recoConversions_conversions_*_*',
        'drop recoConversions_conversions_uncleanedConversions_*',
        'keep recoConversions_mustacheConversions_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep recoConversions_allConversions_*_*',
        'keep recoConversions_allConversionsOldEG_*_*',
        'keep recoTracks_ckfOutInTracksFromConversions_*_*',
        'keep recoTracks_ckfInOutTracksFromConversions_*_*',
        'keep recoConversions_uncleanedOnlyAllConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep *_PhotonIDProd_*_*',
        'keep *_PhotonIDProdGED_*_*',
        'keep *_hfRecoEcalCandidate_*_*',
        'keep *_hfEMClusters_*_*',
        'keep *_gedGsfElectronCores_*_*',
        'keep *_gedGsfElectrons_*_*',
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*',
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*',
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*',
        'keep *_lowPtGsfToTrackLinks_*_*',
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_rekeyLowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_lowPtGsfElectronID_*_*',
        'keep *_ecalDrivenGsfElectronCores_*_*',
        'keep *_ecalDrivenGsfElectrons_*_*',
        'keep *_ecalDrivenGsfElectronCoresHGC_*_*',
        'keep *_ecalDrivenGsfElectronsHGC_*_*',
        'keep *_photonCoreHGC_*_*',
        'keep *_photonsHGC_*_*',
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*',
        'keep recoCaloClusters_particleFlowEGamma_*_*',
        'keep recoSuperClusters_particleFlowEGamma_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoConversions_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlow_*_*',
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*',
        'keep *_particleFlow_electrons_*',
        'keep *_particleFlow_photons_*',
        'keep *_particleFlow_muons_*',
        'keep recoCaloClusters_pfElectronTranslator_*_*',
        'keep recoPreshowerClusters_pfElectronTranslator_*_*',
        'keep recoSuperClusters_pfElectronTranslator_*_*',
        'keep recoCaloClusters_pfPhotonTranslator_*_*',
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*',
        'keep recoSuperClusters_pfPhotonTranslator_*_*',
        'keep recoPhotons_pfPhotonTranslator_*_*',
        'keep recoPhotonCores_pfPhotonTranslator_*_*',
        'keep recoConversions_pfPhotonTranslator_*_*',
        'keep *_particleFlowPtrs_*_*',
        'keep *_particleFlowTmpPtrs_*_*',
        'keep *_chargedHadronPFTrackIsolation_*_*',
        'keep recoPFRecHits_particleFlowRecHitHGC_Cleaned_*',
        'keep recoSuperClusters_simPFProducer_*_*',
        'keep *_ecalBarrelClusterFastTimer_*_*',
        'keep *_offlineBeamSpot_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_l1L1GtObjectMap_*_*',
        'keep LumiSummary_lumiProducer_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*',
        'drop *_hlt*_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*',
        'keep L1TriggerScalerss_scalersRawToDigi_*_*',
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep BeamSpotOnlines_scalersRawToDigi_*_*',
        'keep DcsStatuss_scalersRawToDigi_*_*',
        'keep CTPPSRecord_onlineMetaDataDigis_*_*',
        'keep DCSRecord_onlineMetaDataDigis_*_*',
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*',
        'keep recoBeamSpot_onlineMetaDataDigis_*_*',
        'keep *_tcdsDigis_*_*',
        'keep *_logErrorHarvester_*_*',
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*',
        'keep TotemFEDInfos_totemRPRawToDigi_*_*',
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*',
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*',
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*',
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*',
        'keep TotemFEDInfos_totemT2Digis_*_*',
        'keep TotemT2DigiedmNewDetSetVector_totemT2Digis_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemT2Digis_*_*',
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*',
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_diamondSampicLocalTracks_*_*',
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*',
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*',
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*',
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*',
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackMCMatch_*_*',
        'keep *_muonSimClassifier_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*',
        'keep recoGenMETs_*_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*',
        'keep *edmValueMap_trackExtenderWithMTD_*_*',
        'keep *_mtdTrackQualityMVA_*_*',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep SimVertexs_g4SimHits_*_*'
     ) )
)

process.RAWDEBUGEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *',
        'drop *',
        'drop *',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep *_g4SimHits_*_*',
        'keep edmHepMCProduct_source_*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackingParticles_*_*',
        'keep *_prunedDigiSimLinks_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*',
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*',
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*',
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*',
        'keep *_simMuonCSCDigis_*_*',
        'keep *_simMuonRPCDigis_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonME0Digis_*_*',
        'keep EBSrFlagsSorted_simEcalDigis_*_*',
        'keep EESrFlagsSorted_simEcalDigis_*_*',
        'keep *_simHcalUnsuppressedDigis_*_*',
        'keep *_mix_EETimeDigi_*',
        'keep *_mix_EBTimeDigi_*',
        'keep *_simEcalUnsuppressedDigis_*_*',
        'keep *_simHGCalUnsuppressedDigis_EE_*',
        'keep *_simHGCalUnsuppressedDigis_HEfront_*',
        'keep *_simHGCalUnsuppressedDigis_HEback_*',
        'keep *_mix_MergedCaloTruth_*',
        'keep *_mix_MergedMtdTruth_*',
        'keep *_mix_MergedMtdTruthLC_*',
        'keep *_mix_MergedMtdTruthST_*',
        'keep *_mix_FTLBarrel_*',
        'keep *_mix_FTLEndcap_*',
        'keep *_mix_InitialVertices_*',
        'keep *_mtdRecoClusterToSimLayerClusterAssociation_*_*',
        'keep *_mtdSimLayerClusterToTPAssociation_*_*',
        'keep CrossingFramePlaybackInfoNew_*_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int6stdbitsetstdpairs_*_AffectedAPVList_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*',
        'keep *_mix_MergedTrackTruth_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'keep recoGenJets_ak*_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*',
        'keep recoGenMETs_*_*_*',
        'keep FEDRawDataCollection_source_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep *_MEtoEDMConverter_*_*',
        'keep *_randomEngineStateProducer_*_*',
        'keep *_logErrorHarvester_*_*',
        'keep *_sim*Digis_*_*',
        'keep *Phase2TrackerDigi*_*_*_*',
        'keep PixelDigiSimLinkedmDetSetVector_simSiPixelDigis_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simSiStripDigis_*_*',
        'drop *_mix_simSiPixelDigis*_*',
        'drop *_mix_simSiStripDigis*_*',
        'keep *_allTrackMCMatch_*_*',
        'drop *_trackingtruthprod_*_*',
        'drop *_electrontruth_*_*',
        'keep *_mix_MergedTrackTruth_*',
        'keep CrossingFramePlaybackInfoNew_*_*_*',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.RAWDEBUGHLTEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring( (
        'drop *',
        'drop *',
        'drop *',
        'drop *',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep *_g4SimHits_*_*',
        'keep edmHepMCProduct_source_*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackingParticles_*_*',
        'keep *_prunedDigiSimLinks_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*',
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*',
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*',
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*',
        'keep *_simMuonCSCDigis_*_*',
        'keep *_simMuonRPCDigis_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonME0Digis_*_*',
        'keep EBSrFlagsSorted_simEcalDigis_*_*',
        'keep EESrFlagsSorted_simEcalDigis_*_*',
        'keep *_simHcalUnsuppressedDigis_*_*',
        'keep *_mix_EETimeDigi_*',
        'keep *_mix_EBTimeDigi_*',
        'keep *_simEcalUnsuppressedDigis_*_*',
        'keep *_simHGCalUnsuppressedDigis_EE_*',
        'keep *_simHGCalUnsuppressedDigis_HEfront_*',
        'keep *_simHGCalUnsuppressedDigis_HEback_*',
        'keep *_mix_MergedCaloTruth_*',
        'keep *_mix_MergedMtdTruth_*',
        'keep *_mix_MergedMtdTruthLC_*',
        'keep *_mix_MergedMtdTruthST_*',
        'keep *_mix_FTLBarrel_*',
        'keep *_mix_FTLEndcap_*',
        'keep *_mix_InitialVertices_*',
        'keep *_mtdRecoClusterToSimLayerClusterAssociation_*_*',
        'keep *_mtdSimLayerClusterToTPAssociation_*_*',
        'keep CrossingFramePlaybackInfoNew_*_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int6stdbitsetstdpairs_*_AffectedAPVList_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*',
        'keep *_mix_MergedTrackTruth_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'keep recoGenJets_ak*_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*',
        'keep recoGenMETs_*_*_*',
        'keep FEDRawDataCollection_source_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep *_MEtoEDMConverter_*_*',
        'keep *_randomEngineStateProducer_*_*',
        'keep *_logErrorHarvester_*_*',
        'keep *_sim*Digis_*_*',
        'keep *Phase2TrackerDigi*_*_*_*',
        'keep PixelDigiSimLinkedmDetSetVector_simSiPixelDigis_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simSiStripDigis_*_*',
        'drop *_mix_simSiPixelDigis*_*',
        'drop *_mix_simSiStripDigis*_*',
        'keep *_allTrackMCMatch_*_*',
        'drop *_trackingtruthprod_*_*',
        'drop *_electrontruth_*_*',
        'keep *_mix_MergedTrackTruth_*',
        'keep CrossingFramePlaybackInfoNew_*_*_*',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*',
        'drop *_hlt*_*_*',
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*',
        'keep *_hltAK4CaloJetsIDPassed_*_*',
        'keep *_hltAK4CaloJets_*_*',
        'keep *_hltAK4PFJetsCorrected_*_*',
        'keep *_hltAK4PFJetsForTaus_*_*',
        'keep *_hltAK4PFJets_*_*',
        'keep *_hltAlCaEtaEBRechitsToDigis_*_*',
        'keep *_hltAlCaEtaEERechitsToDigis_*_*',
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegional_etaEcalRecHitsES_*',
        'keep *_hltAlCaPi0EBRechitsToDigis_*_*',
        'keep *_hltAlCaPi0EERechitsToDigis_*_*',
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegional_pi0EcalRecHitsES_*',
        'keep *_hltAlcaPixelClusterCounts_*_*',
        'keep *_hltBSoftMuonMu5L3_*_*',
        'keep *_hltCsc2DRecHits_*_*',
        'keep *_hltCscSegments_*_*',
        'keep *_hltDeepBLifetimeTagInfosPF_*_*',
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsCalo_*_*',
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsPF_*_*',
        'keep *_hltDeepSecondaryVertexTagInfosPF_*_*',
        'keep *_hltDisplacedhltIter4PFlowTrackSelectionHighPurity_*_*',
        'keep *_hltDoubletRecoveryPFlowTrackSelectionHighPurityPPOnAA_*_*',
        'keep *_hltDoubletRecoveryPFlowTrackSelectionHighPurity_*_*',
        'keep *_hltDt4DSegments_*_*',
        'keep *_hltEcalPhiSymFilter_*_*',
        'keep *_hltEcalRecHit_*_*',
        'keep *_hltEgammaCandidates_*_*',
        'keep *_hltEgammaGsfTracks_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltFastPVPixelTracksMerger_*_*',
        'keep *_hltFastPVPixelTracksRecover_*_*',
        'keep *_hltFastPVPixelTracks_*_*',
        'keep *_hltFastPVPixelVertices_*_*',
        'keep *_hltFastPixelBLifetimeL3Associator_*_*',
        'keep *_hltFastPrimaryVertex_*_*',
        'keep *_hltGlbTrkMuonCandsNoVtx_*_*',
        'keep *_hltGtStage2Digis_*_*',
        'keep *_hltHITrackingSiStripRawToClustersFacilityFullZeroSuppression_*_*',
        'keep *_hltHbhereco_*_*',
        'keep *_hltHfreco_*_*',
        'keep *_hltHoreco_*_*',
        'keep *_hltImpactParameterTagInfos_*_*',
        'keep *_hltInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_hltIsolPixelTrackProdHB_*_*',
        'keep *_hltIsolPixelTrackProdHE_*_*',
        'keep *_hltIter0PFlowCtfWithMaterialTracks_*_*',
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*',
        'keep *_hltIterL3GlbMuon_*_*',
        'keep *_hltIterL3MuonAndMuonFromL1Merged_*_*',
        'keep *_hltIterL3MuonMerged_*_*',
        'keep *_hltIterL3MuonsNoID_*_*',
        'keep *_hltIterL3Muons_*_*',
        'keep *_hltIterL3OIMuonTrackSelectionHighPurity_*_*',
        'keep *_hltL2MuonCandidatesNoVtx_*_*',
        'keep *_hltL2MuonCandidates_*_*',
        'keep *_hltL2MuonSeeds_*_*',
        'keep *_hltL2Muons_*_*',
        'keep *_hltL2TauJets_*_*',
        'keep *_hltL3MuonsIOHit_*_*',
        'keep *_hltL3MuonsLinksCombination_*_*',
        'keep *_hltL3MuonsOIHit_*_*',
        'keep *_hltL3MuonsOIState_*_*',
        'keep *_hltL3Muons_*_*',
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*',
        'keep *_hltL3NoFiltersNoVtxMuons_*_*',
        'keep *_hltL3TkFromL2OICombination_*_*',
        'keep *_hltL3TkTracksFromL2IOHit_*_*',
        'keep *_hltL3TkTracksFromL2OIHit_*_*',
        'keep *_hltL3TkTracksFromL2OIState_*_*',
        'keep *_hltL3TkTracksFromL2_*_*',
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*',
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*',
        'keep *_hltL3TrackCandidateFromL2OIState_*_*',
        'keep *_hltL3TrajSeedIOHit_*_*',
        'keep *_hltL3TrajSeedOIHit_*_*',
        'keep *_hltL3TrajSeedOIState_*_*',
        'keep *_hltL3TrajectorySeed_*_*',
        'keep *_hltMergedTracksForBTag_*_*',
        'keep *_hltMergedTracksPPOnAA_*_*',
        'keep *_hltMergedTracks_*_*',
        'keep *_hltMet_*_*',
        'keep *_hltMuonCSCDigis_*_*',
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*',
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*',
        'keep *_hltMuonDTDigis_*_*',
        'keep *_hltMuonRPCDigis_*_*',
        'keep *_hltOnlineBeamSpot_*_*',
        'keep *_hltPFJetForBtag_*_*',
        'keep *_hltPFJetForPNetAK8_*_*',
        'keep *_hltPFMETNoMuProducer_*_*',
        'keep *_hltPFMETProducer_*_*',
        'keep *_hltPFMETTypeOne_*_*',
        'keep *_hltPFMuonMerging_*_*',
        'keep *_hltPFTau35Track_*_*',
        'keep *_hltPFTau35_*_*',
        'keep *_hltPPSCalibrationRaw_*_*',
        'keep *_hltParticleFlowForTaus_*_*',
        'keep *_hltParticleFlow_*_*',
        'keep *_hltParticleNetDiscriminatorsJetTagsAK8_*_*',
        'keep *_hltParticleNetDiscriminatorsJetTags_*_*',
        'keep *_hltParticleNetJetTagInfos_*_*',
        'keep *_hltPixelTracksPPOnAA_*_*',
        'keep *_hltPixelTracks_*_*',
        'keep *_hltPixelVerticesPPOnAA_*_*',
        'keep *_hltPixelVertices_*_*',
        'keep *_hltRpcRecHits_*_*',
        'keep *_hltSelector4CentralJetsL1FastJet_*_*',
        'keep *_hltSelectorJets20L1FastJet_*_*',
        'keep *_hltSiPixelClustersAfterSplittingPPOnAA_*_*',
        'keep *_hltSiPixelClustersCache_*_*',
        'keep *_hltSiPixelClusters_*_*',
        'keep *_hltSiStripClusterizerForRawPrime_*_*',
        'keep *_hltSiStripClusters2ApproxClusters_*_*',
        'keep *_hltSiStripRawToClustersFacility_*_*',
        'keep *_hltTowerMakerForAll_*_*',
        'keep *_hltTriggerSummaryAOD_*_*',
        'keep *_hltTriggerSummaryRAW_*_*',
        'keep *_hltTrimmedPixelVerticesPPOnAA_*_*',
        'keep *_hltTrimmedPixelVertices_*_*',
        'keep *_hltVerticesL3_*_*',
        'keep *_hltVerticesPFFilterPPOnAA_*_*',
        'keep *_hltVerticesPFFilter_*_*',
        'keep *_hltVerticesPFSelector_*_*',
        'keep DetIds_hltSiStripRawToDigi_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep FEDRawDataCollection_rawDataRepacker_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*',
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*',
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*',
        'keep TrackingRecHitsOwned_hltL3Muons_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep recoCaloJets_*_*_*',
        'keep recoCaloMETs_*_*_*',
        'keep recoCaloMETs_hltMet_*_*',
        'keep recoCompositeCandidates_*_*_*',
        'keep recoElectrons_*_*_*',
        'keep recoIsolatedPixelTrackCandidates_*_*_*',
        'keep recoMETs_*_*_*',
        'keep recoPFJets_*_*_*',
        'keep recoPFTaus_*_*_*',
        'keep recoRecoChargedCandidates_*_*_*',
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*',
        'keep recoRecoEcalCandidates_*_*_*',
        'keep triggerTriggerEventWithRefs_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep triggerTriggerFilterObjectWithRefs_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*'
     ) ),
    splitLevel = cms.untracked.int32(0)
)

process.RAWEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    outputCommands = cms.untracked.vstring(
        'drop *',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.RAWMINIAODEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    eventAutoFlushCompressedSize = cms.untracked.int32(20971520),
    outputCommands = cms.untracked.vstring(
        'drop *',
        'keep *_slimmedPhotons_*_*',
        'keep *_slimmedOOTPhotons_*_*',
        'keep *_slimmedElectrons_*_*',
        'keep *_slimmedMuons_*_*',
        'keep recoTrackExtras_slimmedMuonTrackExtras_*_*',
        'keep TrackingRecHitsOwned_slimmedMuonTrackExtras_*_*',
        'keep SiPixelClusteredmNewDetSetVector_slimmedMuonTrackExtras_*_*',
        'keep SiStripClusteredmNewDetSetVector_slimmedMuonTrackExtras_*_*',
        'keep *_slimmedTaus_*_*',
        'keep *_slimmedTausBoosted_*_*',
        'keep *_slimmedCaloJets_*_*',
        'keep *_slimmedJPTJets_*_*',
        'keep *_slimmedJets_*_*',
        'keep recoBaseTagInfosOwned_slimmedJets_*_*',
        'keep *_slimmedJetsAK8_*_*',
        'drop recoBaseTagInfosOwned_slimmedJetsAK8_*_*',
        'keep *_slimmedJetsPuppi_*_*',
        'keep *_slimmedMETs_*_*',
        'keep *_slimmedMETsPuppi_*_*',
        'keep *_slimmedSecondaryVertices_*_*',
        'keep *_slimmedLambdaVertices_*_*',
        'keep *_slimmedKshortVertices_*_*',
        'keep *_slimmedJetsAK8PFPuppiSoftDropPacked_SubJets_*',
        'keep recoPhotonCores_reducedEgamma_*_*',
        'keep recoGsfElectronCores_reducedEgamma_*_*',
        'keep recoConversions_reducedEgamma_*_*',
        'keep recoSuperClusters_reducedEgamma_*_*',
        'keep recoCaloClusters_reducedEgamma_*_*',
        'keep EcalRecHitsSorted_reducedEgamma_*_*',
        'keep recoGsfTracks_reducedEgamma_*_*',
        'keep HBHERecHitsSorted_reducedEgamma_*_*',
        'keep *_slimmedHcalRecHits_*_*',
        'drop *_*_caloTowers_*',
        'drop *_*_pfCandidates_*',
        'drop *_*_genJets_*',
        'keep *_offlineBeamSpot_*_*',
        'keep *_offlineSlimmedPrimaryVertices_*_*',
        'keep *_offlineSlimmedPrimaryVerticesWithBS_*_*',
        'keep patPackedCandidates_packedPFCandidates_*_*',
        'keep *_isolatedTracks_*_*',
        'keep *_oniaPhotonCandidates_*_*',
        'keep *_bunchSpacingProducer_*_*',
        'keep double_fixedGridRhoAll__*',
        'keep double_fixedGridRhoFastjetAll__*',
        'keep double_fixedGridRhoFastjetAllTmp__*',
        'keep double_fixedGridRhoFastjetAllCalo__*',
        'keep double_fixedGridRhoFastjetCentral_*_*',
        'keep double_fixedGridRhoFastjetCentralCalo__*',
        'keep double_fixedGridRhoFastjetCentralChargedPileUp__*',
        'keep double_fixedGridRhoFastjetCentralNeutral__*',
        'keep *_slimmedPatTrigger_*_*',
        'keep patPackedTriggerPrescales_patTrigger__*',
        'keep patPackedTriggerPrescales_patTrigger_l1max_*',
        'keep patPackedTriggerPrescales_patTrigger_l1min_*',
        'keep *_l1extraParticles_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep GlobalExtBlkBXVector_simGtExtUnprefireable_*_*',
        'keep *_gtStage2Digis__*',
        'keep *_gmtStage2Digis_Muon_*',
        'keep *_caloStage2Digis_Jet_*',
        'keep *_caloStage2Digis_Tau_*',
        'keep *_caloStage2Digis_EGamma_*',
        'keep *_caloStage2Digis_EtSum_*',
        'keep *_TriggerResults_*_HLT',
        'keep *_TriggerResults_*_*',
        'keep patPackedCandidates_lostTracks_*_*',
        'keep HcalNoiseSummary_hcalnoise__*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTracks_displacedGlobalMuons__*',
        'keep recoTracks_displacedTracks__*',
        'keep *_prefiringweight_*_*',
        'keep *_slimmedLowPtElectrons_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep *_slimmedDisplacedMuons_*_*',
        'keep recoTrackExtras_slimmedDisplacedMuonTrackExtras_*_*',
        'keep TrackingRecHitsOwned_slimmedDisplacedMuonTrackExtras_*_*',
        'keep SiPixelClusteredmNewDetSetVector_slimmedDisplacedMuonTrackExtras_*_*',
        'keep SiStripClusteredmNewDetSetVector_slimmedDisplacedMuonTrackExtras_*_*',
        'keep *_packedPFCandidates_hcalDepthEnergyFractions_*',
        'drop *_packedPFCandidates_hcalDepthEnergyFractions_*',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep FEDRawDataCollection_source_*_*'
    )
)

process.RAWMINIAODSIMEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    eventAutoFlushCompressedSize = cms.untracked.int32(20971520),
    outputCommands = cms.untracked.vstring(
        'drop *',
        'drop *',
        'keep *_slimmedPhotons_*_*',
        'keep *_slimmedOOTPhotons_*_*',
        'keep *_slimmedElectrons_*_*',
        'keep *_slimmedMuons_*_*',
        'keep recoTrackExtras_slimmedMuonTrackExtras_*_*',
        'keep TrackingRecHitsOwned_slimmedMuonTrackExtras_*_*',
        'keep SiPixelClusteredmNewDetSetVector_slimmedMuonTrackExtras_*_*',
        'keep SiStripClusteredmNewDetSetVector_slimmedMuonTrackExtras_*_*',
        'keep *_slimmedTaus_*_*',
        'keep *_slimmedTausBoosted_*_*',
        'keep *_slimmedCaloJets_*_*',
        'keep *_slimmedJPTJets_*_*',
        'keep *_slimmedJets_*_*',
        'keep recoBaseTagInfosOwned_slimmedJets_*_*',
        'keep *_slimmedJetsAK8_*_*',
        'drop recoBaseTagInfosOwned_slimmedJetsAK8_*_*',
        'keep *_slimmedJetsPuppi_*_*',
        'keep *_slimmedMETs_*_*',
        'keep *_slimmedMETsPuppi_*_*',
        'keep *_slimmedSecondaryVertices_*_*',
        'keep *_slimmedLambdaVertices_*_*',
        'keep *_slimmedKshortVertices_*_*',
        'keep *_slimmedJetsAK8PFPuppiSoftDropPacked_SubJets_*',
        'keep recoPhotonCores_reducedEgamma_*_*',
        'keep recoGsfElectronCores_reducedEgamma_*_*',
        'keep recoConversions_reducedEgamma_*_*',
        'keep recoSuperClusters_reducedEgamma_*_*',
        'keep recoCaloClusters_reducedEgamma_*_*',
        'keep EcalRecHitsSorted_reducedEgamma_*_*',
        'keep recoGsfTracks_reducedEgamma_*_*',
        'keep HBHERecHitsSorted_reducedEgamma_*_*',
        'keep *_slimmedHcalRecHits_*_*',
        'drop *_*_caloTowers_*',
        'drop *_*_pfCandidates_*',
        'drop *_*_genJets_*',
        'keep *_offlineBeamSpot_*_*',
        'keep *_offlineSlimmedPrimaryVertices_*_*',
        'keep *_offlineSlimmedPrimaryVerticesWithBS_*_*',
        'keep patPackedCandidates_packedPFCandidates_*_*',
        'keep *_isolatedTracks_*_*',
        'keep *_oniaPhotonCandidates_*_*',
        'keep *_bunchSpacingProducer_*_*',
        'keep double_fixedGridRhoAll__*',
        'keep double_fixedGridRhoFastjetAll__*',
        'keep double_fixedGridRhoFastjetAllTmp__*',
        'keep double_fixedGridRhoFastjetAllCalo__*',
        'keep double_fixedGridRhoFastjetCentral_*_*',
        'keep double_fixedGridRhoFastjetCentralCalo__*',
        'keep double_fixedGridRhoFastjetCentralChargedPileUp__*',
        'keep double_fixedGridRhoFastjetCentralNeutral__*',
        'keep *_slimmedPatTrigger_*_*',
        'keep patPackedTriggerPrescales_patTrigger__*',
        'keep patPackedTriggerPrescales_patTrigger_l1max_*',
        'keep patPackedTriggerPrescales_patTrigger_l1min_*',
        'keep *_l1extraParticles_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep GlobalExtBlkBXVector_simGtExtUnprefireable_*_*',
        'keep *_gtStage2Digis__*',
        'keep *_gmtStage2Digis_Muon_*',
        'keep *_caloStage2Digis_Jet_*',
        'keep *_caloStage2Digis_Tau_*',
        'keep *_caloStage2Digis_EGamma_*',
        'keep *_caloStage2Digis_EtSum_*',
        'keep *_TriggerResults_*_HLT',
        'keep *_TriggerResults_*_*',
        'keep patPackedCandidates_lostTracks_*_*',
        'keep HcalNoiseSummary_hcalnoise__*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTracks_displacedGlobalMuons__*',
        'keep recoTracks_displacedTracks__*',
        'keep *_prefiringweight_*_*',
        'keep *_slimmedLowPtElectrons_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep *_slimmedDisplacedMuons_*_*',
        'keep recoTrackExtras_slimmedDisplacedMuonTrackExtras_*_*',
        'keep TrackingRecHitsOwned_slimmedDisplacedMuonTrackExtras_*_*',
        'keep SiPixelClusteredmNewDetSetVector_slimmedDisplacedMuonTrackExtras_*_*',
        'keep SiStripClusteredmNewDetSetVector_slimmedDisplacedMuonTrackExtras_*_*',
        'keep *_packedPFCandidates_hcalDepthEnergyFractions_*',
        'drop *_packedPFCandidates_hcalDepthEnergyFractions_*',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep FEDRawDataCollection_source_*_*',
        'keep *_slimmedPhotons_*_*',
        'keep *_slimmedOOTPhotons_*_*',
        'keep *_slimmedElectrons_*_*',
        'keep *_slimmedMuons_*_*',
        'keep recoTrackExtras_slimmedMuonTrackExtras_*_*',
        'keep TrackingRecHitsOwned_slimmedMuonTrackExtras_*_*',
        'keep SiPixelClusteredmNewDetSetVector_slimmedMuonTrackExtras_*_*',
        'keep SiStripClusteredmNewDetSetVector_slimmedMuonTrackExtras_*_*',
        'keep *_slimmedTaus_*_*',
        'keep *_slimmedTausBoosted_*_*',
        'keep *_slimmedCaloJets_*_*',
        'keep *_slimmedJPTJets_*_*',
        'keep *_slimmedJets_*_*',
        'keep recoBaseTagInfosOwned_slimmedJets_*_*',
        'keep *_slimmedJetsAK8_*_*',
        'drop recoBaseTagInfosOwned_slimmedJetsAK8_*_*',
        'keep *_slimmedJetsPuppi_*_*',
        'keep *_slimmedMETs_*_*',
        'keep *_slimmedMETsPuppi_*_*',
        'keep *_slimmedSecondaryVertices_*_*',
        'keep *_slimmedLambdaVertices_*_*',
        'keep *_slimmedKshortVertices_*_*',
        'keep *_slimmedJetsAK8PFPuppiSoftDropPacked_SubJets_*',
        'keep recoPhotonCores_reducedEgamma_*_*',
        'keep recoGsfElectronCores_reducedEgamma_*_*',
        'keep recoConversions_reducedEgamma_*_*',
        'keep recoSuperClusters_reducedEgamma_*_*',
        'keep recoCaloClusters_reducedEgamma_*_*',
        'keep EcalRecHitsSorted_reducedEgamma_*_*',
        'keep recoGsfTracks_reducedEgamma_*_*',
        'keep HBHERecHitsSorted_reducedEgamma_*_*',
        'keep *_slimmedHcalRecHits_*_*',
        'drop *_*_caloTowers_*',
        'drop *_*_pfCandidates_*',
        'drop *_*_genJets_*',
        'keep *_offlineBeamSpot_*_*',
        'keep *_offlineSlimmedPrimaryVertices_*_*',
        'keep *_offlineSlimmedPrimaryVerticesWithBS_*_*',
        'keep patPackedCandidates_packedPFCandidates_*_*',
        'keep *_isolatedTracks_*_*',
        'keep *_oniaPhotonCandidates_*_*',
        'keep *_bunchSpacingProducer_*_*',
        'keep double_fixedGridRhoAll__*',
        'keep double_fixedGridRhoFastjetAll__*',
        'keep double_fixedGridRhoFastjetAllTmp__*',
        'keep double_fixedGridRhoFastjetAllCalo__*',
        'keep double_fixedGridRhoFastjetCentral_*_*',
        'keep double_fixedGridRhoFastjetCentralCalo__*',
        'keep double_fixedGridRhoFastjetCentralChargedPileUp__*',
        'keep double_fixedGridRhoFastjetCentralNeutral__*',
        'keep *_slimmedPatTrigger_*_*',
        'keep patPackedTriggerPrescales_patTrigger__*',
        'keep patPackedTriggerPrescales_patTrigger_l1max_*',
        'keep patPackedTriggerPrescales_patTrigger_l1min_*',
        'keep *_l1extraParticles_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep GlobalExtBlkBXVector_simGtExtUnprefireable_*_*',
        'keep *_gtStage2Digis__*',
        'keep *_gmtStage2Digis_Muon_*',
        'keep *_caloStage2Digis_Jet_*',
        'keep *_caloStage2Digis_Tau_*',
        'keep *_caloStage2Digis_EGamma_*',
        'keep *_caloStage2Digis_EtSum_*',
        'keep *_TriggerResults_*_HLT',
        'keep *_TriggerResults_*_*',
        'keep patPackedCandidates_lostTracks_*_*',
        'keep HcalNoiseSummary_hcalnoise__*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTracks_displacedGlobalMuons__*',
        'keep recoTracks_displacedTracks__*',
        'keep *_prefiringweight_*_*',
        'keep *_slimmedLowPtElectrons_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep *_slimmedDisplacedMuons_*_*',
        'keep recoTrackExtras_slimmedDisplacedMuonTrackExtras_*_*',
        'keep TrackingRecHitsOwned_slimmedDisplacedMuonTrackExtras_*_*',
        'keep SiPixelClusteredmNewDetSetVector_slimmedDisplacedMuonTrackExtras_*_*',
        'keep SiStripClusteredmNewDetSetVector_slimmedDisplacedMuonTrackExtras_*_*',
        'keep *_packedPFCandidates_hcalDepthEnergyFractions_*',
        'drop *_packedPFCandidates_hcalDepthEnergyFractions_*',
        'keep patPackedGenParticles_packedGenParticles_*_*',
        'keep recoGenParticles_prunedGenParticles_*_*',
        'keep *_packedPFCandidateToGenAssociation_*_*',
        'keep *_lostTracksToGenAssociation_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_*_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep recoGenParticles_genPUProtons_*_*',
        'keep *_slimmedGenJetsFlavourInfos_*_*',
        'keep *_slimmedGenJets__*',
        'keep *_slimmedGenJetsAK8__*',
        'keep *_slimmedGenJetsAK8SoftDropSubJets__*',
        'keep *_genMetTrue_*_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep GenRunInfoProduct_*_*_*',
        'keep *_genParticles_xyz0_*',
        'keep *_genParticles_t0_*',
        'keep PileupSummaryInfos_slimmedAddPileupInfo_*_*',
        'keep L1GtTriggerMenuLite_l1GtTriggerMenuLite__*',
        'keep *_slimmedElectronsHGC_*_*',
        'keep *_slimmedPhotonsHGC_*_*',
        'keep *_offlineSlimmedPrimaryVertices4D_*_*',
        'keep SimVertexs_g4SimHits_*_*'
    )
)

process.RAWRECODEBUGHLTEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring( (
        'drop *',
        'drop *',
        'drop *',
        'drop *',
        'keep DetIds_siStripDigis_*_*',
        'keep DetIdedmEDCollection_siPixelDigis_*_*',
        'keep PixelFEDChanneledmNewDetSetVector_siPixelDigis_*_*',
        'keep *_siPixelClusters_*_*',
        'keep *_siStripClusters_*_*',
        'keep ClusterSummary_clusterSummaryProducer_*_*',
        'keep *_siPhase2Clusters_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_dt1DCosmicRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_dt4DSegments_*_*',
        'keep *_dt4DCosmicSegments_*_*',
        'keep *_cscSegments_*_*',
        'keep *_rpcRecHits_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_gemRecHits_*_*',
        'keep *_gemSegments_*_*',
        'keep *_me0RecHits_*_*',
        'keep *_me0Segments_*_*',
        'keep *_hbhereco_*_*',
        'keep *_hbheprereco_*_*',
        'keep *_hfprereco_*_*',
        'keep *_hfreco_*_*',
        'keep *_horeco_*_*',
        'keep HBHERecHitsSorted_hbherecoMB_*_*',
        'keep HORecHitsSorted_horecoMB_*_*',
        'keep HFRecHitsSorted_hfrecoMB_*_*',
        'keep ZDCDataFramesSorted_hcalDigis_*_*',
        'keep ZDCDataFramesSorted_castorDigis_*_*',
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*',
        'keep ZDCRecHitsSorted_zdcreco_*_*',
        'keep ZDCRecHitsSorted_zdcrecoRun3_*_*',
        'keep *_castorreco_*_*',
        'keep *_reducedHcalRecHits_*_*',
        'keep HcalUnpackerReport_castorDigis_*_*',
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*',
        'keep HcalUnpackerReport_hcalDigis_*_*',
        'keep *_HGCalRecHit_*_*',
        'keep recoCaloClusters_hgcalMergeLayerClusters_*_*',
        'keep *_hgcalMergeLayerClusters_timeLayerCluster_*',
        'keep *_hgcalMergeLayerClusters_InitialLayerClustersMask_*',
        'keep *_ecalPreshowerRecHit_*_*',
        'keep *_ecalRecHit_*_*',
        'keep *_ecalCompactTrigPrim_*_*',
        'keep *_ecalTPSkim_*_*',
        'keep EBSrFlagsSorted_ecalDigis__*',
        'keep EESrFlagsSorted_ecalDigis__*',
        'keep *_mix_EBTimeDigi_*',
        'keep *_mix_EETimeDigi_*',
        'keep *_ecalDetailedTimeRecHit_*_*',
        'keep *_hgcalMultiClusters_*_*',
        'keep *_iterHGCalMultiClusters_*_*',
        'keep *_hybridSuperClusters_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep *_multi5x5SuperClusters_*_*',
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep *_particleFlowSuperClusterECAL_*_*',
        'keep *_particleFlowSuperClusterOOTECAL_*_*',
        'drop recoClusterShapes_*_*_*',
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*',
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*',
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*',
        'keep *_selectDigi_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep recoCaloClusters_hybridSuperClusters_*_*',
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*',
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*',
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterHGCal__*',
        'keep recoCaloClusters_particleFlowSuperClusterHGCal__*',
        'keep *_particleFlowSuperClusterHGCal_*_*',
        'keep *_CkfElectronCandidates_*_*',
        'keep *_GsfGlobalElectronTest_*_*',
        'keep *_electronMergedSeeds_*_*',
        'keep recoGsfTrackExtras_electronGsfTracks_*_*',
        'keep recoTrackExtras_electronGsfTracks_*_*',
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*',
        'keep recoTracks_GsfGlobalElectronTest_*_*',
        'keep recoGsfTracks_electronGsfTracks_*_*',
        'keep recoTrackExtras_generalTracks_*_*',
        'keep TrackingRecHitsOwned_generalTracks_*_*',
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*',
        'keep uints_extraFromSeeds_*_*',
        'keep recoTrackExtras_beamhaloTracks_*_*',
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*',
        'keep recoTrackExtras_conversionStepTracks_*_*',
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*',
        'keep *_ctfPixelLess_*_*',
        'keep *_dedxTruncated40_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_conversionStepTracks_*_*',
        'keep recoTracks_beamhaloTracks_*_*',
        'keep recoTracks_ctfPixelLess_*_*',
        'keep *_dedxHarmonic2_*_*',
        'keep *_dedxPixelHarmonic2_*_*',
        'keep *_dedxHitInfo_*_*',
        'keep *_trackExtrapolator_*_*',
        'keep *_generalTracks_MVAValues_*',
        'keep *_generalTracks_MVAVals_*',
        'keep *_ak4CaloJets_*_*',
        'keep *_ak4PFJets_*_*',
        'keep *_ak4TrackJets_*_*',
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*',
        'keep *_towerMaker_*_*',
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*',
        'keep *_ak5CastorJets_*_*',
        'keep *_ak7CastorJets_*_*',
        'keep recoCaloJets_ak4CaloJets_*_*',
        'keep *_ak4CaloJets_rho_*',
        'keep *_ak4CaloJets_sigma_*',
        'keep *_ak4PFJetsCHS_*_*',
        'keep floatedmValueMap_puppi_*_*',
        'keep *_ak4PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppiSoftDrop_*_*',
        'keep recoPFJets_ak4PFJets_*_*',
        'keep *_ak4PFJets_rho_*',
        'keep *_ak4PFJets_sigma_*',
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*',
        'keep *_caloTowers_*_*',
        'keep *_CastorTowerReco_*_*',
        'keep *_ak4JetTracksAssociatorAtVertex_*_*',
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*',
        'keep *_ak4JetTracksAssociatorExplicit_*_*',
        'keep *_ak4JetExtender_*_*',
        'keep *_ak4JetID_*_*',
        'keep recoBasicJets_ak5CastorJets_*_*',
        'keep *_ak5CastorJets_rho_*',
        'keep *_ak5CastorJets_sigma_*',
        'keep *_ak5CastorJetID_*_*',
        'keep recoBasicJets_ak7CastorJets_*_*',
        'keep *_ak7CastorJets_rho_*',
        'keep *_ak7CastorJets_sigma_*',
        'keep *_ak7CastorJetID_*_*',
        'keep *_fixedGridRhoAll_*_*',
        'keep *_fixedGridRhoFastjetAll_*_*',
        'keep *_fixedGridRhoFastjetAllTmp_*_*',
        'keep *_fixedGridRhoFastjetCentral_*_*',
        'keep *_fixedGridRhoFastjetAllCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*',
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*',
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*',
        'keep recoHcalNoiseRBXs_hcalnoise_*_*',
        'keep recoEcalHaloData_EcalHaloData_*_*',
        'keep recoHcalHaloData_HcalHaloData_*_*',
        'keep recoCaloMETs_caloMet_*_*',
        'keep recoCaloMETs_caloMetBE_*_*',
        'keep recoCaloMETs_caloMetBEFO_*_*',
        'keep recoCaloMETs_caloMetM_*_*',
        'keep recoPFMETs_pfMet_*_*',
        'keep recoPFMETs_pfChMet_*_*',
        'keep floatedmValueMap_puppiNoLep_*_*',
        'keep recoPFMETs_pfMetPuppi_*_*',
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*',
        'keep HcalNoiseSummary_hcalnoise_*_*',
        'keep recoGlobalHaloData_GlobalHaloData_*_*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep *_MuonSeed_*_*',
        'keep *_ancientMuonSeed_*_*',
        'keep *_displacedMuonSeeds_*_*',
        'keep TrackingRecHitsOwned_globalMuons_*_*',
        'keep TrackingRecHitsOwned_tevMuons_*_*',
        'keep *_CosmicMuonSeed_*_*',
        'keep recoTrackExtras_cosmicMuons_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons_*_*',
        'keep recoTrackExtras_cosmicMuons1Leg_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*',
        'keep recoTracks_cosmicsVetoTracks_*_*',
        'keep recoMuons_muons_*_*',
        'keep booledmValueMap_muons_*_*',
        'keep doubleedmValueMap_muons_muPFMean*_*',
        'keep doubleedmValueMap_muons_muPFSum*_*',
        'keep *_muons_muonShowerInformation_*',
        'keep recoMuonTimeExtraedmValueMap_muons_*_*',
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*',
        'keep uintedmValueMap_muons_*_*',
        'keep *_particleFlow_muons_*',
        'keep recoMuons_displacedMuons_*_*',
        'keep booledmValueMap_displacedMuons_*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFMean*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFSum*_*',
        'keep recoMuonTimeExtraedmValueMap_displacedMuons_*_*',
        'keep uintedmValueMap_displacedMuons_*_*',
        'keep *_particleFlow_displacedMuons_*',
        'keep recoTracks_standAloneMuons_*_*',
        'keep recoTrackExtras_standAloneMuons_*_*',
        'keep TrackingRecHitsOwned_standAloneMuons_*_*',
        'keep recoTracks_globalMuons_*_*',
        'keep recoTrackExtras_globalMuons_*_*',
        'keep recoTracks_tevMuons_*_*',
        'keep recoTrackExtras_tevMuons_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_displacedTracks_*_*',
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*',
        'keep recoTracks_displacedGlobalMuons_*_*',
        'keep recoTrackExtras_displacedGlobalMuons_*_*',
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*',
        'keep recoTracks_cosmicMuons_*_*',
        'keep recoMuons_muonsFromCosmics_*_*',
        'keep recoTracks_cosmicMuons1Leg_*_*',
        'keep recoMuons_muonsFromCosmics1Leg_*_*',
        'keep recoTracks_refittedStandAloneMuons_*_*',
        'keep recoTrackExtras_refittedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTrackExtras_displacedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*',
        'keep *_muonReducedTrackExtras_*_*',
        'keep *_displacedMuonReducedTrackExtras_*_*',
        'keep *_muIsoDepositTk_*_*',
        'keep *_muIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muIsoDepositCalByAssociatorHits_*_*',
        'keep *_muIsoDepositJets_*_*',
        'keep *_muIsoDepositTkDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorTowersDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorHitsDisplaced_*_*',
        'keep *_muIsoDepositJetsDisplaced_*_*',
        'keep *_muGlobalIsoDepositCtfTk_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*',
        'keep *_muGlobalIsoDepositJets_*_*',
        'keep *_softPFMuonsTagInfos_*_*',
        'keep *_softPFElectronsTagInfos_*_*',
        'keep *_pfImpactParameterTagInfos_*_*',
        'keep *_pfSecondaryVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_pfGhostTrackVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*',
        'keep *_softPFElectronBJetTags_*_*',
        'keep *_softPFMuonBJetTags_*_*',
        'keep *_pfTrackCountingHighEffBJetTags_*_*',
        'keep *_pfJetProbabilityBJetTags_*_*',
        'keep *_pfJetBProbabilityBJetTags_*_*',
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*',
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*',
        'keep *_pfGhostTrackBJetTags_*_*',
        'keep *_pfCombinedMVAV2BJetTags_*_*',
        'keep *_inclusiveCandidateSecondaryVertices_*_*',
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*',
        'keep *_pfCombinedCvsLJetTags_*_*',
        'keep *_pfCombinedCvsBJetTags_*_*',
        'keep *_pfChargeBJetTags_*_*',
        'keep *_pfDeepCSVJetTags_*_*',
        'keep *_pfDeepCMVAJetTags_*_*',
        'keep *_pixelClusterTagInfos_*_*',
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*',
        'keep recoPFTaus_hpsPFTauProducer_*_*',
        'keep *_hpsPFTauBasicDiscriminators_*_*',
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*',
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*',
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*',
        'keep *_hpsPFTauTransverseImpactParameters_*_*',
        'keep  *_offlinePrimaryVertices__*',
        'keep *_offlinePrimaryVerticesWithBS_*_*',
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*',
        'keep *_nuclearInteractionMaker_*_*',
        'keep *_generalV0Candidates_*_*',
        'keep *_inclusiveSecondaryVertices_*_*',
        'keep *_offlinePrimaryVertices4D__*',
        'keep *_offlinePrimaryVertices4DWithBS__*',
        'keep *_trackTimeValueMapProducer_*_*',
        'keep *_tofPID_*_*',
        'keep *_gedPhotonCore_*_*',
        'keep *_gedPhotons_*_*',
        'keep recoPhotons_mustachePhotons_*_*',
        'keep recoPhotonCores_mustachePhotonCore_*_*',
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep recoGsfElectronCores_gsfElectronCores_*_*',
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*',
        'keep recoGsfElectrons_gsfElectrons_*_*',
        'keep recoGsfElectrons_gedGsfElectrons_*_*',
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*',
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*',
        'keep floatedmValueMap_eidRobustLoose_*_*',
        'keep floatedmValueMap_eidRobustTight_*_*',
        'keep floatedmValueMap_eidRobustHighEnergy_*_*',
        'keep floatedmValueMap_eidLoose_*_*',
        'keep floatedmValueMap_eidTight_*_*',
        'keep *_egmGedGsfElectronPFIsolation_*_*',
        'keep recoPhotonCores_gedPhotonCore_*_*',
        'keep recoPhotons_gedPhotons_*_*',
        'keep *_particleBasedIsolation_*_*',
        'keep recoPhotonCores_photonCore_*_*',
        'keep recoPhotons_photons_*_*',
        'keep recoPhotonCores_ootPhotonCore_*_*',
        'keep recoPhotons_ootPhotons_*_*',
        'keep recoConversions_conversions_*_*',
        'drop recoConversions_conversions_uncleanedConversions_*',
        'keep recoConversions_mustacheConversions_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep recoConversions_allConversions_*_*',
        'keep recoConversions_allConversionsOldEG_*_*',
        'keep recoTracks_ckfOutInTracksFromConversions_*_*',
        'keep recoTracks_ckfInOutTracksFromConversions_*_*',
        'keep recoConversions_uncleanedOnlyAllConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep *_PhotonIDProd_*_*',
        'keep *_PhotonIDProdGED_*_*',
        'keep *_hfRecoEcalCandidate_*_*',
        'keep *_hfEMClusters_*_*',
        'keep *_gedGsfElectronCores_*_*',
        'keep *_gedGsfElectrons_*_*',
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*',
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*',
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*',
        'keep *_lowPtGsfToTrackLinks_*_*',
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_rekeyLowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_lowPtGsfElectronID_*_*',
        'keep *_ecalDrivenGsfElectronCores_*_*',
        'keep *_ecalDrivenGsfElectrons_*_*',
        'keep *_ecalDrivenGsfElectronCoresHGC_*_*',
        'keep *_ecalDrivenGsfElectronsHGC_*_*',
        'keep *_photonCoreHGC_*_*',
        'keep *_photonsHGC_*_*',
        'keep *_pixelTracks_*_*',
        'keep *_pixelVertices_*_*',
        'keep recoPFClusters_particleFlowClusterECAL_*_*',
        'keep recoPFClusters_particleFlowClusterHCAL_*_*',
        'keep recoPFClusters_particleFlowClusterHO_*_*',
        'keep recoPFClusters_particleFlowClusterHF_*_*',
        'keep recoPFClusters_particleFlowClusterPS_*_*',
        'keep recoPFBlocks_particleFlowBlock_*_*',
        'keep recoPFCandidates_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlowTmp_electrons_*',
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*',
        'keep *_pfElectronTranslator_*_*',
        'keep *_pfPhotonTranslator_*_*',
        'keep *_trackerDrivenElectronSeeds_preid_*',
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*',
        'keep recoCaloClusters_particleFlowEGamma_*_*',
        'keep recoSuperClusters_particleFlowEGamma_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoConversions_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlow_*_*',
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*',
        'keep *_particleFlow_electrons_*',
        'keep *_particleFlow_photons_*',
        'keep *_particleFlow_muons_*',
        'keep recoCaloClusters_pfElectronTranslator_*_*',
        'keep recoPreshowerClusters_pfElectronTranslator_*_*',
        'keep recoSuperClusters_pfElectronTranslator_*_*',
        'keep recoCaloClusters_pfPhotonTranslator_*_*',
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*',
        'keep recoSuperClusters_pfPhotonTranslator_*_*',
        'keep recoPhotons_pfPhotonTranslator_*_*',
        'keep recoPhotonCores_pfPhotonTranslator_*_*',
        'keep recoConversions_pfPhotonTranslator_*_*',
        'keep *_particleFlowPtrs_*_*',
        'keep *_particleFlowTmpPtrs_*_*',
        'keep *_chargedHadronPFTrackIsolation_*_*',
        'keep recoPFRecHits_particleFlowRecHitHGC_Cleaned_*',
        'keep recoSuperClusters_simPFProducer_*_*',
        'keep *_ecalBarrelClusterFastTimer_*_*',
        'keep *_particleFlowSuperClusterHGCal_*_*',
        'keep recoPFBlocks_simPFProducer_*_*',
        'keep *_offlineBeamSpot_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_l1L1GtObjectMap_*_*',
        'keep L1MuGMTReadoutCollection_gtDigis_*_*',
        'keep L1GctEmCand*_gctDigis_*_*',
        'keep L1GctJetCand*_gctDigis_*_*',
        'keep L1GctEtHad*_gctDigis_*_*',
        'keep L1GctEtMiss*_gctDigis_*_*',
        'keep L1GctEtTotal*_gctDigis_*_*',
        'keep L1GctHtMiss*_gctDigis_*_*',
        'keep L1GctJetCounts*_gctDigis_*_*',
        'keep L1GctHFRingEtSums*_gctDigis_*_*',
        'keep L1GctHFBitCounts*_gctDigis_*_*',
        'keep LumiDetails_lumiProducer_*_*',
        'keep LumiSummary_lumiProducer_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*',
        'drop *_hlt*_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep DcsStatuss_hltScalersRawToDigi_*_*',
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*',
        'keep L1TriggerScalerss_scalersRawToDigi_*_*',
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep BeamSpotOnlines_scalersRawToDigi_*_*',
        'keep DcsStatuss_scalersRawToDigi_*_*',
        'keep CTPPSRecord_onlineMetaDataDigis_*_*',
        'keep DCSRecord_onlineMetaDataDigis_*_*',
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*',
        'keep recoBeamSpot_onlineMetaDataDigis_*_*',
        'keep *_tcdsDigis_*_*',
        'keep *_logErrorHarvester_*_*',
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*',
        'keep TotemFEDInfos_totemRPRawToDigi_*_*',
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*',
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*',
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*',
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*',
        'keep TotemFEDInfos_totemT2Digis_*_*',
        'keep TotemT2DigiedmNewDetSetVector_totemT2Digis_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemT2Digis_*_*',
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*',
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_diamondSampicLocalTracks_*_*',
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*',
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*',
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*',
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*',
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep *_ticlTrackstersCLUE3DHigh_*_*',
        'keep *_ticlTrackstersMerge_*_*',
        'keep *_ticlTrackstersHFNoseTrkEM_*_*',
        'keep *_ticlTrackstersHFNoseEM_*_*',
        'keep *_ticlTrackstersHFNoseTrk_*_*',
        'keep *_ticlTrackstersHFNoseMIP_*_*',
        'keep *_ticlTrackstersHFNoseHAD_*_*',
        'keep *_ticlTrackstersHFNoseMerge_*_*',
        'keep *_pfTICL_*_*',
        'keep CaloParticles_mix_*_*',
        'keep SimClusters_mix_*_*',
        'keep *_layerClusterSimClusterAssociationProducer_*_*',
        'keep *_layerClusterCaloParticleAssociationProducer_*_*',
        'keep *_layerClusterSimTracksterAssociationProducer_*_*',
        'keep *_tracksterSimTracksterAssociationLinking_*_*',
        'keep *_tracksterSimTracksterAssociationPR_*_*',
        'keep *_tracksterSimTracksterAssociationLinkingPU_*_*',
        'keep *_tracksterSimTracksterAssociationPRPU_*_*',
        'keep *_tracksterSimTracksterAssociationLinkingbyCLUE3D_*_*',
        'keep *_tracksterSimTracksterAssociationPRbyCLUE3D_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep FEDRawDataCollection_source_*_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'keep recoGenMETs_*_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*',
        'keep edmHepMCProduct_source_*_*',
        'keep SimTracks_g4SimHits_*_*',
        'keep SimVertexs_g4SimHits_*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackMCMatch_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*',
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*',
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*',
        'keep *_muonSimClassifier_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonME0Digis_*_*',
        'keep *_simHGCalUnsuppressedDigis_EE_*',
        'keep *_simHGCalUnsuppressedDigis_HEfront_*',
        'keep *_simHGCalUnsuppressedDigis_HEback_*',
        'keep *_mix_MergedCaloTruth_*',
        'keep *_mix_MergedMtdTruth_*',
        'keep *_mix_MergedMtdTruthLC_*',
        'keep *_mix_MergedMtdTruthST_*',
        'keep *_mix_FTLBarrel_*',
        'keep *_mix_FTLEndcap_*',
        'keep *_mix_InitialVertices_*',
        'keep *_mtdRecoClusterToSimLayerClusterAssociation_*_*',
        'keep *_mtdSimLayerClusterToTPAssociation_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*',
        'drop *_hlt*_*_*',
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*',
        'keep *_hltAK4CaloJetsIDPassed_*_*',
        'keep *_hltAK4CaloJets_*_*',
        'keep *_hltAK4PFJetsCorrected_*_*',
        'keep *_hltAK4PFJetsForTaus_*_*',
        'keep *_hltAK4PFJets_*_*',
        'keep *_hltAlCaEtaEBRechitsToDigis_*_*',
        'keep *_hltAlCaEtaEERechitsToDigis_*_*',
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegional_etaEcalRecHitsES_*',
        'keep *_hltAlCaPi0EBRechitsToDigis_*_*',
        'keep *_hltAlCaPi0EERechitsToDigis_*_*',
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegional_pi0EcalRecHitsES_*',
        'keep *_hltAlcaPixelClusterCounts_*_*',
        'keep *_hltBSoftMuonMu5L3_*_*',
        'keep *_hltCsc2DRecHits_*_*',
        'keep *_hltCscSegments_*_*',
        'keep *_hltDeepBLifetimeTagInfosPF_*_*',
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsCalo_*_*',
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsPF_*_*',
        'keep *_hltDeepSecondaryVertexTagInfosPF_*_*',
        'keep *_hltDisplacedhltIter4PFlowTrackSelectionHighPurity_*_*',
        'keep *_hltDoubletRecoveryPFlowTrackSelectionHighPurityPPOnAA_*_*',
        'keep *_hltDoubletRecoveryPFlowTrackSelectionHighPurity_*_*',
        'keep *_hltDt4DSegments_*_*',
        'keep *_hltEcalPhiSymFilter_*_*',
        'keep *_hltEcalRecHit_*_*',
        'keep *_hltEgammaCandidates_*_*',
        'keep *_hltEgammaGsfTracks_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltFastPVPixelTracksMerger_*_*',
        'keep *_hltFastPVPixelTracksRecover_*_*',
        'keep *_hltFastPVPixelTracks_*_*',
        'keep *_hltFastPVPixelVertices_*_*',
        'keep *_hltFastPixelBLifetimeL3Associator_*_*',
        'keep *_hltFastPrimaryVertex_*_*',
        'keep *_hltGlbTrkMuonCandsNoVtx_*_*',
        'keep *_hltGtStage2Digis_*_*',
        'keep *_hltHITrackingSiStripRawToClustersFacilityFullZeroSuppression_*_*',
        'keep *_hltHbhereco_*_*',
        'keep *_hltHfreco_*_*',
        'keep *_hltHoreco_*_*',
        'keep *_hltImpactParameterTagInfos_*_*',
        'keep *_hltInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_hltIsolPixelTrackProdHB_*_*',
        'keep *_hltIsolPixelTrackProdHE_*_*',
        'keep *_hltIter0PFlowCtfWithMaterialTracks_*_*',
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*',
        'keep *_hltIterL3GlbMuon_*_*',
        'keep *_hltIterL3MuonAndMuonFromL1Merged_*_*',
        'keep *_hltIterL3MuonMerged_*_*',
        'keep *_hltIterL3MuonsNoID_*_*',
        'keep *_hltIterL3Muons_*_*',
        'keep *_hltIterL3OIMuonTrackSelectionHighPurity_*_*',
        'keep *_hltL2MuonCandidatesNoVtx_*_*',
        'keep *_hltL2MuonCandidates_*_*',
        'keep *_hltL2MuonSeeds_*_*',
        'keep *_hltL2Muons_*_*',
        'keep *_hltL2TauJets_*_*',
        'keep *_hltL3MuonsIOHit_*_*',
        'keep *_hltL3MuonsLinksCombination_*_*',
        'keep *_hltL3MuonsOIHit_*_*',
        'keep *_hltL3MuonsOIState_*_*',
        'keep *_hltL3Muons_*_*',
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*',
        'keep *_hltL3NoFiltersNoVtxMuons_*_*',
        'keep *_hltL3TkFromL2OICombination_*_*',
        'keep *_hltL3TkTracksFromL2IOHit_*_*',
        'keep *_hltL3TkTracksFromL2OIHit_*_*',
        'keep *_hltL3TkTracksFromL2OIState_*_*',
        'keep *_hltL3TkTracksFromL2_*_*',
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*',
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*',
        'keep *_hltL3TrackCandidateFromL2OIState_*_*',
        'keep *_hltL3TrajSeedIOHit_*_*',
        'keep *_hltL3TrajSeedOIHit_*_*',
        'keep *_hltL3TrajSeedOIState_*_*',
        'keep *_hltL3TrajectorySeed_*_*',
        'keep *_hltMergedTracksForBTag_*_*',
        'keep *_hltMergedTracksPPOnAA_*_*',
        'keep *_hltMergedTracks_*_*',
        'keep *_hltMet_*_*',
        'keep *_hltMuonCSCDigis_*_*',
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*',
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*',
        'keep *_hltMuonDTDigis_*_*',
        'keep *_hltMuonRPCDigis_*_*',
        'keep *_hltOnlineBeamSpot_*_*',
        'keep *_hltPFJetForBtag_*_*',
        'keep *_hltPFJetForPNetAK8_*_*',
        'keep *_hltPFMETNoMuProducer_*_*',
        'keep *_hltPFMETProducer_*_*',
        'keep *_hltPFMETTypeOne_*_*',
        'keep *_hltPFMuonMerging_*_*',
        'keep *_hltPFTau35Track_*_*',
        'keep *_hltPFTau35_*_*',
        'keep *_hltPPSCalibrationRaw_*_*',
        'keep *_hltParticleFlowForTaus_*_*',
        'keep *_hltParticleFlow_*_*',
        'keep *_hltParticleNetDiscriminatorsJetTagsAK8_*_*',
        'keep *_hltParticleNetDiscriminatorsJetTags_*_*',
        'keep *_hltParticleNetJetTagInfos_*_*',
        'keep *_hltPixelTracksPPOnAA_*_*',
        'keep *_hltPixelTracks_*_*',
        'keep *_hltPixelVerticesPPOnAA_*_*',
        'keep *_hltPixelVertices_*_*',
        'keep *_hltRpcRecHits_*_*',
        'keep *_hltSelector4CentralJetsL1FastJet_*_*',
        'keep *_hltSelectorJets20L1FastJet_*_*',
        'keep *_hltSiPixelClustersAfterSplittingPPOnAA_*_*',
        'keep *_hltSiPixelClustersCache_*_*',
        'keep *_hltSiPixelClusters_*_*',
        'keep *_hltSiStripClusterizerForRawPrime_*_*',
        'keep *_hltSiStripClusters2ApproxClusters_*_*',
        'keep *_hltSiStripRawToClustersFacility_*_*',
        'keep *_hltTowerMakerForAll_*_*',
        'keep *_hltTriggerSummaryAOD_*_*',
        'keep *_hltTriggerSummaryRAW_*_*',
        'keep *_hltTrimmedPixelVerticesPPOnAA_*_*',
        'keep *_hltTrimmedPixelVertices_*_*',
        'keep *_hltVerticesL3_*_*',
        'keep *_hltVerticesPFFilterPPOnAA_*_*',
        'keep *_hltVerticesPFFilter_*_*',
        'keep *_hltVerticesPFSelector_*_*',
        'keep DetIds_hltSiStripRawToDigi_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep FEDRawDataCollection_rawDataRepacker_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*',
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*',
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*',
        'keep TrackingRecHitsOwned_hltL3Muons_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep recoCaloJets_*_*_*',
        'keep recoCaloMETs_*_*_*',
        'keep recoCaloMETs_hltMet_*_*',
        'keep recoCompositeCandidates_*_*_*',
        'keep recoElectrons_*_*_*',
        'keep recoIsolatedPixelTrackCandidates_*_*_*',
        'keep recoMETs_*_*_*',
        'keep recoPFJets_*_*_*',
        'keep recoPFTaus_*_*_*',
        'keep recoRecoChargedCandidates_*_*_*',
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*',
        'keep recoRecoEcalCandidates_*_*_*',
        'keep triggerTriggerEventWithRefs_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep triggerTriggerFilterObjectWithRefs_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'drop *_trackingtruthprod_*_*',
        'drop *_electrontruth_*_*',
        'keep *_mix_MergedTrackTruth_*',
        'keep CrossingFramePlaybackInfoNew_*_*_*',
        'keep PixelDigiSimLinkedmDetSetVector_simSiPixelDigis_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simSiStripDigis_*_*',
        'drop *_mix_simSiPixelDigis*_*',
        'drop *_mix_simSiStripDigis*_*',
        'keep *_allTrackMCMatch_*_*'
     ) ),
    splitLevel = cms.untracked.int32(0)
)

process.RAWRECOEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring( (
        'drop *',
        'drop *',
        'keep DetIds_siStripDigis_*_*',
        'keep DetIdedmEDCollection_siPixelDigis_*_*',
        'keep PixelFEDChanneledmNewDetSetVector_siPixelDigis_*_*',
        'keep *_siPixelClusters_*_*',
        'keep *_siStripClusters_*_*',
        'keep ClusterSummary_clusterSummaryProducer_*_*',
        'keep *_siPhase2Clusters_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_dt1DCosmicRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_dt4DSegments_*_*',
        'keep *_dt4DCosmicSegments_*_*',
        'keep *_cscSegments_*_*',
        'keep *_rpcRecHits_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_gemRecHits_*_*',
        'keep *_gemSegments_*_*',
        'keep *_me0RecHits_*_*',
        'keep *_me0Segments_*_*',
        'keep *_hbhereco_*_*',
        'keep *_hbheprereco_*_*',
        'keep *_hfprereco_*_*',
        'keep *_hfreco_*_*',
        'keep *_horeco_*_*',
        'keep HBHERecHitsSorted_hbherecoMB_*_*',
        'keep HORecHitsSorted_horecoMB_*_*',
        'keep HFRecHitsSorted_hfrecoMB_*_*',
        'keep ZDCDataFramesSorted_hcalDigis_*_*',
        'keep ZDCDataFramesSorted_castorDigis_*_*',
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*',
        'keep ZDCRecHitsSorted_zdcreco_*_*',
        'keep ZDCRecHitsSorted_zdcrecoRun3_*_*',
        'keep *_castorreco_*_*',
        'keep *_reducedHcalRecHits_*_*',
        'keep HcalUnpackerReport_castorDigis_*_*',
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*',
        'keep HcalUnpackerReport_hcalDigis_*_*',
        'keep *_HGCalRecHit_*_*',
        'keep recoCaloClusters_hgcalMergeLayerClusters_*_*',
        'keep *_hgcalMergeLayerClusters_timeLayerCluster_*',
        'keep *_hgcalMergeLayerClusters_InitialLayerClustersMask_*',
        'keep *_ecalPreshowerRecHit_*_*',
        'keep *_ecalRecHit_*_*',
        'keep *_ecalCompactTrigPrim_*_*',
        'keep *_ecalTPSkim_*_*',
        'keep EBSrFlagsSorted_ecalDigis__*',
        'keep EESrFlagsSorted_ecalDigis__*',
        'keep *_mix_EBTimeDigi_*',
        'keep *_mix_EETimeDigi_*',
        'keep *_ecalDetailedTimeRecHit_*_*',
        'keep *_hgcalMultiClusters_*_*',
        'keep *_iterHGCalMultiClusters_*_*',
        'keep *_hybridSuperClusters_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep *_multi5x5SuperClusters_*_*',
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep *_particleFlowSuperClusterECAL_*_*',
        'keep *_particleFlowSuperClusterOOTECAL_*_*',
        'drop recoClusterShapes_*_*_*',
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*',
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*',
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*',
        'keep *_selectDigi_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep recoCaloClusters_hybridSuperClusters_*_*',
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*',
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*',
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterHGCal__*',
        'keep recoCaloClusters_particleFlowSuperClusterHGCal__*',
        'keep *_particleFlowSuperClusterHGCal_*_*',
        'keep *_CkfElectronCandidates_*_*',
        'keep *_GsfGlobalElectronTest_*_*',
        'keep *_electronMergedSeeds_*_*',
        'keep recoGsfTrackExtras_electronGsfTracks_*_*',
        'keep recoTrackExtras_electronGsfTracks_*_*',
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*',
        'keep recoTracks_GsfGlobalElectronTest_*_*',
        'keep recoGsfTracks_electronGsfTracks_*_*',
        'keep recoTrackExtras_generalTracks_*_*',
        'keep TrackingRecHitsOwned_generalTracks_*_*',
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*',
        'keep uints_extraFromSeeds_*_*',
        'keep recoTrackExtras_beamhaloTracks_*_*',
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*',
        'keep recoTrackExtras_conversionStepTracks_*_*',
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*',
        'keep *_ctfPixelLess_*_*',
        'keep *_dedxTruncated40_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_conversionStepTracks_*_*',
        'keep recoTracks_beamhaloTracks_*_*',
        'keep recoTracks_ctfPixelLess_*_*',
        'keep *_dedxHarmonic2_*_*',
        'keep *_dedxPixelHarmonic2_*_*',
        'keep *_dedxHitInfo_*_*',
        'keep *_trackExtrapolator_*_*',
        'keep *_generalTracks_MVAValues_*',
        'keep *_generalTracks_MVAVals_*',
        'keep *_ak4CaloJets_*_*',
        'keep *_ak4PFJets_*_*',
        'keep *_ak4TrackJets_*_*',
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*',
        'keep *_towerMaker_*_*',
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*',
        'keep *_ak5CastorJets_*_*',
        'keep *_ak7CastorJets_*_*',
        'keep recoCaloJets_ak4CaloJets_*_*',
        'keep *_ak4CaloJets_rho_*',
        'keep *_ak4CaloJets_sigma_*',
        'keep *_ak4PFJetsCHS_*_*',
        'keep floatedmValueMap_puppi_*_*',
        'keep *_ak4PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppiSoftDrop_*_*',
        'keep recoPFJets_ak4PFJets_*_*',
        'keep *_ak4PFJets_rho_*',
        'keep *_ak4PFJets_sigma_*',
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*',
        'keep *_caloTowers_*_*',
        'keep *_CastorTowerReco_*_*',
        'keep *_ak4JetTracksAssociatorAtVertex_*_*',
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*',
        'keep *_ak4JetTracksAssociatorExplicit_*_*',
        'keep *_ak4JetExtender_*_*',
        'keep *_ak4JetID_*_*',
        'keep recoBasicJets_ak5CastorJets_*_*',
        'keep *_ak5CastorJets_rho_*',
        'keep *_ak5CastorJets_sigma_*',
        'keep *_ak5CastorJetID_*_*',
        'keep recoBasicJets_ak7CastorJets_*_*',
        'keep *_ak7CastorJets_rho_*',
        'keep *_ak7CastorJets_sigma_*',
        'keep *_ak7CastorJetID_*_*',
        'keep *_fixedGridRhoAll_*_*',
        'keep *_fixedGridRhoFastjetAll_*_*',
        'keep *_fixedGridRhoFastjetAllTmp_*_*',
        'keep *_fixedGridRhoFastjetCentral_*_*',
        'keep *_fixedGridRhoFastjetAllCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*',
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*',
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*',
        'keep recoHcalNoiseRBXs_hcalnoise_*_*',
        'keep recoEcalHaloData_EcalHaloData_*_*',
        'keep recoHcalHaloData_HcalHaloData_*_*',
        'keep recoCaloMETs_caloMet_*_*',
        'keep recoCaloMETs_caloMetBE_*_*',
        'keep recoCaloMETs_caloMetBEFO_*_*',
        'keep recoCaloMETs_caloMetM_*_*',
        'keep recoPFMETs_pfMet_*_*',
        'keep recoPFMETs_pfChMet_*_*',
        'keep floatedmValueMap_puppiNoLep_*_*',
        'keep recoPFMETs_pfMetPuppi_*_*',
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*',
        'keep HcalNoiseSummary_hcalnoise_*_*',
        'keep recoGlobalHaloData_GlobalHaloData_*_*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep *_MuonSeed_*_*',
        'keep *_ancientMuonSeed_*_*',
        'keep *_displacedMuonSeeds_*_*',
        'keep TrackingRecHitsOwned_globalMuons_*_*',
        'keep TrackingRecHitsOwned_tevMuons_*_*',
        'keep *_CosmicMuonSeed_*_*',
        'keep recoTrackExtras_cosmicMuons_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons_*_*',
        'keep recoTrackExtras_cosmicMuons1Leg_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*',
        'keep recoTracks_cosmicsVetoTracks_*_*',
        'keep recoMuons_muons_*_*',
        'keep booledmValueMap_muons_*_*',
        'keep doubleedmValueMap_muons_muPFMean*_*',
        'keep doubleedmValueMap_muons_muPFSum*_*',
        'keep *_muons_muonShowerInformation_*',
        'keep recoMuonTimeExtraedmValueMap_muons_*_*',
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*',
        'keep uintedmValueMap_muons_*_*',
        'keep *_particleFlow_muons_*',
        'keep recoMuons_displacedMuons_*_*',
        'keep booledmValueMap_displacedMuons_*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFMean*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFSum*_*',
        'keep recoMuonTimeExtraedmValueMap_displacedMuons_*_*',
        'keep uintedmValueMap_displacedMuons_*_*',
        'keep *_particleFlow_displacedMuons_*',
        'keep recoTracks_standAloneMuons_*_*',
        'keep recoTrackExtras_standAloneMuons_*_*',
        'keep TrackingRecHitsOwned_standAloneMuons_*_*',
        'keep recoTracks_globalMuons_*_*',
        'keep recoTrackExtras_globalMuons_*_*',
        'keep recoTracks_tevMuons_*_*',
        'keep recoTrackExtras_tevMuons_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_displacedTracks_*_*',
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*',
        'keep recoTracks_displacedGlobalMuons_*_*',
        'keep recoTrackExtras_displacedGlobalMuons_*_*',
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*',
        'keep recoTracks_cosmicMuons_*_*',
        'keep recoMuons_muonsFromCosmics_*_*',
        'keep recoTracks_cosmicMuons1Leg_*_*',
        'keep recoMuons_muonsFromCosmics1Leg_*_*',
        'keep recoTracks_refittedStandAloneMuons_*_*',
        'keep recoTrackExtras_refittedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTrackExtras_displacedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*',
        'keep *_muonReducedTrackExtras_*_*',
        'keep *_displacedMuonReducedTrackExtras_*_*',
        'keep *_muIsoDepositTk_*_*',
        'keep *_muIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muIsoDepositCalByAssociatorHits_*_*',
        'keep *_muIsoDepositJets_*_*',
        'keep *_muIsoDepositTkDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorTowersDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorHitsDisplaced_*_*',
        'keep *_muIsoDepositJetsDisplaced_*_*',
        'keep *_muGlobalIsoDepositCtfTk_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*',
        'keep *_muGlobalIsoDepositJets_*_*',
        'keep *_softPFMuonsTagInfos_*_*',
        'keep *_softPFElectronsTagInfos_*_*',
        'keep *_pfImpactParameterTagInfos_*_*',
        'keep *_pfSecondaryVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_pfGhostTrackVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*',
        'keep *_softPFElectronBJetTags_*_*',
        'keep *_softPFMuonBJetTags_*_*',
        'keep *_pfTrackCountingHighEffBJetTags_*_*',
        'keep *_pfJetProbabilityBJetTags_*_*',
        'keep *_pfJetBProbabilityBJetTags_*_*',
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*',
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*',
        'keep *_pfGhostTrackBJetTags_*_*',
        'keep *_pfCombinedMVAV2BJetTags_*_*',
        'keep *_inclusiveCandidateSecondaryVertices_*_*',
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*',
        'keep *_pfCombinedCvsLJetTags_*_*',
        'keep *_pfCombinedCvsBJetTags_*_*',
        'keep *_pfChargeBJetTags_*_*',
        'keep *_pfDeepCSVJetTags_*_*',
        'keep *_pfDeepCMVAJetTags_*_*',
        'keep *_pixelClusterTagInfos_*_*',
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*',
        'keep recoPFTaus_hpsPFTauProducer_*_*',
        'keep *_hpsPFTauBasicDiscriminators_*_*',
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*',
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*',
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*',
        'keep *_hpsPFTauTransverseImpactParameters_*_*',
        'keep  *_offlinePrimaryVertices__*',
        'keep *_offlinePrimaryVerticesWithBS_*_*',
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*',
        'keep *_nuclearInteractionMaker_*_*',
        'keep *_generalV0Candidates_*_*',
        'keep *_inclusiveSecondaryVertices_*_*',
        'keep *_offlinePrimaryVertices4D__*',
        'keep *_offlinePrimaryVertices4DWithBS__*',
        'keep *_trackTimeValueMapProducer_*_*',
        'keep *_tofPID_*_*',
        'keep *_gedPhotonCore_*_*',
        'keep *_gedPhotons_*_*',
        'keep recoPhotons_mustachePhotons_*_*',
        'keep recoPhotonCores_mustachePhotonCore_*_*',
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep recoGsfElectronCores_gsfElectronCores_*_*',
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*',
        'keep recoGsfElectrons_gsfElectrons_*_*',
        'keep recoGsfElectrons_gedGsfElectrons_*_*',
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*',
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*',
        'keep floatedmValueMap_eidRobustLoose_*_*',
        'keep floatedmValueMap_eidRobustTight_*_*',
        'keep floatedmValueMap_eidRobustHighEnergy_*_*',
        'keep floatedmValueMap_eidLoose_*_*',
        'keep floatedmValueMap_eidTight_*_*',
        'keep *_egmGedGsfElectronPFIsolation_*_*',
        'keep recoPhotonCores_gedPhotonCore_*_*',
        'keep recoPhotons_gedPhotons_*_*',
        'keep *_particleBasedIsolation_*_*',
        'keep recoPhotonCores_photonCore_*_*',
        'keep recoPhotons_photons_*_*',
        'keep recoPhotonCores_ootPhotonCore_*_*',
        'keep recoPhotons_ootPhotons_*_*',
        'keep recoConversions_conversions_*_*',
        'drop recoConversions_conversions_uncleanedConversions_*',
        'keep recoConversions_mustacheConversions_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep recoConversions_allConversions_*_*',
        'keep recoConversions_allConversionsOldEG_*_*',
        'keep recoTracks_ckfOutInTracksFromConversions_*_*',
        'keep recoTracks_ckfInOutTracksFromConversions_*_*',
        'keep recoConversions_uncleanedOnlyAllConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep *_PhotonIDProd_*_*',
        'keep *_PhotonIDProdGED_*_*',
        'keep *_hfRecoEcalCandidate_*_*',
        'keep *_hfEMClusters_*_*',
        'keep *_gedGsfElectronCores_*_*',
        'keep *_gedGsfElectrons_*_*',
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*',
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*',
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*',
        'keep *_lowPtGsfToTrackLinks_*_*',
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_rekeyLowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_lowPtGsfElectronID_*_*',
        'keep *_ecalDrivenGsfElectronCores_*_*',
        'keep *_ecalDrivenGsfElectrons_*_*',
        'keep *_ecalDrivenGsfElectronCoresHGC_*_*',
        'keep *_ecalDrivenGsfElectronsHGC_*_*',
        'keep *_photonCoreHGC_*_*',
        'keep *_photonsHGC_*_*',
        'keep *_pixelTracks_*_*',
        'keep *_pixelVertices_*_*',
        'keep recoPFClusters_particleFlowClusterECAL_*_*',
        'keep recoPFClusters_particleFlowClusterHCAL_*_*',
        'keep recoPFClusters_particleFlowClusterHO_*_*',
        'keep recoPFClusters_particleFlowClusterHF_*_*',
        'keep recoPFClusters_particleFlowClusterPS_*_*',
        'keep recoPFBlocks_particleFlowBlock_*_*',
        'keep recoPFCandidates_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlowTmp_electrons_*',
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*',
        'keep *_pfElectronTranslator_*_*',
        'keep *_pfPhotonTranslator_*_*',
        'keep *_trackerDrivenElectronSeeds_preid_*',
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*',
        'keep recoCaloClusters_particleFlowEGamma_*_*',
        'keep recoSuperClusters_particleFlowEGamma_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoConversions_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlow_*_*',
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*',
        'keep *_particleFlow_electrons_*',
        'keep *_particleFlow_photons_*',
        'keep *_particleFlow_muons_*',
        'keep recoCaloClusters_pfElectronTranslator_*_*',
        'keep recoPreshowerClusters_pfElectronTranslator_*_*',
        'keep recoSuperClusters_pfElectronTranslator_*_*',
        'keep recoCaloClusters_pfPhotonTranslator_*_*',
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*',
        'keep recoSuperClusters_pfPhotonTranslator_*_*',
        'keep recoPhotons_pfPhotonTranslator_*_*',
        'keep recoPhotonCores_pfPhotonTranslator_*_*',
        'keep recoConversions_pfPhotonTranslator_*_*',
        'keep *_particleFlowPtrs_*_*',
        'keep *_particleFlowTmpPtrs_*_*',
        'keep *_chargedHadronPFTrackIsolation_*_*',
        'keep recoPFRecHits_particleFlowRecHitHGC_Cleaned_*',
        'keep recoSuperClusters_simPFProducer_*_*',
        'keep *_ecalBarrelClusterFastTimer_*_*',
        'keep *_particleFlowSuperClusterHGCal_*_*',
        'keep recoPFBlocks_simPFProducer_*_*',
        'keep *_offlineBeamSpot_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_l1L1GtObjectMap_*_*',
        'keep L1MuGMTReadoutCollection_gtDigis_*_*',
        'keep L1GctEmCand*_gctDigis_*_*',
        'keep L1GctJetCand*_gctDigis_*_*',
        'keep L1GctEtHad*_gctDigis_*_*',
        'keep L1GctEtMiss*_gctDigis_*_*',
        'keep L1GctEtTotal*_gctDigis_*_*',
        'keep L1GctHtMiss*_gctDigis_*_*',
        'keep L1GctJetCounts*_gctDigis_*_*',
        'keep L1GctHFRingEtSums*_gctDigis_*_*',
        'keep L1GctHFBitCounts*_gctDigis_*_*',
        'keep LumiDetails_lumiProducer_*_*',
        'keep LumiSummary_lumiProducer_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*',
        'drop *_hlt*_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep DcsStatuss_hltScalersRawToDigi_*_*',
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*',
        'keep L1TriggerScalerss_scalersRawToDigi_*_*',
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep BeamSpotOnlines_scalersRawToDigi_*_*',
        'keep DcsStatuss_scalersRawToDigi_*_*',
        'keep CTPPSRecord_onlineMetaDataDigis_*_*',
        'keep DCSRecord_onlineMetaDataDigis_*_*',
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*',
        'keep recoBeamSpot_onlineMetaDataDigis_*_*',
        'keep *_tcdsDigis_*_*',
        'keep *_logErrorHarvester_*_*',
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*',
        'keep TotemFEDInfos_totemRPRawToDigi_*_*',
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*',
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*',
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*',
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*',
        'keep TotemFEDInfos_totemT2Digis_*_*',
        'keep TotemT2DigiedmNewDetSetVector_totemT2Digis_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemT2Digis_*_*',
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*',
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_diamondSampicLocalTracks_*_*',
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*',
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*',
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*',
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*',
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep *_ticlTrackstersCLUE3DHigh_*_*',
        'keep *_ticlTrackstersMerge_*_*',
        'keep *_ticlTrackstersHFNoseTrkEM_*_*',
        'keep *_ticlTrackstersHFNoseEM_*_*',
        'keep *_ticlTrackstersHFNoseTrk_*_*',
        'keep *_ticlTrackstersHFNoseMIP_*_*',
        'keep *_ticlTrackstersHFNoseHAD_*_*',
        'keep *_ticlTrackstersHFNoseMerge_*_*',
        'keep *_pfTICL_*_*',
        'keep CaloParticles_mix_*_*',
        'keep SimClusters_mix_*_*',
        'keep *_layerClusterSimClusterAssociationProducer_*_*',
        'keep *_layerClusterCaloParticleAssociationProducer_*_*',
        'keep *_layerClusterSimTracksterAssociationProducer_*_*',
        'keep *_tracksterSimTracksterAssociationLinking_*_*',
        'keep *_tracksterSimTracksterAssociationPR_*_*',
        'keep *_tracksterSimTracksterAssociationLinkingPU_*_*',
        'keep *_tracksterSimTracksterAssociationPRPU_*_*',
        'keep *_tracksterSimTracksterAssociationLinkingbyCLUE3D_*_*',
        'keep *_tracksterSimTracksterAssociationPRbyCLUE3D_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep FEDRawDataCollection_source_*_*'
     ) ),
    splitLevel = cms.untracked.int32(0)
)

process.RAWRECOSIMHLTEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring( (
        'drop *',
        'drop *',
        'drop *',
        'keep DetIds_siStripDigis_*_*',
        'keep DetIdedmEDCollection_siPixelDigis_*_*',
        'keep PixelFEDChanneledmNewDetSetVector_siPixelDigis_*_*',
        'keep *_siPixelClusters_*_*',
        'keep *_siStripClusters_*_*',
        'keep ClusterSummary_clusterSummaryProducer_*_*',
        'keep *_siPhase2Clusters_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_dt1DCosmicRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_dt4DSegments_*_*',
        'keep *_dt4DCosmicSegments_*_*',
        'keep *_cscSegments_*_*',
        'keep *_rpcRecHits_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_gemRecHits_*_*',
        'keep *_gemSegments_*_*',
        'keep *_me0RecHits_*_*',
        'keep *_me0Segments_*_*',
        'keep *_hbhereco_*_*',
        'keep *_hbheprereco_*_*',
        'keep *_hfprereco_*_*',
        'keep *_hfreco_*_*',
        'keep *_horeco_*_*',
        'keep HBHERecHitsSorted_hbherecoMB_*_*',
        'keep HORecHitsSorted_horecoMB_*_*',
        'keep HFRecHitsSorted_hfrecoMB_*_*',
        'keep ZDCDataFramesSorted_hcalDigis_*_*',
        'keep ZDCDataFramesSorted_castorDigis_*_*',
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*',
        'keep ZDCRecHitsSorted_zdcreco_*_*',
        'keep ZDCRecHitsSorted_zdcrecoRun3_*_*',
        'keep *_castorreco_*_*',
        'keep *_reducedHcalRecHits_*_*',
        'keep HcalUnpackerReport_castorDigis_*_*',
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*',
        'keep HcalUnpackerReport_hcalDigis_*_*',
        'keep *_HGCalRecHit_*_*',
        'keep recoCaloClusters_hgcalMergeLayerClusters_*_*',
        'keep *_hgcalMergeLayerClusters_timeLayerCluster_*',
        'keep *_hgcalMergeLayerClusters_InitialLayerClustersMask_*',
        'keep *_ecalPreshowerRecHit_*_*',
        'keep *_ecalRecHit_*_*',
        'keep *_ecalCompactTrigPrim_*_*',
        'keep *_ecalTPSkim_*_*',
        'keep EBSrFlagsSorted_ecalDigis__*',
        'keep EESrFlagsSorted_ecalDigis__*',
        'keep *_mix_EBTimeDigi_*',
        'keep *_mix_EETimeDigi_*',
        'keep *_ecalDetailedTimeRecHit_*_*',
        'keep *_hgcalMultiClusters_*_*',
        'keep *_iterHGCalMultiClusters_*_*',
        'keep *_hybridSuperClusters_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep *_multi5x5SuperClusters_*_*',
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep *_particleFlowSuperClusterECAL_*_*',
        'keep *_particleFlowSuperClusterOOTECAL_*_*',
        'drop recoClusterShapes_*_*_*',
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*',
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*',
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*',
        'keep *_selectDigi_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep recoCaloClusters_hybridSuperClusters_*_*',
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*',
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*',
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterHGCal__*',
        'keep recoCaloClusters_particleFlowSuperClusterHGCal__*',
        'keep *_particleFlowSuperClusterHGCal_*_*',
        'keep *_CkfElectronCandidates_*_*',
        'keep *_GsfGlobalElectronTest_*_*',
        'keep *_electronMergedSeeds_*_*',
        'keep recoGsfTrackExtras_electronGsfTracks_*_*',
        'keep recoTrackExtras_electronGsfTracks_*_*',
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*',
        'keep recoTracks_GsfGlobalElectronTest_*_*',
        'keep recoGsfTracks_electronGsfTracks_*_*',
        'keep recoTrackExtras_generalTracks_*_*',
        'keep TrackingRecHitsOwned_generalTracks_*_*',
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*',
        'keep uints_extraFromSeeds_*_*',
        'keep recoTrackExtras_beamhaloTracks_*_*',
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*',
        'keep recoTrackExtras_conversionStepTracks_*_*',
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*',
        'keep *_ctfPixelLess_*_*',
        'keep *_dedxTruncated40_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_conversionStepTracks_*_*',
        'keep recoTracks_beamhaloTracks_*_*',
        'keep recoTracks_ctfPixelLess_*_*',
        'keep *_dedxHarmonic2_*_*',
        'keep *_dedxPixelHarmonic2_*_*',
        'keep *_dedxHitInfo_*_*',
        'keep *_trackExtrapolator_*_*',
        'keep *_generalTracks_MVAValues_*',
        'keep *_generalTracks_MVAVals_*',
        'keep *_ak4CaloJets_*_*',
        'keep *_ak4PFJets_*_*',
        'keep *_ak4TrackJets_*_*',
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*',
        'keep *_towerMaker_*_*',
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*',
        'keep *_ak5CastorJets_*_*',
        'keep *_ak7CastorJets_*_*',
        'keep recoCaloJets_ak4CaloJets_*_*',
        'keep *_ak4CaloJets_rho_*',
        'keep *_ak4CaloJets_sigma_*',
        'keep *_ak4PFJetsCHS_*_*',
        'keep floatedmValueMap_puppi_*_*',
        'keep *_ak4PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppiSoftDrop_*_*',
        'keep recoPFJets_ak4PFJets_*_*',
        'keep *_ak4PFJets_rho_*',
        'keep *_ak4PFJets_sigma_*',
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*',
        'keep *_caloTowers_*_*',
        'keep *_CastorTowerReco_*_*',
        'keep *_ak4JetTracksAssociatorAtVertex_*_*',
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*',
        'keep *_ak4JetTracksAssociatorExplicit_*_*',
        'keep *_ak4JetExtender_*_*',
        'keep *_ak4JetID_*_*',
        'keep recoBasicJets_ak5CastorJets_*_*',
        'keep *_ak5CastorJets_rho_*',
        'keep *_ak5CastorJets_sigma_*',
        'keep *_ak5CastorJetID_*_*',
        'keep recoBasicJets_ak7CastorJets_*_*',
        'keep *_ak7CastorJets_rho_*',
        'keep *_ak7CastorJets_sigma_*',
        'keep *_ak7CastorJetID_*_*',
        'keep *_fixedGridRhoAll_*_*',
        'keep *_fixedGridRhoFastjetAll_*_*',
        'keep *_fixedGridRhoFastjetAllTmp_*_*',
        'keep *_fixedGridRhoFastjetCentral_*_*',
        'keep *_fixedGridRhoFastjetAllCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*',
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*',
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*',
        'keep recoHcalNoiseRBXs_hcalnoise_*_*',
        'keep recoEcalHaloData_EcalHaloData_*_*',
        'keep recoHcalHaloData_HcalHaloData_*_*',
        'keep recoCaloMETs_caloMet_*_*',
        'keep recoCaloMETs_caloMetBE_*_*',
        'keep recoCaloMETs_caloMetBEFO_*_*',
        'keep recoCaloMETs_caloMetM_*_*',
        'keep recoPFMETs_pfMet_*_*',
        'keep recoPFMETs_pfChMet_*_*',
        'keep floatedmValueMap_puppiNoLep_*_*',
        'keep recoPFMETs_pfMetPuppi_*_*',
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*',
        'keep HcalNoiseSummary_hcalnoise_*_*',
        'keep recoGlobalHaloData_GlobalHaloData_*_*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep *_MuonSeed_*_*',
        'keep *_ancientMuonSeed_*_*',
        'keep *_displacedMuonSeeds_*_*',
        'keep TrackingRecHitsOwned_globalMuons_*_*',
        'keep TrackingRecHitsOwned_tevMuons_*_*',
        'keep *_CosmicMuonSeed_*_*',
        'keep recoTrackExtras_cosmicMuons_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons_*_*',
        'keep recoTrackExtras_cosmicMuons1Leg_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*',
        'keep recoTracks_cosmicsVetoTracks_*_*',
        'keep recoMuons_muons_*_*',
        'keep booledmValueMap_muons_*_*',
        'keep doubleedmValueMap_muons_muPFMean*_*',
        'keep doubleedmValueMap_muons_muPFSum*_*',
        'keep *_muons_muonShowerInformation_*',
        'keep recoMuonTimeExtraedmValueMap_muons_*_*',
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*',
        'keep uintedmValueMap_muons_*_*',
        'keep *_particleFlow_muons_*',
        'keep recoMuons_displacedMuons_*_*',
        'keep booledmValueMap_displacedMuons_*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFMean*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFSum*_*',
        'keep recoMuonTimeExtraedmValueMap_displacedMuons_*_*',
        'keep uintedmValueMap_displacedMuons_*_*',
        'keep *_particleFlow_displacedMuons_*',
        'keep recoTracks_standAloneMuons_*_*',
        'keep recoTrackExtras_standAloneMuons_*_*',
        'keep TrackingRecHitsOwned_standAloneMuons_*_*',
        'keep recoTracks_globalMuons_*_*',
        'keep recoTrackExtras_globalMuons_*_*',
        'keep recoTracks_tevMuons_*_*',
        'keep recoTrackExtras_tevMuons_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_displacedTracks_*_*',
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*',
        'keep recoTracks_displacedGlobalMuons_*_*',
        'keep recoTrackExtras_displacedGlobalMuons_*_*',
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*',
        'keep recoTracks_cosmicMuons_*_*',
        'keep recoMuons_muonsFromCosmics_*_*',
        'keep recoTracks_cosmicMuons1Leg_*_*',
        'keep recoMuons_muonsFromCosmics1Leg_*_*',
        'keep recoTracks_refittedStandAloneMuons_*_*',
        'keep recoTrackExtras_refittedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTrackExtras_displacedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*',
        'keep *_muonReducedTrackExtras_*_*',
        'keep *_displacedMuonReducedTrackExtras_*_*',
        'keep *_muIsoDepositTk_*_*',
        'keep *_muIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muIsoDepositCalByAssociatorHits_*_*',
        'keep *_muIsoDepositJets_*_*',
        'keep *_muIsoDepositTkDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorTowersDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorHitsDisplaced_*_*',
        'keep *_muIsoDepositJetsDisplaced_*_*',
        'keep *_muGlobalIsoDepositCtfTk_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*',
        'keep *_muGlobalIsoDepositJets_*_*',
        'keep *_softPFMuonsTagInfos_*_*',
        'keep *_softPFElectronsTagInfos_*_*',
        'keep *_pfImpactParameterTagInfos_*_*',
        'keep *_pfSecondaryVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_pfGhostTrackVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*',
        'keep *_softPFElectronBJetTags_*_*',
        'keep *_softPFMuonBJetTags_*_*',
        'keep *_pfTrackCountingHighEffBJetTags_*_*',
        'keep *_pfJetProbabilityBJetTags_*_*',
        'keep *_pfJetBProbabilityBJetTags_*_*',
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*',
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*',
        'keep *_pfGhostTrackBJetTags_*_*',
        'keep *_pfCombinedMVAV2BJetTags_*_*',
        'keep *_inclusiveCandidateSecondaryVertices_*_*',
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*',
        'keep *_pfCombinedCvsLJetTags_*_*',
        'keep *_pfCombinedCvsBJetTags_*_*',
        'keep *_pfChargeBJetTags_*_*',
        'keep *_pfDeepCSVJetTags_*_*',
        'keep *_pfDeepCMVAJetTags_*_*',
        'keep *_pixelClusterTagInfos_*_*',
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*',
        'keep recoPFTaus_hpsPFTauProducer_*_*',
        'keep *_hpsPFTauBasicDiscriminators_*_*',
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*',
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*',
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*',
        'keep *_hpsPFTauTransverseImpactParameters_*_*',
        'keep  *_offlinePrimaryVertices__*',
        'keep *_offlinePrimaryVerticesWithBS_*_*',
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*',
        'keep *_nuclearInteractionMaker_*_*',
        'keep *_generalV0Candidates_*_*',
        'keep *_inclusiveSecondaryVertices_*_*',
        'keep *_offlinePrimaryVertices4D__*',
        'keep *_offlinePrimaryVertices4DWithBS__*',
        'keep *_trackTimeValueMapProducer_*_*',
        'keep *_tofPID_*_*',
        'keep *_gedPhotonCore_*_*',
        'keep *_gedPhotons_*_*',
        'keep recoPhotons_mustachePhotons_*_*',
        'keep recoPhotonCores_mustachePhotonCore_*_*',
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep recoGsfElectronCores_gsfElectronCores_*_*',
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*',
        'keep recoGsfElectrons_gsfElectrons_*_*',
        'keep recoGsfElectrons_gedGsfElectrons_*_*',
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*',
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*',
        'keep floatedmValueMap_eidRobustLoose_*_*',
        'keep floatedmValueMap_eidRobustTight_*_*',
        'keep floatedmValueMap_eidRobustHighEnergy_*_*',
        'keep floatedmValueMap_eidLoose_*_*',
        'keep floatedmValueMap_eidTight_*_*',
        'keep *_egmGedGsfElectronPFIsolation_*_*',
        'keep recoPhotonCores_gedPhotonCore_*_*',
        'keep recoPhotons_gedPhotons_*_*',
        'keep *_particleBasedIsolation_*_*',
        'keep recoPhotonCores_photonCore_*_*',
        'keep recoPhotons_photons_*_*',
        'keep recoPhotonCores_ootPhotonCore_*_*',
        'keep recoPhotons_ootPhotons_*_*',
        'keep recoConversions_conversions_*_*',
        'drop recoConversions_conversions_uncleanedConversions_*',
        'keep recoConversions_mustacheConversions_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep recoConversions_allConversions_*_*',
        'keep recoConversions_allConversionsOldEG_*_*',
        'keep recoTracks_ckfOutInTracksFromConversions_*_*',
        'keep recoTracks_ckfInOutTracksFromConversions_*_*',
        'keep recoConversions_uncleanedOnlyAllConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep *_PhotonIDProd_*_*',
        'keep *_PhotonIDProdGED_*_*',
        'keep *_hfRecoEcalCandidate_*_*',
        'keep *_hfEMClusters_*_*',
        'keep *_gedGsfElectronCores_*_*',
        'keep *_gedGsfElectrons_*_*',
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*',
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*',
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*',
        'keep *_lowPtGsfToTrackLinks_*_*',
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_rekeyLowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_lowPtGsfElectronID_*_*',
        'keep *_ecalDrivenGsfElectronCores_*_*',
        'keep *_ecalDrivenGsfElectrons_*_*',
        'keep *_ecalDrivenGsfElectronCoresHGC_*_*',
        'keep *_ecalDrivenGsfElectronsHGC_*_*',
        'keep *_photonCoreHGC_*_*',
        'keep *_photonsHGC_*_*',
        'keep *_pixelTracks_*_*',
        'keep *_pixelVertices_*_*',
        'keep recoPFClusters_particleFlowClusterECAL_*_*',
        'keep recoPFClusters_particleFlowClusterHCAL_*_*',
        'keep recoPFClusters_particleFlowClusterHO_*_*',
        'keep recoPFClusters_particleFlowClusterHF_*_*',
        'keep recoPFClusters_particleFlowClusterPS_*_*',
        'keep recoPFBlocks_particleFlowBlock_*_*',
        'keep recoPFCandidates_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlowTmp_electrons_*',
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*',
        'keep *_pfElectronTranslator_*_*',
        'keep *_pfPhotonTranslator_*_*',
        'keep *_trackerDrivenElectronSeeds_preid_*',
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*',
        'keep recoCaloClusters_particleFlowEGamma_*_*',
        'keep recoSuperClusters_particleFlowEGamma_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoConversions_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlow_*_*',
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*',
        'keep *_particleFlow_electrons_*',
        'keep *_particleFlow_photons_*',
        'keep *_particleFlow_muons_*',
        'keep recoCaloClusters_pfElectronTranslator_*_*',
        'keep recoPreshowerClusters_pfElectronTranslator_*_*',
        'keep recoSuperClusters_pfElectronTranslator_*_*',
        'keep recoCaloClusters_pfPhotonTranslator_*_*',
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*',
        'keep recoSuperClusters_pfPhotonTranslator_*_*',
        'keep recoPhotons_pfPhotonTranslator_*_*',
        'keep recoPhotonCores_pfPhotonTranslator_*_*',
        'keep recoConversions_pfPhotonTranslator_*_*',
        'keep *_particleFlowPtrs_*_*',
        'keep *_particleFlowTmpPtrs_*_*',
        'keep *_chargedHadronPFTrackIsolation_*_*',
        'keep recoPFRecHits_particleFlowRecHitHGC_Cleaned_*',
        'keep recoSuperClusters_simPFProducer_*_*',
        'keep *_ecalBarrelClusterFastTimer_*_*',
        'keep *_particleFlowSuperClusterHGCal_*_*',
        'keep recoPFBlocks_simPFProducer_*_*',
        'keep *_offlineBeamSpot_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_l1L1GtObjectMap_*_*',
        'keep L1MuGMTReadoutCollection_gtDigis_*_*',
        'keep L1GctEmCand*_gctDigis_*_*',
        'keep L1GctJetCand*_gctDigis_*_*',
        'keep L1GctEtHad*_gctDigis_*_*',
        'keep L1GctEtMiss*_gctDigis_*_*',
        'keep L1GctEtTotal*_gctDigis_*_*',
        'keep L1GctHtMiss*_gctDigis_*_*',
        'keep L1GctJetCounts*_gctDigis_*_*',
        'keep L1GctHFRingEtSums*_gctDigis_*_*',
        'keep L1GctHFBitCounts*_gctDigis_*_*',
        'keep LumiDetails_lumiProducer_*_*',
        'keep LumiSummary_lumiProducer_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*',
        'drop *_hlt*_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep DcsStatuss_hltScalersRawToDigi_*_*',
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*',
        'keep L1TriggerScalerss_scalersRawToDigi_*_*',
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep BeamSpotOnlines_scalersRawToDigi_*_*',
        'keep DcsStatuss_scalersRawToDigi_*_*',
        'keep CTPPSRecord_onlineMetaDataDigis_*_*',
        'keep DCSRecord_onlineMetaDataDigis_*_*',
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*',
        'keep recoBeamSpot_onlineMetaDataDigis_*_*',
        'keep *_tcdsDigis_*_*',
        'keep *_logErrorHarvester_*_*',
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*',
        'keep TotemFEDInfos_totemRPRawToDigi_*_*',
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*',
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*',
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*',
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*',
        'keep TotemFEDInfos_totemT2Digis_*_*',
        'keep TotemT2DigiedmNewDetSetVector_totemT2Digis_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemT2Digis_*_*',
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*',
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_diamondSampicLocalTracks_*_*',
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*',
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*',
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*',
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*',
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep *_ticlTrackstersCLUE3DHigh_*_*',
        'keep *_ticlTrackstersMerge_*_*',
        'keep *_ticlTrackstersHFNoseTrkEM_*_*',
        'keep *_ticlTrackstersHFNoseEM_*_*',
        'keep *_ticlTrackstersHFNoseTrk_*_*',
        'keep *_ticlTrackstersHFNoseMIP_*_*',
        'keep *_ticlTrackstersHFNoseHAD_*_*',
        'keep *_ticlTrackstersHFNoseMerge_*_*',
        'keep *_pfTICL_*_*',
        'keep CaloParticles_mix_*_*',
        'keep SimClusters_mix_*_*',
        'keep *_layerClusterSimClusterAssociationProducer_*_*',
        'keep *_layerClusterCaloParticleAssociationProducer_*_*',
        'keep *_layerClusterSimTracksterAssociationProducer_*_*',
        'keep *_tracksterSimTracksterAssociationLinking_*_*',
        'keep *_tracksterSimTracksterAssociationPR_*_*',
        'keep *_tracksterSimTracksterAssociationLinkingPU_*_*',
        'keep *_tracksterSimTracksterAssociationPRPU_*_*',
        'keep *_tracksterSimTracksterAssociationLinkingbyCLUE3D_*_*',
        'keep *_tracksterSimTracksterAssociationPRbyCLUE3D_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep FEDRawDataCollection_source_*_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'keep recoGenMETs_*_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*',
        'keep edmHepMCProduct_source_*_*',
        'keep SimTracks_g4SimHits_*_*',
        'keep SimVertexs_g4SimHits_*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackMCMatch_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*',
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*',
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*',
        'keep *_muonSimClassifier_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonME0Digis_*_*',
        'keep *_simHGCalUnsuppressedDigis_EE_*',
        'keep *_simHGCalUnsuppressedDigis_HEfront_*',
        'keep *_simHGCalUnsuppressedDigis_HEback_*',
        'keep *_mix_MergedCaloTruth_*',
        'keep *_mix_MergedMtdTruth_*',
        'keep *_mix_MergedMtdTruthLC_*',
        'keep *_mix_MergedMtdTruthST_*',
        'keep *_mix_FTLBarrel_*',
        'keep *_mix_FTLEndcap_*',
        'keep *_mix_InitialVertices_*',
        'keep *_mtdRecoClusterToSimLayerClusterAssociation_*_*',
        'keep *_mtdSimLayerClusterToTPAssociation_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*',
        'drop *_hlt*_*_*',
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*',
        'keep *_hltAK4CaloJetsIDPassed_*_*',
        'keep *_hltAK4CaloJets_*_*',
        'keep *_hltAK4PFJetsCorrected_*_*',
        'keep *_hltAK4PFJetsForTaus_*_*',
        'keep *_hltAK4PFJets_*_*',
        'keep *_hltAlCaEtaEBRechitsToDigis_*_*',
        'keep *_hltAlCaEtaEERechitsToDigis_*_*',
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegional_etaEcalRecHitsES_*',
        'keep *_hltAlCaPi0EBRechitsToDigis_*_*',
        'keep *_hltAlCaPi0EERechitsToDigis_*_*',
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegional_pi0EcalRecHitsES_*',
        'keep *_hltAlcaPixelClusterCounts_*_*',
        'keep *_hltBSoftMuonMu5L3_*_*',
        'keep *_hltCsc2DRecHits_*_*',
        'keep *_hltCscSegments_*_*',
        'keep *_hltDeepBLifetimeTagInfosPF_*_*',
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsCalo_*_*',
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsPF_*_*',
        'keep *_hltDeepSecondaryVertexTagInfosPF_*_*',
        'keep *_hltDisplacedhltIter4PFlowTrackSelectionHighPurity_*_*',
        'keep *_hltDoubletRecoveryPFlowTrackSelectionHighPurityPPOnAA_*_*',
        'keep *_hltDoubletRecoveryPFlowTrackSelectionHighPurity_*_*',
        'keep *_hltDt4DSegments_*_*',
        'keep *_hltEcalPhiSymFilter_*_*',
        'keep *_hltEcalRecHit_*_*',
        'keep *_hltEgammaCandidates_*_*',
        'keep *_hltEgammaGsfTracks_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltFastPVPixelTracksMerger_*_*',
        'keep *_hltFastPVPixelTracksRecover_*_*',
        'keep *_hltFastPVPixelTracks_*_*',
        'keep *_hltFastPVPixelVertices_*_*',
        'keep *_hltFastPixelBLifetimeL3Associator_*_*',
        'keep *_hltFastPrimaryVertex_*_*',
        'keep *_hltGlbTrkMuonCandsNoVtx_*_*',
        'keep *_hltGtStage2Digis_*_*',
        'keep *_hltHITrackingSiStripRawToClustersFacilityFullZeroSuppression_*_*',
        'keep *_hltHbhereco_*_*',
        'keep *_hltHfreco_*_*',
        'keep *_hltHoreco_*_*',
        'keep *_hltImpactParameterTagInfos_*_*',
        'keep *_hltInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_hltIsolPixelTrackProdHB_*_*',
        'keep *_hltIsolPixelTrackProdHE_*_*',
        'keep *_hltIter0PFlowCtfWithMaterialTracks_*_*',
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*',
        'keep *_hltIterL3GlbMuon_*_*',
        'keep *_hltIterL3MuonAndMuonFromL1Merged_*_*',
        'keep *_hltIterL3MuonMerged_*_*',
        'keep *_hltIterL3MuonsNoID_*_*',
        'keep *_hltIterL3Muons_*_*',
        'keep *_hltIterL3OIMuonTrackSelectionHighPurity_*_*',
        'keep *_hltL2MuonCandidatesNoVtx_*_*',
        'keep *_hltL2MuonCandidates_*_*',
        'keep *_hltL2MuonSeeds_*_*',
        'keep *_hltL2Muons_*_*',
        'keep *_hltL2TauJets_*_*',
        'keep *_hltL3MuonsIOHit_*_*',
        'keep *_hltL3MuonsLinksCombination_*_*',
        'keep *_hltL3MuonsOIHit_*_*',
        'keep *_hltL3MuonsOIState_*_*',
        'keep *_hltL3Muons_*_*',
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*',
        'keep *_hltL3NoFiltersNoVtxMuons_*_*',
        'keep *_hltL3TkFromL2OICombination_*_*',
        'keep *_hltL3TkTracksFromL2IOHit_*_*',
        'keep *_hltL3TkTracksFromL2OIHit_*_*',
        'keep *_hltL3TkTracksFromL2OIState_*_*',
        'keep *_hltL3TkTracksFromL2_*_*',
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*',
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*',
        'keep *_hltL3TrackCandidateFromL2OIState_*_*',
        'keep *_hltL3TrajSeedIOHit_*_*',
        'keep *_hltL3TrajSeedOIHit_*_*',
        'keep *_hltL3TrajSeedOIState_*_*',
        'keep *_hltL3TrajectorySeed_*_*',
        'keep *_hltMergedTracksForBTag_*_*',
        'keep *_hltMergedTracksPPOnAA_*_*',
        'keep *_hltMergedTracks_*_*',
        'keep *_hltMet_*_*',
        'keep *_hltMuonCSCDigis_*_*',
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*',
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*',
        'keep *_hltMuonDTDigis_*_*',
        'keep *_hltMuonRPCDigis_*_*',
        'keep *_hltOnlineBeamSpot_*_*',
        'keep *_hltPFJetForBtag_*_*',
        'keep *_hltPFJetForPNetAK8_*_*',
        'keep *_hltPFMETNoMuProducer_*_*',
        'keep *_hltPFMETProducer_*_*',
        'keep *_hltPFMETTypeOne_*_*',
        'keep *_hltPFMuonMerging_*_*',
        'keep *_hltPFTau35Track_*_*',
        'keep *_hltPFTau35_*_*',
        'keep *_hltPPSCalibrationRaw_*_*',
        'keep *_hltParticleFlowForTaus_*_*',
        'keep *_hltParticleFlow_*_*',
        'keep *_hltParticleNetDiscriminatorsJetTagsAK8_*_*',
        'keep *_hltParticleNetDiscriminatorsJetTags_*_*',
        'keep *_hltParticleNetJetTagInfos_*_*',
        'keep *_hltPixelTracksPPOnAA_*_*',
        'keep *_hltPixelTracks_*_*',
        'keep *_hltPixelVerticesPPOnAA_*_*',
        'keep *_hltPixelVertices_*_*',
        'keep *_hltRpcRecHits_*_*',
        'keep *_hltSelector4CentralJetsL1FastJet_*_*',
        'keep *_hltSelectorJets20L1FastJet_*_*',
        'keep *_hltSiPixelClustersAfterSplittingPPOnAA_*_*',
        'keep *_hltSiPixelClustersCache_*_*',
        'keep *_hltSiPixelClusters_*_*',
        'keep *_hltSiStripClusterizerForRawPrime_*_*',
        'keep *_hltSiStripClusters2ApproxClusters_*_*',
        'keep *_hltSiStripRawToClustersFacility_*_*',
        'keep *_hltTowerMakerForAll_*_*',
        'keep *_hltTriggerSummaryAOD_*_*',
        'keep *_hltTriggerSummaryRAW_*_*',
        'keep *_hltTrimmedPixelVerticesPPOnAA_*_*',
        'keep *_hltTrimmedPixelVertices_*_*',
        'keep *_hltVerticesL3_*_*',
        'keep *_hltVerticesPFFilterPPOnAA_*_*',
        'keep *_hltVerticesPFFilter_*_*',
        'keep *_hltVerticesPFSelector_*_*',
        'keep DetIds_hltSiStripRawToDigi_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep FEDRawDataCollection_rawDataRepacker_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*',
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*',
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*',
        'keep TrackingRecHitsOwned_hltL3Muons_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep recoCaloJets_*_*_*',
        'keep recoCaloMETs_*_*_*',
        'keep recoCaloMETs_hltMet_*_*',
        'keep recoCompositeCandidates_*_*_*',
        'keep recoElectrons_*_*_*',
        'keep recoIsolatedPixelTrackCandidates_*_*_*',
        'keep recoMETs_*_*_*',
        'keep recoPFJets_*_*_*',
        'keep recoPFTaus_*_*_*',
        'keep recoRecoChargedCandidates_*_*_*',
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*',
        'keep recoRecoEcalCandidates_*_*_*',
        'keep triggerTriggerEventWithRefs_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep triggerTriggerFilterObjectWithRefs_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*'
     ) ),
    splitLevel = cms.untracked.int32(0)
)

process.RAWSIMEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(1),
    eventAutoFlushCompressedSize = cms.untracked.int32(20971520),
    outputCommands = cms.untracked.vstring(
        'drop *',
        'drop *',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep *_g4SimHits_*_*',
        'keep edmHepMCProduct_source_*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackingParticles_*_*',
        'keep *_prunedDigiSimLinks_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*',
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*',
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*',
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*',
        'keep *_simMuonCSCDigis_*_*',
        'keep *_simMuonRPCDigis_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonME0Digis_*_*',
        'keep EBSrFlagsSorted_simEcalDigis_*_*',
        'keep EESrFlagsSorted_simEcalDigis_*_*',
        'keep *_simHcalUnsuppressedDigis_*_*',
        'keep *_mix_EETimeDigi_*',
        'keep *_mix_EBTimeDigi_*',
        'keep *_simEcalUnsuppressedDigis_*_*',
        'keep *_simHGCalUnsuppressedDigis_EE_*',
        'keep *_simHGCalUnsuppressedDigis_HEfront_*',
        'keep *_simHGCalUnsuppressedDigis_HEback_*',
        'keep *_mix_MergedCaloTruth_*',
        'keep *_mix_MergedMtdTruth_*',
        'keep *_mix_MergedMtdTruthLC_*',
        'keep *_mix_MergedMtdTruthST_*',
        'keep *_mix_FTLBarrel_*',
        'keep *_mix_FTLEndcap_*',
        'keep *_mix_InitialVertices_*',
        'keep *_mtdRecoClusterToSimLayerClusterAssociation_*_*',
        'keep *_mtdSimLayerClusterToTPAssociation_*_*',
        'keep CrossingFramePlaybackInfoNew_*_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int6stdbitsetstdpairs_*_AffectedAPVList_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*',
        'keep *_mix_MergedTrackTruth_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'keep recoGenJets_ak*_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*',
        'keep recoGenMETs_*_*_*',
        'keep FEDRawDataCollection_source_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep *_MEtoEDMConverter_*_*',
        'keep *_randomEngineStateProducer_*_*',
        'keep *_logErrorHarvester_*_*',
        'keep *_sim*Digis_*_*',
        'keep *Phase2TrackerDigi*_*_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.RAWSIMHLTEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *',
        'drop *',
        'drop *',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep *_g4SimHits_*_*',
        'keep edmHepMCProduct_source_*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackingParticles_*_*',
        'keep *_prunedDigiSimLinks_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*',
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*',
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*',
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*',
        'keep *_simMuonCSCDigis_*_*',
        'keep *_simMuonRPCDigis_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonME0Digis_*_*',
        'keep EBSrFlagsSorted_simEcalDigis_*_*',
        'keep EESrFlagsSorted_simEcalDigis_*_*',
        'keep *_simHcalUnsuppressedDigis_*_*',
        'keep *_mix_EETimeDigi_*',
        'keep *_mix_EBTimeDigi_*',
        'keep *_simEcalUnsuppressedDigis_*_*',
        'keep *_simHGCalUnsuppressedDigis_EE_*',
        'keep *_simHGCalUnsuppressedDigis_HEfront_*',
        'keep *_simHGCalUnsuppressedDigis_HEback_*',
        'keep *_mix_MergedCaloTruth_*',
        'keep *_mix_MergedMtdTruth_*',
        'keep *_mix_MergedMtdTruthLC_*',
        'keep *_mix_MergedMtdTruthST_*',
        'keep *_mix_FTLBarrel_*',
        'keep *_mix_FTLEndcap_*',
        'keep *_mix_InitialVertices_*',
        'keep *_mtdRecoClusterToSimLayerClusterAssociation_*_*',
        'keep *_mtdSimLayerClusterToTPAssociation_*_*',
        'keep CrossingFramePlaybackInfoNew_*_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int6stdbitsetstdpairs_*_AffectedAPVList_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*',
        'keep *_mix_MergedTrackTruth_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'keep recoGenJets_ak*_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*',
        'keep recoGenMETs_*_*_*',
        'keep FEDRawDataCollection_source_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep *_MEtoEDMConverter_*_*',
        'keep *_randomEngineStateProducer_*_*',
        'keep *_logErrorHarvester_*_*',
        'keep *_sim*Digis_*_*',
        'keep *Phase2TrackerDigi*_*_*_*',
        'drop *_hlt*_*_*',
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*',
        'keep *_hltAK4CaloJetsIDPassed_*_*',
        'keep *_hltAK4CaloJets_*_*',
        'keep *_hltAK4PFJetsCorrected_*_*',
        'keep *_hltAK4PFJetsForTaus_*_*',
        'keep *_hltAK4PFJets_*_*',
        'keep *_hltAlCaEtaEBRechitsToDigis_*_*',
        'keep *_hltAlCaEtaEERechitsToDigis_*_*',
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegional_etaEcalRecHitsES_*',
        'keep *_hltAlCaPi0EBRechitsToDigis_*_*',
        'keep *_hltAlCaPi0EERechitsToDigis_*_*',
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegional_pi0EcalRecHitsES_*',
        'keep *_hltAlcaPixelClusterCounts_*_*',
        'keep *_hltBSoftMuonMu5L3_*_*',
        'keep *_hltCsc2DRecHits_*_*',
        'keep *_hltCscSegments_*_*',
        'keep *_hltDeepBLifetimeTagInfosPF_*_*',
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsCalo_*_*',
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsPF_*_*',
        'keep *_hltDeepSecondaryVertexTagInfosPF_*_*',
        'keep *_hltDisplacedhltIter4PFlowTrackSelectionHighPurity_*_*',
        'keep *_hltDoubletRecoveryPFlowTrackSelectionHighPurityPPOnAA_*_*',
        'keep *_hltDoubletRecoveryPFlowTrackSelectionHighPurity_*_*',
        'keep *_hltDt4DSegments_*_*',
        'keep *_hltEcalPhiSymFilter_*_*',
        'keep *_hltEcalRecHit_*_*',
        'keep *_hltEgammaCandidates_*_*',
        'keep *_hltEgammaGsfTracks_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltFastPVPixelTracksMerger_*_*',
        'keep *_hltFastPVPixelTracksRecover_*_*',
        'keep *_hltFastPVPixelTracks_*_*',
        'keep *_hltFastPVPixelVertices_*_*',
        'keep *_hltFastPixelBLifetimeL3Associator_*_*',
        'keep *_hltFastPrimaryVertex_*_*',
        'keep *_hltGlbTrkMuonCandsNoVtx_*_*',
        'keep *_hltGtStage2Digis_*_*',
        'keep *_hltHITrackingSiStripRawToClustersFacilityFullZeroSuppression_*_*',
        'keep *_hltHbhereco_*_*',
        'keep *_hltHfreco_*_*',
        'keep *_hltHoreco_*_*',
        'keep *_hltImpactParameterTagInfos_*_*',
        'keep *_hltInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_hltIsolPixelTrackProdHB_*_*',
        'keep *_hltIsolPixelTrackProdHE_*_*',
        'keep *_hltIter0PFlowCtfWithMaterialTracks_*_*',
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*',
        'keep *_hltIterL3GlbMuon_*_*',
        'keep *_hltIterL3MuonAndMuonFromL1Merged_*_*',
        'keep *_hltIterL3MuonMerged_*_*',
        'keep *_hltIterL3MuonsNoID_*_*',
        'keep *_hltIterL3Muons_*_*',
        'keep *_hltIterL3OIMuonTrackSelectionHighPurity_*_*',
        'keep *_hltL2MuonCandidatesNoVtx_*_*',
        'keep *_hltL2MuonCandidates_*_*',
        'keep *_hltL2MuonSeeds_*_*',
        'keep *_hltL2Muons_*_*',
        'keep *_hltL2TauJets_*_*',
        'keep *_hltL3MuonsIOHit_*_*',
        'keep *_hltL3MuonsLinksCombination_*_*',
        'keep *_hltL3MuonsOIHit_*_*',
        'keep *_hltL3MuonsOIState_*_*',
        'keep *_hltL3Muons_*_*',
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*',
        'keep *_hltL3NoFiltersNoVtxMuons_*_*',
        'keep *_hltL3TkFromL2OICombination_*_*',
        'keep *_hltL3TkTracksFromL2IOHit_*_*',
        'keep *_hltL3TkTracksFromL2OIHit_*_*',
        'keep *_hltL3TkTracksFromL2OIState_*_*',
        'keep *_hltL3TkTracksFromL2_*_*',
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*',
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*',
        'keep *_hltL3TrackCandidateFromL2OIState_*_*',
        'keep *_hltL3TrajSeedIOHit_*_*',
        'keep *_hltL3TrajSeedOIHit_*_*',
        'keep *_hltL3TrajSeedOIState_*_*',
        'keep *_hltL3TrajectorySeed_*_*',
        'keep *_hltMergedTracksForBTag_*_*',
        'keep *_hltMergedTracksPPOnAA_*_*',
        'keep *_hltMergedTracks_*_*',
        'keep *_hltMet_*_*',
        'keep *_hltMuonCSCDigis_*_*',
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*',
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*',
        'keep *_hltMuonDTDigis_*_*',
        'keep *_hltMuonRPCDigis_*_*',
        'keep *_hltOnlineBeamSpot_*_*',
        'keep *_hltPFJetForBtag_*_*',
        'keep *_hltPFJetForPNetAK8_*_*',
        'keep *_hltPFMETNoMuProducer_*_*',
        'keep *_hltPFMETProducer_*_*',
        'keep *_hltPFMETTypeOne_*_*',
        'keep *_hltPFMuonMerging_*_*',
        'keep *_hltPFTau35Track_*_*',
        'keep *_hltPFTau35_*_*',
        'keep *_hltPPSCalibrationRaw_*_*',
        'keep *_hltParticleFlowForTaus_*_*',
        'keep *_hltParticleFlow_*_*',
        'keep *_hltParticleNetDiscriminatorsJetTagsAK8_*_*',
        'keep *_hltParticleNetDiscriminatorsJetTags_*_*',
        'keep *_hltParticleNetJetTagInfos_*_*',
        'keep *_hltPixelTracksPPOnAA_*_*',
        'keep *_hltPixelTracks_*_*',
        'keep *_hltPixelVerticesPPOnAA_*_*',
        'keep *_hltPixelVertices_*_*',
        'keep *_hltRpcRecHits_*_*',
        'keep *_hltSelector4CentralJetsL1FastJet_*_*',
        'keep *_hltSelectorJets20L1FastJet_*_*',
        'keep *_hltSiPixelClustersAfterSplittingPPOnAA_*_*',
        'keep *_hltSiPixelClustersCache_*_*',
        'keep *_hltSiPixelClusters_*_*',
        'keep *_hltSiStripClusterizerForRawPrime_*_*',
        'keep *_hltSiStripClusters2ApproxClusters_*_*',
        'keep *_hltSiStripRawToClustersFacility_*_*',
        'keep *_hltTowerMakerForAll_*_*',
        'keep *_hltTriggerSummaryAOD_*_*',
        'keep *_hltTriggerSummaryRAW_*_*',
        'keep *_hltTrimmedPixelVerticesPPOnAA_*_*',
        'keep *_hltTrimmedPixelVertices_*_*',
        'keep *_hltVerticesL3_*_*',
        'keep *_hltVerticesPFFilterPPOnAA_*_*',
        'keep *_hltVerticesPFFilter_*_*',
        'keep *_hltVerticesPFSelector_*_*',
        'keep DetIds_hltSiStripRawToDigi_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep FEDRawDataCollection_rawDataRepacker_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*',
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*',
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*',
        'keep TrackingRecHitsOwned_hltL3Muons_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep recoCaloJets_*_*_*',
        'keep recoCaloMETs_*_*_*',
        'keep recoCaloMETs_hltMet_*_*',
        'keep recoCompositeCandidates_*_*_*',
        'keep recoElectrons_*_*_*',
        'keep recoIsolatedPixelTrackCandidates_*_*_*',
        'keep recoMETs_*_*_*',
        'keep recoPFJets_*_*_*',
        'keep recoPFTaus_*_*_*',
        'keep recoRecoChargedCandidates_*_*_*',
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*',
        'keep recoRecoEcalCandidates_*_*_*',
        'keep triggerTriggerEventWithRefs_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep triggerTriggerFilterObjectWithRefs_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.RECODEBUGEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring( (
        'drop *',
        'drop *',
        'drop *',
        'keep DetIds_siStripDigis_*_*',
        'keep DetIdedmEDCollection_siPixelDigis_*_*',
        'keep PixelFEDChanneledmNewDetSetVector_siPixelDigis_*_*',
        'keep *_siPixelClusters_*_*',
        'keep *_siStripClusters_*_*',
        'keep ClusterSummary_clusterSummaryProducer_*_*',
        'keep *_siPhase2Clusters_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_dt1DCosmicRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_dt4DSegments_*_*',
        'keep *_dt4DCosmicSegments_*_*',
        'keep *_cscSegments_*_*',
        'keep *_rpcRecHits_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_gemRecHits_*_*',
        'keep *_gemSegments_*_*',
        'keep *_me0RecHits_*_*',
        'keep *_me0Segments_*_*',
        'keep *_hbhereco_*_*',
        'keep *_hbheprereco_*_*',
        'keep *_hfprereco_*_*',
        'keep *_hfreco_*_*',
        'keep *_horeco_*_*',
        'keep HBHERecHitsSorted_hbherecoMB_*_*',
        'keep HORecHitsSorted_horecoMB_*_*',
        'keep HFRecHitsSorted_hfrecoMB_*_*',
        'keep ZDCDataFramesSorted_hcalDigis_*_*',
        'keep ZDCDataFramesSorted_castorDigis_*_*',
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*',
        'keep ZDCRecHitsSorted_zdcreco_*_*',
        'keep ZDCRecHitsSorted_zdcrecoRun3_*_*',
        'keep *_castorreco_*_*',
        'keep *_reducedHcalRecHits_*_*',
        'keep HcalUnpackerReport_castorDigis_*_*',
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*',
        'keep HcalUnpackerReport_hcalDigis_*_*',
        'keep *_HGCalRecHit_*_*',
        'keep recoCaloClusters_hgcalMergeLayerClusters_*_*',
        'keep *_hgcalMergeLayerClusters_timeLayerCluster_*',
        'keep *_hgcalMergeLayerClusters_InitialLayerClustersMask_*',
        'keep *_ecalPreshowerRecHit_*_*',
        'keep *_ecalRecHit_*_*',
        'keep *_ecalCompactTrigPrim_*_*',
        'keep *_ecalTPSkim_*_*',
        'keep EBSrFlagsSorted_ecalDigis__*',
        'keep EESrFlagsSorted_ecalDigis__*',
        'keep *_mix_EBTimeDigi_*',
        'keep *_mix_EETimeDigi_*',
        'keep *_ecalDetailedTimeRecHit_*_*',
        'keep *_hgcalMultiClusters_*_*',
        'keep *_iterHGCalMultiClusters_*_*',
        'keep *_hybridSuperClusters_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep *_multi5x5SuperClusters_*_*',
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep *_particleFlowSuperClusterECAL_*_*',
        'keep *_particleFlowSuperClusterOOTECAL_*_*',
        'drop recoClusterShapes_*_*_*',
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*',
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*',
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*',
        'keep *_selectDigi_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep recoCaloClusters_hybridSuperClusters_*_*',
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*',
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*',
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterHGCal__*',
        'keep recoCaloClusters_particleFlowSuperClusterHGCal__*',
        'keep *_particleFlowSuperClusterHGCal_*_*',
        'keep *_CkfElectronCandidates_*_*',
        'keep *_GsfGlobalElectronTest_*_*',
        'keep *_electronMergedSeeds_*_*',
        'keep recoGsfTrackExtras_electronGsfTracks_*_*',
        'keep recoTrackExtras_electronGsfTracks_*_*',
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*',
        'keep recoTracks_GsfGlobalElectronTest_*_*',
        'keep recoGsfTracks_electronGsfTracks_*_*',
        'keep recoTrackExtras_generalTracks_*_*',
        'keep TrackingRecHitsOwned_generalTracks_*_*',
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*',
        'keep uints_extraFromSeeds_*_*',
        'keep recoTrackExtras_beamhaloTracks_*_*',
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*',
        'keep recoTrackExtras_conversionStepTracks_*_*',
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*',
        'keep *_ctfPixelLess_*_*',
        'keep *_dedxTruncated40_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_conversionStepTracks_*_*',
        'keep recoTracks_beamhaloTracks_*_*',
        'keep recoTracks_ctfPixelLess_*_*',
        'keep *_dedxHarmonic2_*_*',
        'keep *_dedxPixelHarmonic2_*_*',
        'keep *_dedxHitInfo_*_*',
        'keep *_trackExtrapolator_*_*',
        'keep *_generalTracks_MVAValues_*',
        'keep *_generalTracks_MVAVals_*',
        'keep *_ak4CaloJets_*_*',
        'keep *_ak4PFJets_*_*',
        'keep *_ak4TrackJets_*_*',
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*',
        'keep *_towerMaker_*_*',
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*',
        'keep *_ak5CastorJets_*_*',
        'keep *_ak7CastorJets_*_*',
        'keep recoCaloJets_ak4CaloJets_*_*',
        'keep *_ak4CaloJets_rho_*',
        'keep *_ak4CaloJets_sigma_*',
        'keep *_ak4PFJetsCHS_*_*',
        'keep floatedmValueMap_puppi_*_*',
        'keep *_ak4PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppiSoftDrop_*_*',
        'keep recoPFJets_ak4PFJets_*_*',
        'keep *_ak4PFJets_rho_*',
        'keep *_ak4PFJets_sigma_*',
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*',
        'keep *_caloTowers_*_*',
        'keep *_CastorTowerReco_*_*',
        'keep *_ak4JetTracksAssociatorAtVertex_*_*',
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*',
        'keep *_ak4JetTracksAssociatorExplicit_*_*',
        'keep *_ak4JetExtender_*_*',
        'keep *_ak4JetID_*_*',
        'keep recoBasicJets_ak5CastorJets_*_*',
        'keep *_ak5CastorJets_rho_*',
        'keep *_ak5CastorJets_sigma_*',
        'keep *_ak5CastorJetID_*_*',
        'keep recoBasicJets_ak7CastorJets_*_*',
        'keep *_ak7CastorJets_rho_*',
        'keep *_ak7CastorJets_sigma_*',
        'keep *_ak7CastorJetID_*_*',
        'keep *_fixedGridRhoAll_*_*',
        'keep *_fixedGridRhoFastjetAll_*_*',
        'keep *_fixedGridRhoFastjetAllTmp_*_*',
        'keep *_fixedGridRhoFastjetCentral_*_*',
        'keep *_fixedGridRhoFastjetAllCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*',
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*',
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*',
        'keep recoHcalNoiseRBXs_hcalnoise_*_*',
        'keep recoEcalHaloData_EcalHaloData_*_*',
        'keep recoHcalHaloData_HcalHaloData_*_*',
        'keep recoCaloMETs_caloMet_*_*',
        'keep recoCaloMETs_caloMetBE_*_*',
        'keep recoCaloMETs_caloMetBEFO_*_*',
        'keep recoCaloMETs_caloMetM_*_*',
        'keep recoPFMETs_pfMet_*_*',
        'keep recoPFMETs_pfChMet_*_*',
        'keep floatedmValueMap_puppiNoLep_*_*',
        'keep recoPFMETs_pfMetPuppi_*_*',
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*',
        'keep HcalNoiseSummary_hcalnoise_*_*',
        'keep recoGlobalHaloData_GlobalHaloData_*_*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep *_MuonSeed_*_*',
        'keep *_ancientMuonSeed_*_*',
        'keep *_displacedMuonSeeds_*_*',
        'keep TrackingRecHitsOwned_globalMuons_*_*',
        'keep TrackingRecHitsOwned_tevMuons_*_*',
        'keep *_CosmicMuonSeed_*_*',
        'keep recoTrackExtras_cosmicMuons_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons_*_*',
        'keep recoTrackExtras_cosmicMuons1Leg_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*',
        'keep recoTracks_cosmicsVetoTracks_*_*',
        'keep recoMuons_muons_*_*',
        'keep booledmValueMap_muons_*_*',
        'keep doubleedmValueMap_muons_muPFMean*_*',
        'keep doubleedmValueMap_muons_muPFSum*_*',
        'keep *_muons_muonShowerInformation_*',
        'keep recoMuonTimeExtraedmValueMap_muons_*_*',
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*',
        'keep uintedmValueMap_muons_*_*',
        'keep *_particleFlow_muons_*',
        'keep recoMuons_displacedMuons_*_*',
        'keep booledmValueMap_displacedMuons_*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFMean*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFSum*_*',
        'keep recoMuonTimeExtraedmValueMap_displacedMuons_*_*',
        'keep uintedmValueMap_displacedMuons_*_*',
        'keep *_particleFlow_displacedMuons_*',
        'keep recoTracks_standAloneMuons_*_*',
        'keep recoTrackExtras_standAloneMuons_*_*',
        'keep TrackingRecHitsOwned_standAloneMuons_*_*',
        'keep recoTracks_globalMuons_*_*',
        'keep recoTrackExtras_globalMuons_*_*',
        'keep recoTracks_tevMuons_*_*',
        'keep recoTrackExtras_tevMuons_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_displacedTracks_*_*',
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*',
        'keep recoTracks_displacedGlobalMuons_*_*',
        'keep recoTrackExtras_displacedGlobalMuons_*_*',
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*',
        'keep recoTracks_cosmicMuons_*_*',
        'keep recoMuons_muonsFromCosmics_*_*',
        'keep recoTracks_cosmicMuons1Leg_*_*',
        'keep recoMuons_muonsFromCosmics1Leg_*_*',
        'keep recoTracks_refittedStandAloneMuons_*_*',
        'keep recoTrackExtras_refittedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTrackExtras_displacedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*',
        'keep *_muonReducedTrackExtras_*_*',
        'keep *_displacedMuonReducedTrackExtras_*_*',
        'keep *_muIsoDepositTk_*_*',
        'keep *_muIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muIsoDepositCalByAssociatorHits_*_*',
        'keep *_muIsoDepositJets_*_*',
        'keep *_muIsoDepositTkDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorTowersDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorHitsDisplaced_*_*',
        'keep *_muIsoDepositJetsDisplaced_*_*',
        'keep *_muGlobalIsoDepositCtfTk_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*',
        'keep *_muGlobalIsoDepositJets_*_*',
        'keep *_softPFMuonsTagInfos_*_*',
        'keep *_softPFElectronsTagInfos_*_*',
        'keep *_pfImpactParameterTagInfos_*_*',
        'keep *_pfSecondaryVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_pfGhostTrackVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*',
        'keep *_softPFElectronBJetTags_*_*',
        'keep *_softPFMuonBJetTags_*_*',
        'keep *_pfTrackCountingHighEffBJetTags_*_*',
        'keep *_pfJetProbabilityBJetTags_*_*',
        'keep *_pfJetBProbabilityBJetTags_*_*',
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*',
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*',
        'keep *_pfGhostTrackBJetTags_*_*',
        'keep *_pfCombinedMVAV2BJetTags_*_*',
        'keep *_inclusiveCandidateSecondaryVertices_*_*',
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*',
        'keep *_pfCombinedCvsLJetTags_*_*',
        'keep *_pfCombinedCvsBJetTags_*_*',
        'keep *_pfChargeBJetTags_*_*',
        'keep *_pfDeepCSVJetTags_*_*',
        'keep *_pfDeepCMVAJetTags_*_*',
        'keep *_pixelClusterTagInfos_*_*',
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*',
        'keep recoPFTaus_hpsPFTauProducer_*_*',
        'keep *_hpsPFTauBasicDiscriminators_*_*',
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*',
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*',
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*',
        'keep *_hpsPFTauTransverseImpactParameters_*_*',
        'keep  *_offlinePrimaryVertices__*',
        'keep *_offlinePrimaryVerticesWithBS_*_*',
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*',
        'keep *_nuclearInteractionMaker_*_*',
        'keep *_generalV0Candidates_*_*',
        'keep *_inclusiveSecondaryVertices_*_*',
        'keep *_offlinePrimaryVertices4D__*',
        'keep *_offlinePrimaryVertices4DWithBS__*',
        'keep *_trackTimeValueMapProducer_*_*',
        'keep *_tofPID_*_*',
        'keep *_gedPhotonCore_*_*',
        'keep *_gedPhotons_*_*',
        'keep recoPhotons_mustachePhotons_*_*',
        'keep recoPhotonCores_mustachePhotonCore_*_*',
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep recoGsfElectronCores_gsfElectronCores_*_*',
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*',
        'keep recoGsfElectrons_gsfElectrons_*_*',
        'keep recoGsfElectrons_gedGsfElectrons_*_*',
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*',
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*',
        'keep floatedmValueMap_eidRobustLoose_*_*',
        'keep floatedmValueMap_eidRobustTight_*_*',
        'keep floatedmValueMap_eidRobustHighEnergy_*_*',
        'keep floatedmValueMap_eidLoose_*_*',
        'keep floatedmValueMap_eidTight_*_*',
        'keep *_egmGedGsfElectronPFIsolation_*_*',
        'keep recoPhotonCores_gedPhotonCore_*_*',
        'keep recoPhotons_gedPhotons_*_*',
        'keep *_particleBasedIsolation_*_*',
        'keep recoPhotonCores_photonCore_*_*',
        'keep recoPhotons_photons_*_*',
        'keep recoPhotonCores_ootPhotonCore_*_*',
        'keep recoPhotons_ootPhotons_*_*',
        'keep recoConversions_conversions_*_*',
        'drop recoConversions_conversions_uncleanedConversions_*',
        'keep recoConversions_mustacheConversions_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep recoConversions_allConversions_*_*',
        'keep recoConversions_allConversionsOldEG_*_*',
        'keep recoTracks_ckfOutInTracksFromConversions_*_*',
        'keep recoTracks_ckfInOutTracksFromConversions_*_*',
        'keep recoConversions_uncleanedOnlyAllConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep *_PhotonIDProd_*_*',
        'keep *_PhotonIDProdGED_*_*',
        'keep *_hfRecoEcalCandidate_*_*',
        'keep *_hfEMClusters_*_*',
        'keep *_gedGsfElectronCores_*_*',
        'keep *_gedGsfElectrons_*_*',
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*',
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*',
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*',
        'keep *_lowPtGsfToTrackLinks_*_*',
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_rekeyLowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_lowPtGsfElectronID_*_*',
        'keep *_ecalDrivenGsfElectronCores_*_*',
        'keep *_ecalDrivenGsfElectrons_*_*',
        'keep *_ecalDrivenGsfElectronCoresHGC_*_*',
        'keep *_ecalDrivenGsfElectronsHGC_*_*',
        'keep *_photonCoreHGC_*_*',
        'keep *_photonsHGC_*_*',
        'keep *_pixelTracks_*_*',
        'keep *_pixelVertices_*_*',
        'keep recoPFClusters_particleFlowClusterECAL_*_*',
        'keep recoPFClusters_particleFlowClusterHCAL_*_*',
        'keep recoPFClusters_particleFlowClusterHO_*_*',
        'keep recoPFClusters_particleFlowClusterHF_*_*',
        'keep recoPFClusters_particleFlowClusterPS_*_*',
        'keep recoPFBlocks_particleFlowBlock_*_*',
        'keep recoPFCandidates_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlowTmp_electrons_*',
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*',
        'keep *_pfElectronTranslator_*_*',
        'keep *_pfPhotonTranslator_*_*',
        'keep *_trackerDrivenElectronSeeds_preid_*',
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*',
        'keep recoCaloClusters_particleFlowEGamma_*_*',
        'keep recoSuperClusters_particleFlowEGamma_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoConversions_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlow_*_*',
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*',
        'keep *_particleFlow_electrons_*',
        'keep *_particleFlow_photons_*',
        'keep *_particleFlow_muons_*',
        'keep recoCaloClusters_pfElectronTranslator_*_*',
        'keep recoPreshowerClusters_pfElectronTranslator_*_*',
        'keep recoSuperClusters_pfElectronTranslator_*_*',
        'keep recoCaloClusters_pfPhotonTranslator_*_*',
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*',
        'keep recoSuperClusters_pfPhotonTranslator_*_*',
        'keep recoPhotons_pfPhotonTranslator_*_*',
        'keep recoPhotonCores_pfPhotonTranslator_*_*',
        'keep recoConversions_pfPhotonTranslator_*_*',
        'keep *_particleFlowPtrs_*_*',
        'keep *_particleFlowTmpPtrs_*_*',
        'keep *_chargedHadronPFTrackIsolation_*_*',
        'keep recoPFRecHits_particleFlowRecHitHGC_Cleaned_*',
        'keep recoSuperClusters_simPFProducer_*_*',
        'keep *_ecalBarrelClusterFastTimer_*_*',
        'keep *_particleFlowSuperClusterHGCal_*_*',
        'keep recoPFBlocks_simPFProducer_*_*',
        'keep *_offlineBeamSpot_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_l1L1GtObjectMap_*_*',
        'keep L1MuGMTReadoutCollection_gtDigis_*_*',
        'keep L1GctEmCand*_gctDigis_*_*',
        'keep L1GctJetCand*_gctDigis_*_*',
        'keep L1GctEtHad*_gctDigis_*_*',
        'keep L1GctEtMiss*_gctDigis_*_*',
        'keep L1GctEtTotal*_gctDigis_*_*',
        'keep L1GctHtMiss*_gctDigis_*_*',
        'keep L1GctJetCounts*_gctDigis_*_*',
        'keep L1GctHFRingEtSums*_gctDigis_*_*',
        'keep L1GctHFBitCounts*_gctDigis_*_*',
        'keep LumiDetails_lumiProducer_*_*',
        'keep LumiSummary_lumiProducer_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*',
        'drop *_hlt*_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep DcsStatuss_hltScalersRawToDigi_*_*',
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*',
        'keep L1TriggerScalerss_scalersRawToDigi_*_*',
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep BeamSpotOnlines_scalersRawToDigi_*_*',
        'keep DcsStatuss_scalersRawToDigi_*_*',
        'keep CTPPSRecord_onlineMetaDataDigis_*_*',
        'keep DCSRecord_onlineMetaDataDigis_*_*',
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*',
        'keep recoBeamSpot_onlineMetaDataDigis_*_*',
        'keep *_tcdsDigis_*_*',
        'keep *_logErrorHarvester_*_*',
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*',
        'keep TotemFEDInfos_totemRPRawToDigi_*_*',
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*',
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*',
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*',
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*',
        'keep TotemFEDInfos_totemT2Digis_*_*',
        'keep TotemT2DigiedmNewDetSetVector_totemT2Digis_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemT2Digis_*_*',
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*',
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_diamondSampicLocalTracks_*_*',
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*',
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*',
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*',
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*',
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep *_ticlTrackstersCLUE3DHigh_*_*',
        'keep *_ticlTrackstersMerge_*_*',
        'keep *_ticlTrackstersHFNoseTrkEM_*_*',
        'keep *_ticlTrackstersHFNoseEM_*_*',
        'keep *_ticlTrackstersHFNoseTrk_*_*',
        'keep *_ticlTrackstersHFNoseMIP_*_*',
        'keep *_ticlTrackstersHFNoseHAD_*_*',
        'keep *_ticlTrackstersHFNoseMerge_*_*',
        'keep *_pfTICL_*_*',
        'keep CaloParticles_mix_*_*',
        'keep SimClusters_mix_*_*',
        'keep *_layerClusterSimClusterAssociationProducer_*_*',
        'keep *_layerClusterCaloParticleAssociationProducer_*_*',
        'keep *_layerClusterSimTracksterAssociationProducer_*_*',
        'keep *_tracksterSimTracksterAssociationLinking_*_*',
        'keep *_tracksterSimTracksterAssociationPR_*_*',
        'keep *_tracksterSimTracksterAssociationLinkingPU_*_*',
        'keep *_tracksterSimTracksterAssociationPRPU_*_*',
        'keep *_tracksterSimTracksterAssociationLinkingbyCLUE3D_*_*',
        'keep *_tracksterSimTracksterAssociationPRbyCLUE3D_*_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'keep recoGenMETs_*_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*',
        'keep edmHepMCProduct_source_*_*',
        'keep SimTracks_g4SimHits_*_*',
        'keep SimVertexs_g4SimHits_*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackMCMatch_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*',
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*',
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*',
        'keep *_muonSimClassifier_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonME0Digis_*_*',
        'keep *_simHGCalUnsuppressedDigis_EE_*',
        'keep *_simHGCalUnsuppressedDigis_HEfront_*',
        'keep *_simHGCalUnsuppressedDigis_HEback_*',
        'keep *_mix_MergedCaloTruth_*',
        'keep *_mix_MergedMtdTruth_*',
        'keep *_mix_MergedMtdTruthLC_*',
        'keep *_mix_MergedMtdTruthST_*',
        'keep *_mix_FTLBarrel_*',
        'keep *_mix_FTLEndcap_*',
        'keep *_mix_InitialVertices_*',
        'keep *_mtdRecoClusterToSimLayerClusterAssociation_*_*',
        'keep *_mtdSimLayerClusterToTPAssociation_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*',
        'keep *_mtdRecHits_*_*',
        'keep *_mtdClusters_*_*',
        'keep recoTrack*_trackExtenderWithMTD_*_*',
        'keep TrackingRecHitsOwned_trackExtenderWithMTD_*_*',
        'keep *edmValueMap_trackExtenderWithMTD_*_*',
        'keep *_mtdTrackQualityMVA_*_*',
        'drop *_trackingtruthprod_*_*',
        'drop *_electrontruth_*_*',
        'keep *_mix_MergedTrackTruth_*',
        'keep CrossingFramePlaybackInfoNew_*_*_*',
        'keep PixelDigiSimLinkedmDetSetVector_simSiPixelDigis_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simSiStripDigis_*_*',
        'drop *_mix_simSiPixelDigis*_*',
        'drop *_mix_simSiStripDigis*_*',
        'keep *_allTrackMCMatch_*_*'
     ) ),
    splitLevel = cms.untracked.int32(0)
)

process.RECOEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring( (
        'drop *',
        'keep DetIds_siStripDigis_*_*',
        'keep DetIdedmEDCollection_siPixelDigis_*_*',
        'keep PixelFEDChanneledmNewDetSetVector_siPixelDigis_*_*',
        'keep *_siPixelClusters_*_*',
        'keep *_siStripClusters_*_*',
        'keep ClusterSummary_clusterSummaryProducer_*_*',
        'keep *_siPhase2Clusters_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_dt1DCosmicRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_dt4DSegments_*_*',
        'keep *_dt4DCosmicSegments_*_*',
        'keep *_cscSegments_*_*',
        'keep *_rpcRecHits_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_gemRecHits_*_*',
        'keep *_gemSegments_*_*',
        'keep *_me0RecHits_*_*',
        'keep *_me0Segments_*_*',
        'keep *_hbhereco_*_*',
        'keep *_hbheprereco_*_*',
        'keep *_hfprereco_*_*',
        'keep *_hfreco_*_*',
        'keep *_horeco_*_*',
        'keep HBHERecHitsSorted_hbherecoMB_*_*',
        'keep HORecHitsSorted_horecoMB_*_*',
        'keep HFRecHitsSorted_hfrecoMB_*_*',
        'keep ZDCDataFramesSorted_hcalDigis_*_*',
        'keep ZDCDataFramesSorted_castorDigis_*_*',
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*',
        'keep ZDCRecHitsSorted_zdcreco_*_*',
        'keep ZDCRecHitsSorted_zdcrecoRun3_*_*',
        'keep *_castorreco_*_*',
        'keep *_reducedHcalRecHits_*_*',
        'keep HcalUnpackerReport_castorDigis_*_*',
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*',
        'keep HcalUnpackerReport_hcalDigis_*_*',
        'keep *_HGCalRecHit_*_*',
        'keep recoCaloClusters_hgcalMergeLayerClusters_*_*',
        'keep *_hgcalMergeLayerClusters_timeLayerCluster_*',
        'keep *_hgcalMergeLayerClusters_InitialLayerClustersMask_*',
        'keep *_ecalPreshowerRecHit_*_*',
        'keep *_ecalRecHit_*_*',
        'keep *_ecalCompactTrigPrim_*_*',
        'keep *_ecalTPSkim_*_*',
        'keep EBSrFlagsSorted_ecalDigis__*',
        'keep EESrFlagsSorted_ecalDigis__*',
        'keep *_mix_EBTimeDigi_*',
        'keep *_mix_EETimeDigi_*',
        'keep *_ecalDetailedTimeRecHit_*_*',
        'keep *_hgcalMultiClusters_*_*',
        'keep *_iterHGCalMultiClusters_*_*',
        'keep *_hybridSuperClusters_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep *_multi5x5SuperClusters_*_*',
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep *_particleFlowSuperClusterECAL_*_*',
        'keep *_particleFlowSuperClusterOOTECAL_*_*',
        'drop recoClusterShapes_*_*_*',
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*',
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*',
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*',
        'keep *_selectDigi_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep recoCaloClusters_hybridSuperClusters_*_*',
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*',
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*',
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterHGCal__*',
        'keep recoCaloClusters_particleFlowSuperClusterHGCal__*',
        'keep *_particleFlowSuperClusterHGCal_*_*',
        'keep *_CkfElectronCandidates_*_*',
        'keep *_GsfGlobalElectronTest_*_*',
        'keep *_electronMergedSeeds_*_*',
        'keep recoGsfTrackExtras_electronGsfTracks_*_*',
        'keep recoTrackExtras_electronGsfTracks_*_*',
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*',
        'keep recoTracks_GsfGlobalElectronTest_*_*',
        'keep recoGsfTracks_electronGsfTracks_*_*',
        'keep recoTrackExtras_generalTracks_*_*',
        'keep TrackingRecHitsOwned_generalTracks_*_*',
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*',
        'keep uints_extraFromSeeds_*_*',
        'keep recoTrackExtras_beamhaloTracks_*_*',
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*',
        'keep recoTrackExtras_conversionStepTracks_*_*',
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*',
        'keep *_ctfPixelLess_*_*',
        'keep *_dedxTruncated40_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_conversionStepTracks_*_*',
        'keep recoTracks_beamhaloTracks_*_*',
        'keep recoTracks_ctfPixelLess_*_*',
        'keep *_dedxHarmonic2_*_*',
        'keep *_dedxPixelHarmonic2_*_*',
        'keep *_dedxHitInfo_*_*',
        'keep *_trackExtrapolator_*_*',
        'keep *_generalTracks_MVAValues_*',
        'keep *_generalTracks_MVAVals_*',
        'keep *_ak4CaloJets_*_*',
        'keep *_ak4PFJets_*_*',
        'keep *_ak4TrackJets_*_*',
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*',
        'keep *_towerMaker_*_*',
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*',
        'keep *_ak5CastorJets_*_*',
        'keep *_ak7CastorJets_*_*',
        'keep recoCaloJets_ak4CaloJets_*_*',
        'keep *_ak4CaloJets_rho_*',
        'keep *_ak4CaloJets_sigma_*',
        'keep *_ak4PFJetsCHS_*_*',
        'keep floatedmValueMap_puppi_*_*',
        'keep *_ak4PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppiSoftDrop_*_*',
        'keep recoPFJets_ak4PFJets_*_*',
        'keep *_ak4PFJets_rho_*',
        'keep *_ak4PFJets_sigma_*',
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*',
        'keep *_caloTowers_*_*',
        'keep *_CastorTowerReco_*_*',
        'keep *_ak4JetTracksAssociatorAtVertex_*_*',
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*',
        'keep *_ak4JetTracksAssociatorExplicit_*_*',
        'keep *_ak4JetExtender_*_*',
        'keep *_ak4JetID_*_*',
        'keep recoBasicJets_ak5CastorJets_*_*',
        'keep *_ak5CastorJets_rho_*',
        'keep *_ak5CastorJets_sigma_*',
        'keep *_ak5CastorJetID_*_*',
        'keep recoBasicJets_ak7CastorJets_*_*',
        'keep *_ak7CastorJets_rho_*',
        'keep *_ak7CastorJets_sigma_*',
        'keep *_ak7CastorJetID_*_*',
        'keep *_fixedGridRhoAll_*_*',
        'keep *_fixedGridRhoFastjetAll_*_*',
        'keep *_fixedGridRhoFastjetAllTmp_*_*',
        'keep *_fixedGridRhoFastjetCentral_*_*',
        'keep *_fixedGridRhoFastjetAllCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*',
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*',
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*',
        'keep recoHcalNoiseRBXs_hcalnoise_*_*',
        'keep recoEcalHaloData_EcalHaloData_*_*',
        'keep recoHcalHaloData_HcalHaloData_*_*',
        'keep recoCaloMETs_caloMet_*_*',
        'keep recoCaloMETs_caloMetBE_*_*',
        'keep recoCaloMETs_caloMetBEFO_*_*',
        'keep recoCaloMETs_caloMetM_*_*',
        'keep recoPFMETs_pfMet_*_*',
        'keep recoPFMETs_pfChMet_*_*',
        'keep floatedmValueMap_puppiNoLep_*_*',
        'keep recoPFMETs_pfMetPuppi_*_*',
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*',
        'keep HcalNoiseSummary_hcalnoise_*_*',
        'keep recoGlobalHaloData_GlobalHaloData_*_*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep *_MuonSeed_*_*',
        'keep *_ancientMuonSeed_*_*',
        'keep *_displacedMuonSeeds_*_*',
        'keep TrackingRecHitsOwned_globalMuons_*_*',
        'keep TrackingRecHitsOwned_tevMuons_*_*',
        'keep *_CosmicMuonSeed_*_*',
        'keep recoTrackExtras_cosmicMuons_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons_*_*',
        'keep recoTrackExtras_cosmicMuons1Leg_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*',
        'keep recoTracks_cosmicsVetoTracks_*_*',
        'keep recoMuons_muons_*_*',
        'keep booledmValueMap_muons_*_*',
        'keep doubleedmValueMap_muons_muPFMean*_*',
        'keep doubleedmValueMap_muons_muPFSum*_*',
        'keep *_muons_muonShowerInformation_*',
        'keep recoMuonTimeExtraedmValueMap_muons_*_*',
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*',
        'keep uintedmValueMap_muons_*_*',
        'keep *_particleFlow_muons_*',
        'keep recoMuons_displacedMuons_*_*',
        'keep booledmValueMap_displacedMuons_*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFMean*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFSum*_*',
        'keep recoMuonTimeExtraedmValueMap_displacedMuons_*_*',
        'keep uintedmValueMap_displacedMuons_*_*',
        'keep *_particleFlow_displacedMuons_*',
        'keep recoTracks_standAloneMuons_*_*',
        'keep recoTrackExtras_standAloneMuons_*_*',
        'keep TrackingRecHitsOwned_standAloneMuons_*_*',
        'keep recoTracks_globalMuons_*_*',
        'keep recoTrackExtras_globalMuons_*_*',
        'keep recoTracks_tevMuons_*_*',
        'keep recoTrackExtras_tevMuons_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_displacedTracks_*_*',
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*',
        'keep recoTracks_displacedGlobalMuons_*_*',
        'keep recoTrackExtras_displacedGlobalMuons_*_*',
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*',
        'keep recoTracks_cosmicMuons_*_*',
        'keep recoMuons_muonsFromCosmics_*_*',
        'keep recoTracks_cosmicMuons1Leg_*_*',
        'keep recoMuons_muonsFromCosmics1Leg_*_*',
        'keep recoTracks_refittedStandAloneMuons_*_*',
        'keep recoTrackExtras_refittedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTrackExtras_displacedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*',
        'keep *_muonReducedTrackExtras_*_*',
        'keep *_displacedMuonReducedTrackExtras_*_*',
        'keep *_muIsoDepositTk_*_*',
        'keep *_muIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muIsoDepositCalByAssociatorHits_*_*',
        'keep *_muIsoDepositJets_*_*',
        'keep *_muIsoDepositTkDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorTowersDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorHitsDisplaced_*_*',
        'keep *_muIsoDepositJetsDisplaced_*_*',
        'keep *_muGlobalIsoDepositCtfTk_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*',
        'keep *_muGlobalIsoDepositJets_*_*',
        'keep *_softPFMuonsTagInfos_*_*',
        'keep *_softPFElectronsTagInfos_*_*',
        'keep *_pfImpactParameterTagInfos_*_*',
        'keep *_pfSecondaryVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_pfGhostTrackVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*',
        'keep *_softPFElectronBJetTags_*_*',
        'keep *_softPFMuonBJetTags_*_*',
        'keep *_pfTrackCountingHighEffBJetTags_*_*',
        'keep *_pfJetProbabilityBJetTags_*_*',
        'keep *_pfJetBProbabilityBJetTags_*_*',
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*',
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*',
        'keep *_pfGhostTrackBJetTags_*_*',
        'keep *_pfCombinedMVAV2BJetTags_*_*',
        'keep *_inclusiveCandidateSecondaryVertices_*_*',
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*',
        'keep *_pfCombinedCvsLJetTags_*_*',
        'keep *_pfCombinedCvsBJetTags_*_*',
        'keep *_pfChargeBJetTags_*_*',
        'keep *_pfDeepCSVJetTags_*_*',
        'keep *_pfDeepCMVAJetTags_*_*',
        'keep *_pixelClusterTagInfos_*_*',
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*',
        'keep recoPFTaus_hpsPFTauProducer_*_*',
        'keep *_hpsPFTauBasicDiscriminators_*_*',
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*',
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*',
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*',
        'keep *_hpsPFTauTransverseImpactParameters_*_*',
        'keep  *_offlinePrimaryVertices__*',
        'keep *_offlinePrimaryVerticesWithBS_*_*',
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*',
        'keep *_nuclearInteractionMaker_*_*',
        'keep *_generalV0Candidates_*_*',
        'keep *_inclusiveSecondaryVertices_*_*',
        'keep *_offlinePrimaryVertices4D__*',
        'keep *_offlinePrimaryVertices4DWithBS__*',
        'keep *_trackTimeValueMapProducer_*_*',
        'keep *_tofPID_*_*',
        'keep *_gedPhotonCore_*_*',
        'keep *_gedPhotons_*_*',
        'keep recoPhotons_mustachePhotons_*_*',
        'keep recoPhotonCores_mustachePhotonCore_*_*',
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep recoGsfElectronCores_gsfElectronCores_*_*',
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*',
        'keep recoGsfElectrons_gsfElectrons_*_*',
        'keep recoGsfElectrons_gedGsfElectrons_*_*',
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*',
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*',
        'keep floatedmValueMap_eidRobustLoose_*_*',
        'keep floatedmValueMap_eidRobustTight_*_*',
        'keep floatedmValueMap_eidRobustHighEnergy_*_*',
        'keep floatedmValueMap_eidLoose_*_*',
        'keep floatedmValueMap_eidTight_*_*',
        'keep *_egmGedGsfElectronPFIsolation_*_*',
        'keep recoPhotonCores_gedPhotonCore_*_*',
        'keep recoPhotons_gedPhotons_*_*',
        'keep *_particleBasedIsolation_*_*',
        'keep recoPhotonCores_photonCore_*_*',
        'keep recoPhotons_photons_*_*',
        'keep recoPhotonCores_ootPhotonCore_*_*',
        'keep recoPhotons_ootPhotons_*_*',
        'keep recoConversions_conversions_*_*',
        'drop recoConversions_conversions_uncleanedConversions_*',
        'keep recoConversions_mustacheConversions_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep recoConversions_allConversions_*_*',
        'keep recoConversions_allConversionsOldEG_*_*',
        'keep recoTracks_ckfOutInTracksFromConversions_*_*',
        'keep recoTracks_ckfInOutTracksFromConversions_*_*',
        'keep recoConversions_uncleanedOnlyAllConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep *_PhotonIDProd_*_*',
        'keep *_PhotonIDProdGED_*_*',
        'keep *_hfRecoEcalCandidate_*_*',
        'keep *_hfEMClusters_*_*',
        'keep *_gedGsfElectronCores_*_*',
        'keep *_gedGsfElectrons_*_*',
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*',
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*',
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*',
        'keep *_lowPtGsfToTrackLinks_*_*',
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_rekeyLowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_lowPtGsfElectronID_*_*',
        'keep *_ecalDrivenGsfElectronCores_*_*',
        'keep *_ecalDrivenGsfElectrons_*_*',
        'keep *_ecalDrivenGsfElectronCoresHGC_*_*',
        'keep *_ecalDrivenGsfElectronsHGC_*_*',
        'keep *_photonCoreHGC_*_*',
        'keep *_photonsHGC_*_*',
        'keep *_pixelTracks_*_*',
        'keep *_pixelVertices_*_*',
        'keep recoPFClusters_particleFlowClusterECAL_*_*',
        'keep recoPFClusters_particleFlowClusterHCAL_*_*',
        'keep recoPFClusters_particleFlowClusterHO_*_*',
        'keep recoPFClusters_particleFlowClusterHF_*_*',
        'keep recoPFClusters_particleFlowClusterPS_*_*',
        'keep recoPFBlocks_particleFlowBlock_*_*',
        'keep recoPFCandidates_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlowTmp_electrons_*',
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*',
        'keep *_pfElectronTranslator_*_*',
        'keep *_pfPhotonTranslator_*_*',
        'keep *_trackerDrivenElectronSeeds_preid_*',
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*',
        'keep recoCaloClusters_particleFlowEGamma_*_*',
        'keep recoSuperClusters_particleFlowEGamma_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoConversions_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlow_*_*',
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*',
        'keep *_particleFlow_electrons_*',
        'keep *_particleFlow_photons_*',
        'keep *_particleFlow_muons_*',
        'keep recoCaloClusters_pfElectronTranslator_*_*',
        'keep recoPreshowerClusters_pfElectronTranslator_*_*',
        'keep recoSuperClusters_pfElectronTranslator_*_*',
        'keep recoCaloClusters_pfPhotonTranslator_*_*',
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*',
        'keep recoSuperClusters_pfPhotonTranslator_*_*',
        'keep recoPhotons_pfPhotonTranslator_*_*',
        'keep recoPhotonCores_pfPhotonTranslator_*_*',
        'keep recoConversions_pfPhotonTranslator_*_*',
        'keep *_particleFlowPtrs_*_*',
        'keep *_particleFlowTmpPtrs_*_*',
        'keep *_chargedHadronPFTrackIsolation_*_*',
        'keep recoPFRecHits_particleFlowRecHitHGC_Cleaned_*',
        'keep recoSuperClusters_simPFProducer_*_*',
        'keep *_ecalBarrelClusterFastTimer_*_*',
        'keep *_particleFlowSuperClusterHGCal_*_*',
        'keep recoPFBlocks_simPFProducer_*_*',
        'keep *_offlineBeamSpot_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_l1L1GtObjectMap_*_*',
        'keep L1MuGMTReadoutCollection_gtDigis_*_*',
        'keep L1GctEmCand*_gctDigis_*_*',
        'keep L1GctJetCand*_gctDigis_*_*',
        'keep L1GctEtHad*_gctDigis_*_*',
        'keep L1GctEtMiss*_gctDigis_*_*',
        'keep L1GctEtTotal*_gctDigis_*_*',
        'keep L1GctHtMiss*_gctDigis_*_*',
        'keep L1GctJetCounts*_gctDigis_*_*',
        'keep L1GctHFRingEtSums*_gctDigis_*_*',
        'keep L1GctHFBitCounts*_gctDigis_*_*',
        'keep LumiDetails_lumiProducer_*_*',
        'keep LumiSummary_lumiProducer_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*',
        'drop *_hlt*_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep DcsStatuss_hltScalersRawToDigi_*_*',
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*',
        'keep L1TriggerScalerss_scalersRawToDigi_*_*',
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep BeamSpotOnlines_scalersRawToDigi_*_*',
        'keep DcsStatuss_scalersRawToDigi_*_*',
        'keep CTPPSRecord_onlineMetaDataDigis_*_*',
        'keep DCSRecord_onlineMetaDataDigis_*_*',
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*',
        'keep recoBeamSpot_onlineMetaDataDigis_*_*',
        'keep *_tcdsDigis_*_*',
        'keep *_logErrorHarvester_*_*',
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*',
        'keep TotemFEDInfos_totemRPRawToDigi_*_*',
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*',
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*',
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*',
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*',
        'keep TotemFEDInfos_totemT2Digis_*_*',
        'keep TotemT2DigiedmNewDetSetVector_totemT2Digis_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemT2Digis_*_*',
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*',
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_diamondSampicLocalTracks_*_*',
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*',
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*',
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*',
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*',
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep *_ticlTrackstersCLUE3DHigh_*_*',
        'keep *_ticlTrackstersMerge_*_*',
        'keep *_ticlTrackstersHFNoseTrkEM_*_*',
        'keep *_ticlTrackstersHFNoseEM_*_*',
        'keep *_ticlTrackstersHFNoseTrk_*_*',
        'keep *_ticlTrackstersHFNoseMIP_*_*',
        'keep *_ticlTrackstersHFNoseHAD_*_*',
        'keep *_ticlTrackstersHFNoseMerge_*_*',
        'keep *_pfTICL_*_*',
        'keep CaloParticles_mix_*_*',
        'keep SimClusters_mix_*_*',
        'keep *_layerClusterSimClusterAssociationProducer_*_*',
        'keep *_layerClusterCaloParticleAssociationProducer_*_*',
        'keep *_layerClusterSimTracksterAssociationProducer_*_*',
        'keep *_tracksterSimTracksterAssociationLinking_*_*',
        'keep *_tracksterSimTracksterAssociationPR_*_*',
        'keep *_tracksterSimTracksterAssociationLinkingPU_*_*',
        'keep *_tracksterSimTracksterAssociationPRPU_*_*',
        'keep *_tracksterSimTracksterAssociationLinkingbyCLUE3D_*_*',
        'keep *_tracksterSimTracksterAssociationPRbyCLUE3D_*_*'
     ) ),
    splitLevel = cms.untracked.int32(0)
)

process.RECOSIMEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring( (
        'drop *',
        'drop *',
        'keep DetIds_siStripDigis_*_*',
        'keep DetIdedmEDCollection_siPixelDigis_*_*',
        'keep PixelFEDChanneledmNewDetSetVector_siPixelDigis_*_*',
        'keep *_siPixelClusters_*_*',
        'keep *_siStripClusters_*_*',
        'keep ClusterSummary_clusterSummaryProducer_*_*',
        'keep *_siPhase2Clusters_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_dt1DCosmicRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_dt4DSegments_*_*',
        'keep *_dt4DCosmicSegments_*_*',
        'keep *_cscSegments_*_*',
        'keep *_rpcRecHits_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_gemRecHits_*_*',
        'keep *_gemSegments_*_*',
        'keep *_me0RecHits_*_*',
        'keep *_me0Segments_*_*',
        'keep *_hbhereco_*_*',
        'keep *_hbheprereco_*_*',
        'keep *_hfprereco_*_*',
        'keep *_hfreco_*_*',
        'keep *_horeco_*_*',
        'keep HBHERecHitsSorted_hbherecoMB_*_*',
        'keep HORecHitsSorted_horecoMB_*_*',
        'keep HFRecHitsSorted_hfrecoMB_*_*',
        'keep ZDCDataFramesSorted_hcalDigis_*_*',
        'keep ZDCDataFramesSorted_castorDigis_*_*',
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*',
        'keep ZDCRecHitsSorted_zdcreco_*_*',
        'keep ZDCRecHitsSorted_zdcrecoRun3_*_*',
        'keep *_castorreco_*_*',
        'keep *_reducedHcalRecHits_*_*',
        'keep HcalUnpackerReport_castorDigis_*_*',
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*',
        'keep HcalUnpackerReport_hcalDigis_*_*',
        'keep *_HGCalRecHit_*_*',
        'keep recoCaloClusters_hgcalMergeLayerClusters_*_*',
        'keep *_hgcalMergeLayerClusters_timeLayerCluster_*',
        'keep *_hgcalMergeLayerClusters_InitialLayerClustersMask_*',
        'keep *_ecalPreshowerRecHit_*_*',
        'keep *_ecalRecHit_*_*',
        'keep *_ecalCompactTrigPrim_*_*',
        'keep *_ecalTPSkim_*_*',
        'keep EBSrFlagsSorted_ecalDigis__*',
        'keep EESrFlagsSorted_ecalDigis__*',
        'keep *_mix_EBTimeDigi_*',
        'keep *_mix_EETimeDigi_*',
        'keep *_ecalDetailedTimeRecHit_*_*',
        'keep *_hgcalMultiClusters_*_*',
        'keep *_iterHGCalMultiClusters_*_*',
        'keep *_hybridSuperClusters_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep *_multi5x5SuperClusters_*_*',
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep *_particleFlowSuperClusterECAL_*_*',
        'keep *_particleFlowSuperClusterOOTECAL_*_*',
        'drop recoClusterShapes_*_*_*',
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*',
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*',
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*',
        'keep *_selectDigi_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep recoCaloClusters_hybridSuperClusters_*_*',
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*',
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*',
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterHGCal__*',
        'keep recoCaloClusters_particleFlowSuperClusterHGCal__*',
        'keep *_particleFlowSuperClusterHGCal_*_*',
        'keep *_CkfElectronCandidates_*_*',
        'keep *_GsfGlobalElectronTest_*_*',
        'keep *_electronMergedSeeds_*_*',
        'keep recoGsfTrackExtras_electronGsfTracks_*_*',
        'keep recoTrackExtras_electronGsfTracks_*_*',
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*',
        'keep recoTracks_GsfGlobalElectronTest_*_*',
        'keep recoGsfTracks_electronGsfTracks_*_*',
        'keep recoTrackExtras_generalTracks_*_*',
        'keep TrackingRecHitsOwned_generalTracks_*_*',
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*',
        'keep uints_extraFromSeeds_*_*',
        'keep recoTrackExtras_beamhaloTracks_*_*',
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*',
        'keep recoTrackExtras_conversionStepTracks_*_*',
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*',
        'keep *_ctfPixelLess_*_*',
        'keep *_dedxTruncated40_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_conversionStepTracks_*_*',
        'keep recoTracks_beamhaloTracks_*_*',
        'keep recoTracks_ctfPixelLess_*_*',
        'keep *_dedxHarmonic2_*_*',
        'keep *_dedxPixelHarmonic2_*_*',
        'keep *_dedxHitInfo_*_*',
        'keep *_trackExtrapolator_*_*',
        'keep *_generalTracks_MVAValues_*',
        'keep *_generalTracks_MVAVals_*',
        'keep *_ak4CaloJets_*_*',
        'keep *_ak4PFJets_*_*',
        'keep *_ak4TrackJets_*_*',
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*',
        'keep *_towerMaker_*_*',
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*',
        'keep *_ak5CastorJets_*_*',
        'keep *_ak7CastorJets_*_*',
        'keep recoCaloJets_ak4CaloJets_*_*',
        'keep *_ak4CaloJets_rho_*',
        'keep *_ak4CaloJets_sigma_*',
        'keep *_ak4PFJetsCHS_*_*',
        'keep floatedmValueMap_puppi_*_*',
        'keep *_ak4PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppiSoftDrop_*_*',
        'keep recoPFJets_ak4PFJets_*_*',
        'keep *_ak4PFJets_rho_*',
        'keep *_ak4PFJets_sigma_*',
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*',
        'keep *_caloTowers_*_*',
        'keep *_CastorTowerReco_*_*',
        'keep *_ak4JetTracksAssociatorAtVertex_*_*',
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*',
        'keep *_ak4JetTracksAssociatorExplicit_*_*',
        'keep *_ak4JetExtender_*_*',
        'keep *_ak4JetID_*_*',
        'keep recoBasicJets_ak5CastorJets_*_*',
        'keep *_ak5CastorJets_rho_*',
        'keep *_ak5CastorJets_sigma_*',
        'keep *_ak5CastorJetID_*_*',
        'keep recoBasicJets_ak7CastorJets_*_*',
        'keep *_ak7CastorJets_rho_*',
        'keep *_ak7CastorJets_sigma_*',
        'keep *_ak7CastorJetID_*_*',
        'keep *_fixedGridRhoAll_*_*',
        'keep *_fixedGridRhoFastjetAll_*_*',
        'keep *_fixedGridRhoFastjetAllTmp_*_*',
        'keep *_fixedGridRhoFastjetCentral_*_*',
        'keep *_fixedGridRhoFastjetAllCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*',
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*',
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*',
        'keep recoHcalNoiseRBXs_hcalnoise_*_*',
        'keep recoEcalHaloData_EcalHaloData_*_*',
        'keep recoHcalHaloData_HcalHaloData_*_*',
        'keep recoCaloMETs_caloMet_*_*',
        'keep recoCaloMETs_caloMetBE_*_*',
        'keep recoCaloMETs_caloMetBEFO_*_*',
        'keep recoCaloMETs_caloMetM_*_*',
        'keep recoPFMETs_pfMet_*_*',
        'keep recoPFMETs_pfChMet_*_*',
        'keep floatedmValueMap_puppiNoLep_*_*',
        'keep recoPFMETs_pfMetPuppi_*_*',
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*',
        'keep HcalNoiseSummary_hcalnoise_*_*',
        'keep recoGlobalHaloData_GlobalHaloData_*_*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep *_MuonSeed_*_*',
        'keep *_ancientMuonSeed_*_*',
        'keep *_displacedMuonSeeds_*_*',
        'keep TrackingRecHitsOwned_globalMuons_*_*',
        'keep TrackingRecHitsOwned_tevMuons_*_*',
        'keep *_CosmicMuonSeed_*_*',
        'keep recoTrackExtras_cosmicMuons_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons_*_*',
        'keep recoTrackExtras_cosmicMuons1Leg_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*',
        'keep recoTracks_cosmicsVetoTracks_*_*',
        'keep recoMuons_muons_*_*',
        'keep booledmValueMap_muons_*_*',
        'keep doubleedmValueMap_muons_muPFMean*_*',
        'keep doubleedmValueMap_muons_muPFSum*_*',
        'keep *_muons_muonShowerInformation_*',
        'keep recoMuonTimeExtraedmValueMap_muons_*_*',
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*',
        'keep uintedmValueMap_muons_*_*',
        'keep *_particleFlow_muons_*',
        'keep recoMuons_displacedMuons_*_*',
        'keep booledmValueMap_displacedMuons_*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFMean*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFSum*_*',
        'keep recoMuonTimeExtraedmValueMap_displacedMuons_*_*',
        'keep uintedmValueMap_displacedMuons_*_*',
        'keep *_particleFlow_displacedMuons_*',
        'keep recoTracks_standAloneMuons_*_*',
        'keep recoTrackExtras_standAloneMuons_*_*',
        'keep TrackingRecHitsOwned_standAloneMuons_*_*',
        'keep recoTracks_globalMuons_*_*',
        'keep recoTrackExtras_globalMuons_*_*',
        'keep recoTracks_tevMuons_*_*',
        'keep recoTrackExtras_tevMuons_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_displacedTracks_*_*',
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*',
        'keep recoTracks_displacedGlobalMuons_*_*',
        'keep recoTrackExtras_displacedGlobalMuons_*_*',
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*',
        'keep recoTracks_cosmicMuons_*_*',
        'keep recoMuons_muonsFromCosmics_*_*',
        'keep recoTracks_cosmicMuons1Leg_*_*',
        'keep recoMuons_muonsFromCosmics1Leg_*_*',
        'keep recoTracks_refittedStandAloneMuons_*_*',
        'keep recoTrackExtras_refittedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTrackExtras_displacedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*',
        'keep *_muonReducedTrackExtras_*_*',
        'keep *_displacedMuonReducedTrackExtras_*_*',
        'keep *_muIsoDepositTk_*_*',
        'keep *_muIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muIsoDepositCalByAssociatorHits_*_*',
        'keep *_muIsoDepositJets_*_*',
        'keep *_muIsoDepositTkDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorTowersDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorHitsDisplaced_*_*',
        'keep *_muIsoDepositJetsDisplaced_*_*',
        'keep *_muGlobalIsoDepositCtfTk_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*',
        'keep *_muGlobalIsoDepositJets_*_*',
        'keep *_softPFMuonsTagInfos_*_*',
        'keep *_softPFElectronsTagInfos_*_*',
        'keep *_pfImpactParameterTagInfos_*_*',
        'keep *_pfSecondaryVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_pfGhostTrackVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*',
        'keep *_softPFElectronBJetTags_*_*',
        'keep *_softPFMuonBJetTags_*_*',
        'keep *_pfTrackCountingHighEffBJetTags_*_*',
        'keep *_pfJetProbabilityBJetTags_*_*',
        'keep *_pfJetBProbabilityBJetTags_*_*',
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*',
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*',
        'keep *_pfGhostTrackBJetTags_*_*',
        'keep *_pfCombinedMVAV2BJetTags_*_*',
        'keep *_inclusiveCandidateSecondaryVertices_*_*',
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*',
        'keep *_pfCombinedCvsLJetTags_*_*',
        'keep *_pfCombinedCvsBJetTags_*_*',
        'keep *_pfChargeBJetTags_*_*',
        'keep *_pfDeepCSVJetTags_*_*',
        'keep *_pfDeepCMVAJetTags_*_*',
        'keep *_pixelClusterTagInfos_*_*',
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*',
        'keep recoPFTaus_hpsPFTauProducer_*_*',
        'keep *_hpsPFTauBasicDiscriminators_*_*',
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*',
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*',
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*',
        'keep *_hpsPFTauTransverseImpactParameters_*_*',
        'keep  *_offlinePrimaryVertices__*',
        'keep *_offlinePrimaryVerticesWithBS_*_*',
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*',
        'keep *_nuclearInteractionMaker_*_*',
        'keep *_generalV0Candidates_*_*',
        'keep *_inclusiveSecondaryVertices_*_*',
        'keep *_offlinePrimaryVertices4D__*',
        'keep *_offlinePrimaryVertices4DWithBS__*',
        'keep *_trackTimeValueMapProducer_*_*',
        'keep *_tofPID_*_*',
        'keep *_gedPhotonCore_*_*',
        'keep *_gedPhotons_*_*',
        'keep recoPhotons_mustachePhotons_*_*',
        'keep recoPhotonCores_mustachePhotonCore_*_*',
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep recoGsfElectronCores_gsfElectronCores_*_*',
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*',
        'keep recoGsfElectrons_gsfElectrons_*_*',
        'keep recoGsfElectrons_gedGsfElectrons_*_*',
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*',
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*',
        'keep floatedmValueMap_eidRobustLoose_*_*',
        'keep floatedmValueMap_eidRobustTight_*_*',
        'keep floatedmValueMap_eidRobustHighEnergy_*_*',
        'keep floatedmValueMap_eidLoose_*_*',
        'keep floatedmValueMap_eidTight_*_*',
        'keep *_egmGedGsfElectronPFIsolation_*_*',
        'keep recoPhotonCores_gedPhotonCore_*_*',
        'keep recoPhotons_gedPhotons_*_*',
        'keep *_particleBasedIsolation_*_*',
        'keep recoPhotonCores_photonCore_*_*',
        'keep recoPhotons_photons_*_*',
        'keep recoPhotonCores_ootPhotonCore_*_*',
        'keep recoPhotons_ootPhotons_*_*',
        'keep recoConversions_conversions_*_*',
        'drop recoConversions_conversions_uncleanedConversions_*',
        'keep recoConversions_mustacheConversions_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep recoConversions_allConversions_*_*',
        'keep recoConversions_allConversionsOldEG_*_*',
        'keep recoTracks_ckfOutInTracksFromConversions_*_*',
        'keep recoTracks_ckfInOutTracksFromConversions_*_*',
        'keep recoConversions_uncleanedOnlyAllConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep *_PhotonIDProd_*_*',
        'keep *_PhotonIDProdGED_*_*',
        'keep *_hfRecoEcalCandidate_*_*',
        'keep *_hfEMClusters_*_*',
        'keep *_gedGsfElectronCores_*_*',
        'keep *_gedGsfElectrons_*_*',
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*',
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*',
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*',
        'keep *_lowPtGsfToTrackLinks_*_*',
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_rekeyLowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_lowPtGsfElectronID_*_*',
        'keep *_ecalDrivenGsfElectronCores_*_*',
        'keep *_ecalDrivenGsfElectrons_*_*',
        'keep *_ecalDrivenGsfElectronCoresHGC_*_*',
        'keep *_ecalDrivenGsfElectronsHGC_*_*',
        'keep *_photonCoreHGC_*_*',
        'keep *_photonsHGC_*_*',
        'keep *_pixelTracks_*_*',
        'keep *_pixelVertices_*_*',
        'keep recoPFClusters_particleFlowClusterECAL_*_*',
        'keep recoPFClusters_particleFlowClusterHCAL_*_*',
        'keep recoPFClusters_particleFlowClusterHO_*_*',
        'keep recoPFClusters_particleFlowClusterHF_*_*',
        'keep recoPFClusters_particleFlowClusterPS_*_*',
        'keep recoPFBlocks_particleFlowBlock_*_*',
        'keep recoPFCandidates_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlowTmp_electrons_*',
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*',
        'keep *_pfElectronTranslator_*_*',
        'keep *_pfPhotonTranslator_*_*',
        'keep *_trackerDrivenElectronSeeds_preid_*',
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*',
        'keep recoCaloClusters_particleFlowEGamma_*_*',
        'keep recoSuperClusters_particleFlowEGamma_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoConversions_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlow_*_*',
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*',
        'keep *_particleFlow_electrons_*',
        'keep *_particleFlow_photons_*',
        'keep *_particleFlow_muons_*',
        'keep recoCaloClusters_pfElectronTranslator_*_*',
        'keep recoPreshowerClusters_pfElectronTranslator_*_*',
        'keep recoSuperClusters_pfElectronTranslator_*_*',
        'keep recoCaloClusters_pfPhotonTranslator_*_*',
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*',
        'keep recoSuperClusters_pfPhotonTranslator_*_*',
        'keep recoPhotons_pfPhotonTranslator_*_*',
        'keep recoPhotonCores_pfPhotonTranslator_*_*',
        'keep recoConversions_pfPhotonTranslator_*_*',
        'keep *_particleFlowPtrs_*_*',
        'keep *_particleFlowTmpPtrs_*_*',
        'keep *_chargedHadronPFTrackIsolation_*_*',
        'keep recoPFRecHits_particleFlowRecHitHGC_Cleaned_*',
        'keep recoSuperClusters_simPFProducer_*_*',
        'keep *_ecalBarrelClusterFastTimer_*_*',
        'keep *_particleFlowSuperClusterHGCal_*_*',
        'keep recoPFBlocks_simPFProducer_*_*',
        'keep *_offlineBeamSpot_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_l1L1GtObjectMap_*_*',
        'keep L1MuGMTReadoutCollection_gtDigis_*_*',
        'keep L1GctEmCand*_gctDigis_*_*',
        'keep L1GctJetCand*_gctDigis_*_*',
        'keep L1GctEtHad*_gctDigis_*_*',
        'keep L1GctEtMiss*_gctDigis_*_*',
        'keep L1GctEtTotal*_gctDigis_*_*',
        'keep L1GctHtMiss*_gctDigis_*_*',
        'keep L1GctJetCounts*_gctDigis_*_*',
        'keep L1GctHFRingEtSums*_gctDigis_*_*',
        'keep L1GctHFBitCounts*_gctDigis_*_*',
        'keep LumiDetails_lumiProducer_*_*',
        'keep LumiSummary_lumiProducer_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*',
        'drop *_hlt*_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep DcsStatuss_hltScalersRawToDigi_*_*',
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*',
        'keep L1TriggerScalerss_scalersRawToDigi_*_*',
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep BeamSpotOnlines_scalersRawToDigi_*_*',
        'keep DcsStatuss_scalersRawToDigi_*_*',
        'keep CTPPSRecord_onlineMetaDataDigis_*_*',
        'keep DCSRecord_onlineMetaDataDigis_*_*',
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*',
        'keep recoBeamSpot_onlineMetaDataDigis_*_*',
        'keep *_tcdsDigis_*_*',
        'keep *_logErrorHarvester_*_*',
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*',
        'keep TotemFEDInfos_totemRPRawToDigi_*_*',
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*',
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*',
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*',
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*',
        'keep TotemFEDInfos_totemT2Digis_*_*',
        'keep TotemT2DigiedmNewDetSetVector_totemT2Digis_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemT2Digis_*_*',
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*',
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_diamondSampicLocalTracks_*_*',
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*',
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*',
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*',
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*',
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep *_ticlTrackstersCLUE3DHigh_*_*',
        'keep *_ticlTrackstersMerge_*_*',
        'keep *_ticlTrackstersHFNoseTrkEM_*_*',
        'keep *_ticlTrackstersHFNoseEM_*_*',
        'keep *_ticlTrackstersHFNoseTrk_*_*',
        'keep *_ticlTrackstersHFNoseMIP_*_*',
        'keep *_ticlTrackstersHFNoseHAD_*_*',
        'keep *_ticlTrackstersHFNoseMerge_*_*',
        'keep *_pfTICL_*_*',
        'keep CaloParticles_mix_*_*',
        'keep SimClusters_mix_*_*',
        'keep *_layerClusterSimClusterAssociationProducer_*_*',
        'keep *_layerClusterCaloParticleAssociationProducer_*_*',
        'keep *_layerClusterSimTracksterAssociationProducer_*_*',
        'keep *_tracksterSimTracksterAssociationLinking_*_*',
        'keep *_tracksterSimTracksterAssociationPR_*_*',
        'keep *_tracksterSimTracksterAssociationLinkingPU_*_*',
        'keep *_tracksterSimTracksterAssociationPRPU_*_*',
        'keep *_tracksterSimTracksterAssociationLinkingbyCLUE3D_*_*',
        'keep *_tracksterSimTracksterAssociationPRbyCLUE3D_*_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'keep recoGenMETs_*_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*',
        'keep edmHepMCProduct_source_*_*',
        'keep SimTracks_g4SimHits_*_*',
        'keep SimVertexs_g4SimHits_*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackMCMatch_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*',
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*',
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*',
        'keep *_muonSimClassifier_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonME0Digis_*_*',
        'keep *_simHGCalUnsuppressedDigis_EE_*',
        'keep *_simHGCalUnsuppressedDigis_HEfront_*',
        'keep *_simHGCalUnsuppressedDigis_HEback_*',
        'keep *_mix_MergedCaloTruth_*',
        'keep *_mix_MergedMtdTruth_*',
        'keep *_mix_MergedMtdTruthLC_*',
        'keep *_mix_MergedMtdTruthST_*',
        'keep *_mix_FTLBarrel_*',
        'keep *_mix_FTLEndcap_*',
        'keep *_mix_InitialVertices_*',
        'keep *_mtdRecoClusterToSimLayerClusterAssociation_*_*',
        'keep *_mtdSimLayerClusterToTPAssociation_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*',
        'keep *_mtdRecHits_*_*',
        'keep *_mtdClusters_*_*',
        'keep recoTrack*_trackExtenderWithMTD_*_*',
        'keep TrackingRecHitsOwned_trackExtenderWithMTD_*_*',
        'keep *edmValueMap_trackExtenderWithMTD_*_*',
        'keep *_mtdTrackQualityMVA_*_*'
     ) ),
    splitLevel = cms.untracked.int32(0)
)

process.REDIGIEventContent = cms.PSet(
    inputCommands = cms.untracked.vstring(
        'drop *',
        'keep *_g4SimHits_*_*',
        'keep edmHepMCProduct_source_*_*',
        'keep *_randomEngineStateProducer_*_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'drop *_randomEngineStateProducer_*_*'
    )
)

process.REGENEventContent = cms.PSet(
    inputCommands = cms.untracked.vstring(
        'keep *',
        'drop *_genParticles_*_*',
        'drop *_genParticlesForJets_*_*',
        'drop *_kt4GenJets_*_*',
        'drop *_kt6GenJets_*_*',
        'drop *_iterativeCone5GenJets_*_*',
        'drop *_ak4GenJets_*_*',
        'drop *_ak7GenJets_*_*',
        'drop *_ak8GenJets_*_*',
        'drop *_ak4GenJetsNoNu_*_*',
        'drop *_ak8GenJetsNoNu_*_*',
        'drop *_genCandidatesForMET_*_*',
        'drop *_genParticlesForMETAllVisible_*_*',
        'drop *_genMetCalo_*_*',
        'drop *_genMetCaloAndNonPrompt_*_*',
        'drop *_genMetTrue_*_*',
        'drop *_genMetIC5GenJs_*_*'
    )
)

process.REPACKRAWEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *',
        'drop FEDRawDataCollection_*_*_*',
        'keep FEDRawDataCollection_rawDataRepacker_*_*',
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*',
        'keep FEDRawDataCollection_rawDataReducedFormat_*_*',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'drop FEDRawDataCollection_source_*_*',
        'drop FEDRawDataCollection_rawDataCollector_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.REPACKRAWSIMEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *',
        'drop FEDRawDataCollection_*_*_*',
        'keep FEDRawDataCollection_rawDataRepacker_*_*',
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*',
        'keep FEDRawDataCollection_rawDataReducedFormat_*_*',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep *_g4SimHits_*_*',
        'keep edmHepMCProduct_source_*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackingParticles_*_*',
        'keep *_prunedDigiSimLinks_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*',
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*',
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*',
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*',
        'keep *_simMuonCSCDigis_*_*',
        'keep *_simMuonRPCDigis_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonME0Digis_*_*',
        'keep EBSrFlagsSorted_simEcalDigis_*_*',
        'keep EESrFlagsSorted_simEcalDigis_*_*',
        'keep *_simHcalUnsuppressedDigis_*_*',
        'keep *_mix_EETimeDigi_*',
        'keep *_mix_EBTimeDigi_*',
        'keep *_simEcalUnsuppressedDigis_*_*',
        'keep *_simHGCalUnsuppressedDigis_EE_*',
        'keep *_simHGCalUnsuppressedDigis_HEfront_*',
        'keep *_simHGCalUnsuppressedDigis_HEback_*',
        'keep *_mix_MergedCaloTruth_*',
        'keep *_mix_MergedMtdTruth_*',
        'keep *_mix_MergedMtdTruthLC_*',
        'keep *_mix_MergedMtdTruthST_*',
        'keep *_mix_FTLBarrel_*',
        'keep *_mix_FTLEndcap_*',
        'keep *_mix_InitialVertices_*',
        'keep *_mtdRecoClusterToSimLayerClusterAssociation_*_*',
        'keep *_mtdSimLayerClusterToTPAssociation_*_*',
        'keep CrossingFramePlaybackInfoNew_*_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int6stdbitsetstdpairs_*_AffectedAPVList_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*',
        'keep *_mix_MergedTrackTruth_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'keep recoGenJets_ak*_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*',
        'keep recoGenMETs_*_*_*',
        'keep FEDRawDataCollection_source_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep *_MEtoEDMConverter_*_*',
        'keep *_randomEngineStateProducer_*_*',
        'keep *_logErrorHarvester_*_*',
        'drop FEDRawDataCollection_source_*_*',
        'drop FEDRawDataCollection_rawDataCollector_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.RESIMEventContent = cms.PSet(
    inputCommands = cms.untracked.vstring(
        'drop *',
        'keep *_randomEngineStateProducer_*_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*'
    )
)

process.RU_ME0 = cms.PSet(
    allowWideSegments = cms.bool(True),
    doCollisions = cms.bool(True),
    maxChi2Additional = cms.double(100.0),
    maxChi2GoodSeg = cms.double(50),
    maxChi2Prune = cms.double(50),
    maxETASeeds = cms.double(0.1),
    maxPhiAdditional = cms.double(0.001096605744),
    maxPhiSeeds = cms.double(0.001096605744),
    maxTOFDiff = cms.double(25),
    minNumberOfHits = cms.uint32(4),
    requireCentralBX = cms.bool(True)
)

process.RecoBTagAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_softPFElectronBJetTags_*_*',
        'keep *_softPFMuonBJetTags_*_*',
        'keep *_pfTrackCountingHighEffBJetTags_*_*',
        'keep *_pfJetProbabilityBJetTags_*_*',
        'keep *_pfJetBProbabilityBJetTags_*_*',
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*',
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*',
        'keep *_pfGhostTrackBJetTags_*_*',
        'keep *_pfCombinedMVAV2BJetTags_*_*',
        'keep *_inclusiveCandidateSecondaryVertices_*_*',
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*',
        'keep *_pfCombinedCvsLJetTags_*_*',
        'keep *_pfCombinedCvsBJetTags_*_*',
        'keep *_pfChargeBJetTags_*_*',
        'keep *_pfDeepCSVJetTags_*_*',
        'keep *_pfDeepCMVAJetTags_*_*',
        'keep *_pixelClusterTagInfos_*_*'
    )
)

process.RecoBTagFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_softPFMuonsTagInfos_*_*',
        'keep *_softPFElectronsTagInfos_*_*',
        'keep *_pfImpactParameterTagInfos_*_*',
        'keep *_pfSecondaryVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_pfGhostTrackVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*',
        'keep *_softPFElectronBJetTags_*_*',
        'keep *_softPFMuonBJetTags_*_*',
        'keep *_pfTrackCountingHighEffBJetTags_*_*',
        'keep *_pfJetProbabilityBJetTags_*_*',
        'keep *_pfJetBProbabilityBJetTags_*_*',
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*',
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*',
        'keep *_pfGhostTrackBJetTags_*_*',
        'keep *_pfCombinedMVAV2BJetTags_*_*',
        'keep *_inclusiveCandidateSecondaryVertices_*_*',
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*',
        'keep *_pfCombinedCvsLJetTags_*_*',
        'keep *_pfCombinedCvsBJetTags_*_*',
        'keep *_pfChargeBJetTags_*_*',
        'keep *_pfDeepCSVJetTags_*_*',
        'keep *_pfDeepCMVAJetTags_*_*',
        'keep *_pixelClusterTagInfos_*_*'
    )
)

process.RecoBTagRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_softPFMuonsTagInfos_*_*',
        'keep *_softPFElectronsTagInfos_*_*',
        'keep *_pfImpactParameterTagInfos_*_*',
        'keep *_pfSecondaryVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_pfGhostTrackVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*',
        'keep *_softPFElectronBJetTags_*_*',
        'keep *_softPFMuonBJetTags_*_*',
        'keep *_pfTrackCountingHighEffBJetTags_*_*',
        'keep *_pfJetProbabilityBJetTags_*_*',
        'keep *_pfJetBProbabilityBJetTags_*_*',
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*',
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*',
        'keep *_pfGhostTrackBJetTags_*_*',
        'keep *_pfCombinedMVAV2BJetTags_*_*',
        'keep *_inclusiveCandidateSecondaryVertices_*_*',
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*',
        'keep *_pfCombinedCvsLJetTags_*_*',
        'keep *_pfCombinedCvsBJetTags_*_*',
        'keep *_pfChargeBJetTags_*_*',
        'keep *_pfDeepCSVJetTags_*_*',
        'keep *_pfDeepCMVAJetTags_*_*',
        'keep *_pixelClusterTagInfos_*_*'
    )
)

process.RecoBTauAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.RecoBTauFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.RecoBTauRECO = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.RecoCTPPSAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*',
        'keep TotemFEDInfos_totemRPRawToDigi_*_*',
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*',
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*',
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*',
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*',
        'keep TotemFEDInfos_totemT2Digis_*_*',
        'keep TotemT2DigiedmNewDetSetVector_totemT2Digis_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemT2Digis_*_*',
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*',
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_diamondSampicLocalTracks_*_*',
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*',
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*',
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*',
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*',
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*'
    )
)

process.RecoCTPPSFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*',
        'keep TotemFEDInfos_totemRPRawToDigi_*_*',
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*',
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*',
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*',
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*',
        'keep TotemFEDInfos_totemT2Digis_*_*',
        'keep TotemT2DigiedmNewDetSetVector_totemT2Digis_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemT2Digis_*_*',
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*',
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_diamondSampicLocalTracks_*_*',
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*',
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*',
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*',
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*',
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*'
    )
)

process.RecoCTPPSRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*',
        'keep TotemFEDInfos_totemRPRawToDigi_*_*',
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*',
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*',
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*',
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*',
        'keep TotemFEDInfos_totemT2Digis_*_*',
        'keep TotemT2DigiedmNewDetSetVector_totemT2Digis_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemT2Digis_*_*',
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*',
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_diamondSampicLocalTracks_*_*',
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*',
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*',
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*',
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*',
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*'
    )
)

process.RecoEcalAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_selectDigi_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep recoCaloClusters_hybridSuperClusters_*_*',
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*',
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*',
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterHGCal__*',
        'keep recoCaloClusters_particleFlowSuperClusterHGCal__*'
    )
)

process.RecoEcalFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_reducedEcalRecHitsEB_*_*',
        'keep *_reducedEcalRecHitsEE_*_*',
        'keep *_reducedEcalRecHitsES_*_*',
        'keep *_interestingEcalDetId*_*_*',
        'keep *_ecalWeightUncalibRecHit_*_*',
        'keep *_ecalPreshowerRecHit_*_*',
        'keep *_correctedHybridSuperClusters_*_*',
        'keep *_multi5x5*_*_*',
        'keep *_hybridSuperClusters_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep *_multi5x5SuperClusters_*_*',
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep *_particleFlowSuperClusterECAL_*_*',
        'keep *_particleFlowSuperClusterOOTECAL_*_*',
        'drop recoClusterShapes_*_*_*',
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*',
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*',
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*',
        'keep *_selectDigi_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep recoCaloClusters_hybridSuperClusters_*_*',
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*',
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*',
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterHGCal__*',
        'keep recoCaloClusters_particleFlowSuperClusterHGCal__*',
        'keep *_particleFlowSuperClusterHGCal_*_*'
    )
)

process.RecoEcalRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_hybridSuperClusters_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep *_multi5x5SuperClusters_*_*',
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep *_particleFlowSuperClusterECAL_*_*',
        'keep *_particleFlowSuperClusterOOTECAL_*_*',
        'drop recoClusterShapes_*_*_*',
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*',
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*',
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*',
        'keep *_selectDigi_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep recoCaloClusters_hybridSuperClusters_*_*',
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*',
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*',
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterHGCal__*',
        'keep recoCaloClusters_particleFlowSuperClusterHGCal__*',
        'keep *_particleFlowSuperClusterHGCal_*_*'
    )
)

process.RecoEgammaAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoGsfElectronCores_gsfElectronCores_*_*',
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*',
        'keep recoGsfElectrons_gsfElectrons_*_*',
        'keep recoGsfElectrons_gedGsfElectrons_*_*',
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*',
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*',
        'keep floatedmValueMap_eidRobustLoose_*_*',
        'keep floatedmValueMap_eidRobustTight_*_*',
        'keep floatedmValueMap_eidRobustHighEnergy_*_*',
        'keep floatedmValueMap_eidLoose_*_*',
        'keep floatedmValueMap_eidTight_*_*',
        'keep *_egmGedGsfElectronPFIsolation_*_*',
        'keep recoPhotonCores_gedPhotonCore_*_*',
        'keep recoPhotons_gedPhotons_*_*',
        'keep *_particleBasedIsolation_*_*',
        'keep recoPhotonCores_photonCore_*_*',
        'keep recoPhotons_photons_*_*',
        'keep recoPhotonCores_ootPhotonCore_*_*',
        'keep recoPhotons_ootPhotons_*_*',
        'keep recoConversions_conversions_*_*',
        'drop recoConversions_conversions_uncleanedConversions_*',
        'keep recoConversions_mustacheConversions_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep recoConversions_allConversions_*_*',
        'keep recoConversions_allConversionsOldEG_*_*',
        'keep recoTracks_ckfOutInTracksFromConversions_*_*',
        'keep recoTracks_ckfInOutTracksFromConversions_*_*',
        'keep recoConversions_uncleanedOnlyAllConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep *_PhotonIDProd_*_*',
        'keep *_PhotonIDProdGED_*_*',
        'keep *_hfRecoEcalCandidate_*_*',
        'keep *_hfEMClusters_*_*',
        'keep *_gedGsfElectronCores_*_*',
        'keep *_gedGsfElectrons_*_*',
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*',
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*',
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*',
        'keep *_lowPtGsfToTrackLinks_*_*',
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_rekeyLowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_lowPtGsfElectronID_*_*',
        'keep *_ecalDrivenGsfElectronCores_*_*',
        'keep *_ecalDrivenGsfElectrons_*_*',
        'keep *_ecalDrivenGsfElectronCoresHGC_*_*',
        'keep *_ecalDrivenGsfElectronsHGC_*_*',
        'keep *_photonCoreHGC_*_*',
        'keep *_photonsHGC_*_*'
    )
)

process.RecoEgammaFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_gsfElectronCores_*_*',
        'keep *_gsfElectrons_*_*',
        'keep *_uncleanedOnlyGsfElectronCores_*_*',
        'keep *_uncleanedOnlyGsfElectrons_*_*',
        'keep *_eidRobustLoose_*_*',
        'keep *_eidRobustTight_*_*',
        'keep *_eidRobustHighEnergy_*_*',
        'keep *_eidLoose_*_*',
        'keep *_eidTight_*_*',
        'keep *_egmGedGsfElectronPFPileUpIsolation_*_*',
        'keep *_egmGedGsfElectronPFNoPileUpIsolation_*_*',
        'keep *_egmGsfElectronIDs_*_*',
        'keep *_egmPhotonIDs_*_*',
        'keep *_conversions_*_*',
        'drop *_conversions_uncleanedConversions_*',
        'keep *_mustacheConversions_*_*',
        'keep *_gedPhotonCore_*_*',
        'keep *_gedPhotons_*_*',
        'keep *_photonCore_*_*',
        'keep *_photons_*_*',
        'keep *_mustachePhotonCore_*_*',
        'keep *_mustachePhotons_*_*',
        'keep *_ootPhotonCore_*_*',
        'keep *_ootPhotons_*_*',
        'keep *_allConversions_*_*',
        'keep *_allConversionsOldEG_*_*',
        'keep *_ckfOutInTracksFromConversions_*_*',
        'keep *_ckfInOutTracksFromConversions_*_*',
        'keep *_uncleanedOnlyAllConversions_*_*',
        'keep *_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep *_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep *_gedPhotonCore_*_*',
        'keep *_gedPhotons_*_*',
        'keep recoPhotons_mustachePhotons_*_*',
        'keep recoPhotonCores_mustachePhotonCore_*_*',
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep recoGsfElectronCores_gsfElectronCores_*_*',
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*',
        'keep recoGsfElectrons_gsfElectrons_*_*',
        'keep recoGsfElectrons_gedGsfElectrons_*_*',
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*',
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*',
        'keep floatedmValueMap_eidRobustLoose_*_*',
        'keep floatedmValueMap_eidRobustTight_*_*',
        'keep floatedmValueMap_eidRobustHighEnergy_*_*',
        'keep floatedmValueMap_eidLoose_*_*',
        'keep floatedmValueMap_eidTight_*_*',
        'keep *_egmGedGsfElectronPFIsolation_*_*',
        'keep recoPhotonCores_gedPhotonCore_*_*',
        'keep recoPhotons_gedPhotons_*_*',
        'keep *_particleBasedIsolation_*_*',
        'keep recoPhotonCores_photonCore_*_*',
        'keep recoPhotons_photons_*_*',
        'keep recoPhotonCores_ootPhotonCore_*_*',
        'keep recoPhotons_ootPhotons_*_*',
        'keep recoConversions_conversions_*_*',
        'drop recoConversions_conversions_uncleanedConversions_*',
        'keep recoConversions_mustacheConversions_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep recoConversions_allConversions_*_*',
        'keep recoConversions_allConversionsOldEG_*_*',
        'keep recoTracks_ckfOutInTracksFromConversions_*_*',
        'keep recoTracks_ckfInOutTracksFromConversions_*_*',
        'keep recoConversions_uncleanedOnlyAllConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep *_PhotonIDProd_*_*',
        'keep *_PhotonIDProdGED_*_*',
        'keep *_hfRecoEcalCandidate_*_*',
        'keep *_hfEMClusters_*_*',
        'keep *_gedGsfElectronCores_*_*',
        'keep *_gedGsfElectrons_*_*',
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*',
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*',
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*',
        'keep *_lowPtGsfToTrackLinks_*_*',
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_rekeyLowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_lowPtGsfElectronID_*_*',
        'keep *_ecalDrivenGsfElectronCores_*_*',
        'keep *_ecalDrivenGsfElectrons_*_*',
        'keep *_ecalDrivenGsfElectronCoresHGC_*_*',
        'keep *_ecalDrivenGsfElectronsHGC_*_*',
        'keep *_photonCoreHGC_*_*',
        'keep *_photonsHGC_*_*'
    )
)

process.RecoEgammaRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_gedPhotonCore_*_*',
        'keep *_gedPhotons_*_*',
        'keep recoPhotons_mustachePhotons_*_*',
        'keep recoPhotonCores_mustachePhotonCore_*_*',
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep recoGsfElectronCores_gsfElectronCores_*_*',
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*',
        'keep recoGsfElectrons_gsfElectrons_*_*',
        'keep recoGsfElectrons_gedGsfElectrons_*_*',
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*',
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*',
        'keep floatedmValueMap_eidRobustLoose_*_*',
        'keep floatedmValueMap_eidRobustTight_*_*',
        'keep floatedmValueMap_eidRobustHighEnergy_*_*',
        'keep floatedmValueMap_eidLoose_*_*',
        'keep floatedmValueMap_eidTight_*_*',
        'keep *_egmGedGsfElectronPFIsolation_*_*',
        'keep recoPhotonCores_gedPhotonCore_*_*',
        'keep recoPhotons_gedPhotons_*_*',
        'keep *_particleBasedIsolation_*_*',
        'keep recoPhotonCores_photonCore_*_*',
        'keep recoPhotons_photons_*_*',
        'keep recoPhotonCores_ootPhotonCore_*_*',
        'keep recoPhotons_ootPhotons_*_*',
        'keep recoConversions_conversions_*_*',
        'drop recoConversions_conversions_uncleanedConversions_*',
        'keep recoConversions_mustacheConversions_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep recoConversions_allConversions_*_*',
        'keep recoConversions_allConversionsOldEG_*_*',
        'keep recoTracks_ckfOutInTracksFromConversions_*_*',
        'keep recoTracks_ckfInOutTracksFromConversions_*_*',
        'keep recoConversions_uncleanedOnlyAllConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep *_PhotonIDProd_*_*',
        'keep *_PhotonIDProdGED_*_*',
        'keep *_hfRecoEcalCandidate_*_*',
        'keep *_hfEMClusters_*_*',
        'keep *_gedGsfElectronCores_*_*',
        'keep *_gedGsfElectrons_*_*',
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*',
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*',
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*',
        'keep *_lowPtGsfToTrackLinks_*_*',
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_rekeyLowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_lowPtGsfElectronID_*_*',
        'keep *_ecalDrivenGsfElectronCores_*_*',
        'keep *_ecalDrivenGsfElectrons_*_*',
        'keep *_ecalDrivenGsfElectronCoresHGC_*_*',
        'keep *_ecalDrivenGsfElectronsHGC_*_*',
        'keep *_photonCoreHGC_*_*',
        'keep *_photonsHGC_*_*'
    )
)

process.RecoGenJetsAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*'
    )
)

process.RecoGenJetsFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoGenJets_ak*_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*'
    )
)

process.RecoGenJetsRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*'
    )
)

process.RecoGenMETAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoGenMETs_*_*_*')
)

process.RecoGenMETFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoGenMETs_*_*_*')
)

process.RecoGenMETRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoGenMETs_*_*_*')
)

process.RecoHcalNoiseAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep HcalNoiseSummary_hcalnoise_*_*')
)

process.RecoHcalNoiseFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoHcalNoiseRBXs_hcalnoise_*_*',
        'keep HcalNoiseSummary_hcalnoise_*_*'
    )
)

process.RecoHcalNoiseRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoHcalNoiseRBXs_hcalnoise_*_*',
        'keep HcalNoiseSummary_hcalnoise_*_*'
    )
)

process.RecoJetsAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoCaloJets_ak4CaloJets_*_*',
        'keep *_ak4CaloJets_rho_*',
        'keep *_ak4CaloJets_sigma_*',
        'keep *_ak4PFJetsCHS_*_*',
        'keep floatedmValueMap_puppi_*_*',
        'keep *_ak4PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppiSoftDrop_*_*',
        'keep recoPFJets_ak4PFJets_*_*',
        'keep *_ak4PFJets_rho_*',
        'keep *_ak4PFJets_sigma_*',
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*',
        'keep *_caloTowers_*_*',
        'keep *_CastorTowerReco_*_*',
        'keep *_ak4JetTracksAssociatorAtVertex_*_*',
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*',
        'keep *_ak4JetTracksAssociatorExplicit_*_*',
        'keep *_ak4JetExtender_*_*',
        'keep *_ak4JetID_*_*',
        'keep recoBasicJets_ak5CastorJets_*_*',
        'keep *_ak5CastorJets_rho_*',
        'keep *_ak5CastorJets_sigma_*',
        'keep *_ak5CastorJetID_*_*',
        'keep recoBasicJets_ak7CastorJets_*_*',
        'keep *_ak7CastorJets_rho_*',
        'keep *_ak7CastorJets_sigma_*',
        'keep *_ak7CastorJetID_*_*',
        'keep *_fixedGridRhoAll_*_*',
        'keep *_fixedGridRhoFastjetAll_*_*',
        'keep *_fixedGridRhoFastjetAllTmp_*_*',
        'keep *_fixedGridRhoFastjetCentral_*_*',
        'keep *_fixedGridRhoFastjetAllCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*',
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*',
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*'
    )
)

process.RecoJetsFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoCaloJets_*_*_*',
        'keep recoPFJets_*_*_*',
        'keep recoTrackJets_*_*_*',
        'keep recoJPTJets_*_*_*',
        'keep recoBasicJets_*_*_*',
        'keep *_kt4JetTracksAssociatorAtVertex_*_*',
        'keep *_kt4JetTracksAssociatorAtCaloFace_*_*',
        'keep *_kt4JetExtender_*_*',
        'keep *_ak7JetTracksAssociatorAtVertex*_*_*',
        'keep *_ak7JetTracksAssociatorAtCaloFace*_*_*',
        'keep *_ak7JetExtender_*_*',
        'keep *_kt4CaloJets_*_*',
        'keep *_kt6CaloJets_*_*',
        'keep *_ak5CaloJets_*_*',
        'keep *_ak7CaloJets_*_*',
        'keep *_kt4PFJets_*_*',
        'keep *_kt6PFJets_*_*',
        'keep *_ak5PFJets_*_*',
        'keep *_ak7PFJets_*_*',
        'keep *_kt4TrackJets_*_*',
        'keep *_ca*Mass_*_*',
        'keep *_ak*Mass_*_*',
        'keep *_ak4CaloJets_*_*',
        'keep *_ak4PFJets_*_*',
        'keep *_ak4TrackJets_*_*',
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*',
        'keep *_towerMaker_*_*',
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*',
        'keep *_ak5CastorJets_*_*',
        'keep *_ak7CastorJets_*_*',
        'keep recoCaloJets_ak4CaloJets_*_*',
        'keep *_ak4CaloJets_rho_*',
        'keep *_ak4CaloJets_sigma_*',
        'keep *_ak4PFJetsCHS_*_*',
        'keep floatedmValueMap_puppi_*_*',
        'keep *_ak4PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppiSoftDrop_*_*',
        'keep recoPFJets_ak4PFJets_*_*',
        'keep *_ak4PFJets_rho_*',
        'keep *_ak4PFJets_sigma_*',
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*',
        'keep *_caloTowers_*_*',
        'keep *_CastorTowerReco_*_*',
        'keep *_ak4JetTracksAssociatorAtVertex_*_*',
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*',
        'keep *_ak4JetTracksAssociatorExplicit_*_*',
        'keep *_ak4JetExtender_*_*',
        'keep *_ak4JetID_*_*',
        'keep recoBasicJets_ak5CastorJets_*_*',
        'keep *_ak5CastorJets_rho_*',
        'keep *_ak5CastorJets_sigma_*',
        'keep *_ak5CastorJetID_*_*',
        'keep recoBasicJets_ak7CastorJets_*_*',
        'keep *_ak7CastorJets_rho_*',
        'keep *_ak7CastorJets_sigma_*',
        'keep *_ak7CastorJetID_*_*',
        'keep *_fixedGridRhoAll_*_*',
        'keep *_fixedGridRhoFastjetAll_*_*',
        'keep *_fixedGridRhoFastjetAllTmp_*_*',
        'keep *_fixedGridRhoFastjetCentral_*_*',
        'keep *_fixedGridRhoFastjetAllCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*',
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*',
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*'
    )
)

process.RecoJetsRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_ak4CaloJets_*_*',
        'keep *_ak4PFJets_*_*',
        'keep *_ak4TrackJets_*_*',
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*',
        'keep *_towerMaker_*_*',
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*',
        'keep *_ak5CastorJets_*_*',
        'keep *_ak7CastorJets_*_*',
        'keep recoCaloJets_ak4CaloJets_*_*',
        'keep *_ak4CaloJets_rho_*',
        'keep *_ak4CaloJets_sigma_*',
        'keep *_ak4PFJetsCHS_*_*',
        'keep floatedmValueMap_puppi_*_*',
        'keep *_ak4PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppiSoftDrop_*_*',
        'keep recoPFJets_ak4PFJets_*_*',
        'keep *_ak4PFJets_rho_*',
        'keep *_ak4PFJets_sigma_*',
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*',
        'keep *_caloTowers_*_*',
        'keep *_CastorTowerReco_*_*',
        'keep *_ak4JetTracksAssociatorAtVertex_*_*',
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*',
        'keep *_ak4JetTracksAssociatorExplicit_*_*',
        'keep *_ak4JetExtender_*_*',
        'keep *_ak4JetID_*_*',
        'keep recoBasicJets_ak5CastorJets_*_*',
        'keep *_ak5CastorJets_rho_*',
        'keep *_ak5CastorJets_sigma_*',
        'keep *_ak5CastorJetID_*_*',
        'keep recoBasicJets_ak7CastorJets_*_*',
        'keep *_ak7CastorJets_rho_*',
        'keep *_ak7CastorJets_sigma_*',
        'keep *_ak7CastorJetID_*_*',
        'keep *_fixedGridRhoAll_*_*',
        'keep *_fixedGridRhoFastjetAll_*_*',
        'keep *_fixedGridRhoFastjetAllTmp_*_*',
        'keep *_fixedGridRhoFastjetCentral_*_*',
        'keep *_fixedGridRhoFastjetAllCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*',
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*',
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*'
    )
)

process.RecoLocalCaloAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_castorreco_*_*',
        'keep *_reducedHcalRecHits_*_*',
        'keep HcalUnpackerReport_castorDigis_*_*',
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*',
        'keep HcalUnpackerReport_hcalDigis_*_*',
        'keep *_HGCalRecHit_*_*',
        'keep recoCaloClusters_hgcalMergeLayerClusters_*_*',
        'keep *_hgcalMergeLayerClusters_timeLayerCluster_*',
        'keep *_hgcalMergeLayerClusters_InitialLayerClustersMask_*'
    )
)

process.RecoLocalCaloFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep HBHERecHitsSorted_hbheprerecoMB_*_*',
        'keep ZDCDataFramesSorted_*Digis_*_*',
        'keep ZDCRecHitsSorted_*_*_*',
        'keep HcalUnpackerReport_*_*_*',
        'keep *_hbhereco_*_*',
        'keep *_hbheprereco_*_*',
        'keep *_hfprereco_*_*',
        'keep *_hfreco_*_*',
        'keep *_horeco_*_*',
        'keep HBHERecHitsSorted_hbherecoMB_*_*',
        'keep HORecHitsSorted_horecoMB_*_*',
        'keep HFRecHitsSorted_hfrecoMB_*_*',
        'keep ZDCDataFramesSorted_hcalDigis_*_*',
        'keep ZDCDataFramesSorted_castorDigis_*_*',
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*',
        'keep ZDCRecHitsSorted_zdcreco_*_*',
        'keep ZDCRecHitsSorted_zdcrecoRun3_*_*',
        'keep *_castorreco_*_*',
        'keep *_reducedHcalRecHits_*_*',
        'keep HcalUnpackerReport_castorDigis_*_*',
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*',
        'keep HcalUnpackerReport_hcalDigis_*_*',
        'keep *_HGCalRecHit_*_*',
        'keep recoCaloClusters_hgcalMergeLayerClusters_*_*',
        'keep *_hgcalMergeLayerClusters_timeLayerCluster_*',
        'keep *_hgcalMergeLayerClusters_InitialLayerClustersMask_*',
        'keep *_ecalPreshowerRecHit_*_*',
        'keep *_ecalRecHit_*_*',
        'keep *_ecalCompactTrigPrim_*_*',
        'keep *_ecalTPSkim_*_*',
        'keep EBSrFlagsSorted_ecalDigis__*',
        'keep EESrFlagsSorted_ecalDigis__*',
        'keep *_mix_EBTimeDigi_*',
        'keep *_mix_EETimeDigi_*',
        'keep *_ecalDetailedTimeRecHit_*_*',
        'keep *_hgcalMultiClusters_*_*',
        'keep *_iterHGCalMultiClusters_*_*',
        'keep *_ecalMultiFitUncalibRecHit_*_*',
        'keep *_ecalPreshowerRecHit_*_*',
        'keep *_ecalRecHit_*_*',
        'keep *_ecalCompactTrigPrim_*_*',
        'keep *_ecalTPSkim_*_*',
        'keep EBSrFlagsSorted_ecalDigis__*',
        'keep EESrFlagsSorted_ecalDigis__*',
        'keep *_mix_EBTimeDigi_*',
        'keep *_mix_EETimeDigi_*',
        'keep *_ecalDetailedTimeRecHit_*_*',
        'keep *_HGCalUncalibRecHit_*_*'
    )
)

process.RecoLocalCaloRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_hbhereco_*_*',
        'keep *_hbheprereco_*_*',
        'keep *_hfprereco_*_*',
        'keep *_hfreco_*_*',
        'keep *_horeco_*_*',
        'keep HBHERecHitsSorted_hbherecoMB_*_*',
        'keep HORecHitsSorted_horecoMB_*_*',
        'keep HFRecHitsSorted_hfrecoMB_*_*',
        'keep ZDCDataFramesSorted_hcalDigis_*_*',
        'keep ZDCDataFramesSorted_castorDigis_*_*',
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*',
        'keep ZDCRecHitsSorted_zdcreco_*_*',
        'keep ZDCRecHitsSorted_zdcrecoRun3_*_*',
        'keep *_castorreco_*_*',
        'keep *_reducedHcalRecHits_*_*',
        'keep HcalUnpackerReport_castorDigis_*_*',
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*',
        'keep HcalUnpackerReport_hcalDigis_*_*',
        'keep *_HGCalRecHit_*_*',
        'keep recoCaloClusters_hgcalMergeLayerClusters_*_*',
        'keep *_hgcalMergeLayerClusters_timeLayerCluster_*',
        'keep *_hgcalMergeLayerClusters_InitialLayerClustersMask_*',
        'keep *_ecalPreshowerRecHit_*_*',
        'keep *_ecalRecHit_*_*',
        'keep *_ecalCompactTrigPrim_*_*',
        'keep *_ecalTPSkim_*_*',
        'keep EBSrFlagsSorted_ecalDigis__*',
        'keep EESrFlagsSorted_ecalDigis__*',
        'keep *_mix_EBTimeDigi_*',
        'keep *_mix_EETimeDigi_*',
        'keep *_ecalDetailedTimeRecHit_*_*',
        'keep *_hgcalMultiClusters_*_*',
        'keep *_iterHGCalMultiClusters_*_*'
    )
)

process.RecoLocalFastTimeAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.RecoLocalFastTimeFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_mtdUncalibratedRecHits_*_*',
        'keep *_mtdTrackingRecHits_*_*',
        'keep *_mtdRecHits_*_*',
        'keep *_mtdClusters_*_*'
    )
)

process.RecoLocalFastTimeRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_mtdRecHits_*_*',
        'keep *_mtdClusters_*_*'
    )
)

process.RecoLocalMuonAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_dt4DSegments_*_*',
        'keep *_dt4DCosmicSegments_*_*',
        'keep *_cscSegments_*_*',
        'keep *_rpcRecHits_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_gemRecHits_*_*',
        'keep *_gemSegments_*_*',
        'keep *_me0RecHits_*_*',
        'keep *_me0Segments_*_*'
    )
)

process.RecoLocalMuonFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_dt1DRecHits_*_*',
        'keep *_dt1DCosmicRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_dt4DSegments_*_*',
        'keep *_dt4DCosmicSegments_*_*',
        'keep *_cscSegments_*_*',
        'keep *_rpcRecHits_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_gemRecHits_*_*',
        'keep *_gemSegments_*_*',
        'keep *_me0RecHits_*_*',
        'keep *_me0Segments_*_*'
    )
)

process.RecoLocalMuonRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_dt1DRecHits_*_*',
        'keep *_dt1DCosmicRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_dt4DSegments_*_*',
        'keep *_dt4DCosmicSegments_*_*',
        'keep *_cscSegments_*_*',
        'keep *_rpcRecHits_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_gemRecHits_*_*',
        'keep *_gemSegments_*_*',
        'keep *_me0RecHits_*_*',
        'keep *_me0Segments_*_*'
    )
)

process.RecoLocalTrackerAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep ClusterSummary_clusterSummaryProducer_*_*')
)

process.RecoLocalTrackerFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_clusterSummaryProducer_*_*',
        'keep DetIds_siStripDigis_*_*',
        'keep DetIdedmEDCollection_siPixelDigis_*_*',
        'keep PixelFEDChanneledmNewDetSetVector_siPixelDigis_*_*',
        'keep *_siPixelClusters_*_*',
        'keep *_siStripClusters_*_*',
        'keep ClusterSummary_clusterSummaryProducer_*_*',
        'keep *_siPhase2Clusters_*_*',
        'keep *_siPhase2Clusters_*_*'
    )
)

process.RecoLocalTrackerRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep DetIds_siStripDigis_*_*',
        'keep DetIdedmEDCollection_siPixelDigis_*_*',
        'keep PixelFEDChanneledmNewDetSetVector_siPixelDigis_*_*',
        'keep *_siPixelClusters_*_*',
        'keep *_siStripClusters_*_*',
        'keep ClusterSummary_clusterSummaryProducer_*_*',
        'keep *_siPhase2Clusters_*_*'
    )
)

process.RecoMETAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoCaloMETs_caloMet_*_*',
        'keep recoCaloMETs_caloMetBE_*_*',
        'keep recoCaloMETs_caloMetBEFO_*_*',
        'keep recoCaloMETs_caloMetM_*_*',
        'keep recoPFMETs_pfMet_*_*',
        'keep recoPFMETs_pfChMet_*_*',
        'keep floatedmValueMap_puppiNoLep_*_*',
        'keep recoPFMETs_pfMetPuppi_*_*',
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*',
        'keep HcalNoiseSummary_hcalnoise_*_*',
        'keep recoGlobalHaloData_GlobalHaloData_*_*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*'
    )
)

process.RecoMETFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *HaloData_*_*_*',
        'keep *BeamHaloSummary_BeamHaloSummary_*_*',
        'keep recoHcalNoiseRBXs_hcalnoise_*_*',
        'keep recoEcalHaloData_EcalHaloData_*_*',
        'keep recoHcalHaloData_HcalHaloData_*_*',
        'keep recoCaloMETs_caloMet_*_*',
        'keep recoCaloMETs_caloMetBE_*_*',
        'keep recoCaloMETs_caloMetBEFO_*_*',
        'keep recoCaloMETs_caloMetM_*_*',
        'keep recoPFMETs_pfMet_*_*',
        'keep recoPFMETs_pfChMet_*_*',
        'keep floatedmValueMap_puppiNoLep_*_*',
        'keep recoPFMETs_pfMetPuppi_*_*',
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*',
        'keep HcalNoiseSummary_hcalnoise_*_*',
        'keep recoGlobalHaloData_GlobalHaloData_*_*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*'
    )
)

process.RecoMETRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoHcalNoiseRBXs_hcalnoise_*_*',
        'keep recoEcalHaloData_EcalHaloData_*_*',
        'keep recoHcalHaloData_HcalHaloData_*_*',
        'keep recoCaloMETs_caloMet_*_*',
        'keep recoCaloMETs_caloMetBE_*_*',
        'keep recoCaloMETs_caloMetBEFO_*_*',
        'keep recoCaloMETs_caloMetM_*_*',
        'keep recoPFMETs_pfMet_*_*',
        'keep recoPFMETs_pfChMet_*_*',
        'keep floatedmValueMap_puppiNoLep_*_*',
        'keep recoPFMETs_pfMetPuppi_*_*',
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*',
        'keep HcalNoiseSummary_hcalnoise_*_*',
        'keep recoGlobalHaloData_GlobalHaloData_*_*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*'
    )
)

process.RecoMTDAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *edmValueMap_trackExtenderWithMTD_*_*',
        'keep *_mtdTrackQualityMVA_*_*'
    )
)

process.RecoMTDFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoTrack*_trackExtenderWithMTD_*_*',
        'keep TrackingRecHitsOwned_trackExtenderWithMTD_*_*',
        'keep *edmValueMap_trackExtenderWithMTD_*_*',
        'keep *_mtdTrackQualityMVA_*_*'
    )
)

process.RecoMTDRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoTrack*_trackExtenderWithMTD_*_*',
        'keep TrackingRecHitsOwned_trackExtenderWithMTD_*_*',
        'keep *edmValueMap_trackExtenderWithMTD_*_*',
        'keep *_mtdTrackQualityMVA_*_*'
    )
)

process.RecoMuonAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoMuons_muons_*_*',
        'keep booledmValueMap_muons_*_*',
        'keep doubleedmValueMap_muons_muPFMean*_*',
        'keep doubleedmValueMap_muons_muPFSum*_*',
        'keep *_muons_muonShowerInformation_*',
        'keep recoMuonTimeExtraedmValueMap_muons_*_*',
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*',
        'keep uintedmValueMap_muons_*_*',
        'keep *_particleFlow_muons_*',
        'keep recoMuons_displacedMuons_*_*',
        'keep booledmValueMap_displacedMuons_*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFMean*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFSum*_*',
        'keep recoMuonTimeExtraedmValueMap_displacedMuons_*_*',
        'keep uintedmValueMap_displacedMuons_*_*',
        'keep *_particleFlow_displacedMuons_*',
        'keep recoTracks_standAloneMuons_*_*',
        'keep recoTrackExtras_standAloneMuons_*_*',
        'keep TrackingRecHitsOwned_standAloneMuons_*_*',
        'keep recoTracks_globalMuons_*_*',
        'keep recoTrackExtras_globalMuons_*_*',
        'keep recoTracks_tevMuons_*_*',
        'keep recoTrackExtras_tevMuons_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_displacedTracks_*_*',
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*',
        'keep recoTracks_displacedGlobalMuons_*_*',
        'keep recoTrackExtras_displacedGlobalMuons_*_*',
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*',
        'keep recoTracks_cosmicMuons_*_*',
        'keep recoMuons_muonsFromCosmics_*_*',
        'keep recoTracks_cosmicMuons1Leg_*_*',
        'keep recoMuons_muonsFromCosmics1Leg_*_*',
        'keep recoTracks_refittedStandAloneMuons_*_*',
        'keep recoTrackExtras_refittedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTrackExtras_displacedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*',
        'keep *_muonReducedTrackExtras_*_*',
        'keep *_displacedMuonReducedTrackExtras_*_*'
    )
)

process.RecoMuonFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_MuonSeed_*_*',
        'keep *_ancientMuonSeed_*_*',
        'keep *_displacedMuonSeeds_*_*',
        'keep TrackingRecHitsOwned_globalMuons_*_*',
        'keep TrackingRecHitsOwned_tevMuons_*_*',
        'keep *_CosmicMuonSeed_*_*',
        'keep recoTrackExtras_cosmicMuons_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons_*_*',
        'keep recoTrackExtras_cosmicMuons1Leg_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*',
        'keep recoTracks_cosmicsVetoTracks_*_*',
        'keep recoMuons_muons_*_*',
        'keep booledmValueMap_muons_*_*',
        'keep doubleedmValueMap_muons_muPFMean*_*',
        'keep doubleedmValueMap_muons_muPFSum*_*',
        'keep *_muons_muonShowerInformation_*',
        'keep recoMuonTimeExtraedmValueMap_muons_*_*',
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*',
        'keep uintedmValueMap_muons_*_*',
        'keep *_particleFlow_muons_*',
        'keep recoMuons_displacedMuons_*_*',
        'keep booledmValueMap_displacedMuons_*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFMean*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFSum*_*',
        'keep recoMuonTimeExtraedmValueMap_displacedMuons_*_*',
        'keep uintedmValueMap_displacedMuons_*_*',
        'keep *_particleFlow_displacedMuons_*',
        'keep recoTracks_standAloneMuons_*_*',
        'keep recoTrackExtras_standAloneMuons_*_*',
        'keep TrackingRecHitsOwned_standAloneMuons_*_*',
        'keep recoTracks_globalMuons_*_*',
        'keep recoTrackExtras_globalMuons_*_*',
        'keep recoTracks_tevMuons_*_*',
        'keep recoTrackExtras_tevMuons_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_displacedTracks_*_*',
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*',
        'keep recoTracks_displacedGlobalMuons_*_*',
        'keep recoTrackExtras_displacedGlobalMuons_*_*',
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*',
        'keep recoTracks_cosmicMuons_*_*',
        'keep recoMuons_muonsFromCosmics_*_*',
        'keep recoTracks_cosmicMuons1Leg_*_*',
        'keep recoMuons_muonsFromCosmics1Leg_*_*',
        'keep recoTracks_refittedStandAloneMuons_*_*',
        'keep recoTrackExtras_refittedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTrackExtras_displacedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*',
        'keep *_muonReducedTrackExtras_*_*',
        'keep *_displacedMuonReducedTrackExtras_*_*',
        'keep *_muIsoDepositTk_*_*',
        'keep *_muIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muIsoDepositCalByAssociatorHits_*_*',
        'keep *_muIsoDepositJets_*_*',
        'keep *_muIsoDepositTkDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorTowersDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorHitsDisplaced_*_*',
        'keep *_muIsoDepositJetsDisplaced_*_*',
        'keep *_muGlobalIsoDepositCtfTk_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*',
        'keep *_muGlobalIsoDepositJets_*_*',
        'keep *_muIsoDepositTk_*_*',
        'keep *_muIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muIsoDepositCalByAssociatorHits_*_*',
        'keep *_muIsoDepositJets_*_*',
        'keep *_muIsoDepositTkDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorTowersDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorHitsDisplaced_*_*',
        'keep *_muIsoDepositJetsDisplaced_*_*',
        'keep *_muGlobalIsoDepositCtfTk_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*',
        'keep *_muGlobalIsoDepositJets_*_*'
    )
)

process.RecoMuonIsolationAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.RecoMuonIsolationFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_muIsoDepositTk_*_*',
        'keep *_muIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muIsoDepositCalByAssociatorHits_*_*',
        'keep *_muIsoDepositJets_*_*',
        'keep *_muIsoDepositTkDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorTowersDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorHitsDisplaced_*_*',
        'keep *_muIsoDepositJetsDisplaced_*_*',
        'keep *_muGlobalIsoDepositCtfTk_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*',
        'keep *_muGlobalIsoDepositJets_*_*'
    )
)

process.RecoMuonIsolationParamGlobal = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_muParamGlobalIsoDepositGsTk_*_*',
        'keep *_muParamGlobalIsoDepositCalEcal_*_*',
        'keep *_muParamGlobalIsoDepositCalHcal_*_*',
        'keep *_muParamGlobalIsoDepositCtfTk_*_*',
        'keep *_muParamGlobalIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muParamGlobalIsoDepositCalByAssociatorHits_*_*',
        'keep *_muParamGlobalIsoDepositJets_*_*'
    )
)

process.RecoMuonIsolationRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_muIsoDepositTk_*_*',
        'keep *_muIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muIsoDepositCalByAssociatorHits_*_*',
        'keep *_muIsoDepositJets_*_*',
        'keep *_muIsoDepositTkDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorTowersDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorHitsDisplaced_*_*',
        'keep *_muIsoDepositJetsDisplaced_*_*',
        'keep *_muGlobalIsoDepositCtfTk_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*',
        'keep *_muGlobalIsoDepositJets_*_*'
    )
)

process.RecoMuonRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_MuonSeed_*_*',
        'keep *_ancientMuonSeed_*_*',
        'keep *_displacedMuonSeeds_*_*',
        'keep TrackingRecHitsOwned_globalMuons_*_*',
        'keep TrackingRecHitsOwned_tevMuons_*_*',
        'keep *_CosmicMuonSeed_*_*',
        'keep recoTrackExtras_cosmicMuons_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons_*_*',
        'keep recoTrackExtras_cosmicMuons1Leg_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*',
        'keep recoTracks_cosmicsVetoTracks_*_*',
        'keep recoMuons_muons_*_*',
        'keep booledmValueMap_muons_*_*',
        'keep doubleedmValueMap_muons_muPFMean*_*',
        'keep doubleedmValueMap_muons_muPFSum*_*',
        'keep *_muons_muonShowerInformation_*',
        'keep recoMuonTimeExtraedmValueMap_muons_*_*',
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*',
        'keep uintedmValueMap_muons_*_*',
        'keep *_particleFlow_muons_*',
        'keep recoMuons_displacedMuons_*_*',
        'keep booledmValueMap_displacedMuons_*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFMean*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFSum*_*',
        'keep recoMuonTimeExtraedmValueMap_displacedMuons_*_*',
        'keep uintedmValueMap_displacedMuons_*_*',
        'keep *_particleFlow_displacedMuons_*',
        'keep recoTracks_standAloneMuons_*_*',
        'keep recoTrackExtras_standAloneMuons_*_*',
        'keep TrackingRecHitsOwned_standAloneMuons_*_*',
        'keep recoTracks_globalMuons_*_*',
        'keep recoTrackExtras_globalMuons_*_*',
        'keep recoTracks_tevMuons_*_*',
        'keep recoTrackExtras_tevMuons_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_displacedTracks_*_*',
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*',
        'keep recoTracks_displacedGlobalMuons_*_*',
        'keep recoTrackExtras_displacedGlobalMuons_*_*',
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*',
        'keep recoTracks_cosmicMuons_*_*',
        'keep recoMuons_muonsFromCosmics_*_*',
        'keep recoTracks_cosmicMuons1Leg_*_*',
        'keep recoMuons_muonsFromCosmics1Leg_*_*',
        'keep recoTracks_refittedStandAloneMuons_*_*',
        'keep recoTrackExtras_refittedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTrackExtras_displacedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*',
        'keep *_muonReducedTrackExtras_*_*',
        'keep *_displacedMuonReducedTrackExtras_*_*',
        'keep *_muIsoDepositTk_*_*',
        'keep *_muIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muIsoDepositCalByAssociatorHits_*_*',
        'keep *_muIsoDepositJets_*_*',
        'keep *_muIsoDepositTkDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorTowersDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorHitsDisplaced_*_*',
        'keep *_muIsoDepositJetsDisplaced_*_*',
        'keep *_muGlobalIsoDepositCtfTk_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*',
        'keep *_muGlobalIsoDepositJets_*_*'
    )
)

process.RecoParticleFlowAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*',
        'keep recoCaloClusters_particleFlowEGamma_*_*',
        'keep recoSuperClusters_particleFlowEGamma_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoConversions_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlow_*_*',
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*',
        'keep *_particleFlow_electrons_*',
        'keep *_particleFlow_photons_*',
        'keep *_particleFlow_muons_*',
        'keep recoCaloClusters_pfElectronTranslator_*_*',
        'keep recoPreshowerClusters_pfElectronTranslator_*_*',
        'keep recoSuperClusters_pfElectronTranslator_*_*',
        'keep recoCaloClusters_pfPhotonTranslator_*_*',
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*',
        'keep recoSuperClusters_pfPhotonTranslator_*_*',
        'keep recoPhotons_pfPhotonTranslator_*_*',
        'keep recoPhotonCores_pfPhotonTranslator_*_*',
        'keep recoConversions_pfPhotonTranslator_*_*',
        'keep *_particleFlowPtrs_*_*',
        'keep *_particleFlowTmpPtrs_*_*',
        'keep *_chargedHadronPFTrackIsolation_*_*',
        'keep recoPFRecHits_particleFlowRecHitHGC_Cleaned_*',
        'keep recoSuperClusters_simPFProducer_*_*',
        'keep *_ecalBarrelClusterFastTimer_*_*'
    )
)

process.RecoParticleFlowFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoPFClusters_particleFlowClusterECAL_*_*',
        'keep recoPFClusters_particleFlowClusterHCAL_*_*',
        'keep recoPFClusters_particleFlowClusterHO_*_*',
        'keep recoPFClusters_particleFlowClusterHF_*_*',
        'keep recoPFClusters_particleFlowClusterPS_*_*',
        'keep recoPFBlocks_particleFlowBlock_*_*',
        'keep recoPFCandidates_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlowTmp_electrons_*',
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*',
        'keep *_pfElectronTranslator_*_*',
        'keep *_pfPhotonTranslator_*_*',
        'keep *_trackerDrivenElectronSeeds_preid_*',
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*',
        'keep recoCaloClusters_particleFlowEGamma_*_*',
        'keep recoSuperClusters_particleFlowEGamma_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoConversions_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlow_*_*',
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*',
        'keep *_particleFlow_electrons_*',
        'keep *_particleFlow_photons_*',
        'keep *_particleFlow_muons_*',
        'keep recoCaloClusters_pfElectronTranslator_*_*',
        'keep recoPreshowerClusters_pfElectronTranslator_*_*',
        'keep recoSuperClusters_pfElectronTranslator_*_*',
        'keep recoCaloClusters_pfPhotonTranslator_*_*',
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*',
        'keep recoSuperClusters_pfPhotonTranslator_*_*',
        'keep recoPhotons_pfPhotonTranslator_*_*',
        'keep recoPhotonCores_pfPhotonTranslator_*_*',
        'keep recoConversions_pfPhotonTranslator_*_*',
        'keep *_particleFlowPtrs_*_*',
        'keep *_particleFlowTmpPtrs_*_*',
        'keep *_chargedHadronPFTrackIsolation_*_*',
        'keep recoPFRecHits_particleFlowRecHitHGC_Cleaned_*',
        'keep recoSuperClusters_simPFProducer_*_*',
        'keep *_ecalBarrelClusterFastTimer_*_*',
        'keep *_particleFlowSuperClusterHGCal_*_*',
        'keep recoPFBlocks_simPFProducer_*_*',
        'keep recoPFRecHits_particleFlowClusterECAL__*',
        'keep recoPFRecHits_particleFlowRecHitHGC__*',
        'keep *_simPFProducer_*_*'
    )
)

process.RecoParticleFlowRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoPFClusters_particleFlowClusterECAL_*_*',
        'keep recoPFClusters_particleFlowClusterHCAL_*_*',
        'keep recoPFClusters_particleFlowClusterHO_*_*',
        'keep recoPFClusters_particleFlowClusterHF_*_*',
        'keep recoPFClusters_particleFlowClusterPS_*_*',
        'keep recoPFBlocks_particleFlowBlock_*_*',
        'keep recoPFCandidates_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlowTmp_electrons_*',
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*',
        'keep *_pfElectronTranslator_*_*',
        'keep *_pfPhotonTranslator_*_*',
        'keep *_trackerDrivenElectronSeeds_preid_*',
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*',
        'keep recoCaloClusters_particleFlowEGamma_*_*',
        'keep recoSuperClusters_particleFlowEGamma_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoConversions_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlow_*_*',
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*',
        'keep *_particleFlow_electrons_*',
        'keep *_particleFlow_photons_*',
        'keep *_particleFlow_muons_*',
        'keep recoCaloClusters_pfElectronTranslator_*_*',
        'keep recoPreshowerClusters_pfElectronTranslator_*_*',
        'keep recoSuperClusters_pfElectronTranslator_*_*',
        'keep recoCaloClusters_pfPhotonTranslator_*_*',
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*',
        'keep recoSuperClusters_pfPhotonTranslator_*_*',
        'keep recoPhotons_pfPhotonTranslator_*_*',
        'keep recoPhotonCores_pfPhotonTranslator_*_*',
        'keep recoConversions_pfPhotonTranslator_*_*',
        'keep *_particleFlowPtrs_*_*',
        'keep *_particleFlowTmpPtrs_*_*',
        'keep *_chargedHadronPFTrackIsolation_*_*',
        'keep recoPFRecHits_particleFlowRecHitHGC_Cleaned_*',
        'keep recoSuperClusters_simPFProducer_*_*',
        'keep *_ecalBarrelClusterFastTimer_*_*',
        'keep *_particleFlowSuperClusterHGCal_*_*',
        'keep recoPFBlocks_simPFProducer_*_*'
    )
)

process.RecoPixelVertexingFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_pixelTracks_*_*',
        'keep *_pixelVertices_*_*'
    )
)

process.RecoPixelVertexingRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_pixelTracks_*_*',
        'keep *_pixelVertices_*_*'
    )
)

process.RecoTauTagAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*',
        'keep recoPFTaus_hpsPFTauProducer_*_*',
        'keep *_hpsPFTauBasicDiscriminators_*_*',
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*',
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*',
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*',
        'keep *_hpsPFTauTransverseImpactParameters_*_*'
    )
)

process.RecoTauTagFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_ak4PFJetsRecoTauPiZeros_*_*',
        'keep *_hpsPFTauProducer_*_*',
        'keep *_hpsPFTauDiscrimination*_*_*',
        'keep *_hpsPFTau*PtSum_*_*',
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*',
        'keep recoPFTaus_hpsPFTauProducer_*_*',
        'keep *_hpsPFTauBasicDiscriminators_*_*',
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*',
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*',
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*',
        'keep *_hpsPFTauTransverseImpactParameters_*_*'
    )
)

process.RecoTauTagRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*',
        'keep recoPFTaus_hpsPFTauProducer_*_*',
        'keep *_hpsPFTauBasicDiscriminators_*_*',
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*',
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*',
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*',
        'keep *_hpsPFTauTransverseImpactParameters_*_*'
    )
)

process.RecoTrackerAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_conversionStepTracks_*_*',
        'keep recoTracks_beamhaloTracks_*_*',
        'keep recoTracks_ctfPixelLess_*_*',
        'keep *_dedxHarmonic2_*_*',
        'keep *_dedxPixelHarmonic2_*_*',
        'keep *_dedxHitInfo_*_*',
        'keep *_trackExtrapolator_*_*',
        'keep *_generalTracks_MVAValues_*',
        'keep *_generalTracks_MVAVals_*'
    )
)

process.RecoTrackerFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoTrackExtras_generalTracks_*_*',
        'keep TrackingRecHitsOwned_generalTracks_*_*',
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*',
        'keep uints_extraFromSeeds_*_*',
        'keep recoTrackExtras_beamhaloTracks_*_*',
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*',
        'keep recoTrackExtras_conversionStepTracks_*_*',
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*',
        'keep *_ctfPixelLess_*_*',
        'keep *_dedxTruncated40_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_conversionStepTracks_*_*',
        'keep recoTracks_beamhaloTracks_*_*',
        'keep recoTracks_ctfPixelLess_*_*',
        'keep *_dedxHarmonic2_*_*',
        'keep *_dedxPixelHarmonic2_*_*',
        'keep *_dedxHitInfo_*_*',
        'keep *_trackExtrapolator_*_*',
        'keep *_generalTracks_MVAValues_*',
        'keep *_generalTracks_MVAVals_*'
    )
)

process.RecoTrackerRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoTrackExtras_generalTracks_*_*',
        'keep TrackingRecHitsOwned_generalTracks_*_*',
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*',
        'keep uints_extraFromSeeds_*_*',
        'keep recoTrackExtras_beamhaloTracks_*_*',
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*',
        'keep recoTrackExtras_conversionStepTracks_*_*',
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*',
        'keep *_ctfPixelLess_*_*',
        'keep *_dedxTruncated40_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_conversionStepTracks_*_*',
        'keep recoTracks_beamhaloTracks_*_*',
        'keep recoTracks_ctfPixelLess_*_*',
        'keep *_dedxHarmonic2_*_*',
        'keep *_dedxPixelHarmonic2_*_*',
        'keep *_dedxHitInfo_*_*',
        'keep *_trackExtrapolator_*_*',
        'keep *_generalTracks_MVAValues_*',
        'keep *_generalTracks_MVAVals_*'
    )
)

process.RecoVertexAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep  *_offlinePrimaryVertices__*',
        'keep *_offlinePrimaryVerticesWithBS_*_*',
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*',
        'keep *_nuclearInteractionMaker_*_*',
        'keep *_generalV0Candidates_*_*',
        'keep *_inclusiveSecondaryVertices_*_*',
        'keep *_offlinePrimaryVertices4D__*',
        'keep *_offlinePrimaryVertices4DWithBS__*',
        'keep *_trackTimeValueMapProducer_*_*',
        'keep *_tofPID_*_*'
    )
)

process.RecoVertexFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep  *_offlinePrimaryVertices__*',
        'keep *_offlinePrimaryVerticesWithBS_*_*',
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*',
        'keep *_nuclearInteractionMaker_*_*',
        'keep *_generalV0Candidates_*_*',
        'keep *_inclusiveSecondaryVertices_*_*',
        'keep *_offlinePrimaryVertices4D__*',
        'keep *_offlinePrimaryVertices4DWithBS__*',
        'keep *_trackTimeValueMapProducer_*_*',
        'keep *_tofPID_*_*'
    )
)

process.RecoVertexRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep  *_offlinePrimaryVertices__*',
        'keep *_offlinePrimaryVerticesWithBS_*_*',
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*',
        'keep *_nuclearInteractionMaker_*_*',
        'keep *_generalV0Candidates_*_*',
        'keep *_inclusiveSecondaryVertices_*_*',
        'keep *_offlinePrimaryVertices4D__*',
        'keep *_offlinePrimaryVertices4DWithBS__*',
        'keep *_trackTimeValueMapProducer_*_*',
        'keep *_tofPID_*_*'
    )
)

process.SectCollParametersBlock = cms.PSet(
    SectCollParameters = cms.PSet(
        Debug = cms.untracked.bool(False),
        SCCSP1 = cms.int32(0),
        SCCSP2 = cms.int32(0),
        SCCSP3 = cms.int32(0),
        SCCSP4 = cms.int32(0),
        SCCSP5 = cms.int32(0),
        SCECF1 = cms.bool(False),
        SCECF2 = cms.bool(False),
        SCECF3 = cms.bool(False),
        SCECF4 = cms.bool(False)
    )
)

process.SiPixelSimBlock = cms.PSet(
    AdcFullScLateCR = cms.int32(255),
    AdcFullScale = cms.int32(255),
    AddNoise = cms.bool(True),
    AddNoisyPixels = cms.bool(True),
    AddPixelInefficiency = cms.bool(True),
    AddThresholdSmearing = cms.bool(True),
    Alpha2Order = cms.bool(True),
    BPix_SignalResponse_p0 = cms.double(0.0035),
    BPix_SignalResponse_p1 = cms.double(1.23),
    BPix_SignalResponse_p2 = cms.double(97.4),
    BPix_SignalResponse_p3 = cms.double(126.5),
    ChargeVCALSmearing = cms.bool(True),
    DeadModules_DB = cms.bool(True),
    DoPixelAging = cms.bool(False),
    ElectronPerAdc = cms.double(135.0),
    ElectronsPerVcal = cms.double(65.5),
    ElectronsPerVcal_L1 = cms.double(65.5),
    ElectronsPerVcal_L1_Offset = cms.double(-414.0),
    ElectronsPerVcal_Offset = cms.double(-414.0),
    FPix_SignalResponse_p0 = cms.double(0.0043),
    FPix_SignalResponse_p1 = cms.double(1.31),
    FPix_SignalResponse_p2 = cms.double(93.6),
    FPix_SignalResponse_p3 = cms.double(134.6),
    GainSmearing = cms.double(0.0),
    KillBadFEDChannels = cms.bool(False),
    LorentzAngle_DB = cms.bool(True),
    MissCalInLateCR = cms.bool(True),
    MissCalibrate = cms.bool(True),
    NoiseInElectrons = cms.double(175.0),
    NumPixelBarrel = cms.int32(3),
    NumPixelEndcap = cms.int32(2),
    OffsetSmearing = cms.double(0.0),
    PixGeometryType = cms.string('idealForDigi'),
    PrintClusters = cms.bool(False),
    PrintTemplates = cms.bool(False),
    ReadoutNoiseInElec = cms.double(350.0),
    RoutList = cms.vstring(
        'TrackerHitsPixelBarrelLowTof',
        'TrackerHitsPixelBarrelHighTof',
        'TrackerHitsPixelEndcapLowTof',
        'TrackerHitsPixelEndcapHighTof'
    ),
    SiPixelQualityLabel = cms.string('forDigitizer'),
    TanLorentzAnglePerTesla_BPix = cms.double(0.106),
    TanLorentzAnglePerTesla_FPix = cms.double(0.106),
    ThresholdInElectrons_BPix = cms.double(1600.0),
    ThresholdInElectrons_BPix_L1 = cms.double(2000.0),
    ThresholdInElectrons_BPix_L2 = cms.double(1600.0),
    ThresholdInElectrons_FPix = cms.double(1600.0),
    ThresholdSmearing_BPix = cms.double(245.0),
    ThresholdSmearing_BPix_L1 = cms.double(245.0),
    ThresholdSmearing_BPix_L2 = cms.double(245.0),
    ThresholdSmearing_FPix = cms.double(210.0),
    TofLowerCut = cms.double(-12.5),
    TofUpperCut = cms.double(12.5),
    UseReweighting = cms.bool(False),
    applyLateReweighting = cms.bool(False),
    deltaProductionCut = cms.double(0.03),
    killModules = cms.bool(True),
    store_SimHitEntryExitPoints = cms.bool(False),
    useDB = cms.bool(False)
)

process.SiStripClusterChargeCutLoose = cms.PSet(
    value = cms.double(1620.0)
)

process.SiStripClusterChargeCutNone = cms.PSet(
    value = cms.double(-1.0)
)

process.SiStripClusterChargeCutTight = cms.PSet(
    value = cms.double(1945.0)
)

process.SiStripSimBlock = cms.PSet(
    APVProbabilityFile = cms.FileInPath('SimTracker/SiStripDigitizer/data/APVProbaList.txt'),
    APVSaturationFromHIP = cms.bool(False),
    APVSaturationProbScaling = cms.double(1.0),
    APVShapeDecoFile = cms.FileInPath('SimTracker/SiStripDigitizer/data/APVShapeDeco_320.txt'),
    APVShapePeakFile = cms.FileInPath('SimTracker/SiStripDigitizer/data/APVShapePeak_default.txt'),
    APVpeakmode = cms.bool(False),
    AppliedVoltage = cms.double(300.0),
    BaselineShift = cms.bool(True),
    ChargeDistributionRMS = cms.double(6.5e-10),
    ChargeMobility = cms.double(310.0),
    CommonModeNoise = cms.bool(True),
    CosmicDelayShift = cms.untracked.double(0.0),
    CouplingConstantDecIB1 = cms.vdouble(0.7748, 0.0962, 0.0165),
    CouplingConstantDecIB2 = cms.vdouble(0.83, 0.0756, 0.0094),
    CouplingConstantDecOB1 = cms.vdouble(0.6871, 0.1222, 0.0342),
    CouplingConstantDecOB2 = cms.vdouble(0.725, 0.1102, 0.0273),
    CouplingConstantDecW1a = cms.vdouble(0.786, 0.093, 0.014),
    CouplingConstantDecW1b = cms.vdouble(0.822, 0.08, 0.009),
    CouplingConstantDecW2a = cms.vdouble(0.7962, 0.0914, 0.0104),
    CouplingConstantDecW2b = cms.vdouble(0.888, 0.05, 0.006),
    CouplingConstantDecW3a = cms.vdouble(0.8164, 0.09, 0.0018),
    CouplingConstantDecW3b = cms.vdouble(0.848, 0.06, 0.016),
    CouplingConstantDecW4 = cms.vdouble(0.876, 0.06, 0.002),
    CouplingConstantDecW5 = cms.vdouble(0.7565, 0.0913, 0.0304),
    CouplingConstantDecW6 = cms.vdouble(0.758, 0.093, 0.026),
    CouplingConstantDecW7 = cms.vdouble(0.7828, 0.0862, 0.0224),
    CouplingConstantPeakIB1 = cms.vdouble(0.9006, 0.0497),
    CouplingConstantPeakIB2 = cms.vdouble(0.9342, 0.0328),
    CouplingConstantPeakOB1 = cms.vdouble(0.8542, 0.0729),
    CouplingConstantPeakOB2 = cms.vdouble(0.8719, 0.064),
    CouplingConstantPeakW1a = cms.vdouble(0.996, 0.002),
    CouplingConstantPeakW1b = cms.vdouble(0.976, 0.012),
    CouplingConstantPeakW2a = cms.vdouble(1.0, 0.0),
    CouplingConstantPeakW2b = cms.vdouble(0.998, 0.001),
    CouplingConstantPeakW3a = cms.vdouble(0.996, 0.002),
    CouplingConstantPeakW3b = cms.vdouble(0.992, 0.004),
    CouplingConstantPeakW4 = cms.vdouble(0.992, 0.004),
    CouplingConstantPeakW5 = cms.vdouble(0.968, 0.016),
    CouplingConstantPeakW6 = cms.vdouble(0.972, 0.014),
    CouplingConstantPeakW7 = cms.vdouble(0.964, 0.018),
    CouplingConstantRunIIDecIB1 = cms.vdouble(0.8361, 0.0703, 0.0117),
    CouplingConstantRunIIDecIB2 = cms.vdouble(0.8616, 0.0588, 0.0104),
    CouplingConstantRunIIDecOB1 = cms.vdouble(0.7461, 0.0996, 0.0273),
    CouplingConstantRunIIDecOB2 = cms.vdouble(0.7925, 0.0834, 0.0203),
    CouplingConstantRunIIDecW1a = cms.vdouble(0.8571, 0.0608, 0.0106),
    CouplingConstantRunIIDecW1b = cms.vdouble(0.8827, 0.0518, 0.0068),
    CouplingConstantRunIIDecW2a = cms.vdouble(0.8861, 0.049, 0.008),
    CouplingConstantRunIIDecW2b = cms.vdouble(0.8943, 0.0483, 0.0046),
    CouplingConstantRunIIDecW3a = cms.vdouble(0.8984, 0.0494, 0.0014),
    CouplingConstantRunIIDecW3b = cms.vdouble(0.8611, 0.0573, 0.0121),
    CouplingConstantRunIIDecW4 = cms.vdouble(0.8881, 0.0544, 0.0015),
    CouplingConstantRunIIDecW5 = cms.vdouble(0.7997, 0.077, 0.0231),
    CouplingConstantRunIIDecW6 = cms.vdouble(0.8067, 0.0769, 0.0198),
    CouplingConstantRunIIDecW7 = cms.vdouble(0.7883, 0.0888, 0.0171),
    CouplingConstantsRunIIDecB = cms.bool(True),
    CouplingConstantsRunIIDecW = cms.bool(True),
    DeltaProductionCut = cms.double(0.120425),
    DepletionVoltage = cms.double(170.0),
    DigiModeList = cms.PSet(
        PRDigi = cms.string('ProcessedRaw'),
        SCDigi = cms.string('ScopeMode'),
        VRDigi = cms.string('VirginRaw'),
        ZSDigi = cms.string('ZeroSuppressed')
    ),
    FedAlgorithm = cms.int32(4),
    FedAlgorithm_PM = cms.int32(4),
    Gain = cms.string(''),
    GeometryType = cms.string('idealForDigi'),
    GevPerElectron = cms.double(3.61e-09),
    Inefficiency = cms.double(0.0),
    LandauFluctuations = cms.bool(True),
    LorentzAngle = cms.string(''),
    Noise = cms.bool(True),
    NoiseSigmaThreshold = cms.double(2.0),
    PedestalsOffset = cms.double(128),
    PreMixingMode = cms.bool(False),
    ROUList = cms.vstring(
        'TrackerHitsTIBLowTof',
        'TrackerHitsTIBHighTof',
        'TrackerHitsTIDLowTof',
        'TrackerHitsTIDHighTof',
        'TrackerHitsTOBLowTof',
        'TrackerHitsTOBHighTof',
        'TrackerHitsTECLowTof',
        'TrackerHitsTECHighTof'
    ),
    RealPedestals = cms.bool(True),
    SingleStripNoise = cms.bool(True),
    TOFCutForDeconvolution = cms.double(50.0),
    TOFCutForPeak = cms.double(100.0),
    Temperature = cms.double(273.0),
    TrackerConfigurationFromDB = cms.bool(False),
    ZeroSuppression = cms.bool(True),
    apv_mVPerQ = cms.double(5.5),
    apv_maxResponse = cms.double(729),
    apv_rate = cms.double(66.2),
    apvfCPerElectron = cms.double(0.0001602),
    chargeDivisionsPerStrip = cms.int32(10),
    cmnRMStec = cms.double(2.44),
    cmnRMStib = cms.double(5.92),
    cmnRMStid = cms.double(3.08),
    cmnRMStob = cms.double(1.08),
    electronPerAdcDec = cms.double(247.0),
    electronPerAdcPeak = cms.double(262.0),
    fracOfEventsToSimAPV = cms.double(0.0),
    includeAPVSimulation = cms.bool(False),
    noDiffusion = cms.bool(False)
)

process.SimCalorimetryAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.SimCalorimetryFEVTDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_simEcalDigis_*_*',
        'keep *_simEcalPreshowerDigis_*_*',
        'keep *_simEcalTriggerPrimitiveDigis_*_*',
        'keep *_simEcalEBTriggerPrimitiveDigis_*_*',
        'keep *_simEcalEBTriggerPrimitivePhase2Digis_*_*',
        'keep *_simHcalDigis_*_*',
        'keep ZDCDataFramesSorted_simHcalUnsuppressedDigis_*_*',
        'drop ZDCDataFramesSorted_mix_simHcalUnsuppressedDigis*_*',
        'keep *_simHcalTriggerPrimitiveDigis_*_*',
        'keep *_mix_HcalSamples_*',
        'keep *_mixData_HcalSamples_*',
        'keep *_mix_HcalHits_*',
        'keep *_mixData_HcalHits_*',
        'keep *_DMHcalTriggerPrimitiveDigis_*_*',
        'keep *_simHcalUnsuppressedDigis_*_*',
        'keep *_DMHcalDigis_*_*',
        'keep *_mix_EETimeDigi_*',
        'keep *_mix_EBTimeDigi_*',
        'keep *_simEcalUnsuppressedDigis_*_*',
        'keep *_simHGCalUnsuppressedDigis_EE_*',
        'keep *_simHGCalUnsuppressedDigis_HEfront_*',
        'keep *_simHGCalUnsuppressedDigis_HEback_*',
        'keep *_mix_MergedCaloTruth_*',
        'keep *_mix_MergedMtdTruth_*',
        'keep *_mix_MergedMtdTruthLC_*',
        'keep *_mix_MergedMtdTruthST_*'
    )
)

process.SimCalorimetryPREMIX = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep EBDigiCollection_simEcalDigis_*_*',
        'keep EEDigiCollection_simEcalDigis_*_*',
        'keep ESDigiCollection_simEcalUnsuppressedDigis_*_*',
        'keep *_simHcalDigis_*_*',
        'drop ESDigiCollection_simEcalUnsuppressedDigis_*_*',
        'drop EEDigiCollection_simEcalDigis_*_*',
        'keep *_simHGCalUnsuppressedDigis_EE_*',
        'keep *_simHGCalUnsuppressedDigis_HEfront_*',
        'keep *_simHGCalUnsuppressedDigis_HEback_*',
        'keep *_mix_MergedCaloTruth_*',
        'keep *_mix_MergedMtdTruth_*',
        'keep *_mix_MergedMtdTruthLC_*',
        'keep *_mix_MergedMtdTruthST_*'
    )
)

process.SimCalorimetryRAW = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep EBSrFlagsSorted_simEcalDigis_*_*',
        'keep EESrFlagsSorted_simEcalDigis_*_*',
        'keep *_simHcalUnsuppressedDigis_*_*',
        'keep *_mix_EETimeDigi_*',
        'keep *_mix_EBTimeDigi_*',
        'keep *_simEcalUnsuppressedDigis_*_*',
        'keep *_simHGCalUnsuppressedDigis_EE_*',
        'keep *_simHGCalUnsuppressedDigis_HEfront_*',
        'keep *_simHGCalUnsuppressedDigis_HEback_*',
        'keep *_mix_MergedCaloTruth_*',
        'keep *_mix_MergedMtdTruth_*',
        'keep *_mix_MergedMtdTruthLC_*',
        'keep *_mix_MergedMtdTruthST_*'
    )
)

process.SimCalorimetryRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_simHGCalUnsuppressedDigis_EE_*',
        'keep *_simHGCalUnsuppressedDigis_HEfront_*',
        'keep *_simHGCalUnsuppressedDigis_HEback_*',
        'keep *_mix_MergedCaloTruth_*',
        'keep *_mix_MergedMtdTruth_*',
        'keep *_mix_MergedMtdTruthLC_*',
        'keep *_mix_MergedMtdTruthST_*'
    )
)

process.SimFastTimingAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.SimFastTimingFEVTDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_mix_FTLBarrel_*',
        'keep *_mix_FTLEndcap_*',
        'keep *_mix_InitialVertices_*',
        'keep *_mtdRecoClusterToSimLayerClusterAssociation_*_*',
        'keep *_mtdSimLayerClusterToTPAssociation_*_*'
    )
)

process.SimFastTimingPREMIX = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_mix_FTLBarrel_*',
        'keep *_mix_FTLEndcap_*',
        'keep *_mix_InitialVertices_*',
        'keep *_mtdRecoClusterToSimLayerClusterAssociation_*_*',
        'keep *_mtdSimLayerClusterToTPAssociation_*_*',
        'keep *_mix_FTLBarrel_*',
        'keep *_mix_FTLEndcap_*',
        'keep *_mix_InitialVertices_*',
        'keep *_mtdRecoClusterToSimLayerClusterAssociation_*_*',
        'keep *_mtdSimLayerClusterToTPAssociation_*_*'
    )
)

process.SimFastTimingRAW = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_mix_FTLBarrel_*',
        'keep *_mix_FTLEndcap_*',
        'keep *_mix_InitialVertices_*',
        'keep *_mtdRecoClusterToSimLayerClusterAssociation_*_*',
        'keep *_mtdSimLayerClusterToTPAssociation_*_*'
    )
)

process.SimFastTimingRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_mix_FTLBarrel_*',
        'keep *_mix_FTLEndcap_*',
        'keep *_mix_InitialVertices_*',
        'keep *_mtdRecoClusterToSimLayerClusterAssociation_*_*',
        'keep *_mtdSimLayerClusterToTPAssociation_*_*'
    )
)

process.SimG4CoreAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.SimG4CoreHLTAODSIM = cms.PSet(
    outputCommands = cms.untracked.vstring('keep SimVertexs_g4SimHits_*_*')
)

process.SimG4CoreRAW = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_g4SimHits_*_*',
        'keep edmHepMCProduct_source_*_*'
    )
)

process.SimG4CoreRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep edmHepMCProduct_source_*_*',
        'keep SimTracks_g4SimHits_*_*',
        'keep SimVertexs_g4SimHits_*_*'
    )
)

process.SimGeneralAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep PileupSummaryInfos_*_*_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*'
    )
)

process.SimGeneralFEVTDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *_trackingtruthprod_*_*',
        'drop *_electrontruth_*_*',
        'keep *_mix_MergedTrackTruth_*',
        'keep CrossingFramePlaybackInfoNew_*_*_*'
    )
)

process.SimGeneralPREMIX = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.SimGeneralRAW = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep CrossingFramePlaybackInfoNew_*_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int6stdbitsetstdpairs_*_AffectedAPVList_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*',
        'keep *_mix_MergedTrackTruth_*'
    )
)

process.SimGeneralRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep PileupSummaryInfos_*_*_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*'
    )
)

process.SimMuonAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_muonSimClassifier_*_*')
)

process.SimMuonFEVTDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_simMuonCSCDigis_*_*',
        'keep *_simMuonDTDigis_*_*',
        'keep *_simMuonRPCDigis_*_*',
        'keep *_simMuonGEMDigis_*_*',
        'keep *_simMuonME0PseudoDigis_*_*',
        'keep *_simMuonME0PseudoReDigis_*_*',
        'keep *_simMuonME0Digis_*_*'
    )
)

process.SimMuonPREMIX = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_mix_g4SimHitsMuonDTHits_*',
        'keep *_mix_g4SimHitsMuonCSCHits_*',
        'keep *_mix_g4SimHitsMuonRPCHits_*',
        'keep *_mix_g4SimHitsMuonGEMHits_*',
        'keep *_mix_g4SimHitsMuonME0Hits_*'
    )
)

process.SimMuonRAW = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*',
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*',
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*',
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*',
        'keep *_simMuonCSCDigis_*_*',
        'keep *_simMuonRPCDigis_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonME0Digis_*_*'
    )
)

process.SimMuonRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*',
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*',
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*',
        'keep *_muonSimClassifier_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonME0Digis_*_*'
    )
)

process.SimTrackerAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackMCMatch_*_*'
    )
)

process.SimTrackerDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep PixelDigiSimLinkedmDetSetVector_simSiPixelDigis_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simSiStripDigis_*_*',
        'drop *_mix_simSiPixelDigis*_*',
        'drop *_mix_simSiStripDigis*_*',
        'keep *_allTrackMCMatch_*_*'
    )
)

process.SimTrackerFEVTDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_simSiPixelDigis_*_*',
        'keep *_simSiStripDigis_*_*',
        'drop *_mix_simSiPixelDigis*_*',
        'drop *_mix_simSiStripDigis*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_trackingParticleRecoTrackAsssociation_*_*',
        'keep *_assoc2secStepTk_*_*',
        'keep *_assoc2thStepTk_*_*',
        'keep *_assoc2GsfTracks_*_*',
        'keep *_assocOutInConversionTracks_*_*',
        'keep *_assocInOutConversionTracks_*_*',
        'keep *_TTClusterAssociatorFromPixelDigis_*_*',
        'keep *_TTStubAssociatorFromPixelDigis_*_*',
        'keep *_simHitTPAssocProducer_*_*'
    )
)

process.SimTrackerPREMIX = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep Phase2TrackerDigiedmDetSetVector_mix_*_*',
        'keep *_*_Phase2OTDigiSimLink_*',
        'keep *_simSiPixelDigis_*_*'
    )
)

process.SimTrackerRAW = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackingParticles_*_*',
        'keep *_prunedDigiSimLinks_*_*'
    )
)

process.SimTrackerRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackMCMatch_*_*'
    )
)

process.TICL_AOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.TICL_FEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_ticlSimTracksters_*_*',
        'keep *_ticlSimTICLCandidates_*_*',
        'keep *_ticlSimTrackstersFromCP_*_*',
        'keep *_SimTau*_*_*',
        'keep *_ticlTrackstersCLUE3DHigh_*_*',
        'keep *_ticlTrackstersMerge_*_*',
        'keep *_ticlTrackstersHFNoseTrkEM_*_*',
        'keep *_ticlTrackstersHFNoseEM_*_*',
        'keep *_ticlTrackstersHFNoseTrk_*_*',
        'keep *_ticlTrackstersHFNoseMIP_*_*',
        'keep *_ticlTrackstersHFNoseHAD_*_*',
        'keep *_ticlTrackstersHFNoseMerge_*_*',
        'keep *_pfTICL_*_*',
        'keep CaloParticles_mix_*_*',
        'keep SimClusters_mix_*_*',
        'keep *_layerClusterSimClusterAssociationProducer_*_*',
        'keep *_layerClusterCaloParticleAssociationProducer_*_*',
        'keep *_layerClusterSimTracksterAssociationProducer_*_*',
        'keep *_tracksterSimTracksterAssociationLinking_*_*',
        'keep *_tracksterSimTracksterAssociationPR_*_*',
        'keep *_tracksterSimTracksterAssociationLinkingPU_*_*',
        'keep *_tracksterSimTracksterAssociationPRPU_*_*',
        'keep *_tracksterSimTracksterAssociationLinkingbyCLUE3D_*_*',
        'keep *_tracksterSimTracksterAssociationPRbyCLUE3D_*_*'
    )
)

process.TICL_FEVTHLT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_hltTiclTrackstersCLUE3DHigh_*_*',
        'keep *_hltTiclTrackstersMerge_*_*',
        'keep *_hltPfTICL_*_*',
        'keep *_ticlSimTracksters_*_*',
        'keep *_ticlSimTICLCandidates_*_*',
        'keep *_ticlSimTrackstersFromCP_*_*',
        'keep *_SimTau*_*_*',
        'keep *_ticlTrackstersCLUE3DHigh_*_*',
        'keep *_ticlTrackstersMerge_*_*',
        'keep *_ticlTrackstersHFNoseTrkEM_*_*',
        'keep *_ticlTrackstersHFNoseEM_*_*',
        'keep *_ticlTrackstersHFNoseTrk_*_*',
        'keep *_ticlTrackstersHFNoseMIP_*_*',
        'keep *_ticlTrackstersHFNoseHAD_*_*',
        'keep *_ticlTrackstersHFNoseMerge_*_*',
        'keep *_pfTICL_*_*',
        'keep CaloParticles_mix_*_*',
        'keep SimClusters_mix_*_*',
        'keep *_layerClusterSimClusterAssociationProducer_*_*',
        'keep *_layerClusterCaloParticleAssociationProducer_*_*',
        'keep *_layerClusterSimTracksterAssociationProducer_*_*',
        'keep *_tracksterSimTracksterAssociationLinking_*_*',
        'keep *_tracksterSimTracksterAssociationPR_*_*',
        'keep *_tracksterSimTracksterAssociationLinkingPU_*_*',
        'keep *_tracksterSimTracksterAssociationPRPU_*_*',
        'keep *_tracksterSimTracksterAssociationLinkingbyCLUE3D_*_*',
        'keep *_tracksterSimTracksterAssociationPRbyCLUE3D_*_*'
    )
)

process.TICL_RECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_ticlTrackstersCLUE3DHigh_*_*',
        'keep *_ticlTrackstersMerge_*_*',
        'keep *_ticlTrackstersHFNoseTrkEM_*_*',
        'keep *_ticlTrackstersHFNoseEM_*_*',
        'keep *_ticlTrackstersHFNoseTrk_*_*',
        'keep *_ticlTrackstersHFNoseMIP_*_*',
        'keep *_ticlTrackstersHFNoseHAD_*_*',
        'keep *_ticlTrackstersHFNoseMerge_*_*',
        'keep *_pfTICL_*_*',
        'keep CaloParticles_mix_*_*',
        'keep SimClusters_mix_*_*',
        'keep *_layerClusterSimClusterAssociationProducer_*_*',
        'keep *_layerClusterCaloParticleAssociationProducer_*_*',
        'keep *_layerClusterSimTracksterAssociationProducer_*_*',
        'keep *_tracksterSimTracksterAssociationLinking_*_*',
        'keep *_tracksterSimTracksterAssociationPR_*_*',
        'keep *_tracksterSimTracksterAssociationLinkingPU_*_*',
        'keep *_tracksterSimTracksterAssociationPRPU_*_*',
        'keep *_tracksterSimTracksterAssociationLinkingbyCLUE3D_*_*',
        'keep *_tracksterSimTracksterAssociationPRbyCLUE3D_*_*'
    )
)

process.TICLv5_FEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_ticlSimTracksters_*_*',
        'keep *_ticlSimTICLCandidates_*_*',
        'keep *_ticlSimTrackstersFromCP_*_*',
        'keep *_tracksterSimTracksterAssociationLinkingSuperclustering_*_*',
        'keep *_tracksterSimTracksterAssociationPRSuperclustering_*_*',
        'drop *_ticlTracksters*_*_*',
        'keep *_ticlTrackstersCLUE3DHigh_*_*',
        'keep *_ticlTracksterLinks_*_*',
        'keep *_ticlTracksterLinksSuperclustering*_*_*',
        'keep *_ticlCandidate_*_*'
    )
)

process.TICLv5_FEVTHLT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *_hltTiclTracksters*_*_*',
        'keep *_hltTiclTrackstersCLUE3D*_*_*',
        'keep *_hltTiclTracksterLinks_*_*',
        'keep *_hltTiclCandidate_*_*',
        'keep *_hltPfTICL_*_*',
        'keep *_ticlSimTracksters_*_*',
        'keep *_ticlSimTICLCandidates_*_*',
        'keep *_ticlSimTrackstersFromCP_*_*',
        'keep *_tracksterSimTracksterAssociationLinkingSuperclustering_*_*',
        'keep *_tracksterSimTracksterAssociationPRSuperclustering_*_*',
        'drop *_ticlTracksters*_*_*',
        'keep *_ticlTrackstersCLUE3DHigh_*_*',
        'keep *_ticlTracksterLinks_*_*',
        'keep *_ticlTracksterLinksSuperclustering*_*_*',
        'keep *_ticlCandidate_*_*'
    )
)

process.TICLv5_RECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *_ticlTracksters*_*_*',
        'keep *_ticlTrackstersCLUE3DHigh_*_*',
        'keep *_ticlTracksterLinks_*_*',
        'keep *_ticlTracksterLinksSuperclustering*_*_*',
        'keep *_ticlCandidate_*_*'
    )
)

process.TSPhiParametersBlock = cms.PSet(
    TSPhiParameters = cms.PSet(
        Debug = cms.untracked.bool(False),
        TSMCCE1 = cms.bool(True),
        TSMCCE2 = cms.bool(False),
        TSMCCEC = cms.bool(False),
        TSMCGS1 = cms.bool(True),
        TSMCGS2 = cms.bool(True),
        TSMGS1 = cms.int32(1),
        TSMGS2 = cms.int32(1),
        TSMHSP = cms.int32(1),
        TSMHTE1 = cms.bool(True),
        TSMHTE2 = cms.bool(False),
        TSMHTEC = cms.bool(False),
        TSMMSK1 = cms.int32(312),
        TSMMSK2 = cms.int32(312),
        TSMNOE1 = cms.bool(True),
        TSMNOE2 = cms.bool(False),
        TSMNOEC = cms.bool(False),
        TSMWORD = cms.int32(255),
        TSSCCE1 = cms.bool(True),
        TSSCCE2 = cms.bool(False),
        TSSCCEC = cms.bool(False),
        TSSCGS1 = cms.bool(True),
        TSSCGS2 = cms.bool(True),
        TSSGS1 = cms.int32(1),
        TSSGS2 = cms.int32(1),
        TSSHTE1 = cms.bool(True),
        TSSHTE2 = cms.bool(False),
        TSSHTEC = cms.bool(False),
        TSSMSK1 = cms.int32(312),
        TSSMSK2 = cms.int32(312),
        TSSNOE1 = cms.bool(True),
        TSSNOE2 = cms.bool(False),
        TSSNOEC = cms.bool(False),
        TSTREN0 = cms.bool(True),
        TSTREN1 = cms.bool(True),
        TSTREN10 = cms.bool(True),
        TSTREN11 = cms.bool(True),
        TSTREN12 = cms.bool(True),
        TSTREN13 = cms.bool(True),
        TSTREN14 = cms.bool(True),
        TSTREN15 = cms.bool(True),
        TSTREN16 = cms.bool(True),
        TSTREN17 = cms.bool(True),
        TSTREN18 = cms.bool(True),
        TSTREN19 = cms.bool(True),
        TSTREN2 = cms.bool(True),
        TSTREN20 = cms.bool(True),
        TSTREN21 = cms.bool(True),
        TSTREN22 = cms.bool(True),
        TSTREN23 = cms.bool(True),
        TSTREN3 = cms.bool(True),
        TSTREN4 = cms.bool(True),
        TSTREN5 = cms.bool(True),
        TSTREN6 = cms.bool(True),
        TSTREN7 = cms.bool(True),
        TSTREN8 = cms.bool(True),
        TSTREN9 = cms.bool(True)
    )
)

process.TSThetaParametersBlock = cms.PSet(
    TSThetaParameters = cms.PSet(
        Debug = cms.untracked.bool(False)
    )
)

process.TUParamsBlock = cms.PSet(
    Debug = cms.untracked.bool(False)
)

process.TcdsEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_tcdsDigis_*_*')
)

process.TrackQualityParams = cms.PSet(
    featureNames = cms.vstring(
        'tanl',
        'z0_scaled',
        'bendchi2_bin',
        'nstub',
        'nlaymiss_interior',
        'chi2rphi_bin',
        'chi2rz_bin'
    ),
    model = cms.FileInPath('L1Trigger/TrackTrigger/data/L1_TrackQuality_GBDT_emulation_digitized.json'),
    tqemu_TanlScale = cms.double(128.0),
    tqemu_Z0Scale = cms.double(64.0)
)

process.TrackerDTCProducer_params = cms.PSet(
    BranchAccepted = cms.string('StubAccepted'),
    BranchLost = cms.string('StubLost'),
    CheckHistory = cms.bool(False),
    EnableTruncation = cms.bool(True),
    InputTag = cms.InputTag("TTStubsFromPhase2TrackerDigis","StubAccepted"),
    UseHybrid = cms.bool(True)
)

process.TrackingToolsAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoTracks_GsfGlobalElectronTest_*_*',
        'keep recoGsfTracks_electronGsfTracks_*_*'
    )
)

process.TrackingToolsFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_electronGsfTracks_*_*',
        'keep *_CkfElectronCandidates_*_*',
        'keep *_GsfGlobalElectronTest_*_*',
        'keep *_electronMergedSeeds_*_*',
        'keep recoGsfTrackExtras_electronGsfTracks_*_*',
        'keep recoTrackExtras_electronGsfTracks_*_*',
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*',
        'keep recoTracks_GsfGlobalElectronTest_*_*',
        'keep recoGsfTracks_electronGsfTracks_*_*'
    )
)

process.TrackingToolsRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_CkfElectronCandidates_*_*',
        'keep *_GsfGlobalElectronTest_*_*',
        'keep *_electronMergedSeeds_*_*',
        'keep recoGsfTrackExtras_electronGsfTracks_*_*',
        'keep recoTrackExtras_electronGsfTracks_*_*',
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*',
        'keep recoTracks_GsfGlobalElectronTest_*_*',
        'keep recoGsfTracks_electronGsfTracks_*_*'
    )
)

process.TracoParametersBlock = cms.PSet(
    TracoParameters = cms.PSet(
        BTIC = cms.int32(32),
        DD = cms.int32(18),
        Debug = cms.untracked.int32(0),
        FHISM = cms.int32(0),
        FHTMSK = cms.int32(0),
        FHTPRF = cms.int32(1),
        FLTMSK = cms.int32(1),
        FPRGCOMP = cms.int32(2),
        FSLMSK = cms.int32(0),
        IBTIOFF = cms.int32(0),
        KPRGCOM = cms.int32(255),
        KRAD = cms.int32(0),
        LTF = cms.int32(0),
        LTS = cms.int32(0),
        LVALIDIFH = cms.int32(0),
        REUSEI = cms.int32(1),
        REUSEO = cms.int32(1),
        SHISM = cms.int32(0),
        SHTMSK = cms.int32(0),
        SHTPRF = cms.int32(1),
        SLTMSK = cms.int32(1),
        SPRGCOMP = cms.int32(2),
        SSLMSK = cms.int32(0),
        TRGENB0 = cms.int32(1),
        TRGENB1 = cms.int32(1),
        TRGENB10 = cms.int32(1),
        TRGENB11 = cms.int32(1),
        TRGENB12 = cms.int32(1),
        TRGENB13 = cms.int32(1),
        TRGENB14 = cms.int32(1),
        TRGENB15 = cms.int32(1),
        TRGENB2 = cms.int32(1),
        TRGENB3 = cms.int32(1),
        TRGENB4 = cms.int32(1),
        TRGENB5 = cms.int32(1),
        TRGENB6 = cms.int32(1),
        TRGENB7 = cms.int32(1),
        TRGENB8 = cms.int32(1),
        TRGENB9 = cms.int32(1)
    )
)

process.TrajectoryFilterForConversions = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(1),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(-1),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(-1),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.TrajectoryFilterForElectrons = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(1),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(-1),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(-1),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(2.0),
    minimumNumberOfHits = cms.int32(5),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.apd_sim_parameters = cms.PSet(
    apdAddToBarrel = cms.bool(False),
    apdDigiTag = cms.string('APD'),
    apdDoPEStats = cms.bool(True),
    apdNonlParms = cms.vdouble(
        1.48, -3.75, 1.81, 1.26, 2.0,
        45, 1.0
    ),
    apdSeparateDigi = cms.bool(True),
    apdShapeTau = cms.double(40.5),
    apdShapeTstart = cms.double(74.5),
    apdSimToPEHigh = cms.double(88200000.0),
    apdSimToPELow = cms.double(2450000.0),
    apdTimeOffWidth = cms.double(0.8),
    apdTimeOffset = cms.double(-13.5)
)

process.autoEncoder_conc_proc = cms.PSet(
    Method = cms.vstring(
        'autoEncoder',
        'autoEncoder',
        'thresholdSelect'
    ),
    ProcessorName = cms.string('HGCalConcentratorProcessorSelection'),
    allTrigCellsInTrigSums = cms.bool(False),
    bitShiftNormalization = cms.bool(True),
    bitsPerLink = cms.vint32(
        0, 1, 3, 5, 7,
        9, 9, 9, 9, 9,
        9, 9, 9, 9, 9
    ),
    cellRemap = cms.vint32(
        0, 16, 32, 1, 17,
        33, 2, 18, 34, 3,
        19, 35, 4, 20, 36,
        5, 21, 37, 6, 22,
        38, 7, 23, 39, 8,
        24, 40, 9, 25, 41,
        10, 26, 42, 11, 27,
        43, 12, 28, 44, 13,
        29, 45, 14, 30, 46,
        15, 31, 47
    ),
    cellRemapNoDuplicates = cms.vint32(
        0, 16, 32, 1, 17,
        33, 2, 18, 34, 3,
        19, 35, 4, 20, 36,
        5, 21, 37, 6, 22,
        38, 7, 23, 39, 8,
        24, 40, 9, 25, 41,
        10, 26, 42, 11, 27,
        43, 12, 28, 44, 13,
        29, 45, 14, 30, 46,
        15, 31, 47
    ),
    coarseTCCompression = cms.PSet(
        exponentBits = cms.uint32(4),
        mantissaBits = cms.uint32(3),
        rounding = cms.bool(True),
        truncationBits = cms.uint32(0)
    ),
    coarsenTriggerCells = cms.vuint32(0, 0, 0),
    ctcSize = cms.vuint32(
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2
    ),
    decoderShape = cms.vuint32(1, 16),
    encoderShape = cms.vuint32(1, 4, 4, 3),
    fixedDataSizePerHGCROC = cms.bool(False),
    linkToGraphMap = cms.vuint32(
        0, 0, 0, 1, 2,
        3, 3, 3, 3, 3,
        3, 3, 3, 3, 3
    ),
    maxBitsPerOutput = cms.int32(9),
    modelFiles = cms.VPSet(
        cms.PSet(
            decoderModelFile = cms.FileInPath('L1Trigger/L1THGCal/data/decoder_2eLinks_PUdriven_constantgraph.pb'),
            encoderModelFile = cms.FileInPath('L1Trigger/L1THGCal/data/encoder_2eLinks_PUdriven_constantgraph.pb')
        ),
        cms.PSet(
            decoderModelFile = cms.FileInPath('L1Trigger/L1THGCal/data/decoder_3eLinks_PUdriven_constantgraph.pb'),
            encoderModelFile = cms.FileInPath('L1Trigger/L1THGCal/data/encoder_3eLinks_PUdriven_constantgraph.pb')
        ),
        cms.PSet(
            decoderModelFile = cms.FileInPath('L1Trigger/L1THGCal/data/decoder_4eLinks_PUdriven_constantgraph.pb'),
            encoderModelFile = cms.FileInPath('L1Trigger/L1THGCal/data/encoder_4eLinks_PUdriven_constantgraph.pb')
        ),
        cms.PSet(
            decoderModelFile = cms.FileInPath('L1Trigger/L1THGCal/data/decoder_5eLinks_PUdriven_constantgraph.pb'),
            encoderModelFile = cms.FileInPath('L1Trigger/L1THGCal/data/encoder_5eLinks_PUdriven_constantgraph.pb')
        )
    ),
    nBitsPerInput = cms.int32(8),
    preserveModuleSum = cms.bool(True),
    saveEncodedValues = cms.bool(False),
    stcSize = cms.vuint32(
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16
    ),
    superTCCalibration = cms.PSet(
        ProcessorName = cms.string('HGCalVFEProcessorSums'),
        calibrationCfg_ee = cms.PSet(
            chargeCollectionEfficiency = cms.PSet(
                refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
            ),
            dEdXweights = cms.vdouble(
                0, 9.205, 0, 22.259999999999998, 0,
                22.259999999999998, 0, 22.259999999999998, 0, 22.259999999999998,
                0, 22.259999999999998, 0, 22.259999999999998, 0,
                22.259999999999998, 0, 22.259999999999998, 0, 26.4,
                0, 26.4, 0, 26.4, 0,
                26.4, 0, 95.41000000000001, 60.7, 60.7,
                60.7, 60.7, 60.7, 60.7, 60.7,
                60.7, 60.7, 71.89, 83.08, 83.255,
                83.52000000000001, 83.61, 83.61, 83.61, 83.61,
                83.61, 83.61, 83.61
            ),
            fCperMIP = cms.vdouble(2.06, 3.43, 5.15),
            lsb = cms.double(0.09765625),
            thicknessCorrection = cms.vdouble(0.75, 0.76, 0.75)
        ),
        calibrationCfg_hesc = cms.PSet(
            chargeCollectionEfficiency = cms.PSet(
                values = cms.vdouble(1.0)
            ),
            dEdXweights = cms.vdouble(
                0, 9.205, 0, 22.259999999999998, 0,
                22.259999999999998, 0, 22.259999999999998, 0, 22.259999999999998,
                0, 22.259999999999998, 0, 22.259999999999998, 0,
                22.259999999999998, 0, 22.259999999999998, 0, 26.4,
                0, 26.4, 0, 26.4, 0,
                26.4, 0, 95.41000000000001, 60.7, 60.7,
                60.7, 60.7, 60.7, 60.7, 60.7,
                60.7, 60.7, 71.89, 83.08, 83.255,
                83.52000000000001, 83.61, 83.61, 83.61, 83.61,
                83.61, 83.61, 83.61
            ),
            fCperMIP = cms.vdouble(1.0),
            lsb = cms.double(0.067138671875),
            thicknessCorrection = cms.vdouble(0.69)
        ),
        calibrationCfg_hesi = cms.PSet(
            chargeCollectionEfficiency = cms.PSet(
                refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
            ),
            dEdXweights = cms.vdouble(
                0, 9.205, 0, 22.259999999999998, 0,
                22.259999999999998, 0, 22.259999999999998, 0, 22.259999999999998,
                0, 22.259999999999998, 0, 22.259999999999998, 0,
                22.259999999999998, 0, 22.259999999999998, 0, 26.4,
                0, 26.4, 0, 26.4, 0,
                26.4, 0, 95.41000000000001, 60.7, 60.7,
                60.7, 60.7, 60.7, 60.7, 60.7,
                60.7, 60.7, 71.89, 83.08, 83.255,
                83.52000000000001, 83.61, 83.61, 83.61, 83.61,
                83.61, 83.61, 83.61
            ),
            fCperMIP = cms.vdouble(2.06, 3.43, 5.15),
            lsb = cms.double(0.09765625),
            thicknessCorrection = cms.vdouble(0.85, 0.85, 0.84)
        ),
        calibrationCfg_nose = cms.PSet(
            chargeCollectionEfficiency = cms.PSet(
                refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
            ),
            dEdXweights = cms.vdouble(
                0.0, 39.500245, 39.756638, 39.756638, 39.756638,
                39.756638, 66.020266, 92.283895, 92.283895
            ),
            fCperMIP = cms.vdouble(1.25, 2.57, 3.88),
            lsb = cms.double(0.09765625),
            thicknessCorrection = cms.vdouble(1.132, 1.092, 1.084)
        ),
        compressionCfg_hdm = cms.PSet(
            exponentBits = cms.uint32(4),
            mantissaBits = cms.uint32(3),
            rounding = cms.bool(True),
            truncationBits = cms.uint32(3)
        ),
        compressionCfg_ldm = cms.PSet(
            exponentBits = cms.uint32(4),
            mantissaBits = cms.uint32(3),
            rounding = cms.bool(True),
            truncationBits = cms.uint32(1)
        ),
        linearizationCfg_sc = cms.PSet(
            adcnBits = cms.uint32(10),
            adcsaturation = cms.double(68.75),
            linLSB = cms.double(0.067138671875),
            linnBits = cms.uint32(17),
            oot_coefficients = cms.vdouble(0.0, 0.0),
            tdcOnset = cms.double(55),
            tdcnBits = cms.uint32(12),
            tdcsaturation = cms.double(1000)
        ),
        linearizationCfg_si = cms.PSet(
            adcnBits = cms.uint32(10),
            adcsaturation = cms.double(100),
            linLSB = cms.double(0.09765625),
            linnBits = cms.uint32(17),
            oot_coefficients = cms.vdouble(0.0, 0.0),
            tdcOnset = cms.double(60),
            tdcnBits = cms.uint32(12),
            tdcsaturation = cms.double(10000)
        ),
        summationCfg = cms.PSet(
            noiseScintillator = cms.PSet(
                refToPSet_ = cms.string('HGCAL_noise_heback')
            ),
            noiseSilicon = cms.PSet(
                refToPSet_ = cms.string('HGCAL_noise_fC')
            ),
            noiseThreshold = cms.double(3),
            scintillatorCellLSB_MIP = cms.double(0.067138671875),
            siliconCellLSB_fC = cms.double(0.09765625)
        )
    ),
    superTCCompression = cms.PSet(
        exponentBits = cms.uint32(4),
        mantissaBits = cms.uint32(5),
        rounding = cms.bool(True),
        truncationBits = cms.uint32(0)
    ),
    threshold_scintillator = cms.double(2.0),
    threshold_silicon = cms.double(2.0),
    type_energy_division = cms.string('superTriggerCell'),
    zeroSuppresionThreshold = cms.double(0.1)
)

process.autoEncoder_training_2eLinks = cms.PSet(
    decoderModelFile = cms.FileInPath('L1Trigger/L1THGCal/data/decoder_2eLinks_PUdriven_constantgraph.pb'),
    encoderModelFile = cms.FileInPath('L1Trigger/L1THGCal/data/encoder_2eLinks_PUdriven_constantgraph.pb')
)

process.autoEncoder_training_3eLinks = cms.PSet(
    decoderModelFile = cms.FileInPath('L1Trigger/L1THGCal/data/decoder_3eLinks_PUdriven_constantgraph.pb'),
    encoderModelFile = cms.FileInPath('L1Trigger/L1THGCal/data/encoder_3eLinks_PUdriven_constantgraph.pb')
)

process.autoEncoder_training_4eLinks = cms.PSet(
    decoderModelFile = cms.FileInPath('L1Trigger/L1THGCal/data/decoder_4eLinks_PUdriven_constantgraph.pb'),
    encoderModelFile = cms.FileInPath('L1Trigger/L1THGCal/data/encoder_4eLinks_PUdriven_constantgraph.pb')
)

process.autoEncoder_training_5eLinks = cms.PSet(
    decoderModelFile = cms.FileInPath('L1Trigger/L1THGCal/data/decoder_5eLinks_PUdriven_constantgraph.pb'),
    encoderModelFile = cms.FileInPath('L1Trigger/L1THGCal/data/encoder_5eLinks_PUdriven_constantgraph.pb')
)

process.be_proc = cms.PSet(
    C3d_parameters = cms.PSet(
        histoMax_C3d_clustering_parameters = cms.PSet(
            AlgoName = cms.string('HGCalHistoClusteringWrapper'),
            EGIdentification = cms.PSet(
                CategoriesEtaMax = cms.vdouble(2.7, 3.0),
                CategoriesEtaMin = cms.vdouble(1.5, 2.7),
                CategoriesPtMax = cms.vdouble(1000000.0, 1000000.0),
                CategoriesPtMin = cms.vdouble(0.0, 0.0),
                Inputs = cms.vstring(
                    'cl3d_coreshowerlength',
                    'cl3d_showerlength',
                    'cl3d_firstlayer',
                    'cl3d_maxlayer',
                    'cl3d_szz',
                    'cl3d_srrmean',
                    'cl3d_srrtot',
                    'cl3d_seetot',
                    'cl3d_spptot'
                ),
                Weights = cms.vstring(
                    'L1Trigger/L1THGCal/data/egamma_id_histomax_3151_loweta_v0.xml',
                    'L1Trigger/L1THGCal/data/egamma_id_histomax_3151_higheta_v0.xml'
                ),
                WorkingPoints = cms.VPSet(
                    cms.PSet(
                        Name = cms.string('tight'),
                        WorkingPoint = cms.vdouble(0.8292287, 0.9932326)
                    ),
                    cms.PSet(
                        Name = cms.string('loose'),
                        WorkingPoint = cms.vdouble(-0.7099538, 0.9611762)
                    )
                )
            ),
            cluster_association = cms.string('NearestNeighbour'),
            dR_multicluster = cms.double(0.0),
            dR_multicluster_byLayer_coefficientA = cms.vdouble(
                0, 0.015, 0.015, 0.015, 0.015,
                0.015, 0.015, 0.015, 0.02, 0.02,
                0.02, 0.02, 0.02, 0.02, 0.02,
                0.03, 0.03, 0.03, 0.03, 0.03,
                0.03, 0.03, 0.04, 0.04, 0.04,
                0.04, 0.04, 0.04, 0.04, 0.04,
                0.04, 0.04, 0.04, 0.04, 0.04,
                0.05, 0.05, 0.05, 0.05, 0.05,
                0.05, 0.05, 0.05, 0.05, 0.05,
                0.05, 0.05, 0.05, 0.05, 0.05,
                0.05, 0.05, 0.05
            ),
            dR_multicluster_byLayer_coefficientB = cms.vdouble(
                0, 0, 0, 0, 0,
                0, 0, 0, 0, 0,
                0, 0, 0, 0, 0,
                0, 0, 0, 0, 0,
                0, 0, 0, 0, 0,
                0, 0, 0, 0, 0,
                0, 0, 0, 0, 0,
                0, 0, 0, 0, 0,
                0, 0, 0, 0, 0,
                0, 0, 0, 0, 0,
                0, 0, 0
            ),
            minPt_multicluster = cms.double(0.5),
            shape_distance = cms.double(0.015),
            shape_threshold = cms.double(1.0)
        ),
        histoMax_C3d_seeding_parameters = cms.PSet(
            binSumsHisto = cms.vuint32(
                13, 11, 11, 11, 9,
                9, 9, 7, 7, 7,
                7, 7, 7, 5, 5,
                5, 5, 5, 5, 5,
                5, 5, 5, 5, 5,
                5, 5, 5, 3, 3,
                3, 3, 3, 3, 3,
                3, 3, 3, 3, 3,
                3, 3
            ),
            kROverZMax = cms.double(0.58),
            kROverZMin = cms.double(0.076),
            nBins_X1_histo_multicluster = cms.uint32(42),
            nBins_X2_histo_multicluster = cms.uint32(216),
            neighbour_weights = cms.vdouble(
                0, 0.25, 0, 0.25, 0,
                0.25, 0, 0.25, 0
            ),
            seed_position = cms.string('TCWeighted'),
            seed_smoothing_ecal = cms.vdouble(
                1.0, 1.0, 1.0, 1.0, 1.1,
                1.0, 1.0, 1.0, 1.0
            ),
            seed_smoothing_hcal = cms.vdouble(
                1.0, 1.0, 1.0, 1.0, 1.0,
                1.0, 1.0, 1.0, 1.0, 1.0,
                1.0, 1.0, 2.0, 1.0, 1.0,
                1.0, 1.0, 1.0, 1.0, 1.0,
                1.0, 1.0, 1.0, 1.0, 1.0
            ),
            seeding_space = cms.string('RPhi'),
            seeds_norm_by_area = cms.bool(False),
            threshold_histo_multicluster = cms.double(20.0),
            type_histoalgo = cms.string('HistoMaxC3d')
        ),
        histoMax_C3d_sorting_truncation_parameters = cms.PSet(
            AlgoName = cms.string('HGCalSortingTruncationWrapper'),
            maxTCs = cms.uint32(80)
        ),
        type_multicluster = cms.string('Histo')
    ),
    ProcessorName = cms.string('HGCalBackendLayer2Processor3DClustering'),
    energy_interpretations = cms.VPSet(cms.PSet(
        dr_bylayer = cms.vdouble(
            0.015, 0.015, 0.015, 0.015, 0.015,
            0.015, 0.015, 0.015, 0.015, 0.015,
            0.015, 0.015, 0.015, 0.015, 0.015
        ),
        layer_containment_corrs = cms.vdouble(
            0.0, 0.0, 1.28, 1.09, 1.0,
            1.07, 1.09, 1.04, 1.0, 1.09,
            1.07, 1.03, 0.93, 1.4, 1.89
        ),
        scale_correction_coeff = cms.vdouble(52.99, -24.96),
        type = cms.string('HGCalTriggerClusterInterpretationEM')
    ))
)

process.best_conc_proc = cms.PSet(
    Method = cms.vstring(
        'bestChoiceSelect',
        'bestChoiceSelect',
        'bestChoiceSelect'
    ),
    NData = cms.vuint32(
        1, 4, 6, 9, 14,
        18, 23, 28, 32, 37,
        41, 46, 48, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0
    ),
    ProcessorName = cms.string('HGCalConcentratorProcessorSelection'),
    allTrigCellsInTrigSums = cms.bool(False),
    coarseTCCompression = cms.PSet(
        exponentBits = cms.uint32(4),
        mantissaBits = cms.uint32(3),
        rounding = cms.bool(True),
        truncationBits = cms.uint32(0)
    ),
    coarsenTriggerCells = cms.vuint32(0, 0, 0),
    ctcSize = cms.vuint32(
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2
    ),
    fixedDataSizePerHGCROC = cms.bool(False),
    superTCCalibration_ee = cms.PSet(
        chargeCollectionEfficiency = cms.PSet(
            refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
        ),
        dEdXweights = cms.vdouble(
            0, 9.205, 0, 22.259999999999998, 0,
            22.259999999999998, 0, 22.259999999999998, 0, 22.259999999999998,
            0, 22.259999999999998, 0, 22.259999999999998, 0,
            22.259999999999998, 0, 22.259999999999998, 0, 26.4,
            0, 26.4, 0, 26.4, 0,
            26.4, 0, 95.41000000000001, 60.7, 60.7,
            60.7, 60.7, 60.7, 60.7, 60.7,
            60.7, 60.7, 71.89, 83.08, 83.255,
            83.52000000000001, 83.61, 83.61, 83.61, 83.61,
            83.61, 83.61, 83.61
        ),
        fCperMIP = cms.vdouble(2.06, 3.43, 5.15),
        lsb = cms.double(0.09765625),
        thicknessCorrection = cms.vdouble(0.75, 0.76, 0.75)
    ),
    superTCCalibration_hesc = cms.PSet(
        chargeCollectionEfficiency = cms.PSet(
            values = cms.vdouble(1.0)
        ),
        dEdXweights = cms.vdouble(
            0, 9.205, 0, 22.259999999999998, 0,
            22.259999999999998, 0, 22.259999999999998, 0, 22.259999999999998,
            0, 22.259999999999998, 0, 22.259999999999998, 0,
            22.259999999999998, 0, 22.259999999999998, 0, 26.4,
            0, 26.4, 0, 26.4, 0,
            26.4, 0, 95.41000000000001, 60.7, 60.7,
            60.7, 60.7, 60.7, 60.7, 60.7,
            60.7, 60.7, 71.89, 83.08, 83.255,
            83.52000000000001, 83.61, 83.61, 83.61, 83.61,
            83.61, 83.61, 83.61
        ),
        fCperMIP = cms.vdouble(1.0),
        lsb = cms.double(0.067138671875),
        thicknessCorrection = cms.vdouble(0.69)
    ),
    superTCCalibration_hesi = cms.PSet(
        chargeCollectionEfficiency = cms.PSet(
            refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
        ),
        dEdXweights = cms.vdouble(
            0, 9.205, 0, 22.259999999999998, 0,
            22.259999999999998, 0, 22.259999999999998, 0, 22.259999999999998,
            0, 22.259999999999998, 0, 22.259999999999998, 0,
            22.259999999999998, 0, 22.259999999999998, 0, 26.4,
            0, 26.4, 0, 26.4, 0,
            26.4, 0, 95.41000000000001, 60.7, 60.7,
            60.7, 60.7, 60.7, 60.7, 60.7,
            60.7, 60.7, 71.89, 83.08, 83.255,
            83.52000000000001, 83.61, 83.61, 83.61, 83.61,
            83.61, 83.61, 83.61
        ),
        fCperMIP = cms.vdouble(2.06, 3.43, 5.15),
        lsb = cms.double(0.09765625),
        thicknessCorrection = cms.vdouble(0.85, 0.85, 0.84)
    ),
    superTCCalibration_nose = cms.PSet(
        chargeCollectionEfficiency = cms.PSet(
            refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
        ),
        dEdXweights = cms.vdouble(
            0.0, 39.500245, 39.756638, 39.756638, 39.756638,
            39.756638, 66.020266, 92.283895, 92.283895
        ),
        fCperMIP = cms.vdouble(1.25, 2.57, 3.88),
        lsb = cms.double(0.09765625),
        thicknessCorrection = cms.vdouble(1.132, 1.092, 1.084)
    )
)

process.bmtfKalmanTrackingSettings = cms.PSet(
    aPhi = cms.vdouble(1.942, 0.01511, 0.01476, 0.009799),
    aPhiB = cms.vdouble(-1.508, -0.1237, -0.1496, -0.1333),
    aPhiBNLO = cms.vdouble(0.000331, 0, 0, 0),
    bPhi = cms.vdouble(-1, 0.18245, 0.20898, 0.17286),
    bPhiB = cms.vdouble(-1, 1.18245, 1.20898, 1.17286),
    chiSquare = cms.vdouble(0.0, 0.109375, 0.234375, 0.359375),
    chiSquareCut = cms.vint32(126, 126, 126, 126, 126),
    chiSquareCutCurvMax = cms.vint32(2500, 2500, 2500, 2500, 2500),
    chiSquareCutPattern = cms.vint32(7, 11, 13, 14, 15),
    chiSquareCutTight = cms.vint32(
        40, 126, 60, 126, 126,
        126
    ),
    combos1 = cms.vint32(),
    combos2 = cms.vint32(3),
    combos3 = cms.vint32(5, 6, 7),
    combos4 = cms.vint32(
        9, 10, 11, 12, 13,
        14, 15
    ),
    eLoss = cms.vdouble(0.000765, 0, 0, 0),
    etaLUT0 = cms.vdouble(8.946, 7.508, 6.279, 6.399),
    etaLUT1 = cms.vdouble(0.159, 0.116, 0.088, 0.128),
    initialK = cms.vdouble(-1.196, -1.581, -2.133, -2.263),
    initialK2 = cms.vdouble(-0.000326, -0.0007165, 0.002305, -0.00563),
    lutFile = cms.string('L1Trigger/L1TMuon/data/bmtf_luts/kalmanLUTs_v302.root'),
    mScatteringPhi = cms.vdouble(0.00249, 5.47e-05, 3.49e-05, 1.37e-05),
    mScatteringPhiB = cms.vdouble(0.00722, 0.003461, 0.004447, 0.00412),
    phiAt2 = cms.double(0.15918),
    pointResolutionPhi = cms.double(1.0),
    pointResolutionPhiB = cms.double(500.0),
    pointResolutionPhiBH = cms.vdouble(151.0, 173.0, 155.0, 153.0),
    pointResolutionPhiBL = cms.vdouble(17866.0, 19306.0, 23984.0, 23746.0),
    pointResolutionVertex = cms.double(1.0),
    trackComp = cms.vdouble(1.75, 1.25, 0.625, 0.25),
    trackCompCut = cms.vint32(
        15, 15, 15, 15, 15,
        15
    ),
    trackCompCutCurvMax = cms.vint32(
        34, 34, 34, 34, 34,
        34
    ),
    trackCompCutPattern = cms.vint32(
        3, 5, 6, 9, 10,
        12
    ),
    trackCompErr1 = cms.vdouble(2.0, 2.0, 2.0, 2.0),
    trackCompErr2 = cms.vdouble(0.21875, 0.21875, 0.21875, 0.3125),
    useNewQualityCalculation = cms.bool(False),
    useOfflineAlgo = cms.bool(False),
    verbose = cms.bool(False)
)

process.c2d_calib_pset = cms.PSet(
    applyLayerCalibration = cms.bool(False),
    calibSF_cluster = cms.double(1.0),
    layerWeights = cms.vdouble(
        0.0, 0.0183664, 0.0, 0.0305622, 0.0,
        0.0162589, 0.0, 0.0143918, 0.0, 0.0134475,
        0.0, 0.0185754, 0.0, 0.0204934, 0.0,
        0.016901, 0.0, 0.0207958, 0.0, 0.0167985,
        0.0, 0.0238385, 0.0, 0.0301146, 0.0,
        0.0274622, 0.0, 0.0468671, 0.0, 0.078819,
        0.0555831, 0.0609312, 0.0610768, 0.0657626, 0.0465653,
        0.0629383, 0.0610061, 0.0517326, 0.0492882, 0.0699336,
        0.0673457, 0.119896, 0.125327, 0.143235, 0.153295,
        0.104777, 0.109345, 0.161386, 0.174656, 0.108053,
        0.121674, 0.1171, 0.328053
    )
)

process.c2d_thresholds_pset = cms.PSet(
    clustering_threshold_scintillator = cms.double(1.5),
    clustering_threshold_silicon = cms.double(1.5),
    seeding_threshold_scintillator = cms.double(3.75),
    seeding_threshold_silicon = cms.double(3.75)
)

process.calibration_params_ee = cms.PSet(
    chargeCollectionEfficiency = cms.PSet(
        refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
    ),
    dEdXweights = cms.vdouble(
        0, 9.205, 0, 22.259999999999998, 0,
        22.259999999999998, 0, 22.259999999999998, 0, 22.259999999999998,
        0, 22.259999999999998, 0, 22.259999999999998, 0,
        22.259999999999998, 0, 22.259999999999998, 0, 26.4,
        0, 26.4, 0, 26.4, 0,
        26.4, 0, 95.41000000000001, 60.7, 60.7,
        60.7, 60.7, 60.7, 60.7, 60.7,
        60.7, 60.7, 71.89, 83.08, 83.255,
        83.52000000000001, 83.61, 83.61, 83.61, 83.61,
        83.61, 83.61, 83.61
    ),
    fCperMIP = cms.vdouble(2.06, 3.43, 5.15),
    lsb = cms.double(0.09765625),
    thicknessCorrection = cms.vdouble(0.75, 0.76, 0.75)
)

process.calibration_params_hesc = cms.PSet(
    chargeCollectionEfficiency = cms.PSet(
        values = cms.vdouble(1.0)
    ),
    dEdXweights = cms.vdouble(
        0, 9.205, 0, 22.259999999999998, 0,
        22.259999999999998, 0, 22.259999999999998, 0, 22.259999999999998,
        0, 22.259999999999998, 0, 22.259999999999998, 0,
        22.259999999999998, 0, 22.259999999999998, 0, 26.4,
        0, 26.4, 0, 26.4, 0,
        26.4, 0, 95.41000000000001, 60.7, 60.7,
        60.7, 60.7, 60.7, 60.7, 60.7,
        60.7, 60.7, 71.89, 83.08, 83.255,
        83.52000000000001, 83.61, 83.61, 83.61, 83.61,
        83.61, 83.61, 83.61
    ),
    fCperMIP = cms.vdouble(1.0),
    lsb = cms.double(0.067138671875),
    thicknessCorrection = cms.vdouble(0.69)
)

process.calibration_params_hesi = cms.PSet(
    chargeCollectionEfficiency = cms.PSet(
        refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
    ),
    dEdXweights = cms.vdouble(
        0, 9.205, 0, 22.259999999999998, 0,
        22.259999999999998, 0, 22.259999999999998, 0, 22.259999999999998,
        0, 22.259999999999998, 0, 22.259999999999998, 0,
        22.259999999999998, 0, 22.259999999999998, 0, 26.4,
        0, 26.4, 0, 26.4, 0,
        26.4, 0, 95.41000000000001, 60.7, 60.7,
        60.7, 60.7, 60.7, 60.7, 60.7,
        60.7, 60.7, 71.89, 83.08, 83.255,
        83.52000000000001, 83.61, 83.61, 83.61, 83.61,
        83.61, 83.61, 83.61
    ),
    fCperMIP = cms.vdouble(2.06, 3.43, 5.15),
    lsb = cms.double(0.09765625),
    thicknessCorrection = cms.vdouble(0.85, 0.85, 0.84)
)

process.calibration_params_nose = cms.PSet(
    chargeCollectionEfficiency = cms.PSet(
        refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
    ),
    dEdXweights = cms.vdouble(
        0.0, 39.500245, 39.756638, 39.756638, 39.756638,
        39.756638, 66.020266, 92.283895, 92.283895
    ),
    fCperMIP = cms.vdouble(1.25, 2.57, 3.88),
    lsb = cms.double(0.09765625),
    thicknessCorrection = cms.vdouble(1.132, 1.092, 1.084)
)

process.caloParticles = cms.PSet(
    HepMCProductLabel = cms.InputTag("generatorSmeared"),
    MaxPseudoRapidity = cms.double(5.0),
    MinEnergy = cms.double(0.5),
    accumulatorType = cms.string('CaloTruthAccumulator'),
    allowDifferentSimHitProcesses = cms.bool(False),
    doHGCAL = cms.bool(True),
    genParticleCollection = cms.InputTag("genParticles"),
    maximumPreviousBunchCrossing = cms.uint32(0),
    maximumSubsequentBunchCrossing = cms.uint32(0),
    premixStage1 = cms.bool(False),
    simHitCollections = cms.PSet(
        ecal = cms.VInputTag(cms.InputTag("g4SimHits","EcalHitsEB")),
        hcal = cms.VInputTag(cms.InputTag("g4SimHits","HcalHits")),
        hgc = cms.VInputTag(cms.InputTag("g4SimHits","HGCHitsEE"), cms.InputTag("g4SimHits","HGCHitsHEfront"), cms.InputTag("g4SimHits","HGCHitsHEback"))
    ),
    simTrackCollection = cms.InputTag("g4SimHits"),
    simVertexCollection = cms.InputTag("g4SimHits")
)

process.castorDigitizer = cms.PSet(
    accumulatorType = cms.string('CastorDigiProducer'),
    castor = cms.PSet(
        binOfMaximum = cms.int32(5),
        doPhotoStatistics = cms.bool(True),
        photoelectronsToAnalog = cms.double(4.1718),
        readoutFrameSize = cms.int32(6),
        samplingFactor = cms.double(0.062577),
        simHitToPhotoelectrons = cms.double(1000.0),
        syncPhase = cms.bool(True),
        timePhase = cms.double(-4.0)
    ),
    doNoise = cms.bool(True),
    doTimeSlew = cms.bool(True),
    hitsProducer = cms.InputTag("g4SimHits","CastorFI"),
    makeDigiSimLinks = cms.untracked.bool(False)
)

process.ckfBaseTrajectoryFilterP5 = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(3),
    maxLostHits = cms.int32(4),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.5),
    minimumNumberOfHits = cms.int32(5),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.ckfTrajectoryFilterBeamHaloMuon = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(2),
    maxLostHits = cms.int32(3),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.1),
    minimumNumberOfHits = cms.int32(4),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.coarseTCCompression_proc = cms.PSet(
    exponentBits = cms.uint32(4),
    mantissaBits = cms.uint32(3),
    rounding = cms.bool(True),
    truncationBits = cms.uint32(0)
)

process.coarsetc_equalshare_proc = cms.PSet(
    Method = cms.vstring(
        'superTriggerCellSelect',
        'superTriggerCellSelect',
        'superTriggerCellSelect'
    ),
    ProcessorName = cms.string('HGCalConcentratorProcessorSelection'),
    allTrigCellsInTrigSums = cms.bool(False),
    coarseTCCompression = cms.PSet(
        exponentBits = cms.uint32(4),
        mantissaBits = cms.uint32(3),
        rounding = cms.bool(True),
        truncationBits = cms.uint32(0)
    ),
    coarsenTriggerCells = cms.vuint32(0, 0, 0),
    ctcSize = cms.vuint32(
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2
    ),
    fixedDataSizePerHGCROC = cms.bool(True),
    stcSize = cms.vuint32(
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8
    ),
    superTCCalibration_ee = cms.PSet(
        chargeCollectionEfficiency = cms.PSet(
            refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
        ),
        dEdXweights = cms.vdouble(
            0, 9.205, 0, 22.259999999999998, 0,
            22.259999999999998, 0, 22.259999999999998, 0, 22.259999999999998,
            0, 22.259999999999998, 0, 22.259999999999998, 0,
            22.259999999999998, 0, 22.259999999999998, 0, 26.4,
            0, 26.4, 0, 26.4, 0,
            26.4, 0, 95.41000000000001, 60.7, 60.7,
            60.7, 60.7, 60.7, 60.7, 60.7,
            60.7, 60.7, 71.89, 83.08, 83.255,
            83.52000000000001, 83.61, 83.61, 83.61, 83.61,
            83.61, 83.61, 83.61
        ),
        fCperMIP = cms.vdouble(2.06, 3.43, 5.15),
        lsb = cms.double(0.09765625),
        thicknessCorrection = cms.vdouble(0.75, 0.76, 0.75)
    ),
    superTCCalibration_hesc = cms.PSet(
        chargeCollectionEfficiency = cms.PSet(
            values = cms.vdouble(1.0)
        ),
        dEdXweights = cms.vdouble(
            0, 9.205, 0, 22.259999999999998, 0,
            22.259999999999998, 0, 22.259999999999998, 0, 22.259999999999998,
            0, 22.259999999999998, 0, 22.259999999999998, 0,
            22.259999999999998, 0, 22.259999999999998, 0, 26.4,
            0, 26.4, 0, 26.4, 0,
            26.4, 0, 95.41000000000001, 60.7, 60.7,
            60.7, 60.7, 60.7, 60.7, 60.7,
            60.7, 60.7, 71.89, 83.08, 83.255,
            83.52000000000001, 83.61, 83.61, 83.61, 83.61,
            83.61, 83.61, 83.61
        ),
        fCperMIP = cms.vdouble(1.0),
        lsb = cms.double(0.067138671875),
        thicknessCorrection = cms.vdouble(0.69)
    ),
    superTCCalibration_hesi = cms.PSet(
        chargeCollectionEfficiency = cms.PSet(
            refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
        ),
        dEdXweights = cms.vdouble(
            0, 9.205, 0, 22.259999999999998, 0,
            22.259999999999998, 0, 22.259999999999998, 0, 22.259999999999998,
            0, 22.259999999999998, 0, 22.259999999999998, 0,
            22.259999999999998, 0, 22.259999999999998, 0, 26.4,
            0, 26.4, 0, 26.4, 0,
            26.4, 0, 95.41000000000001, 60.7, 60.7,
            60.7, 60.7, 60.7, 60.7, 60.7,
            60.7, 60.7, 71.89, 83.08, 83.255,
            83.52000000000001, 83.61, 83.61, 83.61, 83.61,
            83.61, 83.61, 83.61
        ),
        fCperMIP = cms.vdouble(2.06, 3.43, 5.15),
        lsb = cms.double(0.09765625),
        thicknessCorrection = cms.vdouble(0.85, 0.85, 0.84)
    ),
    superTCCalibration_nose = cms.PSet(
        chargeCollectionEfficiency = cms.PSet(
            refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
        ),
        dEdXweights = cms.vdouble(
            0.0, 39.500245, 39.756638, 39.756638, 39.756638,
            39.756638, 66.020266, 92.283895, 92.283895
        ),
        fCperMIP = cms.vdouble(1.25, 2.57, 3.88),
        lsb = cms.double(0.09765625),
        thicknessCorrection = cms.vdouble(1.132, 1.092, 1.084)
    ),
    superTCCompression = cms.PSet(
        exponentBits = cms.uint32(4),
        mantissaBits = cms.uint32(5),
        rounding = cms.bool(True),
        truncationBits = cms.uint32(0)
    ),
    type_energy_division = cms.string('equalShare')
)

process.coarsetc_onebitfraction_proc = cms.PSet(
    Method = cms.vstring(
        'superTriggerCellSelect',
        'superTriggerCellSelect',
        'superTriggerCellSelect'
    ),
    ProcessorName = cms.string('HGCalConcentratorProcessorSelection'),
    allTrigCellsInTrigSums = cms.bool(False),
    coarseTCCompression = cms.PSet(
        exponentBits = cms.uint32(4),
        mantissaBits = cms.uint32(3),
        rounding = cms.bool(True),
        truncationBits = cms.uint32(0)
    ),
    coarsenTriggerCells = cms.vuint32(0, 0, 0),
    ctcSize = cms.vuint32(
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2
    ),
    fixedDataSizePerHGCROC = cms.bool(True),
    oneBitFractionHighValue = cms.double(0.25),
    oneBitFractionLowValue = cms.double(0.0625),
    oneBitFractionThreshold = cms.double(0.125),
    stcSize = cms.vuint32(
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8
    ),
    superTCCalibration_ee = cms.PSet(
        chargeCollectionEfficiency = cms.PSet(
            refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
        ),
        dEdXweights = cms.vdouble(
            0, 9.205, 0, 22.259999999999998, 0,
            22.259999999999998, 0, 22.259999999999998, 0, 22.259999999999998,
            0, 22.259999999999998, 0, 22.259999999999998, 0,
            22.259999999999998, 0, 22.259999999999998, 0, 26.4,
            0, 26.4, 0, 26.4, 0,
            26.4, 0, 95.41000000000001, 60.7, 60.7,
            60.7, 60.7, 60.7, 60.7, 60.7,
            60.7, 60.7, 71.89, 83.08, 83.255,
            83.52000000000001, 83.61, 83.61, 83.61, 83.61,
            83.61, 83.61, 83.61
        ),
        fCperMIP = cms.vdouble(2.06, 3.43, 5.15),
        lsb = cms.double(0.09765625),
        thicknessCorrection = cms.vdouble(0.75, 0.76, 0.75)
    ),
    superTCCalibration_hesc = cms.PSet(
        chargeCollectionEfficiency = cms.PSet(
            values = cms.vdouble(1.0)
        ),
        dEdXweights = cms.vdouble(
            0, 9.205, 0, 22.259999999999998, 0,
            22.259999999999998, 0, 22.259999999999998, 0, 22.259999999999998,
            0, 22.259999999999998, 0, 22.259999999999998, 0,
            22.259999999999998, 0, 22.259999999999998, 0, 26.4,
            0, 26.4, 0, 26.4, 0,
            26.4, 0, 95.41000000000001, 60.7, 60.7,
            60.7, 60.7, 60.7, 60.7, 60.7,
            60.7, 60.7, 71.89, 83.08, 83.255,
            83.52000000000001, 83.61, 83.61, 83.61, 83.61,
            83.61, 83.61, 83.61
        ),
        fCperMIP = cms.vdouble(1.0),
        lsb = cms.double(0.067138671875),
        thicknessCorrection = cms.vdouble(0.69)
    ),
    superTCCalibration_hesi = cms.PSet(
        chargeCollectionEfficiency = cms.PSet(
            refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
        ),
        dEdXweights = cms.vdouble(
            0, 9.205, 0, 22.259999999999998, 0,
            22.259999999999998, 0, 22.259999999999998, 0, 22.259999999999998,
            0, 22.259999999999998, 0, 22.259999999999998, 0,
            22.259999999999998, 0, 22.259999999999998, 0, 26.4,
            0, 26.4, 0, 26.4, 0,
            26.4, 0, 95.41000000000001, 60.7, 60.7,
            60.7, 60.7, 60.7, 60.7, 60.7,
            60.7, 60.7, 71.89, 83.08, 83.255,
            83.52000000000001, 83.61, 83.61, 83.61, 83.61,
            83.61, 83.61, 83.61
        ),
        fCperMIP = cms.vdouble(2.06, 3.43, 5.15),
        lsb = cms.double(0.09765625),
        thicknessCorrection = cms.vdouble(0.85, 0.85, 0.84)
    ),
    superTCCalibration_nose = cms.PSet(
        chargeCollectionEfficiency = cms.PSet(
            refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
        ),
        dEdXweights = cms.vdouble(
            0.0, 39.500245, 39.756638, 39.756638, 39.756638,
            39.756638, 66.020266, 92.283895, 92.283895
        ),
        fCperMIP = cms.vdouble(1.25, 2.57, 3.88),
        lsb = cms.double(0.09765625),
        thicknessCorrection = cms.vdouble(1.132, 1.092, 1.084)
    ),
    superTCCompression = cms.PSet(
        exponentBits = cms.uint32(4),
        mantissaBits = cms.uint32(5),
        rounding = cms.bool(True),
        truncationBits = cms.uint32(0)
    ),
    type_energy_division = cms.string('oneBitFraction')
)

process.component_digi_parameters = cms.PSet(
    componentAddToBarrel = cms.bool(False),
    componentDigiTag = cms.string('Component'),
    componentSeparateDigi = cms.bool(False),
    componentTimePhase = cms.double(0.0),
    componentTimeTag = cms.string('Component')
)

process.compression_params_hdm = cms.PSet(
    exponentBits = cms.uint32(4),
    mantissaBits = cms.uint32(3),
    rounding = cms.bool(True),
    truncationBits = cms.uint32(3)
)

process.compression_params_ldm = cms.PSet(
    exponentBits = cms.uint32(4),
    mantissaBits = cms.uint32(3),
    rounding = cms.bool(True),
    truncationBits = cms.uint32(1)
)

process.configurationMetadata = cms.untracked.PSet(
    annotation = cms.untracked.string('Phase2 nevts:100'),
    name = cms.untracked.string('Applications'),
    version = cms.untracked.string('$Revision: 1.19 $')
)

process.constrTopological_C2d_params = cms.PSet(
    applyLayerCalibration = cms.bool(False),
    calibSF_cluster = cms.double(1.0),
    clusterType = cms.string('dRNNC2d'),
    clustering_threshold_scintillator = cms.double(1.5),
    clustering_threshold_silicon = cms.double(1.5),
    dR_cluster = cms.double(6.0),
    layerWeights = cms.vdouble(
        0.0, 0.0183664, 0.0, 0.0305622, 0.0,
        0.0162589, 0.0, 0.0143918, 0.0, 0.0134475,
        0.0, 0.0185754, 0.0, 0.0204934, 0.0,
        0.016901, 0.0, 0.0207958, 0.0, 0.0167985,
        0.0, 0.0238385, 0.0, 0.0301146, 0.0,
        0.0274622, 0.0, 0.0468671, 0.0, 0.078819,
        0.0555831, 0.0609312, 0.0610768, 0.0657626, 0.0465653,
        0.0629383, 0.0610061, 0.0517326, 0.0492882, 0.0699336,
        0.0673457, 0.119896, 0.125327, 0.143235, 0.153295,
        0.104777, 0.109345, 0.161386, 0.174656, 0.108053,
        0.121674, 0.1171, 0.328053
    ),
    seeding_threshold_scintillator = cms.double(3.75),
    seeding_threshold_silicon = cms.double(3.75)
)

process.conv2CkfTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(1),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.1),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.convCkfTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(1),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.1),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.custom_conc_proc = cms.PSet(
    Method = cms.vstring(
        'bestChoiceSelect',
        'superTriggerCellSelect',
        'superTriggerCellSelect'
    ),
    NData = cms.vuint32(
        1, 4, 6, 9, 14,
        18, 23, 28, 32, 37,
        41, 46, 48, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0
    ),
    ProcessorName = cms.string('HGCalConcentratorProcessorSelection'),
    allTrigCellsInTrigSums = cms.bool(False),
    coarseTCCompression = cms.PSet(
        exponentBits = cms.uint32(4),
        mantissaBits = cms.uint32(3),
        rounding = cms.bool(True),
        truncationBits = cms.uint32(0)
    ),
    coarsenTriggerCells = cms.vuint32(0, 0, 0),
    ctcSize = cms.vuint32(
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2
    ),
    fixedDataSizePerHGCROC = cms.bool(False),
    stcSize = cms.vuint32(
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16
    ),
    superTCCalibration_ee = cms.PSet(
        chargeCollectionEfficiency = cms.PSet(
            refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
        ),
        dEdXweights = cms.vdouble(
            0, 9.205, 0, 22.259999999999998, 0,
            22.259999999999998, 0, 22.259999999999998, 0, 22.259999999999998,
            0, 22.259999999999998, 0, 22.259999999999998, 0,
            22.259999999999998, 0, 22.259999999999998, 0, 26.4,
            0, 26.4, 0, 26.4, 0,
            26.4, 0, 95.41000000000001, 60.7, 60.7,
            60.7, 60.7, 60.7, 60.7, 60.7,
            60.7, 60.7, 71.89, 83.08, 83.255,
            83.52000000000001, 83.61, 83.61, 83.61, 83.61,
            83.61, 83.61, 83.61
        ),
        fCperMIP = cms.vdouble(2.06, 3.43, 5.15),
        lsb = cms.double(0.09765625),
        thicknessCorrection = cms.vdouble(0.75, 0.76, 0.75)
    ),
    superTCCalibration_hesc = cms.PSet(
        chargeCollectionEfficiency = cms.PSet(
            values = cms.vdouble(1.0)
        ),
        dEdXweights = cms.vdouble(
            0, 9.205, 0, 22.259999999999998, 0,
            22.259999999999998, 0, 22.259999999999998, 0, 22.259999999999998,
            0, 22.259999999999998, 0, 22.259999999999998, 0,
            22.259999999999998, 0, 22.259999999999998, 0, 26.4,
            0, 26.4, 0, 26.4, 0,
            26.4, 0, 95.41000000000001, 60.7, 60.7,
            60.7, 60.7, 60.7, 60.7, 60.7,
            60.7, 60.7, 71.89, 83.08, 83.255,
            83.52000000000001, 83.61, 83.61, 83.61, 83.61,
            83.61, 83.61, 83.61
        ),
        fCperMIP = cms.vdouble(1.0),
        lsb = cms.double(0.067138671875),
        thicknessCorrection = cms.vdouble(0.69)
    ),
    superTCCalibration_hesi = cms.PSet(
        chargeCollectionEfficiency = cms.PSet(
            refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
        ),
        dEdXweights = cms.vdouble(
            0, 9.205, 0, 22.259999999999998, 0,
            22.259999999999998, 0, 22.259999999999998, 0, 22.259999999999998,
            0, 22.259999999999998, 0, 22.259999999999998, 0,
            22.259999999999998, 0, 22.259999999999998, 0, 26.4,
            0, 26.4, 0, 26.4, 0,
            26.4, 0, 95.41000000000001, 60.7, 60.7,
            60.7, 60.7, 60.7, 60.7, 60.7,
            60.7, 60.7, 71.89, 83.08, 83.255,
            83.52000000000001, 83.61, 83.61, 83.61, 83.61,
            83.61, 83.61, 83.61
        ),
        fCperMIP = cms.vdouble(2.06, 3.43, 5.15),
        lsb = cms.double(0.09765625),
        thicknessCorrection = cms.vdouble(0.85, 0.85, 0.84)
    ),
    superTCCalibration_nose = cms.PSet(
        chargeCollectionEfficiency = cms.PSet(
            refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
        ),
        dEdXweights = cms.vdouble(
            0.0, 39.500245, 39.756638, 39.756638, 39.756638,
            39.756638, 66.020266, 92.283895, 92.283895
        ),
        fCperMIP = cms.vdouble(1.25, 2.57, 3.88),
        lsb = cms.double(0.09765625),
        thicknessCorrection = cms.vdouble(1.132, 1.092, 1.084)
    ),
    superTCCompression = cms.PSet(
        exponentBits = cms.uint32(4),
        mantissaBits = cms.uint32(5),
        rounding = cms.bool(True),
        truncationBits = cms.uint32(0)
    ),
    threshold_scintillator = cms.double(2.0),
    threshold_silicon = cms.double(2.0),
    type_energy_division = cms.string('superTriggerCell')
)

process.dbscan_C3d_params = cms.PSet(
    EGIdentification = cms.PSet(
        CategoriesEtaMax = cms.vdouble(2.7, 3.0),
        CategoriesEtaMin = cms.vdouble(1.5, 2.7),
        CategoriesPtMax = cms.vdouble(1000000.0, 1000000.0),
        CategoriesPtMin = cms.vdouble(0.0, 0.0),
        Inputs = cms.vstring(
            'cl3d_firstlayer',
            'cl3d_coreshowerlength',
            'cl3d_maxlayer',
            'cl3d_srrmean'
        ),
        Weights = cms.vstring(
            'L1Trigger/L1THGCal/data/egamma_id_drnn_dbscan_loweta_v0.xml',
            'L1Trigger/L1THGCal/data/egamma_id_drnn_dbscan_higheta_v0.xml'
        ),
        WorkingPoints = cms.vdouble(-0.04547527, 0.05559443)
    ),
    dR_multicluster = cms.double(0.0),
    dist_dbscan_multicluster = cms.double(0.005),
    minN_dbscan_multicluster = cms.uint32(3),
    minPt_multicluster = cms.double(0.5),
    type_multicluster = cms.string('DBSCANC3d')
)

process.detachedQuadStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CompositeTrajectoryFilter'),
    filters = cms.VPSet(
        cms.PSet(
            refToPSet_ = cms.string('detachedQuadStepTrajectoryFilterBase')
        ),
        cms.PSet(
            refToPSet_ = cms.string('ClusterShapeTrajectoryFilter')
        )
    )
)

process.detachedQuadStepTrajectoryFilterBase = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(0.301),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.075),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.detachedTripletStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CompositeTrajectoryFilter'),
    filters = cms.VPSet(cms.PSet(
        refToPSet_ = cms.string('detachedTripletStepTrajectoryFilterBase')
    ))
)

process.detachedTripletStepTrajectoryFilterBase = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(0),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutLoose')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.075),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.distance_C2d_params = cms.PSet(
    applyLayerCalibration = cms.bool(False),
    calibSF_cluster = cms.double(1.0),
    clusterType = cms.string('dRC2d'),
    clustering_threshold_scintillator = cms.double(1.5),
    clustering_threshold_silicon = cms.double(1.5),
    dR_cluster = cms.double(6.0),
    layerWeights = cms.vdouble(
        0.0, 0.0183664, 0.0, 0.0305622, 0.0,
        0.0162589, 0.0, 0.0143918, 0.0, 0.0134475,
        0.0, 0.0185754, 0.0, 0.0204934, 0.0,
        0.016901, 0.0, 0.0207958, 0.0, 0.0167985,
        0.0, 0.0238385, 0.0, 0.0301146, 0.0,
        0.0274622, 0.0, 0.0468671, 0.0, 0.078819,
        0.0555831, 0.0609312, 0.0610768, 0.0657626, 0.0465653,
        0.0629383, 0.0610061, 0.0517326, 0.0492882, 0.0699336,
        0.0673457, 0.119896, 0.125327, 0.143235, 0.153295,
        0.104777, 0.109345, 0.161386, 0.174656, 0.108053,
        0.121674, 0.1171, 0.328053
    ),
    seeding_threshold_scintillator = cms.double(3.75),
    seeding_threshold_silicon = cms.double(3.75)
)

process.distance_C3d_params = cms.PSet(
    EGIdentification = cms.PSet(
        CategoriesEtaMax = cms.vdouble(2.7, 3.0),
        CategoriesEtaMin = cms.vdouble(1.5, 2.7),
        CategoriesPtMax = cms.vdouble(1000000.0, 1000000.0),
        CategoriesPtMin = cms.vdouble(0.0, 0.0),
        Inputs = cms.vstring(
            'cl3d_firstlayer',
            'cl3d_coreshowerlength',
            'cl3d_maxlayer',
            'cl3d_srrmean'
        ),
        Weights = cms.vstring(
            'L1Trigger/L1THGCal/data/egamma_id_drnn_cone_loweta_v0.xml',
            'L1Trigger/L1THGCal/data/egamma_id_drnn_cone_higheta_v0.xml'
        ),
        WorkingPoints = cms.vdouble(-0.01481255, 0.05995301)
    ),
    dR_multicluster = cms.double(0.01),
    dist_dbscan_multicluster = cms.double(0.0),
    minN_dbscan_multicluster = cms.uint32(0),
    minPt_multicluster = cms.double(0.5),
    type_multicluster = cms.string('dRC3d')
)

process.dummy_C2d_params = cms.PSet(
    applyLayerCalibration = cms.bool(False),
    calibSF_cluster = cms.double(1.0),
    clusterType = cms.string('dummyC2d'),
    layerWeights = cms.vdouble(
        0.0, 0.0183664, 0.0, 0.0305622, 0.0,
        0.0162589, 0.0, 0.0143918, 0.0, 0.0134475,
        0.0, 0.0185754, 0.0, 0.0204934, 0.0,
        0.016901, 0.0, 0.0207958, 0.0, 0.0167985,
        0.0, 0.0238385, 0.0, 0.0301146, 0.0,
        0.0274622, 0.0, 0.0468671, 0.0, 0.078819,
        0.0555831, 0.0609312, 0.0610768, 0.0657626, 0.0465653,
        0.0629383, 0.0610061, 0.0517326, 0.0492882, 0.0699336,
        0.0673457, 0.119896, 0.125327, 0.143235, 0.153295,
        0.104777, 0.109345, 0.161386, 0.174656, 0.108053,
        0.121674, 0.1171, 0.328053
    )
)

process.ecalDigitizer = cms.PSet(
    ConstantTerm = cms.double(0.003),
    EBCorrNoiseMatrixG01 = cms.vdouble(
        1.0, 0.73354, 0.64442, 0.58851, 0.55425,
        0.53082, 0.51916, 0.51097, 0.50732, 0.50409
    ),
    EBCorrNoiseMatrixG06 = cms.vdouble(
        1.0, 0.70946, 0.58021, 0.49846, 0.45006,
        0.41366, 0.39699, 0.38478, 0.37847, 0.37055
    ),
    EBCorrNoiseMatrixG12 = cms.vdouble(
        1.0, 0.71073, 0.55721, 0.46089, 0.40449,
        0.35931, 0.33924, 0.32439, 0.31581, 0.30481
    ),
    EBdigiCollection = cms.string(''),
    EBs25notContainment = cms.double(0.9675),
    EECorrNoiseMatrixG01 = cms.vdouble(
        1.0, 0.72698, 0.62048, 0.55691, 0.51848,
        0.49147, 0.47813, 0.47007, 0.46621, 0.46265
    ),
    EECorrNoiseMatrixG06 = cms.vdouble(
        1.0, 0.71217, 0.47464, 0.34056, 0.26282,
        0.20287, 0.17734, 0.16256, 0.15618, 0.14443
    ),
    EECorrNoiseMatrixG12 = cms.vdouble(
        1.0, 0.71373, 0.44825, 0.30152, 0.21609,
        0.14786, 0.11772, 0.10165, 0.09465, 0.08098
    ),
    EEdigiCollection = cms.string(''),
    EEs25notContainment = cms.double(0.968),
    ESdigiCollection = cms.string(''),
    EcalPreMixStage1 = cms.bool(False),
    EcalPreMixStage2 = cms.bool(False),
    UseLCcorrection = cms.untracked.bool(True),
    accumulatorType = cms.string('EcalDigiProducer'),
    apdAddToBarrel = cms.bool(False),
    apdDigiTag = cms.string('APD'),
    apdDoPEStats = cms.bool(True),
    apdNonlParms = cms.vdouble(
        1.48, -3.75, 1.81, 1.26, 2.0,
        45, 1.0
    ),
    apdSeparateDigi = cms.bool(True),
    apdShapeTau = cms.double(40.5),
    apdShapeTstart = cms.double(74.5),
    apdSimToPEHigh = cms.double(88200000.0),
    apdSimToPELow = cms.double(2450000.0),
    apdTimeOffWidth = cms.double(0.8),
    apdTimeOffset = cms.double(-13.5),
    applyConstantTerm = cms.bool(True),
    binOfMaximum = cms.int32(6),
    componentAddToBarrel = cms.bool(False),
    componentDigiTag = cms.string('Component'),
    componentSeparateDigi = cms.bool(False),
    componentTimePhase = cms.double(0.0),
    componentTimeTag = cms.string('Component'),
    cosmicsPhase = cms.bool(False),
    cosmicsShift = cms.double(0.0),
    doEB = cms.bool(True),
    doEE = cms.bool(False),
    doENoise = cms.bool(True),
    doES = cms.bool(False),
    doESNoise = cms.bool(True),
    doFast = cms.bool(True),
    doPhotostatistics = cms.bool(True),
    hitsProducer = cms.string('g4SimHits'),
    makeDigiSimLinks = cms.untracked.bool(False),
    photoelectronsToAnalogBarrel = cms.double(0.000444444),
    photoelectronsToAnalogEndcap = cms.double(0.000555555),
    samplingFactor = cms.double(1.0),
    simHitToPhotoelectronsBarrel = cms.double(2250.0),
    simHitToPhotoelectronsEndcap = cms.double(1800.0),
    syncPhase = cms.bool(True),
    timeDependent = cms.bool(False),
    timePhase = cms.double(0.0)
)

process.ecalLocalRecoAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.ecalLocalRecoFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_ecalMultiFitUncalibRecHit_*_*',
        'keep *_ecalPreshowerRecHit_*_*',
        'keep *_ecalRecHit_*_*',
        'keep *_ecalCompactTrigPrim_*_*',
        'keep *_ecalTPSkim_*_*',
        'keep EBSrFlagsSorted_ecalDigis__*',
        'keep EESrFlagsSorted_ecalDigis__*',
        'keep *_mix_EBTimeDigi_*',
        'keep *_mix_EETimeDigi_*',
        'keep *_ecalDetailedTimeRecHit_*_*'
    )
)

process.ecalLocalRecoRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_ecalPreshowerRecHit_*_*',
        'keep *_ecalRecHit_*_*',
        'keep *_ecalCompactTrigPrim_*_*',
        'keep *_ecalTPSkim_*_*',
        'keep EBSrFlagsSorted_ecalDigis__*',
        'keep EESrFlagsSorted_ecalDigis__*',
        'keep *_mix_EBTimeDigi_*',
        'keep *_mix_EETimeDigi_*',
        'keep *_ecalDetailedTimeRecHit_*_*'
    )
)

process.ecalTimeDigitizer = cms.PSet(
    EBtimeDigiCollection = cms.string('EBTimeDigi'),
    EEtimeDigiCollection = cms.string('EETimeDigi'),
    accumulatorType = cms.string('EcalTimeDigiProducer'),
    componentWaveform = cms.bool(False),
    hitsProducerEB = cms.InputTag("g4SimHits","EcalHitsEB"),
    hitsProducerEE = cms.InputTag("g4SimHits","EcalHitsEE"),
    timeLayerBarrel = cms.int32(7),
    timeLayerEndcap = cms.int32(3)
)

process.ecal_cosmics_sim = cms.PSet(
    cosmicsPhase = cms.bool(False),
    cosmicsShift = cms.double(0.0)
)

process.ecal_digi_parameters = cms.PSet(
    EBCorrNoiseMatrixG01 = cms.vdouble(
        1.0, 0.73354, 0.64442, 0.58851, 0.55425,
        0.53082, 0.51916, 0.51097, 0.50732, 0.50409
    ),
    EBCorrNoiseMatrixG06 = cms.vdouble(
        1.0, 0.70946, 0.58021, 0.49846, 0.45006,
        0.41366, 0.39699, 0.38478, 0.37847, 0.37055
    ),
    EBCorrNoiseMatrixG12 = cms.vdouble(
        1.0, 0.71073, 0.55721, 0.46089, 0.40449,
        0.35931, 0.33924, 0.32439, 0.31581, 0.30481
    ),
    EBdigiCollection = cms.string(''),
    EECorrNoiseMatrixG01 = cms.vdouble(
        1.0, 0.72698, 0.62048, 0.55691, 0.51848,
        0.49147, 0.47813, 0.47007, 0.46621, 0.46265
    ),
    EECorrNoiseMatrixG06 = cms.vdouble(
        1.0, 0.71217, 0.47464, 0.34056, 0.26282,
        0.20287, 0.17734, 0.16256, 0.15618, 0.14443
    ),
    EECorrNoiseMatrixG12 = cms.vdouble(
        1.0, 0.71373, 0.44825, 0.30152, 0.21609,
        0.14786, 0.11772, 0.10165, 0.09465, 0.08098
    ),
    EEdigiCollection = cms.string(''),
    ESdigiCollection = cms.string(''),
    EcalPreMixStage1 = cms.bool(False),
    EcalPreMixStage2 = cms.bool(False),
    UseLCcorrection = cms.untracked.bool(True)
)

process.ecal_electronics_sim = cms.PSet(
    ConstantTerm = cms.double(0.003),
    applyConstantTerm = cms.bool(True),
    doENoise = cms.bool(True)
)

process.ecal_notCont_sim = cms.PSet(
    EBs25notContainment = cms.double(0.9675),
    EEs25notContainment = cms.double(0.968)
)

process.ecal_sim_parameter_map = cms.PSet(
    binOfMaximum = cms.int32(6),
    doPhotostatistics = cms.bool(True),
    photoelectronsToAnalogBarrel = cms.double(0.000444444),
    photoelectronsToAnalogEndcap = cms.double(0.000555555),
    samplingFactor = cms.double(1.0),
    simHitToPhotoelectronsBarrel = cms.double(2250.0),
    simHitToPhotoelectronsEndcap = cms.double(1800.0),
    syncPhase = cms.bool(True),
    timeDependent = cms.bool(False),
    timePhase = cms.double(0.0)
)

process.ecal_sim_parameter_map_ph2 = cms.PSet(
    binOfMaximum = cms.int32(6),
    doPhotostatistics = cms.bool(True),
    photoelectronsToAnalogBarrel = cms.double(0.000444444),
    samplingFactor = cms.double(1.0),
    simHitToPhotoelectronsBarrel = cms.double(2250.0),
    syncPhase = cms.bool(True),
    timePhase = cms.double(0.0)
)

process.egamma_identification_drnn_cone = cms.PSet(
    CategoriesEtaMax = cms.vdouble(2.7, 3.0),
    CategoriesEtaMin = cms.vdouble(1.5, 2.7),
    CategoriesPtMax = cms.vdouble(1000000.0, 1000000.0),
    CategoriesPtMin = cms.vdouble(0.0, 0.0),
    Inputs = cms.vstring(
        'cl3d_firstlayer',
        'cl3d_coreshowerlength',
        'cl3d_maxlayer',
        'cl3d_srrmean'
    ),
    Weights = cms.vstring(
        'L1Trigger/L1THGCal/data/egamma_id_drnn_cone_loweta_v0.xml',
        'L1Trigger/L1THGCal/data/egamma_id_drnn_cone_higheta_v0.xml'
    ),
    WorkingPoints = cms.vdouble(-0.01481255, 0.05995301)
)

process.egamma_identification_drnn_dbscan = cms.PSet(
    CategoriesEtaMax = cms.vdouble(2.7, 3.0),
    CategoriesEtaMin = cms.vdouble(1.5, 2.7),
    CategoriesPtMax = cms.vdouble(1000000.0, 1000000.0),
    CategoriesPtMin = cms.vdouble(0.0, 0.0),
    Inputs = cms.vstring(
        'cl3d_firstlayer',
        'cl3d_coreshowerlength',
        'cl3d_maxlayer',
        'cl3d_srrmean'
    ),
    Weights = cms.vstring(
        'L1Trigger/L1THGCal/data/egamma_id_drnn_dbscan_loweta_v0.xml',
        'L1Trigger/L1THGCal/data/egamma_id_drnn_dbscan_higheta_v0.xml'
    ),
    WorkingPoints = cms.vdouble(-0.04547527, 0.05559443)
)

process.egamma_identification_histomax = cms.PSet(
    CategoriesEtaMax = cms.vdouble(2.7, 3.0),
    CategoriesEtaMin = cms.vdouble(1.5, 2.7),
    CategoriesPtMax = cms.vdouble(1000000.0, 1000000.0),
    CategoriesPtMin = cms.vdouble(0.0, 0.0),
    Inputs = cms.vstring(
        'cl3d_coreshowerlength',
        'cl3d_showerlength',
        'cl3d_firstlayer',
        'cl3d_maxlayer',
        'cl3d_szz',
        'cl3d_srrmean',
        'cl3d_srrtot',
        'cl3d_seetot',
        'cl3d_spptot'
    ),
    Weights = cms.vstring(
        'L1Trigger/L1THGCal/data/egamma_id_histomax_3151_loweta_v0.xml',
        'L1Trigger/L1THGCal/data/egamma_id_histomax_3151_higheta_v0.xml'
    ),
    WorkingPoints = cms.VPSet(
        cms.PSet(
            Name = cms.string('tight'),
            WorkingPoint = cms.vdouble(0.8292287, 0.9932326)
        ),
        cms.PSet(
            Name = cms.string('loose'),
            WorkingPoint = cms.vdouble(-0.7099538, 0.9611762)
        )
    )
)

process.energy_interpretations_em = cms.PSet(
    dr_bylayer = cms.vdouble(
        0.015, 0.015, 0.015, 0.015, 0.015,
        0.015, 0.015, 0.015, 0.015, 0.015,
        0.015, 0.015, 0.015, 0.015, 0.015
    ),
    layer_containment_corrs = cms.vdouble(
        0.0, 0.0, 1.28, 1.09, 1.0,
        1.07, 1.09, 1.04, 1.0, 1.09,
        1.07, 1.03, 0.93, 1.4, 1.89
    ),
    scale_correction_coeff = cms.vdouble(52.99, -24.96),
    type = cms.string('HGCalTriggerClusterInterpretationEM')
)

process.es_electronics_sim = cms.PSet(
    doESNoise = cms.bool(True),
    doFast = cms.bool(True)
)

process.feCfg_sc = cms.PSet(
    adcNbits = cms.uint32(10),
    adcPulse = cms.vdouble(
        0.0, 0.017, 0.817, 0.163, 0.003,
        0.0
    ),
    adcSaturation_fC = cms.double(68.75),
    adcThreshold_fC = cms.double(0.5),
    fwVersion = cms.uint32(2),
    jitterConstant_ns = cms.vdouble(0.02, 0.02, 0.02),
    jitterNoise_ns = cms.vdouble(5.0, 5.0, 5.0),
    pulseAvgT = cms.vdouble(
        0.0, 23.42298, 13.16733, 6.41062, 5.03946,
        4.532
    ),
    targetMIPvalue_ADC = cms.uint32(15),
    tdcChargeDrainParameterisation = cms.vdouble(
        -919.13, 365.36, -14.1, 0.2, -21.85,
        49.39, 22.21, 0.8, -0.28, 27.14,
        43.95, 3.89048
    ),
    tdcForToAOnset_fC = cms.vdouble(12.0, 12.0, 12.0),
    tdcNbits = cms.uint32(12),
    tdcOnset_fC = cms.double(55),
    tdcResolutionInPs = cms.double(0.001),
    tdcSaturation_fC = cms.double(1000),
    toaLSB_ns = cms.double(0.0244),
    toaMode = cms.uint32(1)
)

process.feCfg_si = cms.PSet(
    adcNbits = cms.uint32(10),
    adcPulse = cms.vdouble(
        0.0, 0.017, 0.817, 0.163, 0.003,
        0.0
    ),
    adcSaturation_fC = cms.double(100),
    adcThreshold_fC = cms.double(0.672),
    fwVersion = cms.uint32(2),
    jitterConstant_ns = cms.vdouble(0.02, 0.02, 0.02),
    jitterNoise_ns = cms.vdouble(5.0, 5.0, 5.0),
    pulseAvgT = cms.vdouble(
        0.0, 23.42298, 13.16733, 6.41062, 5.03946,
        4.532
    ),
    targetMIPvalue_ADC = cms.uint32(10),
    tdcChargeDrainParameterisation = cms.vdouble(
        -919.13, 365.36, -14.1, 0.2, -21.85,
        49.39, 22.21, 0.8, -0.28, 27.14,
        43.95, 3.89048
    ),
    tdcForToAOnset_fC = cms.vdouble(12.0, 12.0, 12.0),
    tdcNbits = cms.uint32(12),
    tdcOnset_fC = cms.double(60),
    tdcResolutionInPs = cms.double(0.001),
    tdcSaturation_fC = cms.double(10000),
    toaLSB_ns = cms.double(0.0244),
    toaMode = cms.uint32(1)
)

process.geometry = cms.PSet(
    DisconnectedLayers = cms.vuint32(
        2, 4, 6, 8, 10,
        12, 14, 16, 18, 20,
        22, 24, 26
    ),
    DisconnectedModules = cms.vuint32(0),
    JsonMappingFile = cms.FileInPath('L1Trigger/L1THGCal/data/hgcal_trigger_link_mapping_120links_v1.json'),
    L1TLinksMapping = cms.FileInPath('L1Trigger/L1THGCal/data/links_mapping_decentralized_signaldriven_0.txt'),
    L1TModulesMapping = cms.FileInPath('L1Trigger/L1THGCal/data/panel_mapping_V9_decentralized_jun19_0.txt'),
    ScintillatorLinksPerModule = cms.uint32(2),
    ScintillatorModuleSize = cms.uint32(6),
    ScintillatorTriggerCellSize = cms.uint32(2),
    TriggerGeometryName = cms.string('HGCalTriggerGeometryV9Imp3')
)

process.hcalDigitizer = cms.PSet(
    DelivLuminosity = cms.double(0),
    HBDarkening = cms.bool(False),
    HEDarkening = cms.bool(False),
    HFDarkening = cms.bool(False),
    HFRecalParameterBlock = cms.PSet(
        HFdepthOneParameterA = cms.vdouble(
            0.004123, 0.00602, 0.008201, 0.010489, 0.013379,
            0.016997, 0.021464, 0.027371, 0.034195, 0.044807,
            0.058939, 0.125497
        ),
        HFdepthOneParameterB = cms.vdouble(
            -4e-06, -2e-06, 0.0, 4e-06, 1.5e-05,
            2.6e-05, 6.3e-05, 8.4e-05, 0.00016, 0.000107,
            0.000425, 0.000209
        ),
        HFdepthTwoParameterA = cms.vdouble(
            0.002861, 0.004168, 0.0064, 0.008388, 0.011601,
            0.014425, 0.018633, 0.023232, 0.028274, 0.035447,
            0.051579, 0.086593
        ),
        HFdepthTwoParameterB = cms.vdouble(
            -2e-06, -0.0, -7e-06, -6e-06, -2e-06,
            1e-06, 1.9e-05, 3.1e-05, 6.7e-05, 1.2e-05,
            0.000157, -3e-06
        )
    ),
    HcalPreMixStage1 = cms.bool(False),
    HcalPreMixStage2 = cms.bool(False),
    TestNumbering = cms.bool(True),
    accumulatorType = cms.string('HcalDigiProducer'),
    debugCaloSamples = cms.bool(False),
    doEmpty = cms.bool(True),
    doHFWindow = cms.bool(False),
    doIonFeedback = cms.bool(True),
    doNeutralDensityFilter = cms.bool(True),
    doNoise = cms.bool(True),
    doThermalNoise = cms.bool(True),
    doTimeSlew = cms.bool(True),
    hb = cms.PSet(
        binOfMaximum = cms.int32(6),
        delayQIE = cms.int32(-999),
        doPhotoStatistics = cms.bool(True),
        doSiPMSmearing = cms.bool(True),
        firstRing = cms.int32(1),
        readoutFrameSize = cms.int32(10),
        samplingFactors = cms.vdouble(
            125.44, 125.54, 125.32, 125.13, 124.46,
            125.01, 125.22, 125.48, 124.45, 125.9,
            125.83, 127.01, 126.82, 129.73, 131.83,
            143.52
        ),
        simHitToPhotoelectrons = cms.double(2000.0),
        sipmTau = cms.double(10.0),
        syncPhase = cms.bool(True),
        threshold_currentTDC = cms.double(18.7),
        timePhase = cms.double(6.0),
        timeSmearing = cms.bool(True)
    ),
    he = cms.PSet(
        binOfMaximum = cms.int32(6),
        delayQIE = cms.int32(-999),
        doPhotoStatistics = cms.bool(True),
        doSiPMSmearing = cms.bool(True),
        firstRing = cms.int32(16),
        readoutFrameSize = cms.int32(10),
        samplingFactors = cms.vdouble(
            210.55, 197.93, 186.12, 189.64, 189.63,
            189.96, 190.03, 190.11, 190.18, 190.25,
            190.32, 190.4, 190.47, 190.54, 190.61,
            190.69, 190.83, 190.94, 190.94, 190.94,
            190.94, 190.94, 190.94, 190.94, 190.94,
            190.94, 190.94, 190.94, 190.94, 190.94,
            190.94, 190.94, 190.94, 190.94, 190.94,
            190.94, 190.94, 190.94, 190.94, 190.94,
            190.94, 190.94, 190.94, 190.94, 190.94,
            190.94, 190.94, 190.94, 190.94, 190.94,
            190.94, 190.94, 190.94, 190.94, 190.94,
            190.94, 190.94, 190.94, 190.94, 190.94,
            190.94, 190.94, 190.94, 190.94, 190.94,
            190.94, 190.94, 190.94, 190.94, 190.94,
            190.94, 190.94, 190.94, 190.94, 190.94,
            190.94, 190.94, 190.94, 190.94, 190.94,
            190.94, 190.94, 190.94, 190.94, 190.94
        ),
        simHitToPhotoelectrons = cms.double(2000.0),
        sipmTau = cms.double(10.0),
        syncPhase = cms.bool(True),
        threshold_currentTDC = cms.double(18.7),
        timePhase = cms.double(6.0),
        timeSmearing = cms.bool(True)
    ),
    hf1 = cms.PSet(
        binOfMaximum = cms.int32(2),
        delayQIE = cms.int32(-999),
        doPhotoStatistics = cms.bool(True),
        doSiPMSmearing = cms.bool(False),
        photoelectronsToAnalog = cms.double(2.79),
        readoutFrameSize = cms.int32(3),
        samplingFactor = cms.double(0.37),
        simHitToPhotoelectrons = cms.double(6.0),
        sipmTau = cms.double(0.0),
        syncPhase = cms.bool(True),
        threshold_currentTDC = cms.double(3.0),
        timePhase = cms.double(9.0)
    ),
    hf2 = cms.PSet(
        binOfMaximum = cms.int32(2),
        delayQIE = cms.int32(-999),
        doPhotoStatistics = cms.bool(True),
        doSiPMSmearing = cms.bool(False),
        photoelectronsToAnalog = cms.double(1.843),
        readoutFrameSize = cms.int32(3),
        samplingFactor = cms.double(0.37),
        simHitToPhotoelectrons = cms.double(6.0),
        sipmTau = cms.double(0.0),
        syncPhase = cms.bool(True),
        threshold_currentTDC = cms.double(3.0),
        timePhase = cms.double(8.0)
    ),
    hitsProducer = cms.string('g4SimHits'),
    ho = cms.PSet(
        binOfMaximum = cms.int32(5),
        delayQIE = cms.int32(-999),
        doPhotoStatistics = cms.bool(True),
        doSiPMSmearing = cms.bool(False),
        firstRing = cms.int32(1),
        readoutFrameSize = cms.int32(10),
        samplingFactors = cms.vdouble(
            231.0, 231.0, 231.0, 231.0, 360.0,
            360.0, 360.0, 360.0, 360.0, 360.0,
            360.0, 360.0, 360.0, 360.0, 360.0
        ),
        siPMCode = cms.int32(1),
        simHitToPhotoelectrons = cms.double(4000.0),
        sipmTau = cms.double(5.0),
        syncPhase = cms.bool(True),
        threshold_currentTDC = cms.double(-999.0),
        timePhase = cms.double(5.0),
        timeSmearing = cms.bool(False)
    ),
    hoHamamatsu = cms.PSet(
        binOfMaximum = cms.int32(5),
        delayQIE = cms.int32(-999),
        doPhotoStatistics = cms.bool(True),
        doSiPMSmearing = cms.bool(False),
        firstRing = cms.int32(1),
        readoutFrameSize = cms.int32(10),
        samplingFactors = cms.vdouble(
            231.0, 231.0, 231.0, 231.0, 360.0,
            360.0, 360.0, 360.0, 360.0, 360.0,
            360.0, 360.0, 360.0, 360.0, 360.0
        ),
        siPMCode = cms.int32(2),
        simHitToPhotoelectrons = cms.double(4000.0),
        sipmTau = cms.double(5.0),
        syncPhase = cms.bool(True),
        threshold_currentTDC = cms.double(-999.0),
        timePhase = cms.double(5.0),
        timeSmearing = cms.bool(False)
    ),
    hoZecotek = cms.PSet(
        binOfMaximum = cms.int32(5),
        delayQIE = cms.int32(-999),
        doPhotoStatistics = cms.bool(True),
        doSiPMSmearing = cms.bool(False),
        firstRing = cms.int32(1),
        readoutFrameSize = cms.int32(10),
        samplingFactors = cms.vdouble(
            231.0, 231.0, 231.0, 231.0, 360.0,
            360.0, 360.0, 360.0, 360.0, 360.0,
            360.0, 360.0, 360.0, 360.0, 360.0
        ),
        siPMCode = cms.int32(2),
        simHitToPhotoelectrons = cms.double(4000.0),
        sipmTau = cms.double(5.0),
        syncPhase = cms.bool(True),
        threshold_currentTDC = cms.double(-999.0),
        timePhase = cms.double(5.0),
        timeSmearing = cms.bool(False)
    ),
    ignoreGeantTime = cms.bool(False),
    injectTestHits = cms.bool(False),
    injectTestHitsCells = cms.vint32(),
    injectTestHitsEnergy = cms.vdouble(),
    injectTestHitsTime = cms.vdouble(),
    killHE = cms.bool(True),
    makeDigiSimLinks = cms.untracked.bool(False),
    minFCToDelay = cms.double(5.0),
    zdc = cms.PSet(
        binOfMaximum = cms.int32(5),
        delayQIE = cms.int32(-999),
        doPhotoStatistics = cms.bool(True),
        doSiPMSmearing = cms.bool(False),
        photoelectronsToAnalog = cms.double(1.843),
        readoutFrameSize = cms.int32(10),
        samplingFactor = cms.double(1.0),
        simHitToPhotoelectrons = cms.double(6.0),
        sipmTau = cms.double(0.0),
        syncPhase = cms.bool(True),
        threshold_currentTDC = cms.double(-999.0),
        timePhase = cms.double(-4.0)
    )
)

process.hcalSimBlock = cms.PSet(
    DelivLuminosity = cms.double(0),
    HBDarkening = cms.bool(False),
    HEDarkening = cms.bool(False),
    HFDarkening = cms.bool(False),
    HFRecalParameterBlock = cms.PSet(
        HFdepthOneParameterA = cms.vdouble(
            0.004123, 0.00602, 0.008201, 0.010489, 0.013379,
            0.016997, 0.021464, 0.027371, 0.034195, 0.044807,
            0.058939, 0.125497
        ),
        HFdepthOneParameterB = cms.vdouble(
            -4e-06, -2e-06, 0.0, 4e-06, 1.5e-05,
            2.6e-05, 6.3e-05, 8.4e-05, 0.00016, 0.000107,
            0.000425, 0.000209
        ),
        HFdepthTwoParameterA = cms.vdouble(
            0.002861, 0.004168, 0.0064, 0.008388, 0.011601,
            0.014425, 0.018633, 0.023232, 0.028274, 0.035447,
            0.051579, 0.086593
        ),
        HFdepthTwoParameterB = cms.vdouble(
            -2e-06, -0.0, -7e-06, -6e-06, -2e-06,
            1e-06, 1.9e-05, 3.1e-05, 6.7e-05, 1.2e-05,
            0.000157, -3e-06
        )
    ),
    HcalPreMixStage1 = cms.bool(False),
    HcalPreMixStage2 = cms.bool(False),
    TestNumbering = cms.bool(True),
    debugCaloSamples = cms.bool(False),
    doEmpty = cms.bool(True),
    doHFWindow = cms.bool(False),
    doIonFeedback = cms.bool(True),
    doNeutralDensityFilter = cms.bool(True),
    doNoise = cms.bool(True),
    doThermalNoise = cms.bool(True),
    doTimeSlew = cms.bool(True),
    hb = cms.PSet(
        binOfMaximum = cms.int32(6),
        delayQIE = cms.int32(-999),
        doPhotoStatistics = cms.bool(True),
        doSiPMSmearing = cms.bool(True),
        firstRing = cms.int32(1),
        readoutFrameSize = cms.int32(10),
        samplingFactors = cms.vdouble(
            125.44, 125.54, 125.32, 125.13, 124.46,
            125.01, 125.22, 125.48, 124.45, 125.9,
            125.83, 127.01, 126.82, 129.73, 131.83,
            143.52
        ),
        simHitToPhotoelectrons = cms.double(2000.0),
        sipmTau = cms.double(10.0),
        syncPhase = cms.bool(True),
        threshold_currentTDC = cms.double(18.7),
        timePhase = cms.double(6.0),
        timeSmearing = cms.bool(True)
    ),
    he = cms.PSet(
        binOfMaximum = cms.int32(6),
        delayQIE = cms.int32(-999),
        doPhotoStatistics = cms.bool(True),
        doSiPMSmearing = cms.bool(True),
        firstRing = cms.int32(16),
        readoutFrameSize = cms.int32(10),
        samplingFactors = cms.vdouble(
            210.55, 197.93, 186.12, 189.64, 189.63,
            189.96, 190.03, 190.11, 190.18, 190.25,
            190.32, 190.4, 190.47, 190.54, 190.61,
            190.69, 190.83, 190.94, 190.94, 190.94,
            190.94, 190.94, 190.94, 190.94, 190.94,
            190.94, 190.94, 190.94, 190.94, 190.94,
            190.94, 190.94, 190.94, 190.94, 190.94,
            190.94, 190.94, 190.94, 190.94, 190.94,
            190.94, 190.94, 190.94, 190.94, 190.94,
            190.94, 190.94, 190.94, 190.94, 190.94,
            190.94, 190.94, 190.94, 190.94, 190.94,
            190.94, 190.94, 190.94, 190.94, 190.94,
            190.94, 190.94, 190.94, 190.94, 190.94,
            190.94, 190.94, 190.94, 190.94, 190.94,
            190.94, 190.94, 190.94, 190.94, 190.94,
            190.94, 190.94, 190.94, 190.94, 190.94,
            190.94, 190.94, 190.94, 190.94, 190.94
        ),
        simHitToPhotoelectrons = cms.double(2000.0),
        sipmTau = cms.double(10.0),
        syncPhase = cms.bool(True),
        threshold_currentTDC = cms.double(18.7),
        timePhase = cms.double(6.0),
        timeSmearing = cms.bool(True)
    ),
    hf1 = cms.PSet(
        binOfMaximum = cms.int32(2),
        delayQIE = cms.int32(-999),
        doPhotoStatistics = cms.bool(True),
        doSiPMSmearing = cms.bool(False),
        photoelectronsToAnalog = cms.double(2.79),
        readoutFrameSize = cms.int32(3),
        samplingFactor = cms.double(0.37),
        simHitToPhotoelectrons = cms.double(6.0),
        sipmTau = cms.double(0.0),
        syncPhase = cms.bool(True),
        threshold_currentTDC = cms.double(3.0),
        timePhase = cms.double(9.0)
    ),
    hf2 = cms.PSet(
        binOfMaximum = cms.int32(2),
        delayQIE = cms.int32(-999),
        doPhotoStatistics = cms.bool(True),
        doSiPMSmearing = cms.bool(False),
        photoelectronsToAnalog = cms.double(1.843),
        readoutFrameSize = cms.int32(3),
        samplingFactor = cms.double(0.37),
        simHitToPhotoelectrons = cms.double(6.0),
        sipmTau = cms.double(0.0),
        syncPhase = cms.bool(True),
        threshold_currentTDC = cms.double(3.0),
        timePhase = cms.double(8.0)
    ),
    hitsProducer = cms.string('g4SimHits'),
    ho = cms.PSet(
        binOfMaximum = cms.int32(5),
        delayQIE = cms.int32(-999),
        doPhotoStatistics = cms.bool(True),
        doSiPMSmearing = cms.bool(False),
        firstRing = cms.int32(1),
        readoutFrameSize = cms.int32(10),
        samplingFactors = cms.vdouble(
            231.0, 231.0, 231.0, 231.0, 360.0,
            360.0, 360.0, 360.0, 360.0, 360.0,
            360.0, 360.0, 360.0, 360.0, 360.0
        ),
        siPMCode = cms.int32(1),
        simHitToPhotoelectrons = cms.double(4000.0),
        sipmTau = cms.double(5.0),
        syncPhase = cms.bool(True),
        threshold_currentTDC = cms.double(-999.0),
        timePhase = cms.double(5.0),
        timeSmearing = cms.bool(False)
    ),
    hoHamamatsu = cms.PSet(
        binOfMaximum = cms.int32(5),
        delayQIE = cms.int32(-999),
        doPhotoStatistics = cms.bool(True),
        doSiPMSmearing = cms.bool(False),
        firstRing = cms.int32(1),
        readoutFrameSize = cms.int32(10),
        samplingFactors = cms.vdouble(
            231.0, 231.0, 231.0, 231.0, 360.0,
            360.0, 360.0, 360.0, 360.0, 360.0,
            360.0, 360.0, 360.0, 360.0, 360.0
        ),
        siPMCode = cms.int32(2),
        simHitToPhotoelectrons = cms.double(4000.0),
        sipmTau = cms.double(5.0),
        syncPhase = cms.bool(True),
        threshold_currentTDC = cms.double(-999.0),
        timePhase = cms.double(5.0),
        timeSmearing = cms.bool(False)
    ),
    hoZecotek = cms.PSet(
        binOfMaximum = cms.int32(5),
        delayQIE = cms.int32(-999),
        doPhotoStatistics = cms.bool(True),
        doSiPMSmearing = cms.bool(False),
        firstRing = cms.int32(1),
        readoutFrameSize = cms.int32(10),
        samplingFactors = cms.vdouble(
            231.0, 231.0, 231.0, 231.0, 360.0,
            360.0, 360.0, 360.0, 360.0, 360.0,
            360.0, 360.0, 360.0, 360.0, 360.0
        ),
        siPMCode = cms.int32(2),
        simHitToPhotoelectrons = cms.double(4000.0),
        sipmTau = cms.double(5.0),
        syncPhase = cms.bool(True),
        threshold_currentTDC = cms.double(-999.0),
        timePhase = cms.double(5.0),
        timeSmearing = cms.bool(False)
    ),
    ignoreGeantTime = cms.bool(False),
    injectTestHits = cms.bool(False),
    injectTestHitsCells = cms.vint32(),
    injectTestHitsEnergy = cms.vdouble(),
    injectTestHitsTime = cms.vdouble(),
    killHE = cms.bool(True),
    minFCToDelay = cms.double(5.0),
    zdc = cms.PSet(
        binOfMaximum = cms.int32(5),
        delayQIE = cms.int32(-999),
        doPhotoStatistics = cms.bool(True),
        doSiPMSmearing = cms.bool(False),
        photoelectronsToAnalog = cms.double(1.843),
        readoutFrameSize = cms.int32(10),
        samplingFactor = cms.double(1.0),
        simHitToPhotoelectrons = cms.double(6.0),
        sipmTau = cms.double(0.0),
        syncPhase = cms.bool(True),
        threshold_currentTDC = cms.double(-999.0),
        timePhase = cms.double(-4.0)
    )
)

process.hfnoseDigitizer = cms.PSet(
    NoiseGeneration_Method = cms.bool(True),
    accumulatorType = cms.string('HGCDigiProducer'),
    bxTime = cms.double(25),
    digiCfg = cms.PSet(
        cceParams = cms.PSet(
            refToPSet_ = cms.string('HGCAL_cceParams_toUse')
        ),
        chargeCollectionEfficiencies = cms.PSet(
            refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
        ),
        doTimeSamples = cms.bool(False),
        feCfg = cms.PSet(
            adcNbits = cms.uint32(10),
            adcPulse = cms.vdouble(
                0.0, 0.017, 0.817, 0.163, 0.003,
                0.0
            ),
            adcSaturation_fC = cms.double(100),
            adcThreshold_fC = cms.double(0.672),
            fwVersion = cms.uint32(2),
            jitterConstant_ns = cms.vdouble(0.02, 0.02, 0.02),
            jitterNoise_ns = cms.vdouble(5.0, 5.0, 5.0),
            pulseAvgT = cms.vdouble(
                0.0, 23.42298, 13.16733, 6.41062, 5.03946,
                4.532
            ),
            targetMIPvalue_ADC = cms.uint32(10),
            tdcChargeDrainParameterisation = cms.vdouble(
                -919.13, 365.36, -14.1, 0.2, -21.85,
                49.39, 22.21, 0.8, -0.28, 27.14,
                43.95, 3.89048
            ),
            tdcForToAOnset_fC = cms.vdouble(12.0, 12.0, 12.0),
            tdcNbits = cms.uint32(12),
            tdcOnset_fC = cms.double(60),
            tdcResolutionInPs = cms.double(0.001),
            tdcSaturation_fC = cms.double(10000),
            toaLSB_ns = cms.double(0.0244),
            toaMode = cms.uint32(1)
        ),
        ileakParam = cms.PSet(
            refToPSet_ = cms.string('HGCAL_ileakParam_toUse')
        ),
        keV2fC = cms.double(0.044259),
        noise_fC = cms.PSet(
            refToPSet_ = cms.string('HFNose_noise_fC')
        ),
        thresholdFollowsMIP = cms.bool(True)
    ),
    digiCollection = cms.string('HFNoseDigis'),
    digitizationType = cms.uint32(0),
    digitizer = cms.string('HFNoseDigitizer'),
    eVPerEleHolePair = cms.double(3.62),
    hitCollection = cms.string('HFNoseHits'),
    hitsProducer = cms.string('g4SimHits'),
    makeDigiSimLinks = cms.bool(False),
    maxSimHitsAccTime = cms.uint32(100),
    premixStage1 = cms.bool(False),
    premixStage1MaxCharge = cms.double(1000000.0),
    premixStage1MinCharge = cms.double(0),
    tofDelay = cms.double(-33),
    useAllChannels = cms.bool(True),
    verbosity = cms.untracked.uint32(0)
)

process.hgceeDigitizer = cms.PSet(
    NoiseGeneration_Method = cms.bool(True),
    accumulatorType = cms.string('HGCDigiProducer'),
    bxTime = cms.double(25),
    digiCfg = cms.PSet(
        cceParams = cms.PSet(
            refToPSet_ = cms.string('HGCAL_cceParams_toUse')
        ),
        chargeCollectionEfficiencies = cms.PSet(
            refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
        ),
        doTimeSamples = cms.bool(False),
        feCfg = cms.PSet(
            adcNbits = cms.uint32(10),
            adcPulse = cms.vdouble(
                0.0, 0.017, 0.817, 0.163, 0.003,
                0.0
            ),
            adcSaturation_fC = cms.double(100),
            adcThreshold_fC = cms.double(0.672),
            fwVersion = cms.uint32(2),
            jitterConstant_ns = cms.vdouble(0.0004, 0.0004, 0.0004),
            jitterNoise_ns = cms.vdouble(25.0, 25.0, 25.0),
            pulseAvgT = cms.vdouble(
                0.0, 23.42298, 13.16733, 6.41062, 5.03946,
                4.532
            ),
            targetMIPvalue_ADC = cms.uint32(10),
            tdcChargeDrainParameterisation = cms.vdouble(
                -919.13, 365.36, -14.1, 0.2, -21.85,
                49.39, 22.21, 0.8, -0.28, 27.14,
                43.95, 3.89048
            ),
            tdcForToAOnset_fC = cms.vdouble(12.0, 12.0, 12.0),
            tdcNbits = cms.uint32(12),
            tdcOnset_fC = cms.double(60),
            tdcResolutionInPs = cms.double(0.001),
            tdcSaturation_fC = cms.double(10000),
            toaLSB_ns = cms.double(0.0244),
            toaMode = cms.uint32(1)
        ),
        ileakParam = cms.PSet(
            refToPSet_ = cms.string('HGCAL_ileakParam_toUse')
        ),
        keV2fC = cms.double(0.044259),
        noise_fC = cms.PSet(
            refToPSet_ = cms.string('HGCAL_noise_fC')
        ),
        thresholdFollowsMIP = cms.bool(True)
    ),
    digiCollection = cms.string('HGCDigisEE'),
    digitizationType = cms.uint32(0),
    eVPerEleHolePair = cms.double(3.62),
    geometryType = cms.uint32(1),
    hitCollection = cms.string('HGCHitsEE'),
    makeDigiSimLinks = cms.bool(False),
    maxSimHitsAccTime = cms.uint32(100),
    premixStage1 = cms.bool(False),
    premixStage1MaxCharge = cms.double(1000000.0),
    premixStage1MinCharge = cms.double(0),
    tofDelay = cms.double(5),
    useAllChannels = cms.bool(True),
    verbosity = cms.untracked.uint32(0)
)

process.hgchebackDigitizer = cms.PSet(
    NoiseGeneration_Method = cms.bool(True),
    accumulatorType = cms.string('HGCDigiProducer'),
    bxTime = cms.double(25),
    digiCfg = cms.PSet(
        algo = cms.uint32(2),
        doTimeSamples = cms.bool(False),
        feCfg = cms.PSet(
            adcNbits = cms.uint32(10),
            adcPulse = cms.vdouble(
                0.0, 0.017, 0.817, 0.163, 0.003,
                0.0
            ),
            adcSaturation_fC = cms.double(68.75),
            adcThreshold_fC = cms.double(0.5),
            fwVersion = cms.uint32(2),
            jitterConstant_ns = cms.vdouble(0.0004, 0.0004, 0.0004),
            jitterNoise_ns = cms.vdouble(25.0, 25.0, 25.0),
            pulseAvgT = cms.vdouble(
                0.0, 23.42298, 13.16733, 6.41062, 5.03946,
                4.532
            ),
            targetMIPvalue_ADC = cms.uint32(15),
            tdcChargeDrainParameterisation = cms.vdouble(
                -919.13, 365.36, -14.1, 0.2, -21.85,
                49.39, 22.21, 0.8, -0.28, 27.14,
                43.95, 3.89048
            ),
            tdcForToAOnset_fC = cms.vdouble(12.0, 12.0, 12.0),
            tdcNbits = cms.uint32(12),
            tdcOnset_fC = cms.double(55),
            tdcResolutionInPs = cms.double(0.001),
            tdcSaturation_fC = cms.double(1000),
            toaLSB_ns = cms.double(0.0244),
            toaMode = cms.uint32(1)
        ),
        keV2MIP = cms.double(0.00148148148148),
        nPEperMIP = cms.double(21.0),
        nTotalPE = cms.double(7500),
        noise = cms.PSet(
            refToPSet_ = cms.string('HGCAL_noise_heback')
        ),
        scaleBySipmArea = cms.bool(False),
        scaleByTileArea = cms.bool(False),
        sdPixels = cms.double(1e-06),
        sipmMap = cms.string('SimCalorimetry/HGCalSimProducers/data/sipmParams_geom-10.txt'),
        thresholdFollowsMIP = cms.bool(True),
        xTalk = cms.double(0.01)
    ),
    digiCollection = cms.string('HGCDigisHEback'),
    digitizationType = cms.uint32(1),
    geometryType = cms.uint32(1),
    hitCollection = cms.string('HGCHitsHEback'),
    makeDigiSimLinks = cms.bool(False),
    maxSimHitsAccTime = cms.uint32(100),
    premixStage1 = cms.bool(False),
    premixStage1MaxCharge = cms.double(1000000.0),
    premixStage1MinCharge = cms.double(0),
    tofDelay = cms.double(1),
    useAllChannels = cms.bool(True),
    verbosity = cms.untracked.uint32(0)
)

process.hgchefrontDigitizer = cms.PSet(
    NoiseGeneration_Method = cms.bool(True),
    accumulatorType = cms.string('HGCDigiProducer'),
    bxTime = cms.double(25),
    digiCfg = cms.PSet(
        cceParams = cms.PSet(
            refToPSet_ = cms.string('HGCAL_cceParams_toUse')
        ),
        chargeCollectionEfficiencies = cms.PSet(
            refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
        ),
        doTimeSamples = cms.bool(False),
        feCfg = cms.PSet(
            adcNbits = cms.uint32(10),
            adcPulse = cms.vdouble(
                0.0, 0.017, 0.817, 0.163, 0.003,
                0.0
            ),
            adcSaturation_fC = cms.double(100),
            adcThreshold_fC = cms.double(0.672),
            fwVersion = cms.uint32(2),
            jitterConstant_ns = cms.vdouble(0.0004, 0.0004, 0.0004),
            jitterNoise_ns = cms.vdouble(25.0, 25.0, 25.0),
            pulseAvgT = cms.vdouble(
                0.0, 23.42298, 13.16733, 6.41062, 5.03946,
                4.532
            ),
            targetMIPvalue_ADC = cms.uint32(10),
            tdcChargeDrainParameterisation = cms.vdouble(
                -919.13, 365.36, -14.1, 0.2, -21.85,
                49.39, 22.21, 0.8, -0.28, 27.14,
                43.95, 3.89048
            ),
            tdcForToAOnset_fC = cms.vdouble(12.0, 12.0, 12.0),
            tdcNbits = cms.uint32(12),
            tdcOnset_fC = cms.double(60),
            tdcResolutionInPs = cms.double(0.001),
            tdcSaturation_fC = cms.double(10000),
            toaLSB_ns = cms.double(0.0244),
            toaMode = cms.uint32(1)
        ),
        ileakParam = cms.PSet(
            refToPSet_ = cms.string('HGCAL_ileakParam_toUse')
        ),
        keV2fC = cms.double(0.044259),
        noise_fC = cms.PSet(
            refToPSet_ = cms.string('HGCAL_noise_fC')
        ),
        thresholdFollowsMIP = cms.bool(True)
    ),
    digiCollection = cms.string('HGCDigisHEfront'),
    digitizationType = cms.uint32(0),
    geometryType = cms.uint32(1),
    hitCollection = cms.string('HGCHitsHEfront'),
    makeDigiSimLinks = cms.bool(False),
    maxSimHitsAccTime = cms.uint32(100),
    premixStage1 = cms.bool(False),
    premixStage1MaxCharge = cms.double(1000000.0),
    premixStage1MinCharge = cms.double(0),
    tofDelay = cms.double(5),
    useAllChannels = cms.bool(True),
    verbosity = cms.untracked.uint32(0)
)

process.highPtTripletStepTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(False),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('highPtTripletStepChi2Est'),
    foundHitBonus = cms.double(10.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('highPtTripletStepTrajectoryFilterInOut')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(2),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterialParabolicMf'),
    propagatorOpposite = cms.string('PropagatorWithMaterialParabolicMfOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('highPtTripletStepTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(False)
)

process.highPtTripletStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CompositeTrajectoryFilter'),
    filters = cms.VPSet(
        cms.PSet(
            refToPSet_ = cms.string('highPtTripletStepTrajectoryFilterBase')
        ),
        cms.PSet(
            refToPSet_ = cms.string('ClusterShapeTrajectoryFilter')
        )
    )
)

process.highPtTripletStepTrajectoryFilterBase = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(1.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(0),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(1),
    maxLostHitsFraction = cms.double(999.0),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(1),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.highPtTripletStepTrajectoryFilterInOut = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minimumNumberOfHits = cms.int32(4),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(1),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.histoInterpolatedMax_C3d_params = cms.PSet(
    binSumsHisto = cms.vuint32(
        13, 11, 11, 11, 9,
        9, 9, 7, 7, 7,
        7, 7, 7, 5, 5,
        5, 5, 5, 5, 5,
        5, 5, 5, 5, 5,
        5, 5, 5, 3, 3,
        3, 3, 3, 3, 3,
        3, 3, 3, 3, 3,
        3, 3
    ),
    kROverZMax = cms.double(0.58),
    kROverZMin = cms.double(0.076),
    nBins_X1_histo_multicluster = cms.uint32(42),
    nBins_X2_histo_multicluster = cms.uint32(216),
    neighbour_weights = cms.vdouble(
        0, 0.25, 0, 0.25, 0,
        0.25, 0, 0.25, 0
    ),
    seed_position = cms.string('TCWeighted'),
    seed_smoothing_ecal = cms.vdouble(
        1.0, 1.0, 1.0, 1.0, 1.1,
        1.0, 1.0, 1.0, 1.0
    ),
    seed_smoothing_hcal = cms.vdouble(
        1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 2.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0
    ),
    seeding_space = cms.string('RPhi'),
    seeds_norm_by_area = cms.bool(False),
    threshold_histo_multicluster = cms.double(20.0),
    type_histoalgo = cms.string('HistoInterpolatedMaxC3d')
)

process.histoMaxVariableDR_C3d_params = cms.PSet(
    AlgoName = cms.string('HGCalHistoClusteringWrapper'),
    EGIdentification = cms.PSet(
        CategoriesEtaMax = cms.vdouble(2.7, 3.0),
        CategoriesEtaMin = cms.vdouble(1.5, 2.7),
        CategoriesPtMax = cms.vdouble(1000000.0, 1000000.0),
        CategoriesPtMin = cms.vdouble(0.0, 0.0),
        Inputs = cms.vstring(
            'cl3d_coreshowerlength',
            'cl3d_showerlength',
            'cl3d_firstlayer',
            'cl3d_maxlayer',
            'cl3d_szz',
            'cl3d_srrmean',
            'cl3d_srrtot',
            'cl3d_seetot',
            'cl3d_spptot'
        ),
        Weights = cms.vstring(
            'L1Trigger/L1THGCal/data/egamma_id_histomax_3151_loweta_v0.xml',
            'L1Trigger/L1THGCal/data/egamma_id_histomax_3151_higheta_v0.xml'
        ),
        WorkingPoints = cms.VPSet(
            cms.PSet(
                Name = cms.string('tight'),
                WorkingPoint = cms.vdouble(0.8292287, 0.9932326)
            ),
            cms.PSet(
                Name = cms.string('loose'),
                WorkingPoint = cms.vdouble(-0.7099538, 0.9611762)
            )
        )
    ),
    cluster_association = cms.string('NearestNeighbour'),
    dR_multicluster = cms.double(0.0),
    dR_multicluster_byLayer_coefficientA = cms.vdouble(
        0, 0.015, 0.015, 0.015, 0.015,
        0.015, 0.015, 0.015, 0.02, 0.02,
        0.02, 0.02, 0.02, 0.02, 0.02,
        0.03, 0.03, 0.03, 0.03, 0.03,
        0.03, 0.03, 0.04, 0.04, 0.04,
        0.04, 0.04, 0.04, 0.04, 0.04,
        0.04, 0.04, 0.04, 0.04, 0.04,
        0.05, 0.05, 0.05, 0.05, 0.05,
        0.05, 0.05, 0.05, 0.05, 0.05,
        0.05, 0.05, 0.05, 0.05, 0.05,
        0.05, 0.05, 0.05
    ),
    dR_multicluster_byLayer_coefficientB = cms.vdouble(
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0
    ),
    minPt_multicluster = cms.double(0.5),
    shape_distance = cms.double(0.015),
    shape_threshold = cms.double(1.0)
)

process.histoMaxXYVariableDR_C3d_params = cms.PSet(
    binSumsHisto = cms.vuint32(
        13, 11, 11, 11, 9,
        9, 9, 7, 7, 7,
        7, 7, 7, 5, 5,
        5, 5, 5, 5, 5,
        5, 5, 5, 5, 5,
        5, 5, 5, 3, 3,
        3, 3, 3, 3, 3,
        3, 3, 3, 3, 3,
        3, 3
    ),
    kROverZMax = cms.double(0.58),
    kROverZMin = cms.double(0.076),
    nBins_X1_histo_multicluster = cms.uint32(192),
    nBins_X2_histo_multicluster = cms.uint32(192),
    neighbour_weights = cms.vdouble(
        0, 0.25, 0, 0.25, 0,
        0.25, 0, 0.25, 0
    ),
    seed_position = cms.string('TCWeighted'),
    seed_smoothing_ecal = cms.vdouble(
        1.0, 1.0, 1.0, 1.0, 1.1,
        1.0, 1.0, 1.0, 1.0
    ),
    seed_smoothing_hcal = cms.vdouble(
        1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 2.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0
    ),
    seeding_space = cms.string('XY'),
    seeds_norm_by_area = cms.bool(False),
    threshold_histo_multicluster = cms.double(20.0),
    type_histoalgo = cms.string('HistoMaxC3d')
)

process.histoMax_C3d_clustering_params = cms.PSet(
    EGIdentification = cms.PSet(
        CategoriesEtaMax = cms.vdouble(2.7, 3.0),
        CategoriesEtaMin = cms.vdouble(1.5, 2.7),
        CategoriesPtMax = cms.vdouble(1000000.0, 1000000.0),
        CategoriesPtMin = cms.vdouble(0.0, 0.0),
        Inputs = cms.vstring(
            'cl3d_coreshowerlength',
            'cl3d_showerlength',
            'cl3d_firstlayer',
            'cl3d_maxlayer',
            'cl3d_szz',
            'cl3d_srrmean',
            'cl3d_srrtot',
            'cl3d_seetot',
            'cl3d_spptot'
        ),
        Weights = cms.vstring(
            'L1Trigger/L1THGCal/data/egamma_id_histomax_3151_loweta_v0.xml',
            'L1Trigger/L1THGCal/data/egamma_id_histomax_3151_higheta_v0.xml'
        ),
        WorkingPoints = cms.VPSet(
            cms.PSet(
                Name = cms.string('tight'),
                WorkingPoint = cms.vdouble(0.8292287, 0.9932326)
            ),
            cms.PSet(
                Name = cms.string('loose'),
                WorkingPoint = cms.vdouble(-0.7099538, 0.9611762)
            )
        )
    ),
    cluster_association = cms.string('NearestNeighbour'),
    dR_multicluster = cms.double(0.03),
    dR_multicluster_byLayer_coefficientA = cms.vdouble(),
    dR_multicluster_byLayer_coefficientB = cms.vdouble(),
    minPt_multicluster = cms.double(0.5),
    shape_distance = cms.double(0.015),
    shape_threshold = cms.double(1.0)
)

process.histoMax_C3d_params = cms.PSet(
    histoMax_C3d_clustering_parameters = cms.PSet(
        AlgoName = cms.string('HGCalHistoClusteringWrapper'),
        EGIdentification = cms.PSet(
            CategoriesEtaMax = cms.vdouble(2.7, 3.0),
            CategoriesEtaMin = cms.vdouble(1.5, 2.7),
            CategoriesPtMax = cms.vdouble(1000000.0, 1000000.0),
            CategoriesPtMin = cms.vdouble(0.0, 0.0),
            Inputs = cms.vstring(
                'cl3d_coreshowerlength',
                'cl3d_showerlength',
                'cl3d_firstlayer',
                'cl3d_maxlayer',
                'cl3d_szz',
                'cl3d_srrmean',
                'cl3d_srrtot',
                'cl3d_seetot',
                'cl3d_spptot'
            ),
            Weights = cms.vstring(
                'L1Trigger/L1THGCal/data/egamma_id_histomax_3151_loweta_v0.xml',
                'L1Trigger/L1THGCal/data/egamma_id_histomax_3151_higheta_v0.xml'
            ),
            WorkingPoints = cms.VPSet(
                cms.PSet(
                    Name = cms.string('tight'),
                    WorkingPoint = cms.vdouble(0.8292287, 0.9932326)
                ),
                cms.PSet(
                    Name = cms.string('loose'),
                    WorkingPoint = cms.vdouble(-0.7099538, 0.9611762)
                )
            )
        ),
        cluster_association = cms.string('NearestNeighbour'),
        dR_multicluster = cms.double(0.0),
        dR_multicluster_byLayer_coefficientA = cms.vdouble(
            0, 0.015, 0.015, 0.015, 0.015,
            0.015, 0.015, 0.015, 0.02, 0.02,
            0.02, 0.02, 0.02, 0.02, 0.02,
            0.03, 0.03, 0.03, 0.03, 0.03,
            0.03, 0.03, 0.04, 0.04, 0.04,
            0.04, 0.04, 0.04, 0.04, 0.04,
            0.04, 0.04, 0.04, 0.04, 0.04,
            0.05, 0.05, 0.05, 0.05, 0.05,
            0.05, 0.05, 0.05, 0.05, 0.05,
            0.05, 0.05, 0.05, 0.05, 0.05,
            0.05, 0.05, 0.05
        ),
        dR_multicluster_byLayer_coefficientB = cms.vdouble(
            0, 0, 0, 0, 0,
            0, 0, 0, 0, 0,
            0, 0, 0, 0, 0,
            0, 0, 0, 0, 0,
            0, 0, 0, 0, 0,
            0, 0, 0, 0, 0,
            0, 0, 0, 0, 0,
            0, 0, 0, 0, 0,
            0, 0, 0, 0, 0,
            0, 0, 0, 0, 0,
            0, 0, 0
        ),
        minPt_multicluster = cms.double(0.5),
        shape_distance = cms.double(0.015),
        shape_threshold = cms.double(1.0)
    ),
    histoMax_C3d_seeding_parameters = cms.PSet(
        binSumsHisto = cms.vuint32(
            13, 11, 11, 11, 9,
            9, 9, 7, 7, 7,
            7, 7, 7, 5, 5,
            5, 5, 5, 5, 5,
            5, 5, 5, 5, 5,
            5, 5, 5, 3, 3,
            3, 3, 3, 3, 3,
            3, 3, 3, 3, 3,
            3, 3
        ),
        kROverZMax = cms.double(0.58),
        kROverZMin = cms.double(0.076),
        nBins_X1_histo_multicluster = cms.uint32(42),
        nBins_X2_histo_multicluster = cms.uint32(216),
        neighbour_weights = cms.vdouble(
            0, 0.25, 0, 0.25, 0,
            0.25, 0, 0.25, 0
        ),
        seed_position = cms.string('TCWeighted'),
        seed_smoothing_ecal = cms.vdouble(
            1.0, 1.0, 1.0, 1.0, 1.1,
            1.0, 1.0, 1.0, 1.0
        ),
        seed_smoothing_hcal = cms.vdouble(
            1.0, 1.0, 1.0, 1.0, 1.0,
            1.0, 1.0, 1.0, 1.0, 1.0,
            1.0, 1.0, 2.0, 1.0, 1.0,
            1.0, 1.0, 1.0, 1.0, 1.0,
            1.0, 1.0, 1.0, 1.0, 1.0
        ),
        seeding_space = cms.string('RPhi'),
        seeds_norm_by_area = cms.bool(False),
        threshold_histo_multicluster = cms.double(20.0),
        type_histoalgo = cms.string('HistoMaxC3d')
    ),
    histoMax_C3d_sorting_truncation_parameters = cms.PSet(
        AlgoName = cms.string('HGCalSortingTruncationWrapper'),
        maxTCs = cms.uint32(80)
    ),
    type_multicluster = cms.string('Histo')
)

process.histoMax_C3d_seeding_params = cms.PSet(
    binSumsHisto = cms.vuint32(
        13, 11, 11, 11, 9,
        9, 9, 7, 7, 7,
        7, 7, 7, 5, 5,
        5, 5, 5, 5, 5,
        5, 5, 5, 5, 5,
        5, 5, 5, 3, 3,
        3, 3, 3, 3, 3,
        3, 3, 3, 3, 3,
        3, 3
    ),
    kROverZMax = cms.double(0.58),
    kROverZMin = cms.double(0.076),
    nBins_X1_histo_multicluster = cms.uint32(42),
    nBins_X2_histo_multicluster = cms.uint32(216),
    neighbour_weights = cms.vdouble(
        0, 0.25, 0, 0.25, 0,
        0.25, 0, 0.25, 0
    ),
    seed_position = cms.string('TCWeighted'),
    seed_smoothing_ecal = cms.vdouble(
        1.0, 1.0, 1.0, 1.0, 1.1,
        1.0, 1.0, 1.0, 1.0
    ),
    seed_smoothing_hcal = cms.vdouble(
        1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 2.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0
    ),
    seeding_space = cms.string('RPhi'),
    seeds_norm_by_area = cms.bool(False),
    threshold_histo_multicluster = cms.double(20.0),
    type_histoalgo = cms.string('HistoMaxC3d')
)

process.histoMax_C3d_sorting_truncation_params = cms.PSet(
    AlgoName = cms.string('HGCalSortingTruncationWrapper'),
    maxTCs = cms.uint32(80)
)

process.histoSecondaryMax_C3d_params = cms.PSet(
    binSumsHisto = cms.vuint32(
        13, 11, 11, 11, 9,
        9, 9, 7, 7, 7,
        7, 7, 7, 5, 5,
        5, 5, 5, 5, 5,
        5, 5, 5, 5, 5,
        5, 5, 5, 3, 3,
        3, 3, 3, 3, 3,
        3, 3, 3, 3, 3,
        3, 3
    ),
    kROverZMax = cms.double(0.58),
    kROverZMin = cms.double(0.076),
    nBins_X1_histo_multicluster = cms.uint32(42),
    nBins_X2_histo_multicluster = cms.uint32(216),
    neighbour_weights = cms.vdouble(
        0, 0.25, 0, 0.25, 0,
        0.25, 0, 0.25, 0
    ),
    seed_position = cms.string('TCWeighted'),
    seed_smoothing_ecal = cms.vdouble(
        1.0, 1.0, 1.0, 1.0, 1.1,
        1.0, 1.0, 1.0, 1.0
    ),
    seed_smoothing_hcal = cms.vdouble(
        1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 2.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0
    ),
    seeding_space = cms.string('RPhi'),
    seeds_norm_by_area = cms.bool(False),
    threshold_histo_multicluster = cms.double(20.0),
    type_histoalgo = cms.string('HistoSecondaryMaxC3d')
)

process.histoThreshold_C3d_params = cms.PSet(
    binSumsHisto = cms.vuint32(
        13, 11, 11, 11, 9,
        9, 9, 7, 7, 7,
        7, 7, 7, 5, 5,
        5, 5, 5, 5, 5,
        5, 5, 5, 5, 5,
        5, 5, 5, 3, 3,
        3, 3, 3, 3, 3,
        3, 3, 3, 3, 3,
        3, 3
    ),
    kROverZMax = cms.double(0.58),
    kROverZMin = cms.double(0.076),
    nBins_X1_histo_multicluster = cms.uint32(42),
    nBins_X2_histo_multicluster = cms.uint32(216),
    neighbour_weights = cms.vdouble(
        0, 0.25, 0, 0.25, 0,
        0.25, 0, 0.25, 0
    ),
    seed_position = cms.string('TCWeighted'),
    seed_smoothing_ecal = cms.vdouble(
        1.0, 1.0, 1.0, 1.0, 1.1,
        1.0, 1.0, 1.0, 1.0
    ),
    seed_smoothing_hcal = cms.vdouble(
        1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 2.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0
    ),
    seeding_space = cms.string('RPhi'),
    seeds_norm_by_area = cms.bool(False),
    threshold_histo_multicluster = cms.double(20.0),
    type_histoalgo = cms.string('HistoThresholdC3d')
)

process.hltPhase2L3MuonHighPtTripletStepTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(False),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('hltPhase2L3MuonHighPtTripletStepChi2Est'),
    foundHitBonus = cms.double(10.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('hltPhase2L3MuonHighPtTripletStepTrajectoryFilterInOut')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(2),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterialParabolicMf'),
    propagatorOpposite = cms.string('PropagatorWithMaterialParabolicMfOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('hltPhase2L3MuonHighPtTripletStepTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(False)
)

process.hltPhase2L3MuonHighPtTripletStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CompositeTrajectoryFilter'),
    filters = cms.VPSet(
        cms.PSet(
            refToPSet_ = cms.string('hltPhase2L3MuonHighPtTripletStepTrajectoryFilterBase')
        ),
        cms.PSet(
            refToPSet_ = cms.string('ClusterShapeTrajectoryFilter')
        )
    )
)

process.hltPhase2L3MuonHighPtTripletStepTrajectoryFilterBase = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(1.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(0),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(1),
    maxLostHitsFraction = cms.double(999.0),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(1),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.hltPhase2L3MuonHighPtTripletStepTrajectoryFilterInOut = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minimumNumberOfHits = cms.int32(4),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(1),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.hltPhase2L3MuonInitialStepTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(False),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('hltPhase2L3MuonInitialStepChi2Est'),
    foundHitBonus = cms.double(10.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('hltPhase2L3MuonInitialStepTrajectoryFilter')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(True),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(2),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(1),
    propagatorAlong = cms.string('PropagatorWithMaterialParabolicMf'),
    propagatorOpposite = cms.string('PropagatorWithMaterialParabolicMfOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('hltPhase2L3MuonInitialStepTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.hltPhase2L3MuonInitialStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(1.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(0),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(1),
    maxLostHitsFraction = cms.double(999),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(4),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minimumNumberOfHits = cms.int32(4),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.hltPhase2L3MuonPSetPvClusterComparerForIT = cms.PSet(
    track_chi2_max = cms.double(20.0),
    track_prob_min = cms.double(-1.0),
    track_pt_max = cms.double(100.0),
    track_pt_min = cms.double(1.0)
)

process.hltPhase2L3MuonSeedFromProtoTracks = cms.PSet(
    ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
    MinOneOverPtError = cms.double(1.0),
    OriginTransverseErrorMultiplier = cms.double(1.0),
    SeedMomentumForBOFF = cms.double(5.0),
    TTRHBuilder = cms.string('WithTrackAngle'),
    forceKinematicWithRegionDirection = cms.bool(False),
    magneticField = cms.string(''),
    propagator = cms.string('PropagatorWithMaterial')
)

process.hltPhase2PSetPvClusterComparerForIT = cms.PSet(
    track_chi2_max = cms.double(20.0),
    track_prob_min = cms.double(-1.0),
    track_pt_max = cms.double(100.0),
    track_pt_min = cms.double(1.0)
)

process.hltPhase2SeedFromProtoTracks = cms.PSet(
    ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
    MinOneOverPtError = cms.double(1.0),
    OriginTransverseErrorMultiplier = cms.double(1.0),
    SeedMomentumForBOFF = cms.double(5.0),
    TTRHBuilder = cms.string('WithTrackAngle'),
    forceKinematicWithRegionDirection = cms.bool(False),
    magneticField = cms.string(''),
    propagator = cms.string('PropagatorWithMaterial')
)

process.initialStepTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(False),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('initialStepChi2Est'),
    foundHitBonus = cms.double(10.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('initialStepTrajectoryFilter')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(True),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(2),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(1),
    propagatorAlong = cms.string('PropagatorWithMaterialParabolicMf'),
    propagatorOpposite = cms.string('PropagatorWithMaterialParabolicMfOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('initialStepTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.initialStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(1.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(0),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(1),
    maxLostHitsFraction = cms.double(999),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(4),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minimumNumberOfHits = cms.int32(4),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.initialStepTrajectoryFilterBasePreSplitting = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(0),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutLoose')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.2),
    minimumNumberOfHits = cms.int32(4),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.initialStepTrajectoryFilterPreSplitting = cms.PSet(
    ComponentType = cms.string('CompositeTrajectoryFilter'),
    filters = cms.VPSet(
        cms.PSet(
            refToPSet_ = cms.string('initialStepTrajectoryFilterBasePreSplitting')
        ),
        cms.PSet(
            refToPSet_ = cms.string('initialStepTrajectoryFilterShapePreSplitting')
        )
    )
)

process.initialStepTrajectoryFilterShapePreSplitting = cms.PSet(
    ComponentType = cms.string('StripSubClusterShapeTrajectoryFilter'),
    layerMask = cms.PSet(
        TEC = cms.bool(False),
        TIB = cms.vuint32(1, 2),
        TID = cms.vuint32(1, 2),
        TOB = cms.bool(False)
    ),
    maxNSat = cms.uint32(3),
    maxTrimmedSizeDiffNeg = cms.double(1.0),
    maxTrimmedSizeDiffPos = cms.double(0.7),
    seedCutMIPs = cms.double(0.35),
    seedCutSN = cms.double(7.0),
    subclusterCutMIPs = cms.double(0.45),
    subclusterCutSN = cms.double(12.0),
    subclusterWindow = cms.double(0.7),
    trimMaxADC = cms.double(30.0),
    trimMaxFracNeigh = cms.double(0.25),
    trimMaxFracTotal = cms.double(0.15)
)

process.jetCoreRegionalStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.1),
    minimumNumberOfHits = cms.int32(4),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.layer1truncation_proc = cms.PSet(
    C2d_parameters = cms.PSet(
        applyLayerCalibration = cms.bool(False),
        calibSF_cluster = cms.double(1.0),
        clusterType = cms.string('dummyC2d'),
        layerWeights = cms.vdouble(
            0.0, 0.0183664, 0.0, 0.0305622, 0.0,
            0.0162589, 0.0, 0.0143918, 0.0, 0.0134475,
            0.0, 0.0185754, 0.0, 0.0204934, 0.0,
            0.016901, 0.0, 0.0207958, 0.0, 0.0167985,
            0.0, 0.0238385, 0.0, 0.0301146, 0.0,
            0.0274622, 0.0, 0.0468671, 0.0, 0.078819,
            0.0555831, 0.0609312, 0.0610768, 0.0657626, 0.0465653,
            0.0629383, 0.0610061, 0.0517326, 0.0492882, 0.0699336,
            0.0673457, 0.119896, 0.125327, 0.143235, 0.153295,
            0.104777, 0.109345, 0.161386, 0.174656, 0.108053,
            0.121674, 0.1171, 0.328053
        )
    ),
    ProcessorName = cms.string('HGCalBackendLayer1Processor'),
    truncation_parameters = cms.PSet(
        doTruncation = cms.bool(True),
        maxTcsPerBin = cms.vuint32(
            2, 7, 27, 24, 19,
            17, 16, 15, 14, 14,
            13, 13, 13, 12, 12,
            12, 11, 11, 11, 10,
            10, 10, 10, 10, 9,
            9, 10, 9, 9, 9,
            8, 8, 7, 5, 3,
            3, 3, 3, 3, 3,
            3, 3
        ),
        phiSectorEdges = cms.vdouble(
            0.98901991, 0.72722052, 0.6981317, 0.87266463, 0.93084227,
            0.90175345, 0.87266463, 0.90175345, 0.95993109, 0.95993109,
            0.93084227, 0.93084227, 0.95993109, 0.98901991, 0.95993109,
            0.95993109, 0.95993109, 0.98901991, 0.98901991, 0.95993109,
            0.95993109, 0.98901991, 0.98901991, 0.98901991, 0.98901991,
            0.98901991, 1.01810873, 0.98901991, 0.98901991, 0.98901991,
            0.98901991, 0.98901991, 0.98901991, 0.98901991, 1.04719755,
            1.04719755, 1.04719755, 1.04719755, 1.01810873, 1.04719755,
            1.01810873, 1.01810873
        ),
        rozBins = cms.uint32(42),
        rozMax = cms.double(0.55508006),
        rozMin = cms.double(0.07587128)
    )
)

process.linearization_params_sc = cms.PSet(
    adcnBits = cms.uint32(10),
    adcsaturation = cms.double(68.75),
    linLSB = cms.double(0.067138671875),
    linnBits = cms.uint32(17),
    oot_coefficients = cms.vdouble(0.0, 0.0),
    tdcOnset = cms.double(55),
    tdcnBits = cms.uint32(12),
    tdcsaturation = cms.double(1000)
)

process.linearization_params_si = cms.PSet(
    adcnBits = cms.uint32(10),
    adcsaturation = cms.double(100),
    linLSB = cms.double(0.09765625),
    linnBits = cms.uint32(17),
    oot_coefficients = cms.vdouble(0.0, 0.0),
    tdcOnset = cms.double(60),
    tdcnBits = cms.uint32(12),
    tdcsaturation = cms.double(10000)
)

process.lowPtGsfEleTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(1),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(-1),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(-1),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.0),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.lowPtQuadStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CompositeTrajectoryFilter'),
    filters = cms.VPSet(
        cms.PSet(
            refToPSet_ = cms.string('lowPtQuadStepTrajectoryFilterBase')
        ),
        cms.PSet(
            refToPSet_ = cms.string('ClusterShapeTrajectoryFilter')
        )
    )
)

process.lowPtQuadStepTrajectoryFilterBase = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.075),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.lowPtTripletStepStandardTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.075),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.lowPtTripletStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CompositeTrajectoryFilter'),
    filters = cms.VPSet(
        cms.PSet(
            refToPSet_ = cms.string('lowPtTripletStepStandardTrajectoryFilter')
        ),
        cms.PSet(
            refToPSet_ = cms.string('ClusterShapeTrajectoryFilter')
        )
    )
)

process.lowPtTripletStepTrajectoryFilterInOut = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.075),
    minimumNumberOfHits = cms.int32(4),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(1),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.maxEvents = cms.untracked.PSet(
    input = cms.untracked.int32(100),
    output = cms.optional.untracked.allowed(cms.int32,cms.PSet)
)

process.maxLuminosityBlocks = cms.untracked.PSet(
    input = cms.untracked.int32(-1)
)

process.mixedTripletStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(1.4),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.1),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.mtdDigitizer = cms.PSet(
    accumulatorType = cms.string('MTDDigiProducer'),
    barrelDigitizer = cms.PSet(
        DeviceSimulation = cms.PSet(
            LCEpositionSlope = cms.double(0.071),
            LightCollectionEff = cms.double(0.25),
            LightCollectionSlope = cms.double(0.075),
            LightYield = cms.double(40000.0),
            PhotonDetectionEff = cms.double(0.2),
            bxTime = cms.double(25)
        ),
        ElectronicsSimulation = cms.PSet(
            ChannelTimeOffset = cms.double(0.0),
            CorrelationCoefficient = cms.double(1.0),
            DarkCountRate = cms.double(10.0),
            EnergyThreshold = cms.double(4.0),
            LightCollectionEff = cms.double(0.25),
            LightYield = cms.double(40000.0),
            Npe_to_V = cms.double(0.0064),
            Npe_to_pC = cms.double(0.016),
            PhotonDetectionEff = cms.double(0.2),
            ReferencePulseNpe = cms.double(100.0),
            ScintillatorDecayTime = cms.double(40.0),
            ScintillatorRiseTime = cms.double(1.1),
            SigmaClock = cms.double(0.015),
            SigmaElectronicNoise = cms.double(1.0),
            SigmaRelTOFHIRenergy = cms.vdouble(0.139, -4.35e-05, 3.315e-09, -1.2e-13, 1.67e-18),
            SinglePhotonTimeResolution = cms.double(0.06),
            SmearTimeForOOTtails = cms.bool(True),
            TestBeamMIPTimeRes = cms.double(4.293),
            TimeThreshold1 = cms.double(20.0),
            TimeThreshold2 = cms.double(50.0),
            adcNbits = cms.uint32(10),
            adcSaturation_MIP = cms.double(600.0),
            adcThreshold_MIP = cms.double(0.064),
            bxTime = cms.double(25),
            smearChannelTimeOffset = cms.double(0.0),
            tdcNbits = cms.uint32(10),
            toaLSB_ns = cms.double(0.02)
        ),
        digiCollectionTag = cms.string('FTLBarrel'),
        digitizerName = cms.string('BTLDigitizer'),
        inputSimHits = cms.InputTag("g4SimHits","FastTimerHitsBarrel"),
        maxSimHitsAccTime = cms.uint32(100),
        premixStage1 = cms.bool(False),
        premixStage1MaxCharge = cms.double(1000000.0),
        premixStage1MinCharge = cms.double(0.0001)
    ),
    endcapDigitizer = cms.PSet(
        DeviceSimulation = cms.PSet(
            FluenceVsRadius = cms.string('1.937*TMath::Power(x,-1.706)'),
            IntegratedLuminosity = cms.double(1000.0),
            LGADGainDegradation = cms.string('TMath::Max(1.0, TMath::Min(x, x + 0.05/0.01 * (x - 1) + y * (1 - x)/0.01))'),
            LGADGainVsFluence = cms.string('TMath::Min(15.,30.-x)'),
            MPVElectron = cms.string('1.30030e-05 + 1.55166e-07 / (x * x)'),
            MPVKaon = cms.string('1.20998e-05 + 2.47192e-06 / (x * x * x)'),
            MPVMuon = cms.string('1.21561e-05 + 8.89462e-07 / (x * x)'),
            MPVPion = cms.string('1.24531e-05 + 7.16578e-07 / (x * x)'),
            MPVProton = cms.string('1.13666e-05 + 1.20093e-05 / (x * x)'),
            applyDegradation = cms.bool(False),
            bxTime = cms.double(25),
            meVPerMIP = cms.double(0.015),
            tofDelay = cms.double(1)
        ),
        ElectronicsSimulation = cms.PSet(
            IntegratedLuminosity = cms.double(1000.0),
            adcNbits = cms.uint32(8),
            adcSaturation_MIP = cms.double(100),
            adcThreshold_MIP = cms.double(0.025),
            bxTime = cms.double(25),
            formulaLandauNoise = cms.string('TMath::Max(0.020, 0.020 * (0.35 * (x - 1.0) + 1.0))'),
            iThreshold_MIP = cms.double(0.9525),
            noiseLevel = cms.double(0.3554),
            referenceChargeColl = cms.double(1.0),
            sigmaDistorsion = cms.double(0.0),
            sigmaTDC = cms.double(0.01),
            tdcNbits = cms.uint32(11),
            toaLSB_ns = cms.double(0.013)
        ),
        digiCollectionTag = cms.string('FTLEndcap'),
        digitizerName = cms.string('ETLDigitizer'),
        inputSimHits = cms.InputTag("g4SimHits","FastTimerHitsEndcap"),
        maxSimHitsAccTime = cms.uint32(100),
        premixStage1 = cms.bool(False),
        premixStage1MaxCharge = cms.double(1000000.0),
        premixStage1MinCharge = cms.double(0.0001)
    ),
    makeDigiSimLinks = cms.bool(False),
    verbosity = cms.untracked.uint32(0)
)

process.mtdTruth = cms.PSet(
    HepMCProductLabel = cms.InputTag("generatorSmeared"),
    MaxPseudoRapidity = cms.double(5.0),
    MinEnergy = cms.double(0.5),
    accumulatorType = cms.string('MtdTruthAccumulator'),
    allowDifferentSimHitProcesses = cms.bool(False),
    bunchspace = cms.uint32(25),
    genParticleCollection = cms.InputTag("genParticles"),
    maximumPreviousBunchCrossing = cms.uint32(0),
    maximumSubsequentBunchCrossing = cms.uint32(0),
    premixStage1 = cms.bool(False),
    simHitCollections = cms.PSet(
        mtdCollections = cms.VInputTag(cms.InputTag("g4SimHits","FastTimerHitsBarrel"), cms.InputTag("g4SimHits","FastTimerHitsEndcap"))
    ),
    simTrackCollection = cms.InputTag("g4SimHits"),
    simVertexCollection = cms.InputTag("g4SimHits")
)

process.muonSeededTrajectoryBuilderForInOut = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('muonSeededMeasurementEstimatorForInOut'),
    foundHitBonus = cms.double(1000.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('muonSeededTrajectoryFilterForInOut')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(True),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(1.0),
    maxCand = cms.int32(5),
    minNrOfHitsForRebuild = cms.int32(2),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('muonSeededTrajectoryFilterForInOut')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.muonSeededTrajectoryBuilderForOutInDisplaced = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('muonSeededMeasurementEstimatorForOutInDisplaced'),
    foundHitBonus = cms.double(1000.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('muonSeededTrajectoryFilterForOutInDisplaced')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(1.0),
    maxCand = cms.int32(3),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    seedAs5DHit = cms.bool(False),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('muonSeededTrajectoryFilterForOutInDisplaced')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.muonSeededTrajectoryFilterForInOut = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(10),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.muonSeededTrajectoryFilterForOutIn = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(10),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minimumNumberOfHits = cms.int32(5),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.muonSeededTrajectoryFilterForOutInDisplaced = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(10),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minimumNumberOfHits = cms.int32(5),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.nanoDQMIO_perLSoutput = cms.PSet(
    MEsToSave = cms.untracked.vstring( (
        'Hcal/DigiTask/Occupancy/depth/depth1',
        'Hcal/DigiTask/Occupancy/depth/depth2',
        'Hcal/DigiTask/Occupancy/depth/depth3',
        'Hcal/DigiTask/Occupancy/depth/depth4',
        'Hcal/DigiTask/Occupancy/depth/depth5',
        'Hcal/DigiTask/Occupancy/depth/depth6',
        'Hcal/DigiTask/Occupancy/depth/depth7',
        'Hcal/DigiTask/Occupancy/depth/depthHO',
        'Hcal/DigiTask/OccupancyCut/depth/depth1',
        'Hcal/DigiTask/OccupancyCut/depth/depth2',
        'Hcal/DigiTask/OccupancyCut/depth/depth3',
        'Hcal/DigiTask/OccupancyCut/depth/depth4',
        'Hcal/DigiTask/OccupancyCut/depth/depth5',
        'Hcal/DigiTask/OccupancyCut/depth/depth6',
        'Hcal/DigiTask/OccupancyCut/depth/depth7',
        'Hcal/DigiTask/OccupancyCut/depth/depthHO',
        'EcalBarrel/EBOccupancyTask/EBOT digi occupancy',
        'EcalEndcap/EEOccupancyTask/EEOT digi occupancy EE -',
        'EcalEndcap/EEOccupancyTask/EEOT digi occupancy EE +',
        'EcalBarrel/EBOccupancyTask/EBOT DCC entries',
        'EcalEndcap/EEOccupancyTask/EEOT DCC entries',
        'Ecal/EventInfo/processedEvents',
        'PixelPhase1/Tracks/charge_PXBarrel',
        'PixelPhase1/Tracks/charge_PXForward',
        'PixelPhase1/Tracks/PXBarrel/charge_PXLayer_1',
        'PixelPhase1/Tracks/PXBarrel/charge_PXLayer_2',
        'PixelPhase1/Tracks/PXBarrel/charge_PXLayer_3',
        'PixelPhase1/Tracks/PXBarrel/charge_PXLayer_4',
        'PixelPhase1/Tracks/PXForward/charge_PXDisk_+1',
        'PixelPhase1/Tracks/PXForward/charge_PXDisk_+2',
        'PixelPhase1/Tracks/PXForward/charge_PXDisk_+3',
        'PixelPhase1/Tracks/PXForward/charge_PXDisk_-1',
        'PixelPhase1/Tracks/PXForward/charge_PXDisk_-2',
        'PixelPhase1/Tracks/PXForward/charge_PXDisk_-3',
        'PixelPhase1/Tracks/PXBarrel/size_PXLayer_1',
        'PixelPhase1/Tracks/PXBarrel/size_PXLayer_2',
        'PixelPhase1/Tracks/PXBarrel/size_PXLayer_3',
        'PixelPhase1/Tracks/PXBarrel/size_PXLayer_4',
        'PixelPhase1/Tracks/PXForward/size_PXDisk_+1',
        'PixelPhase1/Tracks/PXForward/size_PXDisk_+2',
        'PixelPhase1/Tracks/PXForward/size_PXDisk_+3',
        'PixelPhase1/Tracks/PXForward/size_PXDisk_-1',
        'PixelPhase1/Tracks/PXForward/size_PXDisk_-2',
        'PixelPhase1/Tracks/PXForward/size_PXDisk_-3',
        'CSC/CSCOfflineMonitor/recHits/hRHGlobalm1',
        'CSC/CSCOfflineMonitor/recHits/hRHGlobalm2',
        'CSC/CSCOfflineMonitor/recHits/hRHGlobalm3',
        'CSC/CSCOfflineMonitor/recHits/hRHGlobalm4',
        'CSC/CSCOfflineMonitor/recHits/hRHGlobalp1',
        'CSC/CSCOfflineMonitor/recHits/hRHGlobalp2',
        'CSC/CSCOfflineMonitor/recHits/hRHGlobalp3',
        'CSC/CSCOfflineMonitor/recHits/hRHGlobalp4',
        'HLT/Vertexing/hltPixelVertices/hltPixelVertices/goodvtxNbr',
        'HLT/Tracking/ValidationWRTOffline/hltMergedWrtHighPurityPV/mon_eta',
        'HLT/Tracking/ValidationWRTOffline/hltMergedWrtHighPurityPV/mon_hits',
        'HLT/Tracking/ValidationWRTOffline/hltMergedWrtHighPurityPV/mon_phi',
        'HLT/Tracking/ValidationWRTOffline/hltMergedWrtHighPurityPV/mon_pt',
        'HLT/Tracking/ValidationWRTOffline/hltMergedWrtHighPurityPV/mon_unMatched_eta',
        'HLT/Tracking/ValidationWRTOffline/hltMergedWrtHighPurityPV/mon_unMatched_hits',
        'HLT/Tracking/ValidationWRTOffline/hltMergedWrtHighPurityPV/mon_unMatched_phi',
        'HLT/Tracking/ValidationWRTOffline/hltMergedWrtHighPurityPV/mon_unMatched_pt',
        'HLT/Tracking/ValidationWRTOffline/hltMergedWrtHighPurityPV/ref_eta',
        'HLT/Tracking/ValidationWRTOffline/hltMergedWrtHighPurityPV/ref_hits',
        'HLT/Tracking/ValidationWRTOffline/hltMergedWrtHighPurityPV/ref_matched_eta',
        'HLT/Tracking/ValidationWRTOffline/hltMergedWrtHighPurityPV/ref_matched_hits',
        'HLT/Tracking/ValidationWRTOffline/hltMergedWrtHighPurityPV/ref_matched_phi',
        'HLT/Tracking/ValidationWRTOffline/hltMergedWrtHighPurityPV/ref_matched_pt',
        'HLT/Tracking/ValidationWRTOffline/hltMergedWrtHighPurityPV/ref_phi',
        'HLT/Tracking/ValidationWRTOffline/hltMergedWrtHighPurityPV/ref_pt',
        'HLT/Tracking/pixelTracks/GeneralProperties/Chi2Prob_GenTk',
        'HLT/Tracking/pixelTracks/GeneralProperties/Chi2oNDFVsEta_ImpactPoint_GenTk',
        'HLT/Tracking/pixelTracks/GeneralProperties/DeltaZToPVZoom_GenTk',
        'HLT/Tracking/pixelTracks/GeneralProperties/DistanceOfClosestApproachToPVVsPhi_GenTk',
        'HLT/Tracking/pixelTracks/GeneralProperties/DistanceOfClosestApproachToPVZoom_GenTk',
        'HLT/Tracking/pixelTracks/GeneralProperties/NumberOfTracks_GenTk',
        'HLT/Tracking/tracks/GeneralProperties/Chi2Prob_GenTk',
        'HLT/Tracking/tracks/GeneralProperties/Chi2oNDFVsEta_ImpactPoint_GenTk',
        'HLT/Tracking/tracks/GeneralProperties/DeltaZToPVZoom_GenTk',
        'HLT/Tracking/tracks/GeneralProperties/DistanceOfClosestApproachToPVVsPhi_GenTk',
        'HLT/Tracking/tracks/GeneralProperties/DistanceOfClosestApproachToPVZoom_GenTk',
        'HLT/Tracking/tracks/GeneralProperties/NumberOfTracks_GenTk',
        'HLT/Tracking/tracks/LUMIanalysis/NumberEventsVsLUMI',
        'HLT/Tracking/tracks/PUmonitoring/NumberEventsVsGoodPVtx',
        'PixelPhase1/Tracks/num_clusters_ontrack_PXBarrel',
        'PixelPhase1/Tracks/num_clusters_ontrack_PXForward',
        'PixelPhase1/Tracks/clusterposition_zphi_ontrack',
        'PixelPhase1/Tracks/PXBarrel/clusterposition_zphi_ontrack_PXLayer_1',
        'PixelPhase1/Tracks/PXBarrel/clusterposition_zphi_ontrack_PXLayer_2',
        'PixelPhase1/Tracks/PXBarrel/clusterposition_zphi_ontrack_PXLayer_3',
        'PixelPhase1/Tracks/PXBarrel/clusterposition_zphi_ontrack_PXLayer_4',
        'PixelPhase1/Tracks/PXForward/clusterposition_xy_ontrack_PXDisk_+1',
        'PixelPhase1/Tracks/PXForward/clusterposition_xy_ontrack_PXDisk_+2',
        'PixelPhase1/Tracks/PXForward/clusterposition_xy_ontrack_PXDisk_+3',
        'PixelPhase1/Tracks/PXForward/clusterposition_xy_ontrack_PXDisk_-1',
        'PixelPhase1/Tracks/PXForward/clusterposition_xy_ontrack_PXDisk_-2',
        'PixelPhase1/Tracks/PXForward/clusterposition_xy_ontrack_PXDisk_-3',
        'PixelPhase1/Phase1_MechanicalView/PXBarrel/digi_occupancy_per_SignedModuleCoord_per_SignedLadderCoord_PXLayer_1',
        'PixelPhase1/Phase1_MechanicalView/PXBarrel/digi_occupancy_per_SignedModuleCoord_per_SignedLadderCoord_PXLayer_2',
        'PixelPhase1/Phase1_MechanicalView/PXBarrel/digi_occupancy_per_SignedModuleCoord_per_SignedLadderCoord_PXLayer_3',
        'PixelPhase1/Phase1_MechanicalView/PXBarrel/digi_occupancy_per_SignedModuleCoord_per_SignedLadderCoord_PXLayer_4',
        'PixelPhase1/Phase1_MechanicalView/PXForward/digi_occupancy_per_SignedDiskCoord_per_SignedBladePanelCoord_PXRing_1',
        'PixelPhase1/Phase1_MechanicalView/PXForward/digi_occupancy_per_SignedDiskCoord_per_SignedBladePanelCoord_PXRing_2',
        'PixelPhase1/Phase1_MechanicalView/PXBarrel/clusters_per_SignedModuleCoord_per_SignedLadderCoord_PXLayer_1',
        'PixelPhase1/Phase1_MechanicalView/PXBarrel/clusters_per_SignedModuleCoord_per_SignedLadderCoord_PXLayer_2',
        'PixelPhase1/Phase1_MechanicalView/PXBarrel/clusters_per_SignedModuleCoord_per_SignedLadderCoord_PXLayer_3',
        'PixelPhase1/Phase1_MechanicalView/PXBarrel/clusters_per_SignedModuleCoord_per_SignedLadderCoord_PXLayer_4',
        'PixelPhase1/Phase1_MechanicalView/PXForward/clusters_per_SignedDiskCoord_per_SignedBladePanelCoord_PXRing_1',
        'PixelPhase1/Phase1_MechanicalView/PXForward/clusters_per_SignedDiskCoord_per_SignedBladePanelCoord_PXRing_2',
        'SiStrip/MechanicalView/TEC/PLUS/wheel_1/NormalizedHitResiduals_TEC__wheel__1',
        'SiStrip/MechanicalView/TEC/PLUS/wheel_2/NormalizedHitResiduals_TEC__wheel__2',
        'SiStrip/MechanicalView/TEC/PLUS/wheel_3/NormalizedHitResiduals_TEC__wheel__3',
        'SiStrip/MechanicalView/TEC/PLUS/wheel_4/NormalizedHitResiduals_TEC__wheel__4',
        'SiStrip/MechanicalView/TEC/PLUS/wheel_5/NormalizedHitResiduals_TEC__wheel__5',
        'SiStrip/MechanicalView/TEC/PLUS/wheel_6/NormalizedHitResiduals_TEC__wheel__6',
        'SiStrip/MechanicalView/TEC/PLUS/wheel_7/NormalizedHitResiduals_TEC__wheel__7',
        'SiStrip/MechanicalView/TEC/PLUS/wheel_8/NormalizedHitResiduals_TEC__wheel__8',
        'SiStrip/MechanicalView/TEC/PLUS/wheel_9/NormalizedHitResiduals_TEC__wheel__9',
        'SiStrip/MechanicalView/TEC/MINUS/wheel_1/NormalizedHitResiduals_TEC__wheel__1',
        'SiStrip/MechanicalView/TEC/MINUS/wheel_2/NormalizedHitResiduals_TEC__wheel__2',
        'SiStrip/MechanicalView/TEC/MINUS/wheel_3/NormalizedHitResiduals_TEC__wheel__3',
        'SiStrip/MechanicalView/TEC/MINUS/wheel_4/NormalizedHitResiduals_TEC__wheel__4',
        'SiStrip/MechanicalView/TEC/MINUS/wheel_5/NormalizedHitResiduals_TEC__wheel__5',
        'SiStrip/MechanicalView/TEC/MINUS/wheel_6/NormalizedHitResiduals_TEC__wheel__6',
        'SiStrip/MechanicalView/TEC/MINUS/wheel_7/NormalizedHitResiduals_TEC__wheel__7',
        'SiStrip/MechanicalView/TEC/MINUS/wheel_8/NormalizedHitResiduals_TEC__wheel__8',
        'SiStrip/MechanicalView/TEC/MINUS/wheel_9/NormalizedHitResiduals_TEC__wheel__9',
        'SiStrip/MechanicalView/TEC/PLUS/wheel_1/Summary_ClusterStoNCorr__OnTrack__TEC__PLUS__wheel__1',
        'SiStrip/MechanicalView/TEC/PLUS/wheel_2/Summary_ClusterStoNCorr__OnTrack__TEC__PLUS__wheel__2',
        'SiStrip/MechanicalView/TEC/PLUS/wheel_3/Summary_ClusterStoNCorr__OnTrack__TEC__PLUS__wheel__3',
        'SiStrip/MechanicalView/TEC/PLUS/wheel_4/Summary_ClusterStoNCorr__OnTrack__TEC__PLUS__wheel__4',
        'SiStrip/MechanicalView/TEC/PLUS/wheel_5/Summary_ClusterStoNCorr__OnTrack__TEC__PLUS__wheel__5',
        'SiStrip/MechanicalView/TEC/PLUS/wheel_6/Summary_ClusterStoNCorr__OnTrack__TEC__PLUS__wheel__6',
        'SiStrip/MechanicalView/TEC/PLUS/wheel_7/Summary_ClusterStoNCorr__OnTrack__TEC__PLUS__wheel__7',
        'SiStrip/MechanicalView/TEC/PLUS/wheel_8/Summary_ClusterStoNCorr__OnTrack__TEC__PLUS__wheel__8',
        'SiStrip/MechanicalView/TEC/PLUS/wheel_9/Summary_ClusterStoNCorr__OnTrack__TEC__PLUS__wheel__9',
        'SiStrip/MechanicalView/TEC/MINUS/wheel_1/Summary_ClusterStoNCorr__OnTrack__TEC__MINUS__wheel__1',
        'SiStrip/MechanicalView/TEC/MINUS/wheel_2/Summary_ClusterStoNCorr__OnTrack__TEC__MINUS__wheel__2',
        'SiStrip/MechanicalView/TEC/MINUS/wheel_3/Summary_ClusterStoNCorr__OnTrack__TEC__MINUS__wheel__3',
        'SiStrip/MechanicalView/TEC/MINUS/wheel_4/Summary_ClusterStoNCorr__OnTrack__TEC__MINUS__wheel__4',
        'SiStrip/MechanicalView/TEC/MINUS/wheel_5/Summary_ClusterStoNCorr__OnTrack__TEC__MINUS__wheel__5',
        'SiStrip/MechanicalView/TEC/MINUS/wheel_6/Summary_ClusterStoNCorr__OnTrack__TEC__MINUS__wheel__6',
        'SiStrip/MechanicalView/TEC/MINUS/wheel_7/Summary_ClusterStoNCorr__OnTrack__TEC__MINUS__wheel__7',
        'SiStrip/MechanicalView/TEC/MINUS/wheel_8/Summary_ClusterStoNCorr__OnTrack__TEC__MINUS__wheel__8',
        'SiStrip/MechanicalView/TEC/MINUS/wheel_9/Summary_ClusterStoNCorr__OnTrack__TEC__MINUS__wheel__9',
        'SiStrip/MechanicalView/TIB/layer_1/NormalizedHitResiduals_TIB__Layer__1',
        'SiStrip/MechanicalView/TIB/layer_2/NormalizedHitResiduals_TIB__Layer__2',
        'SiStrip/MechanicalView/TIB/layer_3/NormalizedHitResiduals_TIB__Layer__3',
        'SiStrip/MechanicalView/TIB/layer_4/NormalizedHitResiduals_TIB__Layer__4',
        'SiStrip/MechanicalView/TIB/layer_1/Summary_ClusterStoNCorr__OnTrack__TIB__layer__1',
        'SiStrip/MechanicalView/TIB/layer_2/Summary_ClusterStoNCorr__OnTrack__TIB__layer__2',
        'SiStrip/MechanicalView/TIB/layer_3/Summary_ClusterStoNCorr__OnTrack__TIB__layer__3',
        'SiStrip/MechanicalView/TIB/layer_4/Summary_ClusterStoNCorr__OnTrack__TIB__layer__4',
        'SiStrip/MechanicalView/TID/PLUS/wheel_1/NormalizedHitResiduals_TID__wheel__1',
        'SiStrip/MechanicalView/TID/PLUS/wheel_2/NormalizedHitResiduals_TID__wheel__2',
        'SiStrip/MechanicalView/TID/PLUS/wheel_3/NormalizedHitResiduals_TID__wheel__3',
        'SiStrip/MechanicalView/TID/MINUS/wheel_1/NormalizedHitResiduals_TID__wheel__1',
        'SiStrip/MechanicalView/TID/MINUS/wheel_2/NormalizedHitResiduals_TID__wheel__2',
        'SiStrip/MechanicalView/TID/MINUS/wheel_3/NormalizedHitResiduals_TID__wheel__3',
        'SiStrip/MechanicalView/TID/PLUS/wheel_1/Summary_ClusterStoNCorr__OnTrack__TID__PLUS__wheel__1',
        'SiStrip/MechanicalView/TID/PLUS/wheel_2/Summary_ClusterStoNCorr__OnTrack__TID__PLUS__wheel__2',
        'SiStrip/MechanicalView/TID/PLUS/wheel_3/Summary_ClusterStoNCorr__OnTrack__TID__PLUS__wheel__3',
        'SiStrip/MechanicalView/TID/MINUS/wheel_1/Summary_ClusterStoNCorr__OnTrack__TID__MINUS__wheel__1',
        'SiStrip/MechanicalView/TID/MINUS/wheel_2/Summary_ClusterStoNCorr__OnTrack__TID__MINUS__wheel__2',
        'SiStrip/MechanicalView/TID/MINUS/wheel_3/Summary_ClusterStoNCorr__OnTrack__TID__MINUS__wheel__3',
        'SiStrip/MechanicalView/TOB/layer_1/NormalizedHitResiduals_TOB__Layer__1',
        'SiStrip/MechanicalView/TOB/layer_2/NormalizedHitResiduals_TOB__Layer__2',
        'SiStrip/MechanicalView/TOB/layer_3/NormalizedHitResiduals_TOB__Layer__3',
        'SiStrip/MechanicalView/TOB/layer_4/NormalizedHitResiduals_TOB__Layer__4',
        'SiStrip/MechanicalView/TOB/layer_5/NormalizedHitResiduals_TOB__Layer__5',
        'SiStrip/MechanicalView/TOB/layer_6/NormalizedHitResiduals_TOB__Layer__6',
        'SiStrip/MechanicalView/TOB/layer_1/Summary_ClusterStoNCorr__OnTrack__TOB__layer__1',
        'SiStrip/MechanicalView/TOB/layer_2/Summary_ClusterStoNCorr__OnTrack__TOB__layer__2',
        'SiStrip/MechanicalView/TOB/layer_3/Summary_ClusterStoNCorr__OnTrack__TOB__layer__3',
        'SiStrip/MechanicalView/TOB/layer_4/Summary_ClusterStoNCorr__OnTrack__TOB__layer__4',
        'SiStrip/MechanicalView/TOB/layer_5/Summary_ClusterStoNCorr__OnTrack__TOB__layer__5',
        'SiStrip/MechanicalView/TOB/layer_6/Summary_ClusterStoNCorr__OnTrack__TOB__layer__6',
        'SiStrip/MechanicalView/MainDiagonal Position',
        'SiStrip/MechanicalView/NumberOfClustersInPixel',
        'SiStrip/MechanicalView/NumberOfClustersInStrip',
        'SiStrip/MechanicalView/TID/PLUS/wheel_1/TkHMap_NumberOfDigi_TIDP_D1',
        'SiStrip/MechanicalView/TID/PLUS/wheel_1/TkHMap_NumberOfCluster_TIDP_D1',
        'SiStrip/MechanicalView/TIB/layer_1/TkHMap_NumberOfDigi_TIB_L1',
        'SiStrip/MechanicalView/TIB/layer_1/TkHMap_NumberOfCluster_TIB_L1',
        'SiStrip/MechanicalView/TOB/layer_1/TkHMap_NumberOfDigi_TOB_L1',
        'SiStrip/MechanicalView/TOB/layer_1/TkHMap_NumberOfCluster_TOB_L1',
        'SiStrip/MechanicalView/TEC/PLUS/wheel_1/TkHMap_NumberOfDigi_TECP_W1',
        'SiStrip/MechanicalView/TEC/PLUS/wheel_1/TkHMap_NumberOfCluster_TECP_W1',
        'Tracking/TrackParameters/generalTracks/LSanalysis/Chi2oNDF_lumiFlag_GenTk',
        'Tracking/TrackParameters/generalTracks/LSanalysis/NumberOfRecHitsPerTrack_lumiFlag_GenTk',
        'Tracking/TrackParameters/generalTracks/LSanalysis/NumberOfTracks_lumiFlag_GenTk',
        'Tracking/TrackParameters/highPurityTracks/pt_1/GeneralProperties/SIPDxyToPV_GenTk',
        'Tracking/TrackParameters/highPurityTracks/pt_1/GeneralProperties/SIPDzToPV_GenTk',
        'Tracking/TrackParameters/highPurityTracks/pt_1/GeneralProperties/SIP3DToPV_GenTk',
        'Tracking/TrackParameters/generalTracks/HitProperties/NumberOfMissingOuterRecHitsPerTrack_GenTk',
        'Tracking/TrackParameters/generalTracks/HitProperties/NumberMORecHitsPerTrackVsPt_GenTk',
        'Tracking/TrackParameters/highPurityTracks/pt_1/GeneralProperties/TrackEtaPhi_ImpactPoint_GenTk',
        'Tracking/TrackParameters/highPurityTracks/pt_1/GeneralProperties/NumberOfTracks_GenTk',
        'Tracking/TrackParameters/highPurityTracks/pt_1/HitProperties/NumberOfRecHitsPerTrack_GenTk',
        'Tracking/TrackParameters/highPurityTracks/pt_1/GeneralProperties/TrackPt_ImpactPoint_GenTk',
        'Tracking/TrackParameters/highPurityTracks/pt_1/GeneralProperties/Chi2oNDF_GenTk',
        'Tracking/TrackParameters/highPurityTracks/pt_1/GeneralProperties/TrackPhi_ImpactPoint_GenTk',
        'Tracking/TrackParameters/highPurityTracks/pt_1/GeneralProperties/TrackEta_ImpactPoint_GenTk',
        'Tracking/TrackParameters/highPurityTracks/pt_1/HitProperties/NumberOfRecHitsPerTrack_Strip_GenTk',
        'Tracking/TrackParameters/highPurityTracks/pt_1/HitProperties/NumberOfRecHitsPerTrack_Pixel_GenTk',
        'Tracking/TrackParameters/highPurityTracks/pt_1/GeneralProperties/DistanceOfClosestApproachToBS_GenTk',
        'Tracking/TrackParameters/highPurityTracks/pt_1/GeneralProperties/DistanceOfClosestApproachToBSdz_GenTk',
        'Tracking/TrackParameters/highPurityTracks/pt_1/GeneralProperties/DistanceOfClosestApproachToBSVsPhi_GenTk',
        'Tracking/TrackParameters/highPurityTracks/pt_1/GeneralProperties/DistanceOfClosestApproachToBSVsEta_GenTk',
        'Tracking/TrackParameters/highPurityTracks/pt_1/GeneralProperties/TrackQoverP_ImpactPoint_GenTk',
        'Tracking/TrackParameters/generalTracks/GeneralProperties/Quality_GenTk',
        'Tracking/TrackParameters/generalTracks/GeneralProperties/NumberofTracks_Hardvtx_GenTk',
        'Tracking/TrackParameters/generalTracks/GeneralProperties/NumberofTracks_PUvtx_GenTk',
        'Tracking/TrackParameters/generalTracks/GeneralProperties/TrackPtHighpurity_ImpactPoint_GenTk',
        'Tracking/TrackParameters/generalTracks/GeneralProperties/TrackPtTight_ImpactPoint_GenTk',
        'Tracking/TrackParameters/generalTracks/GeneralProperties/TrackPtLoose_ImpactPoint_GenTk',
        'Tracking/TrackParameters/generalTracks/GeneralProperties/TrackEtaHighpurity_ImpactPoint_GenTk',
        'Tracking/TrackParameters/generalTracks/GeneralProperties/TrackEtaTight_ImpactPoint_GenTk',
        'Tracking/TrackParameters/generalTracks/GeneralProperties/TrackEtaLoose_ImpactPoint_GenTk',
        'Tracking/PrimaryVertices/highPurityTracks/pt_0to1/offline/NumberOfGoodPVtx_offline',
        'Tracking/PrimaryVertices/highPurityTracks/pt_0to1/offline/GoodPVtxNumberOfTracks_offline',
        'Tracking/TrackParameters/generalTracks/GeneralProperties/NumberofTracks_Hardvtx_PUvtx_GenTk',
        'Tracking/PrimaryVertices/highPurityTracks/pt_0to1/offline/FractionOfGoodPVtx_offline',
        'Tracking/TrackParameters/generalTracks/GeneralProperties/TkEtaPhi_Ratio_byFoldingmap_ImpactPoint_GenTk',
        'Tracking/TrackParameters/generalTracks/GeneralProperties/TkEtaPhi_Ratio_byFoldingmap_op_ImpactPoint_GenTk',
        'Tracking/TrackParameters/generalTracks/GeneralProperties/TkEtaPhi_RelativeDifference_byFoldingmap_ImpactPoint_GenTk',
        'Tracking/TrackParameters/generalTracks/GeneralProperties/TkEtaPhi_RelativeDifference_byFoldingmap_op_ImpactPoint_GenTk',
        'OfflinePV/offlinePrimaryVertices/tagVtxProb',
        'OfflinePV/offlinePrimaryVertices/tagType',
        'OfflinePV/Resolution/PV/pull_x',
        'OfflinePV/Resolution/PV/pull_y',
        'OfflinePV/Resolution/PV/pull_z',
        'OfflinePV/offlinePrimaryVertices/tagDiffX',
        'OfflinePV/offlinePrimaryVertices/tagDiffY',
        'JetMET/Jet/Cleanedak4PFJetsCHS/CHFrac_highPt_Barrel',
        'JetMET/Jet/Cleanedak4PFJetsCHS/CHFrac_highPt_EndCap',
        'JetMET/Jet/Cleanedak4PFJetsCHS/CHFrac_mediumPt_Barrel',
        'JetMET/Jet/Cleanedak4PFJetsCHS/CHFrac_mediumPt_EndCap',
        'JetMET/Jet/Cleanedak4PFJetsCHS/CHFrac_lowPt_Barrel',
        'JetMET/Jet/Cleanedak4PFJetsCHS/CHFrac_lowPt_EndCap',
        'JetMET/Jet/Cleanedak4PFJetsCHS/ChMultiplicity_highPt_Barrel',
        'JetMET/Jet/Cleanedak4PFJetsCHS/ChMultiplicity_highPt_EndCap',
        'JetMET/Jet/Cleanedak4PFJetsCHS/ChMultiplicity_mediumPt_Barrel',
        'JetMET/Jet/Cleanedak4PFJetsCHS/ChMultiplicity_mediumPt_EndCap',
        'JetMET/Jet/Cleanedak4PFJetsCHS/ChMultiplicity_lowPt_Barrel',
        'JetMET/Jet/Cleanedak4PFJetsCHS/ChMultiplicity_lowPt_EndCap',
        'JetMET/Jet/Cleanedak4PFJetsCHS/Constituents',
        'JetMET/Jet/Cleanedak4PFJetsCHS/Eta',
        'JetMET/Jet/Cleanedak4PFJetsCHS/Eta_uncor',
        'JetMET/Jet/Cleanedak4PFJetsCHS/JetEnergyCorr',
        'JetMET/Jet/Cleanedak4PFJetsCHS/NJets',
        'JetMET/Jet/Cleanedak4PFJetsCHS/Phi',
        'JetMET/Jet/Cleanedak4PFJetsCHS/Phi_Barrel',
        'JetMET/Jet/Cleanedak4PFJetsCHS/Phi_EndCap',
        'JetMET/Jet/Cleanedak4PFJetsCHS/Pt',
        'JetMET/Jet/Cleanedak4PFJetsPuppi/PtJetMET/Jet/Cleanedak4PFJetsPuppi/Phi',
        'JetMET/Jet/Cleanedak4PFJetsPuppi/Phi_Barrel',
        'JetMET/Jet/Cleanedak4PFJetsPuppi/Phi_EndCap',
        'JetMET/Jet/Cleanedak4PFJetsPuppi/JetEnergyCorr',
        'JetMET/Jet/Cleanedak4PFJetsPuppi/NJets',
        'JetMET/Jet/Cleanedak4PFJetsPuppi/Eta',
        'JetMET/Jet/Cleanedak4PFJetsPuppi/Eta_uncor',
        'JetMET/MET/pfMETT1/Cleaned/METSig',
        'JetMET/vertices',
        'Muons/MuonRecoAnalyzer/GlbMuon_Glb_pt',
        'Muons/MuonRecoAnalyzer/GlbMuon_Glb_eta',
        'Muons/MuonRecoAnalyzer/GlbMuon_Glb_phi',
        'Muons/MuonRecoAnalyzer/Res_TkGlb_qOverlap',
        'Muons/diMuonHistograms/GlbGlbMuon_LM',
        'Muons/diMuonHistograms/GlbGlbMuon_HM',
        'Muons/Isolation/global/relPFIso_R03',
        'Muons/globalMuons/GeneralProperties/NumberOfMeanRecHitsPerTrack_glb',
        'Muons/standAloneMuonsUpdatedAtVtx/HitProperties/NumberOfValidRecHitsPerTrack_sta',
        'Muons/MuonRecoOneHLT/GlbMuon_Glb_pt',
        'Muons/MuonRecoOneHLT/GlbMuon_Glb_eta',
        'Egamma/Electrons/Ele5_TagAndProbe/ele0_vertexPt_barrel',
        'Egamma/Electrons/Ele5_TagAndProbe/ele1_vertexPt_endcaps',
        'Egamma/Electrons/Ele5_TagAndProbe/ele2_vertexEta',
        'Egamma/Electrons/Ele5_TagAndProbe/ele5_vertexZ',
        'Egamma/Electrons/Ele5_TagAndProbe/ele10_Eop_barrel',
        'Egamma/Electrons/Ele5_TagAndProbe/ele10_Eop_endcaps',
        'Egamma/Electrons/Ele5_TagAndProbe/ele101_etaEff',
        'Egamma/Electrons/Ele5_TagAndProbe/ele102_phiEff',
        'Egamma/Electrons/Ele5_TagAndProbe/ele201_mee_os'
     ) )
)

process.options = cms.untracked.PSet(
    IgnoreCompletely = cms.untracked.vstring(),
    Rethrow = cms.untracked.vstring(),
    TryToContinue = cms.untracked.vstring(),
    accelerators = cms.untracked.vstring('*'),
    allowUnscheduled = cms.obsolete.untracked.bool,
    canDeleteEarly = cms.untracked.vstring(
        'IntermediateHitDoublets_hltElePixelHitDoubletsForTripletsL1Seeded__MYHLT',
        'IntermediateHitDoublets_hltElePixelHitDoubletsForTripletsUnseeded__MYHLT',
        'IntermediateHitDoublets_hltElePixelHitDoubletsL1Seeded__MYHLT',
        'IntermediateHitDoublets_hltElePixelHitDoubletsUnseeded__MYHLT',
        'IntermediateHitDoublets_hltHighPtTripletStepHitDoublets__MYHLT',
        'IntermediateHitDoublets_hltIter2Phase2L3FromL1TkMuonPixelHitDoublets__MYHLT',
        'IntermediateHitDoublets_hltPhase2L3FromL1TkMuonPixelTracksHitDoublets__MYHLT',
        'IntermediateHitDoublets_hltPhase2L3MuonHighPtTripletStepHitDoublets__MYHLT',
        'IntermediateHitDoublets_hltPhase2L3MuonPixelTracksHitDoublets__MYHLT',
        'IntermediateHitDoublets_hltPhase2PixelTracksHitDoublets__MYHLT',
        'RegionsSeedingHitSets_hltElePixelHitDoubletsForTripletsL1Seeded__MYHLT',
        'RegionsSeedingHitSets_hltElePixelHitDoubletsForTripletsUnseeded__MYHLT',
        'RegionsSeedingHitSets_hltElePixelHitDoubletsL1Seeded__MYHLT',
        'RegionsSeedingHitSets_hltElePixelHitDoubletsUnseeded__MYHLT',
        'RegionsSeedingHitSets_hltElePixelHitTripletsL1Seeded__MYHLT',
        'RegionsSeedingHitSets_hltElePixelHitTripletsUnseeded__MYHLT',
        'RegionsSeedingHitSets_hltHighPtTripletStepHitTriplets__MYHLT',
        'RegionsSeedingHitSets_hltIter2Phase2L3FromL1TkMuonPixelHitTriplets__MYHLT',
        'RegionsSeedingHitSets_hltPhase2L3FromL1TkMuonPixelTracksHitQuadruplets__MYHLT',
        'RegionsSeedingHitSets_hltPhase2L3MuonHighPtTripletStepHitTriplets__MYHLT',
        'RegionsSeedingHitSets_hltPhase2L3MuonPixelTracksHitQuadruplets__MYHLT',
        'RegionsSeedingHitSets_hltPhase2PixelTracksHitSeeds__MYHLT'
    ),
    deleteNonConsumedUnscheduledModules = cms.untracked.bool(True),
    dumpOptions = cms.untracked.bool(False),
    emptyRunLumiMode = cms.obsolete.untracked.string,
    eventSetup = cms.untracked.PSet(
        forceNumberOfConcurrentIOVs = cms.untracked.PSet(
            allowAnyLabel_=cms.required.untracked.uint32
        ),
        numberOfConcurrentIOVs = cms.untracked.uint32(0)
    ),
    fileMode = cms.untracked.string('FULLMERGE'),
    forceEventSetupCacheClearOnNewRun = cms.untracked.bool(False),
    holdsReferencesToDeleteEarly = cms.untracked.VPSet(),
    makeTriggerResults = cms.obsolete.untracked.bool,
    modulesToCallForTryToContinue = cms.untracked.vstring(),
    modulesToIgnoreForDeleteEarly = cms.untracked.vstring(),
    numberOfConcurrentLuminosityBlocks = cms.untracked.uint32(0),
    numberOfConcurrentRuns = cms.untracked.uint32(1),
    numberOfStreams = cms.untracked.uint32(0),
    numberOfThreads = cms.untracked.uint32(1),
    printDependencies = cms.untracked.bool(False),
    sizeOfStackForThreadsInKB = cms.optional.untracked.uint32,
    throwIfIllegalParameter = cms.untracked.bool(True),
    wantSummary = cms.untracked.bool(False)
)

process.pSetPvClusterComparerForIT = cms.PSet(
    track_chi2_max = cms.double(20.0),
    track_prob_min = cms.double(-1.0),
    track_pt_max = cms.double(30.0),
    track_pt_min = cms.double(1.0)
)

process.parameters_towers_2d = cms.PSet(
    binsEta = cms.vdouble(),
    binsPhi = cms.vdouble(),
    doNose = cms.bool(False),
    maxEta = cms.double(3.045),
    maxPhi = cms.double(3.141592653589793),
    minEta = cms.double(1.305),
    minPhi = cms.double(-3.141592653589793),
    moduleTowerMapping = cms.FileInPath('L1Trigger/L1THGCal/data/tower_per_module_silic8_scint16.txt'),
    nBinsEta = cms.int32(20),
    nBinsPhi = cms.int32(72),
    readMappingFile = cms.bool(False),
    splitModuleSum = cms.bool(True)
)

process.pileupVtxDigitizer = cms.PSet(
    accumulatorType = cms.string('PileupVertexAccumulator'),
    hitsProducer = cms.string('generator'),
    makeDigiSimLinks = cms.untracked.bool(False),
    saveVtxTimes = cms.bool(True),
    vtxFallbackTag = cms.InputTag("generator"),
    vtxTag = cms.InputTag("generatorSmeared")
)

process.pixelDigitizer = cms.PSet(
    AlgorithmCommon = cms.PSet(
        DeltaProductionCut = cms.double(0.03),
        makeDigiSimLinks = cms.untracked.bool(True)
    ),
    GeometryType = cms.string('idealForDigi'),
    PSPDigitizerAlgorithm = cms.PSet(
        AdcFullScale = cms.int32(255),
        AddInefficiency = cms.bool(False),
        AddNoise = cms.bool(True),
        AddNoisyPixels = cms.bool(True),
        AddThresholdSmearing = cms.bool(False),
        AddXTalk = cms.bool(True),
        Alpha2Order = cms.bool(True),
        BiasRailInefficiencyFlag = cms.int32(1),
        CellsToKill = cms.VPSet(),
        ClusterWidth = cms.double(3),
        DeadModules = cms.VPSet(),
        DeadModules_DB = cms.bool(False),
        EfficiencyFactors_Barrel = cms.vdouble(
            0.999, 0.999, 0.999, 0.999, 0.999,
            0.999, 0.999, 0.999, 0.999, 0.999
        ),
        EfficiencyFactors_Endcap = cms.vdouble(
            0.999, 0.999, 0.999, 0.999, 0.999,
            0.999, 0.999, 0.999, 0.999, 0.999,
            0.999, 0.999, 0.999, 0.999, 0.999,
            0.999
        ),
        ElectronPerAdc = cms.double(135.0),
        HIPThresholdInElectrons_Barrel = cms.double(10000000000.0),
        HIPThresholdInElectrons_Endcap = cms.double(10000000000.0),
        Inefficiency_DB = cms.bool(False),
        InterstripCoupling = cms.double(0.05),
        KillModules = cms.bool(False),
        LorentzAngle_DB = cms.bool(True),
        NoiseInElectrons = cms.double(200),
        Phase2ReadoutMode = cms.int32(0),
        ReadoutNoiseInElec = cms.double(-99.9),
        SigmaCoeff = cms.double(1.8),
        SigmaZero = cms.double(0.00037),
        TanLorentzAnglePerTesla_Barrel = cms.double(0.07),
        TanLorentzAnglePerTesla_Endcap = cms.double(0.07),
        ThresholdInElectrons_Barrel = cms.double(6300.0),
        ThresholdInElectrons_Endcap = cms.double(6300.0),
        ThresholdSmearing_Barrel = cms.double(630.0),
        ThresholdSmearing_Endcap = cms.double(630.0),
        TofLowerCut = cms.double(-12.5),
        TofUpperCut = cms.double(12.5),
        UseReweighting = cms.bool(False)
    ),
    PSSDigitizerAlgorithm = cms.PSet(
        AdcFullScale = cms.int32(255),
        AddInefficiency = cms.bool(False),
        AddNoise = cms.bool(True),
        AddNoisyPixels = cms.bool(True),
        AddThresholdSmearing = cms.bool(False),
        AddXTalk = cms.bool(True),
        Alpha2Order = cms.bool(True),
        CellsToKill = cms.VPSet(),
        ClusterWidth = cms.double(3),
        DeadModules = cms.VPSet(),
        DeadModules_DB = cms.bool(False),
        EfficiencyFactors_Barrel = cms.vdouble(
            0.999, 0.999, 0.999, 0.999, 0.999,
            0.999, 0.999, 0.999, 0.999, 0.999
        ),
        EfficiencyFactors_Endcap = cms.vdouble(
            0.999, 0.999, 0.999, 0.999, 0.999,
            0.999, 0.999, 0.999, 0.999, 0.999,
            0.999, 0.999, 0.999, 0.999, 0.999,
            0.999
        ),
        ElectronPerAdc = cms.double(135.0),
        HIPThresholdInElectrons_Barrel = cms.double(21000.0),
        HIPThresholdInElectrons_Endcap = cms.double(21000.0),
        Inefficiency_DB = cms.bool(False),
        InterstripCoupling = cms.double(0.05),
        KillModules = cms.bool(False),
        LorentzAngle_DB = cms.bool(True),
        NoiseInElectrons = cms.double(1010),
        Phase2ReadoutMode = cms.int32(0),
        ReadoutNoiseInElec = cms.double(-99.9),
        SigmaCoeff = cms.double(1.8),
        SigmaZero = cms.double(0.00037),
        TanLorentzAnglePerTesla_Barrel = cms.double(0.07),
        TanLorentzAnglePerTesla_Endcap = cms.double(0.07),
        ThresholdInElectrons_Barrel = cms.double(4800.0),
        ThresholdInElectrons_Endcap = cms.double(4800.0),
        ThresholdSmearing_Barrel = cms.double(480.0),
        ThresholdSmearing_Endcap = cms.double(480.0),
        TofLowerCut = cms.double(-12.5),
        TofUpperCut = cms.double(12.5),
        UseReweighting = cms.bool(False)
    ),
    Pixel3DDigitizerAlgorithm = cms.PSet(
        AdcFullScale = cms.int32(15),
        AddInefficiency = cms.bool(False),
        AddNoise = cms.bool(False),
        AddNoisyPixels = cms.bool(False),
        AddThresholdSmearing = cms.bool(False),
        AddXTalk = cms.bool(False),
        Alpha2Order = cms.bool(True),
        ApplyTimewalk = cms.bool(False),
        CellsToKill = cms.VPSet(),
        ClusterWidth = cms.double(3),
        DeadModules = cms.VPSet(),
        DeadModules_DB = cms.bool(False),
        EfficiencyFactors_Barrel = cms.vdouble(
            0.999, 0.999, 0.999, 0.999, 0.999,
            0.999, 0.999, 0.999, 0.999, 0.999
        ),
        EfficiencyFactors_Endcap = cms.vdouble(
            0.999, 0.999, 0.999, 0.999, 0.999,
            0.999, 0.999, 0.999, 0.999, 0.999,
            0.999, 0.999, 0.999, 0.999, 0.999,
            0.999
        ),
        ElectronPerAdc = cms.double(1500.0),
        Even_column_interchannelCoupling_next_column = cms.double(0.0),
        Even_row_interchannelCoupling_next_row = cms.double(0.0),
        HIPThresholdInElectrons_Barrel = cms.double(10000000000.0),
        HIPThresholdInElectrons_Endcap = cms.double(10000000000.0),
        Inefficiency_DB = cms.bool(False),
        InterstripCoupling = cms.double(0.0),
        KillModules = cms.bool(False),
        LorentzAngle_DB = cms.bool(True),
        NPColumnGap = cms.double(46.0),
        NPColumnRadius = cms.double(4.0),
        NoiseInElectrons = cms.double(0.0),
        Odd_column_interchannelCoupling_next_column = cms.double(0.0),
        Odd_row_interchannelCoupling_next_row = cms.double(0.2),
        OhmicColumnRadius = cms.double(4.0),
        Phase2ReadoutMode = cms.int32(3),
        ReadoutNoiseInElec = cms.double(-99.9),
        SigmaCoeff = cms.double(1.8),
        SigmaZero = cms.double(0.00037),
        TanLorentzAnglePerTesla_Barrel = cms.double(0.106),
        TanLorentzAnglePerTesla_Endcap = cms.double(0.106),
        ThresholdInElectrons_Barrel = cms.double(1000.0),
        ThresholdInElectrons_Endcap = cms.double(1000.0),
        ThresholdSmearing_Barrel = cms.double(0.0),
        ThresholdSmearing_Endcap = cms.double(0.0),
        TimewalkModel = cms.PSet(
            Curves = cms.VPSet(
                cms.PSet(
                    charge = cms.vdouble(
                        1000, 1025, 1050, 1100, 1200,
                        1500, 2000, 6000, 10000, 15000,
                        20000, 30000
                    ),
                    delay = cms.vdouble(
                        26.8, 23.73, 21.92, 19.46, 16.52,
                        12.15, 8.88, 3.03, 1.69, 0.95,
                        0.56, 0.19
                    )
                ),
                cms.PSet(
                    charge = cms.vdouble(
                        1200, 1225, 1250, 1500, 2000,
                        6000, 10000, 15000, 20000, 30000
                    ),
                    delay = cms.vdouble(
                        26.28, 23.5, 21.79, 14.92, 10.27,
                        3.33, 1.86, 1.07, 0.66, 0.27
                    )
                ),
                cms.PSet(
                    charge = cms.vdouble(
                        1500, 1525, 1550, 1600, 2000,
                        6000, 10000, 15000, 20000, 30000
                    ),
                    delay = cms.vdouble(
                        25.36, 23.05, 21.6, 19.56, 12.94,
                        3.79, 2.14, 1.26, 0.81, 0.39
                    )
                ),
                cms.PSet(
                    charge = cms.vdouble(
                        3000, 3025, 3050, 3100, 3500,
                        6000, 10000, 15000, 20000, 30000
                    ),
                    delay = cms.vdouble(
                        25.63, 23.63, 22.35, 20.65, 14.92,
                        6.7, 3.68, 2.29, 1.62, 1.02
                    )
                )
            ),
            ThresholdValues = cms.vdouble(1000, 1200, 1500, 3000)
        ),
        TofLowerCut = cms.double(-5.0),
        TofUpperCut = cms.double(20.0),
        UseReweighting = cms.bool(False)
    ),
    PixelDigitizerAlgorithm = cms.PSet(
        AdcFullScale = cms.int32(15),
        AddInefficiency = cms.bool(False),
        AddNoise = cms.bool(False),
        AddNoisyPixels = cms.bool(False),
        AddThresholdSmearing = cms.bool(False),
        AddXTalk = cms.bool(False),
        Alpha2Order = cms.bool(True),
        ApplyTimewalk = cms.bool(False),
        CellsToKill = cms.VPSet(),
        ClusterWidth = cms.double(3),
        DeadModules = cms.VPSet(),
        DeadModules_DB = cms.bool(False),
        EfficiencyFactors_Barrel = cms.vdouble(
            0.999, 0.999, 0.999, 0.999, 0.999,
            0.999, 0.999, 0.999, 0.999, 0.999
        ),
        EfficiencyFactors_Endcap = cms.vdouble(
            0.999, 0.999, 0.999, 0.999, 0.999,
            0.999, 0.999, 0.999, 0.999, 0.999,
            0.999, 0.999, 0.999, 0.999, 0.999,
            0.999
        ),
        ElectronPerAdc = cms.double(1500.0),
        Even_column_interchannelCoupling_next_column = cms.double(0.0),
        Even_row_interchannelCoupling_next_row = cms.double(0.0),
        HIPThresholdInElectrons_Barrel = cms.double(10000000000.0),
        HIPThresholdInElectrons_Endcap = cms.double(10000000000.0),
        Inefficiency_DB = cms.bool(False),
        InterstripCoupling = cms.double(0.0),
        KillModules = cms.bool(False),
        LorentzAngle_DB = cms.bool(True),
        NoiseInElectrons = cms.double(0.0),
        Odd_column_interchannelCoupling_next_column = cms.double(0.0),
        Odd_row_interchannelCoupling_next_row = cms.double(0.2),
        Phase2ReadoutMode = cms.int32(3),
        ReadoutNoiseInElec = cms.double(-99.9),
        SigmaCoeff = cms.double(0),
        SigmaZero = cms.double(0.00037),
        TanLorentzAnglePerTesla_Barrel = cms.double(0.106),
        TanLorentzAnglePerTesla_Endcap = cms.double(0.106),
        ThresholdInElectrons_Barrel = cms.double(1000.0),
        ThresholdInElectrons_Endcap = cms.double(1000.0),
        ThresholdSmearing_Barrel = cms.double(0.0),
        ThresholdSmearing_Endcap = cms.double(0.0),
        TimewalkModel = cms.PSet(
            Curves = cms.VPSet(
                cms.PSet(
                    charge = cms.vdouble(
                        1000, 1025, 1050, 1100, 1200,
                        1500, 2000, 6000, 10000, 15000,
                        20000, 30000
                    ),
                    delay = cms.vdouble(
                        26.8, 23.73, 21.92, 19.46, 16.52,
                        12.15, 8.88, 3.03, 1.69, 0.95,
                        0.56, 0.19
                    )
                ),
                cms.PSet(
                    charge = cms.vdouble(
                        1200, 1225, 1250, 1500, 2000,
                        6000, 10000, 15000, 20000, 30000
                    ),
                    delay = cms.vdouble(
                        26.28, 23.5, 21.79, 14.92, 10.27,
                        3.33, 1.86, 1.07, 0.66, 0.27
                    )
                ),
                cms.PSet(
                    charge = cms.vdouble(
                        1500, 1525, 1550, 1600, 2000,
                        6000, 10000, 15000, 20000, 30000
                    ),
                    delay = cms.vdouble(
                        25.36, 23.05, 21.6, 19.56, 12.94,
                        3.79, 2.14, 1.26, 0.81, 0.39
                    )
                ),
                cms.PSet(
                    charge = cms.vdouble(
                        3000, 3025, 3050, 3100, 3500,
                        6000, 10000, 15000, 20000, 30000
                    ),
                    delay = cms.vdouble(
                        25.63, 23.63, 22.35, 20.65, 14.92,
                        6.7, 3.68, 2.29, 1.62, 1.02
                    )
                )
            ),
            ThresholdValues = cms.vdouble(1000, 1200, 1500, 3000)
        ),
        TofLowerCut = cms.double(-5.0),
        TofUpperCut = cms.double(20.0),
        UseReweighting = cms.bool(False)
    ),
    ROUList = cms.vstring(
        'TrackerHitsPixelBarrelLowTof',
        'TrackerHitsPixelBarrelHighTof',
        'TrackerHitsPixelEndcapLowTof',
        'TrackerHitsPixelEndcapHighTof'
    ),
    SSDigitizerAlgorithm = cms.PSet(
        AdcFullScale = cms.int32(255),
        AddInefficiency = cms.bool(False),
        AddNoise = cms.bool(True),
        AddNoisyPixels = cms.bool(True),
        AddThresholdSmearing = cms.bool(False),
        AddXTalk = cms.bool(True),
        Alpha2Order = cms.bool(True),
        CBCDeadTime = cms.double(0.0),
        CellsToKill = cms.VPSet(),
        ClusterWidth = cms.double(3),
        DeadModules = cms.VPSet(),
        DeadModules_DB = cms.bool(False),
        EfficiencyFactors_Barrel = cms.vdouble(
            0.999, 0.999, 0.999, 0.999, 0.999,
            0.999, 0.999, 0.999, 0.999, 0.999
        ),
        EfficiencyFactors_Endcap = cms.vdouble(
            0.999, 0.999, 0.999, 0.999, 0.999,
            0.999, 0.999, 0.999, 0.999, 0.999,
            0.999, 0.999, 0.999, 0.999, 0.999,
            0.999
        ),
        ElectronPerAdc = cms.double(135.0),
        HIPThresholdInElectrons_Barrel = cms.double(10000000000.0),
        HIPThresholdInElectrons_Endcap = cms.double(10000000000.0),
        HitDetectionMode = cms.int32(0),
        Inefficiency_DB = cms.bool(False),
        InterstripCoupling = cms.double(0.05),
        KillModules = cms.bool(False),
        LorentzAngle_DB = cms.bool(True),
        NoiseInElectrons = cms.double(1263),
        Phase2ReadoutMode = cms.int32(0),
        PulseShapeParameters = cms.vdouble(
            -3.0, 16.043703, 99.999857, 40.57165, 2.0,
            1.2459094
        ),
        ReadoutNoiseInElec = cms.double(-99.9),
        SigmaCoeff = cms.double(1.8),
        SigmaZero = cms.double(0.00037),
        TanLorentzAnglePerTesla_Barrel = cms.double(0.07),
        TanLorentzAnglePerTesla_Endcap = cms.double(0.07),
        ThresholdInElectrons_Barrel = cms.double(6000.0),
        ThresholdInElectrons_Endcap = cms.double(6000.0),
        ThresholdSmearing_Barrel = cms.double(600.0),
        ThresholdSmearing_Endcap = cms.double(600.0),
        TofLowerCut = cms.double(-12.5),
        TofUpperCut = cms.double(12.5),
        UseReweighting = cms.bool(False)
    ),
    accumulatorType = cms.string('Phase2TrackerDigitizer'),
    hitsProducer = cms.string('g4SimHits'),
    isOTreadoutAnalog = cms.bool(False),
    premixStage1 = cms.bool(False),
    usePseudoPixel3DAlgo = cms.bool(False)
)

process.pixelLessStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(0),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.1),
    minimumNumberOfHits = cms.int32(4),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(1),
    strictSeedExtension = cms.bool(False)
)

process.pixelPairStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CompositeTrajectoryFilter'),
    filters = cms.VPSet(
        cms.PSet(
            refToPSet_ = cms.string('pixelPairStepTrajectoryFilterBase')
        ),
        cms.PSet(
            refToPSet_ = cms.string('ClusterShapeTrajectoryFilter')
        )
    )
)

process.pixelPairStepTrajectoryFilterBase = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(0.701),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.1),
    minimumNumberOfHits = cms.int32(4),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.pixelPairStepTrajectoryFilterInOut = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(0.701),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.1),
    minimumNumberOfHits = cms.int32(4),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(1),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.recoTrackAccumulator = cms.PSet(
    accumulatorType = cms.string('RecoTrackAccumulator'),
    makeDigiSimLinks = cms.untracked.bool(False),
    outputLabel = cms.string('generalTracks'),
    pileUpTracks = cms.InputTag("generalTracksBeforeMixing"),
    signalTracks = cms.InputTag("generalTracksBeforeMixing")
)

process.seedFromProtoTracks = cms.PSet(
    ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
    MinOneOverPtError = cms.double(1.0),
    OriginTransverseErrorMultiplier = cms.double(1.0),
    SeedMomentumForBOFF = cms.double(5.0),
    TTRHBuilder = cms.string('WithTrackAngle'),
    forceKinematicWithRegionDirection = cms.bool(False),
    magneticField = cms.string(''),
    propagator = cms.string('PropagatorWithMaterial')
)

process.stage1truncation_proc = cms.PSet(
    ProcessorName = cms.string('HGCalBackendStage1Processor'),
    truncation_parameters = cms.PSet(
        AlgoName = cms.string('HGCalStage1TruncationWrapper'),
        doTruncation = cms.bool(True),
        maxTcsPerBin = cms.vuint32(
            2, 7, 27, 24, 19,
            17, 16, 15, 14, 14,
            13, 13, 13, 12, 12,
            12, 11, 11, 11, 10,
            10, 10, 10, 10, 9,
            9, 10, 9, 9, 9,
            8, 8, 7, 5, 3,
            3, 3, 3, 3, 3,
            3, 3
        ),
        phiSectorEdges = cms.vdouble(
            0.98901991, 0.72722052, 0.6981317, 0.87266463, 0.93084227,
            0.90175345, 0.87266463, 0.90175345, 0.95993109, 0.95993109,
            0.93084227, 0.93084227, 0.95993109, 0.98901991, 0.95993109,
            0.95993109, 0.95993109, 0.98901991, 0.98901991, 0.95993109,
            0.95993109, 0.98901991, 0.98901991, 0.98901991, 0.98901991,
            0.98901991, 1.01810873, 0.98901991, 0.98901991, 0.98901991,
            0.98901991, 0.98901991, 0.98901991, 0.98901991, 1.04719755,
            1.04719755, 1.04719755, 1.04719755, 1.01810873, 1.04719755,
            1.01810873, 1.01810873
        ),
        rozBins = cms.uint32(42),
        rozMax = cms.double(0.55508006),
        rozMin = cms.double(0.07587128)
    )
)

process.stripDigitizer = cms.PSet(
    APVProbabilityFile = cms.FileInPath('SimTracker/SiStripDigitizer/data/APVProbaList.txt'),
    APVSaturationFromHIP = cms.bool(False),
    APVSaturationProbScaling = cms.double(1.0),
    APVShapeDecoFile = cms.FileInPath('SimTracker/SiStripDigitizer/data/APVShapeDeco_320.txt'),
    APVShapePeakFile = cms.FileInPath('SimTracker/SiStripDigitizer/data/APVShapePeak_default.txt'),
    APVpeakmode = cms.bool(False),
    AppliedVoltage = cms.double(300.0),
    BaselineShift = cms.bool(True),
    ChargeDistributionRMS = cms.double(6.5e-10),
    ChargeMobility = cms.double(310.0),
    CommonModeNoise = cms.bool(True),
    CosmicDelayShift = cms.untracked.double(0.0),
    CouplingConstantDecIB1 = cms.vdouble(0.7748, 0.0962, 0.0165),
    CouplingConstantDecIB2 = cms.vdouble(0.83, 0.0756, 0.0094),
    CouplingConstantDecOB1 = cms.vdouble(0.6871, 0.1222, 0.0342),
    CouplingConstantDecOB2 = cms.vdouble(0.725, 0.1102, 0.0273),
    CouplingConstantDecW1a = cms.vdouble(0.786, 0.093, 0.014),
    CouplingConstantDecW1b = cms.vdouble(0.822, 0.08, 0.009),
    CouplingConstantDecW2a = cms.vdouble(0.7962, 0.0914, 0.0104),
    CouplingConstantDecW2b = cms.vdouble(0.888, 0.05, 0.006),
    CouplingConstantDecW3a = cms.vdouble(0.8164, 0.09, 0.0018),
    CouplingConstantDecW3b = cms.vdouble(0.848, 0.06, 0.016),
    CouplingConstantDecW4 = cms.vdouble(0.876, 0.06, 0.002),
    CouplingConstantDecW5 = cms.vdouble(0.7565, 0.0913, 0.0304),
    CouplingConstantDecW6 = cms.vdouble(0.758, 0.093, 0.026),
    CouplingConstantDecW7 = cms.vdouble(0.7828, 0.0862, 0.0224),
    CouplingConstantPeakIB1 = cms.vdouble(0.9006, 0.0497),
    CouplingConstantPeakIB2 = cms.vdouble(0.9342, 0.0328),
    CouplingConstantPeakOB1 = cms.vdouble(0.8542, 0.0729),
    CouplingConstantPeakOB2 = cms.vdouble(0.8719, 0.064),
    CouplingConstantPeakW1a = cms.vdouble(0.996, 0.002),
    CouplingConstantPeakW1b = cms.vdouble(0.976, 0.012),
    CouplingConstantPeakW2a = cms.vdouble(1.0, 0.0),
    CouplingConstantPeakW2b = cms.vdouble(0.998, 0.001),
    CouplingConstantPeakW3a = cms.vdouble(0.996, 0.002),
    CouplingConstantPeakW3b = cms.vdouble(0.992, 0.004),
    CouplingConstantPeakW4 = cms.vdouble(0.992, 0.004),
    CouplingConstantPeakW5 = cms.vdouble(0.968, 0.016),
    CouplingConstantPeakW6 = cms.vdouble(0.972, 0.014),
    CouplingConstantPeakW7 = cms.vdouble(0.964, 0.018),
    CouplingConstantRunIIDecIB1 = cms.vdouble(0.8361, 0.0703, 0.0117),
    CouplingConstantRunIIDecIB2 = cms.vdouble(0.8616, 0.0588, 0.0104),
    CouplingConstantRunIIDecOB1 = cms.vdouble(0.7461, 0.0996, 0.0273),
    CouplingConstantRunIIDecOB2 = cms.vdouble(0.7925, 0.0834, 0.0203),
    CouplingConstantRunIIDecW1a = cms.vdouble(0.8571, 0.0608, 0.0106),
    CouplingConstantRunIIDecW1b = cms.vdouble(0.8827, 0.0518, 0.0068),
    CouplingConstantRunIIDecW2a = cms.vdouble(0.8861, 0.049, 0.008),
    CouplingConstantRunIIDecW2b = cms.vdouble(0.8943, 0.0483, 0.0046),
    CouplingConstantRunIIDecW3a = cms.vdouble(0.8984, 0.0494, 0.0014),
    CouplingConstantRunIIDecW3b = cms.vdouble(0.8611, 0.0573, 0.0121),
    CouplingConstantRunIIDecW4 = cms.vdouble(0.8881, 0.0544, 0.0015),
    CouplingConstantRunIIDecW5 = cms.vdouble(0.7997, 0.077, 0.0231),
    CouplingConstantRunIIDecW6 = cms.vdouble(0.8067, 0.0769, 0.0198),
    CouplingConstantRunIIDecW7 = cms.vdouble(0.7883, 0.0888, 0.0171),
    CouplingConstantsRunIIDecB = cms.bool(True),
    CouplingConstantsRunIIDecW = cms.bool(True),
    DeltaProductionCut = cms.double(0.120425),
    DepletionVoltage = cms.double(170.0),
    DigiModeList = cms.PSet(
        PRDigi = cms.string('ProcessedRaw'),
        SCDigi = cms.string('ScopeMode'),
        VRDigi = cms.string('VirginRaw'),
        ZSDigi = cms.string('ZeroSuppressed')
    ),
    FedAlgorithm = cms.int32(4),
    FedAlgorithm_PM = cms.int32(4),
    Gain = cms.string(''),
    GeometryType = cms.string('idealForDigi'),
    GevPerElectron = cms.double(3.61e-09),
    Inefficiency = cms.double(0.0),
    LandauFluctuations = cms.bool(True),
    LorentzAngle = cms.string(''),
    Noise = cms.bool(True),
    NoiseSigmaThreshold = cms.double(2.0),
    PedestalsOffset = cms.double(128),
    PreMixingMode = cms.bool(False),
    ROUList = cms.vstring(
        'g4SimHitsTrackerHitsPixelBarrelLowTof',
        'g4SimHitsTrackerHitsPixelEndcapLowTof'
    ),
    RealPedestals = cms.bool(True),
    SingleStripNoise = cms.bool(True),
    TOFCutForDeconvolution = cms.double(50.0),
    TOFCutForPeak = cms.double(100.0),
    Temperature = cms.double(273.0),
    TrackerConfigurationFromDB = cms.bool(False),
    ZeroSuppression = cms.bool(True),
    accumulatorType = cms.string('SiStripDigitizer'),
    apv_mVPerQ = cms.double(5.5),
    apv_maxResponse = cms.double(729),
    apv_rate = cms.double(66.2),
    apvfCPerElectron = cms.double(0.0001602),
    chargeDivisionsPerStrip = cms.int32(10),
    cmnRMStec = cms.double(2.44),
    cmnRMStib = cms.double(5.92),
    cmnRMStid = cms.double(3.08),
    cmnRMStob = cms.double(1.08),
    electronPerAdcDec = cms.double(247.0),
    electronPerAdcPeak = cms.double(262.0),
    fracOfEventsToSimAPV = cms.double(0.0),
    hitsProducer = cms.string('g4SimHits'),
    includeAPVSimulation = cms.bool(False),
    makeDigiSimLinks = cms.untracked.bool(True),
    noDiffusion = cms.bool(False)
)

process.summation_params = cms.PSet(
    noiseScintillator = cms.PSet(
        refToPSet_ = cms.string('HGCAL_noise_heback')
    ),
    noiseSilicon = cms.PSet(
        refToPSet_ = cms.string('HGCAL_noise_fC')
    ),
    noiseThreshold = cms.double(3),
    scintillatorCellLSB_MIP = cms.double(0.067138671875),
    siliconCellLSB_fC = cms.double(0.09765625)
)

process.superTCCompression_proc = cms.PSet(
    exponentBits = cms.uint32(4),
    mantissaBits = cms.uint32(5),
    rounding = cms.bool(True),
    truncationBits = cms.uint32(0)
)

process.supertc_conc_proc = cms.PSet(
    Method = cms.vstring(
        'superTriggerCellSelect',
        'superTriggerCellSelect',
        'superTriggerCellSelect'
    ),
    ProcessorName = cms.string('HGCalConcentratorProcessorSelection'),
    allTrigCellsInTrigSums = cms.bool(False),
    coarseTCCompression = cms.PSet(
        exponentBits = cms.uint32(4),
        mantissaBits = cms.uint32(3),
        rounding = cms.bool(True),
        truncationBits = cms.uint32(0)
    ),
    coarsenTriggerCells = cms.vuint32(0, 0, 0),
    ctcSize = cms.vuint32(
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2
    ),
    fixedDataSizePerHGCROC = cms.bool(False),
    stcSize = cms.vuint32(
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 4, 4,
        4, 4, 4, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16, 16, 16, 16,
        16, 16
    ),
    superTCCalibration_ee = cms.PSet(
        chargeCollectionEfficiency = cms.PSet(
            refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
        ),
        dEdXweights = cms.vdouble(
            0, 9.205, 0, 22.259999999999998, 0,
            22.259999999999998, 0, 22.259999999999998, 0, 22.259999999999998,
            0, 22.259999999999998, 0, 22.259999999999998, 0,
            22.259999999999998, 0, 22.259999999999998, 0, 26.4,
            0, 26.4, 0, 26.4, 0,
            26.4, 0, 95.41000000000001, 60.7, 60.7,
            60.7, 60.7, 60.7, 60.7, 60.7,
            60.7, 60.7, 71.89, 83.08, 83.255,
            83.52000000000001, 83.61, 83.61, 83.61, 83.61,
            83.61, 83.61, 83.61
        ),
        fCperMIP = cms.vdouble(2.06, 3.43, 5.15),
        lsb = cms.double(0.09765625),
        thicknessCorrection = cms.vdouble(0.75, 0.76, 0.75)
    ),
    superTCCalibration_hesc = cms.PSet(
        chargeCollectionEfficiency = cms.PSet(
            values = cms.vdouble(1.0)
        ),
        dEdXweights = cms.vdouble(
            0, 9.205, 0, 22.259999999999998, 0,
            22.259999999999998, 0, 22.259999999999998, 0, 22.259999999999998,
            0, 22.259999999999998, 0, 22.259999999999998, 0,
            22.259999999999998, 0, 22.259999999999998, 0, 26.4,
            0, 26.4, 0, 26.4, 0,
            26.4, 0, 95.41000000000001, 60.7, 60.7,
            60.7, 60.7, 60.7, 60.7, 60.7,
            60.7, 60.7, 71.89, 83.08, 83.255,
            83.52000000000001, 83.61, 83.61, 83.61, 83.61,
            83.61, 83.61, 83.61
        ),
        fCperMIP = cms.vdouble(1.0),
        lsb = cms.double(0.067138671875),
        thicknessCorrection = cms.vdouble(0.69)
    ),
    superTCCalibration_hesi = cms.PSet(
        chargeCollectionEfficiency = cms.PSet(
            refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
        ),
        dEdXweights = cms.vdouble(
            0, 9.205, 0, 22.259999999999998, 0,
            22.259999999999998, 0, 22.259999999999998, 0, 22.259999999999998,
            0, 22.259999999999998, 0, 22.259999999999998, 0,
            22.259999999999998, 0, 22.259999999999998, 0, 26.4,
            0, 26.4, 0, 26.4, 0,
            26.4, 0, 95.41000000000001, 60.7, 60.7,
            60.7, 60.7, 60.7, 60.7, 60.7,
            60.7, 60.7, 71.89, 83.08, 83.255,
            83.52000000000001, 83.61, 83.61, 83.61, 83.61,
            83.61, 83.61, 83.61
        ),
        fCperMIP = cms.vdouble(2.06, 3.43, 5.15),
        lsb = cms.double(0.09765625),
        thicknessCorrection = cms.vdouble(0.85, 0.85, 0.84)
    ),
    superTCCalibration_nose = cms.PSet(
        chargeCollectionEfficiency = cms.PSet(
            refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
        ),
        dEdXweights = cms.vdouble(
            0.0, 39.500245, 39.756638, 39.756638, 39.756638,
            39.756638, 66.020266, 92.283895, 92.283895
        ),
        fCperMIP = cms.vdouble(1.25, 2.57, 3.88),
        lsb = cms.double(0.09765625),
        thicknessCorrection = cms.vdouble(1.132, 1.092, 1.084)
    ),
    superTCCompression = cms.PSet(
        exponentBits = cms.uint32(4),
        mantissaBits = cms.uint32(5),
        rounding = cms.bool(True),
        truncationBits = cms.uint32(0)
    ),
    type_energy_division = cms.string('superTriggerCell')
)

process.theDigitizers = cms.PSet(
    MC_fastTimingLayer = cms.PSet(
        HepMCProductLabel = cms.InputTag("generatorSmeared"),
        MaxPseudoRapidity = cms.double(5.0),
        MinEnergy = cms.double(0.5),
        accumulatorType = cms.string('MtdTruthAccumulator'),
        allowDifferentSimHitProcesses = cms.bool(False),
        bunchspace = cms.uint32(25),
        genParticleCollection = cms.InputTag("genParticles"),
        maximumPreviousBunchCrossing = cms.uint32(0),
        maximumSubsequentBunchCrossing = cms.uint32(0),
        premixStage1 = cms.bool(False),
        simHitCollections = cms.PSet(
            mtdCollections = cms.VInputTag(cms.InputTag("g4SimHits","FastTimerHitsBarrel"), cms.InputTag("g4SimHits","FastTimerHitsEndcap"))
        ),
        simTrackCollection = cms.InputTag("g4SimHits"),
        simVertexCollection = cms.InputTag("g4SimHits")
    ),
    calotruth = cms.PSet(
        HepMCProductLabel = cms.InputTag("generatorSmeared"),
        MaxPseudoRapidity = cms.double(5.0),
        MinEnergy = cms.double(0.5),
        accumulatorType = cms.string('CaloTruthAccumulator'),
        allowDifferentSimHitProcesses = cms.bool(False),
        doHGCAL = cms.bool(True),
        genParticleCollection = cms.InputTag("genParticles"),
        maximumPreviousBunchCrossing = cms.uint32(0),
        maximumSubsequentBunchCrossing = cms.uint32(0),
        premixStage1 = cms.bool(False),
        simHitCollections = cms.PSet(
            ecal = cms.VInputTag(cms.InputTag("g4SimHits","EcalHitsEB")),
            hcal = cms.VInputTag(cms.InputTag("g4SimHits","HcalHits")),
            hgc = cms.VInputTag(cms.InputTag("g4SimHits","HGCHitsEE"), cms.InputTag("g4SimHits","HGCHitsHEfront"), cms.InputTag("g4SimHits","HGCHitsHEback"))
        ),
        simTrackCollection = cms.InputTag("g4SimHits"),
        simVertexCollection = cms.InputTag("g4SimHits")
    ),
    ecal = cms.PSet(
        ConstantTerm = cms.double(0.003),
        EBCorrNoiseMatrixG01 = cms.vdouble(
            1.0, 0.73354, 0.64442, 0.58851, 0.55425,
            0.53082, 0.51916, 0.51097, 0.50732, 0.50409
        ),
        EBCorrNoiseMatrixG06 = cms.vdouble(
            1.0, 0.70946, 0.58021, 0.49846, 0.45006,
            0.41366, 0.39699, 0.38478, 0.37847, 0.37055
        ),
        EBCorrNoiseMatrixG12 = cms.vdouble(
            1.0, 0.71073, 0.55721, 0.46089, 0.40449,
            0.35931, 0.33924, 0.32439, 0.31581, 0.30481
        ),
        EBdigiCollection = cms.string(''),
        EBs25notContainment = cms.double(0.9675),
        EECorrNoiseMatrixG01 = cms.vdouble(
            1.0, 0.72698, 0.62048, 0.55691, 0.51848,
            0.49147, 0.47813, 0.47007, 0.46621, 0.46265
        ),
        EECorrNoiseMatrixG06 = cms.vdouble(
            1.0, 0.71217, 0.47464, 0.34056, 0.26282,
            0.20287, 0.17734, 0.16256, 0.15618, 0.14443
        ),
        EECorrNoiseMatrixG12 = cms.vdouble(
            1.0, 0.71373, 0.44825, 0.30152, 0.21609,
            0.14786, 0.11772, 0.10165, 0.09465, 0.08098
        ),
        EEdigiCollection = cms.string(''),
        EEs25notContainment = cms.double(0.968),
        ESdigiCollection = cms.string(''),
        EcalPreMixStage1 = cms.bool(False),
        EcalPreMixStage2 = cms.bool(False),
        UseLCcorrection = cms.untracked.bool(True),
        accumulatorType = cms.string('EcalDigiProducer'),
        apdAddToBarrel = cms.bool(False),
        apdDigiTag = cms.string('APD'),
        apdDoPEStats = cms.bool(True),
        apdNonlParms = cms.vdouble(
            1.48, -3.75, 1.81, 1.26, 2.0,
            45, 1.0
        ),
        apdSeparateDigi = cms.bool(True),
        apdShapeTau = cms.double(40.5),
        apdShapeTstart = cms.double(74.5),
        apdSimToPEHigh = cms.double(88200000.0),
        apdSimToPELow = cms.double(2450000.0),
        apdTimeOffWidth = cms.double(0.8),
        apdTimeOffset = cms.double(-13.5),
        applyConstantTerm = cms.bool(True),
        binOfMaximum = cms.int32(6),
        componentAddToBarrel = cms.bool(False),
        componentDigiTag = cms.string('Component'),
        componentSeparateDigi = cms.bool(False),
        componentTimePhase = cms.double(0.0),
        componentTimeTag = cms.string('Component'),
        cosmicsPhase = cms.bool(False),
        cosmicsShift = cms.double(0.0),
        doEB = cms.bool(True),
        doEE = cms.bool(False),
        doENoise = cms.bool(True),
        doES = cms.bool(False),
        doESNoise = cms.bool(True),
        doFast = cms.bool(True),
        doPhotostatistics = cms.bool(True),
        hitsProducer = cms.string('g4SimHits'),
        makeDigiSimLinks = cms.untracked.bool(False),
        photoelectronsToAnalogBarrel = cms.double(0.000444444),
        photoelectronsToAnalogEndcap = cms.double(0.000555555),
        samplingFactor = cms.double(1.0),
        simHitToPhotoelectronsBarrel = cms.double(2250.0),
        simHitToPhotoelectronsEndcap = cms.double(1800.0),
        syncPhase = cms.bool(True),
        timeDependent = cms.bool(False),
        timePhase = cms.double(0.0)
    ),
    ecalTime = cms.PSet(
        EBtimeDigiCollection = cms.string('EBTimeDigi'),
        EEtimeDigiCollection = cms.string('EETimeDigi'),
        accumulatorType = cms.string('EcalTimeDigiProducer'),
        componentWaveform = cms.bool(False),
        hitsProducerEB = cms.InputTag("g4SimHits","EcalHitsEB"),
        hitsProducerEE = cms.InputTag("g4SimHits","EcalHitsEE"),
        timeLayerBarrel = cms.int32(7),
        timeLayerEndcap = cms.int32(3)
    ),
    fastTimingLayer = cms.PSet(
        accumulatorType = cms.string('MTDDigiProducer'),
        barrelDigitizer = cms.PSet(
            DeviceSimulation = cms.PSet(
                LCEpositionSlope = cms.double(0.071),
                LightCollectionEff = cms.double(0.25),
                LightCollectionSlope = cms.double(0.075),
                LightYield = cms.double(40000.0),
                PhotonDetectionEff = cms.double(0.2),
                bxTime = cms.double(25)
            ),
            ElectronicsSimulation = cms.PSet(
                ChannelTimeOffset = cms.double(0.0),
                CorrelationCoefficient = cms.double(1.0),
                DarkCountRate = cms.double(10.0),
                EnergyThreshold = cms.double(4.0),
                LightCollectionEff = cms.double(0.25),
                LightYield = cms.double(40000.0),
                Npe_to_V = cms.double(0.0064),
                Npe_to_pC = cms.double(0.016),
                PhotonDetectionEff = cms.double(0.2),
                ReferencePulseNpe = cms.double(100.0),
                ScintillatorDecayTime = cms.double(40.0),
                ScintillatorRiseTime = cms.double(1.1),
                SigmaClock = cms.double(0.015),
                SigmaElectronicNoise = cms.double(1.0),
                SigmaRelTOFHIRenergy = cms.vdouble(0.139, -4.35e-05, 3.315e-09, -1.2e-13, 1.67e-18),
                SinglePhotonTimeResolution = cms.double(0.06),
                SmearTimeForOOTtails = cms.bool(True),
                TestBeamMIPTimeRes = cms.double(4.293),
                TimeThreshold1 = cms.double(20.0),
                TimeThreshold2 = cms.double(50.0),
                adcNbits = cms.uint32(10),
                adcSaturation_MIP = cms.double(600.0),
                adcThreshold_MIP = cms.double(0.064),
                bxTime = cms.double(25),
                smearChannelTimeOffset = cms.double(0.0),
                tdcNbits = cms.uint32(10),
                toaLSB_ns = cms.double(0.02)
            ),
            digiCollectionTag = cms.string('FTLBarrel'),
            digitizerName = cms.string('BTLDigitizer'),
            inputSimHits = cms.InputTag("g4SimHits","FastTimerHitsBarrel"),
            maxSimHitsAccTime = cms.uint32(100),
            premixStage1 = cms.bool(False),
            premixStage1MaxCharge = cms.double(1000000.0),
            premixStage1MinCharge = cms.double(0.0001)
        ),
        endcapDigitizer = cms.PSet(
            DeviceSimulation = cms.PSet(
                FluenceVsRadius = cms.string('1.937*TMath::Power(x,-1.706)'),
                IntegratedLuminosity = cms.double(1000.0),
                LGADGainDegradation = cms.string('TMath::Max(1.0, TMath::Min(x, x + 0.05/0.01 * (x - 1) + y * (1 - x)/0.01))'),
                LGADGainVsFluence = cms.string('TMath::Min(15.,30.-x)'),
                MPVElectron = cms.string('1.30030e-05 + 1.55166e-07 / (x * x)'),
                MPVKaon = cms.string('1.20998e-05 + 2.47192e-06 / (x * x * x)'),
                MPVMuon = cms.string('1.21561e-05 + 8.89462e-07 / (x * x)'),
                MPVPion = cms.string('1.24531e-05 + 7.16578e-07 / (x * x)'),
                MPVProton = cms.string('1.13666e-05 + 1.20093e-05 / (x * x)'),
                applyDegradation = cms.bool(False),
                bxTime = cms.double(25),
                meVPerMIP = cms.double(0.015),
                tofDelay = cms.double(1)
            ),
            ElectronicsSimulation = cms.PSet(
                IntegratedLuminosity = cms.double(1000.0),
                adcNbits = cms.uint32(8),
                adcSaturation_MIP = cms.double(100),
                adcThreshold_MIP = cms.double(0.025),
                bxTime = cms.double(25),
                formulaLandauNoise = cms.string('TMath::Max(0.020, 0.020 * (0.35 * (x - 1.0) + 1.0))'),
                iThreshold_MIP = cms.double(0.9525),
                noiseLevel = cms.double(0.3554),
                referenceChargeColl = cms.double(1.0),
                sigmaDistorsion = cms.double(0.0),
                sigmaTDC = cms.double(0.01),
                tdcNbits = cms.uint32(11),
                toaLSB_ns = cms.double(0.013)
            ),
            digiCollectionTag = cms.string('FTLEndcap'),
            digitizerName = cms.string('ETLDigitizer'),
            inputSimHits = cms.InputTag("g4SimHits","FastTimerHitsEndcap"),
            maxSimHitsAccTime = cms.uint32(100),
            premixStage1 = cms.bool(False),
            premixStage1MaxCharge = cms.double(1000000.0),
            premixStage1MinCharge = cms.double(0.0001)
        ),
        makeDigiSimLinks = cms.bool(False),
        verbosity = cms.untracked.uint32(0)
    ),
    hcal = cms.PSet(
        DelivLuminosity = cms.double(0),
        HBDarkening = cms.bool(False),
        HEDarkening = cms.bool(False),
        HFDarkening = cms.bool(False),
        HFRecalParameterBlock = cms.PSet(
            HFdepthOneParameterA = cms.vdouble(
                0.004123, 0.00602, 0.008201, 0.010489, 0.013379,
                0.016997, 0.021464, 0.027371, 0.034195, 0.044807,
                0.058939, 0.125497
            ),
            HFdepthOneParameterB = cms.vdouble(
                -4e-06, -2e-06, 0.0, 4e-06, 1.5e-05,
                2.6e-05, 6.3e-05, 8.4e-05, 0.00016, 0.000107,
                0.000425, 0.000209
            ),
            HFdepthTwoParameterA = cms.vdouble(
                0.002861, 0.004168, 0.0064, 0.008388, 0.011601,
                0.014425, 0.018633, 0.023232, 0.028274, 0.035447,
                0.051579, 0.086593
            ),
            HFdepthTwoParameterB = cms.vdouble(
                -2e-06, -0.0, -7e-06, -6e-06, -2e-06,
                1e-06, 1.9e-05, 3.1e-05, 6.7e-05, 1.2e-05,
                0.000157, -3e-06
            )
        ),
        HcalPreMixStage1 = cms.bool(False),
        HcalPreMixStage2 = cms.bool(False),
        TestNumbering = cms.bool(True),
        accumulatorType = cms.string('HcalDigiProducer'),
        debugCaloSamples = cms.bool(False),
        doEmpty = cms.bool(True),
        doHFWindow = cms.bool(False),
        doIonFeedback = cms.bool(True),
        doNeutralDensityFilter = cms.bool(True),
        doNoise = cms.bool(True),
        doThermalNoise = cms.bool(True),
        doTimeSlew = cms.bool(True),
        hb = cms.PSet(
            binOfMaximum = cms.int32(6),
            delayQIE = cms.int32(-999),
            doPhotoStatistics = cms.bool(True),
            doSiPMSmearing = cms.bool(True),
            firstRing = cms.int32(1),
            readoutFrameSize = cms.int32(10),
            samplingFactors = cms.vdouble(
                125.44, 125.54, 125.32, 125.13, 124.46,
                125.01, 125.22, 125.48, 124.45, 125.9,
                125.83, 127.01, 126.82, 129.73, 131.83,
                143.52
            ),
            simHitToPhotoelectrons = cms.double(2000.0),
            sipmTau = cms.double(10.0),
            syncPhase = cms.bool(True),
            threshold_currentTDC = cms.double(18.7),
            timePhase = cms.double(6.0),
            timeSmearing = cms.bool(True)
        ),
        he = cms.PSet(
            binOfMaximum = cms.int32(6),
            delayQIE = cms.int32(-999),
            doPhotoStatistics = cms.bool(True),
            doSiPMSmearing = cms.bool(True),
            firstRing = cms.int32(16),
            readoutFrameSize = cms.int32(10),
            samplingFactors = cms.vdouble(
                210.55, 197.93, 186.12, 189.64, 189.63,
                189.96, 190.03, 190.11, 190.18, 190.25,
                190.32, 190.4, 190.47, 190.54, 190.61,
                190.69, 190.83, 190.94, 190.94, 190.94,
                190.94, 190.94, 190.94, 190.94, 190.94,
                190.94, 190.94, 190.94, 190.94, 190.94,
                190.94, 190.94, 190.94, 190.94, 190.94,
                190.94, 190.94, 190.94, 190.94, 190.94,
                190.94, 190.94, 190.94, 190.94, 190.94,
                190.94, 190.94, 190.94, 190.94, 190.94,
                190.94, 190.94, 190.94, 190.94, 190.94,
                190.94, 190.94, 190.94, 190.94, 190.94,
                190.94, 190.94, 190.94, 190.94, 190.94,
                190.94, 190.94, 190.94, 190.94, 190.94,
                190.94, 190.94, 190.94, 190.94, 190.94,
                190.94, 190.94, 190.94, 190.94, 190.94,
                190.94, 190.94, 190.94, 190.94, 190.94
            ),
            simHitToPhotoelectrons = cms.double(2000.0),
            sipmTau = cms.double(10.0),
            syncPhase = cms.bool(True),
            threshold_currentTDC = cms.double(18.7),
            timePhase = cms.double(6.0),
            timeSmearing = cms.bool(True)
        ),
        hf1 = cms.PSet(
            binOfMaximum = cms.int32(2),
            delayQIE = cms.int32(-999),
            doPhotoStatistics = cms.bool(True),
            doSiPMSmearing = cms.bool(False),
            photoelectronsToAnalog = cms.double(2.79),
            readoutFrameSize = cms.int32(3),
            samplingFactor = cms.double(0.37),
            simHitToPhotoelectrons = cms.double(6.0),
            sipmTau = cms.double(0.0),
            syncPhase = cms.bool(True),
            threshold_currentTDC = cms.double(3.0),
            timePhase = cms.double(9.0)
        ),
        hf2 = cms.PSet(
            binOfMaximum = cms.int32(2),
            delayQIE = cms.int32(-999),
            doPhotoStatistics = cms.bool(True),
            doSiPMSmearing = cms.bool(False),
            photoelectronsToAnalog = cms.double(1.843),
            readoutFrameSize = cms.int32(3),
            samplingFactor = cms.double(0.37),
            simHitToPhotoelectrons = cms.double(6.0),
            sipmTau = cms.double(0.0),
            syncPhase = cms.bool(True),
            threshold_currentTDC = cms.double(3.0),
            timePhase = cms.double(8.0)
        ),
        hitsProducer = cms.string('g4SimHits'),
        ho = cms.PSet(
            binOfMaximum = cms.int32(5),
            delayQIE = cms.int32(-999),
            doPhotoStatistics = cms.bool(True),
            doSiPMSmearing = cms.bool(False),
            firstRing = cms.int32(1),
            readoutFrameSize = cms.int32(10),
            samplingFactors = cms.vdouble(
                231.0, 231.0, 231.0, 231.0, 360.0,
                360.0, 360.0, 360.0, 360.0, 360.0,
                360.0, 360.0, 360.0, 360.0, 360.0
            ),
            siPMCode = cms.int32(1),
            simHitToPhotoelectrons = cms.double(4000.0),
            sipmTau = cms.double(5.0),
            syncPhase = cms.bool(True),
            threshold_currentTDC = cms.double(-999.0),
            timePhase = cms.double(5.0),
            timeSmearing = cms.bool(False)
        ),
        hoHamamatsu = cms.PSet(
            binOfMaximum = cms.int32(5),
            delayQIE = cms.int32(-999),
            doPhotoStatistics = cms.bool(True),
            doSiPMSmearing = cms.bool(False),
            firstRing = cms.int32(1),
            readoutFrameSize = cms.int32(10),
            samplingFactors = cms.vdouble(
                231.0, 231.0, 231.0, 231.0, 360.0,
                360.0, 360.0, 360.0, 360.0, 360.0,
                360.0, 360.0, 360.0, 360.0, 360.0
            ),
            siPMCode = cms.int32(2),
            simHitToPhotoelectrons = cms.double(4000.0),
            sipmTau = cms.double(5.0),
            syncPhase = cms.bool(True),
            threshold_currentTDC = cms.double(-999.0),
            timePhase = cms.double(5.0),
            timeSmearing = cms.bool(False)
        ),
        hoZecotek = cms.PSet(
            binOfMaximum = cms.int32(5),
            delayQIE = cms.int32(-999),
            doPhotoStatistics = cms.bool(True),
            doSiPMSmearing = cms.bool(False),
            firstRing = cms.int32(1),
            readoutFrameSize = cms.int32(10),
            samplingFactors = cms.vdouble(
                231.0, 231.0, 231.0, 231.0, 360.0,
                360.0, 360.0, 360.0, 360.0, 360.0,
                360.0, 360.0, 360.0, 360.0, 360.0
            ),
            siPMCode = cms.int32(2),
            simHitToPhotoelectrons = cms.double(4000.0),
            sipmTau = cms.double(5.0),
            syncPhase = cms.bool(True),
            threshold_currentTDC = cms.double(-999.0),
            timePhase = cms.double(5.0),
            timeSmearing = cms.bool(False)
        ),
        ignoreGeantTime = cms.bool(False),
        injectTestHits = cms.bool(False),
        injectTestHitsCells = cms.vint32(),
        injectTestHitsEnergy = cms.vdouble(),
        injectTestHitsTime = cms.vdouble(),
        killHE = cms.bool(True),
        makeDigiSimLinks = cms.untracked.bool(False),
        minFCToDelay = cms.double(5.0),
        zdc = cms.PSet(
            binOfMaximum = cms.int32(5),
            delayQIE = cms.int32(-999),
            doPhotoStatistics = cms.bool(True),
            doSiPMSmearing = cms.bool(False),
            photoelectronsToAnalog = cms.double(1.843),
            readoutFrameSize = cms.int32(10),
            samplingFactor = cms.double(1.0),
            simHitToPhotoelectrons = cms.double(6.0),
            sipmTau = cms.double(0.0),
            syncPhase = cms.bool(True),
            threshold_currentTDC = cms.double(-999.0),
            timePhase = cms.double(-4.0)
        )
    ),
    hgceeDigitizer = cms.PSet(
        NoiseGeneration_Method = cms.bool(True),
        accumulatorType = cms.string('HGCDigiProducer'),
        bxTime = cms.double(25),
        digiCfg = cms.PSet(
            cceParams = cms.PSet(
                refToPSet_ = cms.string('HGCAL_cceParams_toUse')
            ),
            chargeCollectionEfficiencies = cms.PSet(
                refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
            ),
            doTimeSamples = cms.bool(False),
            feCfg = cms.PSet(
                adcNbits = cms.uint32(10),
                adcPulse = cms.vdouble(
                    0.0, 0.017, 0.817, 0.163, 0.003,
                    0.0
                ),
                adcSaturation_fC = cms.double(100),
                adcThreshold_fC = cms.double(0.672),
                fwVersion = cms.uint32(2),
                jitterConstant_ns = cms.vdouble(0.02, 0.02, 0.02),
                jitterNoise_ns = cms.vdouble(5.0, 5.0, 5.0),
                pulseAvgT = cms.vdouble(
                    0.0, 23.42298, 13.16733, 6.41062, 5.03946,
                    4.532
                ),
                targetMIPvalue_ADC = cms.uint32(10),
                tdcChargeDrainParameterisation = cms.vdouble(
                    -919.13, 365.36, -14.1, 0.2, -21.85,
                    49.39, 22.21, 0.8, -0.28, 27.14,
                    43.95, 3.89048
                ),
                tdcForToAOnset_fC = cms.vdouble(12.0, 12.0, 12.0),
                tdcNbits = cms.uint32(12),
                tdcOnset_fC = cms.double(60),
                tdcResolutionInPs = cms.double(0.001),
                tdcSaturation_fC = cms.double(10000),
                toaLSB_ns = cms.double(0.0244),
                toaMode = cms.uint32(1)
            ),
            ileakParam = cms.PSet(
                refToPSet_ = cms.string('HGCAL_ileakParam_toUse')
            ),
            keV2fC = cms.double(0.044259),
            noise_fC = cms.PSet(
                refToPSet_ = cms.string('HGCAL_noise_fC')
            ),
            thresholdFollowsMIP = cms.bool(True)
        ),
        digiCollection = cms.string('HGCDigisEE'),
        digitizationType = cms.uint32(0),
        digitizer = cms.string('HGCEEDigitizer'),
        eVPerEleHolePair = cms.double(3.62),
        hitCollection = cms.string('HGCHitsEE'),
        hitsProducer = cms.string('g4SimHits'),
        makeDigiSimLinks = cms.bool(False),
        maxSimHitsAccTime = cms.uint32(100),
        premixStage1 = cms.bool(False),
        premixStage1MaxCharge = cms.double(1000000.0),
        premixStage1MinCharge = cms.double(0),
        tofDelay = cms.double(-9),
        useAllChannels = cms.bool(True),
        verbosity = cms.untracked.uint32(0)
    ),
    hgchebackDigitizer = cms.PSet(
        NoiseGeneration_Method = cms.bool(True),
        accumulatorType = cms.string('HGCDigiProducer'),
        bxTime = cms.double(25),
        digiCfg = cms.PSet(
            algo = cms.uint32(2),
            doTimeSamples = cms.bool(False),
            feCfg = cms.PSet(
                adcNbits = cms.uint32(10),
                adcPulse = cms.vdouble(
                    0.0, 0.017, 0.817, 0.163, 0.003,
                    0.0
                ),
                adcSaturation_fC = cms.double(68.75),
                adcThreshold_fC = cms.double(0.5),
                fwVersion = cms.uint32(2),
                jitterConstant_ns = cms.vdouble(0.02, 0.02, 0.02),
                jitterNoise_ns = cms.vdouble(5.0, 5.0, 5.0),
                pulseAvgT = cms.vdouble(
                    0.0, 23.42298, 13.16733, 6.41062, 5.03946,
                    4.532
                ),
                targetMIPvalue_ADC = cms.uint32(15),
                tdcChargeDrainParameterisation = cms.vdouble(
                    -919.13, 365.36, -14.1, 0.2, -21.85,
                    49.39, 22.21, 0.8, -0.28, 27.14,
                    43.95, 3.89048
                ),
                tdcForToAOnset_fC = cms.vdouble(12.0, 12.0, 12.0),
                tdcNbits = cms.uint32(12),
                tdcOnset_fC = cms.double(55),
                tdcResolutionInPs = cms.double(0.001),
                tdcSaturation_fC = cms.double(1000),
                toaLSB_ns = cms.double(0.0244),
                toaMode = cms.uint32(1)
            ),
            keV2MIP = cms.double(0.0014814814814814814),
            nPEperMIP = cms.double(21.0),
            nTotalPE = cms.double(7500),
            noise = cms.PSet(
                refToPSet_ = cms.string('HGCAL_noise_heback')
            ),
            sdPixels = cms.double(1e-06),
            thresholdFollowsMIP = cms.bool(True)
        ),
        digiCollection = cms.string('HGCDigisHEback'),
        digitizationType = cms.uint32(1),
        digitizer = cms.string('HGCHEbackDigitizer'),
        hitCollection = cms.string('HGCHitsHEback'),
        hitsProducer = cms.string('g4SimHits'),
        makeDigiSimLinks = cms.bool(False),
        maxSimHitsAccTime = cms.uint32(100),
        premixStage1 = cms.bool(False),
        premixStage1MaxCharge = cms.double(1000000.0),
        premixStage1MinCharge = cms.double(0),
        tofDelay = cms.double(-14),
        useAllChannels = cms.bool(True),
        verbosity = cms.untracked.uint32(0)
    ),
    hgchefrontDigitizer = cms.PSet(
        NoiseGeneration_Method = cms.bool(True),
        accumulatorType = cms.string('HGCDigiProducer'),
        bxTime = cms.double(25),
        digiCfg = cms.PSet(
            cceParams = cms.PSet(
                refToPSet_ = cms.string('HGCAL_cceParams_toUse')
            ),
            chargeCollectionEfficiencies = cms.PSet(
                refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
            ),
            doTimeSamples = cms.bool(False),
            feCfg = cms.PSet(
                adcNbits = cms.uint32(10),
                adcPulse = cms.vdouble(
                    0.0, 0.017, 0.817, 0.163, 0.003,
                    0.0
                ),
                adcSaturation_fC = cms.double(100),
                adcThreshold_fC = cms.double(0.672),
                fwVersion = cms.uint32(2),
                jitterConstant_ns = cms.vdouble(0.02, 0.02, 0.02),
                jitterNoise_ns = cms.vdouble(5.0, 5.0, 5.0),
                pulseAvgT = cms.vdouble(
                    0.0, 23.42298, 13.16733, 6.41062, 5.03946,
                    4.532
                ),
                targetMIPvalue_ADC = cms.uint32(10),
                tdcChargeDrainParameterisation = cms.vdouble(
                    -919.13, 365.36, -14.1, 0.2, -21.85,
                    49.39, 22.21, 0.8, -0.28, 27.14,
                    43.95, 3.89048
                ),
                tdcForToAOnset_fC = cms.vdouble(12.0, 12.0, 12.0),
                tdcNbits = cms.uint32(12),
                tdcOnset_fC = cms.double(60),
                tdcResolutionInPs = cms.double(0.001),
                tdcSaturation_fC = cms.double(10000),
                toaLSB_ns = cms.double(0.0244),
                toaMode = cms.uint32(1)
            ),
            ileakParam = cms.PSet(
                refToPSet_ = cms.string('HGCAL_ileakParam_toUse')
            ),
            keV2fC = cms.double(0.044259),
            noise_fC = cms.PSet(
                refToPSet_ = cms.string('HGCAL_noise_fC')
            ),
            thresholdFollowsMIP = cms.bool(True)
        ),
        digiCollection = cms.string('HGCDigisHEfront'),
        digitizationType = cms.uint32(0),
        digitizer = cms.string('HGCHEfrontDigitizer'),
        hitCollection = cms.string('HGCHitsHEfront'),
        hitsProducer = cms.string('g4SimHits'),
        makeDigiSimLinks = cms.bool(False),
        maxSimHitsAccTime = cms.uint32(100),
        premixStage1 = cms.bool(False),
        premixStage1MaxCharge = cms.double(1000000.0),
        premixStage1MinCharge = cms.double(0),
        tofDelay = cms.double(-11),
        useAllChannels = cms.bool(True),
        verbosity = cms.untracked.uint32(0)
    ),
    mergedtruth = cms.PSet(
        HepMCProductLabel = cms.InputTag("generatorSmeared"),
        accumulatorType = cms.string('TrackingTruthAccumulator'),
        allowDifferentSimHitProcesses = cms.bool(False),
        alwaysAddAncestors = cms.bool(True),
        createInitialVertexCollection = cms.bool(False),
        createMergedBremsstrahlung = cms.bool(True),
        createUnmergedCollection = cms.bool(True),
        genParticleCollection = cms.InputTag("genParticles"),
        ignoreTracksOutsideVolume = cms.bool(False),
        maximumPreviousBunchCrossing = cms.uint32(9999),
        maximumSubsequentBunchCrossing = cms.uint32(9999),
        removeDeadModules = cms.bool(False),
        select = cms.PSet(
            chargedOnlyTP = cms.bool(True),
            intimeOnlyTP = cms.bool(False),
            lipTP = cms.double(1000),
            maxRapidityTP = cms.double(5.0),
            minHitTP = cms.int32(0),
            minRapidityTP = cms.double(-5.0),
            pdgIdTP = cms.vint32(),
            ptMaxTP = cms.double(1e+100),
            ptMinTP = cms.double(0.1),
            signalOnlyTP = cms.bool(True),
            stableOnlyTP = cms.bool(False),
            tipTP = cms.double(1000)
        ),
        simHitCollections = cms.PSet(
            muon = cms.VInputTag(cms.InputTag("g4SimHits","MuonDTHits"), cms.InputTag("g4SimHits","MuonCSCHits"), cms.InputTag("g4SimHits","MuonRPCHits"), cms.InputTag("g4SimHits","MuonGEMHits")),
            pixel = cms.VInputTag(cms.InputTag("g4SimHits","TrackerHitsPixelBarrelLowTof"), cms.InputTag("g4SimHits","TrackerHitsPixelBarrelHighTof"), cms.InputTag("g4SimHits","TrackerHitsPixelEndcapLowTof"), cms.InputTag("g4SimHits","TrackerHitsPixelEndcapHighTof")),
            tracker = cms.VInputTag()
        ),
        simTrackCollection = cms.InputTag("g4SimHits"),
        simVertexCollection = cms.InputTag("g4SimHits"),
        vertexDistanceCut = cms.double(0.003),
        volumeRadius = cms.double(120.0),
        volumeZ = cms.double(300.0)
    ),
    pixel = cms.PSet(
        AlgorithmCommon = cms.PSet(
            DeltaProductionCut = cms.double(0.03),
            makeDigiSimLinks = cms.untracked.bool(True)
        ),
        GeometryType = cms.string('idealForDigi'),
        PSPDigitizerAlgorithm = cms.PSet(
            AdcFullScale = cms.int32(255),
            AddInefficiency = cms.bool(False),
            AddNoise = cms.bool(True),
            AddNoisyPixels = cms.bool(True),
            AddThresholdSmearing = cms.bool(False),
            AddXTalk = cms.bool(True),
            Alpha2Order = cms.bool(True),
            BiasRailInefficiencyFlag = cms.int32(1),
            CellsToKill = cms.VPSet(),
            ClusterWidth = cms.double(3),
            DeadModules = cms.VPSet(),
            DeadModules_DB = cms.bool(False),
            EfficiencyFactors_Barrel = cms.vdouble(
                0.999, 0.999, 0.999, 0.999, 0.999,
                0.999, 0.999, 0.999, 0.999, 0.999
            ),
            EfficiencyFactors_Endcap = cms.vdouble(
                0.999, 0.999, 0.999, 0.999, 0.999,
                0.999, 0.999, 0.999, 0.999, 0.999,
                0.999, 0.999, 0.999, 0.999, 0.999,
                0.999
            ),
            ElectronPerAdc = cms.double(135.0),
            HIPThresholdInElectrons_Barrel = cms.double(10000000000.0),
            HIPThresholdInElectrons_Endcap = cms.double(10000000000.0),
            Inefficiency_DB = cms.bool(False),
            InterstripCoupling = cms.double(0.05),
            KillModules = cms.bool(False),
            LorentzAngle_DB = cms.bool(True),
            NoiseInElectrons = cms.double(200),
            Phase2ReadoutMode = cms.int32(0),
            ReadoutNoiseInElec = cms.double(-99.9),
            SigmaCoeff = cms.double(1.8),
            SigmaZero = cms.double(0.00037),
            TanLorentzAnglePerTesla_Barrel = cms.double(0.07),
            TanLorentzAnglePerTesla_Endcap = cms.double(0.07),
            ThresholdInElectrons_Barrel = cms.double(6300.0),
            ThresholdInElectrons_Endcap = cms.double(6300.0),
            ThresholdSmearing_Barrel = cms.double(630.0),
            ThresholdSmearing_Endcap = cms.double(630.0),
            TofLowerCut = cms.double(-12.5),
            TofUpperCut = cms.double(12.5),
            UseReweighting = cms.bool(False)
        ),
        PSSDigitizerAlgorithm = cms.PSet(
            AdcFullScale = cms.int32(255),
            AddInefficiency = cms.bool(False),
            AddNoise = cms.bool(True),
            AddNoisyPixels = cms.bool(True),
            AddThresholdSmearing = cms.bool(False),
            AddXTalk = cms.bool(True),
            Alpha2Order = cms.bool(True),
            CellsToKill = cms.VPSet(),
            ClusterWidth = cms.double(3),
            DeadModules = cms.VPSet(),
            DeadModules_DB = cms.bool(False),
            EfficiencyFactors_Barrel = cms.vdouble(
                0.999, 0.999, 0.999, 0.999, 0.999,
                0.999, 0.999, 0.999, 0.999, 0.999
            ),
            EfficiencyFactors_Endcap = cms.vdouble(
                0.999, 0.999, 0.999, 0.999, 0.999,
                0.999, 0.999, 0.999, 0.999, 0.999,
                0.999, 0.999, 0.999, 0.999, 0.999,
                0.999
            ),
            ElectronPerAdc = cms.double(135.0),
            HIPThresholdInElectrons_Barrel = cms.double(21000.0),
            HIPThresholdInElectrons_Endcap = cms.double(21000.0),
            Inefficiency_DB = cms.bool(False),
            InterstripCoupling = cms.double(0.05),
            KillModules = cms.bool(False),
            LorentzAngle_DB = cms.bool(True),
            NoiseInElectrons = cms.double(1010),
            Phase2ReadoutMode = cms.int32(0),
            ReadoutNoiseInElec = cms.double(-99.9),
            SigmaCoeff = cms.double(1.8),
            SigmaZero = cms.double(0.00037),
            TanLorentzAnglePerTesla_Barrel = cms.double(0.07),
            TanLorentzAnglePerTesla_Endcap = cms.double(0.07),
            ThresholdInElectrons_Barrel = cms.double(4800.0),
            ThresholdInElectrons_Endcap = cms.double(4800.0),
            ThresholdSmearing_Barrel = cms.double(480.0),
            ThresholdSmearing_Endcap = cms.double(480.0),
            TofLowerCut = cms.double(-12.5),
            TofUpperCut = cms.double(12.5),
            UseReweighting = cms.bool(False)
        ),
        Pixel3DDigitizerAlgorithm = cms.PSet(
            AdcFullScale = cms.int32(15),
            AddInefficiency = cms.bool(False),
            AddNoise = cms.bool(False),
            AddNoisyPixels = cms.bool(False),
            AddThresholdSmearing = cms.bool(False),
            AddXTalk = cms.bool(False),
            Alpha2Order = cms.bool(True),
            ApplyTimewalk = cms.bool(False),
            CellsToKill = cms.VPSet(),
            ClusterWidth = cms.double(3),
            DeadModules = cms.VPSet(),
            DeadModules_DB = cms.bool(False),
            EfficiencyFactors_Barrel = cms.vdouble(
                0.999, 0.999, 0.999, 0.999, 0.999,
                0.999, 0.999, 0.999, 0.999, 0.999
            ),
            EfficiencyFactors_Endcap = cms.vdouble(
                0.999, 0.999, 0.999, 0.999, 0.999,
                0.999, 0.999, 0.999, 0.999, 0.999,
                0.999, 0.999, 0.999, 0.999, 0.999,
                0.999
            ),
            ElectronPerAdc = cms.double(1500.0),
            Even_column_interchannelCoupling_next_column = cms.double(0.0),
            Even_row_interchannelCoupling_next_row = cms.double(0.0),
            HIPThresholdInElectrons_Barrel = cms.double(10000000000.0),
            HIPThresholdInElectrons_Endcap = cms.double(10000000000.0),
            Inefficiency_DB = cms.bool(False),
            InterstripCoupling = cms.double(0.0),
            KillModules = cms.bool(False),
            LorentzAngle_DB = cms.bool(True),
            NPColumnGap = cms.double(46.0),
            NPColumnRadius = cms.double(4.0),
            NoiseInElectrons = cms.double(0.0),
            Odd_column_interchannelCoupling_next_column = cms.double(0.0),
            Odd_row_interchannelCoupling_next_row = cms.double(0.2),
            OhmicColumnRadius = cms.double(4.0),
            Phase2ReadoutMode = cms.int32(3),
            ReadoutNoiseInElec = cms.double(-99.9),
            SigmaCoeff = cms.double(1.8),
            SigmaZero = cms.double(0.00037),
            TanLorentzAnglePerTesla_Barrel = cms.double(0.106),
            TanLorentzAnglePerTesla_Endcap = cms.double(0.106),
            ThresholdInElectrons_Barrel = cms.double(1000.0),
            ThresholdInElectrons_Endcap = cms.double(1000.0),
            ThresholdSmearing_Barrel = cms.double(0.0),
            ThresholdSmearing_Endcap = cms.double(0.0),
            TimewalkModel = cms.PSet(
                Curves = cms.VPSet(
                    cms.PSet(
                        charge = cms.vdouble(
                            1000, 1025, 1050, 1100, 1200,
                            1500, 2000, 6000, 10000, 15000,
                            20000, 30000
                        ),
                        delay = cms.vdouble(
                            26.8, 23.73, 21.92, 19.46, 16.52,
                            12.15, 8.88, 3.03, 1.69, 0.95,
                            0.56, 0.19
                        )
                    ),
                    cms.PSet(
                        charge = cms.vdouble(
                            1200, 1225, 1250, 1500, 2000,
                            6000, 10000, 15000, 20000, 30000
                        ),
                        delay = cms.vdouble(
                            26.28, 23.5, 21.79, 14.92, 10.27,
                            3.33, 1.86, 1.07, 0.66, 0.27
                        )
                    ),
                    cms.PSet(
                        charge = cms.vdouble(
                            1500, 1525, 1550, 1600, 2000,
                            6000, 10000, 15000, 20000, 30000
                        ),
                        delay = cms.vdouble(
                            25.36, 23.05, 21.6, 19.56, 12.94,
                            3.79, 2.14, 1.26, 0.81, 0.39
                        )
                    ),
                    cms.PSet(
                        charge = cms.vdouble(
                            3000, 3025, 3050, 3100, 3500,
                            6000, 10000, 15000, 20000, 30000
                        ),
                        delay = cms.vdouble(
                            25.63, 23.63, 22.35, 20.65, 14.92,
                            6.7, 3.68, 2.29, 1.62, 1.02
                        )
                    )
                ),
                ThresholdValues = cms.vdouble(1000, 1200, 1500, 3000)
            ),
            TofLowerCut = cms.double(-5.0),
            TofUpperCut = cms.double(20.0),
            UseReweighting = cms.bool(False)
        ),
        PixelDigitizerAlgorithm = cms.PSet(
            AdcFullScale = cms.int32(15),
            AddInefficiency = cms.bool(False),
            AddNoise = cms.bool(False),
            AddNoisyPixels = cms.bool(False),
            AddThresholdSmearing = cms.bool(False),
            AddXTalk = cms.bool(False),
            Alpha2Order = cms.bool(True),
            ApplyTimewalk = cms.bool(False),
            CellsToKill = cms.VPSet(),
            ClusterWidth = cms.double(3),
            DeadModules = cms.VPSet(),
            DeadModules_DB = cms.bool(False),
            EfficiencyFactors_Barrel = cms.vdouble(
                0.999, 0.999, 0.999, 0.999, 0.999,
                0.999, 0.999, 0.999, 0.999, 0.999
            ),
            EfficiencyFactors_Endcap = cms.vdouble(
                0.999, 0.999, 0.999, 0.999, 0.999,
                0.999, 0.999, 0.999, 0.999, 0.999,
                0.999, 0.999, 0.999, 0.999, 0.999,
                0.999
            ),
            ElectronPerAdc = cms.double(1500.0),
            Even_column_interchannelCoupling_next_column = cms.double(0.0),
            Even_row_interchannelCoupling_next_row = cms.double(0.0),
            HIPThresholdInElectrons_Barrel = cms.double(10000000000.0),
            HIPThresholdInElectrons_Endcap = cms.double(10000000000.0),
            Inefficiency_DB = cms.bool(False),
            InterstripCoupling = cms.double(0.0),
            KillModules = cms.bool(False),
            LorentzAngle_DB = cms.bool(True),
            NoiseInElectrons = cms.double(0.0),
            Odd_column_interchannelCoupling_next_column = cms.double(0.0),
            Odd_row_interchannelCoupling_next_row = cms.double(0.2),
            Phase2ReadoutMode = cms.int32(3),
            ReadoutNoiseInElec = cms.double(-99.9),
            SigmaCoeff = cms.double(0),
            SigmaZero = cms.double(0.00037),
            TanLorentzAnglePerTesla_Barrel = cms.double(0.106),
            TanLorentzAnglePerTesla_Endcap = cms.double(0.106),
            ThresholdInElectrons_Barrel = cms.double(1000.0),
            ThresholdInElectrons_Endcap = cms.double(1000.0),
            ThresholdSmearing_Barrel = cms.double(0.0),
            ThresholdSmearing_Endcap = cms.double(0.0),
            TimewalkModel = cms.PSet(
                Curves = cms.VPSet(
                    cms.PSet(
                        charge = cms.vdouble(
                            1000, 1025, 1050, 1100, 1200,
                            1500, 2000, 6000, 10000, 15000,
                            20000, 30000
                        ),
                        delay = cms.vdouble(
                            26.8, 23.73, 21.92, 19.46, 16.52,
                            12.15, 8.88, 3.03, 1.69, 0.95,
                            0.56, 0.19
                        )
                    ),
                    cms.PSet(
                        charge = cms.vdouble(
                            1200, 1225, 1250, 1500, 2000,
                            6000, 10000, 15000, 20000, 30000
                        ),
                        delay = cms.vdouble(
                            26.28, 23.5, 21.79, 14.92, 10.27,
                            3.33, 1.86, 1.07, 0.66, 0.27
                        )
                    ),
                    cms.PSet(
                        charge = cms.vdouble(
                            1500, 1525, 1550, 1600, 2000,
                            6000, 10000, 15000, 20000, 30000
                        ),
                        delay = cms.vdouble(
                            25.36, 23.05, 21.6, 19.56, 12.94,
                            3.79, 2.14, 1.26, 0.81, 0.39
                        )
                    ),
                    cms.PSet(
                        charge = cms.vdouble(
                            3000, 3025, 3050, 3100, 3500,
                            6000, 10000, 15000, 20000, 30000
                        ),
                        delay = cms.vdouble(
                            25.63, 23.63, 22.35, 20.65, 14.92,
                            6.7, 3.68, 2.29, 1.62, 1.02
                        )
                    )
                ),
                ThresholdValues = cms.vdouble(1000, 1200, 1500, 3000)
            ),
            TofLowerCut = cms.double(-5.0),
            TofUpperCut = cms.double(20.0),
            UseReweighting = cms.bool(False)
        ),
        ROUList = cms.vstring(
            'TrackerHitsPixelBarrelLowTof',
            'TrackerHitsPixelBarrelHighTof',
            'TrackerHitsPixelEndcapLowTof',
            'TrackerHitsPixelEndcapHighTof'
        ),
        SSDigitizerAlgorithm = cms.PSet(
            AdcFullScale = cms.int32(255),
            AddInefficiency = cms.bool(False),
            AddNoise = cms.bool(True),
            AddNoisyPixels = cms.bool(True),
            AddThresholdSmearing = cms.bool(False),
            AddXTalk = cms.bool(True),
            Alpha2Order = cms.bool(True),
            CBCDeadTime = cms.double(0.0),
            CellsToKill = cms.VPSet(),
            ClusterWidth = cms.double(3),
            DeadModules = cms.VPSet(),
            DeadModules_DB = cms.bool(False),
            EfficiencyFactors_Barrel = cms.vdouble(
                0.999, 0.999, 0.999, 0.999, 0.999,
                0.999, 0.999, 0.999, 0.999, 0.999
            ),
            EfficiencyFactors_Endcap = cms.vdouble(
                0.999, 0.999, 0.999, 0.999, 0.999,
                0.999, 0.999, 0.999, 0.999, 0.999,
                0.999, 0.999, 0.999, 0.999, 0.999,
                0.999
            ),
            ElectronPerAdc = cms.double(135.0),
            HIPThresholdInElectrons_Barrel = cms.double(10000000000.0),
            HIPThresholdInElectrons_Endcap = cms.double(10000000000.0),
            HitDetectionMode = cms.int32(0),
            Inefficiency_DB = cms.bool(False),
            InterstripCoupling = cms.double(0.05),
            KillModules = cms.bool(False),
            LorentzAngle_DB = cms.bool(True),
            NoiseInElectrons = cms.double(1263),
            Phase2ReadoutMode = cms.int32(0),
            PulseShapeParameters = cms.vdouble(
                -3.0, 16.043703, 99.999857, 40.57165, 2.0,
                1.2459094
            ),
            ReadoutNoiseInElec = cms.double(-99.9),
            SigmaCoeff = cms.double(1.8),
            SigmaZero = cms.double(0.00037),
            TanLorentzAnglePerTesla_Barrel = cms.double(0.07),
            TanLorentzAnglePerTesla_Endcap = cms.double(0.07),
            ThresholdInElectrons_Barrel = cms.double(6000.0),
            ThresholdInElectrons_Endcap = cms.double(6000.0),
            ThresholdSmearing_Barrel = cms.double(600.0),
            ThresholdSmearing_Endcap = cms.double(600.0),
            TofLowerCut = cms.double(-12.5),
            TofUpperCut = cms.double(12.5),
            UseReweighting = cms.bool(False)
        ),
        accumulatorType = cms.string('Phase2TrackerDigitizer'),
        hitsProducer = cms.string('g4SimHits'),
        isOTreadoutAnalog = cms.bool(False),
        premixStage1 = cms.bool(False),
        usePseudoPixel3DAlgo = cms.bool(False)
    ),
    puVtx = cms.PSet(
        accumulatorType = cms.string('PileupVertexAccumulator'),
        hitsProducer = cms.string('generator'),
        makeDigiSimLinks = cms.untracked.bool(False),
        saveVtxTimes = cms.bool(True),
        vtxFallbackTag = cms.InputTag("generator"),
        vtxTag = cms.InputTag("generatorSmeared")
    )
)

process.theDigitizersValid = cms.PSet(
    MC_fastTimingLayer = cms.PSet(
        HepMCProductLabel = cms.InputTag("generatorSmeared"),
        MaxPseudoRapidity = cms.double(5.0),
        MinEnergy = cms.double(0.5),
        accumulatorType = cms.string('MtdTruthAccumulator'),
        allowDifferentSimHitProcesses = cms.bool(False),
        bunchspace = cms.uint32(25),
        genParticleCollection = cms.InputTag("genParticles"),
        maximumPreviousBunchCrossing = cms.uint32(0),
        maximumSubsequentBunchCrossing = cms.uint32(0),
        premixStage1 = cms.bool(False),
        simHitCollections = cms.PSet(
            mtdCollections = cms.VInputTag(cms.InputTag("g4SimHits","FastTimerHitsBarrel"), cms.InputTag("g4SimHits","FastTimerHitsEndcap"))
        ),
        simTrackCollection = cms.InputTag("g4SimHits"),
        simVertexCollection = cms.InputTag("g4SimHits")
    ),
    calotruth = cms.PSet(
        HepMCProductLabel = cms.InputTag("generatorSmeared"),
        MaxPseudoRapidity = cms.double(5.0),
        MinEnergy = cms.double(0.5),
        accumulatorType = cms.string('CaloTruthAccumulator'),
        allowDifferentSimHitProcesses = cms.bool(False),
        doHGCAL = cms.bool(True),
        genParticleCollection = cms.InputTag("genParticles"),
        maximumPreviousBunchCrossing = cms.uint32(0),
        maximumSubsequentBunchCrossing = cms.uint32(0),
        premixStage1 = cms.bool(False),
        simHitCollections = cms.PSet(
            ecal = cms.VInputTag(cms.InputTag("g4SimHits","EcalHitsEB")),
            hcal = cms.VInputTag(cms.InputTag("g4SimHits","HcalHits")),
            hgc = cms.VInputTag(cms.InputTag("g4SimHits","HGCHitsEE"), cms.InputTag("g4SimHits","HGCHitsHEfront"), cms.InputTag("g4SimHits","HGCHitsHEback"))
        ),
        simTrackCollection = cms.InputTag("g4SimHits"),
        simVertexCollection = cms.InputTag("g4SimHits")
    ),
    ecal = cms.PSet(
        ConstantTerm = cms.double(0.003),
        EBCorrNoiseMatrixG01 = cms.vdouble(
            1.0, 0.73354, 0.64442, 0.58851, 0.55425,
            0.53082, 0.51916, 0.51097, 0.50732, 0.50409
        ),
        EBCorrNoiseMatrixG06 = cms.vdouble(
            1.0, 0.70946, 0.58021, 0.49846, 0.45006,
            0.41366, 0.39699, 0.38478, 0.37847, 0.37055
        ),
        EBCorrNoiseMatrixG12 = cms.vdouble(
            1.0, 0.71073, 0.55721, 0.46089, 0.40449,
            0.35931, 0.33924, 0.32439, 0.31581, 0.30481
        ),
        EBdigiCollection = cms.string(''),
        EBs25notContainment = cms.double(0.9675),
        EECorrNoiseMatrixG01 = cms.vdouble(
            1.0, 0.72698, 0.62048, 0.55691, 0.51848,
            0.49147, 0.47813, 0.47007, 0.46621, 0.46265
        ),
        EECorrNoiseMatrixG06 = cms.vdouble(
            1.0, 0.71217, 0.47464, 0.34056, 0.26282,
            0.20287, 0.17734, 0.16256, 0.15618, 0.14443
        ),
        EECorrNoiseMatrixG12 = cms.vdouble(
            1.0, 0.71373, 0.44825, 0.30152, 0.21609,
            0.14786, 0.11772, 0.10165, 0.09465, 0.08098
        ),
        EEdigiCollection = cms.string(''),
        EEs25notContainment = cms.double(0.968),
        ESdigiCollection = cms.string(''),
        EcalPreMixStage1 = cms.bool(False),
        EcalPreMixStage2 = cms.bool(False),
        UseLCcorrection = cms.untracked.bool(True),
        accumulatorType = cms.string('EcalDigiProducer'),
        apdAddToBarrel = cms.bool(False),
        apdDigiTag = cms.string('APD'),
        apdDoPEStats = cms.bool(True),
        apdNonlParms = cms.vdouble(
            1.48, -3.75, 1.81, 1.26, 2.0,
            45, 1.0
        ),
        apdSeparateDigi = cms.bool(True),
        apdShapeTau = cms.double(40.5),
        apdShapeTstart = cms.double(74.5),
        apdSimToPEHigh = cms.double(88200000.0),
        apdSimToPELow = cms.double(2450000.0),
        apdTimeOffWidth = cms.double(0.8),
        apdTimeOffset = cms.double(-13.5),
        applyConstantTerm = cms.bool(True),
        binOfMaximum = cms.int32(6),
        componentAddToBarrel = cms.bool(False),
        componentDigiTag = cms.string('Component'),
        componentSeparateDigi = cms.bool(False),
        componentTimePhase = cms.double(0.0),
        componentTimeTag = cms.string('Component'),
        cosmicsPhase = cms.bool(False),
        cosmicsShift = cms.double(0.0),
        doEB = cms.bool(True),
        doEE = cms.bool(False),
        doENoise = cms.bool(True),
        doES = cms.bool(False),
        doESNoise = cms.bool(True),
        doFast = cms.bool(True),
        doPhotostatistics = cms.bool(True),
        hitsProducer = cms.string('g4SimHits'),
        makeDigiSimLinks = cms.untracked.bool(False),
        photoelectronsToAnalogBarrel = cms.double(0.000444444),
        photoelectronsToAnalogEndcap = cms.double(0.000555555),
        samplingFactor = cms.double(1.0),
        simHitToPhotoelectronsBarrel = cms.double(2250.0),
        simHitToPhotoelectronsEndcap = cms.double(1800.0),
        syncPhase = cms.bool(True),
        timeDependent = cms.bool(False),
        timePhase = cms.double(0.0)
    ),
    ecalTime = cms.PSet(
        EBtimeDigiCollection = cms.string('EBTimeDigi'),
        EEtimeDigiCollection = cms.string('EETimeDigi'),
        accumulatorType = cms.string('EcalTimeDigiProducer'),
        componentWaveform = cms.bool(False),
        hitsProducerEB = cms.InputTag("g4SimHits","EcalHitsEB"),
        hitsProducerEE = cms.InputTag("g4SimHits","EcalHitsEE"),
        timeLayerBarrel = cms.int32(7),
        timeLayerEndcap = cms.int32(3)
    ),
    fastTimingLayer = cms.PSet(
        accumulatorType = cms.string('MTDDigiProducer'),
        barrelDigitizer = cms.PSet(
            DeviceSimulation = cms.PSet(
                LCEpositionSlope = cms.double(0.071),
                LightCollectionEff = cms.double(0.25),
                LightCollectionSlope = cms.double(0.075),
                LightYield = cms.double(40000.0),
                PhotonDetectionEff = cms.double(0.2),
                bxTime = cms.double(25)
            ),
            ElectronicsSimulation = cms.PSet(
                ChannelTimeOffset = cms.double(0.0),
                CorrelationCoefficient = cms.double(1.0),
                DarkCountRate = cms.double(10.0),
                EnergyThreshold = cms.double(4.0),
                LightCollectionEff = cms.double(0.25),
                LightYield = cms.double(40000.0),
                Npe_to_V = cms.double(0.0064),
                Npe_to_pC = cms.double(0.016),
                PhotonDetectionEff = cms.double(0.2),
                ReferencePulseNpe = cms.double(100.0),
                ScintillatorDecayTime = cms.double(40.0),
                ScintillatorRiseTime = cms.double(1.1),
                SigmaClock = cms.double(0.015),
                SigmaElectronicNoise = cms.double(1.0),
                SigmaRelTOFHIRenergy = cms.vdouble(0.139, -4.35e-05, 3.315e-09, -1.2e-13, 1.67e-18),
                SinglePhotonTimeResolution = cms.double(0.06),
                SmearTimeForOOTtails = cms.bool(True),
                TestBeamMIPTimeRes = cms.double(4.293),
                TimeThreshold1 = cms.double(20.0),
                TimeThreshold2 = cms.double(50.0),
                adcNbits = cms.uint32(10),
                adcSaturation_MIP = cms.double(600.0),
                adcThreshold_MIP = cms.double(0.064),
                bxTime = cms.double(25),
                smearChannelTimeOffset = cms.double(0.0),
                tdcNbits = cms.uint32(10),
                toaLSB_ns = cms.double(0.02)
            ),
            digiCollectionTag = cms.string('FTLBarrel'),
            digitizerName = cms.string('BTLDigitizer'),
            inputSimHits = cms.InputTag("g4SimHits","FastTimerHitsBarrel"),
            maxSimHitsAccTime = cms.uint32(100),
            premixStage1 = cms.bool(False),
            premixStage1MaxCharge = cms.double(1000000.0),
            premixStage1MinCharge = cms.double(0.0001)
        ),
        endcapDigitizer = cms.PSet(
            DeviceSimulation = cms.PSet(
                FluenceVsRadius = cms.string('1.937*TMath::Power(x,-1.706)'),
                IntegratedLuminosity = cms.double(1000.0),
                LGADGainDegradation = cms.string('TMath::Max(1.0, TMath::Min(x, x + 0.05/0.01 * (x - 1) + y * (1 - x)/0.01))'),
                LGADGainVsFluence = cms.string('TMath::Min(15.,30.-x)'),
                MPVElectron = cms.string('1.30030e-05 + 1.55166e-07 / (x * x)'),
                MPVKaon = cms.string('1.20998e-05 + 2.47192e-06 / (x * x * x)'),
                MPVMuon = cms.string('1.21561e-05 + 8.89462e-07 / (x * x)'),
                MPVPion = cms.string('1.24531e-05 + 7.16578e-07 / (x * x)'),
                MPVProton = cms.string('1.13666e-05 + 1.20093e-05 / (x * x)'),
                applyDegradation = cms.bool(False),
                bxTime = cms.double(25),
                meVPerMIP = cms.double(0.015),
                tofDelay = cms.double(1)
            ),
            ElectronicsSimulation = cms.PSet(
                IntegratedLuminosity = cms.double(1000.0),
                adcNbits = cms.uint32(8),
                adcSaturation_MIP = cms.double(100),
                adcThreshold_MIP = cms.double(0.025),
                bxTime = cms.double(25),
                formulaLandauNoise = cms.string('TMath::Max(0.020, 0.020 * (0.35 * (x - 1.0) + 1.0))'),
                iThreshold_MIP = cms.double(0.9525),
                noiseLevel = cms.double(0.3554),
                referenceChargeColl = cms.double(1.0),
                sigmaDistorsion = cms.double(0.0),
                sigmaTDC = cms.double(0.01),
                tdcNbits = cms.uint32(11),
                toaLSB_ns = cms.double(0.013)
            ),
            digiCollectionTag = cms.string('FTLEndcap'),
            digitizerName = cms.string('ETLDigitizer'),
            inputSimHits = cms.InputTag("g4SimHits","FastTimerHitsEndcap"),
            maxSimHitsAccTime = cms.uint32(100),
            premixStage1 = cms.bool(False),
            premixStage1MaxCharge = cms.double(1000000.0),
            premixStage1MinCharge = cms.double(0.0001)
        ),
        makeDigiSimLinks = cms.bool(False),
        verbosity = cms.untracked.uint32(0)
    ),
    hcal = cms.PSet(
        DelivLuminosity = cms.double(0),
        HBDarkening = cms.bool(False),
        HEDarkening = cms.bool(False),
        HFDarkening = cms.bool(False),
        HFRecalParameterBlock = cms.PSet(
            HFdepthOneParameterA = cms.vdouble(
                0.004123, 0.00602, 0.008201, 0.010489, 0.013379,
                0.016997, 0.021464, 0.027371, 0.034195, 0.044807,
                0.058939, 0.125497
            ),
            HFdepthOneParameterB = cms.vdouble(
                -4e-06, -2e-06, 0.0, 4e-06, 1.5e-05,
                2.6e-05, 6.3e-05, 8.4e-05, 0.00016, 0.000107,
                0.000425, 0.000209
            ),
            HFdepthTwoParameterA = cms.vdouble(
                0.002861, 0.004168, 0.0064, 0.008388, 0.011601,
                0.014425, 0.018633, 0.023232, 0.028274, 0.035447,
                0.051579, 0.086593
            ),
            HFdepthTwoParameterB = cms.vdouble(
                -2e-06, -0.0, -7e-06, -6e-06, -2e-06,
                1e-06, 1.9e-05, 3.1e-05, 6.7e-05, 1.2e-05,
                0.000157, -3e-06
            )
        ),
        HcalPreMixStage1 = cms.bool(False),
        HcalPreMixStage2 = cms.bool(False),
        TestNumbering = cms.bool(True),
        accumulatorType = cms.string('HcalDigiProducer'),
        debugCaloSamples = cms.bool(False),
        doEmpty = cms.bool(True),
        doHFWindow = cms.bool(False),
        doIonFeedback = cms.bool(True),
        doNeutralDensityFilter = cms.bool(True),
        doNoise = cms.bool(True),
        doThermalNoise = cms.bool(True),
        doTimeSlew = cms.bool(True),
        hb = cms.PSet(
            binOfMaximum = cms.int32(6),
            delayQIE = cms.int32(-999),
            doPhotoStatistics = cms.bool(True),
            doSiPMSmearing = cms.bool(True),
            firstRing = cms.int32(1),
            readoutFrameSize = cms.int32(10),
            samplingFactors = cms.vdouble(
                125.44, 125.54, 125.32, 125.13, 124.46,
                125.01, 125.22, 125.48, 124.45, 125.9,
                125.83, 127.01, 126.82, 129.73, 131.83,
                143.52
            ),
            simHitToPhotoelectrons = cms.double(2000.0),
            sipmTau = cms.double(10.0),
            syncPhase = cms.bool(True),
            threshold_currentTDC = cms.double(18.7),
            timePhase = cms.double(6.0),
            timeSmearing = cms.bool(True)
        ),
        he = cms.PSet(
            binOfMaximum = cms.int32(6),
            delayQIE = cms.int32(-999),
            doPhotoStatistics = cms.bool(True),
            doSiPMSmearing = cms.bool(True),
            firstRing = cms.int32(16),
            readoutFrameSize = cms.int32(10),
            samplingFactors = cms.vdouble(
                210.55, 197.93, 186.12, 189.64, 189.63,
                189.96, 190.03, 190.11, 190.18, 190.25,
                190.32, 190.4, 190.47, 190.54, 190.61,
                190.69, 190.83, 190.94, 190.94, 190.94,
                190.94, 190.94, 190.94, 190.94, 190.94,
                190.94, 190.94, 190.94, 190.94, 190.94,
                190.94, 190.94, 190.94, 190.94, 190.94,
                190.94, 190.94, 190.94, 190.94, 190.94,
                190.94, 190.94, 190.94, 190.94, 190.94,
                190.94, 190.94, 190.94, 190.94, 190.94,
                190.94, 190.94, 190.94, 190.94, 190.94,
                190.94, 190.94, 190.94, 190.94, 190.94,
                190.94, 190.94, 190.94, 190.94, 190.94,
                190.94, 190.94, 190.94, 190.94, 190.94,
                190.94, 190.94, 190.94, 190.94, 190.94,
                190.94, 190.94, 190.94, 190.94, 190.94,
                190.94, 190.94, 190.94, 190.94, 190.94
            ),
            simHitToPhotoelectrons = cms.double(2000.0),
            sipmTau = cms.double(10.0),
            syncPhase = cms.bool(True),
            threshold_currentTDC = cms.double(18.7),
            timePhase = cms.double(6.0),
            timeSmearing = cms.bool(True)
        ),
        hf1 = cms.PSet(
            binOfMaximum = cms.int32(2),
            delayQIE = cms.int32(-999),
            doPhotoStatistics = cms.bool(True),
            doSiPMSmearing = cms.bool(False),
            photoelectronsToAnalog = cms.double(2.79),
            readoutFrameSize = cms.int32(3),
            samplingFactor = cms.double(0.37),
            simHitToPhotoelectrons = cms.double(6.0),
            sipmTau = cms.double(0.0),
            syncPhase = cms.bool(True),
            threshold_currentTDC = cms.double(3.0),
            timePhase = cms.double(9.0)
        ),
        hf2 = cms.PSet(
            binOfMaximum = cms.int32(2),
            delayQIE = cms.int32(-999),
            doPhotoStatistics = cms.bool(True),
            doSiPMSmearing = cms.bool(False),
            photoelectronsToAnalog = cms.double(1.843),
            readoutFrameSize = cms.int32(3),
            samplingFactor = cms.double(0.37),
            simHitToPhotoelectrons = cms.double(6.0),
            sipmTau = cms.double(0.0),
            syncPhase = cms.bool(True),
            threshold_currentTDC = cms.double(3.0),
            timePhase = cms.double(8.0)
        ),
        hitsProducer = cms.string('g4SimHits'),
        ho = cms.PSet(
            binOfMaximum = cms.int32(5),
            delayQIE = cms.int32(-999),
            doPhotoStatistics = cms.bool(True),
            doSiPMSmearing = cms.bool(False),
            firstRing = cms.int32(1),
            readoutFrameSize = cms.int32(10),
            samplingFactors = cms.vdouble(
                231.0, 231.0, 231.0, 231.0, 360.0,
                360.0, 360.0, 360.0, 360.0, 360.0,
                360.0, 360.0, 360.0, 360.0, 360.0
            ),
            siPMCode = cms.int32(1),
            simHitToPhotoelectrons = cms.double(4000.0),
            sipmTau = cms.double(5.0),
            syncPhase = cms.bool(True),
            threshold_currentTDC = cms.double(-999.0),
            timePhase = cms.double(5.0),
            timeSmearing = cms.bool(False)
        ),
        hoHamamatsu = cms.PSet(
            binOfMaximum = cms.int32(5),
            delayQIE = cms.int32(-999),
            doPhotoStatistics = cms.bool(True),
            doSiPMSmearing = cms.bool(False),
            firstRing = cms.int32(1),
            readoutFrameSize = cms.int32(10),
            samplingFactors = cms.vdouble(
                231.0, 231.0, 231.0, 231.0, 360.0,
                360.0, 360.0, 360.0, 360.0, 360.0,
                360.0, 360.0, 360.0, 360.0, 360.0
            ),
            siPMCode = cms.int32(2),
            simHitToPhotoelectrons = cms.double(4000.0),
            sipmTau = cms.double(5.0),
            syncPhase = cms.bool(True),
            threshold_currentTDC = cms.double(-999.0),
            timePhase = cms.double(5.0),
            timeSmearing = cms.bool(False)
        ),
        hoZecotek = cms.PSet(
            binOfMaximum = cms.int32(5),
            delayQIE = cms.int32(-999),
            doPhotoStatistics = cms.bool(True),
            doSiPMSmearing = cms.bool(False),
            firstRing = cms.int32(1),
            readoutFrameSize = cms.int32(10),
            samplingFactors = cms.vdouble(
                231.0, 231.0, 231.0, 231.0, 360.0,
                360.0, 360.0, 360.0, 360.0, 360.0,
                360.0, 360.0, 360.0, 360.0, 360.0
            ),
            siPMCode = cms.int32(2),
            simHitToPhotoelectrons = cms.double(4000.0),
            sipmTau = cms.double(5.0),
            syncPhase = cms.bool(True),
            threshold_currentTDC = cms.double(-999.0),
            timePhase = cms.double(5.0),
            timeSmearing = cms.bool(False)
        ),
        ignoreGeantTime = cms.bool(False),
        injectTestHits = cms.bool(False),
        injectTestHitsCells = cms.vint32(),
        injectTestHitsEnergy = cms.vdouble(),
        injectTestHitsTime = cms.vdouble(),
        killHE = cms.bool(True),
        makeDigiSimLinks = cms.untracked.bool(False),
        minFCToDelay = cms.double(5.0),
        zdc = cms.PSet(
            binOfMaximum = cms.int32(5),
            delayQIE = cms.int32(-999),
            doPhotoStatistics = cms.bool(True),
            doSiPMSmearing = cms.bool(False),
            photoelectronsToAnalog = cms.double(1.843),
            readoutFrameSize = cms.int32(10),
            samplingFactor = cms.double(1.0),
            simHitToPhotoelectrons = cms.double(6.0),
            sipmTau = cms.double(0.0),
            syncPhase = cms.bool(True),
            threshold_currentTDC = cms.double(-999.0),
            timePhase = cms.double(-4.0)
        )
    ),
    hgceeDigitizer = cms.PSet(
        NoiseGeneration_Method = cms.bool(True),
        accumulatorType = cms.string('HGCDigiProducer'),
        bxTime = cms.double(25),
        digiCfg = cms.PSet(
            cceParams = cms.PSet(
                refToPSet_ = cms.string('HGCAL_cceParams_toUse')
            ),
            chargeCollectionEfficiencies = cms.PSet(
                refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
            ),
            doTimeSamples = cms.bool(False),
            feCfg = cms.PSet(
                adcNbits = cms.uint32(10),
                adcPulse = cms.vdouble(
                    0.0, 0.017, 0.817, 0.163, 0.003,
                    0.0
                ),
                adcSaturation_fC = cms.double(100),
                adcThreshold_fC = cms.double(0.672),
                fwVersion = cms.uint32(2),
                jitterConstant_ns = cms.vdouble(0.02, 0.02, 0.02),
                jitterNoise_ns = cms.vdouble(5.0, 5.0, 5.0),
                pulseAvgT = cms.vdouble(
                    0.0, 23.42298, 13.16733, 6.41062, 5.03946,
                    4.532
                ),
                targetMIPvalue_ADC = cms.uint32(10),
                tdcChargeDrainParameterisation = cms.vdouble(
                    -919.13, 365.36, -14.1, 0.2, -21.85,
                    49.39, 22.21, 0.8, -0.28, 27.14,
                    43.95, 3.89048
                ),
                tdcForToAOnset_fC = cms.vdouble(12.0, 12.0, 12.0),
                tdcNbits = cms.uint32(12),
                tdcOnset_fC = cms.double(60),
                tdcResolutionInPs = cms.double(0.001),
                tdcSaturation_fC = cms.double(10000),
                toaLSB_ns = cms.double(0.0244),
                toaMode = cms.uint32(1)
            ),
            ileakParam = cms.PSet(
                refToPSet_ = cms.string('HGCAL_ileakParam_toUse')
            ),
            keV2fC = cms.double(0.044259),
            noise_fC = cms.PSet(
                refToPSet_ = cms.string('HGCAL_noise_fC')
            ),
            thresholdFollowsMIP = cms.bool(True)
        ),
        digiCollection = cms.string('HGCDigisEE'),
        digitizationType = cms.uint32(0),
        digitizer = cms.string('HGCEEDigitizer'),
        eVPerEleHolePair = cms.double(3.62),
        hitCollection = cms.string('HGCHitsEE'),
        hitsProducer = cms.string('g4SimHits'),
        makeDigiSimLinks = cms.bool(False),
        maxSimHitsAccTime = cms.uint32(100),
        premixStage1 = cms.bool(False),
        premixStage1MaxCharge = cms.double(1000000.0),
        premixStage1MinCharge = cms.double(0),
        tofDelay = cms.double(-9),
        useAllChannels = cms.bool(True),
        verbosity = cms.untracked.uint32(0)
    ),
    hgchebackDigitizer = cms.PSet(
        NoiseGeneration_Method = cms.bool(True),
        accumulatorType = cms.string('HGCDigiProducer'),
        bxTime = cms.double(25),
        digiCfg = cms.PSet(
            algo = cms.uint32(2),
            doTimeSamples = cms.bool(False),
            feCfg = cms.PSet(
                adcNbits = cms.uint32(10),
                adcPulse = cms.vdouble(
                    0.0, 0.017, 0.817, 0.163, 0.003,
                    0.0
                ),
                adcSaturation_fC = cms.double(68.75),
                adcThreshold_fC = cms.double(0.5),
                fwVersion = cms.uint32(2),
                jitterConstant_ns = cms.vdouble(0.02, 0.02, 0.02),
                jitterNoise_ns = cms.vdouble(5.0, 5.0, 5.0),
                pulseAvgT = cms.vdouble(
                    0.0, 23.42298, 13.16733, 6.41062, 5.03946,
                    4.532
                ),
                targetMIPvalue_ADC = cms.uint32(15),
                tdcChargeDrainParameterisation = cms.vdouble(
                    -919.13, 365.36, -14.1, 0.2, -21.85,
                    49.39, 22.21, 0.8, -0.28, 27.14,
                    43.95, 3.89048
                ),
                tdcForToAOnset_fC = cms.vdouble(12.0, 12.0, 12.0),
                tdcNbits = cms.uint32(12),
                tdcOnset_fC = cms.double(55),
                tdcResolutionInPs = cms.double(0.001),
                tdcSaturation_fC = cms.double(1000),
                toaLSB_ns = cms.double(0.0244),
                toaMode = cms.uint32(1)
            ),
            keV2MIP = cms.double(0.0014814814814814814),
            nPEperMIP = cms.double(21.0),
            nTotalPE = cms.double(7500),
            noise = cms.PSet(
                refToPSet_ = cms.string('HGCAL_noise_heback')
            ),
            sdPixels = cms.double(1e-06),
            thresholdFollowsMIP = cms.bool(True)
        ),
        digiCollection = cms.string('HGCDigisHEback'),
        digitizationType = cms.uint32(1),
        digitizer = cms.string('HGCHEbackDigitizer'),
        hitCollection = cms.string('HGCHitsHEback'),
        hitsProducer = cms.string('g4SimHits'),
        makeDigiSimLinks = cms.bool(False),
        maxSimHitsAccTime = cms.uint32(100),
        premixStage1 = cms.bool(False),
        premixStage1MaxCharge = cms.double(1000000.0),
        premixStage1MinCharge = cms.double(0),
        tofDelay = cms.double(-14),
        useAllChannels = cms.bool(True),
        verbosity = cms.untracked.uint32(0)
    ),
    hgchefrontDigitizer = cms.PSet(
        NoiseGeneration_Method = cms.bool(True),
        accumulatorType = cms.string('HGCDigiProducer'),
        bxTime = cms.double(25),
        digiCfg = cms.PSet(
            cceParams = cms.PSet(
                refToPSet_ = cms.string('HGCAL_cceParams_toUse')
            ),
            chargeCollectionEfficiencies = cms.PSet(
                refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
            ),
            doTimeSamples = cms.bool(False),
            feCfg = cms.PSet(
                adcNbits = cms.uint32(10),
                adcPulse = cms.vdouble(
                    0.0, 0.017, 0.817, 0.163, 0.003,
                    0.0
                ),
                adcSaturation_fC = cms.double(100),
                adcThreshold_fC = cms.double(0.672),
                fwVersion = cms.uint32(2),
                jitterConstant_ns = cms.vdouble(0.02, 0.02, 0.02),
                jitterNoise_ns = cms.vdouble(5.0, 5.0, 5.0),
                pulseAvgT = cms.vdouble(
                    0.0, 23.42298, 13.16733, 6.41062, 5.03946,
                    4.532
                ),
                targetMIPvalue_ADC = cms.uint32(10),
                tdcChargeDrainParameterisation = cms.vdouble(
                    -919.13, 365.36, -14.1, 0.2, -21.85,
                    49.39, 22.21, 0.8, -0.28, 27.14,
                    43.95, 3.89048
                ),
                tdcForToAOnset_fC = cms.vdouble(12.0, 12.0, 12.0),
                tdcNbits = cms.uint32(12),
                tdcOnset_fC = cms.double(60),
                tdcResolutionInPs = cms.double(0.001),
                tdcSaturation_fC = cms.double(10000),
                toaLSB_ns = cms.double(0.0244),
                toaMode = cms.uint32(1)
            ),
            ileakParam = cms.PSet(
                refToPSet_ = cms.string('HGCAL_ileakParam_toUse')
            ),
            keV2fC = cms.double(0.044259),
            noise_fC = cms.PSet(
                refToPSet_ = cms.string('HGCAL_noise_fC')
            ),
            thresholdFollowsMIP = cms.bool(True)
        ),
        digiCollection = cms.string('HGCDigisHEfront'),
        digitizationType = cms.uint32(0),
        digitizer = cms.string('HGCHEfrontDigitizer'),
        hitCollection = cms.string('HGCHitsHEfront'),
        hitsProducer = cms.string('g4SimHits'),
        makeDigiSimLinks = cms.bool(False),
        maxSimHitsAccTime = cms.uint32(100),
        premixStage1 = cms.bool(False),
        premixStage1MaxCharge = cms.double(1000000.0),
        premixStage1MinCharge = cms.double(0),
        tofDelay = cms.double(-11),
        useAllChannels = cms.bool(True),
        verbosity = cms.untracked.uint32(0)
    ),
    mergedtruth = cms.PSet(
        HepMCProductLabel = cms.InputTag("generatorSmeared"),
        accumulatorType = cms.string('TrackingTruthAccumulator'),
        allowDifferentSimHitProcesses = cms.bool(False),
        alwaysAddAncestors = cms.bool(True),
        createInitialVertexCollection = cms.bool(True),
        createMergedBremsstrahlung = cms.bool(True),
        createUnmergedCollection = cms.bool(True),
        genParticleCollection = cms.InputTag("genParticles"),
        ignoreTracksOutsideVolume = cms.bool(False),
        maximumPreviousBunchCrossing = cms.uint32(9999),
        maximumSubsequentBunchCrossing = cms.uint32(9999),
        removeDeadModules = cms.bool(False),
        select = cms.PSet(
            chargedOnlyTP = cms.bool(True),
            intimeOnlyTP = cms.bool(False),
            lipTP = cms.double(1000),
            maxRapidityTP = cms.double(5.0),
            minHitTP = cms.int32(0),
            minRapidityTP = cms.double(-5.0),
            pdgIdTP = cms.vint32(),
            ptMaxTP = cms.double(1e+100),
            ptMinTP = cms.double(0.1),
            signalOnlyTP = cms.bool(False),
            stableOnlyTP = cms.bool(False),
            tipTP = cms.double(1000)
        ),
        simHitCollections = cms.PSet(
            muon = cms.VInputTag(cms.InputTag("g4SimHits","MuonDTHits"), cms.InputTag("g4SimHits","MuonCSCHits"), cms.InputTag("g4SimHits","MuonRPCHits"), cms.InputTag("g4SimHits","MuonGEMHits")),
            pixel = cms.VInputTag(cms.InputTag("g4SimHits","TrackerHitsPixelBarrelLowTof"), cms.InputTag("g4SimHits","TrackerHitsPixelBarrelHighTof"), cms.InputTag("g4SimHits","TrackerHitsPixelEndcapLowTof"), cms.InputTag("g4SimHits","TrackerHitsPixelEndcapHighTof")),
            tracker = cms.VInputTag()
        ),
        simTrackCollection = cms.InputTag("g4SimHits"),
        simVertexCollection = cms.InputTag("g4SimHits"),
        vertexDistanceCut = cms.double(0.003),
        volumeRadius = cms.double(120.0),
        volumeZ = cms.double(300.0)
    ),
    pixel = cms.PSet(
        AlgorithmCommon = cms.PSet(
            DeltaProductionCut = cms.double(0.03),
            makeDigiSimLinks = cms.untracked.bool(True)
        ),
        GeometryType = cms.string('idealForDigi'),
        PSPDigitizerAlgorithm = cms.PSet(
            AdcFullScale = cms.int32(255),
            AddInefficiency = cms.bool(False),
            AddNoise = cms.bool(True),
            AddNoisyPixels = cms.bool(True),
            AddThresholdSmearing = cms.bool(False),
            AddXTalk = cms.bool(True),
            Alpha2Order = cms.bool(True),
            BiasRailInefficiencyFlag = cms.int32(1),
            CellsToKill = cms.VPSet(),
            ClusterWidth = cms.double(3),
            DeadModules = cms.VPSet(),
            DeadModules_DB = cms.bool(False),
            EfficiencyFactors_Barrel = cms.vdouble(
                0.999, 0.999, 0.999, 0.999, 0.999,
                0.999, 0.999, 0.999, 0.999, 0.999
            ),
            EfficiencyFactors_Endcap = cms.vdouble(
                0.999, 0.999, 0.999, 0.999, 0.999,
                0.999, 0.999, 0.999, 0.999, 0.999,
                0.999, 0.999, 0.999, 0.999, 0.999,
                0.999
            ),
            ElectronPerAdc = cms.double(135.0),
            HIPThresholdInElectrons_Barrel = cms.double(10000000000.0),
            HIPThresholdInElectrons_Endcap = cms.double(10000000000.0),
            Inefficiency_DB = cms.bool(False),
            InterstripCoupling = cms.double(0.05),
            KillModules = cms.bool(False),
            LorentzAngle_DB = cms.bool(True),
            NoiseInElectrons = cms.double(200),
            Phase2ReadoutMode = cms.int32(0),
            ReadoutNoiseInElec = cms.double(-99.9),
            SigmaCoeff = cms.double(1.8),
            SigmaZero = cms.double(0.00037),
            TanLorentzAnglePerTesla_Barrel = cms.double(0.07),
            TanLorentzAnglePerTesla_Endcap = cms.double(0.07),
            ThresholdInElectrons_Barrel = cms.double(6300.0),
            ThresholdInElectrons_Endcap = cms.double(6300.0),
            ThresholdSmearing_Barrel = cms.double(630.0),
            ThresholdSmearing_Endcap = cms.double(630.0),
            TofLowerCut = cms.double(-12.5),
            TofUpperCut = cms.double(12.5),
            UseReweighting = cms.bool(False)
        ),
        PSSDigitizerAlgorithm = cms.PSet(
            AdcFullScale = cms.int32(255),
            AddInefficiency = cms.bool(False),
            AddNoise = cms.bool(True),
            AddNoisyPixels = cms.bool(True),
            AddThresholdSmearing = cms.bool(False),
            AddXTalk = cms.bool(True),
            Alpha2Order = cms.bool(True),
            CellsToKill = cms.VPSet(),
            ClusterWidth = cms.double(3),
            DeadModules = cms.VPSet(),
            DeadModules_DB = cms.bool(False),
            EfficiencyFactors_Barrel = cms.vdouble(
                0.999, 0.999, 0.999, 0.999, 0.999,
                0.999, 0.999, 0.999, 0.999, 0.999
            ),
            EfficiencyFactors_Endcap = cms.vdouble(
                0.999, 0.999, 0.999, 0.999, 0.999,
                0.999, 0.999, 0.999, 0.999, 0.999,
                0.999, 0.999, 0.999, 0.999, 0.999,
                0.999
            ),
            ElectronPerAdc = cms.double(135.0),
            HIPThresholdInElectrons_Barrel = cms.double(21000.0),
            HIPThresholdInElectrons_Endcap = cms.double(21000.0),
            Inefficiency_DB = cms.bool(False),
            InterstripCoupling = cms.double(0.05),
            KillModules = cms.bool(False),
            LorentzAngle_DB = cms.bool(True),
            NoiseInElectrons = cms.double(1010),
            Phase2ReadoutMode = cms.int32(0),
            ReadoutNoiseInElec = cms.double(-99.9),
            SigmaCoeff = cms.double(1.8),
            SigmaZero = cms.double(0.00037),
            TanLorentzAnglePerTesla_Barrel = cms.double(0.07),
            TanLorentzAnglePerTesla_Endcap = cms.double(0.07),
            ThresholdInElectrons_Barrel = cms.double(4800.0),
            ThresholdInElectrons_Endcap = cms.double(4800.0),
            ThresholdSmearing_Barrel = cms.double(480.0),
            ThresholdSmearing_Endcap = cms.double(480.0),
            TofLowerCut = cms.double(-12.5),
            TofUpperCut = cms.double(12.5),
            UseReweighting = cms.bool(False)
        ),
        Pixel3DDigitizerAlgorithm = cms.PSet(
            AdcFullScale = cms.int32(15),
            AddInefficiency = cms.bool(False),
            AddNoise = cms.bool(False),
            AddNoisyPixels = cms.bool(False),
            AddThresholdSmearing = cms.bool(False),
            AddXTalk = cms.bool(False),
            Alpha2Order = cms.bool(True),
            ApplyTimewalk = cms.bool(False),
            CellsToKill = cms.VPSet(),
            ClusterWidth = cms.double(3),
            DeadModules = cms.VPSet(),
            DeadModules_DB = cms.bool(False),
            EfficiencyFactors_Barrel = cms.vdouble(
                0.999, 0.999, 0.999, 0.999, 0.999,
                0.999, 0.999, 0.999, 0.999, 0.999
            ),
            EfficiencyFactors_Endcap = cms.vdouble(
                0.999, 0.999, 0.999, 0.999, 0.999,
                0.999, 0.999, 0.999, 0.999, 0.999,
                0.999, 0.999, 0.999, 0.999, 0.999,
                0.999
            ),
            ElectronPerAdc = cms.double(1500.0),
            Even_column_interchannelCoupling_next_column = cms.double(0.0),
            Even_row_interchannelCoupling_next_row = cms.double(0.0),
            HIPThresholdInElectrons_Barrel = cms.double(10000000000.0),
            HIPThresholdInElectrons_Endcap = cms.double(10000000000.0),
            Inefficiency_DB = cms.bool(False),
            InterstripCoupling = cms.double(0.0),
            KillModules = cms.bool(False),
            LorentzAngle_DB = cms.bool(True),
            NPColumnGap = cms.double(46.0),
            NPColumnRadius = cms.double(4.0),
            NoiseInElectrons = cms.double(0.0),
            Odd_column_interchannelCoupling_next_column = cms.double(0.0),
            Odd_row_interchannelCoupling_next_row = cms.double(0.2),
            OhmicColumnRadius = cms.double(4.0),
            Phase2ReadoutMode = cms.int32(3),
            ReadoutNoiseInElec = cms.double(-99.9),
            SigmaCoeff = cms.double(1.8),
            SigmaZero = cms.double(0.00037),
            TanLorentzAnglePerTesla_Barrel = cms.double(0.106),
            TanLorentzAnglePerTesla_Endcap = cms.double(0.106),
            ThresholdInElectrons_Barrel = cms.double(1000.0),
            ThresholdInElectrons_Endcap = cms.double(1000.0),
            ThresholdSmearing_Barrel = cms.double(0.0),
            ThresholdSmearing_Endcap = cms.double(0.0),
            TimewalkModel = cms.PSet(
                Curves = cms.VPSet(
                    cms.PSet(
                        charge = cms.vdouble(
                            1000, 1025, 1050, 1100, 1200,
                            1500, 2000, 6000, 10000, 15000,
                            20000, 30000
                        ),
                        delay = cms.vdouble(
                            26.8, 23.73, 21.92, 19.46, 16.52,
                            12.15, 8.88, 3.03, 1.69, 0.95,
                            0.56, 0.19
                        )
                    ),
                    cms.PSet(
                        charge = cms.vdouble(
                            1200, 1225, 1250, 1500, 2000,
                            6000, 10000, 15000, 20000, 30000
                        ),
                        delay = cms.vdouble(
                            26.28, 23.5, 21.79, 14.92, 10.27,
                            3.33, 1.86, 1.07, 0.66, 0.27
                        )
                    ),
                    cms.PSet(
                        charge = cms.vdouble(
                            1500, 1525, 1550, 1600, 2000,
                            6000, 10000, 15000, 20000, 30000
                        ),
                        delay = cms.vdouble(
                            25.36, 23.05, 21.6, 19.56, 12.94,
                            3.79, 2.14, 1.26, 0.81, 0.39
                        )
                    ),
                    cms.PSet(
                        charge = cms.vdouble(
                            3000, 3025, 3050, 3100, 3500,
                            6000, 10000, 15000, 20000, 30000
                        ),
                        delay = cms.vdouble(
                            25.63, 23.63, 22.35, 20.65, 14.92,
                            6.7, 3.68, 2.29, 1.62, 1.02
                        )
                    )
                ),
                ThresholdValues = cms.vdouble(1000, 1200, 1500, 3000)
            ),
            TofLowerCut = cms.double(-5.0),
            TofUpperCut = cms.double(20.0),
            UseReweighting = cms.bool(False)
        ),
        PixelDigitizerAlgorithm = cms.PSet(
            AdcFullScale = cms.int32(15),
            AddInefficiency = cms.bool(False),
            AddNoise = cms.bool(False),
            AddNoisyPixels = cms.bool(False),
            AddThresholdSmearing = cms.bool(False),
            AddXTalk = cms.bool(False),
            Alpha2Order = cms.bool(True),
            ApplyTimewalk = cms.bool(False),
            CellsToKill = cms.VPSet(),
            ClusterWidth = cms.double(3),
            DeadModules = cms.VPSet(),
            DeadModules_DB = cms.bool(False),
            EfficiencyFactors_Barrel = cms.vdouble(
                0.999, 0.999, 0.999, 0.999, 0.999,
                0.999, 0.999, 0.999, 0.999, 0.999
            ),
            EfficiencyFactors_Endcap = cms.vdouble(
                0.999, 0.999, 0.999, 0.999, 0.999,
                0.999, 0.999, 0.999, 0.999, 0.999,
                0.999, 0.999, 0.999, 0.999, 0.999,
                0.999
            ),
            ElectronPerAdc = cms.double(1500.0),
            Even_column_interchannelCoupling_next_column = cms.double(0.0),
            Even_row_interchannelCoupling_next_row = cms.double(0.0),
            HIPThresholdInElectrons_Barrel = cms.double(10000000000.0),
            HIPThresholdInElectrons_Endcap = cms.double(10000000000.0),
            Inefficiency_DB = cms.bool(False),
            InterstripCoupling = cms.double(0.0),
            KillModules = cms.bool(False),
            LorentzAngle_DB = cms.bool(True),
            NoiseInElectrons = cms.double(0.0),
            Odd_column_interchannelCoupling_next_column = cms.double(0.0),
            Odd_row_interchannelCoupling_next_row = cms.double(0.2),
            Phase2ReadoutMode = cms.int32(3),
            ReadoutNoiseInElec = cms.double(-99.9),
            SigmaCoeff = cms.double(0),
            SigmaZero = cms.double(0.00037),
            TanLorentzAnglePerTesla_Barrel = cms.double(0.106),
            TanLorentzAnglePerTesla_Endcap = cms.double(0.106),
            ThresholdInElectrons_Barrel = cms.double(1000.0),
            ThresholdInElectrons_Endcap = cms.double(1000.0),
            ThresholdSmearing_Barrel = cms.double(0.0),
            ThresholdSmearing_Endcap = cms.double(0.0),
            TimewalkModel = cms.PSet(
                Curves = cms.VPSet(
                    cms.PSet(
                        charge = cms.vdouble(
                            1000, 1025, 1050, 1100, 1200,
                            1500, 2000, 6000, 10000, 15000,
                            20000, 30000
                        ),
                        delay = cms.vdouble(
                            26.8, 23.73, 21.92, 19.46, 16.52,
                            12.15, 8.88, 3.03, 1.69, 0.95,
                            0.56, 0.19
                        )
                    ),
                    cms.PSet(
                        charge = cms.vdouble(
                            1200, 1225, 1250, 1500, 2000,
                            6000, 10000, 15000, 20000, 30000
                        ),
                        delay = cms.vdouble(
                            26.28, 23.5, 21.79, 14.92, 10.27,
                            3.33, 1.86, 1.07, 0.66, 0.27
                        )
                    ),
                    cms.PSet(
                        charge = cms.vdouble(
                            1500, 1525, 1550, 1600, 2000,
                            6000, 10000, 15000, 20000, 30000
                        ),
                        delay = cms.vdouble(
                            25.36, 23.05, 21.6, 19.56, 12.94,
                            3.79, 2.14, 1.26, 0.81, 0.39
                        )
                    ),
                    cms.PSet(
                        charge = cms.vdouble(
                            3000, 3025, 3050, 3100, 3500,
                            6000, 10000, 15000, 20000, 30000
                        ),
                        delay = cms.vdouble(
                            25.63, 23.63, 22.35, 20.65, 14.92,
                            6.7, 3.68, 2.29, 1.62, 1.02
                        )
                    )
                ),
                ThresholdValues = cms.vdouble(1000, 1200, 1500, 3000)
            ),
            TofLowerCut = cms.double(-5.0),
            TofUpperCut = cms.double(20.0),
            UseReweighting = cms.bool(False)
        ),
        ROUList = cms.vstring(
            'TrackerHitsPixelBarrelLowTof',
            'TrackerHitsPixelBarrelHighTof',
            'TrackerHitsPixelEndcapLowTof',
            'TrackerHitsPixelEndcapHighTof'
        ),
        SSDigitizerAlgorithm = cms.PSet(
            AdcFullScale = cms.int32(255),
            AddInefficiency = cms.bool(False),
            AddNoise = cms.bool(True),
            AddNoisyPixels = cms.bool(True),
            AddThresholdSmearing = cms.bool(False),
            AddXTalk = cms.bool(True),
            Alpha2Order = cms.bool(True),
            CBCDeadTime = cms.double(0.0),
            CellsToKill = cms.VPSet(),
            ClusterWidth = cms.double(3),
            DeadModules = cms.VPSet(),
            DeadModules_DB = cms.bool(False),
            EfficiencyFactors_Barrel = cms.vdouble(
                0.999, 0.999, 0.999, 0.999, 0.999,
                0.999, 0.999, 0.999, 0.999, 0.999
            ),
            EfficiencyFactors_Endcap = cms.vdouble(
                0.999, 0.999, 0.999, 0.999, 0.999,
                0.999, 0.999, 0.999, 0.999, 0.999,
                0.999, 0.999, 0.999, 0.999, 0.999,
                0.999
            ),
            ElectronPerAdc = cms.double(135.0),
            HIPThresholdInElectrons_Barrel = cms.double(10000000000.0),
            HIPThresholdInElectrons_Endcap = cms.double(10000000000.0),
            HitDetectionMode = cms.int32(0),
            Inefficiency_DB = cms.bool(False),
            InterstripCoupling = cms.double(0.05),
            KillModules = cms.bool(False),
            LorentzAngle_DB = cms.bool(True),
            NoiseInElectrons = cms.double(1263),
            Phase2ReadoutMode = cms.int32(0),
            PulseShapeParameters = cms.vdouble(
                -3.0, 16.043703, 99.999857, 40.57165, 2.0,
                1.2459094
            ),
            ReadoutNoiseInElec = cms.double(-99.9),
            SigmaCoeff = cms.double(1.8),
            SigmaZero = cms.double(0.00037),
            TanLorentzAnglePerTesla_Barrel = cms.double(0.07),
            TanLorentzAnglePerTesla_Endcap = cms.double(0.07),
            ThresholdInElectrons_Barrel = cms.double(6000.0),
            ThresholdInElectrons_Endcap = cms.double(6000.0),
            ThresholdSmearing_Barrel = cms.double(600.0),
            ThresholdSmearing_Endcap = cms.double(600.0),
            TofLowerCut = cms.double(-12.5),
            TofUpperCut = cms.double(12.5),
            UseReweighting = cms.bool(False)
        ),
        accumulatorType = cms.string('Phase2TrackerDigitizer'),
        hitsProducer = cms.string('g4SimHits'),
        isOTreadoutAnalog = cms.bool(False),
        premixStage1 = cms.bool(False),
        usePseudoPixel3DAlgo = cms.bool(False)
    ),
    puVtx = cms.PSet(
        accumulatorType = cms.string('PileupVertexAccumulator'),
        hitsProducer = cms.string('generator'),
        makeDigiSimLinks = cms.untracked.bool(False),
        saveVtxTimes = cms.bool(True),
        vtxFallbackTag = cms.InputTag("generator"),
        vtxTag = cms.InputTag("generatorSmeared")
    )
)

process.theMixObjects = cms.PSet(
    mixCH = cms.PSet(
        crossingFrames = cms.untracked.vstring(),
        input = cms.VInputTag(
            cms.InputTag("g4SimHits","CastorFI"), cms.InputTag("g4SimHits","EcalHitsEB"), cms.InputTag("g4SimHits","EcalHitsEE"), cms.InputTag("g4SimHits","EcalHitsES"), cms.InputTag("g4SimHits","HcalHits"),
            cms.InputTag("g4SimHits","ZDCHITS"), cms.InputTag("g4SimHits","HGCHitsEE"), cms.InputTag("g4SimHits","HGCHitsHEfront"), cms.InputTag("g4SimHits","HGCHitsHEback")
        ),
        subdets = cms.vstring(
            'CastorFI',
            'EcalHitsEB',
            'EcalHitsEE',
            'EcalHitsES',
            'HcalHits',
            'ZDCHITS',
            'HGCHitsEE',
            'HGCHitsHEfront',
            'HGCHitsHEback'
        ),
        type = cms.string('PCaloHit')
    ),
    mixHepMC = cms.PSet(
        input = cms.VInputTag(cms.InputTag("generatorSmeared"), cms.InputTag("generator")),
        makeCrossingFrame = cms.untracked.bool(True),
        type = cms.string('HepMCProduct')
    ),
    mixSH = cms.PSet(
        crossingFrames = cms.untracked.vstring(
            'MuonCSCHits',
            'MuonDTHits',
            'MuonRPCHits',
            'MuonGEMHits',
            'FastTimerHitsBarrel',
            'FastTimerHitsEndcap'
        ),
        input = cms.VInputTag(
            cms.InputTag("g4SimHits","MuonCSCHits"), cms.InputTag("g4SimHits","MuonDTHits"), cms.InputTag("g4SimHits","MuonRPCHits"), cms.InputTag("g4SimHits","TrackerHitsPixelBarrelHighTof"), cms.InputTag("g4SimHits","TrackerHitsPixelBarrelLowTof"),
            cms.InputTag("g4SimHits","TrackerHitsPixelEndcapHighTof"), cms.InputTag("g4SimHits","TrackerHitsPixelEndcapLowTof"), cms.InputTag("g4SimHits","TrackerHitsTECHighTof"), cms.InputTag("g4SimHits","TrackerHitsTECLowTof"), cms.InputTag("g4SimHits","TrackerHitsTIBHighTof"),
            cms.InputTag("g4SimHits","TrackerHitsTIBLowTof"), cms.InputTag("g4SimHits","TrackerHitsTIDHighTof"), cms.InputTag("g4SimHits","TrackerHitsTIDLowTof"), cms.InputTag("g4SimHits","TrackerHitsTOBHighTof"), cms.InputTag("g4SimHits","TrackerHitsTOBLowTof"),
            cms.InputTag("g4SimHits","MuonGEMHits"), cms.InputTag("g4SimHits","FastTimerHitsBarrel"), cms.InputTag("g4SimHits","FastTimerHitsEndcap")
        ),
        pcrossingFrames = cms.untracked.vstring(),
        subdets = cms.vstring(
            'MuonCSCHits',
            'MuonDTHits',
            'MuonRPCHits',
            'TrackerHitsPixelBarrelHighTof',
            'TrackerHitsPixelBarrelLowTof',
            'TrackerHitsPixelEndcapHighTof',
            'TrackerHitsPixelEndcapLowTof',
            'TrackerHitsTECHighTof',
            'TrackerHitsTECLowTof',
            'TrackerHitsTIBHighTof',
            'TrackerHitsTIBLowTof',
            'TrackerHitsTIDHighTof',
            'TrackerHitsTIDLowTof',
            'TrackerHitsTOBHighTof',
            'TrackerHitsTOBLowTof',
            'MuonGEMHits',
            'FastTimerHitsBarrel',
            'FastTimerHitsEndcap'
        ),
        type = cms.string('PSimHit')
    ),
    mixTracks = cms.PSet(
        input = cms.VInputTag(cms.InputTag("g4SimHits")),
        makeCrossingFrame = cms.untracked.bool(False),
        type = cms.string('SimTrack')
    ),
    mixVertices = cms.PSet(
        input = cms.VInputTag(cms.InputTag("g4SimHits")),
        makeCrossingFrame = cms.untracked.bool(False),
        type = cms.string('SimVertex')
    )
)

process.threshold_conc_proc = cms.PSet(
    Method = cms.vstring(
        'thresholdSelect',
        'thresholdSelect',
        'thresholdSelect'
    ),
    ProcessorName = cms.string('HGCalConcentratorProcessorSelection'),
    allTrigCellsInTrigSums = cms.bool(True),
    coarsenTriggerCells = cms.vuint32(0, 0, 0),
    ctcSize = cms.vuint32(
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2, 2, 2, 2,
        2, 2
    ),
    fixedDataSizePerHGCROC = cms.bool(False),
    threshold_scintillator = cms.double(1.35),
    threshold_silicon = cms.double(1.35)
)

process.tkEgAlgoParameters = cms.PSet(
    absEtaBoundaries = cms.vdouble(0.0, 0.9, 1.5),
    caloEtMin = cms.double(0.0),
    caloHwQual = cms.int32(4),
    compositeParametersTkEle = cms.PSet(
        loose_wp = cms.double(-0.181641),
        model = cms.string('L1Trigger/Phase2L1ParticleFlow/data/compositeID.json'),
        tight_wp = cms.double(0.0527344)
    ),
    dEtaMaxBrem = cms.double(0.02),
    dEtaValues = cms.vdouble(0.025, 0.015, 0.01),
    dPhiMaxBrem = cms.double(0.1),
    dPhiValues = cms.vdouble(0.07, 0.07, 0.07),
    doBremRecovery = cms.bool(False),
    doCompositeTkEle = cms.bool(False),
    doEndcapHwQual = cms.bool(False),
    doPfIso = cms.bool(True),
    doTkIso = cms.bool(True),
    filterHwQuality = cms.bool(False),
    hwIsoTypeTkEle = cms.uint32(0),
    hwIsoTypeTkEm = cms.uint32(0),
    nCompCandPerCluster = cms.uint32(3),
    nEMCALO_EGIN = cms.uint32(50),
    nEM_EGOUT = cms.uint32(50),
    nTRACK = cms.uint32(50),
    nTRACK_EGIN = cms.uint32(50),
    pfIsoParametersTkEle = cms.PSet(
        dRMax = cms.double(0.2),
        dRMin = cms.double(0.03),
        dZ = cms.double(0.6),
        tkQualityPtMin = cms.double(1.0)
    ),
    pfIsoParametersTkEm = cms.PSet(
        dRMax = cms.double(0.3),
        dRMin = cms.double(0.07),
        dZ = cms.double(0.6),
        tkQualityPtMin = cms.double(1.0)
    ),
    tkIsoParametersTkEle = cms.PSet(
        dRMax = cms.double(0.2),
        dRMin = cms.double(0.03),
        dZ = cms.double(0.6),
        tkQualityPtMin = cms.double(2.0)
    ),
    tkIsoParametersTkEm = cms.PSet(
        dRMax = cms.double(0.3),
        dRMin = cms.double(0.07),
        dZ = cms.double(0.6),
        tkQualityPtMin = cms.double(2.0)
    ),
    trkQualityPtMin = cms.double(10.0),
    writeBeforeBremRecovery = cms.bool(True),
    writeEGSta = cms.bool(False)
)

process.tkEgSorterParameters = cms.PSet(
    nObjSorted = cms.uint32(16),
    nObjToSort = cms.uint32(6)
)

process.tobTecStepInOutTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(0),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.1),
    minimumNumberOfHits = cms.int32(4),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(1),
    strictSeedExtension = cms.bool(False)
)

process.tobTecStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(0),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.1),
    minimumNumberOfHits = cms.int32(5),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(1),
    strictSeedExtension = cms.bool(False)
)

process.topological_C2d_params = cms.PSet(
    applyLayerCalibration = cms.bool(False),
    calibSF_cluster = cms.double(1.0),
    clusterType = cms.string('NNC2d'),
    clustering_threshold_scintillator = cms.double(1.5),
    clustering_threshold_silicon = cms.double(1.5),
    layerWeights = cms.vdouble(
        0.0, 0.0183664, 0.0, 0.0305622, 0.0,
        0.0162589, 0.0, 0.0143918, 0.0, 0.0134475,
        0.0, 0.0185754, 0.0, 0.0204934, 0.0,
        0.016901, 0.0, 0.0207958, 0.0, 0.0167985,
        0.0, 0.0238385, 0.0, 0.0301146, 0.0,
        0.0274622, 0.0, 0.0468671, 0.0, 0.078819,
        0.0555831, 0.0609312, 0.0610768, 0.0657626, 0.0465653,
        0.0629383, 0.0610061, 0.0517326, 0.0492882, 0.0699336,
        0.0673457, 0.119896, 0.125327, 0.143235, 0.153295,
        0.104777, 0.109345, 0.161386, 0.174656, 0.108053,
        0.121674, 0.1171, 0.328053
    ),
    seeding_threshold_scintillator = cms.double(3.75),
    seeding_threshold_silicon = cms.double(3.75)
)

process.tower = cms.PSet(
    ProcessorName = cms.string('HGCalTowerProcessor'),
    includeTrigCells = cms.bool(False),
    towermap_parameters = cms.PSet(
        AlgoName = cms.string('HGCalTowerMapsWrapper'),
        L1TTriggerTowerConfig = cms.PSet(
            binsEta = cms.vdouble(),
            binsPhi = cms.vdouble(),
            doNose = cms.bool(False),
            maxEta = cms.double(3.0),
            maxPhi = cms.double(3.141592653589793),
            minEta = cms.double(1.479),
            minPhi = cms.double(-3.141592653589793),
            nBinsEta = cms.int32(18),
            nBinsPhi = cms.int32(72),
            readMappingFile = cms.bool(False),
            splitModuleSum = cms.bool(False)
        ),
        layerWeights = cms.vdouble(),
        useLayerWeights = cms.bool(False)
    )
)

process.towerHFNose = cms.PSet(
    ProcessorName = cms.string('HGCalTowerProcessor'),
    includeTrigCells = cms.bool(False),
    towermap_parameters = cms.PSet(
        AlgoName = cms.string('HGCalTowerMapsWrapper'),
        L1TTriggerTowerConfig = cms.PSet(
            binsEta = cms.vdouble(),
            binsPhi = cms.vdouble(),
            doNose = cms.bool(True),
            maxEta = cms.double(4.2),
            maxPhi = cms.double(3.141592653589793),
            minEta = cms.double(3.0),
            minPhi = cms.double(-3.141592653589793),
            nBinsEta = cms.int32(18),
            nBinsPhi = cms.int32(72),
            readMappingFile = cms.bool(False),
            splitModuleSum = cms.bool(False)
        ),
        layerWeights = cms.vdouble(),
        useLayerWeights = cms.bool(False)
    )
)

process.towerHFNose_map = cms.PSet(
    ProcessorName = cms.string('HGCalTowerMapProcessor'),
    towermap_parameters = cms.PSet(
        AlgoName = cms.string('HGCalTowerMapsWrapper'),
        L1TTriggerTowerConfig = cms.PSet(
            binsEta = cms.vdouble(),
            binsPhi = cms.vdouble(),
            doNose = cms.bool(True),
            maxEta = cms.double(4.2),
            maxPhi = cms.double(3.141592653589793),
            minEta = cms.double(3.0),
            minPhi = cms.double(-3.141592653589793),
            nBinsEta = cms.int32(18),
            nBinsPhi = cms.int32(72),
            readMappingFile = cms.bool(False),
            splitModuleSum = cms.bool(False)
        ),
        layerWeights = cms.vdouble(),
        useLayerWeights = cms.bool(False)
    )
)

process.towerMap2DHFNose_parValues = cms.PSet(
    AlgoName = cms.string('HGCalTowerMapsWrapper'),
    L1TTriggerTowerConfig = cms.PSet(
        binsEta = cms.vdouble(),
        binsPhi = cms.vdouble(),
        doNose = cms.bool(True),
        maxEta = cms.double(4.2),
        maxPhi = cms.double(3.141592653589793),
        minEta = cms.double(3.0),
        minPhi = cms.double(-3.141592653589793),
        nBinsEta = cms.int32(18),
        nBinsPhi = cms.int32(72),
        readMappingFile = cms.bool(False),
        splitModuleSum = cms.bool(False)
    ),
    layerWeights = cms.vdouble(),
    useLayerWeights = cms.bool(False)
)

process.towerMap2D_parValues = cms.PSet(
    AlgoName = cms.string('HGCalTowerMapsWrapper'),
    L1TTriggerTowerConfig = cms.PSet(
        binsEta = cms.vdouble(),
        binsPhi = cms.vdouble(),
        doNose = cms.bool(False),
        maxEta = cms.double(3.0),
        maxPhi = cms.double(3.141592653589793),
        minEta = cms.double(1.479),
        minPhi = cms.double(-3.141592653589793),
        nBinsEta = cms.int32(18),
        nBinsPhi = cms.int32(72),
        readMappingFile = cms.bool(False),
        splitModuleSum = cms.bool(False)
    ),
    layerWeights = cms.vdouble(),
    useLayerWeights = cms.bool(False)
)

process.tower_map = cms.PSet(
    ProcessorName = cms.string('HGCalTowerMapProcessor'),
    towermap_parameters = cms.PSet(
        AlgoName = cms.string('HGCalTowerMapsWrapper'),
        L1TTriggerTowerConfig = cms.PSet(
            binsEta = cms.vdouble(),
            binsPhi = cms.vdouble(),
            doNose = cms.bool(False),
            maxEta = cms.double(3.0),
            maxPhi = cms.double(3.141592653589793),
            minEta = cms.double(1.479),
            minPhi = cms.double(-3.141592653589793),
            nBinsEta = cms.int32(18),
            nBinsPhi = cms.int32(72),
            readMappingFile = cms.bool(False),
            splitModuleSum = cms.bool(False)
        ),
        layerWeights = cms.vdouble(),
        useLayerWeights = cms.bool(False)
    )
)

process.tpScales = cms.PSet(
    HBHE = cms.PSet(
        LSBQIE11 = cms.double(0.0625),
        LSBQIE11Overlap = cms.double(0.0625),
        LSBQIE8 = cms.double(0.125)
    ),
    HF = cms.PSet(
        NCTShift = cms.int32(2),
        RCTShift = cms.int32(3)
    )
)

process.trackingParticles = cms.PSet(
    HepMCProductLabel = cms.InputTag("generatorSmeared"),
    accumulatorType = cms.string('TrackingTruthAccumulator'),
    allowDifferentSimHitProcesses = cms.bool(False),
    alwaysAddAncestors = cms.bool(True),
    createInitialVertexCollection = cms.bool(False),
    createMergedBremsstrahlung = cms.bool(True),
    createUnmergedCollection = cms.bool(True),
    genParticleCollection = cms.InputTag("genParticles"),
    ignoreTracksOutsideVolume = cms.bool(False),
    maximumPreviousBunchCrossing = cms.uint32(9999),
    maximumSubsequentBunchCrossing = cms.uint32(9999),
    removeDeadModules = cms.bool(False),
    select = cms.PSet(
        chargedOnlyTP = cms.bool(True),
        intimeOnlyTP = cms.bool(False),
        lipTP = cms.double(1000),
        maxRapidityTP = cms.double(5.0),
        minHitTP = cms.int32(0),
        minRapidityTP = cms.double(-5.0),
        pdgIdTP = cms.vint32(),
        ptMaxTP = cms.double(1e+100),
        ptMinTP = cms.double(0.1),
        signalOnlyTP = cms.bool(False),
        stableOnlyTP = cms.bool(False),
        tipTP = cms.double(1000)
    ),
    simHitCollections = cms.PSet(
        muon = cms.VInputTag(cms.InputTag("g4SimHits","MuonDTHits"), cms.InputTag("g4SimHits","MuonCSCHits"), cms.InputTag("g4SimHits","MuonRPCHits"), cms.InputTag("g4SimHits","MuonGEMHits")),
        pixel = cms.VInputTag(cms.InputTag("g4SimHits","TrackerHitsPixelBarrelLowTof"), cms.InputTag("g4SimHits","TrackerHitsPixelBarrelHighTof"), cms.InputTag("g4SimHits","TrackerHitsPixelEndcapLowTof"), cms.InputTag("g4SimHits","TrackerHitsPixelEndcapHighTof")),
        tracker = cms.VInputTag()
    ),
    simTrackCollection = cms.InputTag("g4SimHits"),
    simVertexCollection = cms.InputTag("g4SimHits"),
    vertexDistanceCut = cms.double(0.003),
    volumeRadius = cms.double(120.0),
    volumeZ = cms.double(300.0)
)

process.trackingParticlesSelection = cms.PSet(
    chargedOnlyTP = cms.bool(True),
    intimeOnlyTP = cms.bool(False),
    lipTP = cms.double(1000),
    maxRapidityTP = cms.double(5.0),
    minHitTP = cms.int32(0),
    minRapidityTP = cms.double(-5.0),
    pdgIdTP = cms.vint32(),
    ptMaxTP = cms.double(1e+100),
    ptMinTP = cms.double(0.1),
    signalOnlyTP = cms.bool(False),
    stableOnlyTP = cms.bool(False),
    tipTP = cms.double(1000)
)

process.truncation_params = cms.PSet(
    doTruncation = cms.bool(True),
    maxTcsPerBin = cms.vuint32(
        2, 7, 27, 24, 19,
        17, 16, 15, 14, 14,
        13, 13, 13, 12, 12,
        12, 11, 11, 11, 10,
        10, 10, 10, 10, 9,
        9, 10, 9, 9, 9,
        8, 8, 7, 5, 3,
        3, 3, 3, 3, 3,
        3, 3
    ),
    phiSectorEdges = cms.vdouble(
        0.98901991, 0.72722052, 0.6981317, 0.87266463, 0.93084227,
        0.90175345, 0.87266463, 0.90175345, 0.95993109, 0.95993109,
        0.93084227, 0.93084227, 0.95993109, 0.98901991, 0.95993109,
        0.95993109, 0.95993109, 0.98901991, 0.98901991, 0.95993109,
        0.95993109, 0.98901991, 0.98901991, 0.98901991, 0.98901991,
        0.98901991, 1.01810873, 0.98901991, 0.98901991, 0.98901991,
        0.98901991, 0.98901991, 0.98901991, 0.98901991, 1.04719755,
        1.04719755, 1.04719755, 1.04719755, 1.01810873, 1.04719755,
        1.01810873, 1.01810873
    ),
    rozBins = cms.uint32(42),
    rozMax = cms.double(0.55508006),
    rozMin = cms.double(0.07587128)
)

process.truncation_paramsSA = cms.PSet(
    AlgoName = cms.string('HGCalStage1TruncationWrapper'),
    doTruncation = cms.bool(True),
    maxTcsPerBin = cms.vuint32(
        2, 7, 27, 24, 19,
        17, 16, 15, 14, 14,
        13, 13, 13, 12, 12,
        12, 11, 11, 11, 10,
        10, 10, 10, 10, 9,
        9, 10, 9, 9, 9,
        8, 8, 7, 5, 3,
        3, 3, 3, 3, 3,
        3, 3
    ),
    phiSectorEdges = cms.vdouble(
        0.98901991, 0.72722052, 0.6981317, 0.87266463, 0.93084227,
        0.90175345, 0.87266463, 0.90175345, 0.95993109, 0.95993109,
        0.93084227, 0.93084227, 0.95993109, 0.98901991, 0.95993109,
        0.95993109, 0.95993109, 0.98901991, 0.98901991, 0.95993109,
        0.95993109, 0.98901991, 0.98901991, 0.98901991, 0.98901991,
        0.98901991, 1.01810873, 0.98901991, 0.98901991, 0.98901991,
        0.98901991, 0.98901991, 0.98901991, 0.98901991, 1.04719755,
        1.04719755, 1.04719755, 1.04719755, 1.01810873, 1.04719755,
        1.01810873, 1.01810873
    ),
    rozBins = cms.uint32(42),
    rozMax = cms.double(0.55508006),
    rozMin = cms.double(0.07587128)
)

process.vfe_proc = cms.PSet(
    ProcessorName = cms.string('HGCalVFEProcessorSums'),
    calibrationCfg_ee = cms.PSet(
        chargeCollectionEfficiency = cms.PSet(
            refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
        ),
        dEdXweights = cms.vdouble(
            0, 9.205, 0, 22.259999999999998, 0,
            22.259999999999998, 0, 22.259999999999998, 0, 22.259999999999998,
            0, 22.259999999999998, 0, 22.259999999999998, 0,
            22.259999999999998, 0, 22.259999999999998, 0, 26.4,
            0, 26.4, 0, 26.4, 0,
            26.4, 0, 95.41000000000001, 60.7, 60.7,
            60.7, 60.7, 60.7, 60.7, 60.7,
            60.7, 60.7, 71.89, 83.08, 83.255,
            83.52000000000001, 83.61, 83.61, 83.61, 83.61,
            83.61, 83.61, 83.61
        ),
        fCperMIP = cms.vdouble(2.06, 3.43, 5.15),
        lsb = cms.double(0.09765625),
        thicknessCorrection = cms.vdouble(0.75, 0.76, 0.75)
    ),
    calibrationCfg_hesc = cms.PSet(
        chargeCollectionEfficiency = cms.PSet(
            values = cms.vdouble(1.0)
        ),
        dEdXweights = cms.vdouble(
            0, 9.205, 0, 22.259999999999998, 0,
            22.259999999999998, 0, 22.259999999999998, 0, 22.259999999999998,
            0, 22.259999999999998, 0, 22.259999999999998, 0,
            22.259999999999998, 0, 22.259999999999998, 0, 26.4,
            0, 26.4, 0, 26.4, 0,
            26.4, 0, 95.41000000000001, 60.7, 60.7,
            60.7, 60.7, 60.7, 60.7, 60.7,
            60.7, 60.7, 71.89, 83.08, 83.255,
            83.52000000000001, 83.61, 83.61, 83.61, 83.61,
            83.61, 83.61, 83.61
        ),
        fCperMIP = cms.vdouble(1.0),
        lsb = cms.double(0.067138671875),
        thicknessCorrection = cms.vdouble(0.69)
    ),
    calibrationCfg_hesi = cms.PSet(
        chargeCollectionEfficiency = cms.PSet(
            refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
        ),
        dEdXweights = cms.vdouble(
            0, 9.205, 0, 22.259999999999998, 0,
            22.259999999999998, 0, 22.259999999999998, 0, 22.259999999999998,
            0, 22.259999999999998, 0, 22.259999999999998, 0,
            22.259999999999998, 0, 22.259999999999998, 0, 26.4,
            0, 26.4, 0, 26.4, 0,
            26.4, 0, 95.41000000000001, 60.7, 60.7,
            60.7, 60.7, 60.7, 60.7, 60.7,
            60.7, 60.7, 71.89, 83.08, 83.255,
            83.52000000000001, 83.61, 83.61, 83.61, 83.61,
            83.61, 83.61, 83.61
        ),
        fCperMIP = cms.vdouble(2.06, 3.43, 5.15),
        lsb = cms.double(0.09765625),
        thicknessCorrection = cms.vdouble(0.85, 0.85, 0.84)
    ),
    calibrationCfg_nose = cms.PSet(
        chargeCollectionEfficiency = cms.PSet(
            refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
        ),
        dEdXweights = cms.vdouble(
            0.0, 39.500245, 39.756638, 39.756638, 39.756638,
            39.756638, 66.020266, 92.283895, 92.283895
        ),
        fCperMIP = cms.vdouble(1.25, 2.57, 3.88),
        lsb = cms.double(0.09765625),
        thicknessCorrection = cms.vdouble(1.132, 1.092, 1.084)
    ),
    compressionCfg_hdm = cms.PSet(
        exponentBits = cms.uint32(4),
        mantissaBits = cms.uint32(3),
        rounding = cms.bool(True),
        truncationBits = cms.uint32(3)
    ),
    compressionCfg_ldm = cms.PSet(
        exponentBits = cms.uint32(4),
        mantissaBits = cms.uint32(3),
        rounding = cms.bool(True),
        truncationBits = cms.uint32(1)
    ),
    linearizationCfg_sc = cms.PSet(
        adcnBits = cms.uint32(10),
        adcsaturation = cms.double(68.75),
        linLSB = cms.double(0.067138671875),
        linnBits = cms.uint32(17),
        oot_coefficients = cms.vdouble(0.0, 0.0),
        tdcOnset = cms.double(55),
        tdcnBits = cms.uint32(12),
        tdcsaturation = cms.double(1000)
    ),
    linearizationCfg_si = cms.PSet(
        adcnBits = cms.uint32(10),
        adcsaturation = cms.double(100),
        linLSB = cms.double(0.09765625),
        linnBits = cms.uint32(17),
        oot_coefficients = cms.vdouble(0.0, 0.0),
        tdcOnset = cms.double(60),
        tdcnBits = cms.uint32(12),
        tdcsaturation = cms.double(10000)
    ),
    summationCfg = cms.PSet(
        noiseScintillator = cms.PSet(
            refToPSet_ = cms.string('HGCAL_noise_heback')
        ),
        noiseSilicon = cms.PSet(
            refToPSet_ = cms.string('HGCAL_noise_fC')
        ),
        noiseThreshold = cms.double(3),
        scintillatorCellLSB_MIP = cms.double(0.067138671875),
        siliconCellLSB_fC = cms.double(0.09765625)
    )
)

process.algorithms = cms.VPSet(
    cms.PSet(
        expression = cms.string('pSingleTkMuon22')
    ),
    cms.PSet(
        expression = cms.string('pDoubleTkMuon15_7')
    ),
    cms.PSet(
        expression = cms.string('pTripleTkMuon5_3_3')
    ),
    cms.PSet(
        expression = cms.string('pSingleEGEle51')
    ),
    cms.PSet(
        expression = cms.string('pDoubleEGEle37_24')
    ),
    cms.PSet(
        expression = cms.string('pIsoTkEleEGEle22_12')
    ),
    cms.PSet(
        expression = cms.string('pSingleTkEle36')
    ),
    cms.PSet(
        expression = cms.string('pSingleIsoTkEle28')
    ),
    cms.PSet(
        expression = cms.string('pSingleIsoTkPho36')
    ),
    cms.PSet(
        expression = cms.string('pDoubleTkEle25_12')
    ),
    cms.PSet(
        expression = cms.string('pDoubleIsoTkPho22_12')
    ),
    cms.PSet(
        expression = cms.string('pDoublePuppiTau52_52')
    ),
    cms.PSet(
        expression = cms.string('pSinglePuppiJet230')
    ),
    cms.PSet(
        expression = cms.string('pDoublePuppiJet112_112')
    ),
    cms.PSet(
        expression = cms.string('pDoublePuppiJet160_35_mass620')
    ),
    cms.PSet(
        expression = cms.string('pPuppiHT450')
    ),
    cms.PSet(
        expression = cms.string('pPuppiMHT140')
    ),
    cms.PSet(
        expression = cms.string('pPuppiMET200')
    ),
    cms.PSet(
        expression = cms.string('pPuppiHT400 and pQuadJet70_55_40_40'),
        name = cms.string('pPuppiHT400_pQuadJet70_55_40_40')
    ),
    cms.PSet(
        expression = cms.string('pTkMuonTkIsoEle7_20')
    ),
    cms.PSet(
        expression = cms.string('pTkMuonTkEle7_23')
    ),
    cms.PSet(
        expression = cms.string('pTkEleTkMuon10_20')
    ),
    cms.PSet(
        expression = cms.string('pTkMuonDoubleTkEle6_17_17')
    ),
    cms.PSet(
        expression = cms.string('pDoubleTkMuonTkEle5_5_9')
    ),
    cms.PSet(
        expression = cms.string('pPuppiTauTkMuon42_18')
    ),
    cms.PSet(
        expression = cms.string('pPuppiTauTkIsoEle45_22')
    ),
    cms.PSet(
        expression = cms.string('pTkMuonPuppiHT6_320')
    ),
    cms.PSet(
        expression = cms.string('pTkMuTriPuppiJet_12_40_dRMax_DoubleJet_dEtaMax')
    ),
    cms.PSet(
        expression = cms.string('pTkMuPuppiJetPuppiMet_3_110_120')
    ),
    cms.PSet(
        expression = cms.string('pDoubleTkMuPuppiJetPuppiMet_3_3_60_130')
    ),
    cms.PSet(
        expression = cms.string('pDoubleTkMuPuppiHT_3_3_300')
    ),
    cms.PSet(
        expression = cms.string('pDoubleTkElePuppiHT_8_8_390')
    ),
    cms.PSet(
        expression = cms.string('pTkEleIsoPuppiHT_26_190')
    ),
    cms.PSet(
        expression = cms.string('pTkElePuppiJet_28_40_MinDR')
    ),
    cms.PSet(
        expression = cms.string('pNNPuppiTauPuppiMet_55_190')
    ),
    cms.PSet(
        expression = cms.string('pDoubleTkMuon_OS_Er1p5_Dr1p4')
    ),
    cms.PSet(
        expression = cms.string('pDoubleTkMuon_4_4_OS_Dr1p2')
    ),
    cms.PSet(
        expression = cms.string('pDoubleTkMuon_4p5_4p5_OS_Er2_Mass7to18')
    ),
    cms.PSet(
        expression = cms.string('TripleTkMuon_5_3_0_DoubleTkMuon_5_3_OS_MassTo9')
    ),
    cms.PSet(
        expression = cms.string('TripleTkMuon_5_3p5_2p5_OS_Mass5to17')
    )
)

process.energy_interpretations = cms.VPSet(cms.PSet(
    dr_bylayer = cms.vdouble(
        0.015, 0.015, 0.015, 0.015, 0.015,
        0.015, 0.015, 0.015, 0.015, 0.015,
        0.015, 0.015, 0.015, 0.015, 0.015
    ),
    layer_containment_corrs = cms.vdouble(
        0.0, 0.0, 1.28, 1.09, 1.0,
        1.07, 1.09, 1.04, 1.0, 1.09,
        1.07, 1.03, 0.93, 1.4, 1.89
    ),
    scale_correction_coeff = cms.vdouble(52.99, -24.96),
    type = cms.string('HGCalTriggerClusterInterpretationEM')
))

process.AhltIter0Phase2L3FromL1TkMuonTrackSelectionHighPurity = cms.EDProducer("MuonAssociatorEDProducer",
    AbsoluteNumberOfHits_muon = cms.bool(False),
    AbsoluteNumberOfHits_track = cms.bool(False),
    CSClinksTag = cms.InputTag("simMuonCSCDigis","MuonCSCStripDigiSimLinks"),
    CSCsimHitsTag = cms.InputTag("g4SimHits","MuonCSCHits"),
    CSCsimHitsXFTag = cms.InputTag("mix","g4SimHitsMuonCSCHits"),
    CSCwireLinksTag = cms.InputTag("simMuonCSCDigis","MuonCSCWireDigiSimLinks"),
    DTdigiTag = cms.InputTag("simMuonDTDigis"),
    DTdigisimlinkTag = cms.InputTag("simMuonDTDigis"),
    DTrechitTag = cms.InputTag("hltDt1DRecHits"),
    DTsimhitsTag = cms.InputTag("g4SimHits","MuonDTHits"),
    DTsimhitsXFTag = cms.InputTag("mix","g4SimHitsMuonDTHits"),
    EfficiencyCut_muon = cms.double(0.0),
    EfficiencyCut_track = cms.double(0.0),
    GEMdigisimlinkTag = cms.InputTag("simMuonGEMDigis","GEM"),
    GEMsimhitsTag = cms.InputTag("g4SimHits","MuonGEMHits"),
    GEMsimhitsXFTag = cms.InputTag("mix","g4SimHitsMuonGEMHits"),
    NHitCut_muon = cms.uint32(0),
    NHitCut_track = cms.uint32(0),
    PurityCut_muon = cms.double(0.75),
    PurityCut_track = cms.double(0.75),
    ROUList = cms.vstring(
        'TrackerHitsTIBLowTof',
        'TrackerHitsTIBHighTof',
        'TrackerHitsTIDLowTof',
        'TrackerHitsTIDHighTof',
        'TrackerHitsTOBLowTof',
        'TrackerHitsTOBHighTof',
        'TrackerHitsTECLowTof',
        'TrackerHitsTECHighTof',
        'TrackerHitsPixelBarrelLowTof',
        'TrackerHitsPixelBarrelHighTof',
        'TrackerHitsPixelEndcapLowTof',
        'TrackerHitsPixelEndcapHighTof'
    ),
    RPCdigisimlinkTag = cms.InputTag("simMuonRPCDigis","RPCDigiSimLink"),
    RPCsimhitsTag = cms.InputTag("g4SimHits","MuonRPCHits"),
    RPCsimhitsXFTag = cms.InputTag("mix","g4SimHitsMuonRPCHits"),
    ThreeHitTracksAreSpecial = cms.bool(False),
    UseGrouped = cms.bool(True),
    UseMuon = cms.bool(True),
    UsePixels = cms.bool(True),
    UseSplitting = cms.bool(True),
    UseTracker = cms.bool(True),
    acceptOneStubMatchings = cms.bool(False),
    associatePixel = cms.bool(True),
    associateRecoTracks = cms.bool(True),
    associateStrip = cms.bool(True),
    associatorByWire = cms.bool(False),
    crossingframe = cms.bool(False),
    dumpDT = cms.bool(False),
    dumpInputCollections = cms.untracked.bool(False),
    ignoreMissingTrackCollection = cms.untracked.bool(True),
    includeZeroHitMuons = cms.bool(True),
    inputCSCSegmentCollection = cms.InputTag("cscSegments"),
    inputDTRecSegment4DCollection = cms.InputTag("dt4DSegments"),
    links_exist = cms.bool(True),
    phase2TrackerSimLinkSrc = cms.InputTag("simSiPixelDigis","Tracker"),
    pixelSimLinkSrc = cms.InputTag("simSiPixelDigis","Pixel"),
    rejectBadGlobal = cms.bool(True),
    simtracksTag = cms.InputTag("g4SimHits"),
    simtracksXFTag = cms.InputTag("mix","g4SimHits"),
    stripSimLinkSrc = cms.InputTag("simSiStripDigis"),
    tpRefVector = cms.bool(False),
    tpTag = cms.InputTag("mix","MergedTrackTruth"),
    tracksTag = cms.InputTag("hltIter0Phase2L3FromL1TkMuonTrackSelectionHighPurity"),
    useGEMs = cms.bool(True),
    usePhase2Tracker = cms.bool(True)
)


process.AhltIter2Phase2L3FromL1TkMuonMerged = cms.EDProducer("MuonAssociatorEDProducer",
    AbsoluteNumberOfHits_muon = cms.bool(False),
    AbsoluteNumberOfHits_track = cms.bool(False),
    CSClinksTag = cms.InputTag("simMuonCSCDigis","MuonCSCStripDigiSimLinks"),
    CSCsimHitsTag = cms.InputTag("g4SimHits","MuonCSCHits"),
    CSCsimHitsXFTag = cms.InputTag("mix","g4SimHitsMuonCSCHits"),
    CSCwireLinksTag = cms.InputTag("simMuonCSCDigis","MuonCSCWireDigiSimLinks"),
    DTdigiTag = cms.InputTag("simMuonDTDigis"),
    DTdigisimlinkTag = cms.InputTag("simMuonDTDigis"),
    DTrechitTag = cms.InputTag("hltDt1DRecHits"),
    DTsimhitsTag = cms.InputTag("g4SimHits","MuonDTHits"),
    DTsimhitsXFTag = cms.InputTag("mix","g4SimHitsMuonDTHits"),
    EfficiencyCut_muon = cms.double(0.0),
    EfficiencyCut_track = cms.double(0.0),
    GEMdigisimlinkTag = cms.InputTag("simMuonGEMDigis","GEM"),
    GEMsimhitsTag = cms.InputTag("g4SimHits","MuonGEMHits"),
    GEMsimhitsXFTag = cms.InputTag("mix","g4SimHitsMuonGEMHits"),
    NHitCut_muon = cms.uint32(0),
    NHitCut_track = cms.uint32(0),
    PurityCut_muon = cms.double(0.75),
    PurityCut_track = cms.double(0.75),
    ROUList = cms.vstring(
        'TrackerHitsTIBLowTof',
        'TrackerHitsTIBHighTof',
        'TrackerHitsTIDLowTof',
        'TrackerHitsTIDHighTof',
        'TrackerHitsTOBLowTof',
        'TrackerHitsTOBHighTof',
        'TrackerHitsTECLowTof',
        'TrackerHitsTECHighTof',
        'TrackerHitsPixelBarrelLowTof',
        'TrackerHitsPixelBarrelHighTof',
        'TrackerHitsPixelEndcapLowTof',
        'TrackerHitsPixelEndcapHighTof'
    ),
    RPCdigisimlinkTag = cms.InputTag("simMuonRPCDigis","RPCDigiSimLink"),
    RPCsimhitsTag = cms.InputTag("g4SimHits","MuonRPCHits"),
    RPCsimhitsXFTag = cms.InputTag("mix","g4SimHitsMuonRPCHits"),
    ThreeHitTracksAreSpecial = cms.bool(False),
    UseGrouped = cms.bool(True),
    UseMuon = cms.bool(True),
    UsePixels = cms.bool(True),
    UseSplitting = cms.bool(True),
    UseTracker = cms.bool(True),
    acceptOneStubMatchings = cms.bool(False),
    associatePixel = cms.bool(True),
    associateRecoTracks = cms.bool(True),
    associateStrip = cms.bool(True),
    associatorByWire = cms.bool(False),
    crossingframe = cms.bool(False),
    dumpDT = cms.bool(False),
    dumpInputCollections = cms.untracked.bool(False),
    ignoreMissingTrackCollection = cms.untracked.bool(True),
    includeZeroHitMuons = cms.bool(True),
    inputCSCSegmentCollection = cms.InputTag("cscSegments"),
    inputDTRecSegment4DCollection = cms.InputTag("dt4DSegments"),
    links_exist = cms.bool(True),
    phase2TrackerSimLinkSrc = cms.InputTag("simSiPixelDigis","Tracker"),
    pixelSimLinkSrc = cms.InputTag("simSiPixelDigis","Pixel"),
    rejectBadGlobal = cms.bool(True),
    simtracksTag = cms.InputTag("g4SimHits"),
    simtracksXFTag = cms.InputTag("mix","g4SimHits"),
    stripSimLinkSrc = cms.InputTag("simSiStripDigis"),
    tpRefVector = cms.bool(False),
    tpTag = cms.InputTag("mix","MergedTrackTruth"),
    tracksTag = cms.InputTag("hltIter2Phase2L3FromL1TkMuonMerged"),
    useGEMs = cms.bool(True),
    usePhase2Tracker = cms.bool(True)
)


process.AhltIter2Phase2L3FromL1TkMuonTrackSelectionHighPurity = cms.EDProducer("MuonAssociatorEDProducer",
    AbsoluteNumberOfHits_muon = cms.bool(False),
    AbsoluteNumberOfHits_track = cms.bool(False),
    CSClinksTag = cms.InputTag("simMuonCSCDigis","MuonCSCStripDigiSimLinks"),
    CSCsimHitsTag = cms.InputTag("g4SimHits","MuonCSCHits"),
    CSCsimHitsXFTag = cms.InputTag("mix","g4SimHitsMuonCSCHits"),
    CSCwireLinksTag = cms.InputTag("simMuonCSCDigis","MuonCSCWireDigiSimLinks"),
    DTdigiTag = cms.InputTag("simMuonDTDigis"),
    DTdigisimlinkTag = cms.InputTag("simMuonDTDigis"),
    DTrechitTag = cms.InputTag("hltDt1DRecHits"),
    DTsimhitsTag = cms.InputTag("g4SimHits","MuonDTHits"),
    DTsimhitsXFTag = cms.InputTag("mix","g4SimHitsMuonDTHits"),
    EfficiencyCut_muon = cms.double(0.0),
    EfficiencyCut_track = cms.double(0.0),
    GEMdigisimlinkTag = cms.InputTag("simMuonGEMDigis","GEM"),
    GEMsimhitsTag = cms.InputTag("g4SimHits","MuonGEMHits"),
    GEMsimhitsXFTag = cms.InputTag("mix","g4SimHitsMuonGEMHits"),
    NHitCut_muon = cms.uint32(0),
    NHitCut_track = cms.uint32(0),
    PurityCut_muon = cms.double(0.75),
    PurityCut_track = cms.double(0.75),
    ROUList = cms.vstring(
        'TrackerHitsTIBLowTof',
        'TrackerHitsTIBHighTof',
        'TrackerHitsTIDLowTof',
        'TrackerHitsTIDHighTof',
        'TrackerHitsTOBLowTof',
        'TrackerHitsTOBHighTof',
        'TrackerHitsTECLowTof',
        'TrackerHitsTECHighTof',
        'TrackerHitsPixelBarrelLowTof',
        'TrackerHitsPixelBarrelHighTof',
        'TrackerHitsPixelEndcapLowTof',
        'TrackerHitsPixelEndcapHighTof'
    ),
    RPCdigisimlinkTag = cms.InputTag("simMuonRPCDigis","RPCDigiSimLink"),
    RPCsimhitsTag = cms.InputTag("g4SimHits","MuonRPCHits"),
    RPCsimhitsXFTag = cms.InputTag("mix","g4SimHitsMuonRPCHits"),
    ThreeHitTracksAreSpecial = cms.bool(False),
    UseGrouped = cms.bool(True),
    UseMuon = cms.bool(True),
    UsePixels = cms.bool(True),
    UseSplitting = cms.bool(True),
    UseTracker = cms.bool(True),
    acceptOneStubMatchings = cms.bool(False),
    associatePixel = cms.bool(True),
    associateRecoTracks = cms.bool(True),
    associateStrip = cms.bool(True),
    associatorByWire = cms.bool(False),
    crossingframe = cms.bool(False),
    dumpDT = cms.bool(False),
    dumpInputCollections = cms.untracked.bool(False),
    ignoreMissingTrackCollection = cms.untracked.bool(True),
    includeZeroHitMuons = cms.bool(True),
    inputCSCSegmentCollection = cms.InputTag("cscSegments"),
    inputDTRecSegment4DCollection = cms.InputTag("dt4DSegments"),
    links_exist = cms.bool(True),
    phase2TrackerSimLinkSrc = cms.InputTag("simSiPixelDigis","Tracker"),
    pixelSimLinkSrc = cms.InputTag("simSiPixelDigis","Pixel"),
    rejectBadGlobal = cms.bool(True),
    simtracksTag = cms.InputTag("g4SimHits"),
    simtracksXFTag = cms.InputTag("mix","g4SimHits"),
    stripSimLinkSrc = cms.InputTag("simSiStripDigis"),
    tpRefVector = cms.bool(False),
    tpTag = cms.InputTag("mix","MergedTrackTruth"),
    tracksTag = cms.InputTag("hltIter2Phase2L3FromL1TkMuonTrackSelectionHighPurity"),
    useGEMs = cms.bool(True),
    usePhase2Tracker = cms.bool(True)
)


process.AhltPhase2L3Muons = cms.EDProducer("MuonAssociatorEDProducer",
    AbsoluteNumberOfHits_muon = cms.bool(False),
    AbsoluteNumberOfHits_track = cms.bool(False),
    CSClinksTag = cms.InputTag("simMuonCSCDigis","MuonCSCStripDigiSimLinks"),
    CSCsimHitsTag = cms.InputTag("g4SimHits","MuonCSCHits"),
    CSCsimHitsXFTag = cms.InputTag("mix","g4SimHitsMuonCSCHits"),
    CSCwireLinksTag = cms.InputTag("simMuonCSCDigis","MuonCSCWireDigiSimLinks"),
    DTdigiTag = cms.InputTag("simMuonDTDigis"),
    DTdigisimlinkTag = cms.InputTag("simMuonDTDigis"),
    DTrechitTag = cms.InputTag("hltDt1DRecHits"),
    DTsimhitsTag = cms.InputTag("g4SimHits","MuonDTHits"),
    DTsimhitsXFTag = cms.InputTag("mix","g4SimHitsMuonDTHits"),
    EfficiencyCut_muon = cms.double(0.0),
    EfficiencyCut_track = cms.double(0.0),
    GEMdigisimlinkTag = cms.InputTag("simMuonGEMDigis","GEM"),
    GEMsimhitsTag = cms.InputTag("g4SimHits","MuonGEMHits"),
    GEMsimhitsXFTag = cms.InputTag("mix","g4SimHitsMuonGEMHits"),
    NHitCut_muon = cms.uint32(0),
    NHitCut_track = cms.uint32(0),
    PurityCut_muon = cms.double(0.75),
    PurityCut_track = cms.double(0.75),
    ROUList = cms.vstring(
        'TrackerHitsTIBLowTof',
        'TrackerHitsTIBHighTof',
        'TrackerHitsTIDLowTof',
        'TrackerHitsTIDHighTof',
        'TrackerHitsTOBLowTof',
        'TrackerHitsTOBHighTof',
        'TrackerHitsTECLowTof',
        'TrackerHitsTECHighTof',
        'TrackerHitsPixelBarrelLowTof',
        'TrackerHitsPixelBarrelHighTof',
        'TrackerHitsPixelEndcapLowTof',
        'TrackerHitsPixelEndcapHighTof'
    ),
    RPCdigisimlinkTag = cms.InputTag("simMuonRPCDigis","RPCDigiSimLink"),
    RPCsimhitsTag = cms.InputTag("g4SimHits","MuonRPCHits"),
    RPCsimhitsXFTag = cms.InputTag("mix","g4SimHitsMuonRPCHits"),
    ThreeHitTracksAreSpecial = cms.bool(False),
    UseGrouped = cms.bool(True),
    UseMuon = cms.bool(True),
    UsePixels = cms.bool(True),
    UseSplitting = cms.bool(True),
    UseTracker = cms.bool(True),
    acceptOneStubMatchings = cms.bool(False),
    associatePixel = cms.bool(True),
    associateRecoTracks = cms.bool(True),
    associateStrip = cms.bool(True),
    associatorByWire = cms.bool(False),
    crossingframe = cms.bool(False),
    dumpDT = cms.bool(False),
    dumpInputCollections = cms.untracked.bool(False),
    ignoreMissingTrackCollection = cms.untracked.bool(True),
    includeZeroHitMuons = cms.bool(True),
    inputCSCSegmentCollection = cms.InputTag("cscSegments"),
    inputDTRecSegment4DCollection = cms.InputTag("dt4DSegments"),
    links_exist = cms.bool(True),
    phase2TrackerSimLinkSrc = cms.InputTag("simSiPixelDigis","Tracker"),
    pixelSimLinkSrc = cms.InputTag("simSiPixelDigis","Pixel"),
    rejectBadGlobal = cms.bool(True),
    simtracksTag = cms.InputTag("g4SimHits"),
    simtracksXFTag = cms.InputTag("mix","g4SimHits"),
    stripSimLinkSrc = cms.InputTag("simSiStripDigis"),
    tpRefVector = cms.bool(False),
    tpTag = cms.InputTag("mix","MergedTrackTruth"),
    tracksTag = cms.InputTag("hltPhase2L3MuonsTracks"),
    useGEMs = cms.bool(True),
    usePhase2Tracker = cms.bool(True)
)


process.AhltPhase2L3MuonsNoID = cms.EDProducer("MuonAssociatorEDProducer",
    AbsoluteNumberOfHits_muon = cms.bool(False),
    AbsoluteNumberOfHits_track = cms.bool(False),
    CSClinksTag = cms.InputTag("simMuonCSCDigis","MuonCSCStripDigiSimLinks"),
    CSCsimHitsTag = cms.InputTag("g4SimHits","MuonCSCHits"),
    CSCsimHitsXFTag = cms.InputTag("mix","g4SimHitsMuonCSCHits"),
    CSCwireLinksTag = cms.InputTag("simMuonCSCDigis","MuonCSCWireDigiSimLinks"),
    DTdigiTag = cms.InputTag("simMuonDTDigis"),
    DTdigisimlinkTag = cms.InputTag("simMuonDTDigis"),
    DTrechitTag = cms.InputTag("hltDt1DRecHits"),
    DTsimhitsTag = cms.InputTag("g4SimHits","MuonDTHits"),
    DTsimhitsXFTag = cms.InputTag("mix","g4SimHitsMuonDTHits"),
    EfficiencyCut_muon = cms.double(0.0),
    EfficiencyCut_track = cms.double(0.0),
    GEMdigisimlinkTag = cms.InputTag("simMuonGEMDigis","GEM"),
    GEMsimhitsTag = cms.InputTag("g4SimHits","MuonGEMHits"),
    GEMsimhitsXFTag = cms.InputTag("mix","g4SimHitsMuonGEMHits"),
    NHitCut_muon = cms.uint32(0),
    NHitCut_track = cms.uint32(0),
    PurityCut_muon = cms.double(0.75),
    PurityCut_track = cms.double(0.75),
    ROUList = cms.vstring(
        'TrackerHitsTIBLowTof',
        'TrackerHitsTIBHighTof',
        'TrackerHitsTIDLowTof',
        'TrackerHitsTIDHighTof',
        'TrackerHitsTOBLowTof',
        'TrackerHitsTOBHighTof',
        'TrackerHitsTECLowTof',
        'TrackerHitsTECHighTof',
        'TrackerHitsPixelBarrelLowTof',
        'TrackerHitsPixelBarrelHighTof',
        'TrackerHitsPixelEndcapLowTof',
        'TrackerHitsPixelEndcapHighTof'
    ),
    RPCdigisimlinkTag = cms.InputTag("simMuonRPCDigis","RPCDigiSimLink"),
    RPCsimhitsTag = cms.InputTag("g4SimHits","MuonRPCHits"),
    RPCsimhitsXFTag = cms.InputTag("mix","g4SimHitsMuonRPCHits"),
    ThreeHitTracksAreSpecial = cms.bool(False),
    UseGrouped = cms.bool(True),
    UseMuon = cms.bool(True),
    UsePixels = cms.bool(True),
    UseSplitting = cms.bool(True),
    UseTracker = cms.bool(True),
    acceptOneStubMatchings = cms.bool(False),
    associatePixel = cms.bool(True),
    associateRecoTracks = cms.bool(True),
    associateStrip = cms.bool(True),
    associatorByWire = cms.bool(False),
    crossingframe = cms.bool(False),
    dumpDT = cms.bool(False),
    dumpInputCollections = cms.untracked.bool(False),
    ignoreMissingTrackCollection = cms.untracked.bool(True),
    includeZeroHitMuons = cms.bool(True),
    inputCSCSegmentCollection = cms.InputTag("cscSegments"),
    inputDTRecSegment4DCollection = cms.InputTag("dt4DSegments"),
    links_exist = cms.bool(True),
    phase2TrackerSimLinkSrc = cms.InputTag("simSiPixelDigis","Tracker"),
    pixelSimLinkSrc = cms.InputTag("simSiPixelDigis","Pixel"),
    rejectBadGlobal = cms.bool(True),
    simtracksTag = cms.InputTag("g4SimHits"),
    simtracksXFTag = cms.InputTag("mix","g4SimHits"),
    stripSimLinkSrc = cms.InputTag("simSiStripDigis"),
    tpRefVector = cms.bool(False),
    tpTag = cms.InputTag("mix","MergedTrackTruth"),
    tracksTag = cms.InputTag("hltPhase2L3MuonsNoIDTracks"),
    useGEMs = cms.bool(True),
    usePhase2Tracker = cms.bool(True)
)


process.AhltPhase2L3OIMuonTrackSelectionHighPurity = cms.EDProducer("MuonAssociatorEDProducer",
    AbsoluteNumberOfHits_muon = cms.bool(False),
    AbsoluteNumberOfHits_track = cms.bool(False),
    CSClinksTag = cms.InputTag("simMuonCSCDigis","MuonCSCStripDigiSimLinks"),
    CSCsimHitsTag = cms.InputTag("g4SimHits","MuonCSCHits"),
    CSCsimHitsXFTag = cms.InputTag("mix","g4SimHitsMuonCSCHits"),
    CSCwireLinksTag = cms.InputTag("simMuonCSCDigis","MuonCSCWireDigiSimLinks"),
    DTdigiTag = cms.InputTag("simMuonDTDigis"),
    DTdigisimlinkTag = cms.InputTag("simMuonDTDigis"),
    DTrechitTag = cms.InputTag("hltDt1DRecHits"),
    DTsimhitsTag = cms.InputTag("g4SimHits","MuonDTHits"),
    DTsimhitsXFTag = cms.InputTag("mix","g4SimHitsMuonDTHits"),
    EfficiencyCut_muon = cms.double(0.0),
    EfficiencyCut_track = cms.double(0.0),
    GEMdigisimlinkTag = cms.InputTag("simMuonGEMDigis","GEM"),
    GEMsimhitsTag = cms.InputTag("g4SimHits","MuonGEMHits"),
    GEMsimhitsXFTag = cms.InputTag("mix","g4SimHitsMuonGEMHits"),
    NHitCut_muon = cms.uint32(0),
    NHitCut_track = cms.uint32(0),
    PurityCut_muon = cms.double(0.75),
    PurityCut_track = cms.double(0.75),
    ROUList = cms.vstring(
        'TrackerHitsTIBLowTof',
        'TrackerHitsTIBHighTof',
        'TrackerHitsTIDLowTof',
        'TrackerHitsTIDHighTof',
        'TrackerHitsTOBLowTof',
        'TrackerHitsTOBHighTof',
        'TrackerHitsTECLowTof',
        'TrackerHitsTECHighTof',
        'TrackerHitsPixelBarrelLowTof',
        'TrackerHitsPixelBarrelHighTof',
        'TrackerHitsPixelEndcapLowTof',
        'TrackerHitsPixelEndcapHighTof'
    ),
    RPCdigisimlinkTag = cms.InputTag("simMuonRPCDigis","RPCDigiSimLink"),
    RPCsimhitsTag = cms.InputTag("g4SimHits","MuonRPCHits"),
    RPCsimhitsXFTag = cms.InputTag("mix","g4SimHitsMuonRPCHits"),
    ThreeHitTracksAreSpecial = cms.bool(False),
    UseGrouped = cms.bool(True),
    UseMuon = cms.bool(True),
    UsePixels = cms.bool(True),
    UseSplitting = cms.bool(True),
    UseTracker = cms.bool(True),
    acceptOneStubMatchings = cms.bool(False),
    associatePixel = cms.bool(True),
    associateRecoTracks = cms.bool(True),
    associateStrip = cms.bool(True),
    associatorByWire = cms.bool(False),
    crossingframe = cms.bool(False),
    dumpDT = cms.bool(False),
    dumpInputCollections = cms.untracked.bool(False),
    ignoreMissingTrackCollection = cms.untracked.bool(True),
    includeZeroHitMuons = cms.bool(True),
    inputCSCSegmentCollection = cms.InputTag("cscSegments"),
    inputDTRecSegment4DCollection = cms.InputTag("dt4DSegments"),
    links_exist = cms.bool(True),
    phase2TrackerSimLinkSrc = cms.InputTag("simSiPixelDigis","Tracker"),
    pixelSimLinkSrc = cms.InputTag("simSiPixelDigis","Pixel"),
    rejectBadGlobal = cms.bool(True),
    simtracksTag = cms.InputTag("g4SimHits"),
    simtracksXFTag = cms.InputTag("mix","g4SimHits"),
    stripSimLinkSrc = cms.InputTag("simSiStripDigis"),
    tpRefVector = cms.bool(False),
    tpTag = cms.InputTag("mix","MergedTrackTruth"),
    tracksTag = cms.InputTag("hltPhase2L3OIMuonTrackSelectionHighPurity"),
    useGEMs = cms.bool(True),
    usePhase2Tracker = cms.bool(True)
)


process.CalibratedDigis = cms.EDProducer("CalibratedDigis",
    dtDigiTag = cms.InputTag("simMuonDTDigis"),
    flat_calib = cms.int32(0),
    scenario = cms.int32(0),
    tTrigMode = cms.string('DTTTrigSyncFromDB'),
    tTrigModeConfig = cms.PSet(
        debug = cms.untracked.bool(False),
        doT0Correction = cms.bool(True),
        doTOFCorrection = cms.bool(True),
        doWirePropCorrection = cms.bool(True),
        t0Label = cms.string(''),
        tTrigLabel = cms.string(''),
        tofCorrType = cms.int32(0),
        vPropWire = cms.double(24.4),
        wirePropCorrType = cms.int32(0)
    ),
    timeOffset = cms.int32(0)
)


process.L1BJetProducer = cms.EDProducer("L1BJetProducer",
    NNFileName = cms.FileInPath('L1Trigger/Phase2L1ParticleFlow/data/modelTT_PUP_Off_dXY_XYCut_Graph.pb'),
    NNInput = cms.string('input:0'),
    NNOutput = cms.string('sequential/dense_2/Sigmoid'),
    jets = cms.InputTag("scPFL1Puppi"),
    maxEta = cms.double(2.4),
    maxJets = cms.int32(10),
    mightGet = cms.optional.untracked.vstring,
    minPt = cms.double(20),
    nParticles = cms.int32(10),
    useRawPt = cms.bool(True),
    vtx = cms.InputTag("L1VertexFinderEmulator","L1VerticesEmulation")
)


process.MEtoEDMConverter = cms.EDProducer("MEtoEDMConverter",
    Frequency = cms.untracked.int32(50),
    MEPathToSave = cms.untracked.string(''),
    Name = cms.untracked.string('MEtoEDMConverter'),
    Verbosity = cms.untracked.int32(0)
)


process.TOoLLiPProducer = cms.EDProducer("TOoLLiPProducer",
    NNInput = cms.string('input:0'),
    NNOutput = cms.string('sequential/dense_2/Sigmoid'),
    TOoLLiPVersion = cms.string('TOoLLiP_v1'),
    jets = cms.InputTag("scPFL1Puppi"),
    maxEta = cms.double(2.4),
    maxJets = cms.int32(10),
    mightGet = cms.optional.untracked.vstring,
    minPt = cms.double(20),
    nParticles = cms.int32(10),
    useRawPt = cms.bool(True),
    vtx = cms.InputTag("L1VertexFinderEmulator","L1VerticesEmulation")
)


process.TTClusterAssociatorFromPixelDigis = cms.EDProducer("TTClusterAssociator_Phase2TrackerDigi_",
    TTClusters = cms.VInputTag(cms.InputTag("TTClustersFromPhase2TrackerDigis","ClusterInclusive"), cms.InputTag("TTStubsFromPhase2TrackerDigis","ClusterAccepted"), cms.InputTag("TTStubsFromPhase2TrackerDigis","ClusterRejected")),
    digiSimLinks = cms.InputTag("simSiPixelDigis","Tracker"),
    trackingParts = cms.InputTag("mix","MergedTrackTruth")
)


process.TTClustersFromPhase2TrackerDigis = cms.EDProducer("TTClusterBuilder_Phase2TrackerDigi_",
    ADCThreshold = cms.uint32(30),
    rawHits = cms.VInputTag(cms.InputTag("mix","Tracker")),
    storeLocalCoord = cms.bool(True)
)


process.TTStubAssociatorFromPixelDigis = cms.EDProducer("TTStubAssociator_Phase2TrackerDigi_",
    TTClusterTruth = cms.VInputTag(cms.InputTag("TTClusterAssociatorFromPixelDigis","ClusterAccepted"), cms.InputTag("TTClusterAssociatorFromPixelDigis","ClusterRejected")),
    TTStubs = cms.VInputTag(cms.InputTag("TTStubsFromPhase2TrackerDigis","StubAccepted"), cms.InputTag("TTStubsFromPhase2TrackerDigis","StubRejected"))
)


process.TTStubsFromPhase2TrackerDigis = cms.EDProducer("TTStubBuilder_Phase2TrackerDigi_",
    BarrelMax10GLay = cms.uint32(2),
    CBClimit = cms.uint32(3),
    FEineffs = cms.bool(False),
    MPAlimit = cms.uint32(5),
    OnlyOnePerInputCluster = cms.bool(True),
    PS10GCIClimit = cms.uint32(35),
    PS5GCIClimit = cms.uint32(16),
    SS5GCIClimit = cms.uint32(16),
    TEDD1Max10GRing = cms.uint32(7),
    TEDD2Max10GRing = cms.uint32(3),
    TTClusters = cms.InputTag("TTClustersFromPhase2TrackerDigis","ClusterInclusive")
)


process.TTTrackAssociatorFromPixelDigis = cms.EDProducer("TTTrackAssociator_Phase2TrackerDigi_",
    TTClusterTruth = cms.InputTag("TTClusterAssociatorFromPixelDigis","ClusterAccepted"),
    TTStubTruth = cms.InputTag("TTStubAssociatorFromPixelDigis","StubAccepted"),
    TTTrackAllowOneFalse2SStub = cms.bool(True),
    TTTracks = cms.VInputTag(cms.InputTag("l1tTTTracksFromTrackletEmulation","Level1TTTracks"))
)


process.TTTrackAssociatorFromPixelDigisExtended = cms.EDProducer("TTTrackAssociator_Phase2TrackerDigi_",
    TTClusterTruth = cms.InputTag("TTClusterAssociatorFromPixelDigis","ClusterAccepted"),
    TTStubTruth = cms.InputTag("TTStubAssociatorFromPixelDigis","StubAccepted"),
    TTTrackAllowOneFalse2SStub = cms.bool(True),
    TTTracks = cms.VInputTag(cms.InputTag("l1tTTTracksFromExtendedTrackletEmulation","Level1TTTracks"))
)


process.TrackerDTCProducer = cms.EDProducer("trackerDTC::ProducerED",
    BranchAccepted = cms.string('StubAccepted'),
    BranchLost = cms.string('StubLost'),
    CheckHistory = cms.bool(False),
    EnableTruncation = cms.bool(True),
    InputTag = cms.InputTag("TTStubsFromPhase2TrackerDigis","StubAccepted"),
    UseHybrid = cms.bool(True)
)


process.bunchSpacingProducer = cms.EDProducer("BunchSpacingProducer")


process.cscTriggerPrimitiveDigis = cms.EDProducer("CSCTriggerPrimitivesProducer",
    CSCComparatorDigiProducer = cms.InputTag("simMuonCSCDigis","MuonCSCComparatorDigi"),
    CSCWireDigiProducer = cms.InputTag("simMuonCSCDigis","MuonCSCWireDigi"),
    GEMPadDigiClusterProducer = cms.InputTag("simMuonGEMPadDigiClusters"),
    MaxBX = cms.int32(11),
    MinBX = cms.int32(5),
    alctPhase1 = cms.PSet(
        alctAccelMode = cms.uint32(0),
        alctDriftDelay = cms.uint32(2),
        alctEarlyTbins = cms.int32(4),
        alctFifoPretrig = cms.uint32(10),
        alctFifoTbins = cms.uint32(16),
        alctGhostCancellationBxDepth = cms.int32(4),
        alctGhostCancellationSideQuality = cms.bool(False),
        alctHitPersist = cms.uint32(6),
        alctL1aWindowWidth = cms.uint32(7),
        alctNarrowMaskForR1 = cms.bool(False),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctNplanesHitAccelPretrig = cms.uint32(3),
        alctNplanesHitPattern = cms.uint32(4),
        alctNplanesHitPretrig = cms.uint32(3),
        alctPretrigDeadtime = cms.uint32(4),
        alctTrigMode = cms.uint32(2),
        alctUseCorrectedBx = cms.bool(False),
        verbosity = cms.int32(0)
    ),
    alctPhase2 = cms.PSet(
        alctAccelMode = cms.uint32(0),
        alctDriftDelay = cms.uint32(2),
        alctEarlyTbins = cms.int32(4),
        alctFifoPretrig = cms.uint32(10),
        alctFifoTbins = cms.uint32(16),
        alctGhostCancellationBxDepth = cms.int32(1),
        alctGhostCancellationSideQuality = cms.bool(True),
        alctHitPersist = cms.uint32(6),
        alctL1aWindowWidth = cms.uint32(7),
        alctNarrowMaskForR1 = cms.bool(True),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctNplanesHitAccelPretrig = cms.uint32(3),
        alctNplanesHitPattern = cms.uint32(4),
        alctNplanesHitPretrig = cms.uint32(3),
        alctPretrigDeadtime = cms.uint32(0),
        alctTrigMode = cms.uint32(2),
        alctUseCorrectedBx = cms.bool(True),
        verbosity = cms.int32(0)
    ),
    alctPhase2GEM = cms.PSet(
        alctAccelMode = cms.uint32(0),
        alctDriftDelay = cms.uint32(2),
        alctEarlyTbins = cms.int32(4),
        alctFifoPretrig = cms.uint32(10),
        alctFifoTbins = cms.uint32(16),
        alctGhostCancellationBxDepth = cms.int32(1),
        alctGhostCancellationSideQuality = cms.bool(True),
        alctHitPersist = cms.uint32(6),
        alctL1aWindowWidth = cms.uint32(7),
        alctNarrowMaskForR1 = cms.bool(True),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctNplanesHitAccelPretrig = cms.uint32(3),
        alctNplanesHitPattern = cms.uint32(4),
        alctNplanesHitPretrig = cms.uint32(3),
        alctPretrigDeadtime = cms.uint32(0),
        alctTrigMode = cms.uint32(2),
        alctUseCorrectedBx = cms.bool(True),
        verbosity = cms.int32(0)
    ),
    checkBadChambers = cms.bool(False),
    clctPhase1 = cms.PSet(
        clctDriftDelay = cms.uint32(2),
        clctFifoPretrig = cms.uint32(7),
        clctFifoTbins = cms.uint32(12),
        clctHitPersist = cms.uint32(4),
        clctLocalShowerThresh = cms.int32(12),
        clctLocalShowerZone = cms.int32(25),
        clctMinSeparation = cms.uint32(10),
        clctNplanesHitPattern = cms.uint32(4),
        clctNplanesHitPretrig = cms.uint32(3),
        clctPidThreshPretrig = cms.uint32(2),
        clctStartBxShift = cms.int32(0),
        useDeadTimeZoning = cms.bool(False),
        verbosity = cms.int32(0)
    ),
    clctPhase2 = cms.PSet(
        clctDriftDelay = cms.uint32(2),
        clctFifoPretrig = cms.uint32(7),
        clctFifoTbins = cms.uint32(12),
        clctHitPersist = cms.uint32(4),
        clctLocalShowerThresh = cms.int32(12),
        clctLocalShowerZone = cms.int32(25),
        clctMinSeparation = cms.uint32(5),
        clctNplanesHitPattern = cms.uint32(4),
        clctNplanesHitPretrig = cms.uint32(3),
        clctPidThreshPretrig = cms.uint32(2),
        clctPretriggerTriggerZone = cms.uint32(224),
        clctStartBxShift = cms.int32(0),
        clctStateMachineZone = cms.uint32(4),
        useDeadTimeZoning = cms.bool(True),
        verbosity = cms.int32(0)
    ),
    clctPhase2GEM = cms.PSet(
        clctDriftDelay = cms.uint32(2),
        clctFifoPretrig = cms.uint32(7),
        clctFifoTbins = cms.uint32(12),
        clctHitPersist = cms.uint32(4),
        clctLocalShowerThresh = cms.int32(12),
        clctLocalShowerZone = cms.int32(25),
        clctMinSeparation = cms.uint32(5),
        clctNplanesHitPattern = cms.uint32(4),
        clctNplanesHitPretrig = cms.uint32(3),
        clctPidThreshPretrig = cms.uint32(2),
        clctPretriggerTriggerZone = cms.uint32(224),
        clctStartBxShift = cms.int32(0),
        clctStateMachineZone = cms.uint32(4),
        useDeadTimeZoning = cms.bool(True),
        verbosity = cms.int32(0)
    ),
    commonParam = cms.PSet(
        disableME1a = cms.bool(False),
        disableME42 = cms.bool(False),
        enableAlctPhase2 = cms.bool(True),
        gangedME1a = cms.bool(False),
        run3 = cms.bool(True),
        runCCLUT_OTMB = cms.bool(True),
        runCCLUT_TMB = cms.bool(False),
        runME11ILT = cms.bool(True),
        runME11Up = cms.bool(True),
        runME21ILT = cms.bool(True),
        runME21Up = cms.bool(True),
        runME31Up = cms.bool(True),
        runME41Up = cms.bool(True),
        runPhase2 = cms.bool(True),
        verbosity = cms.int32(0)
    ),
    copadParamGE11 = cms.PSet(
        maxDeltaBX = cms.uint32(0),
        maxDeltaPad = cms.uint32(8),
        maxDeltaRoll = cms.uint32(1),
        verbosity = cms.uint32(0)
    ),
    copadParamGE21 = cms.PSet(
        maxDeltaBX = cms.uint32(0),
        maxDeltaPad = cms.uint32(8),
        maxDeltaRoll = cms.uint32(1),
        verbosity = cms.uint32(0)
    ),
    debugParameters = cms.bool(True),
    keepALCTPreTriggers = cms.bool(False),
    keepCLCTPreTriggers = cms.bool(True),
    keepShowers = cms.bool(True),
    mpcParam = cms.PSet(
        dropInvalidStubs = cms.bool(False),
        dropLowQualityStubs = cms.bool(False),
        maxStubs = cms.uint32(18),
        sortStubs = cms.bool(False)
    ),
    selectedChambers = cms.vstring(),
    showerParam = cms.PSet(
        anodeShower = cms.PSet(
            minLayersCentralTBin = cms.uint32(5),
            showerNumTBins = cms.uint32(1),
            showerThresholds = cms.vuint32(
                140, 140, 140, 140, 140,
                140, 7, 14, 18, 23,
                56, 58, 12, 28, 32,
                21, 55, 57, 12, 26,
                34, 25, 62, 64, 12,
                27, 31
            )
        ),
        cathodeShower = cms.PSet(
            minLayersCentralTBin = cms.uint32(5),
            peakCheck = cms.bool(False),
            showerNumTBins = cms.uint32(3),
            showerThresholds = cms.vuint32(
                100, 100, 100, 10000, 10000,
                10000, 10000, 10000, 10000, 14,
                33, 35, 10000, 10000, 10000,
                12, 31, 33, 10000, 10000,
                10000, 14, 34, 36, 10000,
                10000, 10000
            )
        ),
        source = cms.vuint32(
            3, 1, 1, 3, 1,
            3, 1, 3, 1
        )
    ),
    tmbPhase1 = cms.PSet(
        alctTrigEnable = cms.uint32(0),
        clctTrigEnable = cms.uint32(0),
        ignoreAlctCrossClct = cms.bool(True),
        matchEarliestClctOnly = cms.bool(True),
        matchTrigEnable = cms.uint32(1),
        matchTrigWindowSize = cms.uint32(7),
        mpcBlockMe1a = cms.uint32(0),
        preferredBxMatch = cms.vint32(
            0, -1, 1, -2, 2,
            -3, 3
        ),
        sortClctBx = cms.bool(True),
        tmbDropUsedClcts = cms.bool(False),
        tmbEarlyTbins = cms.int32(4),
        tmbL1aWindowSize = cms.uint32(7),
        tmbReadoutEarliest2 = cms.bool(True),
        useHighMultiplicityBits = cms.bool(False),
        verbosity = cms.int32(0)
    ),
    tmbPhase2 = cms.PSet(
        alctTrigEnable = cms.uint32(0),
        clctTrigEnable = cms.uint32(0),
        ignoreAlctCrossClct = cms.bool(True),
        matchEarliestClctOnly = cms.bool(True),
        matchTrigEnable = cms.uint32(1),
        matchTrigWindowSize = cms.uint32(7),
        mpcBlockMe1a = cms.uint32(0),
        preferredBxMatch = cms.vint32(
            0, -1, 1, -2, 2,
            -3, 3
        ),
        sortClctBx = cms.bool(True),
        tmbDropUsedClcts = cms.bool(False),
        tmbEarlyTbins = cms.int32(4),
        tmbL1aWindowSize = cms.uint32(7),
        tmbReadoutEarliest2 = cms.bool(True),
        useHighMultiplicityBits = cms.bool(False),
        verbosity = cms.int32(0)
    ),
    tmbPhase2GE11 = cms.PSet(
        BunchCrossingCSCminGEMwindow = cms.vint32(
            0, -1, 1, -2, 2,
            -3, 3
        ),
        alctTrigEnable = cms.uint32(0),
        assignGEMCSCBending = cms.bool(True),
        buildLCTfromALCTandGEM = cms.bool(True),
        buildLCTfromCLCTandGEM = cms.bool(False),
        clctTrigEnable = cms.uint32(0),
        delayGEMinOTMB = cms.uint32(0),
        dropLowQualityALCTs = cms.bool(True),
        dropLowQualityCLCTs = cms.bool(True),
        dropLowQualityCLCTs_ME1a = cms.bool(True),
        enableMatchGEMandME1a = cms.bool(True),
        enableMatchGEMandME1b = cms.bool(True),
        ignoreAlctCrossClct = cms.bool(True),
        matchCLCTpropagation = cms.bool(True),
        matchEarliestClctOnly = cms.bool(True),
        matchTrigEnable = cms.uint32(1),
        matchTrigWindowSize = cms.uint32(7),
        maxDeltaHsEven = cms.uint32(5),
        maxDeltaHsOdd = cms.uint32(10),
        maxDeltaWG = cms.uint32(7),
        mitigateSlopeByCosi = cms.bool(False),
        mpcBlockMe1a = cms.uint32(0),
        preferredBxMatch = cms.vint32(
            0, -1, 1, -2, 2,
            -3, 3
        ),
        sortClctBx = cms.bool(True),
        tmbDropUsedClcts = cms.bool(False),
        tmbEarlyTbins = cms.int32(4),
        tmbL1aWindowSize = cms.uint32(7),
        tmbReadoutEarliest2 = cms.bool(True),
        useHighMultiplicityBits = cms.bool(False),
        verbosity = cms.int32(0),
        windowBXALCTGEM = cms.uint32(3),
        windowBXCLCTGEM = cms.uint32(7)
    ),
    tmbPhase2GE21 = cms.PSet(
        BunchCrossingCSCminGEMwindow = cms.vint32(
            0, -1, 1, -2, 2,
            -3, 3
        ),
        alctTrigEnable = cms.uint32(0),
        assignGEMCSCBending = cms.bool(True),
        buildLCTfromALCTandGEM = cms.bool(True),
        buildLCTfromCLCTandGEM = cms.bool(False),
        clctTrigEnable = cms.uint32(0),
        delayGEMinOTMB = cms.uint32(0),
        dropLowQualityALCTs = cms.bool(True),
        dropLowQualityCLCTs = cms.bool(True),
        dropLowQualityCLCTs_ME1a = cms.bool(True),
        enableMatchGEMandME1a = cms.bool(True),
        enableMatchGEMandME1b = cms.bool(True),
        ignoreAlctCrossClct = cms.bool(True),
        matchCLCTpropagation = cms.bool(True),
        matchEarliestClctOnly = cms.bool(True),
        matchTrigEnable = cms.uint32(1),
        matchTrigWindowSize = cms.uint32(7),
        maxDeltaHsEven = cms.uint32(5),
        maxDeltaHsOdd = cms.uint32(10),
        maxDeltaWG = cms.uint32(7),
        mitigateSlopeByCosi = cms.bool(False),
        mpcBlockMe1a = cms.uint32(0),
        preferredBxMatch = cms.vint32(
            0, -1, 1, -2, 2,
            -3, 3
        ),
        sortClctBx = cms.bool(True),
        tmbDropUsedClcts = cms.bool(False),
        tmbEarlyTbins = cms.int32(4),
        tmbL1aWindowSize = cms.uint32(7),
        tmbReadoutEarliest2 = cms.bool(True),
        useHighMultiplicityBits = cms.bool(False),
        verbosity = cms.int32(0),
        windowBXALCTGEM = cms.uint32(3),
        windowBXCLCTGEM = cms.uint32(7)
    )
)


process.dtTriggerPhase2PrimitiveDigis = cms.EDProducer("DTTrigPhase2Prod",
    HoughGrouping = cms.PSet(
        LowerNumber = cms.int32(4),
        MaxDistanceToWire = cms.double(0.03),
        UpperNumber = cms.int32(6),
        allowUncorrelatedPatterns = cms.bool(True),
        anglebinwidth = cms.double(1.0),
        angletan = cms.double(0.3),
        debug = cms.untracked.bool(False),
        maxdeltaAngDeg = cms.double(10),
        maxdeltaPos = cms.double(10),
        minNLayerHits = cms.int32(6),
        minSingleSLHitsMax = cms.int32(3),
        minSingleSLHitsMin = cms.int32(3),
        minUncorrelatedHits = cms.int32(3),
        posbinwidth = cms.double(2.1)
    ),
    PseudoBayesPattern = cms.PSet(
        allowDuplicates = cms.bool(False),
        allowUncorrelatedPatterns = cms.bool(True),
        allowedVariance = cms.int32(1),
        debug = cms.untracked.bool(False),
        maxPathsPerMatch = cms.int32(256),
        minNLayerHits = cms.int32(3),
        minSingleSLHitsMax = cms.int32(3),
        minSingleSLHitsMin = cms.int32(0),
        minUncorrelatedHits = cms.int32(3),
        pattern_filename = cms.FileInPath('L1Trigger/DTTriggerPhase2/data/PseudoBayesPatterns_uncorrelated_v0.root'),
        saveOnPlace = cms.bool(True),
        setLateralities = cms.bool(True)
    ),
    activateBuffer = cms.bool(False),
    algo = cms.int32(0),
    allow_confirmation = cms.bool(True),
    bx_window = cms.int32(1),
    chi2Th = cms.double(0.01),
    chi2corTh = cms.double(0.1),
    clean_chi2_correlation = cms.bool(True),
    dBX_correlate_TP = cms.int32(0),
    dT0_correlate_TP = cms.double(25.0),
    dTanPsi_correlate_TP = cms.double(99999.0),
    debug = cms.untracked.bool(False),
    df_extended = cms.int32(0),
    digiTag = cms.InputTag("CalibratedDigis"),
    dump = cms.untracked.bool(False),
    global_coords_filename = cms.FileInPath('L1Trigger/DTTriggerPhase2/data/global_coord_perp_x_phi0.txt'),
    laterality_filename = cms.FileInPath('L1Trigger/DTTriggerPhase2/data/lat_predictions.dat'),
    lut_2sl = cms.FileInPath('L1Trigger/DTTriggerPhase2/data/fitterlut_2sl.dat'),
    lut_sl1 = cms.FileInPath('L1Trigger/DTTriggerPhase2/data/fitterlut_sl1.dat'),
    lut_sl2 = cms.FileInPath('L1Trigger/DTTriggerPhase2/data/fitterlut_slx.dat'),
    lut_sl3 = cms.FileInPath('L1Trigger/DTTriggerPhase2/data/fitterlut_sl3.dat'),
    max_primitives = cms.int32(999),
    max_quality_to_overwrite_t0 = cms.int32(9),
    maxdrift_filename = cms.FileInPath('L1Trigger/DTTriggerPhase2/data/drift_time_per_chamber.txt'),
    minHits4Fit = cms.int32(3),
    minx_match_2digis = cms.double(1.0),
    output_confirmed = cms.bool(False),
    output_latpredictor = cms.bool(False),
    output_matcher = cms.bool(False),
    output_mixer = cms.bool(False),
    output_slfilter = cms.bool(False),
    output_slfitter = cms.bool(False),
    phi_window = cms.double(50.0),
    rpcRecHits = cms.InputTag("rpcRecHits"),
    scenario = cms.int32(0),
    shift_filename = cms.FileInPath('L1Trigger/DTTriggerPhase2/data/wire_rawId_x.txt'),
    shift_theta_filename = cms.FileInPath('L1Trigger/DTTriggerPhase2/data/theta_shift.txt'),
    splitPathPerSL = cms.bool(True),
    storeAllRPCHits = cms.bool(False),
    superCellspacewidth = cms.int32(20),
    superCelltimewidth = cms.double(400),
    tanPhiTh = cms.double(1.0),
    tanPhiThw0 = cms.double(0.5),
    tanPhiThw1max = cms.double(0.9),
    tanPhiThw1min = cms.double(0.2),
    tanPhiThw2max = cms.double(1.3),
    tanPhiThw2min = cms.double(0.5),
    ttrig_filename = cms.FileInPath('L1Trigger/DTTriggerPhase2/data/wire_rawId_ttrig.txt'),
    useBX_correlation = cms.bool(False),
    useRPC = cms.bool(False),
    z_filename = cms.FileInPath('L1Trigger/DTTriggerPhase2/data/wire_rawId_z.txt')
)


process.dtTriggerPrimitiveDigis = cms.EDProducer("DTTrigProd",
    DTTFSectorNumbering = cms.bool(True),
    debug = cms.untracked.bool(False),
    digiTag = cms.InputTag("muonDTDigis"),
    lutBtic = cms.untracked.int32(31),
    lutDumpFlag = cms.untracked.bool(False)
)


process.ge0TriggerConvertedPseudoDigis = cms.EDProducer("GE0TriggerPseudoProducer",
    DeltaPhiResolution = cms.untracked.double(0.25),
    ME0SegmentProducer = cms.InputTag("gemSegments"),
    info = cms.untracked.int32(0)
)


process.gemRecHits = cms.EDProducer("GEMRecHitProducer",
    applyMasking = cms.bool(False),
    deadFile = cms.optional.FileInPath,
    ge21Off = cms.bool(False),
    gemDigiLabel = cms.InputTag("simMuonGEMDigis"),
    maskFile = cms.optional.FileInPath,
    mightGet = cms.optional.untracked.vstring,
    recAlgo = cms.string('GEMRecHitStandardAlgo'),
    recAlgoConfig = cms.PSet(

    )
)


process.gemRecHitsDef = cms.EDProducer("GEMRecHitProducer",
    applyMasking = cms.bool(False),
    deadFile = cms.optional.FileInPath,
    ge21Off = cms.bool(False),
    gemDigiLabel = cms.InputTag("muonGEMDigis"),
    maskFile = cms.optional.FileInPath,
    mightGet = cms.optional.untracked.vstring,
    recAlgo = cms.string('GEMRecHitStandardAlgo'),
    recAlgoConfig = cms.PSet(

    )
)


process.gemSegments = cms.EDProducer("GEMSegmentProducer",
    algo_name = cms.string('GEMSegmentAlgorithm'),
    algo_pset = cms.PSet(
        GEMDebug = cms.untracked.bool(False),
        clusterOnlySameBXRecHits = cms.bool(True),
        dEtaChainBoxMax = cms.double(0.05),
        dPhiChainBoxMax = cms.double(0.02),
        dXclusBoxMax = cms.double(1),
        dYclusBoxMax = cms.double(5),
        maxRecHitsInCluster = cms.int32(4),
        minHitsPerSegment = cms.uint32(2),
        preClustering = cms.bool(True),
        preClusteringUseChaining = cms.bool(True)
    ),
    enableGE0 = cms.bool(True),
    enableGE12 = cms.bool(False),
    ge0_name = cms.string('GE0SegAlgoRU'),
    ge0_pset = cms.PSet(
        allowWideSegments = cms.bool(True),
        doCollisions = cms.bool(True),
        maxChi2Additional = cms.double(100),
        maxChi2GoodSeg = cms.double(50),
        maxChi2Prune = cms.double(50),
        maxETASeeds = cms.double(0.1),
        maxNumberOfHits = cms.uint32(300),
        maxNumberOfHitsPerLayer = cms.uint32(100),
        maxPhiAdditional = cms.double(0.001096605744),
        maxPhiSeeds = cms.double(0.001096605744),
        maxTOFDiff = cms.double(25),
        minNumberOfHits = cms.uint32(4),
        requireCentralBX = cms.bool(True)
    ),
    gemRecHitLabel = cms.InputTag("gemRecHits"),
    mightGet = cms.optional.untracked.vstring
)


process.gmtFwdMuons = cms.EDProducer("Phase2L1TGMTFwdMuonTranslator",
    emtfTracks = cms.InputTag("simEmtfDigisPhase2"),
    omtfTracks = cms.InputTag("simOmtfPhase2Digis","OMTF"),
    stubs = cms.InputTag("gmtStubs","tps")
)


process.gmtKMTFMuons = cms.EDProducer("Phase2L1TGMTKMTFProducer",
    Ndisplaced = cms.uint32(12),
    Nprompt = cms.uint32(12),
    algo = cms.PSet(
        aPhi = cms.vdouble(5.6533349391874275, 0.03477876333443834, 0.032506522838098864, 0.024752809174909053),
        aPhiB = cms.vdouble(-2.02, -0.2994087741381382, -0.4033668521165302, -0.3592231728688621),
        aPhiBNLO = cms.vdouble(9.04133e-05, 0, 0, 0),
        bPhi = cms.vdouble(-1, 0.18245, 0.20898, 0.17286),
        bPhiB = cms.vdouble(-1, 1.18245, 1.20898, 1.17286),
        chiSquareCutDisp = cms.vint32(),
        chiSquareCutDispPattern = cms.vint32(),
        chiSquareCutOffDisp = cms.vint32(),
        chiSquareCutOffPrompt = cms.vint32(),
        chiSquareCutPrompt = cms.vint32(),
        chiSquareCutPromptPattern = cms.vint32(),
        chiSquareDisp1 = cms.vdouble(0.241, 0.575, 0.892),
        chiSquareDisp2 = cms.vdouble(0.347, 0.707),
        chiSquareDisp3 = cms.vdouble(0.336),
        chiSquareErrADisp1 = cms.vint32(21, 23, 45),
        chiSquareErrADisp2 = cms.vint32(14, 28),
        chiSquareErrADisp3 = cms.vint32(29),
        chiSquareErrAPrompt1 = cms.vint32(21, 24, 33),
        chiSquareErrAPrompt2 = cms.vint32(18, 14),
        chiSquareErrAPrompt3 = cms.vint32(21),
        chiSquareErrBDisp1 = cms.vdouble(0.54, 0.805, 0.74),
        chiSquareErrBDisp2 = cms.vdouble(0.73, 0.9450000000000001),
        chiSquareErrBDisp3 = cms.vdouble(0.5),
        chiSquareErrBPrompt1 = cms.vdouble(0.045, 0.08, 0.06),
        chiSquareErrBPrompt2 = cms.vdouble(0.065, 0.275),
        chiSquareErrBPrompt3 = cms.vdouble(0.05),
        chiSquarePrompt1 = cms.vdouble(-0.323, -0.508, -0.578),
        chiSquarePrompt2 = cms.vdouble(-0.228, -0.343),
        chiSquarePrompt3 = cms.vdouble(-0.1),
        combos1 = cms.vint32(),
        combos2 = cms.vint32(3),
        combos3 = cms.vint32(5, 6, 7),
        combos4 = cms.vint32(
            9, 10, 11, 12, 13,
            14, 15
        ),
        curvResolution1 = cms.vdouble(1, 2360.97, 873.003, 258138.0),
        curvResolution2 = cms.vdouble(1, 4.903692, 48.7941, 0),
        eLoss = cms.vdouble(6.77765e-05, 0, 0, 0),
        etaLUT0 = cms.vdouble(8.946, 7.508, 6.279, 6.399),
        etaLUT1 = cms.vdouble(0.159, 0.116, 0.088, 0.128),
        initialK = cms.vdouble(-0.4576229536749278, -0.6364802777566145, -1.0305030909883524, -1.7272067322624118),
        initialK2 = cms.vdouble(-6.442002637356136e-05, -9.582709649965545e-05, -0.0002741064246218815, -0.0014910074450869175),
        lutFile = cms.string('L1Trigger/Phase2L1GMT/data/packedGainLUTs.root'),
        mScatteringPhi = cms.vdouble(0.1169021113298598, 0.00016777763395543814, 0.0004322078772344548, 0.00024985881710722107),
        mScatteringPhiB = cms.vdouble(0.0522762, 0.01762000062188365, 0.03508319015441297, 0.03126825551530328),
        phiAt2 = cms.double(0.17917991867483288),
        pointResolutionPhi = cms.double(1.0),
        pointResolutionPhiB = cms.double(12493.7429036),
        pointResolutionPhiBH = cms.vdouble(19925.62953113343, 15583.06791339368, 10258.11768352221, 15462.112839170433),
        pointResolutionPhiBL = cms.vdouble(161519.85395846734, 155051.58394241595, 149693.88179343447, 174896.46766622085),
        pointResolutionVertex = cms.double(1.0),
        useOfflineAlgo = cms.bool(False),
        verbose = cms.bool(False)
    ),
    stubs = cms.InputTag("gmtStubs","kmtf"),
    verbose = cms.int32(0)
)


process.gmtSAMuons = cms.EDProducer("Phase2L1TGMTSAMuonGhostCleaner",
    barrelDisp = cms.InputTag("gmtKMTFMuons","displaced"),
    barrelPrompt = cms.InputTag("gmtKMTFMuons","prompt"),
    forwardDisp = cms.InputTag("gmtFwdMuons","displaced"),
    forwardPrompt = cms.InputTag("gmtFwdMuons","prompt")
)


process.gmtStubs = cms.EDProducer("Phase2L1TGMTStubProducer",
    Barrel = cms.PSet(
        coarseEta_1 = cms.vint32(0, 23, 41),
        coarseEta_2 = cms.vint32(0, 20, 36),
        coarseEta_3 = cms.vint32(0, 17, 31),
        coarseEta_4 = cms.vint32(0, 14, 27),
        etaLSB = cms.double(0.024586688),
        eta_1 = cms.vint32(
            -46, -45, -43, -41, -39,
            -37, -35, -30, -28, -26,
            -23, -20, -18, -15, -9,
            -6, -3, -1, 1, 3,
            6, 9, 15, 18, 20,
            23, 26, 28, 30, 35,
            37, 39, 41, 43, 45,
            1503
        ),
        eta_2 = cms.vint32(
            -41, -39, -38, -36, -34,
            -32, -30, -26, -24, -22,
            -20, -18, -15, -13, -8,
            -5, -3, -1, 1, 3,
            5, 8, 13, 15, 18,
            20, 22, 24, 26, 30,
            32, 34, 36, 38, 39,
            1334
        ),
        eta_3 = cms.vint32(
            -35, -34, -32, -31, -29,
            -27, -26, -22, -20, -19,
            -17, -15, -13, -11, -6,
            -4, -2, -1, 1, 2,
            4, 6, 11, 13, 15,
            17, 19, 20, 22, 26,
            27, 29, 31, 32, 34,
            1148
        ),
        maxBX = cms.int32(0),
        minBX = cms.int32(0),
        minPhiQuality = cms.int32(0),
        minThetaQuality = cms.int32(0),
        phiBDivider = cms.int32(1),
        phiLSB = cms.double(2.396845e-05),
        phiOffset = cms.vint32(0, 0, 0, 0),
        verbose = cms.int32(0)
    ),
    Endcap = cms.PSet(
        coord1LSB = cms.double(0.00613281248),
        coord2LSB = cms.double(0.00613281248),
        eta1LSB = cms.double(0.024586688),
        eta2LSB = cms.double(0.024586688),
        etaMatch = cms.double(0.1),
        maxBX = cms.int32(0),
        minBX = cms.int32(0),
        phiMatch = cms.double(0.05),
        verbose = cms.uint32(0)
    ),
    srcCSC = cms.InputTag("simCscTriggerPrimitiveDigis"),
    srcDT = cms.InputTag("dtTriggerPhase2PrimitiveDigis"),
    srcDTTheta = cms.InputTag("simDtTriggerPrimitiveDigis"),
    srcRPC = cms.InputTag("simMuonRPCDigis"),
    verbose = cms.int32(0)
)


process.gmtTkMuons = cms.EDProducer("Phase2L1TGMTTkMuonProducer",
    isolation = cms.PSet(
        AbsIsoThresholdL = cms.int32(160),
        AbsIsoThresholdM = cms.int32(120),
        AbsIsoThresholdT = cms.int32(80),
        IsodumpForHLS = cms.int32(0),
        RelIsoThresholdL = cms.double(0.1),
        RelIsoThresholdM = cms.double(0.05),
        RelIsoThresholdT = cms.double(0.01),
        verbose = cms.int32(0)
    ),
    minTrackStubs = cms.int32(4),
    muonBXMax = cms.int32(0),
    muonBXMin = cms.int32(0),
    srcStubs = cms.InputTag("gmtStubs","tps"),
    srcTracks = cms.InputTag("l1tTTTracksFromTrackletEmulation","Level1TTTracks"),
    tauto3mu = cms.PSet(

    ),
    trackConverter = cms.PSet(
        verbose = cms.int32(0)
    ),
    trackMatching = cms.PSet(
        verbose = cms.int32(0)
    ),
    verbose = cms.int32(0)
)


process.hltAK4PFCHSJetCorrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("hltAK4PFCHSJetCorrectorL1", "hltAK4PFCHSJetCorrectorL2", "hltAK4PFCHSJetCorrectorL3")
)


process.hltAK4PFCHSJetCorrectorL1 = cms.EDProducer("L1FastjetCorrectorProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("hltFixedGridRhoFastjetAllTmp")
)


process.hltAK4PFCHSJetCorrectorL2 = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L2Relative')
)


process.hltAK4PFCHSJetCorrectorL3 = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L3Absolute')
)


process.hltAK4PFCHSJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(5.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    rParam = cms.double(0.4),
    src = cms.InputTag("hltPfNoPileUpJME"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.hltAK4PFCHSJetsCorrected = cms.EDProducer("CorrectedPFJetProducer",
    correctors = cms.VInputTag("hltAK4PFCHSJetCorrector"),
    src = cms.InputTag("hltAK4PFCHSJets")
)


process.hltAK4PFClusterJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(3.0),
    jetType = cms.string('PFClusterJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    rParam = cms.double(0.4),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("hltPfClusterRefsForJets"),
    srcPVs = cms.InputTag("NotUsed"),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.hltAK4PFJetCorrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("hltAK4PFJetCorrectorL1", "hltAK4PFJetCorrectorL2", "hltAK4PFJetCorrectorL3")
)


process.hltAK4PFJetCorrectorL1 = cms.EDProducer("L1FastjetCorrectorProducer",
    algorithm = cms.string('AK4PF'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("hltFixedGridRhoFastjetAllTmp")
)


process.hltAK4PFJetCorrectorL2 = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK4PF'),
    level = cms.string('L2Relative')
)


process.hltAK4PFJetCorrectorL3 = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK4PF'),
    level = cms.string('L3Absolute')
)


process.hltAK4PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(5.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    rParam = cms.double(0.4),
    src = cms.InputTag("hltParticleFlowTmp"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.hltAK4PFJetsCorrected = cms.EDProducer("CorrectedPFJetProducer",
    correctors = cms.VInputTag("hltAK4PFJetCorrector"),
    src = cms.InputTag("hltAK4PFJets")
)


process.hltAK4PFJetsForTaus = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    DxyTrVtxMax = cms.double(0.0),
    DzTrVtxMax = cms.double(0.0),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.0),
    MaxVtxZ = cms.double(15.0),
    MinVtxNdof = cms.int32(0),
    R0 = cms.double(-1.0),
    Rho_EtaMax = cms.double(4.4),
    UseOnlyOnePV = cms.bool(False),
    UseOnlyVertexTracks = cms.bool(False),
    applyWeight = cms.bool(False),
    beta = cms.double(-1.0),
    correctShape = cms.bool(False),
    csRParam = cms.double(-1.0),
    csRho_EtaMax = cms.double(-1.0),
    dRMax = cms.double(-1.0),
    dRMin = cms.double(-1.0),
    doAreaDiskApprox = cms.bool(True),
    doAreaFastjet = cms.bool(False),
    doFastJetNonUniform = cms.bool(False),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    gridMaxRapidity = cms.double(-1.0),
    gridSpacing = cms.double(-1.0),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetCollInstanceName = cms.string(''),
    jetPtMin = cms.double(0.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxDepth = cms.int32(-1),
    maxInputs = cms.uint32(1),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(0),
    minimumTowersFraction = cms.double(0.0),
    muCut = cms.double(-1.0),
    muMax = cms.double(-1.0),
    muMin = cms.double(-1.0),
    nExclude = cms.uint32(0),
    nFilt = cms.int32(-1),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(),
    puPtMin = cms.double(10.0),
    puWidth = cms.double(0.0),
    rFilt = cms.double(-1.0),
    rFiltFactor = cms.double(-1.0),
    rParam = cms.double(0.4),
    radiusPU = cms.double(0.4),
    rcut_factor = cms.double(-1.0),
    restrictInputs = cms.bool(False),
    src = cms.InputTag("hltParticleFlowTmp"),
    srcPVs = cms.InputTag("hltPhase2PixelVertices"),
    srcWeights = cms.InputTag(""),
    subjetPtMin = cms.double(-1.0),
    subtractorName = cms.string(''),
    sumRecHits = cms.bool(False),
    trimPtFracMin = cms.double(-1.0),
    useCMSBoostedTauSeedingAlgorithm = cms.bool(False),
    useConstituentSubtraction = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    useDynamicFiltering = cms.bool(False),
    useExplicitGhosts = cms.bool(False),
    useFiltering = cms.bool(False),
    useKtPruning = cms.bool(False),
    useMassDropTagger = cms.bool(False),
    usePruning = cms.bool(False),
    useSoftDrop = cms.bool(False),
    useTrimming = cms.bool(False),
    verbosity = cms.int32(0),
    voronoiRfact = cms.double(-9.0),
    writeCompound = cms.bool(False),
    writeJetsWithConst = cms.bool(False),
    yCut = cms.double(-1.0),
    yMax = cms.double(-1.0),
    yMin = cms.double(-1.0),
    zcut = cms.double(-1.0)
)


process.hltAK4PFPuppiJetCorrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("hltAK4PFPuppiJetCorrectorL1", "hltAK4PFPuppiJetCorrectorL2", "hltAK4PFPuppiJetCorrectorL3")
)


process.hltAK4PFPuppiJetCorrectorL1 = cms.EDProducer("L1FastjetCorrectorProducer",
    algorithm = cms.string('AK4PFPuppiHLT'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("hltFixedGridRhoFastjetAllTmp")
)


process.hltAK4PFPuppiJetCorrectorL2 = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK4PFPuppiHLT'),
    level = cms.string('L2Relative')
)


process.hltAK4PFPuppiJetCorrectorL3 = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK4PFPuppiHLT'),
    level = cms.string('L3Absolute')
)


process.hltAK4PFPuppiJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(True),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(5.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    rParam = cms.double(0.4),
    src = cms.InputTag("hltParticleFlowTmp"),
    srcPVs = cms.InputTag(""),
    srcWeights = cms.InputTag("hltPFPuppi"),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.hltAK4PFPuppiJetsCorrected = cms.EDProducer("CorrectedPFJetProducer",
    correctors = cms.VInputTag("hltAK4PFPuppiJetCorrector"),
    src = cms.InputTag("hltAK4PFPuppiJets")
)


process.hltAK8PFCHSJetCorrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("hltAK8PFCHSJetCorrectorL1", "hltAK8PFCHSJetCorrectorL2", "hltAK8PFCHSJetCorrectorL3")
)


process.hltAK8PFCHSJetCorrectorL1 = cms.EDProducer("L1FastjetCorrectorProducer",
    algorithm = cms.string('AK8PFchs'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("hltFixedGridRhoFastjetAllTmp")
)


process.hltAK8PFCHSJetCorrectorL2 = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK8PFchs'),
    level = cms.string('L2Relative')
)


process.hltAK8PFCHSJetCorrectorL3 = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK8PFchs'),
    level = cms.string('L3Absolute')
)


process.hltAK8PFCHSJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(50.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    rParam = cms.double(0.8),
    src = cms.InputTag("hltPfNoPileUpJME"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.hltAK8PFCHSJetsCorrected = cms.EDProducer("CorrectedPFJetProducer",
    correctors = cms.VInputTag("hltAK8PFCHSJetCorrector"),
    src = cms.InputTag("hltAK8PFCHSJets")
)


process.hltAK8PFClusterJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(3.0),
    jetType = cms.string('PFClusterJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    rParam = cms.double(0.8),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("hltPfClusterRefsForJets"),
    srcPVs = cms.InputTag("NotUsed"),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.hltAK8PFJetCorrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("hltAK8PFJetCorrectorL1", "hltAK8PFJetCorrectorL2", "hltAK8PFJetCorrectorL3")
)


process.hltAK8PFJetCorrectorL1 = cms.EDProducer("L1FastjetCorrectorProducer",
    algorithm = cms.string('AK8PF'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("hltFixedGridRhoFastjetAllTmp")
)


process.hltAK8PFJetCorrectorL2 = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK8PF'),
    level = cms.string('L2Relative')
)


process.hltAK8PFJetCorrectorL3 = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK8PF'),
    level = cms.string('L3Absolute')
)


process.hltAK8PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(50.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    rParam = cms.double(0.8),
    src = cms.InputTag("hltParticleFlowTmp"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.hltAK8PFJetsCorrected = cms.EDProducer("CorrectedPFJetProducer",
    correctors = cms.VInputTag("hltAK8PFJetCorrector"),
    src = cms.InputTag("hltAK8PFJets")
)


process.hltAK8PFPuppiJetCorrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("hltAK8PFPuppiJetCorrectorL1", "hltAK8PFPuppiJetCorrectorL2", "hltAK8PFPuppiJetCorrectorL3")
)


process.hltAK8PFPuppiJetCorrectorL1 = cms.EDProducer("L1FastjetCorrectorProducer",
    algorithm = cms.string('AK8PFPuppi'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("hltFixedGridRhoFastjetAllTmp")
)


process.hltAK8PFPuppiJetCorrectorL2 = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK8PFPuppi'),
    level = cms.string('L2Relative')
)


process.hltAK8PFPuppiJetCorrectorL3 = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK8PFPuppi'),
    level = cms.string('L3Absolute')
)


process.hltAK8PFPuppiJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(True),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(50.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    rParam = cms.double(0.8),
    src = cms.InputTag("hltParticleFlowTmp"),
    srcPVs = cms.InputTag(""),
    srcWeights = cms.InputTag("hltPFPuppi"),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.hltAK8PFPuppiJetsCorrected = cms.EDProducer("CorrectedPFJetProducer",
    correctors = cms.VInputTag("hltAK8PFPuppiJetCorrector"),
    src = cms.InputTag("hltAK8PFPuppiJets")
)


process.hltAk4CaloJetsForTrk = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(True),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    puPtMin = cms.double(10),
    rParam = cms.double(0.4),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("hltPhase2TowerMakerForAll"),
    srcPVs = cms.InputTag("hltFirstStepPrimaryVerticesUnsorted"),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.hltCaloMET = cms.EDProducer("CaloMETProducer",
    alias = cms.string('RawCaloMET'),
    calculateSignificance = cms.bool(False),
    globalThreshold = cms.double(0.3),
    noHF = cms.bool(False),
    src = cms.InputTag("hltTowerMaker")
)


process.hltCsc2DRecHits = cms.EDProducer("CSCRecHitDProducer",
    CSCDebug = cms.untracked.bool(False),
    CSCNoOfTimeBinsForDynamicPedestal = cms.int32(2),
    CSCStripClusterChargeCut = cms.double(25.0),
    CSCStripPeakThreshold = cms.double(10.0),
    CSCStripxtalksOffset = cms.double(0.03),
    CSCUseCalibrations = cms.bool(True),
    CSCUseGasGainCorrections = cms.bool(False),
    CSCUseReducedWireTimeWindow = cms.bool(False),
    CSCUseStaticPedestals = cms.bool(False),
    CSCUseTimingCorrections = cms.bool(True),
    CSCWireClusterDeltaT = cms.int32(1),
    CSCWireTimeWindowHigh = cms.int32(15),
    CSCWireTimeWindowLow = cms.int32(0),
    CSCstripWireDeltaTime = cms.int32(8),
    ConstSyst_ME12 = cms.double(0.02),
    ConstSyst_ME13 = cms.double(0.03),
    ConstSyst_ME1a = cms.double(0.01),
    ConstSyst_ME1b = cms.double(0.02),
    ConstSyst_ME21 = cms.double(0.03),
    ConstSyst_ME22 = cms.double(0.03),
    ConstSyst_ME31 = cms.double(0.03),
    ConstSyst_ME32 = cms.double(0.03),
    ConstSyst_ME41 = cms.double(0.03),
    NoiseLevel_ME12 = cms.double(7.0),
    NoiseLevel_ME13 = cms.double(4.0),
    NoiseLevel_ME1a = cms.double(9.0),
    NoiseLevel_ME1b = cms.double(6.0),
    NoiseLevel_ME21 = cms.double(5.0),
    NoiseLevel_ME22 = cms.double(7.0),
    NoiseLevel_ME31 = cms.double(5.0),
    NoiseLevel_ME32 = cms.double(7.0),
    NoiseLevel_ME41 = cms.double(5.0),
    UseAverageTime = cms.bool(False),
    UseFivePoleFit = cms.bool(True),
    UseParabolaFit = cms.bool(False),
    XTasymmetry_ME12 = cms.double(0.015),
    XTasymmetry_ME13 = cms.double(0.02),
    XTasymmetry_ME1a = cms.double(0.023),
    XTasymmetry_ME1b = cms.double(0.01),
    XTasymmetry_ME21 = cms.double(0.023),
    XTasymmetry_ME22 = cms.double(0.023),
    XTasymmetry_ME31 = cms.double(0.023),
    XTasymmetry_ME32 = cms.double(0.023),
    XTasymmetry_ME41 = cms.double(0.023),
    readBadChambers = cms.bool(True),
    readBadChannels = cms.bool(False),
    stripDigiTag = cms.InputTag("simMuonCSCDigis","MuonCSCStripDigi"),
    wireDigiTag = cms.InputTag("simMuonCSCDigis","MuonCSCWireDigi")
)


process.hltCscSegments = cms.EDProducer("CSCSegmentProducer",
    algo_psets = cms.VPSet(
        cms.PSet(
            algo_name = cms.string('CSCSegAlgoSK'),
            algo_psets = cms.VPSet(
                cms.PSet(
                    chi2Max = cms.double(99999.0),
                    dPhiFineMax = cms.double(0.025),
                    dPhiMax = cms.double(0.003),
                    dRPhiFineMax = cms.double(8.0),
                    dRPhiMax = cms.double(8.0),
                    minLayersApart = cms.int32(2),
                    verboseInfo = cms.untracked.bool(True),
                    wideSeg = cms.double(3.0)
                ),
                cms.PSet(
                    chi2Max = cms.double(99999.0),
                    dPhiFineMax = cms.double(0.025),
                    dPhiMax = cms.double(0.025),
                    dRPhiFineMax = cms.double(3.0),
                    dRPhiMax = cms.double(8.0),
                    minLayersApart = cms.int32(2),
                    verboseInfo = cms.untracked.bool(True),
                    wideSeg = cms.double(3.0)
                )
            ),
            chamber_types = cms.vstring(
                'ME1/a',
                'ME1/b',
                'ME1/2',
                'ME1/3',
                'ME2/1',
                'ME2/2',
                'ME3/1',
                'ME3/2',
                'ME4/1',
                'ME4/2'
            ),
            parameters_per_chamber_type = cms.vint32(
                2, 1, 1, 1, 1,
                1, 1, 1, 1, 1
            )
        ),
        cms.PSet(
            algo_name = cms.string('CSCSegAlgoTC'),
            algo_psets = cms.VPSet(
                cms.PSet(
                    SegmentSorting = cms.int32(1),
                    chi2Max = cms.double(6000.0),
                    chi2ndfProbMin = cms.double(0.0001),
                    dPhiFineMax = cms.double(0.02),
                    dPhiMax = cms.double(0.003),
                    dRPhiFineMax = cms.double(6.0),
                    dRPhiMax = cms.double(1.2),
                    minLayersApart = cms.int32(2),
                    verboseInfo = cms.untracked.bool(True)
                ),
                cms.PSet(
                    SegmentSorting = cms.int32(1),
                    chi2Max = cms.double(6000.0),
                    chi2ndfProbMin = cms.double(0.0001),
                    dPhiFineMax = cms.double(0.013),
                    dPhiMax = cms.double(0.00198),
                    dRPhiFineMax = cms.double(3.0),
                    dRPhiMax = cms.double(0.6),
                    minLayersApart = cms.int32(2),
                    verboseInfo = cms.untracked.bool(True)
                )
            ),
            chamber_types = cms.vstring(
                'ME1/a',
                'ME1/b',
                'ME1/2',
                'ME1/3',
                'ME2/1',
                'ME2/2',
                'ME3/1',
                'ME3/2',
                'ME4/1',
                'ME4/2'
            ),
            parameters_per_chamber_type = cms.vint32(
                2, 1, 1, 1, 1,
                1, 1, 1, 1, 1
            )
        ),
        cms.PSet(
            algo_name = cms.string('CSCSegAlgoDF'),
            algo_psets = cms.VPSet(
                cms.PSet(
                    CSCSegmentDebug = cms.untracked.bool(False),
                    Pruning = cms.untracked.bool(False),
                    chi2Max = cms.double(5000.0),
                    dPhiFineMax = cms.double(0.025),
                    dRPhiFineMax = cms.double(8.0),
                    dXclusBoxMax = cms.double(8.0),
                    dYclusBoxMax = cms.double(8.0),
                    maxDPhi = cms.double(999.0),
                    maxDTheta = cms.double(999.0),
                    maxRatioResidualPrune = cms.double(3.0),
                    minHitsForPreClustering = cms.int32(10),
                    minHitsPerSegment = cms.int32(3),
                    minLayersApart = cms.int32(2),
                    nHitsPerClusterIsShower = cms.int32(20),
                    preClustering = cms.untracked.bool(False),
                    tanPhiMax = cms.double(0.5),
                    tanThetaMax = cms.double(1.2)
                ),
                cms.PSet(
                    CSCSegmentDebug = cms.untracked.bool(False),
                    Pruning = cms.untracked.bool(False),
                    chi2Max = cms.double(5000.0),
                    dPhiFineMax = cms.double(0.025),
                    dRPhiFineMax = cms.double(12.0),
                    dXclusBoxMax = cms.double(8.0),
                    dYclusBoxMax = cms.double(12.0),
                    maxDPhi = cms.double(999.0),
                    maxDTheta = cms.double(999.0),
                    maxRatioResidualPrune = cms.double(3.0),
                    minHitsForPreClustering = cms.int32(10),
                    minHitsPerSegment = cms.int32(3),
                    minLayersApart = cms.int32(2),
                    nHitsPerClusterIsShower = cms.int32(20),
                    preClustering = cms.untracked.bool(False),
                    tanPhiMax = cms.double(0.8),
                    tanThetaMax = cms.double(2.0)
                ),
                cms.PSet(
                    CSCSegmentDebug = cms.untracked.bool(False),
                    Pruning = cms.untracked.bool(False),
                    chi2Max = cms.double(5000.0),
                    dPhiFineMax = cms.double(0.025),
                    dRPhiFineMax = cms.double(8.0),
                    dXclusBoxMax = cms.double(8.0),
                    dYclusBoxMax = cms.double(8.0),
                    maxDPhi = cms.double(999.0),
                    maxDTheta = cms.double(999.0),
                    maxRatioResidualPrune = cms.double(3.0),
                    minHitsForPreClustering = cms.int32(30),
                    minHitsPerSegment = cms.int32(3),
                    minLayersApart = cms.int32(2),
                    nHitsPerClusterIsShower = cms.int32(20),
                    preClustering = cms.untracked.bool(False),
                    tanPhiMax = cms.double(0.5),
                    tanThetaMax = cms.double(1.2)
                )
            ),
            chamber_types = cms.vstring(
                'ME1/a',
                'ME1/b',
                'ME1/2',
                'ME1/3',
                'ME2/1',
                'ME2/2',
                'ME3/1',
                'ME3/2',
                'ME4/1',
                'ME4/2'
            ),
            parameters_per_chamber_type = cms.vint32(
                3, 1, 2, 2, 1,
                2, 1, 2, 1, 2
            )
        ),
        cms.PSet(
            algo_name = cms.string('CSCSegAlgoST'),
            algo_psets = cms.VPSet(
                cms.PSet(
                    BPMinImprovement = cms.double(10000.0),
                    BrutePruning = cms.bool(True),
                    CSCDebug = cms.untracked.bool(False),
                    CorrectTheErrors = cms.bool(True),
                    Covariance = cms.double(0.0),
                    ForceCovariance = cms.bool(False),
                    ForceCovarianceAll = cms.bool(False),
                    NormChi2Cut2D = cms.double(20.0),
                    NormChi2Cut3D = cms.double(10.0),
                    Pruning = cms.bool(True),
                    SeedBig = cms.double(0.0015),
                    SeedSmall = cms.double(0.0002),
                    curvePenalty = cms.double(2.0),
                    curvePenaltyThreshold = cms.double(0.85),
                    dPhiFineMax = cms.double(0.025),
                    dRPhiFineMax = cms.double(8.0),
                    dXclusBoxMax = cms.double(4.0),
                    dYclusBoxMax = cms.double(8.0),
                    hitDropLimit4Hits = cms.double(0.6),
                    hitDropLimit5Hits = cms.double(0.8),
                    hitDropLimit6Hits = cms.double(0.3333),
                    maxDPhi = cms.double(999.0),
                    maxDTheta = cms.double(999.0),
                    maxRatioResidualPrune = cms.double(3),
                    maxRecHitsInCluster = cms.int32(20),
                    minHitsPerSegment = cms.int32(3),
                    onlyBestSegment = cms.bool(False),
                    preClustering = cms.bool(True),
                    preClusteringUseChaining = cms.bool(True),
                    prePrun = cms.bool(True),
                    prePrunLimit = cms.double(3.17),
                    tanPhiMax = cms.double(0.5),
                    tanThetaMax = cms.double(1.2),
                    useShowering = cms.bool(False),
                    yweightPenalty = cms.double(1.5),
                    yweightPenaltyThreshold = cms.double(1.0)
                ),
                cms.PSet(
                    BPMinImprovement = cms.double(10000.0),
                    BrutePruning = cms.bool(True),
                    CSCDebug = cms.untracked.bool(False),
                    CorrectTheErrors = cms.bool(True),
                    Covariance = cms.double(0.0),
                    ForceCovariance = cms.bool(False),
                    ForceCovarianceAll = cms.bool(False),
                    NormChi2Cut2D = cms.double(20.0),
                    NormChi2Cut3D = cms.double(10.0),
                    Pruning = cms.bool(True),
                    SeedBig = cms.double(0.0015),
                    SeedSmall = cms.double(0.0002),
                    curvePenalty = cms.double(2.0),
                    curvePenaltyThreshold = cms.double(0.85),
                    dPhiFineMax = cms.double(0.025),
                    dRPhiFineMax = cms.double(8.0),
                    dXclusBoxMax = cms.double(4.0),
                    dYclusBoxMax = cms.double(8.0),
                    hitDropLimit4Hits = cms.double(0.6),
                    hitDropLimit5Hits = cms.double(0.8),
                    hitDropLimit6Hits = cms.double(0.3333),
                    maxDPhi = cms.double(999.0),
                    maxDTheta = cms.double(999.0),
                    maxRatioResidualPrune = cms.double(3),
                    maxRecHitsInCluster = cms.int32(24),
                    minHitsPerSegment = cms.int32(3),
                    onlyBestSegment = cms.bool(False),
                    preClustering = cms.bool(True),
                    preClusteringUseChaining = cms.bool(True),
                    prePrun = cms.bool(True),
                    prePrunLimit = cms.double(3.17),
                    tanPhiMax = cms.double(0.5),
                    tanThetaMax = cms.double(1.2),
                    useShowering = cms.bool(False),
                    yweightPenalty = cms.double(1.5),
                    yweightPenaltyThreshold = cms.double(1.0)
                )
            ),
            chamber_types = cms.vstring(
                'ME1/a',
                'ME1/b',
                'ME1/2',
                'ME1/3',
                'ME2/1',
                'ME2/2',
                'ME3/1',
                'ME3/2',
                'ME4/1',
                'ME4/2'
            ),
            parameters_per_chamber_type = cms.vint32(
                2, 1, 1, 1, 1,
                1, 1, 1, 1, 1
            )
        ),
        cms.PSet(
            algo_name = cms.string('CSCSegAlgoRU'),
            algo_psets = cms.VPSet(
                cms.PSet(
                    chi2Max = cms.double(100.0),
                    chi2Norm_2D_ = cms.double(35),
                    chi2_str = cms.double(50.0),
                    dPhiIntMax = cms.double(0.005),
                    dPhiMax = cms.double(0.006),
                    dRIntMax = cms.double(2.0),
                    dRMax = cms.double(1.5),
                    doCollisions = cms.bool(True),
                    enlarge = cms.bool(False),
                    minLayersApart = cms.int32(1),
                    wideSeg = cms.double(3.0)
                ),
                cms.PSet(
                    chi2Max = cms.double(100.0),
                    chi2Norm_2D_ = cms.double(35),
                    chi2_str = cms.double(50.0),
                    dPhiIntMax = cms.double(0.004),
                    dPhiMax = cms.double(0.005),
                    dRIntMax = cms.double(2.0),
                    dRMax = cms.double(1.5),
                    doCollisions = cms.bool(True),
                    enlarge = cms.bool(False),
                    minLayersApart = cms.int32(1),
                    wideSeg = cms.double(3.0)
                ),
                cms.PSet(
                    chi2Max = cms.double(100.0),
                    chi2Norm_2D_ = cms.double(35),
                    chi2_str = cms.double(50.0),
                    dPhiIntMax = cms.double(0.003),
                    dPhiMax = cms.double(0.004),
                    dRIntMax = cms.double(2.0),
                    dRMax = cms.double(1.5),
                    doCollisions = cms.bool(True),
                    enlarge = cms.bool(False),
                    minLayersApart = cms.int32(1),
                    wideSeg = cms.double(3.0)
                ),
                cms.PSet(
                    chi2Max = cms.double(60.0),
                    chi2Norm_2D_ = cms.double(20),
                    chi2_str = cms.double(30.0),
                    dPhiIntMax = cms.double(0.002),
                    dPhiMax = cms.double(0.003),
                    dRIntMax = cms.double(2.0),
                    dRMax = cms.double(1.5),
                    doCollisions = cms.bool(True),
                    enlarge = cms.bool(False),
                    minLayersApart = cms.int32(1),
                    wideSeg = cms.double(3.0)
                ),
                cms.PSet(
                    chi2Max = cms.double(180.0),
                    chi2Norm_2D_ = cms.double(60),
                    chi2_str = cms.double(80.0),
                    dPhiIntMax = cms.double(0.005),
                    dPhiMax = cms.double(0.007),
                    dRIntMax = cms.double(2.0),
                    dRMax = cms.double(1.5),
                    doCollisions = cms.bool(True),
                    enlarge = cms.bool(False),
                    minLayersApart = cms.int32(1),
                    wideSeg = cms.double(3.0)
                ),
                cms.PSet(
                    chi2Max = cms.double(100.0),
                    chi2Norm_2D_ = cms.double(35),
                    chi2_str = cms.double(50.0),
                    dPhiIntMax = cms.double(0.004),
                    dPhiMax = cms.double(0.006),
                    dRIntMax = cms.double(2.0),
                    dRMax = cms.double(1.5),
                    doCollisions = cms.bool(True),
                    enlarge = cms.bool(False),
                    minLayersApart = cms.int32(1),
                    wideSeg = cms.double(3.0)
                )
            ),
            chamber_types = cms.vstring(
                'ME1/a',
                'ME1/b',
                'ME1/2',
                'ME1/3',
                'ME2/1',
                'ME2/2',
                'ME3/1',
                'ME3/2',
                'ME4/1',
                'ME4/2'
            ),
            parameters_per_chamber_type = cms.vint32(
                1, 2, 3, 4, 5,
                6, 5, 6, 5, 6
            )
        )
    ),
    algo_type = cms.int32(5),
    inputObjects = cms.InputTag("hltCsc2DRecHits")
)


process.hltDeepBLifetimeTagInfosPFPuppi = cms.EDProducer("CandIPProducer",
    candidates = cms.InputTag("hltParticleFlowTmp"),
    computeGhostTrack = cms.bool(True),
    computeProbabilities = cms.bool(True),
    ghostTrackPriorDeltaR = cms.double(0.03),
    jetDirectionUsingGhostTrack = cms.bool(False),
    jetDirectionUsingTracks = cms.bool(False),
    jets = cms.InputTag("hltAK4PFPuppiJets"),
    maxDeltaR = cms.double(0.4),
    maximumChiSquared = cms.double(5.0),
    maximumLongitudinalImpactParameter = cms.double(17.0),
    maximumTransverseImpactParameter = cms.double(0.2),
    minimumNumberOfHits = cms.int32(3),
    minimumNumberOfPixelHits = cms.int32(2),
    minimumTransverseMomentum = cms.double(1.0),
    primaryVertex = cms.InputTag("hltOfflinePrimaryVertices"),
    useTrackQuality = cms.bool(False)
)


process.hltDeepBLifetimeTagInfosPFPuppiModEta2p4 = cms.EDProducer("CandIPProducer",
    candidates = cms.InputTag("hltParticleFlowTmp"),
    computeGhostTrack = cms.bool(True),
    computeProbabilities = cms.bool(True),
    ghostTrackPriorDeltaR = cms.double(0.03),
    jetDirectionUsingGhostTrack = cms.bool(False),
    jetDirectionUsingTracks = cms.bool(False),
    jets = cms.InputTag("hltPFPuppiJetForBtagEta2p4"),
    maxDeltaR = cms.double(0.4),
    maximumChiSquared = cms.double(5.0),
    maximumLongitudinalImpactParameter = cms.double(17.0),
    maximumTransverseImpactParameter = cms.double(0.2),
    minimumNumberOfHits = cms.int32(3),
    minimumNumberOfPixelHits = cms.int32(2),
    minimumTransverseMomentum = cms.double(1.0),
    primaryVertex = cms.InputTag("hltOfflinePrimaryVertices"),
    useTrackQuality = cms.bool(False)
)


process.hltDeepCombinedSecondaryVertexBJetTagsInfosPuppi = cms.EDProducer("DeepNNTagInfoProducer",
    computer = cms.PSet(
        SoftLeptonFlip = cms.bool(False),
        charmCut = cms.double(1.5),
        correctVertexMass = cms.bool(True),
        minimumTrackWeight = cms.double(0.5),
        pseudoMultiplicityMin = cms.uint32(2),
        pseudoVertexV0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        trackFlip = cms.bool(False),
        trackMultiplicityMin = cms.uint32(2),
        trackPairV0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.03)
        ),
        trackPseudoSelection = cms.PSet(
            a_dR = cms.double(-0.001053),
            a_pT = cms.double(0.005263),
            b_dR = cms.double(0.6263),
            b_pT = cms.double(0.3684),
            jetDeltaRMax = cms.double(0.3),
            maxDecayLen = cms.double(5),
            maxDistToAxis = cms.double(0.07),
            max_pT = cms.double(500),
            max_pT_dRcut = cms.double(0.1),
            max_pT_trackPTcut = cms.double(3),
            min_pT = cms.double(120),
            min_pT_dRcut = cms.double(0.5),
            normChi2Max = cms.double(99999.9),
            pixelHitsMin = cms.uint32(0),
            ptMin = cms.double(0.0),
            qualityClass = cms.string('any'),
            sip2dSigMax = cms.double(99999.9),
            sip2dSigMin = cms.double(2.0),
            sip2dValMax = cms.double(99999.9),
            sip2dValMin = cms.double(-99999.9),
            sip3dSigMax = cms.double(99999.9),
            sip3dSigMin = cms.double(-99999.9),
            sip3dValMax = cms.double(99999.9),
            sip3dValMin = cms.double(-99999.9),
            totalHitsMin = cms.uint32(3),
            useVariableJTA = cms.bool(False)
        ),
        trackSelection = cms.PSet(
            a_dR = cms.double(-0.001053),
            a_pT = cms.double(0.005263),
            b_dR = cms.double(0.6263),
            b_pT = cms.double(0.3684),
            jetDeltaRMax = cms.double(0.3),
            maxDecayLen = cms.double(5),
            maxDistToAxis = cms.double(0.07),
            max_pT = cms.double(500),
            max_pT_dRcut = cms.double(0.1),
            max_pT_trackPTcut = cms.double(3),
            min_pT = cms.double(120),
            min_pT_dRcut = cms.double(0.5),
            normChi2Max = cms.double(99999.9),
            pixelHitsMin = cms.uint32(2),
            ptMin = cms.double(0.0),
            qualityClass = cms.string('any'),
            sip2dSigMax = cms.double(99999.9),
            sip2dSigMin = cms.double(-99999.9),
            sip2dValMax = cms.double(99999.9),
            sip2dValMin = cms.double(-99999.9),
            sip3dSigMax = cms.double(99999.9),
            sip3dSigMin = cms.double(-99999.9),
            sip3dValMax = cms.double(99999.9),
            sip3dValMin = cms.double(-99999.9),
            totalHitsMin = cms.uint32(3),
            useVariableJTA = cms.bool(False)
        ),
        trackSort = cms.string('sip2dSig'),
        useTrackWeights = cms.bool(True),
        vertexFlip = cms.bool(False)
    ),
    svTagInfos = cms.InputTag("hltDeepSecondaryVertexTagInfosPFPuppi")
)


process.hltDeepCombinedSecondaryVertexBJetTagsInfosPuppiModEta2p4 = cms.EDProducer("DeepNNTagInfoProducer",
    computer = cms.PSet(
        SoftLeptonFlip = cms.bool(False),
        charmCut = cms.double(1.5),
        correctVertexMass = cms.bool(True),
        minimumTrackWeight = cms.double(0.5),
        pseudoMultiplicityMin = cms.uint32(2),
        pseudoVertexV0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        trackFlip = cms.bool(False),
        trackMultiplicityMin = cms.uint32(2),
        trackPairV0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.03)
        ),
        trackPseudoSelection = cms.PSet(
            a_dR = cms.double(-0.001053),
            a_pT = cms.double(0.005263),
            b_dR = cms.double(0.6263),
            b_pT = cms.double(0.3684),
            jetDeltaRMax = cms.double(0.3),
            maxDecayLen = cms.double(5),
            maxDistToAxis = cms.double(0.07),
            max_pT = cms.double(500),
            max_pT_dRcut = cms.double(0.1),
            max_pT_trackPTcut = cms.double(3),
            min_pT = cms.double(120),
            min_pT_dRcut = cms.double(0.5),
            normChi2Max = cms.double(99999.9),
            pixelHitsMin = cms.uint32(0),
            ptMin = cms.double(0.0),
            qualityClass = cms.string('any'),
            sip2dSigMax = cms.double(99999.9),
            sip2dSigMin = cms.double(2.0),
            sip2dValMax = cms.double(99999.9),
            sip2dValMin = cms.double(-99999.9),
            sip3dSigMax = cms.double(99999.9),
            sip3dSigMin = cms.double(-99999.9),
            sip3dValMax = cms.double(99999.9),
            sip3dValMin = cms.double(-99999.9),
            totalHitsMin = cms.uint32(3),
            useVariableJTA = cms.bool(False)
        ),
        trackSelection = cms.PSet(
            a_dR = cms.double(-0.001053),
            a_pT = cms.double(0.005263),
            b_dR = cms.double(0.6263),
            b_pT = cms.double(0.3684),
            jetDeltaRMax = cms.double(0.3),
            maxDecayLen = cms.double(5),
            maxDistToAxis = cms.double(0.07),
            max_pT = cms.double(500),
            max_pT_dRcut = cms.double(0.1),
            max_pT_trackPTcut = cms.double(3),
            min_pT = cms.double(120),
            min_pT_dRcut = cms.double(0.5),
            normChi2Max = cms.double(99999.9),
            pixelHitsMin = cms.uint32(2),
            ptMin = cms.double(0.0),
            qualityClass = cms.string('any'),
            sip2dSigMax = cms.double(99999.9),
            sip2dSigMin = cms.double(-99999.9),
            sip2dValMax = cms.double(99999.9),
            sip2dValMin = cms.double(-99999.9),
            sip3dSigMax = cms.double(99999.9),
            sip3dSigMin = cms.double(-99999.9),
            sip3dValMax = cms.double(99999.9),
            sip3dValMin = cms.double(-99999.9),
            totalHitsMin = cms.uint32(3),
            useVariableJTA = cms.bool(False)
        ),
        trackSort = cms.string('sip2dSig'),
        useTrackWeights = cms.bool(True),
        vertexFlip = cms.bool(False)
    ),
    svTagInfos = cms.InputTag("hltDeepSecondaryVertexTagInfosPFPuppiModEta2p4")
)


process.hltDeepCombinedSecondaryVertexBJetTagsPFPuppi = cms.EDProducer("DeepFlavourJetTagsProducer",
    NNConfig = cms.FileInPath('RecoBTag/Combined/data/DeepCSV_PhaseII.json'),
    checkSVForDefaults = cms.bool(True),
    meanPadding = cms.bool(True),
    src = cms.InputTag("hltDeepCombinedSecondaryVertexBJetTagsInfosPuppi"),
    toAdd = cms.PSet(
        probbb = cms.string('probb')
    )
)


process.hltDeepCombinedSecondaryVertexBJetTagsPFPuppiModEta2p4 = cms.EDProducer("DeepFlavourJetTagsProducer",
    NNConfig = cms.FileInPath('RecoBTag/Combined/data/DeepCSV_PhaseII.json'),
    checkSVForDefaults = cms.bool(True),
    meanPadding = cms.bool(True),
    src = cms.InputTag("hltDeepCombinedSecondaryVertexBJetTagsInfosPuppiModEta2p4"),
    toAdd = cms.PSet(
        probbb = cms.string('probb')
    )
)


process.hltDeepInclusiveMergedVerticesPF = cms.EDProducer("CandidateVertexMerger",
    maxFraction = cms.double(0.2),
    minSignificance = cms.double(10.0),
    secondaryVertices = cms.InputTag("hltDeepTrackVertexArbitratorPF")
)


process.hltDeepInclusiveSecondaryVerticesPF = cms.EDProducer("CandidateVertexMerger",
    maxFraction = cms.double(0.7),
    minSignificance = cms.double(2),
    secondaryVertices = cms.InputTag("hltDeepInclusiveVertexFinderPF")
)


process.hltDeepInclusiveVertexFinderPF = cms.EDProducer("InclusiveCandidateVertexFinder",
    beamSpot = cms.InputTag("hltOnlineBeamSpot"),
    clusterizer = cms.PSet(
        clusterMaxDistance = cms.double(0.05),
        clusterMaxSignificance = cms.double(4.5),
        clusterMinAngleCosine = cms.double(0.5),
        distanceRatio = cms.double(20),
        maxTimeSignificance = cms.double(3.5),
        seedMax3DIPSignificance = cms.double(9999),
        seedMax3DIPValue = cms.double(9999),
        seedMin3DIPSignificance = cms.double(1.2),
        seedMin3DIPValue = cms.double(0.005)
    ),
    fitterRatio = cms.double(0.25),
    fitterSigmacut = cms.double(3),
    fitterTini = cms.double(256),
    maxNTracks = cms.uint32(15),
    maximumLongitudinalImpactParameter = cms.double(0.2),
    maximumTimeSignificance = cms.double(3),
    mightGet = cms.optional.untracked.vstring,
    minHits = cms.uint32(8),
    minPt = cms.double(1.4),
    primaryVertices = cms.InputTag("hltOfflinePrimaryVertices"),
    tracks = cms.InputTag("hltParticleFlowTmp"),
    useDirectVertexFitter = cms.bool(True),
    useVertexReco = cms.bool(True),
    vertexMinAngleCosine = cms.double(0.95),
    vertexMinDLen2DSig = cms.double(2.5),
    vertexMinDLenSig = cms.double(0.5),
    vertexReco = cms.PSet(
        finder = cms.string('avr'),
        primcut = cms.double(1),
        seccut = cms.double(3),
        smoothing = cms.bool(True)
    )
)


process.hltDeepSecondaryVertexTagInfosPFPuppi = cms.EDProducer("CandSecondaryVertexProducer",
    beamSpotTag = cms.InputTag("hltOnlineBeamSpot"),
    constraint = cms.string('BeamSpot'),
    extSVCollection = cms.InputTag("hltDeepInclusiveMergedVerticesPF"),
    extSVDeltaRToJet = cms.double(0.3),
    minimumTrackWeight = cms.double(0.5),
    trackIPTagInfos = cms.InputTag("hltDeepBLifetimeTagInfosPFPuppi"),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(2),
        ptMin = cms.double(1.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(3),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip3dSig'),
    useExternalSV = cms.bool(True),
    usePVError = cms.bool(True),
    vertexCuts = cms.PSet(
        distSig2dMax = cms.double(99999.9),
        distSig2dMin = cms.double(2.0),
        distSig3dMax = cms.double(99999.9),
        distSig3dMin = cms.double(-99999.9),
        distVal2dMax = cms.double(2.5),
        distVal2dMin = cms.double(0.01),
        distVal3dMax = cms.double(99999.9),
        distVal3dMin = cms.double(-99999.9),
        fracPV = cms.double(0.79),
        massMax = cms.double(6.5),
        maxDeltaRToJetAxis = cms.double(0.4),
        minimumTrackWeight = cms.double(0.5),
        multiplicityMin = cms.uint32(2),
        useTrackWeights = cms.bool(True),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        )
    ),
    vertexReco = cms.PSet(
        finder = cms.string('avr'),
        minweight = cms.double(0.5),
        primcut = cms.double(1.8),
        seccut = cms.double(6.0),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001)
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    ),
    weights = cms.InputTag("hltPFPuppi")
)


process.hltDeepSecondaryVertexTagInfosPFPuppiModEta2p4 = cms.EDProducer("CandSecondaryVertexProducer",
    beamSpotTag = cms.InputTag("hltOnlineBeamSpot"),
    constraint = cms.string('BeamSpot'),
    extSVCollection = cms.InputTag("hltDeepInclusiveMergedVerticesPF"),
    extSVDeltaRToJet = cms.double(0.3),
    minimumTrackWeight = cms.double(0.5),
    trackIPTagInfos = cms.InputTag("hltDeepBLifetimeTagInfosPFPuppiModEta2p4"),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(2),
        ptMin = cms.double(1.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(3),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip3dSig'),
    useExternalSV = cms.bool(True),
    usePVError = cms.bool(True),
    vertexCuts = cms.PSet(
        distSig2dMax = cms.double(99999.9),
        distSig2dMin = cms.double(2.0),
        distSig3dMax = cms.double(99999.9),
        distSig3dMin = cms.double(-99999.9),
        distVal2dMax = cms.double(2.5),
        distVal2dMin = cms.double(0.01),
        distVal3dMax = cms.double(99999.9),
        distVal3dMin = cms.double(-99999.9),
        fracPV = cms.double(0.79),
        massMax = cms.double(6.5),
        maxDeltaRToJetAxis = cms.double(0.4),
        minimumTrackWeight = cms.double(0.5),
        multiplicityMin = cms.uint32(2),
        useTrackWeights = cms.bool(True),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        )
    ),
    vertexReco = cms.PSet(
        finder = cms.string('avr'),
        minweight = cms.double(0.5),
        primcut = cms.double(1.8),
        seccut = cms.double(6.0),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001)
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    )
)


process.hltDeepTrackVertexArbitratorPF = cms.EDProducer("CandidateVertexArbitrator",
    beamSpot = cms.InputTag("hltOnlineBeamSpot"),
    dLenFraction = cms.double(0.333),
    dRCut = cms.double(0.4),
    distCut = cms.double(0.04),
    fitterRatio = cms.double(0.25),
    fitterSigmacut = cms.double(3),
    fitterTini = cms.double(256),
    maxTimeSignificance = cms.double(3.5),
    mightGet = cms.optional.untracked.vstring,
    primaryVertices = cms.InputTag("hltOfflinePrimaryVertices"),
    secondaryVertices = cms.InputTag("hltDeepInclusiveSecondaryVerticesPF"),
    sigCut = cms.double(5),
    trackMinLayers = cms.int32(4),
    trackMinPixels = cms.int32(1),
    trackMinPt = cms.double(1.4),
    tracks = cms.InputTag("hltParticleFlowTmp")
)


process.hltDt1DRecHits = cms.EDProducer("DTRecHitProducer",
    debug = cms.untracked.bool(False),
    dtDigiLabel = cms.InputTag("simMuonDTDigis"),
    recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
    recAlgoConfig = cms.PSet(
        debug = cms.untracked.bool(False),
        doVdriftCorr = cms.bool(True),
        maxTime = cms.double(420.0),
        minTime = cms.double(-3.0),
        readLegacyTTrigDB = cms.bool(True),
        readLegacyVDriftDB = cms.bool(True),
        stepTwoFromDigi = cms.bool(False),
        tTrigMode = cms.string('DTTTrigSyncFromDB'),
        tTrigModeConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doT0Correction = cms.bool(True),
            doTOFCorrection = cms.bool(True),
            doWirePropCorrection = cms.bool(True),
            t0Label = cms.string(''),
            tTrigLabel = cms.string(''),
            tofCorrType = cms.int32(0),
            vPropWire = cms.double(24.4),
            wirePropCorrType = cms.int32(0)
        ),
        useUncertDB = cms.bool(True)
    )
)


process.hltDt4DSegments = cms.EDProducer("DTRecSegment4DProducer",
    Reco4DAlgoConfig = cms.PSet(
        AllDTRecHits = cms.bool(True),
        Reco2DAlgoConfig = cms.PSet(
            AlphaMaxPhi = cms.double(1.0),
            AlphaMaxTheta = cms.double(0.9),
            MaxAllowedHits = cms.uint32(50),
            MaxChi2 = cms.double(4.0),
            debug = cms.untracked.bool(False),
            hit_afterT0_resolution = cms.double(0.03),
            nSharedHitsMax = cms.int32(2),
            nUnSharedHitsMin = cms.int32(2),
            performT0SegCorrection = cms.bool(False),
            performT0_vdriftSegCorrection = cms.bool(False),
            perform_delta_rejecting = cms.bool(False),
            recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
            recAlgoConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doVdriftCorr = cms.bool(True),
                maxTime = cms.double(420.0),
                minTime = cms.double(-3.0),
                readLegacyTTrigDB = cms.bool(True),
                readLegacyVDriftDB = cms.bool(True),
                stepTwoFromDigi = cms.bool(False),
                tTrigMode = cms.string('DTTTrigSyncFromDB'),
                tTrigModeConfig = cms.PSet(
                    debug = cms.untracked.bool(False),
                    doT0Correction = cms.bool(True),
                    doTOFCorrection = cms.bool(True),
                    doWirePropCorrection = cms.bool(True),
                    t0Label = cms.string(''),
                    tTrigLabel = cms.string(''),
                    tofCorrType = cms.int32(0),
                    vPropWire = cms.double(24.4),
                    wirePropCorrType = cms.int32(0)
                ),
                useUncertDB = cms.bool(True)
            ),
            segmCleanerMode = cms.int32(2)
        ),
        Reco2DAlgoName = cms.string('DTMeantimerPatternReco'),
        debug = cms.untracked.bool(False),
        hit_afterT0_resolution = cms.double(0.03),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False),
        performT0_vdriftSegCorrection = cms.bool(False),
        perform_delta_rejecting = cms.bool(False),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doVdriftCorr = cms.bool(True),
            maxTime = cms.double(420.0),
            minTime = cms.double(-3.0),
            readLegacyTTrigDB = cms.bool(True),
            readLegacyVDriftDB = cms.bool(True),
            stepTwoFromDigi = cms.bool(False),
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            tTrigModeConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doT0Correction = cms.bool(True),
                doTOFCorrection = cms.bool(True),
                doWirePropCorrection = cms.bool(True),
                t0Label = cms.string(''),
                tTrigLabel = cms.string(''),
                tofCorrType = cms.int32(0),
                vPropWire = cms.double(24.4),
                wirePropCorrType = cms.int32(0)
            ),
            useUncertDB = cms.bool(True)
        )
    ),
    Reco4DAlgoName = cms.string('DTMeantimerPatternReco4D'),
    debug = cms.untracked.bool(False),
    recHits1DLabel = cms.InputTag("hltDt1DRecHits"),
    recHits2DLabel = cms.InputTag("dt2DSegments")
)


process.hltEcalBarrelClusterFastTimer = cms.EDProducer("EcalBarrelClusterFastTimer",
    ebClusters = cms.InputTag("hltParticleFlowClusterECALUncorrected"),
    ebTimeHits = cms.InputTag("hltEcalDetailedTimeRecHit","EcalRecHitsEB"),
    ecalDepth = cms.double(7.0),
    minEnergyToConsider = cms.double(0.0),
    minFractionToConsider = cms.double(0.1),
    resolutionModels = cms.VPSet(cms.PSet(
        modelName = cms.string('PerfectResolutionModel')
    )),
    timedVertices = cms.InputTag("hltOfflinePrimaryVertices4D")
)


process.hltEcalBarrelDigisInRegions = cms.EDProducer("HLTEcalEBDigisInRegionsProducer",
    etaPhiRegions = cms.VPSet(cms.PSet(
        inputColl = cms.InputTag("hltL1TEGammaFilteredCollectionProducer"),
        maxDEta = cms.double(0.0),
        maxDPhi = cms.double(0.0),
        maxDeltaR = cms.double(0.35),
        maxEt = cms.double(999999.0),
        minEt = cms.double(5.0),
        type = cms.string('L1P2GTCandidate')
    )),
    inputCollTags = cms.VInputTag("hltEcalDigis:ebDigis"),
    outputProductNames = cms.vstring('ebDigis')
)


process.hltEcalDetIdToBeRecovered = cms.EDProducer("EcalDetIdToBeRecoveredProducer",
    ebDetIdToBeRecovered = cms.string('ebDetId'),
    ebFEToBeRecovered = cms.string('ebFE'),
    ebIntegrityChIdErrors = cms.InputTag("hltEcalDigis","EcalIntegrityChIdErrors"),
    ebIntegrityGainErrors = cms.InputTag("hltEcalDigis","EcalIntegrityGainErrors"),
    ebIntegrityGainSwitchErrors = cms.InputTag("hltEcalDigis","EcalIntegrityGainSwitchErrors"),
    ebSrFlagCollection = cms.InputTag("hltEcalDigis"),
    eeDetIdToBeRecovered = cms.string('eeDetId'),
    eeFEToBeRecovered = cms.string('eeFE'),
    eeIntegrityChIdErrors = cms.InputTag("hltEcalDigis","EcalIntegrityChIdErrors"),
    eeIntegrityGainErrors = cms.InputTag("hltEcalDigis","EcalIntegrityGainErrors"),
    eeIntegrityGainSwitchErrors = cms.InputTag("hltEcalDigis","EcalIntegrityGainSwitchErrors"),
    eeSrFlagCollection = cms.InputTag("hltEcalDigis"),
    integrityBlockSizeErrors = cms.InputTag("hltEcalDigis","EcalIntegrityBlockSizeErrors"),
    integrityTTIdErrors = cms.InputTag("hltEcalDigis","EcalIntegrityTTIdErrors")
)


process.hltEcalDetailedTimeRecHit = cms.EDProducer("EcalDetailedTimeRecHitProducer",
    EBDetailedTimeRecHitCollection = cms.string('EcalRecHitsEB'),
    EBRecHitCollection = cms.InputTag("hltEcalRecHit","EcalRecHitsEB"),
    EBTimeDigiCollection = cms.InputTag("mix","EBTimeDigi"),
    EBTimeLayer = cms.int32(7),
    EEDetailedTimeRecHitCollection = cms.string('EcalRecHitsEE'),
    EERecHitCollection = cms.InputTag("hltEcalRecHit","EcalRecHitsEE"),
    EETimeDigiCollection = cms.InputTag("mix","EETimeDigi"),
    EETimeLayer = cms.int32(3),
    correctForVertexZPosition = cms.bool(False),
    simVertex = cms.InputTag("g4SimHits"),
    useMCTruthVertex = cms.bool(False)
)


process.hltEcalDigis = cms.EDProducer("EcalRawToDigi",
    DoRegional = cms.bool(False),
    FEDs = cms.vint32(
        601, 602, 603, 604, 605,
        606, 607, 608, 609, 610,
        611, 612, 613, 614, 615,
        616, 617, 618, 619, 620,
        621, 622, 623, 624, 625,
        626, 627, 628, 629, 630,
        631, 632, 633, 634, 635,
        636, 637, 638, 639, 640,
        641, 642, 643, 644, 645,
        646, 647, 648, 649, 650,
        651, 652, 653, 654
    ),
    FedLabel = cms.InputTag("listfeds"),
    InputLabel = cms.InputTag("rawDataCollector"),
    eventPut = cms.bool(True),
    feIdCheck = cms.bool(True),
    feUnpacking = cms.bool(True),
    forceToKeepFRData = cms.bool(False),
    headerUnpacking = cms.bool(True),
    memUnpacking = cms.bool(True),
    mightGet = cms.optional.untracked.vstring,
    numbTriggerTSamples = cms.int32(1),
    numbXtalTSamples = cms.int32(10),
    orderedDCCIdList = cms.vint32(
        1, 2, 3, 4, 5,
        6, 7, 8, 9, 10,
        11, 12, 13, 14, 15,
        16, 17, 18, 19, 20,
        21, 22, 23, 24, 25,
        26, 27, 28, 29, 30,
        31, 32, 33, 34, 35,
        36, 37, 38, 39, 40,
        41, 42, 43, 44, 45,
        46, 47, 48, 49, 50,
        51, 52, 53, 54
    ),
    orderedFedList = cms.vint32(
        601, 602, 603, 604, 605,
        606, 607, 608, 609, 610,
        611, 612, 613, 614, 615,
        616, 617, 618, 619, 620,
        621, 622, 623, 624, 625,
        626, 627, 628, 629, 630,
        631, 632, 633, 634, 635,
        636, 637, 638, 639, 640,
        641, 642, 643, 644, 645,
        646, 647, 648, 649, 650,
        651, 652, 653, 654
    ),
    silentMode = cms.untracked.bool(True),
    srpUnpacking = cms.bool(True),
    syncCheck = cms.bool(True),
    tccUnpacking = cms.bool(True)
)


process.hltEcalMultiFitUncalibRecHit = cms.EDProducer("EcalUncalibRecHitProducer",
    EBdigiCollection = cms.InputTag("hltEcalDigis","ebDigis"),
    EBhitCollection = cms.string('EcalUncalibRecHitsEB'),
    EEdigiCollection = cms.InputTag("hltEcalDigis","eeDigis"),
    EEhitCollection = cms.string('EcalUncalibRecHitsEE'),
    algo = cms.string('EcalUncalibRecHitWorkerMultiFit'),
    algoPSet = cms.PSet(
        EBamplitudeFitParameters = cms.vdouble(1.138, 1.652),
        EBtimeConstantTerm = cms.double(0.6),
        EBtimeFitLimits_Lower = cms.double(0.2),
        EBtimeFitLimits_Upper = cms.double(1.4),
        EBtimeFitParameters = cms.vdouble(
            -2.015452, 3.130702, -12.3473, 41.88921, -82.83944,
            91.01147, -50.35761, 11.05621
        ),
        EBtimeNconst = cms.double(28.5),
        EEamplitudeFitParameters = cms.vdouble(1.89, 1.4),
        EEtimeConstantTerm = cms.double(1.0),
        EEtimeFitLimits_Lower = cms.double(0.2),
        EEtimeFitLimits_Upper = cms.double(1.4),
        EEtimeFitParameters = cms.vdouble(
            -2.390548, 3.553628, -17.62341, 67.67538, -133.213,
            140.7432, -75.41106, 16.20277
        ),
        EEtimeNconst = cms.double(31.8),
        activeBXs = cms.vint32(
            -5, -4, -3, -2, -1,
            0, 1, 2, 3, 4
        ),
        addPedestalUncertaintyEB = cms.double(0.0),
        addPedestalUncertaintyEE = cms.double(0.0),
        ampErrorCalculation = cms.bool(True),
        amplitudeThresholdEB = cms.double(10),
        amplitudeThresholdEE = cms.double(10),
        doPrefitEB = cms.bool(False),
        doPrefitEE = cms.bool(False),
        dynamicPedestalsEB = cms.bool(False),
        dynamicPedestalsEE = cms.bool(False),
        gainSwitchUseMaxSampleEB = cms.bool(True),
        gainSwitchUseMaxSampleEE = cms.bool(False),
        mitigateBadSamplesEB = cms.bool(False),
        mitigateBadSamplesEE = cms.bool(False),
        outOfTimeThresholdGain12mEB = cms.double(5),
        outOfTimeThresholdGain12mEE = cms.double(1000),
        outOfTimeThresholdGain12pEB = cms.double(5),
        outOfTimeThresholdGain12pEE = cms.double(1000),
        outOfTimeThresholdGain61mEB = cms.double(5),
        outOfTimeThresholdGain61mEE = cms.double(1000),
        outOfTimeThresholdGain61pEB = cms.double(5),
        outOfTimeThresholdGain61pEE = cms.double(1000),
        prefitMaxChiSqEB = cms.double(25.0),
        prefitMaxChiSqEE = cms.double(10.0),
        selectiveBadSampleCriteriaEB = cms.bool(False),
        selectiveBadSampleCriteriaEE = cms.bool(False),
        simplifiedNoiseModelForGainSwitch = cms.bool(True),
        timealgo = cms.string('RatioMethod'),
        useLumiInfoRunHeader = cms.bool(True)
    )
)


process.hltEcalRecHit = cms.EDProducer("EcalRecHitProducer",
    ChannelStatusToBeExcluded = cms.vstring(
        'kDAC',
        'kNoisy',
        'kNNoisy',
        'kFixedG6',
        'kFixedG1',
        'kFixedG0',
        'kNonRespondingIsolated',
        'kDeadVFE',
        'kDeadFE',
        'kNoDataNoTP'
    ),
    EBLaserMAX = cms.double(3.0),
    EBLaserMIN = cms.double(0.5),
    EBrechitCollection = cms.string('EcalRecHitsEB'),
    EBuncalibRecHitCollection = cms.InputTag("hltEcalMultiFitUncalibRecHit","EcalUncalibRecHitsEB"),
    EELaserMAX = cms.double(8.0),
    EELaserMIN = cms.double(0.5),
    EErechitCollection = cms.string('EcalRecHitsEE'),
    EEuncalibRecHitCollection = cms.InputTag("hltEcalMultiFitUncalibRecHit","EcalUncalibRecHitsEE"),
    algo = cms.string('EcalRecHitWorkerSimple'),
    algoRecover = cms.string('EcalRecHitWorkerRecover'),
    bdtWeightFileCracks = cms.FileInPath('RecoLocalCalo/EcalDeadChannelRecoveryAlgos/data/BDTWeights/bdtgAllRH_8GT700MeV_onlyCracks_ZskimData2017_v1.xml'),
    bdtWeightFileNoCracks = cms.FileInPath('RecoLocalCalo/EcalDeadChannelRecoveryAlgos/data/BDTWeights/bdtgAllRH_8GT700MeV_noCracks_ZskimData2017_v1.xml'),
    cleaningConfig = cms.PSet(
        cThreshold_barrel = cms.double(4),
        cThreshold_double = cms.double(10),
        cThreshold_endcap = cms.double(15),
        e4e1Threshold_barrel = cms.double(0.08),
        e4e1Threshold_endcap = cms.double(0.3),
        e4e1_a_barrel = cms.double(0.02),
        e4e1_a_endcap = cms.double(0.02),
        e4e1_b_barrel = cms.double(0.02),
        e4e1_b_endcap = cms.double(-0.0125),
        e6e2thresh = cms.double(0.04),
        ignoreOutOfTimeThresh = cms.double(1000000000.0),
        tightenCrack_e1_double = cms.double(2),
        tightenCrack_e1_single = cms.double(1),
        tightenCrack_e4e1_single = cms.double(2.5),
        tightenCrack_e6e2_double = cms.double(3)
    ),
    dbStatusToBeExcludedEB = cms.vint32(14, 78, 142),
    dbStatusToBeExcludedEE = cms.vint32(14, 78, 142),
    ebDetIdToBeRecovered = cms.InputTag("hltEcalDetIdToBeRecovered","ebDetId"),
    ebFEToBeRecovered = cms.InputTag("hltEcalDetIdToBeRecovered","ebFE"),
    eeDetIdToBeRecovered = cms.InputTag("hltEcalDetIdToBeRecovered","eeDetId"),
    eeFEToBeRecovered = cms.InputTag("hltEcalDetIdToBeRecovered","eeFE"),
    flagsMapDBReco = cms.PSet(
        kDead = cms.vstring('kNoDataNoTP'),
        kGood = cms.vstring(
            'kOk',
            'kDAC',
            'kNoLaser',
            'kNoisy'
        ),
        kNeighboursRecovered = cms.vstring(
            'kFixedG0',
            'kNonRespondingIsolated',
            'kDeadVFE'
        ),
        kNoisy = cms.vstring(
            'kNNoisy',
            'kFixedG6',
            'kFixedG1'
        ),
        kTowerRecovered = cms.vstring('kDeadFE')
    ),
    killDeadChannels = cms.bool(True),
    laserCorrection = cms.bool(True),
    logWarningEtThreshold_EB_FE = cms.double(50),
    logWarningEtThreshold_EE_FE = cms.double(50),
    recoverEBFE = cms.bool(True),
    recoverEBIsolatedChannels = cms.bool(False),
    recoverEBVFE = cms.bool(False),
    recoverEEFE = cms.bool(True),
    recoverEEIsolatedChannels = cms.bool(False),
    recoverEEVFE = cms.bool(False),
    singleChannelRecoveryMethod = cms.string('BDTG'),
    singleChannelRecoveryThreshold = cms.double(0.7),
    skipTimeCalib = cms.bool(False),
    sum8ChannelRecoveryThreshold = cms.double(0.0),
    triggerPrimitiveDigiCollection = cms.InputTag("hltEcalDigis","EcalTriggerPrimitives")
)


process.hltEcalRecHitL1Seeded = cms.EDProducer("EcalRecHitProducer",
    ChannelStatusToBeExcluded = cms.vstring(
        'kDAC',
        'kNoisy',
        'kNNoisy',
        'kFixedG6',
        'kFixedG1',
        'kFixedG0',
        'kNonRespondingIsolated',
        'kDeadVFE',
        'kDeadFE',
        'kNoDataNoTP'
    ),
    EBLaserMAX = cms.double(3.0),
    EBLaserMIN = cms.double(0.5),
    EBrechitCollection = cms.string('EcalRecHitsEB'),
    EBuncalibRecHitCollection = cms.InputTag("hltEcalUncalibRecHitL1Seeded","EcalUncalibRecHitsEB"),
    EELaserMAX = cms.double(8.0),
    EELaserMIN = cms.double(0.5),
    EErechitCollection = cms.string('EcalRecHitsEE'),
    EEuncalibRecHitCollection = cms.InputTag("hltEcalUncalibRecHitL1Seeded","EcalUncalibRecHitsEE"),
    algo = cms.string('EcalRecHitWorkerSimple'),
    algoRecover = cms.string('EcalRecHitWorkerRecover'),
    bdtWeightFileCracks = cms.FileInPath('RecoLocalCalo/EcalDeadChannelRecoveryAlgos/data/BDTWeights/bdtgAllRH_8GT700MeV_onlyCracks_ZskimData2017_v1.xml'),
    bdtWeightFileNoCracks = cms.FileInPath('RecoLocalCalo/EcalDeadChannelRecoveryAlgos/data/BDTWeights/bdtgAllRH_8GT700MeV_noCracks_ZskimData2017_v1.xml'),
    cleaningConfig = cms.PSet(
        cThreshold_barrel = cms.double(4),
        cThreshold_double = cms.double(10),
        cThreshold_endcap = cms.double(15),
        e4e1Threshold_barrel = cms.double(0.08),
        e4e1Threshold_endcap = cms.double(0.3),
        e4e1_a_barrel = cms.double(0.02),
        e4e1_a_endcap = cms.double(0.02),
        e4e1_b_barrel = cms.double(0.02),
        e4e1_b_endcap = cms.double(-0.0125),
        e6e2thresh = cms.double(0.04),
        ignoreOutOfTimeThresh = cms.double(1000000000.0),
        tightenCrack_e1_double = cms.double(2),
        tightenCrack_e1_single = cms.double(1),
        tightenCrack_e4e1_single = cms.double(2.5),
        tightenCrack_e6e2_double = cms.double(3)
    ),
    dbStatusToBeExcludedEB = cms.vint32(14, 78, 142),
    dbStatusToBeExcludedEE = cms.vint32(14, 78, 142),
    ebDetIdToBeRecovered = cms.InputTag("hltEcalDetIdToBeRecovered","ebDetId"),
    ebFEToBeRecovered = cms.InputTag("hltEcalDetIdToBeRecovered","ebFE"),
    eeDetIdToBeRecovered = cms.InputTag("hltEcalDetIdToBeRecovered","eeDetId"),
    eeFEToBeRecovered = cms.InputTag("hltEcalDetIdToBeRecovered","eeFE"),
    flagsMapDBReco = cms.PSet(
        kDead = cms.vstring('kNoDataNoTP'),
        kGood = cms.vstring(
            'kOk',
            'kDAC',
            'kNoLaser',
            'kNoisy'
        ),
        kNeighboursRecovered = cms.vstring(
            'kFixedG0',
            'kNonRespondingIsolated',
            'kDeadVFE'
        ),
        kNoisy = cms.vstring(
            'kNNoisy',
            'kFixedG6',
            'kFixedG1'
        ),
        kTowerRecovered = cms.vstring('kDeadFE')
    ),
    killDeadChannels = cms.bool(True),
    laserCorrection = cms.bool(True),
    logWarningEtThreshold_EB_FE = cms.double(50),
    logWarningEtThreshold_EE_FE = cms.double(50),
    recoverEBFE = cms.bool(True),
    recoverEBIsolatedChannels = cms.bool(False),
    recoverEBVFE = cms.bool(False),
    recoverEEFE = cms.bool(True),
    recoverEEIsolatedChannels = cms.bool(False),
    recoverEEVFE = cms.bool(False),
    singleChannelRecoveryMethod = cms.string('BDTG'),
    singleChannelRecoveryThreshold = cms.double(0.7),
    skipTimeCalib = cms.bool(False),
    sum8ChannelRecoveryThreshold = cms.double(0.0),
    triggerPrimitiveDigiCollection = cms.InputTag("hltEcalDigis","EcalTriggerPrimitives")
)


process.hltEcalUncalibRecHitL1Seeded = cms.EDProducer("EcalUncalibRecHitProducer",
    EBdigiCollection = cms.InputTag("hltEcalBarrelDigisInRegions","ebDigis"),
    EBhitCollection = cms.string('EcalUncalibRecHitsEB'),
    EEdigiCollection = cms.InputTag("hltEcalDigis","eeDigis"),
    EEhitCollection = cms.string('EcalUncalibRecHitsEE'),
    algo = cms.string('EcalUncalibRecHitWorkerMultiFit'),
    algoPSet = cms.PSet(
        EBamplitudeFitParameters = cms.vdouble(1.138, 1.652),
        EBtimeConstantTerm = cms.double(0.6),
        EBtimeFitLimits_Lower = cms.double(0.2),
        EBtimeFitLimits_Upper = cms.double(1.4),
        EBtimeFitParameters = cms.vdouble(
            -2.015452, 3.130702, -12.3473, 41.88921, -82.83944,
            91.01147, -50.35761, 11.05621
        ),
        EBtimeNconst = cms.double(28.5),
        EEamplitudeFitParameters = cms.vdouble(1.89, 1.4),
        EEtimeConstantTerm = cms.double(1.0),
        EEtimeFitLimits_Lower = cms.double(0.2),
        EEtimeFitLimits_Upper = cms.double(1.4),
        EEtimeFitParameters = cms.vdouble(
            -2.390548, 3.553628, -17.62341, 67.67538, -133.213,
            140.7432, -75.41106, 16.20277
        ),
        EEtimeNconst = cms.double(31.8),
        activeBXs = cms.vint32(
            -5, -4, -3, -2, -1,
            0, 1, 2, 3, 4
        ),
        addPedestalUncertaintyEB = cms.double(0.0),
        addPedestalUncertaintyEE = cms.double(0.0),
        ampErrorCalculation = cms.bool(True),
        amplitudeThresholdEB = cms.double(10),
        amplitudeThresholdEE = cms.double(10),
        doPrefitEB = cms.bool(False),
        doPrefitEE = cms.bool(False),
        dynamicPedestalsEB = cms.bool(False),
        dynamicPedestalsEE = cms.bool(False),
        gainSwitchUseMaxSampleEB = cms.bool(True),
        gainSwitchUseMaxSampleEE = cms.bool(False),
        mitigateBadSamplesEB = cms.bool(False),
        mitigateBadSamplesEE = cms.bool(False),
        outOfTimeThresholdGain12mEB = cms.double(5),
        outOfTimeThresholdGain12mEE = cms.double(1000),
        outOfTimeThresholdGain12pEB = cms.double(5),
        outOfTimeThresholdGain12pEE = cms.double(1000),
        outOfTimeThresholdGain61mEB = cms.double(5),
        outOfTimeThresholdGain61mEE = cms.double(1000),
        outOfTimeThresholdGain61pEB = cms.double(5),
        outOfTimeThresholdGain61pEE = cms.double(1000),
        prefitMaxChiSqEB = cms.double(25.0),
        prefitMaxChiSqEE = cms.double(10.0),
        selectiveBadSampleCriteriaEB = cms.bool(False),
        selectiveBadSampleCriteriaEE = cms.bool(False),
        simplifiedNoiseModelForGainSwitch = cms.bool(True),
        timealgo = cms.string('RatioMethod'),
        useLumiInfoRunHeader = cms.bool(True)
    )
)


process.hltEgammaBestGsfTrackVarsL1Seeded = cms.EDProducer("EgammaHLTGsfTrackVarProducer",
    beamSpotProducer = cms.InputTag("hltOnlineBeamSpot"),
    inputCollection = cms.InputTag("hltEgammaGsfElectronsL1Seeded"),
    lowerTrackNrToRemoveCut = cms.int32(-1),
    recoEcalCandidateProducer = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    upperTrackNrToRemoveCut = cms.int32(9999),
    useDefaultValuesForBarrel = cms.bool(False),
    useDefaultValuesForEndcap = cms.bool(False)
)


process.hltEgammaBestGsfTrackVarsUnseeded = cms.EDProducer("EgammaHLTGsfTrackVarProducer",
    beamSpotProducer = cms.InputTag("hltOnlineBeamSpot"),
    inputCollection = cms.InputTag("hltEgammaGsfElectronsUnseeded"),
    lowerTrackNrToRemoveCut = cms.int32(-1),
    recoEcalCandidateProducer = cms.InputTag("hltEgammaCandidatesUnseeded"),
    upperTrackNrToRemoveCut = cms.int32(9999),
    useDefaultValuesForBarrel = cms.bool(False),
    useDefaultValuesForEndcap = cms.bool(False)
)


process.hltEgammaCandidatesL1Seeded = cms.EDProducer("EgammaHLTRecoEcalCandidateProducers",
    recoEcalCandidateCollection = cms.string(''),
    scHybridBarrelProducer = cms.InputTag("hltParticleFlowSuperClusterECALL1Seeded","particleFlowSuperClusterECALBarrel"),
    scIslandEndcapProducer = cms.InputTag("hltParticleFlowSuperClusterHGCalFromTICLL1Seeded")
)


process.hltEgammaCandidatesUnseeded = cms.EDProducer("EgammaHLTRecoEcalCandidateProducers",
    recoEcalCandidateCollection = cms.string(''),
    scHybridBarrelProducer = cms.InputTag("hltParticleFlowSuperClusterECALUnseeded","particleFlowSuperClusterECALBarrel"),
    scIslandEndcapProducer = cms.InputTag("hltParticleFlowSuperClusterHGCalFromTICLUnseeded")
)


process.hltEgammaCkfTrackCandidatesForGSFL1Seeded = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("hltMeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('HLTPSetTrajectoryBuilderForGsfElectrons')
    ),
    TrajectoryCleaner = cms.string('hltESPTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(1000000),
    maxSeedsBeforeCleaning = cms.uint32(1000),
    reverseTrajectories = cms.bool(False),
    src = cms.InputTag("hltEgammaElectronPixelSeedsL1Seeded"),
    useHitsSplitting = cms.bool(True)
)


process.hltEgammaCkfTrackCandidatesForGSFUnseeded = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("hltMeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('HLTPSetTrajectoryBuilderForGsfElectrons')
    ),
    TrajectoryCleaner = cms.string('hltESPTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(1000000),
    maxSeedsBeforeCleaning = cms.uint32(1000),
    reverseTrajectories = cms.bool(False),
    src = cms.InputTag("hltEgammaElectronPixelSeedsUnseeded"),
    useHitsSplitting = cms.bool(True)
)


process.hltEgammaClusterShapeL1Seeded = cms.EDProducer("EgammaHLTClusterShapeProducer",
    ecalRechitEB = cms.InputTag("hltRechitInRegionsECAL","EcalRecHitsEB"),
    ecalRechitEE = cms.InputTag("hltRechitInRegionsECAL","EcalRecHitsEE"),
    recoEcalCandidateProducer = cms.InputTag("hltEgammaCandidatesL1Seeded")
)


process.hltEgammaClusterShapeUnseeded = cms.EDProducer("EgammaHLTClusterShapeProducer",
    ecalRechitEB = cms.InputTag("hltEcalRecHit","EcalRecHitsEB"),
    ecalRechitEE = cms.InputTag("hltEcalRecHit","EcalRecHitsEE"),
    recoEcalCandidateProducer = cms.InputTag("hltEgammaCandidatesUnseeded")
)


process.hltEgammaEcalPFClusterIsoL1Seeded = cms.EDProducer("EgammaHLTEcalPFClusterIsolationProducer",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    doRhoCorrection = cms.bool(False),
    drMax = cms.double(0.2),
    drVetoBarrel = cms.double(0.0),
    drVetoEndcap = cms.double(0.0),
    effectiveAreas = cms.vdouble(0.29, 0.21),
    energyBarrel = cms.double(0.0),
    energyEndcap = cms.double(0.0),
    etaStripBarrel = cms.double(0.0),
    etaStripEndcap = cms.double(0.0),
    pfClusterProducer = cms.InputTag("hltParticleFlowClusterECALL1Seeded"),
    recoEcalCandidateProducer = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    rhoMax = cms.double(99999999.0),
    rhoProducer = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    rhoScale = cms.double(1.0)
)


process.hltEgammaEcalPFClusterIsoUnseeded = cms.EDProducer("EgammaHLTEcalPFClusterIsolationProducer",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    doRhoCorrection = cms.bool(False),
    drMax = cms.double(0.2),
    drVetoBarrel = cms.double(0.0),
    drVetoEndcap = cms.double(0.0),
    effectiveAreas = cms.vdouble(0.29, 0.21),
    energyBarrel = cms.double(0.0),
    energyEndcap = cms.double(0.0),
    etaStripBarrel = cms.double(0.0),
    etaStripEndcap = cms.double(0.0),
    pfClusterProducer = cms.InputTag("hltParticleFlowClusterECALUnseeded"),
    recoEcalCandidateProducer = cms.InputTag("hltEgammaCandidatesUnseeded"),
    rhoMax = cms.double(99999999.0),
    rhoProducer = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    rhoScale = cms.double(1.0)
)


process.hltEgammaEleGsfTrackIsoL1Seeded = cms.EDProducer("EgammaHLTElectronTrackIsolationProducers",
    beamSpotProducer = cms.InputTag("hltOnlineBeamSpot"),
    egTrkIsoConeSize = cms.double(0.3),
    egTrkIsoPtMin = cms.double(1.0),
    egTrkIsoRSpan = cms.double(999999.0),
    egTrkIsoStripBarrel = cms.double(0.01),
    egTrkIsoStripEndcap = cms.double(0.01),
    egTrkIsoVetoConeSizeBarrel = cms.double(0.01),
    egTrkIsoVetoConeSizeEndcap = cms.double(0.01),
    egTrkIsoZSpan = cms.double(0.15),
    electronProducer = cms.InputTag("hltEgammaGsfElectronsL1Seeded"),
    recoEcalCandidateProducer = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    trackProducer = cms.InputTag("hltGeneralTracks"),
    useGsfTrack = cms.bool(True),
    useSCRefs = cms.bool(True)
)


process.hltEgammaEleGsfTrackIsoUnseeded = cms.EDProducer("EgammaHLTElectronTrackIsolationProducers",
    beamSpotProducer = cms.InputTag("hltOnlineBeamSpot"),
    egTrkIsoConeSize = cms.double(0.3),
    egTrkIsoPtMin = cms.double(1.0),
    egTrkIsoRSpan = cms.double(999999.0),
    egTrkIsoStripBarrel = cms.double(0.01),
    egTrkIsoStripEndcap = cms.double(0.01),
    egTrkIsoVetoConeSizeBarrel = cms.double(0.01),
    egTrkIsoVetoConeSizeEndcap = cms.double(0.01),
    egTrkIsoZSpan = cms.double(0.15),
    electronProducer = cms.InputTag("hltEgammaGsfElectronsUnseeded"),
    recoEcalCandidateProducer = cms.InputTag("hltEgammaCandidatesUnseeded"),
    trackProducer = cms.InputTag("hltGeneralTracks"),
    useGsfTrack = cms.bool(True),
    useSCRefs = cms.bool(True)
)


process.hltEgammaEleGsfTrackIsoV6L1Seeded = cms.EDProducer("EgammaHLTElectronTrackIsolationProducers",
    beamSpotProducer = cms.InputTag("hltOnlineBeamSpot"),
    egTrkIsoConeSize = cms.double(0.3),
    egTrkIsoPtMin = cms.double(1.0),
    egTrkIsoRSpan = cms.double(999999.0),
    egTrkIsoStripBarrel = cms.double(0.01),
    egTrkIsoStripEndcap = cms.double(0.01),
    egTrkIsoVetoConeSizeBarrel = cms.double(0.01),
    egTrkIsoVetoConeSizeEndcap = cms.double(0.01),
    egTrkIsoZSpan = cms.double(0.15),
    electronProducer = cms.InputTag("hltEgammaGsfElectronsL1Seeded"),
    recoEcalCandidateProducer = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    trackProducer = cms.InputTag("hltGeneralTracks"),
    useGsfTrack = cms.bool(True),
    useSCRefs = cms.bool(True)
)


process.hltEgammaEleGsfTrackIsoV6Unseeded = cms.EDProducer("EgammaHLTElectronTrackIsolationProducers",
    beamSpotProducer = cms.InputTag("hltOnlineBeamSpot"),
    egTrkIsoConeSize = cms.double(0.3),
    egTrkIsoPtMin = cms.double(1.0),
    egTrkIsoRSpan = cms.double(999999.0),
    egTrkIsoStripBarrel = cms.double(0.01),
    egTrkIsoStripEndcap = cms.double(0.01),
    egTrkIsoVetoConeSizeBarrel = cms.double(0.01),
    egTrkIsoVetoConeSizeEndcap = cms.double(0.01),
    egTrkIsoZSpan = cms.double(0.15),
    electronProducer = cms.InputTag("hltEgammaGsfElectronsUnseeded"),
    recoEcalCandidateProducer = cms.InputTag("hltEgammaCandidatesUnseeded"),
    trackProducer = cms.InputTag("hltGeneralTracks"),
    useGsfTrack = cms.bool(True),
    useSCRefs = cms.bool(True)
)


process.hltEgammaEleL1TrkIsoL1Seeded = cms.EDProducer("EgammaHLTEleL1TrackIsolProducer",
    ecalCands = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    eles = cms.InputTag("hltEgammaGsfElectronsL1Seeded"),
    isolCfg = cms.PSet(
        etaBoundaries = cms.vdouble(1.5),
        trkCuts = cms.VPSet(
            cms.PSet(
                maxDR = cms.double(0.3),
                maxDZ = cms.double(0.7),
                minDEta = cms.double(0.003),
                minDR = cms.double(0.01),
                minPt = cms.double(2.0)
            ),
            cms.PSet(
                maxDR = cms.double(0.3),
                maxDZ = cms.double(0.7),
                minDEta = cms.double(0.003),
                minDR = cms.double(0.01),
                minPt = cms.double(2.0)
            )
        ),
        useAbsEta = cms.bool(True)
    ),
    l1Tracks = cms.InputTag("l1tTTTracksFromTrackletEmulation","Level1TTTracks")
)


process.hltEgammaEleL1TrkIsoUnseeded = cms.EDProducer("EgammaHLTEleL1TrackIsolProducer",
    ecalCands = cms.InputTag("hltEgammaCandidatesUnseeded"),
    eles = cms.InputTag("hltEgammaGsfElectronsUnseeded"),
    isolCfg = cms.PSet(
        etaBoundaries = cms.vdouble(1.5),
        trkCuts = cms.VPSet(
            cms.PSet(
                maxDR = cms.double(0.3),
                maxDZ = cms.double(0.7),
                minDEta = cms.double(0.003),
                minDR = cms.double(0.01),
                minPt = cms.double(2.0)
            ),
            cms.PSet(
                maxDR = cms.double(0.3),
                maxDZ = cms.double(0.7),
                minDEta = cms.double(0.003),
                minDR = cms.double(0.01),
                minPt = cms.double(2.0)
            )
        ),
        useAbsEta = cms.bool(True)
    ),
    l1Tracks = cms.InputTag("l1tTTTracksFromTrackletEmulation","Level1TTTracks")
)


process.hltEgammaElectronPixelSeedsL1Seeded = cms.EDProducer("ElectronNHitSeedProducer",
    beamSpot = cms.InputTag("hltOnlineBeamSpot"),
    initialSeeds = cms.InputTag("hltElePixelSeedsCombinedL1Seeded"),
    matcherConfig = cms.PSet(
        detLayerGeom = cms.ESInputTag("","GlobalDetLayerGeometry"),
        enableHitSkipping = cms.bool(True),
        matchingCuts = cms.VPSet(
            cms.PSet(
                dPhiMaxHighEt = cms.vdouble(0.05),
                dPhiMaxHighEtThres = cms.vdouble(20.0),
                dPhiMaxLowEtGrad = cms.vdouble(-0.002),
                dRZMaxHighEt = cms.vdouble(9999.0),
                dRZMaxHighEtThres = cms.vdouble(0.0),
                dRZMaxLowEtGrad = cms.vdouble(0.0),
                version = cms.int32(2)
            ),
            cms.PSet(
                dPhiMaxHighEt = cms.vdouble(0.003),
                dPhiMaxHighEtThres = cms.vdouble(0.0),
                dPhiMaxLowEtGrad = cms.vdouble(0.0),
                dRZMaxHighEt = cms.vdouble(0.05),
                dRZMaxHighEtThres = cms.vdouble(30.0),
                dRZMaxLowEtGrad = cms.vdouble(-0.002),
                etaBins = cms.vdouble(),
                version = cms.int32(2)
            ),
            cms.PSet(
                dPhiMaxHighEt = cms.vdouble(0.003),
                dPhiMaxHighEtThres = cms.vdouble(0.0),
                dPhiMaxLowEtGrad = cms.vdouble(0.0),
                dRZMaxHighEt = cms.vdouble(0.05),
                dRZMaxHighEtThres = cms.vdouble(30.0),
                dRZMaxLowEtGrad = cms.vdouble(-0.002),
                etaBins = cms.vdouble(),
                version = cms.int32(2)
            )
        ),
        minNrHits = cms.vuint32(2, 3),
        minNrHitsValidLayerBins = cms.vint32(4),
        navSchool = cms.ESInputTag("","SimpleNavigationSchool"),
        requireExactMatchCount = cms.bool(False),
        useParamMagFieldIfDefined = cms.bool(True),
        useRecoVertex = cms.bool(False)
    ),
    measTkEvt = cms.InputTag("hltMeasurementTrackerEvent"),
    superClusters = cms.VInputTag("hltEgammaSuperClustersToPixelMatchL1Seeded"),
    vertices = cms.InputTag("")
)


process.hltEgammaElectronPixelSeedsUnseeded = cms.EDProducer("ElectronNHitSeedProducer",
    beamSpot = cms.InputTag("hltOnlineBeamSpot"),
    initialSeeds = cms.InputTag("hltElePixelSeedsCombinedUnseeded"),
    matcherConfig = cms.PSet(
        detLayerGeom = cms.ESInputTag("","GlobalDetLayerGeometry"),
        enableHitSkipping = cms.bool(True),
        matchingCuts = cms.VPSet(
            cms.PSet(
                dPhiMaxHighEt = cms.vdouble(0.05),
                dPhiMaxHighEtThres = cms.vdouble(20.0),
                dPhiMaxLowEtGrad = cms.vdouble(-0.002),
                dRZMaxHighEt = cms.vdouble(9999.0),
                dRZMaxHighEtThres = cms.vdouble(0.0),
                dRZMaxLowEtGrad = cms.vdouble(0.0),
                version = cms.int32(2)
            ),
            cms.PSet(
                dPhiMaxHighEt = cms.vdouble(0.003),
                dPhiMaxHighEtThres = cms.vdouble(0.0),
                dPhiMaxLowEtGrad = cms.vdouble(0.0),
                dRZMaxHighEt = cms.vdouble(0.05),
                dRZMaxHighEtThres = cms.vdouble(30.0),
                dRZMaxLowEtGrad = cms.vdouble(-0.002),
                etaBins = cms.vdouble(),
                version = cms.int32(2)
            ),
            cms.PSet(
                dPhiMaxHighEt = cms.vdouble(0.003),
                dPhiMaxHighEtThres = cms.vdouble(0.0),
                dPhiMaxLowEtGrad = cms.vdouble(0.0),
                dRZMaxHighEt = cms.vdouble(0.05),
                dRZMaxHighEtThres = cms.vdouble(30.0),
                dRZMaxLowEtGrad = cms.vdouble(-0.002),
                etaBins = cms.vdouble(),
                version = cms.int32(2)
            )
        ),
        minNrHits = cms.vuint32(2, 3),
        minNrHitsValidLayerBins = cms.vint32(4),
        navSchool = cms.ESInputTag("","SimpleNavigationSchool"),
        requireExactMatchCount = cms.bool(False),
        useParamMagFieldIfDefined = cms.bool(True),
        useRecoVertex = cms.bool(False)
    ),
    measTkEvt = cms.InputTag("hltMeasurementTrackerEvent"),
    superClusters = cms.VInputTag("hltEgammaSuperClustersToPixelMatchUnseeded"),
    vertices = cms.InputTag("")
)


process.hltEgammaGsfElectronsL1Seeded = cms.EDProducer("EgammaHLTPixelMatchElectronProducers",
    BSProducer = cms.InputTag("hltOnlineBeamSpot"),
    GsfTrackProducer = cms.InputTag("hltEgammaGsfTracksL1Seeded"),
    TrackProducer = cms.InputTag(""),
    UseGsfTracks = cms.bool(True)
)


process.hltEgammaGsfElectronsUnseeded = cms.EDProducer("EgammaHLTPixelMatchElectronProducers",
    BSProducer = cms.InputTag("hltOnlineBeamSpot"),
    GsfTrackProducer = cms.InputTag("hltEgammaGsfTracksUnseeded"),
    TrackProducer = cms.InputTag(""),
    UseGsfTracks = cms.bool(True)
)


process.hltEgammaGsfTrackVarsL1Seeded = cms.EDProducer("EgammaHLTGsfTrackVarProducer",
    beamSpotProducer = cms.InputTag("hltOnlineBeamSpot"),
    inputCollection = cms.InputTag("hltEgammaGsfTracksL1Seeded"),
    lowerTrackNrToRemoveCut = cms.int32(-1),
    recoEcalCandidateProducer = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    upperTrackNrToRemoveCut = cms.int32(9999),
    useDefaultValuesForBarrel = cms.bool(False),
    useDefaultValuesForEndcap = cms.bool(False)
)


process.hltEgammaGsfTrackVarsUnseeded = cms.EDProducer("EgammaHLTGsfTrackVarProducer",
    beamSpotProducer = cms.InputTag("hltOnlineBeamSpot"),
    inputCollection = cms.InputTag("hltEgammaGsfTracksUnseeded"),
    lowerTrackNrToRemoveCut = cms.int32(-1),
    recoEcalCandidateProducer = cms.InputTag("hltEgammaCandidatesUnseeded"),
    upperTrackNrToRemoveCut = cms.int32(9999),
    useDefaultValuesForBarrel = cms.bool(False),
    useDefaultValuesForEndcap = cms.bool(False)
)


process.hltEgammaGsfTracksL1Seeded = cms.EDProducer("GsfTrackProducer",
    AlgorithmName = cms.string('gsf'),
    Fitter = cms.string('GsfElectronFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("hltMeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('fwdGsfElectronPropagator'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(False),
    beamSpot = cms.InputTag("hltOnlineBeamSpot"),
    producer = cms.string(''),
    src = cms.InputTag("hltEgammaCkfTrackCandidatesForGSFL1Seeded"),
    useHitsSplitting = cms.bool(False)
)


process.hltEgammaGsfTracksUnseeded = cms.EDProducer("GsfTrackProducer",
    AlgorithmName = cms.string('gsf'),
    Fitter = cms.string('GsfElectronFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("hltMeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('fwdGsfElectronPropagator'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(False),
    beamSpot = cms.InputTag("hltOnlineBeamSpot"),
    producer = cms.string(''),
    src = cms.InputTag("hltEgammaCkfTrackCandidatesForGSFUnseeded"),
    useHitsSplitting = cms.bool(False)
)


process.hltEgammaHGCALIDVarsL1Seeded = cms.EDProducer("EgammaHLTHGCalIDVarProducer",
    hgcalRecHits = cms.InputTag("hltParticleFlowRecHitHGCL1Seeded"),
    layerClusters = cms.InputTag("hltHgcalMergeLayerClustersL1Seeded"),
    rCylinder = cms.double(2.8),
    recoEcalCandidateProducer = cms.InputTag("hltEgammaCandidatesL1Seeded")
)


process.hltEgammaHGCALIDVarsUnseeded = cms.EDProducer("EgammaHLTHGCalIDVarProducer",
    hgcalRecHits = cms.InputTag("hltParticleFlowRecHitHGC"),
    layerClusters = cms.InputTag("hltHgcalMergeLayerClusters"),
    rCylinder = cms.double(2.8),
    recoEcalCandidateProducer = cms.InputTag("hltEgammaCandidatesUnseeded")
)


process.hltEgammaHGCalLayerClusterIsoL1Seeded = cms.EDProducer("EgammaHLTHGCalLayerClusterIsolationProducer",
    doRhoCorrection = cms.bool(False),
    drMax = cms.double(0.2),
    drVetoEM = cms.double(0.02),
    drVetoHad = cms.double(0.0),
    layerClusterProducer = cms.InputTag("hltHgcalMergeLayerClustersL1Seeded"),
    minEnergyEM = cms.double(0.02),
    minEnergyHad = cms.double(0.07),
    recoEcalCandidateProducer = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    useEt = cms.bool(False)
)


process.hltEgammaHGCalLayerClusterIsoUnseeded = cms.EDProducer("EgammaHLTHGCalLayerClusterIsolationProducer",
    doRhoCorrection = cms.bool(False),
    drMax = cms.double(0.2),
    drVetoEM = cms.double(0.02),
    drVetoHad = cms.double(0.0),
    layerClusterProducer = cms.InputTag("hltHgcalMergeLayerClusters"),
    minEnergyEM = cms.double(0.02),
    minEnergyHad = cms.double(0.07),
    recoEcalCandidateProducer = cms.InputTag("hltEgammaCandidatesUnseeded"),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    useEt = cms.bool(False)
)


process.hltEgammaHcalPFClusterIsoL1Seeded = cms.EDProducer("EgammaHLTHcalPFClusterIsolationProducer",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    doRhoCorrection = cms.bool(False),
    drMax = cms.double(0.3),
    drVetoBarrel = cms.double(0.0),
    drVetoEndcap = cms.double(0.0),
    effectiveAreas = cms.vdouble(0.2, 0.25),
    energyBarrel = cms.double(0.0),
    energyEndcap = cms.double(0.0),
    etaStripBarrel = cms.double(0.0),
    etaStripEndcap = cms.double(0.0),
    pfClusterProducerHCAL = cms.InputTag("hltParticleFlowClusterHCAL"),
    pfClusterProducerHFEM = cms.InputTag(""),
    pfClusterProducerHFHAD = cms.InputTag(""),
    recoEcalCandidateProducer = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    rhoMax = cms.double(99999999.0),
    rhoProducer = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    rhoScale = cms.double(1.0),
    useEt = cms.bool(True),
    useHF = cms.bool(False)
)


process.hltEgammaHcalPFClusterIsoUnseeded = cms.EDProducer("EgammaHLTHcalPFClusterIsolationProducer",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    doRhoCorrection = cms.bool(False),
    drMax = cms.double(0.3),
    drVetoBarrel = cms.double(0.0),
    drVetoEndcap = cms.double(0.0),
    effectiveAreas = cms.vdouble(0.2, 0.25),
    energyBarrel = cms.double(0.0),
    energyEndcap = cms.double(0.0),
    etaStripBarrel = cms.double(0.0),
    etaStripEndcap = cms.double(0.0),
    pfClusterProducerHCAL = cms.InputTag("hltParticleFlowClusterHCAL"),
    pfClusterProducerHFEM = cms.InputTag(""),
    pfClusterProducerHFHAD = cms.InputTag(""),
    recoEcalCandidateProducer = cms.InputTag("hltEgammaCandidatesUnseeded"),
    rhoMax = cms.double(99999999.0),
    rhoProducer = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    rhoScale = cms.double(1.0),
    useEt = cms.bool(True),
    useHF = cms.bool(False)
)


process.hltEgammaHollowTrackIsoL1Seeded = cms.EDProducer("EgammaHLTPhotonTrackIsolationProducersRegional",
    countTracks = cms.bool(False),
    egTrkIsoConeSize = cms.double(0.29),
    egTrkIsoPtMin = cms.double(1.0),
    egTrkIsoRSpan = cms.double(999999.0),
    egTrkIsoStripBarrel = cms.double(0.03),
    egTrkIsoStripEndcap = cms.double(0.03),
    egTrkIsoVetoConeSize = cms.double(0.06),
    egTrkIsoZSpan = cms.double(999999.0),
    recoEcalCandidateProducer = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    trackProducer = cms.InputTag("hltGeneralTracks")
)


process.hltEgammaHollowTrackIsoUnseeded = cms.EDProducer("EgammaHLTPhotonTrackIsolationProducersRegional",
    countTracks = cms.bool(False),
    egTrkIsoConeSize = cms.double(0.29),
    egTrkIsoPtMin = cms.double(1.0),
    egTrkIsoRSpan = cms.double(999999.0),
    egTrkIsoStripBarrel = cms.double(0.03),
    egTrkIsoStripEndcap = cms.double(0.03),
    egTrkIsoVetoConeSize = cms.double(0.06),
    egTrkIsoZSpan = cms.double(999999.0),
    recoEcalCandidateProducer = cms.InputTag("hltEgammaCandidatesUnseeded"),
    trackProducer = cms.InputTag("hltGeneralTracks")
)


process.hltEgammaHoverEL1Seeded = cms.EDProducer("EgammaHLTHcalVarProducerFromRecHit",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    depth = cms.int32(0),
    doEtSum = cms.bool(False),
    doRhoCorrection = cms.bool(False),
    eThresHB = cms.vdouble(0.1, 0.2, 0.3, 0.3),
    eThresHE = cms.vdouble(
        0.1, 0.2, 0.2, 0.2, 0.2,
        0.2, 0.2
    ),
    effectiveAreas = cms.vdouble(0.105, 0.17),
    etThresHB = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    etThresHE = cms.vdouble(
        0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0
    ),
    hbheRecHitsTag = cms.InputTag("hltHbhereco"),
    innerCone = cms.double(0.0),
    maxSeverityHB = cms.int32(9),
    maxSeverityHE = cms.int32(9),
    outerCone = cms.double(0.14),
    recoEcalCandidateProducer = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    rhoMax = cms.double(99999999.0),
    rhoProducer = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    rhoScale = cms.double(1.0),
    usePFThresholdsFromDB = cms.bool(True),
    useSingleTower = cms.bool(False)
)


process.hltEgammaHoverEUnseeded = cms.EDProducer("EgammaHLTHcalVarProducerFromRecHit",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    depth = cms.int32(0),
    doEtSum = cms.bool(False),
    doRhoCorrection = cms.bool(False),
    eThresHB = cms.vdouble(0.1, 0.2, 0.3, 0.3),
    eThresHE = cms.vdouble(
        0.1, 0.2, 0.2, 0.2, 0.2,
        0.2, 0.2
    ),
    effectiveAreas = cms.vdouble(0.105, 0.17),
    etThresHB = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    etThresHE = cms.vdouble(
        0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0
    ),
    hbheRecHitsTag = cms.InputTag("hltHbhereco"),
    innerCone = cms.double(0.0),
    maxSeverityHB = cms.int32(9),
    maxSeverityHE = cms.int32(9),
    outerCone = cms.double(0.14),
    recoEcalCandidateProducer = cms.InputTag("hltEgammaCandidatesUnseeded"),
    rhoMax = cms.double(99999999.0),
    rhoProducer = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    rhoScale = cms.double(1.0),
    usePFThresholdsFromDB = cms.bool(True),
    useSingleTower = cms.bool(False)
)


process.hltEgammaPixelMatchVarsL1Seeded = cms.EDProducer("EgammaHLTPixelMatchVarProducer",
    dPhi1SParams = cms.PSet(
        bins = cms.VPSet(
            cms.PSet(
                binType = cms.string('AbsEtaClus'),
                funcParams = cms.vdouble(0.00273931, -0.00251994, 0.00324979),
                funcType = cms.string('TF1:=pol2'),
                xMax = cms.double(1.5),
                xMin = cms.double(0.0),
                yMax = cms.int32(1),
                yMin = cms.int32(1)
            ),
            cms.PSet(
                binType = cms.string('AbsEtaClus'),
                funcParams = cms.vdouble(0.00465536, -0.00170883, 0.0022395),
                funcType = cms.string('TF1:=pol2'),
                xMax = cms.double(1.5),
                xMin = cms.double(0.0),
                yMax = cms.int32(2),
                yMin = cms.int32(2)
            ),
            cms.PSet(
                binType = cms.string('AbsEtaClus'),
                funcParams = cms.vdouble(0.00612202, -0.000985677, 0.00230772),
                funcType = cms.string('TF1:=pol2'),
                xMax = cms.double(1.5),
                xMin = cms.double(0.0),
                yMax = cms.int32(99999),
                yMin = cms.int32(3)
            ),
            cms.PSet(
                binType = cms.string('AbsEtaClus'),
                funcParams = cms.vdouble(0.0379945, -0.0334501, 0.00799893),
                funcType = cms.string('TF1:=pol2'),
                xMax = cms.double(2.4),
                xMin = cms.double(1.5),
                yMax = cms.int32(1),
                yMin = cms.int32(1)
            ),
            cms.PSet(
                binType = cms.string('AbsEtaClus'),
                funcParams = cms.vdouble(0.00579179, -0.00956301, 0.00357333),
                funcType = cms.string('TF1:=pol2'),
                xMax = cms.double(4.0),
                xMin = cms.double(2.4),
                yMax = cms.int32(1),
                yMin = cms.int32(1)
            ),
            cms.PSet(
                binType = cms.string('AbsEtaClus'),
                funcParams = cms.vdouble(0.0294649, -0.0235045, 0.00566937),
                funcType = cms.string('TF1:=pol2'),
                xMax = cms.double(4.0),
                xMin = cms.double(1.5),
                yMax = cms.int32(2),
                yMin = cms.int32(2)
            ),
            cms.PSet(
                binType = cms.string('AbsEtaClus'),
                funcParams = cms.vdouble(0.0227801, -0.00899003),
                funcType = cms.string('TF1:=pol1'),
                xMax = cms.double(2.0),
                xMin = cms.double(1.5),
                yMax = cms.int32(99999),
                yMin = cms.int32(3)
            ),
            cms.PSet(
                binType = cms.string('AbsEtaClus'),
                funcParams = cms.vdouble(-0.0448686, 0.0405059, -0.00789926),
                funcType = cms.string('TF1:=pol2'),
                xMax = cms.double(4.0),
                xMin = cms.double(2.0),
                yMax = cms.int32(99999),
                yMin = cms.int32(3)
            )
        )
    ),
    dPhi2SParams = cms.PSet(
        bins = cms.VPSet(
            cms.PSet(
                binType = cms.string('AbsEtaClus'),
                funcParams = cms.vdouble(0.000262924, -0.00012575),
                funcType = cms.string('TF1:=pol1'),
                xMax = cms.double(0.6),
                xMin = cms.double(0.0),
                yMax = cms.int32(99999),
                yMin = cms.int32(1)
            ),
            cms.PSet(
                binType = cms.string('AbsEtaClus'),
                funcParams = cms.vdouble(-0.000283732, 0.00105965, -0.000460304),
                funcType = cms.string('TF1:=pol2'),
                xMax = cms.double(1.47),
                xMin = cms.double(0.6),
                yMax = cms.int32(99999),
                yMin = cms.int32(1)
            ),
            cms.PSet(
                binType = cms.string('AbsEtaClus'),
                funcParams = cms.vdouble(0.00172122, 0.00149787, 0.000370645),
                funcType = cms.string('TF1:=pol2'),
                xMax = cms.double(4.0),
                xMin = cms.double(1.47),
                yMax = cms.int32(99999),
                yMin = cms.int32(1)
            )
        )
    ),
    dRZ2SParams = cms.PSet(
        bins = cms.VPSet(
            cms.PSet(
                binType = cms.string('AbsEtaClus'),
                funcParams = cms.vdouble(0.00502445, -0.0047799, 0.00808078),
                funcType = cms.string('TF1:=pol2'),
                xMax = cms.double(1.13),
                xMin = cms.double(0.0),
                yMax = cms.int32(99999),
                yMin = cms.int32(1)
            ),
            cms.PSet(
                binType = cms.string('AbsEtaClus'),
                funcParams = cms.vdouble(0.2007, -0.305712, 0.121756),
                funcType = cms.string('TF1:=pol2'),
                xMax = cms.double(1.48),
                xMin = cms.double(1.13),
                yMax = cms.int32(99999),
                yMin = cms.int32(1)
            ),
            cms.PSet(
                binType = cms.string('AbsEtaClus'),
                funcParams = cms.vdouble(0.169387, -0.177821, 0.0477192),
                funcType = cms.string('TF1:=pol2'),
                xMax = cms.double(1.9),
                xMin = cms.double(1.48),
                yMax = cms.int32(99999),
                yMin = cms.int32(1)
            ),
            cms.PSet(
                binType = cms.string('AbsEtaClus'),
                funcParams = cms.vdouble(0.0245799, -0.0197369, 0.00451283),
                funcType = cms.string('TF1:=pol2'),
                xMax = cms.double(4.0),
                xMin = cms.double(1.9),
                yMax = cms.int32(99999),
                yMin = cms.int32(1)
            )
        )
    ),
    pixelSeedsProducer = cms.InputTag("hltEgammaElectronPixelSeedsL1Seeded"),
    productsToWrite = cms.int32(0),
    recoEcalCandidateProducer = cms.InputTag("hltEgammaCandidatesL1Seeded")
)


process.hltEgammaPixelMatchVarsUnseeded = cms.EDProducer("EgammaHLTPixelMatchVarProducer",
    dPhi1SParams = cms.PSet(
        bins = cms.VPSet(
            cms.PSet(
                binType = cms.string('AbsEtaClus'),
                funcParams = cms.vdouble(0.00273931, -0.00251994, 0.00324979),
                funcType = cms.string('TF1:=pol2'),
                xMax = cms.double(1.5),
                xMin = cms.double(0.0),
                yMax = cms.int32(1),
                yMin = cms.int32(1)
            ),
            cms.PSet(
                binType = cms.string('AbsEtaClus'),
                funcParams = cms.vdouble(0.00465536, -0.00170883, 0.0022395),
                funcType = cms.string('TF1:=pol2'),
                xMax = cms.double(1.5),
                xMin = cms.double(0.0),
                yMax = cms.int32(2),
                yMin = cms.int32(2)
            ),
            cms.PSet(
                binType = cms.string('AbsEtaClus'),
                funcParams = cms.vdouble(0.00612202, -0.000985677, 0.00230772),
                funcType = cms.string('TF1:=pol2'),
                xMax = cms.double(1.5),
                xMin = cms.double(0.0),
                yMax = cms.int32(99999),
                yMin = cms.int32(3)
            ),
            cms.PSet(
                binType = cms.string('AbsEtaClus'),
                funcParams = cms.vdouble(0.0379945, -0.0334501, 0.00799893),
                funcType = cms.string('TF1:=pol2'),
                xMax = cms.double(2.4),
                xMin = cms.double(1.5),
                yMax = cms.int32(1),
                yMin = cms.int32(1)
            ),
            cms.PSet(
                binType = cms.string('AbsEtaClus'),
                funcParams = cms.vdouble(0.00579179, -0.00956301, 0.00357333),
                funcType = cms.string('TF1:=pol2'),
                xMax = cms.double(4.0),
                xMin = cms.double(2.4),
                yMax = cms.int32(1),
                yMin = cms.int32(1)
            ),
            cms.PSet(
                binType = cms.string('AbsEtaClus'),
                funcParams = cms.vdouble(0.0294649, -0.0235045, 0.00566937),
                funcType = cms.string('TF1:=pol2'),
                xMax = cms.double(4.0),
                xMin = cms.double(1.5),
                yMax = cms.int32(2),
                yMin = cms.int32(2)
            ),
            cms.PSet(
                binType = cms.string('AbsEtaClus'),
                funcParams = cms.vdouble(0.0227801, -0.00899003),
                funcType = cms.string('TF1:=pol1'),
                xMax = cms.double(2.0),
                xMin = cms.double(1.5),
                yMax = cms.int32(99999),
                yMin = cms.int32(3)
            ),
            cms.PSet(
                binType = cms.string('AbsEtaClus'),
                funcParams = cms.vdouble(-0.0448686, 0.0405059, -0.00789926),
                funcType = cms.string('TF1:=pol2'),
                xMax = cms.double(4.0),
                xMin = cms.double(2.0),
                yMax = cms.int32(99999),
                yMin = cms.int32(3)
            )
        )
    ),
    dPhi2SParams = cms.PSet(
        bins = cms.VPSet(
            cms.PSet(
                binType = cms.string('AbsEtaClus'),
                funcParams = cms.vdouble(0.000262924, -0.00012575),
                funcType = cms.string('TF1:=pol1'),
                xMax = cms.double(0.6),
                xMin = cms.double(0.0),
                yMax = cms.int32(99999),
                yMin = cms.int32(1)
            ),
            cms.PSet(
                binType = cms.string('AbsEtaClus'),
                funcParams = cms.vdouble(-0.000283732, 0.00105965, -0.000460304),
                funcType = cms.string('TF1:=pol2'),
                xMax = cms.double(1.47),
                xMin = cms.double(0.6),
                yMax = cms.int32(99999),
                yMin = cms.int32(1)
            ),
            cms.PSet(
                binType = cms.string('AbsEtaClus'),
                funcParams = cms.vdouble(0.00172122, 0.00149787, 0.000370645),
                funcType = cms.string('TF1:=pol2'),
                xMax = cms.double(4.0),
                xMin = cms.double(1.47),
                yMax = cms.int32(99999),
                yMin = cms.int32(1)
            )
        )
    ),
    dRZ2SParams = cms.PSet(
        bins = cms.VPSet(
            cms.PSet(
                binType = cms.string('AbsEtaClus'),
                funcParams = cms.vdouble(0.00502445, -0.0047799, 0.00808078),
                funcType = cms.string('TF1:=pol2'),
                xMax = cms.double(1.13),
                xMin = cms.double(0.0),
                yMax = cms.int32(99999),
                yMin = cms.int32(1)
            ),
            cms.PSet(
                binType = cms.string('AbsEtaClus'),
                funcParams = cms.vdouble(0.2007, -0.305712, 0.121756),
                funcType = cms.string('TF1:=pol2'),
                xMax = cms.double(1.48),
                xMin = cms.double(1.13),
                yMax = cms.int32(99999),
                yMin = cms.int32(1)
            ),
            cms.PSet(
                binType = cms.string('AbsEtaClus'),
                funcParams = cms.vdouble(0.169387, -0.177821, 0.0477192),
                funcType = cms.string('TF1:=pol2'),
                xMax = cms.double(1.9),
                xMin = cms.double(1.48),
                yMax = cms.int32(99999),
                yMin = cms.int32(1)
            ),
            cms.PSet(
                binType = cms.string('AbsEtaClus'),
                funcParams = cms.vdouble(0.0245799, -0.0197369, 0.00451283),
                funcType = cms.string('TF1:=pol2'),
                xMax = cms.double(4.0),
                xMin = cms.double(1.9),
                yMax = cms.int32(99999),
                yMin = cms.int32(1)
            )
        )
    ),
    pixelSeedsProducer = cms.InputTag("hltEgammaElectronPixelSeedsUnseeded"),
    productsToWrite = cms.int32(0),
    recoEcalCandidateProducer = cms.InputTag("hltEgammaCandidatesUnseeded")
)


process.hltEgammaR9L1Seeded = cms.EDProducer("EgammaHLTR9IDProducer",
    ecalRechitEB = cms.InputTag("hltRechitInRegionsECAL","EcalRecHitsEB"),
    ecalRechitEE = cms.InputTag("hltRechitInRegionsECAL","EcalRecHitsEE"),
    recoEcalCandidateProducer = cms.InputTag("hltEgammaCandidatesL1Seeded")
)


process.hltEgammaR9Unseeded = cms.EDProducer("EgammaHLTR9IDProducer",
    ecalRechitEB = cms.InputTag("hltEcalRecHit","EcalRecHitsEB"),
    ecalRechitEE = cms.InputTag("hltEcalRecHit","EcalRecHitsEE"),
    recoEcalCandidateProducer = cms.InputTag("hltEgammaCandidatesUnseeded")
)


process.hltEgammaSuperClustersToPixelMatchL1Seeded = cms.EDProducer("EgammaHLTFilteredSuperClusterProducer",
    cands = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    cuts = cms.VPSet(cms.PSet(
        barrelCut = cms.PSet(
            cutOverE = cms.double(0.2),
            useEt = cms.bool(False)
        ),
        endcapCut = cms.PSet(
            cutOverE = cms.double(0.2),
            useEt = cms.bool(False)
        ),
        var = cms.InputTag("hltEgammaHoverEL1Seeded")
    )),
    minEtCutEB = cms.double(10.0),
    minEtCutEE = cms.double(10.0)
)


process.hltEgammaSuperClustersToPixelMatchUnseeded = cms.EDProducer("EgammaHLTFilteredSuperClusterProducer",
    cands = cms.InputTag("hltEgammaCandidatesUnseeded"),
    cuts = cms.VPSet(cms.PSet(
        barrelCut = cms.PSet(
            cutOverE = cms.double(0.2),
            useEt = cms.bool(False)
        ),
        endcapCut = cms.PSet(
            cutOverE = cms.double(0.2),
            useEt = cms.bool(False)
        ),
        var = cms.InputTag("hltEgammaHoverEUnseeded")
    )),
    minEtCutEB = cms.double(10.0),
    minEtCutEE = cms.double(10.0)
)


process.hltElePixelHitDoubletsForTripletsL1Seeded = cms.EDProducer("HitPairEDProducer",
    clusterCheck = cms.InputTag(""),
    layerPairs = cms.vuint32(0, 1),
    maxElement = cms.uint32(0),
    maxElementTotal = cms.uint32(50000000),
    produceIntermediateHitDoublets = cms.bool(True),
    produceSeedingHitSets = cms.bool(True),
    seedingLayers = cms.InputTag("hltPixelLayerTriplets"),
    trackingRegions = cms.InputTag("hltEleSeedsTrackingRegionsL1Seeded"),
    trackingRegionsSeedingLayers = cms.InputTag("")
)


process.hltElePixelHitDoubletsForTripletsUnseeded = cms.EDProducer("HitPairEDProducer",
    clusterCheck = cms.InputTag(""),
    layerPairs = cms.vuint32(0, 1),
    maxElement = cms.uint32(0),
    maxElementTotal = cms.uint32(50000000),
    produceIntermediateHitDoublets = cms.bool(True),
    produceSeedingHitSets = cms.bool(True),
    seedingLayers = cms.InputTag("hltPixelLayerTriplets"),
    trackingRegions = cms.InputTag("hltEleSeedsTrackingRegionsUnseeded"),
    trackingRegionsSeedingLayers = cms.InputTag("")
)


process.hltElePixelHitDoubletsL1Seeded = cms.EDProducer("HitPairEDProducer",
    clusterCheck = cms.InputTag(""),
    layerPairs = cms.vuint32(0),
    maxElement = cms.uint32(0),
    maxElementTotal = cms.uint32(50000000),
    produceIntermediateHitDoublets = cms.bool(True),
    produceSeedingHitSets = cms.bool(True),
    seedingLayers = cms.InputTag("hltPixelLayerPairsL1Seeded"),
    trackingRegions = cms.InputTag("hltEleSeedsTrackingRegionsL1Seeded"),
    trackingRegionsSeedingLayers = cms.InputTag("")
)


process.hltElePixelHitDoubletsUnseeded = cms.EDProducer("HitPairEDProducer",
    clusterCheck = cms.InputTag(""),
    layerPairs = cms.vuint32(0),
    maxElement = cms.uint32(0),
    maxElementTotal = cms.uint32(50000000),
    produceIntermediateHitDoublets = cms.bool(True),
    produceSeedingHitSets = cms.bool(True),
    seedingLayers = cms.InputTag("hltPixelLayerPairsUnseeded"),
    trackingRegions = cms.InputTag("hltEleSeedsTrackingRegionsUnseeded"),
    trackingRegionsSeedingLayers = cms.InputTag("")
)


process.hltElePixelHitTripletsClusterRemoverL1Seeded = cms.EDProducer("SeedClusterRemoverPhase2",
    phase2OTClusters = cms.InputTag("hltSiPhase2Clusters"),
    pixelClusters = cms.InputTag("hltSiPixelClusters"),
    trajectories = cms.InputTag("hltElePixelSeedsTripletsL1Seeded")
)


process.hltElePixelHitTripletsClusterRemoverUnseeded = cms.EDProducer("SeedClusterRemoverPhase2",
    phase2OTClusters = cms.InputTag("hltSiPhase2Clusters"),
    pixelClusters = cms.InputTag("hltSiPixelClusters"),
    trajectories = cms.InputTag("hltElePixelSeedsTripletsUnseeded")
)


process.hltElePixelHitTripletsL1Seeded = cms.EDProducer("CAHitTripletEDProducer",
    CAHardPtCut = cms.double(0.3),
    CAPhiCut = cms.double(0.1),
    CAThetaCut = cms.double(0.004),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    doublets = cms.InputTag("hltElePixelHitDoubletsForTripletsL1Seeded"),
    extraHitRPhitolerance = cms.double(0.032),
    maxChi2 = cms.PSet(
        enabled = cms.bool(True),
        pt1 = cms.double(0.8),
        pt2 = cms.double(8.0),
        value1 = cms.double(100.0),
        value2 = cms.double(6.0)
    ),
    useBendingCorrection = cms.bool(True)
)


process.hltElePixelHitTripletsUnseeded = cms.EDProducer("CAHitTripletEDProducer",
    CAHardPtCut = cms.double(0.3),
    CAPhiCut = cms.double(0.1),
    CAThetaCut = cms.double(0.004),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    doublets = cms.InputTag("hltElePixelHitDoubletsForTripletsUnseeded"),
    extraHitRPhitolerance = cms.double(0.032),
    maxChi2 = cms.PSet(
        enabled = cms.bool(True),
        pt1 = cms.double(0.8),
        pt2 = cms.double(8.0),
        value1 = cms.double(100.0),
        value2 = cms.double(6.0)
    ),
    useBendingCorrection = cms.bool(True)
)


process.hltElePixelSeedsCombinedL1Seeded = cms.EDProducer("SeedCombiner",
    seedCollections = cms.VInputTag("hltElePixelSeedsDoubletsL1Seeded", "hltElePixelSeedsTripletsL1Seeded")
)


process.hltElePixelSeedsCombinedUnseeded = cms.EDProducer("SeedCombiner",
    seedCollections = cms.VInputTag("hltElePixelSeedsDoubletsUnseeded", "hltElePixelSeedsTripletsUnseeded")
)


process.hltElePixelSeedsDoubletsL1Seeded = cms.EDProducer("SeedCreatorFromRegionConsecutiveHitsEDProducer",
    MinOneOverPtError = cms.double(1.0),
    OriginTransverseErrorMultiplier = cms.double(1.0),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedMomentumForBOFF = cms.double(5.0),
    TTRHBuilder = cms.string('WithTrackAngle'),
    forceKinematicWithRegionDirection = cms.bool(False),
    magneticField = cms.string('ParabolicMf'),
    propagator = cms.string('PropagatorWithMaterialParabolicMf'),
    seedingHitSets = cms.InputTag("hltElePixelHitDoubletsL1Seeded")
)


process.hltElePixelSeedsDoubletsUnseeded = cms.EDProducer("SeedCreatorFromRegionConsecutiveHitsEDProducer",
    MinOneOverPtError = cms.double(1.0),
    OriginTransverseErrorMultiplier = cms.double(1.0),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedMomentumForBOFF = cms.double(5.0),
    TTRHBuilder = cms.string('WithTrackAngle'),
    forceKinematicWithRegionDirection = cms.bool(False),
    magneticField = cms.string('ParabolicMf'),
    propagator = cms.string('PropagatorWithMaterialParabolicMf'),
    seedingHitSets = cms.InputTag("hltElePixelHitDoubletsUnseeded")
)


process.hltElePixelSeedsTripletsL1Seeded = cms.EDProducer("SeedCreatorFromRegionConsecutiveHitsEDProducer",
    MinOneOverPtError = cms.double(1.0),
    OriginTransverseErrorMultiplier = cms.double(1.0),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedMomentumForBOFF = cms.double(5.0),
    TTRHBuilder = cms.string('WithTrackAngle'),
    forceKinematicWithRegionDirection = cms.bool(False),
    magneticField = cms.string('ParabolicMf'),
    propagator = cms.string('PropagatorWithMaterialParabolicMf'),
    seedingHitSets = cms.InputTag("hltElePixelHitTripletsL1Seeded")
)


process.hltElePixelSeedsTripletsUnseeded = cms.EDProducer("SeedCreatorFromRegionConsecutiveHitsEDProducer",
    MinOneOverPtError = cms.double(1.0),
    OriginTransverseErrorMultiplier = cms.double(1.0),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedMomentumForBOFF = cms.double(5.0),
    TTRHBuilder = cms.string('WithTrackAngle'),
    forceKinematicWithRegionDirection = cms.bool(False),
    magneticField = cms.string('ParabolicMf'),
    propagator = cms.string('PropagatorWithMaterialParabolicMf'),
    seedingHitSets = cms.InputTag("hltElePixelHitTripletsUnseeded")
)


process.hltEleSeedsTrackingRegionsL1Seeded = cms.EDProducer("TrackingRegionsFromSuperClustersEDProducer",
    RegionPSet = cms.PSet(
        beamSpot = cms.InputTag("hltOnlineBeamSpot"),
        defaultZ = cms.double(0.0),
        deltaEtaRegion = cms.double(0.1),
        deltaPhiRegion = cms.double(0.4),
        measurementTrackerEvent = cms.InputTag(""),
        minBSDeltaZ = cms.double(0.0),
        nrSigmaForBSDeltaZ = cms.double(4.0),
        originHalfLength = cms.double(12.5),
        originRadius = cms.double(0.2),
        precise = cms.bool(True),
        ptMin = cms.double(1.5),
        superClusters = cms.VInputTag("hltEgammaSuperClustersToPixelMatchL1Seeded"),
        useZInBeamspot = cms.bool(False),
        useZInVertex = cms.bool(False),
        vertices = cms.InputTag(""),
        whereToUseMeasTracker = cms.string('kNever')
    )
)


process.hltEleSeedsTrackingRegionsUnseeded = cms.EDProducer("TrackingRegionsFromSuperClustersEDProducer",
    RegionPSet = cms.PSet(
        beamSpot = cms.InputTag("hltOnlineBeamSpot"),
        defaultZ = cms.double(0.0),
        deltaEtaRegion = cms.double(0.1),
        deltaPhiRegion = cms.double(0.4),
        measurementTrackerEvent = cms.InputTag(""),
        minBSDeltaZ = cms.double(0.0),
        nrSigmaForBSDeltaZ = cms.double(4.0),
        originHalfLength = cms.double(12.5),
        originRadius = cms.double(0.2),
        precise = cms.bool(True),
        ptMin = cms.double(1.5),
        superClusters = cms.VInputTag("hltEgammaSuperClustersToPixelMatchUnseeded"),
        useZInBeamspot = cms.bool(False),
        useZInVertex = cms.bool(False),
        vertices = cms.InputTag(""),
        whereToUseMeasTracker = cms.string('kNever')
    )
)


process.hltFilteredLayerClustersCLUE3DHigh = cms.EDProducer("FilteredLayerClustersProducer",
    LayerClusters = cms.InputTag("hltHgcalMergeLayerClusters"),
    LayerClustersInputMask = cms.InputTag("hltHgcalMergeLayerClusters","InitialLayerClustersMask"),
    clusterFilter = cms.string('ClusterFilterByAlgoAndSize'),
    iteration_label = cms.string('CLUE3DHigh'),
    max_cluster_size = cms.int32(9999),
    max_layerId = cms.int32(9999),
    mightGet = cms.optional.untracked.vstring,
    min_cluster_size = cms.int32(2),
    min_layerId = cms.int32(0)
)


process.hltFilteredLayerClustersCLUE3DHighL1Seeded = cms.EDProducer("FilteredLayerClustersProducer",
    LayerClusters = cms.InputTag("hltHgcalMergeLayerClustersL1Seeded"),
    LayerClustersInputMask = cms.InputTag("hltHgcalMergeLayerClustersL1Seeded","InitialLayerClustersMask"),
    clusterFilter = cms.string('ClusterFilterByAlgoAndSize'),
    iteration_label = cms.string('CLUE3DHigh'),
    max_cluster_size = cms.int32(9999),
    max_layerId = cms.int32(9999),
    mightGet = cms.optional.untracked.vstring,
    min_cluster_size = cms.int32(2),
    min_layerId = cms.int32(0)
)


process.hltFilteredLayerClustersPassthrough = cms.EDProducer("FilteredLayerClustersProducer",
    LayerClusters = cms.InputTag("hltHgcalMergeLayerClusters"),
    LayerClustersInputMask = cms.InputTag("hltTiclTrackstersCLUE3DHigh"),
    algo_number = cms.vint32(6, 7, 8),
    clusterFilter = cms.string('ClusterFilterBySize'),
    iteration_label = cms.string('Passthrough'),
    max_cluster_size = cms.int32(9999),
    max_layerId = cms.int32(9999),
    mightGet = cms.optional.untracked.vstring,
    min_cluster_size = cms.int32(2),
    min_layerId = cms.int32(0)
)


process.hltFirstStepPrimaryVerticesUnsorted = cms.EDProducer("PrimaryVertexProducer",
    TkClusParameters = cms.PSet(
        TkDAClusParameters = cms.PSet(
            Tmin = cms.double(2.0),
            Tpurge = cms.double(2.0),
            Tstop = cms.double(0.5),
            coolingFactor = cms.double(0.6),
            d0CutOff = cms.double(3.0),
            dzCutOff = cms.double(3.0),
            uniquetrkweight = cms.double(0.8),
            vertexSize = cms.double(0.006),
            zmerge = cms.double(0.01)
        ),
        algorithm = cms.string('DA_vect')
    ),
    TkFilterParameters = cms.PSet(
        algorithm = cms.string('filter'),
        maxD0Significance = cms.double(4.0),
        maxEta = cms.double(4.0),
        maxNormalizedChi2 = cms.double(10.0),
        minPixelLayersWithHits = cms.int32(2),
        minPt = cms.double(0.9),
        minSiliconLayersWithHits = cms.int32(5),
        trackQuality = cms.string('any')
    ),
    TrackLabel = cms.InputTag("hltInitialStepTracks"),
    beamSpotLabel = cms.InputTag("hltOnlineBeamSpot"),
    verbose = cms.untracked.bool(False),
    vertexCollections = cms.VPSet(cms.PSet(
        algorithm = cms.string('AdaptiveVertexFitter'),
        chi2cutoff = cms.double(2.5),
        label = cms.string(''),
        maxDistanceToBeam = cms.double(1.0),
        minNdof = cms.double(0.0),
        useBeamConstraint = cms.bool(False)
    ))
)


process.hltFixedGridRhoFastjetAllCaloForEGamma = cms.EDProducer("FixedGridRhoProducerFastjetFromRecHit",
    eThresHB = cms.vdouble(0.8, 1.2, 1.2, 1.2),
    eThresHE = cms.vdouble(
        0.1, 0.2, 0.2, 0.2, 0.2,
        0.2, 0.2
    ),
    ebRecHitsTag = cms.InputTag("hltEcalRecHit","EcalRecHitsEB"),
    eeRecHitsTag = cms.InputTag("hltEcalRecHit","EcalRecHitsEE"),
    gridSpacing = cms.double(0.55),
    hbheRecHitsTag = cms.InputTag("hltHbhereco"),
    maxRapidity = cms.double(2.5),
    skipECAL = cms.bool(False),
    skipHCAL = cms.bool(False)
)


process.hltFixedGridRhoFastjetAllTmp = cms.EDProducer("FixedGridRhoProducerFastjet",
    gridSpacing = cms.double(0.55),
    maxRapidity = cms.double(5.0),
    pfCandidatesTag = cms.InputTag("hltParticleFlowTmp")
)


process.hltFixedGridRhoProducerFastjetAllTau = cms.EDProducer("FixedGridRhoProducerFastjet",
    gridSpacing = cms.double(0.55),
    maxRapidity = cms.double(5.0),
    pfCandidatesTag = cms.InputTag("hltParticleFlowTmp")
)


process.hltGemRecHits = cms.EDProducer("GEMRecHitProducer",
    applyMasking = cms.bool(False),
    deadFile = cms.optional.FileInPath,
    gemDigiLabel = cms.InputTag("simMuonGEMDigis"),
    maskFile = cms.optional.FileInPath,
    mightGet = cms.optional.untracked.vstring,
    recAlgo = cms.string('GEMRecHitStandardAlgo'),
    recAlgoConfig = cms.PSet(

    )
)


process.hltGemSegments = cms.EDProducer("GEMSegmentProducer",
    algo_name = cms.string('GEMSegmentAlgorithm'),
    algo_pset = cms.PSet(
        GEMDebug = cms.untracked.bool(True),
        clusterOnlySameBXRecHits = cms.bool(True),
        dEtaChainBoxMax = cms.double(0.05),
        dPhiChainBoxMax = cms.double(0.02),
        dXclusBoxMax = cms.double(1.0),
        dYclusBoxMax = cms.double(5.0),
        maxRecHitsInCluster = cms.int32(4),
        minHitsPerSegment = cms.uint32(2),
        preClustering = cms.bool(True),
        preClusteringUseChaining = cms.bool(True)
    ),
    ge0_name = cms.string('GE0SegAlgoRU'),
    ge0_pset = cms.PSet(
        allowWideSegments = cms.bool(True),
        doCollisions = cms.bool(True),
        maxChi2Additional = cms.double(100.0),
        maxChi2GoodSeg = cms.double(50),
        maxChi2Prune = cms.double(50),
        maxETASeeds = cms.double(0.1),
        maxNumberOfHits = cms.uint32(300),
        maxNumberOfHitsPerLayer = cms.uint32(100),
        maxPhiAdditional = cms.double(0.001096605744),
        maxPhiSeeds = cms.double(0.001096605744),
        maxTOFDiff = cms.double(25),
        minNumberOfHits = cms.uint32(4),
        requireCentralBX = cms.bool(True)
    ),
    gemRecHitLabel = cms.InputTag("hltGemRecHits")
)


process.hltGeneralTracks = cms.EDProducer("TrackListMerger",
    Epsilon = cms.double(-0.001),
    FoundHitBonus = cms.double(5.0),
    LostHitPenalty = cms.double(5.0),
    MaxNormalizedChisq = cms.double(1000.0),
    MinFound = cms.int32(3),
    MinPT = cms.double(0.9),
    ShareFrac = cms.double(0.19),
    TrackProducers = cms.VInputTag("hltInitialStepTrackSelectionHighPurity", "hltHighPtTripletStepTrackSelectionHighPurity"),
    allowFirstHitShare = cms.bool(True),
    copyExtras = cms.untracked.bool(True),
    copyMVA = cms.bool(False),
    hasSelector = cms.vint32(0, 0),
    indivShareFrac = cms.vdouble(1.0, 1.0),
    makeReKeyedSeeds = cms.untracked.bool(False),
    newQuality = cms.string('confirmed'),
    selectedTrackQuals = cms.VInputTag(cms.InputTag("hltInitialStepTrackSelectionHighPurity"), cms.InputTag("hltHighPtTripletStepTrackSelectionHighPurity")),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(True),
        tLists = cms.vint32(0, 1)
    )),
    trackAlgoPriorityOrder = cms.string('trackAlgoPriorityOrder'),
    writeOnlyTrkQuals = cms.bool(False)
)


process.hltHGCalRecHit = cms.EDProducer("HGCalRecHitProducer",
    HGCEE_cce = cms.PSet(
        refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
    ),
    HGCEE_fCPerMIP = cms.vdouble(2.06, 3.43, 5.15),
    HGCEE_isSiFE = cms.bool(True),
    HGCEE_keV2DIGI = cms.double(0.044259),
    HGCEE_noise_fC = cms.PSet(
        refToPSet_ = cms.string('HGCAL_noise_fC')
    ),
    HGCEErechitCollection = cms.string('HGCEERecHits'),
    HGCEEuncalibRecHitCollection = cms.InputTag("hltHGCalUncalibRecHit","HGCEEUncalibRecHits"),
    HGCHEB_isSiFE = cms.bool(True),
    HGCHEB_keV2DIGI = cms.double(0.00148148148148),
    HGCHEB_noise_MIP = cms.PSet(
        refToPSet_ = cms.string('HGCAL_noise_heback')
    ),
    HGCHEBrechitCollection = cms.string('HGCHEBRecHits'),
    HGCHEBuncalibRecHitCollection = cms.InputTag("hltHGCalUncalibRecHit","HGCHEBUncalibRecHits"),
    HGCHEF_cce = cms.PSet(
        refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
    ),
    HGCHEF_fCPerMIP = cms.vdouble(2.06, 3.43, 5.15),
    HGCHEF_isSiFE = cms.bool(True),
    HGCHEF_keV2DIGI = cms.double(0.044259),
    HGCHEF_noise_fC = cms.PSet(
        refToPSet_ = cms.string('HGCAL_noise_fC')
    ),
    HGCHEFrechitCollection = cms.string('HGCHEFRecHits'),
    HGCHEFuncalibRecHitCollection = cms.InputTag("hltHGCalUncalibRecHit","HGCHEFUncalibRecHits"),
    HGCHFNose_cce = cms.PSet(
        refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
    ),
    HGCHFNose_fCPerMIP = cms.vdouble(1.25, 2.57, 3.88),
    HGCHFNose_isSiFE = cms.bool(False),
    HGCHFNose_keV2DIGI = cms.double(0.044259),
    HGCHFNose_noise_fC = cms.PSet(
        refToPSet_ = cms.string('HGCAL_noise_fC')
    ),
    HGCHFNoserechitCollection = cms.string('HGCHFNoseRecHits'),
    HGCHFNoseuncalibRecHitCollection = cms.InputTag("hltHGCalUncalibRecHit","HGCHFNoseUncalibRecHits"),
    algo = cms.string('HGCalRecHitWorkerSimple'),
    constSiPar = cms.double(0.02),
    deltasi_index_regemfac = cms.int32(3),
    layerNoseWeights = cms.vdouble(
        0.0, 39.500245, 39.756638, 39.756638, 39.756638,
        39.756638, 66.020266, 92.283895, 92.283895
    ),
    layerWeights = cms.vdouble(
        0.0, 9.205, 11.129999999999999, 11.129999999999999, 11.129999999999999,
        11.129999999999999, 11.129999999999999, 11.129999999999999, 11.129999999999999, 11.129999999999999,
        11.129999999999999, 11.129999999999999, 11.129999999999999, 11.129999999999999, 11.129999999999999,
        11.129999999999999, 11.129999999999999, 11.129999999999999, 13.2, 13.2,
        13.2, 13.2, 13.2, 13.2, 13.2,
        13.2, 35.745000000000005, 59.665000000000006, 60.7, 60.7,
        60.7, 60.7, 60.7, 60.7, 60.7,
        60.7, 60.7, 71.89, 83.08, 83.255,
        83.52000000000001, 83.61, 83.61, 83.61, 83.61,
        83.61, 83.61, 83.61
    ),
    maxValSiPar = cms.double(10000.0),
    minValSiPar = cms.double(10.0),
    noiseSiPar = cms.double(5.5),
    rangeMask = cms.uint32(4294442496),
    rangeMatch = cms.uint32(1161838592),
    sciThicknessCorrection = cms.double(0.69),
    thicknessCorrection = cms.vdouble(
        0.75, 0.76, 0.75, 0.85, 0.85,
        0.84
    ),
    thicknessNoseCorrection = cms.vdouble(1.132, 1.092, 1.084)
)


process.hltHGCalRecHitL1Seeded = cms.EDProducer("HGCalRecHitProducer",
    HGCEE_cce = cms.PSet(
        refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
    ),
    HGCEE_fCPerMIP = cms.vdouble(2.06, 3.43, 5.15),
    HGCEE_isSiFE = cms.bool(True),
    HGCEE_keV2DIGI = cms.double(0.044259),
    HGCEE_noise_fC = cms.PSet(
        refToPSet_ = cms.string('HGCAL_noise_fC')
    ),
    HGCEErechitCollection = cms.string('HGCEERecHits'),
    HGCEEuncalibRecHitCollection = cms.InputTag("hltHGCalUncalibRecHitL1Seeded","HGCEEUncalibRecHits"),
    HGCHEB_isSiFE = cms.bool(True),
    HGCHEB_keV2DIGI = cms.double(0.00148148148148),
    HGCHEB_noise_MIP = cms.PSet(
        refToPSet_ = cms.string('HGCAL_noise_heback')
    ),
    HGCHEBrechitCollection = cms.string('HGCHEBRecHits'),
    HGCHEBuncalibRecHitCollection = cms.InputTag("hltHGCalUncalibRecHitL1Seeded","HGCHEBUncalibRecHits"),
    HGCHEF_cce = cms.PSet(
        refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
    ),
    HGCHEF_fCPerMIP = cms.vdouble(2.06, 3.43, 5.15),
    HGCHEF_isSiFE = cms.bool(True),
    HGCHEF_keV2DIGI = cms.double(0.044259),
    HGCHEF_noise_fC = cms.PSet(
        refToPSet_ = cms.string('HGCAL_noise_fC')
    ),
    HGCHEFrechitCollection = cms.string('HGCHEFRecHits'),
    HGCHEFuncalibRecHitCollection = cms.InputTag("hltHGCalUncalibRecHitL1Seeded","HGCHEFUncalibRecHits"),
    HGCHFNose_cce = cms.PSet(
        refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
    ),
    HGCHFNose_fCPerMIP = cms.vdouble(1.25, 2.57, 3.88),
    HGCHFNose_isSiFE = cms.bool(False),
    HGCHFNose_keV2DIGI = cms.double(0.044259),
    HGCHFNose_noise_fC = cms.PSet(
        refToPSet_ = cms.string('HGCAL_noise_fC')
    ),
    HGCHFNoserechitCollection = cms.string('HGCHFNoseRecHits'),
    HGCHFNoseuncalibRecHitCollection = cms.InputTag("hltHGCalUncalibRecHitL1Seeded","HGCHFNoseUncalibRecHits"),
    algo = cms.string('HGCalRecHitWorkerSimple'),
    constSiPar = cms.double(0.02),
    deltasi_index_regemfac = cms.int32(3),
    layerNoseWeights = cms.vdouble(
        0.0, 39.500245, 39.756638, 39.756638, 39.756638,
        39.756638, 66.020266, 92.283895, 92.283895
    ),
    layerWeights = cms.vdouble(
        0.0, 9.205, 11.129999999999999, 11.129999999999999, 11.129999999999999,
        11.129999999999999, 11.129999999999999, 11.129999999999999, 11.129999999999999, 11.129999999999999,
        11.129999999999999, 11.129999999999999, 11.129999999999999, 11.129999999999999, 11.129999999999999,
        11.129999999999999, 11.129999999999999, 11.129999999999999, 13.2, 13.2,
        13.2, 13.2, 13.2, 13.2, 13.2,
        13.2, 35.745000000000005, 59.665000000000006, 60.7, 60.7,
        60.7, 60.7, 60.7, 60.7, 60.7,
        60.7, 60.7, 71.89, 83.08, 83.255,
        83.52000000000001, 83.61, 83.61, 83.61, 83.61,
        83.61, 83.61, 83.61
    ),
    maxValSiPar = cms.double(10000.0),
    minValSiPar = cms.double(10.0),
    noiseSiPar = cms.double(5.5),
    rangeMask = cms.uint32(4294442496),
    rangeMatch = cms.uint32(1161838592),
    sciThicknessCorrection = cms.double(0.69),
    thicknessCorrection = cms.vdouble(
        0.75, 0.76, 0.75, 0.85, 0.85,
        0.84
    ),
    thicknessNoseCorrection = cms.vdouble(1.132, 1.092, 1.084)
)


process.hltHGCalUncalibRecHit = cms.EDProducer("HGCalUncalibRecHitProducer",
    HGCEEConfig = cms.PSet(
        adcNbits = cms.uint32(10),
        adcSaturation = cms.double(100),
        fCPerMIP = cms.vdouble(2.06, 3.43, 5.15),
        isSiFE = cms.bool(True),
        tdcNbits = cms.uint32(12),
        tdcOnset = cms.double(60),
        tdcSaturation = cms.double(10000),
        toaLSB_ns = cms.double(0.0244),
        tofDelay = cms.double(-9)
    ),
    HGCEEdigiCollection = cms.InputTag("hltHgcalDigis","EE"),
    HGCEEhitCollection = cms.string('HGCEEUncalibRecHits'),
    HGCHEBConfig = cms.PSet(
        adcNbits = cms.uint32(10),
        adcSaturation = cms.double(68.75),
        fCPerMIP = cms.vdouble(1.0, 1.0, 1.0),
        isSiFE = cms.bool(True),
        tdcNbits = cms.uint32(12),
        tdcOnset = cms.double(55),
        tdcSaturation = cms.double(1000),
        toaLSB_ns = cms.double(0.0244),
        tofDelay = cms.double(-14)
    ),
    HGCHEBdigiCollection = cms.InputTag("hltHgcalDigis","HEback"),
    HGCHEBhitCollection = cms.string('HGCHEBUncalibRecHits'),
    HGCHEFConfig = cms.PSet(
        adcNbits = cms.uint32(10),
        adcSaturation = cms.double(100),
        fCPerMIP = cms.vdouble(2.06, 3.43, 5.15),
        isSiFE = cms.bool(True),
        tdcNbits = cms.uint32(12),
        tdcOnset = cms.double(60),
        tdcSaturation = cms.double(10000),
        toaLSB_ns = cms.double(0.0244),
        tofDelay = cms.double(-11)
    ),
    HGCHEFdigiCollection = cms.InputTag("hltHgcalDigis","HEfront"),
    HGCHEFhitCollection = cms.string('HGCHEFUncalibRecHits'),
    HGCHFNoseConfig = cms.PSet(
        adcNbits = cms.uint32(10),
        adcSaturation = cms.double(100),
        fCPerMIP = cms.vdouble(1.25, 2.57, 3.88),
        isSiFE = cms.bool(False),
        tdcNbits = cms.uint32(12),
        tdcOnset = cms.double(60),
        tdcSaturation = cms.double(10000),
        toaLSB_ns = cms.double(0.0244),
        tofDelay = cms.double(-33)
    ),
    HGCHFNosedigiCollection = cms.InputTag("hfnoseDigis","HFNose"),
    HGCHFNosehitCollection = cms.string('HGCHFNoseUncalibRecHits'),
    algo = cms.string('HGCalUncalibRecHitWorkerWeights'),
    computeLocalTime = cms.bool(False)
)


process.hltHGCalUncalibRecHitL1Seeded = cms.EDProducer("HGCalUncalibRecHitProducer",
    HGCEEConfig = cms.PSet(
        adcNbits = cms.uint32(10),
        adcSaturation = cms.double(100),
        fCPerMIP = cms.vdouble(2.06, 3.43, 5.15),
        isSiFE = cms.bool(True),
        tdcNbits = cms.uint32(12),
        tdcOnset = cms.double(60),
        tdcSaturation = cms.double(10000),
        toaLSB_ns = cms.double(0.0244),
        tofDelay = cms.double(-9)
    ),
    HGCEEdigiCollection = cms.InputTag("hltHgcalDigisL1Seeded","EE"),
    HGCEEhitCollection = cms.string('HGCEEUncalibRecHits'),
    HGCHEBConfig = cms.PSet(
        adcNbits = cms.uint32(10),
        adcSaturation = cms.double(68.75),
        fCPerMIP = cms.vdouble(1.0, 1.0, 1.0),
        isSiFE = cms.bool(True),
        tdcNbits = cms.uint32(12),
        tdcOnset = cms.double(55),
        tdcSaturation = cms.double(1000),
        toaLSB_ns = cms.double(0.0244),
        tofDelay = cms.double(-14)
    ),
    HGCHEBdigiCollection = cms.InputTag("hltHgcalDigisL1Seeded","HEback"),
    HGCHEBhitCollection = cms.string('HGCHEBUncalibRecHits'),
    HGCHEFConfig = cms.PSet(
        adcNbits = cms.uint32(10),
        adcSaturation = cms.double(100),
        fCPerMIP = cms.vdouble(2.06, 3.43, 5.15),
        isSiFE = cms.bool(True),
        tdcNbits = cms.uint32(12),
        tdcOnset = cms.double(60),
        tdcSaturation = cms.double(10000),
        toaLSB_ns = cms.double(0.0244),
        tofDelay = cms.double(-11)
    ),
    HGCHEFdigiCollection = cms.InputTag("hltHgcalDigisL1Seeded","HEfront"),
    HGCHEFhitCollection = cms.string('HGCHEFUncalibRecHits'),
    HGCHFNoseConfig = cms.PSet(
        adcNbits = cms.uint32(10),
        adcSaturation = cms.double(100),
        fCPerMIP = cms.vdouble(1.25, 2.57, 3.88),
        isSiFE = cms.bool(False),
        tdcNbits = cms.uint32(12),
        tdcOnset = cms.double(60),
        tdcSaturation = cms.double(10000),
        toaLSB_ns = cms.double(0.0244),
        tofDelay = cms.double(-33)
    ),
    HGCHFNosedigiCollection = cms.InputTag("hfnoseDigis","HFNose"),
    HGCHFNosehitCollection = cms.string('HGCHFNoseUncalibRecHits'),
    algo = cms.string('HGCalUncalibRecHitWorkerWeights'),
    computeLocalTime = cms.bool(False)
)


process.hltHbhereco = cms.EDProducer("HBHEPhase1Reconstructor",
    algoConfigClass = cms.string(''),
    algorithm = cms.PSet(
        Class = cms.string('SimpleHBHEPhase1Algo'),
        activeBXs = cms.vint32(
            -3, -2, -1, 0, 1,
            2, 3, 4
        ),
        applyLegacyHBMCorrection = cms.bool(False),
        applyPedConstraint = cms.bool(False),
        applyPulseJitter = cms.bool(False),
        applyTimeConstraint = cms.bool(False),
        applyTimeSlew = cms.bool(True),
        applyTimeSlewM3 = cms.bool(True),
        calculateArrivalTime = cms.bool(False),
        chiSqSwitch = cms.double(-1.0),
        correctForPhaseContainment = cms.bool(True),
        correctionPhaseNS = cms.double(6.0),
        deltaChiSqThresh = cms.double(0.001),
        dynamicPed = cms.bool(False),
        firstSampleShift = cms.int32(0),
        fitTimes = cms.int32(1),
        meanPed = cms.double(0.0),
        meanTime = cms.double(0.0),
        nMaxItersMin = cms.int32(50),
        nMaxItersNNLS = cms.int32(500),
        nnlsThresh = cms.double(1e-11),
        pulseJitter = cms.double(1.0),
        respCorrM3 = cms.double(1.0),
        samplesToAdd = cms.int32(2),
        tdcTimeShift = cms.double(0.0),
        timeMax = cms.double(12.5),
        timeMin = cms.double(-12.5),
        timeSigmaHPD = cms.double(5.0),
        timeSigmaSiPM = cms.double(2.5),
        timeSlewParsType = cms.int32(3),
        ts4Max = cms.vdouble(100.0, 20000.0, 30000.0),
        ts4Min = cms.double(0.0),
        ts4Thresh = cms.double(0.0),
        ts4chi2 = cms.vdouble(15.0, 15.0),
        useM2 = cms.bool(False),
        useM3 = cms.bool(False),
        useMahi = cms.bool(True)
    ),
    digiLabelQIE11 = cms.InputTag("hltHcalDigis"),
    digiLabelQIE8 = cms.InputTag("hltHcalDigis"),
    dropZSmarkedPassed = cms.bool(True),
    flagParametersQIE11 = cms.PSet(

    ),
    flagParametersQIE8 = cms.PSet(
        hitEnergyMinimum = cms.double(1.0),
        hitMultiplicityThreshold = cms.int32(17),
        nominalPedestal = cms.double(3.0),
        pulseShapeParameterSets = cms.VPSet(
            cms.PSet(
                pulseShapeParameters = cms.vdouble(
                    0.0, 100.0, -50.0, 0.0, -15.0,
                    0.15
                )
            ),
            cms.PSet(
                pulseShapeParameters = cms.vdouble(
                    100.0, 2000.0, -50.0, 0.0, -5.0,
                    0.05
                )
            ),
            cms.PSet(
                pulseShapeParameters = cms.vdouble(
                    2000.0, 1000000.0, -50.0, 0.0, 95.0,
                    0.0
                )
            ),
            cms.PSet(
                pulseShapeParameters = cms.vdouble(
                    -1000000.0, 1000000.0, 45.0, 0.1, 1000000.0,
                    0.0
                )
            )
        )
    ),
    makeRecHits = cms.bool(True),
    processQIE11 = cms.bool(True),
    processQIE8 = cms.bool(False),
    pulseShapeParametersQIE11 = cms.PSet(

    ),
    pulseShapeParametersQIE8 = cms.PSet(
        LeftSlopeCut = cms.vdouble(5.0, 2.55, 2.55),
        LeftSlopeThreshold = cms.vdouble(250.0, 500.0, 100000.0),
        LinearCut = cms.vdouble(-3.0, -0.054, -0.054),
        LinearThreshold = cms.vdouble(20.0, 100.0, 100000.0),
        MinimumChargeThreshold = cms.double(20.0),
        MinimumTS4TS5Threshold = cms.double(100.0),
        R45MinusOneRange = cms.double(0.2),
        R45PlusOneRange = cms.double(0.2),
        RMS8MaxCut = cms.vdouble(-13.5, -11.5, -11.5),
        RMS8MaxThreshold = cms.vdouble(20.0, 100.0, 100000.0),
        RightSlopeCut = cms.vdouble(5.0, 4.15, 4.15),
        RightSlopeSmallCut = cms.vdouble(1.08, 1.16, 1.16),
        RightSlopeSmallThreshold = cms.vdouble(150.0, 200.0, 100000.0),
        RightSlopeThreshold = cms.vdouble(250.0, 400.0, 100000.0),
        TS3TS4ChargeThreshold = cms.double(70.0),
        TS3TS4UpperChargeThreshold = cms.double(20.0),
        TS4TS5ChargeThreshold = cms.double(70.0),
        TS4TS5LowerCut = cms.vdouble(
            -1.0, -0.7, -0.5, -0.4, -0.3,
            0.1
        ),
        TS4TS5LowerThreshold = cms.vdouble(
            100.0, 120.0, 160.0, 200.0, 300.0,
            500.0
        ),
        TS4TS5UpperCut = cms.vdouble(1.0, 0.8, 0.75, 0.72),
        TS4TS5UpperThreshold = cms.vdouble(70.0, 90.0, 100.0, 400.0),
        TS5TS6ChargeThreshold = cms.double(70.0),
        TS5TS6UpperChargeThreshold = cms.double(20.0),
        TriangleIgnoreSlow = cms.bool(False),
        TrianglePeakTS = cms.uint32(10000),
        UseDualFit = cms.bool(True)
    ),
    recoParamsFromDB = cms.bool(True),
    saveDroppedInfos = cms.bool(False),
    saveEffectivePedestal = cms.bool(True),
    saveInfos = cms.bool(False),
    setLegacyFlagsQIE11 = cms.bool(False),
    setLegacyFlagsQIE8 = cms.bool(False),
    setNegativeFlagsQIE11 = cms.bool(False),
    setNegativeFlagsQIE8 = cms.bool(False),
    setNoiseFlagsQIE11 = cms.bool(False),
    setNoiseFlagsQIE8 = cms.bool(False),
    setPulseShapeFlagsQIE11 = cms.bool(False),
    setPulseShapeFlagsQIE8 = cms.bool(False),
    sipmQNTStoSum = cms.int32(3),
    sipmQTSShift = cms.int32(0),
    tsFromDB = cms.bool(False),
    use8ts = cms.bool(True)
)


process.hltHcalDigis = cms.EDProducer("HcalRawToDigi",
    ComplainEmptyData = cms.untracked.bool(False),
    ElectronicsMap = cms.string(''),
    ExpectedOrbitMessageTime = cms.untracked.int32(-1),
    FEDs = cms.untracked.vint32(),
    FilterDataQuality = cms.bool(True),
    HcalFirstFED = cms.untracked.int32(700),
    InputLabel = cms.InputTag("rawDataCollector"),
    UnpackCalib = cms.untracked.bool(True),
    UnpackTTP = cms.untracked.bool(True),
    UnpackUMNio = cms.untracked.bool(True),
    UnpackZDC = cms.untracked.bool(True),
    UnpackerMode = cms.untracked.int32(0),
    firstSample = cms.int32(0),
    lastSample = cms.int32(9),
    mightGet = cms.optional.untracked.vstring,
    saveQIE10DataNSamples = cms.untracked.vint32(),
    saveQIE10DataTags = cms.untracked.vstring(),
    saveQIE11DataNSamples = cms.untracked.vint32(),
    saveQIE11DataTags = cms.untracked.vstring(),
    silent = cms.untracked.bool(True)
)


process.hltHfprereco = cms.EDProducer("HFPreReconstructor",
    digiLabel = cms.InputTag("hltHcalDigis"),
    dropZSmarkedPassed = cms.bool(True),
    forceSOI = cms.int32(-1),
    soiShift = cms.int32(0),
    sumAllTimeSlices = cms.bool(False),
    tsFromDB = cms.bool(False)
)


process.hltHfreco = cms.EDProducer("HFPhase1Reconstructor",
    HFStripFilter = cms.PSet(
        gap = cms.int32(2),
        lstrips = cms.int32(2),
        maxStripTime = cms.double(10.0),
        maxThreshold = cms.double(100.0),
        seedHitIetaMax = cms.int32(35),
        stripThreshold = cms.double(40.0),
        timeMax = cms.double(6.0),
        verboseLevel = cms.untracked.int32(10),
        wedgeCut = cms.double(0.05)
    ),
    PETstat = cms.PSet(
        HcalAcceptSeverityLevel = cms.int32(9),
        longETParams = cms.vdouble(
            0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0
        ),
        longEnergyParams = cms.vdouble(
            43.5, 45.7, 48.32, 51.36, 54.82,
            58.7, 63.0, 67.72, 72.86, 78.42,
            84.4, 90.8, 97.62
        ),
        long_R = cms.vdouble(0.98),
        long_R_29 = cms.vdouble(0.8),
        shortETParams = cms.vdouble(
            0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0
        ),
        shortEnergyParams = cms.vdouble(
            35.1773, 35.37, 35.7933, 36.4472, 37.3317,
            38.4468, 39.7925, 41.3688, 43.1757, 45.2132,
            47.4813, 49.98, 52.7093
        ),
        short_R = cms.vdouble(0.8),
        short_R_29 = cms.vdouble(0.8)
    ),
    S8S1stat = cms.PSet(
        HcalAcceptSeverityLevel = cms.int32(9),
        isS8S1 = cms.bool(True),
        longETParams = cms.vdouble(
            0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0
        ),
        longEnergyParams = cms.vdouble(
            40.0, 100.0, 100.0, 100.0, 100.0,
            100.0, 100.0, 100.0, 100.0, 100.0,
            100.0, 100.0, 100.0
        ),
        long_optimumSlope = cms.vdouble(
            0.3, 0.1, 0.1, 0.1, 0.1,
            0.1, 0.1, 0.1, 0.1, 0.1,
            0.1, 0.1, 0.1
        ),
        shortETParams = cms.vdouble(
            0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0
        ),
        shortEnergyParams = cms.vdouble(
            40.0, 100.0, 100.0, 100.0, 100.0,
            100.0, 100.0, 100.0, 100.0, 100.0,
            100.0, 100.0, 100.0
        ),
        short_optimumSlope = cms.vdouble(
            0.3, 0.1, 0.1, 0.1, 0.1,
            0.1, 0.1, 0.1, 0.1, 0.1,
            0.1, 0.1, 0.1
        )
    ),
    S9S1stat = cms.PSet(
        HcalAcceptSeverityLevel = cms.int32(9),
        isS8S1 = cms.bool(False),
        longETParams = cms.vdouble(
            0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0
        ),
        longEnergyParams = cms.vdouble(
            43.5, 45.7, 48.32, 51.36, 54.82,
            58.7, 63.0, 67.72, 72.86, 78.42,
            84.4, 90.8, 97.62
        ),
        long_optimumSlope = cms.vdouble(
            -99999.0, 0.0164905, 0.0238698, 0.0321383, 0.041296,
            0.0513428, 0.0622789, 0.0741041, 0.0868186, 0.100422,
            0.135313, 0.136289, 0.0589927
        ),
        shortETParams = cms.vdouble(
            0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0
        ),
        shortEnergyParams = cms.vdouble(
            35.1773, 35.37, 35.7933, 36.4472, 37.3317,
            38.4468, 39.7925, 41.3688, 43.1757, 45.2132,
            47.4813, 49.98, 52.7093
        ),
        short_optimumSlope = cms.vdouble(
            -99999.0, 0.0164905, 0.0238698, 0.0321383, 0.041296,
            0.0513428, 0.0622789, 0.0741041, 0.0868186, 0.100422,
            0.135313, 0.136289, 0.0589927
        )
    ),
    algoConfigClass = cms.string('HFPhase1PMTParams'),
    algorithm = cms.PSet(
        Class = cms.string('HFFlexibleTimeCheck'),
        energyWeights = cms.vdouble(
            1.0, 1.0, 1.0, 0.0, 1.0,
            0.0, 2.0, 0.0, 2.0, 0.0,
            2.0, 0.0, 1.0, 0.0, 0.0,
            1.0, 0.0, 1.0, 0.0, 2.0,
            0.0, 2.0, 0.0, 2.0, 0.0,
            1.0
        ),
        rejectAllFailures = cms.bool(True),
        soiPhase = cms.uint32(1),
        tfallIfNoTDC = cms.double(-101.0),
        timeShift = cms.double(0.0),
        tlimits = cms.vdouble(-1000.0, 1000.0, -1000.0, 1000.0),
        triseIfNoTDC = cms.double(-100.0)
    ),
    checkChannelQualityForDepth3and4 = cms.bool(False),
    inputLabel = cms.InputTag("hltHfprereco"),
    runHFStripFilter = cms.bool(False),
    setNoiseFlags = cms.bool(True),
    useChannelQualityFromDB = cms.bool(False)
)


process.hltHgCalLayerClustersFromSoAProducer = cms.EDProducer("HGCalLayerClustersFromSoAProducer",
    detector = cms.string('EE'),
    hgcalRecHitsLayerClustersSoA = cms.InputTag("hltHgcalSoARecHitsLayerClustersProducer"),
    hgcalRecHitsSoA = cms.InputTag("hltHgcalSoARecHitsProducer"),
    nHitsTime = cms.uint32(3),
    src = cms.InputTag("hltHgcalSoALayerClustersProducer"),
    timeClname = cms.string('timeLayerCluster')
)


process.hltHgcalDigis = cms.EDProducer("HGCalRawToDigiFake",
    bhDigis = cms.InputTag("simHGCalUnsuppressedDigis","HEback"),
    eeDigis = cms.InputTag("simHGCalUnsuppressedDigis","EE"),
    fhDigis = cms.InputTag("simHGCalUnsuppressedDigis","HEfront"),
    mightGet = cms.optional.untracked.vstring
)


process.hltHgcalDigisL1Seeded = cms.EDProducer("HLTHGCalDigisInRegionsProducer",
    etaPhiRegions = cms.VPSet(cms.PSet(
        inputColl = cms.InputTag("hltL1TEGammaHGCFilteredCollectionProducer"),
        maxDEta = cms.double(0.0),
        maxDPhi = cms.double(0.0),
        maxDeltaR = cms.double(0.35),
        maxEt = cms.double(999999.0),
        minEt = cms.double(5.0),
        type = cms.string('L1P2GTCandidate')
    )),
    inputCollTags = cms.VInputTag("hltHgcalDigis:EE", "hltHgcalDigis:HEback", "hltHgcalDigis:HEfront"),
    outputProductNames = cms.vstring(
        'EE',
        'HEback',
        'HEfront'
    )
)


process.hltHgcalLayerClustersEE = cms.EDProducer("HGCalLayerClusterProducer",
    detector = cms.string('EE'),
    mightGet = cms.optional.untracked.vstring,
    nHitsTime = cms.uint32(3),
    plugin = cms.PSet(
        dEdXweights = cms.vdouble(
            0.0, 9.205, 11.129999999999999, 11.129999999999999, 11.129999999999999,
            11.129999999999999, 11.129999999999999, 11.129999999999999, 11.129999999999999, 11.129999999999999,
            11.129999999999999, 11.129999999999999, 11.129999999999999, 11.129999999999999, 11.129999999999999,
            11.129999999999999, 11.129999999999999, 11.129999999999999, 13.2, 13.2,
            13.2, 13.2, 13.2, 13.2, 13.2,
            13.2, 35.745000000000005, 59.665000000000006, 60.7, 60.7,
            60.7, 60.7, 60.7, 60.7, 60.7,
            60.7, 60.7, 71.89, 83.08, 83.255,
            83.52000000000001, 83.61, 83.61, 83.61, 83.61,
            83.61, 83.61, 83.61
        ),
        deltac = cms.vdouble(1.3, 1.3, 1.3, 0.0315),
        deltasi_index_regemfac = cms.int32(3),
        dependSensor = cms.bool(True),
        ecut = cms.double(3),
        fcPerEle = cms.double(0.00016020506),
        fcPerMip = cms.vdouble(
            2.06, 3.43, 5.15, 2.06, 3.43,
            5.15
        ),
        kappa = cms.double(9),
        maxNumberOfThickIndices = cms.uint32(6),
        noiseMip = cms.PSet(
            noise_MIP = cms.double(0.01),
            referenceIdark = cms.double(-1),
            referenceXtalk = cms.double(-1),
            scaleByDose = cms.bool(False),
            scaleByDoseAlgo = cms.uint32(0),
            scaleByDoseFactor = cms.double(1)
        ),
        noises = cms.vdouble(
            2000.0, 2400.0, 2000.0, 2000.0, 2400.0,
            2000.0
        ),
        positionDeltaRho2 = cms.double(1.69),
        sciThicknessCorrection = cms.double(0.69),
        thicknessCorrection = cms.vdouble(
            0.75, 0.76, 0.75, 0.85, 0.85,
            0.84
        ),
        thresholdW0 = cms.vdouble(2.9, 2.9, 2.9),
        type = cms.string('SiCLUE'),
        use2x2 = cms.bool(True),
        verbosity = cms.untracked.uint32(3)
    ),
    recHits = cms.InputTag("hltHGCalRecHit","HGCEERecHits"),
    timeClname = cms.string('timeLayerCluster')
)


process.hltHgcalLayerClustersEEL1Seeded = cms.EDProducer("HGCalLayerClusterProducer",
    detector = cms.string('EE'),
    mightGet = cms.optional.untracked.vstring,
    nHitsTime = cms.uint32(3),
    plugin = cms.PSet(
        dEdXweights = cms.vdouble(
            0.0, 9.205, 11.129999999999999, 11.129999999999999, 11.129999999999999,
            11.129999999999999, 11.129999999999999, 11.129999999999999, 11.129999999999999, 11.129999999999999,
            11.129999999999999, 11.129999999999999, 11.129999999999999, 11.129999999999999, 11.129999999999999,
            11.129999999999999, 11.129999999999999, 11.129999999999999, 13.2, 13.2,
            13.2, 13.2, 13.2, 13.2, 13.2,
            13.2, 35.745000000000005, 59.665000000000006, 60.7, 60.7,
            60.7, 60.7, 60.7, 60.7, 60.7,
            60.7, 60.7, 71.89, 83.08, 83.255,
            83.52000000000001, 83.61, 83.61, 83.61, 83.61,
            83.61, 83.61, 83.61
        ),
        deltac = cms.vdouble(1.3, 1.3, 1.3, 0.0315),
        deltasi_index_regemfac = cms.int32(3),
        dependSensor = cms.bool(True),
        ecut = cms.double(3),
        fcPerEle = cms.double(0.00016020506),
        fcPerMip = cms.vdouble(
            2.06, 3.43, 5.15, 2.06, 3.43,
            5.15
        ),
        kappa = cms.double(9),
        maxNumberOfThickIndices = cms.uint32(6),
        noiseMip = cms.PSet(
            noise_MIP = cms.double(0.01),
            referenceIdark = cms.double(-1),
            referenceXtalk = cms.double(-1),
            scaleByDose = cms.bool(False),
            scaleByDoseAlgo = cms.uint32(0),
            scaleByDoseFactor = cms.double(1)
        ),
        noises = cms.vdouble(
            2000.0, 2400.0, 2000.0, 2000.0, 2400.0,
            2000.0
        ),
        positionDeltaRho2 = cms.double(1.69),
        sciThicknessCorrection = cms.double(0.69),
        thicknessCorrection = cms.vdouble(
            0.75, 0.76, 0.75, 0.85, 0.85,
            0.84
        ),
        thresholdW0 = cms.vdouble(2.9, 2.9, 2.9),
        type = cms.string('SiCLUE'),
        use2x2 = cms.bool(True),
        verbosity = cms.untracked.uint32(3)
    ),
    recHits = cms.InputTag("hltRechitInRegionsHGCAL","HGCEERecHits"),
    timeClname = cms.string('timeLayerCluster')
)


process.hltHgcalLayerClustersHSci = cms.EDProducer("HGCalLayerClusterProducer",
    detector = cms.string('BH'),
    mightGet = cms.optional.untracked.vstring,
    nHitsTime = cms.uint32(3),
    plugin = cms.PSet(
        dEdXweights = cms.vdouble(
            0.0, 9.205, 11.129999999999999, 11.129999999999999, 11.129999999999999,
            11.129999999999999, 11.129999999999999, 11.129999999999999, 11.129999999999999, 11.129999999999999,
            11.129999999999999, 11.129999999999999, 11.129999999999999, 11.129999999999999, 11.129999999999999,
            11.129999999999999, 11.129999999999999, 11.129999999999999, 13.2, 13.2,
            13.2, 13.2, 13.2, 13.2, 13.2,
            13.2, 35.745000000000005, 59.665000000000006, 60.7, 60.7,
            60.7, 60.7, 60.7, 60.7, 60.7,
            60.7, 60.7, 71.89, 83.08, 83.255,
            83.52000000000001, 83.61, 83.61, 83.61, 83.61,
            83.61, 83.61, 83.61
        ),
        deltac = cms.vdouble(1.3, 1.3, 1.3, 0.0315),
        deltasi_index_regemfac = cms.int32(3),
        dependSensor = cms.bool(True),
        ecut = cms.double(3),
        fcPerEle = cms.double(0.00016020506),
        fcPerMip = cms.vdouble(
            2.06, 3.43, 5.15, 2.06, 3.43,
            5.15
        ),
        kappa = cms.double(9),
        maxNumberOfThickIndices = cms.uint32(6),
        noiseMip = cms.PSet(
            noise_MIP = cms.double(0.01),
            referenceIdark = cms.double(-1),
            referenceXtalk = cms.double(-1),
            scaleByDose = cms.bool(False),
            scaleByDoseAlgo = cms.uint32(0),
            scaleByDoseFactor = cms.double(1)
        ),
        noises = cms.vdouble(
            2000.0, 2400.0, 2000.0, 2000.0, 2400.0,
            2000.0
        ),
        positionDeltaRho2 = cms.double(1.69),
        sciThicknessCorrection = cms.double(0.69),
        thicknessCorrection = cms.vdouble(
            0.75, 0.76, 0.75, 0.85, 0.85,
            0.84
        ),
        thresholdW0 = cms.vdouble(2.9, 2.9, 2.9),
        type = cms.string('SciCLUE'),
        use2x2 = cms.bool(True),
        verbosity = cms.untracked.uint32(3)
    ),
    recHits = cms.InputTag("hltHGCalRecHit","HGCHEBRecHits"),
    timeClname = cms.string('timeLayerCluster')
)


process.hltHgcalLayerClustersHSciL1Seeded = cms.EDProducer("HGCalLayerClusterProducer",
    detector = cms.string('BH'),
    mightGet = cms.optional.untracked.vstring,
    nHitsTime = cms.uint32(3),
    plugin = cms.PSet(
        dEdXweights = cms.vdouble(
            0.0, 9.205, 11.129999999999999, 11.129999999999999, 11.129999999999999,
            11.129999999999999, 11.129999999999999, 11.129999999999999, 11.129999999999999, 11.129999999999999,
            11.129999999999999, 11.129999999999999, 11.129999999999999, 11.129999999999999, 11.129999999999999,
            11.129999999999999, 11.129999999999999, 11.129999999999999, 13.2, 13.2,
            13.2, 13.2, 13.2, 13.2, 13.2,
            13.2, 35.745000000000005, 59.665000000000006, 60.7, 60.7,
            60.7, 60.7, 60.7, 60.7, 60.7,
            60.7, 60.7, 71.89, 83.08, 83.255,
            83.52000000000001, 83.61, 83.61, 83.61, 83.61,
            83.61, 83.61, 83.61
        ),
        deltac = cms.vdouble(1.3, 1.3, 1.3, 0.0315),
        deltasi_index_regemfac = cms.int32(3),
        dependSensor = cms.bool(True),
        ecut = cms.double(3),
        fcPerEle = cms.double(0.00016020506),
        fcPerMip = cms.vdouble(
            2.06, 3.43, 5.15, 2.06, 3.43,
            5.15
        ),
        kappa = cms.double(9),
        maxNumberOfThickIndices = cms.uint32(6),
        noiseMip = cms.PSet(
            noise_MIP = cms.double(0.01),
            referenceIdark = cms.double(-1),
            referenceXtalk = cms.double(-1),
            scaleByDose = cms.bool(False),
            scaleByDoseAlgo = cms.uint32(0),
            scaleByDoseFactor = cms.double(1)
        ),
        noises = cms.vdouble(
            2000.0, 2400.0, 2000.0, 2000.0, 2400.0,
            2000.0
        ),
        positionDeltaRho2 = cms.double(1.69),
        sciThicknessCorrection = cms.double(0.69),
        thicknessCorrection = cms.vdouble(
            0.75, 0.76, 0.75, 0.85, 0.85,
            0.84
        ),
        thresholdW0 = cms.vdouble(2.9, 2.9, 2.9),
        type = cms.string('SciCLUE'),
        use2x2 = cms.bool(True),
        verbosity = cms.untracked.uint32(3)
    ),
    recHits = cms.InputTag("hltRechitInRegionsHGCAL","HGCHEBRecHits"),
    timeClname = cms.string('timeLayerCluster')
)


process.hltHgcalLayerClustersHSi = cms.EDProducer("HGCalLayerClusterProducer",
    detector = cms.string('FH'),
    mightGet = cms.optional.untracked.vstring,
    nHitsTime = cms.uint32(3),
    plugin = cms.PSet(
        dEdXweights = cms.vdouble(
            0.0, 9.205, 11.129999999999999, 11.129999999999999, 11.129999999999999,
            11.129999999999999, 11.129999999999999, 11.129999999999999, 11.129999999999999, 11.129999999999999,
            11.129999999999999, 11.129999999999999, 11.129999999999999, 11.129999999999999, 11.129999999999999,
            11.129999999999999, 11.129999999999999, 11.129999999999999, 13.2, 13.2,
            13.2, 13.2, 13.2, 13.2, 13.2,
            13.2, 35.745000000000005, 59.665000000000006, 60.7, 60.7,
            60.7, 60.7, 60.7, 60.7, 60.7,
            60.7, 60.7, 71.89, 83.08, 83.255,
            83.52000000000001, 83.61, 83.61, 83.61, 83.61,
            83.61, 83.61, 83.61
        ),
        deltac = cms.vdouble(1.3, 1.3, 1.3, 0.0315),
        deltasi_index_regemfac = cms.int32(3),
        dependSensor = cms.bool(True),
        ecut = cms.double(3),
        fcPerEle = cms.double(0.00016020506),
        fcPerMip = cms.vdouble(
            2.06, 3.43, 5.15, 2.06, 3.43,
            5.15
        ),
        kappa = cms.double(9),
        maxNumberOfThickIndices = cms.uint32(6),
        noiseMip = cms.PSet(
            noise_MIP = cms.double(0.01),
            referenceIdark = cms.double(-1),
            referenceXtalk = cms.double(-1),
            scaleByDose = cms.bool(False),
            scaleByDoseAlgo = cms.uint32(0),
            scaleByDoseFactor = cms.double(1)
        ),
        noises = cms.vdouble(
            2000.0, 2400.0, 2000.0, 2000.0, 2400.0,
            2000.0
        ),
        positionDeltaRho2 = cms.double(1.69),
        sciThicknessCorrection = cms.double(0.69),
        thicknessCorrection = cms.vdouble(
            0.75, 0.76, 0.75, 0.85, 0.85,
            0.84
        ),
        thresholdW0 = cms.vdouble(2.9, 2.9, 2.9),
        type = cms.string('SiCLUE'),
        use2x2 = cms.bool(True),
        verbosity = cms.untracked.uint32(3)
    ),
    recHits = cms.InputTag("hltHGCalRecHit","HGCHEFRecHits"),
    timeClname = cms.string('timeLayerCluster')
)


process.hltHgcalLayerClustersHSiL1Seeded = cms.EDProducer("HGCalLayerClusterProducer",
    detector = cms.string('FH'),
    mightGet = cms.optional.untracked.vstring,
    nHitsTime = cms.uint32(3),
    plugin = cms.PSet(
        dEdXweights = cms.vdouble(
            0.0, 9.205, 11.129999999999999, 11.129999999999999, 11.129999999999999,
            11.129999999999999, 11.129999999999999, 11.129999999999999, 11.129999999999999, 11.129999999999999,
            11.129999999999999, 11.129999999999999, 11.129999999999999, 11.129999999999999, 11.129999999999999,
            11.129999999999999, 11.129999999999999, 11.129999999999999, 13.2, 13.2,
            13.2, 13.2, 13.2, 13.2, 13.2,
            13.2, 35.745000000000005, 59.665000000000006, 60.7, 60.7,
            60.7, 60.7, 60.7, 60.7, 60.7,
            60.7, 60.7, 71.89, 83.08, 83.255,
            83.52000000000001, 83.61, 83.61, 83.61, 83.61,
            83.61, 83.61, 83.61
        ),
        deltac = cms.vdouble(1.3, 1.3, 1.3, 0.0315),
        deltasi_index_regemfac = cms.int32(3),
        dependSensor = cms.bool(True),
        ecut = cms.double(3),
        fcPerEle = cms.double(0.00016020506),
        fcPerMip = cms.vdouble(
            2.06, 3.43, 5.15, 2.06, 3.43,
            5.15
        ),
        kappa = cms.double(9),
        maxNumberOfThickIndices = cms.uint32(6),
        noiseMip = cms.PSet(
            noise_MIP = cms.double(0.01),
            referenceIdark = cms.double(-1),
            referenceXtalk = cms.double(-1),
            scaleByDose = cms.bool(False),
            scaleByDoseAlgo = cms.uint32(0),
            scaleByDoseFactor = cms.double(1)
        ),
        noises = cms.vdouble(
            2000.0, 2400.0, 2000.0, 2000.0, 2400.0,
            2000.0
        ),
        positionDeltaRho2 = cms.double(1.69),
        sciThicknessCorrection = cms.double(0.69),
        thicknessCorrection = cms.vdouble(
            0.75, 0.76, 0.75, 0.85, 0.85,
            0.84
        ),
        thresholdW0 = cms.vdouble(2.9, 2.9, 2.9),
        type = cms.string('SiCLUE'),
        use2x2 = cms.bool(True),
        verbosity = cms.untracked.uint32(3)
    ),
    recHits = cms.InputTag("hltRechitInRegionsHGCAL","HGCHEFRecHits"),
    timeClname = cms.string('timeLayerCluster')
)


process.hltHgcalMergeLayerClusters = cms.EDProducer("MergeClusterProducer",
    layerClustersEE = cms.InputTag("hltHgCalLayerClustersFromSoAProducer"),
    layerClustersHSci = cms.InputTag("hltHgcalLayerClustersHSci"),
    layerClustersHSi = cms.InputTag("hltHgcalLayerClustersHSi"),
    mightGet = cms.optional.untracked.vstring,
    timeClname = cms.string('timeLayerCluster'),
    time_layerclustersEE = cms.InputTag("hltHgCalLayerClustersFromSoAProducer","timeLayerCluster"),
    time_layerclustersHSci = cms.InputTag("hltHgcalLayerClustersHSci","timeLayerCluster"),
    time_layerclustersHSi = cms.InputTag("hltHgcalLayerClustersHSi","timeLayerCluster")
)


process.hltHgcalMergeLayerClustersL1Seeded = cms.EDProducer("MergeClusterProducer",
    layerClustersEE = cms.InputTag("hltHgcalLayerClustersEEL1Seeded"),
    layerClustersHSci = cms.InputTag("hltHgcalLayerClustersHSciL1Seeded"),
    layerClustersHSi = cms.InputTag("hltHgcalLayerClustersHSiL1Seeded"),
    mightGet = cms.optional.untracked.vstring,
    timeClname = cms.string('timeLayerCluster'),
    time_layerclustersEE = cms.InputTag("hltHgcalLayerClustersEEL1Seeded","timeLayerCluster"),
    time_layerclustersHSci = cms.InputTag("hltHgcalLayerClustersHSciL1Seeded","timeLayerCluster"),
    time_layerclustersHSi = cms.InputTag("hltHgcalLayerClustersHSiL1Seeded","timeLayerCluster")
)


process.hltHgcalSoALayerClustersProducer = cms.EDProducer("HGCalSoALayerClustersProducer@alpaka",
    alpaka = cms.untracked.PSet(
        backend = cms.untracked.string('')
    ),
    hgcalRecHitsLayerClustersSoA = cms.InputTag("hltHgcalSoARecHitsLayerClustersProducer"),
    hgcalRecHitsSoA = cms.InputTag("hltHgcalSoARecHitsProducer"),
    positionDeltaRho2 = cms.double(1.69),
    thresholdW0 = cms.double(2.9)
)


process.hltHgcalSoARecHitsLayerClustersProducer = cms.EDProducer("HGCalSoARecHitsLayerClustersProducer@alpaka",
    alpaka = cms.untracked.PSet(
        backend = cms.untracked.string('')
    ),
    deltac = cms.double(1.3),
    hgcalRecHitsSoA = cms.InputTag("hltHgcalSoARecHitsProducer"),
    kappa = cms.double(9),
    outlierDeltaFactor = cms.double(2.0)
)


process.hltHgcalSoARecHitsProducer = cms.EDProducer("HGCalSoARecHitsProducer@alpaka",
    alpaka = cms.untracked.PSet(
        backend = cms.untracked.string('')
    ),
    dEdXweights = cms.vdouble(
        0.0, 9.205, 11.129999999999999, 11.129999999999999, 11.129999999999999,
        11.129999999999999, 11.129999999999999, 11.129999999999999, 11.129999999999999, 11.129999999999999,
        11.129999999999999, 11.129999999999999, 11.129999999999999, 11.129999999999999, 11.129999999999999,
        11.129999999999999, 11.129999999999999, 11.129999999999999, 13.2, 13.2,
        13.2, 13.2, 13.2, 13.2, 13.2,
        13.2, 35.745000000000005, 59.665000000000006, 60.7, 60.7,
        60.7, 60.7, 60.7, 60.7, 60.7,
        60.7, 60.7, 71.89, 83.08, 83.255,
        83.52000000000001, 83.61, 83.61, 83.61, 83.61,
        83.61, 83.61, 83.61
    ),
    detector = cms.string('EE'),
    ecut = cms.double(3),
    fcPerEle = cms.double(0.00016020506),
    fcPerMip = cms.vdouble(
        2.06, 3.43, 5.15, 2.06, 3.43,
        5.15
    ),
    maxNumberOfThickIndices = cms.uint32(6),
    noises = cms.vdouble(
        2000.0, 2400.0, 2000.0, 2000.0, 2400.0,
        2000.0
    ),
    recHits = cms.InputTag("hltHGCalRecHit","HGCEERecHits"),
    thicknessCorrection = cms.vdouble(
        0.75, 0.76, 0.75, 0.85, 0.85,
        0.84
    )
)


process.hltHighPtTripletStepClusters = cms.EDProducer("TrackClusterRemoverPhase2",
    TrackQuality = cms.string('highPurity'),
    maxChi2 = cms.double(9.0),
    mightGet = cms.optional.untracked.vstring,
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    oldClusterRemovalInfo = cms.InputTag(""),
    overrideTrkQuals = cms.InputTag(""),
    phase2OTClusters = cms.InputTag("hltSiPhase2Clusters"),
    phase2pixelClusters = cms.InputTag("hltSiPixelClusters"),
    trackClassifier = cms.InputTag("","QualityMasks"),
    trajectories = cms.InputTag("hltInitialStepTrackSelectionHighPurity")
)


process.hltHighPtTripletStepHitDoublets = cms.EDProducer("HitPairEDProducer",
    clusterCheck = cms.InputTag("hltTrackerClusterCheck"),
    layerPairs = cms.vuint32(0, 1),
    maxElement = cms.uint32(50000000),
    maxElementTotal = cms.uint32(50000000),
    mightGet = cms.optional.untracked.vstring,
    produceIntermediateHitDoublets = cms.bool(True),
    produceSeedingHitSets = cms.bool(False),
    seedingLayers = cms.InputTag("hltHighPtTripletStepSeedLayers"),
    trackingRegions = cms.InputTag("hltPhase2PixelTracksAndHighPtStepTrackingRegions"),
    trackingRegionsSeedingLayers = cms.InputTag("")
)


process.hltHighPtTripletStepHitTriplets = cms.EDProducer("CAHitTripletEDProducer",
    CAHardPtCut = cms.double(0.5),
    CAPhiCut = cms.double(0.06),
    CAThetaCut = cms.double(0.003),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('LowPtClusterShapeSeedComparitor'),
        clusterShapeCacheSrc = cms.InputTag("hltSiPixelClusterShapeCache"),
        clusterShapeHitFilter = cms.string('ClusterShapeHitFilter')
    ),
    doublets = cms.InputTag("hltHighPtTripletStepHitDoublets"),
    extraHitRPhitolerance = cms.double(0.032),
    maxChi2 = cms.PSet(
        enabled = cms.bool(True),
        pt1 = cms.double(0.8),
        pt2 = cms.double(8),
        value1 = cms.double(100),
        value2 = cms.double(6)
    ),
    mightGet = cms.optional.untracked.vstring,
    useBendingCorrection = cms.bool(True)
)


process.hltHighPtTripletStepSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('hltSiPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("hltHighPtTripletStepClusters")
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('hltSiPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("hltHighPtTripletStepClusters")
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring(
        'BPix1+BPix2+BPix3',
        'BPix2+BPix3+BPix4',
        'BPix1+BPix3+BPix4',
        'BPix1+BPix2+BPix4',
        'BPix2+BPix3+FPix1_pos',
        'BPix2+BPix3+FPix1_neg',
        'BPix1+BPix2+FPix1_pos',
        'BPix1+BPix2+FPix1_neg',
        'BPix2+FPix1_pos+FPix2_pos',
        'BPix2+FPix1_neg+FPix2_neg',
        'BPix1+FPix1_pos+FPix2_pos',
        'BPix1+FPix1_neg+FPix2_neg',
        'FPix1_pos+FPix2_pos+FPix3_pos',
        'FPix1_neg+FPix2_neg+FPix3_neg',
        'BPix1+FPix2_pos+FPix3_pos',
        'BPix1+FPix2_neg+FPix3_neg',
        'FPix2_pos+FPix3_pos+FPix4_pos',
        'FPix2_neg+FPix3_neg+FPix4_neg',
        'FPix3_pos+FPix4_pos+FPix5_pos',
        'FPix3_neg+FPix4_neg+FPix5_neg',
        'FPix4_pos+FPix5_pos+FPix6_pos',
        'FPix4_neg+FPix5_neg+FPix6_neg',
        'FPix5_pos+FPix6_pos+FPix7_pos',
        'FPix5_neg+FPix6_neg+FPix7_neg',
        'FPix6_pos+FPix7_pos+FPix8_pos',
        'FPix6_neg+FPix7_neg+FPix8_neg'
    ),
    mightGet = cms.optional.untracked.vstring
)


process.hltHighPtTripletStepSeeds = cms.EDProducer("SeedCreatorFromRegionConsecutiveHitsEDProducer",
    MinOneOverPtError = cms.double(1),
    OriginTransverseErrorMultiplier = cms.double(1),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedMomentumForBOFF = cms.double(5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    forceKinematicWithRegionDirection = cms.bool(False),
    magneticField = cms.string(''),
    mightGet = cms.optional.untracked.vstring,
    propagator = cms.string('PropagatorWithMaterial'),
    seedingHitSets = cms.InputTag("hltHighPtTripletStepHitTriplets")
)


process.hltHighPtTripletStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("hltMeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('highPtTripletStepTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('highPtTripletStepTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterialParabolicMf'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialParabolicMfOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(100000),
    maxSeedsBeforeCleaning = cms.uint32(1000),
    numHitsForSeedCleaner = cms.int32(50),
    onlyPixelHitsForSeedCleaner = cms.bool(True),
    phase2clustersToSkip = cms.InputTag("hltHighPtTripletStepClusters"),
    reverseTrajectories = cms.bool(False),
    src = cms.InputTag("hltHighPtTripletStepSeeds"),
    useHitsSplitting = cms.bool(False)
)


process.hltHighPtTripletStepTrackCutClassifier = cms.EDProducer("TrackCutClassifier",
    beamspot = cms.InputTag("hltOnlineBeamSpot"),
    ignoreVertices = cms.bool(False),
    mva = cms.PSet(
        dr_par = cms.PSet(
            d0err = cms.vdouble(0.003, 0.003, 0.003),
            d0err_par = cms.vdouble(0.002, 0.002, 0.001),
            dr_exp = cms.vint32(4, 4, 4),
            dr_par1 = cms.vdouble(0.7, 0.6, 0.6),
            dr_par2 = cms.vdouble(0.6, 0.5, 0.45)
        ),
        dz_par = cms.PSet(
            dz_exp = cms.vint32(4, 4, 4),
            dz_par1 = cms.vdouble(0.8, 0.7, 0.7),
            dz_par2 = cms.vdouble(0.6, 0.6, 0.55)
        ),
        maxChi2 = cms.vdouble(9999.0, 9999.0, 9999.0),
        maxChi2n = cms.vdouble(2.0, 1.0, 0.8),
        maxDr = cms.vdouble(0.5, 0.03, 3.40282346639e+38),
        maxDz = cms.vdouble(0.5, 0.2, 3.40282346639e+38),
        maxDzWrtBS = cms.vdouble(3.40282346639e+38, 24.0, 15.0),
        maxLostLayers = cms.vint32(3, 3, 2),
        min3DLayers = cms.vint32(3, 3, 4),
        minLayers = cms.vint32(3, 3, 4),
        minNVtxTrk = cms.int32(3),
        minNdof = cms.vdouble(1e-05, 1e-05, 1e-05),
        minPixelHits = cms.vint32(0, 0, 3)
    ),
    qualityCuts = cms.vdouble(-0.7, 0.1, 0.7),
    src = cms.InputTag("hltHighPtTripletStepTracks"),
    vertices = cms.InputTag("hltPhase2PixelVertices")
)


process.hltHighPtTripletStepTrackSelectionHighPurity = cms.EDProducer("TrackCollectionFilterCloner",
    copyExtras = cms.untracked.bool(True),
    copyTrajectories = cms.untracked.bool(False),
    minQuality = cms.string('highPurity'),
    originalMVAVals = cms.InputTag("hltHighPtTripletStepTrackCutClassifier","MVAValues"),
    originalQualVals = cms.InputTag("hltHighPtTripletStepTrackCutClassifier","QualityMasks"),
    originalSource = cms.InputTag("hltHighPtTripletStepTracks")
)


process.hltHighPtTripletStepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('highPtTripletStep'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("hltMeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("hltOnlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("hltHighPtTripletStepTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.hltHoreco = cms.EDProducer("HcalHitReconstructor",
    HFInWindowStat = cms.PSet(

    ),
    PETstat = cms.PSet(

    ),
    S8S1stat = cms.PSet(

    ),
    S9S1stat = cms.PSet(

    ),
    Subdetector = cms.string('HO'),
    correctForPhaseContainment = cms.bool(True),
    correctForTimeslew = cms.bool(True),
    correctTiming = cms.bool(False),
    correctionPhaseNS = cms.double(13.0),
    dataOOTCorrectionCategory = cms.string('Data'),
    dataOOTCorrectionName = cms.string(''),
    digiLabel = cms.InputTag("hltHcalDigis"),
    digiTimeFromDB = cms.bool(True),
    digistat = cms.PSet(

    ),
    dropZSmarkedPassed = cms.bool(True),
    firstAuxTS = cms.int32(4),
    firstSample = cms.int32(4),
    hfTimingTrustParameters = cms.PSet(

    ),
    mcOOTCorrectionCategory = cms.string('MC'),
    mcOOTCorrectionName = cms.string(''),
    recoParamsFromDB = cms.bool(True),
    samplesToAdd = cms.int32(4),
    saturationParameters = cms.PSet(
        maxADCvalue = cms.int32(127)
    ),
    setHSCPFlags = cms.bool(False),
    setNegativeFlags = cms.bool(False),
    setNoiseFlags = cms.bool(False),
    setPulseShapeFlags = cms.bool(False),
    setSaturationFlags = cms.bool(False),
    setTimingTrustFlags = cms.bool(False),
    tsFromDB = cms.bool(True),
    useLeakCorrection = cms.bool(False)
)


process.hltHpsCombinatoricRecoTaus = cms.EDProducer("RecoTauProducer",
    buildNullTaus = cms.bool(False),
    builders = cms.VPSet(cms.PSet(
        decayModes = cms.VPSet(
            cms.PSet(
                maxPiZeros = cms.uint32(0),
                maxTracks = cms.uint32(6),
                nCharged = cms.uint32(1),
                nPiZeros = cms.uint32(0)
            ),
            cms.PSet(
                maxPiZeros = cms.uint32(6),
                maxTracks = cms.uint32(6),
                nCharged = cms.uint32(1),
                nPiZeros = cms.uint32(1)
            ),
            cms.PSet(
                maxPiZeros = cms.uint32(5),
                maxTracks = cms.uint32(6),
                nCharged = cms.uint32(1),
                nPiZeros = cms.uint32(2)
            ),
            cms.PSet(
                maxPiZeros = cms.uint32(0),
                maxTracks = cms.uint32(6),
                nCharged = cms.uint32(2),
                nPiZeros = cms.uint32(0)
            ),
            cms.PSet(
                maxPiZeros = cms.uint32(3),
                maxTracks = cms.uint32(6),
                nCharged = cms.uint32(2),
                nPiZeros = cms.uint32(1)
            ),
            cms.PSet(
                maxPiZeros = cms.uint32(0),
                maxTracks = cms.uint32(6),
                nCharged = cms.uint32(3),
                nPiZeros = cms.uint32(0)
            ),
            cms.PSet(
                maxPiZeros = cms.uint32(3),
                maxTracks = cms.uint32(6),
                nCharged = cms.uint32(3),
                nPiZeros = cms.uint32(1)
            )
        ),
        isolationConeSize = cms.double(0.5),
        minAbsPhotonSumPt_insideSignalCone = cms.double(2.5),
        minAbsPhotonSumPt_outsideSignalCone = cms.double(1000000000.0),
        minRelPhotonSumPt_insideSignalCone = cms.double(0.1),
        minRelPhotonSumPt_outsideSignalCone = cms.double(1000000000.0),
        name = cms.string('combinatoric'),
        pfCandSrc = cms.InputTag("hltParticleFlowTmp"),
        plugin = cms.string('RecoTauBuilderCombinatoricPlugin'),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                maxDeltaZ = cms.double(0.2),
                maxTrackChi2 = cms.double(100.0),
                maxTransverseImpactParameter = cms.double(0.03),
                minGammaEt = cms.double(1.5),
                minTrackHits = cms.uint32(3),
                minTrackPixelHits = cms.uint32(0),
                minTrackPt = cms.double(1.0),
                minTrackVertexWeight = cms.double(-1.0)
            ),
            leadingTrkOrPFCandOption = cms.string('leadPFCand'),
            primaryVertexSrc = cms.InputTag("hltPhase2PixelVertices"),
            pvFindingAlgo = cms.string('closestInDeltaZ'),
            recoverLeadingTrk = cms.bool(False),
            signalQualityCuts = cms.PSet(
                maxDeltaZ = cms.double(0.4),
                maxTrackChi2 = cms.double(1000.0),
                maxTransverseImpactParameter = cms.double(0.2),
                minGammaEt = cms.double(0.5),
                minNeutralHadronEt = cms.double(30.0),
                minTrackHits = cms.uint32(3),
                minTrackPixelHits = cms.uint32(0),
                minTrackPt = cms.double(0.5),
                minTrackVertexWeight = cms.double(-1.0)
            ),
            vertexTrackFiltering = cms.bool(False),
            vxAssocQualityCuts = cms.PSet(
                maxTrackChi2 = cms.double(1000.0),
                maxTransverseImpactParameter = cms.double(0.2),
                minGammaEt = cms.double(0.5),
                minTrackHits = cms.uint32(3),
                minTrackPixelHits = cms.uint32(0),
                minTrackPt = cms.double(0.5),
                minTrackVertexWeight = cms.double(-1.0)
            )
        ),
        signalConeSize = cms.string('max(min(0.1, 3.0/pt()), 0.05)')
    )),
    chargedHadronSrc = cms.InputTag("hltHpsTauPFJetsRecoTauChargedHadronsWithNeutrals"),
    jetRegionSrc = cms.InputTag("hltTauPFJets08Region"),
    jetSrc = cms.InputTag("hltAK4PFJets"),
    maxJetAbsEta = cms.double(2.5),
    minJetPt = cms.double(14.0),
    modifiers = cms.VPSet(
        cms.PSet(
            DataType = cms.string('AOD'),
            EcalStripSumE_deltaEta = cms.double(0.03),
            EcalStripSumE_deltaPhiOverQ_maxValue = cms.double(0.5),
            EcalStripSumE_deltaPhiOverQ_minValue = cms.double(-0.1),
            EcalStripSumE_minClusEnergy = cms.double(0.1),
            ElecPreIDLeadTkMatch_maxDR = cms.double(0.01),
            ElectronPreIDProducer = cms.InputTag("elecpreid"),
            maximumForElectrionPreIDOutput = cms.double(-0.1),
            name = cms.string('elec_rej'),
            plugin = cms.string('RecoTauElectronRejectionPlugin')
        ),
        cms.PSet(
            name = cms.string('tau_mass'),
            plugin = cms.string('PFRecoTauMassPlugin'),
            verbosity = cms.int32(0)
        )
    ),
    outputSelection = cms.string('leadPFChargedHadrCand().isNonnull()'),
    piZeroSrc = cms.InputTag("hltPFTauPiZeros"),
    verbosity = cms.int32(0)
)


process.hltHpsPFTauBasicDiscriminatorsForDeepTau = cms.EDProducer("PFRecoTauDiscriminationByIsolationContainer",
    IDWPdefinitions = cms.VPSet(),
    IDdefinitions = cms.VPSet(
        cms.PSet(
            ApplyDiscriminationByTrackerIsolation = cms.bool(True),
            IDname = cms.string('ChargedIsoPtSum'),
            storeRawSumPt = cms.bool(True)
        ),
        cms.PSet(
            ApplyDiscriminationByECALIsolation = cms.bool(True),
            IDname = cms.string('NeutralIsoPtSum'),
            storeRawSumPt = cms.bool(True)
        ),
        cms.PSet(
            ApplyDiscriminationByWeightedECALIsolation = cms.bool(True),
            IDname = cms.string('NeutralIsoPtSumWeight'),
            UseAllPFCandsForWeights = cms.bool(True),
            storeRawSumPt = cms.bool(True)
        ),
        cms.PSet(
            IDname = cms.string('TauFootprintCorrection'),
            storeRawFootprintCorrection = cms.bool(True)
        ),
        cms.PSet(
            IDname = cms.string('PhotonPtSumOutsideSignalCone'),
            storeRawPhotonSumPt_outsideSignalCone = cms.bool(True)
        ),
        cms.PSet(
            IDname = cms.string('PUcorrPtSum'),
            applyDeltaBetaCorrection = cms.bool(True),
            storeRawPUsumPt = cms.bool(True)
        )
    ),
    PFTauProducer = cms.InputTag("hltHpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    WeightECALIsolation = cms.double(1.0),
    applyFootprintCorrection = cms.bool(False),
    applyRhoCorrection = cms.bool(False),
    customOuterCone = cms.double(0.5),
    deltaBetaFactor = cms.string('0.2000'),
    deltaBetaPUTrackPtCutOverride = cms.bool(True),
    deltaBetaPUTrackPtCutOverride_val = cms.double(0.5),
    footprintCorrections = cms.VPSet(
        cms.PSet(
            offset = cms.string('0.0'),
            selection = cms.string('decayMode() = 0')
        ),
        cms.PSet(
            offset = cms.string('0.0'),
            selection = cms.string('decayMode() = 1 || decayMode() = 2')
        ),
        cms.PSet(
            offset = cms.string('2.7'),
            selection = cms.string('decayMode() = 5')
        ),
        cms.PSet(
            offset = cms.string('0.0'),
            selection = cms.string('decayMode() = 6')
        ),
        cms.PSet(
            offset = cms.string('max(2.0, 0.22*pt() - 2.0)'),
            selection = cms.string('decayMode() = 10')
        )
    ),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    minTauPtForNoIso = cms.double(-99.0),
    particleFlowSrc = cms.InputTag("hltParticleFlowTmp"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.2),
            maxDeltaZToLeadTrack = cms.double(-1.0),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.03),
            minGammaEt = cms.double(1.5),
            minTrackHits = cms.uint32(8),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(1.0),
            minTrackVertexWeight = cms.double(-1.0),
            useTracksInsteadOfPFHadrons = cms.bool(False)
        ),
        leadingTrkOrPFCandOption = cms.string('leadPFCand'),
        primaryVertexSrc = cms.InputTag("hltPhase2PixelVertices"),
        pvFindingAlgo = cms.string('closestInDeltaZ'),
        recoverLeadingTrk = cms.bool(False),
        signalQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.4),
            maxDeltaZToLeadTrack = cms.double(-1.0),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(1.0),
            minNeutralHadronEt = cms.double(30.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0),
            useTracksInsteadOfPFHadrons = cms.bool(False)
        ),
        vertexTrackFiltering = cms.bool(False),
        vxAssocQualityCuts = cms.PSet(
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(1.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        )
    ),
    rhoConeSize = cms.double(0.5),
    rhoProducer = cms.InputTag("hltFixedGridRhoProducerFastjetAllTau"),
    rhoUEOffsetCorrection = cms.double(1.0),
    verbosity = cms.int32(0),
    vertexSrc = cms.InputTag("hltPhase2PixelVertices")
)


process.hltHpsPFTauBasicDiscriminatorsdR03ForDeepTau = cms.EDProducer("PFRecoTauDiscriminationByIsolationContainer",
    IDWPdefinitions = cms.VPSet(),
    IDdefinitions = cms.VPSet(
        cms.PSet(
            ApplyDiscriminationByTrackerIsolation = cms.bool(True),
            IDname = cms.string('ChargedIsoPtSum'),
            storeRawSumPt = cms.bool(True)
        ),
        cms.PSet(
            ApplyDiscriminationByECALIsolation = cms.bool(True),
            IDname = cms.string('NeutralIsoPtSum'),
            storeRawSumPt = cms.bool(True)
        ),
        cms.PSet(
            ApplyDiscriminationByWeightedECALIsolation = cms.bool(True),
            IDname = cms.string('NeutralIsoPtSumWeight'),
            UseAllPFCandsForWeights = cms.bool(True),
            storeRawSumPt = cms.bool(True)
        ),
        cms.PSet(
            IDname = cms.string('TauFootprintCorrection'),
            storeRawFootprintCorrection = cms.bool(True)
        ),
        cms.PSet(
            IDname = cms.string('PhotonPtSumOutsideSignalCone'),
            storeRawPhotonSumPt_outsideSignalCone = cms.bool(True)
        ),
        cms.PSet(
            IDname = cms.string('PUcorrPtSum'),
            applyDeltaBetaCorrection = cms.bool(True),
            storeRawPUsumPt = cms.bool(True)
        )
    ),
    PFTauProducer = cms.InputTag("hltHpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    WeightECALIsolation = cms.double(1.0),
    applyFootprintCorrection = cms.bool(False),
    applyRhoCorrection = cms.bool(False),
    customOuterCone = cms.double(0.3),
    deltaBetaFactor = cms.string('0.2000'),
    deltaBetaPUTrackPtCutOverride = cms.bool(True),
    deltaBetaPUTrackPtCutOverride_val = cms.double(0.5),
    footprintCorrections = cms.VPSet(
        cms.PSet(
            offset = cms.string('0.0'),
            selection = cms.string('decayMode() = 0')
        ),
        cms.PSet(
            offset = cms.string('0.0'),
            selection = cms.string('decayMode() = 1 || decayMode() = 2')
        ),
        cms.PSet(
            offset = cms.string('2.7'),
            selection = cms.string('decayMode() = 5')
        ),
        cms.PSet(
            offset = cms.string('0.0'),
            selection = cms.string('decayMode() = 6')
        ),
        cms.PSet(
            offset = cms.string('max(2.0, 0.22*pt() - 2.0)'),
            selection = cms.string('decayMode() = 10')
        )
    ),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    minTauPtForNoIso = cms.double(-99.0),
    particleFlowSrc = cms.InputTag("hltParticleFlowTmp"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.2),
            maxDeltaZToLeadTrack = cms.double(-1.0),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.03),
            minGammaEt = cms.double(1.5),
            minTrackHits = cms.uint32(8),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(1.0),
            minTrackVertexWeight = cms.double(-1.0),
            useTracksInsteadOfPFHadrons = cms.bool(False)
        ),
        leadingTrkOrPFCandOption = cms.string('leadPFCand'),
        primaryVertexSrc = cms.InputTag("hltPhase2PixelVertices"),
        pvFindingAlgo = cms.string('closestInDeltaZ'),
        recoverLeadingTrk = cms.bool(False),
        signalQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.4),
            maxDeltaZToLeadTrack = cms.double(-1.0),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(1.0),
            minNeutralHadronEt = cms.double(30.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0),
            useTracksInsteadOfPFHadrons = cms.bool(False)
        ),
        vertexTrackFiltering = cms.bool(False),
        vxAssocQualityCuts = cms.PSet(
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(1.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        )
    ),
    rhoConeSize = cms.double(0.5),
    rhoProducer = cms.InputTag("hltFixedGridRhoProducerFastjetAllTau"),
    rhoUEOffsetCorrection = cms.double(1.0),
    verbosity = cms.int32(0),
    vertexSrc = cms.InputTag("hltPhase2PixelVertices")
)


process.hltHpsPFTauDeepTauProducer = cms.EDProducer("DeepTauId",
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    VSeWP = cms.vstring('-1.'),
    VSjetWP = cms.vstring(
        'double t1 = 0.649, t2 = 0.441, t3 = 0.05, x1 = 35, x2 = 100, x3 = 300; if (pt <= x1) return t1; if (pt >= x3) return t3; if (pt < x2) return (t2 - t1) / (x2 - x1) * (pt - x1) + t1; return (t3 - t2) / (x3 - x2) * (pt - x2) + t2;',
        'double t1 = 0.7045, t2 = 0.7029, t3 = 0.05, x1 = 30, x2 = 100, x3 = 300; if (pt <= x1) return t1; if (pt >= x3) return t3; if (pt < x2) return (t2 - t1) / (x2 - x1) * (pt - x1) + t1; return (t3 - t2) / (x3 - x2) * (pt - x2) + t2;',
        'double t1 = 0.5419, t2 = 0.4837, t3 = 0.050, x1 = 27, x2 = 100, x3 = 300; if (pt <= x1) return t1; if (pt >= x3) return t3; if (pt < x2) return (t2 - t1) / (x2 - x1) * (pt - x1) + t1; return (t3 - t2) / (x3 - x2) * (pt - x2) + t2;',
        'double t1 = 0.6072, t2 = 0.125, x1 = 180, x2 = 500; if (pt <= x1) return t1; if (pt >= x2) return t2; return (t2 - t1) / (x2 - x1) * (pt - x1) + t1;'
    ),
    VSmuWP = cms.vstring('-1.'),
    basicTauDiscriminators = cms.untracked.InputTag("hltHpsPFTauBasicDiscriminatorsForDeepTau"),
    basicTauDiscriminatorsdR03 = cms.untracked.InputTag("hltHpsPFTauBasicDiscriminatorsdR03ForDeepTau"),
    debug_level = cms.int32(0),
    disable_CellIndex_workaround = cms.bool(False),
    disable_dxy_pca = cms.bool(True),
    disable_hcalFraction_workaround = cms.bool(False),
    electrons = cms.InputTag("default"),
    graph_file = cms.vstring(
        'core:RecoTauTag/TrainingFiles/data/DeepTauId/deepTau_2026v2p5_core.pb',
        'inner:RecoTauTag/TrainingFiles/data/DeepTauId/deepTau_2026v2p5_inner.pb',
        'outer:RecoTauTag/TrainingFiles/data/DeepTauId/deepTau_2026v2p5_outer.pb'
    ),
    is_online = cms.bool(True),
    mem_mapped = cms.bool(False),
    muons = cms.InputTag("default"),
    pfTauTransverseImpactParameters = cms.InputTag("hltHpsPFTauTransverseImpactParametersForDeepTau"),
    pfcands = cms.InputTag("hltParticleFlowTmp"),
    rho = cms.InputTag("hltFixedGridRhoProducerFastjetAllTau"),
    save_inputs = cms.bool(False),
    sub_version = cms.uint32(5),
    taus = cms.InputTag("hltHpsPFTauProducer"),
    version = cms.uint32(2),
    vertices = cms.InputTag("hltPhase2PixelVertices"),
    year = cms.uint32(2026)
)


process.hltHpsPFTauDiscriminationByDecayModeFindingNewDMs = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hltHpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    decayModes = cms.VPSet(
        cms.PSet(
            applyBendCorrection = cms.PSet(
                eta = cms.bool(True),
                mass = cms.bool(True),
                phi = cms.bool(True)
            ),
            maxMass = cms.string('1.'),
            minMass = cms.double(-1000.0),
            nCharged = cms.uint32(1),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(0),
            nTracksMin = cms.uint32(1)
        ),
        cms.PSet(
            applyBendCorrection = cms.PSet(
                eta = cms.bool(True),
                mass = cms.bool(True),
                phi = cms.bool(True)
            ),
            assumeStripMass = cms.double(0.1349),
            maxMass = cms.string('max(1.72, min(1.72*sqrt(pt/100.), 4.2))'),
            minMass = cms.double(0.0),
            nCharged = cms.uint32(1),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(1),
            nTracksMin = cms.uint32(1)
        ),
        cms.PSet(
            applyBendCorrection = cms.PSet(
                eta = cms.bool(True),
                mass = cms.bool(True),
                phi = cms.bool(True)
            ),
            assumeStripMass = cms.double(0.0),
            maxMass = cms.string('max(1.72, min(1.72*sqrt(pt/100.), 4.0))'),
            maxPi0Mass = cms.double(0.8),
            minMass = cms.double(0.4),
            minPi0Mass = cms.double(0.0),
            nCharged = cms.uint32(1),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(2),
            nTracksMin = cms.uint32(1)
        ),
        cms.PSet(
            applyBendCorrection = cms.PSet(
                eta = cms.bool(False),
                mass = cms.bool(True),
                phi = cms.bool(True)
            ),
            maxMass = cms.string('1.2'),
            minMass = cms.double(0.0),
            nCharged = cms.uint32(2),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(0),
            nTracksMin = cms.uint32(2)
        ),
        cms.PSet(
            applyBendCorrection = cms.PSet(
                eta = cms.bool(False),
                mass = cms.bool(True),
                phi = cms.bool(True)
            ),
            maxMass = cms.string('max(1.6, min(1.6*sqrt(pt/100.), 4.0))'),
            minMass = cms.double(0.0),
            nCharged = cms.uint32(2),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(1),
            nTracksMin = cms.uint32(2)
        ),
        cms.PSet(
            applyBendCorrection = cms.PSet(
                eta = cms.bool(False),
                mass = cms.bool(True),
                phi = cms.bool(True)
            ),
            maxMass = cms.string('1.6'),
            minMass = cms.double(0.7),
            nCharged = cms.uint32(3),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(0),
            nTracksMin = cms.uint32(2)
        ),
        cms.PSet(
            applyBendCorrection = cms.PSet(
                eta = cms.bool(False),
                mass = cms.bool(False),
                phi = cms.bool(False)
            ),
            maxMass = cms.string('1.6'),
            minMass = cms.double(0.9),
            nCharged = cms.uint32(3),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(1),
            nTracksMin = cms.uint32(2)
        )
    ),
    matchingCone = cms.double(0.5),
    minPixelHits = cms.int32(0),
    minTauPt = cms.double(18.0),
    requireTauChargedHadronsToBeChargedPFCands = cms.bool(False),
    verbosity = cms.int32(0)
)


process.hltHpsPFTauMediumAbsOrRelChargedIsolationDiscriminator = cms.EDProducer("PFTauDiscriminatorLogicalAndProducer",
    FailValue = cms.double(0.0),
    PFTauProducer = cms.InputTag("hltHpsPFTauProducer"),
    PassValue = cms.double(1.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('or'),
        discr1 = cms.PSet(
            Producer = cms.InputTag("hltHpsPFTauMediumAbsoluteChargedIsolationDiscriminator"),
            cut = cms.double(0.5)
        ),
        discr2 = cms.PSet(
            Producer = cms.InputTag("hltHpsPFTauMediumRelativeChargedIsolationDiscriminator"),
            cut = cms.double(0.5)
        )
    )
)


process.hltHpsPFTauMediumAbsoluteChargedIsolationDiscriminator = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    ApplyDiscriminationByWeightedECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hltHpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    UseAllPFCandsForWeights = cms.bool(False),
    WeightECALIsolation = cms.double(0.33333),
    applyDeltaBetaCorrection = cms.bool(False),
    applyFootprintCorrection = cms.bool(False),
    applyOccupancyCut = cms.bool(False),
    applyPhotonPtSumOutsideSignalConeCut = cms.bool(False),
    applyRelativeSumPtCut = cms.bool(False),
    applyRhoCorrection = cms.bool(False),
    applySumPtCut = cms.bool(True),
    customOuterCone = cms.double(-1.0),
    deltaBetaFactor = cms.string('0.38'),
    deltaBetaPUTrackPtCutOverride = cms.bool(True),
    deltaBetaPUTrackPtCutOverride_val = cms.double(0.5),
    enableHGCalWorkaround = cms.bool(False),
    footprintCorrections = cms.VPSet(
        cms.PSet(
            offset = cms.string('0.0'),
            selection = cms.string('decayMode() = 0')
        ),
        cms.PSet(
            offset = cms.string('0.0'),
            selection = cms.string('decayMode() = 1 || decayMode() = 2')
        ),
        cms.PSet(
            offset = cms.string('2.7'),
            selection = cms.string('decayMode() = 5')
        ),
        cms.PSet(
            offset = cms.string('0.0'),
            selection = cms.string('decayMode() = 6')
        ),
        cms.PSet(
            offset = cms.string('max(2.0, 0.22*pt() - 2.0)'),
            selection = cms.string('decayMode() = 10')
        )
    ),
    isoConeSizeForDeltaBeta = cms.double(0.3),
    maxAbsPhotonSumPt_outsideSignalCone = cms.double(1000000000.0),
    maxRelPhotonSumPt_outsideSignalCone = cms.double(0.1),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(3.7),
    minTauPtForNoIso = cms.double(-99.0),
    particleFlowSrc = cms.InputTag("hltParticleFlowTmp"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.2),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            useTracksInsteadOfPFHadrons = cms.bool(False)
        ),
        primaryVertexSrc = cms.InputTag("hltPhase2PixelVertices"),
        pvFindingAlgo = cms.string('closestInDeltaZ'),
        recoverLeadingTrk = cms.bool(False),
        signalQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.2),
            maxTrackChi2 = cms.double(1000.0),
            maxTransverseImpactParameter = cms.double(0.2),
            minGammaEt = cms.double(0.5),
            minNeutralHadronEt = cms.double(1.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.0),
            useTracksInsteadOfPFHadrons = cms.bool(False)
        ),
        vertexTrackFiltering = cms.bool(False),
        vxAssocQualityCuts = cms.PSet(
            maxTrackChi2 = cms.double(1000.0),
            maxTransverseImpactParameter = cms.double(0.2),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.0),
            useTracksInsteadOfPFHadrons = cms.bool(False)
        )
    ),
    relativeSumPtCut = cms.double(0.03),
    relativeSumPtOffset = cms.double(0.0),
    rhoConeSize = cms.double(0.357),
    rhoProducer = cms.InputTag("NotUsed"),
    rhoUEOffsetCorrection = cms.double(0.0),
    storeRawFootprintCorrection = cms.bool(False),
    storeRawOccupancy = cms.bool(False),
    storeRawPUsumPt = cms.bool(False),
    storeRawPhotonSumPt_outsideSignalCone = cms.bool(False),
    storeRawSumPt = cms.bool(False),
    verbosity = cms.int32(0),
    vertexSrc = cms.InputTag("NotUsed")
)


process.hltHpsPFTauMediumRelativeChargedIsolationDiscriminator = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    ApplyDiscriminationByWeightedECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hltHpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    UseAllPFCandsForWeights = cms.bool(False),
    WeightECALIsolation = cms.double(1.0),
    applyDeltaBetaCorrection = cms.bool(False),
    applyFootprintCorrection = cms.bool(False),
    applyOccupancyCut = cms.bool(False),
    applyPhotonPtSumOutsideSignalConeCut = cms.bool(False),
    applyRelativeSumPtCut = cms.bool(True),
    applyRhoCorrection = cms.bool(False),
    applySumPtCut = cms.bool(False),
    customOuterCone = cms.double(-1.0),
    deltaBetaFactor = cms.string('0.38'),
    deltaBetaPUTrackPtCutOverride = cms.bool(True),
    deltaBetaPUTrackPtCutOverride_val = cms.double(0.5),
    enableHGCalWorkaround = cms.bool(False),
    footprintCorrections = cms.VPSet(
        cms.PSet(
            offset = cms.string('0.0'),
            selection = cms.string('decayMode() = 0')
        ),
        cms.PSet(
            offset = cms.string('0.0'),
            selection = cms.string('decayMode() = 1 || decayMode() = 2')
        ),
        cms.PSet(
            offset = cms.string('2.7'),
            selection = cms.string('decayMode() = 5')
        ),
        cms.PSet(
            offset = cms.string('0.0'),
            selection = cms.string('decayMode() = 6')
        ),
        cms.PSet(
            offset = cms.string('max(2.0, 0.22*pt() - 2.0)'),
            selection = cms.string('decayMode() = 10')
        )
    ),
    isoConeSizeForDeltaBeta = cms.double(0.3),
    maxAbsPhotonSumPt_outsideSignalCone = cms.double(1000000000.0),
    maxRelPhotonSumPt_outsideSignalCone = cms.double(0.1),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(2.0),
    minTauPtForNoIso = cms.double(-99.0),
    particleFlowSrc = cms.InputTag("hltParticleFlowTmp"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.2),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            useTracksInsteadOfPFHadrons = cms.bool(False)
        ),
        primaryVertexSrc = cms.InputTag("hltPhase2PixelVertices"),
        pvFindingAlgo = cms.string('closestInDeltaZ'),
        recoverLeadingTrk = cms.bool(False),
        signalQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.2),
            maxTrackChi2 = cms.double(1000.0),
            maxTransverseImpactParameter = cms.double(0.2),
            minGammaEt = cms.double(0.5),
            minNeutralHadronEt = cms.double(1.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.0),
            useTracksInsteadOfPFHadrons = cms.bool(False)
        ),
        vertexTrackFiltering = cms.bool(False),
        vxAssocQualityCuts = cms.PSet(
            maxTrackChi2 = cms.double(1000.0),
            maxTransverseImpactParameter = cms.double(0.2),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.0),
            useTracksInsteadOfPFHadrons = cms.bool(False)
        )
    ),
    relativeSumPtCut = cms.double(0.05),
    relativeSumPtOffset = cms.double(60.0),
    rhoConeSize = cms.double(0.5),
    rhoProducer = cms.InputTag("hltFixedGridRhoFastjetAll"),
    rhoUEOffsetCorrection = cms.double(1.0),
    storeRawFootprintCorrection = cms.bool(False),
    storeRawOccupancy = cms.bool(False),
    storeRawPUsumPt = cms.bool(False),
    storeRawPhotonSumPt_outsideSignalCone = cms.bool(False),
    storeRawSumPt = cms.bool(False),
    verbosity = cms.int32(0),
    vertexSrc = cms.InputTag("NotUsed")
)


process.hltHpsPFTauPrimaryVertexProducerForDeepTau = cms.EDProducer("PFTauPrimaryVertexProducer",
    Algorithm = cms.int32(0),
    ElectronTag = cms.InputTag("hltEgammaCandidates"),
    MuonTag = cms.InputTag("hltMuons"),
    PFTauTag = cms.InputTag("hltHpsPFTauProducer"),
    PVTag = cms.InputTag("hltPhase2PixelVertices"),
    RemoveElectronTracks = cms.bool(False),
    RemoveMuonTracks = cms.bool(False),
    beamSpot = cms.InputTag("hltOnlineBeamSpot"),
    cut = cms.string('pt > 18.0 & abs(eta)<2.4'),
    discriminators = cms.VPSet(cms.PSet(
        discriminator = cms.InputTag("hltHpsPFTauDiscriminationByDecayModeFindingNewDMs"),
        selectionCut = cms.double(0.5)
    )),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.2),
            maxDeltaZToLeadTrack = cms.double(-1.0),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.03),
            minGammaEt = cms.double(1.5),
            minTrackHits = cms.uint32(8),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(1.0),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        leadingTrkOrPFCandOption = cms.string('leadPFCand'),
        primaryVertexSrc = cms.InputTag("hltPhase2PixelVertices"),
        pvFindingAlgo = cms.string('closestInDeltaZ'),
        recoverLeadingTrk = cms.bool(False),
        signalQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.4),
            maxDeltaZToLeadTrack = cms.double(-1.0),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(1.0),
            minNeutralHadronEt = cms.double(30.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        vertexTrackFiltering = cms.bool(False),
        vxAssocQualityCuts = cms.PSet(
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(1.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        )
    ),
    useBeamSpot = cms.bool(True),
    useSelectedTaus = cms.bool(False)
)


process.hltHpsPFTauProducer = cms.EDProducer("RecoTauPiZeroUnembedder",
    src = cms.InputTag("hltHpsPFTauProducerSansRefs")
)


process.hltHpsPFTauProducerSansRefs = cms.EDProducer("RecoTauCleaner",
    cleaners = cms.VPSet(
        cms.PSet(
            name = cms.string('HPS_Select'),
            plugin = cms.string('RecoTauDiscriminantCleanerPlugin'),
            src = cms.InputTag("hltHpsSelectionDiscriminator")
        ),
        cms.PSet(
            minTrackPt = cms.double(5.0),
            name = cms.string('killSoftTwoProngTaus'),
            plugin = cms.string('RecoTauSoftTwoProngTausCleanerPlugin')
        ),
        cms.PSet(
            name = cms.string('ChargedHadronMultiplicity'),
            plugin = cms.string('RecoTauChargedHadronMultiplicityCleanerPlugin')
        ),
        cms.PSet(
            name = cms.string('Pt'),
            plugin = cms.string('RecoTauStringCleanerPlugin'),
            selection = cms.string('leadPFCand().isNonnull()'),
            selectionFailValue = cms.double(1000.0),
            selectionPassFunction = cms.string('-pt()'),
            tolerance = cms.double(0.01)
        ),
        cms.PSet(
            name = cms.string('StripMultiplicity'),
            plugin = cms.string('RecoTauStringCleanerPlugin'),
            selection = cms.string('leadPFCand().isNonnull()'),
            selectionFailValue = cms.double(1000.0),
            selectionPassFunction = cms.string('-signalPiZeroCandidates().size()')
        ),
        cms.PSet(
            name = cms.string('CombinedIsolation'),
            plugin = cms.string('RecoTauStringCleanerPlugin'),
            selection = cms.string('leadPFCand().isNonnull()'),
            selectionFailValue = cms.double(1000.0),
            selectionPassFunction = cms.string('isolationPFChargedHadrCandsPtSum() + isolationPFGammaCandsEtSum()')
        )
    ),
    outputSelection = cms.string(''),
    src = cms.InputTag("hltHpsCombinatoricRecoTaus"),
    verbosity = cms.int32(0)
)


process.hltHpsPFTauSecondaryVertexProducerForDeepTau = cms.EDProducer("PFTauSecondaryVertexProducer",
    PFTauTag = cms.InputTag("hltHpsPFTauProducer")
)


process.hltHpsPFTauTrackFindingDiscriminator = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(0.0),
    PFTauProducer = cms.InputTag("hltHpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    UseOnlyChargedHadrons = cms.bool(True)
)


process.hltHpsPFTauTransverseImpactParametersForDeepTau = cms.EDProducer("PFTauTransverseImpactParameters",
    PFTauPVATag = cms.InputTag("hltHpsPFTauPrimaryVertexProducerForDeepTau"),
    PFTauSVATag = cms.InputTag("hltHpsPFTauSecondaryVertexProducerForDeepTau"),
    PFTauTag = cms.InputTag("hltHpsPFTauProducer"),
    useFullCalculation = cms.bool(True)
)


process.hltHpsSelectionDiscriminator = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hltHpsCombinatoricRecoTaus"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    decayModes = cms.VPSet(
        cms.PSet(
            applyBendCorrection = cms.PSet(
                eta = cms.bool(True),
                mass = cms.bool(True),
                phi = cms.bool(True)
            ),
            maxMass = cms.string('1.'),
            minMass = cms.double(-1000.0),
            nCharged = cms.uint32(1),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(0),
            nTracksMin = cms.uint32(1)
        ),
        cms.PSet(
            applyBendCorrection = cms.PSet(
                eta = cms.bool(True),
                mass = cms.bool(True),
                phi = cms.bool(True)
            ),
            assumeStripMass = cms.double(0.1349),
            maxMass = cms.string('max(1.72, min(1.72*sqrt(pt/100.), 4.2))'),
            minMass = cms.double(0.0),
            nCharged = cms.uint32(1),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(1),
            nTracksMin = cms.uint32(1)
        ),
        cms.PSet(
            applyBendCorrection = cms.PSet(
                eta = cms.bool(True),
                mass = cms.bool(True),
                phi = cms.bool(True)
            ),
            assumeStripMass = cms.double(0.0),
            maxMass = cms.string('max(1.72, min(1.72*sqrt(pt/100.), 4.0))'),
            maxPi0Mass = cms.double(0.8),
            minMass = cms.double(0.4),
            minPi0Mass = cms.double(0.0),
            nCharged = cms.uint32(1),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(2),
            nTracksMin = cms.uint32(1)
        ),
        cms.PSet(
            applyBendCorrection = cms.PSet(
                eta = cms.bool(False),
                mass = cms.bool(True),
                phi = cms.bool(True)
            ),
            maxMass = cms.string('1.2'),
            minMass = cms.double(0.0),
            nCharged = cms.uint32(2),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(0),
            nTracksMin = cms.uint32(2)
        ),
        cms.PSet(
            applyBendCorrection = cms.PSet(
                eta = cms.bool(False),
                mass = cms.bool(True),
                phi = cms.bool(True)
            ),
            maxMass = cms.string('max(1.6, min(1.6*sqrt(pt/100.), 4.0))'),
            minMass = cms.double(0.0),
            nCharged = cms.uint32(2),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(1),
            nTracksMin = cms.uint32(2)
        ),
        cms.PSet(
            applyBendCorrection = cms.PSet(
                eta = cms.bool(False),
                mass = cms.bool(True),
                phi = cms.bool(True)
            ),
            maxMass = cms.string('1.6'),
            minMass = cms.double(0.7),
            nCharged = cms.uint32(3),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(0),
            nTracksMin = cms.uint32(2)
        ),
        cms.PSet(
            applyBendCorrection = cms.PSet(
                eta = cms.bool(False),
                mass = cms.bool(False),
                phi = cms.bool(False)
            ),
            maxMass = cms.string('1.6'),
            minMass = cms.double(0.9),
            nCharged = cms.uint32(3),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(1),
            nTracksMin = cms.uint32(2)
        )
    ),
    matchingCone = cms.double(0.5),
    minPixelHits = cms.int32(0),
    minTauPt = cms.double(0.0),
    requireTauChargedHadronsToBeChargedPFCands = cms.bool(False),
    verbosity = cms.int32(0)
)


process.hltHpsTauPFJetsRecoTauChargedHadronsWithNeutrals = cms.EDProducer("PFRecoTauChargedHadronProducer",
    builders = cms.VPSet(
        cms.PSet(
            chargedHadronCandidatesParticleIds = cms.vint32(1, 2, 3),
            dRmergeNeutralHadronWrtChargedHadron = cms.double(0.005),
            dRmergeNeutralHadronWrtElectron = cms.double(0.05),
            dRmergeNeutralHadronWrtNeutralHadron = cms.double(0.01),
            dRmergeNeutralHadronWrtOther = cms.double(0.005),
            dRmergePhotonWrtChargedHadron = cms.double(0.005),
            dRmergePhotonWrtElectron = cms.double(0.005),
            dRmergePhotonWrtNeutralHadron = cms.double(0.01),
            dRmergePhotonWrtOther = cms.double(0.005),
            maxUnmatchedBlockElementsNeutralHadron = cms.int32(1),
            maxUnmatchedBlockElementsPhoton = cms.int32(1),
            minBlockElementMatchesNeutralHadron = cms.int32(2),
            minBlockElementMatchesPhoton = cms.int32(2),
            minMergeChargedHadronPt = cms.double(100.0),
            minMergeGammaEt = cms.double(0.0),
            minMergeNeutralHadronEt = cms.double(0.0),
            name = cms.string('chargedPFCandidates'),
            plugin = cms.string('PFRecoTauChargedHadronFromPFCandidatePlugin'),
            qualityCuts = cms.PSet(
                primaryVertexSrc = cms.InputTag("hltPhase2PixelVertices"),
                pvFindingAlgo = cms.string('closestInDeltaZ'),
                recoverLeadingTrk = cms.bool(False),
                signalQualityCuts = cms.PSet(
                    maxDeltaZ = cms.double(0.2),
                    maxTrackChi2 = cms.double(1000.0),
                    maxTransverseImpactParameter = cms.double(0.2),
                    minGammaEt = cms.double(0.5),
                    minNeutralHadronEt = cms.double(30.0),
                    minTrackHits = cms.uint32(3),
                    minTrackPixelHits = cms.uint32(0),
                    minTrackPt = cms.double(0.0),
                    useTracksInsteadOfPFHadrons = cms.bool(False)
                ),
                vertexTrackFiltering = cms.bool(False),
                vxAssocQualityCuts = cms.PSet(
                    maxTrackChi2 = cms.double(1000.0),
                    maxTransverseImpactParameter = cms.double(0.2),
                    minGammaEt = cms.double(0.5),
                    minTrackHits = cms.uint32(3),
                    minTrackPixelHits = cms.uint32(0),
                    minTrackPt = cms.double(0.0),
                    useTracksInsteadOfPFHadrons = cms.bool(False)
                )
            )
        ),
        cms.PSet(
            chargedHadronCandidatesParticleIds = cms.vint32(5),
            dRmergeNeutralHadronWrtChargedHadron = cms.double(0.005),
            dRmergeNeutralHadronWrtElectron = cms.double(0.05),
            dRmergeNeutralHadronWrtNeutralHadron = cms.double(0.01),
            dRmergeNeutralHadronWrtOther = cms.double(0.005),
            dRmergePhotonWrtChargedHadron = cms.double(0.005),
            dRmergePhotonWrtElectron = cms.double(0.005),
            dRmergePhotonWrtNeutralHadron = cms.double(0.01),
            dRmergePhotonWrtOther = cms.double(0.005),
            maxUnmatchedBlockElementsNeutralHadron = cms.int32(1),
            maxUnmatchedBlockElementsPhoton = cms.int32(1),
            minBlockElementMatchesNeutralHadron = cms.int32(2),
            minBlockElementMatchesPhoton = cms.int32(2),
            minMergeChargedHadronPt = cms.double(0.0),
            minMergeGammaEt = cms.double(0.0),
            minMergeNeutralHadronEt = cms.double(0.0),
            name = cms.string('PFNeutralHadrons'),
            plugin = cms.string('PFRecoTauChargedHadronFromPFCandidatePlugin'),
            qualityCuts = cms.PSet(
                primaryVertexSrc = cms.InputTag("hltPhase2PixelVertices"),
                pvFindingAlgo = cms.string('closestInDeltaZ'),
                recoverLeadingTrk = cms.bool(False),
                signalQualityCuts = cms.PSet(
                    maxDeltaZ = cms.double(0.2),
                    maxTrackChi2 = cms.double(1000.0),
                    maxTransverseImpactParameter = cms.double(0.2),
                    minGammaEt = cms.double(0.5),
                    minNeutralHadronEt = cms.double(30.0),
                    minTrackHits = cms.uint32(3),
                    minTrackPixelHits = cms.uint32(0),
                    minTrackPt = cms.double(0.0),
                    useTracksInsteadOfPFHadrons = cms.bool(False)
                ),
                vertexTrackFiltering = cms.bool(False),
                vxAssocQualityCuts = cms.PSet(
                    maxTrackChi2 = cms.double(1000.0),
                    maxTransverseImpactParameter = cms.double(0.2),
                    minGammaEt = cms.double(0.5),
                    minTrackHits = cms.uint32(3),
                    minTrackPixelHits = cms.uint32(0),
                    minTrackPt = cms.double(0.0),
                    useTracksInsteadOfPFHadrons = cms.bool(False)
                )
            )
        )
    ),
    jetSrc = cms.InputTag("hltAK4PFJets"),
    maxJetAbsEta = cms.double(99.0),
    minJetPt = cms.double(-1.0),
    outputSelection = cms.string('pt > 0.5'),
    ranking = cms.VPSet(
        cms.PSet(
            name = cms.string('ChargedPFCandidate'),
            plugin = cms.string('PFRecoTauChargedHadronStringQuality'),
            selection = cms.string("algoIs(\'kChargedPFCandidate\')"),
            selectionFailValue = cms.double(1000.0),
            selectionPassFunction = cms.string('-pt')
        ),
        cms.PSet(
            name = cms.string('ChargedPFCandidate'),
            plugin = cms.string('PFRecoTauChargedHadronStringQuality'),
            selection = cms.string("algoIs(\'kPFNeutralHadron\')"),
            selectionFailValue = cms.double(1000.0),
            selectionPassFunction = cms.string('-pt')
        )
    ),
    verbosity = cms.int32(0)
)


process.hltHtMhtPFPuppiCentralJetsQuadC30MaxEta2p4 = cms.EDProducer("HLTHtMhtProducer",
    excludePFMuons = cms.bool(False),
    jetsLabel = cms.InputTag("hltAK4PFPuppiJetsCorrected"),
    maxEtaJetHt = cms.double(2.4),
    maxEtaJetMht = cms.double(2.4),
    minNJetHt = cms.int32(4),
    minNJetMht = cms.int32(0),
    minPtJetHt = cms.double(30.0),
    minPtJetMht = cms.double(0.0),
    pfCandidatesLabel = cms.InputTag(""),
    usePt = cms.bool(True)
)


process.hltInitialStepSeeds = cms.EDProducer("SeedGeneratorFromProtoTracksEDProducer",
    InputCollection = cms.InputTag("hltPhase2PixelTracks"),
    InputVertexCollection = cms.InputTag(""),
    SeedCreatorPSet = cms.PSet(
        refToPSet_ = cms.string('seedFromProtoTracks')
    ),
    TTRHBuilder = cms.string('WithTrackAngle'),
    originHalfLength = cms.double(0.3),
    originRadius = cms.double(0.1),
    useEventsWithNoVertex = cms.bool(True),
    usePV = cms.bool(False),
    useProtoTrackKinematics = cms.bool(False)
)


process.hltInitialStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("hltMeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('initialStepTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterialParabolicMf'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialParabolicMfOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(100000),
    maxSeedsBeforeCleaning = cms.uint32(1000),
    numHitsForSeedCleaner = cms.int32(50),
    onlyPixelHitsForSeedCleaner = cms.bool(True),
    reverseTrajectories = cms.bool(False),
    src = cms.InputTag("hltInitialStepSeeds"),
    useHitsSplitting = cms.bool(False)
)


process.hltInitialStepTrackCutClassifier = cms.EDProducer("TrackCutClassifier",
    beamspot = cms.InputTag("hltOnlineBeamSpot"),
    ignoreVertices = cms.bool(False),
    mva = cms.PSet(
        dr_par = cms.PSet(
            d0err = cms.vdouble(0.003, 0.003, 0.003),
            d0err_par = cms.vdouble(0.001, 0.001, 0.001),
            dr_exp = cms.vint32(4, 4, 4),
            dr_par1 = cms.vdouble(0.8, 0.7, 0.6),
            dr_par2 = cms.vdouble(0.6, 0.5, 0.45)
        ),
        dz_par = cms.PSet(
            dz_exp = cms.vint32(4, 4, 4),
            dz_par1 = cms.vdouble(0.9, 0.8, 0.7),
            dz_par2 = cms.vdouble(0.8, 0.7, 0.55)
        ),
        maxChi2 = cms.vdouble(9999.0, 25.0, 16.0),
        maxChi2n = cms.vdouble(2.0, 1.4, 1.2),
        maxDr = cms.vdouble(0.5, 0.03, 3.40282346639e+38),
        maxDz = cms.vdouble(0.5, 0.2, 3.40282346639e+38),
        maxDzWrtBS = cms.vdouble(3.40282346639e+38, 24.0, 15.0),
        maxLostLayers = cms.vint32(3, 2, 2),
        min3DLayers = cms.vint32(3, 3, 3),
        minLayers = cms.vint32(3, 3, 3),
        minNVtxTrk = cms.int32(3),
        minNdof = cms.vdouble(1e-05, 1e-05, 1e-05),
        minPixelHits = cms.vint32(0, 0, 3)
    ),
    qualityCuts = cms.vdouble(-0.7, 0.1, 0.7),
    src = cms.InputTag("hltInitialStepTracks"),
    vertices = cms.InputTag("hltPhase2PixelVertices")
)


process.hltInitialStepTrackSelectionHighPurity = cms.EDProducer("TrackCollectionFilterCloner",
    copyExtras = cms.untracked.bool(True),
    copyTrajectories = cms.untracked.bool(False),
    minQuality = cms.string('highPurity'),
    originalMVAVals = cms.InputTag("hltInitialStepTrackCutClassifier","MVAValues"),
    originalQualVals = cms.InputTag("hltInitialStepTrackCutClassifier","QualityMasks"),
    originalSource = cms.InputTag("hltInitialStepTracks")
)


process.hltInitialStepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('initialStep'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("hltMeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("hltOnlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("hltInitialStepTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.hltIter0Phase2L3FromL1TkMuonCkfTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("hltMeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('none'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('HLTIter0Phase2L3FromL1TkMuonPSetGroupedCkfTrajectoryBuilderIT')
    ),
    TrajectoryCleaner = cms.string('hltESPTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterialParabolicMf'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialParabolicMfOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(False),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(100000),
    maxSeedsBeforeCleaning = cms.uint32(1000),
    src = cms.InputTag("hltIter0Phase2L3FromL1TkMuonPixelSeedsFromPixelTracks"),
    useHitsSplitting = cms.bool(True)
)


process.hltIter0Phase2L3FromL1TkMuonCtfWithMaterialTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('hltIter0'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(True),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("hltMeasurementTrackerEvent"),
    NavigationSchool = cms.string(''),
    Propagator = cms.string('hltESPRungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("hltOnlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("hltIter0Phase2L3FromL1TkMuonCkfTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.hltIter0Phase2L3FromL1TkMuonPixelSeedsFromPixelTracks = cms.EDProducer("SeedGeneratorFromProtoTracksEDProducer",
    InputCollection = cms.InputTag("hltPhase2L3FromL1TkMuonPixelTracks"),
    InputVertexCollection = cms.InputTag("hltPhase2L3FromL1TkMuonTrimmedPixelVertices"),
    SeedCreatorPSet = cms.PSet(
        refToPSet_ = cms.string('hltPhase2SeedFromProtoTracks')
    ),
    TTRHBuilder = cms.string('WithTrackAngle'),
    originHalfLength = cms.double(0.3),
    originRadius = cms.double(0.1),
    useEventsWithNoVertex = cms.bool(True),
    usePV = cms.bool(False),
    useProtoTrackKinematics = cms.bool(False)
)


process.hltIter0Phase2L3FromL1TkMuonTrackCutClassifier = cms.EDProducer("TrackCutClassifier",
    beamspot = cms.InputTag("hltOnlineBeamSpot"),
    ignoreVertices = cms.bool(False),
    mva = cms.PSet(
        dr_par = cms.PSet(
            d0err = cms.vdouble(0.003, 0.003, 3.40282346639e+38),
            d0err_par = cms.vdouble(0.001, 0.001, 3.40282346639e+38),
            dr_exp = cms.vint32(4, 4, 2147483647),
            dr_par1 = cms.vdouble(0.4, 0.4, 3.40282346639e+38),
            dr_par2 = cms.vdouble(0.3, 0.3, 3.40282346639e+38)
        ),
        dz_par = cms.PSet(
            dz_exp = cms.vint32(4, 4, 2147483647),
            dz_par1 = cms.vdouble(0.4, 0.4, 3.40282346639e+38),
            dz_par2 = cms.vdouble(0.35, 0.35, 3.40282346639e+38)
        ),
        maxChi2 = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
        maxChi2n = cms.vdouble(1.2, 1.0, 0.7),
        maxDr = cms.vdouble(0.5, 0.03, 3.40282346639e+38),
        maxDz = cms.vdouble(0.5, 0.2, 3.40282346639e+38),
        maxDzWrtBS = cms.vdouble(3.40282346639e+38, 24.0, 100.0),
        maxLostLayers = cms.vint32(1, 1, 1),
        min3DLayers = cms.vint32(0, 3, 4),
        minLayers = cms.vint32(3, 3, 4),
        minNVtxTrk = cms.int32(3),
        minNdof = cms.vdouble(1e-05, 1e-05, 1e-05),
        minPixelHits = cms.vint32(0, 3, 4)
    ),
    qualityCuts = cms.vdouble(-0.7, 0.1, 0.7),
    src = cms.InputTag("hltIter0Phase2L3FromL1TkMuonCtfWithMaterialTracks"),
    vertices = cms.InputTag("hltPhase2L3FromL1TkMuonTrimmedPixelVertices")
)


process.hltIter0Phase2L3FromL1TkMuonTrackSelectionHighPurity = cms.EDProducer("TrackCollectionFilterCloner",
    copyExtras = cms.untracked.bool(True),
    copyTrajectories = cms.untracked.bool(False),
    minQuality = cms.string('highPurity'),
    originalMVAVals = cms.InputTag("hltIter0Phase2L3FromL1TkMuonTrackCutClassifier","MVAValues"),
    originalQualVals = cms.InputTag("hltIter0Phase2L3FromL1TkMuonTrackCutClassifier","QualityMasks"),
    originalSource = cms.InputTag("hltIter0Phase2L3FromL1TkMuonCtfWithMaterialTracks")
)


process.hltIter2Phase2L3FromL1TkMuonCkfTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("hltIter2Phase2L3FromL1TkMuonMaskedMeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('HLTIter2Phase2L3FromL1TkMuonPSetGroupedCkfTrajectoryBuilderIT')
    ),
    TrajectoryCleaner = cms.string('hltESPTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterialParabolicMf'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialParabolicMfOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(False),
    doSeedingRegionRebuilding = cms.bool(False),
    maxNSeeds = cms.uint32(100000),
    maxSeedsBeforeCleaning = cms.uint32(1000),
    src = cms.InputTag("hltIter2Phase2L3FromL1TkMuonPixelSeedsFiltered"),
    useHitsSplitting = cms.bool(False)
)


process.hltIter2Phase2L3FromL1TkMuonClustersRefRemoval = cms.EDProducer("TrackClusterRemoverPhase2",
    TrackQuality = cms.string('highPurity'),
    maxChi2 = cms.double(16.0),
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    oldClusterRemovalInfo = cms.InputTag(""),
    overrideTrkQuals = cms.InputTag(""),
    phase2OTClusters = cms.InputTag("hltSiPhase2Clusters"),
    phase2pixelClusters = cms.InputTag("hltSiPixelClusters"),
    trackClassifier = cms.InputTag("","QualityMasks"),
    trajectories = cms.InputTag("hltIter0Phase2L3FromL1TkMuonTrackSelectionHighPurity")
)


process.hltIter2Phase2L3FromL1TkMuonCtfWithMaterialTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('hltIter2'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(True),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("hltIter2Phase2L3FromL1TkMuonMaskedMeasurementTrackerEvent"),
    NavigationSchool = cms.string(''),
    Propagator = cms.string('hltESPRungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("hltOnlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("hltIter2Phase2L3FromL1TkMuonCkfTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.hltIter2Phase2L3FromL1TkMuonMaskedMeasurementTrackerEvent = cms.EDProducer("MaskedMeasurementTrackerEventProducer",
    OnDemand = cms.bool(False),
    phase2clustersToSkip = cms.InputTag("hltIter2Phase2L3FromL1TkMuonClustersRefRemoval"),
    src = cms.InputTag("hltMeasurementTrackerEvent")
)


process.hltIter2Phase2L3FromL1TkMuonMerged = cms.EDProducer("TrackListMerger",
    Epsilon = cms.double(-0.001),
    FoundHitBonus = cms.double(5.0),
    LostHitPenalty = cms.double(20.0),
    MaxNormalizedChisq = cms.double(1000.0),
    MinFound = cms.int32(3),
    MinPT = cms.double(0.05),
    ShareFrac = cms.double(0.19),
    TrackProducers = cms.VInputTag("hltIter0Phase2L3FromL1TkMuonTrackSelectionHighPurity", "hltIter2Phase2L3FromL1TkMuonTrackSelectionHighPurity"),
    allowFirstHitShare = cms.bool(True),
    copyExtras = cms.untracked.bool(True),
    copyMVA = cms.bool(False),
    hasSelector = cms.vint32(0, 0),
    indivShareFrac = cms.vdouble(1.0, 1.0),
    newQuality = cms.string('confirmed'),
    selectedTrackQuals = cms.VInputTag("hltIter0Phase2L3FromL1TkMuonTrackSelectionHighPurity", "hltIter2Phase2L3FromL1TkMuonTrackSelectionHighPurity"),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(False),
        tLists = cms.vint32(0, 1)
    )),
    trackAlgoPriorityOrder = cms.string('hltESPTrackAlgoPriorityOrder'),
    writeOnlyTrkQuals = cms.bool(False)
)


process.hltIter2Phase2L3FromL1TkMuonPixelClusterCheck = cms.EDProducer("ClusterCheckerEDProducer",
    ClusterCollectionLabel = cms.InputTag("hltMeasurementTrackerEvent"),
    MaxNumberOfPixelClusters = cms.uint32(10000),
    MaxNumberOfStripClusters = cms.uint32(50000),
    PixelClusterCollectionLabel = cms.InputTag("hltSiPixelClusters"),
    cut = cms.string(''),
    doClusterCheck = cms.bool(False),
    silentClusterCheck = cms.untracked.bool(False)
)


process.hltIter2Phase2L3FromL1TkMuonPixelHitDoublets = cms.EDProducer("HitPairEDProducer",
    clusterCheck = cms.InputTag("hltIter2Phase2L3FromL1TkMuonPixelClusterCheck"),
    layerPairs = cms.vuint32(0, 1),
    maxElement = cms.uint32(0),
    produceIntermediateHitDoublets = cms.bool(True),
    produceSeedingHitSets = cms.bool(False),
    seedingLayers = cms.InputTag("hltIter2Phase2L3FromL1TkMuonPixelLayerTriplets"),
    trackingRegions = cms.InputTag("hltPhase2L3FromL1TkMuonPixelTracksTrackingRegions"),
    trackingRegionsSeedingLayers = cms.InputTag("")
)


process.hltIter2Phase2L3FromL1TkMuonPixelHitTriplets = cms.EDProducer("CAHitTripletEDProducer",
    CAHardPtCut = cms.double(0.3),
    CAPhiCut = cms.double(0.1),
    CAThetaCut = cms.double(0.015),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    doublets = cms.InputTag("hltIter2Phase2L3FromL1TkMuonPixelHitDoublets"),
    extraHitRPhitolerance = cms.double(0.032),
    maxChi2 = cms.PSet(
        enabled = cms.bool(True),
        pt1 = cms.double(0.8),
        pt2 = cms.double(8.0),
        value1 = cms.double(100.0),
        value2 = cms.double(6.0)
    ),
    useBendingCorrection = cms.bool(True)
)


process.hltIter2Phase2L3FromL1TkMuonPixelLayerTriplets = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('hltSiPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("hltIter2Phase2L3FromL1TkMuonClustersRefRemoval")
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('hltSiPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("hltIter2Phase2L3FromL1TkMuonClustersRefRemoval")
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring(
        'BPix1+BPix2+BPix3',
        'BPix2+BPix3+BPix4',
        'BPix1+BPix3+BPix4',
        'BPix1+BPix2+BPix4',
        'BPix2+BPix3+FPix1_pos',
        'BPix2+BPix3+FPix1_neg',
        'BPix1+BPix2+FPix1_pos',
        'BPix1+BPix2+FPix1_neg',
        'BPix2+FPix1_pos+FPix2_pos',
        'BPix2+FPix1_neg+FPix2_neg',
        'BPix1+FPix1_pos+FPix2_pos',
        'BPix1+FPix1_neg+FPix2_neg',
        'FPix1_pos+FPix2_pos+FPix3_pos',
        'FPix1_neg+FPix2_neg+FPix3_neg',
        'BPix1+BPix3+FPix1_pos',
        'BPix1+BPix2+FPix2_pos',
        'BPix1+BPix3+FPix1_neg',
        'BPix1+BPix2+FPix2_neg',
        'BPix1+FPix2_neg+FPix3_neg',
        'BPix1+FPix1_neg+FPix3_neg',
        'BPix1+FPix2_pos+FPix3_pos',
        'BPix1+FPix1_pos+FPix3_pos'
    )
)


process.hltIter2Phase2L3FromL1TkMuonPixelSeeds = cms.EDProducer("SeedCreatorFromRegionConsecutiveHitsTripletOnlyEDProducer",
    MinOneOverPtError = cms.double(1.0),
    OriginTransverseErrorMultiplier = cms.double(1.0),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedMomentumForBOFF = cms.double(5.0),
    TTRHBuilder = cms.string('WithTrackAngle'),
    forceKinematicWithRegionDirection = cms.bool(False),
    magneticField = cms.string('ParabolicMf'),
    propagator = cms.string('PropagatorWithMaterialParabolicMf'),
    seedingHitSets = cms.InputTag("hltIter2Phase2L3FromL1TkMuonPixelHitTriplets")
)


process.hltIter2Phase2L3FromL1TkMuonPixelSeedsFiltered = cms.EDProducer("MuonHLTSeedMVAClassifierPhase2",
    L1TkMu = cms.InputTag("l1tTkMuonsGmt"),
    baseScore = cms.double(0.5),
    doSort = cms.bool(True),
    etaEdge = cms.double(1.2),
    mvaCut_B = cms.double(0.0),
    mvaCut_E = cms.double(0.0),
    mvaFile_B_0 = cms.FileInPath('RecoMuon/TrackerSeedGenerator/data/xgb_Phase2_Iter2FromL1_barrel_v0.xml'),
    mvaFile_E_0 = cms.FileInPath('RecoMuon/TrackerSeedGenerator/data/xgb_Phase2_Iter2FromL1_endcap_v0.xml'),
    mvaScaleMean_B = cms.vdouble(
        0.00033113700731766336, 1.6825601468762878e-06, 1.790932122524803e-06, 0.010534608406382916, 0.005969459957330139,
        0.0009605022254971113, 0.04384189672781466, 7.846741237608237e-05, 0.40725050850004824, 0.41125151617410227,
        0.39815551065544846
    ),
    mvaScaleMean_E = cms.vdouble(
        0.00022658482374555603, 5.358921973784045e-07, 1.010003713549798e-06, 0.0007886873612224615, 0.001197730548842408,
        -0.0030252353426003594, 0.07151944804171254, -0.0006940626775109026, 0.20535152195939896, 0.2966816533783824,
        0.28798220230180455
    ),
    mvaScaleStd_B = cms.vdouble(
        0.0006042948363798624, 2.445644111872427e-06, 3.454992543447134e-06, 0.09401581628887255, 0.7978806947573766,
        0.4932933044535928, 0.04180518265631776, 0.058296511682094855, 0.4071857009373577, 0.41337782307392973,
        0.4101160349549534
    ),
    mvaScaleStd_E = cms.vdouble(
        0.0003857726789049956, 1.4853721474087994e-06, 6.982997036736564e-06, 0.04071340757666084, 0.5897606560095399,
        0.33052121398064654, 0.05589386786541949, 0.08806273533388546, 0.3254586902665612, 0.3293354496231377,
        0.3179899794578072
    ),
    nSeedsMax_B = cms.int32(20),
    nSeedsMax_E = cms.int32(20),
    src = cms.InputTag("hltIter2Phase2L3FromL1TkMuonPixelSeeds")
)


process.hltIter2Phase2L3FromL1TkMuonTrackCutClassifier = cms.EDProducer("TrackCutClassifier",
    beamspot = cms.InputTag("hltOnlineBeamSpot"),
    ignoreVertices = cms.bool(False),
    mva = cms.PSet(
        dr_par = cms.PSet(
            d0err = cms.vdouble(0.003, 0.003, 3.40282346639e+38),
            d0err_par = cms.vdouble(0.001, 0.001, 3.40282346639e+38),
            dr_exp = cms.vint32(4, 4, 2147483647),
            dr_par1 = cms.vdouble(3.40282346639e+38, 0.4, 3.40282346639e+38),
            dr_par2 = cms.vdouble(3.40282346639e+38, 0.3, 3.40282346639e+38)
        ),
        dz_par = cms.PSet(
            dz_exp = cms.vint32(4, 4, 2147483647),
            dz_par1 = cms.vdouble(3.40282346639e+38, 0.4, 3.40282346639e+38),
            dz_par2 = cms.vdouble(3.40282346639e+38, 0.35, 3.40282346639e+38)
        ),
        maxChi2 = cms.vdouble(9999.0, 25.0, 3.40282346639e+38),
        maxChi2n = cms.vdouble(1.2, 1.0, 0.7),
        maxDr = cms.vdouble(0.5, 0.03, 3.40282346639e+38),
        maxDz = cms.vdouble(0.5, 0.2, 3.40282346639e+38),
        maxDzWrtBS = cms.vdouble(3.40282346639e+38, 24.0, 100.0),
        maxLostLayers = cms.vint32(1, 1, 1),
        min3DLayers = cms.vint32(0, 0, 0),
        minLayers = cms.vint32(3, 3, 3),
        minNVtxTrk = cms.int32(3),
        minNdof = cms.vdouble(1e-05, 1e-05, 1e-05),
        minPixelHits = cms.vint32(0, 0, 0)
    ),
    qualityCuts = cms.vdouble(-0.7, 0.1, 0.7),
    src = cms.InputTag("hltIter2Phase2L3FromL1TkMuonCtfWithMaterialTracks"),
    vertices = cms.InputTag("hltPhase2L3FromL1TkMuonTrimmedPixelVertices")
)


process.hltIter2Phase2L3FromL1TkMuonTrackSelectionHighPurity = cms.EDProducer("TrackCollectionFilterCloner",
    copyExtras = cms.untracked.bool(True),
    copyTrajectories = cms.untracked.bool(False),
    minQuality = cms.string('highPurity'),
    originalMVAVals = cms.InputTag("hltIter2Phase2L3FromL1TkMuonTrackCutClassifier","MVAValues"),
    originalQualVals = cms.InputTag("hltIter2Phase2L3FromL1TkMuonTrackCutClassifier","QualityMasks"),
    originalSource = cms.InputTag("hltIter2Phase2L3FromL1TkMuonCtfWithMaterialTracks")
)


process.hltL1TEGammaFilteredCollectionProducer = cms.EDProducer("L1TEGammaFilteredCollectionProducer",
    applyQual = cms.bool(True),
    inputTag = cms.InputTag("l1tGTProducer","CL2Photons"),
    maxBX = cms.int32(1),
    minBX = cms.int32(-1),
    minPt = cms.double(5.0),
    qualIsMask = cms.bool(True),
    quality = cms.int32(2)
)


process.hltL1TEGammaHGCFilteredCollectionProducer = cms.EDProducer("L1TEGammaFilteredCollectionProducer",
    applyQual = cms.bool(True),
    inputTag = cms.InputTag("l1tGTProducer","CL2Photons"),
    maxBX = cms.int32(1),
    minBX = cms.int32(-1),
    minPt = cms.double(5.0),
    qualIsMask = cms.bool(True),
    quality = cms.int32(4)
)


process.hltL2MuonSeedsFromL1TkMuon = cms.EDProducer("L2MuonSeedGeneratorFromL1TkMu",
    EtaMatchingBins = cms.vdouble(0.0, 2.5),
    InputObjects = cms.InputTag("l1tTkMuonsGmt"),
    L1MaxEta = cms.double(2.5),
    L1MinPt = cms.double(0.0),
    MatchDR = cms.vdouble(0.3),
    MinPL1Tk = cms.double(3.5),
    MinPtL1TkBarrel = cms.double(3.5),
    OfflineSeedLabel = cms.untracked.InputTag("hltL2OfflineMuonSeeds"),
    Propagator = cms.string('SteppingHelixPropagatorAny'),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    SetMinPtBarrelTo = cms.double(3.5),
    SetMinPtEndcapTo = cms.double(1.0),
    UseOfflineSeed = cms.untracked.bool(True),
    UseUnassociatedL1 = cms.bool(False)
)


process.hltL2MuonsFromL1TkMuon = cms.EDProducer("L2MuonProducer",
    DoSeedRefit = cms.bool(False),
    InputObjects = cms.InputTag("hltL2MuonSeedsFromL1TkMuon"),
    L2TrajBuilderParameters = cms.PSet(
        BWFilterParameters = cms.PSet(
            BWSeedType = cms.string('fromGenerator'),
            CSCRecSegmentLabel = cms.InputTag("hltCscSegments"),
            DTRecSegmentLabel = cms.InputTag("hltDt4DSegments"),
            EnableCSCMeasurement = cms.bool(True),
            EnableDTMeasurement = cms.bool(True),
            EnableRPCMeasurement = cms.bool(True),
            FitDirection = cms.string('outsideIn'),
            MaxChi2 = cms.double(100.0),
            MuonTrajectoryUpdatorParameters = cms.PSet(
                ExcludeRPCFromFit = cms.bool(False),
                Granularity = cms.int32(0),
                MaxChi2 = cms.double(25.0),
                RescaleError = cms.bool(False),
                RescaleErrorFactor = cms.double(100.0),
                UseInvalidHits = cms.bool(True)
            ),
            NumberOfSigma = cms.double(3.0),
            Propagator = cms.string('hltESPFastSteppingHelixPropagatorAny'),
            RPCRecSegmentLabel = cms.InputTag("hltRpcRecHits")
        ),
        DoBackwardFilter = cms.bool(True),
        DoRefit = cms.bool(False),
        DoSeedRefit = cms.bool(False),
        FilterParameters = cms.PSet(
            CSCRecSegmentLabel = cms.InputTag("hltCscSegments"),
            DTRecSegmentLabel = cms.InputTag("hltDt4DSegments"),
            EnableCSCMeasurement = cms.bool(True),
            EnableDTMeasurement = cms.bool(True),
            EnableGEMMeasurement = cms.bool(True),
            EnableME0Measurement = cms.bool(False),
            EnableRPCMeasurement = cms.bool(True),
            FitDirection = cms.string('insideOut'),
            GEMRecSegmentLabel = cms.InputTag("hltGemRecHits"),
            ME0RecSegmentLabel = cms.InputTag(""),
            MaxChi2 = cms.double(1000.0),
            MuonTrajectoryUpdatorParameters = cms.PSet(
                ExcludeRPCFromFit = cms.bool(False),
                Granularity = cms.int32(0),
                MaxChi2 = cms.double(25.0),
                RescaleError = cms.bool(False),
                RescaleErrorFactor = cms.double(100.0),
                UseInvalidHits = cms.bool(True)
            ),
            NumberOfSigma = cms.double(3.0),
            Propagator = cms.string('hltESPFastSteppingHelixPropagatorAny'),
            RPCRecSegmentLabel = cms.InputTag("hltRpcRecHits")
        ),
        NavigationType = cms.string('Standard'),
        SeedPosition = cms.string('in'),
        SeedPropagator = cms.string('hltESPFastSteppingHelixPropagatorAny'),
        SeedTransformerParameters = cms.PSet(
            Fitter = cms.string('hltESPKFFittingSmootherForL2Muon'),
            MuonRecHitBuilder = cms.string('hltESPMuonTransientTrackingRecHitBuilder'),
            NMinRecHits = cms.uint32(2),
            Propagator = cms.string('hltESPFastSteppingHelixPropagatorAny'),
            RescaleError = cms.double(100.0),
            UseSubRecHits = cms.bool(False)
        )
    ),
    MuonTrajectoryBuilder = cms.string('Exhaustive'),
    SeedTransformerParameters = cms.PSet(
        Fitter = cms.string('hltESPKFFittingSmootherForL2Muon'),
        MuonRecHitBuilder = cms.string('hltESPMuonTransientTrackingRecHitBuilder'),
        NMinRecHits = cms.uint32(2),
        Propagator = cms.string('hltESPFastSteppingHelixPropagatorAny'),
        RescaleError = cms.double(100.0),
        UseSubRecHits = cms.bool(False)
    ),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring(
            'hltESPFastSteppingHelixPropagatorAny',
            'hltESPFastSteppingHelixPropagatorOpposite'
        ),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPosition = cms.vdouble(0.0, 0.0, 0.0),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('hltESPFastSteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('hltESPKFTrajectorySmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        VertexConstraint = cms.bool(True),
        beamSpot = cms.InputTag("hltOnlineBeamSpot")
    )
)


process.hltL2OfflineMuonSeeds = cms.EDProducer("MuonSeedGenerator",
    CSCRecSegmentLabel = cms.InputTag("hltCscSegments"),
    CSC_01 = cms.vdouble(
        0.166, 0.0, 0.0, 0.031, 0.0,
        0.0
    ),
    CSC_01_1_scale = cms.vdouble(-1.915329, 0.0),
    CSC_02 = cms.vdouble(
        0.612, -0.207, 0.0, 0.067, -0.001,
        0.0
    ),
    CSC_03 = cms.vdouble(
        0.787, -0.338, 0.029, 0.101, -0.008,
        0.0
    ),
    CSC_12 = cms.vdouble(
        -0.161, 0.254, -0.047, 0.042, -0.007,
        0.0
    ),
    CSC_12_1_scale = cms.vdouble(-6.434242, 0.0),
    CSC_12_2_scale = cms.vdouble(-1.63622, 0.0),
    CSC_12_3_scale = cms.vdouble(-1.63622, 0.0),
    CSC_13 = cms.vdouble(
        0.901, -1.302, 0.533, 0.045, 0.005,
        0.0
    ),
    CSC_13_2_scale = cms.vdouble(-6.077936, 0.0),
    CSC_13_3_scale = cms.vdouble(-1.701268, 0.0),
    CSC_14 = cms.vdouble(
        0.606, -0.181, -0.002, 0.111, -0.003,
        0.0
    ),
    CSC_14_3_scale = cms.vdouble(-1.969563, 0.0),
    CSC_23 = cms.vdouble(
        -0.081, 0.113, -0.029, 0.015, 0.008,
        0.0
    ),
    CSC_23_1_scale = cms.vdouble(-19.084285, 0.0),
    CSC_23_2_scale = cms.vdouble(-6.079917, 0.0),
    CSC_24 = cms.vdouble(
        0.004, 0.021, -0.002, 0.053, 0.0,
        0.0
    ),
    CSC_24_1_scale = cms.vdouble(-6.055701, 0.0),
    CSC_34 = cms.vdouble(
        0.062, -0.067, 0.019, 0.021, 0.003,
        0.0
    ),
    CSC_34_1_scale = cms.vdouble(-11.520507, 0.0),
    DTRecSegmentLabel = cms.InputTag("hltDt4DSegments"),
    DT_12 = cms.vdouble(
        0.183, 0.054, -0.087, 0.028, 0.002,
        0.0
    ),
    DT_12_1_scale = cms.vdouble(-3.692398, 0.0),
    DT_12_2_scale = cms.vdouble(-3.518165, 0.0),
    DT_13 = cms.vdouble(
        0.315, 0.068, -0.127, 0.051, -0.002,
        0.0
    ),
    DT_13_1_scale = cms.vdouble(-4.520923, 0.0),
    DT_13_2_scale = cms.vdouble(-4.257687, 0.0),
    DT_14 = cms.vdouble(
        0.359, 0.052, -0.107, 0.072, -0.004,
        0.0
    ),
    DT_14_1_scale = cms.vdouble(-5.644816, 0.0),
    DT_14_2_scale = cms.vdouble(-4.808546, 0.0),
    DT_23 = cms.vdouble(
        0.13, 0.023, -0.057, 0.028, 0.004,
        0.0
    ),
    DT_23_1_scale = cms.vdouble(-5.320346, 0.0),
    DT_23_2_scale = cms.vdouble(-5.117625, 0.0),
    DT_24 = cms.vdouble(
        0.176, 0.014, -0.051, 0.051, 0.003,
        0.0
    ),
    DT_24_1_scale = cms.vdouble(-7.490909, 0.0),
    DT_24_2_scale = cms.vdouble(-6.63094, 0.0),
    DT_34 = cms.vdouble(
        0.044, 0.004, -0.013, 0.029, 0.003,
        0.0
    ),
    DT_34_1_scale = cms.vdouble(-13.783765, 0.0),
    DT_34_2_scale = cms.vdouble(-11.901897, 0.0),
    EnableCSCMeasurement = cms.bool(True),
    EnableDTMeasurement = cms.bool(True),
    EnableME0Measurement = cms.bool(False),
    ME0RecSegmentLabel = cms.InputTag("hltMe0Segments"),
    OL_1213 = cms.vdouble(
        0.96, -0.737, 0.0, 0.052, 0.0,
        0.0
    ),
    OL_1213_0_scale = cms.vdouble(-4.488158, 0.0),
    OL_1222 = cms.vdouble(
        0.848, -0.591, 0.0, 0.062, 0.0,
        0.0
    ),
    OL_1222_0_scale = cms.vdouble(-5.810449, 0.0),
    OL_1232 = cms.vdouble(
        0.184, 0.0, 0.0, 0.066, 0.0,
        0.0
    ),
    OL_1232_0_scale = cms.vdouble(-5.964634, 0.0),
    OL_2213 = cms.vdouble(
        0.117, 0.0, 0.0, 0.044, 0.0,
        0.0
    ),
    OL_2213_0_scale = cms.vdouble(-7.239789, 0.0),
    OL_2222 = cms.vdouble(
        0.107, 0.0, 0.0, 0.04, 0.0,
        0.0
    ),
    OL_2222_0_scale = cms.vdouble(-7.667231, 0.0),
    SMB_10 = cms.vdouble(
        1.387, -0.038, 0.0, 0.19, 0.0,
        0.0
    ),
    SMB_10_0_scale = cms.vdouble(2.448566, 0.0),
    SMB_11 = cms.vdouble(
        1.247, 0.72, -0.802, 0.229, -0.075,
        0.0
    ),
    SMB_11_0_scale = cms.vdouble(2.56363, 0.0),
    SMB_12 = cms.vdouble(
        2.128, -0.956, 0.0, 0.199, 0.0,
        0.0
    ),
    SMB_12_0_scale = cms.vdouble(2.283221, 0.0),
    SMB_20 = cms.vdouble(
        1.011, -0.052, 0.0, 0.188, 0.0,
        0.0
    ),
    SMB_20_0_scale = cms.vdouble(1.486168, 0.0),
    SMB_21 = cms.vdouble(
        1.043, -0.124, 0.0, 0.183, 0.0,
        0.0
    ),
    SMB_21_0_scale = cms.vdouble(1.58384, 0.0),
    SMB_22 = cms.vdouble(
        1.474, -0.758, 0.0, 0.185, 0.0,
        0.0
    ),
    SMB_22_0_scale = cms.vdouble(1.346681, 0.0),
    SMB_30 = cms.vdouble(
        0.505, -0.022, 0.0, 0.215, 0.0,
        0.0
    ),
    SMB_30_0_scale = cms.vdouble(-3.629838, 0.0),
    SMB_31 = cms.vdouble(
        0.549, -0.145, 0.0, 0.207, 0.0,
        0.0
    ),
    SMB_31_0_scale = cms.vdouble(-3.323768, 0.0),
    SMB_32 = cms.vdouble(
        0.67, -0.327, 0.0, 0.22, 0.0,
        0.0
    ),
    SMB_32_0_scale = cms.vdouble(-3.054156, 0.0),
    SME_11 = cms.vdouble(
        3.295, -1.527, 0.112, 0.378, 0.02,
        0.0
    ),
    SME_11_0_scale = cms.vdouble(1.325085, 0.0),
    SME_12 = cms.vdouble(
        0.102, 0.599, 0.0, 0.38, 0.0,
        0.0
    ),
    SME_12_0_scale = cms.vdouble(2.279181, 0.0),
    SME_13 = cms.vdouble(
        -1.286, 1.711, 0.0, 0.356, 0.0,
        0.0
    ),
    SME_13_0_scale = cms.vdouble(0.104905, 0.0),
    SME_21 = cms.vdouble(
        -0.529, 1.194, -0.358, 0.472, 0.086,
        0.0
    ),
    SME_21_0_scale = cms.vdouble(-0.040862, 0.0),
    SME_22 = cms.vdouble(
        -1.207, 1.491, -0.251, 0.189, 0.243,
        0.0
    ),
    SME_22_0_scale = cms.vdouble(-3.457901, 0.0),
    SME_31 = cms.vdouble(
        -1.594, 1.482, -0.317, 0.487, 0.097,
        0.0
    ),
    SME_32 = cms.vdouble(
        -0.901, 1.333, -0.47, 0.41, 0.073,
        0.0
    ),
    SME_41 = cms.vdouble(
        -0.003, 0.005, 0.005, 0.608, 0.076,
        0.0
    ),
    SME_42 = cms.vdouble(
        -0.003, 0.005, 0.005, 0.608, 0.076,
        0.0
    ),
    beamSpotTag = cms.InputTag("hltOnlineBeamSpot"),
    crackEtas = cms.vdouble(0.2, 1.6, 1.7),
    crackWindow = cms.double(0.04),
    deltaEtaCrackSearchWindow = cms.double(0.25),
    deltaEtaSearchWindow = cms.double(0.2),
    deltaPhiSearchWindow = cms.double(0.25),
    scaleDT = cms.bool(True)
)


process.hltMeasurementTrackerEvent = cms.EDProducer("MeasurementTrackerEventProducer",
    Phase2TrackerCluster1DProducer = cms.string('hltSiPhase2Clusters'),
    badPixelFEDChannelCollectionLabels = cms.VInputTag(),
    inactivePixelDetectorLabels = cms.VInputTag(),
    inactiveStripDetectorLabels = cms.VInputTag("siStripDigis"),
    measurementTracker = cms.string(''),
    mightGet = cms.optional.untracked.vstring,
    pixelCablingMapLabel = cms.string(''),
    pixelClusterProducer = cms.string('hltSiPixelClusters'),
    skipClusters = cms.InputTag(""),
    stripClusterProducer = cms.string(''),
    switchOffPixelsIfEmpty = cms.bool(True)
)


process.hltMuonCSCDigis = cms.EDProducer("CSCDCCUnpacker",
    Debug = cms.untracked.bool(False),
    ErrorMask = cms.uint32(0),
    ExaminerMask = cms.uint32(535558134),
    FormatedEventDump = cms.untracked.bool(False),
    InputObjects = cms.InputTag("rawDataCollector"),
    PrintEventNumber = cms.untracked.bool(False),
    SuppressZeroLCT = cms.untracked.bool(True),
    UnpackStatusDigis = cms.bool(False),
    UseExaminer = cms.bool(True),
    UseFormatStatus = cms.bool(True),
    UseSelectiveUnpacking = cms.bool(True),
    VisualFEDInspect = cms.untracked.bool(False),
    VisualFEDShort = cms.untracked.bool(False),
    mightGet = cms.optional.untracked.vstring,
    runDQM = cms.untracked.bool(False)
)


process.hltMuonDTDigis = cms.EDProducer("DTuROSRawToDigi",
    debug = cms.untracked.bool(False),
    inputLabel = cms.InputTag("rawDataCollector")
)


process.hltMuonGEMDigis = cms.EDProducer("GEMRawToDigiModule",
    InputLabel = cms.InputTag("rawDataCollector"),
    mightGet = cms.optional.untracked.vstring,
    useDBEMap = cms.bool(False)
)


process.hltOfflinePrimaryVertices = cms.EDProducer("RecoChargedRefCandidatePrimaryVertexSorter",
    assignment = cms.PSet(
        DzCutForChargedFromPUVtxs = cms.double(0.2),
        EtaMinUseDz = cms.double(-1),
        NumOfPUVtxsForCharged = cms.uint32(0),
        OnlyUseFirstDz = cms.bool(False),
        PtMaxCharged = cms.double(-1),
        maxDistanceToJetAxis = cms.double(0.07),
        maxDtSigForPrimaryAssignment = cms.double(4.0),
        maxDxyForJetAxisAssigment = cms.double(0.1),
        maxDxyForNotReconstructedPrimary = cms.double(0.01),
        maxDxySigForNotReconstructedPrimary = cms.double(2),
        maxDzErrorForPrimaryAssignment = cms.double(0.05),
        maxDzForJetAxisAssigment = cms.double(0.1),
        maxDzForPrimaryAssignment = cms.double(0.1),
        maxDzSigForPrimaryAssignment = cms.double(5.0),
        maxJetDeltaR = cms.double(0.5),
        minJetPt = cms.double(25),
        preferHighRanked = cms.bool(False),
        useTiming = cms.bool(False),
        useVertexFit = cms.bool(True)
    ),
    jets = cms.InputTag("hltAk4CaloJetsForTrk"),
    particles = cms.InputTag("hltTrackRefsForJetsBeforeSorting"),
    produceAssociationToOriginalVertices = cms.bool(False),
    produceNoPileUpCollection = cms.bool(False),
    producePileUpCollection = cms.bool(False),
    produceSortedVertices = cms.bool(True),
    qualityForPrimary = cms.int32(3),
    sorting = cms.PSet(

    ),
    trackTimeResoTag = cms.InputTag(""),
    trackTimeTag = cms.InputTag(""),
    usePVMET = cms.bool(True),
    vertices = cms.InputTag("hltUnsortedOfflinePrimaryVertices")
)


process.hltOnlineBeamSpot = cms.EDProducer("BeamSpotOnlineProducer",
    changeToCMSCoordinates = cms.bool(False),
    gtEvmLabel = cms.InputTag(""),
    maxRadius = cms.double(2.0),
    maxZ = cms.double(40.0),
    setSigmaZ = cms.double(0.0),
    useTransientRecord = cms.bool(True)
)


process.hltPFClusterMET = cms.EDProducer("PFClusterMETProducer",
    alias = cms.string('pfClusterMet'),
    globalThreshold = cms.double(0.0),
    src = cms.InputTag("hltPfClusterRefsForJets")
)


process.hltPFMET = cms.EDProducer("PFMETProducer",
    calculateSignificance = cms.bool(False),
    globalThreshold = cms.double(0.0),
    src = cms.InputTag("hltParticleFlowTmp")
)


process.hltPFMETJetCorrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("hltPFMETJetCorrectorL1", "hltPFMETJetCorrectorL2", "hltPFMETJetCorrectorL3")
)


process.hltPFMETJetCorrectorL1 = cms.EDProducer("L1FastjetCorrectorProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("hltFixedGridRhoFastjetAllTmp")
)


process.hltPFMETJetCorrectorL2 = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L2Relative')
)


process.hltPFMETJetCorrectorL3 = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L3Absolute')
)


process.hltPFMETTypeOne = cms.EDProducer("CorrectedPFMETProducer",
    src = cms.InputTag("hltPFMET"),
    srcCorrections = cms.VInputTag("hltPFMETTypeOneCorrector:type1")
)


process.hltPFMETTypeOneCorrector = cms.EDProducer("PFJetMETcorrInputProducer",
    jetCorrEtaMax = cms.double(9.9),
    jetCorrLabel = cms.InputTag("hltPFMETJetCorrector"),
    jetCorrLabelRes = cms.InputTag("hltPFMETJetCorrector"),
    offsetCorrLabel = cms.InputTag("hltPFMETJetCorrectorL1"),
    skipEM = cms.bool(True),
    skipEMfractionThreshold = cms.double(0.9),
    skipMuonSelection = cms.string('isGlobalMuon | isStandAloneMuon'),
    skipMuons = cms.bool(True),
    src = cms.InputTag("hltAK4PFCHSJets"),
    type1JetPtThreshold = cms.double(30.0)
)


process.hltPFPuppi = cms.EDProducer("PuppiProducer",
    DeltaZCut = cms.double(0.1),
    DeltaZCutForChargedFromPUVtxs = cms.double(0.2),
    EtaMaxCharged = cms.double(99999.0),
    EtaMaxPhotons = cms.double(2.5),
    EtaMinUseDeltaZ = cms.double(-1.0),
    MinPuppiWeight = cms.double(0.01),
    NumOfPUVtxsForCharged = cms.uint32(0),
    PUProxyValue = cms.InputTag("hltPixelClustersMultiplicity"),
    PtMaxCharged = cms.double(-1.0),
    PtMaxNeutrals = cms.double(200.0),
    PtMaxNeutralsStartSlope = cms.double(0.0),
    PtMaxPhotons = cms.double(-1.0),
    UseDeltaZCut = cms.bool(True),
    UseFromPVLooseTight = cms.bool(False),
    algos = cms.VPSet(
        cms.PSet(
            EtaMaxExtrap = cms.double(2.0),
            MedEtaSF = cms.vdouble(1.0, 1.0),
            MinNeutralPt = cms.vdouble(0.5105, 0.821),
            MinNeutralPtSlope = cms.vdouble(9.51e-06, 1.902e-05),
            RMSEtaSF = cms.vdouble(1.0, 1.0),
            etaMax = cms.vdouble(2.5, 3.5),
            etaMin = cms.vdouble(0.0, 2.5),
            ptMin = cms.vdouble(0.0, 0.0),
            puppiAlgos = cms.VPSet(cms.PSet(
                algoId = cms.int32(5),
                applyLowPUCorr = cms.bool(True),
                combOpt = cms.int32(0),
                cone = cms.double(0.4),
                rmsPtMin = cms.double(0.1),
                rmsScaleFactor = cms.double(1.0),
                useCharged = cms.bool(True)
            ))
        ),
        cms.PSet(
            EtaMaxExtrap = cms.double(2.0),
            MedEtaSF = cms.vdouble(0.75),
            MinNeutralPt = cms.vdouble(3.656),
            MinNeutralPtSlope = cms.vdouble(5.072e-05),
            RMSEtaSF = cms.vdouble(1.0),
            etaMax = cms.vdouble(10.0),
            etaMin = cms.vdouble(3.5),
            ptMin = cms.vdouble(0.0),
            puppiAlgos = cms.VPSet(cms.PSet(
                algoId = cms.int32(5),
                applyLowPUCorr = cms.bool(True),
                combOpt = cms.int32(0),
                cone = cms.double(0.4),
                rmsPtMin = cms.double(0.5),
                rmsScaleFactor = cms.double(1.0),
                useCharged = cms.bool(False)
            ))
        )
    ),
    applyCHS = cms.bool(True),
    candName = cms.InputTag("hltParticleFlowTmp"),
    clonePackedCands = cms.bool(False),
    invertPuppi = cms.bool(False),
    puppiDiagnostics = cms.bool(False),
    puppiNoLep = cms.bool(False),
    useExistingWeights = cms.bool(False),
    useExp = cms.bool(False),
    usePUProxyValue = cms.bool(True),
    vertexName = cms.InputTag("hltGoodOfflinePrimaryVertices"),
    vtxNdofCut = cms.int32(4),
    vtxZCut = cms.double(24)
)


process.hltPFPuppiHT = cms.EDProducer("HLTHtMhtProducer",
    excludePFMuons = cms.bool(False),
    jetsLabel = cms.InputTag("hltAK4PFPuppiJetsCorrected"),
    maxEtaJetHt = cms.double(2.4),
    maxEtaJetMht = cms.double(2.4),
    minNJetHt = cms.int32(0),
    minNJetMht = cms.int32(0),
    minPtJetHt = cms.double(30.0),
    minPtJetMht = cms.double(30.0),
    pfCandidatesLabel = cms.InputTag(""),
    usePt = cms.bool(True)
)


process.hltPFPuppiJetForBtagEta2p4 = cms.EDProducer("HLTPFJetCollectionProducer",
    HLTObject = cms.InputTag("hltPFPuppiJetForBtagSelectorEta2p4"),
    TriggerTypes = cms.vint32(86)
)


process.hltPFPuppiMET = cms.EDProducer("PFMETProducer",
    applyWeight = cms.bool(True),
    calculateSignificance = cms.bool(False),
    globalThreshold = cms.double(0.0),
    src = cms.InputTag("hltParticleFlowTmp"),
    srcWeights = cms.InputTag("hltPFPuppiNoLep")
)


process.hltPFPuppiMETTypeOne = cms.EDProducer("CorrectedPFMETProducer",
    src = cms.InputTag("hltPFPuppiMET"),
    srcCorrections = cms.VInputTag("hltPFPuppiMETTypeOneCorrector:type1")
)


process.hltPFPuppiMETTypeOneCorrector = cms.EDProducer("PFJetMETcorrInputProducer",
    jetCorrEtaMax = cms.double(9.9),
    jetCorrLabel = cms.InputTag("hltAK4PFPuppiJetCorrector"),
    jetCorrLabelRes = cms.InputTag("hltAK4PFPuppiJetCorrector"),
    offsetCorrLabel = cms.InputTag("hltAK4PFPuppiJetCorrectorL1"),
    skipEM = cms.bool(True),
    skipEMfractionThreshold = cms.double(0.9),
    skipMuonSelection = cms.string('isGlobalMuon | isStandAloneMuon'),
    skipMuons = cms.bool(True),
    src = cms.InputTag("hltAK4PFPuppiJets"),
    type1JetPtThreshold = cms.double(30.0)
)


process.hltPFPuppiMHT = cms.EDProducer("HLTHtMhtProducer",
    excludePFMuons = cms.bool(False),
    jetsLabel = cms.InputTag("hltAK4PFPuppiJetsCorrected"),
    maxEtaJetHt = cms.double(5.0),
    maxEtaJetMht = cms.double(5.0),
    minNJetHt = cms.int32(0),
    minNJetMht = cms.int32(0),
    minPtJetHt = cms.double(30.0),
    minPtJetMht = cms.double(30.0),
    pfCandidatesLabel = cms.InputTag(""),
    usePt = cms.bool(False)
)


process.hltPFPuppiNoLep = cms.EDProducer("PuppiProducer",
    DeltaZCut = cms.double(0.1),
    DeltaZCutForChargedFromPUVtxs = cms.double(0.2),
    EtaMaxCharged = cms.double(99999.0),
    EtaMaxPhotons = cms.double(2.5),
    EtaMinUseDeltaZ = cms.double(-1.0),
    MinPuppiWeight = cms.double(0.01),
    NumOfPUVtxsForCharged = cms.uint32(0),
    PUProxyValue = cms.InputTag("hltPixelClustersMultiplicity"),
    PtMaxCharged = cms.double(-1.0),
    PtMaxNeutrals = cms.double(200.0),
    PtMaxNeutralsStartSlope = cms.double(0.0),
    PtMaxPhotons = cms.double(20.0),
    UseDeltaZCut = cms.bool(True),
    UseFromPVLooseTight = cms.bool(False),
    algos = cms.VPSet(
        cms.PSet(
            EtaMaxExtrap = cms.double(2.0),
            MedEtaSF = cms.vdouble(1.0, 1.0),
            MinNeutralPt = cms.vdouble(0.5105, 0.821),
            MinNeutralPtSlope = cms.vdouble(9.51e-06, 1.902e-05),
            RMSEtaSF = cms.vdouble(1.0, 1.0),
            etaMax = cms.vdouble(2.5, 3.5),
            etaMin = cms.vdouble(0.0, 2.5),
            ptMin = cms.vdouble(0.0, 0.0),
            puppiAlgos = cms.VPSet(cms.PSet(
                algoId = cms.int32(5),
                applyLowPUCorr = cms.bool(True),
                combOpt = cms.int32(0),
                cone = cms.double(0.4),
                rmsPtMin = cms.double(0.1),
                rmsScaleFactor = cms.double(1.0),
                useCharged = cms.bool(True)
            ))
        ),
        cms.PSet(
            EtaMaxExtrap = cms.double(2.0),
            MedEtaSF = cms.vdouble(0.75),
            MinNeutralPt = cms.vdouble(3.656),
            MinNeutralPtSlope = cms.vdouble(5.072e-05),
            RMSEtaSF = cms.vdouble(1.0),
            etaMax = cms.vdouble(10.0),
            etaMin = cms.vdouble(3.5),
            ptMin = cms.vdouble(0.0),
            puppiAlgos = cms.VPSet(cms.PSet(
                algoId = cms.int32(5),
                applyLowPUCorr = cms.bool(True),
                combOpt = cms.int32(0),
                cone = cms.double(0.4),
                rmsPtMin = cms.double(0.5),
                rmsScaleFactor = cms.double(1.0),
                useCharged = cms.bool(False)
            ))
        )
    ),
    applyCHS = cms.bool(True),
    candName = cms.InputTag("hltParticleFlowTmp"),
    clonePackedCands = cms.bool(False),
    invertPuppi = cms.bool(False),
    puppiDiagnostics = cms.bool(False),
    puppiNoLep = cms.bool(True),
    useExistingWeights = cms.bool(False),
    useExp = cms.bool(False),
    usePUProxyValue = cms.bool(True),
    vertexName = cms.InputTag("hltGoodOfflinePrimaryVertices"),
    vtxNdofCut = cms.int32(4),
    vtxZCut = cms.double(24)
)


process.hltPFTauPiZeros = cms.EDProducer("RecoTauPiZeroProducer",
    builders = cms.VPSet(cms.PSet(
        applyElecTrackQcuts = cms.bool(False),
        makeCombinatoricStrips = cms.bool(False),
        maxStripBuildIterations = cms.int32(-1),
        minGammaEtStripAdd = cms.double(0.0),
        minGammaEtStripSeed = cms.double(0.5),
        minStripEt = cms.double(1.0),
        name = cms.string('s'),
        plugin = cms.string('RecoTauPiZeroStripPlugin2'),
        qualityCuts = cms.PSet(
            primaryVertexSrc = cms.InputTag("hltPhase2PixelVertices"),
            pvFindingAlgo = cms.string('closestInDeltaZ'),
            recoverLeadingTrk = cms.bool(False),
            signalQualityCuts = cms.PSet(
                maxDeltaZ = cms.double(0.2),
                maxTrackChi2 = cms.double(1000.0),
                maxTransverseImpactParameter = cms.double(0.2),
                minGammaEt = cms.double(0.5),
                minTrackHits = cms.uint32(3),
                minTrackPixelHits = cms.uint32(0),
                minTrackPt = cms.double(0.0),
                useTracksInsteadOfPFHadrons = cms.bool(False)
            ),
            vertexTrackFiltering = cms.bool(False)
        ),
        stripCandidatesParticleIds = cms.vint32(2, 4),
        stripEtaAssociationDistance = cms.double(0.05),
        stripPhiAssociationDistance = cms.double(0.2),
        updateStripAfterEachDaughter = cms.bool(False)
    )),
    jetSrc = cms.InputTag("hltAK4PFJets"),
    massHypothesis = cms.double(0.136),
    maxJetAbsEta = cms.double(99.0),
    minJetPt = cms.double(-1.0),
    outputSelection = cms.string('pt > 0'),
    ranking = cms.VPSet(cms.PSet(
        name = cms.string('InStrip'),
        plugin = cms.string('RecoTauPiZeroStringQuality'),
        selection = cms.string("algoIs(\'kStrips\')"),
        selectionFailValue = cms.double(1000.0),
        selectionPassFunction = cms.string('abs(mass() - 0.13579)')
    )),
    verbosity = cms.int32(0)
)


process.hltParticleFlowBadHcalPseudoCluster = cms.EDProducer("PFBadHcalPseudoClusterProducer",
    debug = cms.untracked.bool(False),
    enable = cms.bool(False),
    mightGet = cms.optional.untracked.vstring
)


process.hltParticleFlowBlock = cms.EDProducer("PFBlockProducer",
    debug = cms.untracked.bool(False),
    elementImporters = cms.VPSet(
        cms.PSet(
            hbheRecHitsTag = cms.InputTag("hltHbhereco"),
            importerName = cms.string('SuperClusterImporter'),
            maxSeverityHB = cms.int32(9),
            maxSeverityHE = cms.int32(9),
            maximumHoverE = cms.double(0.5),
            minPTforBypass = cms.double(100.0),
            minSuperClusterPt = cms.double(10.0),
            source_eb = cms.InputTag("hltParticleFlowSuperClusterECAL","particleFlowSuperClusterECALBarrel"),
            source_ee = cms.InputTag("hltParticleFlowSuperClusterECAL","particleFlowSuperClusterECALEndcapWithPreshower"),
            superClustersArePF = cms.bool(True),
            usePFThresholdsFromDB = cms.bool(True)
        ),
        cms.PSet(
            DPtOverPtCuts_byTrackAlgo = cms.vdouble(
                10.0, 10.0, 10.0, 10.0, 10.0,
                5.0
            ),
            NHitCuts_byTrackAlgo = cms.vuint32(
                3, 3, 3, 3, 3,
                3
            ),
            cleanBadConvertedBrems = cms.bool(True),
            importerName = cms.string('GeneralTracksImporter'),
            maxDPtOPt = cms.double(1.0),
            muonMaxDPtOPt = cms.double(1),
            muonSrc = cms.InputTag("hltPhase2L3Muons"),
            source = cms.InputTag("hltPfTrack"),
            trackQuality = cms.string('highPurity'),
            useIterativeTracking = cms.bool(True),
            vetoEndcap = cms.bool(True),
            vetoMode = cms.uint32(2),
            vetoSrc = cms.InputTag("hltPfTICL")
        ),
        cms.PSet(
            BCtoPFCMap = cms.InputTag("hltParticleFlowSuperClusterECAL","PFClusterAssociationEBEE"),
            importerName = cms.string('ECALClusterImporter'),
            source = cms.InputTag("hltParticleFlowClusterECAL")
        ),
        cms.PSet(
            importerName = cms.string('GenericClusterImporter'),
            source = cms.InputTag("hltParticleFlowClusterHCAL")
        ),
        cms.PSet(
            importerName = cms.string('GenericClusterImporter'),
            source = cms.InputTag("hltParticleFlowBadHcalPseudoCluster")
        ),
        cms.PSet(
            importerName = cms.string('GenericClusterImporter'),
            source = cms.InputTag("hltParticleFlowClusterHO")
        ),
        cms.PSet(
            importerName = cms.string('GenericClusterImporter'),
            source = cms.InputTag("hltParticleFlowClusterHF")
        )
    ),
    linkDefinitions = cms.VPSet(
        cms.PSet(
            linkType = cms.string('TRACK:ECAL'),
            linkerName = cms.string('TrackAndECALLinker'),
            useKDTree = cms.bool(True)
        ),
        cms.PSet(
            linkType = cms.string('TRACK:HCAL'),
            linkerName = cms.string('TrackAndHCALLinker'),
            nMaxHcalLinksPerTrack = cms.int32(1),
            trajectoryLayerEntrance = cms.string('HCALEntrance'),
            trajectoryLayerExit = cms.string('HCALExit'),
            useKDTree = cms.bool(True)
        ),
        cms.PSet(
            linkType = cms.string('TRACK:HO'),
            linkerName = cms.string('TrackAndHOLinker'),
            useKDTree = cms.bool(False)
        ),
        cms.PSet(
            linkType = cms.string('ECAL:HCAL'),
            linkerName = cms.string('ECALAndHCALLinker'),
            minAbsEtaEcal = cms.double(2.5),
            useKDTree = cms.bool(False)
        ),
        cms.PSet(
            linkType = cms.string('HCAL:HO'),
            linkerName = cms.string('HCALAndHOLinker'),
            useKDTree = cms.bool(False)
        ),
        cms.PSet(
            linkType = cms.string('HFEM:HFHAD'),
            linkerName = cms.string('HFEMAndHFHADLinker'),
            useKDTree = cms.bool(False)
        ),
        cms.PSet(
            linkType = cms.string('TRACK:TRACK'),
            linkerName = cms.string('TrackAndTrackLinker'),
            useKDTree = cms.bool(False)
        ),
        cms.PSet(
            linkType = cms.string('ECAL:ECAL'),
            linkerName = cms.string('ECALAndECALLinker'),
            useKDTree = cms.bool(False)
        ),
        cms.PSet(
            linkType = cms.string('ECAL:BREM'),
            linkerName = cms.string('ECALAndBREMLinker'),
            useKDTree = cms.bool(False)
        ),
        cms.PSet(
            linkType = cms.string('HCAL:BREM'),
            linkerName = cms.string('HCALAndBREMLinker'),
            useKDTree = cms.bool(False)
        ),
        cms.PSet(
            SuperClusterMatchByRef = cms.bool(True),
            linkType = cms.string('SC:ECAL'),
            linkerName = cms.string('SCAndECALLinker'),
            useKDTree = cms.bool(False)
        ),
        cms.PSet(
            linkType = cms.string('TRACK:HFEM'),
            linkerName = cms.string('TrackAndHCALLinker'),
            nMaxHcalLinksPerTrack = cms.int32(-1),
            trajectoryLayerEntrance = cms.string('VFcalEntrance'),
            trajectoryLayerExit = cms.string(''),
            useKDTree = cms.bool(True)
        ),
        cms.PSet(
            linkType = cms.string('TRACK:HFHAD'),
            linkerName = cms.string('TrackAndHCALLinker'),
            nMaxHcalLinksPerTrack = cms.int32(-1),
            trajectoryLayerEntrance = cms.string('VFcalEntrance'),
            trajectoryLayerExit = cms.string(''),
            useKDTree = cms.bool(True)
        )
    ),
    verbose = cms.untracked.bool(False)
)


process.hltParticleFlowClusterECAL = cms.EDProducer("CorrectedECALPFClusterProducer",
    energyCorrector = cms.PSet(
        applyCrackCorrections = cms.bool(False),
        applyMVACorrections = cms.bool(True),
        autoDetectBunchSpacing = cms.bool(True),
        bunchSpacing = cms.int32(25),
        ebSrFlagLabel = cms.InputTag("hltEcalDigis"),
        eeSrFlagLabel = cms.InputTag("hltEcalDigis"),
        maxPtForMVAEvaluation = cms.double(300.0),
        recHitsEBLabel = cms.InputTag("hltEcalRecHit","EcalRecHitsEB"),
        recHitsEELabel = cms.InputTag("hltEcalRecHit","EcalRecHitsEE"),
        setEnergyUncertainty = cms.bool(False),
        srfAwareCorrection = cms.bool(True)
    ),
    inputECAL = cms.InputTag("hltParticleFlowTimeAssignerECAL"),
    mightGet = cms.optional.untracked.vstring,
    minimumPSEnergy = cms.double(0),
    skipPS = cms.bool(True)
)


process.hltParticleFlowClusterECALL1Seeded = cms.EDProducer("CorrectedECALPFClusterProducer",
    energyCorrector = cms.PSet(
        applyCrackCorrections = cms.bool(False),
        applyMVACorrections = cms.bool(True),
        autoDetectBunchSpacing = cms.bool(True),
        bunchSpacing = cms.int32(25),
        ebSrFlagLabel = cms.InputTag("hltEcalDigis"),
        eeSrFlagLabel = cms.InputTag("hltEcalDigis"),
        maxPtForMVAEvaluation = cms.double(300.0),
        recHitsEBLabel = cms.InputTag("hltRechitInRegionsECAL","EcalRecHitsEB"),
        recHitsEELabel = cms.InputTag("hltRechitInRegionsECAL","EcalRecHitsEE"),
        setEnergyUncertainty = cms.bool(False),
        srfAwareCorrection = cms.bool(True)
    ),
    inputECAL = cms.InputTag("hltParticleFlowClusterECALUncorrectedL1Seeded"),
    mightGet = cms.optional.untracked.vstring,
    minimumPSEnergy = cms.double(0),
    skipPS = cms.bool(True)
)


process.hltParticleFlowClusterECALUncorrected = cms.EDProducer("PFClusterProducer",
    energyCorrector = cms.PSet(

    ),
    initialClusteringStep = cms.PSet(
        algoName = cms.string('Basic2DGenericTopoClusterizer'),
        thresholdsByDetector = cms.VPSet(
            cms.PSet(
                detector = cms.string('ECAL_BARREL'),
                gatheringThreshold = cms.double(0.175),
                gatheringThresholdPt = cms.double(0.0)
            ),
            cms.PSet(
                detector = cms.string('ECAL_ENDCAP'),
                gatheringThreshold = cms.double(0.3),
                gatheringThresholdPt = cms.double(0.0)
            )
        ),
        useCornerCells = cms.bool(True)
    ),
    pfClusterBuilder = cms.PSet(
        algoName = cms.string('Basic2DGenericPFlowClusterizer'),
        allCellsPositionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.08),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(-1),
            timeResolutionCalcBarrel = cms.PSet(
                constantTerm = cms.double(0.428192),
                constantTermLowE = cms.double(0.0),
                corrTermLowE = cms.double(0.0510871),
                noiseTerm = cms.double(1.10889),
                noiseTermLowE = cms.double(1.31883),
                threshHighE = cms.double(5.0),
                threshLowE = cms.double(0.5)
            ),
            timeResolutionCalcEndcap = cms.PSet(
                constantTerm = cms.double(0.0),
                constantTermLowE = cms.double(0.0),
                corrTermLowE = cms.double(0.0),
                noiseTerm = cms.double(5.72489999999),
                noiseTermLowE = cms.double(6.92683000001),
                threshHighE = cms.double(10.0),
                threshLowE = cms.double(1.0)
            )
        ),
        excludeOtherSeeds = cms.bool(True),
        maxIterations = cms.uint32(50),
        minFracTot = cms.double(1e-20),
        minFractionToKeep = cms.double(1e-07),
        positionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.08),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(9),
            timeResolutionCalcBarrel = cms.PSet(
                constantTerm = cms.double(0.428192),
                constantTermLowE = cms.double(0.0),
                corrTermLowE = cms.double(0.0510871),
                noiseTerm = cms.double(1.10889),
                noiseTermLowE = cms.double(1.31883),
                threshHighE = cms.double(5.0),
                threshLowE = cms.double(0.5)
            ),
            timeResolutionCalcEndcap = cms.PSet(
                constantTerm = cms.double(0.0),
                constantTermLowE = cms.double(0.0),
                corrTermLowE = cms.double(0.0),
                noiseTerm = cms.double(5.72489999999),
                noiseTermLowE = cms.double(6.92683000001),
                threshHighE = cms.double(10.0),
                threshLowE = cms.double(1.0)
            )
        ),
        positionCalcForConvergence = cms.PSet(
            T0_EB = cms.double(7.4),
            T0_EE = cms.double(3.1),
            T0_ES = cms.double(1.2),
            W0 = cms.double(4.2),
            X0 = cms.double(0.89),
            algoName = cms.string('ECAL2DPositionCalcWithDepthCorr'),
            minAllowedNormalization = cms.double(0.0),
            minFractionInCalc = cms.double(0.0)
        ),
        recHitEnergyNorms = cms.VPSet(
            cms.PSet(
                detector = cms.string('ECAL_BARREL'),
                recHitEnergyNorm = cms.double(0.08)
            ),
            cms.PSet(
                detector = cms.string('ECAL_ENDCAP'),
                recHitEnergyNorm = cms.double(0.3)
            )
        ),
        showerSigma = cms.double(1.5),
        stoppingTolerance = cms.double(1e-08)
    ),
    positionReCalc = cms.PSet(
        T0_EB = cms.double(7.4),
        T0_EE = cms.double(3.1),
        T0_ES = cms.double(1.2),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89),
        algoName = cms.string('ECAL2DPositionCalcWithDepthCorr'),
        minAllowedNormalization = cms.double(0.0),
        minFractionInCalc = cms.double(0.0)
    ),
    recHitCleaners = cms.VPSet(),
    recHitsSource = cms.InputTag("hltParticleFlowRecHitECAL"),
    seedCleaners = cms.VPSet(cms.PSet(
        RecHitFlagsToBeExcluded = cms.vstring(),
        algoName = cms.string('FlagsCleanerECAL')
    )),
    seedFinder = cms.PSet(
        algoName = cms.string('LocalMaximumSeedFinder'),
        nNeighbours = cms.int32(8),
        thresholdsByDetector = cms.VPSet(
            cms.PSet(
                detector = cms.string('ECAL_ENDCAP'),
                seedingThreshold = cms.double(0.6),
                seedingThresholdPt = cms.double(0.15)
            ),
            cms.PSet(
                detector = cms.string('ECAL_BARREL'),
                seedingThreshold = cms.double(0.4375),
                seedingThresholdPt = cms.double(0.0)
            )
        )
    ),
    usePFThresholdsFromDB = cms.bool(False)
)


process.hltParticleFlowClusterECALUncorrectedL1Seeded = cms.EDProducer("PFClusterProducer",
    energyCorrector = cms.PSet(

    ),
    initialClusteringStep = cms.PSet(
        algoName = cms.string('Basic2DGenericTopoClusterizer'),
        thresholdsByDetector = cms.VPSet(
            cms.PSet(
                detector = cms.string('ECAL_BARREL'),
                gatheringThreshold = cms.double(0.175),
                gatheringThresholdPt = cms.double(0.0)
            ),
            cms.PSet(
                detector = cms.string('ECAL_ENDCAP'),
                gatheringThreshold = cms.double(0.3),
                gatheringThresholdPt = cms.double(0.0)
            )
        ),
        useCornerCells = cms.bool(True)
    ),
    pfClusterBuilder = cms.PSet(
        algoName = cms.string('Basic2DGenericPFlowClusterizer'),
        allCellsPositionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.08),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(-1),
            timeResolutionCalcBarrel = cms.PSet(
                constantTerm = cms.double(0.428192),
                constantTermLowE = cms.double(0.0),
                corrTermLowE = cms.double(0.0510871),
                noiseTerm = cms.double(1.10889),
                noiseTermLowE = cms.double(1.31883),
                threshHighE = cms.double(5.0),
                threshLowE = cms.double(0.5)
            ),
            timeResolutionCalcEndcap = cms.PSet(
                constantTerm = cms.double(0.0),
                constantTermLowE = cms.double(0.0),
                corrTermLowE = cms.double(0.0),
                noiseTerm = cms.double(5.72489999999),
                noiseTermLowE = cms.double(6.92683000001),
                threshHighE = cms.double(10.0),
                threshLowE = cms.double(1.0)
            )
        ),
        excludeOtherSeeds = cms.bool(True),
        maxIterations = cms.uint32(50),
        minFracTot = cms.double(1e-20),
        minFractionToKeep = cms.double(1e-07),
        positionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.08),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(9),
            timeResolutionCalcBarrel = cms.PSet(
                constantTerm = cms.double(0.428192),
                constantTermLowE = cms.double(0.0),
                corrTermLowE = cms.double(0.0510871),
                noiseTerm = cms.double(1.10889),
                noiseTermLowE = cms.double(1.31883),
                threshHighE = cms.double(5.0),
                threshLowE = cms.double(0.5)
            ),
            timeResolutionCalcEndcap = cms.PSet(
                constantTerm = cms.double(0.0),
                constantTermLowE = cms.double(0.0),
                corrTermLowE = cms.double(0.0),
                noiseTerm = cms.double(5.72489999999),
                noiseTermLowE = cms.double(6.92683000001),
                threshHighE = cms.double(10.0),
                threshLowE = cms.double(1.0)
            )
        ),
        positionCalcForConvergence = cms.PSet(
            T0_EB = cms.double(7.4),
            T0_EE = cms.double(3.1),
            T0_ES = cms.double(1.2),
            W0 = cms.double(4.2),
            X0 = cms.double(0.89),
            algoName = cms.string('ECAL2DPositionCalcWithDepthCorr'),
            minAllowedNormalization = cms.double(0.0),
            minFractionInCalc = cms.double(0.0)
        ),
        recHitEnergyNorms = cms.VPSet(
            cms.PSet(
                detector = cms.string('ECAL_BARREL'),
                recHitEnergyNorm = cms.double(0.08)
            ),
            cms.PSet(
                detector = cms.string('ECAL_ENDCAP'),
                recHitEnergyNorm = cms.double(0.3)
            )
        ),
        showerSigma = cms.double(1.5),
        stoppingTolerance = cms.double(1e-08)
    ),
    positionReCalc = cms.PSet(
        T0_EB = cms.double(7.4),
        T0_EE = cms.double(3.1),
        T0_ES = cms.double(1.2),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89),
        algoName = cms.string('ECAL2DPositionCalcWithDepthCorr'),
        minAllowedNormalization = cms.double(0.0),
        minFractionInCalc = cms.double(0.0)
    ),
    recHitCleaners = cms.VPSet(),
    recHitsSource = cms.InputTag("hltParticleFlowRecHitECALL1Seeded"),
    seedCleaners = cms.VPSet(cms.PSet(
        RecHitFlagsToBeExcluded = cms.vstring(),
        algoName = cms.string('FlagsCleanerECAL')
    )),
    seedFinder = cms.PSet(
        algoName = cms.string('LocalMaximumSeedFinder'),
        nNeighbours = cms.int32(8),
        thresholdsByDetector = cms.VPSet(
            cms.PSet(
                detector = cms.string('ECAL_ENDCAP'),
                seedingThreshold = cms.double(0.6),
                seedingThresholdPt = cms.double(0.15)
            ),
            cms.PSet(
                detector = cms.string('ECAL_BARREL'),
                seedingThreshold = cms.double(0.4375),
                seedingThresholdPt = cms.double(0.0)
            )
        )
    ),
    usePFThresholdsFromDB = cms.bool(False)
)


process.hltParticleFlowClusterECALUncorrectedUnseeded = cms.EDProducer("PFClusterProducer",
    energyCorrector = cms.PSet(

    ),
    initialClusteringStep = cms.PSet(
        algoName = cms.string('Basic2DGenericTopoClusterizer'),
        thresholdsByDetector = cms.VPSet(
            cms.PSet(
                detector = cms.string('ECAL_BARREL'),
                gatheringThreshold = cms.double(0.08),
                gatheringThresholdPt = cms.double(0.0)
            ),
            cms.PSet(
                detector = cms.string('ECAL_ENDCAP'),
                gatheringThreshold = cms.double(0.3),
                gatheringThresholdPt = cms.double(0.0)
            )
        ),
        useCornerCells = cms.bool(True)
    ),
    pfClusterBuilder = cms.PSet(
        algoName = cms.string('Basic2DGenericPFlowClusterizer'),
        allCellsPositionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.08),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(-1),
            timeResolutionCalcBarrel = cms.PSet(
                constantTerm = cms.double(0.428192),
                constantTermLowE = cms.double(0.0),
                corrTermLowE = cms.double(0.0510871),
                noiseTerm = cms.double(1.10889),
                noiseTermLowE = cms.double(1.31883),
                threshHighE = cms.double(5.0),
                threshLowE = cms.double(0.5)
            ),
            timeResolutionCalcEndcap = cms.PSet(
                constantTerm = cms.double(0.0),
                constantTermLowE = cms.double(0.0),
                corrTermLowE = cms.double(0.0),
                noiseTerm = cms.double(5.72489999999),
                noiseTermLowE = cms.double(6.92683000001),
                threshHighE = cms.double(10.0),
                threshLowE = cms.double(1.0)
            )
        ),
        excludeOtherSeeds = cms.bool(True),
        maxIterations = cms.uint32(50),
        minFracTot = cms.double(1e-20),
        minFractionToKeep = cms.double(1e-07),
        positionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.08),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(9),
            timeResolutionCalcBarrel = cms.PSet(
                constantTerm = cms.double(0.428192),
                constantTermLowE = cms.double(0.0),
                corrTermLowE = cms.double(0.0510871),
                noiseTerm = cms.double(1.10889),
                noiseTermLowE = cms.double(1.31883),
                threshHighE = cms.double(5.0),
                threshLowE = cms.double(0.5)
            ),
            timeResolutionCalcEndcap = cms.PSet(
                constantTerm = cms.double(0.0),
                constantTermLowE = cms.double(0.0),
                corrTermLowE = cms.double(0.0),
                noiseTerm = cms.double(5.72489999999),
                noiseTermLowE = cms.double(6.92683000001),
                threshHighE = cms.double(10.0),
                threshLowE = cms.double(1.0)
            )
        ),
        positionCalcForConvergence = cms.PSet(
            T0_EB = cms.double(7.4),
            T0_EE = cms.double(3.1),
            T0_ES = cms.double(1.2),
            W0 = cms.double(4.2),
            X0 = cms.double(0.89),
            algoName = cms.string('ECAL2DPositionCalcWithDepthCorr'),
            minAllowedNormalization = cms.double(0.0),
            minFractionInCalc = cms.double(0.0)
        ),
        recHitEnergyNorms = cms.VPSet(
            cms.PSet(
                detector = cms.string('ECAL_BARREL'),
                recHitEnergyNorm = cms.double(0.08)
            ),
            cms.PSet(
                detector = cms.string('ECAL_ENDCAP'),
                recHitEnergyNorm = cms.double(0.3)
            )
        ),
        showerSigma = cms.double(1.5),
        stoppingTolerance = cms.double(1e-08)
    ),
    positionReCalc = cms.PSet(
        T0_EB = cms.double(7.4),
        T0_EE = cms.double(3.1),
        T0_ES = cms.double(1.2),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89),
        algoName = cms.string('ECAL2DPositionCalcWithDepthCorr'),
        minAllowedNormalization = cms.double(0.0),
        minFractionInCalc = cms.double(0.0)
    ),
    recHitCleaners = cms.VPSet(),
    recHitsSource = cms.InputTag("hltParticleFlowRecHitECALUnseeded"),
    seedCleaners = cms.VPSet(cms.PSet(
        RecHitFlagsToBeExcluded = cms.vstring(),
        algoName = cms.string('FlagsCleanerECAL')
    )),
    seedFinder = cms.PSet(
        algoName = cms.string('LocalMaximumSeedFinder'),
        nNeighbours = cms.int32(8),
        thresholdsByDetector = cms.VPSet(
            cms.PSet(
                detector = cms.string('ECAL_ENDCAP'),
                seedingThreshold = cms.double(0.6),
                seedingThresholdPt = cms.double(0.15)
            ),
            cms.PSet(
                detector = cms.string('ECAL_BARREL'),
                seedingThreshold = cms.double(0.23),
                seedingThresholdPt = cms.double(0.0)
            )
        )
    ),
    usePFThresholdsFromDB = cms.bool(False)
)


process.hltParticleFlowClusterECALUnseeded = cms.EDProducer("CorrectedECALPFClusterProducer",
    energyCorrector = cms.PSet(
        applyCrackCorrections = cms.bool(False),
        applyMVACorrections = cms.bool(True),
        autoDetectBunchSpacing = cms.bool(True),
        bunchSpacing = cms.int32(25),
        ebSrFlagLabel = cms.InputTag("hltEcalDigis"),
        eeSrFlagLabel = cms.InputTag("hltEcalDigis"),
        maxPtForMVAEvaluation = cms.double(300.0),
        recHitsEBLabel = cms.InputTag("hltEcalRecHit","EcalRecHitsEB"),
        recHitsEELabel = cms.InputTag("hltEcalRecHit","EcalRecHitsEE"),
        setEnergyUncertainty = cms.bool(False),
        srfAwareCorrection = cms.bool(True)
    ),
    inputECAL = cms.InputTag("hltParticleFlowClusterECALUncorrectedUnseeded"),
    mightGet = cms.optional.untracked.vstring,
    minimumPSEnergy = cms.double(0),
    skipPS = cms.bool(True)
)


process.hltParticleFlowClusterHBHE = cms.EDProducer("PFClusterProducer",
    energyCorrector = cms.PSet(

    ),
    initialClusteringStep = cms.PSet(
        algoName = cms.string('Basic2DGenericTopoClusterizer'),
        thresholdsByDetector = cms.VPSet(
            cms.PSet(
                depths = cms.vint32(1, 2, 3, 4),
                detector = cms.string('HCAL_BARREL1'),
                gatheringThreshold = cms.vdouble(0.1, 0.2, 0.3, 0.3),
                gatheringThresholdPt = cms.vdouble(0.0, 0.0, 0.0, 0.0)
            ),
            cms.PSet(
                depths = cms.vint32(
                    1, 2, 3, 4, 5,
                    6, 7
                ),
                detector = cms.string('HCAL_ENDCAP'),
                gatheringThreshold = cms.vdouble(
                    0.1, 0.2, 0.2, 0.2, 0.2,
                    0.2, 0.2
                ),
                gatheringThresholdPt = cms.vdouble(
                    0.0, 0.0, 0.0, 0.0, 0.0,
                    0.0, 0.0
                )
            )
        ),
        useCornerCells = cms.bool(True)
    ),
    pfClusterBuilder = cms.PSet(
        algoName = cms.string('Basic2DGenericPFlowClusterizer'),
        allCellsPositionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominatorByDetector = cms.VPSet(
                cms.PSet(
                    depths = cms.vint32(1, 2, 3, 4),
                    detector = cms.string('HCAL_BARREL1'),
                    logWeightDenominator = cms.vdouble(0.1, 0.2, 0.3, 0.3)
                ),
                cms.PSet(
                    depths = cms.vint32(
                        1, 2, 3, 4, 5,
                        6, 7
                    ),
                    detector = cms.string('HCAL_ENDCAP'),
                    logWeightDenominator = cms.vdouble(
                        0.1, 0.2, 0.2, 0.2, 0.2,
                        0.2, 0.2
                    )
                )
            ),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(-1)
        ),
        clusterTimeResFromSeed = cms.bool(False),
        excludeOtherSeeds = cms.bool(True),
        maxIterations = cms.uint32(5),
        maxNSigmaTime = cms.double(10.0),
        minChi2Prob = cms.double(0.0),
        minFracTot = cms.double(1e-20),
        minFractionToKeep = cms.double(1e-07),
        positionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominatorByDetector = cms.VPSet(
                cms.PSet(
                    depths = cms.vint32(1, 2, 3, 4),
                    detector = cms.string('HCAL_BARREL1'),
                    logWeightDenominator = cms.vdouble(0.1, 0.2, 0.3, 0.3)
                ),
                cms.PSet(
                    depths = cms.vint32(
                        1, 2, 3, 4, 5,
                        6, 7
                    ),
                    detector = cms.string('HCAL_ENDCAP'),
                    logWeightDenominator = cms.vdouble(
                        0.1, 0.2, 0.2, 0.2, 0.2,
                        0.2, 0.2
                    )
                )
            ),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(5)
        ),
        recHitEnergyNorms = cms.VPSet(
            cms.PSet(
                depths = cms.vint32(1, 2, 3, 4),
                detector = cms.string('HCAL_BARREL1'),
                recHitEnergyNorm = cms.vdouble(0.1, 0.2, 0.3, 0.3)
            ),
            cms.PSet(
                depths = cms.vint32(
                    1, 2, 3, 4, 5,
                    6, 7
                ),
                detector = cms.string('HCAL_ENDCAP'),
                recHitEnergyNorm = cms.vdouble(
                    0.1, 0.2, 0.2, 0.2, 0.2,
                    0.2, 0.2
                )
            )
        ),
        showerSigma = cms.double(10.0),
        stoppingTolerance = cms.double(1e-08),
        timeResolutionCalcBarrel = cms.PSet(
            constantTerm = cms.double(2.82),
            constantTermLowE = cms.double(4.24),
            corrTermLowE = cms.double(0.0),
            noiseTerm = cms.double(21.86),
            noiseTermLowE = cms.double(8),
            threshHighE = cms.double(15.0),
            threshLowE = cms.double(6.0)
        ),
        timeResolutionCalcEndcap = cms.PSet(
            constantTerm = cms.double(2.82),
            constantTermLowE = cms.double(4.24),
            corrTermLowE = cms.double(0.0),
            noiseTerm = cms.double(21.86),
            noiseTermLowE = cms.double(8),
            threshHighE = cms.double(15.0),
            threshLowE = cms.double(6.0)
        ),
        timeSigmaEB = cms.double(10.0),
        timeSigmaEE = cms.double(10.0)
    ),
    positionReCalc = cms.PSet(

    ),
    recHitCleaners = cms.VPSet(),
    recHitsSource = cms.InputTag("hltParticleFlowRecHitHBHE"),
    seedCleaners = cms.VPSet(),
    seedFinder = cms.PSet(
        algoName = cms.string('LocalMaximumSeedFinder'),
        nNeighbours = cms.int32(4),
        thresholdsByDetector = cms.VPSet(
            cms.PSet(
                depths = cms.vint32(1, 2, 3, 4),
                detector = cms.string('HCAL_BARREL1'),
                seedingThreshold = cms.vdouble(0.125, 0.25, 0.35, 0.35),
                seedingThresholdPt = cms.vdouble(0.0, 0.0, 0.0, 0.0)
            ),
            cms.PSet(
                depths = cms.vint32(
                    1, 2, 3, 4, 5,
                    6, 7
                ),
                detector = cms.string('HCAL_ENDCAP'),
                seedingThreshold = cms.vdouble(
                    0.1375, 0.275, 0.275, 0.275, 0.275,
                    0.275, 0.275
                ),
                seedingThresholdPt = cms.vdouble(
                    0.0, 0.0, 0.0, 0.0, 0.0,
                    0.0, 0.0
                )
            )
        )
    ),
    usePFThresholdsFromDB = cms.bool(True)
)


process.hltParticleFlowClusterHCAL = cms.EDProducer("PFMultiDepthClusterProducer",
    clustersSource = cms.InputTag("hltParticleFlowClusterHBHE"),
    energyCorrector = cms.PSet(

    ),
    pfClusterBuilder = cms.PSet(
        algoName = cms.string('PFMultiDepthClusterizer'),
        allCellsPositionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominatorByDetector = cms.VPSet(
                cms.PSet(
                    depths = cms.vint32(1, 2, 3, 4),
                    detector = cms.string('HCAL_BARREL1'),
                    logWeightDenominator = cms.vdouble(0.1, 0.2, 0.3, 0.3)
                ),
                cms.PSet(
                    depths = cms.vint32(
                        1, 2, 3, 4, 5,
                        6, 7
                    ),
                    detector = cms.string('HCAL_ENDCAP'),
                    logWeightDenominator = cms.vdouble(
                        0.1, 0.2, 0.2, 0.2, 0.2,
                        0.2, 0.2
                    )
                )
            ),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(-1)
        ),
        minFractionToKeep = cms.double(1e-07),
        nSigmaEta = cms.double(2.0),
        nSigmaPhi = cms.double(2.0)
    ),
    positionReCalc = cms.PSet(

    ),
    usePFThresholdsFromDB = cms.bool(True)
)


process.hltParticleFlowClusterHF = cms.EDProducer("PFClusterProducer",
    energyCorrector = cms.PSet(

    ),
    initialClusteringStep = cms.PSet(
        algoName = cms.string('Basic2DGenericTopoClusterizer'),
        thresholdsByDetector = cms.VPSet(
            cms.PSet(
                detector = cms.string('HF_EM'),
                gatheringThreshold = cms.double(0.8),
                gatheringThresholdPt = cms.double(0.0)
            ),
            cms.PSet(
                detector = cms.string('HF_HAD'),
                gatheringThreshold = cms.double(0.8),
                gatheringThresholdPt = cms.double(0.0)
            )
        ),
        useCornerCells = cms.bool(False)
    ),
    pfClusterBuilder = cms.PSet(
        algoName = cms.string('Basic2DGenericPFlowClusterizer'),
        allCellsPositionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.8),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(-1)
        ),
        excludeOtherSeeds = cms.bool(True),
        maxIterations = cms.uint32(50),
        minFracTot = cms.double(1e-20),
        minFractionToKeep = cms.double(1e-07),
        positionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.8),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(5)
        ),
        recHitEnergyNorms = cms.VPSet(
            cms.PSet(
                detector = cms.string('HF_EM'),
                recHitEnergyNorm = cms.double(0.8)
            ),
            cms.PSet(
                detector = cms.string('HF_HAD'),
                recHitEnergyNorm = cms.double(0.8)
            )
        ),
        showerSigma = cms.double(10.0),
        stoppingTolerance = cms.double(1e-08)
    ),
    positionReCalc = cms.PSet(

    ),
    recHitCleaners = cms.VPSet(),
    recHitsSource = cms.InputTag("hltParticleFlowRecHitHF"),
    seedCleaners = cms.VPSet(),
    seedFinder = cms.PSet(
        algoName = cms.string('LocalMaximumSeedFinder'),
        nNeighbours = cms.int32(0),
        thresholdsByDetector = cms.VPSet(
            cms.PSet(
                detector = cms.string('HF_EM'),
                seedingThreshold = cms.double(1.4),
                seedingThresholdPt = cms.double(0.0)
            ),
            cms.PSet(
                detector = cms.string('HF_HAD'),
                seedingThreshold = cms.double(1.4),
                seedingThresholdPt = cms.double(0.0)
            )
        )
    ),
    usePFThresholdsFromDB = cms.bool(False)
)


process.hltParticleFlowClusterHGCal = cms.EDProducer("PFClusterProducer",
    energyCorrector = cms.PSet(

    ),
    initialClusteringStep = cms.PSet(
        algoName = cms.string('PFClusterFromHGCalTrackster'),
        clusterSrc = cms.InputTag("hltHgcalMergeLayerClusters"),
        filterByTracksterIteration = cms.bool(True),
        filterByTracksterPID = cms.bool(False),
        filter_on_categories = cms.vint32(0, 1),
        filter_on_iterations = cms.vint32(0, 1),
        pid_threshold = cms.double(0.8),
        thresholdsByDetector = cms.VPSet(),
        tracksterSrc = cms.InputTag("hltTiclTrackstersMerge")
    ),
    pfClusterBuilder = cms.PSet(

    ),
    positionReCalc = cms.PSet(
        algoName = cms.string('Cluster3DPCACalculator'),
        minFractionInCalc = cms.double(1e-09),
        updateTiming = cms.bool(False)
    ),
    recHitCleaners = cms.VPSet(),
    recHitsSource = cms.InputTag("hltParticleFlowRecHitHGC"),
    seedCleaners = cms.VPSet(),
    seedFinder = cms.PSet(
        algoName = cms.string('PassThruSeedFinder'),
        nNeighbours = cms.int32(8),
        thresholdsByDetector = cms.VPSet()
    ),
    usePFThresholdsFromDB = cms.bool(False)
)


process.hltParticleFlowClusterHGCalFromTICLL1Seeded = cms.EDProducer("PFClusterProducer",
    energyCorrector = cms.PSet(

    ),
    initialClusteringStep = cms.PSet(
        algoName = cms.string('PFClusterFromHGCalTrackster'),
        clusterSrc = cms.InputTag("hltHgcalMergeLayerClustersL1Seeded"),
        filterByTracksterIteration = cms.bool(False),
        filterByTracksterPID = cms.bool(True),
        filter_on_categories = cms.vint32(0, 1),
        filter_on_iterations = cms.vint32(0, 1),
        pid_threshold = cms.double(0.8),
        thresholdsByDetector = cms.VPSet(),
        tracksterSrc = cms.InputTag("hltTiclTrackstersCLUE3DHighL1Seeded")
    ),
    pfClusterBuilder = cms.PSet(

    ),
    positionReCalc = cms.PSet(
        algoName = cms.string('Cluster3DPCACalculator'),
        minFractionInCalc = cms.double(1e-09),
        updateTiming = cms.bool(False)
    ),
    recHitCleaners = cms.VPSet(),
    recHitsSource = cms.InputTag("hltParticleFlowRecHitHGCL1Seeded"),
    seedCleaners = cms.VPSet(),
    seedFinder = cms.PSet(
        algoName = cms.string('PassThruSeedFinder'),
        nNeighbours = cms.int32(8),
        thresholdsByDetector = cms.VPSet()
    ),
    usePFThresholdsFromDB = cms.bool(False)
)


process.hltParticleFlowClusterHGCalFromTICLUnseeded = cms.EDProducer("PFClusterProducer",
    energyCorrector = cms.PSet(

    ),
    initialClusteringStep = cms.PSet(
        algoName = cms.string('PFClusterFromHGCalTrackster'),
        clusterSrc = cms.InputTag("hltHgcalMergeLayerClusters"),
        filterByTracksterIteration = cms.bool(False),
        filterByTracksterPID = cms.bool(True),
        filter_on_categories = cms.vint32(0, 1),
        filter_on_iterations = cms.vint32(0, 1),
        pid_threshold = cms.double(0.8),
        thresholdsByDetector = cms.VPSet(),
        tracksterSrc = cms.InputTag("hltTiclTrackstersCLUE3DHigh")
    ),
    pfClusterBuilder = cms.PSet(

    ),
    positionReCalc = cms.PSet(
        algoName = cms.string('Cluster3DPCACalculator'),
        minFractionInCalc = cms.double(1e-09),
        updateTiming = cms.bool(False)
    ),
    recHitCleaners = cms.VPSet(),
    recHitsSource = cms.InputTag("hltParticleFlowRecHitHGC"),
    seedCleaners = cms.VPSet(),
    seedFinder = cms.PSet(
        algoName = cms.string('PassThruSeedFinder'),
        nNeighbours = cms.int32(8),
        thresholdsByDetector = cms.VPSet()
    ),
    usePFThresholdsFromDB = cms.bool(False)
)


process.hltParticleFlowClusterHO = cms.EDProducer("PFClusterProducer",
    energyCorrector = cms.PSet(

    ),
    initialClusteringStep = cms.PSet(
        algoName = cms.string('Basic2DGenericTopoClusterizer'),
        thresholdsByDetector = cms.VPSet(
            cms.PSet(
                detector = cms.string('HCAL_BARREL2_RING0'),
                gatheringThreshold = cms.double(0.05),
                gatheringThresholdPt = cms.double(0.0)
            ),
            cms.PSet(
                detector = cms.string('HCAL_BARREL2_RING1'),
                gatheringThreshold = cms.double(0.05),
                gatheringThresholdPt = cms.double(0.0)
            )
        ),
        useCornerCells = cms.bool(True)
    ),
    pfClusterBuilder = cms.PSet(
        algoName = cms.string('Basic2DGenericPFlowClusterizer'),
        allCellsPositionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.05),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(-1)
        ),
        excludeOtherSeeds = cms.bool(True),
        maxIterations = cms.uint32(50),
        minFracTot = cms.double(1e-20),
        minFractionToKeep = cms.double(1e-07),
        positionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.05),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(5)
        ),
        recHitEnergyNorms = cms.VPSet(
            cms.PSet(
                detector = cms.string('HCAL_BARREL2_RING0'),
                recHitEnergyNorm = cms.double(0.05)
            ),
            cms.PSet(
                detector = cms.string('HCAL_BARREL2_RING1'),
                recHitEnergyNorm = cms.double(0.05)
            )
        ),
        showerSigma = cms.double(10.0),
        stoppingTolerance = cms.double(1e-08)
    ),
    positionReCalc = cms.PSet(

    ),
    recHitCleaners = cms.VPSet(),
    recHitsSource = cms.InputTag("hltParticleFlowRecHitHO"),
    seedCleaners = cms.VPSet(),
    seedFinder = cms.PSet(
        algoName = cms.string('LocalMaximumSeedFinder'),
        nNeighbours = cms.int32(4),
        thresholdsByDetector = cms.VPSet(
            cms.PSet(
                detector = cms.string('HCAL_BARREL2_RING0'),
                seedingThreshold = cms.double(0.08),
                seedingThresholdPt = cms.double(0.0)
            ),
            cms.PSet(
                detector = cms.string('HCAL_BARREL2_RING1'),
                seedingThreshold = cms.double(0.08),
                seedingThresholdPt = cms.double(0.0)
            )
        )
    ),
    usePFThresholdsFromDB = cms.bool(False)
)


process.hltParticleFlowPtrs = cms.EDProducer("PFCandidateFwdPtrProducer",
    src = cms.InputTag("hltParticleFlowTmp")
)


process.hltParticleFlowRecHitECAL = cms.EDProducer("PFRecHitProducer",
    navigator = cms.PSet(
        barrel = cms.PSet(

        ),
        endcap = cms.PSet(

        ),
        name = cms.string('PFRecHitECALNavigator')
    ),
    producers = cms.VPSet(
        cms.PSet(
            name = cms.string('PFEBRecHitCreator'),
            qualityTests = cms.VPSet(
                cms.PSet(
                    applySelectionsToAllCrystals = cms.bool(True),
                    name = cms.string('PFRecHitQTestDBThreshold')
                ),
                cms.PSet(
                    cleaningThreshold = cms.double(2.0),
                    name = cms.string('PFRecHitQTestECAL'),
                    skipTTRecoveredHits = cms.bool(True),
                    timingCleaning = cms.bool(True),
                    topologicalCleaning = cms.bool(True)
                )
            ),
            srFlags = cms.InputTag(""),
            src = cms.InputTag("hltEcalRecHit","EcalRecHitsEB")
        ),
        cms.PSet(
            name = cms.string('PFEERecHitCreator'),
            qualityTests = cms.VPSet(
                cms.PSet(
                    applySelectionsToAllCrystals = cms.bool(True),
                    name = cms.string('PFRecHitQTestDBThreshold')
                ),
                cms.PSet(
                    cleaningThreshold = cms.double(2.0),
                    name = cms.string('PFRecHitQTestECAL'),
                    skipTTRecoveredHits = cms.bool(True),
                    timingCleaning = cms.bool(True),
                    topologicalCleaning = cms.bool(True)
                )
            ),
            srFlags = cms.InputTag(""),
            src = cms.InputTag("hltEcalRecHit","EcalRecHitsEE")
        )
    )
)


process.hltParticleFlowRecHitECALL1Seeded = cms.EDProducer("PFRecHitProducer",
    navigator = cms.PSet(
        barrel = cms.PSet(

        ),
        endcap = cms.PSet(

        ),
        name = cms.string('PFRecHitECALNavigator')
    ),
    producers = cms.VPSet(
        cms.PSet(
            name = cms.string('PFEBRecHitCreator'),
            qualityTests = cms.VPSet(
                cms.PSet(
                    applySelectionsToAllCrystals = cms.bool(True),
                    name = cms.string('PFRecHitQTestDBThreshold')
                ),
                cms.PSet(
                    cleaningThreshold = cms.double(2.0),
                    name = cms.string('PFRecHitQTestECAL'),
                    skipTTRecoveredHits = cms.bool(True),
                    timingCleaning = cms.bool(True),
                    topologicalCleaning = cms.bool(True)
                )
            ),
            srFlags = cms.InputTag(""),
            src = cms.InputTag("hltRechitInRegionsECAL","EcalRecHitsEB")
        ),
        cms.PSet(
            name = cms.string('PFEERecHitCreator'),
            qualityTests = cms.VPSet(
                cms.PSet(
                    applySelectionsToAllCrystals = cms.bool(True),
                    name = cms.string('PFRecHitQTestDBThreshold')
                ),
                cms.PSet(
                    cleaningThreshold = cms.double(2.0),
                    name = cms.string('PFRecHitQTestECAL'),
                    skipTTRecoveredHits = cms.bool(True),
                    timingCleaning = cms.bool(True),
                    topologicalCleaning = cms.bool(True)
                )
            ),
            srFlags = cms.InputTag(""),
            src = cms.InputTag("hltRechitInRegionsECAL","EcalRecHitsEE")
        )
    )
)


process.hltParticleFlowRecHitECALUnseeded = cms.EDProducer("PFRecHitProducer",
    navigator = cms.PSet(
        barrel = cms.PSet(

        ),
        endcap = cms.PSet(

        ),
        name = cms.string('PFRecHitECALNavigator')
    ),
    producers = cms.VPSet(
        cms.PSet(
            name = cms.string('PFEBRecHitCreator'),
            qualityTests = cms.VPSet(
                cms.PSet(
                    applySelectionsToAllCrystals = cms.bool(True),
                    name = cms.string('PFRecHitQTestDBThreshold')
                ),
                cms.PSet(
                    cleaningThreshold = cms.double(2.0),
                    name = cms.string('PFRecHitQTestECAL'),
                    skipTTRecoveredHits = cms.bool(True),
                    timingCleaning = cms.bool(True),
                    topologicalCleaning = cms.bool(True)
                )
            ),
            srFlags = cms.InputTag(""),
            src = cms.InputTag("hltEcalRecHit","EcalRecHitsEB")
        ),
        cms.PSet(
            name = cms.string('PFEERecHitCreator'),
            qualityTests = cms.VPSet(
                cms.PSet(
                    applySelectionsToAllCrystals = cms.bool(True),
                    name = cms.string('PFRecHitQTestDBThreshold')
                ),
                cms.PSet(
                    cleaningThreshold = cms.double(2.0),
                    name = cms.string('PFRecHitQTestECAL'),
                    skipTTRecoveredHits = cms.bool(True),
                    timingCleaning = cms.bool(True),
                    topologicalCleaning = cms.bool(True)
                )
            ),
            srFlags = cms.InputTag(""),
            src = cms.InputTag("hltEcalRecHit","EcalRecHitsEE")
        )
    )
)


process.hltParticleFlowRecHitHBHE = cms.EDProducer("PFRecHitProducer",
    navigator = cms.PSet(
        hcalEnums = cms.vint32(1, 2),
        name = cms.string('PFRecHitHCALDenseIdNavigator')
    ),
    producers = cms.VPSet(cms.PSet(
        name = cms.string('PFHBHERecHitCreator'),
        qualityTests = cms.VPSet(
            cms.PSet(
                cuts = cms.VPSet(
                    cms.PSet(
                        depth = cms.vint32(1, 2, 3, 4),
                        detectorEnum = cms.int32(1),
                        threshold = cms.vdouble(0.1, 0.2, 0.3, 0.3)
                    ),
                    cms.PSet(
                        depth = cms.vint32(
                            1, 2, 3, 4, 5,
                            6, 7
                        ),
                        detectorEnum = cms.int32(2),
                        threshold = cms.vdouble(
                            0.1, 0.2, 0.2, 0.2, 0.2,
                            0.2, 0.2
                        )
                    )
                ),
                name = cms.string('PFRecHitQTestHCALThresholdVsDepth'),
                usePFThresholdsFromDB = cms.bool(True)
            ),
            cms.PSet(
                cleaningThresholds = cms.vdouble(0.0),
                flags = cms.vstring('Standard'),
                maxSeverities = cms.vint32(11),
                name = cms.string('PFRecHitQTestHCALChannel')
            )
        ),
        src = cms.InputTag("hltHbhereco")
    ))
)


process.hltParticleFlowRecHitHF = cms.EDProducer("PFRecHitProducer",
    navigator = cms.PSet(
        hcalEnums = cms.vint32(4),
        name = cms.string('PFRecHitHCALDenseIdNavigator')
    ),
    producers = cms.VPSet(cms.PSet(
        EMDepthCorrection = cms.double(22.0),
        HADDepthCorrection = cms.double(25.0),
        HFCalib29 = cms.double(1.07),
        LongFibre_Cut = cms.double(120.0),
        LongFibre_Fraction = cms.double(0.1),
        ShortFibre_Cut = cms.double(60.0),
        ShortFibre_Fraction = cms.double(0.01),
        name = cms.string('PFHFRecHitCreator'),
        qualityTests = cms.VPSet(
            cms.PSet(
                cleaningThresholds = cms.vdouble(0.0, 120.0, 60.0),
                flags = cms.vstring(
                    'Standard',
                    'HFLong',
                    'HFShort'
                ),
                maxSeverities = cms.vint32(11, 9, 9),
                name = cms.string('PFRecHitQTestHCALChannel')
            ),
            cms.PSet(
                cuts = cms.VPSet(cms.PSet(
                    depth = cms.vint32(1, 2),
                    detectorEnum = cms.int32(4),
                    threshold = cms.vdouble(1.2, 1.8)
                )),
                name = cms.string('PFRecHitQTestHCALThresholdVsDepth'),
                usePFThresholdsFromDB = cms.bool(False)
            )
        ),
        src = cms.InputTag("hltHfreco"),
        thresh_HF = cms.double(0.4)
    ))
)


process.hltParticleFlowRecHitHGC = cms.EDProducer("PFRecHitProducer",
    navigator = cms.PSet(
        hgcee = cms.PSet(
            name = cms.string('PFRecHitHGCEENavigator'),
            topologySource = cms.string('HGCalEESensitive')
        ),
        hgcheb = cms.PSet(
            name = cms.string('PFRecHitHGCHENavigator'),
            topologySource = cms.string('HGCalHEScintillatorSensitive')
        ),
        hgchef = cms.PSet(
            name = cms.string('PFRecHitHGCHENavigator'),
            topologySource = cms.string('HGCalHESiliconSensitive')
        ),
        name = cms.string('PFRecHitHGCNavigator')
    ),
    producers = cms.VPSet(
        cms.PSet(
            geometryInstance = cms.string('HGCalEESensitive'),
            name = cms.string('PFHGCalEERecHitCreator'),
            qualityTests = cms.VPSet(cms.PSet(
                name = cms.string('PFRecHitQTestHGCalThresholdSNR'),
                thresholdSNR = cms.double(5.0)
            )),
            src = cms.InputTag("hltHGCalRecHit","HGCEERecHits")
        ),
        cms.PSet(
            geometryInstance = cms.string('HGCalHESiliconSensitive'),
            name = cms.string('PFHGCalHSiRecHitCreator'),
            qualityTests = cms.VPSet(cms.PSet(
                name = cms.string('PFRecHitQTestHGCalThresholdSNR'),
                thresholdSNR = cms.double(5.0)
            )),
            src = cms.InputTag("hltHGCalRecHit","HGCHEFRecHits")
        ),
        cms.PSet(
            geometryInstance = cms.string(''),
            name = cms.string('PFHGCalHScRecHitCreator'),
            qualityTests = cms.VPSet(cms.PSet(
                name = cms.string('PFRecHitQTestHGCalThresholdSNR'),
                thresholdSNR = cms.double(5.0)
            )),
            src = cms.InputTag("hltHGCalRecHit","HGCHEBRecHits")
        )
    )
)


process.hltParticleFlowRecHitHGCL1Seeded = cms.EDProducer("PFRecHitProducer",
    navigator = cms.PSet(
        hgcee = cms.PSet(
            name = cms.string('PFRecHitHGCEENavigator'),
            topologySource = cms.string('HGCalEESensitive')
        ),
        hgcheb = cms.PSet(
            name = cms.string('PFRecHitHGCHENavigator'),
            topologySource = cms.string('HGCalHEScintillatorSensitive')
        ),
        hgchef = cms.PSet(
            name = cms.string('PFRecHitHGCHENavigator'),
            topologySource = cms.string('HGCalHESiliconSensitive')
        ),
        name = cms.string('PFRecHitHGCNavigator')
    ),
    producers = cms.VPSet(
        cms.PSet(
            geometryInstance = cms.string('HGCalEESensitive'),
            name = cms.string('PFHGCalEERecHitCreator'),
            qualityTests = cms.VPSet(cms.PSet(
                name = cms.string('PFRecHitQTestHGCalThresholdSNR'),
                thresholdSNR = cms.double(5.0)
            )),
            src = cms.InputTag("hltHGCalRecHitL1Seeded","HGCEERecHits")
        ),
        cms.PSet(
            geometryInstance = cms.string('HGCalHESiliconSensitive'),
            name = cms.string('PFHGCalHSiRecHitCreator'),
            qualityTests = cms.VPSet(cms.PSet(
                name = cms.string('PFRecHitQTestHGCalThresholdSNR'),
                thresholdSNR = cms.double(5.0)
            )),
            src = cms.InputTag("hltHGCalRecHitL1Seeded","HGCHEFRecHits")
        ),
        cms.PSet(
            geometryInstance = cms.string(''),
            name = cms.string('PFHGCalHScRecHitCreator'),
            qualityTests = cms.VPSet(cms.PSet(
                name = cms.string('PFRecHitQTestHGCalThresholdSNR'),
                thresholdSNR = cms.double(5.0)
            )),
            src = cms.InputTag("hltHGCalRecHitL1Seeded","HGCHEBRecHits")
        )
    )
)


process.hltParticleFlowRecHitHO = cms.EDProducer("PFRecHitProducer",
    navigator = cms.PSet(
        hcalEnums = cms.vint32(3),
        name = cms.string('PFRecHitHCALDenseIdNavigator')
    ),
    producers = cms.VPSet(cms.PSet(
        name = cms.string('PFHORecHitCreator'),
        qualityTests = cms.VPSet(
            cms.PSet(
                name = cms.string('PFRecHitQTestThreshold'),
                threshold = cms.double(0.05)
            ),
            cms.PSet(
                cleaningThresholds = cms.vdouble(0.0),
                flags = cms.vstring('Standard'),
                maxSeverities = cms.vint32(11),
                name = cms.string('PFRecHitQTestHCALChannel')
            )
        ),
        src = cms.InputTag("hltHoreco")
    ))
)


process.hltParticleFlowSuperClusterECAL = cms.EDProducer("PFECALSuperClusterProducer",
    BeamSpot = cms.InputTag("hltOnlineBeamSpot"),
    ClusteringType = cms.string('Mustache'),
    ESAssociation = cms.InputTag("hltParticleFlowClusterECAL"),
    EnergyWeight = cms.string('Raw'),
    PFBasicClusterCollectionBarrel = cms.string('particleFlowBasicClusterECALBarrel'),
    PFBasicClusterCollectionEndcap = cms.string('particleFlowBasicClusterECALEndcap'),
    PFBasicClusterCollectionPreshower = cms.string('particleFlowBasicClusterECALPreshower'),
    PFClusters = cms.InputTag("hltParticleFlowClusterECAL"),
    PFSuperClusterCollectionBarrel = cms.string('particleFlowSuperClusterECALBarrel'),
    PFSuperClusterCollectionEndcap = cms.string('particleFlowSuperClusterECALEndcap'),
    PFSuperClusterCollectionEndcapWithPreshower = cms.string('particleFlowSuperClusterECALEndcapWithPreshower'),
    applyCrackCorrections = cms.bool(False),
    barrelRecHits = cms.InputTag("hltEcalRecHit","EcalRecHitsEE"),
    doSatelliteClusterMerge = cms.bool(False),
    dropUnseedable = cms.bool(False),
    endcapRecHits = cms.InputTag("hltEalRecHit","EcalRecHitsEB"),
    etawidth_SuperClusterBarrel = cms.double(0.04),
    etawidth_SuperClusterEndcap = cms.double(0.04),
    isOOTCollection = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    phiwidth_SuperClusterBarrel = cms.double(0.6),
    phiwidth_SuperClusterEndcap = cms.double(0.6),
    regressionConfig = cms.PSet(
        applySigmaIetaIphiBug = cms.bool(False),
        eRecHitThreshold = cms.double(1),
        ecalRecHitsEB = cms.InputTag("hltEcalRecHit","EcalRecHitsEB"),
        ecalRecHitsEE = cms.InputTag("hltEcalRecHit","EcalRecHitsEE"),
        hgcalCylinderR = cms.double(2.79999995232),
        hgcalRecHits = cms.InputTag(""),
        isHLT = cms.bool(False),
        isPhaseII = cms.bool(False),
        regressionKeyEB = cms.string('pfscecal_EBCorrection_offline_v2'),
        regressionKeyEE = cms.string('pfscecal_EECorrection_offline_v2'),
        regressionMaxEB = cms.double(2),
        regressionMaxEE = cms.double(2),
        regressionMinEB = cms.double(0.2),
        regressionMinEE = cms.double(0.2),
        uncertaintyKeyEB = cms.string('pfscecal_EBUncertainty_offline_v2'),
        uncertaintyKeyEE = cms.string('pfscecal_EEUncertainty_offline_v2'),
        uncertaintyMaxEB = cms.double(0.5),
        uncertaintyMaxEE = cms.double(0.5),
        uncertaintyMinEB = cms.double(0.0002),
        uncertaintyMinEE = cms.double(0.0002),
        vertexCollection = cms.InputTag("hltOfflinePrimaryVertices")
    ),
    satelliteClusterSeedThreshold = cms.double(50),
    satelliteMajorityFraction = cms.double(0.5),
    seedThresholdIsET = cms.bool(True),
    thresh_PFClusterBarrel = cms.double(0),
    thresh_PFClusterES = cms.double(0),
    thresh_PFClusterEndcap = cms.double(0),
    thresh_PFClusterSeedBarrel = cms.double(1),
    thresh_PFClusterSeedEndcap = cms.double(1),
    thresh_SCEt = cms.double(4),
    useDynamicDPhiWindow = cms.bool(True),
    useRegression = cms.bool(True),
    verbose = cms.untracked.bool(False)
)


process.hltParticleFlowSuperClusterECALL1Seeded = cms.EDProducer("PFECALSuperClusterProducer",
    BeamSpot = cms.InputTag("hltOnlineBeamSpot"),
    ClusteringType = cms.string('Mustache'),
    ESAssociation = cms.InputTag("hltParticleFlowClusterECALL1Seeded"),
    EnergyWeight = cms.string('Raw'),
    PFBasicClusterCollectionBarrel = cms.string('particleFlowBasicClusterECALBarrel'),
    PFBasicClusterCollectionEndcap = cms.string('particleFlowBasicClusterECALEndcap'),
    PFBasicClusterCollectionPreshower = cms.string('particleFlowBasicClusterECALPreshower'),
    PFClusters = cms.InputTag("hltParticleFlowClusterECALL1Seeded"),
    PFSuperClusterCollectionBarrel = cms.string('particleFlowSuperClusterECALBarrel'),
    PFSuperClusterCollectionEndcap = cms.string('particleFlowSuperClusterECALEndcap'),
    PFSuperClusterCollectionEndcapWithPreshower = cms.string('particleFlowSuperClusterECALEndcapWithPreshower'),
    applyCrackCorrections = cms.bool(False),
    barrelRecHits = cms.InputTag("hltRechitInRegionsECAL","EcalRecHitsEB"),
    doSatelliteClusterMerge = cms.bool(False),
    dropUnseedable = cms.bool(False),
    endcapRecHits = cms.InputTag("hltRechitInRegionsECAL","EcalRecHitsEE"),
    etawidth_SuperClusterBarrel = cms.double(0.04),
    etawidth_SuperClusterEndcap = cms.double(0.04),
    isOOTCollection = cms.bool(False),
    phiwidth_SuperClusterBarrel = cms.double(0.6),
    phiwidth_SuperClusterEndcap = cms.double(0.6),
    regressionConfig = cms.PSet(
        ecalRecHitsEB = cms.InputTag("hltEcalRecHitL1Seeded","EcalRecHitsEB"),
        ecalRecHitsEE = cms.InputTag("hltEcalRecHitL1Seeded","EcalRecHitsEE"),
        isHLT = cms.bool(True),
        regressionKeyEB = cms.string('pfscecal_EBCorrection_online'),
        regressionKeyEE = cms.string('pfscecal_EECorrection_online'),
        uncertaintyKeyEB = cms.string('pfscecal_EBUncertainty_online'),
        uncertaintyKeyEE = cms.string('pfscecal_EEUncertainty_online')
    ),
    satelliteClusterSeedThreshold = cms.double(50.0),
    satelliteMajorityFraction = cms.double(0.5),
    seedThresholdIsET = cms.bool(True),
    thresh_PFClusterBarrel = cms.double(0.5),
    thresh_PFClusterES = cms.double(0.5),
    thresh_PFClusterEndcap = cms.double(0.5),
    thresh_PFClusterSeedBarrel = cms.double(1.0),
    thresh_PFClusterSeedEndcap = cms.double(1.0),
    thresh_SCEt = cms.double(10.0),
    useDynamicDPhiWindow = cms.bool(True),
    useRegression = cms.bool(True),
    verbose = cms.untracked.bool(False)
)


process.hltParticleFlowSuperClusterECALUnseeded = cms.EDProducer("PFECALSuperClusterProducer",
    BeamSpot = cms.InputTag("hltOnlineBeamSpot"),
    ClusteringType = cms.string('Mustache'),
    ESAssociation = cms.InputTag("hltParticleFlowClusterECALUnseeded"),
    EnergyWeight = cms.string('Raw'),
    PFBasicClusterCollectionBarrel = cms.string('particleFlowBasicClusterECALBarrel'),
    PFBasicClusterCollectionEndcap = cms.string('particleFlowBasicClusterECALEndcap'),
    PFBasicClusterCollectionPreshower = cms.string('particleFlowBasicClusterECALPreshower'),
    PFClusters = cms.InputTag("hltParticleFlowClusterECALUnseeded"),
    PFSuperClusterCollectionBarrel = cms.string('particleFlowSuperClusterECALBarrel'),
    PFSuperClusterCollectionEndcap = cms.string('particleFlowSuperClusterECALEndcap'),
    PFSuperClusterCollectionEndcapWithPreshower = cms.string('particleFlowSuperClusterECALEndcapWithPreshower'),
    applyCrackCorrections = cms.bool(False),
    barrelRecHits = cms.InputTag("hltEcalRecHit","EcalRecHitsEE"),
    doSatelliteClusterMerge = cms.bool(False),
    dropUnseedable = cms.bool(False),
    endcapRecHits = cms.InputTag("hltEcalRecHit","EcalRecHitsEB"),
    etawidth_SuperClusterBarrel = cms.double(0.04),
    etawidth_SuperClusterEndcap = cms.double(0.04),
    isOOTCollection = cms.bool(False),
    phiwidth_SuperClusterBarrel = cms.double(0.6),
    phiwidth_SuperClusterEndcap = cms.double(0.6),
    regressionConfig = cms.PSet(
        ecalRecHitsEB = cms.InputTag("hltEcalRecHit","EcalRecHitsEB"),
        ecalRecHitsEE = cms.InputTag("hltEcalRecHit","EcalRecHitsEE"),
        isHLT = cms.bool(True),
        regressionKeyEB = cms.string('pfscecal_EBCorrection_online'),
        regressionKeyEE = cms.string('pfscecal_EECorrection_online'),
        uncertaintyKeyEB = cms.string('pfscecal_EBUncertainty_online'),
        uncertaintyKeyEE = cms.string('pfscecal_EEUncertainty_online')
    ),
    satelliteClusterSeedThreshold = cms.double(50.0),
    satelliteMajorityFraction = cms.double(0.5),
    seedThresholdIsET = cms.bool(True),
    thresh_PFClusterBarrel = cms.double(0.5),
    thresh_PFClusterES = cms.double(0.5),
    thresh_PFClusterEndcap = cms.double(0.5),
    thresh_PFClusterSeedBarrel = cms.double(1.0),
    thresh_PFClusterSeedEndcap = cms.double(1.0),
    thresh_SCEt = cms.double(10.0),
    useDynamicDPhiWindow = cms.bool(True),
    useRegression = cms.bool(True),
    verbose = cms.untracked.bool(False)
)


process.hltParticleFlowSuperClusterHGCal = cms.EDProducer("PFECALSuperClusterProducer",
    BeamSpot = cms.InputTag("hltOnlineBeamSpot"),
    ClusteringType = cms.string('Mustache'),
    ESAssociation = cms.InputTag("hltParticleFlowClusterECAL"),
    EnergyWeight = cms.string('Raw'),
    PFBasicClusterCollectionBarrel = cms.string('particleFlowBasicClusterECALBarrel'),
    PFBasicClusterCollectionEndcap = cms.string(''),
    PFBasicClusterCollectionPreshower = cms.string('particleFlowBasicClusterECALPreshower'),
    PFClusters = cms.InputTag("hltParticleFlowClusterHGCal"),
    PFSuperClusterCollectionBarrel = cms.string('particleFlowSuperClusterECALBarrel'),
    PFSuperClusterCollectionEndcap = cms.string(''),
    PFSuperClusterCollectionEndcapWithPreshower = cms.string(''),
    applyCrackCorrections = cms.bool(False),
    barrelRecHits = cms.InputTag("hltEcalRecHit","EcalRecHitsEE"),
    doSatelliteClusterMerge = cms.bool(False),
    dropUnseedable = cms.bool(True),
    endcapRecHits = cms.InputTag("hltEcalRecHit","EcalRecHitsEB"),
    etawidth_SuperClusterBarrel = cms.double(0.04),
    etawidth_SuperClusterEndcap = cms.double(0.04),
    isOOTCollection = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    phiwidth_SuperClusterBarrel = cms.double(0.6),
    phiwidth_SuperClusterEndcap = cms.double(0.6),
    regressionConfig = cms.PSet(
        applySigmaIetaIphiBug = cms.bool(False),
        eRecHitThreshold = cms.double(1),
        ecalRecHitsEB = cms.InputTag("hltEcalRecHit","EcalRecHitsEB"),
        ecalRecHitsEE = cms.InputTag("hltEcalRecHit","EcalRecHitsEE"),
        hgcalCylinderR = cms.double(2.79999995232),
        hgcalRecHits = cms.InputTag(""),
        isHLT = cms.bool(False),
        isPhaseII = cms.bool(False),
        regressionKeyEB = cms.string('pfscecal_EBCorrection_offline_v2'),
        regressionKeyEE = cms.string('pfscecal_EECorrection_offline_v2'),
        regressionMaxEB = cms.double(2),
        regressionMaxEE = cms.double(2),
        regressionMinEB = cms.double(0.2),
        regressionMinEE = cms.double(0.2),
        uncertaintyKeyEB = cms.string('pfscecal_EBUncertainty_offline_v2'),
        uncertaintyKeyEE = cms.string('pfscecal_EEUncertainty_offline_v2'),
        uncertaintyMaxEB = cms.double(0.5),
        uncertaintyMaxEE = cms.double(0.5),
        uncertaintyMinEB = cms.double(0.0002),
        uncertaintyMinEE = cms.double(0.0002),
        vertexCollection = cms.InputTag("hltOfflinePrimaryVertices")
    ),
    satelliteClusterSeedThreshold = cms.double(50),
    satelliteMajorityFraction = cms.double(0.5),
    seedThresholdIsET = cms.bool(True),
    thresh_PFClusterBarrel = cms.double(0),
    thresh_PFClusterES = cms.double(0),
    thresh_PFClusterEndcap = cms.double(0.15),
    thresh_PFClusterSeedBarrel = cms.double(1),
    thresh_PFClusterSeedEndcap = cms.double(1),
    thresh_SCEt = cms.double(4),
    useDynamicDPhiWindow = cms.bool(True),
    useRegression = cms.bool(False),
    verbose = cms.untracked.bool(False)
)


process.hltParticleFlowSuperClusterHGCalFromTICLL1Seeded = cms.EDProducer("PFECALSuperClusterProducer",
    BeamSpot = cms.InputTag("hltOnlineBeamSpot"),
    ClusteringType = cms.string('Mustache'),
    ESAssociation = cms.InputTag("hltParticleFlowClusterECALL1Seeded"),
    EnergyWeight = cms.string('Raw'),
    PFBasicClusterCollectionBarrel = cms.string('particleFlowBasicClusterECALBarrel'),
    PFBasicClusterCollectionEndcap = cms.string(''),
    PFBasicClusterCollectionPreshower = cms.string('particleFlowBasicClusterECALPreshower'),
    PFClusters = cms.InputTag("hltParticleFlowClusterHGCalFromTICLL1Seeded"),
    PFSuperClusterCollectionBarrel = cms.string('particleFlowSuperClusterECALBarrel'),
    PFSuperClusterCollectionEndcap = cms.string(''),
    PFSuperClusterCollectionEndcapWithPreshower = cms.string(''),
    applyCrackCorrections = cms.bool(False),
    barrelRecHits = cms.InputTag("hltRechitInRegionsECAL","EcalRecHitsEB"),
    doSatelliteClusterMerge = cms.bool(False),
    dropUnseedable = cms.bool(True),
    endcapRecHits = cms.InputTag("hltRechitInRegionsECAL","EcalRecHitsEE"),
    etawidth_SuperClusterBarrel = cms.double(0.04),
    etawidth_SuperClusterEndcap = cms.double(0.04),
    isOOTCollection = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    phiwidth_SuperClusterBarrel = cms.double(0.6),
    phiwidth_SuperClusterEndcap = cms.double(0.6),
    regressionConfig = cms.PSet(
        applySigmaIetaIphiBug = cms.bool(False),
        eRecHitThreshold = cms.double(1),
        ecalRecHitsEB = cms.InputTag("hltEcalRecHitL1Seeded","EcalRecHitsEB"),
        ecalRecHitsEE = cms.InputTag("hltEcalRecHitL1Seeded","EcalRecHitsEE"),
        hgcalRecHits = cms.InputTag("hltParticleFlowRecHitHGCL1Seeded"),
        isHLT = cms.bool(True),
        isPhaseII = cms.bool(True),
        regressionKeyEB = cms.string('pfscecal_EBCorrection_offline_v2'),
        regressionKeyEE = cms.string('superclus_hgcal_mean_online'),
        uncertaintyKeyEB = cms.string('pfscecal_EBUncertainty_offline_v2'),
        uncertaintyKeyEE = cms.string('superclus_hgcal_sigma_online'),
        vertexCollection = cms.InputTag("")
    ),
    satelliteClusterSeedThreshold = cms.double(50),
    satelliteMajorityFraction = cms.double(0.5),
    seedThresholdIsET = cms.bool(True),
    thresh_PFClusterBarrel = cms.double(0),
    thresh_PFClusterES = cms.double(0),
    thresh_PFClusterEndcap = cms.double(0.15),
    thresh_PFClusterSeedBarrel = cms.double(1),
    thresh_PFClusterSeedEndcap = cms.double(1),
    thresh_SCEt = cms.double(10.0),
    useDynamicDPhiWindow = cms.bool(True),
    useRegression = cms.bool(True),
    verbose = cms.untracked.bool(False)
)


process.hltParticleFlowSuperClusterHGCalFromTICLUnseeded = cms.EDProducer("PFECALSuperClusterProducer",
    BeamSpot = cms.InputTag("hltOnlineBeamSpot"),
    ClusteringType = cms.string('Mustache'),
    ESAssociation = cms.InputTag("hltParticleFlowClusterECALUnseeded"),
    EnergyWeight = cms.string('Raw'),
    PFBasicClusterCollectionBarrel = cms.string('particleFlowBasicClusterECALBarrel'),
    PFBasicClusterCollectionEndcap = cms.string(''),
    PFBasicClusterCollectionPreshower = cms.string('particleFlowBasicClusterECALPreshower'),
    PFClusters = cms.InputTag("hltParticleFlowClusterHGCalFromTICLUnseeded"),
    PFSuperClusterCollectionBarrel = cms.string('particleFlowSuperClusterECALBarrel'),
    PFSuperClusterCollectionEndcap = cms.string(''),
    PFSuperClusterCollectionEndcapWithPreshower = cms.string(''),
    applyCrackCorrections = cms.bool(False),
    barrelRecHits = cms.InputTag("hltEcalRecHit","EcalRecHitsEB"),
    doSatelliteClusterMerge = cms.bool(False),
    dropUnseedable = cms.bool(True),
    endcapRecHits = cms.InputTag("hltEcalRecHit","EcalRecHitsEE"),
    etawidth_SuperClusterBarrel = cms.double(0.04),
    etawidth_SuperClusterEndcap = cms.double(0.04),
    isOOTCollection = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    phiwidth_SuperClusterBarrel = cms.double(0.6),
    phiwidth_SuperClusterEndcap = cms.double(0.6),
    regressionConfig = cms.PSet(
        applySigmaIetaIphiBug = cms.bool(False),
        eRecHitThreshold = cms.double(1),
        ecalRecHitsEB = cms.InputTag("hltEcalRecHit","EcalRecHitsEB"),
        ecalRecHitsEE = cms.InputTag("hltEcalRecHit","EcalRecHitsEE"),
        hgcalRecHits = cms.InputTag("hltParticleFlowRecHitHGC"),
        isHLT = cms.bool(True),
        isPhaseII = cms.bool(True),
        regressionKeyEB = cms.string('pfscecal_EBCorrection_offline_v2'),
        regressionKeyEE = cms.string('superclus_hgcal_mean_online'),
        uncertaintyKeyEB = cms.string('pfscecal_EBUncertainty_offline_v2'),
        uncertaintyKeyEE = cms.string('superclus_hgcal_sigma_online'),
        vertexCollection = cms.InputTag("")
    ),
    satelliteClusterSeedThreshold = cms.double(50),
    satelliteMajorityFraction = cms.double(0.5),
    seedThresholdIsET = cms.bool(True),
    thresh_PFClusterBarrel = cms.double(0),
    thresh_PFClusterES = cms.double(0),
    thresh_PFClusterEndcap = cms.double(0.15),
    thresh_PFClusterSeedBarrel = cms.double(1),
    thresh_PFClusterSeedEndcap = cms.double(1),
    thresh_SCEt = cms.double(10.0),
    useDynamicDPhiWindow = cms.bool(True),
    useRegression = cms.bool(True),
    verbose = cms.untracked.bool(False)
)


process.hltParticleFlowTimeAssignerECAL = cms.EDProducer("PFClusterTimeAssigner",
    mightGet = cms.optional.untracked.vstring,
    src = cms.InputTag("hltParticleFlowClusterECALUncorrected"),
    timeResoSrc = cms.InputTag("hltEcalBarrelClusterFastTimer","PerfectResolutionModelResolution"),
    timeSrc = cms.InputTag("hltEcalBarrelClusterFastTimer","PerfectResolutionModel")
)


process.hltParticleFlowTmp = cms.EDProducer("PFCandidateListMerger",
    src = cms.VInputTag("hltParticleFlowTmpBarrel", "hltPfTICL")
)


process.hltParticleFlowTmpBarrel = cms.EDProducer("PFProducer",
    GedElectronValueMap = cms.InputTag("gedGsfElectronValueMapsTmp"),
    GedPhotonValueMap = cms.InputTag("gedPhotonsTmp","valMapPFEgammaCandToPhoton"),
    PFEGammaCandidates = cms.InputTag("particleFlowEGamma"),
    PFEGammaFiltersParameters = cms.PSet(
        electronDnnBkgThresholds = cms.PSet(
            electronDnnBkgHighPtBarrelThr = cms.double(0.8),
            electronDnnBkgHighPtEndcapThr = cms.double(0.75),
            electronDnnBkgLowPtThr = cms.double(0.75)
        ),
        electronDnnThresholds = cms.PSet(
            electronDnnHighPtBarrelThr = cms.double(0.068),
            electronDnnHighPtEndcapThr = cms.double(0.056),
            electronDnnLowPtThr = cms.double(0.075)
        ),
        electron_ecalDrivenHademPreselCut = cms.double(0.15),
        electron_iso_combIso_barrel = cms.double(10),
        electron_iso_combIso_endcap = cms.double(10),
        electron_iso_mva_barrel = cms.double(-0.1875),
        electron_iso_mva_endcap = cms.double(-0.1075),
        electron_iso_pt = cms.double(10),
        electron_maxElePtForOnlyMVAPresel = cms.double(50),
        electron_missinghits = cms.uint32(1),
        electron_noniso_mvaCut = cms.double(-0.1),
        electron_protectionsForBadHcal = cms.PSet(
            dEta = cms.vdouble(0.0064, 0.01264),
            dPhi = cms.vdouble(0.0547, 0.0394),
            eInvPInv = cms.vdouble(0.184, 0.0721),
            enableProtections = cms.bool(False),
            full5x5_sigmaIetaIeta = cms.vdouble(0.0106, 0.0387)
        ),
        electron_protectionsForJetMET = cms.PSet(
            maxDPhiIN = cms.double(0.1),
            maxE = cms.double(50),
            maxEcalEOverPRes = cms.double(0.2),
            maxEcalEOverP_1 = cms.double(0.5),
            maxEcalEOverP_2 = cms.double(0.2),
            maxEeleOverPout = cms.double(0.2),
            maxEeleOverPoutRes = cms.double(0.5),
            maxEleHcalEOverEcalE = cms.double(0.1),
            maxHcalE = cms.double(10),
            maxHcalEOverEcalE = cms.double(0.1),
            maxHcalEOverP = cms.double(1),
            maxNtracks = cms.double(3),
            maxTrackPOverEele = cms.double(1)
        ),
        photonDnnThresholds = cms.PSet(
            photonDnnBarrelThr = cms.double(0.22),
            photonDnnEndcapThr = cms.double(0.35)
        ),
        photon_HoE = cms.double(0.05),
        photon_MinEt = cms.double(10),
        photon_SigmaiEtaiEta_barrel = cms.double(0.0125),
        photon_SigmaiEtaiEta_endcap = cms.double(0.034),
        photon_combIso = cms.double(10),
        photon_protectionsForBadHcal = cms.PSet(
            enableProtections = cms.bool(False),
            solidConeTrkIsoOffset = cms.double(10),
            solidConeTrkIsoSlope = cms.double(0.3)
        ),
        photon_protectionsForJetMET = cms.PSet(
            sumPtTrackIso = cms.double(4),
            sumPtTrackIsoSlope = cms.double(0.001)
        ),
        useEBModelInGap = cms.bool(True),
        useElePFidDnn = cms.bool(False),
        usePhotonPFidDnn = cms.bool(False)
    ),
    PFHFCleaningParameters = cms.PSet(
        maxDeltaPhiPt = cms.double(7),
        maxSignificance = cms.double(2.5),
        minDeltaMet = cms.double(0.4),
        minHFCleaningPt = cms.double(5),
        minSignificance = cms.double(2.5),
        minSignificanceReduction = cms.double(1.4)
    ),
    PFMuonAlgoParameters = cms.PSet(
        cosmicRejectionDistance = cms.double(1),
        eventFactorForCosmics = cms.double(10),
        eventFractionForCleaning = cms.double(0.5),
        eventFractionForRejection = cms.double(0.8),
        maxDPtOPt = cms.double(1),
        metFactorForCleaning = cms.double(4),
        metFactorForFakes = cms.double(4),
        metFactorForHighEta = cms.double(25),
        metFactorForRejection = cms.double(4),
        metSignificanceForCleaning = cms.double(3),
        metSignificanceForRejection = cms.double(4),
        minEnergyForPunchThrough = cms.double(100),
        minMomentumForPunchThrough = cms.double(100),
        minPtForPostCleaning = cms.double(20),
        ptErrorScale = cms.double(8),
        ptFactorForHighEta = cms.double(2),
        punchThroughFactor = cms.double(3),
        punchThroughMETFactor = cms.double(4),
        trackQuality = cms.string('highPurity')
    ),
    blocks = cms.InputTag("hltParticleFlowBlock"),
    calibHF_a_EMHAD = cms.vdouble(
        1, 1, 1, 1, 1,
        1, 1, 1, 1, 1
    ),
    calibHF_a_EMonly = cms.vdouble(
        1, 1, 1, 1, 1,
        1, 1, 1, 1, 1
    ),
    calibHF_b_EMHAD = cms.vdouble(
        1, 1, 1, 1, 1,
        1, 1, 1, 1, 1
    ),
    calibHF_b_HADonly = cms.vdouble(
        1, 1, 1, 1, 1,
        1, 1, 1, 1, 1
    ),
    calibHF_eta_step = cms.vdouble(
        0, 2.9, 3, 3.2, 4.2,
        4.4, 4.6, 4.8, 5.2, 5.4
    ),
    calibHF_use = cms.bool(False),
    calibrationsLabel = cms.string(''),
    cleanedHF = cms.VInputTag("hltParticleFlowRecHitHF:Cleaned", "hltParticleFlowClusterHF:Cleaned"),
    debug = cms.untracked.bool(False),
    dptRel_DispVtx = cms.double(10),
    egammaElectrons = cms.InputTag("mvaElectrons"),
    factors_45 = cms.vdouble(10, 100),
    goodPixelTrackDeadHcal_chi2n = cms.double(2),
    goodPixelTrackDeadHcal_dxy = cms.double(0.02),
    goodPixelTrackDeadHcal_dz = cms.double(0.05),
    goodPixelTrackDeadHcal_maxLost3Hit = cms.int32(0),
    goodPixelTrackDeadHcal_maxLost4Hit = cms.int32(1),
    goodPixelTrackDeadHcal_maxPt = cms.double(50),
    goodPixelTrackDeadHcal_minEta = cms.double(2.3),
    goodPixelTrackDeadHcal_ptErrRel = cms.double(1),
    goodTrackDeadHcal_chi2n = cms.double(5),
    goodTrackDeadHcal_dxy = cms.double(0.5),
    goodTrackDeadHcal_layers = cms.uint32(4),
    goodTrackDeadHcal_ptErrRel = cms.double(0.2),
    goodTrackDeadHcal_validFr = cms.double(0.5),
    iCfgCandConnector = cms.PSet(
        bCalibPrimary = cms.bool(True),
        bCorrect = cms.bool(True),
        dptRel_MergedTrack = cms.double(5),
        dptRel_PrimaryTrack = cms.double(10),
        nuclCalibFactors = cms.vdouble(0.8, 0.15, 0.5, 0.5, 0.05),
        ptErrorSecondary = cms.double(1)
    ),
    mightGet = cms.optional.untracked.vstring,
    muon_ECAL = cms.vdouble(0.5, 0.5),
    muon_HCAL = cms.vdouble(3, 3),
    muon_HO = cms.vdouble(0.9, 0.9),
    muons = cms.InputTag("hltPhase2L3Muons"),
    nsigma_TRACK = cms.double(1),
    pf_nsigma_ECAL = cms.double(0),
    pf_nsigma_HCAL = cms.double(1),
    pf_nsigma_HFEM = cms.double(1),
    pf_nsigma_HFHAD = cms.double(1),
    postHFCleaning = cms.bool(False),
    postMuonCleaning = cms.bool(True),
    pt_Error = cms.double(1),
    rejectTracks_Bad = cms.bool(True),
    rejectTracks_Step45 = cms.bool(True),
    resolHF_square = cms.vdouble(7.834401, 0.012996, 0),
    useCalibrationsFromDB = cms.bool(True),
    useEGammaElectrons = cms.bool(False),
    useEGammaFilters = cms.bool(False),
    useHO = cms.bool(True),
    usePFConversions = cms.bool(False),
    usePFDecays = cms.bool(False),
    usePFNuclearInteractions = cms.bool(False),
    useProtectionsForJetMET = cms.bool(False),
    useVerticesForNeutral = cms.bool(True),
    verbose = cms.untracked.bool(False),
    vertexCollection = cms.InputTag("hltOfflinePrimaryVertices"),
    vetoEndcap = cms.bool(True),
    vetoes = cms.InputTag("hltPfTICL")
)


process.hltPfClusterRefsForJets = cms.EDProducer("PFClusterRefCandidateMerger",
    src = cms.VInputTag("hltPfClusterRefsForJetsHCAL", "hltPfClusterRefsForJetsECAL", "hltPfClusterRefsForJetsHF", "hltPfClusterRefsForJetsHO", "hltPfClusterRefsForJetsHGCAL")
)


process.hltPfClusterRefsForJetsECAL = cms.EDProducer("PFClusterRefCandidateProducer",
    particleType = cms.string('pi+'),
    src = cms.InputTag("hltParticleFlowClusterECAL")
)


process.hltPfClusterRefsForJetsHCAL = cms.EDProducer("PFClusterRefCandidateProducer",
    particleType = cms.string('pi+'),
    src = cms.InputTag("hltParticleFlowClusterHCAL")
)


process.hltPfClusterRefsForJetsHF = cms.EDProducer("PFClusterRefCandidateProducer",
    particleType = cms.string('pi+'),
    src = cms.InputTag("hltParticleFlowClusterHF")
)


process.hltPfClusterRefsForJetsHGCAL = cms.EDProducer("PFClusterRefCandidateProducer",
    particleType = cms.string('pi+'),
    src = cms.InputTag("hltParticleFlowClusterHGCal")
)


process.hltPfClusterRefsForJetsHO = cms.EDProducer("PFClusterRefCandidateProducer",
    particleType = cms.string('pi+'),
    src = cms.InputTag("hltParticleFlowClusterHO")
)


process.hltPfDeepFlavourJetTags = cms.EDProducer("DeepFlavourONNXJetTagsProducer",
    flav_names = cms.vstring(
        'probb',
        'probbb',
        'problepb',
        'probc',
        'probuds',
        'probg'
    ),
    input_names = cms.vstring(
        'input_1',
        'input_2',
        'input_3',
        'input_4',
        'input_5'
    ),
    mightGet = cms.optional.untracked.vstring,
    model_path = cms.FileInPath('RecoBTag/Combined/data/DeepFlavourV02_PhaseII/DeepJet_retraining_phase2_new_inputs.onnx'),
    output_names = cms.vstring(),
    src = cms.InputTag("hltPfDeepFlavourTagInfos")
)


process.hltPfDeepFlavourJetTagsModEta2p4 = cms.EDProducer("DeepFlavourONNXJetTagsProducer",
    flav_names = cms.vstring(
        'probb',
        'probbb',
        'problepb',
        'probc',
        'probuds',
        'probg'
    ),
    input_names = cms.vstring(
        'input_1',
        'input_2',
        'input_3',
        'input_4',
        'input_5'
    ),
    mightGet = cms.optional.untracked.vstring,
    model_path = cms.FileInPath('RecoBTag/Combined/data/DeepFlavourV02_PhaseII/DeepJet_retraining_phase2_new_inputs.onnx'),
    output_names = cms.vstring(),
    src = cms.InputTag("hltPfDeepFlavourTagInfosModEta2p4")
)


process.hltPfDeepFlavourTagInfos = cms.EDProducer("DeepFlavourTagInfoProducer",
    candidates = cms.InputTag("hltParticleFlowTmp"),
    compute_probabilities = cms.bool(False),
    fallback_puppi_weight = cms.bool(False),
    fallback_vertex_association = cms.bool(False),
    flip = cms.bool(False),
    jet_radius = cms.double(0.4),
    jets = cms.InputTag("hltAK4PFPuppiJets"),
    max_jet_eta = cms.double(2.5),
    mightGet = cms.optional.untracked.vstring,
    min_candidate_pt = cms.double(0.95),
    min_jet_pt = cms.double(15),
    puppi_value_map = cms.InputTag("hltPFPuppi"),
    run_deepVertex = cms.bool(False),
    secondary_vertices = cms.InputTag("hltDeepInclusiveSecondaryVerticesPF"),
    shallow_tag_infos = cms.InputTag("hltDeepCombinedSecondaryVertexBJetTagsInfosPuppi"),
    unsubjet_map = cms.InputTag(""),
    vertex_associator = cms.InputTag("hltPrimaryVertexAssociation","original"),
    vertices = cms.InputTag("hltOfflinePrimaryVertices")
)


process.hltPfDeepFlavourTagInfosModEta2p4 = cms.EDProducer("DeepFlavourTagInfoProducer",
    candidates = cms.InputTag("hltParticleFlowTmp"),
    compute_probabilities = cms.bool(False),
    fallback_puppi_weight = cms.bool(False),
    fallback_vertex_association = cms.bool(False),
    flip = cms.bool(False),
    jet_radius = cms.double(0.4),
    jets = cms.InputTag("hltPFPuppiJetForBtagEta2p4"),
    max_jet_eta = cms.double(2.5),
    mightGet = cms.optional.untracked.vstring,
    min_candidate_pt = cms.double(0.95),
    min_jet_pt = cms.double(15),
    puppi_value_map = cms.InputTag("hltPFPuppi"),
    run_deepVertex = cms.bool(False),
    secondary_vertices = cms.InputTag("hltDeepInclusiveSecondaryVerticesPF"),
    shallow_tag_infos = cms.InputTag("hltDeepCombinedSecondaryVertexBJetTagsInfosPuppiModEta2p4"),
    unsubjet_map = cms.InputTag(""),
    vertex_associator = cms.InputTag("hltPrimaryVertexAssociationModEta2p4","original"),
    vertices = cms.InputTag("hltOfflinePrimaryVertices")
)


process.hltPfNoPileUpJME = cms.EDProducer("TPPFCandidatesOnPFCandidates",
    bottomCollection = cms.InputTag("hltParticleFlowPtrs"),
    enable = cms.bool(True),
    name = cms.untracked.string('pileUpOnPFCandidates'),
    topCollection = cms.InputTag("hltPfPileUpJME")
)


process.hltPfPileUpJME = cms.EDProducer("PFPileUp",
    PFCandidates = cms.InputTag("hltParticleFlowPtrs"),
    Vertices = cms.InputTag("hltGoodOfflinePrimaryVertices"),
    checkClosestZVertex = cms.bool(False),
    enable = cms.bool(True),
    useVertexAssociation = cms.bool(False),
    verbose = cms.untracked.bool(False),
    vertexAssociation = cms.InputTag(""),
    vertexAssociationQuality = cms.int32(7)
)


process.hltPfTICL = cms.EDProducer("PFTICLProducer",
    mightGet = cms.optional.untracked.vstring,
    muonSrc = cms.InputTag("hltPhase2L3Muons"),
    pfMuonAlgoParameters = cms.PSet(
        cosmicRejectionDistance = cms.double(1),
        eventFactorForCosmics = cms.double(10),
        eventFractionForCleaning = cms.double(0.5),
        eventFractionForRejection = cms.double(0.8),
        maxDPtOPt = cms.double(1),
        metFactorForCleaning = cms.double(4),
        metFactorForFakes = cms.double(4),
        metFactorForHighEta = cms.double(25),
        metFactorForRejection = cms.double(4),
        metSignificanceForCleaning = cms.double(3),
        metSignificanceForRejection = cms.double(4),
        minEnergyForPunchThrough = cms.double(100),
        minMomentumForPunchThrough = cms.double(100),
        minPtForPostCleaning = cms.double(20),
        ptErrorScale = cms.double(8),
        ptFactorForHighEta = cms.double(2),
        punchThroughFactor = cms.double(3),
        punchThroughMETFactor = cms.double(4),
        trackQuality = cms.string('highPurity')
    ),
    ticlCandidateSrc = cms.InputTag("hltTiclTrackstersMerge"),
    timingQualityThreshold = cms.double(0.5),
    trackTimeErrorMap = cms.InputTag("tofPID","sigmat0"),
    trackTimeQualityMap = cms.InputTag("mtdTrackQualityMVA","mtdQualMVA"),
    trackTimeValueMap = cms.InputTag("tofPID","t0"),
    useMTDTiming = cms.bool(False),
    useTimingAverage = cms.bool(False)
)


process.hltPfTrack = cms.EDProducer("PFTrackProducer",
    GsfTrackModuleLabel = cms.InputTag("electronGsfTracks"),
    GsfTracksInEvents = cms.bool(False),
    MuColl = cms.InputTag("hltPhase2L3Muons"),
    PrimaryVertexLabel = cms.InputTag("hltOfflinePrimaryVertices"),
    TkColList = cms.VInputTag(cms.InputTag("hltGeneralTracks")),
    TrackQuality = cms.string('highPurity'),
    TrajInEvents = cms.bool(False),
    UseQuality = cms.bool(True)
)


process.hltPhase2L3FromL1TkMuonPixelLayerQuadruplets = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('hltSiPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('hltSiPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring(
        'BPix1+BPix2+BPix3+BPix4',
        'BPix1+BPix2+BPix3+FPix1_pos',
        'BPix1+BPix2+BPix3+FPix1_neg',
        'BPix1+BPix2+FPix1_pos+FPix2_pos',
        'BPix1+BPix2+FPix1_neg+FPix2_neg',
        'BPix1+FPix1_pos+FPix2_pos+FPix3_pos',
        'BPix1+FPix1_neg+FPix2_neg+FPix3_neg'
    )
)


process.hltPhase2L3FromL1TkMuonPixelTracks = cms.EDProducer("PixelTrackProducer",
    Cleaner = cms.string('hltPixelTracksCleanerBySharedHits'),
    Filter = cms.InputTag("hltPhase2PixelTrackFilterByKinematics"),
    Fitter = cms.InputTag("hltPhase2PixelFitterByHelixProjections"),
    SeedingHitSets = cms.InputTag("hltPhase2L3FromL1TkMuonPixelTracksHitQuadruplets"),
    passLabel = cms.string('')
)


process.hltPhase2L3FromL1TkMuonPixelTracksHitDoublets = cms.EDProducer("HitPairEDProducer",
    clusterCheck = cms.InputTag(""),
    layerPairs = cms.vuint32(0, 1, 2),
    maxElement = cms.uint32(0),
    produceIntermediateHitDoublets = cms.bool(True),
    produceSeedingHitSets = cms.bool(False),
    seedingLayers = cms.InputTag("hltPhase2L3FromL1TkMuonPixelLayerQuadruplets"),
    trackingRegions = cms.InputTag("hltPhase2L3FromL1TkMuonPixelTracksTrackingRegions"),
    trackingRegionsSeedingLayers = cms.InputTag("")
)


process.hltPhase2L3FromL1TkMuonPixelTracksHitQuadruplets = cms.EDProducer("CAHitQuadrupletEDProducer",
    CAHardPtCut = cms.double(0.0),
    CAPhiCut = cms.double(0.2),
    CAThetaCut = cms.double(0.005),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('LowPtClusterShapeSeedComparitor'),
        clusterShapeCacheSrc = cms.InputTag("hltSiPixelClusterShapeCache"),
        clusterShapeHitFilter = cms.string('ClusterShapeHitFilter')
    ),
    doublets = cms.InputTag("hltPhase2L3FromL1TkMuonPixelTracksHitDoublets"),
    extraHitRPhitolerance = cms.double(0.032),
    fitFastCircle = cms.bool(True),
    fitFastCircleChi2Cut = cms.bool(True),
    maxChi2 = cms.PSet(
        enabled = cms.bool(True),
        pt1 = cms.double(0.7),
        pt2 = cms.double(2.0),
        value1 = cms.double(200.0),
        value2 = cms.double(50.0)
    ),
    useBendingCorrection = cms.bool(True)
)


process.hltPhase2L3FromL1TkMuonPixelTracksTrackingRegions = cms.EDProducer("CandidateSeededTrackingRegionsEDProducer",
    RegionPSet = cms.PSet(
        beamSpot = cms.InputTag("hltOnlineBeamSpot"),
        deltaEta = cms.double(0.035),
        deltaPhi = cms.double(0.02),
        input = cms.InputTag("l1tTkMuonsGmt"),
        maxNRegions = cms.int32(10000),
        maxNVertices = cms.int32(1),
        measurementTrackerName = cms.InputTag(""),
        mode = cms.string('BeamSpotSigma'),
        nSigmaZBeamSpot = cms.double(4.0),
        nSigmaZVertex = cms.double(3.0),
        originRadius = cms.double(0.2),
        precise = cms.bool(True),
        ptMin = cms.double(2.0),
        searchOpt = cms.bool(False),
        vertexCollection = cms.InputTag("notUsed"),
        whereToUseMeasurementTracker = cms.string('Never'),
        zErrorBeamSpot = cms.double(24.2),
        zErrorVetex = cms.double(0.2)
    )
)


process.hltPhase2L3FromL1TkMuonPixelVertices = cms.EDProducer("PixelVertexProducer",
    Finder = cms.string('DivisiveVertexFinder'),
    Method2 = cms.bool(True),
    NTrkMin = cms.int32(2),
    PVcomparer = cms.PSet(
        refToPSet_ = cms.string('hltPhase2PSetPvClusterComparerForIT')
    ),
    PtMin = cms.double(1.0),
    TrackCollection = cms.InputTag("hltPhase2L3FromL1TkMuonPixelTracks"),
    UseError = cms.bool(True),
    Verbosity = cms.int32(0),
    WtAverage = cms.bool(True),
    ZOffset = cms.double(5.0),
    ZSeparation = cms.double(0.05),
    beamSpot = cms.InputTag("hltOnlineBeamSpot")
)


process.hltPhase2L3FromL1TkMuonTrimmedPixelVertices = cms.EDProducer("PixelVertexCollectionTrimmer",
    PVcomparer = cms.PSet(
        refToPSet_ = cms.string('hltPhase2PSetPvClusterComparerForIT')
    ),
    fractionSumPt2 = cms.double(0.3),
    maxVtx = cms.uint32(100),
    minSumPt2 = cms.double(0.0),
    src = cms.InputTag("hltPhase2L3FromL1TkMuonPixelVertices")
)


process.hltPhase2L3GlbMuon = cms.EDProducer("L3MuonProducer",
    L3TrajBuilderParameters = cms.PSet(
        GlbRefitterParameters = cms.PSet(
            CSCRecSegmentLabel = cms.InputTag("hltCscSegments"),
            Chi2CutCSC = cms.double(150.0),
            Chi2CutDT = cms.double(10.0),
            Chi2CutRPC = cms.double(1.0),
            DTRecSegmentLabel = cms.InputTag("hltDt4DSegments"),
            DYTthrs = cms.vint32(30, 15),
            DoPredictionsOnly = cms.bool(False),
            Fitter = cms.string('hltESPL3MuKFTrajectoryFitter'),
            HitThreshold = cms.int32(1),
            MuonHitsOption = cms.int32(1),
            MuonRecHitBuilder = cms.string('hltESPMuonTransientTrackingRecHitBuilder'),
            PropDirForCosmics = cms.bool(False),
            Propagator = cms.string('hltESPSmartPropagatorAny'),
            RefitDirection = cms.string('insideOut'),
            RefitFlag = cms.bool(True),
            RefitRPCHits = cms.bool(True),
            SkipStation = cms.int32(-1),
            TrackerRecHitBuilder = cms.string('WithTrackAngle'),
            TrackerSkipSection = cms.int32(-1),
            TrackerSkipSystem = cms.int32(-1)
        ),
        GlobalMuonTrackMatcher = cms.PSet(
            Chi2Cut_1 = cms.double(50.0),
            Chi2Cut_2 = cms.double(50.0),
            Chi2Cut_3 = cms.double(200.0),
            DeltaDCut_1 = cms.double(40.0),
            DeltaDCut_2 = cms.double(10.0),
            DeltaDCut_3 = cms.double(15.0),
            DeltaRCut_1 = cms.double(0.1),
            DeltaRCut_2 = cms.double(0.2),
            DeltaRCut_3 = cms.double(1.0),
            Eta_threshold = cms.double(1.2),
            LocChi2Cut = cms.double(0.001),
            MinP = cms.double(2.5),
            MinPt = cms.double(1.0),
            Propagator = cms.string('hltESPSmartPropagator'),
            Pt_threshold1 = cms.double(0.0),
            Pt_threshold2 = cms.double(999999999.0),
            Quality_1 = cms.double(20.0),
            Quality_2 = cms.double(15.0),
            Quality_3 = cms.double(7.0)
        ),
        MuonRecHitBuilder = cms.string('hltESPMuonTransientTrackingRecHitBuilder'),
        MuonTrackingRegionBuilder = cms.PSet(
            DeltaEta = cms.double(0.2),
            DeltaPhi = cms.double(0.15),
            DeltaR = cms.double(0.025),
            DeltaZ = cms.double(24.2),
            EtaR_UpperLimit_Par1 = cms.double(0.25),
            EtaR_UpperLimit_Par2 = cms.double(0.15),
            Eta_fixed = cms.bool(True),
            Eta_min = cms.double(0.1),
            MeasurementTrackerName = cms.InputTag("hltESPMeasurementTracker"),
            OnDemand = cms.int32(-1),
            PhiR_UpperLimit_Par1 = cms.double(0.6),
            PhiR_UpperLimit_Par2 = cms.double(0.2),
            Phi_fixed = cms.bool(True),
            Phi_min = cms.double(0.1),
            Pt_fixed = cms.bool(False),
            Pt_min = cms.double(3.0),
            Rescale_Dz = cms.double(4.0),
            Rescale_eta = cms.double(3.0),
            Rescale_phi = cms.double(3.0),
            UseVertex = cms.bool(False),
            Z_fixed = cms.bool(False),
            beamSpot = cms.InputTag("hltOnlineBeamSpot"),
            input = cms.InputTag("hltL2MuonsFromL1TkMuon","UpdatedAtVtx"),
            maxRegions = cms.int32(2),
            precise = cms.bool(True)
        ),
        PCut = cms.double(2.5),
        PtCut = cms.double(1.0),
        RefitRPCHits = cms.bool(True),
        ScaleTECxFactor = cms.double(-1.0),
        ScaleTECyFactor = cms.double(-1.0),
        TrackTransformer = cms.PSet(
            DoPredictionsOnly = cms.bool(False),
            Fitter = cms.string('hltESPL3MuKFTrajectoryFitter'),
            MuonRecHitBuilder = cms.string('hltESPMuonTransientTrackingRecHitBuilder'),
            Propagator = cms.string('hltESPSmartPropagatorAny'),
            RefitDirection = cms.string('insideOut'),
            RefitRPCHits = cms.bool(True),
            Smoother = cms.string('hltESPKFTrajectorySmootherForMuonTrackLoader'),
            TrackerRecHitBuilder = cms.string('WithTrackAngle')
        ),
        TrackerPropagator = cms.string('SteppingHelixPropagatorAny'),
        TrackerRecHitBuilder = cms.string('WithTrackAngle'),
        tkTrajBeamSpot = cms.InputTag("hltOnlineBeamSpot"),
        tkTrajLabel = cms.InputTag("hltPhase2L3MuonMerged"),
        tkTrajMaxChi2 = cms.double(9999.0),
        tkTrajMaxDXYBeamSpot = cms.double(9999.0),
        tkTrajUseVertex = cms.bool(False),
        tkTrajVertex = cms.InputTag("Notused")
    ),
    MuonCollectionLabel = cms.InputTag("hltL2MuonsFromL1TkMuon","UpdatedAtVtx"),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring(
            'hltESPSmartPropagatorAny',
            'SteppingHelixPropagatorAny',
            'hltESPSmartPropagator',
            'hltESPSteppingHelixPropagatorOpposite'
        ),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(True),
        MuonSeededTracksInstance = cms.untracked.string('L2Seeded'),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('hltESPSteppingHelixPropagatorOpposite')
        ),
        PutTkTrackIntoEvent = cms.untracked.bool(False),
        SmoothTkTrack = cms.untracked.bool(False),
        Smoother = cms.string('hltESPKFTrajectorySmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("hltOnlineBeamSpot")
    )
)


process.hltPhase2L3MuonCandidates = cms.EDProducer("L3MuonCandidateProducerFromMuons",
    InputObjects = cms.InputTag("hltPhase2L3Muons")
)


process.hltPhase2L3MuonGeneralTracks = cms.EDProducer("TrackListMerger",
    Epsilon = cms.double(-0.001),
    FoundHitBonus = cms.double(5.0),
    LostHitPenalty = cms.double(5.0),
    MaxNormalizedChisq = cms.double(1000.0),
    MinFound = cms.int32(3),
    MinPT = cms.double(0.9),
    ShareFrac = cms.double(0.19),
    TrackProducers = cms.VInputTag("hltPhase2L3MuonInitialStepTracksSelectionHighPurity", "hltPhase2L3MuonHighPtTripletStepTracksSelectionHighPurity"),
    allowFirstHitShare = cms.bool(True),
    copyExtras = cms.untracked.bool(True),
    copyMVA = cms.bool(False),
    hasSelector = cms.vint32(0, 0),
    indivShareFrac = cms.vdouble(1.0, 1.0),
    makeReKeyedSeeds = cms.untracked.bool(False),
    newQuality = cms.string('confirmed'),
    selectedTrackQuals = cms.VInputTag(cms.InputTag("hltPhase2L3MuonInitialStepTracksSelectionHighPurity"), cms.InputTag("hltPhase2L3MuonHighPtTripletStepTracksSelectionHighPurity")),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(True),
        tLists = cms.vint32(0, 1)
    )),
    trackAlgoPriorityOrder = cms.string('hltPhase2L3MuonTrackAlgoPriorityOrder'),
    writeOnlyTrkQuals = cms.bool(False)
)


process.hltPhase2L3MuonHighPtTripletStepClusters = cms.EDProducer("TrackClusterRemoverPhase2",
    TrackQuality = cms.string('highPurity'),
    maxChi2 = cms.double(9.0),
    mightGet = cms.optional.untracked.vstring,
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    oldClusterRemovalInfo = cms.InputTag(""),
    overrideTrkQuals = cms.InputTag(""),
    phase2OTClusters = cms.InputTag("hltSiPhase2Clusters"),
    phase2pixelClusters = cms.InputTag("hltSiPixelClusters"),
    trackClassifier = cms.InputTag("","QualityMasks"),
    trajectories = cms.InputTag("hltPhase2L3MuonInitialStepTracksSelectionHighPurity")
)


process.hltPhase2L3MuonHighPtTripletStepHitDoublets = cms.EDProducer("HitPairEDProducer",
    clusterCheck = cms.InputTag("hltTrackerClusterCheck"),
    layerPairs = cms.vuint32(0, 1),
    maxElement = cms.uint32(50000000),
    maxElementTotal = cms.uint32(50000000),
    mightGet = cms.optional.untracked.vstring,
    produceIntermediateHitDoublets = cms.bool(True),
    produceSeedingHitSets = cms.bool(False),
    seedingLayers = cms.InputTag("hltPhase2L3MuonHighPtTripletStepSeedLayers"),
    trackingRegions = cms.InputTag("hltPhase2L3MuonHighPtTripletStepTrackingRegions"),
    trackingRegionsSeedingLayers = cms.InputTag("")
)


process.hltPhase2L3MuonHighPtTripletStepHitTriplets = cms.EDProducer("CAHitTripletEDProducer",
    CAHardPtCut = cms.double(0.5),
    CAPhiCut = cms.double(0.06),
    CAThetaCut = cms.double(0.003),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('LowPtClusterShapeSeedComparitor'),
        clusterShapeCacheSrc = cms.InputTag("hltSiPixelClusterShapeCache"),
        clusterShapeHitFilter = cms.string('ClusterShapeHitFilter')
    ),
    doublets = cms.InputTag("hltPhase2L3MuonHighPtTripletStepHitDoublets"),
    extraHitRPhitolerance = cms.double(0.032),
    maxChi2 = cms.PSet(
        enabled = cms.bool(True),
        pt1 = cms.double(0.8),
        pt2 = cms.double(8),
        value1 = cms.double(100),
        value2 = cms.double(6)
    ),
    mightGet = cms.optional.untracked.vstring,
    useBendingCorrection = cms.bool(True)
)


process.hltPhase2L3MuonHighPtTripletStepSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('hltSiPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("hltPhase2L3MuonHighPtTripletStepClusters")
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('hltSiPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("hltPhase2L3MuonHighPtTripletStepClusters")
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring(
        'BPix1+BPix2+BPix3',
        'BPix2+BPix3+BPix4',
        'BPix1+BPix3+BPix4',
        'BPix1+BPix2+BPix4',
        'BPix2+BPix3+FPix1_pos',
        'BPix2+BPix3+FPix1_neg',
        'BPix1+BPix2+FPix1_pos',
        'BPix1+BPix2+FPix1_neg',
        'BPix2+FPix1_pos+FPix2_pos',
        'BPix2+FPix1_neg+FPix2_neg',
        'BPix1+FPix1_pos+FPix2_pos',
        'BPix1+FPix1_neg+FPix2_neg',
        'FPix1_pos+FPix2_pos+FPix3_pos',
        'FPix1_neg+FPix2_neg+FPix3_neg',
        'BPix1+FPix2_pos+FPix3_pos',
        'BPix1+FPix2_neg+FPix3_neg',
        'FPix2_pos+FPix3_pos+FPix4_pos',
        'FPix2_neg+FPix3_neg+FPix4_neg',
        'FPix3_pos+FPix4_pos+FPix5_pos',
        'FPix3_neg+FPix4_neg+FPix5_neg',
        'FPix4_pos+FPix5_pos+FPix6_pos',
        'FPix4_neg+FPix5_neg+FPix6_neg',
        'FPix5_pos+FPix6_pos+FPix7_pos',
        'FPix5_neg+FPix6_neg+FPix7_neg',
        'FPix6_pos+FPix7_pos+FPix8_pos',
        'FPix6_neg+FPix7_neg+FPix8_neg'
    ),
    mightGet = cms.optional.untracked.vstring
)


process.hltPhase2L3MuonHighPtTripletStepSeeds = cms.EDProducer("SeedCreatorFromRegionConsecutiveHitsEDProducer",
    MinOneOverPtError = cms.double(1),
    OriginTransverseErrorMultiplier = cms.double(1),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedMomentumForBOFF = cms.double(5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    forceKinematicWithRegionDirection = cms.bool(False),
    magneticField = cms.string(''),
    propagator = cms.string('PropagatorWithMaterial'),
    seedingHitSets = cms.InputTag("hltPhase2L3MuonHighPtTripletStepHitTriplets")
)


process.hltPhase2L3MuonHighPtTripletStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("hltMeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('hltPhase2L3MuonHighPtTripletStepTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('hltPhase2L3MuonHighPtTripletStepTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(100000),
    maxSeedsBeforeCleaning = cms.uint32(1000),
    numHitsForSeedCleaner = cms.int32(50),
    onlyPixelHitsForSeedCleaner = cms.bool(True),
    phase2clustersToSkip = cms.InputTag("hltPhase2L3MuonHighPtTripletStepClusters"),
    reverseTrajectories = cms.bool(False),
    src = cms.InputTag("hltPhase2L3MuonHighPtTripletStepSeeds"),
    useHitsSplitting = cms.bool(False)
)


process.hltPhase2L3MuonHighPtTripletStepTrackCutClassifier = cms.EDProducer("TrackCutClassifier",
    beamspot = cms.InputTag("hltOnlineBeamSpot"),
    ignoreVertices = cms.bool(False),
    mva = cms.PSet(
        dr_par = cms.PSet(
            d0err = cms.vdouble(0.003, 0.003, 0.003),
            d0err_par = cms.vdouble(0.002, 0.002, 0.001),
            dr_exp = cms.vint32(4, 4, 4),
            dr_par1 = cms.vdouble(0.7, 0.6, 0.6),
            dr_par2 = cms.vdouble(0.6, 0.5, 0.45)
        ),
        dz_par = cms.PSet(
            dz_exp = cms.vint32(4, 4, 4),
            dz_par1 = cms.vdouble(0.8, 0.7, 0.7),
            dz_par2 = cms.vdouble(0.6, 0.6, 0.55)
        ),
        maxChi2 = cms.vdouble(9999.0, 9999.0, 9999.0),
        maxChi2n = cms.vdouble(2.0, 1.0, 0.8),
        maxDr = cms.vdouble(0.5, 0.03, 3.40282346639e+38),
        maxDz = cms.vdouble(0.5, 0.2, 3.40282346639e+38),
        maxDzWrtBS = cms.vdouble(3.40282346639e+38, 24.0, 15.0),
        maxLostLayers = cms.vint32(3, 3, 2),
        min3DLayers = cms.vint32(3, 3, 4),
        minLayers = cms.vint32(3, 3, 4),
        minNVtxTrk = cms.int32(3),
        minNdof = cms.vdouble(1e-05, 1e-05, 1e-05),
        minPixelHits = cms.vint32(0, 0, 3)
    ),
    qualityCuts = cms.vdouble(-0.7, 0.1, 0.7),
    src = cms.InputTag("hltPhase2L3MuonHighPtTripletStepTracks"),
    vertices = cms.InputTag("hltPhase2L3MuonPixelVertices")
)


process.hltPhase2L3MuonHighPtTripletStepTrackingRegions = cms.EDProducer("CandidateSeededTrackingRegionsEDProducer",
    RegionPSet = cms.PSet(
        beamSpot = cms.InputTag("hltOnlineBeamSpot"),
        deltaEta = cms.double(0.4),
        deltaPhi = cms.double(0.4),
        input = cms.InputTag("hltPhase2L3MuonCandidates"),
        maxNRegions = cms.int32(10000),
        maxNVertices = cms.int32(1),
        measurementTrackerName = cms.InputTag(""),
        mode = cms.string('BeamSpotSigma'),
        nSigmaZBeamSpot = cms.double(4.0),
        nSigmaZVertex = cms.double(3.0),
        originRadius = cms.double(0.2),
        precise = cms.bool(True),
        ptMin = cms.double(0.9),
        searchOpt = cms.bool(False),
        vertexCollection = cms.InputTag("notUsed"),
        whereToUseMeasurementTracker = cms.string('Never'),
        zErrorBeamSpot = cms.double(24.2),
        zErrorVetex = cms.double(0.2)
    )
)


process.hltPhase2L3MuonHighPtTripletStepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('highPtTripletStep'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("hltMeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("hltOnlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("hltPhase2L3MuonHighPtTripletStepTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.hltPhase2L3MuonHighPtTripletStepTracksSelectionHighPurity = cms.EDProducer("TrackCollectionFilterCloner",
    copyExtras = cms.untracked.bool(True),
    copyTrajectories = cms.untracked.bool(False),
    minQuality = cms.string('highPurity'),
    originalMVAVals = cms.InputTag("hltPhase2L3MuonHighPtTripletStepTrackCutClassifier","MVAValues"),
    originalQualVals = cms.InputTag("hltPhase2L3MuonHighPtTripletStepTrackCutClassifier","QualityMasks"),
    originalSource = cms.InputTag("hltPhase2L3MuonHighPtTripletStepTracks")
)


process.hltPhase2L3MuonInitialStepSeeds = cms.EDProducer("SeedGeneratorFromProtoTracksEDProducer",
    InputCollection = cms.InputTag("hltPhase2L3MuonPixelTracks"),
    InputVertexCollection = cms.InputTag(""),
    SeedCreatorPSet = cms.PSet(
        refToPSet_ = cms.string('hltPhase2L3MuonSeedFromProtoTracks')
    ),
    TTRHBuilder = cms.string('WithTrackAngle'),
    originHalfLength = cms.double(0.3),
    originRadius = cms.double(0.1),
    useEventsWithNoVertex = cms.bool(True),
    usePV = cms.bool(True),
    useProtoTrackKinematics = cms.bool(False)
)


process.hltPhase2L3MuonInitialStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("hltMeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('hltPhase2L3MuonInitialStepTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(100000),
    maxSeedsBeforeCleaning = cms.uint32(1000),
    numHitsForSeedCleaner = cms.int32(50),
    onlyPixelHitsForSeedCleaner = cms.bool(True),
    reverseTrajectories = cms.bool(False),
    src = cms.InputTag("hltPhase2L3MuonInitialStepSeeds"),
    useHitsSplitting = cms.bool(False)
)


process.hltPhase2L3MuonInitialStepTrackCutClassifier = cms.EDProducer("TrackCutClassifier",
    beamspot = cms.InputTag("hltOnlineBeamSpot"),
    ignoreVertices = cms.bool(False),
    mva = cms.PSet(
        dr_par = cms.PSet(
            d0err = cms.vdouble(0.003, 0.003, 0.003),
            d0err_par = cms.vdouble(0.001, 0.001, 0.001),
            dr_exp = cms.vint32(4, 4, 4),
            dr_par1 = cms.vdouble(0.8, 0.7, 0.6),
            dr_par2 = cms.vdouble(0.6, 0.5, 0.45)
        ),
        dz_par = cms.PSet(
            dz_exp = cms.vint32(4, 4, 4),
            dz_par1 = cms.vdouble(0.9, 0.8, 0.7),
            dz_par2 = cms.vdouble(0.8, 0.7, 0.55)
        ),
        maxChi2 = cms.vdouble(9999.0, 25.0, 16.0),
        maxChi2n = cms.vdouble(2.0, 1.4, 1.2),
        maxDr = cms.vdouble(0.5, 0.03, 3.40282346639e+38),
        maxDz = cms.vdouble(0.5, 0.2, 3.40282346639e+38),
        maxDzWrtBS = cms.vdouble(3.40282346639e+38, 24.0, 15.0),
        maxLostLayers = cms.vint32(3, 2, 2),
        min3DLayers = cms.vint32(3, 3, 3),
        minLayers = cms.vint32(3, 3, 3),
        minNVtxTrk = cms.int32(3),
        minNdof = cms.vdouble(1e-05, 1e-05, 1e-05),
        minPixelHits = cms.vint32(0, 0, 3)
    ),
    qualityCuts = cms.vdouble(-0.7, 0.1, 0.7),
    src = cms.InputTag("hltPhase2L3MuonInitialStepTracks"),
    vertices = cms.InputTag("hltPhase2L3MuonPixelVertices")
)


process.hltPhase2L3MuonInitialStepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('initialStep'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("hltMeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("hltOnlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("hltPhase2L3MuonInitialStepTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.hltPhase2L3MuonInitialStepTracksSelectionHighPurity = cms.EDProducer("TrackCollectionFilterCloner",
    copyExtras = cms.untracked.bool(True),
    copyTrajectories = cms.untracked.bool(False),
    minQuality = cms.string('highPurity'),
    originalMVAVals = cms.InputTag("hltPhase2L3MuonInitialStepTrackCutClassifier","MVAValues"),
    originalQualVals = cms.InputTag("hltPhase2L3MuonInitialStepTrackCutClassifier","QualityMasks"),
    originalSource = cms.InputTag("hltPhase2L3MuonInitialStepTracks")
)


process.hltPhase2L3MuonMerged = cms.EDProducer("TrackListMerger",
    Epsilon = cms.double(-0.001),
    FoundHitBonus = cms.double(5.0),
    LostHitPenalty = cms.double(20.0),
    MaxNormalizedChisq = cms.double(1000.0),
    MinFound = cms.int32(3),
    MinPT = cms.double(0.05),
    ShareFrac = cms.double(0.19),
    TrackProducers = cms.VInputTag("hltPhase2L3OIMuonTrackSelectionHighPurity", "hltIter2Phase2L3FromL1TkMuonMerged"),
    allowFirstHitShare = cms.bool(True),
    copyExtras = cms.untracked.bool(True),
    copyMVA = cms.bool(False),
    hasSelector = cms.vint32(0, 0),
    indivShareFrac = cms.vdouble(1.0, 1.0),
    newQuality = cms.string('confirmed'),
    selectedTrackQuals = cms.VInputTag("hltPhase2L3OIMuonTrackSelectionHighPurity", "hltIter2Phase2L3FromL1TkMuonMerged"),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(False),
        tLists = cms.vint32(0, 1)
    )),
    trackAlgoPriorityOrder = cms.string('hltESPTrackAlgoPriorityOrder'),
    writeOnlyTrkQuals = cms.bool(False)
)


process.hltPhase2L3MuonPixelTracks = cms.EDProducer("PixelTrackProducer",
    Cleaner = cms.string('hltPhase2L3MuonPixelTrackCleanerBySharedHits'),
    Filter = cms.InputTag("hltPhase2PixelTrackFilterByKinematics"),
    Fitter = cms.InputTag("hltPhase2PixelFitterByHelixProjections"),
    SeedingHitSets = cms.InputTag("hltPhase2L3MuonPixelTracksHitQuadruplets"),
    mightGet = cms.optional.untracked.vstring,
    passLabel = cms.string('hltPhase2L3MuonPixelTracks')
)


process.hltPhase2L3MuonPixelTracksHitDoublets = cms.EDProducer("HitPairEDProducer",
    clusterCheck = cms.InputTag("hltTrackerClusterCheck"),
    layerPairs = cms.vuint32(0, 1, 2),
    maxElement = cms.uint32(5000000),
    maxElementTotal = cms.uint32(50000000),
    mightGet = cms.optional.untracked.vstring,
    produceIntermediateHitDoublets = cms.bool(True),
    produceSeedingHitSets = cms.bool(False),
    seedingLayers = cms.InputTag("hltPhase2L3MuonPixelTracksSeedLayers"),
    trackingRegions = cms.InputTag("hltPhase2L3MuonPixelTracksTrackingRegions"),
    trackingRegionsSeedingLayers = cms.InputTag("")
)


process.hltPhase2L3MuonPixelTracksHitQuadruplets = cms.EDProducer("CAHitQuadrupletEDProducer",
    CAHardPtCut = cms.double(0),
    CAOnlyOneLastHitPerLayerFilter = cms.optional.bool,
    CAPhiCut = cms.double(0.2),
    CAThetaCut = cms.double(0.0012),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('LowPtClusterShapeSeedComparitor'),
        clusterShapeCacheSrc = cms.InputTag("hltSiPixelClusterShapeCache"),
        clusterShapeHitFilter = cms.string('ClusterShapeHitFilter')
    ),
    doublets = cms.InputTag("hltPhase2L3MuonPixelTracksHitDoublets"),
    extraHitRPhitolerance = cms.double(0.032),
    fitFastCircle = cms.bool(True),
    fitFastCircleChi2Cut = cms.bool(True),
    maxChi2 = cms.PSet(
        enabled = cms.bool(True),
        pt1 = cms.double(0.7),
        pt2 = cms.double(2.0),
        value1 = cms.double(200.0),
        value2 = cms.double(50.0)
    ),
    mightGet = cms.optional.untracked.vstring,
    useBendingCorrection = cms.bool(True)
)


process.hltPhase2L3MuonPixelTracksSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('hltSiPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('hltSiPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring(
        'BPix1+BPix2+BPix3+BPix4',
        'BPix1+BPix2+BPix3+FPix1_pos',
        'BPix1+BPix2+BPix3+FPix1_neg',
        'BPix1+BPix2+FPix1_pos+FPix2_pos',
        'BPix1+BPix2+FPix1_neg+FPix2_neg',
        'BPix1+FPix1_pos+FPix2_pos+FPix3_pos',
        'BPix1+FPix1_neg+FPix2_neg+FPix3_neg',
        'FPix1_pos+FPix2_pos+FPix3_pos+FPix4_pos',
        'FPix1_neg+FPix2_neg+FPix3_neg+FPix4_neg',
        'FPix2_pos+FPix3_pos+FPix4_pos+FPix5_pos',
        'FPix2_neg+FPix3_neg+FPix4_neg+FPix5_neg',
        'FPix3_pos+FPix4_pos+FPix5_pos+FPix6_pos',
        'FPix3_neg+FPix4_neg+FPix5_neg+FPix6_neg',
        'FPix4_pos+FPix5_pos+FPix6_pos+FPix7_pos',
        'FPix4_neg+FPix5_neg+FPix6_neg+FPix7_neg',
        'FPix5_pos+FPix6_pos+FPix7_pos+FPix8_pos',
        'FPix5_neg+FPix6_neg+FPix7_neg+FPix8_neg'
    ),
    mightGet = cms.optional.untracked.vstring
)


process.hltPhase2L3MuonPixelTracksTrackingRegions = cms.EDProducer("CandidateSeededTrackingRegionsEDProducer",
    RegionPSet = cms.PSet(
        beamSpot = cms.InputTag("hltOnlineBeamSpot"),
        deltaEta = cms.double(0.4),
        deltaPhi = cms.double(0.4),
        input = cms.InputTag("hltPhase2L3MuonCandidates"),
        maxNRegions = cms.int32(10000),
        maxNVertices = cms.int32(1),
        measurementTrackerName = cms.InputTag(""),
        mode = cms.string('BeamSpotSigma'),
        nSigmaZBeamSpot = cms.double(4.0),
        nSigmaZVertex = cms.double(3.0),
        originRadius = cms.double(0.2),
        precise = cms.bool(True),
        ptMin = cms.double(0.9),
        searchOpt = cms.bool(False),
        vertexCollection = cms.InputTag("notUsed"),
        whereToUseMeasurementTracker = cms.string('Never'),
        zErrorBeamSpot = cms.double(24.2),
        zErrorVetex = cms.double(0.2)
    )
)


process.hltPhase2L3MuonPixelVertices = cms.EDProducer("PixelVertexProducer",
    Finder = cms.string('DivisiveVertexFinder'),
    Method2 = cms.bool(True),
    NTrkMin = cms.int32(2),
    PVcomparer = cms.PSet(
        refToPSet_ = cms.string('hltPhase2L3MuonPSetPvClusterComparerForIT')
    ),
    PtMin = cms.double(1.0),
    TrackCollection = cms.InputTag("hltPhase2L3MuonPixelTracks"),
    UseError = cms.bool(True),
    Verbosity = cms.int32(0),
    WtAverage = cms.bool(True),
    ZOffset = cms.double(5.0),
    ZSeparation = cms.double(0.005),
    beamSpot = cms.InputTag("hltOnlineBeamSpot")
)


process.hltPhase2L3Muons = cms.EDProducer("MuonIDFilterProducerForHLT",
    allowedTypeMask = cms.uint32(0),
    applyTriggerIdLoose = cms.bool(True),
    inputMuonCollection = cms.InputTag("hltPhase2L3MuonsNoID"),
    maxNormalizedChi2 = cms.double(9999.0),
    minNMuonHits = cms.int32(0),
    minNMuonStations = cms.int32(0),
    minNTrkLayers = cms.int32(0),
    minPixHits = cms.int32(0),
    minPixLayer = cms.int32(0),
    minPt = cms.double(0.0),
    minTrkHits = cms.int32(0),
    requiredTypeMask = cms.uint32(0),
    typeMuon = cms.uint32(0)
)


process.hltPhase2L3MuonsEcalIsodR0p3dRVeto0p000 = cms.EDProducer("MuonHLTEcalPFClusterIsolationProducer",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    doRhoCorrection = cms.bool(False),
    drMax = cms.double(0.3),
    drVetoBarrel = cms.double(0.0),
    drVetoEndcap = cms.double(0.0),
    effectiveAreas = cms.vdouble(0.35, 0.193),
    energyBarrel = cms.double(0.0),
    energyEndcap = cms.double(0.0),
    etaStripBarrel = cms.double(0.0),
    etaStripEndcap = cms.double(0.0),
    pfClusterProducer = cms.InputTag("hltParticleFlowClusterECALUnseeded"),
    recoCandidateProducer = cms.InputTag("hltPhase2L3MuonCandidates"),
    rhoMax = cms.double(99999999.0),
    rhoProducer = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    rhoScale = cms.double(1.0)
)


process.hltPhase2L3MuonsHcalIsodR0p3dRVeto0p000 = cms.EDProducer("MuonHLTHcalPFClusterIsolationProducer",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    doRhoCorrection = cms.bool(False),
    drMax = cms.double(0.3),
    drVetoBarrel = cms.double(0.0),
    drVetoEndcap = cms.double(0.0),
    effectiveAreas = cms.vdouble(0.227, 0.372),
    energyBarrel = cms.double(0.0),
    energyEndcap = cms.double(0.0),
    etaStripBarrel = cms.double(0.0),
    etaStripEndcap = cms.double(0.0),
    pfClusterProducerHCAL = cms.InputTag("hltParticleFlowClusterHCAL"),
    pfClusterProducerHFEM = cms.InputTag(""),
    pfClusterProducerHFHAD = cms.InputTag(""),
    recoCandidateProducer = cms.InputTag("hltPhase2L3MuonCandidates"),
    rhoMax = cms.double(99999999.0),
    rhoProducer = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    rhoScale = cms.double(1.0),
    useEt = cms.bool(True),
    useHF = cms.bool(False)
)


process.hltPhase2L3MuonsHgcalLCIsodR0p2dRVetoEM0p00dRVetoHad0p02minEEM0p00minEHad0p00 = cms.EDProducer("MuonHLTHGCalLayerClusterIsolationProducer",
    doRhoCorrection = cms.bool(False),
    drMax = cms.double(0.2),
    drVetoEM = cms.double(0.0),
    drVetoHad = cms.double(0.02),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    layerClusterProducer = cms.InputTag("hltHgcalMergeLayerClusters"),
    minEnergyEM = cms.double(0.0),
    minEnergyHad = cms.double(0.0),
    minEtEM = cms.double(0.0),
    minEtHad = cms.double(0.0),
    recoCandidateProducer = cms.InputTag("hltPhase2L3MuonCandidates"),
    rhoMax = cms.double(99999999.0),
    rhoProducer = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    rhoScale = cms.double(1.0),
    useEt = cms.bool(False)
)


process.hltPhase2L3MuonsNoID = cms.EDProducer("MuonIdProducer",
    CaloExtractorPSet = cms.PSet(
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        DR_Max = cms.double(1.0),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DR_Veto_HO = cms.double(0.1),
        DepositInstanceLabels = cms.vstring(
            'ecal',
            'hcal',
            'ho'
        ),
        DepositLabel = cms.untracked.string('Cal'),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Noise_EB = cms.double(0.025),
        Noise_EE = cms.double(0.1),
        Noise_HB = cms.double(0.2),
        Noise_HE = cms.double(0.2),
        Noise_HO = cms.double(0.2),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('hltESPFastSteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('hltESPFastSteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Threshold_HO = cms.double(0.5),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("hltCscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("Notused"),
            DTRecSegment4DCollectionLabel = cms.InputTag("hltDt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("Notused"),
            EERecHitCollectionLabel = cms.InputTag("Notused"),
            HBHERecHitCollectionLabel = cms.InputTag("Notused"),
            HORecHitCollectionLabel = cms.InputTag("Notused"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            dRHcal = cms.double(1.0),
            dRHcalPreselection = cms.double(1.0),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        ),
        UseRecHitsFlag = cms.bool(False)
    ),
    JetExtractorPSet = cms.PSet(
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.1),
        ExcludeMuonVeto = cms.bool(True),
        JetCollectionLabel = cms.InputTag("Notused"),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('hltESPFastSteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('hltESPFastSteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold = cms.double(5.0),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("hltCscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("Notused"),
            DTRecSegment4DCollectionLabel = cms.InputTag("hltDt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("Notused"),
            EERecHitCollectionLabel = cms.InputTag("Notused"),
            HBHERecHitCollectionLabel = cms.InputTag("Notused"),
            HORecHitCollectionLabel = cms.InputTag("Notused"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            dRHcal = cms.double(0.5),
            dRHcalPreselection = cms.double(0.5),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        )
    ),
    MuonCaloCompatibility = cms.PSet(
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        allSiPMHO = cms.bool(False),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    TimingFillerParameters = cms.PSet(
        CSCTimingParameters = cms.PSet(
            CSCStripError = cms.double(7.0),
            CSCStripTimeOffset = cms.double(0.0),
            CSCTimeOffset = cms.double(0.0),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            CSCsegments = cms.InputTag("hltCscSegments"),
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("hltCscSegments"),
                DTradius = cms.double(0.01),
                DTsegments = cms.InputTag("hltDt4DSegments"),
                TightMatchCSC = cms.bool(True),
                TightMatchDT = cms.bool(False)
            ),
            PruneCut = cms.double(100.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('hltESPFastSteppingHelixPropagatorAny'),
                RPCLayers = cms.bool(True)
            ),
            UseStripTime = cms.bool(True),
            UseWireTime = cms.bool(True),
            debug = cms.bool(False)
        ),
        DTTimingParameters = cms.PSet(
            DTTimeOffset = cms.double(2.7),
            DTsegments = cms.InputTag("hltDt4DSegments"),
            DoWireCorr = cms.bool(False),
            DropTheta = cms.bool(True),
            HitError = cms.double(6.0),
            HitsMin = cms.int32(5),
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("hltCscSegments"),
                DTradius = cms.double(0.01),
                DTsegments = cms.InputTag("hltDt4DSegments"),
                TightMatchCSC = cms.bool(True),
                TightMatchDT = cms.bool(False)
            ),
            PruneCut = cms.double(10000.0),
            RequireBothProjections = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('hltESPFastSteppingHelixPropagatorAny'),
                RPCLayers = cms.bool(True)
            ),
            UseSegmentT0 = cms.bool(False),
            debug = cms.bool(False)
        ),
        EcalEnergyCut = cms.double(0.4),
        ErrorCSC = cms.double(7.4),
        ErrorDT = cms.double(6.0),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        UseCSC = cms.bool(True),
        UseDT = cms.bool(True),
        UseECAL = cms.bool(True)
    ),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("hltCscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("Notused"),
        DTRecSegment4DCollectionLabel = cms.InputTag("hltDt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("Notused"),
        EERecHitCollectionLabel = cms.InputTag("Notused"),
        GEMSegmentCollectionLabel = cms.InputTag("hltGemSegments"),
        HBHERecHitCollectionLabel = cms.InputTag("Notused"),
        HORecHitCollectionLabel = cms.InputTag("Notused"),
        ME0SegmentCollectionLabel = cms.InputTag("hltMe0Segments"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        dRHcal = cms.double(9999.0),
        dRHcalPreselection = cms.double(0.2),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(False),
        useGEM = cms.bool(True),
        useHO = cms.bool(False),
        useHcal = cms.bool(False),
        useME0 = cms.bool(False),
        useMuon = cms.bool(True),
        usePreshower = cms.bool(False)
    ),
    TrackExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("hltOnlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.01),
        Diff_r = cms.double(0.1),
        Diff_z = cms.double(0.2),
        NHits_Min = cms.uint32(0),
        Pt_Min = cms.double(-1.0),
        inputTrackCollection = cms.InputTag("hltPhase2L3MuonMerged")
    ),
    TrackerKinkFinderParameters = cms.PSet(
        diagonalOnly = cms.bool(False),
        usePosition = cms.bool(False)
    ),
    addExtraSoftMuons = cms.bool(False),
    arbitrateTrackerMuons = cms.bool(True),
    arbitrationCleanerOptions = cms.PSet(
        ClusterDPhi = cms.double(0.6),
        ClusterDTheta = cms.double(0.02),
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        OverlapDTheta = cms.double(0.02)
    ),
    debugWithTruthMatching = cms.bool(False),
    ecalDepositName = cms.string('ecal'),
    fillCaloCompatibility = cms.bool(False),
    fillEnergy = cms.bool(False),
    fillGlobalTrackQuality = cms.bool(False),
    fillGlobalTrackRefits = cms.bool(False),
    fillIsolation = cms.bool(False),
    fillMatching = cms.bool(True),
    fillTrackerKink = cms.bool(False),
    globalTrackQualityInputTag = cms.InputTag(""),
    hcalDepositName = cms.string('hcal'),
    hoDepositName = cms.string('ho'),
    inputCollectionLabels = cms.VInputTag("hltPhase2L3MuonMerged", "hltPhase2L3GlbMuon", "hltL2MuonsFromL1TkMuon:UpdatedAtVtx"),
    inputCollectionTypes = cms.vstring(
        'inner tracks',
        'links',
        'outer tracks'
    ),
    jetDepositName = cms.string('jets'),
    maxAbsDx = cms.double(3.0),
    maxAbsDy = cms.double(9999.0),
    maxAbsEta = cms.double(3.0),
    maxAbsPullX = cms.double(4.0),
    maxAbsPullY = cms.double(9999.0),
    minCaloCompatibility = cms.double(0.6),
    minNumberOfMatches = cms.int32(1),
    minP = cms.double(0.0),
    minPCaloMuon = cms.double(1000000000.0),
    minPt = cms.double(2.0),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    runArbitrationCleaner = cms.bool(False),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    trackDepositName = cms.string('tracker'),
    writeIsoDeposits = cms.bool(False)
)


process.hltPhase2L3MuonsNoIDTracks = cms.EDProducer("MuonTrackProducer",
    ignoreMissingMuonCollection = cms.untracked.bool(True),
    inputCSCSegmentCollection = cms.InputTag("hltCscSegments"),
    inputDTRecSegment4DCollection = cms.InputTag("hltDt4DSegments"),
    muonsTag = cms.InputTag("hltPhase2L3MuonsNoID"),
    selectionTags = cms.vstring('All'),
    trackType = cms.string('recomuonTrack')
)


process.hltPhase2L3MuonsTracks = cms.EDProducer("MuonTrackProducer",
    ignoreMissingMuonCollection = cms.untracked.bool(True),
    inputCSCSegmentCollection = cms.InputTag("hltCscSegments"),
    inputDTRecSegment4DCollection = cms.InputTag("hltDt4DSegments"),
    muonsTag = cms.InputTag("hltPhase2L3Muons"),
    selectionTags = cms.vstring('All'),
    trackType = cms.string('recomuonTrack')
)


process.hltPhase2L3MuonsTrkIsoRegionalNewdR0p3dRVeto0p005dz0p25dr0p20ChisqInfPtMin0p0Cut0p07 = cms.EDProducer("L3MuonCombinedRelativeIsolationProducer",
    CaloDepositsLabel = cms.InputTag("notUsed"),
    CaloExtractorPSet = cms.PSet(
        CaloTowerCollectionLabel = cms.InputTag("hltPhase2TowerMakerForAll"),
        ComponentName = cms.string('CaloExtractor'),
        DR_Max = cms.double(0.3),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DepositLabel = cms.untracked.string('EcalPlusHcal'),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Vertex_Constraint_XY = cms.bool(False),
        Vertex_Constraint_Z = cms.bool(False),
        Weight_E = cms.double(1.0),
        Weight_H = cms.double(1.0)
    ),
    CutsPSet = cms.PSet(
        ComponentName = cms.string('SimpleCuts'),
        ConeSizes = cms.vdouble(0.3),
        EtaBounds = cms.vdouble(2.411),
        Thresholds = cms.vdouble(0.07),
        applyCutsORmaxNTracks = cms.bool(False),
        maxNTracks = cms.int32(-1)
    ),
    OutputMuIsoDeposits = cms.bool(True),
    TrackPt_Min = cms.double(-1.0),
    TrkExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("hltOnlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('PixelTrackExtractor'),
        DR_Max = cms.double(0.3),
        DR_Veto = cms.double(0.005),
        DR_VetoPt = cms.double(0.025),
        DepositLabel = cms.untracked.string('PXLS'),
        Diff_r = cms.double(0.2),
        Diff_z = cms.double(0.25),
        NHits_Min = cms.uint32(0),
        PropagateTracksToRadius = cms.bool(True),
        PtVeto_Min = cms.double(2.0),
        Pt_Min = cms.double(-1.0),
        ReferenceRadius = cms.double(6.0),
        VetoLeadingTrack = cms.bool(True),
        inputTrackCollection = cms.InputTag("hltPhase2L3MuonGeneralTracks")
    ),
    UseCaloIso = cms.bool(False),
    UseRhoCorrectedCaloDeposits = cms.bool(False),
    inputMuonCollection = cms.InputTag("hltPhase2L3MuonCandidates"),
    printDebug = cms.bool(False)
)


process.hltPhase2L3MuonsTrkIsoRegionalNewdR0p3dRVeto0p005dz0p25dr0p20ChisqInfPtMin0p0Cut0p4 = cms.EDProducer("L3MuonCombinedRelativeIsolationProducer",
    CaloDepositsLabel = cms.InputTag("notUsed"),
    CaloExtractorPSet = cms.PSet(
        CaloTowerCollectionLabel = cms.InputTag("hltPhase2TowerMakerForAll"),
        ComponentName = cms.string('CaloExtractor'),
        DR_Max = cms.double(0.3),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DepositLabel = cms.untracked.string('EcalPlusHcal'),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Vertex_Constraint_XY = cms.bool(False),
        Vertex_Constraint_Z = cms.bool(False),
        Weight_E = cms.double(1.0),
        Weight_H = cms.double(1.0)
    ),
    CutsPSet = cms.PSet(
        ComponentName = cms.string('SimpleCuts'),
        ConeSizes = cms.vdouble(0.3),
        EtaBounds = cms.vdouble(2.411),
        Thresholds = cms.vdouble(0.4),
        applyCutsORmaxNTracks = cms.bool(False),
        maxNTracks = cms.int32(-1)
    ),
    OutputMuIsoDeposits = cms.bool(True),
    TrackPt_Min = cms.double(-1.0),
    TrkExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("hltOnlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('PixelTrackExtractor'),
        DR_Max = cms.double(0.3),
        DR_Veto = cms.double(0.005),
        DR_VetoPt = cms.double(0.025),
        DepositLabel = cms.untracked.string('PXLS'),
        Diff_r = cms.double(0.2),
        Diff_z = cms.double(0.25),
        NHits_Min = cms.uint32(0),
        PropagateTracksToRadius = cms.bool(True),
        PtVeto_Min = cms.double(2.0),
        Pt_Min = cms.double(-1.0),
        ReferenceRadius = cms.double(6.0),
        VetoLeadingTrack = cms.bool(True),
        inputTrackCollection = cms.InputTag("hltPhase2L3MuonGeneralTracks")
    ),
    UseCaloIso = cms.bool(False),
    UseRhoCorrectedCaloDeposits = cms.bool(False),
    inputMuonCollection = cms.InputTag("hltPhase2L3MuonCandidates"),
    printDebug = cms.bool(False)
)


process.hltPhase2L3OIMuCtfWithMaterialTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('iter10'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(True),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("hltMeasurementTrackerEvent"),
    NavigationSchool = cms.string(''),
    Propagator = cms.string('hltESPRungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("hltOnlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("hltPhase2L3OITrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.hltPhase2L3OIMuonTrackCutClassifier = cms.EDProducer("TrackCutClassifier",
    beamspot = cms.InputTag("hltOnlineBeamSpot"),
    ignoreVertices = cms.bool(True),
    mva = cms.PSet(
        dr_par = cms.PSet(
            d0err = cms.vdouble(0.003, 0.003, 3.40282346639e+38),
            d0err_par = cms.vdouble(0.001, 0.001, 3.40282346639e+38),
            dr_exp = cms.vint32(4, 4, 2147483647),
            dr_par1 = cms.vdouble(0.4, 0.4, 3.40282346639e+38),
            dr_par2 = cms.vdouble(0.3, 0.3, 3.40282346639e+38)
        ),
        dz_par = cms.PSet(
            dz_exp = cms.vint32(4, 4, 2147483647),
            dz_par1 = cms.vdouble(0.4, 0.4, 3.40282346639e+38),
            dz_par2 = cms.vdouble(0.35, 0.35, 3.40282346639e+38)
        ),
        maxChi2 = cms.vdouble(3.40282346639e+38, 3.40282346639e+38, 3.40282346639e+38),
        maxChi2n = cms.vdouble(10.0, 1.0, 0.4),
        maxDr = cms.vdouble(0.5, 0.03, 3.40282346639e+38),
        maxDz = cms.vdouble(0.5, 0.2, 3.40282346639e+38),
        maxDzWrtBS = cms.vdouble(3.40282346639e+38, 24.0, 100.0),
        maxLostLayers = cms.vint32(4, 3, 2),
        min3DLayers = cms.vint32(1, 2, 1),
        minLayers = cms.vint32(3, 5, 5),
        minNVtxTrk = cms.int32(3),
        minNdof = cms.vdouble(1e-05, 1e-05, 1e-05),
        minPixelHits = cms.vint32(0, 0, 1)
    ),
    qualityCuts = cms.vdouble(-0.7, 0.1, 0.7),
    src = cms.InputTag("hltPhase2L3OIMuCtfWithMaterialTracks"),
    vertices = cms.InputTag("Notused")
)


process.hltPhase2L3OIMuonTrackSelectionHighPurity = cms.EDProducer("TrackCollectionFilterCloner",
    copyExtras = cms.untracked.bool(True),
    copyTrajectories = cms.untracked.bool(False),
    minQuality = cms.string('highPurity'),
    originalMVAVals = cms.InputTag("hltPhase2L3OIMuonTrackCutClassifier","MVAValues"),
    originalQualVals = cms.InputTag("hltPhase2L3OIMuonTrackCutClassifier","QualityMasks"),
    originalSource = cms.InputTag("hltPhase2L3OIMuCtfWithMaterialTracks")
)


process.hltPhase2L3OISeedsFromL2Muons = cms.EDProducer("TSGForOIFromL2",
    MeasurementTrackerEvent = cms.InputTag("hltMeasurementTrackerEvent"),
    SF1 = cms.double(3.0),
    SF2 = cms.double(4.0),
    SF3 = cms.double(5.0),
    SF4 = cms.double(7.0),
    SF5 = cms.double(10.0),
    SF6 = cms.double(2.0),
    UseHitLessSeeds = cms.bool(True),
    adjustErrorsDynamicallyForHitless = cms.bool(True),
    adjustErrorsDynamicallyForHits = cms.bool(False),
    debug = cms.untracked.bool(False),
    estimator = cms.string('hltESPChi2MeasurementEstimator100'),
    eta1 = cms.double(0.2),
    eta2 = cms.double(0.3),
    eta3 = cms.double(1.0),
    eta4 = cms.double(1.2),
    eta5 = cms.double(1.6),
    eta6 = cms.double(1.4),
    eta7 = cms.double(2.1),
    fixedErrorRescaleFactorForHitless = cms.double(2.0),
    fixedErrorRescaleFactorForHits = cms.double(1.0),
    hitsToTry = cms.int32(1),
    layersToTry = cms.int32(2),
    maxEtaForTOB = cms.double(1.8),
    maxHitSeeds = cms.uint32(1),
    maxHitlessSeeds = cms.uint32(5),
    maxSeeds = cms.uint32(20),
    minEtaForTEC = cms.double(0.7),
    numL2ValidHitsCutAllEndcap = cms.uint32(30),
    numL2ValidHitsCutAllEta = cms.uint32(20),
    pT1 = cms.double(13.0),
    pT2 = cms.double(30.0),
    pT3 = cms.double(70.0),
    propagatorName = cms.string('PropagatorWithMaterialParabolicMf'),
    src = cms.InputTag("hltL2MuonsFromL1TkMuon","UpdatedAtVtx"),
    tsosDiff1 = cms.double(0.2),
    tsosDiff2 = cms.double(0.02)
)


process.hltPhase2L3OITrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("hltMeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('HLTPSetMuonCkfTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('muonSeededTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(False),
    doSeedingRegionRebuilding = cms.bool(False),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    src = cms.InputTag("hltPhase2L3OISeedsFromL2Muons"),
    useHitsSplitting = cms.bool(False)
)


process.hltPhase2OnlineBeamSpotDevice = cms.EDProducer("BeamSpotDeviceProducer@alpaka",
    alpaka = cms.untracked.PSet(
        backend = cms.untracked.string('')
    ),
    src = cms.InputTag("hltOnlineBeamSpot")
)


process.hltPhase2PixelFitterByHelixProjections = cms.EDProducer("PixelFitterByHelixProjectionsProducer",
    scaleErrorsForBPix1 = cms.bool(False),
    scaleFactor = cms.double(0.65)
)


process.hltPhase2PixelTrackFilterByKinematics = cms.EDProducer("PixelTrackFilterByKinematicsProducer",
    chi2 = cms.double(1000.0),
    nSigmaInvPtTolerance = cms.double(0.0),
    nSigmaTipMaxTolerance = cms.double(0.0),
    ptMin = cms.double(0.9),
    tipMax = cms.double(1.0)
)


process.hltPhase2PixelTracks = cms.EDProducer("PixelTrackProducerFromSoAAlpakaPhase2",
    beamSpot = cms.InputTag("hltOnlineBeamSpot"),
    minNumberOfHits = cms.int32(0),
    minQuality = cms.string('tight'),
    pixelRecHitLegacySrc = cms.InputTag("hltSiPixelRecHits"),
    trackSrc = cms.InputTag("hltPhase2PixelTracksSoA")
)


process.hltPhase2PixelTracksAndHighPtStepTrackingRegions = cms.EDProducer("GlobalTrackingRegionFromBeamSpotEDProducer",
    RegionPSet = cms.PSet(
        beamSpot = cms.InputTag("hltOnlineBeamSpot"),
        nSigmaZ = cms.double(4.0),
        originRadius = cms.double(0.02),
        precise = cms.bool(True),
        ptMin = cms.double(0.9)
    )
)


process.hltPhase2PixelTracksHitDoublets = cms.EDProducer("HitPairEDProducer",
    clusterCheck = cms.InputTag(""),
    layerPairs = cms.vuint32(0, 1, 2),
    maxElement = cms.uint32(50000000),
    maxElementTotal = cms.uint32(50000000),
    produceIntermediateHitDoublets = cms.bool(True),
    produceSeedingHitSets = cms.bool(False),
    seedingLayers = cms.InputTag("hltPhase2PixelTracksSeedLayers"),
    trackingRegions = cms.InputTag("hltPhase2PixelTracksAndHighPtStepTrackingRegions"),
    trackingRegionsSeedingLayers = cms.InputTag("")
)


process.hltPhase2PixelTracksHitSeeds = cms.EDProducer("CAHitQuadrupletEDProducer",
    CAHardPtCut = cms.double(0.0),
    CAPhiCut = cms.double(0.2),
    CAThetaCut = cms.double(0.0012),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('LowPtClusterShapeSeedComparitor'),
        clusterShapeCacheSrc = cms.InputTag("hltSiPixelClusterShapeCache"),
        clusterShapeHitFilter = cms.string('ClusterShapeHitFilter')
    ),
    doublets = cms.InputTag("hltPhase2PixelTracksHitDoublets"),
    extraHitRPhitolerance = cms.double(0.032),
    fitFastCircle = cms.bool(True),
    fitFastCircleChi2Cut = cms.bool(True),
    maxChi2 = cms.PSet(
        enabled = cms.bool(True),
        pt1 = cms.double(0.7),
        pt2 = cms.double(2.0),
        value1 = cms.double(200.0),
        value2 = cms.double(50.0)
    ),
    mightGet = cms.optional.untracked.vstring,
    useBendingCorrection = cms.bool(True)
)


process.hltPhase2PixelTracksSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('hltSiPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('hltSiPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring(
        'BPix1+BPix2+BPix3+BPix4',
        'BPix1+BPix2+BPix3+FPix1_pos',
        'BPix1+BPix2+BPix3+FPix1_neg',
        'BPix1+BPix2+FPix1_pos+FPix2_pos',
        'BPix1+BPix2+FPix1_neg+FPix2_neg',
        'BPix1+FPix1_pos+FPix2_pos+FPix3_pos',
        'BPix1+FPix1_neg+FPix2_neg+FPix3_neg',
        'FPix1_pos+FPix2_pos+FPix3_pos+FPix4_pos',
        'FPix1_neg+FPix2_neg+FPix3_neg+FPix4_neg',
        'FPix2_pos+FPix3_pos+FPix4_pos+FPix5_pos',
        'FPix2_neg+FPix3_neg+FPix4_neg+FPix5_neg',
        'FPix3_pos+FPix4_pos+FPix5_pos+FPix6_pos',
        'FPix3_neg+FPix4_neg+FPix5_neg+FPix6_neg',
        'FPix4_pos+FPix5_pos+FPix6_pos+FPix7_pos',
        'FPix4_neg+FPix5_neg+FPix6_neg+FPix7_neg',
        'FPix5_pos+FPix6_pos+FPix7_pos+FPix8_pos',
        'FPix5_neg+FPix6_neg+FPix7_neg+FPix8_neg'
    )
)


process.hltPhase2PixelTracksSoA = cms.EDProducer("CAHitNtupletAlpakaPhase2@alpaka",
    CAThetaCutBarrel = cms.double(0.002),
    CAThetaCutForward = cms.double(0.003),
    CPE = cms.string('PixelCPEFastParamsPhase2'),
    alpaka = cms.untracked.PSet(
        backend = cms.untracked.string('')
    ),
    dcaCutInnerTriplet = cms.double(0.15),
    dcaCutOuterTriplet = cms.double(0.25),
    doClusterCut = cms.bool(True),
    doPtCut = cms.bool(True),
    doSharedHitCut = cms.bool(True),
    doZ0Cut = cms.bool(True),
    dupPassThrough = cms.bool(False),
    earlyFishbone = cms.bool(True),
    fillStatistics = cms.bool(False),
    fitNas4 = cms.bool(False),
    hardCurvCut = cms.double(0.0328407225),
    idealConditions = cms.bool(False),
    includeJumpingForwardDoublets = cms.bool(True),
    lateFishbone = cms.bool(False),
    maxNumberOfDoublets = cms.uint32(2621440),
    minHitsForSharingCut = cms.uint32(10),
    minHitsPerNtuplet = cms.uint32(4),
    phiCuts = cms.vint32(
        522, 522, 522, 626, 730,
        730, 626, 730, 730, 522,
        522, 522, 522, 522, 522,
        522, 522, 522, 522, 522,
        522, 522, 522, 522, 522,
        522, 522, 522, 522, 730,
        730, 730, 730, 730, 730,
        730, 730, 730, 730, 730,
        730, 730, 730, 730, 730,
        730, 730, 522, 522, 522,
        522, 522, 522, 522, 522
    ),
    pixelRecHitSrc = cms.InputTag("hltPhase2SiPixelRecHitsSoA"),
    ptmin = cms.double(0.9),
    trackQualityCuts = cms.PSet(
        maxChi2 = cms.double(5.0),
        maxTip = cms.double(0.3),
        maxZip = cms.double(12.0),
        minPt = cms.double(0.9)
    ),
    useRiemannFit = cms.bool(False),
    useSimpleTripletCleaner = cms.bool(True)
)


process.hltPhase2PixelVertices = cms.EDProducer("PixelVertexProducer",
    Finder = cms.string('DivisiveVertexFinder'),
    Method2 = cms.bool(True),
    NTrkMin = cms.int32(2),
    PVcomparer = cms.PSet(
        refToPSet_ = cms.string('pSetPvClusterComparerForIT')
    ),
    PtMin = cms.double(1.0),
    TrackCollection = cms.InputTag("hltPhase2PixelTracks"),
    UseError = cms.bool(True),
    Verbosity = cms.int32(0),
    WtAverage = cms.bool(True),
    ZOffset = cms.double(5.0),
    ZSeparation = cms.double(0.005),
    beamSpot = cms.InputTag("hltOnlineBeamSpot")
)


process.hltPhase2SiPixelClustersSoA = cms.EDProducer("SiPixelPhase2DigiToCluster@alpaka",
    alpaka = cms.untracked.PSet(
        backend = cms.untracked.string('')
    )
)


process.hltPhase2SiPixelRecHitsSoA = cms.EDProducer("SiPixelRecHitAlpakaPhase2@alpaka",
    CPE = cms.string('PixelCPEFastParamsPhase2'),
    alpaka = cms.untracked.PSet(
        backend = cms.untracked.string('')
    ),
    beamSpot = cms.InputTag("hltPhase2OnlineBeamSpotDevice"),
    mightGet = cms.optional.untracked.vstring,
    src = cms.InputTag("hltPhase2SiPixelClustersSoA")
)


process.hltPhase2TowerMakerForAll = cms.EDProducer("CaloTowersCreator",
    AllowMissingInputs = cms.bool(False),
    EBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBSumThreshold = cms.double(0.2),
    EBThreshold = cms.double(0.07),
    EBWeight = cms.double(1.0),
    EBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EESumThreshold = cms.double(0.45),
    EEThreshold = cms.double(0.3),
    EEWeight = cms.double(1.0),
    EEWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EcalRecHitSeveritiesToBeExcluded = cms.vstring(
        'kTime',
        'kWeird',
        'kBad'
    ),
    EcalSeveritiesToBeUsedInBadTowers = cms.vstring(),
    EcutTower = cms.double(-1000.0),
    HBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HBThreshold = cms.double(0.3),
    HBThreshold1 = cms.double(0.1),
    HBThreshold2 = cms.double(0.2),
    HBWeight = cms.double(1.0),
    HBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HEDGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HEDThreshold = cms.double(0.2),
    HEDThreshold1 = cms.double(0.1),
    HEDWeight = cms.double(1.0),
    HEDWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HESGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HESThreshold = cms.double(0.2),
    HESThreshold1 = cms.double(0.1),
    HESWeight = cms.double(1.0),
    HESWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF1Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF1Threshold = cms.double(0.5),
    HF1Weight = cms.double(1.0),
    HF1Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF2Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF2Threshold = cms.double(0.85),
    HF2Weight = cms.double(1.0),
    HF2Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HOThreshold0 = cms.double(1.1),
    HOThresholdMinus1 = cms.double(3.5),
    HOThresholdMinus2 = cms.double(3.5),
    HOThresholdPlus1 = cms.double(3.5),
    HOThresholdPlus2 = cms.double(3.5),
    HOWeight = cms.double(1.0),
    HOWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HcalAcceptSeverityLevel = cms.uint32(9),
    HcalAcceptSeverityLevelForRejectedHit = cms.uint32(9999),
    HcalPhase = cms.int32(1),
    HcalThreshold = cms.double(-1000.0),
    MomConstrMethod = cms.int32(1),
    MomEBDepth = cms.double(0.3),
    MomEEDepth = cms.double(0.0),
    MomHBDepth = cms.double(0.2),
    MomHEDepth = cms.double(0.4),
    UseEcalRecoveredHits = cms.bool(False),
    UseEtEBTreshold = cms.bool(False),
    UseEtEETreshold = cms.bool(False),
    UseHO = cms.bool(False),
    UseHcalRecoveredHits = cms.bool(True),
    UseRejectedHitsOnly = cms.bool(False),
    UseRejectedRecoveredEcalHits = cms.bool(False),
    UseRejectedRecoveredHcalHits = cms.bool(True),
    UseSymEBTreshold = cms.bool(True),
    UseSymEETreshold = cms.bool(True),
    ecalInputs = cms.VInputTag("hltEcalRecHit:EcalRecHitsEB", "hltEcalRecHit:EcalRecHitsEE"),
    hbheInput = cms.InputTag("hltHbhereco"),
    hfInput = cms.InputTag("hltHfreco"),
    hoInput = cms.InputTag("hltHoreco"),
    missingHcalRescaleFactorForEcal = cms.double(0)
)


process.hltPixelClustersMultiplicity = cms.EDProducer("HLTSiPixelClusterMultiplicityValueProducer",
    defaultValue = cms.double(-1.0),
    mightGet = cms.optional.untracked.vstring,
    src = cms.InputTag("hltSiPixelClusters")
)


process.hltPixelLayerPairsL1Seeded = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('hltSiPixelRecHits'),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelTriplets'),
        skipClusters = cms.InputTag("hltElePixelHitTripletsClusterRemoverL1Seeded")
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('hltSiPixelRecHits'),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelTriplets'),
        skipClusters = cms.InputTag("hltElePixelHitTripletsClusterRemoverL1Seeded")
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring(
        'BPix1+BPix2',
        'BPix1+BPix3',
        'BPix1+BPix4',
        'BPix2+BPix3',
        'BPix2+BPix4',
        'BPix3+BPix4',
        'FPix1_pos+FPix2_pos',
        'FPix1_pos+FPix3_pos',
        'FPix2_pos+FPix3_pos',
        'BPix1+FPix1_pos',
        'BPix1+FPix2_pos',
        'BPix1+FPix3_pos',
        'BPix2+FPix1_pos',
        'BPix2+FPix2_pos',
        'BPix2+FPix3_pos',
        'BPix3+FPix1_pos',
        'BPix3+FPix2_pos',
        'BPix3+FPix3_pos',
        'BPix4+FPix1_pos',
        'BPix4+FPix2_pos',
        'BPix4+FPix3_pos',
        'FPix1_neg+FPix2_neg',
        'FPix1_neg+FPix3_neg',
        'FPix2_neg+FPix3_neg',
        'BPix1+FPix1_neg',
        'BPix1+FPix2_neg',
        'BPix1+FPix3_neg',
        'BPix2+FPix1_neg',
        'BPix2+FPix2_neg',
        'BPix2+FPix3_neg',
        'BPix3+FPix1_neg',
        'BPix3+FPix2_neg',
        'BPix3+FPix3_neg',
        'BPix4+FPix1_neg',
        'BPix4+FPix2_neg',
        'BPix4+FPix3_neg'
    )
)


process.hltPixelLayerPairsUnseeded = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('hltSiPixelRecHits'),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelTriplets'),
        skipClusters = cms.InputTag("hltElePixelHitTripletsClusterRemoverUnseeded")
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('hltSiPixelRecHits'),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelTriplets'),
        skipClusters = cms.InputTag("hltElePixelHitTripletsClusterRemoverUnseeded")
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring(
        'BPix1+BPix2',
        'BPix1+BPix3',
        'BPix1+BPix4',
        'BPix2+BPix3',
        'BPix2+BPix4',
        'BPix3+BPix4',
        'FPix1_pos+FPix2_pos',
        'FPix1_pos+FPix3_pos',
        'FPix2_pos+FPix3_pos',
        'BPix1+FPix1_pos',
        'BPix1+FPix2_pos',
        'BPix1+FPix3_pos',
        'BPix2+FPix1_pos',
        'BPix2+FPix2_pos',
        'BPix2+FPix3_pos',
        'BPix3+FPix1_pos',
        'BPix3+FPix2_pos',
        'BPix3+FPix3_pos',
        'BPix4+FPix1_pos',
        'BPix4+FPix2_pos',
        'BPix4+FPix3_pos',
        'FPix1_neg+FPix2_neg',
        'FPix1_neg+FPix3_neg',
        'FPix2_neg+FPix3_neg',
        'BPix1+FPix1_neg',
        'BPix1+FPix2_neg',
        'BPix1+FPix3_neg',
        'BPix2+FPix1_neg',
        'BPix2+FPix2_neg',
        'BPix2+FPix3_neg',
        'BPix3+FPix1_neg',
        'BPix3+FPix2_neg',
        'BPix3+FPix3_neg',
        'BPix4+FPix1_neg',
        'BPix4+FPix2_neg',
        'BPix4+FPix3_neg'
    )
)


process.hltPixelLayerTriplets = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('hltSiPixelRecHits'),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelTriplets')
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('hltSiPixelRecHits'),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelTriplets')
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring(
        'BPix1+BPix2+BPix3',
        'BPix2+BPix3+BPix4',
        'BPix1+BPix3+BPix4',
        'BPix1+BPix2+BPix4',
        'BPix2+BPix3+FPix1_pos',
        'BPix2+BPix3+FPix1_neg',
        'BPix1+BPix2+FPix1_pos',
        'BPix1+BPix2+FPix1_neg',
        'BPix2+FPix1_pos+FPix2_pos',
        'BPix2+FPix1_neg+FPix2_neg',
        'BPix1+FPix1_pos+FPix2_pos',
        'BPix1+FPix1_neg+FPix2_neg',
        'FPix1_pos+FPix2_pos+FPix3_pos',
        'FPix1_neg+FPix2_neg+FPix3_neg',
        'BPix1+BPix3+FPix1_pos',
        'BPix1+BPix2+FPix2_pos',
        'BPix1+BPix3+FPix1_neg',
        'BPix1+BPix2+FPix2_neg',
        'BPix1+FPix2_neg+FPix3_neg',
        'BPix1+FPix1_neg+FPix3_neg',
        'BPix1+FPix2_pos+FPix3_pos',
        'BPix1+FPix1_pos+FPix3_pos'
    )
)


process.hltPrimaryVertexAssociation = cms.EDProducer("PFCandidatePrimaryVertexSorter",
    assignment = cms.PSet(
        DzCutForChargedFromPUVtxs = cms.double(0.2),
        EtaMinUseDz = cms.double(-1),
        NumOfPUVtxsForCharged = cms.uint32(0),
        OnlyUseFirstDz = cms.bool(False),
        PtMaxCharged = cms.double(-1),
        maxDistanceToJetAxis = cms.double(0.07),
        maxDtSigForPrimaryAssignment = cms.double(3.0),
        maxDxyForJetAxisAssigment = cms.double(0.1),
        maxDxyForNotReconstructedPrimary = cms.double(0.01),
        maxDxySigForNotReconstructedPrimary = cms.double(2),
        maxDzErrorForPrimaryAssignment = cms.double(0.05),
        maxDzForJetAxisAssigment = cms.double(0.1),
        maxDzForPrimaryAssignment = cms.double(0.1),
        maxDzSigForPrimaryAssignment = cms.double(5.0),
        maxJetDeltaR = cms.double(0.5),
        minJetPt = cms.double(25),
        preferHighRanked = cms.bool(False),
        useTiming = cms.bool(False),
        useVertexFit = cms.bool(True)
    ),
    jets = cms.InputTag("hltAK4PFPuppiJets"),
    particles = cms.InputTag("hltParticleFlowTmp"),
    produceAssociationToOriginalVertices = cms.bool(True),
    produceNoPileUpCollection = cms.bool(False),
    producePileUpCollection = cms.bool(False),
    produceSortedVertices = cms.bool(False),
    qualityForPrimary = cms.int32(2),
    sorting = cms.PSet(

    ),
    usePVMET = cms.bool(True),
    vertices = cms.InputTag("hltOfflinePrimaryVertices")
)


process.hltPrimaryVertexAssociationModEta2p4 = cms.EDProducer("PFCandidatePrimaryVertexSorter",
    assignment = cms.PSet(
        DzCutForChargedFromPUVtxs = cms.double(0.2),
        EtaMinUseDz = cms.double(-1),
        NumOfPUVtxsForCharged = cms.uint32(0),
        OnlyUseFirstDz = cms.bool(False),
        PtMaxCharged = cms.double(-1),
        maxDistanceToJetAxis = cms.double(0.07),
        maxDtSigForPrimaryAssignment = cms.double(3.0),
        maxDxyForJetAxisAssigment = cms.double(0.1),
        maxDxyForNotReconstructedPrimary = cms.double(0.01),
        maxDxySigForNotReconstructedPrimary = cms.double(2),
        maxDzErrorForPrimaryAssignment = cms.double(0.05),
        maxDzForJetAxisAssigment = cms.double(0.1),
        maxDzForPrimaryAssignment = cms.double(0.1),
        maxDzSigForPrimaryAssignment = cms.double(5.0),
        maxJetDeltaR = cms.double(0.5),
        minJetPt = cms.double(25),
        preferHighRanked = cms.bool(False),
        useTiming = cms.bool(False),
        useVertexFit = cms.bool(True)
    ),
    jets = cms.InputTag("hltPFPuppiJetForBtagEta2p4"),
    particles = cms.InputTag("hltParticleFlowTmp"),
    produceAssociationToOriginalVertices = cms.bool(True),
    produceNoPileUpCollection = cms.bool(False),
    producePileUpCollection = cms.bool(False),
    produceSortedVertices = cms.bool(False),
    qualityForPrimary = cms.int32(2),
    sorting = cms.PSet(

    ),
    usePVMET = cms.bool(True),
    vertices = cms.InputTag("hltOfflinePrimaryVertices")
)


process.hltRechitInRegionsECAL = cms.EDProducer("HLTEcalRecHitsInRegionsProducer",
    etaPhiRegions = cms.VPSet(cms.PSet(
        inputColl = cms.InputTag("hltL1TEGammaFilteredCollectionProducer"),
        maxDEta = cms.double(0.0),
        maxDPhi = cms.double(0.0),
        maxDeltaR = cms.double(0.35),
        maxEt = cms.double(999999.0),
        minEt = cms.double(5.0),
        type = cms.string('L1P2GTCandidate')
    )),
    inputCollTags = cms.VInputTag("hltEcalRecHitL1Seeded:EcalRecHitsEB", "hltEcalRecHitL1Seeded:EcalRecHitsEE"),
    outputProductNames = cms.vstring(
        'EcalRecHitsEB',
        'EcalRecHitsEE'
    )
)


process.hltRechitInRegionsHGCAL = cms.EDProducer("HLTHGCalRecHitsInRegionsProducer",
    etaPhiRegions = cms.VPSet(cms.PSet(
        inputColl = cms.InputTag("hltL1TEGammaHGCFilteredCollectionProducer"),
        maxDEta = cms.double(0.0),
        maxDPhi = cms.double(0.0),
        maxDeltaR = cms.double(0.35),
        maxEt = cms.double(999999.0),
        minEt = cms.double(5.0),
        type = cms.string('L1P2GTCandidate')
    )),
    inputCollTags = cms.VInputTag("hltHGCalRecHitL1Seeded:HGCEERecHits", "hltHGCalRecHitL1Seeded:HGCHEBRecHits", "hltHGCalRecHitL1Seeded:HGCHEFRecHits"),
    outputProductNames = cms.vstring(
        'HGCEERecHits',
        'HGCHEBRecHits',
        'HGCHEFRecHits'
    )
)


process.hltRpcRecHits = cms.EDProducer("RPCRecHitProducer",
    deadSource = cms.string('File'),
    deadvecfile = cms.FileInPath('RecoLocalMuon/RPCRecHit/data/RPCDeadVec.dat'),
    maskSource = cms.string('File'),
    maskvecfile = cms.FileInPath('RecoLocalMuon/RPCRecHit/data/RPCMaskVec.dat'),
    recAlgo = cms.string('RPCRecHitStandardAlgo'),
    recAlgoConfig = cms.PSet(

    ),
    rpcDigiLabel = cms.InputTag("simMuonRPCDigis")
)


process.hltSiPhase2Clusters = cms.EDProducer("Phase2TrackerClusterizer",
    maxClusterSize = cms.uint32(0),
    maxNumberClusters = cms.uint32(0),
    src = cms.InputTag("mix","Tracker")
)


process.hltSiPixelClusterShapeCache = cms.EDProducer("SiPixelClusterShapeCacheProducer",
    mightGet = cms.optional.untracked.vstring,
    onDemand = cms.bool(False),
    src = cms.InputTag("hltSiPixelClusters")
)


process.hltSiPixelClusters = cms.EDProducer("SiPixelDigisClustersFromSoAAlpakaPhase2",
    clusterThreshold_layer1 = cms.int32(4000),
    clusterThreshold_otherLayers = cms.int32(4000),
    produceDigis = cms.bool(False),
    src = cms.InputTag("hltPhase2SiPixelClustersSoA"),
    storeDigis = cms.bool(False)
)


process.hltSiPixelRecHits = cms.EDProducer("SiPixelRecHitFromSoAAlpakaPhase2",
    pixelRecHitSrc = cms.InputTag("hltPhase2SiPixelRecHitsSoA"),
    src = cms.InputTag("hltSiPixelClusters")
)


process.hltTPClusterProducer = cms.EDProducer("ClusterTPAssociationProducer",
    mightGet = cms.optional.untracked.vstring,
    phase2OTClusterSrc = cms.InputTag("hltSiPhase2Clusters"),
    phase2OTSimLinkSrc = cms.InputTag("simSiPixelDigis","Tracker"),
    pixelClusterSrc = cms.InputTag("hltSiPixelClusters"),
    pixelSimLinkSrc = cms.InputTag("simSiPixelDigis","Pixel"),
    simTrackSrc = cms.InputTag("g4SimHits"),
    stripClusterSrc = cms.InputTag("siStripClusters"),
    stripSimLinkSrc = cms.InputTag("simSiStripDigis"),
    throwOnMissingCollections = cms.bool(True),
    trackingParticleSrc = cms.InputTag("mix","MergedTrackTruth")
)


process.hltTauPFJets08Region = cms.EDProducer("RecoTauJetRegionProducer",
    deltaR = cms.double(0.8),
    maxJetAbsEta = cms.double(99.0),
    minJetPt = cms.double(-1.0),
    pfCandAssocMapSrc = cms.InputTag(""),
    pfCandSrc = cms.InputTag("hltParticleFlowTmp"),
    src = cms.InputTag("hltAK4PFJets"),
    verbosity = cms.int32(0)
)


process.hltTiclCandidate = cms.EDProducer("TICLCandidateProducer",
    cutTk = cms.string('1.48 < abs(eta) < 3.0 && pt > 1. && quality("highPurity") && hitPattern().numberOfLostHits("MISSING_OUTER_HITS") < 5'),
    detector = cms.string('HGCAL'),
    egamma_tracksterlinks_collections = cms.VInputTag("hltTiclTracksterLinks"),
    egamma_tracksters_collections = cms.VInputTag("hltTiclTracksterLinks"),
    general_tracksterlinks_collections = cms.VInputTag("hltTiclTracksterLinks"),
    general_tracksters_collections = cms.VInputTag("hltTiclTracksterLinks"),
    interpretationDescPSet = cms.PSet(
        algo_verbosity = cms.int32(0),
        cutTk = cms.string('1.48 < abs(eta) < 3.0 && pt > 1. && quality("highPurity") && hitPattern().numberOfLostHits("MISSING_OUTER_HITS") < 5'),
        delta_tk_ts_interface = cms.double(0.03),
        delta_tk_ts_layer1 = cms.double(0.02),
        timing_quality_threshold = cms.double(0.5),
        type = cms.string('General')
    ),
    layer_clusters = cms.InputTag("hltHgcalMergeLayerClusters"),
    layer_clustersTime = cms.InputTag("hltHgcalMergeLayerClusters","timeLayerCluster"),
    mightGet = cms.optional.untracked.vstring,
    muons = cms.InputTag("hltPhase2L3Muons"),
    original_masks = cms.VInputTag("hltHgcalMergeLayerClusters:InitialLayerClustersMask"),
    propagator = cms.string('PropagatorWithMaterial'),
    timingQualityThreshold = cms.double(0.5),
    timingSoA = cms.InputTag("mtdSoA"),
    tracks = cms.InputTag("hltGeneralTracks"),
    useMTDTiming = cms.bool(False),
    useTimingAverage = cms.bool(False)
)


process.hltTiclLayerTileProducer = cms.EDProducer("TICLLayerTileProducer",
    detector = cms.string('HGCAL'),
    layer_HFNose_clusters = cms.InputTag("hgcalLayerClustersHFNose"),
    layer_clusters = cms.InputTag("hltHgcalMergeLayerClusters"),
    mightGet = cms.optional.untracked.vstring
)


process.hltTiclLayerTileProducerL1Seeded = cms.EDProducer("TICLLayerTileProducer",
    detector = cms.string('HGCAL'),
    layer_HFNose_clusters = cms.InputTag("hgcalLayerClustersHFNose"),
    layer_clusters = cms.InputTag("hltHgcalMergeLayerClustersL1Seeded"),
    mightGet = cms.optional.untracked.vstring
)


process.hltTiclSeedingGlobal = cms.EDProducer("TICLSeedingRegionProducer",
    mightGet = cms.optional.untracked.vstring,
    seedingPSet = cms.PSet(
        algo_verbosity = cms.int32(0),
        type = cms.string('SeedingRegionGlobal')
    )
)


process.hltTiclSeedingL1 = cms.EDProducer("TICLSeedingRegionProducer",
    seedingPSet = cms.PSet(
        algo_verbosity = cms.int32(0),
        applyQuality = cms.bool(True),
        l1GTCandColl = cms.InputTag("l1tGTProducer","CL2Photons"),
        maxAbsEta = cms.double(4.0),
        minAbsEta = cms.double(1.3),
        minPt = cms.double(5.0),
        quality = cms.int32(4),
        qualityIsMask = cms.bool(True),
        type = cms.string('SeedingRegionByL1')
    )
)


process.hltTiclTracksterLinks = cms.EDProducer("TracksterLinksProducer",
    detector = cms.string('HGCAL'),
    eid_input_name = cms.string('input'),
    eid_min_cluster_energy = cms.double(2.5),
    eid_n_clusters = cms.int32(10),
    eid_n_layers = cms.int32(50),
    eid_output_name_energy = cms.string('output/regressed_energy'),
    eid_output_name_id = cms.string('output/id_probabilities'),
    layer_clusters = cms.InputTag("hltHgcalMergeLayerClusters"),
    layer_clustersTime = cms.InputTag("hltHgcalMergeLayerClusters","timeLayerCluster"),
    linkingPSet = cms.PSet(
        algo_verbosity = cms.int32(0),
        cylinder_radius_sqr = cms.vdouble(9, 9),
        dot_prod_th = cms.double(0.97),
        max_distance_projective_sqr = cms.vdouble(60, 60),
        max_distance_projective_sqr_closest_points = cms.vdouble(60, 60),
        max_z_distance_closest_points = cms.vdouble(35, 35),
        min_distance_z = cms.vdouble(30, 30),
        min_num_lcs = cms.uint32(7),
        min_trackster_energy = cms.double(10),
        pca_quality_th = cms.double(0.85),
        track_time_quality_threshold = cms.double(0.5),
        type = cms.string('Skeletons'),
        wind = cms.double(0.036)
    ),
    mightGet = cms.optional.untracked.vstring,
    original_masks = cms.VInputTag("hltHgcalMergeLayerClusters:InitialLayerClustersMask"),
    propagator = cms.string('PropagatorWithMaterial'),
    regressionAndPid = cms.bool(True),
    tfDnnLabel = cms.string('tracksterSelectionTf'),
    tracksters_collections = cms.VInputTag("hltTiclTrackstersCLUE3DHigh", "hltTiclTrackstersPassthrough")
)


process.hltTiclTrackstersCLUE3DHigh = cms.EDProducer("TrackstersProducer",
    detector = cms.string('HGCAL'),
    filtered_mask = cms.InputTag("hltFilteredLayerClustersCLUE3DHigh","CLUE3DHigh"),
    itername = cms.string('CLUE3DHigh'),
    layer_clusters = cms.InputTag("hltHgcalMergeLayerClusters"),
    layer_clusters_hfnose_tiles = cms.InputTag("ticlLayerTileHFNose"),
    layer_clusters_tiles = cms.InputTag("hltTiclLayerTileProducer"),
    mightGet = cms.optional.untracked.vstring,
    original_mask = cms.InputTag("hltHgcalMergeLayerClusters","InitialLayerClustersMask"),
    patternRecognitionBy = cms.string('CLUE3D'),
    pluginPatternRecognitionByCA = cms.PSet(
        algo_verbosity = cms.int32(0),
        eid_input_name = cms.string('input'),
        eid_min_cluster_energy = cms.double(1),
        eid_n_clusters = cms.int32(10),
        eid_n_layers = cms.int32(50),
        eid_output_name_energy = cms.string('output/regressed_energy'),
        eid_output_name_id = cms.string('output/id_probabilities'),
        energy_em_over_total_threshold = cms.double(-1),
        etaLimitIncreaseWindow = cms.double(2.1),
        filter_on_categories = cms.vint32(0),
        max_delta_time = cms.double(3),
        max_longitudinal_sigmaPCA = cms.double(9999),
        max_missing_layers_in_trackster = cms.int32(9999),
        max_out_in_hops = cms.int32(10),
        min_cos_pointing = cms.double(-1),
        min_cos_theta = cms.double(0.915),
        min_layers_per_trackster = cms.int32(10),
        oneTracksterPerTrackSeed = cms.bool(False),
        out_in_dfs = cms.bool(True),
        pid_threshold = cms.double(0),
        promoteEmptyRegionToTrackster = cms.bool(False),
        root_doublet_max_distance_from_seed_squared = cms.double(9999),
        shower_start_max_layer = cms.int32(9999),
        siblings_maxRSquared = cms.vdouble(0.0006, 0.0006, 0.0006),
        skip_layers = cms.int32(0),
        type = cms.string('CA')
    ),
    pluginPatternRecognitionByCLUE3D = cms.PSet(
        algo_verbosity = cms.int32(0),
        computeLocalTime = cms.bool(False),
        criticalDensity = cms.vdouble(0.6, 0.6, 0.6),
        criticalEtaPhiDistance = cms.vdouble(0.025, 0.025, 0.025),
        criticalSelfDensity = cms.vdouble(0.15, 0.15, 0.15),
        criticalXYDistance = cms.vdouble(1.8, 1.8, 1.8),
        criticalZDistanceLyr = cms.vint32(5, 5, 5),
        cutHadProb = cms.double(999.0),
        densityEtaPhiDistanceSqr = cms.vdouble(0.0008, 0.0008, 0.0008),
        densityOnSameLayer = cms.bool(False),
        densitySiblingLayers = cms.vint32(3, 3, 3),
        densityXYDistanceSqr = cms.vdouble(3.24, 3.24, 3.24),
        doPidCut = cms.bool(True),
        eid_input_name = cms.string('input'),
        eid_min_cluster_energy = cms.double(1),
        eid_n_clusters = cms.int32(10),
        eid_n_layers = cms.int32(50),
        eid_output_name_energy = cms.string('output/regressed_energy'),
        eid_output_name_id = cms.string('output/id_probabilities'),
        kernelDensityFactor = cms.vdouble(0.2, 0.2, 0.2),
        minNumLayerCluster = cms.vint32(2, 2, 2),
        nearestHigherOnSameLayer = cms.bool(False),
        outlierMultiplier = cms.vdouble(2, 2, 2),
        rescaleDensityByZ = cms.bool(False),
        type = cms.string('CLUE3D'),
        useAbsoluteProjectiveScale = cms.bool(True),
        useClusterDimensionXY = cms.bool(False)
    ),
    pluginPatternRecognitionByFastJet = cms.PSet(
        algo_verbosity = cms.int32(0),
        antikt_radius = cms.double(0.09),
        eid_input_name = cms.string('input'),
        eid_min_cluster_energy = cms.double(1),
        eid_n_clusters = cms.int32(10),
        eid_n_layers = cms.int32(50),
        eid_output_name_energy = cms.string('output/regressed_energy'),
        eid_output_name_id = cms.string('output/id_probabilities'),
        minNumLayerCluster = cms.int32(5),
        type = cms.string('FastJet')
    ),
    seeding_regions = cms.InputTag("hltTiclSeedingGlobal"),
    tfDnnLabel = cms.string('tracksterSelectionTf'),
    time_layerclusters = cms.InputTag("hltHgcalMergeLayerClusters","timeLayerCluster")
)


process.hltTiclTrackstersCLUE3DHighL1Seeded = cms.EDProducer("TrackstersProducer",
    detector = cms.string('HGCAL'),
    filtered_mask = cms.InputTag("hltFilteredLayerClustersCLUE3DHighL1Seeded","CLUE3DHigh"),
    itername = cms.string('CLUE3DHigh'),
    layer_clusters = cms.InputTag("hltHgcalMergeLayerClustersL1Seeded"),
    layer_clusters_hfnose_tiles = cms.InputTag("ticlLayerTileHFNose"),
    layer_clusters_tiles = cms.InputTag("hltTiclLayerTileProducerL1Seeded"),
    mightGet = cms.optional.untracked.vstring,
    original_mask = cms.InputTag("hltHgcalMergeLayerClustersL1Seeded","InitialLayerClustersMask"),
    patternRecognitionBy = cms.string('CLUE3D'),
    pluginPatternRecognitionByCA = cms.PSet(
        algo_verbosity = cms.int32(0),
        eid_input_name = cms.string('input'),
        eid_min_cluster_energy = cms.double(1),
        eid_n_clusters = cms.int32(10),
        eid_n_layers = cms.int32(50),
        eid_output_name_energy = cms.string('output/regressed_energy'),
        eid_output_name_id = cms.string('output/id_probabilities'),
        energy_em_over_total_threshold = cms.double(-1),
        etaLimitIncreaseWindow = cms.double(2.1),
        filter_on_categories = cms.vint32(0),
        max_delta_time = cms.double(3),
        max_longitudinal_sigmaPCA = cms.double(9999),
        max_missing_layers_in_trackster = cms.int32(9999),
        max_out_in_hops = cms.int32(10),
        min_cos_pointing = cms.double(-1),
        min_cos_theta = cms.double(0.915),
        min_layers_per_trackster = cms.int32(10),
        oneTracksterPerTrackSeed = cms.bool(False),
        out_in_dfs = cms.bool(True),
        pid_threshold = cms.double(0),
        promoteEmptyRegionToTrackster = cms.bool(False),
        root_doublet_max_distance_from_seed_squared = cms.double(9999),
        shower_start_max_layer = cms.int32(9999),
        siblings_maxRSquared = cms.vdouble(0.0006, 0.0006, 0.0006),
        skip_layers = cms.int32(0),
        type = cms.string('CA')
    ),
    pluginPatternRecognitionByCLUE3D = cms.PSet(
        algo_verbosity = cms.int32(0),
        computeLocalTime = cms.bool(False),
        criticalDensity = cms.vdouble(0.6, 0.6, 0.6),
        criticalEtaPhiDistance = cms.vdouble(0.025, 0.025, 0.025),
        criticalSelfDensity = cms.vdouble(0.15, 0.15, 0.15),
        criticalXYDistance = cms.vdouble(1.8, 1.8, 1.8),
        criticalZDistanceLyr = cms.vint32(5, 5, 5),
        cutHadProb = cms.double(999.0),
        densityEtaPhiDistanceSqr = cms.vdouble(0.0008, 0.0008, 0.0008),
        densityOnSameLayer = cms.bool(False),
        densitySiblingLayers = cms.vint32(3, 3, 3),
        densityXYDistanceSqr = cms.vdouble(3.24, 3.24, 3.24),
        doPidCut = cms.bool(True),
        eid_input_name = cms.string('input'),
        eid_min_cluster_energy = cms.double(1),
        eid_n_clusters = cms.int32(10),
        eid_n_layers = cms.int32(50),
        eid_output_name_energy = cms.string('output/regressed_energy'),
        eid_output_name_id = cms.string('output/id_probabilities'),
        kernelDensityFactor = cms.vdouble(0.2, 0.2, 0.2),
        minNumLayerCluster = cms.vint32(2, 2, 2),
        nearestHigherOnSameLayer = cms.bool(False),
        outlierMultiplier = cms.vdouble(2, 2, 2),
        rescaleDensityByZ = cms.bool(False),
        type = cms.string('CLUE3D'),
        useAbsoluteProjectiveScale = cms.bool(True),
        useClusterDimensionXY = cms.bool(False)
    ),
    pluginPatternRecognitionByFastJet = cms.PSet(
        algo_verbosity = cms.int32(0),
        antikt_radius = cms.double(0.09),
        eid_input_name = cms.string('input'),
        eid_min_cluster_energy = cms.double(1),
        eid_n_clusters = cms.int32(10),
        eid_n_layers = cms.int32(50),
        eid_output_name_energy = cms.string('output/regressed_energy'),
        eid_output_name_id = cms.string('output/id_probabilities'),
        minNumLayerCluster = cms.int32(5),
        type = cms.string('FastJet')
    ),
    seeding_regions = cms.InputTag("hltTiclSeedingL1"),
    tfDnnLabel = cms.string('tracksterSelectionTf'),
    time_layerclusters = cms.InputTag("hltHgcalMergeLayerClustersL1Seeded","timeLayerCluster")
)


process.hltTiclTrackstersMerge = cms.EDProducer("TrackstersMergeProducer",
    cosangle_align = cms.double(0.9945),
    detector = cms.string('HGCAL'),
    e_over_h_threshold = cms.double(1),
    eid_input_name = cms.string('input'),
    eid_min_cluster_energy = cms.double(2.5),
    eid_n_clusters = cms.int32(10),
    eid_n_layers = cms.int32(50),
    eid_output_name_energy = cms.string('output/regressed_energy'),
    eid_output_name_id = cms.string('output/id_probabilities'),
    eta_bin_window = cms.int32(1),
    halo_max_distance2 = cms.double(4),
    layer_clusters = cms.InputTag("hltHgcalMergeLayerClusters"),
    layer_clustersTime = cms.InputTag("hltHgcalMergeLayerClusters","timeLayerCluster"),
    linkingPSet = cms.PSet(
        algo_verbosity = cms.int32(0),
        cutTk = cms.string('1.48 < abs(eta) < 3.0 && pt > 1. && quality("highPurity") && hitPattern().numberOfLostHits("MISSING_OUTER_HITS") < 5'),
        delta_tk_ts_interface = cms.double(0.03),
        delta_tk_ts_layer1 = cms.double(0.02),
        delta_ts_em_had = cms.double(0.03),
        delta_ts_had_had = cms.double(0.03),
        track_time_quality_threshold = cms.double(0.5),
        type = cms.string('LinkingAlgoByDirectionGeometric')
    ),
    mightGet = cms.optional.untracked.vstring,
    muons = cms.InputTag("hltPhase2L3Muons"),
    optimiseAcrossTracksters = cms.bool(True),
    phi_bin_window = cms.int32(1),
    propagator = cms.string('PropagatorWithMaterial'),
    pt_neutral_threshold = cms.double(2),
    pt_sigma_high = cms.double(2),
    pt_sigma_low = cms.double(2),
    resol_calo_offset_em = cms.double(1.5),
    resol_calo_offset_had = cms.double(1.5),
    resol_calo_scale_em = cms.double(0.15),
    resol_calo_scale_had = cms.double(0.15),
    tfDnnLabel = cms.string('tracksterSelectionTf'),
    track_max_eta = cms.double(3),
    track_max_missing_outerhits = cms.int32(5),
    track_min_eta = cms.double(1.48),
    track_min_pt = cms.double(1),
    tracks = cms.InputTag("hltGeneralTracks"),
    tracksTime = cms.InputTag("tofPID","t0"),
    tracksTimeErr = cms.InputTag("tofPID","sigmat0"),
    tracksTimeQual = cms.InputTag("mtdTrackQualityMVA","mtdQualMVA"),
    trackstersclue3d = cms.InputTag("hltTiclTrackstersCLUE3DHigh"),
    useMTDTiming = cms.bool(False)
)


process.hltTiclTrackstersPassthrough = cms.EDProducer("TrackstersProducer",
    detector = cms.string('HGCAL'),
    filtered_mask = cms.InputTag("hltFilteredLayerClustersPassthrough","Passthrough"),
    itername = cms.string('PassThrough'),
    layer_clusters = cms.InputTag("hltHgcalMergeLayerClusters"),
    layer_clusters_hfnose_tiles = cms.InputTag("ticlLayerTileHFNose"),
    layer_clusters_tiles = cms.InputTag("hltTiclLayerTileProducer"),
    mightGet = cms.optional.untracked.vstring,
    original_mask = cms.InputTag("hltTiclTrackstersCLUE3DHigh"),
    patternRecognitionBy = cms.string('Passthrough'),
    pluginPatternRecognitionByCA = cms.PSet(
        algo_verbosity = cms.int32(0),
        computeLocalTime = cms.bool(True),
        eid_input_name = cms.string('input'),
        eid_min_cluster_energy = cms.double(1),
        eid_n_clusters = cms.int32(10),
        eid_n_layers = cms.int32(50),
        eid_output_name_energy = cms.string('output/regressed_energy'),
        eid_output_name_id = cms.string('output/id_probabilities'),
        energy_em_over_total_threshold = cms.double(-1),
        etaLimitIncreaseWindow = cms.double(2.1),
        filter_on_categories = cms.vint32(0),
        max_delta_time = cms.double(3),
        max_longitudinal_sigmaPCA = cms.double(9999),
        max_missing_layers_in_trackster = cms.int32(9999),
        max_out_in_hops = cms.int32(10),
        min_cos_pointing = cms.double(-1),
        min_cos_theta = cms.double(0.915),
        min_layers_per_trackster = cms.int32(10),
        oneTracksterPerTrackSeed = cms.bool(False),
        out_in_dfs = cms.bool(True),
        pid_threshold = cms.double(0),
        promoteEmptyRegionToTrackster = cms.bool(False),
        root_doublet_max_distance_from_seed_squared = cms.double(9999),
        shower_start_max_layer = cms.int32(9999),
        siblings_maxRSquared = cms.vdouble(0.0006, 0.0006, 0.0006),
        skip_layers = cms.int32(0),
        type = cms.string('CA')
    ),
    pluginPatternRecognitionByCLUE3D = cms.PSet(
        algo_verbosity = cms.int32(0),
        computeLocalTime = cms.bool(True),
        criticalDensity = cms.vdouble(4, 4, 4),
        criticalEtaPhiDistance = cms.vdouble(0.025, 0.025, 0.025),
        criticalSelfDensity = cms.vdouble(0.15, 0.15, 0.15),
        criticalXYDistance = cms.vdouble(1.8, 1.8, 1.8),
        criticalZDistanceLyr = cms.vint32(5, 5, 5),
        cutHadProb = cms.double(0.5),
        densityEtaPhiDistanceSqr = cms.vdouble(0.0008, 0.0008, 0.0008),
        densityOnSameLayer = cms.bool(False),
        densitySiblingLayers = cms.vint32(3, 3, 3),
        densityXYDistanceSqr = cms.vdouble(3.24, 3.24, 3.24),
        doPidCut = cms.bool(False),
        eid_input_name = cms.string('input'),
        eid_min_cluster_energy = cms.double(1),
        eid_n_clusters = cms.int32(10),
        eid_n_layers = cms.int32(50),
        eid_output_name_energy = cms.string('output/regressed_energy'),
        eid_output_name_id = cms.string('output/id_probabilities'),
        kernelDensityFactor = cms.vdouble(0.2, 0.2, 0.2),
        minNumLayerCluster = cms.vint32(2, 2, 2),
        nearestHigherOnSameLayer = cms.bool(False),
        outlierMultiplier = cms.vdouble(2, 2, 2),
        rescaleDensityByZ = cms.bool(False),
        type = cms.string('CLUE3D'),
        useAbsoluteProjectiveScale = cms.bool(True),
        useClusterDimensionXY = cms.bool(False)
    ),
    pluginPatternRecognitionByFastJet = cms.PSet(
        algo_verbosity = cms.int32(0),
        antikt_radius = cms.double(0.09),
        computeLocalTime = cms.bool(True),
        eid_input_name = cms.string('input'),
        eid_min_cluster_energy = cms.double(1),
        eid_n_clusters = cms.int32(10),
        eid_n_layers = cms.int32(50),
        eid_output_name_energy = cms.string('output/regressed_energy'),
        eid_output_name_id = cms.string('output/id_probabilities'),
        minNumLayerCluster = cms.int32(5),
        type = cms.string('FastJet')
    ),
    pluginPatternRecognitionByPassthrough = cms.PSet(
        algo_verbosity = cms.int32(0),
        type = cms.string('Passthrough')
    ),
    seeding_regions = cms.InputTag("hltTiclSeedingGlobal"),
    tfDnnLabel = cms.string('tracksterSelectionTf'),
    time_layerclusters = cms.InputTag("hltHgcalMergeLayerClusters","timeLayerCluster")
)


process.hltTowerMaker = cms.EDProducer("CaloTowersCreator",
    AllowMissingInputs = cms.bool(False),
    EBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBSumThreshold = cms.double(0.2),
    EBThreshold = cms.double(0.07),
    EBWeight = cms.double(1.0),
    EBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EESumThreshold = cms.double(0.45),
    EEThreshold = cms.double(0.3),
    EEWeight = cms.double(1.0),
    EEWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EcalRecHitSeveritiesToBeExcluded = cms.vstring(
        'kTime',
        'kWeird',
        'kBad'
    ),
    EcalSeveritiesToBeUsedInBadTowers = cms.vstring(),
    EcutTower = cms.double(-1000.0),
    HBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HBThreshold = cms.double(1.2),
    HBThreshold1 = cms.double(0.8),
    HBThreshold2 = cms.double(1.2),
    HBWeight = cms.double(1.0),
    HBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HEDGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HEDThreshold = cms.double(0.2),
    HEDThreshold1 = cms.double(0.1),
    HEDWeight = cms.double(1.0),
    HEDWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HESGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HESThreshold = cms.double(0.2),
    HESThreshold1 = cms.double(0.1),
    HESWeight = cms.double(1.0),
    HESWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF1Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF1Threshold = cms.double(0.5),
    HF1Weight = cms.double(1.0),
    HF1Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF2Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF2Threshold = cms.double(0.85),
    HF2Weight = cms.double(1.0),
    HF2Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HOThreshold0 = cms.double(1.1),
    HOThresholdMinus1 = cms.double(3.5),
    HOThresholdMinus2 = cms.double(3.5),
    HOThresholdPlus1 = cms.double(3.5),
    HOThresholdPlus2 = cms.double(3.5),
    HOWeight = cms.double(1.0),
    HOWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HcalAcceptSeverityLevel = cms.uint32(9),
    HcalAcceptSeverityLevelForRejectedHit = cms.uint32(9999),
    HcalPhase = cms.int32(1),
    HcalThreshold = cms.double(-1000.0),
    MomConstrMethod = cms.int32(1),
    MomEBDepth = cms.double(0.3),
    MomEEDepth = cms.double(0.0),
    MomHBDepth = cms.double(0.2),
    MomHEDepth = cms.double(0.4),
    UseEcalRecoveredHits = cms.bool(False),
    UseEtEBTreshold = cms.bool(False),
    UseEtEETreshold = cms.bool(False),
    UseHO = cms.bool(False),
    UseHcalRecoveredHits = cms.bool(True),
    UseRejectedHitsOnly = cms.bool(False),
    UseRejectedRecoveredEcalHits = cms.bool(False),
    UseRejectedRecoveredHcalHits = cms.bool(True),
    UseSymEBTreshold = cms.bool(True),
    UseSymEETreshold = cms.bool(True),
    ecalInputs = cms.VInputTag(cms.InputTag("hltEcalRecHit","EcalRecHitsEB"), cms.InputTag("hltEcalRecHit","EcalRecHitsEE")),
    hbheInput = cms.InputTag("hltHbhereco"),
    hfInput = cms.InputTag("hltHfreco"),
    hoInput = cms.InputTag("hltHoreco"),
    missingHcalRescaleFactorForEcal = cms.double(0)
)


process.hltTrackAssociatorByHits = cms.EDProducer("QuickTrackAssociatorByHitsProducer",
    AbsoluteNumberOfHits = cms.bool(False),
    Cut_RecoToSim = cms.double(0.75),
    PixelHitWeight = cms.double(1.0),
    Purity_SimToReco = cms.double(0.75),
    Quality_SimToReco = cms.double(0.5),
    SimToRecoDenominator = cms.string('reco'),
    ThreeHitTracksAreSpecial = cms.bool(False),
    UseGrouped = cms.bool(False),
    UseSplitting = cms.bool(False),
    cluster2TPSrc = cms.InputTag("hltTPClusterProducer"),
    useClusterTPAssociation = cms.bool(True)
)


process.hltTrackRefsForJetsBeforeSorting = cms.EDProducer("ChargedRefCandidateProducer",
    particleType = cms.string('pi+'),
    src = cms.InputTag("hltTrackWithVertexRefSelectorBeforeSorting")
)


process.hltTrackWithVertexRefSelectorBeforeSorting = cms.EDProducer("TrackWithVertexRefSelector",
    copyExtras = cms.untracked.bool(False),
    copyTrajectories = cms.untracked.bool(False),
    d0Max = cms.double(999.0),
    dzMax = cms.double(999.0),
    etaMax = cms.double(5.0),
    etaMin = cms.double(0.0),
    nSigmaDtVertex = cms.double(0),
    nVertices = cms.uint32(0),
    normalizedChi2 = cms.double(999999.0),
    numberOfLostHits = cms.uint32(999),
    numberOfValidHits = cms.uint32(0),
    numberOfValidPixelHits = cms.uint32(0),
    ptErrorCut = cms.double(9e+99),
    ptMax = cms.double(9e+99),
    ptMin = cms.double(0.9),
    quality = cms.string('highPurity'),
    rhoVtx = cms.double(0.2),
    src = cms.InputTag("hltGeneralTracks"),
    timeResosTag = cms.InputTag(""),
    timesTag = cms.InputTag(""),
    useVtx = cms.bool(True),
    vertexTag = cms.InputTag("hltUnsortedOfflinePrimaryVertices"),
    vtxFallback = cms.bool(True),
    zetaVtx = cms.double(1.0)
)


process.hltTrackerClusterCheck = cms.EDProducer("ClusterCheckerEDProducer",
    ClusterCollectionLabel = cms.InputTag("siStripClusters"),
    MaxNumberOfPixelClusters = cms.uint32(40000),
    MaxNumberOfStripClusters = cms.uint32(400000),
    PixelClusterCollectionLabel = cms.InputTag("hltSiPixelClusters"),
    cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
    doClusterCheck = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    silentClusterCheck = cms.untracked.bool(False)
)


process.hltTriggerSummaryAOD = cms.EDProducer("TriggerSummaryProducerAOD",
    moduleLabelPatternsToMatch = cms.vstring(
        'hlt*',
        'l1t*'
    ),
    moduleLabelPatternsToSkip = cms.vstring(),
    processName = cms.string('*'),
    throw = cms.bool(False)
)


process.hltTriggerSummaryRAW = cms.EDProducer("TriggerSummaryProducerRAW",
    processName = cms.string('@')
)


process.hltUnsortedOfflinePrimaryVertices = cms.EDProducer("PrimaryVertexProducer",
    TkClusParameters = cms.PSet(
        TkDAClusParameters = cms.PSet(
            Tmin = cms.double(2.0),
            Tpurge = cms.double(2.0),
            Tstop = cms.double(0.5),
            coolingFactor = cms.double(0.6),
            d0CutOff = cms.double(3.0),
            dzCutOff = cms.double(3.0),
            uniquetrkweight = cms.double(0.8),
            vertexSize = cms.double(0.006),
            zmerge = cms.double(0.01)
        ),
        algorithm = cms.string('DA_vect')
    ),
    TkFilterParameters = cms.PSet(
        algorithm = cms.string('filter'),
        maxD0Significance = cms.double(4.0),
        maxEta = cms.double(4.0),
        maxNormalizedChi2 = cms.double(10.0),
        minPixelLayersWithHits = cms.int32(2),
        minPt = cms.double(0.9),
        minSiliconLayersWithHits = cms.int32(5),
        trackQuality = cms.string('any')
    ),
    TrackLabel = cms.InputTag("hltGeneralTracks"),
    beamSpotLabel = cms.InputTag("hltOnlineBeamSpot"),
    verbose = cms.untracked.bool(False),
    vertexCollections = cms.VPSet(
        cms.PSet(
            algorithm = cms.string('AdaptiveVertexFitter'),
            chi2cutoff = cms.double(2.5),
            label = cms.string(''),
            maxDistanceToBeam = cms.double(1.0),
            minNdof = cms.double(0.0),
            useBeamConstraint = cms.bool(False)
        ),
        cms.PSet(
            algorithm = cms.string('AdaptiveVertexFitter'),
            chi2cutoff = cms.double(2.5),
            label = cms.string('WithBS'),
            maxDistanceToBeam = cms.double(1.0),
            minNdof = cms.double(2.0),
            useBeamConstraint = cms.bool(True)
        )
    )
)


process.l1SeedConePFJetEmulatorProducer = cms.EDProducer("L1SeedConePFJetProducer",
    HW = cms.bool(True),
    L1PFObjects = cms.InputTag("l1tLayer1","Puppi"),
    coneSize = cms.double(0.4),
    correctorDir = cms.string(''),
    correctorFile = cms.string(''),
    debug = cms.bool(False),
    doCorrections = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    nJets = cms.uint32(16)
)


process.l1SeedConePFJetProducer = cms.EDProducer("L1SeedConePFJetProducer",
    HW = cms.bool(False),
    L1PFObjects = cms.InputTag("l1tLayer1","Puppi"),
    coneSize = cms.double(0.4),
    correctorDir = cms.string(''),
    correctorFile = cms.string(''),
    debug = cms.bool(False),
    doCorrections = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    nJets = cms.uint32(16)
)


process.l1tBJetProducerPuppi = cms.EDProducer("L1BJetProducer",
    NNFileName = cms.FileInPath('L1Trigger/Phase2L1ParticleFlow/data/modelTT_PUP_Off_dXY_XYCut_Graph.pb'),
    NNInput = cms.string('input:0'),
    NNOutput = cms.string('sequential/dense_2/Sigmoid'),
    jets = cms.InputTag("l1tSC4PFL1PuppiExtended"),
    maxEta = cms.double(2.4),
    maxJets = cms.int32(6),
    mightGet = cms.optional.untracked.vstring,
    minPt = cms.double(10),
    nParticles = cms.int32(10),
    useRawPt = cms.bool(True),
    vtx = cms.InputTag("l1tVertexFinderEmulator","L1VerticesEmulation")
)


process.l1tBJetProducerPuppiCorrectedEmulator = cms.EDProducer("L1BJetProducer",
    NNFileName = cms.FileInPath('L1Trigger/Phase2L1ParticleFlow/data/modelTT_PUP_Off_dXY_XYCut_Graph.pb'),
    NNInput = cms.string('input:0'),
    NNOutput = cms.string('sequential/dense_2/Sigmoid'),
    jets = cms.InputTag("l1tSC4PFL1PuppiExtendedCorrectedEmulator"),
    maxEta = cms.double(2.4),
    maxJets = cms.int32(6),
    mightGet = cms.optional.untracked.vstring,
    minPt = cms.double(10),
    nParticles = cms.int32(10),
    useRawPt = cms.bool(True),
    vtx = cms.InputTag("l1tVertexFinderEmulator","L1VerticesEmulation")
)


process.l1tCaloJet = cms.EDProducer("L1CaloJetProducer",
    EcalTpEtMin = cms.double(0.5),
    EtMinForCollection = cms.double(10),
    EtMinForSeedHit = cms.double(2.5),
    EtMinForTauCollection = cms.double(10),
    HFTpEtMin = cms.double(0.5),
    HGCalEmTpEtMin = cms.double(0.5),
    HGCalHadTpEtMin = cms.double(0.5),
    HcalTpEtMin = cms.double(0.5),
    L1CrystalClustersInputTag = cms.InputTag("l1tEGammaClusterEmuProducer"),
    absEtaBinsBarrel = cms.vdouble(0.0, 0.3, 0.6, 1.0, 1.5),
    absEtaBinsHF = cms.vdouble(3.0, 3.6, 6.0),
    absEtaBinsHGCal = cms.vdouble(1.5, 1.9, 2.4, 3.0),
    debug = cms.bool(False),
    emFractionBinsBarrel = cms.vdouble(
        0.0, 0.31, 0.4, 0.47, 0.53,
        0.58, 0.63, 0.69, 0.76, 0.84,
        1.05
    ),
    emFractionBinsHF = cms.vdouble(0.0, 1.05),
    emFractionBinsHGCal = cms.vdouble(0.0, 0.55, 0.67, 0.77, 1.05),
    jetCalibrationsBarrel = cms.vdouble( (
        1.64, 1.626, 1.617, 1.608, 1.599,
        1.591, 1.583, 1.574, 1.566, 1.559,
        1.551, 1.54, 1.525, 1.512, 1.498,
        1.486, 1.474, 1.462, 1.451, 1.441,
        1.431, 1.421, 1.412, 1.404, 1.396,
        1.385, 1.372, 1.36, 1.35, 1.341,
        1.334, 1.329, 1.325, 1.322, 1.32,
        1.32, 1.325, 1.336, 1.352, 1.373,
        1.428, 1.553, 1.855, 1.839, 1.829,
        1.819, 1.809, 1.8, 1.79, 1.781,
        1.771, 1.762, 1.753, 1.74, 1.723,
        1.706, 1.69, 1.674, 1.659, 1.645,
        1.631, 1.617, 1.604, 1.591, 1.579,
        1.568, 1.556, 1.54, 1.52, 1.501,
        1.484, 1.469, 1.454, 1.441, 1.43,
        1.419, 1.41, 1.396, 1.382, 1.374,
        1.37, 1.372, 1.386, 1.443, 1.993,
        1.978, 1.967, 1.957, 1.947, 1.937,
        1.927, 1.918, 1.908, 1.898, 1.889,
        1.875, 1.857, 1.839, 1.822, 1.805,
        1.789, 1.773, 1.757, 1.742, 1.727,
        1.713, 1.699, 1.685, 1.672, 1.653,
        1.629, 1.606, 1.584, 1.564, 1.545,
        1.527, 1.511, 1.495, 1.481, 1.459,
        1.434, 1.414, 1.4, 1.392, 1.391,
        1.431, 2.155, 2.135, 2.123, 2.11,
        2.097, 2.085, 2.073, 2.061, 2.049,
        2.037, 2.026, 2.009, 1.987, 1.965,
        1.944, 1.924, 1.905, 1.885, 1.867,
        1.849, 1.832, 1.815, 1.798, 1.783,
        1.767, 1.745, 1.717, 1.691, 1.666,
        1.643, 1.622, 1.602, 1.583, 1.566,
        1.55, 1.525, 1.495, 1.47, 1.451,
        1.437, 1.422, 1.424, 2.305, 2.284,
        2.271, 2.257, 2.244, 2.231, 2.218,
        2.205, 2.193, 2.18, 2.168, 2.15,
        2.126, 2.103, 2.081, 2.059, 2.037,
        2.017, 1.996, 1.976, 1.957, 1.938,
        1.92, 1.902, 1.884, 1.859, 1.827,
        1.797, 1.768, 1.741, 1.715, 1.691,
        1.668, 1.647, 1.627, 1.595, 1.556,
        1.523, 1.497, 1.477, 1.451, 1.446,
        2.555, 2.528, 2.51, 2.492, 2.474,
        2.457, 2.44, 2.423, 2.406, 2.39,
        2.373, 2.349, 2.318, 2.288, 2.258,
        2.229, 2.201, 2.174, 2.148, 2.122,
        2.097, 2.072, 2.049, 2.026, 2.004,
        1.971, 1.93, 1.892, 1.856, 1.822,
        1.79, 1.761, 1.733, 1.707, 1.683,
        1.645, 1.6, 1.563, 1.535, 1.515,
        1.493, 1.505, 2.85, 2.815, 2.792,
        2.77, 2.747, 2.725, 2.703, 2.682,
        2.661, 2.64, 2.619, 2.589, 2.549,
        2.511, 2.473, 2.437, 2.401, 2.367,
        2.334, 2.301, 2.27, 2.239, 2.209,
        2.181, 2.153, 2.112, 2.062, 2.014,
        1.969, 1.927, 1.888, 1.852, 1.818,
        1.787, 1.758, 1.712, 1.658, 1.616,
        1.585, 1.563, 1.544, 1.576, 3.386,
        3.325, 3.286, 3.248, 3.21, 3.174,
        3.138, 3.103, 3.069, 3.036, 3.004,
        2.956, 2.896, 2.838, 2.783, 2.73,
        2.68, 2.632, 2.586, 2.543, 2.501,
        2.461, 2.423, 2.387, 2.352, 2.303,
        2.242, 2.187, 2.136, 2.09, 2.047,
        2.008, 1.973, 1.94, 1.91, 1.863,
        1.806, 1.76, 1.721, 1.688, 1.636,
        1.572, 4.45, 4.344, 4.276, 4.21,
        4.146, 4.083, 4.022, 3.962, 3.904,
        3.847, 3.792, 3.712, 3.61, 3.513,
        3.42, 3.333, 3.25, 3.171, 3.096,
        3.025, 2.958, 2.894, 2.833, 2.776,
        2.721, 2.645, 2.552, 2.468, 2.393,
        2.325, 2.265, 2.21, 2.162, 2.118,
        2.079, 2.021, 1.956, 1.908, 1.873,
        1.849, 1.822, 1.818, 6.912, 6.764,
        6.667, 6.571, 6.477, 6.384, 6.293,
        6.203, 6.114, 6.027, 5.941, 5.814,
        5.65, 5.491, 5.336, 5.187, 5.042,
        4.903, 4.767, 4.637, 4.511, 4.389,
        4.272, 4.159, 4.05, 3.894, 3.7,
        3.522, 3.359, 3.21, 3.076, 2.954,
        2.846, 2.75, 2.667, 2.549, 2.438,
        2.39, 2.4, 2.463, 2.731, 3.577,
        1.536, 1.527, 1.521, 1.515, 1.509,
        1.503, 1.497, 1.491, 1.486, 1.48,
        1.475, 1.467, 1.457, 1.447, 1.437,
        1.428, 1.419, 1.411, 1.403, 1.395,
        1.388, 1.38, 1.374, 1.367, 1.361,
        1.353, 1.342, 1.333, 1.325, 1.319,
        1.313, 1.309, 1.305, 1.303, 1.302,
        1.302, 1.307, 1.317, 1.333, 1.354,
        1.409, 1.544, 1.74, 1.73, 1.723,
        1.716, 1.709, 1.702, 1.696, 1.689,
        1.683, 1.676, 1.67, 1.661, 1.648,
        1.636, 1.624, 1.613, 1.602, 1.59,
        1.58, 1.569, 1.559, 1.549, 1.539,
        1.53, 1.521, 1.507, 1.49, 1.474,
        1.459, 1.445, 1.432, 1.42, 1.409,
        1.399, 1.389, 1.375, 1.36, 1.35,
        1.345, 1.346, 1.363, 1.439, 1.869,
        1.858, 1.851, 1.843, 1.836, 1.829,
        1.822, 1.815, 1.808, 1.801, 1.795,
        1.785, 1.771, 1.758, 1.746, 1.733,
        1.721, 1.709, 1.697, 1.686, 1.674,
        1.663, 1.652, 1.642, 1.631, 1.616,
        1.597, 1.578, 1.56, 1.543, 1.527,
        1.512, 1.498, 1.485, 1.472, 1.452,
        1.427, 1.408, 1.393, 1.383, 1.377,
        1.407, 2.01, 1.997, 1.988, 1.98,
        1.971, 1.963, 1.954, 1.946, 1.938,
        1.93, 1.922, 1.91, 1.894, 1.879,
        1.864, 1.849, 1.834, 1.82, 1.806,
        1.792, 1.779, 1.766, 1.753, 1.74,
        1.728, 1.709, 1.686, 1.664, 1.642,
        1.622, 1.603, 1.584, 1.567, 1.55,
        1.534, 1.509, 1.478, 1.451, 1.43,
        1.414, 1.396, 1.407, 2.171, 2.155,
        2.144, 2.134, 2.123, 2.113, 2.103,
        2.093, 2.083, 2.073, 2.063, 2.049,
        2.03, 2.012, 1.994, 1.976, 1.959,
        1.942, 1.925, 1.909, 1.893, 1.877,
        1.862, 1.847, 1.833, 1.812, 1.785,
        1.759, 1.734, 1.71, 1.688, 1.667,
        1.646, 1.627, 1.609, 1.579, 1.542,
        1.509, 1.482, 1.459, 1.426, 1.401,
        2.366, 2.345, 2.332, 2.319, 2.306,
        2.293, 2.28, 2.268, 2.255, 2.243,
        2.231, 2.213, 2.189, 2.166, 2.144,
        2.122, 2.1, 2.079, 2.058, 2.038,
        2.018, 1.999, 1.98, 1.962, 1.944,
        1.918, 1.884, 1.853, 1.822, 1.794,
        1.766, 1.741, 1.716, 1.693, 1.671,
        1.636, 1.591, 1.554, 1.522, 1.497,
        1.461, 1.441, 2.68, 2.647, 2.626,
        2.605, 2.584, 2.564, 2.544, 2.525,
        2.506, 2.487, 2.469, 2.442, 2.407,
        2.373, 2.34, 2.309, 2.278, 2.249,
        2.221, 2.193, 2.167, 2.142, 2.117,
        2.093, 2.07, 2.038, 1.996, 1.958,
        1.922, 1.888, 1.857, 1.828, 1.801,
        1.775, 1.751, 1.713, 1.666, 1.626,
        1.592, 1.563, 1.516, 1.459, 3.093,
        3.051, 3.023, 2.995, 2.969, 2.942,
        2.916, 2.89, 2.865, 2.84, 2.816,
        2.78, 2.733, 2.688, 2.644, 2.602,
        2.561, 2.522, 2.484, 2.447, 2.411,
        2.376, 2.343, 2.311, 2.28, 2.235,
        2.178, 2.126, 2.077, 2.031, 1.988,
        1.949, 1.912, 1.878, 1.846, 1.796,
        1.735, 1.685, 1.646, 1.614, 1.571,
        1.543, 4.08, 3.996, 3.941, 3.888,
        3.836, 3.785, 3.735, 3.686, 3.638,
        3.591, 3.546, 3.479, 3.393, 3.312,
        3.233, 3.159, 3.087, 3.019, 2.953,
        2.891, 2.831, 2.774, 2.72, 2.668,
        2.618, 2.548, 2.462, 2.383, 2.312,
        2.247, 2.188, 2.134, 2.086, 2.042,
        2.003, 1.943, 1.875, 1.825, 1.788,
        1.763, 1.738, 1.747, 6.659, 6.494,
        6.387, 6.282, 6.179, 6.078, 5.978,
        5.881, 5.785, 5.691, 5.599, 5.463,
        5.289, 5.122, 4.961, 4.806, 4.657,
        4.514, 4.378, 4.246, 4.121, 4.001,
        3.886, 3.776, 3.671, 3.522, 3.341,
        3.177, 3.03, 2.899, 2.783, 2.682,
        2.594, 2.519, 2.456, 2.373, 2.311,
        2.307, 2.355, 2.447, 2.743, 3.536,
        1.519, 1.512, 1.507, 1.502, 1.498,
        1.493, 1.488, 1.484, 1.479, 1.475,
        1.471, 1.464, 1.456, 1.448, 1.44,
        1.433, 1.425, 1.418, 1.412, 1.405,
        1.399, 1.393, 1.387, 1.381, 1.376,
        1.369, 1.359, 1.351, 1.344, 1.337,
        1.332, 1.327, 1.323, 1.32, 1.318,
        1.317, 1.319, 1.326, 1.339, 1.356,
        1.404, 1.53, 1.719, 1.71, 1.705,
        1.699, 1.693, 1.688, 1.682, 1.677,
        1.671, 1.666, 1.661, 1.653, 1.642,
        1.632, 1.622, 1.613, 1.603, 1.594,
        1.584, 1.575, 1.567, 1.558, 1.55,
        1.541, 1.533, 1.522, 1.507, 1.492,
        1.479, 1.466, 1.454, 1.443, 1.432,
        1.422, 1.413, 1.399, 1.382, 1.369,
        1.361, 1.356, 1.359, 1.401, 1.86,
        1.851, 1.844, 1.838, 1.832, 1.826,
        1.82, 1.814, 1.808, 1.802, 1.796,
        1.787, 1.775, 1.764, 1.753, 1.742,
        1.731, 1.72, 1.71, 1.699, 1.689,
        1.679, 1.669, 1.66, 1.65, 1.636,
        1.618, 1.601, 1.584, 1.568, 1.553,
        1.538, 1.524, 1.511, 1.498, 1.478,
        1.451, 1.428, 1.41, 1.394, 1.374,
        1.373, 1.993, 1.982, 1.974, 1.967,
        1.96, 1.953, 1.946, 1.938, 1.931,
        1.924, 1.917, 1.907, 1.894, 1.88,
        1.867, 1.854, 1.841, 1.828, 1.816,
        1.804, 1.792, 1.78, 1.768, 1.757,
        1.746, 1.729, 1.708, 1.687, 1.667,
        1.648, 1.629, 1.612, 1.595, 1.578,
        1.563, 1.537, 1.504, 1.475, 1.451,
        1.43, 1.402, 1.388, 2.146, 2.131,
        2.122, 2.113, 2.104, 2.095, 2.086,
        2.077, 2.068, 2.059, 2.051, 2.038,
        2.021, 2.004, 1.988, 1.972, 1.957,
        1.941, 1.926, 1.911, 1.897, 1.883,
        1.869, 1.855, 1.842, 1.822, 1.797,
        1.773, 1.749, 1.727, 1.706, 1.685,
        1.665, 1.647, 1.629, 1.599, 1.561,
        1.527, 1.497, 1.472, 1.431, 1.389,
        2.336, 2.319, 2.307, 2.296, 2.285,
        2.273, 2.262, 2.251, 2.24, 2.23,
        2.219, 2.203, 2.182, 2.162, 2.142,
        2.122, 2.103, 2.084, 2.065, 2.047,
        2.029, 2.012, 1.994, 1.978, 1.961,
        1.937, 1.906, 1.876, 1.848, 1.82,
        1.794, 1.769, 1.745, 1.722, 1.7,
        1.665, 1.618, 1.578, 1.543, 1.512,
        1.465, 1.42, 2.594, 2.571, 2.556,
        2.541, 2.526, 2.511, 2.497, 2.482,
        2.468, 2.453, 2.439, 2.419, 2.391,
        2.364, 2.338, 2.312, 2.287, 2.262,
        2.238, 2.214, 2.191, 2.168, 2.146,
        2.124, 2.103, 2.072, 2.032, 1.993,
        1.957, 1.922, 1.889, 1.857, 1.827,
        1.799, 1.772, 1.728, 1.672, 1.625,
        1.585, 1.552, 1.507, 1.482, 3.016,
        2.982, 2.959, 2.937, 2.915, 2.893,
        2.872, 2.851, 2.83, 2.809, 2.788,
        2.758, 2.718, 2.679, 2.641, 2.604,
        2.568, 2.533, 2.499, 2.465, 2.432,
        2.4, 2.369, 2.339, 2.309, 2.266,
        2.211, 2.16, 2.111, 2.064, 2.02,
        1.979, 1.94, 1.904, 1.87, 1.815,
        1.749, 1.694, 1.651, 1.618, 1.58,
        1.59, 4.054, 3.966, 3.909, 3.854,
        3.8, 3.747, 3.696, 3.646, 3.597,
        3.549, 3.503, 3.435, 3.348, 3.266,
        3.187, 3.112, 3.041, 2.974, 2.909,
        2.848, 2.79, 2.734, 2.681, 2.631,
        2.583, 2.516, 2.434, 2.36, 2.292,
        2.232, 2.178, 2.128, 2.084, 2.045,
        2.009, 1.955, 1.895, 1.85, 1.817,
        1.794, 1.769, 1.766, 6.752, 6.57,
        6.452, 6.337, 6.224, 6.113, 6.004,
        5.898, 5.795, 5.693, 5.594, 5.449,
        5.263, 5.085, 4.915, 4.752, 4.597,
        4.449, 4.308, 4.173, 4.045, 3.923,
        3.808, 3.697, 3.593, 3.446, 3.269,
        3.11, 2.969, 2.846, 2.738, 2.644,
        2.564, 2.497, 2.442, 2.372, 2.323,
        2.327, 2.374, 2.459, 2.718, 3.371,
        1.615, 1.605, 1.599, 1.593, 1.587,
        1.581, 1.575, 1.57, 1.564, 1.558,
        1.553, 1.545, 1.534, 1.524, 1.514,
        1.504, 1.494, 1.485, 1.476, 1.468,
        1.46, 1.452, 1.444, 1.437, 1.429,
        1.419, 1.407, 1.395, 1.385, 1.375,
        1.367, 1.36, 1.353, 1.348, 1.344,
        1.339, 1.336, 1.34, 1.349, 1.364,
        1.41, 1.537, 1.867, 1.856, 1.849,
        1.841, 1.834, 1.827, 1.82, 1.813,
        1.806, 1.799, 1.792, 1.782, 1.768,
        1.755, 1.742, 1.73, 1.718, 1.705,
        1.694, 1.682, 1.671, 1.66, 1.649,
        1.638, 1.628, 1.613, 1.594, 1.575,
        1.558, 1.542, 1.526, 1.512, 1.498,
        1.485, 1.474, 1.455, 1.433, 1.417,
        1.406, 1.401, 1.404, 1.458, 2.037,
        2.025, 2.017, 2.009, 2.001, 1.993,
        1.985, 1.977, 1.97, 1.962, 1.954,
        1.943, 1.928, 1.914, 1.899, 1.885,
        1.871, 1.858, 1.844, 1.831, 1.818,
        1.805, 1.793, 1.781, 1.769, 1.751,
        1.728, 1.707, 1.686, 1.666, 1.647,
        1.629, 1.612, 1.596, 1.58, 1.555,
        1.524, 1.498, 1.477, 1.462, 1.445,
        1.461, 2.206, 2.192, 2.183, 2.174,
        2.165, 2.156, 2.148, 2.139, 2.13,
        2.122, 2.113, 2.101, 2.084, 2.068,
        2.052, 2.037, 2.021, 2.006, 1.992,
        1.977, 1.963, 1.949, 1.935, 1.922,
        1.908, 1.889, 1.864, 1.84, 1.817,
        1.795, 1.773, 1.753, 1.733, 1.714,
        1.696, 1.666, 1.628, 1.593, 1.562,
        1.536, 1.492, 1.444, 2.401, 2.385,
        2.375, 2.365, 2.355, 2.346, 2.336,
        2.326, 2.317, 2.307, 2.298, 2.284,
        2.265, 2.247, 2.229, 2.212, 2.195,
        2.178, 2.161, 2.144, 2.128, 2.112,
        2.097, 2.081, 2.066, 2.044, 2.015,
        1.988, 1.961, 1.935, 1.91, 1.886,
        1.862, 1.84, 1.818, 1.782, 1.735,
        1.692, 1.653, 1.618, 1.559, 1.487,
        2.637, 2.62, 2.609, 2.599, 2.588,
        2.577, 2.567, 2.556, 2.546, 2.536,
        2.525, 2.51, 2.49, 2.47, 2.451,
        2.432, 2.413, 2.394, 2.376, 2.357,
        2.339, 2.322, 2.304, 2.287, 2.27,
        2.245, 2.213, 2.182, 2.151, 2.122,
        2.093, 2.065, 2.038, 2.012, 1.986,
        1.944, 1.887, 1.835, 1.787, 1.742,
        1.665, 1.561, 2.952, 2.935, 2.924,
        2.913, 2.902, 2.891, 2.879, 2.868,
        2.858, 2.847, 2.836, 2.82, 2.798,
        2.777, 2.756, 2.736, 2.715, 2.695,
        2.675, 2.655, 2.635, 2.616, 2.597,
        2.578, 2.559, 2.531, 2.495, 2.459,
        2.424, 2.39, 2.357, 2.325, 2.293,
        2.262, 2.233, 2.182, 2.114, 2.05,
        1.992, 1.938, 1.844, 1.721, 3.403,
        3.388, 3.378, 3.368, 3.359, 3.349,
        3.339, 3.33, 3.32, 3.311, 3.301,
        3.287, 3.268, 3.249, 3.231, 3.213,
        3.194, 3.176, 3.158, 3.14, 3.123,
        3.105, 3.088, 3.07, 3.053, 3.028,
        2.994, 2.961, 2.928, 2.896, 2.865,
        2.834, 2.803, 2.773, 2.743, 2.692,
        2.621, 2.554, 2.488, 2.425, 2.307,
        2.12, 4.386, 4.363, 4.347, 4.332,
        4.317, 4.302, 4.287, 4.272, 4.258,
        4.243, 4.229, 4.208, 4.18, 4.153,
        4.127, 4.101, 4.075, 4.051, 4.026,
        4.003, 3.979, 3.956, 3.934, 3.912,
        3.891, 3.86, 3.821, 3.783, 3.747,
        3.712, 3.68, 3.649, 3.62, 3.592,
        3.566, 3.524, 3.471, 3.427, 3.39,
        3.361, 3.323, 3.312, 6.918, 6.864,
        6.829, 6.794, 6.759, 6.724, 6.69,
        6.656, 6.623, 6.589, 6.556, 6.507,
        6.443, 6.38, 6.319, 6.258, 6.199,
        6.142, 6.085, 6.03, 5.976, 5.923,
        5.872, 5.821, 5.773, 5.702, 5.612,
        5.528, 5.449, 5.376, 5.308, 5.245,
        5.189, 5.138, 5.092, 5.027, 4.964,
        4.939, 4.953, 5.005, 5.233, 6.041
     ) ),
    jetCalibrationsHF = cms.vdouble(
        3.223, 2.14, 1.683, 1.364, 1.142,
        0.987, 0.879, 0.804, 0.752, 0.716,
        0.691, 0.667, 0.651, 0.644, 0.641,
        0.641, 0.641, 0.642, 0.644, 0.645,
        0.647, 0.648, 0.65, 0.651, 0.653,
        0.655, 0.658, 0.662, 0.665, 0.668,
        0.671, 0.674, 0.677, 0.681, 0.684,
        0.689, 0.697, 0.705, 0.713, 0.721,
        0.736, 0.764, 2.598, 1.813, 1.462,
        1.206, 1.019, 0.883, 0.783, 0.711,
        0.658, 0.62, 0.592, 0.564, 0.543,
        0.532, 0.526, 0.524, 0.523, 0.524,
        0.524, 0.525, 0.526, 0.527, 0.528,
        0.529, 0.53, 0.532, 0.534, 0.536,
        0.538, 0.541, 0.543, 0.545, 0.547,
        0.549, 0.552, 0.556, 0.561, 0.567,
        0.572, 0.578, 0.589, 0.608
    ),
    jetCalibrationsHGCal = cms.vdouble( (
        1.395, 1.394, 1.394, 1.394, 1.394,
        1.394, 1.393, 1.393, 1.393, 1.393,
        1.393, 1.393, 1.392, 1.392, 1.392,
        1.391, 1.391, 1.391, 1.39, 1.39,
        1.39, 1.389, 1.389, 1.389, 1.388,
        1.388, 1.387, 1.387, 1.386, 1.385,
        1.385, 1.384, 1.383, 1.383, 1.382,
        1.381, 1.379, 1.378, 1.376, 1.374,
        1.371, 1.365, 1.575, 1.574, 1.574,
        1.574, 1.574, 1.574, 1.573, 1.573,
        1.573, 1.573, 1.572, 1.572, 1.572,
        1.571, 1.571, 1.57, 1.57, 1.569,
        1.569, 1.569, 1.568, 1.568, 1.567,
        1.567, 1.566, 1.566, 1.565, 1.564,
        1.563, 1.562, 1.561, 1.56, 1.559,
        1.559, 1.558, 1.556, 1.554, 1.552,
        1.549, 1.547, 1.543, 1.535, 1.846,
        1.845, 1.845, 1.844, 1.844, 1.843,
        1.843, 1.842, 1.842, 1.841, 1.841,
        1.84, 1.839, 1.839, 1.838, 1.837,
        1.836, 1.835, 1.834, 1.833, 1.832,
        1.831, 1.83, 1.829, 1.829, 1.827,
        1.825, 1.824, 1.822, 1.82, 1.818,
        1.816, 1.814, 1.813, 1.811, 1.808,
        1.803, 1.799, 1.794, 1.79, 1.78,
        1.765, 3.377, 3.355, 3.341, 3.326,
        3.312, 3.298, 3.283, 3.269, 3.255,
        3.242, 3.228, 3.207, 3.18, 3.154,
        3.128, 3.102, 3.077, 3.051, 3.027,
        3.002, 2.979, 2.955, 2.932, 2.909,
        2.886, 2.853, 2.811, 2.769, 2.729,
        2.691, 2.654, 2.618, 2.584, 2.551,
        2.519, 2.467, 2.4, 2.341, 2.291,
        2.248, 2.186, 2.149, 1.085, 1.087,
        1.088, 1.089, 1.09, 1.091, 1.092,
        1.093, 1.094, 1.095, 1.097, 1.098,
        1.1, 1.103, 1.105, 1.107, 1.109,
        1.111, 1.113, 1.116, 1.118, 1.12,
        1.122, 1.124, 1.126, 1.13, 1.134,
        1.138, 1.143, 1.147, 1.151, 1.156,
        1.16, 1.164, 1.169, 1.176, 1.187,
        1.198, 1.209, 1.22, 1.242, 1.28,
        61.559, 11.087, 4.083, 1.971, 1.335,
        1.145, 1.09, 1.074, 1.072, 1.072,
        1.074, 1.078, 1.083, 1.088, 1.093,
        1.098, 1.103, 1.108, 1.112, 1.117,
        1.122, 1.127, 1.132, 1.137, 1.142,
        1.149, 1.159, 1.169, 1.179, 1.189,
        1.199, 1.209, 1.218, 1.228, 1.238,
        1.255, 1.28, 1.305, 1.329, 1.354,
        1.403, 1.49, 89.821, 15.567, 5.416,
        2.387, 1.485, 1.218, 1.14, 1.119,
        1.115, 1.116, 1.118, 1.123, 1.129,
        1.135, 1.141, 1.147, 1.153, 1.159,
        1.165, 1.171, 1.178, 1.184, 1.19,
        1.196, 1.202, 1.211, 1.223, 1.236,
        1.248, 1.26, 1.272, 1.284, 1.297,
        1.309, 1.321, 1.342, 1.373, 1.403,
        1.434, 1.464, 1.525, 1.632, 83.76,
        19.529, 8.102, 3.961, 2.461, 1.918,
        1.721, 1.65, 1.624, 1.615, 1.612,
        1.611, 1.611, 1.611, 1.612, 1.612,
        1.613, 1.613, 1.614, 1.614, 1.615,
        1.616, 1.616, 1.617, 1.617, 1.618,
        1.619, 1.62, 1.621, 1.622, 1.623,
        1.624, 1.625, 1.626, 1.628, 1.629,
        1.632, 1.635, 1.637, 1.64, 1.645,
        1.655, 1.262, 1.261, 1.26, 1.259,
        1.259, 1.258, 1.257, 1.256, 1.256,
        1.255, 1.254, 1.253, 1.252, 1.25,
        1.249, 1.247, 1.246, 1.244, 1.243,
        1.242, 1.24, 1.239, 1.237, 1.236,
        1.234, 1.232, 1.229, 1.226, 1.223,
        1.221, 1.218, 1.215, 1.212, 1.209,
        1.206, 1.201, 1.194, 1.186, 1.179,
        1.172, 1.157, 1.132, 1.328, 1.327,
        1.326, 1.326, 1.325, 1.325, 1.324,
        1.324, 1.323, 1.323, 1.322, 1.322,
        1.321, 1.32, 1.319, 1.318, 1.317,
        1.316, 1.315, 1.314, 1.313, 1.312,
        1.311, 1.31, 1.309, 1.308, 1.306,
        1.304, 1.302, 1.3, 1.298, 1.296,
        1.294, 1.292, 1.29, 1.287, 1.282,
        1.277, 1.272, 1.267, 1.257, 1.24,
        1.463, 1.461, 1.46, 1.459, 1.458,
        1.457, 1.456, 1.455, 1.454, 1.453,
        1.452, 1.451, 1.449, 1.447, 1.445,
        1.443, 1.44, 1.438, 1.436, 1.434,
        1.432, 1.43, 1.428, 1.426, 1.424,
        1.421, 1.417, 1.413, 1.409, 1.405,
        1.401, 1.397, 1.393, 1.389, 1.385,
        1.377, 1.367, 1.357, 1.347, 1.337,
        1.316, 1.281, 44.899, 14.731, 7.692,
        4.568, 3.18, 2.562, 2.285, 2.159,
        2.101, 2.072, 2.057, 2.043, 2.031,
        2.021, 2.011, 2.001, 1.991, 1.982,
        1.972, 1.962, 1.952, 1.942, 1.932,
        1.922, 1.912, 1.897, 1.878, 1.858,
        1.838, 1.818, 1.798, 1.779, 1.759,
        1.739, 1.719, 1.685, 1.635, 1.586,
        1.536, 1.487, 1.387, 1.214
     ) ),
    jetPtBins = cms.vdouble(
        0.0, 5.0, 7.5, 10.0, 12.5,
        15.0, 17.5, 20.0, 22.5, 25.0,
        27.5, 30.0, 35.0, 40.0, 45.0,
        50.0, 55.0, 60.0, 65.0, 70.0,
        75.0, 80.0, 85.0, 90.0, 95.0,
        100.0, 110.0, 120.0, 130.0, 140.0,
        150.0, 160.0, 170.0, 180.0, 190.0,
        200.0, 225.0, 250.0, 275.0, 300.0,
        325.0, 400.0, 500.0
    ),
    l1CaloTowers = cms.InputTag("l1tTowerCalibration","L1CaloTowerCalibratedCollection"),
    tauAbsEtaBinsBarrel = cms.vdouble(0.0, 0.3, 0.6, 1.0, 1.5),
    tauAbsEtaBinsHGCal = cms.vdouble(1.5, 1.9, 2.4, 3.0),
    tauCalibrationsBarrel = cms.vdouble( (
        1.917, 1.714, 1.605, 1.514, 1.437,
        1.344, 1.252, 1.188, 1.142, 1.11,
        1.087, 1.071, 1.059, 1.051, 1.044,
        1.038, 1.034, 1.032, 1.032, 1.856,
        1.729, 1.655, 1.589, 1.53, 1.453,
        1.369, 1.301, 1.248, 1.205, 1.17,
        1.143, 1.121, 1.103, 1.084, 1.066,
        1.05, 1.037, 1.034, 2.053, 1.884,
        1.788, 1.702, 1.627, 1.53, 1.426,
        1.345, 1.282, 1.233, 1.194, 1.164,
        1.141, 1.122, 1.102, 1.084, 1.07,
        1.059, 1.057, 1.783, 1.659, 1.588,
        1.524, 1.466, 1.391, 1.309, 1.244,
        1.191, 1.149, 1.116, 1.089, 1.068,
        1.05, 1.031, 1.013, 0.998, 0.986,
        0.983, 1.896, 1.713, 1.613, 1.527,
        1.453, 1.362, 1.27, 1.202, 1.152,
        1.115, 1.088, 1.069, 1.054, 1.044,
        1.033, 1.024, 1.018, 1.015, 1.014,
        1.936, 1.677, 1.544, 1.437, 1.35,
        1.249, 1.156, 1.095, 1.055, 1.028,
        1.011, 1.0, 0.992, 0.987, 0.983,
        0.98, 0.978, 0.978, 0.978, 1.85,
        1.683, 1.59, 1.509, 1.439, 1.351,
        1.258, 1.188, 1.135, 1.096, 1.065,
        1.043, 1.025, 1.012, 0.999, 0.987,
        0.979, 0.973, 0.972, 2.066, 1.784,
        1.638, 1.517, 1.418, 1.301, 1.189,
        1.114, 1.063, 1.029, 1.006, 0.99,
        0.979, 0.972, 0.965, 0.961, 0.958,
        0.957, 0.957, 1.074, 1.063, 1.056,
        1.05, 1.043, 1.034, 1.022, 1.011,
        1.001, 0.992, 0.983, 0.974, 0.966,
        0.959, 0.949, 0.937, 0.921, 0.895,
        0.874, 2.053, 1.757, 1.609, 1.489,
        1.394, 1.285, 1.186, 1.123, 1.083,
        1.057, 1.04, 1.029, 1.022, 1.018,
        1.014, 1.012, 1.01, 1.01, 1.01,
        1.733, 1.628, 1.567, 1.513, 1.463,
        1.399, 1.328, 1.27, 1.224, 1.187,
        1.157, 1.133, 1.114, 1.098, 1.081,
        1.064, 1.05, 1.038, 1.035, 2.009,
        1.852, 1.762, 1.682, 1.611, 1.518,
        1.417, 1.337, 1.274, 1.224, 1.184,
        1.153, 1.128, 1.108, 1.086, 1.066,
        1.049, 1.036, 1.033, 1.806, 1.669,
        1.591, 1.522, 1.461, 1.382, 1.296,
        1.23, 1.177, 1.136, 1.103, 1.078,
        1.058, 1.043, 1.025, 1.01, 0.998,
        0.988, 0.986, 1.944, 1.725, 1.609,
        1.512, 1.431, 1.334, 1.239, 1.173,
        1.126, 1.094, 1.071, 1.056, 1.045,
        1.037, 1.03, 1.024, 1.021, 1.019,
        1.019, 1.9, 1.631, 1.496, 1.389,
        1.304, 1.208, 1.122, 1.068, 1.034,
        1.012, 0.999, 0.99, 0.984, 0.981,
        0.978, 0.976, 0.975, 0.975, 0.975,
        1.682, 1.577, 1.516, 1.46, 1.409,
        1.342, 1.266, 1.203, 1.152, 1.109,
        1.075, 1.046, 1.022, 1.003, 0.98,
        0.958, 0.937, 0.918, 0.913, 1.928,
        1.693, 1.569, 1.466, 1.381, 1.28,
        1.183, 1.116, 1.07, 1.038, 1.016,
        1.001, 0.991, 0.984, 0.977, 0.973,
        0.97, 0.969, 0.969, 1.067, 1.058,
        1.052, 1.047, 1.041, 1.033, 1.023,
        1.014, 1.005, 0.997, 0.989, 0.981,
        0.974, 0.968, 0.959, 0.948, 0.933,
        0.908, 0.886, 1.883, 1.663, 1.548,
        1.453, 1.375, 1.282, 1.193, 1.133,
        1.091, 1.063, 1.044, 1.031, 1.022,
        1.016, 1.01, 1.006, 1.004, 1.003,
        1.003, 1.688, 1.595, 1.541, 1.492,
        1.448, 1.39, 1.325, 1.271, 1.228,
        1.193, 1.164, 1.14, 1.121, 1.105,
        1.087, 1.07, 1.055, 1.041, 1.037,
        2.251, 2.02, 1.891, 1.779, 1.682,
        1.561, 1.434, 1.339, 1.267, 1.213,
        1.173, 1.142, 1.119, 1.102, 1.084,
        1.069, 1.058, 1.051, 1.05, 1.799,
        1.654, 1.572, 1.501, 1.438, 1.359,
        1.275, 1.211, 1.162, 1.125, 1.096,
        1.074, 1.057, 1.044, 1.03, 1.019,
        1.009, 1.003, 1.002, 1.78, 1.63,
        1.547, 1.475, 1.413, 1.335, 1.254,
        1.193, 1.148, 1.114, 1.089, 1.07,
        1.056, 1.045, 1.034, 1.025, 1.018,
        1.014, 1.013, 1.75, 1.549, 1.445,
        1.359, 1.288, 1.205, 1.126, 1.072,
        1.036, 1.012, 0.995, 0.984, 0.976,
        0.971, 0.966, 0.963, 0.961, 0.96,
        0.96, 1.736, 1.61, 1.537, 1.472,
        1.414, 1.339, 1.257, 1.192, 1.141,
        1.1, 1.067, 1.041, 1.021, 1.005,
        0.986, 0.97, 0.956, 0.945, 0.942,
        1.961, 1.712, 1.582, 1.474, 1.386,
        1.281, 1.181, 1.114, 1.068, 1.036,
        1.015, 1.001, 0.991, 0.984, 0.978,
        0.974, 0.971, 0.97, 0.97, 1.065,
        1.056, 1.051, 1.046, 1.04, 1.033,
        1.023, 1.014, 1.005, 0.997, 0.989,
        0.982, 0.974, 0.968, 0.958, 0.946,
        0.93, 0.9, 0.872, 2.047, 1.81,
        1.683, 1.575, 1.485, 1.375, 1.266,
        1.188, 1.133, 1.094, 1.066, 1.046,
        1.032, 1.022, 1.012, 1.005, 1.0,
        0.998, 0.997, 2.022, 1.861, 1.768,
        1.686, 1.613, 1.519, 1.418, 1.338,
        1.275, 1.226, 1.187, 1.157, 1.133,
        1.114, 1.093, 1.074, 1.059, 1.047,
        1.045, 2.503, 2.236, 2.087, 1.956,
        1.843, 1.699, 1.548, 1.434, 1.347,
        1.281, 1.231, 1.192, 1.164, 1.142,
        1.118, 1.099, 1.084, 1.074, 1.072,
        2.253, 2.007, 1.872, 1.755, 1.654,
        1.529, 1.401, 1.305, 1.235, 1.182,
        1.143, 1.115, 1.093, 1.078, 1.061,
        1.048, 1.039, 1.033, 1.033, 2.228,
        2.01, 1.888, 1.782, 1.69, 1.574,
        1.453, 1.361, 1.292, 1.239, 1.2,
        1.17, 1.147, 1.13, 1.112, 1.097,
        1.085, 1.078, 1.077, 2.527, 2.136,
        1.934, 1.769, 1.633, 1.475, 1.326,
        1.226, 1.159, 1.114, 1.084, 1.064,
        1.051, 1.042, 1.034, 1.028, 1.025,
        1.024, 1.024, 2.097, 1.908, 1.801,
        1.706, 1.622, 1.514, 1.398, 1.308,
        1.238, 1.183, 1.14, 1.106, 1.08,
        1.06, 1.038, 1.018, 1.002, 0.991,
        0.988, 2.479, 2.106, 1.912, 1.753,
        1.623, 1.47, 1.326, 1.229, 1.163,
        1.12, 1.09, 1.07, 1.057, 1.048,
        1.04, 1.034, 1.031, 1.029, 1.029,
        2.097, 1.906, 1.796, 1.699, 1.612,
        1.5, 1.378, 1.281, 1.205, 1.145,
        1.098, 1.06, 1.031, 1.007, 0.981,
        0.958, 0.939, 0.923, 0.92
     ) ),
    tauCalibrationsHGCal = cms.vdouble(
        1.665, 1.556, 1.495, 1.443, 1.398,
        1.342, 1.285, 1.242, 1.211, 1.188,
        1.17, 1.158, 1.148, 1.141, 1.134,
        1.128, 1.124, 1.122, 1.121, 1.646,
        1.525, 1.459, 1.402, 1.353, 1.293,
        1.231, 1.186, 1.153, 1.129, 1.112,
        1.099, 1.089, 1.082, 1.075, 1.069,
        1.065, 1.063, 1.063, 1.826, 1.63,
        1.528, 1.444, 1.376, 1.294, 1.218,
        1.166, 1.13, 1.107, 1.091, 1.08,
        1.072, 1.067, 1.063, 1.06, 1.058,
        1.057, 1.057, 2.031, 1.762, 1.624,
        1.514, 1.424, 1.321, 1.226, 1.164,
        1.124, 1.098, 1.081, 1.069, 1.062,
        1.057, 1.053, 1.05, 1.049, 1.048,
        1.048, 1.396, 1.328, 1.291, 1.259,
        1.232, 1.198, 1.164, 1.139, 1.12,
        1.107, 1.097, 1.089, 1.084, 1.08,
        1.076, 1.073, 1.071, 1.07, 1.07,
        1.242, 1.214, 1.197, 1.182, 1.168,
        1.149, 1.128, 1.111, 1.097, 1.085,
        1.075, 1.067, 1.06, 1.055, 1.048,
        1.042, 1.036, 1.03, 1.029, 1.491,
        1.368, 1.305, 1.253, 1.211, 1.161,
        1.115, 1.084, 1.064, 1.05, 1.041,
        1.035, 1.031, 1.028, 1.026, 1.024,
        1.023, 1.023, 1.023, 1.348, 1.289,
        1.255, 1.225, 1.199, 1.165, 1.127,
        1.098, 1.075, 1.057, 1.043, 1.031,
        1.022, 1.016, 1.008, 1.001, 0.995,
        0.991, 0.99, 1.422, 1.373, 1.345,
        1.32, 1.297, 1.266, 1.232, 1.205,
        1.183, 1.165, 1.15, 1.138, 1.128,
        1.12, 1.111, 1.102, 1.095, 1.088,
        1.086, 1.35, 1.322, 1.304, 1.288,
        1.272, 1.25, 1.224, 1.201, 1.18,
        1.162, 1.146, 1.132, 1.119, 1.108,
        1.093, 1.078, 1.061, 1.038, 1.026,
        1.44, 1.373, 1.334, 1.3, 1.27,
        1.231, 1.189, 1.155, 1.129, 1.108,
        1.092, 1.079, 1.069, 1.061, 1.053,
        1.045, 1.038, 1.033, 1.032, 1.356,
        1.317, 1.293, 1.271, 1.25, 1.221,
        1.186, 1.156, 1.129, 1.105, 1.085,
        1.067, 1.051, 1.037, 1.019, 1.0,
        0.98, 0.954, 0.941
    ),
    tauL1egInfoBarrel = cms.VPSet(
        cms.PSet(
            l1egCount = cms.double(0.0),
            l1egEmFractions = cms.vdouble(0.0, 0.091, 0.317, 1.05)
        ),
        cms.PSet(
            l1egCount = cms.double(1.0),
            l1egEmFractions = cms.vdouble(0.0, 0.634, 0.888, 1.05)
        ),
        cms.PSet(
            l1egCount = cms.double(2.0),
            l1egEmFractions = cms.vdouble(0.0, 0.821, 0.957, 1.05)
        )
    ),
    tauL1egInfoHGCal = cms.VPSet(cms.PSet(
        l1egCount = cms.double(0.0),
        l1egEmFractions = cms.vdouble(0.0, 0.473, 0.72, 0.894, 1.05)
    )),
    tauPtBins = cms.vdouble(
        0.0, 5.0, 7.5, 10.0, 12.5,
        15.0, 20.0, 25.0, 30.0, 35.0,
        40.0, 45.0, 50.0, 55.0, 60.0,
        70.0, 80.0, 100.0, 150.0, 200.0
    )
)


process.l1tCaloJetHTT = cms.EDProducer("L1CaloJetHTTProducer",
    BXVCaloJetsInputTag = cms.InputTag("L1CaloJet","CaloJets"),
    EtaMax = cms.double(2.4),
    PtMin = cms.double(30.0),
    debug = cms.bool(False),
    genJets = cms.InputTag("ak4GenJetsNoNu"),
    use_gen_jets = cms.bool(False)
)


process.l1tCaloJetHTTProducer = cms.EDProducer("L1CaloJetHTTProducer",
    BXVCaloJetsInputTag = cms.InputTag("l1tCaloJetProducer","L1CaloJetCollectionBXV"),
    EtaMax = cms.double(2.4),
    PtMin = cms.double(30.0),
    debug = cms.bool(False),
    genJets = cms.InputTag("ak4GenJetsNoNu"),
    use_gen_jets = cms.bool(False)
)


process.l1tCaloJetProducer = cms.EDProducer("L1CaloJetProducer",
    EcalTpEtMin = cms.double(0.5),
    EtMinForCollection = cms.double(10),
    EtMinForSeedHit = cms.double(2.5),
    EtMinForTauCollection = cms.double(10),
    HFTpEtMin = cms.double(0.5),
    HGCalEmTpEtMin = cms.double(0.5),
    HGCalHadTpEtMin = cms.double(0.5),
    HcalTpEtMin = cms.double(0.5),
    L1CrystalClustersInputTag = cms.InputTag("l1tEGammaClusterEmuProducer","L1EGXtalClusterEmulator"),
    absEtaBinsBarrel = cms.vdouble(0.0, 0.3, 0.6, 1.0, 1.5),
    absEtaBinsHF = cms.vdouble(3.0, 3.6, 6.0),
    absEtaBinsHGCal = cms.vdouble(1.5, 1.9, 2.4, 3.0),
    debug = cms.bool(False),
    emFractionBinsBarrel = cms.vdouble(
        0.0, 0.31, 0.4, 0.47, 0.53,
        0.58, 0.63, 0.69, 0.76, 0.84,
        1.05
    ),
    emFractionBinsHF = cms.vdouble(0.0, 1.05),
    emFractionBinsHGCal = cms.vdouble(0.0, 0.55, 0.67, 0.77, 1.05),
    jetCalibrationsBarrel = cms.vdouble( (
        1.64, 1.626, 1.617, 1.608, 1.599,
        1.591, 1.583, 1.574, 1.566, 1.559,
        1.551, 1.54, 1.525, 1.512, 1.498,
        1.486, 1.474, 1.462, 1.451, 1.441,
        1.431, 1.421, 1.412, 1.404, 1.396,
        1.385, 1.372, 1.36, 1.35, 1.341,
        1.334, 1.329, 1.325, 1.322, 1.32,
        1.32, 1.325, 1.336, 1.352, 1.373,
        1.428, 1.553, 1.855, 1.839, 1.829,
        1.819, 1.809, 1.8, 1.79, 1.781,
        1.771, 1.762, 1.753, 1.74, 1.723,
        1.706, 1.69, 1.674, 1.659, 1.645,
        1.631, 1.617, 1.604, 1.591, 1.579,
        1.568, 1.556, 1.54, 1.52, 1.501,
        1.484, 1.469, 1.454, 1.441, 1.43,
        1.419, 1.41, 1.396, 1.382, 1.374,
        1.37, 1.372, 1.386, 1.443, 1.993,
        1.978, 1.967, 1.957, 1.947, 1.937,
        1.927, 1.918, 1.908, 1.898, 1.889,
        1.875, 1.857, 1.839, 1.822, 1.805,
        1.789, 1.773, 1.757, 1.742, 1.727,
        1.713, 1.699, 1.685, 1.672, 1.653,
        1.629, 1.606, 1.584, 1.564, 1.545,
        1.527, 1.511, 1.495, 1.481, 1.459,
        1.434, 1.414, 1.4, 1.392, 1.391,
        1.431, 2.155, 2.135, 2.123, 2.11,
        2.097, 2.085, 2.073, 2.061, 2.049,
        2.037, 2.026, 2.009, 1.987, 1.965,
        1.944, 1.924, 1.905, 1.885, 1.867,
        1.849, 1.832, 1.815, 1.798, 1.783,
        1.767, 1.745, 1.717, 1.691, 1.666,
        1.643, 1.622, 1.602, 1.583, 1.566,
        1.55, 1.525, 1.495, 1.47, 1.451,
        1.437, 1.422, 1.424, 2.305, 2.284,
        2.271, 2.257, 2.244, 2.231, 2.218,
        2.205, 2.193, 2.18, 2.168, 2.15,
        2.126, 2.103, 2.081, 2.059, 2.037,
        2.017, 1.996, 1.976, 1.957, 1.938,
        1.92, 1.902, 1.884, 1.859, 1.827,
        1.797, 1.768, 1.741, 1.715, 1.691,
        1.668, 1.647, 1.627, 1.595, 1.556,
        1.523, 1.497, 1.477, 1.451, 1.446,
        2.555, 2.528, 2.51, 2.492, 2.474,
        2.457, 2.44, 2.423, 2.406, 2.39,
        2.373, 2.349, 2.318, 2.288, 2.258,
        2.229, 2.201, 2.174, 2.148, 2.122,
        2.097, 2.072, 2.049, 2.026, 2.004,
        1.971, 1.93, 1.892, 1.856, 1.822,
        1.79, 1.761, 1.733, 1.707, 1.683,
        1.645, 1.6, 1.563, 1.535, 1.515,
        1.493, 1.505, 2.85, 2.815, 2.792,
        2.77, 2.747, 2.725, 2.703, 2.682,
        2.661, 2.64, 2.619, 2.589, 2.549,
        2.511, 2.473, 2.437, 2.401, 2.367,
        2.334, 2.301, 2.27, 2.239, 2.209,
        2.181, 2.153, 2.112, 2.062, 2.014,
        1.969, 1.927, 1.888, 1.852, 1.818,
        1.787, 1.758, 1.712, 1.658, 1.616,
        1.585, 1.563, 1.544, 1.576, 3.386,
        3.325, 3.286, 3.248, 3.21, 3.174,
        3.138, 3.103, 3.069, 3.036, 3.004,
        2.956, 2.896, 2.838, 2.783, 2.73,
        2.68, 2.632, 2.586, 2.543, 2.501,
        2.461, 2.423, 2.387, 2.352, 2.303,
        2.242, 2.187, 2.136, 2.09, 2.047,
        2.008, 1.973, 1.94, 1.91, 1.863,
        1.806, 1.76, 1.721, 1.688, 1.636,
        1.572, 4.45, 4.344, 4.276, 4.21,
        4.146, 4.083, 4.022, 3.962, 3.904,
        3.847, 3.792, 3.712, 3.61, 3.513,
        3.42, 3.333, 3.25, 3.171, 3.096,
        3.025, 2.958, 2.894, 2.833, 2.776,
        2.721, 2.645, 2.552, 2.468, 2.393,
        2.325, 2.265, 2.21, 2.162, 2.118,
        2.079, 2.021, 1.956, 1.908, 1.873,
        1.849, 1.822, 1.818, 6.912, 6.764,
        6.667, 6.571, 6.477, 6.384, 6.293,
        6.203, 6.114, 6.027, 5.941, 5.814,
        5.65, 5.491, 5.336, 5.187, 5.042,
        4.903, 4.767, 4.637, 4.511, 4.389,
        4.272, 4.159, 4.05, 3.894, 3.7,
        3.522, 3.359, 3.21, 3.076, 2.954,
        2.846, 2.75, 2.667, 2.549, 2.438,
        2.39, 2.4, 2.463, 2.731, 3.577,
        1.536, 1.527, 1.521, 1.515, 1.509,
        1.503, 1.497, 1.491, 1.486, 1.48,
        1.475, 1.467, 1.457, 1.447, 1.437,
        1.428, 1.419, 1.411, 1.403, 1.395,
        1.388, 1.38, 1.374, 1.367, 1.361,
        1.353, 1.342, 1.333, 1.325, 1.319,
        1.313, 1.309, 1.305, 1.303, 1.302,
        1.302, 1.307, 1.317, 1.333, 1.354,
        1.409, 1.544, 1.74, 1.73, 1.723,
        1.716, 1.709, 1.702, 1.696, 1.689,
        1.683, 1.676, 1.67, 1.661, 1.648,
        1.636, 1.624, 1.613, 1.602, 1.59,
        1.58, 1.569, 1.559, 1.549, 1.539,
        1.53, 1.521, 1.507, 1.49, 1.474,
        1.459, 1.445, 1.432, 1.42, 1.409,
        1.399, 1.389, 1.375, 1.36, 1.35,
        1.345, 1.346, 1.363, 1.439, 1.869,
        1.858, 1.851, 1.843, 1.836, 1.829,
        1.822, 1.815, 1.808, 1.801, 1.795,
        1.785, 1.771, 1.758, 1.746, 1.733,
        1.721, 1.709, 1.697, 1.686, 1.674,
        1.663, 1.652, 1.642, 1.631, 1.616,
        1.597, 1.578, 1.56, 1.543, 1.527,
        1.512, 1.498, 1.485, 1.472, 1.452,
        1.427, 1.408, 1.393, 1.383, 1.377,
        1.407, 2.01, 1.997, 1.988, 1.98,
        1.971, 1.963, 1.954, 1.946, 1.938,
        1.93, 1.922, 1.91, 1.894, 1.879,
        1.864, 1.849, 1.834, 1.82, 1.806,
        1.792, 1.779, 1.766, 1.753, 1.74,
        1.728, 1.709, 1.686, 1.664, 1.642,
        1.622, 1.603, 1.584, 1.567, 1.55,
        1.534, 1.509, 1.478, 1.451, 1.43,
        1.414, 1.396, 1.407, 2.171, 2.155,
        2.144, 2.134, 2.123, 2.113, 2.103,
        2.093, 2.083, 2.073, 2.063, 2.049,
        2.03, 2.012, 1.994, 1.976, 1.959,
        1.942, 1.925, 1.909, 1.893, 1.877,
        1.862, 1.847, 1.833, 1.812, 1.785,
        1.759, 1.734, 1.71, 1.688, 1.667,
        1.646, 1.627, 1.609, 1.579, 1.542,
        1.509, 1.482, 1.459, 1.426, 1.401,
        2.366, 2.345, 2.332, 2.319, 2.306,
        2.293, 2.28, 2.268, 2.255, 2.243,
        2.231, 2.213, 2.189, 2.166, 2.144,
        2.122, 2.1, 2.079, 2.058, 2.038,
        2.018, 1.999, 1.98, 1.962, 1.944,
        1.918, 1.884, 1.853, 1.822, 1.794,
        1.766, 1.741, 1.716, 1.693, 1.671,
        1.636, 1.591, 1.554, 1.522, 1.497,
        1.461, 1.441, 2.68, 2.647, 2.626,
        2.605, 2.584, 2.564, 2.544, 2.525,
        2.506, 2.487, 2.469, 2.442, 2.407,
        2.373, 2.34, 2.309, 2.278, 2.249,
        2.221, 2.193, 2.167, 2.142, 2.117,
        2.093, 2.07, 2.038, 1.996, 1.958,
        1.922, 1.888, 1.857, 1.828, 1.801,
        1.775, 1.751, 1.713, 1.666, 1.626,
        1.592, 1.563, 1.516, 1.459, 3.093,
        3.051, 3.023, 2.995, 2.969, 2.942,
        2.916, 2.89, 2.865, 2.84, 2.816,
        2.78, 2.733, 2.688, 2.644, 2.602,
        2.561, 2.522, 2.484, 2.447, 2.411,
        2.376, 2.343, 2.311, 2.28, 2.235,
        2.178, 2.126, 2.077, 2.031, 1.988,
        1.949, 1.912, 1.878, 1.846, 1.796,
        1.735, 1.685, 1.646, 1.614, 1.571,
        1.543, 4.08, 3.996, 3.941, 3.888,
        3.836, 3.785, 3.735, 3.686, 3.638,
        3.591, 3.546, 3.479, 3.393, 3.312,
        3.233, 3.159, 3.087, 3.019, 2.953,
        2.891, 2.831, 2.774, 2.72, 2.668,
        2.618, 2.548, 2.462, 2.383, 2.312,
        2.247, 2.188, 2.134, 2.086, 2.042,
        2.003, 1.943, 1.875, 1.825, 1.788,
        1.763, 1.738, 1.747, 6.659, 6.494,
        6.387, 6.282, 6.179, 6.078, 5.978,
        5.881, 5.785, 5.691, 5.599, 5.463,
        5.289, 5.122, 4.961, 4.806, 4.657,
        4.514, 4.378, 4.246, 4.121, 4.001,
        3.886, 3.776, 3.671, 3.522, 3.341,
        3.177, 3.03, 2.899, 2.783, 2.682,
        2.594, 2.519, 2.456, 2.373, 2.311,
        2.307, 2.355, 2.447, 2.743, 3.536,
        1.519, 1.512, 1.507, 1.502, 1.498,
        1.493, 1.488, 1.484, 1.479, 1.475,
        1.471, 1.464, 1.456, 1.448, 1.44,
        1.433, 1.425, 1.418, 1.412, 1.405,
        1.399, 1.393, 1.387, 1.381, 1.376,
        1.369, 1.359, 1.351, 1.344, 1.337,
        1.332, 1.327, 1.323, 1.32, 1.318,
        1.317, 1.319, 1.326, 1.339, 1.356,
        1.404, 1.53, 1.719, 1.71, 1.705,
        1.699, 1.693, 1.688, 1.682, 1.677,
        1.671, 1.666, 1.661, 1.653, 1.642,
        1.632, 1.622, 1.613, 1.603, 1.594,
        1.584, 1.575, 1.567, 1.558, 1.55,
        1.541, 1.533, 1.522, 1.507, 1.492,
        1.479, 1.466, 1.454, 1.443, 1.432,
        1.422, 1.413, 1.399, 1.382, 1.369,
        1.361, 1.356, 1.359, 1.401, 1.86,
        1.851, 1.844, 1.838, 1.832, 1.826,
        1.82, 1.814, 1.808, 1.802, 1.796,
        1.787, 1.775, 1.764, 1.753, 1.742,
        1.731, 1.72, 1.71, 1.699, 1.689,
        1.679, 1.669, 1.66, 1.65, 1.636,
        1.618, 1.601, 1.584, 1.568, 1.553,
        1.538, 1.524, 1.511, 1.498, 1.478,
        1.451, 1.428, 1.41, 1.394, 1.374,
        1.373, 1.993, 1.982, 1.974, 1.967,
        1.96, 1.953, 1.946, 1.938, 1.931,
        1.924, 1.917, 1.907, 1.894, 1.88,
        1.867, 1.854, 1.841, 1.828, 1.816,
        1.804, 1.792, 1.78, 1.768, 1.757,
        1.746, 1.729, 1.708, 1.687, 1.667,
        1.648, 1.629, 1.612, 1.595, 1.578,
        1.563, 1.537, 1.504, 1.475, 1.451,
        1.43, 1.402, 1.388, 2.146, 2.131,
        2.122, 2.113, 2.104, 2.095, 2.086,
        2.077, 2.068, 2.059, 2.051, 2.038,
        2.021, 2.004, 1.988, 1.972, 1.957,
        1.941, 1.926, 1.911, 1.897, 1.883,
        1.869, 1.855, 1.842, 1.822, 1.797,
        1.773, 1.749, 1.727, 1.706, 1.685,
        1.665, 1.647, 1.629, 1.599, 1.561,
        1.527, 1.497, 1.472, 1.431, 1.389,
        2.336, 2.319, 2.307, 2.296, 2.285,
        2.273, 2.262, 2.251, 2.24, 2.23,
        2.219, 2.203, 2.182, 2.162, 2.142,
        2.122, 2.103, 2.084, 2.065, 2.047,
        2.029, 2.012, 1.994, 1.978, 1.961,
        1.937, 1.906, 1.876, 1.848, 1.82,
        1.794, 1.769, 1.745, 1.722, 1.7,
        1.665, 1.618, 1.578, 1.543, 1.512,
        1.465, 1.42, 2.594, 2.571, 2.556,
        2.541, 2.526, 2.511, 2.497, 2.482,
        2.468, 2.453, 2.439, 2.419, 2.391,
        2.364, 2.338, 2.312, 2.287, 2.262,
        2.238, 2.214, 2.191, 2.168, 2.146,
        2.124, 2.103, 2.072, 2.032, 1.993,
        1.957, 1.922, 1.889, 1.857, 1.827,
        1.799, 1.772, 1.728, 1.672, 1.625,
        1.585, 1.552, 1.507, 1.482, 3.016,
        2.982, 2.959, 2.937, 2.915, 2.893,
        2.872, 2.851, 2.83, 2.809, 2.788,
        2.758, 2.718, 2.679, 2.641, 2.604,
        2.568, 2.533, 2.499, 2.465, 2.432,
        2.4, 2.369, 2.339, 2.309, 2.266,
        2.211, 2.16, 2.111, 2.064, 2.02,
        1.979, 1.94, 1.904, 1.87, 1.815,
        1.749, 1.694, 1.651, 1.618, 1.58,
        1.59, 4.054, 3.966, 3.909, 3.854,
        3.8, 3.747, 3.696, 3.646, 3.597,
        3.549, 3.503, 3.435, 3.348, 3.266,
        3.187, 3.112, 3.041, 2.974, 2.909,
        2.848, 2.79, 2.734, 2.681, 2.631,
        2.583, 2.516, 2.434, 2.36, 2.292,
        2.232, 2.178, 2.128, 2.084, 2.045,
        2.009, 1.955, 1.895, 1.85, 1.817,
        1.794, 1.769, 1.766, 6.752, 6.57,
        6.452, 6.337, 6.224, 6.113, 6.004,
        5.898, 5.795, 5.693, 5.594, 5.449,
        5.263, 5.085, 4.915, 4.752, 4.597,
        4.449, 4.308, 4.173, 4.045, 3.923,
        3.808, 3.697, 3.593, 3.446, 3.269,
        3.11, 2.969, 2.846, 2.738, 2.644,
        2.564, 2.497, 2.442, 2.372, 2.323,
        2.327, 2.374, 2.459, 2.718, 3.371,
        1.615, 1.605, 1.599, 1.593, 1.587,
        1.581, 1.575, 1.57, 1.564, 1.558,
        1.553, 1.545, 1.534, 1.524, 1.514,
        1.504, 1.494, 1.485, 1.476, 1.468,
        1.46, 1.452, 1.444, 1.437, 1.429,
        1.419, 1.407, 1.395, 1.385, 1.375,
        1.367, 1.36, 1.353, 1.348, 1.344,
        1.339, 1.336, 1.34, 1.349, 1.364,
        1.41, 1.537, 1.867, 1.856, 1.849,
        1.841, 1.834, 1.827, 1.82, 1.813,
        1.806, 1.799, 1.792, 1.782, 1.768,
        1.755, 1.742, 1.73, 1.718, 1.705,
        1.694, 1.682, 1.671, 1.66, 1.649,
        1.638, 1.628, 1.613, 1.594, 1.575,
        1.558, 1.542, 1.526, 1.512, 1.498,
        1.485, 1.474, 1.455, 1.433, 1.417,
        1.406, 1.401, 1.404, 1.458, 2.037,
        2.025, 2.017, 2.009, 2.001, 1.993,
        1.985, 1.977, 1.97, 1.962, 1.954,
        1.943, 1.928, 1.914, 1.899, 1.885,
        1.871, 1.858, 1.844, 1.831, 1.818,
        1.805, 1.793, 1.781, 1.769, 1.751,
        1.728, 1.707, 1.686, 1.666, 1.647,
        1.629, 1.612, 1.596, 1.58, 1.555,
        1.524, 1.498, 1.477, 1.462, 1.445,
        1.461, 2.206, 2.192, 2.183, 2.174,
        2.165, 2.156, 2.148, 2.139, 2.13,
        2.122, 2.113, 2.101, 2.084, 2.068,
        2.052, 2.037, 2.021, 2.006, 1.992,
        1.977, 1.963, 1.949, 1.935, 1.922,
        1.908, 1.889, 1.864, 1.84, 1.817,
        1.795, 1.773, 1.753, 1.733, 1.714,
        1.696, 1.666, 1.628, 1.593, 1.562,
        1.536, 1.492, 1.444, 2.401, 2.385,
        2.375, 2.365, 2.355, 2.346, 2.336,
        2.326, 2.317, 2.307, 2.298, 2.284,
        2.265, 2.247, 2.229, 2.212, 2.195,
        2.178, 2.161, 2.144, 2.128, 2.112,
        2.097, 2.081, 2.066, 2.044, 2.015,
        1.988, 1.961, 1.935, 1.91, 1.886,
        1.862, 1.84, 1.818, 1.782, 1.735,
        1.692, 1.653, 1.618, 1.559, 1.487,
        2.637, 2.62, 2.609, 2.599, 2.588,
        2.577, 2.567, 2.556, 2.546, 2.536,
        2.525, 2.51, 2.49, 2.47, 2.451,
        2.432, 2.413, 2.394, 2.376, 2.357,
        2.339, 2.322, 2.304, 2.287, 2.27,
        2.245, 2.213, 2.182, 2.151, 2.122,
        2.093, 2.065, 2.038, 2.012, 1.986,
        1.944, 1.887, 1.835, 1.787, 1.742,
        1.665, 1.561, 2.952, 2.935, 2.924,
        2.913, 2.902, 2.891, 2.879, 2.868,
        2.858, 2.847, 2.836, 2.82, 2.798,
        2.777, 2.756, 2.736, 2.715, 2.695,
        2.675, 2.655, 2.635, 2.616, 2.597,
        2.578, 2.559, 2.531, 2.495, 2.459,
        2.424, 2.39, 2.357, 2.325, 2.293,
        2.262, 2.233, 2.182, 2.114, 2.05,
        1.992, 1.938, 1.844, 1.721, 3.403,
        3.388, 3.378, 3.368, 3.359, 3.349,
        3.339, 3.33, 3.32, 3.311, 3.301,
        3.287, 3.268, 3.249, 3.231, 3.213,
        3.194, 3.176, 3.158, 3.14, 3.123,
        3.105, 3.088, 3.07, 3.053, 3.028,
        2.994, 2.961, 2.928, 2.896, 2.865,
        2.834, 2.803, 2.773, 2.743, 2.692,
        2.621, 2.554, 2.488, 2.425, 2.307,
        2.12, 4.386, 4.363, 4.347, 4.332,
        4.317, 4.302, 4.287, 4.272, 4.258,
        4.243, 4.229, 4.208, 4.18, 4.153,
        4.127, 4.101, 4.075, 4.051, 4.026,
        4.003, 3.979, 3.956, 3.934, 3.912,
        3.891, 3.86, 3.821, 3.783, 3.747,
        3.712, 3.68, 3.649, 3.62, 3.592,
        3.566, 3.524, 3.471, 3.427, 3.39,
        3.361, 3.323, 3.312, 6.918, 6.864,
        6.829, 6.794, 6.759, 6.724, 6.69,
        6.656, 6.623, 6.589, 6.556, 6.507,
        6.443, 6.38, 6.319, 6.258, 6.199,
        6.142, 6.085, 6.03, 5.976, 5.923,
        5.872, 5.821, 5.773, 5.702, 5.612,
        5.528, 5.449, 5.376, 5.308, 5.245,
        5.189, 5.138, 5.092, 5.027, 4.964,
        4.939, 4.953, 5.005, 5.233, 6.041
     ) ),
    jetCalibrationsHF = cms.vdouble(
        3.223, 2.14, 1.683, 1.364, 1.142,
        0.987, 0.879, 0.804, 0.752, 0.716,
        0.691, 0.667, 0.651, 0.644, 0.641,
        0.641, 0.641, 0.642, 0.644, 0.645,
        0.647, 0.648, 0.65, 0.651, 0.653,
        0.655, 0.658, 0.662, 0.665, 0.668,
        0.671, 0.674, 0.677, 0.681, 0.684,
        0.689, 0.697, 0.705, 0.713, 0.721,
        0.736, 0.764, 2.598, 1.813, 1.462,
        1.206, 1.019, 0.883, 0.783, 0.711,
        0.658, 0.62, 0.592, 0.564, 0.543,
        0.532, 0.526, 0.524, 0.523, 0.524,
        0.524, 0.525, 0.526, 0.527, 0.528,
        0.529, 0.53, 0.532, 0.534, 0.536,
        0.538, 0.541, 0.543, 0.545, 0.547,
        0.549, 0.552, 0.556, 0.561, 0.567,
        0.572, 0.578, 0.589, 0.608
    ),
    jetCalibrationsHGCal = cms.vdouble( (
        1.395, 1.394, 1.394, 1.394, 1.394,
        1.394, 1.393, 1.393, 1.393, 1.393,
        1.393, 1.393, 1.392, 1.392, 1.392,
        1.391, 1.391, 1.391, 1.39, 1.39,
        1.39, 1.389, 1.389, 1.389, 1.388,
        1.388, 1.387, 1.387, 1.386, 1.385,
        1.385, 1.384, 1.383, 1.383, 1.382,
        1.381, 1.379, 1.378, 1.376, 1.374,
        1.371, 1.365, 1.575, 1.574, 1.574,
        1.574, 1.574, 1.574, 1.573, 1.573,
        1.573, 1.573, 1.572, 1.572, 1.572,
        1.571, 1.571, 1.57, 1.57, 1.569,
        1.569, 1.569, 1.568, 1.568, 1.567,
        1.567, 1.566, 1.566, 1.565, 1.564,
        1.563, 1.562, 1.561, 1.56, 1.559,
        1.559, 1.558, 1.556, 1.554, 1.552,
        1.549, 1.547, 1.543, 1.535, 1.846,
        1.845, 1.845, 1.844, 1.844, 1.843,
        1.843, 1.842, 1.842, 1.841, 1.841,
        1.84, 1.839, 1.839, 1.838, 1.837,
        1.836, 1.835, 1.834, 1.833, 1.832,
        1.831, 1.83, 1.829, 1.829, 1.827,
        1.825, 1.824, 1.822, 1.82, 1.818,
        1.816, 1.814, 1.813, 1.811, 1.808,
        1.803, 1.799, 1.794, 1.79, 1.78,
        1.765, 3.377, 3.355, 3.341, 3.326,
        3.312, 3.298, 3.283, 3.269, 3.255,
        3.242, 3.228, 3.207, 3.18, 3.154,
        3.128, 3.102, 3.077, 3.051, 3.027,
        3.002, 2.979, 2.955, 2.932, 2.909,
        2.886, 2.853, 2.811, 2.769, 2.729,
        2.691, 2.654, 2.618, 2.584, 2.551,
        2.519, 2.467, 2.4, 2.341, 2.291,
        2.248, 2.186, 2.149, 1.085, 1.087,
        1.088, 1.089, 1.09, 1.091, 1.092,
        1.093, 1.094, 1.095, 1.097, 1.098,
        1.1, 1.103, 1.105, 1.107, 1.109,
        1.111, 1.113, 1.116, 1.118, 1.12,
        1.122, 1.124, 1.126, 1.13, 1.134,
        1.138, 1.143, 1.147, 1.151, 1.156,
        1.16, 1.164, 1.169, 1.176, 1.187,
        1.198, 1.209, 1.22, 1.242, 1.28,
        61.559, 11.087, 4.083, 1.971, 1.335,
        1.145, 1.09, 1.074, 1.072, 1.072,
        1.074, 1.078, 1.083, 1.088, 1.093,
        1.098, 1.103, 1.108, 1.112, 1.117,
        1.122, 1.127, 1.132, 1.137, 1.142,
        1.149, 1.159, 1.169, 1.179, 1.189,
        1.199, 1.209, 1.218, 1.228, 1.238,
        1.255, 1.28, 1.305, 1.329, 1.354,
        1.403, 1.49, 89.821, 15.567, 5.416,
        2.387, 1.485, 1.218, 1.14, 1.119,
        1.115, 1.116, 1.118, 1.123, 1.129,
        1.135, 1.141, 1.147, 1.153, 1.159,
        1.165, 1.171, 1.178, 1.184, 1.19,
        1.196, 1.202, 1.211, 1.223, 1.236,
        1.248, 1.26, 1.272, 1.284, 1.297,
        1.309, 1.321, 1.342, 1.373, 1.403,
        1.434, 1.464, 1.525, 1.632, 83.76,
        19.529, 8.102, 3.961, 2.461, 1.918,
        1.721, 1.65, 1.624, 1.615, 1.612,
        1.611, 1.611, 1.611, 1.612, 1.612,
        1.613, 1.613, 1.614, 1.614, 1.615,
        1.616, 1.616, 1.617, 1.617, 1.618,
        1.619, 1.62, 1.621, 1.622, 1.623,
        1.624, 1.625, 1.626, 1.628, 1.629,
        1.632, 1.635, 1.637, 1.64, 1.645,
        1.655, 1.262, 1.261, 1.26, 1.259,
        1.259, 1.258, 1.257, 1.256, 1.256,
        1.255, 1.254, 1.253, 1.252, 1.25,
        1.249, 1.247, 1.246, 1.244, 1.243,
        1.242, 1.24, 1.239, 1.237, 1.236,
        1.234, 1.232, 1.229, 1.226, 1.223,
        1.221, 1.218, 1.215, 1.212, 1.209,
        1.206, 1.201, 1.194, 1.186, 1.179,
        1.172, 1.157, 1.132, 1.328, 1.327,
        1.326, 1.326, 1.325, 1.325, 1.324,
        1.324, 1.323, 1.323, 1.322, 1.322,
        1.321, 1.32, 1.319, 1.318, 1.317,
        1.316, 1.315, 1.314, 1.313, 1.312,
        1.311, 1.31, 1.309, 1.308, 1.306,
        1.304, 1.302, 1.3, 1.298, 1.296,
        1.294, 1.292, 1.29, 1.287, 1.282,
        1.277, 1.272, 1.267, 1.257, 1.24,
        1.463, 1.461, 1.46, 1.459, 1.458,
        1.457, 1.456, 1.455, 1.454, 1.453,
        1.452, 1.451, 1.449, 1.447, 1.445,
        1.443, 1.44, 1.438, 1.436, 1.434,
        1.432, 1.43, 1.428, 1.426, 1.424,
        1.421, 1.417, 1.413, 1.409, 1.405,
        1.401, 1.397, 1.393, 1.389, 1.385,
        1.377, 1.367, 1.357, 1.347, 1.337,
        1.316, 1.281, 44.899, 14.731, 7.692,
        4.568, 3.18, 2.562, 2.285, 2.159,
        2.101, 2.072, 2.057, 2.043, 2.031,
        2.021, 2.011, 2.001, 1.991, 1.982,
        1.972, 1.962, 1.952, 1.942, 1.932,
        1.922, 1.912, 1.897, 1.878, 1.858,
        1.838, 1.818, 1.798, 1.779, 1.759,
        1.739, 1.719, 1.685, 1.635, 1.586,
        1.536, 1.487, 1.387, 1.214
     ) ),
    jetPtBins = cms.vdouble(
        0.0, 5.0, 7.5, 10.0, 12.5,
        15.0, 17.5, 20.0, 22.5, 25.0,
        27.5, 30.0, 35.0, 40.0, 45.0,
        50.0, 55.0, 60.0, 65.0, 70.0,
        75.0, 80.0, 85.0, 90.0, 95.0,
        100.0, 110.0, 120.0, 130.0, 140.0,
        150.0, 160.0, 170.0, 180.0, 190.0,
        200.0, 225.0, 250.0, 275.0, 300.0,
        325.0, 400.0, 500.0
    ),
    l1CaloTowers = cms.InputTag("l1tTowerCalibrationProducer","L1CaloTowerCalibratedCollection"),
    tauAbsEtaBinsBarrel = cms.vdouble(0.0, 0.3, 0.6, 1.0, 1.5),
    tauAbsEtaBinsHGCal = cms.vdouble(1.5, 1.9, 2.4, 3.0),
    tauCalibrationsBarrel = cms.vdouble( (
        1.917, 1.714, 1.605, 1.514, 1.437,
        1.344, 1.252, 1.188, 1.142, 1.11,
        1.087, 1.071, 1.059, 1.051, 1.044,
        1.038, 1.034, 1.032, 1.032, 1.856,
        1.729, 1.655, 1.589, 1.53, 1.453,
        1.369, 1.301, 1.248, 1.205, 1.17,
        1.143, 1.121, 1.103, 1.084, 1.066,
        1.05, 1.037, 1.034, 2.053, 1.884,
        1.788, 1.702, 1.627, 1.53, 1.426,
        1.345, 1.282, 1.233, 1.194, 1.164,
        1.141, 1.122, 1.102, 1.084, 1.07,
        1.059, 1.057, 1.783, 1.659, 1.588,
        1.524, 1.466, 1.391, 1.309, 1.244,
        1.191, 1.149, 1.116, 1.089, 1.068,
        1.05, 1.031, 1.013, 0.998, 0.986,
        0.983, 1.896, 1.713, 1.613, 1.527,
        1.453, 1.362, 1.27, 1.202, 1.152,
        1.115, 1.088, 1.069, 1.054, 1.044,
        1.033, 1.024, 1.018, 1.015, 1.014,
        1.936, 1.677, 1.544, 1.437, 1.35,
        1.249, 1.156, 1.095, 1.055, 1.028,
        1.011, 1.0, 0.992, 0.987, 0.983,
        0.98, 0.978, 0.978, 0.978, 1.85,
        1.683, 1.59, 1.509, 1.439, 1.351,
        1.258, 1.188, 1.135, 1.096, 1.065,
        1.043, 1.025, 1.012, 0.999, 0.987,
        0.979, 0.973, 0.972, 2.066, 1.784,
        1.638, 1.517, 1.418, 1.301, 1.189,
        1.114, 1.063, 1.029, 1.006, 0.99,
        0.979, 0.972, 0.965, 0.961, 0.958,
        0.957, 0.957, 1.074, 1.063, 1.056,
        1.05, 1.043, 1.034, 1.022, 1.011,
        1.001, 0.992, 0.983, 0.974, 0.966,
        0.959, 0.949, 0.937, 0.921, 0.895,
        0.874, 2.053, 1.757, 1.609, 1.489,
        1.394, 1.285, 1.186, 1.123, 1.083,
        1.057, 1.04, 1.029, 1.022, 1.018,
        1.014, 1.012, 1.01, 1.01, 1.01,
        1.733, 1.628, 1.567, 1.513, 1.463,
        1.399, 1.328, 1.27, 1.224, 1.187,
        1.157, 1.133, 1.114, 1.098, 1.081,
        1.064, 1.05, 1.038, 1.035, 2.009,
        1.852, 1.762, 1.682, 1.611, 1.518,
        1.417, 1.337, 1.274, 1.224, 1.184,
        1.153, 1.128, 1.108, 1.086, 1.066,
        1.049, 1.036, 1.033, 1.806, 1.669,
        1.591, 1.522, 1.461, 1.382, 1.296,
        1.23, 1.177, 1.136, 1.103, 1.078,
        1.058, 1.043, 1.025, 1.01, 0.998,
        0.988, 0.986, 1.944, 1.725, 1.609,
        1.512, 1.431, 1.334, 1.239, 1.173,
        1.126, 1.094, 1.071, 1.056, 1.045,
        1.037, 1.03, 1.024, 1.021, 1.019,
        1.019, 1.9, 1.631, 1.496, 1.389,
        1.304, 1.208, 1.122, 1.068, 1.034,
        1.012, 0.999, 0.99, 0.984, 0.981,
        0.978, 0.976, 0.975, 0.975, 0.975,
        1.682, 1.577, 1.516, 1.46, 1.409,
        1.342, 1.266, 1.203, 1.152, 1.109,
        1.075, 1.046, 1.022, 1.003, 0.98,
        0.958, 0.937, 0.918, 0.913, 1.928,
        1.693, 1.569, 1.466, 1.381, 1.28,
        1.183, 1.116, 1.07, 1.038, 1.016,
        1.001, 0.991, 0.984, 0.977, 0.973,
        0.97, 0.969, 0.969, 1.067, 1.058,
        1.052, 1.047, 1.041, 1.033, 1.023,
        1.014, 1.005, 0.997, 0.989, 0.981,
        0.974, 0.968, 0.959, 0.948, 0.933,
        0.908, 0.886, 1.883, 1.663, 1.548,
        1.453, 1.375, 1.282, 1.193, 1.133,
        1.091, 1.063, 1.044, 1.031, 1.022,
        1.016, 1.01, 1.006, 1.004, 1.003,
        1.003, 1.688, 1.595, 1.541, 1.492,
        1.448, 1.39, 1.325, 1.271, 1.228,
        1.193, 1.164, 1.14, 1.121, 1.105,
        1.087, 1.07, 1.055, 1.041, 1.037,
        2.251, 2.02, 1.891, 1.779, 1.682,
        1.561, 1.434, 1.339, 1.267, 1.213,
        1.173, 1.142, 1.119, 1.102, 1.084,
        1.069, 1.058, 1.051, 1.05, 1.799,
        1.654, 1.572, 1.501, 1.438, 1.359,
        1.275, 1.211, 1.162, 1.125, 1.096,
        1.074, 1.057, 1.044, 1.03, 1.019,
        1.009, 1.003, 1.002, 1.78, 1.63,
        1.547, 1.475, 1.413, 1.335, 1.254,
        1.193, 1.148, 1.114, 1.089, 1.07,
        1.056, 1.045, 1.034, 1.025, 1.018,
        1.014, 1.013, 1.75, 1.549, 1.445,
        1.359, 1.288, 1.205, 1.126, 1.072,
        1.036, 1.012, 0.995, 0.984, 0.976,
        0.971, 0.966, 0.963, 0.961, 0.96,
        0.96, 1.736, 1.61, 1.537, 1.472,
        1.414, 1.339, 1.257, 1.192, 1.141,
        1.1, 1.067, 1.041, 1.021, 1.005,
        0.986, 0.97, 0.956, 0.945, 0.942,
        1.961, 1.712, 1.582, 1.474, 1.386,
        1.281, 1.181, 1.114, 1.068, 1.036,
        1.015, 1.001, 0.991, 0.984, 0.978,
        0.974, 0.971, 0.97, 0.97, 1.065,
        1.056, 1.051, 1.046, 1.04, 1.033,
        1.023, 1.014, 1.005, 0.997, 0.989,
        0.982, 0.974, 0.968, 0.958, 0.946,
        0.93, 0.9, 0.872, 2.047, 1.81,
        1.683, 1.575, 1.485, 1.375, 1.266,
        1.188, 1.133, 1.094, 1.066, 1.046,
        1.032, 1.022, 1.012, 1.005, 1.0,
        0.998, 0.997, 2.022, 1.861, 1.768,
        1.686, 1.613, 1.519, 1.418, 1.338,
        1.275, 1.226, 1.187, 1.157, 1.133,
        1.114, 1.093, 1.074, 1.059, 1.047,
        1.045, 2.503, 2.236, 2.087, 1.956,
        1.843, 1.699, 1.548, 1.434, 1.347,
        1.281, 1.231, 1.192, 1.164, 1.142,
        1.118, 1.099, 1.084, 1.074, 1.072,
        2.253, 2.007, 1.872, 1.755, 1.654,
        1.529, 1.401, 1.305, 1.235, 1.182,
        1.143, 1.115, 1.093, 1.078, 1.061,
        1.048, 1.039, 1.033, 1.033, 2.228,
        2.01, 1.888, 1.782, 1.69, 1.574,
        1.453, 1.361, 1.292, 1.239, 1.2,
        1.17, 1.147, 1.13, 1.112, 1.097,
        1.085, 1.078, 1.077, 2.527, 2.136,
        1.934, 1.769, 1.633, 1.475, 1.326,
        1.226, 1.159, 1.114, 1.084, 1.064,
        1.051, 1.042, 1.034, 1.028, 1.025,
        1.024, 1.024, 2.097, 1.908, 1.801,
        1.706, 1.622, 1.514, 1.398, 1.308,
        1.238, 1.183, 1.14, 1.106, 1.08,
        1.06, 1.038, 1.018, 1.002, 0.991,
        0.988, 2.479, 2.106, 1.912, 1.753,
        1.623, 1.47, 1.326, 1.229, 1.163,
        1.12, 1.09, 1.07, 1.057, 1.048,
        1.04, 1.034, 1.031, 1.029, 1.029,
        2.097, 1.906, 1.796, 1.699, 1.612,
        1.5, 1.378, 1.281, 1.205, 1.145,
        1.098, 1.06, 1.031, 1.007, 0.981,
        0.958, 0.939, 0.923, 0.92
     ) ),
    tauCalibrationsHGCal = cms.vdouble(
        1.665, 1.556, 1.495, 1.443, 1.398,
        1.342, 1.285, 1.242, 1.211, 1.188,
        1.17, 1.158, 1.148, 1.141, 1.134,
        1.128, 1.124, 1.122, 1.121, 1.646,
        1.525, 1.459, 1.402, 1.353, 1.293,
        1.231, 1.186, 1.153, 1.129, 1.112,
        1.099, 1.089, 1.082, 1.075, 1.069,
        1.065, 1.063, 1.063, 1.826, 1.63,
        1.528, 1.444, 1.376, 1.294, 1.218,
        1.166, 1.13, 1.107, 1.091, 1.08,
        1.072, 1.067, 1.063, 1.06, 1.058,
        1.057, 1.057, 2.031, 1.762, 1.624,
        1.514, 1.424, 1.321, 1.226, 1.164,
        1.124, 1.098, 1.081, 1.069, 1.062,
        1.057, 1.053, 1.05, 1.049, 1.048,
        1.048, 1.396, 1.328, 1.291, 1.259,
        1.232, 1.198, 1.164, 1.139, 1.12,
        1.107, 1.097, 1.089, 1.084, 1.08,
        1.076, 1.073, 1.071, 1.07, 1.07,
        1.242, 1.214, 1.197, 1.182, 1.168,
        1.149, 1.128, 1.111, 1.097, 1.085,
        1.075, 1.067, 1.06, 1.055, 1.048,
        1.042, 1.036, 1.03, 1.029, 1.491,
        1.368, 1.305, 1.253, 1.211, 1.161,
        1.115, 1.084, 1.064, 1.05, 1.041,
        1.035, 1.031, 1.028, 1.026, 1.024,
        1.023, 1.023, 1.023, 1.348, 1.289,
        1.255, 1.225, 1.199, 1.165, 1.127,
        1.098, 1.075, 1.057, 1.043, 1.031,
        1.022, 1.016, 1.008, 1.001, 0.995,
        0.991, 0.99, 1.422, 1.373, 1.345,
        1.32, 1.297, 1.266, 1.232, 1.205,
        1.183, 1.165, 1.15, 1.138, 1.128,
        1.12, 1.111, 1.102, 1.095, 1.088,
        1.086, 1.35, 1.322, 1.304, 1.288,
        1.272, 1.25, 1.224, 1.201, 1.18,
        1.162, 1.146, 1.132, 1.119, 1.108,
        1.093, 1.078, 1.061, 1.038, 1.026,
        1.44, 1.373, 1.334, 1.3, 1.27,
        1.231, 1.189, 1.155, 1.129, 1.108,
        1.092, 1.079, 1.069, 1.061, 1.053,
        1.045, 1.038, 1.033, 1.032, 1.356,
        1.317, 1.293, 1.271, 1.25, 1.221,
        1.186, 1.156, 1.129, 1.105, 1.085,
        1.067, 1.051, 1.037, 1.019, 1.0,
        0.98, 0.954, 0.941
    ),
    tauL1egInfoBarrel = cms.VPSet(
        cms.PSet(
            l1egCount = cms.double(0.0),
            l1egEmFractions = cms.vdouble(0.0, 0.091, 0.317, 1.05)
        ),
        cms.PSet(
            l1egCount = cms.double(1.0),
            l1egEmFractions = cms.vdouble(0.0, 0.634, 0.888, 1.05)
        ),
        cms.PSet(
            l1egCount = cms.double(2.0),
            l1egEmFractions = cms.vdouble(0.0, 0.821, 0.957, 1.05)
        )
    ),
    tauL1egInfoHGCal = cms.VPSet(cms.PSet(
        l1egCount = cms.double(0.0),
        l1egEmFractions = cms.vdouble(0.0, 0.473, 0.72, 0.894, 1.05)
    )),
    tauPtBins = cms.vdouble(
        0.0, 5.0, 7.5, 10.0, 12.5,
        15.0, 20.0, 25.0, 30.0, 35.0,
        40.0, 45.0, 50.0, 55.0, 60.0,
        70.0, 80.0, 100.0, 150.0, 200.0
    )
)


process.l1tEGammaClusterEmuProducer = cms.EDProducer("L1EGCrystalClusterEmulatorProducer",
    calib = cms.PSet(
        etaBins = cms.vdouble(
            0.087, 0.174, 0.261, 0.348, 0.435,
            0.522, 0.609, 0.696, 0.783, 0.87,
            0.957, 1.044, 1.131, 1.218, 1.305,
            1.392, 1.479
        ),
        ptBins = cms.vdouble(
            12, 20, 30, 40, 55,
            90, 1000000.0
        ),
        scale = cms.vdouble(
            1.298, 1.287, 1.309, 1.298, 1.309,
            1.309, 1.309, 1.298, 1.309, 1.298,
            1.309, 1.309, 1.309, 1.32, 1.309,
            1.32, 1.309, 1.1742, 1.1639, 1.1639,
            1.1639, 1.1639, 1.1639, 1.1639, 1.1742,
            1.1742, 1.1639, 1.1639, 1.1742, 1.1639,
            1.1639, 1.1742, 1.1742, 1.1536000000000002, 1.11,
            1.11, 1.11, 1.11, 1.11, 1.11,
            1.11, 1.11, 1.11, 1.11, 1.11,
            1.11, 1.11, 1.11, 1.11, 1.11,
            1.1, 1.09, 1.09, 1.09, 1.09,
            1.09, 1.09, 1.09, 1.09, 1.09,
            1.09, 1.09, 1.09, 1.09, 1.09,
            1.09, 1.09, 1.09, 1.07, 1.07,
            1.07, 1.07, 1.07, 1.07, 1.07,
            1.08, 1.07, 1.07, 1.08, 1.08,
            1.07, 1.08, 1.08, 1.08, 1.08,
            1.06, 1.06, 1.06, 1.06, 1.05,
            1.05, 1.06, 1.06, 1.06, 1.06,
            1.06, 1.06, 1.06, 1.06, 1.06,
            1.06, 1.06, 1.04, 1.04, 1.04,
            1.04, 1.05, 1.04, 1.05, 1.05,
            1.05, 1.05, 1.05, 1.05, 1.05,
            1.05, 1.05, 1.05, 1.05
        )
    ),
    ecalTPEB = cms.InputTag("simEcalEBTriggerPrimitiveDigis"),
    hcalTP = cms.InputTag("simHcalTriggerPrimitiveDigis")
)


process.l1tFwdMuonsGmt = cms.EDProducer("Phase2L1TGMTFwdMuonTranslator",
    emtfTracks = cms.InputTag("simEmtfDigisPhase2"),
    omtfTracks = cms.InputTag("simOmtfPhase2Digis","OMTF"),
    stubs = cms.InputTag("l1tStubsGmt","tps")
)


process.l1tGMTFilteredMuons = cms.EDProducer("Phase2L1TGMTFilter",
    applyLowPtFilter = cms.bool(True),
    etaBE = cms.double(0.9),
    ptBarrelMin = cms.int32(8),
    ptEndcapMin = cms.int32(8),
    srcMuons = cms.InputTag("l1tTkMuonsGmt")
)


process.l1tGTAlgoBlockProducer = cms.EDProducer("L1GTAlgoBlockProducer",
    algorithms = cms.VPSet(
        cms.PSet(
            expression = cms.string('pSingleTkMuon22')
        ),
        cms.PSet(
            expression = cms.string('pDoubleTkMuon15_7')
        ),
        cms.PSet(
            expression = cms.string('pTripleTkMuon5_3_3')
        ),
        cms.PSet(
            expression = cms.string('pSingleEGEle51')
        ),
        cms.PSet(
            expression = cms.string('pDoubleEGEle37_24')
        ),
        cms.PSet(
            expression = cms.string('pIsoTkEleEGEle22_12')
        ),
        cms.PSet(
            expression = cms.string('pSingleTkEle36')
        ),
        cms.PSet(
            expression = cms.string('pSingleIsoTkEle28')
        ),
        cms.PSet(
            expression = cms.string('pSingleIsoTkPho36')
        ),
        cms.PSet(
            expression = cms.string('pDoubleTkEle25_12')
        ),
        cms.PSet(
            expression = cms.string('pDoubleIsoTkPho22_12')
        ),
        cms.PSet(
            expression = cms.string('pDoublePuppiTau52_52')
        ),
        cms.PSet(
            expression = cms.string('pSinglePuppiJet230')
        ),
        cms.PSet(
            expression = cms.string('pDoublePuppiJet112_112')
        ),
        cms.PSet(
            expression = cms.string('pDoublePuppiJet160_35_mass620')
        ),
        cms.PSet(
            expression = cms.string('pPuppiHT450')
        ),
        cms.PSet(
            expression = cms.string('pPuppiMHT140')
        ),
        cms.PSet(
            expression = cms.string('pPuppiMET200')
        ),
        cms.PSet(
            expression = cms.string('pPuppiHT400 and pQuadJet70_55_40_40'),
            name = cms.string('pPuppiHT400_pQuadJet70_55_40_40')
        ),
        cms.PSet(
            expression = cms.string('pTkMuonTkIsoEle7_20')
        ),
        cms.PSet(
            expression = cms.string('pTkMuonTkEle7_23')
        ),
        cms.PSet(
            expression = cms.string('pTkEleTkMuon10_20')
        ),
        cms.PSet(
            expression = cms.string('pTkMuonDoubleTkEle6_17_17')
        ),
        cms.PSet(
            expression = cms.string('pDoubleTkMuonTkEle5_5_9')
        ),
        cms.PSet(
            expression = cms.string('pPuppiTauTkMuon42_18')
        ),
        cms.PSet(
            expression = cms.string('pPuppiTauTkIsoEle45_22')
        ),
        cms.PSet(
            expression = cms.string('pTkMuonPuppiHT6_320')
        ),
        cms.PSet(
            expression = cms.string('pTkMuTriPuppiJet_12_40_dRMax_DoubleJet_dEtaMax')
        ),
        cms.PSet(
            expression = cms.string('pTkMuPuppiJetPuppiMet_3_110_120')
        ),
        cms.PSet(
            expression = cms.string('pDoubleTkMuPuppiJetPuppiMet_3_3_60_130')
        ),
        cms.PSet(
            expression = cms.string('pDoubleTkMuPuppiHT_3_3_300')
        ),
        cms.PSet(
            expression = cms.string('pDoubleTkElePuppiHT_8_8_390')
        ),
        cms.PSet(
            expression = cms.string('pTkEleIsoPuppiHT_26_190')
        ),
        cms.PSet(
            expression = cms.string('pTkElePuppiJet_28_40_MinDR')
        ),
        cms.PSet(
            expression = cms.string('pNNPuppiTauPuppiMet_55_190')
        ),
        cms.PSet(
            expression = cms.string('pDoubleTkMuon_OS_Er1p5_Dr1p4')
        ),
        cms.PSet(
            expression = cms.string('pDoubleTkMuon_4_4_OS_Dr1p2')
        ),
        cms.PSet(
            expression = cms.string('pDoubleTkMuon_4p5_4p5_OS_Er2_Mass7to18')
        ),
        cms.PSet(
            expression = cms.string('TripleTkMuon_5_3_0_DoubleTkMuon_5_3_OS_MassTo9')
        ),
        cms.PSet(
            expression = cms.string('TripleTkMuon_5_3p5_2p5_OS_Mass5to17')
        )
    )
)


process.l1tGTProducer = cms.EDProducer("L1GTProducer",
    CL2Electrons = cms.InputTag("l1tLayer2EG","L1CtTkElectron"),
    CL2EtSum = cms.InputTag("l1tMETPFProducer"),
    CL2HtSum = cms.InputTag("l1tSC4PFL1PuppiCorrectedEmulatorMHT"),
    CL2JetsSC4 = cms.InputTag("l1tSC4PFL1PuppiCorrectedEmulator"),
    CL2JetsSC8 = cms.InputTag("l1tSC8PFL1PuppiCorrectedEmulator"),
    CL2Photons = cms.InputTag("l1tLayer2EG","L1CtTkEm"),
    CL2Taus = cms.InputTag("l1tNNTauProducerPuppi","L1PFTausNN"),
    GMTSaDisplacedMuons = cms.InputTag("l1tSAMuonsGmt","displaced"),
    GMTSaPromptMuons = cms.InputTag("l1tSAMuonsGmt","prompt"),
    GMTTkMuons = cms.InputTag("l1tTkMuonsGmt"),
    GTTDisplacedJets = cms.InputTag("l1tTrackJetsExtendedEmulation","L1TrackJetsExtended"),
    GTTPrimaryVert = cms.InputTag("l1tVertexFinderEmulator","L1VerticesEmulation"),
    GTTPromptJets = cms.InputTag("l1tTrackJetsEmulation","L1TrackJets"),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    )
)


process.l1tGTTInputProducer = cms.EDProducer("L1GTTInputProducer",
    debug = cms.int32(0),
    l1TracksInputTag = cms.InputTag("l1tTTTracksFromTrackletEmulation","Level1TTTracks"),
    outputCollectionName = cms.string('Level1TTTracksConverted'),
    setTrackWordBits = cms.bool(True)
)


process.l1tGTTInputProducerExtended = cms.EDProducer("L1GTTInputProducer",
    debug = cms.int32(0),
    l1TracksInputTag = cms.InputTag("l1tTTTracksFromExtendedTrackletEmulation","Level1TTTracks"),
    outputCollectionName = cms.string('Level1TTTracksExtendedConverted'),
    setTrackWordBits = cms.bool(True)
)


process.l1tHFnoseVFEProducer = cms.EDProducer("HFNoseVFEProducer",
    ProcessorParameters = cms.PSet(
        ProcessorName = cms.string('HGCalVFEProcessorSums'),
        calibrationCfg_ee = cms.PSet(
            chargeCollectionEfficiency = cms.PSet(
                refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
            ),
            dEdXweights = cms.vdouble(
                0, 9.205, 0, 22.259999999999998, 0,
                22.259999999999998, 0, 22.259999999999998, 0, 22.259999999999998,
                0, 22.259999999999998, 0, 22.259999999999998, 0,
                22.259999999999998, 0, 22.259999999999998, 0, 26.4,
                0, 26.4, 0, 26.4, 0,
                26.4, 0, 95.41000000000001, 60.7, 60.7,
                60.7, 60.7, 60.7, 60.7, 60.7,
                60.7, 60.7, 71.89, 83.08, 83.255,
                83.52000000000001, 83.61, 83.61, 83.61, 83.61,
                83.61, 83.61, 83.61
            ),
            fCperMIP = cms.vdouble(2.06, 3.43, 5.15),
            lsb = cms.double(0.09765625),
            thicknessCorrection = cms.vdouble(0.75, 0.76, 0.75)
        ),
        calibrationCfg_hesc = cms.PSet(
            chargeCollectionEfficiency = cms.PSet(
                values = cms.vdouble(1.0)
            ),
            dEdXweights = cms.vdouble(
                0, 9.205, 0, 22.259999999999998, 0,
                22.259999999999998, 0, 22.259999999999998, 0, 22.259999999999998,
                0, 22.259999999999998, 0, 22.259999999999998, 0,
                22.259999999999998, 0, 22.259999999999998, 0, 26.4,
                0, 26.4, 0, 26.4, 0,
                26.4, 0, 95.41000000000001, 60.7, 60.7,
                60.7, 60.7, 60.7, 60.7, 60.7,
                60.7, 60.7, 71.89, 83.08, 83.255,
                83.52000000000001, 83.61, 83.61, 83.61, 83.61,
                83.61, 83.61, 83.61
            ),
            fCperMIP = cms.vdouble(1.0),
            lsb = cms.double(0.067138671875),
            thicknessCorrection = cms.vdouble(0.69)
        ),
        calibrationCfg_hesi = cms.PSet(
            chargeCollectionEfficiency = cms.PSet(
                refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
            ),
            dEdXweights = cms.vdouble(
                0, 9.205, 0, 22.259999999999998, 0,
                22.259999999999998, 0, 22.259999999999998, 0, 22.259999999999998,
                0, 22.259999999999998, 0, 22.259999999999998, 0,
                22.259999999999998, 0, 22.259999999999998, 0, 26.4,
                0, 26.4, 0, 26.4, 0,
                26.4, 0, 95.41000000000001, 60.7, 60.7,
                60.7, 60.7, 60.7, 60.7, 60.7,
                60.7, 60.7, 71.89, 83.08, 83.255,
                83.52000000000001, 83.61, 83.61, 83.61, 83.61,
                83.61, 83.61, 83.61
            ),
            fCperMIP = cms.vdouble(2.06, 3.43, 5.15),
            lsb = cms.double(0.09765625),
            thicknessCorrection = cms.vdouble(0.85, 0.85, 0.84)
        ),
        calibrationCfg_nose = cms.PSet(
            chargeCollectionEfficiency = cms.PSet(
                refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
            ),
            dEdXweights = cms.vdouble(
                0.0, 39.500245, 39.756638, 39.756638, 39.756638,
                39.756638, 66.020266, 92.283895, 92.283895
            ),
            fCperMIP = cms.vdouble(1.25, 2.57, 3.88),
            lsb = cms.double(0.09765625),
            thicknessCorrection = cms.vdouble(1.132, 1.092, 1.084)
        ),
        compressionCfg_hdm = cms.PSet(
            exponentBits = cms.uint32(4),
            mantissaBits = cms.uint32(3),
            rounding = cms.bool(True),
            truncationBits = cms.uint32(3)
        ),
        compressionCfg_ldm = cms.PSet(
            exponentBits = cms.uint32(4),
            mantissaBits = cms.uint32(3),
            rounding = cms.bool(True),
            truncationBits = cms.uint32(1)
        ),
        linearizationCfg_sc = cms.PSet(
            adcnBits = cms.uint32(10),
            adcsaturation = cms.double(68.75),
            linLSB = cms.double(0.067138671875),
            linnBits = cms.uint32(17),
            oot_coefficients = cms.vdouble(0.0, 0.0),
            tdcOnset = cms.double(55),
            tdcnBits = cms.uint32(12),
            tdcsaturation = cms.double(1000)
        ),
        linearizationCfg_si = cms.PSet(
            adcnBits = cms.uint32(10),
            adcsaturation = cms.double(100),
            linLSB = cms.double(0.09765625),
            linnBits = cms.uint32(17),
            oot_coefficients = cms.vdouble(0.0, 0.0),
            tdcOnset = cms.double(60),
            tdcnBits = cms.uint32(12),
            tdcsaturation = cms.double(10000)
        ),
        summationCfg = cms.PSet(
            noiseScintillator = cms.PSet(
                refToPSet_ = cms.string('HGCAL_noise_heback')
            ),
            noiseSilicon = cms.PSet(
                refToPSet_ = cms.string('HGCAL_noise_fC')
            ),
            noiseThreshold = cms.double(3),
            scintillatorCellLSB_MIP = cms.double(0.067138671875),
            siliconCellLSB_fC = cms.double(0.09765625)
        )
    ),
    noseDigis = cms.InputTag("simHFNoseUnsuppressedDigis","HFNose")
)


process.l1tHGCalBackEndLayer1Producer = cms.EDProducer("HGCalBackendLayer1Producer",
    InputTriggerCells = cms.InputTag("l1tHGCalConcentratorProducer","HGCalConcentratorProcessorSelection"),
    ProcessorParameters = cms.PSet(
        C2d_parameters = cms.PSet(
            applyLayerCalibration = cms.bool(False),
            calibSF_cluster = cms.double(1.0),
            clusterType = cms.string('dummyC2d'),
            layerWeights = cms.vdouble(
                0.0, 0.0183664, 0.0, 0.0305622, 0.0,
                0.0162589, 0.0, 0.0143918, 0.0, 0.0134475,
                0.0, 0.0185754, 0.0, 0.0204934, 0.0,
                0.016901, 0.0, 0.0207958, 0.0, 0.0167985,
                0.0, 0.0238385, 0.0, 0.0301146, 0.0,
                0.0274622, 0.0, 0.0468671, 0.0, 0.078819,
                0.0555831, 0.0609312, 0.0610768, 0.0657626, 0.0465653,
                0.0629383, 0.0610061, 0.0517326, 0.0492882, 0.0699336,
                0.0673457, 0.119896, 0.125327, 0.143235, 0.153295,
                0.104777, 0.109345, 0.161386, 0.174656, 0.108053,
                0.121674, 0.1171, 0.328053
            )
        ),
        ProcessorName = cms.string('HGCalBackendLayer1Processor2DClustering')
    )
)


process.l1tHGCalBackEndLayer1ProducerHFNose = cms.EDProducer("HGCalBackendLayer1Producer",
    InputTriggerCells = cms.InputTag("l1tHGCalConcentratorProducerHFNose","HGCalConcentratorProcessorSelection"),
    ProcessorParameters = cms.PSet(
        C2d_parameters = cms.PSet(
            applyLayerCalibration = cms.bool(False),
            calibSF_cluster = cms.double(1.0),
            clusterType = cms.string('dummyC2d'),
            layerWeights = cms.vdouble(
                0.0, 0.0183664, 0.0, 0.0305622, 0.0,
                0.0162589, 0.0, 0.0143918, 0.0, 0.0134475,
                0.0, 0.0185754, 0.0, 0.0204934, 0.0,
                0.016901, 0.0, 0.0207958, 0.0, 0.0167985,
                0.0, 0.0238385, 0.0, 0.0301146, 0.0,
                0.0274622, 0.0, 0.0468671, 0.0, 0.078819,
                0.0555831, 0.0609312, 0.0610768, 0.0657626, 0.0465653,
                0.0629383, 0.0610061, 0.0517326, 0.0492882, 0.0699336,
                0.0673457, 0.119896, 0.125327, 0.143235, 0.153295,
                0.104777, 0.109345, 0.161386, 0.174656, 0.108053,
                0.121674, 0.1171, 0.328053
            )
        ),
        ProcessorName = cms.string('HGCalBackendLayer1Processor2DClustering')
    )
)


process.l1tHGCalBackEndLayer2Producer = cms.EDProducer("HGCalBackendLayer2Producer",
    InputCluster = cms.InputTag("l1tHGCalBackEndLayer1Producer","HGCalBackendLayer1Processor2DClustering"),
    ProcessorParameters = cms.PSet(
        C3d_parameters = cms.PSet(
            histoMax_C3d_clustering_parameters = cms.PSet(
                AlgoName = cms.string('HGCalHistoClusteringWrapper'),
                EGIdentification = cms.PSet(
                    CategoriesEtaMax = cms.vdouble(2.7, 3.0),
                    CategoriesEtaMin = cms.vdouble(1.5, 2.7),
                    CategoriesPtMax = cms.vdouble(1000000.0, 1000000.0),
                    CategoriesPtMin = cms.vdouble(0.0, 0.0),
                    Inputs = cms.vstring(
                        'cl3d_coreshowerlength',
                        'cl3d_showerlength',
                        'cl3d_firstlayer',
                        'cl3d_maxlayer',
                        'cl3d_szz',
                        'cl3d_srrmean',
                        'cl3d_srrtot',
                        'cl3d_seetot',
                        'cl3d_spptot'
                    ),
                    Weights = cms.vstring(
                        'L1Trigger/L1THGCal/data/egamma_id_histomax_3151_loweta_v0.xml',
                        'L1Trigger/L1THGCal/data/egamma_id_histomax_3151_higheta_v0.xml'
                    ),
                    WorkingPoints = cms.VPSet(
                        cms.PSet(
                            Name = cms.string('tight'),
                            WorkingPoint = cms.vdouble(0.8292287, 0.9932326)
                        ),
                        cms.PSet(
                            Name = cms.string('loose'),
                            WorkingPoint = cms.vdouble(-0.7099538, 0.9611762)
                        )
                    )
                ),
                cluster_association = cms.string('NearestNeighbour'),
                dR_multicluster = cms.double(0.0),
                dR_multicluster_byLayer_coefficientA = cms.vdouble(
                    0, 0.015, 0.015, 0.015, 0.015,
                    0.015, 0.015, 0.015, 0.02, 0.02,
                    0.02, 0.02, 0.02, 0.02, 0.02,
                    0.03, 0.03, 0.03, 0.03, 0.03,
                    0.03, 0.03, 0.04, 0.04, 0.04,
                    0.04, 0.04, 0.04, 0.04, 0.04,
                    0.04, 0.04, 0.04, 0.04, 0.04,
                    0.05, 0.05, 0.05, 0.05, 0.05,
                    0.05, 0.05, 0.05, 0.05, 0.05,
                    0.05, 0.05, 0.05, 0.05, 0.05,
                    0.05, 0.05, 0.05
                ),
                dR_multicluster_byLayer_coefficientB = cms.vdouble(
                    0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0,
                    0, 0, 0
                ),
                minPt_multicluster = cms.double(0.5),
                shape_distance = cms.double(0.015),
                shape_threshold = cms.double(1.0)
            ),
            histoMax_C3d_seeding_parameters = cms.PSet(
                binSumsHisto = cms.vuint32(
                    13, 11, 11, 11, 9,
                    9, 9, 7, 7, 7,
                    7, 7, 7, 5, 5,
                    5, 5, 5, 5, 5,
                    5, 5, 5, 5, 5,
                    5, 5, 5, 3, 3,
                    3, 3, 3, 3, 3,
                    3, 3, 3, 3, 3,
                    3, 3
                ),
                kROverZMax = cms.double(0.58),
                kROverZMin = cms.double(0.076),
                nBins_X1_histo_multicluster = cms.uint32(42),
                nBins_X2_histo_multicluster = cms.uint32(216),
                neighbour_weights = cms.vdouble(
                    0, 0.25, 0, 0.25, 0,
                    0.25, 0, 0.25, 0
                ),
                seed_position = cms.string('TCWeighted'),
                seed_smoothing_ecal = cms.vdouble(
                    1.0, 1.0, 1.0, 1.0, 1.1,
                    1.0, 1.0, 1.0, 1.0
                ),
                seed_smoothing_hcal = cms.vdouble(
                    1.0, 1.0, 1.0, 1.0, 1.0,
                    1.0, 1.0, 1.0, 1.0, 1.0,
                    1.0, 1.0, 2.0, 1.0, 1.0,
                    1.0, 1.0, 1.0, 1.0, 1.0,
                    1.0, 1.0, 1.0, 1.0, 1.0
                ),
                seeding_space = cms.string('RPhi'),
                seeds_norm_by_area = cms.bool(False),
                threshold_histo_multicluster = cms.double(20.0),
                type_histoalgo = cms.string('HistoMaxC3d')
            ),
            histoMax_C3d_sorting_truncation_parameters = cms.PSet(
                AlgoName = cms.string('HGCalSortingTruncationWrapper'),
                maxTCs = cms.uint32(80)
            ),
            type_multicluster = cms.string('Histo')
        ),
        ProcessorName = cms.string('HGCalBackendLayer2Processor3DClustering'),
        energy_interpretations = cms.VPSet(cms.PSet(
            dr_bylayer = cms.vdouble(
                0.015, 0.015, 0.015, 0.015, 0.015,
                0.015, 0.015, 0.015, 0.015, 0.015,
                0.015, 0.015, 0.015, 0.015, 0.015
            ),
            layer_containment_corrs = cms.vdouble(
                0.0, 0.0, 1.28, 1.09, 1.0,
                1.07, 1.09, 1.04, 1.0, 1.09,
                1.07, 1.03, 0.93, 1.4, 1.89
            ),
            scale_correction_coeff = cms.vdouble(52.99, -24.96),
            type = cms.string('HGCalTriggerClusterInterpretationEM')
        ))
    )
)


process.l1tHGCalBackEndLayer2ProducerHFNose = cms.EDProducer("HGCalBackendLayer2Producer",
    InputCluster = cms.InputTag("l1tHGCalBackEndLayer1ProducerHFNose","HGCalBackendLayer1Processor2DClustering"),
    ProcessorParameters = cms.PSet(
        C3d_parameters = cms.PSet(
            histoMax_C3d_clustering_parameters = cms.PSet(
                AlgoName = cms.string('HGCalHistoClusteringWrapper'),
                EGIdentification = cms.PSet(
                    CategoriesEtaMax = cms.vdouble(2.7, 3.0),
                    CategoriesEtaMin = cms.vdouble(1.5, 2.7),
                    CategoriesPtMax = cms.vdouble(1000000.0, 1000000.0),
                    CategoriesPtMin = cms.vdouble(0.0, 0.0),
                    Inputs = cms.vstring(
                        'cl3d_coreshowerlength',
                        'cl3d_showerlength',
                        'cl3d_firstlayer',
                        'cl3d_maxlayer',
                        'cl3d_szz',
                        'cl3d_srrmean',
                        'cl3d_srrtot',
                        'cl3d_seetot',
                        'cl3d_spptot'
                    ),
                    Weights = cms.vstring(
                        'L1Trigger/L1THGCal/data/egamma_id_histomax_3151_loweta_v0.xml',
                        'L1Trigger/L1THGCal/data/egamma_id_histomax_3151_higheta_v0.xml'
                    ),
                    WorkingPoints = cms.VPSet(
                        cms.PSet(
                            Name = cms.string('tight'),
                            WorkingPoint = cms.vdouble(0.8292287, 0.9932326)
                        ),
                        cms.PSet(
                            Name = cms.string('loose'),
                            WorkingPoint = cms.vdouble(-0.7099538, 0.9611762)
                        )
                    )
                ),
                cluster_association = cms.string('NearestNeighbour'),
                dR_multicluster = cms.double(0.0),
                dR_multicluster_byLayer_coefficientA = cms.vdouble(
                    0, 0.015, 0.015, 0.015, 0.015,
                    0.015, 0.015, 0.015, 0.02, 0.02,
                    0.02, 0.02, 0.02, 0.02, 0.02,
                    0.03, 0.03, 0.03, 0.03, 0.03,
                    0.03, 0.03, 0.04, 0.04, 0.04,
                    0.04, 0.04, 0.04, 0.04, 0.04,
                    0.04, 0.04, 0.04, 0.04, 0.04,
                    0.05, 0.05, 0.05, 0.05, 0.05,
                    0.05, 0.05, 0.05, 0.05, 0.05,
                    0.05, 0.05, 0.05, 0.05, 0.05,
                    0.05, 0.05, 0.05
                ),
                dR_multicluster_byLayer_coefficientB = cms.vdouble(
                    0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0,
                    0, 0, 0
                ),
                minPt_multicluster = cms.double(0.5),
                shape_distance = cms.double(0.015),
                shape_threshold = cms.double(1.0)
            ),
            histoMax_C3d_seeding_parameters = cms.PSet(
                binSumsHisto = cms.vuint32(13, 11, 9, 9),
                kROverZMax = cms.double(0.1),
                kROverZMin = cms.double(0.025),
                nBins_X1_histo_multicluster = cms.uint32(4),
                nBins_X2_histo_multicluster = cms.uint32(216),
                neighbour_weights = cms.vdouble(
                    0, 0.25, 0, 0.25, 0,
                    0.25, 0, 0.25, 0
                ),
                seed_position = cms.string('TCWeighted'),
                seed_smoothing_ecal = cms.vdouble(
                    1.0, 1.0, 1.0, 1.0, 1.1,
                    1.0, 1.0, 1.0, 1.0
                ),
                seed_smoothing_hcal = cms.vdouble(
                    1.0, 1.0, 1.0, 1.0, 1.0,
                    1.0, 1.0, 1.0, 1.0, 1.0,
                    1.0, 1.0, 2.0, 1.0, 1.0,
                    1.0, 1.0, 1.0, 1.0, 1.0,
                    1.0, 1.0, 1.0, 1.0, 1.0
                ),
                seeding_space = cms.string('RPhi'),
                seeds_norm_by_area = cms.bool(False),
                threshold_histo_multicluster = cms.double(20.0),
                type_histoalgo = cms.string('HistoMaxC3d')
            ),
            histoMax_C3d_sorting_truncation_parameters = cms.PSet(
                AlgoName = cms.string('HGCalSortingTruncationWrapper'),
                maxTCs = cms.uint32(80)
            ),
            type_multicluster = cms.string('Histo')
        ),
        ProcessorName = cms.string('HGCalBackendLayer2Processor3DClustering'),
        energy_interpretations = cms.VPSet(cms.PSet(
            dr_bylayer = cms.vdouble(
                0.015, 0.015, 0.015, 0.015, 0.015,
                0.015, 0.015, 0.015, 0.015, 0.015,
                0.015, 0.015, 0.015, 0.015, 0.015
            ),
            layer_containment_corrs = cms.vdouble(
                0.0, 0.0, 1.28, 1.09, 1.0,
                1.07, 1.09, 1.04, 1.0, 1.09,
                1.07, 1.03, 0.93, 1.4, 1.89
            ),
            scale_correction_coeff = cms.vdouble(52.99, -24.96),
            type = cms.string('HGCalTriggerClusterInterpretationEM')
        ))
    )
)


process.l1tHGCalBackEndStage1Producer = cms.EDProducer("HGCalBackendStage1Producer",
    C2d_parameters = cms.PSet(
        applyLayerCalibration = cms.bool(False),
        calibSF_cluster = cms.double(1.0),
        clusterType = cms.string('dummyC2d'),
        layerWeights = cms.vdouble(
            0.0, 0.0183664, 0.0, 0.0305622, 0.0,
            0.0162589, 0.0, 0.0143918, 0.0, 0.0134475,
            0.0, 0.0185754, 0.0, 0.0204934, 0.0,
            0.016901, 0.0, 0.0207958, 0.0, 0.0167985,
            0.0, 0.0238385, 0.0, 0.0301146, 0.0,
            0.0274622, 0.0, 0.0468671, 0.0, 0.078819,
            0.0555831, 0.0609312, 0.0610768, 0.0657626, 0.0465653,
            0.0629383, 0.0610061, 0.0517326, 0.0492882, 0.0699336,
            0.0673457, 0.119896, 0.125327, 0.143235, 0.153295,
            0.104777, 0.109345, 0.161386, 0.174656, 0.108053,
            0.121674, 0.1171, 0.328053
        )
    ),
    InputTriggerCells = cms.InputTag("l1tHGCalConcentratorProducer","HGCalConcentratorProcessorSelection"),
    ProcessorParameters = cms.PSet(
        ProcessorName = cms.string('HGCalBackendStage1Processor'),
        truncation_parameters = cms.PSet(
            AlgoName = cms.string('HGCalStage1TruncationWrapper'),
            doTruncation = cms.bool(True),
            maxTcsPerBin = cms.vuint32(
                2, 7, 27, 24, 19,
                17, 16, 15, 14, 14,
                13, 13, 13, 12, 12,
                12, 11, 11, 11, 10,
                10, 10, 10, 10, 9,
                9, 10, 9, 9, 9,
                8, 8, 7, 5, 3,
                3, 3, 3, 3, 3,
                3, 3
            ),
            phiSectorEdges = cms.vdouble(
                0.98901991, 0.72722052, 0.6981317, 0.87266463, 0.93084227,
                0.90175345, 0.87266463, 0.90175345, 0.95993109, 0.95993109,
                0.93084227, 0.93084227, 0.95993109, 0.98901991, 0.95993109,
                0.95993109, 0.95993109, 0.98901991, 0.98901991, 0.95993109,
                0.95993109, 0.98901991, 0.98901991, 0.98901991, 0.98901991,
                0.98901991, 1.01810873, 0.98901991, 0.98901991, 0.98901991,
                0.98901991, 0.98901991, 0.98901991, 0.98901991, 1.04719755,
                1.04719755, 1.04719755, 1.04719755, 1.01810873, 1.04719755,
                1.01810873, 1.01810873
            ),
            rozBins = cms.uint32(42),
            rozMax = cms.double(0.55508006),
            rozMin = cms.double(0.07587128)
        )
    )
)


process.l1tHGCalBackEndStage2Producer = cms.EDProducer("HGCalBackendLayer2Producer",
    InputCluster = cms.InputTag("l1tHGCalBackEndStage1Producer","HGCalBackendStage1Processor"),
    ProcessorParameters = cms.PSet(
        C3d_parameters = cms.PSet(
            histoMax_C3d_clustering_parameters = cms.PSet(
                AlgoName = cms.string('HGCalHistoClusteringWrapper'),
                EGIdentification = cms.PSet(
                    CategoriesEtaMax = cms.vdouble(2.7, 3.0),
                    CategoriesEtaMin = cms.vdouble(1.5, 2.7),
                    CategoriesPtMax = cms.vdouble(1000000.0, 1000000.0),
                    CategoriesPtMin = cms.vdouble(0.0, 0.0),
                    Inputs = cms.vstring(
                        'cl3d_coreshowerlength',
                        'cl3d_showerlength',
                        'cl3d_firstlayer',
                        'cl3d_maxlayer',
                        'cl3d_szz',
                        'cl3d_srrmean',
                        'cl3d_srrtot',
                        'cl3d_seetot',
                        'cl3d_spptot'
                    ),
                    Weights = cms.vstring(
                        'L1Trigger/L1THGCal/data/egamma_id_histomax_3151_loweta_v0.xml',
                        'L1Trigger/L1THGCal/data/egamma_id_histomax_3151_higheta_v0.xml'
                    ),
                    WorkingPoints = cms.VPSet(
                        cms.PSet(
                            Name = cms.string('tight'),
                            WorkingPoint = cms.vdouble(0.8292287, 0.9932326)
                        ),
                        cms.PSet(
                            Name = cms.string('loose'),
                            WorkingPoint = cms.vdouble(-0.7099538, 0.9611762)
                        )
                    )
                ),
                cluster_association = cms.string('NearestNeighbour'),
                dR_multicluster = cms.double(0.0),
                dR_multicluster_byLayer_coefficientA = cms.vdouble(
                    0, 0.015, 0.015, 0.015, 0.015,
                    0.015, 0.015, 0.015, 0.02, 0.02,
                    0.02, 0.02, 0.02, 0.02, 0.02,
                    0.03, 0.03, 0.03, 0.03, 0.03,
                    0.03, 0.03, 0.04, 0.04, 0.04,
                    0.04, 0.04, 0.04, 0.04, 0.04,
                    0.04, 0.04, 0.04, 0.04, 0.04,
                    0.05, 0.05, 0.05, 0.05, 0.05,
                    0.05, 0.05, 0.05, 0.05, 0.05,
                    0.05, 0.05, 0.05, 0.05, 0.05,
                    0.05, 0.05, 0.05
                ),
                dR_multicluster_byLayer_coefficientB = cms.vdouble(
                    0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0,
                    0, 0, 0
                ),
                minPt_multicluster = cms.double(0.5),
                shape_distance = cms.double(0.015),
                shape_threshold = cms.double(1.0)
            ),
            histoMax_C3d_seeding_parameters = cms.PSet(
                binSumsHisto = cms.vuint32(
                    13, 11, 11, 11, 9,
                    9, 9, 7, 7, 7,
                    7, 7, 7, 5, 5,
                    5, 5, 5, 5, 5,
                    5, 5, 5, 5, 5,
                    5, 5, 5, 3, 3,
                    3, 3, 3, 3, 3,
                    3, 3, 3, 3, 3,
                    3, 3
                ),
                kROverZMax = cms.double(0.58),
                kROverZMin = cms.double(0.076),
                nBins_X1_histo_multicluster = cms.uint32(42),
                nBins_X2_histo_multicluster = cms.uint32(216),
                neighbour_weights = cms.vdouble(
                    0, 0.25, 0, 0.25, 0,
                    0.25, 0, 0.25, 0
                ),
                seed_position = cms.string('TCWeighted'),
                seed_smoothing_ecal = cms.vdouble(
                    1.0, 1.0, 1.0, 1.0, 1.1,
                    1.0, 1.0, 1.0, 1.0
                ),
                seed_smoothing_hcal = cms.vdouble(
                    1.0, 1.0, 1.0, 1.0, 1.0,
                    1.0, 1.0, 1.0, 1.0, 1.0,
                    1.0, 1.0, 2.0, 1.0, 1.0,
                    1.0, 1.0, 1.0, 1.0, 1.0,
                    1.0, 1.0, 1.0, 1.0, 1.0
                ),
                seeding_space = cms.string('RPhi'),
                seeds_norm_by_area = cms.bool(False),
                threshold_histo_multicluster = cms.double(20.0),
                type_histoalgo = cms.string('HistoMaxC3d')
            ),
            histoMax_C3d_sorting_truncation_parameters = cms.PSet(
                AlgoName = cms.string('HGCalSortingTruncationWrapper'),
                maxTCs = cms.uint32(80)
            ),
            type_multicluster = cms.string('Histo')
        ),
        ProcessorName = cms.string('HGCalBackendLayer2Processor3DClustering'),
        energy_interpretations = cms.VPSet(cms.PSet(
            dr_bylayer = cms.vdouble(
                0.015, 0.015, 0.015, 0.015, 0.015,
                0.015, 0.015, 0.015, 0.015, 0.015,
                0.015, 0.015, 0.015, 0.015, 0.015
            ),
            layer_containment_corrs = cms.vdouble(
                0.0, 0.0, 1.28, 1.09, 1.0,
                1.07, 1.09, 1.04, 1.0, 1.09,
                1.07, 1.03, 0.93, 1.4, 1.89
            ),
            scale_correction_coeff = cms.vdouble(52.99, -24.96),
            type = cms.string('HGCalTriggerClusterInterpretationEM')
        ))
    )
)


process.l1tHGCalConcentratorProducer = cms.EDProducer("HGCalConcentratorProducer",
    InputTriggerCells = cms.InputTag("l1tHGCalVFEProducer","HGCalVFEProcessorSums"),
    InputTriggerSums = cms.InputTag("l1tHGCalVFEProducer","HGCalVFEProcessorSums"),
    ProcessorParameters = cms.PSet(
        Method = cms.vstring(
            'thresholdSelect',
            'thresholdSelect',
            'thresholdSelect'
        ),
        ProcessorName = cms.string('HGCalConcentratorProcessorSelection'),
        allTrigCellsInTrigSums = cms.bool(True),
        coarsenTriggerCells = cms.vuint32(0, 0, 0),
        ctcSize = cms.vuint32(
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2
        ),
        fixedDataSizePerHGCROC = cms.bool(False),
        threshold_scintillator = cms.double(1.35),
        threshold_silicon = cms.double(1.35)
    )
)


process.l1tHGCalConcentratorProducerHFNose = cms.EDProducer("HGCalConcentratorProducer",
    InputTriggerCells = cms.InputTag("l1tHFnoseVFEProducer","HGCalVFEProcessorSums"),
    InputTriggerSums = cms.InputTag("l1tHFnoseVFEProducer","HGCalVFEProcessorSums"),
    ProcessorParameters = cms.PSet(
        Method = cms.vstring(
            'thresholdSelect',
            'thresholdSelect',
            'thresholdSelect'
        ),
        ProcessorName = cms.string('HGCalConcentratorProcessorSelection'),
        allTrigCellsInTrigSums = cms.bool(True),
        coarsenTriggerCells = cms.vuint32(0, 0, 0),
        ctcSize = cms.vuint32(
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2, 2, 2, 2,
            2, 2
        ),
        fixedDataSizePerHGCROC = cms.bool(False),
        threshold_scintillator = cms.double(1.35),
        threshold_silicon = cms.double(1.35)
    )
)


process.l1tHGCalEnergySplitTowerMapProducer = cms.EDProducer("HGCalTowerMapProducer",
    InputTriggerSums = cms.InputTag("l1tHGCalConcentratorProducer","HGCalConcentratorProcessorSelection"),
    ProcessorParameters = cms.PSet(
        ProcessorName = cms.string('HGCalTowerMapProcessor'),
        towermap_parameters = cms.PSet(
            AlgoName = cms.string('HGCalTowerMapsWrapper'),
            L1TTriggerTowerConfig = cms.PSet(
                binsEta = cms.vdouble(),
                binsPhi = cms.vdouble(),
                doNose = cms.bool(False),
                maxEta = cms.double(3.045),
                maxPhi = cms.double(3.141592653589793),
                minEta = cms.double(1.305),
                minPhi = cms.double(-3.141592653589793),
                moduleTowerMapping = cms.FileInPath('L1Trigger/L1THGCal/data/tower_per_module_silic8_scint16.txt'),
                nBinsEta = cms.int32(20),
                nBinsPhi = cms.int32(72),
                readMappingFile = cms.bool(False),
                splitModuleSum = cms.bool(True)
            ),
            layerWeights = cms.vdouble(),
            useLayerWeights = cms.bool(False)
        )
    )
)


process.l1tHGCalEnergySplitTowerProducer = cms.EDProducer("HGCalTowerProducer",
    InputTowerMaps = cms.InputTag("l1tHGCalEnergySplitTowerMapProducer","HGCalTowerMapProcessor"),
    InputTriggerCells = cms.InputTag("l1tHGCalBackEndLayer1Producer","HGCalBackendLayer1Processor2DClustering"),
    ProcessorParameters = cms.PSet(
        ProcessorName = cms.string('HGCalTowerProcessor'),
        includeTrigCells = cms.bool(False),
        towermap_parameters = cms.PSet(
            AlgoName = cms.string('HGCalTowerMapsWrapper'),
            L1TTriggerTowerConfig = cms.PSet(
                binsEta = cms.vdouble(),
                binsPhi = cms.vdouble(),
                doNose = cms.bool(False),
                maxEta = cms.double(3.0),
                maxPhi = cms.double(3.141592653589793),
                minEta = cms.double(1.479),
                minPhi = cms.double(-3.141592653589793),
                nBinsEta = cms.int32(18),
                nBinsPhi = cms.int32(72),
                readMappingFile = cms.bool(False),
                splitModuleSum = cms.bool(False)
            ),
            layerWeights = cms.vdouble(),
            useLayerWeights = cms.bool(False)
        )
    )
)


process.l1tHGCalTowerMapProducer = cms.EDProducer("HGCalTowerMapProducer",
    InputTriggerSums = cms.InputTag("l1tHGCalConcentratorProducer","HGCalConcentratorProcessorSelection"),
    ProcessorParameters = cms.PSet(
        ProcessorName = cms.string('HGCalTowerMapProcessor'),
        towermap_parameters = cms.PSet(
            AlgoName = cms.string('HGCalTowerMapsWrapper'),
            L1TTriggerTowerConfig = cms.PSet(
                binsEta = cms.vdouble(),
                binsPhi = cms.vdouble(),
                doNose = cms.bool(False),
                maxEta = cms.double(3.0),
                maxPhi = cms.double(3.141592653589793),
                minEta = cms.double(1.479),
                minPhi = cms.double(-3.141592653589793),
                nBinsEta = cms.int32(18),
                nBinsPhi = cms.int32(72),
                readMappingFile = cms.bool(False),
                splitModuleSum = cms.bool(False)
            ),
            layerWeights = cms.vdouble(),
            useLayerWeights = cms.bool(False)
        )
    )
)


process.l1tHGCalTowerMapProducerHFNose = cms.EDProducer("HGCalTowerMapProducer",
    InputTriggerSums = cms.InputTag("l1tHGCalConcentratorProducerHFNose","HGCalConcentratorProcessorSelection"),
    ProcessorParameters = cms.PSet(
        ProcessorName = cms.string('HGCalTowerMapProcessor'),
        towermap_parameters = cms.PSet(
            AlgoName = cms.string('HGCalTowerMapsWrapper'),
            L1TTriggerTowerConfig = cms.PSet(
                binsEta = cms.vdouble(),
                binsPhi = cms.vdouble(),
                doNose = cms.bool(True),
                maxEta = cms.double(4.2),
                maxPhi = cms.double(3.141592653589793),
                minEta = cms.double(3.0),
                minPhi = cms.double(-3.141592653589793),
                nBinsEta = cms.int32(18),
                nBinsPhi = cms.int32(72),
                readMappingFile = cms.bool(False),
                splitModuleSum = cms.bool(False)
            ),
            layerWeights = cms.vdouble(),
            useLayerWeights = cms.bool(False)
        )
    )
)


process.l1tHGCalTowerProducer = cms.EDProducer("HGCalTowerProducer",
    InputTowerMaps = cms.InputTag("l1tHGCalTowerMapProducer","HGCalTowerMapProcessor"),
    InputTriggerCells = cms.InputTag("l1tHGCalBackEndLayer1Producer","HGCalBackendLayer1Processor2DClustering"),
    ProcessorParameters = cms.PSet(
        ProcessorName = cms.string('HGCalTowerProcessor'),
        includeTrigCells = cms.bool(False),
        towermap_parameters = cms.PSet(
            AlgoName = cms.string('HGCalTowerMapsWrapper'),
            L1TTriggerTowerConfig = cms.PSet(
                binsEta = cms.vdouble(),
                binsPhi = cms.vdouble(),
                doNose = cms.bool(False),
                maxEta = cms.double(3.0),
                maxPhi = cms.double(3.141592653589793),
                minEta = cms.double(1.479),
                minPhi = cms.double(-3.141592653589793),
                nBinsEta = cms.int32(18),
                nBinsPhi = cms.int32(72),
                readMappingFile = cms.bool(False),
                splitModuleSum = cms.bool(False)
            ),
            layerWeights = cms.vdouble(),
            useLayerWeights = cms.bool(False)
        )
    )
)


process.l1tHGCalTowerProducerHFNose = cms.EDProducer("HGCalTowerProducer",
    InputTowerMaps = cms.InputTag("l1tHGCalTowerMapProducerHFNose","HGCalTowerMapProcessor"),
    InputTriggerCells = cms.InputTag("l1tHGCalBackEndLayer1ProducerHFNose","HGCalBackendLayer1Processor2DClustering"),
    ProcessorParameters = cms.PSet(
        ProcessorName = cms.string('HGCalTowerProcessor'),
        includeTrigCells = cms.bool(False),
        towermap_parameters = cms.PSet(
            AlgoName = cms.string('HGCalTowerMapsWrapper'),
            L1TTriggerTowerConfig = cms.PSet(
                binsEta = cms.vdouble(),
                binsPhi = cms.vdouble(),
                doNose = cms.bool(True),
                maxEta = cms.double(4.2),
                maxPhi = cms.double(3.141592653589793),
                minEta = cms.double(3.0),
                minPhi = cms.double(-3.141592653589793),
                nBinsEta = cms.int32(18),
                nBinsPhi = cms.int32(72),
                readMappingFile = cms.bool(False),
                splitModuleSum = cms.bool(False)
            ),
            layerWeights = cms.vdouble(),
            useLayerWeights = cms.bool(False)
        )
    )
)


process.l1tHGCalVFEProducer = cms.EDProducer("HGCalVFEProducer",
    ProcessorParameters = cms.PSet(
        ProcessorName = cms.string('HGCalVFEProcessorSums'),
        calibrationCfg_ee = cms.PSet(
            chargeCollectionEfficiency = cms.PSet(
                refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
            ),
            dEdXweights = cms.vdouble(
                0, 9.205, 0, 22.259999999999998, 0,
                22.259999999999998, 0, 22.259999999999998, 0, 22.259999999999998,
                0, 22.259999999999998, 0, 22.259999999999998, 0,
                22.259999999999998, 0, 22.259999999999998, 0, 26.4,
                0, 26.4, 0, 26.4, 0,
                26.4, 0, 95.41000000000001, 60.7, 60.7,
                60.7, 60.7, 60.7, 60.7, 60.7,
                60.7, 60.7, 71.89, 83.08, 83.255,
                83.52000000000001, 83.61, 83.61, 83.61, 83.61,
                83.61, 83.61, 83.61
            ),
            fCperMIP = cms.vdouble(2.06, 3.43, 5.15),
            lsb = cms.double(0.09765625),
            thicknessCorrection = cms.vdouble(0.75, 0.76, 0.75)
        ),
        calibrationCfg_hesc = cms.PSet(
            chargeCollectionEfficiency = cms.PSet(
                values = cms.vdouble(1.0)
            ),
            dEdXweights = cms.vdouble(
                0, 9.205, 0, 22.259999999999998, 0,
                22.259999999999998, 0, 22.259999999999998, 0, 22.259999999999998,
                0, 22.259999999999998, 0, 22.259999999999998, 0,
                22.259999999999998, 0, 22.259999999999998, 0, 26.4,
                0, 26.4, 0, 26.4, 0,
                26.4, 0, 95.41000000000001, 60.7, 60.7,
                60.7, 60.7, 60.7, 60.7, 60.7,
                60.7, 60.7, 71.89, 83.08, 83.255,
                83.52000000000001, 83.61, 83.61, 83.61, 83.61,
                83.61, 83.61, 83.61
            ),
            fCperMIP = cms.vdouble(1.0),
            lsb = cms.double(0.067138671875),
            thicknessCorrection = cms.vdouble(0.69)
        ),
        calibrationCfg_hesi = cms.PSet(
            chargeCollectionEfficiency = cms.PSet(
                refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
            ),
            dEdXweights = cms.vdouble(
                0, 9.205, 0, 22.259999999999998, 0,
                22.259999999999998, 0, 22.259999999999998, 0, 22.259999999999998,
                0, 22.259999999999998, 0, 22.259999999999998, 0,
                22.259999999999998, 0, 22.259999999999998, 0, 26.4,
                0, 26.4, 0, 26.4, 0,
                26.4, 0, 95.41000000000001, 60.7, 60.7,
                60.7, 60.7, 60.7, 60.7, 60.7,
                60.7, 60.7, 71.89, 83.08, 83.255,
                83.52000000000001, 83.61, 83.61, 83.61, 83.61,
                83.61, 83.61, 83.61
            ),
            fCperMIP = cms.vdouble(2.06, 3.43, 5.15),
            lsb = cms.double(0.09765625),
            thicknessCorrection = cms.vdouble(0.85, 0.85, 0.84)
        ),
        calibrationCfg_nose = cms.PSet(
            chargeCollectionEfficiency = cms.PSet(
                refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
            ),
            dEdXweights = cms.vdouble(
                0.0, 39.500245, 39.756638, 39.756638, 39.756638,
                39.756638, 66.020266, 92.283895, 92.283895
            ),
            fCperMIP = cms.vdouble(1.25, 2.57, 3.88),
            lsb = cms.double(0.09765625),
            thicknessCorrection = cms.vdouble(1.132, 1.092, 1.084)
        ),
        compressionCfg_hdm = cms.PSet(
            exponentBits = cms.uint32(4),
            mantissaBits = cms.uint32(3),
            rounding = cms.bool(True),
            truncationBits = cms.uint32(3)
        ),
        compressionCfg_ldm = cms.PSet(
            exponentBits = cms.uint32(4),
            mantissaBits = cms.uint32(3),
            rounding = cms.bool(True),
            truncationBits = cms.uint32(1)
        ),
        linearizationCfg_sc = cms.PSet(
            adcnBits = cms.uint32(10),
            adcsaturation = cms.double(68.75),
            linLSB = cms.double(0.067138671875),
            linnBits = cms.uint32(17),
            oot_coefficients = cms.vdouble(0.0, 0.0),
            tdcOnset = cms.double(55),
            tdcnBits = cms.uint32(12),
            tdcsaturation = cms.double(1000)
        ),
        linearizationCfg_si = cms.PSet(
            adcnBits = cms.uint32(10),
            adcsaturation = cms.double(100),
            linLSB = cms.double(0.09765625),
            linnBits = cms.uint32(17),
            oot_coefficients = cms.vdouble(0.0, 0.0),
            tdcOnset = cms.double(60),
            tdcnBits = cms.uint32(12),
            tdcsaturation = cms.double(10000)
        ),
        summationCfg = cms.PSet(
            noiseScintillator = cms.PSet(
                refToPSet_ = cms.string('HGCAL_noise_heback')
            ),
            noiseSilicon = cms.PSet(
                refToPSet_ = cms.string('HGCAL_noise_fC')
            ),
            noiseThreshold = cms.double(3),
            scintillatorCellLSB_MIP = cms.double(0.067138671875),
            siliconCellLSB_fC = cms.double(0.09765625)
        )
    ),
    bhDigis = cms.InputTag("simHGCalUnsuppressedDigis","HEback"),
    eeDigis = cms.InputTag("simHGCalUnsuppressedDigis","EE"),
    fhDigis = cms.InputTag("simHGCalUnsuppressedDigis","HEfront")
)


process.l1tHPSPFTauProducer = cms.EDProducer("L1HPSPFTauProducer",
    HW = cms.bool(True),
    debug = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    nTaus = cms.int32(16),
    srcL1PFCands = cms.InputTag("l1tLayer1","Puppi"),
    srcL1PFJets = cms.InputTag("l1tPhase1JetCalibrator9x9trimmed","Phase1L1TJetFromPfCandidates"),
    useJets = cms.bool(False)
)


process.l1tKMTFMuonsGmt = cms.EDProducer("Phase2L1TGMTKMTFProducer",
    Ndisplaced = cms.uint32(12),
    Nprompt = cms.uint32(12),
    algo = cms.PSet(
        aPhi = cms.vdouble(5.6533349391874275, 0.03477876333443834, 0.032506522838098864, 0.024752809174909053),
        aPhiB = cms.vdouble(-2.02, -0.2994087741381382, -0.4033668521165302, -0.3592231728688621),
        aPhiBNLO = cms.vdouble(9.04133e-05, 0, 0, 0),
        bPhi = cms.vdouble(-1, 0.18245, 0.20898, 0.17286),
        bPhiB = cms.vdouble(-1, 1.18245, 1.20898, 1.17286),
        chiSquareCutDisp = cms.vint32(),
        chiSquareCutDispPattern = cms.vint32(),
        chiSquareCutOffDisp = cms.vint32(),
        chiSquareCutOffPrompt = cms.vint32(),
        chiSquareCutPrompt = cms.vint32(),
        chiSquareCutPromptPattern = cms.vint32(),
        chiSquareDisp1 = cms.vdouble(0.241, 0.575, 0.892),
        chiSquareDisp2 = cms.vdouble(0.347, 0.707),
        chiSquareDisp3 = cms.vdouble(0.336),
        chiSquareErrADisp1 = cms.vint32(21, 23, 45),
        chiSquareErrADisp2 = cms.vint32(14, 28),
        chiSquareErrADisp3 = cms.vint32(29),
        chiSquareErrAPrompt1 = cms.vint32(21, 24, 33),
        chiSquareErrAPrompt2 = cms.vint32(18, 14),
        chiSquareErrAPrompt3 = cms.vint32(21),
        chiSquareErrBDisp1 = cms.vdouble(0.54, 0.805, 0.74),
        chiSquareErrBDisp2 = cms.vdouble(0.73, 0.9450000000000001),
        chiSquareErrBDisp3 = cms.vdouble(0.5),
        chiSquareErrBPrompt1 = cms.vdouble(0.045, 0.08, 0.06),
        chiSquareErrBPrompt2 = cms.vdouble(0.065, 0.275),
        chiSquareErrBPrompt3 = cms.vdouble(0.05),
        chiSquarePrompt1 = cms.vdouble(-0.323, -0.508, -0.578),
        chiSquarePrompt2 = cms.vdouble(-0.228, -0.343),
        chiSquarePrompt3 = cms.vdouble(-0.1),
        combos1 = cms.vint32(),
        combos2 = cms.vint32(3),
        combos3 = cms.vint32(5, 6, 7),
        combos4 = cms.vint32(
            9, 10, 11, 12, 13,
            14, 15
        ),
        curvResolution1 = cms.vdouble(1, 2360.97, 873.003, 258138.0),
        curvResolution2 = cms.vdouble(1, 4.903692, 48.7941, 0),
        eLoss = cms.vdouble(6.77765e-05, 0, 0, 0),
        etaLUT0 = cms.vdouble(8.946, 7.508, 6.279, 6.399),
        etaLUT1 = cms.vdouble(0.159, 0.116, 0.088, 0.128),
        initialK = cms.vdouble(-0.4576229536749278, -0.6364802777566145, -1.0305030909883524, -1.7272067322624118),
        initialK2 = cms.vdouble(-6.442002637356136e-05, -9.582709649965545e-05, -0.0002741064246218815, -0.0014910074450869175),
        lutFile = cms.string('L1Trigger/Phase2L1GMT/data/packedGainLUTs.root'),
        mScatteringPhi = cms.vdouble(0.1169021113298598, 0.00016777763395543814, 0.0004322078772344548, 0.00024985881710722107),
        mScatteringPhiB = cms.vdouble(0.0522762, 0.01762000062188365, 0.03508319015441297, 0.03126825551530328),
        phiAt2 = cms.double(0.17917991867483288),
        pointResolutionPhi = cms.double(1.0),
        pointResolutionPhiB = cms.double(12493.7429036),
        pointResolutionPhiBH = cms.vdouble(19925.62953113343, 15583.06791339368, 10258.11768352221, 15462.112839170433),
        pointResolutionPhiBL = cms.vdouble(161519.85395846734, 155051.58394241595, 149693.88179343447, 174896.46766622085),
        pointResolutionVertex = cms.double(1.0),
        useOfflineAlgo = cms.bool(False),
        verbose = cms.bool(False)
    ),
    stubs = cms.InputTag("l1tStubsGmt","kmtf"),
    verbose = cms.int32(0)
)


process.l1tLayer1 = cms.EDProducer("L1TPFCandMultiMerger",
    pfProducers = cms.VInputTag(cms.InputTag("l1tLayer1Barrel"), cms.InputTag("l1tLayer1HGCal"), cms.InputTag("l1tLayer1HGCalNoTK"), cms.InputTag("l1tLayer1HF"))
)


process.l1tLayer1Barrel = cms.EDProducer("L1TCorrelatorLayer1Producer",
    boards = cms.VPSet(
        cms.PSet(
            regions = cms.vuint32(
                0, 1, 2, 9, 10,
                11, 18, 19, 20, 27,
                28, 29, 36, 37, 38,
                45, 46, 47
            )
        ),
        cms.PSet(
            regions = cms.vuint32(
                3, 4, 5, 12, 13,
                14, 21, 22, 23, 30,
                31, 32, 39, 40, 41,
                48, 49, 50
            )
        ),
        cms.PSet(
            regions = cms.vuint32(
                6, 7, 8, 15, 16,
                17, 24, 25, 26, 33,
                34, 35, 42, 43, 44,
                51, 52, 53
            )
        )
    ),
    caloSectors = cms.VPSet(cms.PSet(
        etaBoundaries = cms.vdouble(-1.5, 1.5),
        phiSlices = cms.uint32(3)
    )),
    emClusters = cms.VInputTag(cms.InputTag("l1tPFClustersFromL1EGClusters","selected")),
    emPtCut = cms.double(0.5),
    hadClusters = cms.VInputTag(cms.InputTag("l1tPFClustersFromCombinedCaloHCal","calibrated")),
    hadPtCut = cms.double(1.0),
    muonInputConversionAlgo = cms.string('Emulator'),
    muons = cms.InputTag("l1tSAMuonsGmt","prompt"),
    nVtx = cms.int32(1),
    pfAlgo = cms.string('PFAlgo3'),
    pfAlgoParameters = cms.PSet(
        caloResolution = cms.PSet(
            etaBins = cms.vdouble(0.7, 1.2, 1.6),
            offset = cms.vdouble(2.909, 2.864, 0.294),
            scale = cms.vdouble(0.119, 0.127, 0.442)
        ),
        emCaloDR = cms.double(0.1),
        maxInvisiblePt = cms.double(10.0),
        nAllNeutral = cms.uint32(25),
        nCalo = cms.uint32(18),
        nEmCalo = cms.uint32(12),
        nMu = cms.uint32(2),
        nPhoton = cms.uint32(12),
        nSelCalo = cms.uint32(18),
        nTrack = cms.uint32(25),
        tightTrackMaxInvisiblePt = cms.double(20),
        trackCaloDR = cms.double(0.15),
        trackEmDR = cms.double(0.04),
        trackMuDR = cms.double(0.2)
    ),
    puAlgo = cms.string('LinearizedPuppi'),
    puAlgoParameters = cms.PSet(
        absEtaCuts = cms.vdouble(),
        alphaCrop = cms.vdouble(4),
        alphaSlopes = cms.vdouble(0.7),
        alphaZeros = cms.vdouble(6.0),
        dZ = cms.double(0.5),
        dr = cms.double(0.3),
        drMin = cms.double(0.07),
        finalSortAlgo = cms.string('Insertion'),
        nFinalSort = cms.uint32(18),
        nIn = cms.uint32(25),
        nOut = cms.uint32(25),
        nTrack = cms.uint32(22),
        nVtx = cms.uint32(1),
        priors = cms.vdouble(5.0),
        priorsPhoton = cms.vdouble(1.0),
        ptCut = cms.vdouble(1.0),
        ptMax = cms.double(50.0),
        ptSlopes = cms.vdouble(0.3),
        ptSlopesPhoton = cms.vdouble(0.3),
        ptZeros = cms.vdouble(4.0),
        ptZerosPhoton = cms.vdouble(2.5)
    ),
    regionizerAlgo = cms.string('Ideal'),
    regions = cms.VPSet(cms.PSet(
        etaBoundaries = cms.vdouble(
            -1.5, -1.0, -0.5, 0.0, 0.5,
            1.0, 1.5
        ),
        phiSlices = cms.uint32(9)
    )),
    tkEgAlgoParameters = cms.PSet(
        absEtaBoundaries = cms.vdouble(0.0, 0.9, 1.5),
        caloEtMin = cms.double(0.0),
        caloHwQual = cms.int32(4),
        compositeParametersTkEle = cms.PSet(
            loose_wp = cms.double(-0.181641),
            model = cms.string('L1Trigger/Phase2L1ParticleFlow/data/compositeID.json'),
            tight_wp = cms.double(0.0527344)
        ),
        dEtaMaxBrem = cms.double(0.02),
        dEtaValues = cms.vdouble(0.025, 0.015, 0.01),
        dPhiMaxBrem = cms.double(0.1),
        dPhiValues = cms.vdouble(0.07, 0.07, 0.07),
        doBremRecovery = cms.bool(False),
        doCompositeTkEle = cms.bool(False),
        doEndcapHwQual = cms.bool(False),
        doPfIso = cms.bool(True),
        doTkIso = cms.bool(True),
        filterHwQuality = cms.bool(False),
        hwIsoTypeTkEle = cms.uint32(0),
        hwIsoTypeTkEm = cms.uint32(0),
        nCompCandPerCluster = cms.uint32(3),
        nEMCALO_EGIN = cms.uint32(10),
        nEM_EGOUT = cms.uint32(10),
        nTRACK = cms.uint32(25),
        nTRACK_EGIN = cms.uint32(13),
        pfIsoParametersTkEle = cms.PSet(
            dRMax = cms.double(0.2),
            dRMin = cms.double(0.03),
            dZ = cms.double(0.6),
            tkQualityPtMin = cms.double(1.0)
        ),
        pfIsoParametersTkEm = cms.PSet(
            dRMax = cms.double(0.3),
            dRMin = cms.double(0.07),
            dZ = cms.double(0.6),
            tkQualityPtMin = cms.double(1.0)
        ),
        tkIsoParametersTkEle = cms.PSet(
            dRMax = cms.double(0.2),
            dRMin = cms.double(0.03),
            dZ = cms.double(0.6),
            tkQualityPtMin = cms.double(2.0)
        ),
        tkIsoParametersTkEm = cms.PSet(
            dRMax = cms.double(0.3),
            dRMin = cms.double(0.07),
            dZ = cms.double(0.6),
            tkQualityPtMin = cms.double(2.0)
        ),
        trkQualityPtMin = cms.double(10.0),
        writeBeforeBremRecovery = cms.bool(True),
        writeEGSta = cms.bool(False)
    ),
    tkEgSorterAlgo = cms.string('Barrel'),
    tkEgSorterParameters = cms.PSet(
        nObjSorted = cms.uint32(16),
        nObjToSort = cms.uint32(10)
    ),
    trackInputConversionAlgo = cms.string('Emulator'),
    trackInputConversionParameters = cms.PSet(
        dEtaBarrelBits = cms.uint32(8),
        dEtaBarrelZ0PostShift = cms.uint32(2),
        dEtaBarrelZ0PreShift = cms.uint32(2),
        dPhiBarrelBits = cms.uint32(4),
        dPhiBarrelRInvPostShift = cms.uint32(4),
        dPhiBarrelRInvPreShift = cms.uint32(4),
        etaLUTBits = cms.uint32(10),
        etaShift = cms.uint32(5),
        phiBits = cms.uint32(10),
        ptLUTBits = cms.uint32(11),
        region = cms.string('barrel'),
        slimDataFormat = cms.bool(True),
        z0Bits = cms.uint32(12)
    ),
    tracks = cms.InputTag("l1tPFTracksFromL1Tracks"),
    trkPtCut = cms.double(2.0),
    vtxCollection = cms.InputTag("l1tVertexFinderEmulator","L1VerticesEmulation")
)


process.l1tLayer1BarrelExtended = cms.EDProducer("L1TCorrelatorLayer1Producer",
    boards = cms.VPSet(
        cms.PSet(
            regions = cms.vuint32(
                0, 1, 2, 9, 10,
                11, 18, 19, 20, 27,
                28, 29, 36, 37, 38,
                45, 46, 47
            )
        ),
        cms.PSet(
            regions = cms.vuint32(
                3, 4, 5, 12, 13,
                14, 21, 22, 23, 30,
                31, 32, 39, 40, 41,
                48, 49, 50
            )
        ),
        cms.PSet(
            regions = cms.vuint32(
                6, 7, 8, 15, 16,
                17, 24, 25, 26, 33,
                34, 35, 42, 43, 44,
                51, 52, 53
            )
        )
    ),
    caloSectors = cms.VPSet(cms.PSet(
        etaBoundaries = cms.vdouble(-1.5, 1.5),
        phiSlices = cms.uint32(3)
    )),
    emClusters = cms.VInputTag(cms.InputTag("l1tPFClustersFromL1EGClusters","selected")),
    emPtCut = cms.double(0.5),
    hadClusters = cms.VInputTag(cms.InputTag("l1tPFClustersFromCombinedCaloHCal","calibrated")),
    hadPtCut = cms.double(1.0),
    muonInputConversionAlgo = cms.string('Emulator'),
    muons = cms.InputTag("l1tSAMuonsGmt","prompt"),
    nVtx = cms.int32(1),
    pfAlgo = cms.string('PFAlgo3'),
    pfAlgoParameters = cms.PSet(
        caloResolution = cms.PSet(
            etaBins = cms.vdouble(0.7, 1.2, 1.6),
            offset = cms.vdouble(2.909, 2.864, 0.294),
            scale = cms.vdouble(0.119, 0.127, 0.442)
        ),
        emCaloDR = cms.double(0.1),
        maxInvisiblePt = cms.double(10.0),
        nAllNeutral = cms.uint32(25),
        nCalo = cms.uint32(18),
        nEmCalo = cms.uint32(12),
        nMu = cms.uint32(2),
        nPhoton = cms.uint32(12),
        nSelCalo = cms.uint32(18),
        nTrack = cms.uint32(25),
        tightTrackMaxInvisiblePt = cms.double(20),
        trackCaloDR = cms.double(0.15),
        trackEmDR = cms.double(0.04),
        trackMuDR = cms.double(0.2)
    ),
    puAlgo = cms.string('LinearizedPuppi'),
    puAlgoParameters = cms.PSet(
        absEtaCuts = cms.vdouble(),
        alphaCrop = cms.vdouble(4),
        alphaSlopes = cms.vdouble(0.7),
        alphaZeros = cms.vdouble(6.0),
        dZ = cms.double(0.5),
        dr = cms.double(0.3),
        drMin = cms.double(0.07),
        finalSortAlgo = cms.string('Insertion'),
        nFinalSort = cms.uint32(18),
        nIn = cms.uint32(25),
        nOut = cms.uint32(25),
        nTrack = cms.uint32(22),
        nVtx = cms.uint32(1),
        priors = cms.vdouble(5.0),
        priorsPhoton = cms.vdouble(1.0),
        ptCut = cms.vdouble(1.0),
        ptMax = cms.double(50.0),
        ptSlopes = cms.vdouble(0.3),
        ptSlopesPhoton = cms.vdouble(0.3),
        ptZeros = cms.vdouble(4.0),
        ptZerosPhoton = cms.vdouble(2.5)
    ),
    regionizerAlgo = cms.string('Ideal'),
    regions = cms.VPSet(cms.PSet(
        etaBoundaries = cms.vdouble(
            -1.5, -1.0, -0.5, 0.0, 0.5,
            1.0, 1.5
        ),
        phiSlices = cms.uint32(9)
    )),
    tkEgAlgoParameters = cms.PSet(
        absEtaBoundaries = cms.vdouble(0.0, 0.9, 1.5),
        caloEtMin = cms.double(0.0),
        caloHwQual = cms.int32(4),
        compositeParametersTkEle = cms.PSet(
            loose_wp = cms.double(-0.181641),
            model = cms.string('L1Trigger/Phase2L1ParticleFlow/data/compositeID.json'),
            tight_wp = cms.double(0.0527344)
        ),
        dEtaMaxBrem = cms.double(0.02),
        dEtaValues = cms.vdouble(0.025, 0.015, 0.01),
        dPhiMaxBrem = cms.double(0.1),
        dPhiValues = cms.vdouble(0.07, 0.07, 0.07),
        doBremRecovery = cms.bool(False),
        doCompositeTkEle = cms.bool(False),
        doEndcapHwQual = cms.bool(False),
        doPfIso = cms.bool(True),
        doTkIso = cms.bool(True),
        filterHwQuality = cms.bool(False),
        hwIsoTypeTkEle = cms.uint32(0),
        hwIsoTypeTkEm = cms.uint32(0),
        nCompCandPerCluster = cms.uint32(3),
        nEMCALO_EGIN = cms.uint32(10),
        nEM_EGOUT = cms.uint32(10),
        nTRACK = cms.uint32(25),
        nTRACK_EGIN = cms.uint32(13),
        pfIsoParametersTkEle = cms.PSet(
            dRMax = cms.double(0.2),
            dRMin = cms.double(0.03),
            dZ = cms.double(0.6),
            tkQualityPtMin = cms.double(1.0)
        ),
        pfIsoParametersTkEm = cms.PSet(
            dRMax = cms.double(0.3),
            dRMin = cms.double(0.07),
            dZ = cms.double(0.6),
            tkQualityPtMin = cms.double(1.0)
        ),
        tkIsoParametersTkEle = cms.PSet(
            dRMax = cms.double(0.2),
            dRMin = cms.double(0.03),
            dZ = cms.double(0.6),
            tkQualityPtMin = cms.double(2.0)
        ),
        tkIsoParametersTkEm = cms.PSet(
            dRMax = cms.double(0.3),
            dRMin = cms.double(0.07),
            dZ = cms.double(0.6),
            tkQualityPtMin = cms.double(2.0)
        ),
        trkQualityPtMin = cms.double(10.0),
        writeBeforeBremRecovery = cms.bool(True),
        writeEGSta = cms.bool(False)
    ),
    tkEgSorterAlgo = cms.string('Barrel'),
    tkEgSorterParameters = cms.PSet(
        nObjSorted = cms.uint32(16),
        nObjToSort = cms.uint32(10)
    ),
    trackInputConversionAlgo = cms.string('Emulator'),
    trackInputConversionParameters = cms.PSet(
        dEtaBarrelBits = cms.uint32(8),
        dEtaBarrelZ0PostShift = cms.uint32(2),
        dEtaBarrelZ0PreShift = cms.uint32(2),
        dPhiBarrelBits = cms.uint32(4),
        dPhiBarrelRInvPostShift = cms.uint32(4),
        dPhiBarrelRInvPreShift = cms.uint32(4),
        etaLUTBits = cms.uint32(10),
        etaShift = cms.uint32(5),
        phiBits = cms.uint32(10),
        ptLUTBits = cms.uint32(11),
        region = cms.string('barrel'),
        slimDataFormat = cms.bool(True),
        z0Bits = cms.uint32(12)
    ),
    tracks = cms.InputTag("l1tPFTracksFromL1TracksExtended"),
    trkPtCut = cms.double(2.0),
    vtxCollection = cms.InputTag("l1tVertexFinderEmulator","L1VerticesEmulation")
)


process.l1tLayer1EG = cms.EDProducer("L1TEGMultiMerger",
    tkEgs = cms.VPSet(cms.PSet(
        instance = cms.string('L1EgEE'),
        pfProducers = cms.VInputTag(cms.InputTag("l1tLayer1HGCal","L1Eg"), cms.InputTag("l1tLayer1HGCalNoTK","L1Eg"))
    )),
    tkElectrons = cms.VPSet(
        cms.PSet(
            instance = cms.string('L1TkEleEE'),
            pfProducers = cms.VInputTag(cms.InputTag("l1tLayer1HGCal","L1TkEle"))
        ),
        cms.PSet(
            instance = cms.string('L1TkEleEB'),
            pfProducers = cms.VInputTag(cms.InputTag("l1tLayer1Barrel","L1TkEle"))
        )
    ),
    tkEms = cms.VPSet(
        cms.PSet(
            instance = cms.string('L1TkEmEE'),
            pfProducers = cms.VInputTag(cms.InputTag("l1tLayer1HGCal","L1TkEm"), cms.InputTag("l1tLayer1HGCalNoTK","L1TkEm"))
        ),
        cms.PSet(
            instance = cms.string('L1TkEmEB'),
            pfProducers = cms.VInputTag(cms.InputTag("l1tLayer1Barrel","L1TkEm"))
        )
    )
)


process.l1tLayer1EGElliptic = cms.EDProducer("L1TEGMultiMerger",
    tkEgs = cms.VPSet(cms.PSet(
        instance = cms.string('L1EgEE'),
        pfProducers = cms.VInputTag(cms.InputTag("l1tLayer1HGCalElliptic","L1Eg"), cms.InputTag("l1tLayer1HGCalNoTK","L1Eg"))
    )),
    tkElectrons = cms.VPSet(
        cms.PSet(
            instance = cms.string('L1TkEleEE'),
            pfProducers = cms.VInputTag(cms.InputTag("l1tLayer1HGCalElliptic","L1TkEle"))
        ),
        cms.PSet(
            instance = cms.string('L1TkEleEB'),
            pfProducers = cms.VInputTag(cms.InputTag("l1tLayer1Barrel","L1TkEle"))
        )
    ),
    tkEms = cms.VPSet(
        cms.PSet(
            instance = cms.string('L1TkEmEE'),
            pfProducers = cms.VInputTag(cms.InputTag("l1tLayer1HGCalElliptic","L1TkEm"), cms.InputTag("l1tLayer1HGCalNoTK","L1TkEm"))
        ),
        cms.PSet(
            instance = cms.string('L1TkEmEB'),
            pfProducers = cms.VInputTag(cms.InputTag("l1tLayer1Barrel","L1TkEm"))
        )
    )
)


process.l1tLayer1Extended = cms.EDProducer("L1TPFCandMultiMerger",
    pfProducers = cms.VInputTag("l1tLayer1BarrelExtended", "l1tLayer1HGCalExtended", "l1tLayer1HGCalNoTK", "l1tLayer1HF")
)


process.l1tLayer1HF = cms.EDProducer("L1TCorrelatorLayer1Producer",
    boards = cms.VPSet(),
    caloSectors = cms.VPSet(
        cms.PSet(
            etaBoundaries = cms.vdouble(-5.5, -3.0),
            phiSlices = cms.uint32(9)
        ),
        cms.PSet(
            etaBoundaries = cms.vdouble(3.0, 5.5),
            phiSlices = cms.uint32(9)
        )
    ),
    emPtCut = cms.double(0.5),
    hadClusters = cms.VInputTag(cms.InputTag("l1tPFClustersFromCombinedCaloHF","calibrated")),
    hadPtCut = cms.double(15.0),
    muons = cms.InputTag("l1tSAMuonsGmt","prompt"),
    nVtx = cms.int32(1),
    pfAlgo = cms.string('PFAlgoDummy'),
    pfAlgoParameters = cms.PSet(
        debug = cms.untracked.bool(False),
        nCalo = cms.uint32(18),
        nMu = cms.uint32(4)
    ),
    puAlgo = cms.string('LinearizedPuppi'),
    puAlgoParameters = cms.PSet(
        absEtaCuts = cms.vdouble(),
        alphaCrop = cms.vdouble(4),
        alphaSlopes = cms.vdouble(0.6),
        alphaZeros = cms.vdouble(9.0),
        dZ = cms.double(1.33),
        debug = cms.untracked.bool(False),
        dr = cms.double(0.3),
        drMin = cms.double(0.1),
        finalSortAlgo = cms.string('Insertion'),
        nFinalSort = cms.uint32(10),
        nIn = cms.uint32(18),
        nOut = cms.uint32(18),
        nTrack = cms.uint32(0),
        nVtx = cms.uint32(1),
        priors = cms.vdouble(6.0),
        priorsPhoton = cms.vdouble(6.0),
        ptCut = cms.vdouble(10.0),
        ptMax = cms.double(100.0),
        ptSlopes = cms.vdouble(0.25),
        ptSlopesPhoton = cms.vdouble(0.25),
        ptZeros = cms.vdouble(14.0),
        ptZerosPhoton = cms.vdouble(14.0)
    ),
    regions = cms.VPSet(
        cms.PSet(
            etaBoundaries = cms.vdouble(-5.5, -3.0),
            phiSlices = cms.uint32(9)
        ),
        cms.PSet(
            etaBoundaries = cms.vdouble(3.0, 5.5),
            phiSlices = cms.uint32(9)
        )
    ),
    tkEgAlgoParameters = cms.PSet(
        absEtaBoundaries = cms.vdouble(0.0, 0.9, 1.5),
        caloEtMin = cms.double(0.0),
        caloHwQual = cms.int32(4),
        compositeParametersTkEle = cms.PSet(
            loose_wp = cms.double(-0.181641),
            model = cms.string('L1Trigger/Phase2L1ParticleFlow/data/compositeID.json'),
            tight_wp = cms.double(0.0527344)
        ),
        dEtaMaxBrem = cms.double(0.02),
        dEtaValues = cms.vdouble(0.025, 0.015, 0.01),
        dPhiMaxBrem = cms.double(0.1),
        dPhiValues = cms.vdouble(0.07, 0.07, 0.07),
        doBremRecovery = cms.bool(True),
        doCompositeTkEle = cms.bool(False),
        doEndcapHwQual = cms.bool(False),
        doPfIso = cms.bool(True),
        doTkIso = cms.bool(True),
        filterHwQuality = cms.bool(False),
        hwIsoTypeTkEle = cms.uint32(0),
        hwIsoTypeTkEm = cms.uint32(0),
        nCompCandPerCluster = cms.uint32(3),
        nEMCALO_EGIN = cms.uint32(5),
        nEM_EGOUT = cms.uint32(5),
        nTRACK = cms.uint32(5),
        nTRACK_EGIN = cms.uint32(5),
        pfIsoParametersTkEle = cms.PSet(
            dRMax = cms.double(0.2),
            dRMin = cms.double(0.03),
            dZ = cms.double(0.6),
            tkQualityPtMin = cms.double(1.0)
        ),
        pfIsoParametersTkEm = cms.PSet(
            dRMax = cms.double(0.3),
            dRMin = cms.double(0.07),
            dZ = cms.double(0.6),
            tkQualityPtMin = cms.double(1.0)
        ),
        tkIsoParametersTkEle = cms.PSet(
            dRMax = cms.double(0.2),
            dRMin = cms.double(0.03),
            dZ = cms.double(0.6),
            tkQualityPtMin = cms.double(2.0)
        ),
        tkIsoParametersTkEm = cms.PSet(
            dRMax = cms.double(0.3),
            dRMin = cms.double(0.07),
            dZ = cms.double(0.6),
            tkQualityPtMin = cms.double(2.0)
        ),
        trkQualityPtMin = cms.double(10.0),
        writeBeforeBremRecovery = cms.bool(True),
        writeEGSta = cms.bool(True)
    ),
    tkEgSorterAlgo = cms.string('Endcap'),
    tkEgSorterParameters = cms.PSet(
        nObjSorted = cms.uint32(16),
        nObjToSort = cms.uint32(6)
    ),
    trkPtCut = cms.double(2.0),
    vtxCollection = cms.InputTag("l1tVertexFinderEmulator","L1VerticesEmulation")
)


process.l1tLayer1HGCal = cms.EDProducer("L1TCorrelatorLayer1Producer",
    boards = cms.VPSet(
        cms.PSet(
            regions = cms.vuint32(
                0, 1, 2, 3, 4,
                5, 6, 7, 8
            )
        ),
        cms.PSet(
            regions = cms.vuint32(
                9, 10, 11, 12, 13,
                14, 15, 16, 17
            )
        )
    ),
    caloSectors = cms.VPSet(
        cms.PSet(
            etaBoundaries = cms.vdouble(-3.0, -1.5),
            phiSlices = cms.uint32(3),
            phiZero = cms.double(1.5707963267948966)
        ),
        cms.PSet(
            etaBoundaries = cms.vdouble(1.5, 3.0),
            phiSlices = cms.uint32(3),
            phiZero = cms.double(1.5707963267948966)
        )
    ),
    emClusters = cms.VInputTag(cms.InputTag("l1tPFClustersFromHGC3DClusters","egamma")),
    emPtCut = cms.double(0.5),
    hadClusters = cms.VInputTag(cms.InputTag("l1tPFClustersFromHGC3DClusters")),
    hadPtCut = cms.double(1.0),
    hgcalInputConversionAlgo = cms.string('Emulator'),
    muonInputConversionAlgo = cms.string('Emulator'),
    muons = cms.InputTag("l1tSAMuonsGmt","prompt"),
    nVtx = cms.int32(1),
    pfAlgo = cms.string('PFAlgo2HGC'),
    pfAlgoParameters = cms.PSet(
        caloResolution = cms.PSet(
            etaBins = cms.vdouble(
                1.7, 1.9, 2.2, 2.5, 2.8,
                2.9
            ),
            offset = cms.vdouble(
                1.793, 1.827, 2.363, 2.538, 2.812,
                2.642
            ),
            scale = cms.vdouble(
                0.138, 0.137, 0.124, 0.115, 0.106,
                0.121
            )
        ),
        maxInvisiblePt = cms.double(10.0),
        nCalo = cms.uint32(20),
        nMu = cms.uint32(4),
        nSelCalo = cms.uint32(20),
        nTrack = cms.uint32(30),
        tightTrackMaxInvisiblePt = cms.double(20),
        trackCaloDR = cms.double(0.1),
        trackMuDR = cms.double(0.2)
    ),
    puAlgo = cms.string('LinearizedPuppi'),
    puAlgoParameters = cms.PSet(
        absEtaCuts = cms.vdouble(2.0),
        alphaCrop = cms.vdouble(3, 3),
        alphaSlopes = cms.vdouble(1.5, 1.5),
        alphaZeros = cms.vdouble(6.0, 6.0),
        dZ = cms.double(1.33),
        dr = cms.double(0.3),
        drMin = cms.double(0.04),
        finalSortAlgo = cms.string('FoldedHybrid'),
        nFinalSort = cms.uint32(18),
        nIn = cms.uint32(20),
        nOut = cms.uint32(20),
        nTrack = cms.uint32(30),
        nVtx = cms.uint32(1),
        priors = cms.vdouble(5.0, 5.0),
        priorsPhoton = cms.vdouble(1.5, 1.5),
        ptCut = cms.vdouble(1.0, 2.0),
        ptMax = cms.double(50.0),
        ptSlopes = cms.vdouble(0.3, 0.3),
        ptSlopesPhoton = cms.vdouble(0.4, 0.4),
        ptZeros = cms.vdouble(5.0, 7.0),
        ptZerosPhoton = cms.vdouble(3.0, 4.0)
    ),
    regionizerAlgo = cms.string('Multififo'),
    regionizerAlgoParameters = cms.PSet(
        egInterceptMode = cms.PSet(
            afterFifo = cms.bool(True),
            emIDMask = cms.uint32(30),
            nEMCALO_OUT = cms.uint32(10),
            nHADCALO_IN = cms.uint32(20)
        ),
        nCalo = cms.uint32(20),
        nCaloLinks = cms.uint32(3),
        nClocks = cms.uint32(54),
        nEmCalo = cms.uint32(10),
        nEndcaps = cms.uint32(2),
        nMu = cms.uint32(4),
        nTkLinks = cms.uint32(2),
        nTrack = cms.uint32(30),
        useAlsoVtxCoords = cms.bool(True)
    ),
    regions = cms.VPSet(
        cms.PSet(
            etaBoundaries = cms.vdouble(-2.5, -1.5),
            phiSlices = cms.uint32(9)
        ),
        cms.PSet(
            etaBoundaries = cms.vdouble(1.5, 2.5),
            phiSlices = cms.uint32(9)
        )
    ),
    tkEgAlgoParameters = cms.PSet(
        absEtaBoundaries = cms.vdouble(0.0, 0.9, 1.5),
        caloEtMin = cms.double(0.0),
        caloHwQual = cms.int32(4),
        compositeParametersTkEle = cms.PSet(
            loose_wp = cms.double(-0.181641),
            model = cms.string('L1Trigger/Phase2L1ParticleFlow/data/compositeID.json'),
            tight_wp = cms.double(0.0527344)
        ),
        dEtaMaxBrem = cms.double(0.02),
        dEtaValues = cms.vdouble(0.025, 0.015, 0.01),
        dPhiMaxBrem = cms.double(0.1),
        dPhiValues = cms.vdouble(0.07, 0.07, 0.07),
        doBremRecovery = cms.bool(True),
        doCompositeTkEle = cms.bool(True),
        doEndcapHwQual = cms.bool(True),
        doPfIso = cms.bool(True),
        doTkIso = cms.bool(True),
        filterHwQuality = cms.bool(False),
        hwIsoTypeTkEle = cms.uint32(0),
        hwIsoTypeTkEm = cms.uint32(0),
        nCompCandPerCluster = cms.uint32(3),
        nEMCALO_EGIN = cms.uint32(10),
        nEM_EGOUT = cms.uint32(5),
        nTRACK = cms.uint32(30),
        nTRACK_EGIN = cms.uint32(10),
        pfIsoParametersTkEle = cms.PSet(
            dRMax = cms.double(0.2),
            dRMin = cms.double(0.03),
            dZ = cms.double(0.6),
            tkQualityPtMin = cms.double(1.0)
        ),
        pfIsoParametersTkEm = cms.PSet(
            dRMax = cms.double(0.3),
            dRMin = cms.double(0.07),
            dZ = cms.double(0.6),
            tkQualityPtMin = cms.double(1.0)
        ),
        tkIsoParametersTkEle = cms.PSet(
            dRMax = cms.double(0.2),
            dRMin = cms.double(0.03),
            dZ = cms.double(0.6),
            tkQualityPtMin = cms.double(2.0)
        ),
        tkIsoParametersTkEm = cms.PSet(
            dRMax = cms.double(0.3),
            dRMin = cms.double(0.07),
            dZ = cms.double(0.6),
            tkQualityPtMin = cms.double(2.0)
        ),
        trkQualityPtMin = cms.double(0.0),
        writeBeforeBremRecovery = cms.bool(False),
        writeEGSta = cms.bool(True)
    ),
    tkEgSorterAlgo = cms.string('Endcap'),
    tkEgSorterParameters = cms.PSet(
        nObjSorted = cms.uint32(16),
        nObjToSort = cms.uint32(5)
    ),
    trackInputConversionAlgo = cms.string('Emulator'),
    trackInputConversionParameters = cms.PSet(
        dEtaHGCalBits = cms.uint32(10),
        dEtaHGCalLUTBits = cms.uint32(10),
        dEtaHGCalLUTShift = cms.uint32(2),
        dEtaHGCalRInvPreShift = cms.uint32(6),
        dEtaHGCalZ0PreShift = cms.uint32(2),
        dPhiHGCalBits = cms.uint32(4),
        dPhiHGCalRInvShift = cms.uint32(4),
        dPhiHGCalTanlInvShift = cms.uint32(22),
        dPhiHGCalTanlLUTBits = cms.uint32(10),
        dPhiHGCalZ0PostShift = cms.uint32(6),
        dPhiHGCalZ0PreShift = cms.uint32(4),
        etaLUTBits = cms.uint32(11),
        etaPostOffs = cms.int32(150),
        etaShift = cms.uint32(4),
        phiBits = cms.uint32(10),
        ptLUTBits = cms.uint32(11),
        region = cms.string('endcap'),
        slimDataFormat = cms.bool(False),
        z0Bits = cms.uint32(12)
    ),
    tracks = cms.InputTag("l1tPFTracksFromL1Tracks"),
    trkPtCut = cms.double(2.0),
    vtxCollection = cms.InputTag("l1tVertexFinderEmulator","L1VerticesEmulation"),
    writeRawHgcalCluster = cms.untracked.bool(True)
)


process.l1tLayer1HGCalElliptic = cms.EDProducer("L1TCorrelatorLayer1Producer",
    boards = cms.VPSet(
        cms.PSet(
            regions = cms.vuint32(
                0, 1, 2, 3, 4,
                5, 6, 7, 8
            )
        ),
        cms.PSet(
            regions = cms.vuint32(
                9, 10, 11, 12, 13,
                14, 15, 16, 17
            )
        )
    ),
    caloSectors = cms.VPSet(
        cms.PSet(
            etaBoundaries = cms.vdouble(-3.0, -1.5),
            phiSlices = cms.uint32(3),
            phiZero = cms.double(1.5707963267948966)
        ),
        cms.PSet(
            etaBoundaries = cms.vdouble(1.5, 3.0),
            phiSlices = cms.uint32(3),
            phiZero = cms.double(1.5707963267948966)
        )
    ),
    emClusters = cms.VInputTag(cms.InputTag("l1tPFClustersFromHGC3DClusters","egamma")),
    emPtCut = cms.double(0.5),
    hadClusters = cms.VInputTag(cms.InputTag("l1tPFClustersFromHGC3DClusters")),
    hadPtCut = cms.double(1.0),
    hgcalInputConversionAlgo = cms.string('Emulator'),
    muonInputConversionAlgo = cms.string('Emulator'),
    muons = cms.InputTag("l1tSAMuonsGmt","prompt"),
    nVtx = cms.int32(1),
    pfAlgo = cms.string('PFAlgo2HGC'),
    pfAlgoParameters = cms.PSet(
        caloResolution = cms.PSet(
            etaBins = cms.vdouble(
                1.7, 1.9, 2.2, 2.5, 2.8,
                2.9
            ),
            offset = cms.vdouble(
                1.793, 1.827, 2.363, 2.538, 2.812,
                2.642
            ),
            scale = cms.vdouble(
                0.138, 0.137, 0.124, 0.115, 0.106,
                0.121
            )
        ),
        maxInvisiblePt = cms.double(10.0),
        nCalo = cms.uint32(20),
        nMu = cms.uint32(4),
        nSelCalo = cms.uint32(20),
        nTrack = cms.uint32(30),
        tightTrackMaxInvisiblePt = cms.double(20),
        trackCaloDR = cms.double(0.1),
        trackMuDR = cms.double(0.2)
    ),
    puAlgo = cms.string('LinearizedPuppi'),
    puAlgoParameters = cms.PSet(
        absEtaCuts = cms.vdouble(2.0),
        alphaCrop = cms.vdouble(3, 3),
        alphaSlopes = cms.vdouble(1.5, 1.5),
        alphaZeros = cms.vdouble(6.0, 6.0),
        dZ = cms.double(1.33),
        dr = cms.double(0.3),
        drMin = cms.double(0.04),
        finalSortAlgo = cms.string('FoldedHybrid'),
        nFinalSort = cms.uint32(18),
        nIn = cms.uint32(20),
        nOut = cms.uint32(20),
        nTrack = cms.uint32(30),
        nVtx = cms.uint32(1),
        priors = cms.vdouble(5.0, 5.0),
        priorsPhoton = cms.vdouble(1.5, 1.5),
        ptCut = cms.vdouble(1.0, 2.0),
        ptMax = cms.double(50.0),
        ptSlopes = cms.vdouble(0.3, 0.3),
        ptSlopesPhoton = cms.vdouble(0.4, 0.4),
        ptZeros = cms.vdouble(5.0, 7.0),
        ptZerosPhoton = cms.vdouble(3.0, 4.0)
    ),
    regionizerAlgo = cms.string('Multififo'),
    regionizerAlgoParameters = cms.PSet(
        egInterceptMode = cms.PSet(
            afterFifo = cms.bool(True),
            emIDMask = cms.uint32(30),
            nEMCALO_OUT = cms.uint32(10),
            nHADCALO_IN = cms.uint32(20)
        ),
        nCalo = cms.uint32(20),
        nCaloLinks = cms.uint32(3),
        nClocks = cms.uint32(54),
        nEmCalo = cms.uint32(10),
        nEndcaps = cms.uint32(2),
        nMu = cms.uint32(4),
        nTkLinks = cms.uint32(2),
        nTrack = cms.uint32(30),
        useAlsoVtxCoords = cms.bool(True)
    ),
    regions = cms.VPSet(
        cms.PSet(
            etaBoundaries = cms.vdouble(-2.5, -1.5),
            phiSlices = cms.uint32(9)
        ),
        cms.PSet(
            etaBoundaries = cms.vdouble(1.5, 2.5),
            phiSlices = cms.uint32(9)
        )
    ),
    tkEgAlgoParameters = cms.PSet(
        absEtaBoundaries = cms.vdouble(0.0, 0.9, 1.5),
        caloEtMin = cms.double(0.0),
        caloHwQual = cms.int32(4),
        compositeParametersTkEle = cms.PSet(
            loose_wp = cms.double(-0.181641),
            model = cms.string('L1Trigger/Phase2L1ParticleFlow/data/compositeID.json'),
            tight_wp = cms.double(0.0527344)
        ),
        dEtaMaxBrem = cms.double(0.02),
        dEtaValues = cms.vdouble(0.025, 0.015, 0.01),
        dPhiMaxBrem = cms.double(0.1),
        dPhiValues = cms.vdouble(0.07, 0.07, 0.07),
        doBremRecovery = cms.bool(True),
        doCompositeTkEle = cms.bool(False),
        doEndcapHwQual = cms.bool(True),
        doPfIso = cms.bool(True),
        doTkIso = cms.bool(True),
        filterHwQuality = cms.bool(False),
        hwIsoTypeTkEle = cms.uint32(0),
        hwIsoTypeTkEm = cms.uint32(0),
        nCompCandPerCluster = cms.uint32(3),
        nEMCALO_EGIN = cms.uint32(10),
        nEM_EGOUT = cms.uint32(5),
        nTRACK = cms.uint32(30),
        nTRACK_EGIN = cms.uint32(10),
        pfIsoParametersTkEle = cms.PSet(
            dRMax = cms.double(0.2),
            dRMin = cms.double(0.03),
            dZ = cms.double(0.6),
            tkQualityPtMin = cms.double(1.0)
        ),
        pfIsoParametersTkEm = cms.PSet(
            dRMax = cms.double(0.3),
            dRMin = cms.double(0.07),
            dZ = cms.double(0.6),
            tkQualityPtMin = cms.double(1.0)
        ),
        tkIsoParametersTkEle = cms.PSet(
            dRMax = cms.double(0.2),
            dRMin = cms.double(0.03),
            dZ = cms.double(0.6),
            tkQualityPtMin = cms.double(2.0)
        ),
        tkIsoParametersTkEm = cms.PSet(
            dRMax = cms.double(0.3),
            dRMin = cms.double(0.07),
            dZ = cms.double(0.6),
            tkQualityPtMin = cms.double(2.0)
        ),
        trkQualityPtMin = cms.double(10.0),
        writeBeforeBremRecovery = cms.bool(False),
        writeEGSta = cms.bool(True)
    ),
    tkEgSorterAlgo = cms.string('Endcap'),
    tkEgSorterParameters = cms.PSet(
        nObjSorted = cms.uint32(16),
        nObjToSort = cms.uint32(5)
    ),
    trackInputConversionAlgo = cms.string('Emulator'),
    trackInputConversionParameters = cms.PSet(
        dEtaHGCalBits = cms.uint32(10),
        dEtaHGCalLUTBits = cms.uint32(10),
        dEtaHGCalLUTShift = cms.uint32(2),
        dEtaHGCalRInvPreShift = cms.uint32(6),
        dEtaHGCalZ0PreShift = cms.uint32(2),
        dPhiHGCalBits = cms.uint32(4),
        dPhiHGCalRInvShift = cms.uint32(4),
        dPhiHGCalTanlInvShift = cms.uint32(22),
        dPhiHGCalTanlLUTBits = cms.uint32(10),
        dPhiHGCalZ0PostShift = cms.uint32(6),
        dPhiHGCalZ0PreShift = cms.uint32(4),
        etaLUTBits = cms.uint32(11),
        etaPostOffs = cms.int32(150),
        etaShift = cms.uint32(4),
        phiBits = cms.uint32(10),
        ptLUTBits = cms.uint32(11),
        region = cms.string('endcap'),
        slimDataFormat = cms.bool(False),
        z0Bits = cms.uint32(12)
    ),
    tracks = cms.InputTag("l1tPFTracksFromL1Tracks"),
    trkPtCut = cms.double(2.0),
    vtxCollection = cms.InputTag("l1tVertexFinderEmulator","L1VerticesEmulation"),
    writeRawHgcalCluster = cms.untracked.bool(True)
)


process.l1tLayer1HGCalExtended = cms.EDProducer("L1TCorrelatorLayer1Producer",
    boards = cms.VPSet(
        cms.PSet(
            regions = cms.vuint32(
                0, 1, 2, 3, 4,
                5, 6, 7, 8
            )
        ),
        cms.PSet(
            regions = cms.vuint32(
                9, 10, 11, 12, 13,
                14, 15, 16, 17
            )
        )
    ),
    caloSectors = cms.VPSet(
        cms.PSet(
            etaBoundaries = cms.vdouble(-3.0, -1.5),
            phiSlices = cms.uint32(3),
            phiZero = cms.double(1.5707963267948966)
        ),
        cms.PSet(
            etaBoundaries = cms.vdouble(1.5, 3.0),
            phiSlices = cms.uint32(3),
            phiZero = cms.double(1.5707963267948966)
        )
    ),
    emClusters = cms.VInputTag(cms.InputTag("l1tPFClustersFromHGC3DClusters","egamma")),
    emPtCut = cms.double(0.5),
    hadClusters = cms.VInputTag(cms.InputTag("l1tPFClustersFromHGC3DClusters")),
    hadPtCut = cms.double(1.0),
    hgcalInputConversionAlgo = cms.string('Emulator'),
    muonInputConversionAlgo = cms.string('Emulator'),
    muons = cms.InputTag("l1tSAMuonsGmt","prompt"),
    nVtx = cms.int32(1),
    pfAlgo = cms.string('PFAlgo2HGC'),
    pfAlgoParameters = cms.PSet(
        caloResolution = cms.PSet(
            etaBins = cms.vdouble(
                1.7, 1.9, 2.2, 2.5, 2.8,
                2.9
            ),
            offset = cms.vdouble(
                1.793, 1.827, 2.363, 2.538, 2.812,
                2.642
            ),
            scale = cms.vdouble(
                0.138, 0.137, 0.124, 0.115, 0.106,
                0.121
            )
        ),
        maxInvisiblePt = cms.double(10.0),
        nCalo = cms.uint32(20),
        nMu = cms.uint32(4),
        nSelCalo = cms.uint32(20),
        nTrack = cms.uint32(30),
        tightTrackMaxInvisiblePt = cms.double(20),
        trackCaloDR = cms.double(0.1),
        trackMuDR = cms.double(0.2)
    ),
    puAlgo = cms.string('LinearizedPuppi'),
    puAlgoParameters = cms.PSet(
        absEtaCuts = cms.vdouble(2.0),
        alphaCrop = cms.vdouble(3, 3),
        alphaSlopes = cms.vdouble(1.5, 1.5),
        alphaZeros = cms.vdouble(6.0, 6.0),
        dZ = cms.double(1.33),
        dr = cms.double(0.3),
        drMin = cms.double(0.04),
        finalSortAlgo = cms.string('FoldedHybrid'),
        nFinalSort = cms.uint32(18),
        nIn = cms.uint32(20),
        nOut = cms.uint32(20),
        nTrack = cms.uint32(30),
        nVtx = cms.uint32(1),
        priors = cms.vdouble(5.0, 5.0),
        priorsPhoton = cms.vdouble(1.5, 1.5),
        ptCut = cms.vdouble(1.0, 2.0),
        ptMax = cms.double(50.0),
        ptSlopes = cms.vdouble(0.3, 0.3),
        ptSlopesPhoton = cms.vdouble(0.4, 0.4),
        ptZeros = cms.vdouble(5.0, 7.0),
        ptZerosPhoton = cms.vdouble(3.0, 4.0)
    ),
    regionizerAlgo = cms.string('Multififo'),
    regionizerAlgoParameters = cms.PSet(
        egInterceptMode = cms.PSet(
            afterFifo = cms.bool(True),
            emIDMask = cms.uint32(30),
            nEMCALO_OUT = cms.uint32(10),
            nHADCALO_IN = cms.uint32(20)
        ),
        nCalo = cms.uint32(20),
        nCaloLinks = cms.uint32(3),
        nClocks = cms.uint32(54),
        nEmCalo = cms.uint32(10),
        nEndcaps = cms.uint32(2),
        nMu = cms.uint32(4),
        nTkLinks = cms.uint32(2),
        nTrack = cms.uint32(30),
        useAlsoVtxCoords = cms.bool(True)
    ),
    regions = cms.VPSet(
        cms.PSet(
            etaBoundaries = cms.vdouble(-2.5, -1.5),
            phiSlices = cms.uint32(9)
        ),
        cms.PSet(
            etaBoundaries = cms.vdouble(1.5, 2.5),
            phiSlices = cms.uint32(9)
        )
    ),
    tkEgAlgoParameters = cms.PSet(
        absEtaBoundaries = cms.vdouble(0.0, 0.9, 1.5),
        caloEtMin = cms.double(0.0),
        caloHwQual = cms.int32(4),
        compositeParametersTkEle = cms.PSet(
            loose_wp = cms.double(-0.181641),
            model = cms.string('L1Trigger/Phase2L1ParticleFlow/data/compositeID.json'),
            tight_wp = cms.double(0.0527344)
        ),
        dEtaMaxBrem = cms.double(0.02),
        dEtaValues = cms.vdouble(0.025, 0.015, 0.01),
        dPhiMaxBrem = cms.double(0.1),
        dPhiValues = cms.vdouble(0.07, 0.07, 0.07),
        doBremRecovery = cms.bool(True),
        doCompositeTkEle = cms.bool(True),
        doEndcapHwQual = cms.bool(True),
        doPfIso = cms.bool(True),
        doTkIso = cms.bool(True),
        filterHwQuality = cms.bool(False),
        hwIsoTypeTkEle = cms.uint32(0),
        hwIsoTypeTkEm = cms.uint32(0),
        nCompCandPerCluster = cms.uint32(3),
        nEMCALO_EGIN = cms.uint32(10),
        nEM_EGOUT = cms.uint32(5),
        nTRACK = cms.uint32(30),
        nTRACK_EGIN = cms.uint32(10),
        pfIsoParametersTkEle = cms.PSet(
            dRMax = cms.double(0.2),
            dRMin = cms.double(0.03),
            dZ = cms.double(0.6),
            tkQualityPtMin = cms.double(1.0)
        ),
        pfIsoParametersTkEm = cms.PSet(
            dRMax = cms.double(0.3),
            dRMin = cms.double(0.07),
            dZ = cms.double(0.6),
            tkQualityPtMin = cms.double(1.0)
        ),
        tkIsoParametersTkEle = cms.PSet(
            dRMax = cms.double(0.2),
            dRMin = cms.double(0.03),
            dZ = cms.double(0.6),
            tkQualityPtMin = cms.double(2.0)
        ),
        tkIsoParametersTkEm = cms.PSet(
            dRMax = cms.double(0.3),
            dRMin = cms.double(0.07),
            dZ = cms.double(0.6),
            tkQualityPtMin = cms.double(2.0)
        ),
        trkQualityPtMin = cms.double(0.0),
        writeBeforeBremRecovery = cms.bool(False),
        writeEGSta = cms.bool(True)
    ),
    tkEgSorterAlgo = cms.string('Endcap'),
    tkEgSorterParameters = cms.PSet(
        nObjSorted = cms.uint32(16),
        nObjToSort = cms.uint32(5)
    ),
    trackInputConversionAlgo = cms.string('Emulator'),
    trackInputConversionParameters = cms.PSet(
        dEtaHGCalBits = cms.uint32(10),
        dEtaHGCalLUTBits = cms.uint32(10),
        dEtaHGCalLUTShift = cms.uint32(2),
        dEtaHGCalRInvPreShift = cms.uint32(6),
        dEtaHGCalZ0PreShift = cms.uint32(2),
        dPhiHGCalBits = cms.uint32(4),
        dPhiHGCalRInvShift = cms.uint32(4),
        dPhiHGCalTanlInvShift = cms.uint32(22),
        dPhiHGCalTanlLUTBits = cms.uint32(10),
        dPhiHGCalZ0PostShift = cms.uint32(6),
        dPhiHGCalZ0PreShift = cms.uint32(4),
        etaLUTBits = cms.uint32(11),
        etaPostOffs = cms.int32(150),
        etaShift = cms.uint32(4),
        phiBits = cms.uint32(10),
        ptLUTBits = cms.uint32(11),
        region = cms.string('endcap'),
        slimDataFormat = cms.bool(False),
        z0Bits = cms.uint32(12)
    ),
    tracks = cms.InputTag("l1tPFTracksFromL1TracksExtended"),
    trkPtCut = cms.double(2.0),
    vtxCollection = cms.InputTag("l1tVertexFinderEmulator","L1VerticesEmulation"),
    writeRawHgcalCluster = cms.untracked.bool(True)
)


process.l1tLayer1HGCalNoTK = cms.EDProducer("L1TCorrelatorLayer1Producer",
    boards = cms.VPSet(cms.PSet(
        regions = cms.vuint32(
            0, 1, 2, 3, 4,
            5, 6, 7, 8, 9,
            10, 11, 12, 13, 14,
            15, 16, 17
        )
    )),
    caloSectors = cms.VPSet(
        cms.PSet(
            etaBoundaries = cms.vdouble(-3.0, -1.5),
            phiSlices = cms.uint32(3),
            phiZero = cms.double(1.5707963267948966)
        ),
        cms.PSet(
            etaBoundaries = cms.vdouble(1.5, 3.0),
            phiSlices = cms.uint32(3),
            phiZero = cms.double(1.5707963267948966)
        )
    ),
    emClusters = cms.VInputTag(cms.InputTag("l1tPFClustersFromHGC3DClusters","egamma")),
    emPtCut = cms.double(0.5),
    hadClusters = cms.VInputTag(cms.InputTag("l1tPFClustersFromHGC3DClusters")),
    hadPtCut = cms.double(1.0),
    hgcalInputConversionAlgo = cms.string('Emulator'),
    hgcalInputConversionParameters = cms.PSet(
        slim = cms.bool(True)
    ),
    muonInputConversionAlgo = cms.string('Emulator'),
    muons = cms.InputTag("l1tSAMuonsGmt","prompt"),
    nVtx = cms.int32(1),
    pfAlgo = cms.string('PFAlgoDummy'),
    pfAlgoParameters = cms.PSet(
        nCalo = cms.uint32(12),
        nMu = cms.uint32(4)
    ),
    puAlgo = cms.string('LinearizedPuppi'),
    puAlgoParameters = cms.PSet(
        absEtaCuts = cms.vdouble(),
        alphaCrop = cms.vdouble(4),
        alphaSlopes = cms.vdouble(2.2),
        alphaZeros = cms.vdouble(9.0),
        dZ = cms.double(1.33),
        dr = cms.double(0.3),
        drMin = cms.double(0.04),
        finalSortAlgo = cms.string('Hybrid'),
        nFinalSort = cms.uint32(12),
        nIn = cms.uint32(12),
        nOut = cms.uint32(12),
        nTrack = cms.uint32(0),
        nVtx = cms.uint32(1),
        priors = cms.vdouble(7.0),
        priorsPhoton = cms.vdouble(5.0),
        ptCut = cms.vdouble(4.0),
        ptMax = cms.double(50.0),
        ptSlopes = cms.vdouble(0.3),
        ptSlopesPhoton = cms.vdouble(0.4),
        ptZeros = cms.vdouble(9.0),
        ptZerosPhoton = cms.vdouble(5.0)
    ),
    regionizerAlgo = cms.string('Multififo'),
    regionizerAlgoParameters = cms.PSet(
        egInterceptMode = cms.PSet(
            afterFifo = cms.bool(True),
            emIDMask = cms.uint32(30),
            nEMCALO_OUT = cms.uint32(12),
            nHADCALO_IN = cms.uint32(12)
        ),
        nCalo = cms.uint32(12),
        nCaloLinks = cms.uint32(3),
        nClocks = cms.uint32(54),
        nEmCalo = cms.uint32(12),
        nEndcaps = cms.uint32(2),
        nMu = cms.uint32(4),
        nTkLinks = cms.uint32(0),
        nTrack = cms.uint32(0),
        useAlsoVtxCoords = cms.bool(True)
    ),
    regions = cms.VPSet(
        cms.PSet(
            etaBoundaries = cms.vdouble(-3.0, -2.5),
            phiSlices = cms.uint32(9)
        ),
        cms.PSet(
            etaBoundaries = cms.vdouble(2.5, 3.0),
            phiSlices = cms.uint32(9)
        )
    ),
    tkEgAlgoParameters = cms.PSet(
        absEtaBoundaries = cms.vdouble(0.0, 0.9, 1.5),
        caloEtMin = cms.double(0.0),
        caloHwQual = cms.int32(4),
        compositeParametersTkEle = cms.PSet(
            loose_wp = cms.double(-0.181641),
            model = cms.string('L1Trigger/Phase2L1ParticleFlow/data/compositeID.json'),
            tight_wp = cms.double(0.0527344)
        ),
        dEtaMaxBrem = cms.double(0.02),
        dEtaValues = cms.vdouble(0.025, 0.015, 0.01),
        dPhiMaxBrem = cms.double(0.1),
        dPhiValues = cms.vdouble(0.07, 0.07, 0.07),
        doBremRecovery = cms.bool(True),
        doCompositeTkEle = cms.bool(False),
        doEndcapHwQual = cms.bool(True),
        doPfIso = cms.bool(True),
        doTkIso = cms.bool(True),
        filterHwQuality = cms.bool(False),
        hwIsoTypeTkEle = cms.uint32(0),
        hwIsoTypeTkEm = cms.uint32(0),
        nCompCandPerCluster = cms.uint32(3),
        nEMCALO_EGIN = cms.uint32(10),
        nEM_EGOUT = cms.uint32(5),
        nTRACK = cms.uint32(30),
        nTRACK_EGIN = cms.uint32(10),
        pfIsoParametersTkEle = cms.PSet(
            dRMax = cms.double(0.2),
            dRMin = cms.double(0.03),
            dZ = cms.double(0.6),
            tkQualityPtMin = cms.double(1.0)
        ),
        pfIsoParametersTkEm = cms.PSet(
            dRMax = cms.double(0.3),
            dRMin = cms.double(0.07),
            dZ = cms.double(0.6),
            tkQualityPtMin = cms.double(1.0)
        ),
        tkIsoParametersTkEle = cms.PSet(
            dRMax = cms.double(0.2),
            dRMin = cms.double(0.03),
            dZ = cms.double(0.6),
            tkQualityPtMin = cms.double(2.0)
        ),
        tkIsoParametersTkEm = cms.PSet(
            dRMax = cms.double(0.3),
            dRMin = cms.double(0.07),
            dZ = cms.double(0.6),
            tkQualityPtMin = cms.double(2.0)
        ),
        trkQualityPtMin = cms.double(10.0),
        writeBeforeBremRecovery = cms.bool(False),
        writeEGSta = cms.bool(True)
    ),
    tkEgSorterAlgo = cms.string('Endcap'),
    tkEgSorterParameters = cms.PSet(
        nObjSorted = cms.uint32(16),
        nObjToSort = cms.uint32(5)
    ),
    trkPtCut = cms.double(2.0),
    vtxCollection = cms.InputTag("l1tVertexFinderEmulator","L1VerticesEmulation"),
    writeRawHgcalCluster = cms.untracked.bool(True)
)


process.l1tLayer2Deregionizer = cms.EDProducer("DeregionizerProducer",
    RegionalPuppiCands = cms.InputTag("l1tLayer1","PuppiRegional"),
    linkConfigs = cms.VPSet(
        cms.PSet(
            nLinksPuppi = cms.uint32(6),
            nOutputFramesPerBX = cms.uint32(9),
            nPuppiPerRegion = cms.uint32(18),
            outputBoard = cms.int32(0),
            outputRegions = cms.vuint32(
                0, 1, 2, 9, 10,
                11, 18, 19, 20, 27,
                28, 29, 36, 37, 38,
                45, 46, 47
            ),
            partition = cms.string('Barrel')
        ),
        cms.PSet(
            nLinksPuppi = cms.uint32(6),
            nOutputFramesPerBX = cms.uint32(9),
            nPuppiPerRegion = cms.uint32(18),
            outputBoard = cms.int32(1),
            outputRegions = cms.vuint32(
                3, 4, 5, 12, 13,
                14, 21, 22, 23, 30,
                31, 32, 39, 40, 41,
                48, 49, 50
            ),
            partition = cms.string('Barrel')
        ),
        cms.PSet(
            nLinksPuppi = cms.uint32(6),
            nOutputFramesPerBX = cms.uint32(9),
            nPuppiPerRegion = cms.uint32(18),
            outputBoard = cms.int32(2),
            outputRegions = cms.vuint32(
                6, 7, 8, 15, 16,
                17, 24, 25, 26, 33,
                34, 35, 42, 43, 44,
                51, 52, 53
            ),
            partition = cms.string('Barrel')
        ),
        cms.PSet(
            nLinksPuppi = cms.uint32(3),
            nOutputFramesPerBX = cms.uint32(9),
            nPuppiPerRegion = cms.uint32(18),
            outputBoard = cms.int32(4),
            outputRegions = cms.vuint32(
                63, 64, 65, 66, 67,
                68, 69, 70, 71
            ),
            partition = cms.string('HGCal')
        ),
        cms.PSet(
            nLinksPuppi = cms.uint32(3),
            nOutputFramesPerBX = cms.uint32(9),
            nPuppiPerRegion = cms.uint32(18),
            outputBoard = cms.int32(3),
            outputRegions = cms.vuint32(
                54, 55, 56, 57, 58,
                59, 60, 61, 62
            ),
            partition = cms.string('HGCal')
        ),
        cms.PSet(
            nLinksPuppi = cms.uint32(4),
            nOutputFramesPerBX = cms.uint32(9),
            nPuppiPerRegion = cms.uint32(12),
            outputBoard = cms.int32(5),
            outputRegions = cms.vuint32(
                72, 73, 74, 75, 76,
                77, 78, 79, 80, 81,
                82, 83, 84, 85, 86,
                87, 88, 89
            ),
            partition = cms.string('HGCalNoTk')
        ),
        cms.PSet(
            nLinksPuppi = cms.uint32(3),
            nOutputFramesPerBX = cms.uint32(9),
            nPuppiPerRegion = cms.uint32(18),
            outputBoard = cms.int32(6),
            outputRegions = cms.vuint32(
                90, 91, 92, 93, 94,
                95, 96, 97, 98
            ),
            partition = cms.string('HF')
        ),
        cms.PSet(
            nLinksPuppi = cms.uint32(3),
            nOutputFramesPerBX = cms.uint32(9),
            nPuppiPerRegion = cms.uint32(18),
            outputBoard = cms.int32(7),
            outputRegions = cms.vuint32(
                99, 100, 101, 102, 103,
                104, 105, 106, 107
            ),
            partition = cms.string('HF')
        )
    ),
    nInputFramesPerBX = cms.uint32(9),
    nPuppiFinalBuffer = cms.uint32(128),
    nPuppiFirstBuffers = cms.uint32(12),
    nPuppiPerClk = cms.uint32(6),
    nPuppiSecondBuffers = cms.uint32(32),
    nPuppiThirdBuffers = cms.uint32(64)
)


process.l1tLayer2DeregionizerExtended = cms.EDProducer("DeregionizerProducer",
    RegionalPuppiCands = cms.InputTag("l1tLayer1Extended","PuppiRegional"),
    linkConfigs = cms.VPSet(
        cms.PSet(
            nLinksPuppi = cms.uint32(6),
            nOutputFramesPerBX = cms.uint32(9),
            nPuppiPerRegion = cms.uint32(18),
            outputBoard = cms.int32(0),
            outputRegions = cms.vuint32(
                0, 1, 2, 9, 10,
                11, 18, 19, 20, 27,
                28, 29, 36, 37, 38,
                45, 46, 47
            ),
            partition = cms.string('Barrel')
        ),
        cms.PSet(
            nLinksPuppi = cms.uint32(6),
            nOutputFramesPerBX = cms.uint32(9),
            nPuppiPerRegion = cms.uint32(18),
            outputBoard = cms.int32(1),
            outputRegions = cms.vuint32(
                3, 4, 5, 12, 13,
                14, 21, 22, 23, 30,
                31, 32, 39, 40, 41,
                48, 49, 50
            ),
            partition = cms.string('Barrel')
        ),
        cms.PSet(
            nLinksPuppi = cms.uint32(6),
            nOutputFramesPerBX = cms.uint32(9),
            nPuppiPerRegion = cms.uint32(18),
            outputBoard = cms.int32(2),
            outputRegions = cms.vuint32(
                6, 7, 8, 15, 16,
                17, 24, 25, 26, 33,
                34, 35, 42, 43, 44,
                51, 52, 53
            ),
            partition = cms.string('Barrel')
        ),
        cms.PSet(
            nLinksPuppi = cms.uint32(3),
            nOutputFramesPerBX = cms.uint32(9),
            nPuppiPerRegion = cms.uint32(18),
            outputBoard = cms.int32(4),
            outputRegions = cms.vuint32(
                63, 64, 65, 66, 67,
                68, 69, 70, 71
            ),
            partition = cms.string('HGCal')
        ),
        cms.PSet(
            nLinksPuppi = cms.uint32(3),
            nOutputFramesPerBX = cms.uint32(9),
            nPuppiPerRegion = cms.uint32(18),
            outputBoard = cms.int32(3),
            outputRegions = cms.vuint32(
                54, 55, 56, 57, 58,
                59, 60, 61, 62
            ),
            partition = cms.string('HGCal')
        ),
        cms.PSet(
            nLinksPuppi = cms.uint32(4),
            nOutputFramesPerBX = cms.uint32(9),
            nPuppiPerRegion = cms.uint32(12),
            outputBoard = cms.int32(5),
            outputRegions = cms.vuint32(
                72, 73, 74, 75, 76,
                77, 78, 79, 80, 81,
                82, 83, 84, 85, 86,
                87, 88, 89
            ),
            partition = cms.string('HGCalNoTk')
        ),
        cms.PSet(
            nLinksPuppi = cms.uint32(3),
            nOutputFramesPerBX = cms.uint32(9),
            nPuppiPerRegion = cms.uint32(18),
            outputBoard = cms.int32(6),
            outputRegions = cms.vuint32(
                90, 91, 92, 93, 94,
                95, 96, 97, 98
            ),
            partition = cms.string('HF')
        ),
        cms.PSet(
            nLinksPuppi = cms.uint32(3),
            nOutputFramesPerBX = cms.uint32(9),
            nPuppiPerRegion = cms.uint32(18),
            outputBoard = cms.int32(7),
            outputRegions = cms.vuint32(
                99, 100, 101, 102, 103,
                104, 105, 106, 107
            ),
            partition = cms.string('HF')
        )
    ),
    nInputFramesPerBX = cms.uint32(9),
    nPuppiFinalBuffer = cms.uint32(128),
    nPuppiFirstBuffers = cms.uint32(12),
    nPuppiPerClk = cms.uint32(6),
    nPuppiSecondBuffers = cms.uint32(32),
    nPuppiThirdBuffers = cms.uint32(64)
)


process.l1tLayer2EG = cms.EDProducer("L1TCtL2EgProducer",
    egStaInstanceLabel = cms.string('L1CtEgEE'),
    encoder = cms.PSet(
        nTKELE_OUT = cms.uint32(12),
        nTKPHO_OUT = cms.uint32(12)
    ),
    inPatternFile = cms.PSet(
        TMUX = cms.uint32(6),
        channels = cms.VPSet(
            cms.PSet(
                TMUX = cms.uint32(6),
                channels = cms.vuint32(0),
                id = cms.uint32(0),
                interface = cms.string('eglayer1Barrel'),
                nWords = cms.uint32(48)
            ),
            cms.PSet(
                TMUX = cms.uint32(6),
                channels = cms.vuint32(1),
                id = cms.uint32(1),
                interface = cms.string('eglayer1Barrel'),
                nWords = cms.uint32(48)
            ),
            cms.PSet(
                TMUX = cms.uint32(6),
                channels = cms.vuint32(2),
                id = cms.uint32(2),
                interface = cms.string('eglayer1Barrel'),
                nWords = cms.uint32(48)
            ),
            cms.PSet(
                TMUX = cms.uint32(6),
                channels = cms.vuint32(3),
                id = cms.uint32(3),
                interface = cms.string('eglayer1Endcap'),
                nWords = cms.uint32(48)
            ),
            cms.PSet(
                TMUX = cms.uint32(6),
                channels = cms.vuint32(4),
                id = cms.uint32(4),
                interface = cms.string('eglayer1Endcap'),
                nWords = cms.uint32(48)
            )
        ),
        eventsPerFile = cms.uint32(12),
        format = cms.string('EMPv2'),
        maxLinesPerFile = cms.uint32(1024),
        nFramesPerBX = cms.uint32(9),
        outputFileExtension = cms.string('txt.gz'),
        outputFilename = cms.string('L1TCTL2EG_InPattern')
    ),
    l1PFObjects = cms.InputTag("l1tLayer2Deregionizer","Puppi"),
    outPatternFile = cms.PSet(
        TMUX = cms.uint32(6),
        channels = cms.VPSet(cms.PSet(
            TMUX = cms.uint32(6),
            channels = cms.vuint32(0),
            id = cms.uint32(0),
            interface = cms.string('eglayer2'),
            nWords = cms.uint32(36)
        )),
        eventsPerFile = cms.uint32(12),
        format = cms.string('EMPv2'),
        maxLinesPerFile = cms.uint32(1024),
        nFramesPerBX = cms.uint32(9),
        outputFileExtension = cms.string('txt.gz'),
        outputFilename = cms.string('L1TCTL2EG_OutPattern')
    ),
    puppiIsoParametersTkEle = cms.PSet(
        dRMax = cms.double(0.2),
        dRMin = cms.double(0.03),
        dZ = cms.double(0.6),
        pfCandReuse = cms.bool(True),
        pfIsoType = cms.string('PUPPI'),
        pfPtMin = cms.double(1.0)
    ),
    puppiIsoParametersTkEm = cms.PSet(
        dRMax = cms.double(0.3),
        dRMin = cms.double(0.07),
        dZ = cms.double(0.6),
        pfCandReuse = cms.bool(True),
        pfIsoType = cms.string('PUPPI'),
        pfPtMin = cms.double(1.0)
    ),
    sorter = cms.PSet(
        debug = cms.untracked.uint32(0),
        nEGOut = cms.uint32(12),
        nEGPerRegion = cms.uint32(16),
        nREGIONS = cms.uint32(5)
    ),
    tkEgs = cms.VPSet(
        cms.PSet(
            pfProducer = cms.InputTag("l1tLayer1HGCal","L1Eg"),
            regions = cms.vint32(-1)
        ),
        cms.PSet(
            pfProducer = cms.InputTag("l1tLayer1HGCalNoTK","L1Eg"),
            regions = cms.vint32(-1)
        )
    ),
    tkEleInstanceLabel = cms.string('L1CtTkElectron'),
    tkElectrons = cms.VPSet(
        cms.PSet(
            pfProducer = cms.InputTag("l1tLayer1HGCal","L1TkElePerBoard"),
            regions = cms.vint32(3, 4)
        ),
        cms.PSet(
            pfProducer = cms.InputTag("l1tLayer1Barrel","L1TkElePerBoard"),
            regions = cms.vint32(0, 1, 2)
        )
    ),
    tkEmInstanceLabel = cms.string('L1CtTkEm'),
    tkEms = cms.VPSet(
        cms.PSet(
            pfProducer = cms.InputTag("l1tLayer1HGCal","L1TkEmPerBoard"),
            regions = cms.vint32(3, 4)
        ),
        cms.PSet(
            pfProducer = cms.InputTag("l1tLayer1HGCalNoTK","L1TkEmPerBoard"),
            regions = cms.vint32(-1)
        ),
        cms.PSet(
            pfProducer = cms.InputTag("l1tLayer1Barrel","L1TkEmPerBoard"),
            regions = cms.vint32(0, 1, 2)
        )
    ),
    writeInPattern = cms.bool(False),
    writeOutPattern = cms.bool(False)
)


process.l1tLayer2EGElliptic = cms.EDProducer("L1TCtL2EgProducer",
    egStaInstanceLabel = cms.string('L1CtEgEE'),
    encoder = cms.PSet(
        nTKELE_OUT = cms.uint32(12),
        nTKPHO_OUT = cms.uint32(12)
    ),
    inPatternFile = cms.PSet(
        TMUX = cms.uint32(6),
        channels = cms.VPSet(
            cms.PSet(
                TMUX = cms.uint32(6),
                channels = cms.vuint32(0),
                id = cms.uint32(0),
                interface = cms.string('eglayer1Barrel'),
                nWords = cms.uint32(48)
            ),
            cms.PSet(
                TMUX = cms.uint32(6),
                channels = cms.vuint32(1),
                id = cms.uint32(1),
                interface = cms.string('eglayer1Barrel'),
                nWords = cms.uint32(48)
            ),
            cms.PSet(
                TMUX = cms.uint32(6),
                channels = cms.vuint32(2),
                id = cms.uint32(2),
                interface = cms.string('eglayer1Barrel'),
                nWords = cms.uint32(48)
            ),
            cms.PSet(
                TMUX = cms.uint32(6),
                channels = cms.vuint32(3),
                id = cms.uint32(3),
                interface = cms.string('eglayer1Endcap'),
                nWords = cms.uint32(48)
            ),
            cms.PSet(
                TMUX = cms.uint32(6),
                channels = cms.vuint32(4),
                id = cms.uint32(4),
                interface = cms.string('eglayer1Endcap'),
                nWords = cms.uint32(48)
            )
        ),
        eventsPerFile = cms.uint32(12),
        format = cms.string('EMPv2'),
        maxLinesPerFile = cms.uint32(1024),
        nFramesPerBX = cms.uint32(9),
        outputFileExtension = cms.string('txt.gz'),
        outputFilename = cms.string('L1TCTL2EG_InPattern')
    ),
    l1PFObjects = cms.InputTag("l1tLayer2Deregionizer","Puppi"),
    outPatternFile = cms.PSet(
        TMUX = cms.uint32(6),
        channels = cms.VPSet(cms.PSet(
            TMUX = cms.uint32(6),
            channels = cms.vuint32(0),
            id = cms.uint32(0),
            interface = cms.string('eglayer2'),
            nWords = cms.uint32(36)
        )),
        eventsPerFile = cms.uint32(12),
        format = cms.string('EMPv2'),
        maxLinesPerFile = cms.uint32(1024),
        nFramesPerBX = cms.uint32(9),
        outputFileExtension = cms.string('txt.gz'),
        outputFilename = cms.string('L1TCTL2EG_OutPattern')
    ),
    puppiIsoParametersTkEle = cms.PSet(
        dRMax = cms.double(0.2),
        dRMin = cms.double(0.03),
        dZ = cms.double(0.6),
        pfCandReuse = cms.bool(True),
        pfIsoType = cms.string('PUPPI'),
        pfPtMin = cms.double(1.0)
    ),
    puppiIsoParametersTkEm = cms.PSet(
        dRMax = cms.double(0.3),
        dRMin = cms.double(0.07),
        dZ = cms.double(0.6),
        pfCandReuse = cms.bool(True),
        pfIsoType = cms.string('PUPPI'),
        pfPtMin = cms.double(1.0)
    ),
    sorter = cms.PSet(
        debug = cms.untracked.uint32(0),
        nEGOut = cms.uint32(12),
        nEGPerRegion = cms.uint32(16),
        nREGIONS = cms.uint32(5)
    ),
    tkEgs = cms.VPSet(
        cms.PSet(
            pfProducer = cms.InputTag("l1tLayer1HGCalElliptic","L1Eg"),
            regions = cms.vint32(-1)
        ),
        cms.PSet(
            pfProducer = cms.InputTag("l1tLayer1HGCalNoTK","L1Eg"),
            regions = cms.vint32(-1)
        )
    ),
    tkEleInstanceLabel = cms.string('L1CtTkElectron'),
    tkElectrons = cms.VPSet(
        cms.PSet(
            pfProducer = cms.InputTag("l1tLayer1HGCalElliptic","L1TkElePerBoard"),
            regions = cms.vint32(3, 4)
        ),
        cms.PSet(
            pfProducer = cms.InputTag("l1tLayer1Barrel","L1TkElePerBoard"),
            regions = cms.vint32(0, 1, 2)
        )
    ),
    tkEmInstanceLabel = cms.string('L1CtTkEm'),
    tkEms = cms.VPSet(
        cms.PSet(
            pfProducer = cms.InputTag("l1tLayer1HGCalElliptic","L1TkEmPerBoard"),
            regions = cms.vint32(3, 4)
        ),
        cms.PSet(
            pfProducer = cms.InputTag("l1tLayer1HGCalNoTK","L1TkEmPerBoard"),
            regions = cms.vint32(-1)
        ),
        cms.PSet(
            pfProducer = cms.InputTag("l1tLayer1Barrel","L1TkEmPerBoard"),
            regions = cms.vint32(0, 1, 2)
        )
    ),
    writeInPattern = cms.bool(False),
    writeOutPattern = cms.bool(False)
)


process.l1tLayer2EGTM18 = cms.EDProducer("L1TCtL2EgProducer",
    egStaInstanceLabel = cms.string('L1CtEgEE'),
    encoder = cms.PSet(
        nTKELE_OUT = cms.uint32(12),
        nTKPHO_OUT = cms.uint32(12)
    ),
    inPatternFile = cms.PSet(
        TMUX = cms.uint32(6),
        channels = cms.VPSet(
            cms.PSet(
                TMUX = cms.uint32(18),
                channels = cms.vuint32(0, 2, 4),
                id = cms.uint32(0),
                interface = cms.string('eglayer1Barrel'),
                nWords = cms.uint32(156)
            ),
            cms.PSet(
                TMUX = cms.uint32(18),
                channels = cms.vuint32(1, 3, 5),
                id = cms.uint32(1),
                interface = cms.string('eglayer1Endcap'),
                nWords = cms.uint32(129)
            )
        ),
        eventsPerFile = cms.uint32(12),
        format = cms.string('EMPv2'),
        maxLinesPerFile = cms.uint32(1024),
        nFramesPerBX = cms.uint32(9),
        outputFileExtension = cms.string('txt.gz'),
        outputFilename = cms.string('L1TCTL2EG_TMUX18_InPattern')
    ),
    l1PFObjects = cms.InputTag("l1tLayer2Deregionizer","Puppi"),
    outPatternFile = cms.PSet(
        TMUX = cms.uint32(6),
        channels = cms.VPSet(cms.PSet(
            TMUX = cms.uint32(6),
            channels = cms.vuint32(0),
            id = cms.uint32(0),
            interface = cms.string('eglayer2'),
            nWords = cms.uint32(36)
        )),
        eventsPerFile = cms.uint32(12),
        format = cms.string('EMPv2'),
        maxLinesPerFile = cms.uint32(1024),
        nFramesPerBX = cms.uint32(9),
        outputFileExtension = cms.string('txt.gz'),
        outputFilename = cms.string('L1TCTL2EG_TMUX18_OutPattern')
    ),
    puppiIsoParametersTkEle = cms.PSet(
        dRMax = cms.double(0.2),
        dRMin = cms.double(0.03),
        dZ = cms.double(0.6),
        pfCandReuse = cms.bool(True),
        pfIsoType = cms.string('PUPPI'),
        pfPtMin = cms.double(1.0)
    ),
    puppiIsoParametersTkEm = cms.PSet(
        dRMax = cms.double(0.3),
        dRMin = cms.double(0.07),
        dZ = cms.double(0.6),
        pfCandReuse = cms.bool(True),
        pfIsoType = cms.string('PUPPI'),
        pfPtMin = cms.double(1.0)
    ),
    sorter = cms.PSet(
        debug = cms.untracked.uint32(0),
        nEGOut = cms.uint32(12),
        nEGPerRegion = cms.uint32(16),
        nREGIONS = cms.uint32(5)
    ),
    tkEgs = cms.VPSet(
        cms.PSet(
            pfProducer = cms.InputTag("l1tLayer1HGCalTM18","L1Eg"),
            regions = cms.vint32(-1)
        ),
        cms.PSet(
            pfProducer = cms.InputTag("l1tLayer1HGCalNoTKTM18","L1Eg"),
            regions = cms.vint32(-1)
        )
    ),
    tkEleInstanceLabel = cms.string('L1CtTkElectron'),
    tkElectrons = cms.VPSet(
        cms.PSet(
            pfProducer = cms.InputTag("l1tLayer1HGCalTM18","L1TkElePerBoard"),
            regions = cms.vint32(3, 4)
        ),
        cms.PSet(
            pfProducer = cms.InputTag("l1tLayer1BarrelSerenityTM18","L1TkElePerBoard"),
            regions = cms.vint32(0, 1, 2)
        )
    ),
    tkEmInstanceLabel = cms.string('L1CtTkEm'),
    tkEms = cms.VPSet(
        cms.PSet(
            pfProducer = cms.InputTag("l1tLayer1HGCalTM18","L1TkEmPerBoard"),
            regions = cms.vint32(3, 4)
        ),
        cms.PSet(
            pfProducer = cms.InputTag("l1tLayer1HGCalNoTKTM18","L1TkEmPerBoard"),
            regions = cms.vint32(-1)
        ),
        cms.PSet(
            pfProducer = cms.InputTag("l1tLayer1BarrelSerenityTM18","L1TkEmPerBoard"),
            regions = cms.vint32(0, 1, 2)
        )
    ),
    writeInPattern = cms.bool(False),
    writeOutPattern = cms.bool(False)
)


process.l1tMETMLProducer = cms.EDProducer("L1MetPfProducer",
    L1PFObjects = cms.InputTag("l1tLayer1","Puppi"),
    maxCands = cms.int32(100),
    modelVersion = cms.string('L1METML_v1')
)


process.l1tMETPFProducer = cms.EDProducer("L1MetPfProducer",
    L1PFObjects = cms.InputTag("l1tLayer1","Puppi"),
    maxCands = cms.int32(128),
    modelVersion = cms.string('')
)


process.l1tMHTPFProducer = cms.EDProducer("L1MhtPfProducer",
    jets = cms.InputTag("l1tSC4PFL1PuppiEmulator"),
    maxJetEta = cms.double(2.4),
    minJetPt = cms.double(30.0)
)


process.l1tNNCaloTauEmulator = cms.EDProducer("L1NNCaloTauEmulator",
    CB_CE_split = cms.double(1.55),
    CNNmodel_CB_path = cms.string('L1Trigger/L1CaloTrigger/data/Phase2_NNCaloTaus/v22/CNNmodel_CB.pb'),
    CNNmodel_CE_path = cms.string('L1Trigger/L1CaloTrigger/data/Phase2_NNCaloTaus/v22/CNNmodel_CE.pb'),
    DEBUG = cms.bool(False),
    DNNcalib_CB_path = cms.string('L1Trigger/L1CaloTrigger/data/Phase2_NNCaloTaus/v22/DNNcalib_CB.pb'),
    DNNcalib_CE_path = cms.string('L1Trigger/L1CaloTrigger/data/Phase2_NNCaloTaus/v22/DNNcalib_CE.pb'),
    DNNident_CB_path = cms.string('L1Trigger/L1CaloTrigger/data/Phase2_NNCaloTaus/v22/DNNident_CB.pb'),
    DNNident_CE_path = cms.string('L1Trigger/L1CaloTrigger/data/Phase2_NNCaloTaus/v22/DNNident_CE.pb'),
    EcalEtMinForClustering = cms.double(0),
    EtMinForSeeding = cms.double(2.5),
    EtaRestriction = cms.double(2.4),
    FeatScaler_CE_path = cms.string('L1Trigger/L1CaloTrigger/data/Phase2_NNCaloTaus/Cl3dFeatScaler_CE.json'),
    HcalEtMinForClustering = cms.double(0),
    HgcalClusters = cms.InputTag("l1tHGCalBackEndLayer2Producer","HGCalBackendLayer2Processor3DClustering"),
    IdWp90_CB = cms.double(0.706),
    IdWp90_CE = cms.double(0.5711),
    IdWp95_CB = cms.double(0.3432),
    IdWp95_CE = cms.double(0.2742),
    IdWp99_CB = cms.double(0.0337),
    IdWp99_CE = cms.double(0.0394),
    PuidThr = cms.double(-0.1),
    VsPuId = cms.PSet(
        isPUFilter = cms.bool(True),
        method = cms.string('BDT'),
        preselection = cms.string(''),
        variables = cms.VPSet(
            cms.PSet(
                name = cms.string('eMax'),
                value = cms.string('eMax()')
            ),
            cms.PSet(
                name = cms.string('eMaxOverE'),
                value = cms.string('eMax()/energy()')
            ),
            cms.PSet(
                name = cms.string('sigmaPhiPhiTot'),
                value = cms.string('sigmaPhiPhiTot()')
            ),
            cms.PSet(
                name = cms.string('sigmaRRTot'),
                value = cms.string('sigmaRRTot()')
            ),
            cms.PSet(
                name = cms.string('triggerCells90percent'),
                value = cms.string('triggerCells90percent()')
            )
        ),
        weightsFile = cms.string('L1Trigger/Phase2L1ParticleFlow/data/hgcal_egID/Photon_Pion_vs_Neutrino_BDTweights_1116.xml.gz'),
        wp = cms.string('-0.10')
    ),
    hgcalTowers = cms.InputTag("l1tHGCalTowerProducer","HGCalTowerProcessor"),
    l1CaloTowers = cms.InputTag("l1tEGammaClusterEmuProducer","L1CaloTowerCollection"),
    mightGet = cms.optional.untracked.vstring,
    preEmId = cms.string('hOverE < 0.3 && hOverE >= 0')
)


process.l1tNNCaloTauProducer = cms.EDProducer("L1NNCaloTauProducer",
    CB_CE_split = cms.double(1.55),
    CNNmodel_CB_path = cms.string('L1Trigger/L1CaloTrigger/data/Phase2_NNCaloTaus/v22/CNNmodel_CB.pb'),
    CNNmodel_CE_path = cms.string('L1Trigger/L1CaloTrigger/data/Phase2_NNCaloTaus/v22/CNNmodel_CE.pb'),
    DEBUG = cms.bool(False),
    DNNcalib_CB_path = cms.string('L1Trigger/L1CaloTrigger/data/Phase2_NNCaloTaus/v22/DNNcalib_CB.pb'),
    DNNcalib_CE_path = cms.string('L1Trigger/L1CaloTrigger/data/Phase2_NNCaloTaus/v22/DNNcalib_CE.pb'),
    DNNident_CB_path = cms.string('L1Trigger/L1CaloTrigger/data/Phase2_NNCaloTaus/v22/DNNident_CB.pb'),
    DNNident_CE_path = cms.string('L1Trigger/L1CaloTrigger/data/Phase2_NNCaloTaus/v22/DNNident_CE.pb'),
    EcalEtMinForClustering = cms.double(0),
    EtMinForSeeding = cms.double(2.5),
    EtaRestriction = cms.double(2.4),
    FeatScaler_CE_path = cms.string('L1Trigger/L1CaloTrigger/data/Phase2_NNCaloTaus/Cl3dFeatScaler_CE.json'),
    HcalEtMinForClustering = cms.double(0),
    HgcalClusters = cms.InputTag("l1tHGCalBackEndLayer2Producer","HGCalBackendLayer2Processor3DClustering"),
    IdWp90_CB = cms.double(0.706),
    IdWp90_CE = cms.double(0.5711),
    IdWp95_CB = cms.double(0.3432),
    IdWp95_CE = cms.double(0.2742),
    IdWp99_CB = cms.double(0.0337),
    IdWp99_CE = cms.double(0.0394),
    VsPuId = cms.PSet(
        isPUFilter = cms.bool(True),
        method = cms.string('BDT'),
        preselection = cms.string(''),
        variables = cms.VPSet(
            cms.PSet(
                name = cms.string('eMax'),
                value = cms.string('eMax()')
            ),
            cms.PSet(
                name = cms.string('eMaxOverE'),
                value = cms.string('eMax()/energy()')
            ),
            cms.PSet(
                name = cms.string('sigmaPhiPhiTot'),
                value = cms.string('sigmaPhiPhiTot()')
            ),
            cms.PSet(
                name = cms.string('sigmaRRTot'),
                value = cms.string('sigmaRRTot()')
            ),
            cms.PSet(
                name = cms.string('triggerCells90percent'),
                value = cms.string('triggerCells90percent()')
            )
        ),
        weightsFile = cms.string('L1Trigger/Phase2L1ParticleFlow/data/hgcal_egID/Photon_Pion_vs_Neutrino_BDTweights_1116.xml.gz'),
        wp = cms.string('-0.10')
    ),
    hgcalTowers = cms.InputTag("l1tHGCalTowerProducer","HGCalTowerProcessor"),
    l1CaloTowers = cms.InputTag("l1tEGammaClusterEmuProducer","L1CaloTowerCollection"),
    mightGet = cms.optional.untracked.vstring,
    preEmId = cms.string('hOverE < 0.3 && hOverE >= 0')
)


process.l1tNNTauProducerPF = cms.EDProducer("L1NNTauProducer",
    L1PFObjects = cms.InputTag("l1tLayer1","PF"),
    NNFileName = cms.string('L1Trigger/Phase2L1ParticleFlow/data/tau_3layer.pb'),
    conesize = cms.double(0.4),
    maxtaus = cms.int32(5),
    nparticles = cms.int32(10),
    seedpt = cms.double(10),
    tausize = cms.double(0.1)
)


process.l1tNNTauProducerPuppi = cms.EDProducer("L1NNTauProducer",
    HW = cms.bool(True),
    L1PFObjects = cms.InputTag("l1tLayer2Deregionizer","Puppi"),
    NNFileName = cms.string('L1Trigger/Phase2L1ParticleFlow/data/tau_3layer_puppi.pb'),
    conesize = cms.double(0.4),
    debug = cms.bool(False),
    emseed = cms.bool(True),
    maxtaus = cms.int32(5),
    nparticles = cms.int32(10),
    seedpt = cms.double(10),
    tausize = cms.double(0.1)
)


process.l1tPFClustersFromCombinedCaloHCal = cms.EDProducer("L1TPFCaloProducer",
    debug = cms.untracked.int32(0),
    ecalCandidates = cms.VInputTag(cms.InputTag("l1tPFClustersFromL1EGClusters","all")),
    ecalClusterer = cms.PSet(
        energyShareAlgo = cms.string('fractions'),
        energyWeightedPosition = cms.bool(True),
        etaBounds = cms.vdouble(-1.0),
        grid = cms.string('phase2'),
        maxClustersEtaPhi = cms.vuint32(),
        minClusterEt = cms.double(0.5),
        phiBounds = cms.vdouble(-1.0),
        seedEt = cms.double(0.5),
        zsEt = cms.double(0.4)
    ),
    emCorrector = cms.string(''),
    hadCorrector = cms.string('L1Trigger/Phase2L1ParticleFlow/data/hadcorr_barrel_110X.root'),
    hadCorrectorEmfMax = cms.double(-1.0),
    hcCorrector = cms.string(''),
    hcalCandidates = cms.VInputTag(),
    hcalClusterer = cms.PSet(
        energyShareAlgo = cms.string('fractions'),
        energyWeightedPosition = cms.bool(True),
        etaBounds = cms.vdouble(-1.0),
        grid = cms.string('phase2'),
        maxClustersEtaPhi = cms.vuint32(),
        minClusterEt = cms.double(0.8),
        phiBounds = cms.vdouble(-1.0),
        seedEt = cms.double(0.5),
        zsEt = cms.double(0.4)
    ),
    hcalDigis = cms.VInputTag(),
    hcalDigisBarrel = cms.bool(True),
    hcalDigisHF = cms.bool(False),
    hcalHGCTowers = cms.VInputTag(),
    hcalHGCTowersHadOnly = cms.bool(False),
    linker = cms.PSet(
        algo = cms.string('flat'),
        energyShareAlgo = cms.string('fractions'),
        energyWeightedPosition = cms.bool(True),
        etaBounds = cms.vdouble(-1.0),
        grid = cms.string('phase2'),
        hoeCut = cms.double(0.1),
        maxClustersEtaPhi = cms.vuint32(),
        minClusterEt = cms.double(1.0),
        minHadronEt = cms.double(1.0),
        minHadronRawEt = cms.double(1.0),
        minPhotonEt = cms.double(1.0),
        noEmInHGC = cms.bool(False),
        phiBounds = cms.vdouble(-1.0),
        seedEt = cms.double(1.0),
        zsEt = cms.double(0.0)
    ),
    phase2barrelCaloTowers = cms.VInputTag(cms.InputTag("l1tEGammaClusterEmuProducer","L1CaloTowerCollection")),
    resol = cms.PSet(
        etaBins = cms.vdouble(0.7, 1.2, 1.6),
        kind = cms.string('calo'),
        offset = cms.vdouble(2.909, 2.864, 0.294),
        scale = cms.vdouble(0.119, 0.127, 0.442)
    )
)


process.l1tPFClustersFromCombinedCaloHF = cms.EDProducer("L1TPFCaloProducer",
    debug = cms.untracked.int32(0),
    ecalCandidates = cms.VInputTag(),
    ecalClusterer = cms.PSet(
        energyShareAlgo = cms.string('fractions'),
        energyWeightedPosition = cms.bool(True),
        etaBounds = cms.vdouble(-1.0),
        grid = cms.string('phase2'),
        maxClustersEtaPhi = cms.vuint32(),
        minClusterEt = cms.double(0.5),
        phiBounds = cms.vdouble(-1.0),
        seedEt = cms.double(0.5),
        zsEt = cms.double(0.4)
    ),
    emCorrector = cms.string(''),
    hadCorrector = cms.string('L1Trigger/Phase2L1ParticleFlow/data/hfcorr_110X.root'),
    hadCorrectorEmfMax = cms.double(-1.0),
    hcCorrector = cms.string(''),
    hcalCandidates = cms.VInputTag(cms.InputTag("l1tHGCalBackEndLayer2Producer","HGCalBackendLayer2Processor3DClustering")),
    hcalClusterer = cms.PSet(
        energyShareAlgo = cms.string('fractions'),
        energyWeightedPosition = cms.bool(True),
        etaBounds = cms.vdouble(-1.0),
        grid = cms.string('phase2'),
        maxClustersEtaPhi = cms.vuint32(),
        minClusterEt = cms.double(0.8),
        phiBounds = cms.vdouble(-1.0),
        seedEt = cms.double(0.5),
        zsEt = cms.double(0.4)
    ),
    hcalDigis = cms.VInputTag(cms.InputTag("simHcalTriggerPrimitiveDigis")),
    hcalDigisBarrel = cms.bool(False),
    hcalDigisHF = cms.bool(True),
    hcalHGCTowers = cms.VInputTag(),
    hcalHGCTowersHadOnly = cms.bool(False),
    linker = cms.PSet(
        algo = cms.string('flat'),
        energyShareAlgo = cms.string('fractions'),
        energyWeightedPosition = cms.bool(True),
        etaBounds = cms.vdouble(-1.0),
        grid = cms.string('phase2'),
        hoeCut = cms.double(0.1),
        maxClustersEtaPhi = cms.vuint32(),
        minClusterEt = cms.double(1.0),
        minHadronEt = cms.double(1.0),
        minHadronRawEt = cms.double(1.0),
        minPhotonEt = cms.double(1.0),
        noEmInHGC = cms.bool(False),
        phiBounds = cms.vdouble(-1.0),
        seedEt = cms.double(1.0),
        zsEt = cms.double(0.0)
    ),
    phase2barrelCaloTowers = cms.VInputTag(),
    resol = cms.PSet(
        etaBins = cms.vdouble(3.5, 4.0, 4.5, 5.0),
        kind = cms.string('calo'),
        offset = cms.vdouble(-1.125, 1.22, 1.514, 1.414),
        scale = cms.vdouble(0.868, 0.159, 0.148, 0.194)
    )
)


process.l1tPFClustersFromHGC3DClusters = cms.EDProducer("PFClusterProducerFromHGC3DClusters",
    corrector = cms.string('L1Trigger/Phase2L1ParticleFlow/data/hadcorr_HGCal3D_TC_110X.root'),
    correctorEmfMax = cms.double(1.125),
    emOnly = cms.bool(False),
    emVsPUID = cms.PSet(
        isPUFilter = cms.bool(True),
        method = cms.string('BDT'),
        preselection = cms.string(''),
        variables = cms.VPSet(
            cms.PSet(
                name = cms.string('eMax'),
                value = cms.string('eMax()')
            ),
            cms.PSet(
                name = cms.string('eMaxOverE'),
                value = cms.string('eMax()/energy()')
            ),
            cms.PSet(
                name = cms.string('sigmaPhiPhiTot'),
                value = cms.string('sigmaPhiPhiTot()')
            ),
            cms.PSet(
                name = cms.string('sigmaRRTot'),
                value = cms.string('sigmaRRTot()')
            ),
            cms.PSet(
                name = cms.string('triggerCells90percent'),
                value = cms.string('triggerCells90percent()')
            )
        ),
        weightsFile = cms.string('L1Trigger/Phase2L1ParticleFlow/data/hgcal_egID/Photon_Pion_vs_Neutrino_BDTweights_1116.xml.gz'),
        wp = cms.string('0.15')
    ),
    emVsPionID = cms.PSet(
        isPUFilter = cms.bool(False),
        method = cms.string('BDT'),
        preselection = cms.string(''),
        variables = cms.VPSet(
            cms.PSet(
                name = cms.string('fabs(eta)'),
                value = cms.string('abs(eta())')
            ),
            cms.PSet(
                name = cms.string('eMax'),
                value = cms.string('eMax()')
            ),
            cms.PSet(
                name = cms.string('sigmaPhiPhiTot'),
                value = cms.string('sigmaPhiPhiTot()')
            ),
            cms.PSet(
                name = cms.string('sigmaZZ'),
                value = cms.string('sigmaZZ()')
            ),
            cms.PSet(
                name = cms.string('layer50percent'),
                value = cms.string('layer50percent()')
            ),
            cms.PSet(
                name = cms.string('triggerCells67percent'),
                value = cms.string('triggerCells67percent()')
            )
        ),
        weightsFile = cms.string('L1Trigger/Phase2L1ParticleFlow/data/hgcal_egID/Photon_vs_Pion_BDTweights_1116.xml.gz'),
        wp = cms.string('0.05')
    ),
    etMin = cms.double(1.0),
    preEmId = cms.string('hOverE < 0.3 && hOverE >= 0'),
    resol = cms.PSet(
        etaBins = cms.vdouble(
            1.7, 1.9, 2.2, 2.5, 2.8,
            2.9
        ),
        kind = cms.string('calo'),
        offset = cms.vdouble(
            1.793, 1.827, 2.363, 2.538, 2.812,
            2.642
        ),
        scale = cms.vdouble(
            0.138, 0.137, 0.124, 0.115, 0.106,
            0.121
        )
    ),
    src = cms.InputTag("l1tHGCalBackEndLayer2Producer","HGCalBackendLayer2Processor3DClustering"),
    useEMInterpretation = cms.string('allKeepHad')
)


process.l1tPFClustersFromL1EGClusters = cms.EDProducer("PFClusterProducerFromL1EGClusters",
    corrector = cms.string(''),
    etMin = cms.double(0.5),
    etaBounds = cms.vdouble(-1.5, 0.0, 1.5),
    maxClustersEtaPhi = cms.vuint32(
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8, 8, 8, 8, 8,
        8
    ),
    phiBounds = cms.vdouble(
        -3.14159265359, -2.792526803191111, -2.4434609527922224, -2.0943951023933334, -1.7453292519944446,
        -1.3962634015955555, -1.0471975511966667, -0.6981317007977778, -0.3490658503988889, 0.0,
        0.3490658503988889, 0.6981317007977778, 1.0471975511966667, 1.3962634015955555, 1.7453292519944446,
        2.0943951023933334, 2.4434609527922224, 2.792526803191111, 3.14159265359
    ),
    resol = cms.PSet(
        etaBins = cms.vdouble(0.7, 1.2, 1.6),
        kind = cms.string('calo'),
        offset = cms.vdouble(0.838, 0.924, 1.101),
        scale = cms.vdouble(0.012, 0.017, 0.018)
    ),
    src = cms.InputTag("l1tEGammaClusterEmuProducer")
)


process.l1tPFTracksFromL1Tracks = cms.EDProducer("PFTrackProducerFromL1Tracks",
    L1TrackTag = cms.InputTag("l1tTTTracksFromTrackletEmulation","Level1TTTracks"),
    nParam = cms.uint32(4),
    qualityBits = cms.vstring(
        'momentum.perp > 2 && getStubRefs.size >= 4 && chi2Red < 15',
        'momentum.perp > 2 && getStubRefs.size >= 6 && chi2Red < 15 && chi2 < 50',
        'momentum.perp > 5 && getStubRefs.size >= 4'
    ),
    redigitizeTrackWord = cms.bool(True),
    resolCalo = cms.PSet(
        etaBins = cms.vdouble(
            1.3, 1.7, 2.8, 3.2, 4.0,
            5.0
        ),
        kind = cms.string('calo'),
        offset = cms.vdouble(
            2.688, 1.382, 2.096, 1.022, 0.757,
            0.185
        ),
        ptMax = cms.vdouble(
            999999, 999999, 999999, 999999, 999999,
            999999
        ),
        ptMin = cms.vdouble(
            5.0, 5.0, 5.0, 5.0, 5.0,
            5.0
        ),
        scale = cms.vdouble(
            0.154, 0.341, 0.105, 0.255, 0.208,
            0.306
        )
    ),
    resolTrack = cms.PSet(
        etaBins = cms.vdouble(0.8, 1.2, 1.5, 2.0, 2.5),
        kind = cms.string('track'),
        offset = cms.vdouble(0.007, 0.009, 0.011, 0.015, 0.025),
        scale = cms.vdouble(0.275, 0.404, 0.512, 0.48, 1.132)
    )
)


process.l1tPFTracksFromL1TracksExtended = cms.EDProducer("PFTrackProducerFromL1Tracks",
    L1TrackTag = cms.InputTag("l1tTTTracksFromExtendedTrackletEmulation","Level1TTTracks"),
    nParam = cms.uint32(5),
    qualityBits = cms.vstring(
        'momentum.perp > 2 && getStubRefs.size >= 4 && chi2Red < 15 && POCA.x < 1.0 && POCA.x > -1.0 && POCA.y < 1.0 && POCA.y > -1.0',
        'momentum.perp > 2 && getStubRefs.size >= 6 && chi2Red < 15 && chi2 < 50 && POCA.x < 1.0 && POCA.x > -1.0 && POCA.y < 1.0 && POCA.y > -1.0',
        'momentum.perp > 5 && getStubRefs.size >= 4 && POCA.x < 1.0 && POCA.x > -1.0 && POCA.y < 1.0 && POCA.y > -1.0'
    ),
    redigitizeTrackWord = cms.bool(True),
    resolCalo = cms.PSet(
        etaBins = cms.vdouble(
            1.3, 1.7, 2.8, 3.2, 4.0,
            5.0
        ),
        kind = cms.string('calo'),
        offset = cms.vdouble(
            2.688, 1.382, 2.096, 1.022, 0.757,
            0.185
        ),
        ptMax = cms.vdouble(
            999999, 999999, 999999, 999999, 999999,
            999999
        ),
        ptMin = cms.vdouble(
            5.0, 5.0, 5.0, 5.0, 5.0,
            5.0
        ),
        scale = cms.vdouble(
            0.154, 0.341, 0.105, 0.255, 0.208,
            0.306
        )
    ),
    resolTrack = cms.PSet(
        etaBins = cms.vdouble(0.8, 1.2, 1.5, 2.0, 2.5),
        kind = cms.string('track'),
        offset = cms.vdouble(0.007, 0.009, 0.011, 0.015, 0.025),
        scale = cms.vdouble(0.275, 0.404, 0.512, 0.48, 1.132)
    )
)


process.l1tPhase1JetCalibrator9 = cms.EDProducer("Phase1L1TJetCalibrator",
    absEtaBinning = cms.vdouble(
        0, 0.435, 0.783, 1.131, 1.479,
        1.83, 2.172, 2.5, 3, 5.191
    ),
    calibration = cms.VPSet(
        cms.PSet(
            etaMax = cms.double(0.435),
            etaMin = cms.double(0),
            l1tCalibrationFactors = cms.vdouble(
                1.23979294877, 1.23979294877, 1.23979294877, 1.2055534748, 1.16221465185,
                1.1287061285, 1.10174091558, 1.08560073006, 1.06054297933, 1.05390045065,
                1.04755164016, 1.04056108809, 1.03288843815, 1.02558076448, 1.01840595314,
                1.01028026223, 0.994979528345, 0.994359643857, 0.993589993902, 0.992484418292,
                0.991580925563, 0.990450519445, 0.989274770481, 0.989062288938, 0.987526878875,
                0.987143421961, 0.986960123031, 0.985118762072, 0.983812522399, 0.982603964756,
                0.982487894417, 0.9776664197
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 16.8880031307, 23.7353661004, 31.9930260358, 41.2104176206,
                50.6051414267, 60.247220362, 69.8880955069, 79.7508114194, 89.9187170854,
                99.552677671, 109.444721239, 120.318481705, 131.427409379, 142.167155912,
                153.513517796, 170.885803296, 192.373045006, 219.860641852, 262.12573798,
                307.407472656, 353.248854037, 405.226529713, 436.515403398, 475.910561056,
                519.15927673, 531.933201461, 577.566348974, 648.509090909, 705.189285714,
                735.044642857, 846.330357143, float('inf')
            )
        ),
        cms.PSet(
            etaMax = cms.double(0.783),
            etaMin = cms.double(0.435),
            l1tCalibrationFactors = cms.vdouble(
                1.26088033666, 1.26088033666, 1.26088033666, 1.2249182059, 1.17603697403,
                1.13860928847, 1.11140597558, 1.09630616073, 1.06349385292, 1.05842913938,
                1.05398549405, 1.04895539789, 1.04466168817, 1.03903857045, 1.03439337381,
                1.02704723184, 1.01728260528, 1.00806725137, 1.00707008321, 1.01235956493,
                1.01667298057, 1.02381172068, 1.02613493771, 1.03240539224, 1.03261816221,
                1.03819304914, 1.04119620768, 1.04378137592, 1.04875440814, 1.05051419343,
                1.05716649068, 1.06763963981
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 16.693599742, 23.4533780602, 31.574804867, 40.607871487,
                50.0226273473, 59.5432535328, 68.9906256857, 78.7889753636, 89.2161833142,
                99.0522298664, 108.852466017, 118.497599303, 128.756191525, 139.378383999,
                151.782981506, 169.483440448, 189.1175302, 214.728316677, 255.782543996,
                301.126430305, 355.202323162, 399.880704365, 440.459131006, 471.072245322,
                498.400961538, 538.905603448, 565.293103448, 600.982142857, 632.773809524,
                672.494791667, 753.359375, float('inf')
            )
        ),
        cms.PSet(
            etaMax = cms.double(1.131),
            etaMin = cms.double(0.783),
            l1tCalibrationFactors = cms.vdouble(
                1.27397054477, 1.27397054477, 1.27397054477, 1.22056106783, 1.15938219586,
                1.1160040995, 1.09031092233, 1.08156433802, 1.05625132693, 1.04972333604,
                1.04407369194, 1.03742876202, 1.03092173843, 1.02452207329, 1.0174828527,
                1.0081675749, 0.995620430116, 0.997797998703, 0.994732173644, 0.990755096265,
                0.985892068632, 0.981548089599, 0.976271265679, 0.973826119963, 0.968463015729,
                0.967588482776, 0.961575991775, 0.957590009436, 0.946036734844, 0.943173725323,
                0.939992812643, 0.933960176944
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 16.880217392, 23.9022653333, 32.2717617865, 41.5428951519,
                51.1274314482, 60.6194200011, 70.1354681051, 79.7123453897, 89.5991512838,
                99.1387572012, 108.769969768, 119.072828547, 129.183554009, 139.711187156,
                152.522826668, 169.649214185, 190.606597094, 218.71218636, 257.712877156,
                306.665735047, 357.65034307, 410.926384374, 453.687469423, 496.926339286,
                531.46780303, 569.60530303, 624.972727273, 711.022727273, 790.854166667,
                824.322916667, 875.34375, float('inf')
            )
        ),
        cms.PSet(
            etaMax = cms.double(1.479),
            etaMin = cms.double(1.131),
            l1tCalibrationFactors = cms.vdouble(
                1.34802320734, 1.34802320734, 1.34802320734, 1.30212233785, 1.24209460275,
                1.19015306181, 1.15264110831, 1.12372171912, 1.10729927389, 1.10106230836,
                1.09548001551, 1.08898845858, 1.08276378762, 1.07376271165, 1.07053777522,
                1.06006587987, 1.04671444238, 1.03585271305, 1.04610056164, 1.03768418,
                1.03119548102, 1.02676678101, 1.01915019189, 1.01242076126, 1.00893312811,
                1.00508141223, 1.00136013543, 0.995951447598, 0.984231225019, 0.980800927737,
                0.973451186577, 0.926524468915
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 16.9252841647, 23.7590878196, 31.7131252613, 40.1274040838,
                49.1249022327, 58.1527487225, 67.4760337457, 77.3005352247, 86.9408929333,
                95.9552442624, 105.163768208, 114.862223233, 126.474646588, 135.799222426,
                146.245567688, 164.415226489, 182.882205173, 207.962905257, 252.719711752,
                302.236065785, 338.504892994, 378.520698052, 426.179788961, 460.12202381,
                484.504166667, 509.6625, 539.993269231, 596.897435897, 647.229166667,
                683.041666667, 863.354166667, float('inf')
            )
        ),
        cms.PSet(
            etaMax = cms.double(1.83),
            etaMin = cms.double(1.479),
            l1tCalibrationFactors = cms.vdouble(
                1.64615015562, 1.64615015562, 1.64615015562, 1.64615015562, 1.62354748453,
                1.58955281827, 1.5596420256, 1.52857227236, 1.4981491184, 1.47483671945,
                1.44848305769, 1.42279372844, 1.41374089612, 1.4008972173, 1.39160024497,
                1.37606952993, 1.3577735774, 1.32702431242, 1.28941444869, 1.28016614572,
                1.24765615972, 1.22053713127, 1.17427545004, 1.15813500374, 1.14591122897,
                1.10386182373, 1.08986646446, 1.08400487869, 1.05705595373, 0.986136154545,
                0.970000328559, 0.926367737882, 0.92097540828
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 14.2534283688, 19.3658902191, 24.8886644469, 31.0322354574,
                37.7896859331, 44.4976332373, 51.4162446385, 59.0148938612, 66.284690538,
                73.8402824355, 82.7989717528, 90.9876146413, 99.3412409944, 107.78800796,
                117.259892418, 130.164931944, 148.875922888, 174.955265646, 212.930051719,
                261.237428866, 306.506597467, 362.21578114, 409.590242347, 431.123798077,
                472.326923077, 514.875, 529.95, 554.859090909, 629.159090909,
                695.25, 740.625, 777.84375, float('inf')
            )
        ),
        cms.PSet(
            etaMax = cms.double(2.172),
            etaMin = cms.double(1.83),
            l1tCalibrationFactors = cms.vdouble(
                1.46868261989, 1.46868261989, 1.46868261989, 1.46868261989, 1.43911078656,
                1.40910755658, 1.38320919564, 1.35606709317, 1.32433798702, 1.30822665905,
                1.27541632146, 1.2610425712, 1.25048382907, 1.23727857048, 1.22557226003,
                1.20350464618, 1.17346110455, 1.15438568707, 1.17264007703, 1.14234287567,
                1.09578935279, 1.05521480704, 1.05300376705, 0.948841272141, 0.90157065563,
                0.900460510028, 0.886102626899, 0.870622263217, 0.794268915654
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 15.0001433736, 20.3973850042, 26.6770760436, 33.5779131491,
                40.9929083245, 48.3312410359, 55.7380156093, 64.5733527179, 72.1987214889,
                78.6859384392, 87.4179205144, 95.9828439006, 104.146361706, 112.70409741,
                124.306269775, 142.207731347, 159.081299984, 186.111094647, 227.056412071,
                278.975766649, 337.838362069, 366.74375, 438.608333333, 540.914583333,
                573.6, 584.05, 604.208333333, 666.25, float('inf')
            )
        ),
        cms.PSet(
            etaMax = cms.double(2.5),
            etaMin = cms.double(2.172),
            l1tCalibrationFactors = cms.vdouble(
                1.33772238866, 1.33772238866, 1.33772238866, 1.33473934195, 1.30242829723,
                1.27631075498, 1.25143840782, 1.2365993847, 1.22283208594, 1.21383948973,
                1.20270942905, 1.19242313522, 1.18157505638, 1.17163939573, 1.16212445691,
                1.15064512868, 1.12111242416, 1.10180561512, 1.06494795446, 1.02791008468,
                0.979565936906, 0.935460737671, 0.922476716325, 0.870214599247, 0.862692426562,
                0.780257657402, 0.726159840141, 0.698509844652
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 15.2987042682, 20.6666592562, 27.150657531, 34.834542074,
                42.9223748303, 51.5696382427, 59.9311353298, 68.6376432274, 76.9323193226,
                85.3108305134, 95.1635083363, 104.886459308, 114.448100114, 123.396424629,
                133.054919468, 151.922665869, 174.391475487, 200.175498357, 244.035295655,
                306.180445151, 373.469537815, 415.021825397, 462.511111111, 506.025,
                571.5, 670.875, 730.375, float('inf')
            )
        ),
        cms.PSet(
            etaMax = cms.double(3),
            etaMin = cms.double(2.5),
            l1tCalibrationFactors = cms.vdouble(
                0.674661962699, 0.674661962699, 0.727593234951, 0.822725694893, 0.927569668143,
                0.97660505882, 0.987209098964, 1.03132324625, 1.02714227345, 1.02334276675,
                1.01880895382, 1.01335319939, 1.01008031255, 1.00497131654, 1.00149634384,
                0.991533222988, 0.9837688439, 1.00989570361, 1.00167820652, 0.985530405844,
                0.971802700851, 0.943756240228, 0.937016745904
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 26.0451028139, 30.9749499579, 36.7640499457, 45.5682186743,
                55.4542083976, 65.3014519722, 75.6207108652, 85.4615770865, 94.6729848702,
                104.29165568, 115.822037843, 125.897005668, 135.571730212, 145.479710821,
                160.990528129, 181.45236014, 203.493072087, 229.468858801, 267.709270335,
                314.597744361, 380.160714286, 434.755952381, float('inf')
            )
        ),
        cms.PSet(
            etaMax = cms.double(5.191),
            etaMin = cms.double(3),
            l1tCalibrationFactors = cms.vdouble(
                1.0, 1.0, 1.0, 1.0, 1.0,
                1.0, 1.0
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 50.6609817658, 87.2333638822, 128.156144343, 165.535850739,
                220.379807692, 214.8125, float('inf')
            )
        )
    ),
    inputCollectionTag = cms.InputTag("l1tPhase1JetProducer","UncalibratedPhase1L1TJetFromPfCandidates"),
    outputCollectionName = cms.string('Phase1L1TJetFromPfCandidates')
)


process.l1tPhase1JetCalibrator9x9 = cms.EDProducer("Phase1L1TJetCalibrator",
    absEtaBinning = cms.vdouble(
        0, 0.435, 0.783, 1.131, 1.479,
        1.83, 2.172, 2.5, 3, 5.191
    ),
    calibration = cms.VPSet(
        cms.PSet(
            etaMax = cms.double(0.435),
            etaMin = cms.double(0),
            l1tCalibrationFactors = cms.vdouble(
                1.23979294877, 1.23979294877, 1.23979294877, 1.2055534748, 1.16221465185,
                1.1287061285, 1.10174091558, 1.08560073006, 1.06054297933, 1.05390045065,
                1.04755164016, 1.04056108809, 1.03288843815, 1.02558076448, 1.01840595314,
                1.01028026223, 0.994979528345, 0.994359643857, 0.993589993902, 0.992484418292,
                0.991580925563, 0.990450519445, 0.989274770481, 0.989062288938, 0.987526878875,
                0.987143421961, 0.986960123031, 0.985118762072, 0.983812522399, 0.982603964756,
                0.982487894417, 0.9776664197
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 16.8880031307, 23.7353661004, 31.9930260358, 41.2104176206,
                50.6051414267, 60.247220362, 69.8880955069, 79.7508114194, 89.9187170854,
                99.552677671, 109.444721239, 120.318481705, 131.427409379, 142.167155912,
                153.513517796, 170.885803296, 192.373045006, 219.860641852, 262.12573798,
                307.407472656, 353.248854037, 405.226529713, 436.515403398, 475.910561056,
                519.15927673, 531.933201461, 577.566348974, 648.509090909, 705.189285714,
                735.044642857, 846.330357143, float('inf')
            )
        ),
        cms.PSet(
            etaMax = cms.double(0.783),
            etaMin = cms.double(0.435),
            l1tCalibrationFactors = cms.vdouble(
                1.26088033666, 1.26088033666, 1.26088033666, 1.2249182059, 1.17603697403,
                1.13860928847, 1.11140597558, 1.09630616073, 1.06349385292, 1.05842913938,
                1.05398549405, 1.04895539789, 1.04466168817, 1.03903857045, 1.03439337381,
                1.02704723184, 1.01728260528, 1.00806725137, 1.00707008321, 1.01235956493,
                1.01667298057, 1.02381172068, 1.02613493771, 1.03240539224, 1.03261816221,
                1.03819304914, 1.04119620768, 1.04378137592, 1.04875440814, 1.05051419343,
                1.05716649068, 1.06763963981
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 16.693599742, 23.4533780602, 31.574804867, 40.607871487,
                50.0226273473, 59.5432535328, 68.9906256857, 78.7889753636, 89.2161833142,
                99.0522298664, 108.852466017, 118.497599303, 128.756191525, 139.378383999,
                151.782981506, 169.483440448, 189.1175302, 214.728316677, 255.782543996,
                301.126430305, 355.202323162, 399.880704365, 440.459131006, 471.072245322,
                498.400961538, 538.905603448, 565.293103448, 600.982142857, 632.773809524,
                672.494791667, 753.359375, float('inf')
            )
        ),
        cms.PSet(
            etaMax = cms.double(1.131),
            etaMin = cms.double(0.783),
            l1tCalibrationFactors = cms.vdouble(
                1.27397054477, 1.27397054477, 1.27397054477, 1.22056106783, 1.15938219586,
                1.1160040995, 1.09031092233, 1.08156433802, 1.05625132693, 1.04972333604,
                1.04407369194, 1.03742876202, 1.03092173843, 1.02452207329, 1.0174828527,
                1.0081675749, 0.995620430116, 0.997797998703, 0.994732173644, 0.990755096265,
                0.985892068632, 0.981548089599, 0.976271265679, 0.973826119963, 0.968463015729,
                0.967588482776, 0.961575991775, 0.957590009436, 0.946036734844, 0.943173725323,
                0.939992812643, 0.933960176944
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 16.880217392, 23.9022653333, 32.2717617865, 41.5428951519,
                51.1274314482, 60.6194200011, 70.1354681051, 79.7123453897, 89.5991512838,
                99.1387572012, 108.769969768, 119.072828547, 129.183554009, 139.711187156,
                152.522826668, 169.649214185, 190.606597094, 218.71218636, 257.712877156,
                306.665735047, 357.65034307, 410.926384374, 453.687469423, 496.926339286,
                531.46780303, 569.60530303, 624.972727273, 711.022727273, 790.854166667,
                824.322916667, 875.34375, float('inf')
            )
        ),
        cms.PSet(
            etaMax = cms.double(1.479),
            etaMin = cms.double(1.131),
            l1tCalibrationFactors = cms.vdouble(
                1.34802320734, 1.34802320734, 1.34802320734, 1.30212233785, 1.24209460275,
                1.19015306181, 1.15264110831, 1.12372171912, 1.10729927389, 1.10106230836,
                1.09548001551, 1.08898845858, 1.08276378762, 1.07376271165, 1.07053777522,
                1.06006587987, 1.04671444238, 1.03585271305, 1.04610056164, 1.03768418,
                1.03119548102, 1.02676678101, 1.01915019189, 1.01242076126, 1.00893312811,
                1.00508141223, 1.00136013543, 0.995951447598, 0.984231225019, 0.980800927737,
                0.973451186577, 0.926524468915
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 16.9252841647, 23.7590878196, 31.7131252613, 40.1274040838,
                49.1249022327, 58.1527487225, 67.4760337457, 77.3005352247, 86.9408929333,
                95.9552442624, 105.163768208, 114.862223233, 126.474646588, 135.799222426,
                146.245567688, 164.415226489, 182.882205173, 207.962905257, 252.719711752,
                302.236065785, 338.504892994, 378.520698052, 426.179788961, 460.12202381,
                484.504166667, 509.6625, 539.993269231, 596.897435897, 647.229166667,
                683.041666667, 863.354166667, float('inf')
            )
        ),
        cms.PSet(
            etaMax = cms.double(1.83),
            etaMin = cms.double(1.479),
            l1tCalibrationFactors = cms.vdouble(
                1.64615015562, 1.64615015562, 1.64615015562, 1.64615015562, 1.62354748453,
                1.58955281827, 1.5596420256, 1.52857227236, 1.4981491184, 1.47483671945,
                1.44848305769, 1.42279372844, 1.41374089612, 1.4008972173, 1.39160024497,
                1.37606952993, 1.3577735774, 1.32702431242, 1.28941444869, 1.28016614572,
                1.24765615972, 1.22053713127, 1.17427545004, 1.15813500374, 1.14591122897,
                1.10386182373, 1.08986646446, 1.08400487869, 1.05705595373, 0.986136154545,
                0.970000328559, 0.926367737882, 0.92097540828
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 14.2534283688, 19.3658902191, 24.8886644469, 31.0322354574,
                37.7896859331, 44.4976332373, 51.4162446385, 59.0148938612, 66.284690538,
                73.8402824355, 82.7989717528, 90.9876146413, 99.3412409944, 107.78800796,
                117.259892418, 130.164931944, 148.875922888, 174.955265646, 212.930051719,
                261.237428866, 306.506597467, 362.21578114, 409.590242347, 431.123798077,
                472.326923077, 514.875, 529.95, 554.859090909, 629.159090909,
                695.25, 740.625, 777.84375, float('inf')
            )
        ),
        cms.PSet(
            etaMax = cms.double(2.172),
            etaMin = cms.double(1.83),
            l1tCalibrationFactors = cms.vdouble(
                1.46868261989, 1.46868261989, 1.46868261989, 1.46868261989, 1.43911078656,
                1.40910755658, 1.38320919564, 1.35606709317, 1.32433798702, 1.30822665905,
                1.27541632146, 1.2610425712, 1.25048382907, 1.23727857048, 1.22557226003,
                1.20350464618, 1.17346110455, 1.15438568707, 1.17264007703, 1.14234287567,
                1.09578935279, 1.05521480704, 1.05300376705, 0.948841272141, 0.90157065563,
                0.900460510028, 0.886102626899, 0.870622263217, 0.794268915654
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 15.0001433736, 20.3973850042, 26.6770760436, 33.5779131491,
                40.9929083245, 48.3312410359, 55.7380156093, 64.5733527179, 72.1987214889,
                78.6859384392, 87.4179205144, 95.9828439006, 104.146361706, 112.70409741,
                124.306269775, 142.207731347, 159.081299984, 186.111094647, 227.056412071,
                278.975766649, 337.838362069, 366.74375, 438.608333333, 540.914583333,
                573.6, 584.05, 604.208333333, 666.25, float('inf')
            )
        ),
        cms.PSet(
            etaMax = cms.double(2.5),
            etaMin = cms.double(2.172),
            l1tCalibrationFactors = cms.vdouble(
                1.33772238866, 1.33772238866, 1.33772238866, 1.33473934195, 1.30242829723,
                1.27631075498, 1.25143840782, 1.2365993847, 1.22283208594, 1.21383948973,
                1.20270942905, 1.19242313522, 1.18157505638, 1.17163939573, 1.16212445691,
                1.15064512868, 1.12111242416, 1.10180561512, 1.06494795446, 1.02791008468,
                0.979565936906, 0.935460737671, 0.922476716325, 0.870214599247, 0.862692426562,
                0.780257657402, 0.726159840141, 0.698509844652
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 15.2987042682, 20.6666592562, 27.150657531, 34.834542074,
                42.9223748303, 51.5696382427, 59.9311353298, 68.6376432274, 76.9323193226,
                85.3108305134, 95.1635083363, 104.886459308, 114.448100114, 123.396424629,
                133.054919468, 151.922665869, 174.391475487, 200.175498357, 244.035295655,
                306.180445151, 373.469537815, 415.021825397, 462.511111111, 506.025,
                571.5, 670.875, 730.375, float('inf')
            )
        ),
        cms.PSet(
            etaMax = cms.double(3),
            etaMin = cms.double(2.5),
            l1tCalibrationFactors = cms.vdouble(
                0.674661962699, 0.674661962699, 0.727593234951, 0.822725694893, 0.927569668143,
                0.97660505882, 0.987209098964, 1.03132324625, 1.02714227345, 1.02334276675,
                1.01880895382, 1.01335319939, 1.01008031255, 1.00497131654, 1.00149634384,
                0.991533222988, 0.9837688439, 1.00989570361, 1.00167820652, 0.985530405844,
                0.971802700851, 0.943756240228, 0.937016745904
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 26.0451028139, 30.9749499579, 36.7640499457, 45.5682186743,
                55.4542083976, 65.3014519722, 75.6207108652, 85.4615770865, 94.6729848702,
                104.29165568, 115.822037843, 125.897005668, 135.571730212, 145.479710821,
                160.990528129, 181.45236014, 203.493072087, 229.468858801, 267.709270335,
                314.597744361, 380.160714286, 434.755952381, float('inf')
            )
        ),
        cms.PSet(
            etaMax = cms.double(5.191),
            etaMin = cms.double(3),
            l1tCalibrationFactors = cms.vdouble(
                1.0, 1.0, 1.0, 1.0, 1.0,
                1.0, 1.0
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 50.6609817658, 87.2333638822, 128.156144343, 165.535850739,
                220.379807692, 214.8125, float('inf')
            )
        )
    ),
    inputCollectionTag = cms.InputTag("l1tPhase1JetProducer9x9","UncalibratedPhase1L1TJetFromPfCandidates"),
    outputCollectionName = cms.string('Phase1L1TJetFromPfCandidates')
)


process.l1tPhase1JetCalibrator9x9trimmed = cms.EDProducer("Phase1L1TJetCalibrator",
    absEtaBinning = cms.vdouble(
        0, 0.435, 0.783, 1.131, 1.479,
        1.83, 2.172, 2.5, 3, 5.191
    ),
    calibration = cms.VPSet(
        cms.PSet(
            etaMax = cms.double(0.435),
            etaMin = cms.double(0),
            l1tCalibrationFactors = cms.vdouble(
                1.26806262588, 1.26806262588, 1.26806262588, 1.21946518166, 1.16379314256,
                1.12254571737, 1.09470447579, 1.0841543755, 1.0506829785, 1.04497069514,
                1.03934326232, 1.03345095744, 1.02750216269, 1.02112447625, 1.01574388754,
                1.00810805817, 0.99605714473, 0.998607125466, 0.993219133111, 0.985092796485,
                0.978878065815, 0.970789716092, 0.961656436256, 0.959516385399, 0.948147862573,
                0.947200388265, 0.946753222399, 0.932749319061, 0.926825446704, 0.923647034369,
                0.913806018949, 0.881718922491
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 16.6077877711, 23.758945127, 32.4028984708, 42.0487682803,
                52.0149801449, 62.3890828336, 72.8126081905, 83.1366634984, 93.6055295245,
                103.912979585, 114.384063612, 125.147255659, 136.35164449, 147.039551665,
                158.871071713, 176.765709913, 197.959631424, 225.348244676, 268.360888373,
                314.00482813, 359.527865313, 414.339896094, 450.220016892, 493.214342949,
                532.413003663, 536.851785714, 582.845833333, 646.270833333, 675.241071429,
                716.678571429, 850.125, float('inf')
            )
        ),
        cms.PSet(
            etaMax = cms.double(0.783),
            etaMin = cms.double(0.435),
            l1tCalibrationFactors = cms.vdouble(
                1.27022476075, 1.27022476075, 1.27022476075, 1.23193977019, 1.17930700881,
                1.13682836123, 1.10620197739, 1.08803729104, 1.06551671995, 1.05815998513,
                1.05091777833, 1.04351195843, 1.03840402395, 1.02970511677, 1.02322448674,
                1.01173641061, 0.998762625873, 1.01162336339, 1.01141830879, 1.01110184225,
                1.01084507077, 1.01048193189, 1.01025026917, 1.00998987557, 1.00977460446,
                1.00958480149, 1.00938402751, 1.00923173234, 1.00896205922, 1.00877952325,
                1.00848454553, 1.00809094748
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 16.455812263, 23.4058211563, 31.8076589224, 41.2694704832,
                51.4874752049, 61.8853021467, 72.1485970296, 82.3017709389, 92.821899346,
                103.57630449, 114.366868474, 123.585206897, 133.756106455, 144.938211106,
                158.174975175, 176.194963818, 195.029478711, 220.750032768, 262.570643701,
                308.538413528, 358.248823119, 405.945769577, 445.403605016, 483.547003284,
                516.029761905, 547.35, 575.6625, 609.5, 645.7625,
                684.054166667, 739.270833333, float('inf')
            )
        ),
        cms.PSet(
            etaMax = cms.double(1.131),
            etaMin = cms.double(0.783),
            l1tCalibrationFactors = cms.vdouble(
                1.26940863552, 1.26940863552, 1.26940863552, 1.21850042272, 1.16014066757,
                1.11360382831, 1.08451810312, 1.06753212736, 1.05501857105, 1.04712872618,
                1.03953145463, 1.03129558228, 1.02392940863, 1.01647040511, 1.00765667693,
                0.997452910609, 0.981686885508, 0.989286565044, 0.992427119505, 0.996927682694,
                1.00148185029, 1.00626281233, 1.01118610536, 1.01492397525, 1.0197730491,
                1.02294548929, 1.02309909545, 1.03179752273, 1.04335891364, 1.04679419517,
                1.04697871887, 1.05665639769
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 16.658158537, 23.8634314296, 32.6191125159, 42.4492040271,
                52.9120745879, 63.2335833679, 73.7409226942, 84.0418964903, 94.148332101,
                104.682994045, 115.453031153, 126.065870612, 136.150267568, 147.219321527,
                160.155420808, 177.820618512, 198.152518248, 224.425247256, 264.972493816,
                313.021014808, 362.557459677, 414.052651985, 460.012722795, 505.578952902,
                548.144755747, 565.794270833, 612.7671875, 720.275, 799.854166667,
                819.0625, 871.395833333, float('inf')
            )
        ),
        cms.PSet(
            etaMax = cms.double(1.479),
            etaMin = cms.double(1.131),
            l1tCalibrationFactors = cms.vdouble(
                1.35067406191, 1.35067406191, 1.35067406191, 1.29728973727, 1.23323857604,
                1.1805316629, 1.14192838643, 1.12335733217, 1.1065907126, 1.1005436618,
                1.09369739262, 1.08689105877, 1.08047792193, 1.07301990489, 1.06799861036,
                1.0578434328, 1.04620517219, 1.03279280198, 1.03276766643, 1.05490363283,
                1.0613631336, 1.07151789312, 1.0923432672, 1.10236162162, 1.12458041647,
                1.13080591424, 1.15738278091, 1.18032588359, 1.20641120054, 1.24407887972,
                1.35400575741
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 16.5873975086, 23.8386796597, 32.2204904018, 41.0711979739,
                50.5775158961, 60.7008778657, 70.3592246275, 80.5033152458, 90.7596180755,
                100.458044915, 110.727608677, 120.671367886, 131.105326809, 140.492334228,
                151.908160762, 168.301305891, 187.144529404, 214.024926059, 257.981265415,
                293.073033708, 313.461711712, 351.47989353, 389.330681818, 428.891447368,
                463.797697368, 504.052083333, 564.821969697, 624.988636364, 703.225,
                884.35, float('inf')
            )
        ),
        cms.PSet(
            etaMax = cms.double(1.83),
            etaMin = cms.double(1.479),
            l1tCalibrationFactors = cms.vdouble(
                1.63343989323, 1.63343989323, 1.63343989323, 1.63343989323, 1.61237327031,
                1.58129290649, 1.54880181313, 1.51437276367, 1.47566044577, 1.4333612461,
                1.43007616674, 1.41838888661, 1.41120688977, 1.40292719871, 1.39289499293,
                1.38154733635, 1.36518171857, 1.34179569075, 1.31131037345, 1.21512470624,
                1.19652546359, 1.18052243169, 1.14219697689, 1.12090132667, 1.10494445955,
                1.08116744865, 1.04972485653, 1.02388122645, 1.02106332779, 0.93821710715,
                0.932912827317, 0.900954541324
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 14.0304333699, 19.2702852281, 25.0387598316, 31.5205165869,
                38.5596312994, 45.8035002303, 53.2357524128, 61.14689424, 69.6758091231,
                77.1332356297, 85.7578326385, 94.7364478681, 102.093621468, 110.807017112,
                120.98025046, 134.167127072, 153.082251962, 178.715988762, 222.463142692,
                269.236689617, 301.854005866, 353.065940767, 409.266883117, 444.382411067,
                481.836956522, 533.888888889, 587.888888889, 614.90625, 695.65625,
                778.75, 813.875, float('inf')
            )
        ),
        cms.PSet(
            etaMax = cms.double(2.172),
            etaMin = cms.double(1.83),
            l1tCalibrationFactors = cms.vdouble(
                1.4878363144, 1.4878363144, 1.4878363144, 1.48518474866, 1.44553707599,
                1.40800746363, 1.37269392814, 1.34268728519, 1.31155107185, 1.29724964634,
                1.26824717982, 1.25895653021, 1.25080118853, 1.24412237598, 1.23242162986,
                1.21983464552, 1.19947769179, 1.17915682723, 1.19591426516, 1.16520900199,
                1.11521954951, 1.08960480689, 1.06320579474, 0.984904677633, 0.936138290441,
                0.933930169885, 0.906741381816, 0.83587888946
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 14.6323212201, 20.2961463384, 26.9638979746, 34.2907286866,
                42.0772600421, 50.2694398412, 58.5750993499, 67.719467579, 75.5350197454,
                83.5378418246, 93.3456200252, 101.928069729, 109.225642018, 118.267354545,
                130.215556381, 146.422127101, 166.433333333, 193.380670156, 231.798066137,
                288.213675743, 341.070380435, 377.434442935, 450.6328125, 539.46875,
                575.10625, 595.658333333, 664.208333333, float('inf')
            )
        ),
        cms.PSet(
            etaMax = cms.double(2.5),
            etaMin = cms.double(2.172),
            l1tCalibrationFactors = cms.vdouble(
                1.34807839515, 1.34807839515, 1.34807839515, 1.33809647408, 1.28296668109,
                1.24225927144, 1.21974923257, 1.21649951103, 1.23064762664, 1.1629973435,
                1.15852840915, 1.15372227709, 1.15041260925, 1.14530829511, 1.13990768956,
                1.13512676324, 1.125588949, 1.11458405118, 1.09607958404, 1.05737289774,
                1.01895994641, 0.992663655394, 0.955621083551, 0.93513823446, 0.901760000269,
                0.843868420876, 0.795304246419, 0.770482557252
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 15.2387099279, 20.6150961319, 27.4619155051, 35.7501165961,
                44.8270237134, 54.3715537124, 63.4511614119, 72.3586695675, 81.6352356283,
                91.1311643255, 101.316594704, 110.228974539, 119.468803554, 131.004799458,
                142.185666464, 157.90981642, 180.468831547, 207.538452813, 253.905743927,
                316.433023873, 368.898168103, 420.252232143, 466.892857143, 510.5625,
                584.5625, 670.875, 730.375, float('inf')
            )
        ),
        cms.PSet(
            etaMax = cms.double(3),
            etaMin = cms.double(2.5),
            l1tCalibrationFactors = cms.vdouble(
                0.482004686949, 0.482004686949, 0.564202174589, 0.736584151614, 0.911565084921,
                0.987344739275, 0.993152983902, 1.03806284348, 1.03244226103, 1.0260158536,
                1.02041940616, 1.0134090195, 1.0076503873, 1.00104447561, 0.995969648589,
                0.981247152992, 0.971158824688, 0.966585664599, 0.963405635485, 0.958075648063,
                0.952490699151, 0.940177797744, 0.938930857749
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 25.9618281426, 30.6891444166, 36.5086109677, 45.3574132365,
                55.0008759284, 64.7493209607, 75.2843507883, 85.0009967022, 94.7383169517,
                104.456129397, 114.645959573, 124.966880164, 134.960872423, 144.402159807,
                160.403905664, 180.457955711, 202.51439951, 229.539912281, 264.65878483,
                309.702205882, 383.5625, 439.520833333, float('inf')
            )
        ),
        cms.PSet(
            etaMax = cms.double(5.191),
            etaMin = cms.double(3),
            l1tCalibrationFactors = cms.vdouble(
                1.0, 1.0, 1.0, 1.0, 1.0,
                1.0, 1.0
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 50.6626115353, 87.3285137419, 126.832659901, 178.631354515,
                238.634615385, 218.625, float('inf')
            )
        )
    ),
    inputCollectionTag = cms.InputTag("l1tPhase1JetProducer9x9trimmed","UncalibratedPhase1L1TJetFromPfCandidates"),
    outputCollectionName = cms.string('Phase1L1TJetFromPfCandidates')
)


process.l1tPhase1JetCalibrator_9x9trimmed = cms.EDProducer("Phase1L1TJetCalibrator",
    absEtaBinning = cms.vdouble(
        0, 0.435, 0.783, 1.131, 1.479,
        1.83, 2.172, 2.5, 3, 5.191
    ),
    calibration = cms.VPSet(
        cms.PSet(
            etaMax = cms.double(0.435),
            etaMin = cms.double(0),
            l1tCalibrationFactors = cms.vdouble(
                1.26806262588, 1.26806262588, 1.26806262588, 1.21946518166, 1.16379314256,
                1.12254571737, 1.09470447579, 1.0841543755, 1.0506829785, 1.04497069514,
                1.03934326232, 1.03345095744, 1.02750216269, 1.02112447625, 1.01574388754,
                1.00810805817, 0.99605714473, 0.998607125466, 0.993219133111, 0.985092796485,
                0.978878065815, 0.970789716092, 0.961656436256, 0.959516385399, 0.948147862573,
                0.947200388265, 0.946753222399, 0.932749319061, 0.926825446704, 0.923647034369,
                0.913806018949, 0.881718922491
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 16.6077877711, 23.758945127, 32.4028984708, 42.0487682803,
                52.0149801449, 62.3890828336, 72.8126081905, 83.1366634984, 93.6055295245,
                103.912979585, 114.384063612, 125.147255659, 136.35164449, 147.039551665,
                158.871071713, 176.765709913, 197.959631424, 225.348244676, 268.360888373,
                314.00482813, 359.527865313, 414.339896094, 450.220016892, 493.214342949,
                532.413003663, 536.851785714, 582.845833333, 646.270833333, 675.241071429,
                716.678571429, 850.125, float('inf')
            )
        ),
        cms.PSet(
            etaMax = cms.double(0.783),
            etaMin = cms.double(0.435),
            l1tCalibrationFactors = cms.vdouble(
                1.27022476075, 1.27022476075, 1.27022476075, 1.23193977019, 1.17930700881,
                1.13682836123, 1.10620197739, 1.08803729104, 1.06551671995, 1.05815998513,
                1.05091777833, 1.04351195843, 1.03840402395, 1.02970511677, 1.02322448674,
                1.01173641061, 0.998762625873, 1.01162336339, 1.01141830879, 1.01110184225,
                1.01084507077, 1.01048193189, 1.01025026917, 1.00998987557, 1.00977460446,
                1.00958480149, 1.00938402751, 1.00923173234, 1.00896205922, 1.00877952325,
                1.00848454553, 1.00809094748
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 16.455812263, 23.4058211563, 31.8076589224, 41.2694704832,
                51.4874752049, 61.8853021467, 72.1485970296, 82.3017709389, 92.821899346,
                103.57630449, 114.366868474, 123.585206897, 133.756106455, 144.938211106,
                158.174975175, 176.194963818, 195.029478711, 220.750032768, 262.570643701,
                308.538413528, 358.248823119, 405.945769577, 445.403605016, 483.547003284,
                516.029761905, 547.35, 575.6625, 609.5, 645.7625,
                684.054166667, 739.270833333, float('inf')
            )
        ),
        cms.PSet(
            etaMax = cms.double(1.131),
            etaMin = cms.double(0.783),
            l1tCalibrationFactors = cms.vdouble(
                1.26940863552, 1.26940863552, 1.26940863552, 1.21850042272, 1.16014066757,
                1.11360382831, 1.08451810312, 1.06753212736, 1.05501857105, 1.04712872618,
                1.03953145463, 1.03129558228, 1.02392940863, 1.01647040511, 1.00765667693,
                0.997452910609, 0.981686885508, 0.989286565044, 0.992427119505, 0.996927682694,
                1.00148185029, 1.00626281233, 1.01118610536, 1.01492397525, 1.0197730491,
                1.02294548929, 1.02309909545, 1.03179752273, 1.04335891364, 1.04679419517,
                1.04697871887, 1.05665639769
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 16.658158537, 23.8634314296, 32.6191125159, 42.4492040271,
                52.9120745879, 63.2335833679, 73.7409226942, 84.0418964903, 94.148332101,
                104.682994045, 115.453031153, 126.065870612, 136.150267568, 147.219321527,
                160.155420808, 177.820618512, 198.152518248, 224.425247256, 264.972493816,
                313.021014808, 362.557459677, 414.052651985, 460.012722795, 505.578952902,
                548.144755747, 565.794270833, 612.7671875, 720.275, 799.854166667,
                819.0625, 871.395833333, float('inf')
            )
        ),
        cms.PSet(
            etaMax = cms.double(1.479),
            etaMin = cms.double(1.131),
            l1tCalibrationFactors = cms.vdouble(
                1.35067406191, 1.35067406191, 1.35067406191, 1.29728973727, 1.23323857604,
                1.1805316629, 1.14192838643, 1.12335733217, 1.1065907126, 1.1005436618,
                1.09369739262, 1.08689105877, 1.08047792193, 1.07301990489, 1.06799861036,
                1.0578434328, 1.04620517219, 1.03279280198, 1.03276766643, 1.05490363283,
                1.0613631336, 1.07151789312, 1.0923432672, 1.10236162162, 1.12458041647,
                1.13080591424, 1.15738278091, 1.18032588359, 1.20641120054, 1.24407887972,
                1.35400575741
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 16.5873975086, 23.8386796597, 32.2204904018, 41.0711979739,
                50.5775158961, 60.7008778657, 70.3592246275, 80.5033152458, 90.7596180755,
                100.458044915, 110.727608677, 120.671367886, 131.105326809, 140.492334228,
                151.908160762, 168.301305891, 187.144529404, 214.024926059, 257.981265415,
                293.073033708, 313.461711712, 351.47989353, 389.330681818, 428.891447368,
                463.797697368, 504.052083333, 564.821969697, 624.988636364, 703.225,
                884.35, float('inf')
            )
        ),
        cms.PSet(
            etaMax = cms.double(1.83),
            etaMin = cms.double(1.479),
            l1tCalibrationFactors = cms.vdouble(
                1.63343989323, 1.63343989323, 1.63343989323, 1.63343989323, 1.61237327031,
                1.58129290649, 1.54880181313, 1.51437276367, 1.47566044577, 1.4333612461,
                1.43007616674, 1.41838888661, 1.41120688977, 1.40292719871, 1.39289499293,
                1.38154733635, 1.36518171857, 1.34179569075, 1.31131037345, 1.21512470624,
                1.19652546359, 1.18052243169, 1.14219697689, 1.12090132667, 1.10494445955,
                1.08116744865, 1.04972485653, 1.02388122645, 1.02106332779, 0.93821710715,
                0.932912827317, 0.900954541324
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 14.0304333699, 19.2702852281, 25.0387598316, 31.5205165869,
                38.5596312994, 45.8035002303, 53.2357524128, 61.14689424, 69.6758091231,
                77.1332356297, 85.7578326385, 94.7364478681, 102.093621468, 110.807017112,
                120.98025046, 134.167127072, 153.082251962, 178.715988762, 222.463142692,
                269.236689617, 301.854005866, 353.065940767, 409.266883117, 444.382411067,
                481.836956522, 533.888888889, 587.888888889, 614.90625, 695.65625,
                778.75, 813.875, float('inf')
            )
        ),
        cms.PSet(
            etaMax = cms.double(2.172),
            etaMin = cms.double(1.83),
            l1tCalibrationFactors = cms.vdouble(
                1.4878363144, 1.4878363144, 1.4878363144, 1.48518474866, 1.44553707599,
                1.40800746363, 1.37269392814, 1.34268728519, 1.31155107185, 1.29724964634,
                1.26824717982, 1.25895653021, 1.25080118853, 1.24412237598, 1.23242162986,
                1.21983464552, 1.19947769179, 1.17915682723, 1.19591426516, 1.16520900199,
                1.11521954951, 1.08960480689, 1.06320579474, 0.984904677633, 0.936138290441,
                0.933930169885, 0.906741381816, 0.83587888946
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 14.6323212201, 20.2961463384, 26.9638979746, 34.2907286866,
                42.0772600421, 50.2694398412, 58.5750993499, 67.719467579, 75.5350197454,
                83.5378418246, 93.3456200252, 101.928069729, 109.225642018, 118.267354545,
                130.215556381, 146.422127101, 166.433333333, 193.380670156, 231.798066137,
                288.213675743, 341.070380435, 377.434442935, 450.6328125, 539.46875,
                575.10625, 595.658333333, 664.208333333, float('inf')
            )
        ),
        cms.PSet(
            etaMax = cms.double(2.5),
            etaMin = cms.double(2.172),
            l1tCalibrationFactors = cms.vdouble(
                1.34807839515, 1.34807839515, 1.34807839515, 1.33809647408, 1.28296668109,
                1.24225927144, 1.21974923257, 1.21649951103, 1.23064762664, 1.1629973435,
                1.15852840915, 1.15372227709, 1.15041260925, 1.14530829511, 1.13990768956,
                1.13512676324, 1.125588949, 1.11458405118, 1.09607958404, 1.05737289774,
                1.01895994641, 0.992663655394, 0.955621083551, 0.93513823446, 0.901760000269,
                0.843868420876, 0.795304246419, 0.770482557252
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 15.2387099279, 20.6150961319, 27.4619155051, 35.7501165961,
                44.8270237134, 54.3715537124, 63.4511614119, 72.3586695675, 81.6352356283,
                91.1311643255, 101.316594704, 110.228974539, 119.468803554, 131.004799458,
                142.185666464, 157.90981642, 180.468831547, 207.538452813, 253.905743927,
                316.433023873, 368.898168103, 420.252232143, 466.892857143, 510.5625,
                584.5625, 670.875, 730.375, float('inf')
            )
        ),
        cms.PSet(
            etaMax = cms.double(3),
            etaMin = cms.double(2.5),
            l1tCalibrationFactors = cms.vdouble(
                0.482004686949, 0.482004686949, 0.564202174589, 0.736584151614, 0.911565084921,
                0.987344739275, 0.993152983902, 1.03806284348, 1.03244226103, 1.0260158536,
                1.02041940616, 1.0134090195, 1.0076503873, 1.00104447561, 0.995969648589,
                0.981247152992, 0.971158824688, 0.966585664599, 0.963405635485, 0.958075648063,
                0.952490699151, 0.940177797744, 0.938930857749
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 25.9618281426, 30.6891444166, 36.5086109677, 45.3574132365,
                55.0008759284, 64.7493209607, 75.2843507883, 85.0009967022, 94.7383169517,
                104.456129397, 114.645959573, 124.966880164, 134.960872423, 144.402159807,
                160.403905664, 180.457955711, 202.51439951, 229.539912281, 264.65878483,
                309.702205882, 383.5625, 439.520833333, float('inf')
            )
        ),
        cms.PSet(
            etaMax = cms.double(5.191),
            etaMin = cms.double(3),
            l1tCalibrationFactors = cms.vdouble(
                1.0, 1.0, 1.0, 1.0, 1.0,
                1.0, 1.0
            ),
            l1tPtBins = cms.vdouble(
                -float('inf'), 50.6626115353, 87.3285137419, 126.832659901, 178.631354515,
                238.634615385, 218.625, float('inf')
            )
        )
    ),
    inputCollectionTag = cms.InputTag("l1tPhase1JetProducer","UncalibratedPhase1L1TJetFromPfCandidates"),
    outputCollectionName = cms.string('Phase1L1TJetFromPfCandidates')
)


process.l1tPhase1JetProducer = cms.EDProducer("Phase1L1TJetProducer",
    cosPhi = cms.vdouble(
        -0.999375513427, -0.992464324695, -0.977959427777, -0.955971804952, -0.926669691581,
        -0.890277288868, -0.847073048421, -0.797387541713, -0.741600930761, -0.680140059366,
        -0.613475187173, -0.542116391547, -0.466609664777, -0.387532736497, -0.305490653258,
        -0.2211111491, -0.135039842524, -0.0479352966351, 0.039536019772, 0.126704831606,
        0.212904178348, 0.297474517214, 0.379768769555, 0.459157271892, 0.535032593708,
        0.606814185113, 0.673952818851, 0.735934792636, 0.792285859677, 0.842574857312,
        0.886417005995, 0.923476853383, 0.953470841004, 0.976169473869, 0.991399076421,
        0.999043121392, 0.999043121392, 0.991399076421, 0.976169473869, 0.953470841004,
        0.923476853383, 0.886417005995, 0.842574857312, 0.792285859677, 0.735934792636,
        0.673952818851, 0.606814185113, 0.535032593708, 0.459157271892, 0.379768769555,
        0.297474517214, 0.212904178348, 0.126704831606, 0.039536019772, -0.0479352966351,
        -0.135039842524, -0.2211111491, -0.305490653258, -0.387532736497, -0.466609664777,
        -0.542116391547, -0.613475187173, -0.680140059366, -0.741600930761, -0.797387541713,
        -0.847073048421, -0.890277288868, -0.926669691581, -0.955971804952, -0.977959427777,
        -0.992464324695, -0.999375513427
    ),
    etaBinning = cms.vdouble(
        -5.0, -4.917, -4.833, -4.75, -4.667,
        -4.583, -4.5, -4.417, -4.333, -4.25,
        -4.167, -4.083, -4.0, -3.917, -3.833,
        -3.75, -3.667, -3.583, -3.5, -3.417,
        -3.333, -3.25, -3.167, -3.083, -3.0,
        -2.917, -2.833, -2.75, -2.667, -2.583,
        -2.5, -2.417, -2.333, -2.25, -2.167,
        -2.083, -2.0, -1.917, -1.833, -1.75,
        -1.667, -1.583, -1.5, -1.417, -1.333,
        -1.25, -1.167, -1.083, -1.0, -0.917,
        -0.833, -0.75, -0.667, -0.583, -0.5,
        -0.417, -0.333, -0.25, -0.167, -0.083,
        0.0, 0.083, 0.167, 0.25, 0.333,
        0.417, 0.5, 0.583, 0.667, 0.75,
        0.833, 0.917, 1.0, 1.083, 1.167,
        1.25, 1.333, 1.417, 1.5, 1.583,
        1.667, 1.75, 1.833, 1.917, 2.0,
        2.083, 2.167, 2.25, 2.333, 2.417,
        2.5, 2.583, 2.667, 2.75, 2.833,
        2.917, 3.0, 3.083, 3.167, 3.25,
        3.333, 3.417, 3.5, 3.583, 3.667,
        3.75, 3.833, 3.917, 4.0, 4.083,
        4.167, 4.25, 4.333, 4.417, 4.5,
        4.583, 4.667, 4.75, 4.833, 4.917,
        5.0
    ),
    etaRegions = cms.vdouble(
        -5.0, -4.5, -4.0, -3.5, -3.0,
        -2.5, -1.5, -0.75, 0, 0.75,
        1.5, 2.5, 3.0, 3.5, 4.0,
        4.5, 5.0
    ),
    etalsb = cms.double(0.0043633231),
    inputCollectionTag = cms.InputTag("l1tLayer1","Puppi"),
    jetIEtaSize = cms.uint32(7),
    jetIPhiSize = cms.uint32(7),
    maxInputsPerRegion = cms.uint32(18),
    metAbsEtaCut = cms.double(3),
    metHFAbsEtaCut = cms.double(5),
    nBinsPhi = cms.uint32(72),
    outputCollectionName = cms.string('UncalibratedPhase1L1TJetFromPfCandidates'),
    phiLow = cms.double(-3.141592653589793),
    phiRegions = cms.vdouble(
        -3.5, -2.8, -2.1, -1.4, -0.7,
        0, 0.7, 1.4, 2.1, 2.8,
        3.5
    ),
    phiUp = cms.double(3.141592653589793),
    philsb = cms.double(0.0043633231),
    ptlsb = cms.double(0.25),
    puSubtraction = cms.bool(False),
    seedPtThreshold = cms.double(5),
    sinPhi = cms.vdouble(
        -0.0353352962792, -0.122533930843, -0.208795013406, -0.293458528818, -0.375876685504,
        -0.455418871948, -0.531476481737, -0.603467570232, -0.670841307236, -0.733082191603,
        -0.789713995522, -0.840303408309, -0.884463351833, -0.921855942186, -0.952195074957,
        -0.975248614326, -0.990840169216, -0.998850442928, -0.999218145922, -0.99194046477,
        -0.977073083675, -0.954729758418, -0.925081445966, -0.888354996422, -0.844831417308,
        -0.794843723474, -0.738774389082, -0.677052421152, -0.610150077076, -0.538579251202,
        -0.462887558141, -0.383654142772, -0.301485248985, -0.217009581095, -0.130873493387,
        -0.0437360446299, 0.0437360446299, 0.130873493387, 0.217009581095, 0.301485248985,
        0.383654142772, 0.462887558141, 0.538579251202, 0.610150077076, 0.677052421152,
        0.738774389082, 0.794843723474, 0.844831417308, 0.888354996422, 0.925081445966,
        0.954729758418, 0.977073083675, 0.99194046477, 0.999218145922, 0.998850442928,
        0.990840169216, 0.975248614326, 0.952195074957, 0.921855942186, 0.884463351833,
        0.840303408309, 0.789713995522, 0.733082191603, 0.670841307236, 0.603467570232,
        0.531476481737, 0.455418871948, 0.375876685504, 0.293458528818, 0.208795013406,
        0.122533930843, 0.0353352962792
    ),
    trimmedGrid = cms.bool(False),
    vetoZeroPt = cms.bool(True)
)


process.l1tPhase1JetProducer9x9 = cms.EDProducer("Phase1L1TJetProducer",
    cosPhi = cms.vdouble(
        -0.999375513427, -0.992464324695, -0.977959427777, -0.955971804952, -0.926669691581,
        -0.890277288868, -0.847073048421, -0.797387541713, -0.741600930761, -0.680140059366,
        -0.613475187173, -0.542116391547, -0.466609664777, -0.387532736497, -0.305490653258,
        -0.2211111491, -0.135039842524, -0.0479352966351, 0.039536019772, 0.126704831606,
        0.212904178348, 0.297474517214, 0.379768769555, 0.459157271892, 0.535032593708,
        0.606814185113, 0.673952818851, 0.735934792636, 0.792285859677, 0.842574857312,
        0.886417005995, 0.923476853383, 0.953470841004, 0.976169473869, 0.991399076421,
        0.999043121392, 0.999043121392, 0.991399076421, 0.976169473869, 0.953470841004,
        0.923476853383, 0.886417005995, 0.842574857312, 0.792285859677, 0.735934792636,
        0.673952818851, 0.606814185113, 0.535032593708, 0.459157271892, 0.379768769555,
        0.297474517214, 0.212904178348, 0.126704831606, 0.039536019772, -0.0479352966351,
        -0.135039842524, -0.2211111491, -0.305490653258, -0.387532736497, -0.466609664777,
        -0.542116391547, -0.613475187173, -0.680140059366, -0.741600930761, -0.797387541713,
        -0.847073048421, -0.890277288868, -0.926669691581, -0.955971804952, -0.977959427777,
        -0.992464324695, -0.999375513427
    ),
    etaBinning = cms.vdouble(
        -5.0, -4.917, -4.833, -4.75, -4.667,
        -4.583, -4.5, -4.417, -4.333, -4.25,
        -4.167, -4.083, -4.0, -3.917, -3.833,
        -3.75, -3.667, -3.583, -3.5, -3.417,
        -3.333, -3.25, -3.167, -3.083, -3.0,
        -2.917, -2.833, -2.75, -2.667, -2.583,
        -2.5, -2.417, -2.333, -2.25, -2.167,
        -2.083, -2.0, -1.917, -1.833, -1.75,
        -1.667, -1.583, -1.5, -1.417, -1.333,
        -1.25, -1.167, -1.083, -1.0, -0.917,
        -0.833, -0.75, -0.667, -0.583, -0.5,
        -0.417, -0.333, -0.25, -0.167, -0.083,
        0.0, 0.083, 0.167, 0.25, 0.333,
        0.417, 0.5, 0.583, 0.667, 0.75,
        0.833, 0.917, 1.0, 1.083, 1.167,
        1.25, 1.333, 1.417, 1.5, 1.583,
        1.667, 1.75, 1.833, 1.917, 2.0,
        2.083, 2.167, 2.25, 2.333, 2.417,
        2.5, 2.583, 2.667, 2.75, 2.833,
        2.917, 3.0, 3.083, 3.167, 3.25,
        3.333, 3.417, 3.5, 3.583, 3.667,
        3.75, 3.833, 3.917, 4.0, 4.083,
        4.167, 4.25, 4.333, 4.417, 4.5,
        4.583, 4.667, 4.75, 4.833, 4.917,
        5.0
    ),
    etaRegions = cms.vdouble(
        -5.0, -4.5, -4.0, -3.5, -3.0,
        -2.5, -1.5, -0.75, 0, 0.75,
        1.5, 2.5, 3.0, 3.5, 4.0,
        4.5, 5.0
    ),
    etalsb = cms.double(0.0043633231),
    inputCollectionTag = cms.InputTag("l1tLayer1","Puppi"),
    jetIEtaSize = cms.uint32(9),
    jetIPhiSize = cms.uint32(9),
    maxInputsPerRegion = cms.uint32(18),
    metAbsEtaCut = cms.double(3),
    metHFAbsEtaCut = cms.double(5),
    nBinsPhi = cms.uint32(72),
    outputCollectionName = cms.string('UncalibratedPhase1L1TJetFromPfCandidates'),
    phiLow = cms.double(-3.141592653589793),
    phiRegions = cms.vdouble(
        -3.5, -2.8, -2.1, -1.4, -0.7,
        0, 0.7, 1.4, 2.1, 2.8,
        3.5
    ),
    phiUp = cms.double(3.141592653589793),
    philsb = cms.double(0.0043633231),
    ptlsb = cms.double(0.25),
    puSubtraction = cms.bool(False),
    seedPtThreshold = cms.double(5),
    sinPhi = cms.vdouble(
        -0.0353352962792, -0.122533930843, -0.208795013406, -0.293458528818, -0.375876685504,
        -0.455418871948, -0.531476481737, -0.603467570232, -0.670841307236, -0.733082191603,
        -0.789713995522, -0.840303408309, -0.884463351833, -0.921855942186, -0.952195074957,
        -0.975248614326, -0.990840169216, -0.998850442928, -0.999218145922, -0.99194046477,
        -0.977073083675, -0.954729758418, -0.925081445966, -0.888354996422, -0.844831417308,
        -0.794843723474, -0.738774389082, -0.677052421152, -0.610150077076, -0.538579251202,
        -0.462887558141, -0.383654142772, -0.301485248985, -0.217009581095, -0.130873493387,
        -0.0437360446299, 0.0437360446299, 0.130873493387, 0.217009581095, 0.301485248985,
        0.383654142772, 0.462887558141, 0.538579251202, 0.610150077076, 0.677052421152,
        0.738774389082, 0.794843723474, 0.844831417308, 0.888354996422, 0.925081445966,
        0.954729758418, 0.977073083675, 0.99194046477, 0.999218145922, 0.998850442928,
        0.990840169216, 0.975248614326, 0.952195074957, 0.921855942186, 0.884463351833,
        0.840303408309, 0.789713995522, 0.733082191603, 0.670841307236, 0.603467570232,
        0.531476481737, 0.455418871948, 0.375876685504, 0.293458528818, 0.208795013406,
        0.122533930843, 0.0353352962792
    ),
    trimmedGrid = cms.bool(False),
    vetoZeroPt = cms.bool(True)
)


process.l1tPhase1JetProducer9x9trimmed = cms.EDProducer("Phase1L1TJetProducer",
    cosPhi = cms.vdouble(
        -0.999375513427, -0.992464324695, -0.977959427777, -0.955971804952, -0.926669691581,
        -0.890277288868, -0.847073048421, -0.797387541713, -0.741600930761, -0.680140059366,
        -0.613475187173, -0.542116391547, -0.466609664777, -0.387532736497, -0.305490653258,
        -0.2211111491, -0.135039842524, -0.0479352966351, 0.039536019772, 0.126704831606,
        0.212904178348, 0.297474517214, 0.379768769555, 0.459157271892, 0.535032593708,
        0.606814185113, 0.673952818851, 0.735934792636, 0.792285859677, 0.842574857312,
        0.886417005995, 0.923476853383, 0.953470841004, 0.976169473869, 0.991399076421,
        0.999043121392, 0.999043121392, 0.991399076421, 0.976169473869, 0.953470841004,
        0.923476853383, 0.886417005995, 0.842574857312, 0.792285859677, 0.735934792636,
        0.673952818851, 0.606814185113, 0.535032593708, 0.459157271892, 0.379768769555,
        0.297474517214, 0.212904178348, 0.126704831606, 0.039536019772, -0.0479352966351,
        -0.135039842524, -0.2211111491, -0.305490653258, -0.387532736497, -0.466609664777,
        -0.542116391547, -0.613475187173, -0.680140059366, -0.741600930761, -0.797387541713,
        -0.847073048421, -0.890277288868, -0.926669691581, -0.955971804952, -0.977959427777,
        -0.992464324695, -0.999375513427
    ),
    etaBinning = cms.vdouble(
        -5.0, -4.917, -4.833, -4.75, -4.667,
        -4.583, -4.5, -4.417, -4.333, -4.25,
        -4.167, -4.083, -4.0, -3.917, -3.833,
        -3.75, -3.667, -3.583, -3.5, -3.417,
        -3.333, -3.25, -3.167, -3.083, -3.0,
        -2.917, -2.833, -2.75, -2.667, -2.583,
        -2.5, -2.417, -2.333, -2.25, -2.167,
        -2.083, -2.0, -1.917, -1.833, -1.75,
        -1.667, -1.583, -1.5, -1.417, -1.333,
        -1.25, -1.167, -1.083, -1.0, -0.917,
        -0.833, -0.75, -0.667, -0.583, -0.5,
        -0.417, -0.333, -0.25, -0.167, -0.083,
        0.0, 0.083, 0.167, 0.25, 0.333,
        0.417, 0.5, 0.583, 0.667, 0.75,
        0.833, 0.917, 1.0, 1.083, 1.167,
        1.25, 1.333, 1.417, 1.5, 1.583,
        1.667, 1.75, 1.833, 1.917, 2.0,
        2.083, 2.167, 2.25, 2.333, 2.417,
        2.5, 2.583, 2.667, 2.75, 2.833,
        2.917, 3.0, 3.083, 3.167, 3.25,
        3.333, 3.417, 3.5, 3.583, 3.667,
        3.75, 3.833, 3.917, 4.0, 4.083,
        4.167, 4.25, 4.333, 4.417, 4.5,
        4.583, 4.667, 4.75, 4.833, 4.917,
        5.0
    ),
    etaRegions = cms.vdouble(
        -5.0, -4.5, -4.0, -3.5, -3.0,
        -2.5, -1.5, -0.75, 0, 0.75,
        1.5, 2.5, 3.0, 3.5, 4.0,
        4.5, 5.0
    ),
    etalsb = cms.double(0.0043633231),
    inputCollectionTag = cms.InputTag("l1tLayer1","Puppi"),
    jetIEtaSize = cms.uint32(9),
    jetIPhiSize = cms.uint32(9),
    maxInputsPerRegion = cms.uint32(18),
    metAbsEtaCut = cms.double(3),
    metHFAbsEtaCut = cms.double(5),
    nBinsPhi = cms.uint32(72),
    outputCollectionName = cms.string('UncalibratedPhase1L1TJetFromPfCandidates'),
    phiLow = cms.double(-3.141592653589793),
    phiRegions = cms.vdouble(
        -3.5, -2.8, -2.1, -1.4, -0.7,
        0, 0.7, 1.4, 2.1, 2.8,
        3.5
    ),
    phiUp = cms.double(3.141592653589793),
    philsb = cms.double(0.0043633231),
    ptlsb = cms.double(0.25),
    puSubtraction = cms.bool(False),
    seedPtThreshold = cms.double(5),
    sinPhi = cms.vdouble(
        -0.0353352962792, -0.122533930843, -0.208795013406, -0.293458528818, -0.375876685504,
        -0.455418871948, -0.531476481737, -0.603467570232, -0.670841307236, -0.733082191603,
        -0.789713995522, -0.840303408309, -0.884463351833, -0.921855942186, -0.952195074957,
        -0.975248614326, -0.990840169216, -0.998850442928, -0.999218145922, -0.99194046477,
        -0.977073083675, -0.954729758418, -0.925081445966, -0.888354996422, -0.844831417308,
        -0.794843723474, -0.738774389082, -0.677052421152, -0.610150077076, -0.538579251202,
        -0.462887558141, -0.383654142772, -0.301485248985, -0.217009581095, -0.130873493387,
        -0.0437360446299, 0.0437360446299, 0.130873493387, 0.217009581095, 0.301485248985,
        0.383654142772, 0.462887558141, 0.538579251202, 0.610150077076, 0.677052421152,
        0.738774389082, 0.794843723474, 0.844831417308, 0.888354996422, 0.925081445966,
        0.954729758418, 0.977073083675, 0.99194046477, 0.999218145922, 0.998850442928,
        0.990840169216, 0.975248614326, 0.952195074957, 0.921855942186, 0.884463351833,
        0.840303408309, 0.789713995522, 0.733082191603, 0.670841307236, 0.603467570232,
        0.531476481737, 0.455418871948, 0.375876685504, 0.293458528818, 0.208795013406,
        0.122533930843, 0.0353352962792
    ),
    trimmedGrid = cms.bool(True),
    vetoZeroPt = cms.bool(True)
)


process.l1tPhase1JetSumsProducer = cms.EDProducer("Phase1L1TJetSumsProducer",
    cosPhi = cms.vdouble(
        -0.999375513427, -0.992464324695, -0.977959427777, -0.955971804952, -0.926669691581,
        -0.890277288868, -0.847073048421, -0.797387541713, -0.741600930761, -0.680140059366,
        -0.613475187173, -0.542116391547, -0.466609664777, -0.387532736497, -0.305490653258,
        -0.2211111491, -0.135039842524, -0.0479352966351, 0.039536019772, 0.126704831606,
        0.212904178348, 0.297474517214, 0.379768769555, 0.459157271892, 0.535032593708,
        0.606814185113, 0.673952818851, 0.735934792636, 0.792285859677, 0.842574857312,
        0.886417005995, 0.923476853383, 0.953470841004, 0.976169473869, 0.991399076421,
        0.999043121392, 0.999043121392, 0.991399076421, 0.976169473869, 0.953470841004,
        0.923476853383, 0.886417005995, 0.842574857312, 0.792285859677, 0.735934792636,
        0.673952818851, 0.606814185113, 0.535032593708, 0.459157271892, 0.379768769555,
        0.297474517214, 0.212904178348, 0.126704831606, 0.039536019772, -0.0479352966351,
        -0.135039842524, -0.2211111491, -0.305490653258, -0.387532736497, -0.466609664777,
        -0.542116391547, -0.613475187173, -0.680140059366, -0.741600930761, -0.797387541713,
        -0.847073048421, -0.890277288868, -0.926669691581, -0.955971804952, -0.977959427777,
        -0.992464324695, -0.999375513427
    ),
    htAbsEtaCut = cms.double(2.4),
    htPtThreshold = cms.double(30),
    inputJetCollectionTag = cms.InputTag("l1tPhase1JetCalibrator","Phase1L1TJetFromPfCandidates"),
    mhtAbsEtaCut = cms.double(2.4),
    mhtPtThreshold = cms.double(30),
    nBinsPhi = cms.uint32(72),
    outputCollectionName = cms.string('Sums'),
    phiLow = cms.double(-3.141592653589793),
    phiUp = cms.double(3.141592653589793),
    ptlsb = cms.double(0.25),
    sinPhi = cms.vdouble(
        -0.0353352962792, -0.122533930843, -0.208795013406, -0.293458528818, -0.375876685504,
        -0.455418871948, -0.531476481737, -0.603467570232, -0.670841307236, -0.733082191603,
        -0.789713995522, -0.840303408309, -0.884463351833, -0.921855942186, -0.952195074957,
        -0.975248614326, -0.990840169216, -0.998850442928, -0.999218145922, -0.99194046477,
        -0.977073083675, -0.954729758418, -0.925081445966, -0.888354996422, -0.844831417308,
        -0.794843723474, -0.738774389082, -0.677052421152, -0.610150077076, -0.538579251202,
        -0.462887558141, -0.383654142772, -0.301485248985, -0.217009581095, -0.130873493387,
        -0.0437360446299, 0.0437360446299, 0.130873493387, 0.217009581095, 0.301485248985,
        0.383654142772, 0.462887558141, 0.538579251202, 0.610150077076, 0.677052421152,
        0.738774389082, 0.794843723474, 0.844831417308, 0.888354996422, 0.925081445966,
        0.954729758418, 0.977073083675, 0.99194046477, 0.999218145922, 0.998850442928,
        0.990840169216, 0.975248614326, 0.952195074957, 0.921855942186, 0.884463351833,
        0.840303408309, 0.789713995522, 0.733082191603, 0.670841307236, 0.603467570232,
        0.531476481737, 0.455418871948, 0.375876685504, 0.293458528818, 0.208795013406,
        0.122533930843, 0.0353352962792
    )
)


process.l1tPhase1JetSumsProducer9x9 = cms.EDProducer("Phase1L1TJetSumsProducer",
    cosPhi = cms.vdouble(
        -0.999375513427, -0.992464324695, -0.977959427777, -0.955971804952, -0.926669691581,
        -0.890277288868, -0.847073048421, -0.797387541713, -0.741600930761, -0.680140059366,
        -0.613475187173, -0.542116391547, -0.466609664777, -0.387532736497, -0.305490653258,
        -0.2211111491, -0.135039842524, -0.0479352966351, 0.039536019772, 0.126704831606,
        0.212904178348, 0.297474517214, 0.379768769555, 0.459157271892, 0.535032593708,
        0.606814185113, 0.673952818851, 0.735934792636, 0.792285859677, 0.842574857312,
        0.886417005995, 0.923476853383, 0.953470841004, 0.976169473869, 0.991399076421,
        0.999043121392, 0.999043121392, 0.991399076421, 0.976169473869, 0.953470841004,
        0.923476853383, 0.886417005995, 0.842574857312, 0.792285859677, 0.735934792636,
        0.673952818851, 0.606814185113, 0.535032593708, 0.459157271892, 0.379768769555,
        0.297474517214, 0.212904178348, 0.126704831606, 0.039536019772, -0.0479352966351,
        -0.135039842524, -0.2211111491, -0.305490653258, -0.387532736497, -0.466609664777,
        -0.542116391547, -0.613475187173, -0.680140059366, -0.741600930761, -0.797387541713,
        -0.847073048421, -0.890277288868, -0.926669691581, -0.955971804952, -0.977959427777,
        -0.992464324695, -0.999375513427
    ),
    htAbsEtaCut = cms.double(2.4),
    htPtThreshold = cms.double(30),
    inputJetCollectionTag = cms.InputTag("l1tPhase1JetCalibrator9x9","Phase1L1TJetFromPfCandidates"),
    mhtAbsEtaCut = cms.double(2.4),
    mhtPtThreshold = cms.double(30),
    nBinsPhi = cms.uint32(72),
    outputCollectionName = cms.string('Sums'),
    phiLow = cms.double(-3.141592653589793),
    phiUp = cms.double(3.141592653589793),
    ptlsb = cms.double(0.25),
    sinPhi = cms.vdouble(
        -0.0353352962792, -0.122533930843, -0.208795013406, -0.293458528818, -0.375876685504,
        -0.455418871948, -0.531476481737, -0.603467570232, -0.670841307236, -0.733082191603,
        -0.789713995522, -0.840303408309, -0.884463351833, -0.921855942186, -0.952195074957,
        -0.975248614326, -0.990840169216, -0.998850442928, -0.999218145922, -0.99194046477,
        -0.977073083675, -0.954729758418, -0.925081445966, -0.888354996422, -0.844831417308,
        -0.794843723474, -0.738774389082, -0.677052421152, -0.610150077076, -0.538579251202,
        -0.462887558141, -0.383654142772, -0.301485248985, -0.217009581095, -0.130873493387,
        -0.0437360446299, 0.0437360446299, 0.130873493387, 0.217009581095, 0.301485248985,
        0.383654142772, 0.462887558141, 0.538579251202, 0.610150077076, 0.677052421152,
        0.738774389082, 0.794843723474, 0.844831417308, 0.888354996422, 0.925081445966,
        0.954729758418, 0.977073083675, 0.99194046477, 0.999218145922, 0.998850442928,
        0.990840169216, 0.975248614326, 0.952195074957, 0.921855942186, 0.884463351833,
        0.840303408309, 0.789713995522, 0.733082191603, 0.670841307236, 0.603467570232,
        0.531476481737, 0.455418871948, 0.375876685504, 0.293458528818, 0.208795013406,
        0.122533930843, 0.0353352962792
    )
)


process.l1tPhase1JetSumsProducer9x9trimmed = cms.EDProducer("Phase1L1TJetSumsProducer",
    cosPhi = cms.vdouble(
        -0.999375513427, -0.992464324695, -0.977959427777, -0.955971804952, -0.926669691581,
        -0.890277288868, -0.847073048421, -0.797387541713, -0.741600930761, -0.680140059366,
        -0.613475187173, -0.542116391547, -0.466609664777, -0.387532736497, -0.305490653258,
        -0.2211111491, -0.135039842524, -0.0479352966351, 0.039536019772, 0.126704831606,
        0.212904178348, 0.297474517214, 0.379768769555, 0.459157271892, 0.535032593708,
        0.606814185113, 0.673952818851, 0.735934792636, 0.792285859677, 0.842574857312,
        0.886417005995, 0.923476853383, 0.953470841004, 0.976169473869, 0.991399076421,
        0.999043121392, 0.999043121392, 0.991399076421, 0.976169473869, 0.953470841004,
        0.923476853383, 0.886417005995, 0.842574857312, 0.792285859677, 0.735934792636,
        0.673952818851, 0.606814185113, 0.535032593708, 0.459157271892, 0.379768769555,
        0.297474517214, 0.212904178348, 0.126704831606, 0.039536019772, -0.0479352966351,
        -0.135039842524, -0.2211111491, -0.305490653258, -0.387532736497, -0.466609664777,
        -0.542116391547, -0.613475187173, -0.680140059366, -0.741600930761, -0.797387541713,
        -0.847073048421, -0.890277288868, -0.926669691581, -0.955971804952, -0.977959427777,
        -0.992464324695, -0.999375513427
    ),
    htAbsEtaCut = cms.double(2.4),
    htPtThreshold = cms.double(30),
    inputJetCollectionTag = cms.InputTag("l1tPhase1JetCalibrator9x9trimmed","Phase1L1TJetFromPfCandidates"),
    mhtAbsEtaCut = cms.double(2.4),
    mhtPtThreshold = cms.double(30),
    nBinsPhi = cms.uint32(72),
    outputCollectionName = cms.string('Sums'),
    phiLow = cms.double(-3.141592653589793),
    phiUp = cms.double(3.141592653589793),
    ptlsb = cms.double(0.25),
    sinPhi = cms.vdouble(
        -0.0353352962792, -0.122533930843, -0.208795013406, -0.293458528818, -0.375876685504,
        -0.455418871948, -0.531476481737, -0.603467570232, -0.670841307236, -0.733082191603,
        -0.789713995522, -0.840303408309, -0.884463351833, -0.921855942186, -0.952195074957,
        -0.975248614326, -0.990840169216, -0.998850442928, -0.999218145922, -0.99194046477,
        -0.977073083675, -0.954729758418, -0.925081445966, -0.888354996422, -0.844831417308,
        -0.794843723474, -0.738774389082, -0.677052421152, -0.610150077076, -0.538579251202,
        -0.462887558141, -0.383654142772, -0.301485248985, -0.217009581095, -0.130873493387,
        -0.0437360446299, 0.0437360446299, 0.130873493387, 0.217009581095, 0.301485248985,
        0.383654142772, 0.462887558141, 0.538579251202, 0.610150077076, 0.677052421152,
        0.738774389082, 0.794843723474, 0.844831417308, 0.888354996422, 0.925081445966,
        0.954729758418, 0.977073083675, 0.99194046477, 0.999218145922, 0.998850442928,
        0.990840169216, 0.975248614326, 0.952195074957, 0.921855942186, 0.884463351833,
        0.840303408309, 0.789713995522, 0.733082191603, 0.670841307236, 0.603467570232,
        0.531476481737, 0.455418871948, 0.375876685504, 0.293458528818, 0.208795013406,
        0.122533930843, 0.0353352962792
    )
)


process.l1tPhase2CaloJetEmulator = cms.EDProducer("Phase2L1CaloJetEmulator",
    absEtaBinsBarrel = cms.vdouble(0.0, 0.3, 0.6, 1.0, 1.5),
    absEtaBinsHF = cms.vdouble(3.0, 3.6, 6.0),
    absEtaBinsHGCal = cms.vdouble(1.5, 1.9, 2.4, 3.0),
    gctFullTowers = cms.InputTag("l1tPhase2L1CaloEGammaEmulator","GCTFullTowers"),
    hcalDigis = cms.InputTag("simHcalTriggerPrimitiveDigis"),
    hgcalTowers = cms.InputTag("l1tHGCalEnergySplitTowerProducer","HGCalTowerProcessor"),
    jetCalibrationsBarrel = cms.vdouble(
        2.221, 2.009, 1.943, 1.884, 1.833,
        1.789, 1.749, 1.715, 1.685, 1.658,
        1.635, 1.614, 1.595, 1.579, 1.564,
        1.551, 1.54, 1.524, 1.507, 1.493,
        1.481, 1.47, 1.461, 1.453, 1.446,
        1.439, 1.432, 1.421, 1.407, 1.393,
        1.38, 1.366, 1.34, 1.294, 1.886,
        1.76, 1.718, 1.68, 1.646, 1.615,
        1.587, 1.562, 1.539, 1.519, 1.5,
        1.483, 1.467, 1.453, 1.44, 1.429,
        1.418, 1.404, 1.387, 1.373, 1.361,
        1.351, 1.342, 1.334, 1.327, 1.321,
        1.315, 1.306, 1.294, 1.284, 1.274,
        1.265, 1.247, 1.217, 2.032, 1.818,
        1.755, 1.702, 1.657, 1.619, 1.587,
        1.56, 1.536, 1.516, 1.499, 1.484,
        1.471, 1.46, 1.45, 1.441, 1.433,
        1.423, 1.411, 1.4, 1.391, 1.383,
        1.375, 1.367, 1.36, 1.353, 1.346,
        1.335, 1.318, 1.301, 1.285, 1.268,
        1.236, 1.178, 2.762, 2.411, 2.304,
        2.213, 2.135, 2.067, 2.009, 1.959,
        1.916, 1.878, 1.846, 1.817, 1.792,
        1.77, 1.75, 1.732, 1.717, 1.696,
        1.673, 1.653, 1.635, 1.62, 1.606,
        1.592, 1.58, 1.568, 1.556, 1.536,
        1.508, 1.481, 1.454, 1.427, 1.373,
        1.279
    ),
    jetCalibrationsHF = cms.vdouble(
        4.632, 3.392, 3.056, 2.784, 2.563,
        2.385, 2.239, 2.121, 2.024, 1.944,
        1.877, 1.822, 1.776, 1.737, 1.703,
        1.674, 1.649, 1.617, 1.58, 1.549,
        1.522, 1.497, 1.474, 1.451, 1.429,
        1.408, 1.386, 1.349, 1.297, 1.244,
        1.192, 1.14, 1.036, 0.853, 2.092,
        1.771, 1.675, 1.593, 1.524, 1.465,
        1.414, 1.371, 1.335, 1.303, 1.276,
        1.253, 1.233, 1.216, 1.201, 1.187,
        1.176, 1.161, 1.145, 1.132, 1.122,
        1.113, 1.105, 1.098, 1.091, 1.085,
        1.08, 1.07, 1.057, 1.044, 1.031,
        1.019, 0.994, 0.95
    ),
    jetCalibrationsHGCal = cms.vdouble(
        2.62, 2.126, 2.008, 1.919, 1.852,
        1.802, 1.764, 1.735, 1.712, 1.695,
        1.682, 1.671, 1.663, 1.657, 1.651,
        1.647, 1.643, 1.638, 1.633, 1.628,
        1.624, 1.62, 1.617, 1.613, 1.609,
        1.606, 1.602, 1.596, 1.587, 1.578,
        1.569, 1.56, 1.542, 1.511, 6.766,
        1.454, 1.273, 1.221, 1.207, 1.204,
        1.204, 1.205, 1.207, 1.209, 1.21,
        1.212, 1.214, 1.215, 1.217, 1.219,
        1.221, 1.223, 1.226, 1.23, 1.233,
        1.237, 1.24, 1.243, 1.247, 1.25,
        1.253, 1.259, 1.268, 1.276, 1.285,
        1.293, 1.31, 1.34, 3.635, 2.281,
        1.968, 1.737, 1.566, 1.441, 1.349,
        1.281, 1.232, 1.197, 1.172, 1.154,
        1.142, 1.133, 1.128, 1.125, 1.124,
        1.125, 1.128, 1.133, 1.139, 1.145,
        1.152, 1.159, 1.166, 1.174, 1.181,
        1.193, 1.211, 1.229, 1.247, 1.265,
        1.301, 1.364
    ),
    jetPtBins = cms.vdouble(
        0.0, 20.0, 25.0, 30.0, 35.0,
        40.0, 45.0, 50.0, 55.0, 60.0,
        65.0, 70.0, 75.0, 80.0, 85.0,
        90.0, 95.0, 100.0, 110.0, 120.0,
        130.0, 140.0, 150.0, 160.0, 170.0,
        180.0, 190.0, 200.0, 225.0, 250.0,
        275.0, 300.0, 325.0, 400.0, 500.0
    ),
    nHits_to_nvtx_params = cms.VPSet(
        cms.PSet(
            fit = cms.string('hgcalEM'),
            nHits_params = cms.vdouble(157.522, 0.09)
        ),
        cms.PSet(
            fit = cms.string('hgcalHad'),
            nHits_params = cms.vdouble(159.295, 0.178)
        ),
        cms.PSet(
            fit = cms.string('hf'),
            nHits_params = cms.vdouble(165.706, 0.153)
        )
    ),
    nvtx_to_PU_sub_params = cms.VPSet(
        cms.PSet(
            calo = cms.string('hgcalEM'),
            iEta = cms.string('er1p4to1p8'),
            nvtx_params = cms.vdouble(-0.011772, 0.004142)
        ),
        cms.PSet(
            calo = cms.string('hgcalEM'),
            iEta = cms.string('er1p8to2p1'),
            nvtx_params = cms.vdouble(-0.015488, 0.00541)
        ),
        cms.PSet(
            calo = cms.string('hgcalEM'),
            iEta = cms.string('er2p1to2p4'),
            nvtx_params = cms.vdouble(-0.02115, 0.006078)
        ),
        cms.PSet(
            calo = cms.string('hgcalEM'),
            iEta = cms.string('er2p4to2p7'),
            nvtx_params = cms.vdouble(-0.015705, 0.005339)
        ),
        cms.PSet(
            calo = cms.string('hgcalEM'),
            iEta = cms.string('er2p7to3p1'),
            nvtx_params = cms.vdouble(-0.018492, 0.00562)
        ),
        cms.PSet(
            calo = cms.string('hgcalHad'),
            iEta = cms.string('er1p4to1p8'),
            nvtx_params = cms.vdouble(0.005675, 0.000615)
        ),
        cms.PSet(
            calo = cms.string('hgcalHad'),
            iEta = cms.string('er1p8to2p1'),
            nvtx_params = cms.vdouble(0.00456, 0.001099)
        ),
        cms.PSet(
            calo = cms.string('hgcalHad'),
            iEta = cms.string('er2p1to2p4'),
            nvtx_params = cms.vdouble(3.6e-05, 0.001608)
        ),
        cms.PSet(
            calo = cms.string('hgcalHad'),
            iEta = cms.string('er2p4to2p7'),
            nvtx_params = cms.vdouble(0.000869, 0.001754)
        ),
        cms.PSet(
            calo = cms.string('hgcalHad'),
            iEta = cms.string('er2p7to3p1'),
            nvtx_params = cms.vdouble(-0.006574, 0.003134)
        ),
        cms.PSet(
            calo = cms.string('hf'),
            iEta = cms.string('er29to33'),
            nvtx_params = cms.vdouble(-0.203291, 0.044096)
        ),
        cms.PSet(
            calo = cms.string('hf'),
            iEta = cms.string('er34to37'),
            nvtx_params = cms.vdouble(-0.210922, 0.045628)
        ),
        cms.PSet(
            calo = cms.string('hf'),
            iEta = cms.string('er38to41'),
            nvtx_params = cms.vdouble(-0.229562, 0.05056)
        )
    ),
    tauAbsEtaBinsBarrel = cms.vdouble(0.0, 0.3, 0.6, 1.0, 1.5),
    tauAbsEtaBinsHGCal = cms.vdouble(1.5, 1.9, 2.4, 3.0),
    tauCalibrationsBarrel = cms.vdouble(
        1.978, 1.661, 1.517, 1.411, 1.333,
        1.276, 1.233, 1.202, 1.179, 1.162,
        1.15, 1.137, 1.127, 1.119, 1.115,
        1.115, 1.912, 1.641, 1.512, 1.414,
        1.338, 1.281, 1.237, 1.203, 1.177,
        1.158, 1.143, 1.127, 1.113, 1.102,
        1.095, 1.094, 1.989, 1.683, 1.541,
        1.434, 1.353, 1.292, 1.246, 1.211,
        1.185, 1.166, 1.151, 1.135, 1.122,
        1.113, 1.107, 1.106, 2.734, 2.129,
        1.86, 1.665, 1.523, 1.42, 1.346,
        1.292, 1.252, 1.224, 1.203, 1.182,
        1.166, 1.155, 1.149, 1.148
    ),
    tauCalibrationsHGCal = cms.vdouble(
        3.528, 2.418, 2.003, 1.74, 1.573,
        1.466, 1.399, 1.356, 1.329, 1.312,
        1.301, 1.292, 1.286, 1.283, 1.282,
        1.282, 3.196, 2.328, 1.99, 1.77,
        1.625, 1.531, 1.47, 1.429, 1.403,
        1.386, 1.374, 1.364, 1.358, 1.355,
        1.353, 1.353, 5.837, 3.089, 2.205,
        1.704, 1.421, 1.26, 1.17, 1.118,
        1.089, 1.073, 1.063, 1.056, 1.053,
        1.052, 1.051, 1.051
    ),
    tauPtBins = cms.vdouble(
        0.0, 10.0, 15.0, 20.0, 25.0,
        30.0, 35.0, 40.0, 45.0, 50.0,
        55.0, 60.0, 70.0, 80.0, 100.0,
        150.0, 200.0
    )
)


process.l1tPhase2L1CaloEGammaEmulator = cms.EDProducer("Phase2L1CaloEGammaEmulator",
    calib = cms.PSet(
        etaBins = cms.vdouble(
            0.087, 0.174, 0.261, 0.348, 0.435,
            0.522, 0.609, 0.696, 0.783, 0.87,
            0.957, 1.044, 1.131, 1.218, 1.305,
            1.392, 1.479
        ),
        ptBins = cms.vdouble(
            12, 20, 30, 40, 55,
            90, 1000000
        ),
        scale = cms.vdouble(
            1.298, 1.287, 1.309, 1.298, 1.309,
            1.309, 1.309, 1.298, 1.309, 1.298,
            1.309, 1.309, 1.309, 1.32, 1.309,
            1.32, 1.309, 1.1742, 1.1639, 1.1639,
            1.1639, 1.1639, 1.1639, 1.1639, 1.1742,
            1.1742, 1.1639, 1.1639, 1.1742, 1.1639,
            1.1639, 1.1742, 1.1742, 1.1536000000000002, 1.11,
            1.11, 1.11, 1.11, 1.11, 1.11,
            1.11, 1.11, 1.11, 1.11, 1.11,
            1.11, 1.11, 1.11, 1.11, 1.11,
            1.1, 1.09, 1.09, 1.09, 1.09,
            1.09, 1.09, 1.09, 1.09, 1.09,
            1.09, 1.09, 1.09, 1.09, 1.09,
            1.09, 1.09, 1.09, 1.07, 1.07,
            1.07, 1.07, 1.07, 1.07, 1.07,
            1.08, 1.07, 1.07, 1.08, 1.08,
            1.07, 1.08, 1.08, 1.08, 1.08,
            1.06, 1.06, 1.06, 1.06, 1.05,
            1.05, 1.06, 1.06, 1.06, 1.06,
            1.06, 1.06, 1.06, 1.06, 1.06,
            1.06, 1.06, 1.04, 1.04, 1.04,
            1.04, 1.05, 1.04, 1.05, 1.05,
            1.05, 1.05, 1.05, 1.05, 1.05,
            1.05, 1.05, 1.05, 1.05
        )
    ),
    ecalTPEB = cms.InputTag("simEcalEBTriggerPrimitiveDigis"),
    hcalTP = cms.InputTag("simHcalTriggerPrimitiveDigis"),
    mightGet = cms.optional.untracked.vstring
)


process.l1tSAMuonsGmt = cms.EDProducer("Phase2L1TGMTSAMuonGhostCleaner",
    barrelDisp = cms.InputTag("l1tKMTFMuonsGmt","displaced"),
    barrelPrompt = cms.InputTag("l1tKMTFMuonsGmt","prompt"),
    forwardDisp = cms.InputTag("l1tFwdMuonsGmt","displaced"),
    forwardPrompt = cms.InputTag("l1tFwdMuonsGmt","prompt")
)


process.l1tSC4PFL1PF = cms.EDProducer("L1SeedConePFJetProducer",
    HW = cms.bool(False),
    L1PFObjects = cms.InputTag("l1tLayer1","PF"),
    coneSize = cms.double(0.4),
    correctorDir = cms.string(''),
    correctorFile = cms.string(''),
    debug = cms.bool(False),
    doCorrections = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    nJets = cms.uint32(16)
)


process.l1tSC4PFL1Puppi = cms.EDProducer("L1SeedConePFJetProducer",
    HW = cms.bool(False),
    L1PFObjects = cms.InputTag("l1tLayer1","Puppi"),
    coneSize = cms.double(0.4),
    correctorDir = cms.string(''),
    correctorFile = cms.string(''),
    debug = cms.bool(False),
    doCorrections = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    nJets = cms.uint32(16)
)


process.l1tSC4PFL1PuppiCorrectedEmulator = cms.EDProducer("L1SeedConePFJetProducer",
    HW = cms.bool(True),
    L1PFObjects = cms.InputTag("l1tLayer2Deregionizer","Puppi"),
    coneSize = cms.double(0.4),
    correctorDir = cms.string('L1PuppiSC4EmuJets'),
    correctorFile = cms.string('L1Trigger/Phase2L1ParticleFlow/data/jecs/jecs_20220308.root'),
    debug = cms.bool(False),
    doCorrections = cms.bool(True),
    mightGet = cms.optional.untracked.vstring,
    nJets = cms.uint32(16)
)


process.l1tSC4PFL1PuppiCorrectedEmulatorMHT = cms.EDProducer("L1MhtPfProducer",
    jets = cms.InputTag("l1tSC4PFL1PuppiCorrectedEmulator"),
    maxJetEta = cms.double(2.4),
    minJetPt = cms.double(30.0)
)


process.l1tSC4PFL1PuppiEmulator = cms.EDProducer("L1SeedConePFJetProducer",
    HW = cms.bool(True),
    L1PFObjects = cms.InputTag("l1tLayer2Deregionizer","Puppi"),
    coneSize = cms.double(0.4),
    correctorDir = cms.string(''),
    correctorFile = cms.string(''),
    debug = cms.bool(False),
    doCorrections = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    nJets = cms.uint32(16)
)


process.l1tSC4PFL1PuppiExtended = cms.EDProducer("L1SeedConePFJetProducer",
    HW = cms.bool(False),
    L1PFObjects = cms.InputTag("l1tLayer1Extended","Puppi"),
    coneSize = cms.double(0.4),
    correctorDir = cms.string(''),
    correctorFile = cms.string(''),
    debug = cms.bool(False),
    doCorrections = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    nJets = cms.uint32(16)
)


process.l1tSC4PFL1PuppiExtendedCorrectedEmulator = cms.EDProducer("L1SeedConePFJetProducer",
    HW = cms.bool(True),
    L1PFObjects = cms.InputTag("l1tLayer2DeregionizerExtended","Puppi"),
    coneSize = cms.double(0.4),
    correctorDir = cms.string('L1PuppiSC4EmuJets'),
    correctorFile = cms.string('L1Trigger/Phase2L1ParticleFlow/data/jecs/jecs_20220308.root'),
    debug = cms.bool(False),
    doCorrections = cms.bool(True),
    mightGet = cms.optional.untracked.vstring,
    nJets = cms.uint32(16)
)


process.l1tSC4PFL1PuppiExtendedEmulator = cms.EDProducer("L1SeedConePFJetProducer",
    HW = cms.bool(True),
    L1PFObjects = cms.InputTag("l1tLayer2DeregionizerExtended","Puppi"),
    coneSize = cms.double(0.4),
    correctorDir = cms.string(''),
    correctorFile = cms.string(''),
    debug = cms.bool(False),
    doCorrections = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    nJets = cms.uint32(16)
)


process.l1tSC8PFL1PuppiCorrectedEmulator = cms.EDProducer("L1SeedConePFJetProducer",
    HW = cms.bool(True),
    L1PFObjects = cms.InputTag("l1tLayer2Deregionizer","Puppi"),
    coneSize = cms.double(0.8),
    correctorDir = cms.string('L1PuppiSC4EmuJets'),
    correctorFile = cms.string('L1Trigger/Phase2L1ParticleFlow/data/jecs/jecs_20220308.root'),
    debug = cms.bool(False),
    doCorrections = cms.bool(True),
    mightGet = cms.optional.untracked.vstring,
    nJets = cms.uint32(16)
)


process.l1tSC8PFL1PuppiEmulator = cms.EDProducer("L1SeedConePFJetProducer",
    HW = cms.bool(True),
    L1PFObjects = cms.InputTag("l1tLayer2Deregionizer","Puppi"),
    coneSize = cms.double(0.8),
    correctorDir = cms.string(''),
    correctorFile = cms.string(''),
    debug = cms.bool(False),
    doCorrections = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    nJets = cms.uint32(16)
)


process.l1tStubsGmt = cms.EDProducer("Phase2L1TGMTStubProducer",
    Barrel = cms.PSet(
        coarseEta_1 = cms.vint32(0, 23, 41),
        coarseEta_2 = cms.vint32(0, 20, 36),
        coarseEta_3 = cms.vint32(0, 17, 31),
        coarseEta_4 = cms.vint32(0, 14, 27),
        etaLSB = cms.double(0.024586688),
        eta_1 = cms.vint32(
            -46, -45, -43, -41, -39,
            -37, -35, -30, -28, -26,
            -23, -20, -18, -15, -9,
            -6, -3, -1, 1, 3,
            6, 9, 15, 18, 20,
            23, 26, 28, 30, 35,
            37, 39, 41, 43, 45,
            1503
        ),
        eta_2 = cms.vint32(
            -41, -39, -38, -36, -34,
            -32, -30, -26, -24, -22,
            -20, -18, -15, -13, -8,
            -5, -3, -1, 1, 3,
            5, 8, 13, 15, 18,
            20, 22, 24, 26, 30,
            32, 34, 36, 38, 39,
            1334
        ),
        eta_3 = cms.vint32(
            -35, -34, -32, -31, -29,
            -27, -26, -22, -20, -19,
            -17, -15, -13, -11, -6,
            -4, -2, -1, 1, 2,
            4, 6, 11, 13, 15,
            17, 19, 20, 22, 26,
            27, 29, 31, 32, 34,
            1148
        ),
        maxBX = cms.int32(0),
        minBX = cms.int32(0),
        minPhiQuality = cms.int32(0),
        minThetaQuality = cms.int32(0),
        phiBDivider = cms.int32(1),
        phiLSB = cms.double(2.396845e-05),
        phiOffset = cms.vint32(0, 0, 0, 0),
        verbose = cms.int32(0)
    ),
    Endcap = cms.PSet(
        coord1LSB = cms.double(0.00613281248),
        coord2LSB = cms.double(0.00613281248),
        eta1LSB = cms.double(0.024586688),
        eta2LSB = cms.double(0.024586688),
        etaMatch = cms.double(0.1),
        maxBX = cms.int32(0),
        minBX = cms.int32(0),
        phiMatch = cms.double(0.05),
        verbose = cms.uint32(0)
    ),
    srcCSC = cms.InputTag("simCscTriggerPrimitiveDigis"),
    srcDT = cms.InputTag("dtTriggerPhase2PrimitiveDigis"),
    srcDTTheta = cms.InputTag("simDtTriggerPrimitiveDigis"),
    srcRPC = cms.InputTag("simMuonRPCDigis"),
    verbose = cms.int32(0)
)


process.l1tTOoLLiPProducer = cms.EDProducer("TOoLLiPProducer",
    NNInput = cms.string('input:0'),
    NNOutput = cms.string('sequential/dense_2/Sigmoid'),
    TOoLLiPVersion = cms.string('TOoLLiP_v1'),
    jets = cms.InputTag("l1tSC4PFL1PuppiExtended"),
    maxEta = cms.double(2.4),
    maxJets = cms.int32(6),
    mightGet = cms.optional.untracked.vstring,
    minPt = cms.double(10),
    nParticles = cms.int32(10),
    useRawPt = cms.bool(True),
    vtx = cms.InputTag("l1tVertexFinderEmulator","L1VerticesEmulation")
)


process.l1tTOoLLiPProducerCorrectedEmulator = cms.EDProducer("TOoLLiPProducer",
    NNInput = cms.string('input:0'),
    NNOutput = cms.string('sequential/dense_2/Sigmoid'),
    TOoLLiPVersion = cms.string('TOoLLiP_v1'),
    jets = cms.InputTag("l1tSC4PFL1PuppiExtendedCorrectedEmulator"),
    maxEta = cms.double(2.4),
    maxJets = cms.int32(6),
    mightGet = cms.optional.untracked.vstring,
    minPt = cms.double(10),
    nParticles = cms.int32(10),
    useRawPt = cms.bool(True),
    vtx = cms.InputTag("l1tVertexFinderEmulator","L1VerticesEmulation")
)


process.l1tTTTracksFromExtendedTrackletEmulation = cms.EDProducer("L1FPGATrackProducer",
    BeamSpotSource = cms.InputTag("offlineBeamSpot"),
    DoMultipleMatches = cms.bool(True),
    Extended = cms.bool(True),
    FailScenario = cms.untracked.int32(0),
    Fakefit = cms.bool(False),
    Hnpar = cms.uint32(5),
    InputTagTTDTC = cms.InputTag("TrackerDTCProducer","StubAccepted"),
    MCTruthClusterInputTag = cms.InputTag("TTClusterAssociatorFromPixelDigis","ClusterAccepted"),
    MCTruthStubInputTag = cms.InputTag("TTStubAssociatorFromPixelDigis","StubAccepted"),
    Reduced = cms.bool(False),
    RemovalType = cms.string('merge'),
    StoreTrackBuilderOutput = cms.bool(False),
    TTStubSource = cms.InputTag("TTStubsFromPhase2TrackerDigis","StubAccepted"),
    TrackQuality = cms.bool(False),
    TrackQualityPSet = cms.PSet(
        featureNames = cms.vstring(
            'tanl',
            'z0_scaled',
            'bendchi2_bin',
            'nstub',
            'nlaymiss_interior',
            'chi2rphi_bin',
            'chi2rz_bin'
        ),
        model = cms.FileInPath('L1Trigger/TrackTrigger/data/L1_TrackQuality_GBDT_emulation_digitized.json'),
        tqemu_TanlScale = cms.double(128.0),
        tqemu_Z0Scale = cms.double(64.0)
    ),
    TrackingParticleInputTag = cms.InputTag("mix","MergedTrackTruth"),
    asciiFileName = cms.untracked.string(''),
    fitPatternFile = cms.FileInPath('L1Trigger/TrackFindingTracklet/data/fitpattern.txt'),
    memoryModulesFile = cms.FileInPath('L1Trigger/TrackFindingTracklet/data/memorymodules_hourglassExtended.dat'),
    processingModulesFile = cms.FileInPath('L1Trigger/TrackFindingTracklet/data/processingmodules_hourglassExtended.dat'),
    readMoreMcTruth = cms.bool(True),
    tableTEDFile = cms.FileInPath('L1Trigger/TrackFindingTracklet/data/table_TED/table_TED_D1PHIA1_D2PHIA1.txt'),
    tableTREFile = cms.FileInPath('L1Trigger/TrackFindingTracklet/data/table_TRE/table_TRE_D1AD2A_1.txt'),
    wiresFile = cms.FileInPath('L1Trigger/TrackFindingTracklet/data/wires_hourglassExtended.dat')
)


process.l1tTTTracksFromTrackletEmulation = cms.EDProducer("L1FPGATrackProducer",
    BeamSpotSource = cms.InputTag("offlineBeamSpot"),
    DoMultipleMatches = cms.bool(True),
    Extended = cms.bool(False),
    FailScenario = cms.untracked.int32(0),
    Fakefit = cms.bool(False),
    Hnpar = cms.uint32(4),
    InputTagTTDTC = cms.InputTag("TrackerDTCProducer","StubAccepted"),
    MCTruthClusterInputTag = cms.InputTag("TTClusterAssociatorFromPixelDigis","ClusterAccepted"),
    MCTruthStubInputTag = cms.InputTag("TTStubAssociatorFromPixelDigis","StubAccepted"),
    Reduced = cms.bool(False),
    RemovalType = cms.string('merge'),
    StoreTrackBuilderOutput = cms.bool(False),
    TTStubSource = cms.InputTag("TTStubsFromPhase2TrackerDigis","StubAccepted"),
    TrackQuality = cms.bool(True),
    TrackQualityPSet = cms.PSet(
        featureNames = cms.vstring(
            'tanl',
            'z0_scaled',
            'bendchi2_bin',
            'nstub',
            'nlaymiss_interior',
            'chi2rphi_bin',
            'chi2rz_bin'
        ),
        model = cms.FileInPath('L1Trigger/TrackTrigger/data/L1_TrackQuality_GBDT_emulation_digitized.json'),
        tqemu_TanlScale = cms.double(128.0),
        tqemu_Z0Scale = cms.double(64.0)
    ),
    TrackingParticleInputTag = cms.InputTag("mix","MergedTrackTruth"),
    asciiFileName = cms.untracked.string(''),
    fitPatternFile = cms.FileInPath('L1Trigger/TrackFindingTracklet/data/fitpattern.txt'),
    memoryModulesFile = cms.FileInPath('L1Trigger/TrackFindingTracklet/data/memorymodules_hourglassExtended.dat'),
    processingModulesFile = cms.FileInPath('L1Trigger/TrackFindingTracklet/data/processingmodules_hourglassExtended.dat'),
    readMoreMcTruth = cms.bool(True),
    wiresFile = cms.FileInPath('L1Trigger/TrackFindingTracklet/data/wires_hourglassExtended.dat')
)


process.l1tTkCaloHTMiss = cms.EDProducer("L1TkHTMissProducer",
    L1TkJetInputTag = cms.InputTag("l1tTkCaloJets","L1TkCaloJets"),
    L1VertexInputTag = cms.InputTag("l1tVertexFinder","L1Vertices"),
    deltaZ = cms.double(1.0),
    displaced = cms.bool(False),
    doVtxConstrain = cms.bool(False),
    jet_maxEta = cms.double(2.2),
    jet_minJetEtHighPt = cms.double(0.0),
    jet_minJetEtLowPt = cms.double(0.0),
    jet_minNtracksHighPt = cms.int32(0),
    jet_minNtracksLowPt = cms.int32(0),
    jet_minPt = cms.double(15.0),
    primaryVtxConstrain = cms.bool(False),
    useCaloJets = cms.bool(True)
)


process.l1tTkCaloHTMissVtx = cms.EDProducer("L1TkHTMissProducer",
    L1TkJetInputTag = cms.InputTag("l1tTkCaloJets","L1TkCaloJets"),
    L1VertexInputTag = cms.InputTag("l1tVertexFinder","L1Vertices"),
    deltaZ = cms.double(1.0),
    displaced = cms.bool(False),
    doVtxConstrain = cms.bool(True),
    jet_maxEta = cms.double(2.2),
    jet_minJetEtHighPt = cms.double(0.0),
    jet_minJetEtLowPt = cms.double(0.0),
    jet_minNtracksHighPt = cms.int32(0),
    jet_minNtracksLowPt = cms.int32(0),
    jet_minPt = cms.double(15.0),
    primaryVtxConstrain = cms.bool(False),
    useCaloJets = cms.bool(True)
)


process.l1tTkMuonsGmt = cms.EDProducer("Phase2L1TGMTTkMuonProducer",
    isolation = cms.PSet(
        AbsIsoThresholdL = cms.int32(160),
        AbsIsoThresholdM = cms.int32(120),
        AbsIsoThresholdT = cms.int32(80),
        IsodumpForHLS = cms.int32(0),
        RelIsoThresholdL = cms.double(0.1),
        RelIsoThresholdM = cms.double(0.05),
        RelIsoThresholdT = cms.double(0.01),
        verbose = cms.int32(0)
    ),
    minTrackStubs = cms.int32(4),
    muonBXMax = cms.int32(0),
    muonBXMin = cms.int32(0),
    srcStubs = cms.InputTag("l1tStubsGmt","tps"),
    srcTracks = cms.InputTag("l1tTTTracksFromTrackletEmulation","Level1TTTracks"),
    tauto3mu = cms.PSet(

    ),
    trackConverter = cms.PSet(
        verbose = cms.int32(0)
    ),
    trackMatching = cms.PSet(
        verbose = cms.int32(0)
    ),
    verbose = cms.int32(0)
)


process.l1tTowerCalibration = cms.EDProducer("L1TowerCalibrator",
    EcalTpEtMin = cms.double(0.5),
    HFTpEtMin = cms.double(0.5),
    HGCalEmTpEtMin = cms.double(0.25),
    HGCalHadTpEtMin = cms.double(0.25),
    HcalTpEtMin = cms.double(0.5),
    L1HgcalTowersInputTag = cms.InputTag("l1tHGCalTowerProducer","HGCalTowerProcessor"),
    barrelSF = cms.double(1.0),
    debug = cms.bool(False),
    hcalDigis = cms.InputTag("simHcalTriggerPrimitiveDigis"),
    hfSF = cms.double(1.0),
    hgcalSF = cms.double(1.0),
    l1CaloTowers = cms.InputTag("l1tEGammaClusterEmuProducer","L1CaloTowerCollection"),
    nHits_to_nvtx_params = cms.VPSet(
        cms.PSet(
            fit = cms.string('hf'),
            params = cms.vdouble(165.706, 0.153)
        ),
        cms.PSet(
            fit = cms.string('ecal'),
            params = cms.vdouble(168.055, 0.377)
        ),
        cms.PSet(
            fit = cms.string('hgcalEM'),
            params = cms.vdouble(157.522, 0.09)
        ),
        cms.PSet(
            fit = cms.string('hgcalHad'),
            params = cms.vdouble(159.295, 0.178)
        ),
        cms.PSet(
            fit = cms.string('hcal'),
            params = cms.vdouble(168.548, 0.362)
        )
    ),
    nvtx_to_PU_sub_params = cms.VPSet(
        cms.PSet(
            calo = cms.string('ecal'),
            iEta = cms.string('er1to3'),
            params = cms.vdouble(0.008955, 0.000298)
        ),
        cms.PSet(
            calo = cms.string('ecal'),
            iEta = cms.string('er4to6'),
            params = cms.vdouble(0.009463, 0.000256)
        ),
        cms.PSet(
            calo = cms.string('ecal'),
            iEta = cms.string('er7to9'),
            params = cms.vdouble(0.008783, 0.000293)
        ),
        cms.PSet(
            calo = cms.string('ecal'),
            iEta = cms.string('er10to12'),
            params = cms.vdouble(0.009308, 0.000255)
        ),
        cms.PSet(
            calo = cms.string('ecal'),
            iEta = cms.string('er13to15'),
            params = cms.vdouble(0.00929, 0.000221)
        ),
        cms.PSet(
            calo = cms.string('ecal'),
            iEta = cms.string('er16to18'),
            params = cms.vdouble(0.009282, 0.000135)
        ),
        cms.PSet(
            calo = cms.string('hcal'),
            iEta = cms.string('er1to3'),
            params = cms.vdouble(0.009976, 0.000377)
        ),
        cms.PSet(
            calo = cms.string('hcal'),
            iEta = cms.string('er4to6'),
            params = cms.vdouble(0.009803, 0.000394)
        ),
        cms.PSet(
            calo = cms.string('hcal'),
            iEta = cms.string('er7to9'),
            params = cms.vdouble(0.009654, 0.000429)
        ),
        cms.PSet(
            calo = cms.string('hcal'),
            iEta = cms.string('er10to12'),
            params = cms.vdouble(0.009107, 0.000528)
        ),
        cms.PSet(
            calo = cms.string('hcal'),
            iEta = cms.string('er13to15'),
            params = cms.vdouble(0.008367, 0.000652)
        ),
        cms.PSet(
            calo = cms.string('hcal'),
            iEta = cms.string('er16to18'),
            params = cms.vdouble(0.009681, 9.6e-05)
        ),
        cms.PSet(
            calo = cms.string('hgcalEM'),
            iEta = cms.string('er1p4to1p8'),
            params = cms.vdouble(-0.011772, 0.004142)
        ),
        cms.PSet(
            calo = cms.string('hgcalEM'),
            iEta = cms.string('er1p8to2p1'),
            params = cms.vdouble(-0.015488, 0.00541)
        ),
        cms.PSet(
            calo = cms.string('hgcalEM'),
            iEta = cms.string('er2p1to2p4'),
            params = cms.vdouble(-0.02115, 0.006078)
        ),
        cms.PSet(
            calo = cms.string('hgcalEM'),
            iEta = cms.string('er2p4to2p7'),
            params = cms.vdouble(-0.015705, 0.005339)
        ),
        cms.PSet(
            calo = cms.string('hgcalEM'),
            iEta = cms.string('er2p7to3p1'),
            params = cms.vdouble(-0.018492, 0.00562)
        ),
        cms.PSet(
            calo = cms.string('hgcalHad'),
            iEta = cms.string('er1p4to1p8'),
            params = cms.vdouble(0.005675, 0.000615)
        ),
        cms.PSet(
            calo = cms.string('hgcalHad'),
            iEta = cms.string('er1p8to2p1'),
            params = cms.vdouble(0.00456, 0.001099)
        ),
        cms.PSet(
            calo = cms.string('hgcalHad'),
            iEta = cms.string('er2p1to2p4'),
            params = cms.vdouble(3.6e-05, 0.001608)
        ),
        cms.PSet(
            calo = cms.string('hgcalHad'),
            iEta = cms.string('er2p4to2p7'),
            params = cms.vdouble(0.000869, 0.001754)
        ),
        cms.PSet(
            calo = cms.string('hgcalHad'),
            iEta = cms.string('er2p7to3p1'),
            params = cms.vdouble(-0.006574, 0.003134)
        ),
        cms.PSet(
            calo = cms.string('hf'),
            iEta = cms.string('er29to33'),
            params = cms.vdouble(-0.203291, 0.044096)
        ),
        cms.PSet(
            calo = cms.string('hf'),
            iEta = cms.string('er34to37'),
            params = cms.vdouble(-0.210922, 0.045628)
        ),
        cms.PSet(
            calo = cms.string('hf'),
            iEta = cms.string('er38to41'),
            params = cms.vdouble(-0.229562, 0.05056)
        )
    ),
    puThreshold = cms.double(5.0),
    puThresholdEcal = cms.double(2.0),
    puThresholdEcalMax = cms.double(1.5),
    puThresholdEcalMin = cms.double(0.75),
    puThresholdHFMax = cms.double(15.0),
    puThresholdHFMin = cms.double(10.0),
    puThresholdHGCalEMMax = cms.double(1.75),
    puThresholdHGCalEMMin = cms.double(1.25),
    puThresholdHGCalHadMax = cms.double(1.25),
    puThresholdHGCalHadMin = cms.double(0.75),
    puThresholdHcal = cms.double(3.0),
    puThresholdHcalMax = cms.double(2.0),
    puThresholdHcalMin = cms.double(1.0),
    puThresholdL1eg = cms.double(2.0),
    skipCalibrations = cms.bool(False)
)


process.l1tTowerCalibrationProducer = cms.EDProducer("L1TowerCalibrator",
    EcalTpEtMin = cms.double(0.5),
    HFTpEtMin = cms.double(0.5),
    HGCalEmTpEtMin = cms.double(0.25),
    HGCalHadTpEtMin = cms.double(0.25),
    HcalTpEtMin = cms.double(0.5),
    L1HgcalTowersInputTag = cms.InputTag("l1tHGCalTowerProducer","HGCalTowerProcessor"),
    barrelSF = cms.double(1.0),
    debug = cms.bool(False),
    hcalDigis = cms.InputTag("simHcalTriggerPrimitiveDigis"),
    hfSF = cms.double(1.0),
    hgcalSF = cms.double(1.0),
    l1CaloTowers = cms.InputTag("l1tEGammaClusterEmuProducer","L1CaloTowerCollection"),
    nHits_to_nvtx_params = cms.VPSet(
        cms.PSet(
            fit = cms.string('hf'),
            params = cms.vdouble(165.706, 0.153)
        ),
        cms.PSet(
            fit = cms.string('ecal'),
            params = cms.vdouble(168.055, 0.377)
        ),
        cms.PSet(
            fit = cms.string('hgcalEM'),
            params = cms.vdouble(157.522, 0.09)
        ),
        cms.PSet(
            fit = cms.string('hgcalHad'),
            params = cms.vdouble(159.295, 0.178)
        ),
        cms.PSet(
            fit = cms.string('hcal'),
            params = cms.vdouble(168.548, 0.362)
        )
    ),
    nvtx_to_PU_sub_params = cms.VPSet(
        cms.PSet(
            calo = cms.string('ecal'),
            iEta = cms.string('er1to3'),
            params = cms.vdouble(0.008955, 0.000298)
        ),
        cms.PSet(
            calo = cms.string('ecal'),
            iEta = cms.string('er4to6'),
            params = cms.vdouble(0.009463, 0.000256)
        ),
        cms.PSet(
            calo = cms.string('ecal'),
            iEta = cms.string('er7to9'),
            params = cms.vdouble(0.008783, 0.000293)
        ),
        cms.PSet(
            calo = cms.string('ecal'),
            iEta = cms.string('er10to12'),
            params = cms.vdouble(0.009308, 0.000255)
        ),
        cms.PSet(
            calo = cms.string('ecal'),
            iEta = cms.string('er13to15'),
            params = cms.vdouble(0.00929, 0.000221)
        ),
        cms.PSet(
            calo = cms.string('ecal'),
            iEta = cms.string('er16to18'),
            params = cms.vdouble(0.009282, 0.000135)
        ),
        cms.PSet(
            calo = cms.string('hcal'),
            iEta = cms.string('er1to3'),
            params = cms.vdouble(0.009976, 0.000377)
        ),
        cms.PSet(
            calo = cms.string('hcal'),
            iEta = cms.string('er4to6'),
            params = cms.vdouble(0.009803, 0.000394)
        ),
        cms.PSet(
            calo = cms.string('hcal'),
            iEta = cms.string('er7to9'),
            params = cms.vdouble(0.009654, 0.000429)
        ),
        cms.PSet(
            calo = cms.string('hcal'),
            iEta = cms.string('er10to12'),
            params = cms.vdouble(0.009107, 0.000528)
        ),
        cms.PSet(
            calo = cms.string('hcal'),
            iEta = cms.string('er13to15'),
            params = cms.vdouble(0.008367, 0.000652)
        ),
        cms.PSet(
            calo = cms.string('hcal'),
            iEta = cms.string('er16to18'),
            params = cms.vdouble(0.009681, 9.6e-05)
        ),
        cms.PSet(
            calo = cms.string('hgcalEM'),
            iEta = cms.string('er1p4to1p8'),
            params = cms.vdouble(-0.011772, 0.004142)
        ),
        cms.PSet(
            calo = cms.string('hgcalEM'),
            iEta = cms.string('er1p8to2p1'),
            params = cms.vdouble(-0.015488, 0.00541)
        ),
        cms.PSet(
            calo = cms.string('hgcalEM'),
            iEta = cms.string('er2p1to2p4'),
            params = cms.vdouble(-0.02115, 0.006078)
        ),
        cms.PSet(
            calo = cms.string('hgcalEM'),
            iEta = cms.string('er2p4to2p7'),
            params = cms.vdouble(-0.015705, 0.005339)
        ),
        cms.PSet(
            calo = cms.string('hgcalEM'),
            iEta = cms.string('er2p7to3p1'),
            params = cms.vdouble(-0.018492, 0.00562)
        ),
        cms.PSet(
            calo = cms.string('hgcalHad'),
            iEta = cms.string('er1p4to1p8'),
            params = cms.vdouble(0.005675, 0.000615)
        ),
        cms.PSet(
            calo = cms.string('hgcalHad'),
            iEta = cms.string('er1p8to2p1'),
            params = cms.vdouble(0.00456, 0.001099)
        ),
        cms.PSet(
            calo = cms.string('hgcalHad'),
            iEta = cms.string('er2p1to2p4'),
            params = cms.vdouble(3.6e-05, 0.001608)
        ),
        cms.PSet(
            calo = cms.string('hgcalHad'),
            iEta = cms.string('er2p4to2p7'),
            params = cms.vdouble(0.000869, 0.001754)
        ),
        cms.PSet(
            calo = cms.string('hgcalHad'),
            iEta = cms.string('er2p7to3p1'),
            params = cms.vdouble(-0.006574, 0.003134)
        ),
        cms.PSet(
            calo = cms.string('hf'),
            iEta = cms.string('er29to33'),
            params = cms.vdouble(-0.203291, 0.044096)
        ),
        cms.PSet(
            calo = cms.string('hf'),
            iEta = cms.string('er34to37'),
            params = cms.vdouble(-0.210922, 0.045628)
        ),
        cms.PSet(
            calo = cms.string('hf'),
            iEta = cms.string('er38to41'),
            params = cms.vdouble(-0.229562, 0.05056)
        )
    ),
    puThreshold = cms.double(5.0),
    puThresholdEcal = cms.double(2.0),
    puThresholdEcalMax = cms.double(1.5),
    puThresholdEcalMin = cms.double(0.75),
    puThresholdHFMax = cms.double(15.0),
    puThresholdHFMin = cms.double(10.0),
    puThresholdHGCalEMMax = cms.double(1.75),
    puThresholdHGCalEMMin = cms.double(1.25),
    puThresholdHGCalHadMax = cms.double(1.25),
    puThresholdHGCalHadMin = cms.double(0.75),
    puThresholdHcal = cms.double(3.0),
    puThresholdHcalMax = cms.double(2.0),
    puThresholdHcalMin = cms.double(1.0),
    puThresholdL1eg = cms.double(2.0),
    skipCalibrations = cms.bool(False)
)


process.l1tTrackFastJets = cms.EDProducer("L1TrackFastJetProducer",
    L1TrackInputTag = cms.InputTag("l1tTrackVertexAssociationProducerForJets","Level1TTTracksSelectedAssociated"),
    coneSize = cms.double(0.4),
    displaced = cms.bool(False)
)


process.l1tTrackFastJetsExtended = cms.EDProducer("L1TrackFastJetProducer",
    L1TrackInputTag = cms.InputTag("l1tTrackVertexAssociationProducerExtendedForJets","Level1TTTracksExtendedSelectedAssociated"),
    coneSize = cms.double(0.4),
    displaced = cms.bool(True)
)


process.l1tTrackJets = cms.EDProducer("L1TrackJetProducer",
    L1TrackInputTag = cms.InputTag("l1tTrackVertexAssociationProducerForJets","Level1TTTracksSelectedAssociated"),
    d0_cutNStubs4 = cms.double(-1),
    d0_cutNStubs5 = cms.double(-1),
    displaced = cms.bool(False),
    etaBins = cms.int32(24),
    highpTJetMinTrackMultiplicity = cms.int32(3),
    highpTJetThreshold = cms.double(100.0),
    lowpTJetMinTrackMultiplicity = cms.int32(2),
    lowpTJetThreshold = cms.double(50.0),
    minTrkJetpT = cms.double(-1.0),
    nDisplacedTracks = cms.int32(2),
    phiBins = cms.int32(27),
    trk_etaMax = cms.double(2.4),
    trk_ptMax = cms.double(200.0),
    trk_zMax = cms.double(15.0),
    zBins = cms.int32(1)
)


process.l1tTrackJetsEmulation = cms.EDProducer("L1TrackJetEmulatorProducer",
    L1TrackInputTag = cms.InputTag("l1tTrackVertexAssociationProducerForJets","Level1TTTracksSelectedAssociatedEmulation"),
    d0_cutNStubs4 = cms.double(-1),
    d0_cutNStubs5 = cms.double(-1),
    displaced = cms.bool(False),
    etaBins = cms.int32(24),
    highpTJetMinTrackMultiplicity = cms.int32(3),
    highpTJetThreshold = cms.double(100.0),
    lowpTJetMinTrackMultiplicity = cms.int32(2),
    lowpTJetThreshold = cms.double(50.0),
    minTrkJetpT = cms.double(-1.0),
    nDisplacedTracks = cms.int32(2),
    phiBins = cms.int32(27),
    trk_etaMax = cms.double(2.4),
    trk_ptMax = cms.double(200.0),
    trk_zMax = cms.double(15.0),
    zBins = cms.int32(1)
)


process.l1tTrackJetsExtended = cms.EDProducer("L1TrackJetProducer",
    L1TrackInputTag = cms.InputTag("l1tTrackVertexAssociationProducerExtendedForJets","Level1TTTracksExtendedSelectedAssociated"),
    d0_cutNStubs4 = cms.double(-1),
    d0_cutNStubs5 = cms.double(0.22),
    displaced = cms.bool(True),
    etaBins = cms.int32(24),
    highpTJetMinTrackMultiplicity = cms.int32(3),
    highpTJetThreshold = cms.double(100.0),
    lowpTJetMinTrackMultiplicity = cms.int32(2),
    lowpTJetThreshold = cms.double(50.0),
    minTrkJetpT = cms.double(5.0),
    nDisplacedTracks = cms.int32(3),
    phiBins = cms.int32(27),
    trk_etaMax = cms.double(2.4),
    trk_ptMax = cms.double(200.0),
    trk_zMax = cms.double(15.0),
    zBins = cms.int32(1)
)


process.l1tTrackJetsExtendedEmulation = cms.EDProducer("L1TrackJetEmulatorProducer",
    L1TrackInputTag = cms.InputTag("l1tTrackVertexAssociationProducerExtendedForJets","Level1TTTracksExtendedSelectedAssociatedEmulation"),
    d0_cutNStubs4 = cms.double(-1),
    d0_cutNStubs5 = cms.double(0.22),
    displaced = cms.bool(True),
    etaBins = cms.int32(24),
    highpTJetMinTrackMultiplicity = cms.int32(3),
    highpTJetThreshold = cms.double(100.0),
    lowpTJetMinTrackMultiplicity = cms.int32(2),
    lowpTJetThreshold = cms.double(50.0),
    minTrkJetpT = cms.double(5.0),
    nDisplacedTracks = cms.int32(3),
    phiBins = cms.int32(27),
    trk_etaMax = cms.double(2.4),
    trk_ptMax = cms.double(200.0),
    trk_zMax = cms.double(15.0),
    zBins = cms.int32(1)
)


process.l1tTrackSelectionProducer = cms.EDProducer("L1TrackSelectionProducer",
    cutSet = cms.PSet(
        absEtaMax = cms.double(2.4),
        absZ0Max = cms.double(15.0),
        nPSStubsMin = cms.int32(0),
        nStubsMin = cms.int32(4),
        promptMVAMin = cms.double(-1.0),
        ptMin = cms.double(2.0),
        reducedBendChi2Max = cms.double(2.25),
        reducedBendChi2MaxNstub4 = cms.double(999.9),
        reducedBendChi2MaxNstub5 = cms.double(999.9),
        reducedChi2RPhiMax = cms.double(20.0),
        reducedChi2RPhiMaxNstub4 = cms.double(999.9),
        reducedChi2RPhiMaxNstub5 = cms.double(999.9),
        reducedChi2RZMax = cms.double(5.0),
        reducedChi2RZMaxNstub4 = cms.double(999.9),
        reducedChi2RZMaxNstub5 = cms.double(999.9)
    ),
    debug = cms.int32(0),
    l1TracksInputTag = cms.InputTag("l1tGTTInputProducer","Level1TTTracksConverted"),
    outputCollectionName = cms.string('Level1TTTracksSelected'),
    processEmulatedTracks = cms.bool(True),
    processSimulatedTracks = cms.bool(True)
)


process.l1tTrackSelectionProducerExtended = cms.EDProducer("L1TrackSelectionProducer",
    cutSet = cms.PSet(
        absEtaMax = cms.double(2.4),
        absZ0Max = cms.double(15.0),
        nPSStubsMin = cms.int32(0),
        nStubsMin = cms.int32(4),
        promptMVAMin = cms.double(-1.0),
        ptMin = cms.double(3.0),
        reducedBendChi2Max = cms.double(2.4),
        reducedBendChi2MaxNstub4 = cms.double(999.9),
        reducedBendChi2MaxNstub5 = cms.double(999.9),
        reducedChi2RPhiMax = cms.double(40.0),
        reducedChi2RPhiMaxNstub4 = cms.double(999.9),
        reducedChi2RPhiMaxNstub5 = cms.double(999.9),
        reducedChi2RZMax = cms.double(10.0),
        reducedChi2RZMaxNstub4 = cms.double(999.9),
        reducedChi2RZMaxNstub5 = cms.double(999.9)
    ),
    debug = cms.int32(0),
    l1TracksInputTag = cms.InputTag("l1tGTTInputProducerExtended","Level1TTTracksExtendedConverted"),
    outputCollectionName = cms.string('Level1TTTracksExtendedSelected'),
    processEmulatedTracks = cms.bool(True),
    processSimulatedTracks = cms.bool(True)
)


process.l1tTrackSelectionProducerExtendedForEtMiss = cms.EDProducer("L1TrackSelectionProducer",
    cutSet = cms.PSet(
        absEtaMax = cms.double(2.4),
        absZ0Max = cms.double(15.0),
        nPSStubsMin = cms.int32(0),
        nStubsMin = cms.int32(4),
        promptMVAMin = cms.double(-1.0),
        ptMin = cms.double(3.0),
        reducedBendChi2Max = cms.double(2.4),
        reducedBendChi2MaxNstub4 = cms.double(999.9),
        reducedBendChi2MaxNstub5 = cms.double(999.9),
        reducedChi2RPhiMax = cms.double(40.0),
        reducedChi2RPhiMaxNstub4 = cms.double(999.9),
        reducedChi2RPhiMaxNstub5 = cms.double(999.9),
        reducedChi2RZMax = cms.double(10.0),
        reducedChi2RZMaxNstub4 = cms.double(999.9),
        reducedChi2RZMaxNstub5 = cms.double(999.9)
    ),
    debug = cms.int32(0),
    l1TracksInputTag = cms.InputTag("l1tGTTInputProducerExtended","Level1TTTracksExtendedConverted"),
    outputCollectionName = cms.string('Level1TTTracksExtendedSelected'),
    processEmulatedTracks = cms.bool(True),
    processSimulatedTracks = cms.bool(True)
)


process.l1tTrackSelectionProducerExtendedForJets = cms.EDProducer("L1TrackSelectionProducer",
    cutSet = cms.PSet(
        absEtaMax = cms.double(2.4),
        absZ0Max = cms.double(15.0),
        nPSStubsMin = cms.int32(0),
        nStubsMin = cms.int32(4),
        promptMVAMin = cms.double(-1.0),
        ptMin = cms.double(2.0),
        reducedBendChi2Max = cms.double(999.9),
        reducedBendChi2MaxNstub4 = cms.double(2.25),
        reducedBendChi2MaxNstub5 = cms.double(3.5),
        reducedChi2RPhiMax = cms.double(999.9),
        reducedChi2RPhiMaxNstub4 = cms.double(6.0),
        reducedChi2RPhiMaxNstub5 = cms.double(35.0),
        reducedChi2RZMax = cms.double(999.9),
        reducedChi2RZMaxNstub4 = cms.double(5.0),
        reducedChi2RZMaxNstub5 = cms.double(5.0)
    ),
    debug = cms.int32(0),
    l1TracksInputTag = cms.InputTag("l1tGTTInputProducerExtended","Level1TTTracksExtendedConverted"),
    outputCollectionName = cms.string('Level1TTTracksExtendedSelected'),
    processEmulatedTracks = cms.bool(True),
    processSimulatedTracks = cms.bool(True)
)


process.l1tTrackSelectionProducerForEtMiss = cms.EDProducer("L1TrackSelectionProducer",
    cutSet = cms.PSet(
        absEtaMax = cms.double(2.4),
        absZ0Max = cms.double(15.0),
        nPSStubsMin = cms.int32(0),
        nStubsMin = cms.int32(4),
        promptMVAMin = cms.double(-1.0),
        ptMin = cms.double(2.0),
        reducedBendChi2Max = cms.double(2.25),
        reducedBendChi2MaxNstub4 = cms.double(999.9),
        reducedBendChi2MaxNstub5 = cms.double(999.9),
        reducedChi2RPhiMax = cms.double(20.0),
        reducedChi2RPhiMaxNstub4 = cms.double(999.9),
        reducedChi2RPhiMaxNstub5 = cms.double(999.9),
        reducedChi2RZMax = cms.double(5.0),
        reducedChi2RZMaxNstub4 = cms.double(999.9),
        reducedChi2RZMaxNstub5 = cms.double(999.9)
    ),
    debug = cms.int32(0),
    l1TracksInputTag = cms.InputTag("l1tGTTInputProducer","Level1TTTracksConverted"),
    outputCollectionName = cms.string('Level1TTTracksSelected'),
    processEmulatedTracks = cms.bool(True),
    processSimulatedTracks = cms.bool(True)
)


process.l1tTrackSelectionProducerForJets = cms.EDProducer("L1TrackSelectionProducer",
    cutSet = cms.PSet(
        absEtaMax = cms.double(2.4),
        absZ0Max = cms.double(15.0),
        nPSStubsMin = cms.int32(0),
        nStubsMin = cms.int32(4),
        promptMVAMin = cms.double(0.1),
        ptMin = cms.double(2.0),
        reducedBendChi2Max = cms.double(999.9),
        reducedBendChi2MaxNstub4 = cms.double(999.9),
        reducedBendChi2MaxNstub5 = cms.double(999.9),
        reducedChi2RPhiMax = cms.double(999.9),
        reducedChi2RPhiMaxNstub4 = cms.double(999.9),
        reducedChi2RPhiMaxNstub5 = cms.double(999.9),
        reducedChi2RZMax = cms.double(999.9),
        reducedChi2RZMaxNstub4 = cms.double(999.9),
        reducedChi2RZMaxNstub5 = cms.double(999.9)
    ),
    debug = cms.int32(0),
    l1TracksInputTag = cms.InputTag("l1tGTTInputProducer","Level1TTTracksConverted"),
    outputCollectionName = cms.string('Level1TTTracksSelected'),
    processEmulatedTracks = cms.bool(True),
    processSimulatedTracks = cms.bool(True)
)


process.l1tTrackTripletEmulation = cms.EDProducer("L1TrackTripletEmulatorProducer",
    L1PVertexInputTag = cms.InputTag("l1tVertexFinderEmulator","L1VerticesEmulation"),
    L1TrackInputTag = cms.InputTag("l1tTrackVertexAssociationProducerForJets","Level1TTTracksSelectedAssociatedEmulation"),
    displaced = cms.bool(False),
    pair1_dzMax = cms.double(2.0),
    pair1_dzMin = cms.double(-1.0),
    pair1_massMax = cms.double(85),
    pair1_massMin = cms.double(0),
    pair2_dzMax = cms.double(0.8),
    pair2_dzMin = cms.double(-1.0),
    pair2_massMax = cms.double(85),
    pair2_massMin = cms.double(2.0),
    triplet_absCharge = cms.int32(1),
    triplet_absEtaMax = cms.double(100000000.0),
    triplet_absEtaMin = cms.double(-1.0),
    triplet_massMax = cms.double(100.0),
    triplet_massMin = cms.double(60.0),
    triplet_ptMax = cms.double(300),
    triplet_ptMin = cms.double(-1.0),
    trk1_absEtaMax = cms.double(2.4),
    trk1_dzMax = cms.double(100000000.0),
    trk1_mass = cms.double(0.139),
    trk1_mvaMin = cms.double(0.85),
    trk1_nstubMin = cms.int32(4),
    trk1_ptMin = cms.double(24.0),
    trk2_absEtaMax = cms.double(2.4),
    trk2_dzMax = cms.double(100000000.0),
    trk2_mass = cms.double(0.139),
    trk2_mvaMin = cms.double(0.85),
    trk2_nstubMin = cms.int32(4),
    trk2_ptMin = cms.double(20.0),
    trk3_absEtaMax = cms.double(2.4),
    trk3_dzMax = cms.double(100000000.0),
    trk3_mass = cms.double(0.139),
    trk3_mvaMin = cms.double(0.95),
    trk3_nstubMin = cms.int32(4),
    trk3_ptMin = cms.double(5.0)
)


process.l1tTrackVertexAssociationProducer = cms.EDProducer("L1TrackVertexAssociationProducer",
    cutSet = cms.PSet(
        deltaZMax = cms.vdouble(
            0.37, 0.5, 0.6, 0.75, 1.0,
            1.6
        ),
        deltaZMaxEtaBounds = cms.vdouble(
            0.0, 0.7, 1.0, 1.2, 1.6,
            2.0, 2.4
        )
    ),
    debug = cms.int32(0),
    fwNTrackSetsTVA = cms.uint32(94),
    l1SelectedTracksEmulationInputTag = cms.InputTag("l1tTrackSelectionProducer","Level1TTTracksSelectedEmulation"),
    l1SelectedTracksInputTag = cms.InputTag("l1tTrackSelectionProducer","Level1TTTracksSelected"),
    l1TracksInputTag = cms.InputTag("l1tGTTInputProducer","Level1TTTracksConverted"),
    l1VerticesEmulationInputTag = cms.InputTag("l1tVertexFinderEmulator","L1VerticesEmulation"),
    l1VerticesInputTag = cms.InputTag("l1tVertexFinder","L1Vertices"),
    outputCollectionName = cms.string('Level1TTTracksSelectedAssociated'),
    processEmulatedTracks = cms.bool(True),
    processSimulatedTracks = cms.bool(True),
    useDisplacedTracksDeltaZOverride = cms.double(-1.0)
)


process.l1tTrackVertexAssociationProducerExtended = cms.EDProducer("L1TrackVertexAssociationProducer",
    cutSet = cms.PSet(
        deltaZMax = cms.vdouble(
            3.0, 3.0, 3.0, 3.0, 3.0,
            3.0
        ),
        deltaZMaxEtaBounds = cms.vdouble(
            0.0, 0.7, 1.0, 1.2, 1.6,
            2.0, 2.4
        )
    ),
    debug = cms.int32(0),
    fwNTrackSetsTVA = cms.uint32(94),
    l1SelectedTracksEmulationInputTag = cms.InputTag("l1tTrackSelectionProducerExtended","Level1TTTracksExtendedSelectedEmulation"),
    l1SelectedTracksInputTag = cms.InputTag("l1tTrackSelectionProducerExtended","Level1TTTracksExtendedSelected"),
    l1TracksInputTag = cms.InputTag("l1tGTTInputProducerExtended","Level1TTTracksExtendedConverted"),
    l1VerticesEmulationInputTag = cms.InputTag("l1tVertexFinderEmulator","L1VerticesEmulation"),
    l1VerticesInputTag = cms.InputTag("l1tVertexFinder","L1Vertices"),
    outputCollectionName = cms.string('Level1TTTracksExtendedSelectedAssociated'),
    processEmulatedTracks = cms.bool(True),
    processSimulatedTracks = cms.bool(True),
    useDisplacedTracksDeltaZOverride = cms.double(3.0)
)


process.l1tTrackVertexAssociationProducerExtendedForEtMiss = cms.EDProducer("L1TrackVertexAssociationProducer",
    cutSet = cms.PSet(
        deltaZMax = cms.vdouble(
            3.0, 3.0, 3.0, 3.0, 3.0,
            3.0
        ),
        deltaZMaxEtaBounds = cms.vdouble(
            0.0, 0.7, 1.0, 1.2, 1.6,
            2.0, 2.4
        )
    ),
    debug = cms.int32(0),
    fwNTrackSetsTVA = cms.uint32(94),
    l1SelectedTracksEmulationInputTag = cms.InputTag("l1tTrackSelectionProducerExtendedForEtMiss","Level1TTTracksExtendedSelectedEmulation"),
    l1SelectedTracksInputTag = cms.InputTag("l1tTrackSelectionProducerExtendedForEtMiss","Level1TTTracksExtendedSelected"),
    l1TracksInputTag = cms.InputTag("l1tGTTInputProducerExtended","Level1TTTracksExtendedConverted"),
    l1VerticesEmulationInputTag = cms.InputTag("l1tVertexFinderEmulator","L1VerticesEmulation"),
    l1VerticesInputTag = cms.InputTag("l1tVertexFinder","L1Vertices"),
    outputCollectionName = cms.string('Level1TTTracksExtendedSelectedAssociated'),
    processEmulatedTracks = cms.bool(True),
    processSimulatedTracks = cms.bool(True),
    useDisplacedTracksDeltaZOverride = cms.double(3.0)
)


process.l1tTrackVertexAssociationProducerExtendedForJets = cms.EDProducer("L1TrackVertexAssociationProducer",
    cutSet = cms.PSet(
        deltaZMax = cms.vdouble(5.0),
        deltaZMaxEtaBounds = cms.vdouble(0.0, 2.4)
    ),
    debug = cms.int32(0),
    fwNTrackSetsTVA = cms.uint32(94),
    l1SelectedTracksEmulationInputTag = cms.InputTag("l1tTrackSelectionProducerExtendedForJets","Level1TTTracksExtendedSelectedEmulation"),
    l1SelectedTracksInputTag = cms.InputTag("l1tTrackSelectionProducerExtendedForJets","Level1TTTracksExtendedSelected"),
    l1TracksInputTag = cms.InputTag("l1tGTTInputProducerExtended","Level1TTTracksExtendedConverted"),
    l1VerticesEmulationInputTag = cms.InputTag("l1tVertexFinderEmulator","L1VerticesEmulation"),
    l1VerticesInputTag = cms.InputTag("l1tVertexFinder","L1Vertices"),
    outputCollectionName = cms.string('Level1TTTracksExtendedSelectedAssociated'),
    processEmulatedTracks = cms.bool(True),
    processSimulatedTracks = cms.bool(True),
    useDisplacedTracksDeltaZOverride = cms.double(3.0)
)


process.l1tTrackVertexAssociationProducerForEtMiss = cms.EDProducer("L1TrackVertexAssociationProducer",
    cutSet = cms.PSet(
        deltaZMax = cms.vdouble(
            0.37, 0.5, 0.6, 0.75, 1.0,
            1.6
        ),
        deltaZMaxEtaBounds = cms.vdouble(
            0.0, 0.7, 1.0, 1.2, 1.6,
            2.0, 2.4
        )
    ),
    debug = cms.int32(0),
    fwNTrackSetsTVA = cms.uint32(94),
    l1SelectedTracksEmulationInputTag = cms.InputTag("l1tTrackSelectionProducerForEtMiss","Level1TTTracksSelectedEmulation"),
    l1SelectedTracksInputTag = cms.InputTag("l1tTrackSelectionProducerForEtMiss","Level1TTTracksSelected"),
    l1TracksInputTag = cms.InputTag("l1tGTTInputProducer","Level1TTTracksConverted"),
    l1VerticesEmulationInputTag = cms.InputTag("l1tVertexFinderEmulator","L1VerticesEmulation"),
    l1VerticesInputTag = cms.InputTag("l1tVertexFinder","L1Vertices"),
    outputCollectionName = cms.string('Level1TTTracksSelectedAssociated'),
    processEmulatedTracks = cms.bool(True),
    processSimulatedTracks = cms.bool(True),
    useDisplacedTracksDeltaZOverride = cms.double(-1.0)
)


process.l1tTrackVertexAssociationProducerForJets = cms.EDProducer("L1TrackVertexAssociationProducer",
    cutSet = cms.PSet(
        deltaZMax = cms.vdouble(0.55),
        deltaZMaxEtaBounds = cms.vdouble(0.0, 2.4)
    ),
    debug = cms.int32(0),
    fwNTrackSetsTVA = cms.uint32(94),
    l1SelectedTracksEmulationInputTag = cms.InputTag("l1tTrackSelectionProducerForJets","Level1TTTracksSelectedEmulation"),
    l1SelectedTracksInputTag = cms.InputTag("l1tTrackSelectionProducerForJets","Level1TTTracksSelected"),
    l1TracksInputTag = cms.InputTag("l1tGTTInputProducer","Level1TTTracksConverted"),
    l1VerticesEmulationInputTag = cms.InputTag("l1tVertexFinderEmulator","L1VerticesEmulation"),
    l1VerticesInputTag = cms.InputTag("l1tVertexFinder","L1Vertices"),
    outputCollectionName = cms.string('Level1TTTracksSelectedAssociated'),
    processEmulatedTracks = cms.bool(True),
    processSimulatedTracks = cms.bool(True),
    useDisplacedTracksDeltaZOverride = cms.double(-1.0)
)


process.l1tTrackVertexNNAssociationProducer = cms.EDProducer("L1TrackVertexAssociationProducer",
    associationGraph = cms.FileInPath('L1Trigger/L1TTrackMatch/data/NNVtx_AssociationModelGraph.pb'),
    associationNetworkEtaBounds = cms.vdouble(
        0.0, 0.01984126984126984, 0.03968253968253968, 0.05952380952380952, 0.07936507936507936,
        0.0992063492063492, 0.11904761904761904, 0.1388888888888889, 0.15873015873015872, 0.17857142857142855,
        0.1984126984126984, 0.21825396825396826, 0.23809523809523808, 0.2579365079365079, 0.2777777777777778,
        0.2976190476190476, 0.31746031746031744, 0.33730158730158727, 0.3571428571428571, 0.376984126984127,
        0.3968253968253968, 0.41666666666666663, 0.4365079365079365, 0.45634920634920634, 0.47619047619047616,
        0.496031746031746, 0.5158730158730158, 0.5357142857142857, 0.5555555555555556, 0.5753968253968254,
        0.5952380952380952, 0.615079365079365, 0.6349206349206349, 0.6547619047619048, 0.6746031746031745,
        0.6944444444444444, 0.7142857142857142, 0.7341269841269841, 0.753968253968254, 0.7738095238095237,
        0.7936507936507936, 0.8134920634920635, 0.8333333333333333, 0.8531746031746031, 0.873015873015873,
        0.8928571428571428, 0.9126984126984127, 0.9325396825396824, 0.9523809523809523, 0.9722222222222222,
        0.992063492063492, 1.0119047619047619, 1.0317460317460316, 1.0515873015873016, 1.0714285714285714,
        1.0912698412698412, 1.1111111111111112, 1.130952380952381, 1.1507936507936507, 1.1706349206349205,
        1.1904761904761905, 1.2103174603174602, 1.23015873015873, 1.25, 1.2698412698412698,
        1.2896825396825395, 1.3095238095238095, 1.3293650793650793, 1.349206349206349, 1.369047619047619,
        1.3888888888888888, 1.4087301587301586, 1.4285714285714284, 1.4484126984126984, 1.4682539682539681,
        1.488095238095238, 1.507936507936508, 1.5277777777777777, 1.5476190476190474, 1.5674603174603174,
        1.5873015873015872, 1.607142857142857, 1.626984126984127, 1.6468253968253967, 1.6666666666666665,
        1.6865079365079365, 1.7063492063492063, 1.726190476190476, 1.746031746031746, 1.7658730158730158,
        1.7857142857142856, 1.8055555555555554, 1.8253968253968254, 1.8452380952380951, 1.865079365079365,
        1.8849206349206349, 1.9047619047619047, 1.9246031746031744, 1.9444444444444444, 1.9642857142857142,
        1.984126984126984, 2.003968253968254, 2.0238095238095237, 2.0436507936507935, 2.0634920634920633,
        2.083333333333333, 2.1031746031746033, 2.123015873015873, 2.142857142857143, 2.1626984126984126,
        2.1825396825396823, 2.202380952380952, 2.2222222222222223, 2.242063492063492, 2.261904761904762,
        2.2817460317460316, 2.3015873015873014, 2.321428571428571, 2.341269841269841, 2.361111111111111,
        2.380952380952381, 2.4007936507936507, 2.4206349206349205, 2.4404761904761902, 2.46031746031746,
        2.4801587301587302, 2.5
    ),
    associationNetworkZ0ResBins = cms.vdouble(
        127.0, 126.0, 126.0, 126.0, 125.0,
        124.0, 123.0, 122.0, 120.0, 119.0,
        117.0, 115.0, 114.0, 112.0, 110.0,
        107.0, 105.0, 103.0, 101.0, 98.0,
        96.0, 94.0, 91.0, 89.0, 87.0,
        85.0, 82.0, 80.0, 78.0, 76.0,
        74.0, 72.0, 70.0, 68.0, 66.0,
        64.0, 62.0, 61.0, 59.0, 57.0,
        56.0, 54.0, 53.0, 51.0, 50.0,
        48.0, 47.0, 46.0, 45.0, 43.0,
        42.0, 41.0, 40.0, 39.0, 38.0,
        37.0, 36.0, 35.0, 34.0, 33.0,
        33.0, 32.0, 31.0, 30.0, 30.0,
        29.0, 28.0, 28.0, 27.0, 26.0,
        26.0, 25.0, 24.0, 24.0, 23.0,
        23.0, 22.0, 22.0, 21.0, 21.0,
        21.0, 20.0, 20.0, 19.0, 19.0,
        18.0, 18.0, 18.0, 17.0, 17.0,
        17.0, 16.0, 16.0, 16.0, 15.0,
        15.0, 15.0, 15.0, 14.0, 14.0,
        14.0, 14.0, 13.0, 13.0, 13.0,
        13.0, 12.0, 12.0, 12.0, 12.0,
        12.0, 11.0, 11.0, 11.0, 11.0,
        11.0, 10.0, 10.0, 10.0, 10.0,
        10.0, 10.0, 9.0, 9.0, 9.0,
        9.0, 9.0, 0.0
    ),
    associationNetworkZ0binning = cms.vdouble(-20.46912512, 20.46912512, 0.15991504),
    associationThreshold = cms.double(0.1),
    cutSet = cms.PSet(
        deltaZMax = cms.vdouble(
            0.37, 0.5, 0.6, 0.75, 1.0,
            1.6
        ),
        deltaZMaxEtaBounds = cms.vdouble(
            0.0, 0.7, 1.0, 1.2, 1.6,
            2.0, 2.4
        )
    ),
    debug = cms.int32(0),
    fwNTrackSetsTVA = cms.uint32(94),
    l1SelectedTracksEmulationInputTag = cms.InputTag("l1tTrackSelectionProducer","Level1TTTracksSelectedEmulation"),
    l1SelectedTracksInputTag = cms.InputTag("l1tTrackSelectionProducer","Level1TTTracksSelected"),
    l1TracksInputTag = cms.InputTag("l1tGTTInputProducer","Level1TTTracksConverted"),
    l1VerticesEmulationInputTag = cms.InputTag("l1tVertexFinderEmulator","L1VerticesEmulation"),
    l1VerticesInputTag = cms.InputTag("l1tVertexFinder","L1Vertices"),
    outputCollectionName = cms.string('Level1TTTracksSelectedAssociated'),
    processEmulatedTracks = cms.bool(True),
    processSimulatedTracks = cms.bool(True),
    useAssociationNetwork = cms.bool(True),
    useDisplacedTracksDeltaZOverride = cms.double(-1.0)
)


process.l1tTrackerEmuEtMiss = cms.EDProducer("L1TrackerEtMissEmulatorProducer",
    L1MetCollectionName = cms.string('L1TrackerEmuEtMiss'),
    L1TrackAssociatedInputTag = cms.InputTag("l1tTrackVertexAssociationProducerForEtMiss","Level1TTTracksSelectedAssociatedEmulation"),
    L1TrackInputTag = cms.InputTag("l1tTrackSelectionProducerForEtMiss","Level1TTTracksSelectedEmulation"),
    L1VertexInputTag = cms.InputTag("l1tVertexFinderEmulator","L1VerticesEmulation"),
    debug = cms.int32(0),
    nCordicSteps = cms.int32(13),
    useGTTinput = cms.bool(True)
)


process.l1tTrackerEmuHTMiss = cms.EDProducer("L1TkHTMissEmulatorProducer",
    L1MHTCollectionName = cms.string('L1TrackerEmuHTMiss'),
    L1TkJetEmulationInputTag = cms.InputTag("l1tTrackJetsEmulation","L1TrackJets"),
    debug = cms.bool(False),
    displaced = cms.bool(False),
    jet_maxEta = cms.double(2.4),
    jet_minNtracksHighPt = cms.int32(0),
    jet_minNtracksLowPt = cms.int32(0),
    jet_minPt = cms.double(3.0)
)


process.l1tTrackerEmuHTMissExtended = cms.EDProducer("L1TkHTMissEmulatorProducer",
    L1MHTCollectionName = cms.string('L1TrackerEmuHTMissExtended'),
    L1TkJetEmulationInputTag = cms.InputTag("l1tTrackJetsExtendedEmulation","L1TrackJetsExtended"),
    debug = cms.bool(False),
    displaced = cms.bool(True),
    jet_maxEta = cms.double(2.4),
    jet_minNtracksHighPt = cms.int32(0),
    jet_minNtracksLowPt = cms.int32(0),
    jet_minPt = cms.double(3.0)
)


process.l1tTrackerEtMiss = cms.EDProducer("L1TrackerEtMissProducer",
    L1MetCollectionName = cms.string('L1TrackerEtMiss'),
    L1TrackAssociatedInputTag = cms.InputTag("l1tTrackVertexAssociationProducerForEtMiss","Level1TTTracksSelectedAssociated"),
    L1TrackInputTag = cms.InputTag("l1tTrackSelectionProducerForEtMiss","Level1TTTracksSelected"),
    debug = cms.bool(False),
    highPtTracks = cms.int32(1),
    maxPt = cms.double(-10.0)
)


process.l1tTrackerEtMissExtended = cms.EDProducer("L1TrackerEtMissProducer",
    L1MetCollectionName = cms.string('L1TrackerExtendedEtMiss'),
    L1TrackAssociatedInputTag = cms.InputTag("l1tTrackVertexAssociationProducerExtendedForEtMiss","Level1TTTracksExtendedSelectedAssociated"),
    L1TrackInputTag = cms.InputTag("l1tTrackSelectionProducerExtendedForEtMiss","Level1TTTracksExtendedSelected"),
    debug = cms.bool(False),
    highPtTracks = cms.int32(1),
    maxPt = cms.double(-10.0)
)


process.l1tTrackerHTMiss = cms.EDProducer("L1TkHTMissProducer",
    L1TkJetInputTag = cms.InputTag("l1tTrackJets","L1TrackJets"),
    L1VertexInputTag = cms.InputTag("l1tVertexFinder","L1Vertices"),
    deltaZ = cms.double(1.0),
    displaced = cms.bool(False),
    doVtxConstrain = cms.bool(False),
    jet_maxEta = cms.double(2.4),
    jet_minJetEtHighPt = cms.double(100.0),
    jet_minJetEtLowPt = cms.double(50.0),
    jet_minNtracksHighPt = cms.int32(0),
    jet_minNtracksLowPt = cms.int32(0),
    jet_minPt = cms.double(3.0),
    primaryVtxConstrain = cms.bool(False),
    useCaloJets = cms.bool(False)
)


process.l1tTrackerHTMissExtended = cms.EDProducer("L1TkHTMissProducer",
    L1TkJetInputTag = cms.InputTag("l1tTrackJetsExtended","L1TrackJetsExtended"),
    L1VertexInputTag = cms.InputTag("l1tVertexFinder","L1Vertices"),
    deltaZ = cms.double(1.0),
    displaced = cms.bool(True),
    doVtxConstrain = cms.bool(False),
    jet_maxEta = cms.double(2.4),
    jet_minJetEtHighPt = cms.double(100.0),
    jet_minJetEtLowPt = cms.double(50.0),
    jet_minNtracksHighPt = cms.int32(0),
    jet_minNtracksLowPt = cms.int32(0),
    jet_minPt = cms.double(3.0),
    primaryVtxConstrain = cms.bool(False),
    useCaloJets = cms.bool(False)
)


process.l1tVertexFinder = cms.EDProducer("VertexProducer",
    VertexReconstruction = cms.PSet(
        AVR_chi2cut = cms.double(5.0),
        Algorithm = cms.string('fastHisto'),
        DBSCANMinDensityTracks = cms.uint32(2),
        DBSCANPtThreshold = cms.double(4.0),
        DistanceType = cms.uint32(0),
        EM_DoQualityCuts = cms.bool(False),
        FH_DoPtComp = cms.bool(True),
        FH_DoTightChi2 = cms.bool(False),
        FH_HistogramParameters = cms.vdouble(-20.46912512, 20.46912512, 0.15991504),
        FH_NVtx = cms.uint32(1),
        FH_VertexWidth = cms.double(0.15),
        FH_WindowSize = cms.uint32(3),
        KmeansIterations = cms.uint32(10),
        KmeansNumClusters = cms.uint32(18),
        MinTracks = cms.uint32(2),
        PatternRecGraph = cms.FileInPath('L1Trigger/VertexFinder/data/NNVtx_PatternModelGraph.pb'),
        TrackWeightGraph = cms.FileInPath('L1Trigger/VertexFinder/data/NNVtx_WeightModelGraph.pb'),
        VertexDistance = cms.double(0.15),
        VertexResolution = cms.double(0.1),
        VxMaxTrackChi2 = cms.double(100.0),
        VxMaxTrackPt = cms.double(127.0),
        VxMaxTrackPtBehavior = cms.int32(1),
        VxMinNStub = cms.uint32(4),
        VxMinNStubPS = cms.uint32(3),
        VxMinTrackPt = cms.double(2.0),
        WeightedMean = cms.uint32(1)
    ),
    debug = cms.uint32(0),
    l1TracksInputTag = cms.InputTag("l1tTrackSelectionProducer","Level1TTTracksSelected"),
    l1VertexCollectionName = cms.string('L1Vertices')
)


process.l1tVertexFinderEmulator = cms.EDProducer("VertexProducer",
    VertexReconstruction = cms.PSet(
        AVR_chi2cut = cms.double(5.0),
        Algorithm = cms.string('fastHistoEmulation'),
        DBSCANMinDensityTracks = cms.uint32(2),
        DBSCANPtThreshold = cms.double(4.0),
        DistanceType = cms.uint32(0),
        EM_DoQualityCuts = cms.bool(False),
        FH_DoPtComp = cms.bool(True),
        FH_DoTightChi2 = cms.bool(False),
        FH_HistogramParameters = cms.vdouble(-20.46912512, 20.46912512, 0.15991504),
        FH_NVtx = cms.uint32(1),
        FH_VertexWidth = cms.double(0.15),
        FH_WindowSize = cms.uint32(3),
        KmeansIterations = cms.uint32(10),
        KmeansNumClusters = cms.uint32(18),
        MinTracks = cms.uint32(2),
        PatternRecGraph = cms.FileInPath('L1Trigger/VertexFinder/data/NNVtx_PatternModelGraph.pb'),
        TrackWeightGraph = cms.FileInPath('L1Trigger/VertexFinder/data/NNVtx_WeightModelGraph.pb'),
        VertexDistance = cms.double(0.15),
        VertexResolution = cms.double(0.1),
        VxMaxTrackChi2 = cms.double(100.0),
        VxMaxTrackPt = cms.double(127.0),
        VxMaxTrackPtBehavior = cms.int32(1),
        VxMinNStub = cms.uint32(4),
        VxMinNStubPS = cms.uint32(3),
        VxMinTrackPt = cms.double(2.0),
        WeightedMean = cms.uint32(1)
    ),
    debug = cms.uint32(0),
    l1TracksInputTag = cms.InputTag("l1tTrackSelectionProducer","Level1TTTracksSelectedEmulation"),
    l1VertexCollectionName = cms.string('L1Vertices')
)


process.l1tVertexProducer = cms.EDProducer("VertexProducer",
    VertexReconstruction = cms.PSet(
        AVR_chi2cut = cms.double(5.0),
        Algorithm = cms.string('fastHisto'),
        DBSCANMinDensityTracks = cms.uint32(2),
        DBSCANPtThreshold = cms.double(4.0),
        DistanceType = cms.uint32(0),
        EM_DoQualityCuts = cms.bool(False),
        FH_DoPtComp = cms.bool(True),
        FH_DoTightChi2 = cms.bool(False),
        FH_HistogramParameters = cms.vdouble(-20.46912512, 20.46912512, 0.15991504),
        FH_NVtx = cms.uint32(1),
        FH_VertexWidth = cms.double(0.15),
        FH_WindowSize = cms.uint32(3),
        KmeansIterations = cms.uint32(10),
        KmeansNumClusters = cms.uint32(18),
        MinTracks = cms.uint32(2),
        PatternRecGraph = cms.FileInPath('L1Trigger/VertexFinder/data/NNVtx_PatternModelGraph.pb'),
        TrackWeightGraph = cms.FileInPath('L1Trigger/VertexFinder/data/NNVtx_WeightModelGraph.pb'),
        VertexDistance = cms.double(0.15),
        VertexResolution = cms.double(0.1),
        VxMaxTrackChi2 = cms.double(100.0),
        VxMaxTrackPt = cms.double(127.0),
        VxMaxTrackPtBehavior = cms.int32(1),
        VxMinNStub = cms.uint32(4),
        VxMinNStubPS = cms.uint32(3),
        VxMinTrackPt = cms.double(2.0),
        WeightedMean = cms.uint32(1)
    ),
    debug = cms.uint32(0),
    l1TracksInputTag = cms.InputTag("l1tTrackSelectionProducer","Level1TTTracksSelected"),
    l1VertexCollectionName = cms.string('L1Vertices')
)


process.l1tZDCEtSums = cms.EDProducer("L1TZDCProducer",
    bxFirst = cms.int32(-2),
    bxLast = cms.int32(3),
    hcalTPDigis = cms.InputTag("simHcalTriggerPrimitiveDigis"),
    mightGet = cms.optional.untracked.vstring
)


process.me0RecHits = cms.EDProducer("ME0RecHitProducer",
    me0DigiLabel = cms.InputTag("simMuonME0PseudoReDigis"),
    recAlgo = cms.string('ME0RecHitStandardAlgo'),
    recAlgoConfig = cms.PSet(

    )
)


process.me0RecHitsCoarse = cms.EDProducer("ME0RecHitProducer",
    me0DigiLabel = cms.InputTag("simMuonME0PseudoReDigisCoarse"),
    recAlgo = cms.string('ME0RecHitStandardAlgo'),
    recAlgoConfig = cms.PSet(

    )
)


process.me0Segments = cms.EDProducer("ME0SegmentProducer",
    algo_psets = cms.VPSet(
        cms.PSet(
            algo_name = cms.string('ME0SegmentAlgorithm'),
            algo_pset = cms.PSet(
                ME0Debug = cms.untracked.bool(True),
                dEtaChainBoxMax = cms.double(0.05),
                dPhiChainBoxMax = cms.double(0.02),
                dTimeChainBoxMax = cms.double(15.0),
                dXclusBoxMax = cms.double(1.0),
                dYclusBoxMax = cms.double(5.0),
                maxRecHitsInCluster = cms.int32(6),
                minHitsPerSegment = cms.uint32(3),
                preClustering = cms.bool(True),
                preClusteringUseChaining = cms.bool(True)
            )
        ),
        cms.PSet(
            algo_name = cms.string('ME0SegAlgoRU'),
            algo_pset = cms.PSet(
                allowWideSegments = cms.bool(True),
                doCollisions = cms.bool(True),
                maxChi2Additional = cms.double(100.0),
                maxChi2GoodSeg = cms.double(50),
                maxChi2Prune = cms.double(50),
                maxETASeeds = cms.double(0.1),
                maxPhiAdditional = cms.double(0.001096605744),
                maxPhiSeeds = cms.double(0.001096605744),
                maxTOFDiff = cms.double(25),
                minNumberOfHits = cms.uint32(4),
                requireCentralBX = cms.bool(True)
            )
        )
    ),
    algo_type = cms.int32(2),
    me0RecHitLabel = cms.InputTag("me0RecHits")
)


process.me0TriggerConvertedPseudoDigis = cms.EDProducer("ME0TriggerPseudoProducer",
    DeltaPhiResolution = cms.untracked.double(0.25),
    ME0SegmentProducer = cms.InputTag("me0Segments"),
    info = cms.untracked.int32(0)
)


process.me0TriggerDigis = cms.EDProducer("ME0TriggerProducer",
    ME0PadDigis = cms.InputTag("simMuonME0PadDigis"),
    tmbParam = cms.PSet(
        verbosity = cms.int32(0)
    )
)


process.me0TriggerPseudoDigis = cms.EDProducer("ME0SegmentProducer",
    algo_psets = cms.VPSet(
        cms.PSet(
            algo_name = cms.string('ME0SegmentAlgorithm'),
            algo_pset = cms.PSet(
                ME0Debug = cms.untracked.bool(True),
                dEtaChainBoxMax = cms.double(0.05),
                dPhiChainBoxMax = cms.double(0.02),
                dTimeChainBoxMax = cms.double(15.0),
                dXclusBoxMax = cms.double(1.0),
                dYclusBoxMax = cms.double(5.0),
                maxRecHitsInCluster = cms.int32(6),
                minHitsPerSegment = cms.uint32(3),
                preClustering = cms.bool(True),
                preClusteringUseChaining = cms.bool(True)
            )
        ),
        cms.PSet(
            algo_name = cms.string('ME0SegAlgoRU'),
            algo_pset = cms.PSet(
                allowWideSegments = cms.bool(True),
                doCollisions = cms.bool(True),
                maxChi2Additional = cms.double(100.0),
                maxChi2GoodSeg = cms.double(50),
                maxChi2Prune = cms.double(50),
                maxETASeeds = cms.double(0.1),
                maxPhiAdditional = cms.double(0.0021874999999999998),
                maxPhiSeeds = cms.double(0.0021874999999999998),
                maxTOFDiff = cms.double(25),
                minNumberOfHits = cms.uint32(4),
                requireCentralBX = cms.bool(True)
            )
        )
    ),
    algo_type = cms.int32(2),
    me0RecHitLabel = cms.InputTag("me0RecHitsCoarse")
)


process.mix = cms.EDProducer("MixingModule",
    LabelPlayback = cms.string(''),
    bunchspace = cms.int32(450),
    digitizers = cms.PSet(
        MC_fastTimingLayer = cms.PSet(
            HepMCProductLabel = cms.InputTag("generatorSmeared"),
            MaxPseudoRapidity = cms.double(5.0),
            MinEnergy = cms.double(0.5),
            accumulatorType = cms.string('MtdTruthAccumulator'),
            allowDifferentSimHitProcesses = cms.bool(False),
            bunchspace = cms.uint32(25),
            genParticleCollection = cms.InputTag("genParticles"),
            maximumPreviousBunchCrossing = cms.uint32(0),
            maximumSubsequentBunchCrossing = cms.uint32(0),
            premixStage1 = cms.bool(False),
            simHitCollections = cms.PSet(
                mtdCollections = cms.VInputTag(cms.InputTag("g4SimHits","FastTimerHitsBarrel"), cms.InputTag("g4SimHits","FastTimerHitsEndcap"))
            ),
            simTrackCollection = cms.InputTag("g4SimHits"),
            simVertexCollection = cms.InputTag("g4SimHits")
        ),
        calotruth = cms.PSet(
            HepMCProductLabel = cms.InputTag("generatorSmeared"),
            MaxPseudoRapidity = cms.double(5.0),
            MinEnergy = cms.double(0.5),
            accumulatorType = cms.string('CaloTruthAccumulator'),
            allowDifferentSimHitProcesses = cms.bool(False),
            doHGCAL = cms.bool(True),
            genParticleCollection = cms.InputTag("genParticles"),
            maximumPreviousBunchCrossing = cms.uint32(0),
            maximumSubsequentBunchCrossing = cms.uint32(0),
            premixStage1 = cms.bool(False),
            simHitCollections = cms.PSet(
                ecal = cms.VInputTag(cms.InputTag("g4SimHits","EcalHitsEB")),
                hcal = cms.VInputTag(cms.InputTag("g4SimHits","HcalHits")),
                hgc = cms.VInputTag(cms.InputTag("g4SimHits","HGCHitsEE"), cms.InputTag("g4SimHits","HGCHitsHEfront"), cms.InputTag("g4SimHits","HGCHitsHEback"))
            ),
            simTrackCollection = cms.InputTag("g4SimHits"),
            simVertexCollection = cms.InputTag("g4SimHits")
        ),
        ecal = cms.PSet(
            ConstantTerm = cms.double(0.003),
            EBCorrNoiseMatrixG01 = cms.vdouble(
                1.0, 0.73354, 0.64442, 0.58851, 0.55425,
                0.53082, 0.51916, 0.51097, 0.50732, 0.50409
            ),
            EBCorrNoiseMatrixG06 = cms.vdouble(
                1.0, 0.70946, 0.58021, 0.49846, 0.45006,
                0.41366, 0.39699, 0.38478, 0.37847, 0.37055
            ),
            EBCorrNoiseMatrixG12 = cms.vdouble(
                1.0, 0.71073, 0.55721, 0.46089, 0.40449,
                0.35931, 0.33924, 0.32439, 0.31581, 0.30481
            ),
            EBdigiCollection = cms.string(''),
            EBs25notContainment = cms.double(0.9675),
            EECorrNoiseMatrixG01 = cms.vdouble(
                1.0, 0.72698, 0.62048, 0.55691, 0.51848,
                0.49147, 0.47813, 0.47007, 0.46621, 0.46265
            ),
            EECorrNoiseMatrixG06 = cms.vdouble(
                1.0, 0.71217, 0.47464, 0.34056, 0.26282,
                0.20287, 0.17734, 0.16256, 0.15618, 0.14443
            ),
            EECorrNoiseMatrixG12 = cms.vdouble(
                1.0, 0.71373, 0.44825, 0.30152, 0.21609,
                0.14786, 0.11772, 0.10165, 0.09465, 0.08098
            ),
            EEdigiCollection = cms.string(''),
            EEs25notContainment = cms.double(0.968),
            ESdigiCollection = cms.string(''),
            EcalPreMixStage1 = cms.bool(False),
            EcalPreMixStage2 = cms.bool(False),
            UseLCcorrection = cms.untracked.bool(True),
            accumulatorType = cms.string('EcalDigiProducer'),
            apdAddToBarrel = cms.bool(False),
            apdDigiTag = cms.string('APD'),
            apdDoPEStats = cms.bool(True),
            apdNonlParms = cms.vdouble(
                1.48, -3.75, 1.81, 1.26, 2.0,
                45, 1.0
            ),
            apdSeparateDigi = cms.bool(True),
            apdShapeTau = cms.double(40.5),
            apdShapeTstart = cms.double(74.5),
            apdSimToPEHigh = cms.double(88200000.0),
            apdSimToPELow = cms.double(2450000.0),
            apdTimeOffWidth = cms.double(0.8),
            apdTimeOffset = cms.double(-13.5),
            applyConstantTerm = cms.bool(True),
            binOfMaximum = cms.int32(6),
            componentAddToBarrel = cms.bool(False),
            componentDigiTag = cms.string('Component'),
            componentSeparateDigi = cms.bool(False),
            componentTimePhase = cms.double(0.0),
            componentTimeTag = cms.string('Component'),
            cosmicsPhase = cms.bool(False),
            cosmicsShift = cms.double(0.0),
            doEB = cms.bool(True),
            doEE = cms.bool(False),
            doENoise = cms.bool(True),
            doES = cms.bool(False),
            doESNoise = cms.bool(True),
            doFast = cms.bool(True),
            doPhotostatistics = cms.bool(True),
            hitsProducer = cms.string('g4SimHits'),
            makeDigiSimLinks = cms.untracked.bool(False),
            photoelectronsToAnalogBarrel = cms.double(0.000444444),
            photoelectronsToAnalogEndcap = cms.double(0.000555555),
            samplingFactor = cms.double(1.0),
            simHitToPhotoelectronsBarrel = cms.double(2250.0),
            simHitToPhotoelectronsEndcap = cms.double(1800.0),
            syncPhase = cms.bool(True),
            timeDependent = cms.bool(False),
            timePhase = cms.double(0.0)
        ),
        ecalTime = cms.PSet(
            EBtimeDigiCollection = cms.string('EBTimeDigi'),
            EEtimeDigiCollection = cms.string('EETimeDigi'),
            accumulatorType = cms.string('EcalTimeDigiProducer'),
            componentWaveform = cms.bool(False),
            hitsProducerEB = cms.InputTag("g4SimHits","EcalHitsEB"),
            hitsProducerEE = cms.InputTag("g4SimHits","EcalHitsEE"),
            timeLayerBarrel = cms.int32(7),
            timeLayerEndcap = cms.int32(3)
        ),
        fastTimingLayer = cms.PSet(
            accumulatorType = cms.string('MTDDigiProducer'),
            barrelDigitizer = cms.PSet(
                DeviceSimulation = cms.PSet(
                    LCEpositionSlope = cms.double(0.071),
                    LightCollectionEff = cms.double(0.25),
                    LightCollectionSlope = cms.double(0.075),
                    LightYield = cms.double(40000.0),
                    PhotonDetectionEff = cms.double(0.2),
                    bxTime = cms.double(25)
                ),
                ElectronicsSimulation = cms.PSet(
                    ChannelTimeOffset = cms.double(0.0),
                    CorrelationCoefficient = cms.double(1.0),
                    DarkCountRate = cms.double(10.0),
                    EnergyThreshold = cms.double(4.0),
                    LightCollectionEff = cms.double(0.25),
                    LightYield = cms.double(40000.0),
                    Npe_to_V = cms.double(0.0064),
                    Npe_to_pC = cms.double(0.016),
                    PhotonDetectionEff = cms.double(0.2),
                    ReferencePulseNpe = cms.double(100.0),
                    ScintillatorDecayTime = cms.double(40.0),
                    ScintillatorRiseTime = cms.double(1.1),
                    SigmaClock = cms.double(0.015),
                    SigmaElectronicNoise = cms.double(1.0),
                    SigmaRelTOFHIRenergy = cms.vdouble(0.139, -4.35e-05, 3.315e-09, -1.2e-13, 1.67e-18),
                    SinglePhotonTimeResolution = cms.double(0.06),
                    SmearTimeForOOTtails = cms.bool(True),
                    TestBeamMIPTimeRes = cms.double(4.293),
                    TimeThreshold1 = cms.double(20.0),
                    TimeThreshold2 = cms.double(50.0),
                    adcNbits = cms.uint32(10),
                    adcSaturation_MIP = cms.double(600.0),
                    adcThreshold_MIP = cms.double(0.064),
                    bxTime = cms.double(25),
                    smearChannelTimeOffset = cms.double(0.0),
                    tdcNbits = cms.uint32(10),
                    toaLSB_ns = cms.double(0.02)
                ),
                digiCollectionTag = cms.string('FTLBarrel'),
                digitizerName = cms.string('BTLDigitizer'),
                inputSimHits = cms.InputTag("g4SimHits","FastTimerHitsBarrel"),
                maxSimHitsAccTime = cms.uint32(100),
                premixStage1 = cms.bool(False),
                premixStage1MaxCharge = cms.double(1000000.0),
                premixStage1MinCharge = cms.double(0.0001)
            ),
            endcapDigitizer = cms.PSet(
                DeviceSimulation = cms.PSet(
                    FluenceVsRadius = cms.string('1.937*TMath::Power(x,-1.706)'),
                    IntegratedLuminosity = cms.double(1000.0),
                    LGADGainDegradation = cms.string('TMath::Max(1.0, TMath::Min(x, x + 0.05/0.01 * (x - 1) + y * (1 - x)/0.01))'),
                    LGADGainVsFluence = cms.string('TMath::Min(15.,30.-x)'),
                    MPVElectron = cms.string('1.30030e-05 + 1.55166e-07 / (x * x)'),
                    MPVKaon = cms.string('1.20998e-05 + 2.47192e-06 / (x * x * x)'),
                    MPVMuon = cms.string('1.21561e-05 + 8.89462e-07 / (x * x)'),
                    MPVPion = cms.string('1.24531e-05 + 7.16578e-07 / (x * x)'),
                    MPVProton = cms.string('1.13666e-05 + 1.20093e-05 / (x * x)'),
                    applyDegradation = cms.bool(False),
                    bxTime = cms.double(25),
                    meVPerMIP = cms.double(0.015),
                    tofDelay = cms.double(1)
                ),
                ElectronicsSimulation = cms.PSet(
                    IntegratedLuminosity = cms.double(1000.0),
                    adcNbits = cms.uint32(8),
                    adcSaturation_MIP = cms.double(100),
                    adcThreshold_MIP = cms.double(0.025),
                    bxTime = cms.double(25),
                    formulaLandauNoise = cms.string('TMath::Max(0.020, 0.020 * (0.35 * (x - 1.0) + 1.0))'),
                    iThreshold_MIP = cms.double(0.9525),
                    noiseLevel = cms.double(0.3554),
                    referenceChargeColl = cms.double(1.0),
                    sigmaDistorsion = cms.double(0.0),
                    sigmaTDC = cms.double(0.01),
                    tdcNbits = cms.uint32(11),
                    toaLSB_ns = cms.double(0.013)
                ),
                digiCollectionTag = cms.string('FTLEndcap'),
                digitizerName = cms.string('ETLDigitizer'),
                inputSimHits = cms.InputTag("g4SimHits","FastTimerHitsEndcap"),
                maxSimHitsAccTime = cms.uint32(100),
                premixStage1 = cms.bool(False),
                premixStage1MaxCharge = cms.double(1000000.0),
                premixStage1MinCharge = cms.double(0.0001)
            ),
            makeDigiSimLinks = cms.bool(False),
            verbosity = cms.untracked.uint32(0)
        ),
        hcal = cms.PSet(
            DelivLuminosity = cms.double(1000.0),
            HBDarkening = cms.bool(True),
            HEDarkening = cms.bool(False),
            HFDarkening = cms.bool(True),
            HFRecalParameterBlock = cms.PSet(
                HFdepthOneParameterA = cms.vdouble(
                    0.004123, 0.00602, 0.008201, 0.010489, 0.013379,
                    0.016997, 0.021464, 0.027371, 0.034195, 0.044807,
                    0.058939, 0.125497
                ),
                HFdepthOneParameterB = cms.vdouble(
                    -4e-06, -2e-06, 0.0, 4e-06, 1.5e-05,
                    2.6e-05, 6.3e-05, 8.4e-05, 0.00016, 0.000107,
                    0.000425, 0.000209
                ),
                HFdepthTwoParameterA = cms.vdouble(
                    0.002861, 0.004168, 0.0064, 0.008388, 0.011601,
                    0.014425, 0.018633, 0.023232, 0.028274, 0.035447,
                    0.051579, 0.086593
                ),
                HFdepthTwoParameterB = cms.vdouble(
                    -2e-06, -0.0, -7e-06, -6e-06, -2e-06,
                    1e-06, 1.9e-05, 3.1e-05, 6.7e-05, 1.2e-05,
                    0.000157, -3e-06
                )
            ),
            HcalPreMixStage1 = cms.bool(False),
            HcalPreMixStage2 = cms.bool(False),
            TestNumbering = cms.bool(True),
            accumulatorType = cms.string('HcalDigiProducer'),
            debugCaloSamples = cms.bool(False),
            doEmpty = cms.bool(True),
            doHFWindow = cms.bool(False),
            doIonFeedback = cms.bool(True),
            doNeutralDensityFilter = cms.bool(True),
            doNoise = cms.bool(True),
            doThermalNoise = cms.bool(True),
            doTimeSlew = cms.bool(True),
            hb = cms.PSet(
                binOfMaximum = cms.int32(6),
                delayQIE = cms.int32(-999),
                doPhotoStatistics = cms.bool(True),
                doSiPMSmearing = cms.bool(True),
                firstRing = cms.int32(1),
                readoutFrameSize = cms.int32(10),
                samplingFactors = cms.vdouble(
                    125.44, 125.54, 125.32, 125.13, 124.46,
                    125.01, 125.22, 125.48, 124.45, 125.9,
                    125.83, 127.01, 126.82, 129.73, 131.83,
                    143.52
                ),
                simHitToPhotoelectrons = cms.double(2000.0),
                sipmTau = cms.double(10.0),
                syncPhase = cms.bool(True),
                threshold_currentTDC = cms.double(18.7),
                timePhase = cms.double(6.0),
                timeSmearing = cms.bool(True)
            ),
            he = cms.PSet(
                binOfMaximum = cms.int32(6),
                delayQIE = cms.int32(-999),
                doPhotoStatistics = cms.bool(True),
                doSiPMSmearing = cms.bool(True),
                firstRing = cms.int32(16),
                readoutFrameSize = cms.int32(10),
                samplingFactors = cms.vdouble(
                    210.55, 197.93, 186.12, 189.64, 189.63,
                    189.96, 190.03, 190.11, 190.18, 190.25,
                    190.32, 190.4, 190.47, 190.54, 190.61,
                    190.69, 190.83, 190.94, 190.94, 190.94,
                    190.94, 190.94, 190.94, 190.94, 190.94,
                    190.94, 190.94, 190.94, 190.94, 190.94,
                    190.94, 190.94, 190.94, 190.94, 190.94,
                    190.94, 190.94, 190.94, 190.94, 190.94,
                    190.94, 190.94, 190.94, 190.94, 190.94,
                    190.94, 190.94, 190.94, 190.94, 190.94,
                    190.94, 190.94, 190.94, 190.94, 190.94,
                    190.94, 190.94, 190.94, 190.94, 190.94,
                    190.94, 190.94, 190.94, 190.94, 190.94,
                    190.94, 190.94, 190.94, 190.94, 190.94,
                    190.94, 190.94, 190.94, 190.94, 190.94,
                    190.94, 190.94, 190.94, 190.94, 190.94,
                    190.94, 190.94, 190.94, 190.94, 190.94
                ),
                simHitToPhotoelectrons = cms.double(2000.0),
                sipmTau = cms.double(10.0),
                syncPhase = cms.bool(True),
                threshold_currentTDC = cms.double(18.7),
                timePhase = cms.double(6.0),
                timeSmearing = cms.bool(True)
            ),
            hf1 = cms.PSet(
                binOfMaximum = cms.int32(2),
                delayQIE = cms.int32(-999),
                doPhotoStatistics = cms.bool(True),
                doSiPMSmearing = cms.bool(False),
                photoelectronsToAnalog = cms.double(2.79),
                readoutFrameSize = cms.int32(3),
                samplingFactor = cms.double(0.37),
                simHitToPhotoelectrons = cms.double(6.0),
                sipmTau = cms.double(0.0),
                syncPhase = cms.bool(True),
                threshold_currentTDC = cms.double(3.0),
                timePhase = cms.double(9.0)
            ),
            hf2 = cms.PSet(
                binOfMaximum = cms.int32(2),
                delayQIE = cms.int32(-999),
                doPhotoStatistics = cms.bool(True),
                doSiPMSmearing = cms.bool(False),
                photoelectronsToAnalog = cms.double(1.843),
                readoutFrameSize = cms.int32(3),
                samplingFactor = cms.double(0.37),
                simHitToPhotoelectrons = cms.double(6.0),
                sipmTau = cms.double(0.0),
                syncPhase = cms.bool(True),
                threshold_currentTDC = cms.double(3.0),
                timePhase = cms.double(8.0)
            ),
            hitsProducer = cms.string('g4SimHits'),
            ho = cms.PSet(
                binOfMaximum = cms.int32(5),
                delayQIE = cms.int32(-999),
                doPhotoStatistics = cms.bool(True),
                doSiPMSmearing = cms.bool(False),
                firstRing = cms.int32(1),
                readoutFrameSize = cms.int32(10),
                samplingFactors = cms.vdouble(
                    231.0, 231.0, 231.0, 231.0, 360.0,
                    360.0, 360.0, 360.0, 360.0, 360.0,
                    360.0, 360.0, 360.0, 360.0, 360.0
                ),
                siPMCode = cms.int32(1),
                simHitToPhotoelectrons = cms.double(4000.0),
                sipmTau = cms.double(5.0),
                syncPhase = cms.bool(True),
                threshold_currentTDC = cms.double(-999.0),
                timePhase = cms.double(5.0),
                timeSmearing = cms.bool(False)
            ),
            hoHamamatsu = cms.PSet(
                binOfMaximum = cms.int32(5),
                delayQIE = cms.int32(-999),
                doPhotoStatistics = cms.bool(True),
                doSiPMSmearing = cms.bool(False),
                firstRing = cms.int32(1),
                readoutFrameSize = cms.int32(10),
                samplingFactors = cms.vdouble(
                    231.0, 231.0, 231.0, 231.0, 360.0,
                    360.0, 360.0, 360.0, 360.0, 360.0,
                    360.0, 360.0, 360.0, 360.0, 360.0
                ),
                siPMCode = cms.int32(2),
                simHitToPhotoelectrons = cms.double(4000.0),
                sipmTau = cms.double(5.0),
                syncPhase = cms.bool(True),
                threshold_currentTDC = cms.double(-999.0),
                timePhase = cms.double(5.0),
                timeSmearing = cms.bool(False)
            ),
            hoZecotek = cms.PSet(
                binOfMaximum = cms.int32(5),
                delayQIE = cms.int32(-999),
                doPhotoStatistics = cms.bool(True),
                doSiPMSmearing = cms.bool(False),
                firstRing = cms.int32(1),
                readoutFrameSize = cms.int32(10),
                samplingFactors = cms.vdouble(
                    231.0, 231.0, 231.0, 231.0, 360.0,
                    360.0, 360.0, 360.0, 360.0, 360.0,
                    360.0, 360.0, 360.0, 360.0, 360.0
                ),
                siPMCode = cms.int32(2),
                simHitToPhotoelectrons = cms.double(4000.0),
                sipmTau = cms.double(5.0),
                syncPhase = cms.bool(True),
                threshold_currentTDC = cms.double(-999.0),
                timePhase = cms.double(5.0),
                timeSmearing = cms.bool(False)
            ),
            ignoreGeantTime = cms.bool(False),
            injectTestHits = cms.bool(False),
            injectTestHitsCells = cms.vint32(),
            injectTestHitsEnergy = cms.vdouble(),
            injectTestHitsTime = cms.vdouble(),
            killHE = cms.bool(True),
            makeDigiSimLinks = cms.untracked.bool(False),
            minFCToDelay = cms.double(5.0),
            zdc = cms.PSet(
                binOfMaximum = cms.int32(5),
                delayQIE = cms.int32(-999),
                doPhotoStatistics = cms.bool(True),
                doSiPMSmearing = cms.bool(False),
                photoelectronsToAnalog = cms.double(1.843),
                readoutFrameSize = cms.int32(10),
                samplingFactor = cms.double(1.0),
                simHitToPhotoelectrons = cms.double(6.0),
                sipmTau = cms.double(0.0),
                syncPhase = cms.bool(True),
                threshold_currentTDC = cms.double(-999.0),
                timePhase = cms.double(-4.0)
            )
        ),
        hgceeDigitizer = cms.PSet(
            NoiseGeneration_Method = cms.bool(True),
            accumulatorType = cms.string('HGCDigiProducer'),
            bxTime = cms.double(25),
            digiCfg = cms.PSet(
                cceParams = cms.PSet(
                    refToPSet_ = cms.string('HGCAL_cceParams_toUse')
                ),
                chargeCollectionEfficiencies = cms.PSet(
                    refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
                ),
                doTimeSamples = cms.bool(False),
                feCfg = cms.PSet(
                    adcNbits = cms.uint32(10),
                    adcPulse = cms.vdouble(
                        0.0, 0.017, 0.817, 0.163, 0.003,
                        0.0
                    ),
                    adcSaturation_fC = cms.double(100),
                    adcThreshold_fC = cms.double(0.672),
                    fwVersion = cms.uint32(2),
                    jitterConstant_ns = cms.vdouble(0.02, 0.02, 0.02),
                    jitterNoise_ns = cms.vdouble(5.0, 5.0, 5.0),
                    pulseAvgT = cms.vdouble(
                        0.0, 23.42298, 13.16733, 6.41062, 5.03946,
                        4.532
                    ),
                    targetMIPvalue_ADC = cms.uint32(10),
                    tdcChargeDrainParameterisation = cms.vdouble(
                        -919.13, 365.36, -14.1, 0.2, -21.85,
                        49.39, 22.21, 0.8, -0.28, 27.14,
                        43.95, 3.89048
                    ),
                    tdcForToAOnset_fC = cms.vdouble(12.0, 12.0, 12.0),
                    tdcNbits = cms.uint32(12),
                    tdcOnset_fC = cms.double(60),
                    tdcResolutionInPs = cms.double(0.001),
                    tdcSaturation_fC = cms.double(10000),
                    toaLSB_ns = cms.double(0.0244),
                    toaMode = cms.uint32(1)
                ),
                ileakParam = cms.PSet(
                    refToPSet_ = cms.string('HGCAL_ileakParam_toUse')
                ),
                keV2fC = cms.double(0.044259),
                noise_fC = cms.PSet(
                    refToPSet_ = cms.string('HGCAL_noise_fC')
                ),
                thresholdFollowsMIP = cms.bool(True)
            ),
            digiCollection = cms.string('HGCDigisEE'),
            digitizationType = cms.uint32(0),
            digitizer = cms.string('HGCEEDigitizer'),
            eVPerEleHolePair = cms.double(3.62),
            hitCollection = cms.string('HGCHitsEE'),
            hitsProducer = cms.string('g4SimHits'),
            makeDigiSimLinks = cms.bool(False),
            maxSimHitsAccTime = cms.uint32(100),
            premixStage1 = cms.bool(False),
            premixStage1MaxCharge = cms.double(1000000.0),
            premixStage1MinCharge = cms.double(0),
            tofDelay = cms.double(-9),
            useAllChannels = cms.bool(True),
            verbosity = cms.untracked.uint32(0)
        ),
        hgchebackDigitizer = cms.PSet(
            NoiseGeneration_Method = cms.bool(True),
            accumulatorType = cms.string('HGCDigiProducer'),
            bxTime = cms.double(25),
            digiCfg = cms.PSet(
                algo = cms.uint32(2),
                doTimeSamples = cms.bool(False),
                feCfg = cms.PSet(
                    adcNbits = cms.uint32(10),
                    adcPulse = cms.vdouble(
                        0.0, 0.017, 0.817, 0.163, 0.003,
                        0.0
                    ),
                    adcSaturation_fC = cms.double(68.75),
                    adcThreshold_fC = cms.double(0.5),
                    fwVersion = cms.uint32(2),
                    jitterConstant_ns = cms.vdouble(0.02, 0.02, 0.02),
                    jitterNoise_ns = cms.vdouble(5.0, 5.0, 5.0),
                    pulseAvgT = cms.vdouble(
                        0.0, 23.42298, 13.16733, 6.41062, 5.03946,
                        4.532
                    ),
                    targetMIPvalue_ADC = cms.uint32(15),
                    tdcChargeDrainParameterisation = cms.vdouble(
                        -919.13, 365.36, -14.1, 0.2, -21.85,
                        49.39, 22.21, 0.8, -0.28, 27.14,
                        43.95, 3.89048
                    ),
                    tdcForToAOnset_fC = cms.vdouble(12.0, 12.0, 12.0),
                    tdcNbits = cms.uint32(12),
                    tdcOnset_fC = cms.double(55),
                    tdcResolutionInPs = cms.double(0.001),
                    tdcSaturation_fC = cms.double(1000),
                    toaLSB_ns = cms.double(0.0244),
                    toaMode = cms.uint32(1)
                ),
                keV2MIP = cms.double(0.0014814814814814814),
                nPEperMIP = cms.double(21.0),
                nTotalPE = cms.double(7500),
                noise = cms.PSet(
                    refToPSet_ = cms.string('HGCAL_noise_heback')
                ),
                sdPixels = cms.double(1e-06),
                thresholdFollowsMIP = cms.bool(True)
            ),
            digiCollection = cms.string('HGCDigisHEback'),
            digitizationType = cms.uint32(1),
            digitizer = cms.string('HGCHEbackDigitizer'),
            hitCollection = cms.string('HGCHitsHEback'),
            hitsProducer = cms.string('g4SimHits'),
            makeDigiSimLinks = cms.bool(False),
            maxSimHitsAccTime = cms.uint32(100),
            premixStage1 = cms.bool(False),
            premixStage1MaxCharge = cms.double(1000000.0),
            premixStage1MinCharge = cms.double(0),
            tofDelay = cms.double(-14),
            useAllChannels = cms.bool(True),
            verbosity = cms.untracked.uint32(0)
        ),
        hgchefrontDigitizer = cms.PSet(
            NoiseGeneration_Method = cms.bool(True),
            accumulatorType = cms.string('HGCDigiProducer'),
            bxTime = cms.double(25),
            digiCfg = cms.PSet(
                cceParams = cms.PSet(
                    refToPSet_ = cms.string('HGCAL_cceParams_toUse')
                ),
                chargeCollectionEfficiencies = cms.PSet(
                    refToPSet_ = cms.string('HGCAL_chargeCollectionEfficiencies')
                ),
                doTimeSamples = cms.bool(False),
                feCfg = cms.PSet(
                    adcNbits = cms.uint32(10),
                    adcPulse = cms.vdouble(
                        0.0, 0.017, 0.817, 0.163, 0.003,
                        0.0
                    ),
                    adcSaturation_fC = cms.double(100),
                    adcThreshold_fC = cms.double(0.672),
                    fwVersion = cms.uint32(2),
                    jitterConstant_ns = cms.vdouble(0.02, 0.02, 0.02),
                    jitterNoise_ns = cms.vdouble(5.0, 5.0, 5.0),
                    pulseAvgT = cms.vdouble(
                        0.0, 23.42298, 13.16733, 6.41062, 5.03946,
                        4.532
                    ),
                    targetMIPvalue_ADC = cms.uint32(10),
                    tdcChargeDrainParameterisation = cms.vdouble(
                        -919.13, 365.36, -14.1, 0.2, -21.85,
                        49.39, 22.21, 0.8, -0.28, 27.14,
                        43.95, 3.89048
                    ),
                    tdcForToAOnset_fC = cms.vdouble(12.0, 12.0, 12.0),
                    tdcNbits = cms.uint32(12),
                    tdcOnset_fC = cms.double(60),
                    tdcResolutionInPs = cms.double(0.001),
                    tdcSaturation_fC = cms.double(10000),
                    toaLSB_ns = cms.double(0.0244),
                    toaMode = cms.uint32(1)
                ),
                ileakParam = cms.PSet(
                    refToPSet_ = cms.string('HGCAL_ileakParam_toUse')
                ),
                keV2fC = cms.double(0.044259),
                noise_fC = cms.PSet(
                    refToPSet_ = cms.string('HGCAL_noise_fC')
                ),
                thresholdFollowsMIP = cms.bool(True)
            ),
            digiCollection = cms.string('HGCDigisHEfront'),
            digitizationType = cms.uint32(0),
            digitizer = cms.string('HGCHEfrontDigitizer'),
            hitCollection = cms.string('HGCHitsHEfront'),
            hitsProducer = cms.string('g4SimHits'),
            makeDigiSimLinks = cms.bool(False),
            maxSimHitsAccTime = cms.uint32(100),
            premixStage1 = cms.bool(False),
            premixStage1MaxCharge = cms.double(1000000.0),
            premixStage1MinCharge = cms.double(0),
            tofDelay = cms.double(-11),
            useAllChannels = cms.bool(True),
            verbosity = cms.untracked.uint32(0)
        ),
        mergedtruth = cms.PSet(
            HepMCProductLabel = cms.InputTag("generatorSmeared"),
            accumulatorType = cms.string('TrackingTruthAccumulator'),
            allowDifferentSimHitProcesses = cms.bool(False),
            alwaysAddAncestors = cms.bool(True),
            createInitialVertexCollection = cms.bool(False),
            createMergedBremsstrahlung = cms.bool(True),
            createUnmergedCollection = cms.bool(True),
            genParticleCollection = cms.InputTag("genParticles"),
            ignoreTracksOutsideVolume = cms.bool(False),
            maximumPreviousBunchCrossing = cms.uint32(9999),
            maximumSubsequentBunchCrossing = cms.uint32(9999),
            removeDeadModules = cms.bool(False),
            select = cms.PSet(
                chargedOnlyTP = cms.bool(True),
                intimeOnlyTP = cms.bool(False),
                lipTP = cms.double(1000),
                maxRapidityTP = cms.double(5.0),
                minHitTP = cms.int32(0),
                minRapidityTP = cms.double(-5.0),
                pdgIdTP = cms.vint32(),
                ptMaxTP = cms.double(1e+100),
                ptMinTP = cms.double(0.1),
                signalOnlyTP = cms.bool(True),
                stableOnlyTP = cms.bool(False),
                tipTP = cms.double(1000)
            ),
            simHitCollections = cms.PSet(
                muon = cms.VInputTag(cms.InputTag("g4SimHits","MuonDTHits"), cms.InputTag("g4SimHits","MuonCSCHits"), cms.InputTag("g4SimHits","MuonRPCHits"), cms.InputTag("g4SimHits","MuonGEMHits")),
                pixel = cms.VInputTag(cms.InputTag("g4SimHits","TrackerHitsPixelBarrelLowTof"), cms.InputTag("g4SimHits","TrackerHitsPixelBarrelHighTof"), cms.InputTag("g4SimHits","TrackerHitsPixelEndcapLowTof"), cms.InputTag("g4SimHits","TrackerHitsPixelEndcapHighTof")),
                tracker = cms.VInputTag()
            ),
            simTrackCollection = cms.InputTag("g4SimHits"),
            simVertexCollection = cms.InputTag("g4SimHits"),
            vertexDistanceCut = cms.double(0.003),
            volumeRadius = cms.double(120.0),
            volumeZ = cms.double(300.0)
        ),
        pixel = cms.PSet(
            AlgorithmCommon = cms.PSet(
                DeltaProductionCut = cms.double(0.03),
                makeDigiSimLinks = cms.untracked.bool(True)
            ),
            GeometryType = cms.string('idealForDigi'),
            PSPDigitizerAlgorithm = cms.PSet(
                AdcFullScale = cms.int32(255),
                AddInefficiency = cms.bool(False),
                AddNoise = cms.bool(True),
                AddNoisyPixels = cms.bool(True),
                AddThresholdSmearing = cms.bool(False),
                AddXTalk = cms.bool(True),
                Alpha2Order = cms.bool(True),
                BiasRailInefficiencyFlag = cms.int32(1),
                CellsToKill = cms.VPSet(),
                ClusterWidth = cms.double(3),
                DeadModules = cms.VPSet(),
                DeadModules_DB = cms.bool(False),
                EfficiencyFactors_Barrel = cms.vdouble(
                    0.999, 0.999, 0.999, 0.999, 0.999,
                    0.999, 0.999, 0.999, 0.999, 0.999
                ),
                EfficiencyFactors_Endcap = cms.vdouble(
                    0.999, 0.999, 0.999, 0.999, 0.999,
                    0.999, 0.999, 0.999, 0.999, 0.999,
                    0.999, 0.999, 0.999, 0.999, 0.999,
                    0.999
                ),
                ElectronPerAdc = cms.double(135.0),
                HIPThresholdInElectrons_Barrel = cms.double(10000000000.0),
                HIPThresholdInElectrons_Endcap = cms.double(10000000000.0),
                Inefficiency_DB = cms.bool(False),
                InterstripCoupling = cms.double(0.05),
                KillModules = cms.bool(False),
                LorentzAngle_DB = cms.bool(True),
                NoiseInElectrons = cms.double(200),
                Phase2ReadoutMode = cms.int32(0),
                ReadoutNoiseInElec = cms.double(-99.9),
                SigmaCoeff = cms.double(1.8),
                SigmaZero = cms.double(0.00037),
                TanLorentzAnglePerTesla_Barrel = cms.double(0.07),
                TanLorentzAnglePerTesla_Endcap = cms.double(0.07),
                ThresholdInElectrons_Barrel = cms.double(6300.0),
                ThresholdInElectrons_Endcap = cms.double(6300.0),
                ThresholdSmearing_Barrel = cms.double(630.0),
                ThresholdSmearing_Endcap = cms.double(630.0),
                TofLowerCut = cms.double(-12.5),
                TofUpperCut = cms.double(12.5),
                UseReweighting = cms.bool(False)
            ),
            PSSDigitizerAlgorithm = cms.PSet(
                AdcFullScale = cms.int32(255),
                AddInefficiency = cms.bool(False),
                AddNoise = cms.bool(True),
                AddNoisyPixels = cms.bool(True),
                AddThresholdSmearing = cms.bool(False),
                AddXTalk = cms.bool(True),
                Alpha2Order = cms.bool(True),
                CellsToKill = cms.VPSet(),
                ClusterWidth = cms.double(3),
                DeadModules = cms.VPSet(),
                DeadModules_DB = cms.bool(False),
                EfficiencyFactors_Barrel = cms.vdouble(
                    0.999, 0.999, 0.999, 0.999, 0.999,
                    0.999, 0.999, 0.999, 0.999, 0.999
                ),
                EfficiencyFactors_Endcap = cms.vdouble(
                    0.999, 0.999, 0.999, 0.999, 0.999,
                    0.999, 0.999, 0.999, 0.999, 0.999,
                    0.999, 0.999, 0.999, 0.999, 0.999,
                    0.999
                ),
                ElectronPerAdc = cms.double(135.0),
                HIPThresholdInElectrons_Barrel = cms.double(21000.0),
                HIPThresholdInElectrons_Endcap = cms.double(21000.0),
                Inefficiency_DB = cms.bool(False),
                InterstripCoupling = cms.double(0.05),
                KillModules = cms.bool(False),
                LorentzAngle_DB = cms.bool(True),
                NoiseInElectrons = cms.double(1010),
                Phase2ReadoutMode = cms.int32(0),
                ReadoutNoiseInElec = cms.double(-99.9),
                SigmaCoeff = cms.double(1.8),
                SigmaZero = cms.double(0.00037),
                TanLorentzAnglePerTesla_Barrel = cms.double(0.07),
                TanLorentzAnglePerTesla_Endcap = cms.double(0.07),
                ThresholdInElectrons_Barrel = cms.double(4800.0),
                ThresholdInElectrons_Endcap = cms.double(4800.0),
                ThresholdSmearing_Barrel = cms.double(480.0),
                ThresholdSmearing_Endcap = cms.double(480.0),
                TofLowerCut = cms.double(-12.5),
                TofUpperCut = cms.double(12.5),
                UseReweighting = cms.bool(False)
            ),
            Pixel3DDigitizerAlgorithm = cms.PSet(
                AdcFullScale = cms.int32(15),
                AddInefficiency = cms.bool(False),
                AddNoise = cms.bool(False),
                AddNoisyPixels = cms.bool(False),
                AddThresholdSmearing = cms.bool(False),
                AddXTalk = cms.bool(False),
                Alpha2Order = cms.bool(True),
                ApplyTimewalk = cms.bool(False),
                CellsToKill = cms.VPSet(),
                ClusterWidth = cms.double(3),
                DeadModules = cms.VPSet(),
                DeadModules_DB = cms.bool(False),
                EfficiencyFactors_Barrel = cms.vdouble(
                    0.999, 0.999, 0.999, 0.999, 0.999,
                    0.999, 0.999, 0.999, 0.999, 0.999
                ),
                EfficiencyFactors_Endcap = cms.vdouble(
                    0.999, 0.999, 0.999, 0.999, 0.999,
                    0.999, 0.999, 0.999, 0.999, 0.999,
                    0.999, 0.999, 0.999, 0.999, 0.999,
                    0.999
                ),
                ElectronPerAdc = cms.double(1500.0),
                Even_column_interchannelCoupling_next_column = cms.double(0.0),
                Even_row_interchannelCoupling_next_row = cms.double(0.0),
                HIPThresholdInElectrons_Barrel = cms.double(10000000000.0),
                HIPThresholdInElectrons_Endcap = cms.double(10000000000.0),
                Inefficiency_DB = cms.bool(False),
                InterstripCoupling = cms.double(0.0),
                KillModules = cms.bool(False),
                LorentzAngle_DB = cms.bool(True),
                NPColumnGap = cms.double(46.0),
                NPColumnRadius = cms.double(4.0),
                NoiseInElectrons = cms.double(0.0),
                Odd_column_interchannelCoupling_next_column = cms.double(0.0),
                Odd_row_interchannelCoupling_next_row = cms.double(0.2),
                OhmicColumnRadius = cms.double(4.0),
                Phase2ReadoutMode = cms.int32(3),
                ReadoutNoiseInElec = cms.double(-99.9),
                SigmaCoeff = cms.double(1.8),
                SigmaZero = cms.double(0.00037),
                TanLorentzAnglePerTesla_Barrel = cms.double(0.106),
                TanLorentzAnglePerTesla_Endcap = cms.double(0.106),
                ThresholdInElectrons_Barrel = cms.double(1000.0),
                ThresholdInElectrons_Endcap = cms.double(1000.0),
                ThresholdSmearing_Barrel = cms.double(0.0),
                ThresholdSmearing_Endcap = cms.double(0.0),
                TimewalkModel = cms.PSet(
                    Curves = cms.VPSet(
                        cms.PSet(
                            charge = cms.vdouble(
                                1000, 1025, 1050, 1100, 1200,
                                1500, 2000, 6000, 10000, 15000,
                                20000, 30000
                            ),
                            delay = cms.vdouble(
                                26.8, 23.73, 21.92, 19.46, 16.52,
                                12.15, 8.88, 3.03, 1.69, 0.95,
                                0.56, 0.19
                            )
                        ),
                        cms.PSet(
                            charge = cms.vdouble(
                                1200, 1225, 1250, 1500, 2000,
                                6000, 10000, 15000, 20000, 30000
                            ),
                            delay = cms.vdouble(
                                26.28, 23.5, 21.79, 14.92, 10.27,
                                3.33, 1.86, 1.07, 0.66, 0.27
                            )
                        ),
                        cms.PSet(
                            charge = cms.vdouble(
                                1500, 1525, 1550, 1600, 2000,
                                6000, 10000, 15000, 20000, 30000
                            ),
                            delay = cms.vdouble(
                                25.36, 23.05, 21.6, 19.56, 12.94,
                                3.79, 2.14, 1.26, 0.81, 0.39
                            )
                        ),
                        cms.PSet(
                            charge = cms.vdouble(
                                3000, 3025, 3050, 3100, 3500,
                                6000, 10000, 15000, 20000, 30000
                            ),
                            delay = cms.vdouble(
                                25.63, 23.63, 22.35, 20.65, 14.92,
                                6.7, 3.68, 2.29, 1.62, 1.02
                            )
                        )
                    ),
                    ThresholdValues = cms.vdouble(1000, 1200, 1500, 3000)
                ),
                TofLowerCut = cms.double(-5.0),
                TofUpperCut = cms.double(20.0),
                UseReweighting = cms.bool(False)
            ),
            PixelDigitizerAlgorithm = cms.PSet(
                AdcFullScale = cms.int32(15),
                AddInefficiency = cms.bool(False),
                AddNoise = cms.bool(False),
                AddNoisyPixels = cms.bool(False),
                AddThresholdSmearing = cms.bool(False),
                AddXTalk = cms.bool(False),
                Alpha2Order = cms.bool(True),
                ApplyTimewalk = cms.bool(False),
                CellsToKill = cms.VPSet(),
                ClusterWidth = cms.double(3),
                DeadModules = cms.VPSet(),
                DeadModules_DB = cms.bool(False),
                EfficiencyFactors_Barrel = cms.vdouble(
                    0.999, 0.999, 0.999, 0.999, 0.999,
                    0.999, 0.999, 0.999, 0.999, 0.999
                ),
                EfficiencyFactors_Endcap = cms.vdouble(
                    0.999, 0.999, 0.999, 0.999, 0.999,
                    0.999, 0.999, 0.999, 0.999, 0.999,
                    0.999, 0.999, 0.999, 0.999, 0.999,
                    0.999
                ),
                ElectronPerAdc = cms.double(1500.0),
                Even_column_interchannelCoupling_next_column = cms.double(0.0),
                Even_row_interchannelCoupling_next_row = cms.double(0.0),
                HIPThresholdInElectrons_Barrel = cms.double(10000000000.0),
                HIPThresholdInElectrons_Endcap = cms.double(10000000000.0),
                Inefficiency_DB = cms.bool(False),
                InterstripCoupling = cms.double(0.0),
                KillModules = cms.bool(False),
                LorentzAngle_DB = cms.bool(True),
                NoiseInElectrons = cms.double(0.0),
                Odd_column_interchannelCoupling_next_column = cms.double(0.0),
                Odd_row_interchannelCoupling_next_row = cms.double(0.2),
                Phase2ReadoutMode = cms.int32(3),
                ReadoutNoiseInElec = cms.double(-99.9),
                SigmaCoeff = cms.double(0),
                SigmaZero = cms.double(0.00037),
                TanLorentzAnglePerTesla_Barrel = cms.double(0.106),
                TanLorentzAnglePerTesla_Endcap = cms.double(0.106),
                ThresholdInElectrons_Barrel = cms.double(1000.0),
                ThresholdInElectrons_Endcap = cms.double(1000.0),
                ThresholdSmearing_Barrel = cms.double(0.0),
                ThresholdSmearing_Endcap = cms.double(0.0),
                TimewalkModel = cms.PSet(
                    Curves = cms.VPSet(
                        cms.PSet(
                            charge = cms.vdouble(
                                1000, 1025, 1050, 1100, 1200,
                                1500, 2000, 6000, 10000, 15000,
                                20000, 30000
                            ),
                            delay = cms.vdouble(
                                26.8, 23.73, 21.92, 19.46, 16.52,
                                12.15, 8.88, 3.03, 1.69, 0.95,
                                0.56, 0.19
                            )
                        ),
                        cms.PSet(
                            charge = cms.vdouble(
                                1200, 1225, 1250, 1500, 2000,
                                6000, 10000, 15000, 20000, 30000
                            ),
                            delay = cms.vdouble(
                                26.28, 23.5, 21.79, 14.92, 10.27,
                                3.33, 1.86, 1.07, 0.66, 0.27
                            )
                        ),
                        cms.PSet(
                            charge = cms.vdouble(
                                1500, 1525, 1550, 1600, 2000,
                                6000, 10000, 15000, 20000, 30000
                            ),
                            delay = cms.vdouble(
                                25.36, 23.05, 21.6, 19.56, 12.94,
                                3.79, 2.14, 1.26, 0.81, 0.39
                            )
                        ),
                        cms.PSet(
                            charge = cms.vdouble(
                                3000, 3025, 3050, 3100, 3500,
                                6000, 10000, 15000, 20000, 30000
                            ),
                            delay = cms.vdouble(
                                25.63, 23.63, 22.35, 20.65, 14.92,
                                6.7, 3.68, 2.29, 1.62, 1.02
                            )
                        )
                    ),
                    ThresholdValues = cms.vdouble(1000, 1200, 1500, 3000)
                ),
                TofLowerCut = cms.double(-5.0),
                TofUpperCut = cms.double(20.0),
                UseReweighting = cms.bool(False)
            ),
            ROUList = cms.vstring(
                'TrackerHitsPixelBarrelLowTof',
                'TrackerHitsPixelBarrelHighTof',
                'TrackerHitsPixelEndcapLowTof',
                'TrackerHitsPixelEndcapHighTof'
            ),
            SSDigitizerAlgorithm = cms.PSet(
                AdcFullScale = cms.int32(255),
                AddInefficiency = cms.bool(False),
                AddNoise = cms.bool(True),
                AddNoisyPixels = cms.bool(True),
                AddThresholdSmearing = cms.bool(False),
                AddXTalk = cms.bool(True),
                Alpha2Order = cms.bool(True),
                CBCDeadTime = cms.double(0.0),
                CellsToKill = cms.VPSet(),
                ClusterWidth = cms.double(3),
                DeadModules = cms.VPSet(),
                DeadModules_DB = cms.bool(False),
                EfficiencyFactors_Barrel = cms.vdouble(
                    0.999, 0.999, 0.999, 0.999, 0.999,
                    0.999, 0.999, 0.999, 0.999, 0.999
                ),
                EfficiencyFactors_Endcap = cms.vdouble(
                    0.999, 0.999, 0.999, 0.999, 0.999,
                    0.999, 0.999, 0.999, 0.999, 0.999,
                    0.999, 0.999, 0.999, 0.999, 0.999,
                    0.999
                ),
                ElectronPerAdc = cms.double(135.0),
                HIPThresholdInElectrons_Barrel = cms.double(10000000000.0),
                HIPThresholdInElectrons_Endcap = cms.double(10000000000.0),
                HitDetectionMode = cms.int32(0),
                Inefficiency_DB = cms.bool(False),
                InterstripCoupling = cms.double(0.05),
                KillModules = cms.bool(False),
                LorentzAngle_DB = cms.bool(True),
                NoiseInElectrons = cms.double(1263),
                Phase2ReadoutMode = cms.int32(0),
                PulseShapeParameters = cms.vdouble(
                    -3.0, 16.043703, 99.999857, 40.57165, 2.0,
                    1.2459094
                ),
                ReadoutNoiseInElec = cms.double(-99.9),
                SigmaCoeff = cms.double(1.8),
                SigmaZero = cms.double(0.00037),
                TanLorentzAnglePerTesla_Barrel = cms.double(0.07),
                TanLorentzAnglePerTesla_Endcap = cms.double(0.07),
                ThresholdInElectrons_Barrel = cms.double(6000.0),
                ThresholdInElectrons_Endcap = cms.double(6000.0),
                ThresholdSmearing_Barrel = cms.double(600.0),
                ThresholdSmearing_Endcap = cms.double(600.0),
                TofLowerCut = cms.double(-12.5),
                TofUpperCut = cms.double(12.5),
                UseReweighting = cms.bool(False)
            ),
            accumulatorType = cms.string('Phase2TrackerDigitizer'),
            hitsProducer = cms.string('g4SimHits'),
            isOTreadoutAnalog = cms.bool(False),
            premixStage1 = cms.bool(False),
            usePseudoPixel3DAlgo = cms.bool(False)
        ),
        puVtx = cms.PSet(
            accumulatorType = cms.string('PileupVertexAccumulator'),
            hitsProducer = cms.string('generator'),
            makeDigiSimLinks = cms.untracked.bool(False),
            saveVtxTimes = cms.bool(True),
            vtxFallbackTag = cms.InputTag("generator"),
            vtxTag = cms.InputTag("generatorSmeared")
        )
    ),
    maxBunch = cms.int32(3),
    minBunch = cms.int32(-5),
    mixObjects = cms.PSet(
        mixCH = cms.PSet(
            crossingFrames = cms.untracked.vstring(),
            input = cms.VInputTag(
                cms.InputTag("g4SimHits","CastorFI"), cms.InputTag("g4SimHits","EcalHitsEB"), cms.InputTag("g4SimHits","EcalHitsEE"), cms.InputTag("g4SimHits","EcalHitsES"), cms.InputTag("g4SimHits","HcalHits"),
                cms.InputTag("g4SimHits","ZDCHITS"), cms.InputTag("g4SimHits","HGCHitsEE"), cms.InputTag("g4SimHits","HGCHitsHEfront"), cms.InputTag("g4SimHits","HGCHitsHEback")
            ),
            subdets = cms.vstring(
                'CastorFI',
                'EcalHitsEB',
                'EcalHitsEE',
                'EcalHitsES',
                'HcalHits',
                'ZDCHITS',
                'HGCHitsEE',
                'HGCHitsHEfront',
                'HGCHitsHEback'
            ),
            type = cms.string('PCaloHit')
        ),
        mixHepMC = cms.PSet(
            input = cms.VInputTag(cms.InputTag("generatorSmeared"), cms.InputTag("generator")),
            makeCrossingFrame = cms.untracked.bool(True),
            type = cms.string('HepMCProduct')
        ),
        mixSH = cms.PSet(
            crossingFrames = cms.untracked.vstring(
                'MuonCSCHits',
                'MuonDTHits',
                'MuonRPCHits',
                'MuonGEMHits',
                'FastTimerHitsBarrel',
                'FastTimerHitsEndcap'
            ),
            input = cms.VInputTag(
                cms.InputTag("g4SimHits","MuonCSCHits"), cms.InputTag("g4SimHits","MuonDTHits"), cms.InputTag("g4SimHits","MuonRPCHits"), cms.InputTag("g4SimHits","TrackerHitsPixelBarrelHighTof"), cms.InputTag("g4SimHits","TrackerHitsPixelBarrelLowTof"),
                cms.InputTag("g4SimHits","TrackerHitsPixelEndcapHighTof"), cms.InputTag("g4SimHits","TrackerHitsPixelEndcapLowTof"), cms.InputTag("g4SimHits","TrackerHitsTECHighTof"), cms.InputTag("g4SimHits","TrackerHitsTECLowTof"), cms.InputTag("g4SimHits","TrackerHitsTIBHighTof"),
                cms.InputTag("g4SimHits","TrackerHitsTIBLowTof"), cms.InputTag("g4SimHits","TrackerHitsTIDHighTof"), cms.InputTag("g4SimHits","TrackerHitsTIDLowTof"), cms.InputTag("g4SimHits","TrackerHitsTOBHighTof"), cms.InputTag("g4SimHits","TrackerHitsTOBLowTof"),
                cms.InputTag("g4SimHits","MuonGEMHits"), cms.InputTag("g4SimHits","FastTimerHitsBarrel"), cms.InputTag("g4SimHits","FastTimerHitsEndcap")
            ),
            pcrossingFrames = cms.untracked.vstring(),
            subdets = cms.vstring(
                'MuonCSCHits',
                'MuonDTHits',
                'MuonRPCHits',
                'TrackerHitsPixelBarrelHighTof',
                'TrackerHitsPixelBarrelLowTof',
                'TrackerHitsPixelEndcapHighTof',
                'TrackerHitsPixelEndcapLowTof',
                'TrackerHitsTECHighTof',
                'TrackerHitsTECLowTof',
                'TrackerHitsTIBHighTof',
                'TrackerHitsTIBLowTof',
                'TrackerHitsTIDHighTof',
                'TrackerHitsTIDLowTof',
                'TrackerHitsTOBHighTof',
                'TrackerHitsTOBLowTof',
                'MuonGEMHits',
                'FastTimerHitsBarrel',
                'FastTimerHitsEndcap'
            ),
            type = cms.string('PSimHit')
        ),
        mixTracks = cms.PSet(
            input = cms.VInputTag(cms.InputTag("g4SimHits")),
            makeCrossingFrame = cms.untracked.bool(False),
            type = cms.string('SimTrack')
        ),
        mixVertices = cms.PSet(
            input = cms.VInputTag(cms.InputTag("g4SimHits")),
            makeCrossingFrame = cms.untracked.bool(False),
            type = cms.string('SimVertex')
        )
    ),
    mixProdStep1 = cms.bool(False),
    mixProdStep2 = cms.bool(False),
    playback = cms.untracked.bool(False),
    useCurrentProcessOnly = cms.bool(False)
)


process.offlineBeamSpot = cms.EDProducer("BeamSpotProducer")


process.phase2L1CaloEGammaEmulator = cms.EDProducer("Phase2L1CaloEGammaEmulator",
    calib = cms.PSet(
        etaBins = cms.vdouble(
            0.087, 0.174, 0.261, 0.348, 0.435,
            0.522, 0.609, 0.696, 0.783, 0.87,
            0.957, 1.044, 1.131, 1.218, 1.305,
            1.392, 1.479
        ),
        ptBins = cms.vdouble(
            12, 20, 30, 40, 55,
            90, 1000000
        ),
        scale = cms.vdouble(
            1.298, 1.287, 1.309, 1.298, 1.309,
            1.309, 1.309, 1.298, 1.309, 1.298,
            1.309, 1.309, 1.309, 1.32, 1.309,
            1.32, 1.309, 1.1742, 1.1639, 1.1639,
            1.1639, 1.1639, 1.1639, 1.1639, 1.1742,
            1.1742, 1.1639, 1.1639, 1.1742, 1.1639,
            1.1639, 1.1742, 1.1742, 1.1536000000000002, 1.11,
            1.11, 1.11, 1.11, 1.11, 1.11,
            1.11, 1.11, 1.11, 1.11, 1.11,
            1.11, 1.11, 1.11, 1.11, 1.11,
            1.1, 1.09, 1.09, 1.09, 1.09,
            1.09, 1.09, 1.09, 1.09, 1.09,
            1.09, 1.09, 1.09, 1.09, 1.09,
            1.09, 1.09, 1.09, 1.07, 1.07,
            1.07, 1.07, 1.07, 1.07, 1.07,
            1.08, 1.07, 1.07, 1.08, 1.08,
            1.07, 1.08, 1.08, 1.08, 1.08,
            1.06, 1.06, 1.06, 1.06, 1.05,
            1.05, 1.06, 1.06, 1.06, 1.06,
            1.06, 1.06, 1.06, 1.06, 1.06,
            1.06, 1.06, 1.04, 1.04, 1.04,
            1.04, 1.05, 1.04, 1.05, 1.05,
            1.05, 1.05, 1.05, 1.05, 1.05,
            1.05, 1.05, 1.05, 1.05
        )
    ),
    ecalTPEB = cms.InputTag("simEcalEBTriggerPrimitiveDigis"),
    hcalTP = cms.InputTag("simHcalTriggerPrimitiveDigis"),
    mightGet = cms.optional.untracked.vstring
)


process.randomEngineStateProducer = cms.EDProducer("RandomEngineStateProducer")


process.rpcRecHits = cms.EDProducer("RPCRecHitProducer",
    deadSource = cms.string('File'),
    deadvecfile = cms.FileInPath('RecoLocalMuon/RPCRecHit/data/RPCDeadVec.dat'),
    maskSource = cms.string('File'),
    maskvecfile = cms.FileInPath('RecoLocalMuon/RPCRecHit/data/RPCMaskVec.dat'),
    recAlgo = cms.string('RPCRecHitStandardAlgo'),
    recAlgoConfig = cms.PSet(

    ),
    rpcDigiLabel = cms.InputTag("simMuonRPCDigis")
)


process.rpcRecHitsForEMTF = cms.EDProducer("RPCRecHitProducer",
    deadSource = cms.string('File'),
    deadvecfile = cms.FileInPath('RecoLocalMuon/RPCRecHit/data/RPCDeadVec.dat'),
    maskSource = cms.string('File'),
    maskvecfile = cms.FileInPath('RecoLocalMuon/RPCRecHit/data/RPCMaskVec.dat'),
    recAlgo = cms.string('RPCRecHitStandardAlgo'),
    recAlgoConfig = cms.PSet(

    ),
    rpcDigiLabel = cms.InputTag("simMuonRPCDigis")
)


process.rpcTriggerDigis = cms.EDProducer("RPCTrigger",
    RPCTriggerDebug = cms.untracked.int32(0),
    label = cms.string('muonRPCDigis')
)


process.simBmtfDigis = cms.EDProducer("L1TMuonBarrelTrackProducer",
    DTDigi_Source = cms.InputTag("simTwinMuxDigis"),
    DTDigi_Theta_Source = cms.InputTag("simTwinMuxDigis"),
    Debug = cms.untracked.int32(0)
)


process.simBscDigis = cms.EDProducer("BSCTrigger",
    bitNames = cms.vstring(
        'L1Tech_BSC_minBias_inner_threshold1',
        'L1Tech_BSC_minBias_inner_threshold2',
        'L1Tech_BSC_minBias_OR',
        'L1Tech_BSC_HighMultiplicity',
        'L1Tech_BSC_halo_beam2_inner',
        'L1Tech_BSC_halo_beam2_outer',
        'L1Tech_BSC_halo_beam1_inner',
        'L1Tech_BSC_halo_beam1_outer',
        'L1Tech_BSC_minBias_threshold1',
        'L1Tech_BSC_minBias_threshold2',
        'L1Tech_BSC_splash_beam1',
        'L1Tech_BSC_splash_beam2'
    ),
    bitNumbers = cms.vuint32(
        32, 33, 34, 35, 36,
        37, 38, 39, 40, 41,
        42, 43
    ),
    coincidence = cms.double(72.85),
    resolution = cms.double(3.0),
    theHits = cms.InputTag("mix","g4SimHitsBSCHits")
)


process.simCaloStage1Digis = cms.EDProducer("L1TStage1Layer2Producer",
    CaloEmCands = cms.InputTag("simRctUpgradeFormatDigis"),
    CaloRegions = cms.InputTag("simRctUpgradeFormatDigis"),
    conditionsLabel = cms.string('')
)


process.simCaloStage1FinalDigis = cms.EDProducer("L1TPhysicalEtAdder",
    InputCollection = cms.InputTag("simCaloStage1Digis"),
    InputHFCountsCollection = cms.InputTag("simCaloStage1Digis","HFBitCounts"),
    InputHFSumsCollection = cms.InputTag("simCaloStage1Digis","HFRingSums"),
    InputIsoTauCollection = cms.InputTag("simCaloStage1Digis","isoTaus"),
    InputPreGtJetCollection = cms.InputTag("simCaloStage1Digis","preGtJets"),
    InputRlxTauCollection = cms.InputTag("simCaloStage1Digis","rlxTaus")
)


process.simCaloStage1LegacyFormatDigis = cms.EDProducer("L1TCaloUpgradeToGCTConverter",
    InputCollection = cms.InputTag("simCaloStage1FinalDigis"),
    InputHFCountsCollection = cms.InputTag("simCaloStage1Digis","HFBitCounts"),
    InputHFSumsCollection = cms.InputTag("simCaloStage1Digis","HFRingSums"),
    InputIsoTauCollection = cms.InputTag("simCaloStage1Digis","isoTaus"),
    InputRlxTauCollection = cms.InputTag("simCaloStage1Digis","rlxTaus")
)


process.simCaloStage2Digis = cms.EDProducer("L1TStage2Layer2Producer",
    firmware = cms.int32(1),
    towerToken = cms.InputTag("simCaloStage2Layer1Digis"),
    useStaticConfig = cms.bool(False)
)


process.simCaloStage2Layer1Digis = cms.EDProducer("L1TCaloLayer1",
    ecalToken = cms.InputTag("simEcalTriggerPrimitiveDigis"),
    firmwareVersion = cms.int32(3),
    hcalToken = cms.InputTag("simHcalTriggerPrimitiveDigis"),
    unpackEcalMask = cms.bool(False),
    unpackHcalMask = cms.bool(False),
    useCalib = cms.bool(True),
    useECALLUT = cms.bool(True),
    useHCALFBLUT = cms.bool(False),
    useHCALLUT = cms.bool(True),
    useHFLUT = cms.bool(True),
    useLSB = cms.bool(True),
    verbose = cms.untracked.bool(False)
)


process.simCaloStage2Layer1Summary = cms.EDProducer("L1TCaloSummary_CICADA_vXp1p2",
    CICADAModelVersion = cms.string('CICADAModel_v2p1p2'),
    boostedJetPtFactor = cms.double(1.5),
    caloScaleFactor = cms.double(0.5),
    eGammaIsolationFactor = cms.double(0.3),
    eGammaSeed = cms.uint32(5),
    firmwareVersion = cms.int32(1),
    jetSeed = cms.uint32(10),
    nPumBins = cms.uint32(18),
    pumLUT00n = cms.vdouble(
        0.43, 0.32, 0.29, 0.36, 0.33,
        0.25, 0.25, 0.25, 0.25, 0.25,
        0.25, 0.25, 0.25
    ),
    pumLUT00p = cms.vdouble(
        0.45, 0.32, 0.29, 0.35, 0.31,
        0.25, 0.25, 0.25, 0.25, 0.25,
        0.25, 0.25, 0.25
    ),
    pumLUT01n = cms.vdouble(
        0.6, 0.39, 0.33, 0.44, 0.39,
        0.26, 0.27, 0.26, 0.26, 0.25,
        0.25, 0.25, 0.25
    ),
    pumLUT01p = cms.vdouble(
        0.6, 0.39, 0.33, 0.41, 0.35,
        0.26, 0.27, 0.26, 0.26, 0.25,
        0.25, 0.25, 0.25
    ),
    pumLUT02n = cms.vdouble(
        0.76, 0.52, 0.46, 0.57, 0.52,
        0.33, 0.41, 0.34, 0.31, 0.29,
        0.27, 0.26, 0.25
    ),
    pumLUT02p = cms.vdouble(
        0.75, 0.52, 0.46, 0.55, 0.48,
        0.34, 0.42, 0.34, 0.31, 0.29,
        0.27, 0.26, 0.25
    ),
    pumLUT03n = cms.vdouble(
        0.9, 0.63, 0.56, 0.69, 0.62,
        0.39, 0.58, 0.41, 0.37, 0.33,
        0.29, 0.27, 0.25
    ),
    pumLUT03p = cms.vdouble(
        0.9, 0.64, 0.56, 0.66, 0.57,
        0.39, 0.58, 0.41, 0.37, 0.33,
        0.29, 0.26, 0.25
    ),
    pumLUT04n = cms.vdouble(
        1.03, 0.74, 0.66, 0.8, 0.72,
        0.45, 0.8, 0.5, 0.45, 0.39,
        0.32, 0.28, 0.25
    ),
    pumLUT04p = cms.vdouble(
        1.03, 0.76, 0.67, 0.77, 0.67,
        0.46, 0.81, 0.5, 0.45, 0.39,
        0.32, 0.27, 0.25
    ),
    pumLUT05n = cms.vdouble(
        1.17, 0.86, 0.77, 0.92, 0.83,
        0.53, 1.09, 0.6, 0.55, 0.47,
        0.37, 0.29, 0.26
    ),
    pumLUT05p = cms.vdouble(
        1.18, 0.88, 0.77, 0.89, 0.77,
        0.54, 1.1, 0.61, 0.55, 0.47,
        0.35, 0.29, 0.26
    ),
    pumLUT06n = cms.vdouble(
        1.32, 0.98, 0.88, 1.04, 0.93,
        0.61, 1.44, 0.72, 0.66, 0.57,
        0.42, 0.31, 0.26
    ),
    pumLUT06p = cms.vdouble(
        1.32, 1.0, 0.89, 1.01, 0.88,
        0.63, 1.46, 0.73, 0.67, 0.57,
        0.41, 0.3, 0.26
    ),
    pumLUT07n = cms.vdouble(
        1.47, 1.11, 1.01, 1.17, 1.05,
        0.71, 1.86, 0.86, 0.81, 0.69,
        0.5, 0.34, 0.27
    ),
    pumLUT07p = cms.vdouble(
        1.48, 1.14, 1.01, 1.13, 0.99,
        0.73, 1.89, 0.87, 0.82, 0.7,
        0.47, 0.33, 0.27
    ),
    pumLUT08n = cms.vdouble(
        1.63, 1.26, 1.14, 1.3, 1.17,
        0.82, 2.37, 1.02, 0.98, 0.85,
        0.59, 0.37, 0.28
    ),
    pumLUT08p = cms.vdouble(
        1.64, 1.28, 1.15, 1.26, 1.11,
        0.85, 2.41, 1.03, 0.99, 0.86,
        0.56, 0.36, 0.28
    ),
    pumLUT09n = cms.vdouble(
        1.81, 1.41, 1.28, 1.45, 1.31,
        0.95, 2.98, 1.2, 1.18, 1.03,
        0.71, 0.42, 0.3
    ),
    pumLUT09p = cms.vdouble(
        1.82, 1.45, 1.29, 1.41, 1.24,
        0.98, 3.02, 1.21, 1.19, 1.05,
        0.67, 0.4, 0.29
    ),
    pumLUT10n = cms.vdouble(
        2.01, 1.58, 1.43, 1.62, 1.45,
        1.1, 3.7, 1.41, 1.42, 1.26,
        0.87, 0.48, 0.32
    ),
    pumLUT10p = cms.vdouble(
        2.02, 1.61, 1.46, 1.58, 1.38,
        1.13, 3.73, 1.42, 1.43, 1.27,
        0.82, 0.46, 0.31
    ),
    pumLUT11n = cms.vdouble(
        2.24, 1.78, 1.61, 1.78, 1.6,
        1.27, 4.55, 1.64, 1.71, 1.55,
        1.08, 0.57, 0.36
    ),
    pumLUT11p = cms.vdouble(
        2.21, 1.82, 1.63, 1.75, 1.53,
        1.31, 4.67, 1.67, 1.71, 1.57,
        1.01, 0.54, 0.36
    ),
    pumLUT12n = cms.vdouble(
        2.5, 2.0, 1.82, 1.91, 1.81,
        1.56, 5.56, 1.85, 2.01, 1.87,
        1.31, 0.68, 0.42
    ),
    pumLUT12p = cms.vdouble(
        2.44, 2.02, 1.9, 2.01, 1.7,
        1.51, 5.61, 1.96, 2.04, 1.8,
        1.24, 0.65, 0.43
    ),
    pumLUT13n = cms.vdouble(
        2.96, 2.4, 2.14, 2.41, 2.01,
        1.76, 8.05, 2.41, 2.43, 2.17,
        1.67, 0.9, 0.59
    ),
    pumLUT13p = cms.vdouble(
        3.28, 2.64, 2.26, 2.23, 1.97,
        1.89, 7.61, 2.27, 2.33, 2.26,
        1.44, 0.79, 0.52
    ),
    pumLUT14n = cms.vdouble(
        2.96, 2.4, 2.14, 2.41, 2.01,
        1.76, 8.05, 2.41, 2.43, 2.17,
        1.67, 0.9, 0.59
    ),
    pumLUT14p = cms.vdouble(
        3.28, 2.64, 2.26, 2.23, 1.97,
        1.89, 7.61, 2.27, 2.33, 2.26,
        1.44, 0.79, 0.52
    ),
    pumLUT15n = cms.vdouble(
        2.96, 2.4, 2.14, 2.41, 2.01,
        1.76, 8.05, 2.41, 2.43, 2.17,
        1.67, 0.9, 0.59
    ),
    pumLUT15p = cms.vdouble(
        3.28, 2.64, 2.26, 2.23, 1.97,
        1.89, 7.61, 2.27, 2.33, 2.26,
        1.44, 0.79, 0.52
    ),
    pumLUT16n = cms.vdouble(
        2.96, 2.4, 2.14, 2.41, 2.01,
        1.76, 8.05, 2.41, 2.43, 2.17,
        1.67, 0.9, 0.59
    ),
    pumLUT16p = cms.vdouble(
        3.28, 2.64, 2.26, 2.23, 1.97,
        1.89, 7.61, 2.27, 2.33, 2.26,
        1.44, 0.79, 0.52
    ),
    pumLUT17n = cms.vdouble(
        2.96, 2.4, 2.14, 2.41, 2.01,
        1.76, 8.05, 2.41, 2.43, 2.17,
        1.67, 0.9, 0.59
    ),
    pumLUT17p = cms.vdouble(
        3.28, 2.64, 2.26, 2.23, 1.97,
        1.89, 7.61, 2.27, 2.33, 2.26,
        1.44, 0.79, 0.52
    ),
    tauIsolationFactor = cms.double(0.3),
    tauSeed = cms.uint32(10),
    testPatterns = cms.VPSet(
        cms.PSet(
            iPhi_1 = cms.vuint32(
                0, 0, 1, 0, 1,
                0, 2, 3, 0, 0,
                0, 3, 6, 0
            ),
            iPhi_10 = cms.vuint32(
                0, 0, 1, 0, 12,
                2, 0, 0, 0, 1,
                0, 1, 0, 2
            ),
            iPhi_11 = cms.vuint32(
                5, 0, 0, 1, 0,
                0, 1, 4, 2, 0,
                15, 0, 0, 212
            ),
            iPhi_12 = cms.vuint32(
                4, 0, 2, 0, 2,
                1, 1, 4, 1, 0,
                2, 3, 0, 0
            ),
            iPhi_13 = cms.vuint32(
                0, 4, 1, 2, 182,
                0, 2, 2, 0, 0,
                0, 1, 1, 0
            ),
            iPhi_14 = cms.vuint32(
                0, 10, 0, 0, 0,
                0, 1, 1, 1, 0,
                1, 0, 0, 2
            ),
            iPhi_15 = cms.vuint32(
                6, 1, 0, 1, 0,
                1, 0, 0, 0, 1,
                0, 0, 1, 12
            ),
            iPhi_16 = cms.vuint32(
                0, 0, 0, 1, 0,
                1, 0, 0, 3, 1,
                0, 0, 0, 1
            ),
            iPhi_17 = cms.vuint32(
                0, 0, 0, 0, 0,
                2, 0, 4, 2, 0,
                3, 0, 0, 2
            ),
            iPhi_18 = cms.vuint32(
                2, 0, 0, 0, 0,
                1, 0, 4, 0, 2,
                4, 5, 0, 0
            ),
            iPhi_2 = cms.vuint32(
                2, 1, 0, 0, 0,
                1, 1, 1, 0, 0,
                1, 0, 0, 2
            ),
            iPhi_3 = cms.vuint32(
                0, 0, 0, 0, 0,
                1, 0, 0, 5, 0,
                0, 0, 0, 1
            ),
            iPhi_4 = cms.vuint32(
                0, 1, 0, 0, 0,
                1, 0, 0, 31, 1,
                8, 7, 2, 8
            ),
            iPhi_5 = cms.vuint32(
                1, 0, 1, 0, 0,
                1, 0, 1, 2, 4,
                0, 0, 0, 0
            ),
            iPhi_6 = cms.vuint32(
                0, 0, 0, 0, 4,
                0, 0, 1, 0, 0,
                0, 0, 0, 6
            ),
            iPhi_7 = cms.vuint32(
                0, 3, 1, 2, 1,
                5, 1, 0, 0, 0,
                0, 0, 1, 1
            ),
            iPhi_8 = cms.vuint32(
                0, 0, 3, 2, 0,
                2, 3, 3, 8, 10,
                1, 2, 0, 27
            ),
            iPhi_9 = cms.vuint32(
                6, 0, 0, 2, 0,
                0, 2, 0, 0, 0,
                1, 0, 0, 1
            )
        ),
        cms.PSet(
            iPhi_1 = cms.vuint32(
                3, 5, 6, 2, 1,
                0, 9, 0, 1, 1,
                2, 1, 1, 5
            ),
            iPhi_10 = cms.vuint32(
                10, 0, 2, 0, 3,
                0, 1, 2, 12, 0,
                20, 4, 0, 7
            ),
            iPhi_11 = cms.vuint32(
                16, 2, 4, 1, 0,
                2, 3, 15, 4, 1,
                0, 6, 5, 5
            ),
            iPhi_12 = cms.vuint32(
                3, 0, 1, 0, 1,
                1, 4, 2, 9, 115,
                38, 2, 3, 1
            ),
            iPhi_13 = cms.vuint32(
                10, 3, 10, 15, 2,
                0, 8, 8, 0, 2,
                2, 0, 1, 8
            ),
            iPhi_14 = cms.vuint32(
                4, 0, 0, 0, 1,
                4, 0, 1, 1, 1,
                1, 1, 0, 2
            ),
            iPhi_15 = cms.vuint32(
                11, 1, 1, 2, 1,
                3, 5, 4, 4, 2,
                0, 1, 0, 13
            ),
            iPhi_16 = cms.vuint32(
                6, 1, 1, 1, 0,
                1, 3, 2, 1, 10,
                3, 0, 0, 15
            ),
            iPhi_17 = cms.vuint32(
                4, 0, 0, 1, 2,
                1, 1, 2, 0, 1,
                0, 1, 0, 3
            ),
            iPhi_18 = cms.vuint32(
                5, 0, 0, 0, 4,
                1, 0, 2, 5, 31,
                0, 1, 1, 5
            ),
            iPhi_2 = cms.vuint32(
                4, 2, 1, 0, 5,
                0, 0, 2, 4, 11,
                10, 1, 1, 12
            ),
            iPhi_3 = cms.vuint32(
                5, 0, 0, 2, 1,
                2, 1, 1, 19, 20,
                237, 0, 2, 2
            ),
            iPhi_4 = cms.vuint32(
                5, 1, 0, 3, 2,
                1, 2, 3, 3, 1,
                2, 1, 1, 7
            ),
            iPhi_5 = cms.vuint32(
                1, 1, 1, 2, 0,
                0, 0, 3, 5, 2,
                1, 1, 3, 14
            ),
            iPhi_6 = cms.vuint32(
                4, 0, 2, 2, 0,
                0, 0, 2, 1, 3,
                3, 1, 0, 3
            ),
            iPhi_7 = cms.vuint32(
                1, 4, 62, 6, 0,
                1, 10, 2, 2, 5,
                1, 1, 0, 7
            ),
            iPhi_8 = cms.vuint32(
                13, 1, 0, 2, 1,
                5, 1, 3, 1, 0,
                1, 0, 4, 2
            ),
            iPhi_9 = cms.vuint32(
                4, 1, 2, 1, 6,
                2, 6, 0, 2, 2,
                1, 0, 0, 6
            )
        ),
        cms.PSet(
            iPhi_1 = cms.vuint32(
                4, 2, 2, 0, 0,
                0, 4, 6, 1, 0,
                0, 2, 2, 7
            ),
            iPhi_10 = cms.vuint32(
                27, 2, 0, 0, 0,
                2, 3, 1, 3, 0,
                0, 2, 0, 0
            ),
            iPhi_11 = cms.vuint32(
                8, 2, 3, 5, 5,
                1, 1, 0, 4, 2,
                2, 0, 0, 5
            ),
            iPhi_12 = cms.vuint32(
                6, 6, 1, 0, 0,
                2, 0, 3, 1, 3,
                2, 1, 0, 2
            ),
            iPhi_13 = cms.vuint32(
                0, 2, 2, 1, 0,
                0, 7, 6, 0, 0,
                0, 0, 1, 352
            ),
            iPhi_14 = cms.vuint32(
                8, 0, 0, 1, 1,
                1, 2, 2, 1, 4,
                0, 0, 0, 2
            ),
            iPhi_15 = cms.vuint32(
                3, 0, 0, 0, 1,
                3, 3, 3, 0, 1,
                0, 0, 0, 2
            ),
            iPhi_16 = cms.vuint32(
                3, 166, 0, 4, 0,
                2, 3, 1, 1, 1,
                0, 0, 0, 6
            ),
            iPhi_17 = cms.vuint32(
                2, 2, 1, 0, 0,
                0, 0, 2, 5, 0,
                0, 0, 0, 2
            ),
            iPhi_18 = cms.vuint32(
                6, 3, 0, 2, 0,
                4, 7, 1, 4, 4,
                0, 0, 1, 2
            ),
            iPhi_2 = cms.vuint32(
                2, 2, 0, 1, 1,
                1, 0, 0, 1, 2,
                2, 1, 0, 0
            ),
            iPhi_3 = cms.vuint32(
                0, 0, 0, 1, 52,
                0, 3, 2, 7, 2,
                0, 0, 1, 4
            ),
            iPhi_4 = cms.vuint32(
                4, 0, 0, 0, 51,
                6, 53, 4, 1, 0,
                0, 0, 0, 0
            ),
            iPhi_5 = cms.vuint32(
                10, 0, 0, 0, 1,
                1, 4, 1, 0, 0,
                0, 0, 0, 8
            ),
            iPhi_6 = cms.vuint32(
                2, 0, 2, 0, 1,
                5, 1, 3, 4, 0,
                1, 0, 1, 14
            ),
            iPhi_7 = cms.vuint32(
                1, 0, 1, 1, 0,
                0, 8, 9, 2, 3,
                0, 1, 0, 3
            ),
            iPhi_8 = cms.vuint32(
                4, 0, 23, 62, 31,
                0, 5, 3, 3, 1,
                0, 0, 0, 4
            ),
            iPhi_9 = cms.vuint32(
                100, 3, 10, 5, 0,
                2, 0, 2, 1, 2,
                0, 0, 0, 0
            )
        )
    ),
    useTestPatterns = cms.bool(False),
    verbose = cms.bool(False)
)


process.simCastorTechTrigDigis = cms.EDProducer("CastorTTRecord",
    CastorDigiCollection = cms.InputTag("simCastorDigis"),
    CastorSignalTS = cms.uint32(4),
    TriggerBitNames = cms.vstring(
        'L1Tech_CASTOR_0.v0',
        'L1Tech_CASTOR_TotalEnergy.v0',
        'L1Tech_CASTOR_EM.v0',
        'L1Tech_CASTOR_HaloMuon.v0'
    ),
    TriggerThresholds = cms.vdouble(
        50, 48000, 1500, 100, 50,
        65000
    ),
    ttpBits = cms.vuint32(60, 61, 62, 63)
)


process.simCscTriggerPrimitiveDigis = cms.EDProducer("CSCTriggerPrimitivesProducer",
    CSCComparatorDigiProducer = cms.InputTag("simMuonCSCDigis","MuonCSCComparatorDigi"),
    CSCWireDigiProducer = cms.InputTag("simMuonCSCDigis","MuonCSCWireDigi"),
    GEMPadDigiClusterProducer = cms.InputTag("simMuonGEMPadDigiClusters"),
    MaxBX = cms.int32(11),
    MinBX = cms.int32(5),
    alctPhase1 = cms.PSet(
        alctAccelMode = cms.uint32(0),
        alctDriftDelay = cms.uint32(2),
        alctEarlyTbins = cms.int32(4),
        alctFifoPretrig = cms.uint32(10),
        alctFifoTbins = cms.uint32(16),
        alctGhostCancellationBxDepth = cms.int32(4),
        alctGhostCancellationSideQuality = cms.bool(False),
        alctHitPersist = cms.uint32(6),
        alctL1aWindowWidth = cms.uint32(7),
        alctNarrowMaskForR1 = cms.bool(False),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctNplanesHitAccelPretrig = cms.uint32(3),
        alctNplanesHitPattern = cms.uint32(4),
        alctNplanesHitPretrig = cms.uint32(3),
        alctPretrigDeadtime = cms.uint32(4),
        alctTrigMode = cms.uint32(2),
        alctUseCorrectedBx = cms.bool(False),
        verbosity = cms.int32(0)
    ),
    alctPhase2 = cms.PSet(
        alctAccelMode = cms.uint32(0),
        alctDriftDelay = cms.uint32(2),
        alctEarlyTbins = cms.int32(4),
        alctFifoPretrig = cms.uint32(10),
        alctFifoTbins = cms.uint32(16),
        alctGhostCancellationBxDepth = cms.int32(1),
        alctGhostCancellationSideQuality = cms.bool(True),
        alctHitPersist = cms.uint32(6),
        alctL1aWindowWidth = cms.uint32(7),
        alctNarrowMaskForR1 = cms.bool(True),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctNplanesHitAccelPretrig = cms.uint32(3),
        alctNplanesHitPattern = cms.uint32(4),
        alctNplanesHitPretrig = cms.uint32(3),
        alctPretrigDeadtime = cms.uint32(0),
        alctTrigMode = cms.uint32(2),
        alctUseCorrectedBx = cms.bool(True),
        verbosity = cms.int32(0)
    ),
    alctPhase2GEM = cms.PSet(
        alctAccelMode = cms.uint32(0),
        alctDriftDelay = cms.uint32(2),
        alctEarlyTbins = cms.int32(4),
        alctFifoPretrig = cms.uint32(10),
        alctFifoTbins = cms.uint32(16),
        alctGhostCancellationBxDepth = cms.int32(1),
        alctGhostCancellationSideQuality = cms.bool(True),
        alctHitPersist = cms.uint32(6),
        alctL1aWindowWidth = cms.uint32(7),
        alctNarrowMaskForR1 = cms.bool(True),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctNplanesHitAccelPretrig = cms.uint32(3),
        alctNplanesHitPattern = cms.uint32(4),
        alctNplanesHitPretrig = cms.uint32(3),
        alctPretrigDeadtime = cms.uint32(0),
        alctTrigMode = cms.uint32(2),
        alctUseCorrectedBx = cms.bool(True),
        verbosity = cms.int32(0)
    ),
    checkBadChambers = cms.bool(False),
    clctPhase1 = cms.PSet(
        clctDriftDelay = cms.uint32(2),
        clctFifoPretrig = cms.uint32(7),
        clctFifoTbins = cms.uint32(12),
        clctHitPersist = cms.uint32(4),
        clctLocalShowerThresh = cms.int32(12),
        clctLocalShowerZone = cms.int32(25),
        clctMinSeparation = cms.uint32(10),
        clctNplanesHitPattern = cms.uint32(4),
        clctNplanesHitPretrig = cms.uint32(3),
        clctPidThreshPretrig = cms.uint32(2),
        clctStartBxShift = cms.int32(0),
        useDeadTimeZoning = cms.bool(False),
        verbosity = cms.int32(0)
    ),
    clctPhase2 = cms.PSet(
        clctDriftDelay = cms.uint32(2),
        clctFifoPretrig = cms.uint32(7),
        clctFifoTbins = cms.uint32(12),
        clctHitPersist = cms.uint32(4),
        clctLocalShowerThresh = cms.int32(12),
        clctLocalShowerZone = cms.int32(25),
        clctMinSeparation = cms.uint32(5),
        clctNplanesHitPattern = cms.uint32(4),
        clctNplanesHitPretrig = cms.uint32(3),
        clctPidThreshPretrig = cms.uint32(2),
        clctPretriggerTriggerZone = cms.uint32(224),
        clctStartBxShift = cms.int32(0),
        clctStateMachineZone = cms.uint32(4),
        useDeadTimeZoning = cms.bool(True),
        verbosity = cms.int32(0)
    ),
    clctPhase2GEM = cms.PSet(
        clctDriftDelay = cms.uint32(2),
        clctFifoPretrig = cms.uint32(7),
        clctFifoTbins = cms.uint32(12),
        clctHitPersist = cms.uint32(4),
        clctLocalShowerThresh = cms.int32(12),
        clctLocalShowerZone = cms.int32(25),
        clctMinSeparation = cms.uint32(5),
        clctNplanesHitPattern = cms.uint32(4),
        clctNplanesHitPretrig = cms.uint32(3),
        clctPidThreshPretrig = cms.uint32(2),
        clctPretriggerTriggerZone = cms.uint32(224),
        clctStartBxShift = cms.int32(0),
        clctStateMachineZone = cms.uint32(4),
        useDeadTimeZoning = cms.bool(True),
        verbosity = cms.int32(0)
    ),
    commonParam = cms.PSet(
        disableME1a = cms.bool(False),
        disableME42 = cms.bool(False),
        enableAlctPhase2 = cms.bool(True),
        gangedME1a = cms.bool(False),
        run3 = cms.bool(True),
        runCCLUT_OTMB = cms.bool(True),
        runCCLUT_TMB = cms.bool(False),
        runME11ILT = cms.bool(True),
        runME11Up = cms.bool(True),
        runME21ILT = cms.bool(True),
        runME21Up = cms.bool(True),
        runME31Up = cms.bool(True),
        runME41Up = cms.bool(True),
        runPhase2 = cms.bool(True),
        verbosity = cms.int32(0)
    ),
    copadParamGE11 = cms.PSet(
        maxDeltaBX = cms.uint32(0),
        maxDeltaPad = cms.uint32(8),
        maxDeltaRoll = cms.uint32(1),
        verbosity = cms.uint32(0)
    ),
    copadParamGE21 = cms.PSet(
        maxDeltaBX = cms.uint32(0),
        maxDeltaPad = cms.uint32(8),
        maxDeltaRoll = cms.uint32(1),
        verbosity = cms.uint32(0)
    ),
    debugParameters = cms.bool(True),
    keepALCTPreTriggers = cms.bool(False),
    keepCLCTPreTriggers = cms.bool(True),
    keepShowers = cms.bool(True),
    mpcParam = cms.PSet(
        dropInvalidStubs = cms.bool(False),
        dropLowQualityStubs = cms.bool(False),
        maxStubs = cms.uint32(18),
        sortStubs = cms.bool(False)
    ),
    selectedChambers = cms.vstring(),
    showerParam = cms.PSet(
        anodeShower = cms.PSet(
            minLayersCentralTBin = cms.uint32(5),
            showerNumTBins = cms.uint32(1),
            showerThresholds = cms.vuint32(
                140, 140, 140, 140, 140,
                140, 7, 14, 18, 23,
                56, 58, 12, 28, 32,
                21, 55, 57, 12, 26,
                34, 25, 62, 64, 12,
                27, 31
            )
        ),
        cathodeShower = cms.PSet(
            minLayersCentralTBin = cms.uint32(5),
            peakCheck = cms.bool(False),
            showerNumTBins = cms.uint32(3),
            showerThresholds = cms.vuint32(
                100, 100, 100, 10000, 10000,
                10000, 10000, 10000, 10000, 14,
                33, 35, 10000, 10000, 10000,
                12, 31, 33, 10000, 10000,
                10000, 14, 34, 36, 10000,
                10000, 10000
            )
        ),
        source = cms.vuint32(
            3, 1, 1, 3, 1,
            3, 1, 3, 1
        )
    ),
    tmbPhase1 = cms.PSet(
        alctTrigEnable = cms.uint32(0),
        clctTrigEnable = cms.uint32(0),
        ignoreAlctCrossClct = cms.bool(True),
        matchEarliestClctOnly = cms.bool(True),
        matchTrigEnable = cms.uint32(1),
        matchTrigWindowSize = cms.uint32(7),
        mpcBlockMe1a = cms.uint32(0),
        preferredBxMatch = cms.vint32(
            0, -1, 1, -2, 2,
            -3, 3
        ),
        sortClctBx = cms.bool(True),
        tmbDropUsedClcts = cms.bool(False),
        tmbEarlyTbins = cms.int32(4),
        tmbL1aWindowSize = cms.uint32(7),
        tmbReadoutEarliest2 = cms.bool(True),
        useHighMultiplicityBits = cms.bool(False),
        verbosity = cms.int32(0)
    ),
    tmbPhase2 = cms.PSet(
        alctTrigEnable = cms.uint32(0),
        clctTrigEnable = cms.uint32(0),
        ignoreAlctCrossClct = cms.bool(True),
        matchEarliestClctOnly = cms.bool(True),
        matchTrigEnable = cms.uint32(1),
        matchTrigWindowSize = cms.uint32(7),
        mpcBlockMe1a = cms.uint32(0),
        preferredBxMatch = cms.vint32(
            0, -1, 1, -2, 2,
            -3, 3
        ),
        sortClctBx = cms.bool(True),
        tmbDropUsedClcts = cms.bool(False),
        tmbEarlyTbins = cms.int32(4),
        tmbL1aWindowSize = cms.uint32(7),
        tmbReadoutEarliest2 = cms.bool(True),
        useHighMultiplicityBits = cms.bool(False),
        verbosity = cms.int32(0)
    ),
    tmbPhase2GE11 = cms.PSet(
        BunchCrossingCSCminGEMwindow = cms.vint32(
            0, -1, 1, -2, 2,
            -3, 3
        ),
        alctTrigEnable = cms.uint32(0),
        assignGEMCSCBending = cms.bool(True),
        buildLCTfromALCTandGEM = cms.bool(True),
        buildLCTfromCLCTandGEM = cms.bool(False),
        clctTrigEnable = cms.uint32(0),
        delayGEMinOTMB = cms.uint32(0),
        dropLowQualityALCTs = cms.bool(True),
        dropLowQualityCLCTs = cms.bool(True),
        dropLowQualityCLCTs_ME1a = cms.bool(True),
        enableMatchGEMandME1a = cms.bool(True),
        enableMatchGEMandME1b = cms.bool(True),
        ignoreAlctCrossClct = cms.bool(True),
        matchCLCTpropagation = cms.bool(True),
        matchEarliestClctOnly = cms.bool(True),
        matchTrigEnable = cms.uint32(1),
        matchTrigWindowSize = cms.uint32(7),
        maxDeltaHsEven = cms.uint32(5),
        maxDeltaHsOdd = cms.uint32(10),
        maxDeltaWG = cms.uint32(7),
        mitigateSlopeByCosi = cms.bool(False),
        mpcBlockMe1a = cms.uint32(0),
        preferredBxMatch = cms.vint32(
            0, -1, 1, -2, 2,
            -3, 3
        ),
        sortClctBx = cms.bool(True),
        tmbDropUsedClcts = cms.bool(False),
        tmbEarlyTbins = cms.int32(4),
        tmbL1aWindowSize = cms.uint32(7),
        tmbReadoutEarliest2 = cms.bool(True),
        useHighMultiplicityBits = cms.bool(False),
        verbosity = cms.int32(0),
        windowBXALCTGEM = cms.uint32(3),
        windowBXCLCTGEM = cms.uint32(7)
    ),
    tmbPhase2GE21 = cms.PSet(
        BunchCrossingCSCminGEMwindow = cms.vint32(
            0, -1, 1, -2, 2,
            -3, 3
        ),
        alctTrigEnable = cms.uint32(0),
        assignGEMCSCBending = cms.bool(True),
        buildLCTfromALCTandGEM = cms.bool(True),
        buildLCTfromCLCTandGEM = cms.bool(False),
        clctTrigEnable = cms.uint32(0),
        delayGEMinOTMB = cms.uint32(0),
        dropLowQualityALCTs = cms.bool(True),
        dropLowQualityCLCTs = cms.bool(True),
        dropLowQualityCLCTs_ME1a = cms.bool(True),
        enableMatchGEMandME1a = cms.bool(True),
        enableMatchGEMandME1b = cms.bool(True),
        ignoreAlctCrossClct = cms.bool(True),
        matchCLCTpropagation = cms.bool(True),
        matchEarliestClctOnly = cms.bool(True),
        matchTrigEnable = cms.uint32(1),
        matchTrigWindowSize = cms.uint32(7),
        maxDeltaHsEven = cms.uint32(5),
        maxDeltaHsOdd = cms.uint32(10),
        maxDeltaWG = cms.uint32(7),
        mitigateSlopeByCosi = cms.bool(False),
        mpcBlockMe1a = cms.uint32(0),
        preferredBxMatch = cms.vint32(
            0, -1, 1, -2, 2,
            -3, 3
        ),
        sortClctBx = cms.bool(True),
        tmbDropUsedClcts = cms.bool(False),
        tmbEarlyTbins = cms.int32(4),
        tmbL1aWindowSize = cms.uint32(7),
        tmbReadoutEarliest2 = cms.bool(True),
        useHighMultiplicityBits = cms.bool(False),
        verbosity = cms.int32(0),
        windowBXALCTGEM = cms.uint32(3),
        windowBXCLCTGEM = cms.uint32(7)
    )
)


process.simCscTriggerPrimitiveDigisForEMTF = cms.EDProducer("CSCTriggerPrimitivesProducer",
    CSCComparatorDigiProducer = cms.InputTag("simMuonCSCDigis","MuonCSCComparatorDigi"),
    CSCWireDigiProducer = cms.InputTag("simMuonCSCDigis","MuonCSCWireDigi"),
    GEMPadDigiClusterProducer = cms.InputTag("simMuonGEMPadDigiClusters"),
    MaxBX = cms.int32(11),
    MinBX = cms.int32(5),
    alctPhase1 = cms.PSet(
        alctAccelMode = cms.uint32(0),
        alctDriftDelay = cms.uint32(2),
        alctEarlyTbins = cms.int32(4),
        alctFifoPretrig = cms.uint32(10),
        alctFifoTbins = cms.uint32(16),
        alctGhostCancellationBxDepth = cms.int32(4),
        alctGhostCancellationSideQuality = cms.bool(False),
        alctHitPersist = cms.uint32(6),
        alctL1aWindowWidth = cms.uint32(7),
        alctNarrowMaskForR1 = cms.bool(False),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctNplanesHitAccelPretrig = cms.uint32(3),
        alctNplanesHitPattern = cms.uint32(4),
        alctNplanesHitPretrig = cms.uint32(3),
        alctPretrigDeadtime = cms.uint32(4),
        alctTrigMode = cms.uint32(2),
        alctUseCorrectedBx = cms.bool(False),
        verbosity = cms.int32(0)
    ),
    alctPhase2 = cms.PSet(
        alctAccelMode = cms.uint32(0),
        alctDriftDelay = cms.uint32(2),
        alctEarlyTbins = cms.int32(4),
        alctFifoPretrig = cms.uint32(10),
        alctFifoTbins = cms.uint32(16),
        alctGhostCancellationBxDepth = cms.int32(1),
        alctGhostCancellationSideQuality = cms.bool(True),
        alctHitPersist = cms.uint32(6),
        alctL1aWindowWidth = cms.uint32(7),
        alctNarrowMaskForR1 = cms.bool(True),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctNplanesHitAccelPretrig = cms.uint32(3),
        alctNplanesHitPattern = cms.uint32(4),
        alctNplanesHitPretrig = cms.uint32(3),
        alctPretrigDeadtime = cms.uint32(0),
        alctTrigMode = cms.uint32(2),
        alctUseCorrectedBx = cms.bool(True),
        verbosity = cms.int32(0)
    ),
    alctPhase2GEM = cms.PSet(
        alctAccelMode = cms.uint32(0),
        alctDriftDelay = cms.uint32(2),
        alctEarlyTbins = cms.int32(4),
        alctFifoPretrig = cms.uint32(10),
        alctFifoTbins = cms.uint32(16),
        alctGhostCancellationBxDepth = cms.int32(1),
        alctGhostCancellationSideQuality = cms.bool(True),
        alctHitPersist = cms.uint32(6),
        alctL1aWindowWidth = cms.uint32(7),
        alctNarrowMaskForR1 = cms.bool(True),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctNplanesHitAccelPretrig = cms.uint32(3),
        alctNplanesHitPattern = cms.uint32(4),
        alctNplanesHitPretrig = cms.uint32(3),
        alctPretrigDeadtime = cms.uint32(0),
        alctTrigMode = cms.uint32(2),
        alctUseCorrectedBx = cms.bool(True),
        verbosity = cms.int32(0)
    ),
    checkBadChambers = cms.bool(False),
    clctPhase1 = cms.PSet(
        clctDriftDelay = cms.uint32(2),
        clctFifoPretrig = cms.uint32(7),
        clctFifoTbins = cms.uint32(12),
        clctHitPersist = cms.uint32(4),
        clctLocalShowerThresh = cms.int32(12),
        clctLocalShowerZone = cms.int32(25),
        clctMinSeparation = cms.uint32(10),
        clctNplanesHitPattern = cms.uint32(4),
        clctNplanesHitPretrig = cms.uint32(3),
        clctPidThreshPretrig = cms.uint32(2),
        clctStartBxShift = cms.int32(0),
        useDeadTimeZoning = cms.bool(False),
        verbosity = cms.int32(0)
    ),
    clctPhase2 = cms.PSet(
        clctDriftDelay = cms.uint32(2),
        clctFifoPretrig = cms.uint32(7),
        clctFifoTbins = cms.uint32(12),
        clctHitPersist = cms.uint32(4),
        clctLocalShowerThresh = cms.int32(12),
        clctLocalShowerZone = cms.int32(25),
        clctMinSeparation = cms.uint32(5),
        clctNplanesHitPattern = cms.uint32(4),
        clctNplanesHitPretrig = cms.uint32(3),
        clctPidThreshPretrig = cms.uint32(2),
        clctPretriggerTriggerZone = cms.uint32(224),
        clctStartBxShift = cms.int32(0),
        clctStateMachineZone = cms.uint32(4),
        useDeadTimeZoning = cms.bool(True),
        verbosity = cms.int32(0)
    ),
    clctPhase2GEM = cms.PSet(
        clctDriftDelay = cms.uint32(2),
        clctFifoPretrig = cms.uint32(7),
        clctFifoTbins = cms.uint32(12),
        clctHitPersist = cms.uint32(4),
        clctLocalShowerThresh = cms.int32(12),
        clctLocalShowerZone = cms.int32(25),
        clctMinSeparation = cms.uint32(5),
        clctNplanesHitPattern = cms.uint32(4),
        clctNplanesHitPretrig = cms.uint32(3),
        clctPidThreshPretrig = cms.uint32(2),
        clctPretriggerTriggerZone = cms.uint32(224),
        clctStartBxShift = cms.int32(0),
        clctStateMachineZone = cms.uint32(4),
        useDeadTimeZoning = cms.bool(True),
        verbosity = cms.int32(0)
    ),
    commonParam = cms.PSet(
        GEMPadDigiClusterProducer = cms.InputTag(""),
        disableME1a = cms.bool(False),
        disableME42 = cms.bool(False),
        enableAlctPhase2 = cms.bool(False),
        gangedME1a = cms.bool(False),
        run3 = cms.bool(True),
        runCCLUT_OTMB = cms.bool(True),
        runCCLUT_TMB = cms.bool(False),
        runME11ILT = cms.bool(False),
        runME11Up = cms.bool(True),
        runME21ILT = cms.bool(False),
        runME21Up = cms.bool(True),
        runME31Up = cms.bool(True),
        runME41Up = cms.bool(True),
        runPhase2 = cms.bool(True),
        verbosity = cms.int32(0)
    ),
    copadParamGE11 = cms.PSet(
        maxDeltaBX = cms.uint32(0),
        maxDeltaPad = cms.uint32(8),
        maxDeltaRoll = cms.uint32(1),
        verbosity = cms.uint32(0)
    ),
    copadParamGE21 = cms.PSet(
        maxDeltaBX = cms.uint32(0),
        maxDeltaPad = cms.uint32(8),
        maxDeltaRoll = cms.uint32(1),
        verbosity = cms.uint32(0)
    ),
    debugParameters = cms.bool(True),
    keepALCTPreTriggers = cms.bool(False),
    keepCLCTPreTriggers = cms.bool(True),
    keepShowers = cms.bool(True),
    mpcParam = cms.PSet(
        dropInvalidStubs = cms.bool(False),
        dropLowQualityStubs = cms.bool(False),
        maxStubs = cms.uint32(18),
        sortStubs = cms.bool(False)
    ),
    selectedChambers = cms.vstring(),
    showerParam = cms.PSet(
        anodeShower = cms.PSet(
            minLayersCentralTBin = cms.uint32(5),
            showerNumTBins = cms.uint32(1),
            showerThresholds = cms.vuint32(
                140, 140, 140, 140, 140,
                140, 7, 14, 18, 23,
                56, 58, 12, 28, 32,
                21, 55, 57, 12, 26,
                34, 25, 62, 64, 12,
                27, 31
            )
        ),
        cathodeShower = cms.PSet(
            minLayersCentralTBin = cms.uint32(5),
            peakCheck = cms.bool(False),
            showerNumTBins = cms.uint32(3),
            showerThresholds = cms.vuint32(
                100, 100, 100, 10000, 10000,
                10000, 10000, 10000, 10000, 14,
                33, 35, 10000, 10000, 10000,
                12, 31, 33, 10000, 10000,
                10000, 14, 34, 36, 10000,
                10000, 10000
            )
        ),
        source = cms.vuint32(
            3, 1, 1, 3, 1,
            3, 1, 3, 1
        )
    ),
    tmbPhase1 = cms.PSet(
        alctTrigEnable = cms.uint32(0),
        clctTrigEnable = cms.uint32(0),
        ignoreAlctCrossClct = cms.bool(True),
        matchEarliestClctOnly = cms.bool(True),
        matchTrigEnable = cms.uint32(1),
        matchTrigWindowSize = cms.uint32(7),
        mpcBlockMe1a = cms.uint32(0),
        preferredBxMatch = cms.vint32(
            0, -1, 1, -2, 2,
            -3, 3
        ),
        sortClctBx = cms.bool(True),
        tmbDropUsedClcts = cms.bool(False),
        tmbEarlyTbins = cms.int32(4),
        tmbL1aWindowSize = cms.uint32(7),
        tmbReadoutEarliest2 = cms.bool(False),
        useHighMultiplicityBits = cms.bool(False),
        verbosity = cms.int32(0)
    ),
    tmbPhase2 = cms.PSet(
        alctTrigEnable = cms.uint32(0),
        clctTrigEnable = cms.uint32(0),
        ignoreAlctCrossClct = cms.bool(True),
        matchEarliestClctOnly = cms.bool(True),
        matchTrigEnable = cms.uint32(1),
        matchTrigWindowSize = cms.uint32(7),
        mpcBlockMe1a = cms.uint32(0),
        preferredBxMatch = cms.vint32(
            0, -1, 1, -2, 2,
            -3, 3
        ),
        sortClctBx = cms.bool(True),
        tmbDropUsedClcts = cms.bool(False),
        tmbEarlyTbins = cms.int32(4),
        tmbL1aWindowSize = cms.uint32(7),
        tmbReadoutEarliest2 = cms.bool(False),
        useHighMultiplicityBits = cms.bool(False),
        verbosity = cms.int32(0)
    ),
    tmbPhase2GE11 = cms.PSet(
        BunchCrossingCSCminGEMwindow = cms.vint32(
            0, -1, 1, -2, 2,
            -3, 3
        ),
        alctTrigEnable = cms.uint32(0),
        assignGEMCSCBending = cms.bool(True),
        buildLCTfromALCTandGEM = cms.bool(True),
        buildLCTfromCLCTandGEM = cms.bool(False),
        clctTrigEnable = cms.uint32(0),
        delayGEMinOTMB = cms.uint32(0),
        dropLowQualityALCTs = cms.bool(True),
        dropLowQualityCLCTs = cms.bool(True),
        dropLowQualityCLCTs_ME1a = cms.bool(True),
        enableMatchGEMandME1a = cms.bool(True),
        enableMatchGEMandME1b = cms.bool(True),
        ignoreAlctCrossClct = cms.bool(True),
        matchCLCTpropagation = cms.bool(True),
        matchEarliestClctOnly = cms.bool(True),
        matchTrigEnable = cms.uint32(1),
        matchTrigWindowSize = cms.uint32(7),
        maxDeltaHsEven = cms.uint32(5),
        maxDeltaHsOdd = cms.uint32(10),
        maxDeltaWG = cms.uint32(7),
        mitigateSlopeByCosi = cms.bool(False),
        mpcBlockMe1a = cms.uint32(0),
        preferredBxMatch = cms.vint32(
            0, -1, 1, -2, 2,
            -3, 3
        ),
        sortClctBx = cms.bool(True),
        tmbDropUsedClcts = cms.bool(False),
        tmbEarlyTbins = cms.int32(4),
        tmbL1aWindowSize = cms.uint32(7),
        tmbReadoutEarliest2 = cms.bool(True),
        useHighMultiplicityBits = cms.bool(False),
        verbosity = cms.int32(0),
        windowBXALCTGEM = cms.uint32(3),
        windowBXCLCTGEM = cms.uint32(7)
    ),
    tmbPhase2GE21 = cms.PSet(
        BunchCrossingCSCminGEMwindow = cms.vint32(
            0, -1, 1, -2, 2,
            -3, 3
        ),
        alctTrigEnable = cms.uint32(0),
        assignGEMCSCBending = cms.bool(True),
        buildLCTfromALCTandGEM = cms.bool(True),
        buildLCTfromCLCTandGEM = cms.bool(False),
        clctTrigEnable = cms.uint32(0),
        delayGEMinOTMB = cms.uint32(0),
        dropLowQualityALCTs = cms.bool(True),
        dropLowQualityCLCTs = cms.bool(True),
        dropLowQualityCLCTs_ME1a = cms.bool(True),
        enableMatchGEMandME1a = cms.bool(True),
        enableMatchGEMandME1b = cms.bool(True),
        ignoreAlctCrossClct = cms.bool(True),
        matchCLCTpropagation = cms.bool(True),
        matchEarliestClctOnly = cms.bool(True),
        matchTrigEnable = cms.uint32(1),
        matchTrigWindowSize = cms.uint32(7),
        maxDeltaHsEven = cms.uint32(5),
        maxDeltaHsOdd = cms.uint32(10),
        maxDeltaWG = cms.uint32(7),
        mitigateSlopeByCosi = cms.bool(False),
        mpcBlockMe1a = cms.uint32(0),
        preferredBxMatch = cms.vint32(
            0, -1, 1, -2, 2,
            -3, 3
        ),
        sortClctBx = cms.bool(True),
        tmbDropUsedClcts = cms.bool(False),
        tmbEarlyTbins = cms.int32(4),
        tmbL1aWindowSize = cms.uint32(7),
        tmbReadoutEarliest2 = cms.bool(True),
        useHighMultiplicityBits = cms.bool(False),
        verbosity = cms.int32(0),
        windowBXALCTGEM = cms.uint32(3),
        windowBXCLCTGEM = cms.uint32(7)
    )
)


process.simCscTriggerPrimitiveDigisPhase2 = cms.EDProducer("CSCTriggerPrimitivesProducer",
    CSCComparatorDigiProducer = cms.InputTag("simMuonCSCDigis","MuonCSCComparatorDigi"),
    CSCWireDigiProducer = cms.InputTag("simMuonCSCDigis","MuonCSCWireDigi"),
    GEMPadDigiClusterProducer = cms.InputTag("simMuonGEMPadDigiClusters"),
    MaxBX = cms.int32(11),
    MinBX = cms.int32(5),
    alctPhase1 = cms.PSet(
        alctAccelMode = cms.uint32(0),
        alctDriftDelay = cms.uint32(2),
        alctEarlyTbins = cms.int32(4),
        alctFifoPretrig = cms.uint32(10),
        alctFifoTbins = cms.uint32(16),
        alctGhostCancellationBxDepth = cms.int32(4),
        alctGhostCancellationSideQuality = cms.bool(False),
        alctHitPersist = cms.uint32(6),
        alctL1aWindowWidth = cms.uint32(7),
        alctNarrowMaskForR1 = cms.bool(False),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctNplanesHitAccelPretrig = cms.uint32(3),
        alctNplanesHitPattern = cms.uint32(4),
        alctNplanesHitPretrig = cms.uint32(3),
        alctPretrigDeadtime = cms.uint32(4),
        alctTrigMode = cms.uint32(2),
        alctUseCorrectedBx = cms.bool(False),
        verbosity = cms.int32(0)
    ),
    alctPhase2 = cms.PSet(
        alctAccelMode = cms.uint32(0),
        alctDriftDelay = cms.uint32(2),
        alctEarlyTbins = cms.int32(4),
        alctFifoPretrig = cms.uint32(10),
        alctFifoTbins = cms.uint32(16),
        alctGhostCancellationBxDepth = cms.int32(1),
        alctGhostCancellationSideQuality = cms.bool(True),
        alctHitPersist = cms.uint32(6),
        alctL1aWindowWidth = cms.uint32(7),
        alctNarrowMaskForR1 = cms.bool(True),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctNplanesHitAccelPretrig = cms.uint32(3),
        alctNplanesHitPattern = cms.uint32(4),
        alctNplanesHitPretrig = cms.uint32(3),
        alctPretrigDeadtime = cms.uint32(0),
        alctTrigMode = cms.uint32(2),
        alctUseCorrectedBx = cms.bool(True),
        verbosity = cms.int32(0)
    ),
    alctPhase2GEM = cms.PSet(
        alctAccelMode = cms.uint32(0),
        alctDriftDelay = cms.uint32(2),
        alctEarlyTbins = cms.int32(4),
        alctFifoPretrig = cms.uint32(10),
        alctFifoTbins = cms.uint32(16),
        alctGhostCancellationBxDepth = cms.int32(1),
        alctGhostCancellationSideQuality = cms.bool(True),
        alctHitPersist = cms.uint32(6),
        alctL1aWindowWidth = cms.uint32(7),
        alctNarrowMaskForR1 = cms.bool(True),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctNplanesHitAccelPretrig = cms.uint32(3),
        alctNplanesHitPattern = cms.uint32(4),
        alctNplanesHitPretrig = cms.uint32(3),
        alctPretrigDeadtime = cms.uint32(0),
        alctTrigMode = cms.uint32(2),
        alctUseCorrectedBx = cms.bool(True),
        verbosity = cms.int32(0)
    ),
    checkBadChambers = cms.bool(False),
    clctPhase1 = cms.PSet(
        clctDriftDelay = cms.uint32(2),
        clctFifoPretrig = cms.uint32(7),
        clctFifoTbins = cms.uint32(12),
        clctHitPersist = cms.uint32(4),
        clctLocalShowerThresh = cms.int32(12),
        clctLocalShowerZone = cms.int32(25),
        clctMinSeparation = cms.uint32(10),
        clctNplanesHitPattern = cms.uint32(4),
        clctNplanesHitPretrig = cms.uint32(3),
        clctPidThreshPretrig = cms.uint32(2),
        clctStartBxShift = cms.int32(0),
        useDeadTimeZoning = cms.bool(False),
        verbosity = cms.int32(0)
    ),
    clctPhase2 = cms.PSet(
        clctDriftDelay = cms.uint32(2),
        clctFifoPretrig = cms.uint32(7),
        clctFifoTbins = cms.uint32(12),
        clctHitPersist = cms.uint32(4),
        clctLocalShowerThresh = cms.int32(12),
        clctLocalShowerZone = cms.int32(25),
        clctMinSeparation = cms.uint32(5),
        clctNplanesHitPattern = cms.uint32(4),
        clctNplanesHitPretrig = cms.uint32(3),
        clctPidThreshPretrig = cms.uint32(2),
        clctPretriggerTriggerZone = cms.uint32(224),
        clctStartBxShift = cms.int32(0),
        clctStateMachineZone = cms.uint32(4),
        useDeadTimeZoning = cms.bool(True),
        verbosity = cms.int32(0)
    ),
    clctPhase2GEM = cms.PSet(
        clctDriftDelay = cms.uint32(2),
        clctFifoPretrig = cms.uint32(7),
        clctFifoTbins = cms.uint32(12),
        clctHitPersist = cms.uint32(4),
        clctLocalShowerThresh = cms.int32(12),
        clctLocalShowerZone = cms.int32(25),
        clctMinSeparation = cms.uint32(5),
        clctNplanesHitPattern = cms.uint32(4),
        clctNplanesHitPretrig = cms.uint32(3),
        clctPidThreshPretrig = cms.uint32(2),
        clctPretriggerTriggerZone = cms.uint32(224),
        clctStartBxShift = cms.int32(0),
        clctStateMachineZone = cms.uint32(4),
        useDeadTimeZoning = cms.bool(True),
        verbosity = cms.int32(0)
    ),
    commonParam = cms.PSet(
        disableME1a = cms.bool(False),
        disableME42 = cms.bool(False),
        enableAlctPhase2 = cms.bool(True),
        gangedME1a = cms.bool(False),
        run3 = cms.bool(True),
        runCCLUT_OTMB = cms.bool(True),
        runCCLUT_TMB = cms.bool(True),
        runME11ILT = cms.bool(True),
        runME11Up = cms.bool(True),
        runME21ILT = cms.bool(True),
        runME21Up = cms.bool(True),
        runME31Up = cms.bool(True),
        runME41Up = cms.bool(True),
        runPhase2 = cms.bool(True),
        verbosity = cms.int32(0)
    ),
    copadParamGE11 = cms.PSet(
        maxDeltaBX = cms.uint32(0),
        maxDeltaPad = cms.uint32(8),
        maxDeltaRoll = cms.uint32(1),
        verbosity = cms.uint32(0)
    ),
    copadParamGE21 = cms.PSet(
        maxDeltaBX = cms.uint32(0),
        maxDeltaPad = cms.uint32(8),
        maxDeltaRoll = cms.uint32(1),
        verbosity = cms.uint32(0)
    ),
    debugParameters = cms.bool(True),
    keepALCTPreTriggers = cms.bool(False),
    keepCLCTPreTriggers = cms.bool(True),
    keepShowers = cms.bool(True),
    mpcParam = cms.PSet(
        dropInvalidStubs = cms.bool(False),
        dropLowQualityStubs = cms.bool(False),
        maxStubs = cms.uint32(18),
        sortStubs = cms.bool(False)
    ),
    selectedChambers = cms.vstring(),
    showerParam = cms.PSet(
        anodeShower = cms.PSet(
            minLayersCentralTBin = cms.uint32(5),
            showerNumTBins = cms.uint32(1),
            showerThresholds = cms.vuint32(
                140, 140, 140, 140, 140,
                140, 7, 14, 18, 23,
                56, 58, 12, 28, 32,
                21, 55, 57, 12, 26,
                34, 25, 62, 64, 12,
                27, 31
            )
        ),
        cathodeShower = cms.PSet(
            minLayersCentralTBin = cms.uint32(5),
            peakCheck = cms.bool(False),
            showerNumTBins = cms.uint32(3),
            showerThresholds = cms.vuint32(
                100, 100, 100, 10000, 10000,
                10000, 10000, 10000, 10000, 14,
                33, 35, 10000, 10000, 10000,
                12, 31, 33, 10000, 10000,
                10000, 14, 34, 36, 10000,
                10000, 10000
            )
        ),
        source = cms.vuint32(
            3, 1, 1, 3, 1,
            3, 1, 3, 1
        )
    ),
    tmbPhase1 = cms.PSet(
        alctTrigEnable = cms.uint32(0),
        clctTrigEnable = cms.uint32(0),
        ignoreAlctCrossClct = cms.bool(True),
        matchEarliestClctOnly = cms.bool(True),
        matchTrigEnable = cms.uint32(1),
        matchTrigWindowSize = cms.uint32(7),
        mpcBlockMe1a = cms.uint32(0),
        preferredBxMatch = cms.vint32(
            0, -1, 1, -2, 2,
            -3, 3
        ),
        sortClctBx = cms.bool(True),
        tmbDropUsedClcts = cms.bool(False),
        tmbEarlyTbins = cms.int32(4),
        tmbL1aWindowSize = cms.uint32(7),
        tmbReadoutEarliest2 = cms.bool(True),
        useHighMultiplicityBits = cms.bool(False),
        verbosity = cms.int32(0)
    ),
    tmbPhase2 = cms.PSet(
        alctTrigEnable = cms.uint32(0),
        clctTrigEnable = cms.uint32(0),
        ignoreAlctCrossClct = cms.bool(True),
        matchEarliestClctOnly = cms.bool(True),
        matchTrigEnable = cms.uint32(1),
        matchTrigWindowSize = cms.uint32(7),
        mpcBlockMe1a = cms.uint32(0),
        preferredBxMatch = cms.vint32(
            0, -1, 1, -2, 2,
            -3, 3
        ),
        sortClctBx = cms.bool(True),
        tmbDropUsedClcts = cms.bool(False),
        tmbEarlyTbins = cms.int32(4),
        tmbL1aWindowSize = cms.uint32(7),
        tmbReadoutEarliest2 = cms.bool(True),
        useHighMultiplicityBits = cms.bool(False),
        verbosity = cms.int32(0)
    ),
    tmbPhase2GE11 = cms.PSet(
        BunchCrossingCSCminGEMwindow = cms.vint32(
            0, -1, 1, -2, 2,
            -3, 3
        ),
        alctTrigEnable = cms.uint32(0),
        assignGEMCSCBending = cms.bool(True),
        buildLCTfromALCTandGEM = cms.bool(True),
        buildLCTfromCLCTandGEM = cms.bool(False),
        clctTrigEnable = cms.uint32(0),
        delayGEMinOTMB = cms.uint32(0),
        dropLowQualityALCTs = cms.bool(True),
        dropLowQualityCLCTs = cms.bool(True),
        dropLowQualityCLCTs_ME1a = cms.bool(True),
        enableMatchGEMandME1a = cms.bool(True),
        enableMatchGEMandME1b = cms.bool(True),
        ignoreAlctCrossClct = cms.bool(True),
        matchCLCTpropagation = cms.bool(True),
        matchEarliestClctOnly = cms.bool(True),
        matchTrigEnable = cms.uint32(1),
        matchTrigWindowSize = cms.uint32(7),
        maxDeltaHsEven = cms.uint32(5),
        maxDeltaHsOdd = cms.uint32(10),
        maxDeltaWG = cms.uint32(7),
        mitigateSlopeByCosi = cms.bool(False),
        mpcBlockMe1a = cms.uint32(0),
        preferredBxMatch = cms.vint32(
            0, -1, 1, -2, 2,
            -3, 3
        ),
        sortClctBx = cms.bool(True),
        tmbDropUsedClcts = cms.bool(False),
        tmbEarlyTbins = cms.int32(4),
        tmbL1aWindowSize = cms.uint32(7),
        tmbReadoutEarliest2 = cms.bool(True),
        useHighMultiplicityBits = cms.bool(False),
        verbosity = cms.int32(0),
        windowBXALCTGEM = cms.uint32(3),
        windowBXCLCTGEM = cms.uint32(7)
    ),
    tmbPhase2GE21 = cms.PSet(
        BunchCrossingCSCminGEMwindow = cms.vint32(
            0, -1, 1, -2, 2,
            -3, 3
        ),
        alctTrigEnable = cms.uint32(0),
        assignGEMCSCBending = cms.bool(True),
        buildLCTfromALCTandGEM = cms.bool(True),
        buildLCTfromCLCTandGEM = cms.bool(False),
        clctTrigEnable = cms.uint32(0),
        delayGEMinOTMB = cms.uint32(0),
        dropLowQualityALCTs = cms.bool(True),
        dropLowQualityCLCTs = cms.bool(True),
        dropLowQualityCLCTs_ME1a = cms.bool(True),
        enableMatchGEMandME1a = cms.bool(True),
        enableMatchGEMandME1b = cms.bool(True),
        ignoreAlctCrossClct = cms.bool(True),
        matchCLCTpropagation = cms.bool(True),
        matchEarliestClctOnly = cms.bool(True),
        matchTrigEnable = cms.uint32(1),
        matchTrigWindowSize = cms.uint32(7),
        maxDeltaHsEven = cms.uint32(5),
        maxDeltaHsOdd = cms.uint32(10),
        maxDeltaWG = cms.uint32(7),
        mitigateSlopeByCosi = cms.bool(False),
        mpcBlockMe1a = cms.uint32(0),
        preferredBxMatch = cms.vint32(
            0, -1, 1, -2, 2,
            -3, 3
        ),
        sortClctBx = cms.bool(True),
        tmbDropUsedClcts = cms.bool(False),
        tmbEarlyTbins = cms.int32(4),
        tmbL1aWindowSize = cms.uint32(7),
        tmbReadoutEarliest2 = cms.bool(True),
        useHighMultiplicityBits = cms.bool(False),
        verbosity = cms.int32(0),
        windowBXALCTGEM = cms.uint32(3),
        windowBXCLCTGEM = cms.uint32(7)
    )
)


process.simCscTriggerPrimitiveDigisRun3 = cms.EDProducer("CSCTriggerPrimitivesProducer",
    CSCComparatorDigiProducer = cms.InputTag("simMuonCSCDigis","MuonCSCComparatorDigi"),
    CSCWireDigiProducer = cms.InputTag("simMuonCSCDigis","MuonCSCWireDigi"),
    GEMPadDigiClusterProducer = cms.InputTag("simMuonGEMPadDigiClusters"),
    MaxBX = cms.int32(11),
    MinBX = cms.int32(5),
    alctPhase1 = cms.PSet(
        alctAccelMode = cms.uint32(0),
        alctDriftDelay = cms.uint32(2),
        alctEarlyTbins = cms.int32(4),
        alctFifoPretrig = cms.uint32(10),
        alctFifoTbins = cms.uint32(16),
        alctGhostCancellationBxDepth = cms.int32(4),
        alctGhostCancellationSideQuality = cms.bool(False),
        alctHitPersist = cms.uint32(6),
        alctL1aWindowWidth = cms.uint32(7),
        alctNarrowMaskForR1 = cms.bool(False),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctNplanesHitAccelPretrig = cms.uint32(3),
        alctNplanesHitPattern = cms.uint32(4),
        alctNplanesHitPretrig = cms.uint32(3),
        alctPretrigDeadtime = cms.uint32(4),
        alctTrigMode = cms.uint32(2),
        alctUseCorrectedBx = cms.bool(False),
        verbosity = cms.int32(0)
    ),
    alctPhase2 = cms.PSet(
        alctAccelMode = cms.uint32(0),
        alctDriftDelay = cms.uint32(2),
        alctEarlyTbins = cms.int32(4),
        alctFifoPretrig = cms.uint32(10),
        alctFifoTbins = cms.uint32(16),
        alctGhostCancellationBxDepth = cms.int32(1),
        alctGhostCancellationSideQuality = cms.bool(True),
        alctHitPersist = cms.uint32(6),
        alctL1aWindowWidth = cms.uint32(7),
        alctNarrowMaskForR1 = cms.bool(True),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctNplanesHitAccelPretrig = cms.uint32(3),
        alctNplanesHitPattern = cms.uint32(4),
        alctNplanesHitPretrig = cms.uint32(3),
        alctPretrigDeadtime = cms.uint32(0),
        alctTrigMode = cms.uint32(2),
        alctUseCorrectedBx = cms.bool(True),
        verbosity = cms.int32(0)
    ),
    alctPhase2GEM = cms.PSet(
        alctAccelMode = cms.uint32(0),
        alctDriftDelay = cms.uint32(2),
        alctEarlyTbins = cms.int32(4),
        alctFifoPretrig = cms.uint32(10),
        alctFifoTbins = cms.uint32(16),
        alctGhostCancellationBxDepth = cms.int32(1),
        alctGhostCancellationSideQuality = cms.bool(True),
        alctHitPersist = cms.uint32(6),
        alctL1aWindowWidth = cms.uint32(7),
        alctNarrowMaskForR1 = cms.bool(True),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctNplanesHitAccelPretrig = cms.uint32(3),
        alctNplanesHitPattern = cms.uint32(4),
        alctNplanesHitPretrig = cms.uint32(3),
        alctPretrigDeadtime = cms.uint32(0),
        alctTrigMode = cms.uint32(2),
        alctUseCorrectedBx = cms.bool(True),
        verbosity = cms.int32(0)
    ),
    checkBadChambers = cms.bool(False),
    clctPhase1 = cms.PSet(
        clctDriftDelay = cms.uint32(2),
        clctFifoPretrig = cms.uint32(7),
        clctFifoTbins = cms.uint32(12),
        clctHitPersist = cms.uint32(4),
        clctLocalShowerThresh = cms.int32(12),
        clctLocalShowerZone = cms.int32(25),
        clctMinSeparation = cms.uint32(10),
        clctNplanesHitPattern = cms.uint32(4),
        clctNplanesHitPretrig = cms.uint32(3),
        clctPidThreshPretrig = cms.uint32(2),
        clctStartBxShift = cms.int32(0),
        useDeadTimeZoning = cms.bool(False),
        verbosity = cms.int32(0)
    ),
    clctPhase2 = cms.PSet(
        clctDriftDelay = cms.uint32(2),
        clctFifoPretrig = cms.uint32(7),
        clctFifoTbins = cms.uint32(12),
        clctHitPersist = cms.uint32(4),
        clctLocalShowerThresh = cms.int32(12),
        clctLocalShowerZone = cms.int32(25),
        clctMinSeparation = cms.uint32(5),
        clctNplanesHitPattern = cms.uint32(4),
        clctNplanesHitPretrig = cms.uint32(3),
        clctPidThreshPretrig = cms.uint32(2),
        clctPretriggerTriggerZone = cms.uint32(224),
        clctStartBxShift = cms.int32(0),
        clctStateMachineZone = cms.uint32(4),
        useDeadTimeZoning = cms.bool(True),
        verbosity = cms.int32(0)
    ),
    clctPhase2GEM = cms.PSet(
        clctDriftDelay = cms.uint32(2),
        clctFifoPretrig = cms.uint32(7),
        clctFifoTbins = cms.uint32(12),
        clctHitPersist = cms.uint32(4),
        clctLocalShowerThresh = cms.int32(12),
        clctLocalShowerZone = cms.int32(25),
        clctMinSeparation = cms.uint32(5),
        clctNplanesHitPattern = cms.uint32(4),
        clctNplanesHitPretrig = cms.uint32(3),
        clctPidThreshPretrig = cms.uint32(2),
        clctPretriggerTriggerZone = cms.uint32(224),
        clctStartBxShift = cms.int32(0),
        clctStateMachineZone = cms.uint32(4),
        useDeadTimeZoning = cms.bool(True),
        verbosity = cms.int32(0)
    ),
    commonParam = cms.PSet(
        disableME1a = cms.bool(False),
        disableME42 = cms.bool(False),
        enableAlctPhase2 = cms.bool(True),
        gangedME1a = cms.bool(False),
        run3 = cms.bool(True),
        runCCLUT_OTMB = cms.bool(True),
        runCCLUT_TMB = cms.bool(False),
        runME11ILT = cms.bool(True),
        runME11Up = cms.bool(True),
        runME21ILT = cms.bool(True),
        runME21Up = cms.bool(True),
        runME31Up = cms.bool(True),
        runME41Up = cms.bool(True),
        runPhase2 = cms.bool(True),
        verbosity = cms.int32(0)
    ),
    copadParamGE11 = cms.PSet(
        maxDeltaBX = cms.uint32(0),
        maxDeltaPad = cms.uint32(8),
        maxDeltaRoll = cms.uint32(1),
        verbosity = cms.uint32(0)
    ),
    copadParamGE21 = cms.PSet(
        maxDeltaBX = cms.uint32(0),
        maxDeltaPad = cms.uint32(8),
        maxDeltaRoll = cms.uint32(1),
        verbosity = cms.uint32(0)
    ),
    debugParameters = cms.bool(True),
    keepALCTPreTriggers = cms.bool(False),
    keepCLCTPreTriggers = cms.bool(True),
    keepShowers = cms.bool(True),
    mpcParam = cms.PSet(
        dropInvalidStubs = cms.bool(False),
        dropLowQualityStubs = cms.bool(False),
        maxStubs = cms.uint32(18),
        sortStubs = cms.bool(False)
    ),
    selectedChambers = cms.vstring(),
    showerParam = cms.PSet(
        anodeShower = cms.PSet(
            minLayersCentralTBin = cms.uint32(5),
            showerNumTBins = cms.uint32(1),
            showerThresholds = cms.vuint32(
                140, 140, 140, 140, 140,
                140, 7, 14, 18, 23,
                56, 58, 12, 28, 32,
                21, 55, 57, 12, 26,
                34, 25, 62, 64, 12,
                27, 31
            )
        ),
        cathodeShower = cms.PSet(
            minLayersCentralTBin = cms.uint32(5),
            peakCheck = cms.bool(False),
            showerNumTBins = cms.uint32(3),
            showerThresholds = cms.vuint32(
                100, 100, 100, 10000, 10000,
                10000, 10000, 10000, 10000, 14,
                33, 35, 10000, 10000, 10000,
                12, 31, 33, 10000, 10000,
                10000, 14, 34, 36, 10000,
                10000, 10000
            )
        ),
        source = cms.vuint32(
            3, 1, 1, 3, 1,
            3, 1, 3, 1
        )
    ),
    tmbPhase1 = cms.PSet(
        alctTrigEnable = cms.uint32(0),
        clctTrigEnable = cms.uint32(0),
        ignoreAlctCrossClct = cms.bool(True),
        matchEarliestClctOnly = cms.bool(True),
        matchTrigEnable = cms.uint32(1),
        matchTrigWindowSize = cms.uint32(7),
        mpcBlockMe1a = cms.uint32(0),
        preferredBxMatch = cms.vint32(
            0, -1, 1, -2, 2,
            -3, 3
        ),
        sortClctBx = cms.bool(True),
        tmbDropUsedClcts = cms.bool(False),
        tmbEarlyTbins = cms.int32(4),
        tmbL1aWindowSize = cms.uint32(7),
        tmbReadoutEarliest2 = cms.bool(True),
        useHighMultiplicityBits = cms.bool(False),
        verbosity = cms.int32(0)
    ),
    tmbPhase2 = cms.PSet(
        alctTrigEnable = cms.uint32(0),
        clctTrigEnable = cms.uint32(0),
        ignoreAlctCrossClct = cms.bool(True),
        matchEarliestClctOnly = cms.bool(True),
        matchTrigEnable = cms.uint32(1),
        matchTrigWindowSize = cms.uint32(7),
        mpcBlockMe1a = cms.uint32(0),
        preferredBxMatch = cms.vint32(
            0, -1, 1, -2, 2,
            -3, 3
        ),
        sortClctBx = cms.bool(True),
        tmbDropUsedClcts = cms.bool(False),
        tmbEarlyTbins = cms.int32(4),
        tmbL1aWindowSize = cms.uint32(7),
        tmbReadoutEarliest2 = cms.bool(True),
        useHighMultiplicityBits = cms.bool(False),
        verbosity = cms.int32(0)
    ),
    tmbPhase2GE11 = cms.PSet(
        BunchCrossingCSCminGEMwindow = cms.vint32(
            0, -1, 1, -2, 2,
            -3, 3
        ),
        alctTrigEnable = cms.uint32(0),
        assignGEMCSCBending = cms.bool(True),
        buildLCTfromALCTandGEM = cms.bool(True),
        buildLCTfromCLCTandGEM = cms.bool(False),
        clctTrigEnable = cms.uint32(0),
        delayGEMinOTMB = cms.uint32(0),
        dropLowQualityALCTs = cms.bool(True),
        dropLowQualityCLCTs = cms.bool(True),
        dropLowQualityCLCTs_ME1a = cms.bool(True),
        enableMatchGEMandME1a = cms.bool(True),
        enableMatchGEMandME1b = cms.bool(True),
        ignoreAlctCrossClct = cms.bool(True),
        matchCLCTpropagation = cms.bool(True),
        matchEarliestClctOnly = cms.bool(True),
        matchTrigEnable = cms.uint32(1),
        matchTrigWindowSize = cms.uint32(7),
        maxDeltaHsEven = cms.uint32(5),
        maxDeltaHsOdd = cms.uint32(10),
        maxDeltaWG = cms.uint32(7),
        mitigateSlopeByCosi = cms.bool(False),
        mpcBlockMe1a = cms.uint32(0),
        preferredBxMatch = cms.vint32(
            0, -1, 1, -2, 2,
            -3, 3
        ),
        sortClctBx = cms.bool(True),
        tmbDropUsedClcts = cms.bool(False),
        tmbEarlyTbins = cms.int32(4),
        tmbL1aWindowSize = cms.uint32(7),
        tmbReadoutEarliest2 = cms.bool(True),
        useHighMultiplicityBits = cms.bool(False),
        verbosity = cms.int32(0),
        windowBXALCTGEM = cms.uint32(3),
        windowBXCLCTGEM = cms.uint32(7)
    ),
    tmbPhase2GE21 = cms.PSet(
        BunchCrossingCSCminGEMwindow = cms.vint32(
            0, -1, 1, -2, 2,
            -3, 3
        ),
        alctTrigEnable = cms.uint32(0),
        assignGEMCSCBending = cms.bool(True),
        buildLCTfromALCTandGEM = cms.bool(True),
        buildLCTfromCLCTandGEM = cms.bool(False),
        clctTrigEnable = cms.uint32(0),
        delayGEMinOTMB = cms.uint32(0),
        dropLowQualityALCTs = cms.bool(True),
        dropLowQualityCLCTs = cms.bool(True),
        dropLowQualityCLCTs_ME1a = cms.bool(True),
        enableMatchGEMandME1a = cms.bool(True),
        enableMatchGEMandME1b = cms.bool(True),
        ignoreAlctCrossClct = cms.bool(True),
        matchCLCTpropagation = cms.bool(True),
        matchEarliestClctOnly = cms.bool(True),
        matchTrigEnable = cms.uint32(1),
        matchTrigWindowSize = cms.uint32(7),
        maxDeltaHsEven = cms.uint32(5),
        maxDeltaHsOdd = cms.uint32(10),
        maxDeltaWG = cms.uint32(7),
        mitigateSlopeByCosi = cms.bool(False),
        mpcBlockMe1a = cms.uint32(0),
        preferredBxMatch = cms.vint32(
            0, -1, 1, -2, 2,
            -3, 3
        ),
        sortClctBx = cms.bool(True),
        tmbDropUsedClcts = cms.bool(False),
        tmbEarlyTbins = cms.int32(4),
        tmbL1aWindowSize = cms.uint32(7),
        tmbReadoutEarliest2 = cms.bool(True),
        useHighMultiplicityBits = cms.bool(False),
        verbosity = cms.int32(0),
        windowBXALCTGEM = cms.uint32(3),
        windowBXCLCTGEM = cms.uint32(7)
    )
)


process.simCsctfDigis = cms.EDProducer("CSCTFCandidateProducer",
    CSCTrackProducer = cms.untracked.InputTag("simCsctfTrackDigis"),
    MuonSorter = cms.PSet(
        MaxBX = cms.int32(11),
        MinBX = cms.int32(5)
    )
)


process.simCsctfTrackDigis = cms.EDProducer("CSCTFTrackProducer",
    DTproducer = cms.untracked.InputTag("simDtTriggerPrimitiveDigis"),
    DtDirectProd = cms.untracked.InputTag("csctfunpacker","DT"),
    SectorProcessor = cms.PSet(
        AllowALCTonly = cms.bool(False),
        AllowCLCTonly = cms.bool(False),
        BXAdepth = cms.uint32(2),
        CoreLatency = cms.uint32(7),
        EtaMax = cms.vuint32(
            127, 127, 127, 127, 127,
            24, 24, 127
        ),
        EtaMin = cms.vuint32(
            0, 0, 0, 0, 0,
            0, 0, 0
        ),
        EtaWindows = cms.vuint32(
            4, 4, 6, 6, 6,
            6, 6
        ),
        MaxBX = cms.int32(11),
        MinBX = cms.int32(5),
        PTLUT = cms.PSet(
            LowQualityFlag = cms.untracked.uint32(4),
            PtMethod = cms.untracked.uint32(34),
            ReadPtLUT = cms.bool(False)
        ),
        PreTrigger = cms.uint32(2),
        QualityEnableME1a = cms.uint32(65535),
        QualityEnableME1b = cms.uint32(65535),
        QualityEnableME1c = cms.uint32(65535),
        QualityEnableME1d = cms.uint32(65535),
        QualityEnableME1e = cms.uint32(65535),
        QualityEnableME1f = cms.uint32(65535),
        QualityEnableME2a = cms.uint32(65535),
        QualityEnableME2b = cms.uint32(65535),
        QualityEnableME2c = cms.uint32(65535),
        QualityEnableME3a = cms.uint32(65535),
        QualityEnableME3b = cms.uint32(65535),
        QualityEnableME3c = cms.uint32(65535),
        QualityEnableME4a = cms.uint32(65535),
        QualityEnableME4b = cms.uint32(65535),
        QualityEnableME4c = cms.uint32(65535),
        SRLUT = cms.PSet(
            Binary = cms.untracked.bool(False),
            LUTPath = cms.untracked.string('./'),
            ReadLUTs = cms.untracked.bool(False),
            UseMiniLUTs = cms.untracked.bool(True)
        ),
        curvedp = cms.uint32(15),
        firmwareDD = cms.uint32(20091026),
        firmwareFA = cms.uint32(20091026),
        firmwareSP = cms.uint32(20140515),
        firmwareVM = cms.uint32(20091026),
        gangedME1a = cms.untracked.bool(False),
        initializeFromPSet = cms.bool(False),
        isCoreVerbose = cms.bool(False),
        kill_fiber = cms.uint32(0),
        maxdeta112_accp = cms.uint32(29),
        maxdeta113_accp = cms.uint32(38),
        maxdeta12_accp = cms.uint32(17),
        maxdeta13_accp = cms.uint32(27),
        maxdphi112_accp = cms.uint32(64),
        maxdphi113_accp = cms.uint32(64),
        maxdphi12_accp = cms.uint32(64),
        maxdphi13_accp = cms.uint32(64),
        mbaPhiOff = cms.uint32(0),
        mbbPhiOff = cms.uint32(1982),
        mindeta112_accp = cms.uint32(14),
        mindeta113_accp = cms.uint32(21),
        mindeta12_accp = cms.uint32(12),
        mindeta13_accp = cms.uint32(13),
        mindetap = cms.uint32(7),
        mindetap_halo = cms.uint32(8),
        mindphip = cms.uint32(180),
        mindphip_halo = cms.uint32(128),
        rescaleSinglesPhi = cms.bool(True),
        run_core = cms.bool(True),
        singlesTrackOutput = cms.uint32(1),
        straightp = cms.uint32(19),
        trigger_on_MB1a = cms.bool(False),
        trigger_on_MB1d = cms.bool(False),
        trigger_on_ME1a = cms.bool(False),
        trigger_on_ME1b = cms.bool(False),
        trigger_on_ME2 = cms.bool(False),
        trigger_on_ME3 = cms.bool(False),
        trigger_on_ME4 = cms.bool(False),
        widePhi = cms.uint32(0)
    ),
    SectorReceiverInput = cms.untracked.InputTag("simCscTriggerPrimitiveDigis","MPCSORTED"),
    isTMB07 = cms.bool(True),
    readDtDirect = cms.bool(False),
    useDT = cms.bool(True)
)


process.simDtTriggerPrimitiveDigis = cms.EDProducer("DTTrigProd",
    DTTFSectorNumbering = cms.bool(True),
    debug = cms.untracked.bool(False),
    digiTag = cms.InputTag("simMuonDTDigis"),
    lutBtic = cms.untracked.int32(31),
    lutDumpFlag = cms.untracked.bool(False)
)


process.simDttfDigis = cms.EDProducer("DTTrackFinder",
    BX_max = cms.untracked.int32(7),
    BX_min = cms.untracked.int32(-9),
    CSCStub_Source = cms.InputTag("simCsctfTrackDigis"),
    CSC_Eta_Cancellation = cms.untracked.bool(False),
    DTDigi_Source = cms.InputTag("simDtTriggerPrimitiveDigis"),
    Debug = cms.untracked.int32(0),
    EtaTrackFinder = cms.untracked.bool(True),
    Extrapolation_21 = cms.untracked.bool(False),
    Extrapolation_Filter = cms.untracked.int32(1),
    Extrapolation_nbits_Phi = cms.untracked.int32(8),
    Extrapolation_nbits_PhiB = cms.untracked.int32(8),
    Open_LUTs = cms.untracked.bool(False),
    OutOfTime_Filter = cms.untracked.bool(False),
    OutOfTime_Filter_Window = cms.untracked.int32(1),
    Overlap = cms.untracked.bool(True),
    PHI_Assignment_nbits_Phi = cms.untracked.int32(10),
    PHI_Assignment_nbits_PhiB = cms.untracked.int32(10),
    PT_Assignment_nbits_Phi = cms.untracked.int32(12),
    PT_Assignment_nbits_PhiB = cms.untracked.int32(10)
)


process.simEmtfDigis = cms.EDProducer("L1TMuonEndCapTrackProducer",
    BXWindow = cms.int32(2),
    CPPFEnable = cms.bool(False),
    CPPFInput = cms.InputTag("simCPPFDigis"),
    CSCComparatorInput = cms.InputTag("simMuonCSCDigis","MuonCSCComparatorDigi"),
    CSCEnable = cms.bool(True),
    CSCInput = cms.InputTag("simCscTriggerPrimitiveDigis","MPCSORTED"),
    CSCInputBXShift = cms.int32(-8),
    DTEnable = cms.bool(False),
    DTPhiInput = cms.InputTag("simTwinMuxDigis"),
    DTThetaInput = cms.InputTag("simDtTriggerPrimitiveDigis"),
    Era = cms.string('Run3_2021'),
    FWConfig = cms.bool(True),
    GEMEnable = cms.bool(False),
    GEMInput = cms.InputTag("simMuonGEMPadDigiClusters"),
    GEMInputBXShift = cms.int32(0),
    IRPCEnable = cms.bool(False),
    ME0Enable = cms.bool(False),
    ME0Input = cms.InputTag("me0TriggerConvertedPseudoDigis"),
    ME0InputBXShift = cms.int32(-8),
    MaxBX = cms.int32(3),
    MinBX = cms.int32(-3),
    RPCEnable = cms.bool(True),
    RPCInput = cms.InputTag("simMuonRPCDigis"),
    RPCInputBXShift = cms.int32(0),
    UseRun3CCLUT_OTMB = cms.bool(True),
    UseRun3CCLUT_TMB = cms.bool(False),
    spGCParams16 = cms.PSet(
        BugSameSectorPt0 = cms.bool(False),
        MaxRoadsPerZone = cms.int32(3),
        MaxTracks = cms.int32(3),
        UseSecondEarliest = cms.bool(True)
    ),
    spPAParams16 = cms.PSet(
        Bug9BitDPhi = cms.bool(False),
        BugGMTPhi = cms.bool(False),
        BugMode7CLCT = cms.bool(False),
        BugNegPt = cms.bool(False),
        FixMode15HighPt = cms.bool(True),
        ModeQualVer = cms.int32(2),
        PromoteMode7 = cms.bool(False),
        ProtobufFileName = cms.string('model_graph.displ.16.pb'),
        ReadPtLUTFile = cms.bool(False)
    ),
    spPCParams16 = cms.PSet(
        DuplicateTheta = cms.bool(True),
        FixME11Edges = cms.bool(True),
        FixZonePhi = cms.bool(True),
        IncludeNeighbor = cms.bool(True),
        UseNewZones = cms.bool(False),
        ZoneBoundaries = cms.vint32(0, 41, 49, 87, 127),
        ZoneOverlap = cms.int32(2)
    ),
    spPRParams16 = cms.PSet(
        PatternDefinitions = cms.vstring(
            '4,15:15,7:7,7:7,7:7',
            '3,16:16,7:7,7:6,7:6',
            '3,14:14,7:7,8:7,8:7',
            '2,18:17,7:7,7:5,7:5',
            '2,13:12,7:7,10:7,10:7',
            '1,22:19,7:7,7:0,7:0',
            '1,11:8,7:7,14:7,14:7',
            '0,30:23,7:7,7:0,7:0',
            '0,7:0,7:7,14:7,14:7'
        ),
        SymPatternDefinitions = cms.vstring(
            '4,15:15:15:15,7:7:7:7,7:7:7:7,7:7:7:7',
            '3,16:16:14:14,7:7:7:7,8:7:7:6,8:7:7:6',
            '2,18:17:13:12,7:7:7:7,10:7:7:4,10:7:7:4',
            '1,22:19:11:8,7:7:7:7,14:7:7:0,14:7:7:0',
            '0,30:23:7:0,7:7:7:7,14:7:7:0,14:7:7:0'
        ),
        UseSymmetricalPatterns = cms.bool(True)
    ),
    spTBParams16 = cms.PSet(
        BugAmbigThetaWin = cms.bool(False),
        BugME11Dupes = cms.bool(False),
        BugSt2PhDiff = cms.bool(False),
        ThetaWindow = cms.int32(8),
        ThetaWindowZone0 = cms.int32(4),
        TwoStationSameBX = cms.bool(True),
        UseSingleHits = cms.bool(False)
    ),
    verbosity = cms.untracked.int32(0)
)


process.simEmtfDigisData = cms.EDProducer("L1TMuonEndCapTrackProducer",
    BXWindow = cms.int32(2),
    CPPFEnable = cms.bool(True),
    CPPFInput = cms.InputTag("emtfStage2Digis"),
    CSCComparatorInput = cms.InputTag("muonCSCDigis","MuonCSCComparatorDigi"),
    CSCEnable = cms.bool(True),
    CSCInput = cms.InputTag("emtfStage2Digis"),
    CSCInputBXShift = cms.int32(-8),
    DTEnable = cms.bool(False),
    DTPhiInput = cms.InputTag("bmtfDigis"),
    DTThetaInput = cms.InputTag("bmtfDigis"),
    Era = cms.string('Run2_2018'),
    FWConfig = cms.bool(True),
    GEMEnable = cms.bool(False),
    GEMInput = cms.InputTag("simMuonGEMPadDigiClusters"),
    GEMInputBXShift = cms.int32(0),
    IRPCEnable = cms.bool(False),
    ME0Enable = cms.bool(False),
    ME0Input = cms.InputTag("me0TriggerConvertedPseudoDigis"),
    ME0InputBXShift = cms.int32(-8),
    MaxBX = cms.int32(3),
    MinBX = cms.int32(-3),
    RPCEnable = cms.bool(True),
    RPCInput = cms.InputTag("muonRPCDigis"),
    RPCInputBXShift = cms.int32(0),
    UseRun3CCLUT_OTMB = cms.bool(False),
    UseRun3CCLUT_TMB = cms.bool(False),
    spGCParams16 = cms.PSet(
        BugSameSectorPt0 = cms.bool(False),
        MaxRoadsPerZone = cms.int32(3),
        MaxTracks = cms.int32(3),
        UseSecondEarliest = cms.bool(True)
    ),
    spPAParams16 = cms.PSet(
        Bug9BitDPhi = cms.bool(False),
        BugGMTPhi = cms.bool(False),
        BugMode7CLCT = cms.bool(False),
        BugNegPt = cms.bool(False),
        FixMode15HighPt = cms.bool(True),
        ModeQualVer = cms.int32(2),
        PromoteMode7 = cms.bool(False),
        ProtobufFileName = cms.string('model_graph.displ.16.pb'),
        ReadPtLUTFile = cms.bool(False)
    ),
    spPCParams16 = cms.PSet(
        DuplicateTheta = cms.bool(True),
        FixME11Edges = cms.bool(True),
        FixZonePhi = cms.bool(True),
        IncludeNeighbor = cms.bool(True),
        UseNewZones = cms.bool(False),
        ZoneBoundaries = cms.vint32(0, 41, 49, 87, 127),
        ZoneOverlap = cms.int32(2)
    ),
    spPRParams16 = cms.PSet(
        PatternDefinitions = cms.vstring(
            '4,15:15,7:7,7:7,7:7',
            '3,16:16,7:7,7:6,7:6',
            '3,14:14,7:7,8:7,8:7',
            '2,18:17,7:7,7:5,7:5',
            '2,13:12,7:7,10:7,10:7',
            '1,22:19,7:7,7:0,7:0',
            '1,11:8,7:7,14:7,14:7',
            '0,30:23,7:7,7:0,7:0',
            '0,7:0,7:7,14:7,14:7'
        ),
        SymPatternDefinitions = cms.vstring(
            '4,15:15:15:15,7:7:7:7,7:7:7:7,7:7:7:7',
            '3,16:16:14:14,7:7:7:7,8:7:7:6,8:7:7:6',
            '2,18:17:13:12,7:7:7:7,10:7:7:4,10:7:7:4',
            '1,22:19:11:8,7:7:7:7,14:7:7:0,14:7:7:0',
            '0,30:23:7:0,7:7:7:7,14:7:7:0,14:7:7:0'
        ),
        UseSymmetricalPatterns = cms.bool(True)
    ),
    spTBParams16 = cms.PSet(
        BugAmbigThetaWin = cms.bool(False),
        BugME11Dupes = cms.bool(False),
        BugSt2PhDiff = cms.bool(False),
        ThetaWindow = cms.int32(8),
        ThetaWindowZone0 = cms.int32(4),
        TwoStationSameBX = cms.bool(True),
        UseSingleHits = cms.bool(False)
    ),
    verbosity = cms.untracked.int32(0)
)


process.simEmtfDigisDataPhase2 = cms.EDProducer("L1TMuonEndCapPhase2TrackProducer",
    BXWindow = cms.int32(1),
    CSCEnabled = cms.bool(True),
    CSCInput = cms.InputTag("emtfStage2Digis"),
    CSCInputBXShift = cms.int32(-8),
    DisplacedGraphPath = cms.string('L1Trigger/L1TMuonEndCapPhase2/data/displaced_model.pb'),
    GE0Enabled = cms.bool(True),
    GE0Input = cms.InputTag("ge0TriggerConvertedPseudoDigis"),
    GEMEnabled = cms.bool(True),
    GEMInput = cms.InputTag("simMuonGEMPadDigiClusters"),
    GEMInputBXShift = cms.int32(0),
    IncludeNeighborEnabled = cms.bool(True),
    ME0Enabled = cms.bool(False),
    ME0Input = cms.InputTag("me0TriggerConvertedPseudoDigis"),
    ME0InputBXShift = cms.int32(-8),
    MaxBX = cms.int32(2),
    MinBX = cms.int32(-2),
    PromptGraphPath = cms.string('L1Trigger/L1TMuonEndCapPhase2/data/prompt_model.pb'),
    RPCEnabled = cms.bool(True),
    RPCInput = cms.InputTag("muonRPCDigis"),
    RPCInputBXShift = cms.int32(0),
    ValidationDirectory = cms.string('L1Trigger/L1TMuonEndCapPhase2/data/validation'),
    Verbosity = cms.untracked.int32(3)
)


process.simEmtfDigisMC = cms.EDProducer("L1TMuonEndCapTrackProducer",
    BXWindow = cms.int32(2),
    CPPFEnable = cms.bool(False),
    CPPFInput = cms.InputTag("simCPPFDigis"),
    CSCComparatorInput = cms.InputTag("simMuonCSCDigis","MuonCSCComparatorDigi"),
    CSCEnable = cms.bool(True),
    CSCInput = cms.InputTag("simCscTriggerPrimitiveDigis","MPCSORTED"),
    CSCInputBXShift = cms.int32(-8),
    DTEnable = cms.bool(False),
    DTPhiInput = cms.InputTag("simTwinMuxDigis"),
    DTThetaInput = cms.InputTag("simDtTriggerPrimitiveDigis"),
    Era = cms.string('Run2_2018'),
    FWConfig = cms.bool(True),
    GEMEnable = cms.bool(False),
    GEMInput = cms.InputTag("simMuonGEMPadDigiClusters"),
    GEMInputBXShift = cms.int32(0),
    IRPCEnable = cms.bool(False),
    ME0Enable = cms.bool(False),
    ME0Input = cms.InputTag("me0TriggerConvertedPseudoDigis"),
    ME0InputBXShift = cms.int32(-8),
    MaxBX = cms.int32(3),
    MinBX = cms.int32(-3),
    RPCEnable = cms.bool(True),
    RPCInput = cms.InputTag("simMuonRPCDigis"),
    RPCInputBXShift = cms.int32(0),
    UseRun3CCLUT_OTMB = cms.bool(False),
    UseRun3CCLUT_TMB = cms.bool(False),
    spGCParams16 = cms.PSet(
        BugSameSectorPt0 = cms.bool(False),
        MaxRoadsPerZone = cms.int32(3),
        MaxTracks = cms.int32(3),
        UseSecondEarliest = cms.bool(True)
    ),
    spPAParams16 = cms.PSet(
        Bug9BitDPhi = cms.bool(False),
        BugGMTPhi = cms.bool(False),
        BugMode7CLCT = cms.bool(False),
        BugNegPt = cms.bool(False),
        FixMode15HighPt = cms.bool(True),
        ModeQualVer = cms.int32(2),
        PromoteMode7 = cms.bool(False),
        ProtobufFileName = cms.string('model_graph.displ.16.pb'),
        ReadPtLUTFile = cms.bool(False)
    ),
    spPCParams16 = cms.PSet(
        DuplicateTheta = cms.bool(True),
        FixME11Edges = cms.bool(True),
        FixZonePhi = cms.bool(True),
        IncludeNeighbor = cms.bool(True),
        UseNewZones = cms.bool(False),
        ZoneBoundaries = cms.vint32(0, 41, 49, 87, 127),
        ZoneOverlap = cms.int32(2)
    ),
    spPRParams16 = cms.PSet(
        PatternDefinitions = cms.vstring(
            '4,15:15,7:7,7:7,7:7',
            '3,16:16,7:7,7:6,7:6',
            '3,14:14,7:7,8:7,8:7',
            '2,18:17,7:7,7:5,7:5',
            '2,13:12,7:7,10:7,10:7',
            '1,22:19,7:7,7:0,7:0',
            '1,11:8,7:7,14:7,14:7',
            '0,30:23,7:7,7:0,7:0',
            '0,7:0,7:7,14:7,14:7'
        ),
        SymPatternDefinitions = cms.vstring(
            '4,15:15:15:15,7:7:7:7,7:7:7:7,7:7:7:7',
            '3,16:16:14:14,7:7:7:7,8:7:7:6,8:7:7:6',
            '2,18:17:13:12,7:7:7:7,10:7:7:4,10:7:7:4',
            '1,22:19:11:8,7:7:7:7,14:7:7:0,14:7:7:0',
            '0,30:23:7:0,7:7:7:7,14:7:7:0,14:7:7:0'
        ),
        UseSymmetricalPatterns = cms.bool(True)
    ),
    spTBParams16 = cms.PSet(
        BugAmbigThetaWin = cms.bool(False),
        BugME11Dupes = cms.bool(False),
        BugSt2PhDiff = cms.bool(False),
        ThetaWindow = cms.int32(8),
        ThetaWindowZone0 = cms.int32(4),
        TwoStationSameBX = cms.bool(True),
        UseSingleHits = cms.bool(False)
    ),
    verbosity = cms.untracked.int32(0)
)


process.simEmtfDigisMCPhase2 = cms.EDProducer("L1TMuonEndCapPhase2TrackProducer",
    BXWindow = cms.int32(1),
    CSCEnabled = cms.bool(True),
    CSCInput = cms.InputTag("simCscTriggerPrimitiveDigisForEMTF","MPCSORTED"),
    CSCInputBXShift = cms.int32(-8),
    DisplacedGraphPath = cms.string('L1Trigger/L1TMuonEndCapPhase2/data/displaced_model.pb'),
    GE0Enabled = cms.bool(True),
    GE0Input = cms.InputTag("ge0TriggerConvertedPseudoDigis"),
    GEMEnabled = cms.bool(True),
    GEMInput = cms.InputTag("simMuonGEMPadDigiClusters"),
    GEMInputBXShift = cms.int32(0),
    IncludeNeighborEnabled = cms.bool(True),
    ME0Enabled = cms.bool(False),
    ME0Input = cms.InputTag("me0TriggerConvertedPseudoDigis"),
    ME0InputBXShift = cms.int32(-8),
    MaxBX = cms.int32(2),
    MinBX = cms.int32(-2),
    PromptGraphPath = cms.string('L1Trigger/L1TMuonEndCapPhase2/data/prompt_model.pb'),
    RPCEnabled = cms.bool(True),
    RPCInput = cms.InputTag("rpcRecHitsForEMTF"),
    RPCInputBXShift = cms.int32(0),
    ValidationDirectory = cms.string('L1Trigger/L1TMuonEndCapPhase2/data/validation'),
    Verbosity = cms.untracked.int32(3)
)


process.simEmtfDigisPhase2 = cms.EDProducer("L1TMuonEndCapPhase2TrackProducer",
    BXWindow = cms.int32(1),
    CSCEnabled = cms.bool(True),
    CSCInput = cms.InputTag("simCscTriggerPrimitiveDigisForEMTF","MPCSORTED"),
    CSCInputBXShift = cms.int32(-8),
    DisplacedGraphPath = cms.string('L1Trigger/L1TMuonEndCapPhase2/data/displaced_model.pb'),
    GE0Enabled = cms.bool(True),
    GE0Input = cms.InputTag("ge0TriggerConvertedPseudoDigis"),
    GEMEnabled = cms.bool(True),
    GEMInput = cms.InputTag("simMuonGEMPadDigiClusters"),
    GEMInputBXShift = cms.int32(0),
    IncludeNeighborEnabled = cms.bool(True),
    ME0Enabled = cms.bool(False),
    ME0Input = cms.InputTag("me0TriggerConvertedPseudoDigis"),
    ME0InputBXShift = cms.int32(-8),
    MaxBX = cms.int32(2),
    MinBX = cms.int32(-2),
    PromptGraphPath = cms.string('L1Trigger/L1TMuonEndCapPhase2/data/prompt_model.pb'),
    RPCEnabled = cms.bool(True),
    RPCInput = cms.InputTag("rpcRecHitsForEMTF"),
    RPCInputBXShift = cms.int32(0),
    ValidationDirectory = cms.string('L1Trigger/L1TMuonEndCapPhase2/data/validation'),
    Verbosity = cms.untracked.int32(3)
)


process.simEmtfShowers = cms.EDProducer("L1TMuonEndCapShowerProducer",
    CSCShowerInput = cms.InputTag("simCscTriggerPrimitiveDigis"),
    enableOneLooseShower = cms.bool(True),
    enableOneNominalShower = cms.bool(True),
    enableOneTightShower = cms.bool(True),
    enableTwoLooseShowers = cms.bool(False),
    mightGet = cms.optional.untracked.vstring
)


process.simEmtfShowersData = cms.EDProducer("L1TMuonEndCapShowerProducer",
    CSCShowerInput = cms.InputTag("simCscTriggerPrimitiveDigis"),
    enableOneLooseShower = cms.bool(True),
    enableOneNominalShower = cms.bool(True),
    enableOneTightShower = cms.bool(True),
    enableTwoLooseShowers = cms.bool(False),
    mightGet = cms.optional.untracked.vstring
)


process.simEmtfShowersDef = cms.EDProducer("L1TMuonEndCapShowerProducer",
    CSCShowerInput = cms.InputTag("simCscTriggerPrimitiveDigis"),
    enableOneLooseShower = cms.bool(True),
    enableOneNominalShower = cms.bool(True),
    enableOneTightShower = cms.bool(True),
    enableTwoLooseShowers = cms.bool(False),
    mightGet = cms.optional.untracked.vstring
)


process.simGctDigis = cms.EDProducer("L1GctEmulator",
    conditionsLabel = cms.string(''),
    hardwareTest = cms.bool(False),
    ignoreRCTTauVetoBitsForIsolation = cms.bool(False),
    inputLabel = cms.InputTag("simRctDigis"),
    jetFinderType = cms.string('hardwareJetFinder'),
    postSamples = cms.uint32(1),
    preSamples = cms.uint32(1),
    useImprovedTauAlgorithm = cms.bool(True),
    writeInternalData = cms.bool(False)
)


process.simGmtCaloSumDigis = cms.EDProducer("L1TMuonCaloSumProducer",
    caloStage2Layer2Label = cms.InputTag("simCaloStage2Layer1Digis")
)


process.simGmtDigis = cms.EDProducer("L1MuGlobalMuonTrigger",
    BX_max = cms.int32(4),
    BX_max_readout = cms.int32(2),
    BX_min = cms.int32(-4),
    BX_min_readout = cms.int32(-2),
    CSCCandidates = cms.InputTag("simCsctfDigis","CSC"),
    DTCandidates = cms.InputTag("simDttfDigis","DT"),
    Debug = cms.untracked.int32(0),
    MipIsoData = cms.InputTag("simRctDigis"),
    RPCbCandidates = cms.InputTag("simRpcTriggerDigis","RPCb"),
    RPCfCandidates = cms.InputTag("simRpcTriggerDigis","RPCf"),
    SendMipIso = cms.untracked.bool(False),
    WriteLUTsAndRegs = cms.untracked.bool(False)
)


process.simGmtShowerDigis = cms.EDProducer("L1TMuonShowerProducer",
    bxMax = cms.int32(0),
    bxMin = cms.int32(0),
    mightGet = cms.optional.untracked.vstring,
    showerInput = cms.InputTag("simEmtfShowers","EMTF")
)


process.simGmtShowerDigisDef = cms.EDProducer("L1TMuonShowerProducer",
    bxMax = cms.int32(0),
    bxMin = cms.int32(0),
    mightGet = cms.optional.untracked.vstring,
    showerInput = cms.InputTag("simEmtfShowers","EMTF")
)


process.simGmtStage2Digis = cms.EDProducer("L1TMuonProducer",
    autoBxRange = cms.bool(True),
    autoCancelMode = cms.bool(False),
    barrelTFInput = cms.InputTag("simKBmtfDigis","BMTF"),
    bmtfCancelMode = cms.string('kftracks'),
    bxMax = cms.int32(2),
    bxMin = cms.int32(-2),
    emtfCancelMode = cms.string('coordinate'),
    forwardTFInput = cms.InputTag("simEmtfDigis","EMTF"),
    overlapTFInput = cms.InputTag("simOmtfDigis","OMTF"),
    triggerTowerInput = cms.InputTag("simGmtCaloSumDigis","TriggerTowerSums")
)


process.simGtDigis = cms.EDProducer("L1GlobalTrigger",
    AlgorithmTriggersUnmasked = cms.bool(False),
    AlgorithmTriggersUnprescaled = cms.bool(False),
    AlternativeNrBxBoardDaq = cms.uint32(0),
    AlternativeNrBxBoardEvm = cms.uint32(0),
    BstLengthBytes = cms.int32(-1),
    CastorInputTag = cms.InputTag("castorL1Digis"),
    EmulateBxInEvent = cms.int32(3),
    GctInputTag = cms.InputTag("simGctDigis"),
    GmtInputTag = cms.InputTag("simGmtDigis"),
    ProduceL1GtDaqRecord = cms.bool(True),
    ProduceL1GtEvmRecord = cms.bool(True),
    ProduceL1GtObjectMapRecord = cms.bool(True),
    ReadTechnicalTriggerRecords = cms.bool(True),
    RecordLength = cms.vint32(3, 0),
    TechnicalTriggersInputTags = cms.VInputTag("simBscDigis", "simRpcTechTrigDigis", "simHcalTechTrigDigis", "simCastorTechTrigDigis"),
    TechnicalTriggersUnmasked = cms.bool(False),
    TechnicalTriggersUnprescaled = cms.bool(False),
    TechnicalTriggersVetoUnmasked = cms.bool(False),
    WritePsbL1GtDaqRecord = cms.bool(True)
)


process.simGtExtFakeStage2Digis = cms.EDProducer("L1TExtCondProducer",
    bxFirst = cms.int32(-2),
    bxLast = cms.int32(2),
    setBptxAND = cms.bool(True),
    setBptxMinus = cms.bool(True),
    setBptxOR = cms.bool(True),
    setBptxPlus = cms.bool(True),
    tcdsRecordLabel = cms.InputTag("")
)


process.simGtStage2Digis = cms.EDProducer("L1TGlobalProducer",
    AlgoBlkInputTag = cms.InputTag("gtStage2Digis"),
    AlgorithmTriggersUnmasked = cms.bool(True),
    AlgorithmTriggersUnprescaled = cms.bool(True),
    CICADAInputTag = cms.InputTag("simCaloStage2Layer1Summary","CICADAScore"),
    EGammaInputTag = cms.InputTag("simCaloStage2Digis"),
    EtSumInputTag = cms.InputTag("simCaloStage2Digis"),
    EtSumZdcInputTag = cms.InputTag("l1tZDCEtSums"),
    ExtInputTag = cms.InputTag("simGtExtFakeStage2Digis"),
    GetPrescaleColumnFromData = cms.bool(False),
    JetInputTag = cms.InputTag("simCaloStage2Digis"),
    MuonInputTag = cms.InputTag("simGmtStage2Digis"),
    MuonShowerInputTag = cms.InputTag("simGmtShowerDigis"),
    RequireMenuToMatchAlgoBlkInput = cms.bool(False),
    TauInputTag = cms.InputTag("simCaloStage2Digis"),
    useMuonShowers = cms.bool(True)
)


process.simHcalTechTrigDigis = cms.EDProducer("HcalTTPTriggerRecord",
    ttpBitNames = cms.vstring(
        'L1Tech_HCAL_HF_MM_or_PP_or_PM.v0',
        'L1Tech_HCAL_HF_coincidence_PM.v1',
        'L1Tech_HCAL_HF_MMP_or_MPP.v0'
    ),
    ttpBits = cms.vuint32(8, 9, 10),
    ttpDigiCollection = cms.InputTag("simHcalTTPDigis")
)


process.simHcalTriggerPrimitiveDigis = cms.EDProducer("HcalTrigPrimDigiProducer",
    FG_HF_thresholds = cms.vuint32(17, 255),
    FG_threshold = cms.uint32(12),
    FrontEndFormatError = cms.bool(False),
    InputTagFEDRaw = cms.InputTag("rawDataCollector"),
    LSConfig = cms.untracked.PSet(
        HcalFeatureHFEMBit = cms.bool(False),
        Long_Short_Offset = cms.double(10.1),
        Long_vrs_Short_Slope = cms.double(100.2),
        Min_Long_Energy = cms.double(10),
        Min_Short_Energy = cms.double(10)
    ),
    MinSignalThreshold = cms.uint32(0),
    PMTNoiseThreshold = cms.uint32(0),
    PeakFinderAlgorithm = cms.int32(2),
    RunZS = cms.bool(False),
    ZS_threshold = cms.uint32(1),
    applySaturationFix = cms.bool(True),
    codedVetoThresholds = cms.PSet(
        ieta1 = cms.int32(0),
        ieta10 = cms.int32(0),
        ieta11 = cms.int32(0),
        ieta12 = cms.int32(0),
        ieta13 = cms.int32(0),
        ieta14 = cms.int32(0),
        ieta15 = cms.int32(0),
        ieta16 = cms.int32(0),
        ieta17 = cms.int32(0),
        ieta18 = cms.int32(0),
        ieta19 = cms.int32(0),
        ieta2 = cms.int32(0),
        ieta20 = cms.int32(0),
        ieta21 = cms.int32(0),
        ieta22 = cms.int32(0),
        ieta23 = cms.int32(0),
        ieta24 = cms.int32(0),
        ieta25 = cms.int32(0),
        ieta26 = cms.int32(0),
        ieta27 = cms.int32(0),
        ieta28 = cms.int32(0),
        ieta3 = cms.int32(0),
        ieta4 = cms.int32(0),
        ieta5 = cms.int32(0),
        ieta6 = cms.int32(0),
        ieta7 = cms.int32(0),
        ieta8 = cms.int32(0),
        ieta9 = cms.int32(0)
    ),
    inputLabel = cms.VInputTag(cms.InputTag("simHcalUnsuppressedDigis"), cms.InputTag("simHcalUnsuppressedDigis")),
    inputUpgradeLabel = cms.VInputTag(cms.InputTag("simHcalUnsuppressedDigis","HBHEQIE11DigiCollection"), cms.InputTag("simHcalUnsuppressedDigis","HFQIE10DigiCollection")),
    latency = cms.int32(1),
    numberOfFilterPresamplesHBQIE11 = cms.int32(0),
    numberOfFilterPresamplesHEQIE11 = cms.int32(0),
    numberOfPresamples = cms.int32(2),
    numberOfPresamplesHF = cms.int32(1),
    numberOfSamples = cms.int32(4),
    numberOfSamplesHF = cms.int32(2),
    overrideDBvetoThresholdsHB = cms.bool(False),
    overrideDBvetoThresholdsHE = cms.bool(False),
    overrideDBweightsAndFilterHB = cms.bool(False),
    overrideDBweightsAndFilterHE = cms.bool(False),
    peakFilter = cms.bool(True),
    tpScales = cms.PSet(
        HBHE = cms.PSet(
            LSBQIE11 = cms.double(0.0625),
            LSBQIE11Overlap = cms.double(0.0625),
            LSBQIE8 = cms.double(0.125)
        ),
        HF = cms.PSet(
            NCTShift = cms.int32(2),
            RCTShift = cms.int32(3)
        )
    ),
    upgradeHB = cms.bool(True),
    upgradeHE = cms.bool(True),
    upgradeHF = cms.bool(True),
    useTDCInMinBiasBits = cms.bool(False),
    weights = cms.vdouble(1.0, 1.0),
    weightsQIE11 = cms.PSet(
        ieta1 = cms.vint32(255, 255),
        ieta10 = cms.vint32(255, 255),
        ieta11 = cms.vint32(255, 255),
        ieta12 = cms.vint32(255, 255),
        ieta13 = cms.vint32(255, 255),
        ieta14 = cms.vint32(255, 255),
        ieta15 = cms.vint32(255, 255),
        ieta16 = cms.vint32(255, 255),
        ieta17 = cms.vint32(255, 255),
        ieta18 = cms.vint32(255, 255),
        ieta19 = cms.vint32(255, 255),
        ieta2 = cms.vint32(255, 255),
        ieta20 = cms.vint32(255, 255),
        ieta21 = cms.vint32(255, 255),
        ieta22 = cms.vint32(255, 255),
        ieta23 = cms.vint32(255, 255),
        ieta24 = cms.vint32(255, 255),
        ieta25 = cms.vint32(255, 255),
        ieta26 = cms.vint32(255, 255),
        ieta27 = cms.vint32(255, 255),
        ieta28 = cms.vint32(255, 255),
        ieta3 = cms.vint32(255, 255),
        ieta4 = cms.vint32(255, 255),
        ieta5 = cms.vint32(255, 255),
        ieta6 = cms.vint32(255, 255),
        ieta7 = cms.vint32(255, 255),
        ieta8 = cms.vint32(255, 255),
        ieta9 = cms.vint32(255, 255)
    )
)


process.simKBmtfDigis = cms.EDProducer("L1TMuonBarrelKalmanTrackProducer",
    algoSettings = cms.PSet(
        aPhi = cms.vdouble(1.942, 0.01511, 0.01476, 0.009799),
        aPhiB = cms.vdouble(-1.508, -0.1237, -0.1496, -0.1333),
        aPhiBNLO = cms.vdouble(0.000331, 0, 0, 0),
        bPhi = cms.vdouble(-1, 0.18245, 0.20898, 0.17286),
        bPhiB = cms.vdouble(-1, 1.18245, 1.20898, 1.17286),
        chiSquare = cms.vdouble(0.0, 0.109375, 0.234375, 0.359375),
        chiSquareCut = cms.vint32(126, 126, 126, 126, 126),
        chiSquareCutCurvMax = cms.vint32(2500, 2500, 2500, 2500, 2500),
        chiSquareCutPattern = cms.vint32(7, 11, 13, 14, 15),
        chiSquareCutTight = cms.vint32(
            40, 126, 60, 126, 126,
            126
        ),
        combos1 = cms.vint32(),
        combos2 = cms.vint32(3),
        combos3 = cms.vint32(5, 6, 7),
        combos4 = cms.vint32(
            9, 10, 11, 12, 13,
            14, 15
        ),
        eLoss = cms.vdouble(0.000765, 0, 0, 0),
        etaLUT0 = cms.vdouble(8.946, 7.508, 6.279, 6.399),
        etaLUT1 = cms.vdouble(0.159, 0.116, 0.088, 0.128),
        initialK = cms.vdouble(-1.196, -1.581, -2.133, -2.263),
        initialK2 = cms.vdouble(-0.000326, -0.0007165, 0.002305, -0.00563),
        lutFile = cms.string('L1Trigger/L1TMuon/data/bmtf_luts/kalmanLUTs_v302.root'),
        mScatteringPhi = cms.vdouble(0.00249, 5.47e-05, 3.49e-05, 1.37e-05),
        mScatteringPhiB = cms.vdouble(0.00722, 0.003461, 0.004447, 0.00412),
        phiAt2 = cms.double(0.15918),
        pointResolutionPhi = cms.double(1.0),
        pointResolutionPhiB = cms.double(500.0),
        pointResolutionPhiBH = cms.vdouble(151.0, 173.0, 155.0, 153.0),
        pointResolutionPhiBL = cms.vdouble(17866.0, 19306.0, 23984.0, 23746.0),
        pointResolutionVertex = cms.double(1.0),
        trackComp = cms.vdouble(1.75, 1.25, 0.625, 0.25),
        trackCompCut = cms.vint32(
            15, 15, 15, 15, 15,
            15
        ),
        trackCompCutCurvMax = cms.vint32(
            34, 34, 34, 34, 34,
            34
        ),
        trackCompCutPattern = cms.vint32(
            3, 5, 6, 9, 10,
            12
        ),
        trackCompErr1 = cms.vdouble(2.0, 2.0, 2.0, 2.0),
        trackCompErr2 = cms.vdouble(0.21875, 0.21875, 0.21875, 0.3125),
        useNewQualityCalculation = cms.bool(False),
        useOfflineAlgo = cms.bool(False),
        verbose = cms.bool(False)
    ),
    bx = cms.vint32(-2, -1, 0, 1, 2),
    src = cms.InputTag("simKBmtfStubs"),
    trackFinderSettings = cms.PSet(
        sectorSettings = cms.PSet(
            regionSettings = cms.PSet(
                verbose = cms.int32(0)
            ),
            verbose = cms.int32(0),
            wheelsToProcess = cms.vint32(-2, -1, 0, 1, 2)
        ),
        sectorsToProcess = cms.vint32(
            0, 1, 2, 3, 4,
            5, 6, 7, 8, 9,
            10, 11
        ),
        verbose = cms.int32(0)
    )
)


process.simKBmtfStubs = cms.EDProducer("L1TMuonBarrelKalmanStubProducer",
    cotTheta_1 = cms.vint32(
        105, 101, 97, 93, 88,
        84, 79, 69, 64, 58,
        52, 46, 40, 34, 21,
        14, 7, 0, -7, -14,
        -21, -34, -40, -46, -52,
        -58, -64, -69, -79, -84,
        -88, -93, -97, -101, -105
    ),
    cotTheta_2 = cms.vint32(
        93, 89, 85, 81, 77,
        73, 68, 60, 55, 50,
        45, 40, 34, 29, 17,
        12, 6, 0, -6, -12,
        -17, -29, -34, -40, -45,
        -50, -55, -60, -68, -73,
        -77, -81, -85, -89, -93
    ),
    cotTheta_3 = cms.vint32(
        81, 77, 74, 70, 66,
        62, 58, 51, 46, 42,
        38, 33, 29, 24, 15,
        10, 5, 0, -5, -10,
        -15, -24, -29, -33, -38,
        -42, -46, -51, -58, -62,
        -66, -70, -74, -77, -81
    ),
    disableMasks = cms.bool(False),
    maxBX = cms.int32(2),
    minBX = cms.int32(-2),
    minPhiQuality = cms.int32(0),
    minThetaQuality = cms.int32(0),
    srcPhi = cms.InputTag("simTwinMuxDigis"),
    srcTheta = cms.InputTag("simDtTriggerPrimitiveDigis"),
    verbose = cms.int32(0)
)


process.simMuonGEMPadDigiClusters = cms.EDProducer("GEMPadDigiClusterProducer",
    InputCollection = cms.InputTag("simMuonGEMPadDigis"),
    maxClusterSize = cms.uint32(8),
    maxClustersOHGE11 = cms.uint32(8),
    maxClustersOHGE21 = cms.uint32(8),
    maxClustersPartitionGE11 = cms.uint32(4),
    maxClustersPartitionGE21 = cms.uint32(4),
    mightGet = cms.optional.untracked.vstring,
    nOHGE11 = cms.uint32(1),
    nOHGE21 = cms.uint32(4),
    nPartitionsGE11 = cms.uint32(4),
    nPartitionsGE21 = cms.uint32(4),
    sendOverflowClusters = cms.bool(False)
)


process.simMuonGEMPadDigiClustersDef = cms.EDProducer("GEMPadDigiClusterProducer",
    InputCollection = cms.InputTag("simMuonGEMPadDigis"),
    maxClusterSize = cms.uint32(8),
    maxClustersOHGE11 = cms.uint32(8),
    maxClustersOHGE21 = cms.uint32(8),
    maxClustersPartitionGE11 = cms.uint32(4),
    maxClustersPartitionGE21 = cms.uint32(4),
    mightGet = cms.optional.untracked.vstring,
    nOHGE11 = cms.uint32(1),
    nOHGE21 = cms.uint32(4),
    nPartitionsGE11 = cms.uint32(4),
    nPartitionsGE21 = cms.uint32(4),
    sendOverflowClusters = cms.bool(False)
)


process.simMuonGEMPadDigis = cms.EDProducer("GEMPadDigiProducer",
    InputCollection = cms.InputTag("simMuonGEMDigis"),
    mightGet = cms.optional.untracked.vstring
)


process.simMuonGEMPadDigisDef = cms.EDProducer("GEMPadDigiProducer",
    InputCollection = cms.InputTag("simMuonGEMDigis"),
    mightGet = cms.optional.untracked.vstring
)


process.simMuonME0PadDigis = cms.EDProducer("ME0PadDigiProducer",
    InputCollection = cms.InputTag("simMuonME0Digis")
)


process.simMuonME0PseudoReDigis = cms.EDProducer("ME0ReDigiProducer",
    inputCollection = cms.string('simMuonME0PseudoDigis'),
    layerReadout = cms.vint32(
        1, 1, 1, 1, 1,
        1
    ),
    maxBXReadout = cms.int32(1),
    mergeDigis = cms.bool(True),
    minBXReadout = cms.int32(-1),
    neutronAcceptance = cms.double(2.0),
    numberOfPartitions = cms.uint32(8),
    numberOfStrips = cms.uint32(384),
    timeResolution = cms.double(5),
    useCusGeoFor1PartGeo = cms.bool(True),
    usePads = cms.bool(False)
)


process.simMuonME0PseudoReDigisCoarse = cms.EDProducer("ME0ReDigiProducer",
    inputCollection = cms.string('simMuonME0PseudoDigis'),
    layerReadout = cms.vint32(
        1, 1, 1, 1, 1,
        1
    ),
    maxBXReadout = cms.int32(1),
    mergeDigis = cms.bool(True),
    minBXReadout = cms.int32(-1),
    neutronAcceptance = cms.double(2.0),
    numberOfPartitions = cms.uint32(8),
    numberOfStrips = cms.uint32(384),
    timeResolution = cms.double(5),
    useCusGeoFor1PartGeo = cms.bool(True),
    usePads = cms.bool(True)
)


process.simOmtfDigis = cms.EDProducer("L1TMuonOverlapPhase1TrackProducer",
    XMLDumpFileName = cms.string('TestEvents.xml'),
    bxMax = cms.int32(0),
    bxMin = cms.int32(0),
    dropCSCPrimitives = cms.bool(False),
    dropDTPrimitives = cms.bool(False),
    dropRPCPrimitives = cms.bool(False),
    dumpDetailedResultToXML = cms.bool(False),
    dumpGPToXML = cms.bool(False),
    dumpResultToXML = cms.bool(False),
    eventsXMLFiles = cms.vstring('TestEvents.xml'),
    extrapolFactorsFilename = cms.FileInPath('L1Trigger/L1TMuon/data/omtf_config/ExtrapolationFactors_simple.xml'),
    processorType = cms.string('OMTFProcessor'),
    readEventsFromXML = cms.bool(False),
    srcCSC = cms.InputTag("simCscTriggerPrimitiveDigis","MPCSORTED"),
    srcDTPh = cms.InputTag("simDtTriggerPrimitiveDigis"),
    srcDTTh = cms.InputTag("simDtTriggerPrimitiveDigis"),
    srcRPC = cms.InputTag("simMuonRPCDigis")
)


process.simOmtfPhase2Digis = cms.EDProducer("L1TMuonOverlapPhase2TrackProducer",
    XMLDumpFileName = cms.string('TestEvents.xml'),
    bxMax = cms.int32(0),
    bxMin = cms.int32(0),
    configXMLFile = cms.FileInPath('L1Trigger/L1TMuon/data/omtf_config/hwToLogicLayer_0x0209.xml'),
    dropCSCPrimitives = cms.bool(False),
    dropDTPrimitives = cms.bool(True),
    dropRPCPrimitives = cms.bool(False),
    dtPhiBUnitsRad = cms.int32(1024),
    dtRefHitMinQuality = cms.int32(4),
    dumpDetailedResultToXML = cms.bool(False),
    dumpGPToXML = cms.bool(False),
    dumpResultToXML = cms.bool(False),
    eventsXMLFiles = cms.vstring('TestEvents.xml'),
    extrapolFactorsFilename = cms.FileInPath('L1Trigger/L1TMuon/data/omtf_config/ExtrapolationFactors_ExtraplMB1nadMB2DTQual_ValueP1Scale_t20.xml'),
    ghostBusterType = cms.string('byRefLayer'),
    goldenPatternResultFinalizeFunction = cms.int32(10),
    minDtPhiBQuality = cms.int32(4),
    minDtPhiQuality = cms.int32(2),
    noHitValueInPdf = cms.bool(True),
    patternsXMLFile = cms.FileInPath('L1Trigger/L1TMuon/data/omtf_config/Patterns_ExtraplMB1nadMB2DTQualAndEtaFixedP_ValueP1Scale_t20_v1_SingleMu_iPt_and_OneOverPt_classProb17_recalib2_minDP0.xml'),
    processorType = cms.string('OMTFProcessor'),
    readEventsFromXML = cms.bool(False),
    sorterType = cms.string('byLLH'),
    srcCSC = cms.InputTag("simCscTriggerPrimitiveDigis","MPCSORTED"),
    srcDTPh = cms.InputTag("simDtTriggerPrimitiveDigis"),
    srcDTPhPhase2 = cms.InputTag("dtTriggerPhase2PrimitiveDigis"),
    srcDTTh = cms.InputTag("simDtTriggerPrimitiveDigis"),
    srcDTThPhase2 = cms.InputTag("dtTriggerPhase2PrimitiveDigis"),
    srcRPC = cms.InputTag("simMuonRPCDigis"),
    stubEtaEncoding = cms.string('valueP1Scale'),
    useEndcapStubsRInExtr = cms.bool(True),
    useFloatingPointExtrapolation = cms.bool(False),
    usePhase2DTPrimitives = cms.bool(True),
    usePhiBExtrapolationFromMB1 = cms.bool(True),
    usePhiBExtrapolationFromMB2 = cms.bool(True),
    useStubQualInExtr = cms.bool(True)
)


process.simRctDigis = cms.EDProducer("L1RCTProducer",
    BunchCrossings = cms.vint32(0),
    conditionsLabel = cms.string(''),
    ecalDigis = cms.VInputTag("simEcalTriggerPrimitiveDigis"),
    getFedsFromOmds = cms.bool(False),
    hcalDigis = cms.VInputTag("simHcalTriggerPrimitiveDigis"),
    queryDelayInLS = cms.uint32(10),
    queryIntervalInLS = cms.uint32(100),
    useEcal = cms.bool(True),
    useHcal = cms.bool(True)
)


process.simRctUpgradeFormatDigis = cms.EDProducer("L1TCaloRCTToUpgradeConverter",
    emTag = cms.InputTag("simRctDigis"),
    regionTag = cms.InputTag("simRctDigis")
)


process.simRpcTechTrigDigis = cms.EDProducer("RPCTechnicalTrigger",
    BitNames = cms.vstring(
        'L1Tech_RPC_TTU_barrel_Cosmics/v0',
        'L1Tech_RPC_TTU_pointing_Cosmics/v0',
        'L1Tech_RPC_TTU_RBplus2_Cosmics/v0',
        'L1Tech_RPC_TTU_RBplus1_Cosmics/v0',
        'L1Tech_RPC_TTU_RB0_Cosmics/v0',
        'L1Tech_RPC_TTU_RBminus1_Cosmics/v0',
        'L1Tech_RPC_TTU_RBminus2_Cosmics/v0'
    ),
    BitNumbers = cms.vuint32(
        24, 25, 26, 27, 28,
        29, 30
    ),
    ConfigFile = cms.string('hardware-pseudoconfig.txt'),
    RPCDigiLabel = cms.InputTag("simMuonRPCDigis"),
    RPCSimLinkInstance = cms.InputTag("RPCDigiSimLink"),
    UseEventSetup = cms.untracked.int32(0),
    UseRPCSimLink = cms.untracked.int32(0),
    Verbosity = cms.untracked.int32(0)
)


process.simRpcTriggerDigis = cms.EDProducer("RPCTrigger",
    RPCTriggerDebug = cms.untracked.int32(0),
    label = cms.string('simMuonRPCDigis')
)


process.simTwinMuxDigis = cms.EDProducer("L1TTwinMuxProducer",
    DTDigi_Source = cms.InputTag("simDtTriggerPrimitiveDigis"),
    DTThetaDigi_Source = cms.InputTag("simDtTriggerPrimitiveDigis"),
    RPC_Source = cms.InputTag("simMuonRPCDigis")
)


process.DoubleEGEle3724 = cms.EDFilter("L1GTDoubleObjectCond",
    collection1 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 1.479),
        regionsMinPt = cms.vdouble(29, 28),
        regionsQualityFlags = cms.vuint32(2, 4),
        tag = cms.InputTag("l1tGTProducer","CL2Photons")
    ),
    collection2 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 1.479),
        regionsMinPt = cms.vdouble(18, 18),
        regionsQualityFlags = cms.vuint32(2, 4),
        tag = cms.InputTag("l1tGTProducer","CL2Photons")
    ),
    cos_phi_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            487, 487, 487, 487, 487,
            487, 487, 487, 487, 487,
            487, 486, 486, 486, 486,
            486, 486, 486, 485, 485,
            485, 485, 485, 485, 484,
            484, 484, 484, 484, 483,
            483, 483, 483, 483, 482,
            482, 482, 482, 481, 481,
            481, 481, 480, 480, 480,
            480, 479, 479, 479, 478,
            478, 478, 478, 477, 477,
            477, 476, 476, 476, 475,
            475, 475, 474, 474, 474,
            473, 473, 472, 472, 472,
            471, 471, 471, 470, 470,
            469, 469, 468, 468, 468,
            467, 467, 466, 466, 465,
            465, 465, 464, 464, 463,
            463, 462, 462, 461, 461,
            460, 460, 459, 459, 458,
            458, 457, 457, 456, 456,
            455, 454, 454, 453, 453,
            452, 452, 451, 451, 450,
            449, 449, 448, 448, 447,
            446, 446, 445, 445, 444,
            443, 443, 442, 441, 441,
            440, 440, 439, 438, 438,
            437, 436, 436, 435, 434,
            434, 433, 432, 431, 431,
            430, 429, 429, 428, 427,
            426, 426, 425, 424, 423,
            423, 422, 421, 420, 420,
            419, 418, 417, 417, 416,
            415, 414, 413, 413, 412,
            411, 410, 409, 409, 408,
            407, 406, 405, 405, 404,
            403, 402, 401, 400, 399,
            399, 398, 397, 396, 395,
            394, 393, 392, 392, 391,
            390, 389, 388, 387, 386,
            385, 384, 383, 382, 381,
            381, 380, 379, 378, 377,
            376, 375, 374, 373, 372,
            371, 370, 369, 368, 367,
            366, 365, 364, 363, 362,
            361, 360, 359, 358, 357,
            356, 355, 354, 353, 352,
            351, 350, 349, 348, 347,
            346, 345, 343, 342, 341,
            340, 339, 338, 337, 336,
            335, 334, 333, 332, 330,
            329, 328, 327, 326, 325,
            324, 323, 322, 320, 319,
            318, 317, 316, 315, 314,
            312, 311, 310, 309, 308,
            307, 306, 304, 303, 302,
            301, 300, 298, 297, 296,
            295, 294, 293, 291, 290,
            289, 288, 286, 285, 284,
            283, 282, 280, 279, 278,
            277, 275, 274, 273, 272,
            270, 269, 268, 267, 265,
            264, 263, 262, 260, 259,
            258, 257, 255, 254, 253,
            252, 250, 249, 248, 246,
            245, 244, 242, 241, 240,
            239, 237, 236, 235, 233,
            232, 231, 229, 228, 227,
            225, 224, 223, 221, 220,
            219, 217, 216, 215, 213,
            212, 211, 209, 208, 207,
            205, 204, 203, 201, 200,
            198, 197, 196, 194, 193,
            192, 190, 189, 187, 186,
            185, 183, 182, 181, 179,
            178, 176, 175, 174, 172,
            171, 169, 168, 167, 165,
            164, 162, 161, 159, 158,
            157, 155, 154, 152, 151,
            150, 148, 147, 145, 144,
            142, 141, 140, 138, 137,
            135, 134, 132, 131, 129,
            128, 127, 125, 124, 122,
            121, 119, 118, 116, 115,
            113, 112, 111, 109, 108,
            106, 105, 103, 102, 100,
            99, 97, 96, 94, 93,
            92, 90, 89, 87, 86,
            84, 83, 81, 80, 78,
            77, 75, 74, 72, 71,
            69, 68, 66, 65, 63,
            62, 60, 59, 58, 56,
            55, 53, 52, 50, 49,
            47, 46, 44, 43, 41,
            40, 38, 37, 35, 34,
            32, 31, 29, 28, 26,
            25, 23, 22, 20, 19,
            17, 16, 14, 13, 11,
            10, 8, 7, 5, 4,
            2, 1, -1, -2, -4,
            -5, -7, -8, -10, -11,
            -13, -14, -16, -17, -19,
            -20, -22, -23, -25, -26,
            -28, -29, -31, -32, -34,
            -35, -37, -38, -40, -41,
            -43, -44, -46, -47, -49,
            -50, -52, -53, -55, -56,
            -58, -59, -60, -62, -63,
            -65, -66, -68, -69, -71,
            -72, -74, -75, -77, -78,
            -80, -81, -83, -84, -86,
            -87, -89, -90, -92, -93,
            -94, -96, -97, -99, -100,
            -102, -103, -105, -106, -108,
            -109, -111, -112, -113, -115,
            -116, -118, -119, -121, -122,
            -124, -125, -127, -128, -129,
            -131, -132, -134, -135, -137,
            -138, -140, -141, -142, -144,
            -145, -147, -148, -150, -151,
            -152, -154, -155, -157, -158,
            -159, -161, -162, -164, -165,
            -167, -168, -169, -171, -172,
            -174, -175, -176, -178, -179,
            -181, -182, -183, -185, -186,
            -187, -189, -190, -192, -193,
            -194, -196, -197, -198, -200,
            -201, -203, -204, -205, -207,
            -208, -209, -211, -212, -213,
            -215, -216, -217, -219, -220,
            -221, -223, -224, -225, -227,
            -228, -229, -231, -232, -233,
            -235, -236, -237, -239, -240,
            -241, -242, -244, -245, -246,
            -248, -249, -250, -252, -253,
            -254, -255, -257, -258, -259,
            -260, -262, -263, -264, -265,
            -267, -268, -269, -270, -272,
            -273, -274, -275, -277, -278,
            -279, -280, -282, -283, -284,
            -285, -286, -288, -289, -290,
            -291, -293, -294, -295, -296,
            -297, -298, -300, -301, -302,
            -303, -304, -306, -307, -308,
            -309, -310, -311, -312, -314,
            -315, -316, -317, -318, -319,
            -320, -322, -323, -324, -325,
            -326, -327, -328, -329, -330,
            -332, -333, -334, -335, -336,
            -337, -338, -339, -340, -341,
            -342, -343, -345, -346, -347,
            -348, -349, -350, -351, -352,
            -353, -354, -355, -356, -357,
            -358, -359, -360, -361, -362,
            -363, -364, -365, -366, -367,
            -368, -369, -370, -371, -372,
            -373, -374, -375, -376, -377,
            -378, -379, -380, -381, -381,
            -382, -383, -384, -385, -386,
            -387, -388, -389, -390, -391,
            -392, -392, -393, -394, -395,
            -396, -397, -398, -399, -399,
            -400, -401, -402, -403, -404,
            -405, -405, -406, -407, -408,
            -409, -409, -410, -411, -412,
            -413, -413, -414, -415, -416,
            -417, -417, -418, -419, -420,
            -420, -421, -422, -423, -423,
            -424, -425, -426, -426, -427,
            -428, -429, -429, -430, -431,
            -431, -432, -433, -434, -434,
            -435, -436, -436, -437, -438,
            -438, -439, -440, -440, -441,
            -441, -442, -443, -443, -444,
            -445, -445, -446, -446, -447,
            -448, -448, -449, -449, -450,
            -451, -451, -452, -452, -453,
            -453, -454, -454, -455, -456,
            -456, -457, -457, -458, -458,
            -459, -459, -460, -460, -461,
            -461, -462, -462, -463, -463,
            -464, -464, -465, -465, -465,
            -466, -466, -467, -467, -468,
            -468, -468, -469, -469, -470,
            -470, -471, -471, -471, -472,
            -472, -472, -473, -473, -474,
            -474, -474, -475, -475, -475,
            -476, -476, -476, -477, -477,
            -477, -478, -478, -478, -478,
            -479, -479, -479, -480, -480,
            -480, -480, -481, -481, -481,
            -481, -482, -482, -482, -482,
            -483, -483, -483, -483, -483,
            -484, -484, -484, -484, -484,
            -485, -485, -485, -485, -485,
            -485, -486, -486, -486, -486,
            -486, -486, -486, -487, -487,
            -487, -487, -487, -487, -487,
            -487, -487, -487, -487, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488
         ) ),
        max_error = cms.double(0.0025338281044886835),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            489, 489, 489, 489, 489,
            489, 489, 489, 489, 489,
            489, 490, 490, 490, 490,
            490, 490, 490, 491, 491,
            491, 491, 491, 491, 492,
            492, 492, 492, 492, 493,
            493, 493, 493, 493, 494,
            494, 494, 494, 495, 495,
            495, 495, 496, 496, 496,
            496, 497, 497, 497, 498,
            498, 498, 499, 499, 499,
            499, 500, 500, 500, 501,
            501, 502, 502, 502, 503,
            503, 503, 504, 504, 504,
            505, 505, 506, 506, 507,
            507, 507, 508, 508, 509,
            509, 510, 510, 510, 511,
            511, 512, 512, 513, 513,
            514, 514, 515, 515, 516,
            516, 517, 517, 518, 518,
            519, 520, 520, 521, 521,
            522, 522, 523, 523, 524,
            525, 525, 526, 526, 527,
            528, 528, 529, 530, 530,
            531, 531, 532, 533, 533,
            534, 535, 535, 536, 537,
            537, 538, 539, 540, 540,
            541, 542, 542, 543, 544,
            545, 545, 546, 547, 548,
            548, 549, 550, 551, 551,
            552, 553, 554, 555, 555,
            556, 557, 558, 559, 560,
            560, 561, 562, 563, 564,
            565, 566, 567, 567, 568,
            569, 570, 571, 572, 573,
            574, 575, 576, 577, 577,
            578, 579, 580, 581, 582,
            583, 584, 585, 586, 587,
            588, 589, 590, 591, 592,
            593, 594, 595, 596, 598,
            599, 600, 601, 602, 603,
            604, 605, 606, 607, 608,
            610, 611, 612, 613, 614,
            615, 616, 618, 619, 620,
            621, 622, 623, 625, 626,
            627, 628, 629, 631, 632,
            633, 634, 636, 637, 638,
            639, 641, 642, 643, 644,
            646, 647, 648, 650, 651,
            652, 654, 655, 656, 658,
            659, 660, 662, 663, 665,
            666, 667, 669, 670, 672,
            673, 674, 676, 677, 679,
            680, 682, 683, 685, 686,
            687, 689, 690, 692, 693,
            695, 697, 698, 700, 701,
            703, 704, 706, 707, 709,
            710, 712, 714, 715, 717,
            719, 720, 722, 723, 725,
            727, 728, 730, 732, 733,
            735, 737, 738, 740, 742,
            744, 745, 747, 749, 750,
            752, 754, 756, 758, 759,
            761, 763, 765, 767, 768,
            770, 772, 774, 776, 778,
            779, 781, 783, 785, 787,
            789, 791, 793, 795, 796,
            798, 800, 802, 804, 806,
            808, 810, 812, 814, 816,
            818, 820, 822, 824, 826,
            828, 830, 832, 835, 837,
            839, 841, 843, 845, 847,
            849, 851, 854, 856, 858,
            860, 862, 864, 867, 869,
            871, 873, 875, 878, 880,
            882, 884, 887, 889, 891,
            894, 896, 898, 900, 903,
            905, 907, 910, 912, 915,
            917, 919, 922, 924, 927,
            929, 931, 934, 936, 939,
            941, 944, 946, 949, 951,
            954, 956, 959, 961, 964,
            966, 969, 971, 974, 977,
            979, 982, 984, 987, 990,
            992, 995, 998, 1000, 1003,
            1006, 1008, 1011, 1014, 1017,
            1019, 1022, 1025, 1028, 1030,
            1033, 1036, 1039, 1042, 1044,
            1047, 1050, 1053, 1056, 1059,
            1062, 1065, 1067, 1070, 1073,
            1076, 1079, 1082, 1085, 1088,
            1091, 1094, 1097, 1100, 1103,
            1106, 1109, 1112, 1115, 1118,
            1122, 1125, 1128, 1131, 1134,
            1137, 1140, 1143, 1147, 1150,
            1153, 1156, 1159, 1163, 1166,
            1169, 1172, 1176, 1179, 1182,
            1186, 1189, 1192, 1196, 1199,
            1202, 1206, 1209, 1212, 1216,
            1219, 1223, 1226, 1230, 1233,
            1237, 1240, 1244, 1247, 1251,
            1254, 1258, 1261, 1265, 1268,
            1272, 1276, 1279, 1283, 1287,
            1290, 1294, 1298, 1301, 1305,
            1309, 1312, 1316, 1320, 1324,
            1327, 1331, 1335, 1339, 1343,
            1347, 1350, 1354, 1358, 1362,
            1366, 1370, 1374, 1378, 1382,
            1386, 1390, 1394, 1398, 1402,
            1406, 1410, 1414, 1418, 1422,
            1426, 1430, 1434, 1439, 1443,
            1447, 1451, 1455, 1459, 1464,
            1468, 1472, 1476, 1481, 1485,
            1489, 1494, 1498, 1502, 1507,
            1511, 1516, 1520, 1524, 1529,
            1533, 1538, 1542, 1547, 1551,
            1556, 1560, 1565, 1569, 1574,
            1579, 1583, 1588, 1592, 1597,
            1602, 1606, 1611, 1616, 1621,
            1625, 1630, 1635, 1640, 1645,
            1649, 1654, 1659, 1664, 1669,
            1674, 1679, 1684, 1689, 1693,
            1698, 1703, 1708, 1714, 1719,
            1724, 1729, 1734, 1739, 1744,
            1749, 1754, 1760, 1765, 1770,
            1775, 1780, 1786, 1791, 1796,
            1802, 1807, 1812, 1818, 1823,
            1828, 1834, 1839, 1845, 1850,
            1856, 1861, 1867, 1872, 1878,
            1883, 1889, 1894, 1900, 1906,
            1911, 1917, 1923, 1929, 1934,
            1940, 1946, 1952, 1957, 1963,
            1969, 1975, 1981, 1987, 1993,
            1999, 2004, 2010, 2016, 2022,
            2028, 2035, 2041, 2047, 2053,
            2059, 2065, 2071, 2077, 2084,
            2090, 2096, 2102, 2109, 2115,
            2121, 2128, 2134, 2140, 2147,
            2153, 2160, 2166, 2173, 2179,
            2186, 2192, 2199, 2205, 2212,
            2219, 2225, 2232, 2239, 2245,
            2252, 2259, 2266, 2272, 2279,
            2286, 2293, 2300, 2307, 2314,
            2321, 2328, 2335, 2342, 2349,
            2356, 2363, 2370, 2377, 2384,
            2391, 2398, 2406, 2413, 2420,
            2427, 2435, 2442, 2449, 2457,
            2464, 2472, 2479, 2487, 2494,
            2502, 2509, 2517, 2524, 2532,
            2539, 2547, 2555, 2563, 2570,
            2578, 2586, 2594, 2601, 2609,
            2617, 2625, 2633, 2641, 2649,
            2657, 2665, 2673, 2681, 2689,
            2697, 2705, 2714, 2722, 2730,
            2738, 2747, 2755, 2763, 2772,
            2780, 2788, 2797, 2805, 2814,
            2822, 2831, 2839, 2848, 2857,
            2865, 2874, 2883, 2891, 2900,
            2909, 2918, 2927, 2935, 2944,
            2953, 2962, 2971, 2980, 2989,
            2998, 3007, 3016, 3026, 3035,
            3044, 3053, 3062, 3072, 3081,
            3090, 3100, 3109, 3119, 3128,
            3138, 3147, 3157, 3166, 3176,
            3186, 3195, 3205, 3215, 3224,
            3234, 3244, 3254, 3264, 3274,
            3284, 3294, 3304, 3314, 3324,
            3334, 3344, 3354, 3364, 3375,
            3385, 3395, 3405, 3416, 3426,
            3437, 3447, 3458, 3468, 3479,
            3489, 3500, 3510, 3521, 3532,
            3543, 3553, 3564, 3575, 3586,
            3597, 3608, 3619, 3630, 3641,
            3652, 3663, 3674, 3685, 3697,
            3708, 3719, 3730, 3742, 3753,
            3765, 3776, 3788, 3799, 3811,
            3822, 3834, 3846, 3857, 3869,
            3881, 3893, 3905, 3917, 3929,
            3941, 3953, 3965, 3977, 3989,
            4001, 4013, 4025, 4038, 4050,
            4062, 4075, 4087, 4100, 4112,
            4125, 4137, 4150, 4163, 4175,
            4188, 4201, 4214, 4226, 4239,
            4252, 4265, 4278, 4291, 4304,
            4318, 4331, 4344, 4357, 4371,
            4384, 4397, 4411, 4424, 4438,
            4451, 4465, 4479, 4492, 4506,
            4520, 4533, 4547, 4561, 4575,
            4589, 4603, 4617, 4631, 4645,
            4660, 4674, 4688, 4703, 4717,
            4731, 4746, 4760, 4775, 4789,
            4804, 4819, 4833, 4848, 4863,
            4878, 4893, 4908, 4923, 4938,
            4953, 4968, 4983, 4999, 5014,
            5029, 5045, 5060, 5075, 5091,
            5107, 5122, 5138, 5154, 5169,
            5185, 5201, 5217, 5233, 5249,
            5265, 5281, 5297, 5313, 5330,
            5346, 5362, 5379, 5395, 5412,
            5428, 5445, 5462, 5478, 5495,
            5512, 5529, 5546, 5563, 5580,
            5597, 5614, 5631, 5648, 5666,
            5683, 5700, 5718, 5735, 5753,
            5770, 5788, 5806, 5824, 5841,
            5859, 5877, 5895, 5913, 5931,
            5950, 5968, 5986, 6004, 6023,
            6041, 6060, 6078, 6097, 6116,
            6134, 6153, 6172, 6191, 6210,
            6229, 6248, 6267, 6286, 6305,
            6325, 6344, 6364, 6383, 6403,
            6422, 6442, 6462, 6481, 6501,
            6521, 6541, 6561, 6581, 6602,
            6622, 6642, 6662, 6683, 6703,
            6724, 6744, 6765, 6786, 6807,
            6828, 6848, 6869, 6891, 6912,
            6933, 6954, 6975, 6997, 7018,
            7040, 7061, 7083, 7105, 7126,
            7148, 7170, 7192, 7214, 7236,
            7259, 7281, 7303, 7325, 7348,
            7370, 7393, 7416, 7438, 7461,
            7484, 7507, 7530, 7553, 7576,
            7600, 7623, 7646, 7670, 7693,
            7717, 7741, 7764, 7788, 7812,
            7836, 7860, 7884, 7908, 7932,
            7957, 7981, 8006, 8030, 8055,
            8080, 8104, 8129, 8154, 8179,
            8204, 8229, 8255, 8280, 8305,
            8331, 8356, 8382, 8408, 8434,
            8459, 8485, 8511, 8537, 8564,
            8590, 8616, 8643, 8669, 8696,
            8722, 8749, 8776, 8803, 8830,
            8857, 8884, 8912, 8939, 8966,
            8994, 9021, 9049, 9077, 9105,
            9133, 9161, 9189, 9217, 9245,
            9274, 9302, 9331, 9359, 9388,
            9417, 9446, 9475, 9504, 9533,
            9562, 9591, 9621, 9650, 9680,
            9710, 9740, 9769, 9799, 9830,
            9860, 9890, 9920, 9951, 9981,
            10012, 10043, 10073, 10104, 10135,
            10166, 10198, 10229, 10260, 10292,
            10323, 10355, 10387, 10419, 10451,
            10483, 10515, 10547, 10580, 10612,
            10645, 10677, 10710, 10743, 10776,
            10809, 10842, 10876, 10909, 10942,
            10976, 11010, 11044, 11077, 11111,
            11146, 11180, 11214, 11248, 11283,
            11318, 11352, 11387, 11422, 11457,
            11492, 11528, 11563, 11599, 11634,
            11670, 11706, 11742, 11778, 11814,
            11850, 11887, 11923, 11960, 11996,
            12033, 12070, 12107, 12144, 12182,
            12219, 12257, 12294, 12332, 12370,
            12408, 12446, 12484, 12522, 12561,
            12599, 12638, 12677, 12716, 12755,
            12794, 12833, 12873, 12912, 12952,
            12992, 13032, 13072, 13112, 13152,
            13192, 13233, 13274, 13314, 13355,
            13396, 13437, 13479, 13520, 13561,
            13603, 13645, 13687, 13729, 13771,
            13813, 13856, 13898, 13941, 13984,
            14027, 14070, 14113, 14156, 14200,
            14243, 14287, 14331, 14375, 14419,
            14463, 14508, 14552, 14597, 14642,
            14687, 14732, 14777, 14823, 14868,
            14914, 14960, 15005, 15052, 15098,
            15144, 15191, 15237, 15284, 15331,
            15378, 15425, 15473, 15520, 15568,
            15616, 15664, 15712, 15760, 15808,
            15857, 15906, 15955, 16004, 16053,
            16102, 16151, 16201, 16251, 16301,
            16351, 16401, 16451, 16502, 16553,
            16603, 16654, 16706, 16757, 16808,
            16860, 16912, 16964, 17016, 17068,
            17121, 17173, 17226, 17279, 17332,
            17385, 17438, 17492, 17546, 17600,
            17654, 17708, 17762, 17817, 17872,
            17926, 17982, 18037, 18092, 18148,
            18203, 18259, 18315, 18372, 18428,
            18485, 18542, 18598, 18656, 18713,
            18770, 18828, 18886, 18944, 19002,
            19060, 19119, 19178, 19237, 19296,
            19355, 19414, 19474, 19534, 19594,
            19654, 19714, 19775, 19836, 19897,
            19958, 20019, 20081, 20142, 20204,
            20266, 20328, 20391, 20454, 20516,
            20579, 20643, 20706, 20770, 20833,
            20897, 20962, 21026, 21091, 21155,
            21220, 21286, 21351, 21417, 21482,
            21548, 21615, 21681, 21748, 21814,
            21881, 21949, 22016, 22084, 22151,
            22220, 22288, 22356, 22425, 22494,
            22563, 22632, 22702, 22771, 22841,
            22912, 22982, 23053, 23123, 23194,
            23266, 23337, 23409, 23481, 23553,
            23625, 23698, 23771, 23844, 23917,
            23990, 24064, 24138, 24212, 24287,
            24361, 24436, 24511, 24586, 24662,
            24738, 24814, 24890, 24966, 25043,
            25120, 25197, 25275, 25352, 25430,
            25508, 25587, 25665, 25744, 25823,
            25902, 25982, 26062, 26142, 26222,
            26303, 26384, 26465, 26546, 26627,
            26709, 26791, 26874, 26956, 27039,
            27122, 27205, 27289, 27373, 27457,
            27541, 27626, 27711, 27796, 27881,
            27967, 28053, 28139, 28226, 28312,
            28399, 28486, 28574, 28662, 28750,
            28838, 28927, 29016, 29105, 29194,
            29284, 29374, 29464, 29555, 29645,
            29736, 29828, 29919, 30011, 30104,
            30196, 30289, 30382, 30475, 30569,
            30663, 30757, 30851, 30946, 31041,
            31137, 31232, 31328, 31425, 31521,
            31618, 31715, 31813, 31910, 32008,
            32107, 32205, 32304, 32403, 32503,
            32603, 32703, 32804, 32904, 33005,
            33107, 33209, 33311, 33413, 33516,
            33619, 33722, 33825, 33929, 34034,
            34138, 34243, 34348, 34454, 34560,
            34666, 34772, 34879, 34986, 35094,
            35202, 35310, 35418, 35527, 35636,
            35746, 35856, 35966, 36076, 36187,
            36298, 36410, 36522, 36634, 36746,
            36859, 36973, 37086, 37200, 37314,
            37429, 37544, 37659, 37775, 37891,
            38008, 38124, 38241, 38359, 38477,
            38595, 38714, 38833, 38952, 39072,
            39192, 39312, 39433, 39554, 39675,
            39797, 39920, 40042, 40165, 40289,
            40413, 40537, 40661, 40786, 40911,
            41037, 41163, 41290, 41417, 41544,
            41671, 41800, 41928, 42057, 42186,
            42316, 42446, 42576, 42707, 42838,
            42970, 43102, 43234, 43367, 43500,
            43634, 43768, 43902, 44037, 44173,
            44308, 44444, 44581, 44718, 44855,
            44993, 45131, 45270, 45409, 45549,
            45689, 45829, 45970, 46111, 46253,
            46395, 46537, 46680, 46824, 46968,
            47112, 47257, 47402, 47548, 47694,
            47840, 47987, 48135, 48283, 48431,
            48580, 48729, 48879, 49029, 49180,
            49331, 49482, 49634, 49787, 49940,
            50093, 50247, 50401, 50556, 50712,
            50867, 51024, 51181, 51338, 51495,
            51654, 51812, 51972, 52131, 52291,
            52452, 52613, 52775, 52937, 53100,
            53263, 53427, 53591, 53755, 53921,
            54086, 54252, 54419, 54586, 54754,
            54922, 55091, 55260, 55430, 55600,
            55771, 55943, 56114, 56287, 56460,
            56633, 56807, 56982, 57157, 57333,
            57509, 57685, 57863, 58040, 58219,
            58398, 58577, 58757, 58938, 59119,
            59300, 59483, 59665, 59849, 60033,
            60217, 60402, 60588, 60774, 60960,
            61148, 61336, 61524, 61713, 61903,
            62093, 62284, 62475, 62667, 62860,
            63053, 63247, 63441, 63636, 63831,
            64027, 64224, 64422, 64619, 64818,
            65017, 65217, 65417, 65618, 65820,
            66022, 66225, 66429, 66633, 66837,
            67043, 67249, 67455, 67663, 67870,
            68079, 68288, 68498, 68708, 68920,
            69131, 69344, 69557, 69771, 69985,
            70200, 70416, 70632, 70849, 71067,
            71285, 71504, 71724, 71944, 72165,
            72387, 72609, 72833, 73056, 73281,
            73506, 73732, 73958, 74186, 74414,
            74642, 74872, 75102, 75332, 75564,
            75796, 76029, 76262, 76497, 76732,
            76968, 77204, 77441, 77679, 77918,
            78157, 78398, 78638, 78880, 79122,
            79366, 79609, 79854, 80099, 80345,
            80592, 80840, 81088, 81338, 81587,
            81838, 82090, 82342, 82595, 82849,
            83103, 83358, 83615, 83872, 84129,
            84388, 84647, 84907, 85168, 85430,
            85692, 85955, 86220, 86485, 86750,
            87017, 87284, 87552, 87821, 88091,
            88362, 88633, 88906, 89179, 89453,
            89728, 90003, 90280, 90557, 90836,
            91115, 91395, 91676, 91957, 92240,
            92523, 92807, 93093, 93379, 93666,
            93953, 94242, 94532, 94822, 95113,
            95406, 95699, 95993, 96288, 96584,
            96881, 97178, 97477, 97776, 98077,
            98378, 98680, 98984, 99288, 99593,
            99899, 100206, 100514, 100822, 101132,
            101443, 101755, 102067, 102381, 102696,
            103011, 103328, 103645, 103964, 104283,
            104603, 104925, 105247, 105571, 105895,
            106220, 106547, 106874, 107203, 107532,
            107862, 108194, 108526, 108860, 109194,
            109530, 109866, 110204, 110542, 110882,
            111223, 111565, 111907, 112251, 112596,
            112942, 113289, 113637, 113986, 114337,
            114688, 115040, 115394, 115748, 116104,
            116461, 116819, 117178, 117538, 117899,
            118261, 118624, 118989, 119354, 119721,
            120089, 120458, 120828, 121199, 121572,
            121945, 122320, 122696, 123073, 123451,
            123830, 124211, 124593, 124975, 125359,
            125745, 126131, 126518, 126907, 127297,
            127688, 128081, 128474, 128869, 129265,
            129662, 130061, 130260
         ) ),
        max_error = cms.double(0.6152529479288091),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut2 = cms.PSet(
        lut = cms.vint32( (
            256, 256, 257, 258, 259,
            260, 260, 261, 262, 263,
            264, 264, 265, 266, 267,
            268, 268, 269, 270, 271,
            272, 273, 273, 274, 275,
            276, 277, 278, 279, 279,
            280, 281, 282, 283, 284,
            285, 285, 286, 287, 288,
            289, 290, 291, 292, 293,
            293, 294, 295, 296, 297,
            298, 299, 300, 301, 302,
            303, 303, 304, 305, 306,
            307, 308, 309, 310, 311,
            312, 313, 314, 315, 316,
            317, 318, 319, 320, 321,
            322, 323, 324, 325, 326,
            327, 328, 329, 330, 331,
            332, 333, 334, 335, 336,
            337, 338, 339, 340, 341,
            342, 343, 344, 345, 346,
            347, 348, 349, 351, 352,
            353, 354, 355, 356, 357,
            358, 359, 360, 361, 363,
            364, 365, 366, 367, 368,
            369, 370, 372, 373, 374,
            375, 376, 377, 379, 380,
            381, 382, 383, 384, 386,
            387, 388, 389, 390, 392,
            393, 394, 395, 396, 398,
            399, 400, 401, 402, 404,
            405, 406, 407, 409, 410,
            411, 412, 414, 415, 416,
            418, 419, 420, 421, 423,
            424, 425, 427, 428, 429,
            431, 432, 433, 435, 436,
            437, 439, 440, 441, 443,
            444, 445, 447, 448, 449,
            451, 452, 454, 455, 456,
            458, 459, 461, 462, 463,
            465, 466, 468, 469, 471,
            472, 474, 475, 476, 478,
            479, 481, 482, 484, 485,
            487, 488, 490, 491, 493,
            494, 496, 497, 499, 500,
            502, 503, 505, 507, 508,
            510, 511, 513, 514, 516,
            518, 519, 521, 522, 524,
            526, 527, 529, 530, 532,
            534, 535, 537, 539, 540,
            542, 544, 545, 547, 549,
            550, 552, 554, 555, 557,
            559, 561, 562, 564, 566,
            567, 569, 571, 573, 575,
            576, 578, 580, 582, 583,
            585, 587, 589, 591, 592,
            594, 596, 598, 600, 602,
            603, 605, 607, 609, 611,
            613, 615, 617, 618, 620,
            622, 624, 626, 628, 630,
            632, 634, 636, 638, 640,
            642, 644, 646, 648, 650,
            652, 654, 656, 658, 660,
            662, 664, 666, 668, 670,
            672, 674, 676, 678, 680,
            682, 684, 686, 688, 691,
            693, 695, 697, 699, 701,
            703, 706, 708, 710, 712,
            714, 717, 719, 721, 723,
            725, 728, 730, 732, 734,
            737, 739, 741, 743, 746,
            748, 750, 753, 755, 757,
            760, 762, 764, 767, 769,
            771, 774, 776, 778, 781,
            783, 786, 788, 790, 793,
            795, 798, 800, 803, 805,
            808, 810, 813, 815, 818,
            820, 823, 825, 828, 830,
            833, 835, 838, 840, 843,
            846, 848, 851, 853, 856,
            859, 861, 864, 867, 869,
            872, 875, 877, 880, 883,
            885, 888, 891, 894, 896,
            899, 902, 905, 907, 910,
            913, 916, 919, 921, 924,
            927, 930, 933, 936, 939,
            941, 944, 947, 950, 953,
            956, 959, 962, 965, 968,
            971, 974, 977, 980, 983,
            986, 989, 992, 995, 998,
            1001, 1004, 1007, 1010, 1013,
            1017, 1020, 1023, 1026, 1029,
            1032, 1035, 1039, 1042, 1045,
            1048, 1051, 1055, 1058, 1061,
            1064, 1068, 1071, 1074, 1078,
            1081, 1084, 1088, 1091, 1094,
            1098, 1101, 1104, 1108, 1111,
            1115, 1118, 1121, 1125, 1128,
            1132, 1135, 1139, 1142, 1146,
            1149, 1153, 1156, 1160, 1163,
            1167, 1171, 1174, 1178, 1181,
            1185, 1189, 1192, 1196, 1200,
            1203, 1207, 1211, 1214, 1218,
            1222, 1226, 1229, 1233, 1237,
            1241, 1245, 1249, 1252, 1256,
            1260, 1264, 1268, 1272, 1276,
            1280, 1283, 1287, 1291, 1295,
            1299, 1303, 1307, 1311, 1315,
            1319, 1323, 1328, 1332, 1336,
            1340, 1344, 1348, 1352, 1356,
            1360, 1365, 1369, 1373, 1377,
            1382, 1386, 1390, 1394, 1399,
            1403, 1407, 1412, 1416, 1420,
            1425, 1429, 1433, 1438, 1442,
            1447, 1451, 1455, 1460, 1464,
            1469, 1473, 1478, 1483, 1487,
            1492, 1496, 1501, 1505, 1510,
            1515, 1519, 1524, 1529, 1533,
            1538, 1543, 1548, 1552, 1557,
            1562, 1567, 1572, 1576, 1581,
            1586, 1591, 1596, 1601, 1606,
            1611, 1616, 1620, 1625, 1630,
            1635, 1640, 1646, 1651, 1656,
            1661, 1666, 1671, 1676, 1681,
            1686, 1692, 1697, 1702, 1707,
            1712, 1718, 1723, 1728, 1734,
            1739, 1744, 1750, 1755, 1760,
            1766, 1771, 1777, 1782, 1788,
            1793, 1799, 1804, 1810, 1815,
            1821, 1826, 1832, 1838, 1843,
            1849, 1855, 1860, 1866, 1872,
            1878, 1883, 1889, 1895, 1901,
            1907, 1912, 1918, 1924, 1930,
            1936, 1942, 1948, 1954, 1960,
            1966, 1972, 1978, 1984, 1990,
            1996, 2003, 2009, 2015, 2021,
            2027, 2033, 2040, 2046, 2052,
            2059, 2065, 2071, 2078, 2084,
            2090, 2097, 2103, 2110, 2116,
            2123, 2129, 2136, 2142, 2149,
            2156, 2162, 2169, 2175, 2182,
            2189, 2196, 2202, 2209, 2216,
            2223, 2230, 2236, 2243, 2250,
            2257, 2264, 2271, 2278, 2285,
            2292, 2299, 2306, 2313, 2320,
            2327, 2335, 2342, 2349, 2356,
            2363, 2371, 2378, 2385, 2393,
            2400, 2407, 2415, 2422, 2430,
            2437, 2444, 2452, 2460, 2467,
            2475, 2482, 2490, 2498, 2505,
            2513, 2521, 2528, 2536, 2544,
            2552, 2560, 2567, 2575, 2583,
            2591, 2599, 2607, 2615, 2623,
            2631, 2639, 2647, 2656, 2664,
            2672, 2680, 2688, 2697, 2705,
            2713, 2722, 2730, 2738, 2747,
            2755, 2764, 2772, 2781, 2789,
            2798, 2806, 2815, 2824, 2832,
            2841, 2850, 2858, 2867, 2876,
            2885, 2894, 2903, 2912, 2921,
            2930, 2939, 2948, 2957, 2966,
            2975, 2984, 2993, 3002, 3012,
            3021, 3030, 3039, 3049, 3058,
            3067, 3077, 3086, 3096, 3105,
            3115, 3124, 3134, 3144, 3153,
            3163, 3173, 3183, 3192, 3202,
            3212, 3222, 3232, 3242, 3252,
            3262, 3272, 3282, 3292, 3302,
            3312, 3322, 3332, 3343, 3353,
            3363, 3374, 3384, 3394, 3405,
            3415, 3426, 3436, 3447, 3457,
            3468, 3479, 3489, 3500, 3511,
            3522, 3532, 3543, 3554, 3565,
            3576, 3587, 3598, 3609, 3620,
            3631, 3642, 3654, 3665, 3676,
            3687, 3699, 3710, 3722, 3733,
            3744, 3756, 3767, 3779, 3791,
            3802, 3814, 3826, 3837, 3849,
            3861, 3873, 3885, 3897, 3909,
            3921, 3933, 3945, 3957, 3969,
            3981, 3994, 4006, 4018, 4031,
            4043, 4055, 4068, 4080, 4093,
            4105, 4118, 4131, 4143, 4156,
            4169, 4182, 4195, 4207, 4220,
            4233, 4246, 4259, 4272, 4286,
            4299, 4312, 4325, 4339, 4352,
            4365, 4379, 4392, 4406, 4419,
            4433, 4446, 4460, 4474, 4487,
            4501, 4515, 4529, 4543, 4557,
            4571, 4585, 4599, 4613, 4627,
            4641, 4656, 4670, 4684, 4699,
            4713, 4728, 4742, 4757, 4771,
            4786, 4801, 4816, 4830, 4845,
            4860, 4875, 4890, 4905, 4920,
            4935, 4950, 4966, 4981, 4996,
            5011, 5027, 5042, 5058, 5073,
            5089, 5105, 5120, 5136, 5152,
            5168, 5183, 5199, 5215, 5231,
            5247, 5264, 5280, 5296, 5312,
            5329, 5345, 5361, 5378, 5394,
            5411, 5428, 5444, 5461, 5478,
            5495, 5512, 5528, 5545, 5562,
            5580, 5597, 5614, 5631, 5648,
            5666, 5683, 5701, 5718, 5736,
            5753, 5771, 5789, 5807, 5824,
            5842, 5860, 5878, 5896, 5914,
            5933, 5951, 5969, 5987, 6006,
            6024, 6043, 6061, 6080, 6099,
            6117, 6136, 6155, 6174, 6193,
            6212, 6231, 6250, 6269, 6289,
            6308, 6327, 6347, 6366, 6386,
            6406, 6425, 6445, 6465, 6485,
            6505, 6525, 6545, 6565, 6585,
            6605, 6625, 6646, 6666, 6687,
            6707, 6728, 6749, 6769, 6790,
            6811, 6832, 6853, 6874, 6895,
            6916, 6937, 6959, 6980, 7002,
            7023, 7045, 7066, 7088, 7110,
            7132, 7154, 7176, 7198, 7220,
            7242, 7264, 7286, 7309, 7331,
            7354, 7376, 7399, 7422, 7445,
            7468, 7490, 7513, 7537, 7560,
            7583, 7606, 7630, 7653, 7677,
            7700, 7724, 7748, 7771, 7795,
            7819, 7843, 7867, 7892, 7916,
            7940, 7964, 7989, 8014, 8038,
            8063, 8088, 8112, 8137, 8162,
            8187, 8213, 8238, 8263, 8289,
            8314, 8340, 8365, 8391, 8417,
            8443, 8468, 8495, 8521, 8547,
            8573, 8599, 8626, 8652, 8679,
            8706, 8732, 8759, 8786, 8813,
            8840, 8867, 8895, 8922, 8949,
            8977, 9004, 9032, 9060, 9088,
            9116, 9144, 9172, 9200, 9228,
            9256, 9285, 9313, 9342, 9371,
            9400, 9428, 9457, 9486, 9516,
            9545, 9574, 9604, 9633, 9663,
            9692, 9722, 9752, 9782, 9812,
            9842, 9872, 9903, 9933, 9964,
            9994, 10025, 10056, 10087, 10118,
            10149, 10180, 10211, 10243, 10274,
            10306, 10337, 10369, 10401, 10433,
            10465, 10497, 10529, 10562, 10594,
            10627, 10659, 10692, 10725, 10758,
            10791, 10824, 10858, 10891, 10924,
            10958, 10992, 11025, 11059, 11093,
            11127, 11161, 11196, 11230, 11265,
            11299, 11334, 11369, 11404, 11439,
            11474, 11509, 11545, 11580, 11616,
            11651, 11687, 11723, 11759, 11795,
            11831, 11868, 11904, 11941, 11978,
            12014, 12051, 12088, 12125, 12163,
            12200, 12238, 12275, 12313, 12351,
            12389, 12427, 12465, 12503, 12542,
            12580, 12619, 12658, 12696, 12735,
            12775, 12814, 12853, 12893, 12932,
            12972, 13012, 13052, 13092, 13132,
            13173, 13213, 13254, 13294, 13335,
            13376, 13417, 13459, 13500, 13541,
            13583, 13625, 13667, 13709, 13751,
            13793, 13835, 13878, 13920, 13963,
            14006, 14049, 14092, 14136, 14179,
            14223, 14266, 14310, 14354, 14398,
            14443, 14487, 14531, 14576, 14621,
            14666, 14711, 14756, 14801, 14847,
            14892, 14938, 14984, 15030, 15076,
            15123, 15169, 15216, 15263, 15309,
            15356, 15404, 15451, 15498, 15546,
            15594, 15642, 15690, 15738, 15786,
            15835, 15884, 15932, 15981, 16030,
            16080, 16129, 16179, 16228, 16278,
            16328, 16378, 16429, 16479, 16530,
            16581, 16632, 16683, 16734, 16785,
            16837, 16889, 16941, 16993, 17045,
            17097, 17150, 17202, 17255, 17308,
            17361, 17415, 17468, 17522, 17576,
            17630, 17684, 17738, 17793, 17848,
            17902, 17957, 18013, 18068, 18123,
            18179, 18235, 18291, 18347, 18404,
            18460, 18517, 18574, 18631, 18688,
            18746, 18803, 18861, 18919, 18977,
            19035, 19094, 19152, 19211, 19270,
            19330, 19389, 19448, 19508, 19568,
            19628, 19689, 19749, 19810, 19871,
            19932, 19993, 20054, 20116, 20178,
            20240, 20302, 20364, 20427, 20490,
            20553, 20616, 20679, 20743, 20806,
            20870, 20935, 20999, 21063, 21128,
            21193, 21258, 21323, 21389, 21455,
            21521, 21587, 21653, 21720, 21786,
            21853, 21920, 21988, 22055, 22123,
            22191, 22259, 22328, 22396, 22465,
            22534, 22603, 22673, 22742, 22812,
            22882, 22953, 23023, 23094, 23165,
            23236, 23308, 23379, 23451, 23523,
            23595, 23668, 23741, 23814, 23887,
            23960, 24034, 24108, 24182, 24256,
            24330, 24405, 24480, 24555, 24631,
            24707, 24783, 24859, 24935, 25012,
            25089, 25166, 25243, 25320, 25398,
            25476, 25555, 25633, 25712, 25791,
            25870, 25950, 26029, 26109, 26190,
            26270, 26351, 26432, 26513, 26594,
            26676, 26758, 26840, 26923, 27006,
            27088, 27172, 27255, 27339, 27423,
            27507, 27592, 27677, 27762, 27847,
            27932, 28018, 28104, 28191, 28277,
            28364, 28451, 28539, 28626, 28714,
            28803, 28891, 28980, 29069, 29158,
            29248, 29338, 29428, 29518, 29609,
            29700, 29791, 29883, 29975, 30067,
            30159, 30252, 30345, 30438, 30532,
            30625, 30719, 30814, 30909, 31003,
            31099, 31194, 31290, 31386, 31483,
            31579, 31677, 31774, 31871, 31969,
            32068, 32166, 32265, 32364, 32464,
            32563, 32663, 32764, 32864, 32965,
            33067, 33168, 33270, 33372, 33475,
            33578, 33681, 33785, 33888, 33992,
            34097, 34202, 34307, 34412, 34518,
            34624, 34730, 34837, 34944, 35051,
            35159, 35267, 35376, 35484, 35593,
            35703, 35812, 35922, 36033, 36144,
            36255, 36366, 36478, 36590, 36702,
            36815, 36928, 37042, 37155, 37270,
            37384, 37499, 37614, 37730, 37846,
            37962, 38079, 38196, 38313, 38431,
            38549, 38667, 38786, 38905, 39025,
            39145, 39265, 39386, 39507, 39628,
            39750, 39872, 39994, 40117, 40241,
            40364, 40488, 40613, 40737, 40863,
            40988, 41114, 41240, 41367, 41494,
            41622, 41750, 41878, 42007, 42136,
            42265, 42395, 42525, 42656, 42787,
            42919, 43050, 43183, 43315, 43448,
            43582, 43716, 43850, 43985, 44120,
            44256, 44392, 44528, 44665, 44802,
            44940, 45078, 45216, 45355, 45495,
            45634, 45775, 45915, 46056, 46198,
            46340, 46482, 46625, 46768, 46912,
            47056, 47201, 47346, 47491, 47637,
            47784, 47930, 48078, 48225, 48374,
            48522, 48671, 48821, 48971, 49121,
            49272, 49424, 49576, 49728, 49881,
            50034, 50188, 50342, 50497, 50652,
            50807, 50963, 51120, 51277, 51435,
            51593, 51751, 51910, 52070, 52230,
            52390, 52551, 52713, 52875, 53037,
            53200, 53364, 53528, 53692, 53857,
            54022, 54188, 54355, 54522, 54690,
            54858, 55026, 55195, 55365, 55535,
            55706, 55877, 56048, 56221, 56393,
            56567, 56740, 56915, 57090, 57265,
            57441, 57618, 57795, 57972, 58150,
            58329, 58508, 58688, 58868, 59049,
            59231, 59413, 59595, 59778, 59962,
            60146, 60331, 60516, 60702, 60889,
            61076, 61264, 61452, 61641, 61830,
            62020, 62211, 62402, 62594, 62786,
            62979, 63172, 63366, 63561, 63756,
            63952, 64149, 64346, 64544, 64742,
            64941, 65140, 65341, 65541, 65743,
            65945, 66147, 66351, 66555, 66759,
            66964, 67170, 67376, 67583, 67791,
            67999, 68208, 68418, 68628, 68839,
            69050, 69263, 69475, 69689, 69903,
            70118, 70333, 70549, 70766, 70984,
            71202, 71421, 71640, 71860, 72081,
            72302, 72525, 72747, 72971, 73195,
            73420, 73646, 73872, 74099, 74327,
            74555, 74784, 75014, 75244, 75476,
            75707, 75940, 76173, 76407, 76642,
            76878, 77114, 77351, 77589, 77827,
            78066, 78306, 78547, 78788, 79030,
            79273, 79516, 79761, 80006, 80252,
            80498, 80746, 80994, 81243, 81492,
            81743, 81994, 82246, 82498, 82752,
            83006, 83261, 83517, 83774, 84031,
            84289, 84548, 84808, 85069, 85330,
            85592, 85855, 86119, 86384, 86649,
            86915, 87182, 87450, 87719, 87989,
            88259, 88530, 88802, 89075, 89349,
            89623, 89899, 90175, 90452, 90730,
            91009, 91288, 91569, 91850, 92132,
            92415, 92699, 92984, 93270, 93557,
            93844, 94132, 94422, 94712, 95003,
            95295, 95587, 95881, 96176, 96471,
            96768, 97065, 97363, 97662, 97963,
            98264, 98565, 98868, 99172, 99477,
            99783, 100089, 100397, 100705, 101015,
            101325, 101636, 101949, 102262, 102576,
            102891, 103207, 103525, 103843, 104162,
            104482, 104803, 105125, 105448, 105772,
            106097, 106423, 106750, 107078, 107407,
            107737, 108068, 108400, 108733, 109067,
            109402, 109738, 110076, 110414, 110753,
            111093, 111435, 111777, 112121, 112465,
            112811, 113157, 113505, 113854, 114204,
            114555, 114907, 115260, 115614, 115969,
            116325, 116683, 117041, 117401, 117762,
            118124, 118486, 118851, 119216, 119582,
            119949, 120318, 120688, 121059, 121431,
            121804, 122178, 122553, 122930, 123308,
            123687, 124067, 124448, 124830, 125214,
            125598, 125984, 126371, 126760, 127149,
            127540, 127932, 128325, 128719, 129115,
            129511, 129909, 130309, 130709, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071
         ) ),
        max_error = cms.double(5748.616225984908),
        output_scale_factor = cms.double(0.953125),
        unused_lsbs = cms.uint32(2)
    ),
    inv_mass_checks = cms.untracked.bool(False),
    minDR = cms.double(0.1),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    sanity_checks = cms.untracked.bool(False),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    )
)


process.DoubleIsoTkPho2212 = cms.EDFilter("L1GTDoubleObjectCond",
    collection1 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 1.479),
        regionsMaxRelIsolationPt = cms.vdouble(0.25, 0.205),
        regionsMinPt = cms.vdouble(18, 16),
        regionsQualityFlags = cms.vuint32(2, 4),
        tag = cms.InputTag("l1tGTProducer","CL2Photons")
    ),
    collection2 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 1.479),
        regionsMaxRelIsolationPt = cms.vdouble(0.25, 0.205),
        regionsMinPt = cms.vdouble(8, 7),
        regionsQualityFlags = cms.vuint32(2, 4),
        tag = cms.InputTag("l1tGTProducer","CL2Photons")
    ),
    cos_phi_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            487, 487, 487, 487, 487,
            487, 487, 487, 487, 487,
            487, 486, 486, 486, 486,
            486, 486, 486, 485, 485,
            485, 485, 485, 485, 484,
            484, 484, 484, 484, 483,
            483, 483, 483, 483, 482,
            482, 482, 482, 481, 481,
            481, 481, 480, 480, 480,
            480, 479, 479, 479, 478,
            478, 478, 478, 477, 477,
            477, 476, 476, 476, 475,
            475, 475, 474, 474, 474,
            473, 473, 472, 472, 472,
            471, 471, 471, 470, 470,
            469, 469, 468, 468, 468,
            467, 467, 466, 466, 465,
            465, 465, 464, 464, 463,
            463, 462, 462, 461, 461,
            460, 460, 459, 459, 458,
            458, 457, 457, 456, 456,
            455, 454, 454, 453, 453,
            452, 452, 451, 451, 450,
            449, 449, 448, 448, 447,
            446, 446, 445, 445, 444,
            443, 443, 442, 441, 441,
            440, 440, 439, 438, 438,
            437, 436, 436, 435, 434,
            434, 433, 432, 431, 431,
            430, 429, 429, 428, 427,
            426, 426, 425, 424, 423,
            423, 422, 421, 420, 420,
            419, 418, 417, 417, 416,
            415, 414, 413, 413, 412,
            411, 410, 409, 409, 408,
            407, 406, 405, 405, 404,
            403, 402, 401, 400, 399,
            399, 398, 397, 396, 395,
            394, 393, 392, 392, 391,
            390, 389, 388, 387, 386,
            385, 384, 383, 382, 381,
            381, 380, 379, 378, 377,
            376, 375, 374, 373, 372,
            371, 370, 369, 368, 367,
            366, 365, 364, 363, 362,
            361, 360, 359, 358, 357,
            356, 355, 354, 353, 352,
            351, 350, 349, 348, 347,
            346, 345, 343, 342, 341,
            340, 339, 338, 337, 336,
            335, 334, 333, 332, 330,
            329, 328, 327, 326, 325,
            324, 323, 322, 320, 319,
            318, 317, 316, 315, 314,
            312, 311, 310, 309, 308,
            307, 306, 304, 303, 302,
            301, 300, 298, 297, 296,
            295, 294, 293, 291, 290,
            289, 288, 286, 285, 284,
            283, 282, 280, 279, 278,
            277, 275, 274, 273, 272,
            270, 269, 268, 267, 265,
            264, 263, 262, 260, 259,
            258, 257, 255, 254, 253,
            252, 250, 249, 248, 246,
            245, 244, 242, 241, 240,
            239, 237, 236, 235, 233,
            232, 231, 229, 228, 227,
            225, 224, 223, 221, 220,
            219, 217, 216, 215, 213,
            212, 211, 209, 208, 207,
            205, 204, 203, 201, 200,
            198, 197, 196, 194, 193,
            192, 190, 189, 187, 186,
            185, 183, 182, 181, 179,
            178, 176, 175, 174, 172,
            171, 169, 168, 167, 165,
            164, 162, 161, 159, 158,
            157, 155, 154, 152, 151,
            150, 148, 147, 145, 144,
            142, 141, 140, 138, 137,
            135, 134, 132, 131, 129,
            128, 127, 125, 124, 122,
            121, 119, 118, 116, 115,
            113, 112, 111, 109, 108,
            106, 105, 103, 102, 100,
            99, 97, 96, 94, 93,
            92, 90, 89, 87, 86,
            84, 83, 81, 80, 78,
            77, 75, 74, 72, 71,
            69, 68, 66, 65, 63,
            62, 60, 59, 58, 56,
            55, 53, 52, 50, 49,
            47, 46, 44, 43, 41,
            40, 38, 37, 35, 34,
            32, 31, 29, 28, 26,
            25, 23, 22, 20, 19,
            17, 16, 14, 13, 11,
            10, 8, 7, 5, 4,
            2, 1, -1, -2, -4,
            -5, -7, -8, -10, -11,
            -13, -14, -16, -17, -19,
            -20, -22, -23, -25, -26,
            -28, -29, -31, -32, -34,
            -35, -37, -38, -40, -41,
            -43, -44, -46, -47, -49,
            -50, -52, -53, -55, -56,
            -58, -59, -60, -62, -63,
            -65, -66, -68, -69, -71,
            -72, -74, -75, -77, -78,
            -80, -81, -83, -84, -86,
            -87, -89, -90, -92, -93,
            -94, -96, -97, -99, -100,
            -102, -103, -105, -106, -108,
            -109, -111, -112, -113, -115,
            -116, -118, -119, -121, -122,
            -124, -125, -127, -128, -129,
            -131, -132, -134, -135, -137,
            -138, -140, -141, -142, -144,
            -145, -147, -148, -150, -151,
            -152, -154, -155, -157, -158,
            -159, -161, -162, -164, -165,
            -167, -168, -169, -171, -172,
            -174, -175, -176, -178, -179,
            -181, -182, -183, -185, -186,
            -187, -189, -190, -192, -193,
            -194, -196, -197, -198, -200,
            -201, -203, -204, -205, -207,
            -208, -209, -211, -212, -213,
            -215, -216, -217, -219, -220,
            -221, -223, -224, -225, -227,
            -228, -229, -231, -232, -233,
            -235, -236, -237, -239, -240,
            -241, -242, -244, -245, -246,
            -248, -249, -250, -252, -253,
            -254, -255, -257, -258, -259,
            -260, -262, -263, -264, -265,
            -267, -268, -269, -270, -272,
            -273, -274, -275, -277, -278,
            -279, -280, -282, -283, -284,
            -285, -286, -288, -289, -290,
            -291, -293, -294, -295, -296,
            -297, -298, -300, -301, -302,
            -303, -304, -306, -307, -308,
            -309, -310, -311, -312, -314,
            -315, -316, -317, -318, -319,
            -320, -322, -323, -324, -325,
            -326, -327, -328, -329, -330,
            -332, -333, -334, -335, -336,
            -337, -338, -339, -340, -341,
            -342, -343, -345, -346, -347,
            -348, -349, -350, -351, -352,
            -353, -354, -355, -356, -357,
            -358, -359, -360, -361, -362,
            -363, -364, -365, -366, -367,
            -368, -369, -370, -371, -372,
            -373, -374, -375, -376, -377,
            -378, -379, -380, -381, -381,
            -382, -383, -384, -385, -386,
            -387, -388, -389, -390, -391,
            -392, -392, -393, -394, -395,
            -396, -397, -398, -399, -399,
            -400, -401, -402, -403, -404,
            -405, -405, -406, -407, -408,
            -409, -409, -410, -411, -412,
            -413, -413, -414, -415, -416,
            -417, -417, -418, -419, -420,
            -420, -421, -422, -423, -423,
            -424, -425, -426, -426, -427,
            -428, -429, -429, -430, -431,
            -431, -432, -433, -434, -434,
            -435, -436, -436, -437, -438,
            -438, -439, -440, -440, -441,
            -441, -442, -443, -443, -444,
            -445, -445, -446, -446, -447,
            -448, -448, -449, -449, -450,
            -451, -451, -452, -452, -453,
            -453, -454, -454, -455, -456,
            -456, -457, -457, -458, -458,
            -459, -459, -460, -460, -461,
            -461, -462, -462, -463, -463,
            -464, -464, -465, -465, -465,
            -466, -466, -467, -467, -468,
            -468, -468, -469, -469, -470,
            -470, -471, -471, -471, -472,
            -472, -472, -473, -473, -474,
            -474, -474, -475, -475, -475,
            -476, -476, -476, -477, -477,
            -477, -478, -478, -478, -478,
            -479, -479, -479, -480, -480,
            -480, -480, -481, -481, -481,
            -481, -482, -482, -482, -482,
            -483, -483, -483, -483, -483,
            -484, -484, -484, -484, -484,
            -485, -485, -485, -485, -485,
            -485, -486, -486, -486, -486,
            -486, -486, -486, -487, -487,
            -487, -487, -487, -487, -487,
            -487, -487, -487, -487, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488
         ) ),
        max_error = cms.double(0.0025338281044886835),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            489, 489, 489, 489, 489,
            489, 489, 489, 489, 489,
            489, 490, 490, 490, 490,
            490, 490, 490, 491, 491,
            491, 491, 491, 491, 492,
            492, 492, 492, 492, 493,
            493, 493, 493, 493, 494,
            494, 494, 494, 495, 495,
            495, 495, 496, 496, 496,
            496, 497, 497, 497, 498,
            498, 498, 499, 499, 499,
            499, 500, 500, 500, 501,
            501, 502, 502, 502, 503,
            503, 503, 504, 504, 504,
            505, 505, 506, 506, 507,
            507, 507, 508, 508, 509,
            509, 510, 510, 510, 511,
            511, 512, 512, 513, 513,
            514, 514, 515, 515, 516,
            516, 517, 517, 518, 518,
            519, 520, 520, 521, 521,
            522, 522, 523, 523, 524,
            525, 525, 526, 526, 527,
            528, 528, 529, 530, 530,
            531, 531, 532, 533, 533,
            534, 535, 535, 536, 537,
            537, 538, 539, 540, 540,
            541, 542, 542, 543, 544,
            545, 545, 546, 547, 548,
            548, 549, 550, 551, 551,
            552, 553, 554, 555, 555,
            556, 557, 558, 559, 560,
            560, 561, 562, 563, 564,
            565, 566, 567, 567, 568,
            569, 570, 571, 572, 573,
            574, 575, 576, 577, 577,
            578, 579, 580, 581, 582,
            583, 584, 585, 586, 587,
            588, 589, 590, 591, 592,
            593, 594, 595, 596, 598,
            599, 600, 601, 602, 603,
            604, 605, 606, 607, 608,
            610, 611, 612, 613, 614,
            615, 616, 618, 619, 620,
            621, 622, 623, 625, 626,
            627, 628, 629, 631, 632,
            633, 634, 636, 637, 638,
            639, 641, 642, 643, 644,
            646, 647, 648, 650, 651,
            652, 654, 655, 656, 658,
            659, 660, 662, 663, 665,
            666, 667, 669, 670, 672,
            673, 674, 676, 677, 679,
            680, 682, 683, 685, 686,
            687, 689, 690, 692, 693,
            695, 697, 698, 700, 701,
            703, 704, 706, 707, 709,
            710, 712, 714, 715, 717,
            719, 720, 722, 723, 725,
            727, 728, 730, 732, 733,
            735, 737, 738, 740, 742,
            744, 745, 747, 749, 750,
            752, 754, 756, 758, 759,
            761, 763, 765, 767, 768,
            770, 772, 774, 776, 778,
            779, 781, 783, 785, 787,
            789, 791, 793, 795, 796,
            798, 800, 802, 804, 806,
            808, 810, 812, 814, 816,
            818, 820, 822, 824, 826,
            828, 830, 832, 835, 837,
            839, 841, 843, 845, 847,
            849, 851, 854, 856, 858,
            860, 862, 864, 867, 869,
            871, 873, 875, 878, 880,
            882, 884, 887, 889, 891,
            894, 896, 898, 900, 903,
            905, 907, 910, 912, 915,
            917, 919, 922, 924, 927,
            929, 931, 934, 936, 939,
            941, 944, 946, 949, 951,
            954, 956, 959, 961, 964,
            966, 969, 971, 974, 977,
            979, 982, 984, 987, 990,
            992, 995, 998, 1000, 1003,
            1006, 1008, 1011, 1014, 1017,
            1019, 1022, 1025, 1028, 1030,
            1033, 1036, 1039, 1042, 1044,
            1047, 1050, 1053, 1056, 1059,
            1062, 1065, 1067, 1070, 1073,
            1076, 1079, 1082, 1085, 1088,
            1091, 1094, 1097, 1100, 1103,
            1106, 1109, 1112, 1115, 1118,
            1122, 1125, 1128, 1131, 1134,
            1137, 1140, 1143, 1147, 1150,
            1153, 1156, 1159, 1163, 1166,
            1169, 1172, 1176, 1179, 1182,
            1186, 1189, 1192, 1196, 1199,
            1202, 1206, 1209, 1212, 1216,
            1219, 1223, 1226, 1230, 1233,
            1237, 1240, 1244, 1247, 1251,
            1254, 1258, 1261, 1265, 1268,
            1272, 1276, 1279, 1283, 1287,
            1290, 1294, 1298, 1301, 1305,
            1309, 1312, 1316, 1320, 1324,
            1327, 1331, 1335, 1339, 1343,
            1347, 1350, 1354, 1358, 1362,
            1366, 1370, 1374, 1378, 1382,
            1386, 1390, 1394, 1398, 1402,
            1406, 1410, 1414, 1418, 1422,
            1426, 1430, 1434, 1439, 1443,
            1447, 1451, 1455, 1459, 1464,
            1468, 1472, 1476, 1481, 1485,
            1489, 1494, 1498, 1502, 1507,
            1511, 1516, 1520, 1524, 1529,
            1533, 1538, 1542, 1547, 1551,
            1556, 1560, 1565, 1569, 1574,
            1579, 1583, 1588, 1592, 1597,
            1602, 1606, 1611, 1616, 1621,
            1625, 1630, 1635, 1640, 1645,
            1649, 1654, 1659, 1664, 1669,
            1674, 1679, 1684, 1689, 1693,
            1698, 1703, 1708, 1714, 1719,
            1724, 1729, 1734, 1739, 1744,
            1749, 1754, 1760, 1765, 1770,
            1775, 1780, 1786, 1791, 1796,
            1802, 1807, 1812, 1818, 1823,
            1828, 1834, 1839, 1845, 1850,
            1856, 1861, 1867, 1872, 1878,
            1883, 1889, 1894, 1900, 1906,
            1911, 1917, 1923, 1929, 1934,
            1940, 1946, 1952, 1957, 1963,
            1969, 1975, 1981, 1987, 1993,
            1999, 2004, 2010, 2016, 2022,
            2028, 2035, 2041, 2047, 2053,
            2059, 2065, 2071, 2077, 2084,
            2090, 2096, 2102, 2109, 2115,
            2121, 2128, 2134, 2140, 2147,
            2153, 2160, 2166, 2173, 2179,
            2186, 2192, 2199, 2205, 2212,
            2219, 2225, 2232, 2239, 2245,
            2252, 2259, 2266, 2272, 2279,
            2286, 2293, 2300, 2307, 2314,
            2321, 2328, 2335, 2342, 2349,
            2356, 2363, 2370, 2377, 2384,
            2391, 2398, 2406, 2413, 2420,
            2427, 2435, 2442, 2449, 2457,
            2464, 2472, 2479, 2487, 2494,
            2502, 2509, 2517, 2524, 2532,
            2539, 2547, 2555, 2563, 2570,
            2578, 2586, 2594, 2601, 2609,
            2617, 2625, 2633, 2641, 2649,
            2657, 2665, 2673, 2681, 2689,
            2697, 2705, 2714, 2722, 2730,
            2738, 2747, 2755, 2763, 2772,
            2780, 2788, 2797, 2805, 2814,
            2822, 2831, 2839, 2848, 2857,
            2865, 2874, 2883, 2891, 2900,
            2909, 2918, 2927, 2935, 2944,
            2953, 2962, 2971, 2980, 2989,
            2998, 3007, 3016, 3026, 3035,
            3044, 3053, 3062, 3072, 3081,
            3090, 3100, 3109, 3119, 3128,
            3138, 3147, 3157, 3166, 3176,
            3186, 3195, 3205, 3215, 3224,
            3234, 3244, 3254, 3264, 3274,
            3284, 3294, 3304, 3314, 3324,
            3334, 3344, 3354, 3364, 3375,
            3385, 3395, 3405, 3416, 3426,
            3437, 3447, 3458, 3468, 3479,
            3489, 3500, 3510, 3521, 3532,
            3543, 3553, 3564, 3575, 3586,
            3597, 3608, 3619, 3630, 3641,
            3652, 3663, 3674, 3685, 3697,
            3708, 3719, 3730, 3742, 3753,
            3765, 3776, 3788, 3799, 3811,
            3822, 3834, 3846, 3857, 3869,
            3881, 3893, 3905, 3917, 3929,
            3941, 3953, 3965, 3977, 3989,
            4001, 4013, 4025, 4038, 4050,
            4062, 4075, 4087, 4100, 4112,
            4125, 4137, 4150, 4163, 4175,
            4188, 4201, 4214, 4226, 4239,
            4252, 4265, 4278, 4291, 4304,
            4318, 4331, 4344, 4357, 4371,
            4384, 4397, 4411, 4424, 4438,
            4451, 4465, 4479, 4492, 4506,
            4520, 4533, 4547, 4561, 4575,
            4589, 4603, 4617, 4631, 4645,
            4660, 4674, 4688, 4703, 4717,
            4731, 4746, 4760, 4775, 4789,
            4804, 4819, 4833, 4848, 4863,
            4878, 4893, 4908, 4923, 4938,
            4953, 4968, 4983, 4999, 5014,
            5029, 5045, 5060, 5075, 5091,
            5107, 5122, 5138, 5154, 5169,
            5185, 5201, 5217, 5233, 5249,
            5265, 5281, 5297, 5313, 5330,
            5346, 5362, 5379, 5395, 5412,
            5428, 5445, 5462, 5478, 5495,
            5512, 5529, 5546, 5563, 5580,
            5597, 5614, 5631, 5648, 5666,
            5683, 5700, 5718, 5735, 5753,
            5770, 5788, 5806, 5824, 5841,
            5859, 5877, 5895, 5913, 5931,
            5950, 5968, 5986, 6004, 6023,
            6041, 6060, 6078, 6097, 6116,
            6134, 6153, 6172, 6191, 6210,
            6229, 6248, 6267, 6286, 6305,
            6325, 6344, 6364, 6383, 6403,
            6422, 6442, 6462, 6481, 6501,
            6521, 6541, 6561, 6581, 6602,
            6622, 6642, 6662, 6683, 6703,
            6724, 6744, 6765, 6786, 6807,
            6828, 6848, 6869, 6891, 6912,
            6933, 6954, 6975, 6997, 7018,
            7040, 7061, 7083, 7105, 7126,
            7148, 7170, 7192, 7214, 7236,
            7259, 7281, 7303, 7325, 7348,
            7370, 7393, 7416, 7438, 7461,
            7484, 7507, 7530, 7553, 7576,
            7600, 7623, 7646, 7670, 7693,
            7717, 7741, 7764, 7788, 7812,
            7836, 7860, 7884, 7908, 7932,
            7957, 7981, 8006, 8030, 8055,
            8080, 8104, 8129, 8154, 8179,
            8204, 8229, 8255, 8280, 8305,
            8331, 8356, 8382, 8408, 8434,
            8459, 8485, 8511, 8537, 8564,
            8590, 8616, 8643, 8669, 8696,
            8722, 8749, 8776, 8803, 8830,
            8857, 8884, 8912, 8939, 8966,
            8994, 9021, 9049, 9077, 9105,
            9133, 9161, 9189, 9217, 9245,
            9274, 9302, 9331, 9359, 9388,
            9417, 9446, 9475, 9504, 9533,
            9562, 9591, 9621, 9650, 9680,
            9710, 9740, 9769, 9799, 9830,
            9860, 9890, 9920, 9951, 9981,
            10012, 10043, 10073, 10104, 10135,
            10166, 10198, 10229, 10260, 10292,
            10323, 10355, 10387, 10419, 10451,
            10483, 10515, 10547, 10580, 10612,
            10645, 10677, 10710, 10743, 10776,
            10809, 10842, 10876, 10909, 10942,
            10976, 11010, 11044, 11077, 11111,
            11146, 11180, 11214, 11248, 11283,
            11318, 11352, 11387, 11422, 11457,
            11492, 11528, 11563, 11599, 11634,
            11670, 11706, 11742, 11778, 11814,
            11850, 11887, 11923, 11960, 11996,
            12033, 12070, 12107, 12144, 12182,
            12219, 12257, 12294, 12332, 12370,
            12408, 12446, 12484, 12522, 12561,
            12599, 12638, 12677, 12716, 12755,
            12794, 12833, 12873, 12912, 12952,
            12992, 13032, 13072, 13112, 13152,
            13192, 13233, 13274, 13314, 13355,
            13396, 13437, 13479, 13520, 13561,
            13603, 13645, 13687, 13729, 13771,
            13813, 13856, 13898, 13941, 13984,
            14027, 14070, 14113, 14156, 14200,
            14243, 14287, 14331, 14375, 14419,
            14463, 14508, 14552, 14597, 14642,
            14687, 14732, 14777, 14823, 14868,
            14914, 14960, 15005, 15052, 15098,
            15144, 15191, 15237, 15284, 15331,
            15378, 15425, 15473, 15520, 15568,
            15616, 15664, 15712, 15760, 15808,
            15857, 15906, 15955, 16004, 16053,
            16102, 16151, 16201, 16251, 16301,
            16351, 16401, 16451, 16502, 16553,
            16603, 16654, 16706, 16757, 16808,
            16860, 16912, 16964, 17016, 17068,
            17121, 17173, 17226, 17279, 17332,
            17385, 17438, 17492, 17546, 17600,
            17654, 17708, 17762, 17817, 17872,
            17926, 17982, 18037, 18092, 18148,
            18203, 18259, 18315, 18372, 18428,
            18485, 18542, 18598, 18656, 18713,
            18770, 18828, 18886, 18944, 19002,
            19060, 19119, 19178, 19237, 19296,
            19355, 19414, 19474, 19534, 19594,
            19654, 19714, 19775, 19836, 19897,
            19958, 20019, 20081, 20142, 20204,
            20266, 20328, 20391, 20454, 20516,
            20579, 20643, 20706, 20770, 20833,
            20897, 20962, 21026, 21091, 21155,
            21220, 21286, 21351, 21417, 21482,
            21548, 21615, 21681, 21748, 21814,
            21881, 21949, 22016, 22084, 22151,
            22220, 22288, 22356, 22425, 22494,
            22563, 22632, 22702, 22771, 22841,
            22912, 22982, 23053, 23123, 23194,
            23266, 23337, 23409, 23481, 23553,
            23625, 23698, 23771, 23844, 23917,
            23990, 24064, 24138, 24212, 24287,
            24361, 24436, 24511, 24586, 24662,
            24738, 24814, 24890, 24966, 25043,
            25120, 25197, 25275, 25352, 25430,
            25508, 25587, 25665, 25744, 25823,
            25902, 25982, 26062, 26142, 26222,
            26303, 26384, 26465, 26546, 26627,
            26709, 26791, 26874, 26956, 27039,
            27122, 27205, 27289, 27373, 27457,
            27541, 27626, 27711, 27796, 27881,
            27967, 28053, 28139, 28226, 28312,
            28399, 28486, 28574, 28662, 28750,
            28838, 28927, 29016, 29105, 29194,
            29284, 29374, 29464, 29555, 29645,
            29736, 29828, 29919, 30011, 30104,
            30196, 30289, 30382, 30475, 30569,
            30663, 30757, 30851, 30946, 31041,
            31137, 31232, 31328, 31425, 31521,
            31618, 31715, 31813, 31910, 32008,
            32107, 32205, 32304, 32403, 32503,
            32603, 32703, 32804, 32904, 33005,
            33107, 33209, 33311, 33413, 33516,
            33619, 33722, 33825, 33929, 34034,
            34138, 34243, 34348, 34454, 34560,
            34666, 34772, 34879, 34986, 35094,
            35202, 35310, 35418, 35527, 35636,
            35746, 35856, 35966, 36076, 36187,
            36298, 36410, 36522, 36634, 36746,
            36859, 36973, 37086, 37200, 37314,
            37429, 37544, 37659, 37775, 37891,
            38008, 38124, 38241, 38359, 38477,
            38595, 38714, 38833, 38952, 39072,
            39192, 39312, 39433, 39554, 39675,
            39797, 39920, 40042, 40165, 40289,
            40413, 40537, 40661, 40786, 40911,
            41037, 41163, 41290, 41417, 41544,
            41671, 41800, 41928, 42057, 42186,
            42316, 42446, 42576, 42707, 42838,
            42970, 43102, 43234, 43367, 43500,
            43634, 43768, 43902, 44037, 44173,
            44308, 44444, 44581, 44718, 44855,
            44993, 45131, 45270, 45409, 45549,
            45689, 45829, 45970, 46111, 46253,
            46395, 46537, 46680, 46824, 46968,
            47112, 47257, 47402, 47548, 47694,
            47840, 47987, 48135, 48283, 48431,
            48580, 48729, 48879, 49029, 49180,
            49331, 49482, 49634, 49787, 49940,
            50093, 50247, 50401, 50556, 50712,
            50867, 51024, 51181, 51338, 51495,
            51654, 51812, 51972, 52131, 52291,
            52452, 52613, 52775, 52937, 53100,
            53263, 53427, 53591, 53755, 53921,
            54086, 54252, 54419, 54586, 54754,
            54922, 55091, 55260, 55430, 55600,
            55771, 55943, 56114, 56287, 56460,
            56633, 56807, 56982, 57157, 57333,
            57509, 57685, 57863, 58040, 58219,
            58398, 58577, 58757, 58938, 59119,
            59300, 59483, 59665, 59849, 60033,
            60217, 60402, 60588, 60774, 60960,
            61148, 61336, 61524, 61713, 61903,
            62093, 62284, 62475, 62667, 62860,
            63053, 63247, 63441, 63636, 63831,
            64027, 64224, 64422, 64619, 64818,
            65017, 65217, 65417, 65618, 65820,
            66022, 66225, 66429, 66633, 66837,
            67043, 67249, 67455, 67663, 67870,
            68079, 68288, 68498, 68708, 68920,
            69131, 69344, 69557, 69771, 69985,
            70200, 70416, 70632, 70849, 71067,
            71285, 71504, 71724, 71944, 72165,
            72387, 72609, 72833, 73056, 73281,
            73506, 73732, 73958, 74186, 74414,
            74642, 74872, 75102, 75332, 75564,
            75796, 76029, 76262, 76497, 76732,
            76968, 77204, 77441, 77679, 77918,
            78157, 78398, 78638, 78880, 79122,
            79366, 79609, 79854, 80099, 80345,
            80592, 80840, 81088, 81338, 81587,
            81838, 82090, 82342, 82595, 82849,
            83103, 83358, 83615, 83872, 84129,
            84388, 84647, 84907, 85168, 85430,
            85692, 85955, 86220, 86485, 86750,
            87017, 87284, 87552, 87821, 88091,
            88362, 88633, 88906, 89179, 89453,
            89728, 90003, 90280, 90557, 90836,
            91115, 91395, 91676, 91957, 92240,
            92523, 92807, 93093, 93379, 93666,
            93953, 94242, 94532, 94822, 95113,
            95406, 95699, 95993, 96288, 96584,
            96881, 97178, 97477, 97776, 98077,
            98378, 98680, 98984, 99288, 99593,
            99899, 100206, 100514, 100822, 101132,
            101443, 101755, 102067, 102381, 102696,
            103011, 103328, 103645, 103964, 104283,
            104603, 104925, 105247, 105571, 105895,
            106220, 106547, 106874, 107203, 107532,
            107862, 108194, 108526, 108860, 109194,
            109530, 109866, 110204, 110542, 110882,
            111223, 111565, 111907, 112251, 112596,
            112942, 113289, 113637, 113986, 114337,
            114688, 115040, 115394, 115748, 116104,
            116461, 116819, 117178, 117538, 117899,
            118261, 118624, 118989, 119354, 119721,
            120089, 120458, 120828, 121199, 121572,
            121945, 122320, 122696, 123073, 123451,
            123830, 124211, 124593, 124975, 125359,
            125745, 126131, 126518, 126907, 127297,
            127688, 128081, 128474, 128869, 129265,
            129662, 130061, 130260
         ) ),
        max_error = cms.double(0.6152529479288091),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut2 = cms.PSet(
        lut = cms.vint32( (
            256, 256, 257, 258, 259,
            260, 260, 261, 262, 263,
            264, 264, 265, 266, 267,
            268, 268, 269, 270, 271,
            272, 273, 273, 274, 275,
            276, 277, 278, 279, 279,
            280, 281, 282, 283, 284,
            285, 285, 286, 287, 288,
            289, 290, 291, 292, 293,
            293, 294, 295, 296, 297,
            298, 299, 300, 301, 302,
            303, 303, 304, 305, 306,
            307, 308, 309, 310, 311,
            312, 313, 314, 315, 316,
            317, 318, 319, 320, 321,
            322, 323, 324, 325, 326,
            327, 328, 329, 330, 331,
            332, 333, 334, 335, 336,
            337, 338, 339, 340, 341,
            342, 343, 344, 345, 346,
            347, 348, 349, 351, 352,
            353, 354, 355, 356, 357,
            358, 359, 360, 361, 363,
            364, 365, 366, 367, 368,
            369, 370, 372, 373, 374,
            375, 376, 377, 379, 380,
            381, 382, 383, 384, 386,
            387, 388, 389, 390, 392,
            393, 394, 395, 396, 398,
            399, 400, 401, 402, 404,
            405, 406, 407, 409, 410,
            411, 412, 414, 415, 416,
            418, 419, 420, 421, 423,
            424, 425, 427, 428, 429,
            431, 432, 433, 435, 436,
            437, 439, 440, 441, 443,
            444, 445, 447, 448, 449,
            451, 452, 454, 455, 456,
            458, 459, 461, 462, 463,
            465, 466, 468, 469, 471,
            472, 474, 475, 476, 478,
            479, 481, 482, 484, 485,
            487, 488, 490, 491, 493,
            494, 496, 497, 499, 500,
            502, 503, 505, 507, 508,
            510, 511, 513, 514, 516,
            518, 519, 521, 522, 524,
            526, 527, 529, 530, 532,
            534, 535, 537, 539, 540,
            542, 544, 545, 547, 549,
            550, 552, 554, 555, 557,
            559, 561, 562, 564, 566,
            567, 569, 571, 573, 575,
            576, 578, 580, 582, 583,
            585, 587, 589, 591, 592,
            594, 596, 598, 600, 602,
            603, 605, 607, 609, 611,
            613, 615, 617, 618, 620,
            622, 624, 626, 628, 630,
            632, 634, 636, 638, 640,
            642, 644, 646, 648, 650,
            652, 654, 656, 658, 660,
            662, 664, 666, 668, 670,
            672, 674, 676, 678, 680,
            682, 684, 686, 688, 691,
            693, 695, 697, 699, 701,
            703, 706, 708, 710, 712,
            714, 717, 719, 721, 723,
            725, 728, 730, 732, 734,
            737, 739, 741, 743, 746,
            748, 750, 753, 755, 757,
            760, 762, 764, 767, 769,
            771, 774, 776, 778, 781,
            783, 786, 788, 790, 793,
            795, 798, 800, 803, 805,
            808, 810, 813, 815, 818,
            820, 823, 825, 828, 830,
            833, 835, 838, 840, 843,
            846, 848, 851, 853, 856,
            859, 861, 864, 867, 869,
            872, 875, 877, 880, 883,
            885, 888, 891, 894, 896,
            899, 902, 905, 907, 910,
            913, 916, 919, 921, 924,
            927, 930, 933, 936, 939,
            941, 944, 947, 950, 953,
            956, 959, 962, 965, 968,
            971, 974, 977, 980, 983,
            986, 989, 992, 995, 998,
            1001, 1004, 1007, 1010, 1013,
            1017, 1020, 1023, 1026, 1029,
            1032, 1035, 1039, 1042, 1045,
            1048, 1051, 1055, 1058, 1061,
            1064, 1068, 1071, 1074, 1078,
            1081, 1084, 1088, 1091, 1094,
            1098, 1101, 1104, 1108, 1111,
            1115, 1118, 1121, 1125, 1128,
            1132, 1135, 1139, 1142, 1146,
            1149, 1153, 1156, 1160, 1163,
            1167, 1171, 1174, 1178, 1181,
            1185, 1189, 1192, 1196, 1200,
            1203, 1207, 1211, 1214, 1218,
            1222, 1226, 1229, 1233, 1237,
            1241, 1245, 1249, 1252, 1256,
            1260, 1264, 1268, 1272, 1276,
            1280, 1283, 1287, 1291, 1295,
            1299, 1303, 1307, 1311, 1315,
            1319, 1323, 1328, 1332, 1336,
            1340, 1344, 1348, 1352, 1356,
            1360, 1365, 1369, 1373, 1377,
            1382, 1386, 1390, 1394, 1399,
            1403, 1407, 1412, 1416, 1420,
            1425, 1429, 1433, 1438, 1442,
            1447, 1451, 1455, 1460, 1464,
            1469, 1473, 1478, 1483, 1487,
            1492, 1496, 1501, 1505, 1510,
            1515, 1519, 1524, 1529, 1533,
            1538, 1543, 1548, 1552, 1557,
            1562, 1567, 1572, 1576, 1581,
            1586, 1591, 1596, 1601, 1606,
            1611, 1616, 1620, 1625, 1630,
            1635, 1640, 1646, 1651, 1656,
            1661, 1666, 1671, 1676, 1681,
            1686, 1692, 1697, 1702, 1707,
            1712, 1718, 1723, 1728, 1734,
            1739, 1744, 1750, 1755, 1760,
            1766, 1771, 1777, 1782, 1788,
            1793, 1799, 1804, 1810, 1815,
            1821, 1826, 1832, 1838, 1843,
            1849, 1855, 1860, 1866, 1872,
            1878, 1883, 1889, 1895, 1901,
            1907, 1912, 1918, 1924, 1930,
            1936, 1942, 1948, 1954, 1960,
            1966, 1972, 1978, 1984, 1990,
            1996, 2003, 2009, 2015, 2021,
            2027, 2033, 2040, 2046, 2052,
            2059, 2065, 2071, 2078, 2084,
            2090, 2097, 2103, 2110, 2116,
            2123, 2129, 2136, 2142, 2149,
            2156, 2162, 2169, 2175, 2182,
            2189, 2196, 2202, 2209, 2216,
            2223, 2230, 2236, 2243, 2250,
            2257, 2264, 2271, 2278, 2285,
            2292, 2299, 2306, 2313, 2320,
            2327, 2335, 2342, 2349, 2356,
            2363, 2371, 2378, 2385, 2393,
            2400, 2407, 2415, 2422, 2430,
            2437, 2444, 2452, 2460, 2467,
            2475, 2482, 2490, 2498, 2505,
            2513, 2521, 2528, 2536, 2544,
            2552, 2560, 2567, 2575, 2583,
            2591, 2599, 2607, 2615, 2623,
            2631, 2639, 2647, 2656, 2664,
            2672, 2680, 2688, 2697, 2705,
            2713, 2722, 2730, 2738, 2747,
            2755, 2764, 2772, 2781, 2789,
            2798, 2806, 2815, 2824, 2832,
            2841, 2850, 2858, 2867, 2876,
            2885, 2894, 2903, 2912, 2921,
            2930, 2939, 2948, 2957, 2966,
            2975, 2984, 2993, 3002, 3012,
            3021, 3030, 3039, 3049, 3058,
            3067, 3077, 3086, 3096, 3105,
            3115, 3124, 3134, 3144, 3153,
            3163, 3173, 3183, 3192, 3202,
            3212, 3222, 3232, 3242, 3252,
            3262, 3272, 3282, 3292, 3302,
            3312, 3322, 3332, 3343, 3353,
            3363, 3374, 3384, 3394, 3405,
            3415, 3426, 3436, 3447, 3457,
            3468, 3479, 3489, 3500, 3511,
            3522, 3532, 3543, 3554, 3565,
            3576, 3587, 3598, 3609, 3620,
            3631, 3642, 3654, 3665, 3676,
            3687, 3699, 3710, 3722, 3733,
            3744, 3756, 3767, 3779, 3791,
            3802, 3814, 3826, 3837, 3849,
            3861, 3873, 3885, 3897, 3909,
            3921, 3933, 3945, 3957, 3969,
            3981, 3994, 4006, 4018, 4031,
            4043, 4055, 4068, 4080, 4093,
            4105, 4118, 4131, 4143, 4156,
            4169, 4182, 4195, 4207, 4220,
            4233, 4246, 4259, 4272, 4286,
            4299, 4312, 4325, 4339, 4352,
            4365, 4379, 4392, 4406, 4419,
            4433, 4446, 4460, 4474, 4487,
            4501, 4515, 4529, 4543, 4557,
            4571, 4585, 4599, 4613, 4627,
            4641, 4656, 4670, 4684, 4699,
            4713, 4728, 4742, 4757, 4771,
            4786, 4801, 4816, 4830, 4845,
            4860, 4875, 4890, 4905, 4920,
            4935, 4950, 4966, 4981, 4996,
            5011, 5027, 5042, 5058, 5073,
            5089, 5105, 5120, 5136, 5152,
            5168, 5183, 5199, 5215, 5231,
            5247, 5264, 5280, 5296, 5312,
            5329, 5345, 5361, 5378, 5394,
            5411, 5428, 5444, 5461, 5478,
            5495, 5512, 5528, 5545, 5562,
            5580, 5597, 5614, 5631, 5648,
            5666, 5683, 5701, 5718, 5736,
            5753, 5771, 5789, 5807, 5824,
            5842, 5860, 5878, 5896, 5914,
            5933, 5951, 5969, 5987, 6006,
            6024, 6043, 6061, 6080, 6099,
            6117, 6136, 6155, 6174, 6193,
            6212, 6231, 6250, 6269, 6289,
            6308, 6327, 6347, 6366, 6386,
            6406, 6425, 6445, 6465, 6485,
            6505, 6525, 6545, 6565, 6585,
            6605, 6625, 6646, 6666, 6687,
            6707, 6728, 6749, 6769, 6790,
            6811, 6832, 6853, 6874, 6895,
            6916, 6937, 6959, 6980, 7002,
            7023, 7045, 7066, 7088, 7110,
            7132, 7154, 7176, 7198, 7220,
            7242, 7264, 7286, 7309, 7331,
            7354, 7376, 7399, 7422, 7445,
            7468, 7490, 7513, 7537, 7560,
            7583, 7606, 7630, 7653, 7677,
            7700, 7724, 7748, 7771, 7795,
            7819, 7843, 7867, 7892, 7916,
            7940, 7964, 7989, 8014, 8038,
            8063, 8088, 8112, 8137, 8162,
            8187, 8213, 8238, 8263, 8289,
            8314, 8340, 8365, 8391, 8417,
            8443, 8468, 8495, 8521, 8547,
            8573, 8599, 8626, 8652, 8679,
            8706, 8732, 8759, 8786, 8813,
            8840, 8867, 8895, 8922, 8949,
            8977, 9004, 9032, 9060, 9088,
            9116, 9144, 9172, 9200, 9228,
            9256, 9285, 9313, 9342, 9371,
            9400, 9428, 9457, 9486, 9516,
            9545, 9574, 9604, 9633, 9663,
            9692, 9722, 9752, 9782, 9812,
            9842, 9872, 9903, 9933, 9964,
            9994, 10025, 10056, 10087, 10118,
            10149, 10180, 10211, 10243, 10274,
            10306, 10337, 10369, 10401, 10433,
            10465, 10497, 10529, 10562, 10594,
            10627, 10659, 10692, 10725, 10758,
            10791, 10824, 10858, 10891, 10924,
            10958, 10992, 11025, 11059, 11093,
            11127, 11161, 11196, 11230, 11265,
            11299, 11334, 11369, 11404, 11439,
            11474, 11509, 11545, 11580, 11616,
            11651, 11687, 11723, 11759, 11795,
            11831, 11868, 11904, 11941, 11978,
            12014, 12051, 12088, 12125, 12163,
            12200, 12238, 12275, 12313, 12351,
            12389, 12427, 12465, 12503, 12542,
            12580, 12619, 12658, 12696, 12735,
            12775, 12814, 12853, 12893, 12932,
            12972, 13012, 13052, 13092, 13132,
            13173, 13213, 13254, 13294, 13335,
            13376, 13417, 13459, 13500, 13541,
            13583, 13625, 13667, 13709, 13751,
            13793, 13835, 13878, 13920, 13963,
            14006, 14049, 14092, 14136, 14179,
            14223, 14266, 14310, 14354, 14398,
            14443, 14487, 14531, 14576, 14621,
            14666, 14711, 14756, 14801, 14847,
            14892, 14938, 14984, 15030, 15076,
            15123, 15169, 15216, 15263, 15309,
            15356, 15404, 15451, 15498, 15546,
            15594, 15642, 15690, 15738, 15786,
            15835, 15884, 15932, 15981, 16030,
            16080, 16129, 16179, 16228, 16278,
            16328, 16378, 16429, 16479, 16530,
            16581, 16632, 16683, 16734, 16785,
            16837, 16889, 16941, 16993, 17045,
            17097, 17150, 17202, 17255, 17308,
            17361, 17415, 17468, 17522, 17576,
            17630, 17684, 17738, 17793, 17848,
            17902, 17957, 18013, 18068, 18123,
            18179, 18235, 18291, 18347, 18404,
            18460, 18517, 18574, 18631, 18688,
            18746, 18803, 18861, 18919, 18977,
            19035, 19094, 19152, 19211, 19270,
            19330, 19389, 19448, 19508, 19568,
            19628, 19689, 19749, 19810, 19871,
            19932, 19993, 20054, 20116, 20178,
            20240, 20302, 20364, 20427, 20490,
            20553, 20616, 20679, 20743, 20806,
            20870, 20935, 20999, 21063, 21128,
            21193, 21258, 21323, 21389, 21455,
            21521, 21587, 21653, 21720, 21786,
            21853, 21920, 21988, 22055, 22123,
            22191, 22259, 22328, 22396, 22465,
            22534, 22603, 22673, 22742, 22812,
            22882, 22953, 23023, 23094, 23165,
            23236, 23308, 23379, 23451, 23523,
            23595, 23668, 23741, 23814, 23887,
            23960, 24034, 24108, 24182, 24256,
            24330, 24405, 24480, 24555, 24631,
            24707, 24783, 24859, 24935, 25012,
            25089, 25166, 25243, 25320, 25398,
            25476, 25555, 25633, 25712, 25791,
            25870, 25950, 26029, 26109, 26190,
            26270, 26351, 26432, 26513, 26594,
            26676, 26758, 26840, 26923, 27006,
            27088, 27172, 27255, 27339, 27423,
            27507, 27592, 27677, 27762, 27847,
            27932, 28018, 28104, 28191, 28277,
            28364, 28451, 28539, 28626, 28714,
            28803, 28891, 28980, 29069, 29158,
            29248, 29338, 29428, 29518, 29609,
            29700, 29791, 29883, 29975, 30067,
            30159, 30252, 30345, 30438, 30532,
            30625, 30719, 30814, 30909, 31003,
            31099, 31194, 31290, 31386, 31483,
            31579, 31677, 31774, 31871, 31969,
            32068, 32166, 32265, 32364, 32464,
            32563, 32663, 32764, 32864, 32965,
            33067, 33168, 33270, 33372, 33475,
            33578, 33681, 33785, 33888, 33992,
            34097, 34202, 34307, 34412, 34518,
            34624, 34730, 34837, 34944, 35051,
            35159, 35267, 35376, 35484, 35593,
            35703, 35812, 35922, 36033, 36144,
            36255, 36366, 36478, 36590, 36702,
            36815, 36928, 37042, 37155, 37270,
            37384, 37499, 37614, 37730, 37846,
            37962, 38079, 38196, 38313, 38431,
            38549, 38667, 38786, 38905, 39025,
            39145, 39265, 39386, 39507, 39628,
            39750, 39872, 39994, 40117, 40241,
            40364, 40488, 40613, 40737, 40863,
            40988, 41114, 41240, 41367, 41494,
            41622, 41750, 41878, 42007, 42136,
            42265, 42395, 42525, 42656, 42787,
            42919, 43050, 43183, 43315, 43448,
            43582, 43716, 43850, 43985, 44120,
            44256, 44392, 44528, 44665, 44802,
            44940, 45078, 45216, 45355, 45495,
            45634, 45775, 45915, 46056, 46198,
            46340, 46482, 46625, 46768, 46912,
            47056, 47201, 47346, 47491, 47637,
            47784, 47930, 48078, 48225, 48374,
            48522, 48671, 48821, 48971, 49121,
            49272, 49424, 49576, 49728, 49881,
            50034, 50188, 50342, 50497, 50652,
            50807, 50963, 51120, 51277, 51435,
            51593, 51751, 51910, 52070, 52230,
            52390, 52551, 52713, 52875, 53037,
            53200, 53364, 53528, 53692, 53857,
            54022, 54188, 54355, 54522, 54690,
            54858, 55026, 55195, 55365, 55535,
            55706, 55877, 56048, 56221, 56393,
            56567, 56740, 56915, 57090, 57265,
            57441, 57618, 57795, 57972, 58150,
            58329, 58508, 58688, 58868, 59049,
            59231, 59413, 59595, 59778, 59962,
            60146, 60331, 60516, 60702, 60889,
            61076, 61264, 61452, 61641, 61830,
            62020, 62211, 62402, 62594, 62786,
            62979, 63172, 63366, 63561, 63756,
            63952, 64149, 64346, 64544, 64742,
            64941, 65140, 65341, 65541, 65743,
            65945, 66147, 66351, 66555, 66759,
            66964, 67170, 67376, 67583, 67791,
            67999, 68208, 68418, 68628, 68839,
            69050, 69263, 69475, 69689, 69903,
            70118, 70333, 70549, 70766, 70984,
            71202, 71421, 71640, 71860, 72081,
            72302, 72525, 72747, 72971, 73195,
            73420, 73646, 73872, 74099, 74327,
            74555, 74784, 75014, 75244, 75476,
            75707, 75940, 76173, 76407, 76642,
            76878, 77114, 77351, 77589, 77827,
            78066, 78306, 78547, 78788, 79030,
            79273, 79516, 79761, 80006, 80252,
            80498, 80746, 80994, 81243, 81492,
            81743, 81994, 82246, 82498, 82752,
            83006, 83261, 83517, 83774, 84031,
            84289, 84548, 84808, 85069, 85330,
            85592, 85855, 86119, 86384, 86649,
            86915, 87182, 87450, 87719, 87989,
            88259, 88530, 88802, 89075, 89349,
            89623, 89899, 90175, 90452, 90730,
            91009, 91288, 91569, 91850, 92132,
            92415, 92699, 92984, 93270, 93557,
            93844, 94132, 94422, 94712, 95003,
            95295, 95587, 95881, 96176, 96471,
            96768, 97065, 97363, 97662, 97963,
            98264, 98565, 98868, 99172, 99477,
            99783, 100089, 100397, 100705, 101015,
            101325, 101636, 101949, 102262, 102576,
            102891, 103207, 103525, 103843, 104162,
            104482, 104803, 105125, 105448, 105772,
            106097, 106423, 106750, 107078, 107407,
            107737, 108068, 108400, 108733, 109067,
            109402, 109738, 110076, 110414, 110753,
            111093, 111435, 111777, 112121, 112465,
            112811, 113157, 113505, 113854, 114204,
            114555, 114907, 115260, 115614, 115969,
            116325, 116683, 117041, 117401, 117762,
            118124, 118486, 118851, 119216, 119582,
            119949, 120318, 120688, 121059, 121431,
            121804, 122178, 122553, 122930, 123308,
            123687, 124067, 124448, 124830, 125214,
            125598, 125984, 126371, 126760, 127149,
            127540, 127932, 128325, 128719, 129115,
            129511, 129909, 130309, 130709, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071
         ) ),
        max_error = cms.double(5748.616225984908),
        output_scale_factor = cms.double(0.953125),
        unused_lsbs = cms.uint32(2)
    ),
    inv_mass_checks = cms.untracked.bool(False),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    sanity_checks = cms.untracked.bool(False),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    )
)


process.DoublePuppiJet112112 = cms.EDFilter("L1GTDoubleObjectCond",
    collection1 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 1.5),
        regionsMinPt = cms.vdouble(70, 51),
        tag = cms.InputTag("l1tGTProducer","CL2JetsSC4")
    ),
    collection2 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 1.5),
        regionsMinPt = cms.vdouble(70, 51),
        tag = cms.InputTag("l1tGTProducer","CL2JetsSC4")
    ),
    cos_phi_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            487, 487, 487, 487, 487,
            487, 487, 487, 487, 487,
            487, 486, 486, 486, 486,
            486, 486, 486, 485, 485,
            485, 485, 485, 485, 484,
            484, 484, 484, 484, 483,
            483, 483, 483, 483, 482,
            482, 482, 482, 481, 481,
            481, 481, 480, 480, 480,
            480, 479, 479, 479, 478,
            478, 478, 478, 477, 477,
            477, 476, 476, 476, 475,
            475, 475, 474, 474, 474,
            473, 473, 472, 472, 472,
            471, 471, 471, 470, 470,
            469, 469, 468, 468, 468,
            467, 467, 466, 466, 465,
            465, 465, 464, 464, 463,
            463, 462, 462, 461, 461,
            460, 460, 459, 459, 458,
            458, 457, 457, 456, 456,
            455, 454, 454, 453, 453,
            452, 452, 451, 451, 450,
            449, 449, 448, 448, 447,
            446, 446, 445, 445, 444,
            443, 443, 442, 441, 441,
            440, 440, 439, 438, 438,
            437, 436, 436, 435, 434,
            434, 433, 432, 431, 431,
            430, 429, 429, 428, 427,
            426, 426, 425, 424, 423,
            423, 422, 421, 420, 420,
            419, 418, 417, 417, 416,
            415, 414, 413, 413, 412,
            411, 410, 409, 409, 408,
            407, 406, 405, 405, 404,
            403, 402, 401, 400, 399,
            399, 398, 397, 396, 395,
            394, 393, 392, 392, 391,
            390, 389, 388, 387, 386,
            385, 384, 383, 382, 381,
            381, 380, 379, 378, 377,
            376, 375, 374, 373, 372,
            371, 370, 369, 368, 367,
            366, 365, 364, 363, 362,
            361, 360, 359, 358, 357,
            356, 355, 354, 353, 352,
            351, 350, 349, 348, 347,
            346, 345, 343, 342, 341,
            340, 339, 338, 337, 336,
            335, 334, 333, 332, 330,
            329, 328, 327, 326, 325,
            324, 323, 322, 320, 319,
            318, 317, 316, 315, 314,
            312, 311, 310, 309, 308,
            307, 306, 304, 303, 302,
            301, 300, 298, 297, 296,
            295, 294, 293, 291, 290,
            289, 288, 286, 285, 284,
            283, 282, 280, 279, 278,
            277, 275, 274, 273, 272,
            270, 269, 268, 267, 265,
            264, 263, 262, 260, 259,
            258, 257, 255, 254, 253,
            252, 250, 249, 248, 246,
            245, 244, 242, 241, 240,
            239, 237, 236, 235, 233,
            232, 231, 229, 228, 227,
            225, 224, 223, 221, 220,
            219, 217, 216, 215, 213,
            212, 211, 209, 208, 207,
            205, 204, 203, 201, 200,
            198, 197, 196, 194, 193,
            192, 190, 189, 187, 186,
            185, 183, 182, 181, 179,
            178, 176, 175, 174, 172,
            171, 169, 168, 167, 165,
            164, 162, 161, 159, 158,
            157, 155, 154, 152, 151,
            150, 148, 147, 145, 144,
            142, 141, 140, 138, 137,
            135, 134, 132, 131, 129,
            128, 127, 125, 124, 122,
            121, 119, 118, 116, 115,
            113, 112, 111, 109, 108,
            106, 105, 103, 102, 100,
            99, 97, 96, 94, 93,
            92, 90, 89, 87, 86,
            84, 83, 81, 80, 78,
            77, 75, 74, 72, 71,
            69, 68, 66, 65, 63,
            62, 60, 59, 58, 56,
            55, 53, 52, 50, 49,
            47, 46, 44, 43, 41,
            40, 38, 37, 35, 34,
            32, 31, 29, 28, 26,
            25, 23, 22, 20, 19,
            17, 16, 14, 13, 11,
            10, 8, 7, 5, 4,
            2, 1, -1, -2, -4,
            -5, -7, -8, -10, -11,
            -13, -14, -16, -17, -19,
            -20, -22, -23, -25, -26,
            -28, -29, -31, -32, -34,
            -35, -37, -38, -40, -41,
            -43, -44, -46, -47, -49,
            -50, -52, -53, -55, -56,
            -58, -59, -60, -62, -63,
            -65, -66, -68, -69, -71,
            -72, -74, -75, -77, -78,
            -80, -81, -83, -84, -86,
            -87, -89, -90, -92, -93,
            -94, -96, -97, -99, -100,
            -102, -103, -105, -106, -108,
            -109, -111, -112, -113, -115,
            -116, -118, -119, -121, -122,
            -124, -125, -127, -128, -129,
            -131, -132, -134, -135, -137,
            -138, -140, -141, -142, -144,
            -145, -147, -148, -150, -151,
            -152, -154, -155, -157, -158,
            -159, -161, -162, -164, -165,
            -167, -168, -169, -171, -172,
            -174, -175, -176, -178, -179,
            -181, -182, -183, -185, -186,
            -187, -189, -190, -192, -193,
            -194, -196, -197, -198, -200,
            -201, -203, -204, -205, -207,
            -208, -209, -211, -212, -213,
            -215, -216, -217, -219, -220,
            -221, -223, -224, -225, -227,
            -228, -229, -231, -232, -233,
            -235, -236, -237, -239, -240,
            -241, -242, -244, -245, -246,
            -248, -249, -250, -252, -253,
            -254, -255, -257, -258, -259,
            -260, -262, -263, -264, -265,
            -267, -268, -269, -270, -272,
            -273, -274, -275, -277, -278,
            -279, -280, -282, -283, -284,
            -285, -286, -288, -289, -290,
            -291, -293, -294, -295, -296,
            -297, -298, -300, -301, -302,
            -303, -304, -306, -307, -308,
            -309, -310, -311, -312, -314,
            -315, -316, -317, -318, -319,
            -320, -322, -323, -324, -325,
            -326, -327, -328, -329, -330,
            -332, -333, -334, -335, -336,
            -337, -338, -339, -340, -341,
            -342, -343, -345, -346, -347,
            -348, -349, -350, -351, -352,
            -353, -354, -355, -356, -357,
            -358, -359, -360, -361, -362,
            -363, -364, -365, -366, -367,
            -368, -369, -370, -371, -372,
            -373, -374, -375, -376, -377,
            -378, -379, -380, -381, -381,
            -382, -383, -384, -385, -386,
            -387, -388, -389, -390, -391,
            -392, -392, -393, -394, -395,
            -396, -397, -398, -399, -399,
            -400, -401, -402, -403, -404,
            -405, -405, -406, -407, -408,
            -409, -409, -410, -411, -412,
            -413, -413, -414, -415, -416,
            -417, -417, -418, -419, -420,
            -420, -421, -422, -423, -423,
            -424, -425, -426, -426, -427,
            -428, -429, -429, -430, -431,
            -431, -432, -433, -434, -434,
            -435, -436, -436, -437, -438,
            -438, -439, -440, -440, -441,
            -441, -442, -443, -443, -444,
            -445, -445, -446, -446, -447,
            -448, -448, -449, -449, -450,
            -451, -451, -452, -452, -453,
            -453, -454, -454, -455, -456,
            -456, -457, -457, -458, -458,
            -459, -459, -460, -460, -461,
            -461, -462, -462, -463, -463,
            -464, -464, -465, -465, -465,
            -466, -466, -467, -467, -468,
            -468, -468, -469, -469, -470,
            -470, -471, -471, -471, -472,
            -472, -472, -473, -473, -474,
            -474, -474, -475, -475, -475,
            -476, -476, -476, -477, -477,
            -477, -478, -478, -478, -478,
            -479, -479, -479, -480, -480,
            -480, -480, -481, -481, -481,
            -481, -482, -482, -482, -482,
            -483, -483, -483, -483, -483,
            -484, -484, -484, -484, -484,
            -485, -485, -485, -485, -485,
            -485, -486, -486, -486, -486,
            -486, -486, -486, -487, -487,
            -487, -487, -487, -487, -487,
            -487, -487, -487, -487, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488
         ) ),
        max_error = cms.double(0.0025338281044886835),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            489, 489, 489, 489, 489,
            489, 489, 489, 489, 489,
            489, 490, 490, 490, 490,
            490, 490, 490, 491, 491,
            491, 491, 491, 491, 492,
            492, 492, 492, 492, 493,
            493, 493, 493, 493, 494,
            494, 494, 494, 495, 495,
            495, 495, 496, 496, 496,
            496, 497, 497, 497, 498,
            498, 498, 499, 499, 499,
            499, 500, 500, 500, 501,
            501, 502, 502, 502, 503,
            503, 503, 504, 504, 504,
            505, 505, 506, 506, 507,
            507, 507, 508, 508, 509,
            509, 510, 510, 510, 511,
            511, 512, 512, 513, 513,
            514, 514, 515, 515, 516,
            516, 517, 517, 518, 518,
            519, 520, 520, 521, 521,
            522, 522, 523, 523, 524,
            525, 525, 526, 526, 527,
            528, 528, 529, 530, 530,
            531, 531, 532, 533, 533,
            534, 535, 535, 536, 537,
            537, 538, 539, 540, 540,
            541, 542, 542, 543, 544,
            545, 545, 546, 547, 548,
            548, 549, 550, 551, 551,
            552, 553, 554, 555, 555,
            556, 557, 558, 559, 560,
            560, 561, 562, 563, 564,
            565, 566, 567, 567, 568,
            569, 570, 571, 572, 573,
            574, 575, 576, 577, 577,
            578, 579, 580, 581, 582,
            583, 584, 585, 586, 587,
            588, 589, 590, 591, 592,
            593, 594, 595, 596, 598,
            599, 600, 601, 602, 603,
            604, 605, 606, 607, 608,
            610, 611, 612, 613, 614,
            615, 616, 618, 619, 620,
            621, 622, 623, 625, 626,
            627, 628, 629, 631, 632,
            633, 634, 636, 637, 638,
            639, 641, 642, 643, 644,
            646, 647, 648, 650, 651,
            652, 654, 655, 656, 658,
            659, 660, 662, 663, 665,
            666, 667, 669, 670, 672,
            673, 674, 676, 677, 679,
            680, 682, 683, 685, 686,
            687, 689, 690, 692, 693,
            695, 697, 698, 700, 701,
            703, 704, 706, 707, 709,
            710, 712, 714, 715, 717,
            719, 720, 722, 723, 725,
            727, 728, 730, 732, 733,
            735, 737, 738, 740, 742,
            744, 745, 747, 749, 750,
            752, 754, 756, 758, 759,
            761, 763, 765, 767, 768,
            770, 772, 774, 776, 778,
            779, 781, 783, 785, 787,
            789, 791, 793, 795, 796,
            798, 800, 802, 804, 806,
            808, 810, 812, 814, 816,
            818, 820, 822, 824, 826,
            828, 830, 832, 835, 837,
            839, 841, 843, 845, 847,
            849, 851, 854, 856, 858,
            860, 862, 864, 867, 869,
            871, 873, 875, 878, 880,
            882, 884, 887, 889, 891,
            894, 896, 898, 900, 903,
            905, 907, 910, 912, 915,
            917, 919, 922, 924, 927,
            929, 931, 934, 936, 939,
            941, 944, 946, 949, 951,
            954, 956, 959, 961, 964,
            966, 969, 971, 974, 977,
            979, 982, 984, 987, 990,
            992, 995, 998, 1000, 1003,
            1006, 1008, 1011, 1014, 1017,
            1019, 1022, 1025, 1028, 1030,
            1033, 1036, 1039, 1042, 1044,
            1047, 1050, 1053, 1056, 1059,
            1062, 1065, 1067, 1070, 1073,
            1076, 1079, 1082, 1085, 1088,
            1091, 1094, 1097, 1100, 1103,
            1106, 1109, 1112, 1115, 1118,
            1122, 1125, 1128, 1131, 1134,
            1137, 1140, 1143, 1147, 1150,
            1153, 1156, 1159, 1163, 1166,
            1169, 1172, 1176, 1179, 1182,
            1186, 1189, 1192, 1196, 1199,
            1202, 1206, 1209, 1212, 1216,
            1219, 1223, 1226, 1230, 1233,
            1237, 1240, 1244, 1247, 1251,
            1254, 1258, 1261, 1265, 1268,
            1272, 1276, 1279, 1283, 1287,
            1290, 1294, 1298, 1301, 1305,
            1309, 1312, 1316, 1320, 1324,
            1327, 1331, 1335, 1339, 1343,
            1347, 1350, 1354, 1358, 1362,
            1366, 1370, 1374, 1378, 1382,
            1386, 1390, 1394, 1398, 1402,
            1406, 1410, 1414, 1418, 1422,
            1426, 1430, 1434, 1439, 1443,
            1447, 1451, 1455, 1459, 1464,
            1468, 1472, 1476, 1481, 1485,
            1489, 1494, 1498, 1502, 1507,
            1511, 1516, 1520, 1524, 1529,
            1533, 1538, 1542, 1547, 1551,
            1556, 1560, 1565, 1569, 1574,
            1579, 1583, 1588, 1592, 1597,
            1602, 1606, 1611, 1616, 1621,
            1625, 1630, 1635, 1640, 1645,
            1649, 1654, 1659, 1664, 1669,
            1674, 1679, 1684, 1689, 1693,
            1698, 1703, 1708, 1714, 1719,
            1724, 1729, 1734, 1739, 1744,
            1749, 1754, 1760, 1765, 1770,
            1775, 1780, 1786, 1791, 1796,
            1802, 1807, 1812, 1818, 1823,
            1828, 1834, 1839, 1845, 1850,
            1856, 1861, 1867, 1872, 1878,
            1883, 1889, 1894, 1900, 1906,
            1911, 1917, 1923, 1929, 1934,
            1940, 1946, 1952, 1957, 1963,
            1969, 1975, 1981, 1987, 1993,
            1999, 2004, 2010, 2016, 2022,
            2028, 2035, 2041, 2047, 2053,
            2059, 2065, 2071, 2077, 2084,
            2090, 2096, 2102, 2109, 2115,
            2121, 2128, 2134, 2140, 2147,
            2153, 2160, 2166, 2173, 2179,
            2186, 2192, 2199, 2205, 2212,
            2219, 2225, 2232, 2239, 2245,
            2252, 2259, 2266, 2272, 2279,
            2286, 2293, 2300, 2307, 2314,
            2321, 2328, 2335, 2342, 2349,
            2356, 2363, 2370, 2377, 2384,
            2391, 2398, 2406, 2413, 2420,
            2427, 2435, 2442, 2449, 2457,
            2464, 2472, 2479, 2487, 2494,
            2502, 2509, 2517, 2524, 2532,
            2539, 2547, 2555, 2563, 2570,
            2578, 2586, 2594, 2601, 2609,
            2617, 2625, 2633, 2641, 2649,
            2657, 2665, 2673, 2681, 2689,
            2697, 2705, 2714, 2722, 2730,
            2738, 2747, 2755, 2763, 2772,
            2780, 2788, 2797, 2805, 2814,
            2822, 2831, 2839, 2848, 2857,
            2865, 2874, 2883, 2891, 2900,
            2909, 2918, 2927, 2935, 2944,
            2953, 2962, 2971, 2980, 2989,
            2998, 3007, 3016, 3026, 3035,
            3044, 3053, 3062, 3072, 3081,
            3090, 3100, 3109, 3119, 3128,
            3138, 3147, 3157, 3166, 3176,
            3186, 3195, 3205, 3215, 3224,
            3234, 3244, 3254, 3264, 3274,
            3284, 3294, 3304, 3314, 3324,
            3334, 3344, 3354, 3364, 3375,
            3385, 3395, 3405, 3416, 3426,
            3437, 3447, 3458, 3468, 3479,
            3489, 3500, 3510, 3521, 3532,
            3543, 3553, 3564, 3575, 3586,
            3597, 3608, 3619, 3630, 3641,
            3652, 3663, 3674, 3685, 3697,
            3708, 3719, 3730, 3742, 3753,
            3765, 3776, 3788, 3799, 3811,
            3822, 3834, 3846, 3857, 3869,
            3881, 3893, 3905, 3917, 3929,
            3941, 3953, 3965, 3977, 3989,
            4001, 4013, 4025, 4038, 4050,
            4062, 4075, 4087, 4100, 4112,
            4125, 4137, 4150, 4163, 4175,
            4188, 4201, 4214, 4226, 4239,
            4252, 4265, 4278, 4291, 4304,
            4318, 4331, 4344, 4357, 4371,
            4384, 4397, 4411, 4424, 4438,
            4451, 4465, 4479, 4492, 4506,
            4520, 4533, 4547, 4561, 4575,
            4589, 4603, 4617, 4631, 4645,
            4660, 4674, 4688, 4703, 4717,
            4731, 4746, 4760, 4775, 4789,
            4804, 4819, 4833, 4848, 4863,
            4878, 4893, 4908, 4923, 4938,
            4953, 4968, 4983, 4999, 5014,
            5029, 5045, 5060, 5075, 5091,
            5107, 5122, 5138, 5154, 5169,
            5185, 5201, 5217, 5233, 5249,
            5265, 5281, 5297, 5313, 5330,
            5346, 5362, 5379, 5395, 5412,
            5428, 5445, 5462, 5478, 5495,
            5512, 5529, 5546, 5563, 5580,
            5597, 5614, 5631, 5648, 5666,
            5683, 5700, 5718, 5735, 5753,
            5770, 5788, 5806, 5824, 5841,
            5859, 5877, 5895, 5913, 5931,
            5950, 5968, 5986, 6004, 6023,
            6041, 6060, 6078, 6097, 6116,
            6134, 6153, 6172, 6191, 6210,
            6229, 6248, 6267, 6286, 6305,
            6325, 6344, 6364, 6383, 6403,
            6422, 6442, 6462, 6481, 6501,
            6521, 6541, 6561, 6581, 6602,
            6622, 6642, 6662, 6683, 6703,
            6724, 6744, 6765, 6786, 6807,
            6828, 6848, 6869, 6891, 6912,
            6933, 6954, 6975, 6997, 7018,
            7040, 7061, 7083, 7105, 7126,
            7148, 7170, 7192, 7214, 7236,
            7259, 7281, 7303, 7325, 7348,
            7370, 7393, 7416, 7438, 7461,
            7484, 7507, 7530, 7553, 7576,
            7600, 7623, 7646, 7670, 7693,
            7717, 7741, 7764, 7788, 7812,
            7836, 7860, 7884, 7908, 7932,
            7957, 7981, 8006, 8030, 8055,
            8080, 8104, 8129, 8154, 8179,
            8204, 8229, 8255, 8280, 8305,
            8331, 8356, 8382, 8408, 8434,
            8459, 8485, 8511, 8537, 8564,
            8590, 8616, 8643, 8669, 8696,
            8722, 8749, 8776, 8803, 8830,
            8857, 8884, 8912, 8939, 8966,
            8994, 9021, 9049, 9077, 9105,
            9133, 9161, 9189, 9217, 9245,
            9274, 9302, 9331, 9359, 9388,
            9417, 9446, 9475, 9504, 9533,
            9562, 9591, 9621, 9650, 9680,
            9710, 9740, 9769, 9799, 9830,
            9860, 9890, 9920, 9951, 9981,
            10012, 10043, 10073, 10104, 10135,
            10166, 10198, 10229, 10260, 10292,
            10323, 10355, 10387, 10419, 10451,
            10483, 10515, 10547, 10580, 10612,
            10645, 10677, 10710, 10743, 10776,
            10809, 10842, 10876, 10909, 10942,
            10976, 11010, 11044, 11077, 11111,
            11146, 11180, 11214, 11248, 11283,
            11318, 11352, 11387, 11422, 11457,
            11492, 11528, 11563, 11599, 11634,
            11670, 11706, 11742, 11778, 11814,
            11850, 11887, 11923, 11960, 11996,
            12033, 12070, 12107, 12144, 12182,
            12219, 12257, 12294, 12332, 12370,
            12408, 12446, 12484, 12522, 12561,
            12599, 12638, 12677, 12716, 12755,
            12794, 12833, 12873, 12912, 12952,
            12992, 13032, 13072, 13112, 13152,
            13192, 13233, 13274, 13314, 13355,
            13396, 13437, 13479, 13520, 13561,
            13603, 13645, 13687, 13729, 13771,
            13813, 13856, 13898, 13941, 13984,
            14027, 14070, 14113, 14156, 14200,
            14243, 14287, 14331, 14375, 14419,
            14463, 14508, 14552, 14597, 14642,
            14687, 14732, 14777, 14823, 14868,
            14914, 14960, 15005, 15052, 15098,
            15144, 15191, 15237, 15284, 15331,
            15378, 15425, 15473, 15520, 15568,
            15616, 15664, 15712, 15760, 15808,
            15857, 15906, 15955, 16004, 16053,
            16102, 16151, 16201, 16251, 16301,
            16351, 16401, 16451, 16502, 16553,
            16603, 16654, 16706, 16757, 16808,
            16860, 16912, 16964, 17016, 17068,
            17121, 17173, 17226, 17279, 17332,
            17385, 17438, 17492, 17546, 17600,
            17654, 17708, 17762, 17817, 17872,
            17926, 17982, 18037, 18092, 18148,
            18203, 18259, 18315, 18372, 18428,
            18485, 18542, 18598, 18656, 18713,
            18770, 18828, 18886, 18944, 19002,
            19060, 19119, 19178, 19237, 19296,
            19355, 19414, 19474, 19534, 19594,
            19654, 19714, 19775, 19836, 19897,
            19958, 20019, 20081, 20142, 20204,
            20266, 20328, 20391, 20454, 20516,
            20579, 20643, 20706, 20770, 20833,
            20897, 20962, 21026, 21091, 21155,
            21220, 21286, 21351, 21417, 21482,
            21548, 21615, 21681, 21748, 21814,
            21881, 21949, 22016, 22084, 22151,
            22220, 22288, 22356, 22425, 22494,
            22563, 22632, 22702, 22771, 22841,
            22912, 22982, 23053, 23123, 23194,
            23266, 23337, 23409, 23481, 23553,
            23625, 23698, 23771, 23844, 23917,
            23990, 24064, 24138, 24212, 24287,
            24361, 24436, 24511, 24586, 24662,
            24738, 24814, 24890, 24966, 25043,
            25120, 25197, 25275, 25352, 25430,
            25508, 25587, 25665, 25744, 25823,
            25902, 25982, 26062, 26142, 26222,
            26303, 26384, 26465, 26546, 26627,
            26709, 26791, 26874, 26956, 27039,
            27122, 27205, 27289, 27373, 27457,
            27541, 27626, 27711, 27796, 27881,
            27967, 28053, 28139, 28226, 28312,
            28399, 28486, 28574, 28662, 28750,
            28838, 28927, 29016, 29105, 29194,
            29284, 29374, 29464, 29555, 29645,
            29736, 29828, 29919, 30011, 30104,
            30196, 30289, 30382, 30475, 30569,
            30663, 30757, 30851, 30946, 31041,
            31137, 31232, 31328, 31425, 31521,
            31618, 31715, 31813, 31910, 32008,
            32107, 32205, 32304, 32403, 32503,
            32603, 32703, 32804, 32904, 33005,
            33107, 33209, 33311, 33413, 33516,
            33619, 33722, 33825, 33929, 34034,
            34138, 34243, 34348, 34454, 34560,
            34666, 34772, 34879, 34986, 35094,
            35202, 35310, 35418, 35527, 35636,
            35746, 35856, 35966, 36076, 36187,
            36298, 36410, 36522, 36634, 36746,
            36859, 36973, 37086, 37200, 37314,
            37429, 37544, 37659, 37775, 37891,
            38008, 38124, 38241, 38359, 38477,
            38595, 38714, 38833, 38952, 39072,
            39192, 39312, 39433, 39554, 39675,
            39797, 39920, 40042, 40165, 40289,
            40413, 40537, 40661, 40786, 40911,
            41037, 41163, 41290, 41417, 41544,
            41671, 41800, 41928, 42057, 42186,
            42316, 42446, 42576, 42707, 42838,
            42970, 43102, 43234, 43367, 43500,
            43634, 43768, 43902, 44037, 44173,
            44308, 44444, 44581, 44718, 44855,
            44993, 45131, 45270, 45409, 45549,
            45689, 45829, 45970, 46111, 46253,
            46395, 46537, 46680, 46824, 46968,
            47112, 47257, 47402, 47548, 47694,
            47840, 47987, 48135, 48283, 48431,
            48580, 48729, 48879, 49029, 49180,
            49331, 49482, 49634, 49787, 49940,
            50093, 50247, 50401, 50556, 50712,
            50867, 51024, 51181, 51338, 51495,
            51654, 51812, 51972, 52131, 52291,
            52452, 52613, 52775, 52937, 53100,
            53263, 53427, 53591, 53755, 53921,
            54086, 54252, 54419, 54586, 54754,
            54922, 55091, 55260, 55430, 55600,
            55771, 55943, 56114, 56287, 56460,
            56633, 56807, 56982, 57157, 57333,
            57509, 57685, 57863, 58040, 58219,
            58398, 58577, 58757, 58938, 59119,
            59300, 59483, 59665, 59849, 60033,
            60217, 60402, 60588, 60774, 60960,
            61148, 61336, 61524, 61713, 61903,
            62093, 62284, 62475, 62667, 62860,
            63053, 63247, 63441, 63636, 63831,
            64027, 64224, 64422, 64619, 64818,
            65017, 65217, 65417, 65618, 65820,
            66022, 66225, 66429, 66633, 66837,
            67043, 67249, 67455, 67663, 67870,
            68079, 68288, 68498, 68708, 68920,
            69131, 69344, 69557, 69771, 69985,
            70200, 70416, 70632, 70849, 71067,
            71285, 71504, 71724, 71944, 72165,
            72387, 72609, 72833, 73056, 73281,
            73506, 73732, 73958, 74186, 74414,
            74642, 74872, 75102, 75332, 75564,
            75796, 76029, 76262, 76497, 76732,
            76968, 77204, 77441, 77679, 77918,
            78157, 78398, 78638, 78880, 79122,
            79366, 79609, 79854, 80099, 80345,
            80592, 80840, 81088, 81338, 81587,
            81838, 82090, 82342, 82595, 82849,
            83103, 83358, 83615, 83872, 84129,
            84388, 84647, 84907, 85168, 85430,
            85692, 85955, 86220, 86485, 86750,
            87017, 87284, 87552, 87821, 88091,
            88362, 88633, 88906, 89179, 89453,
            89728, 90003, 90280, 90557, 90836,
            91115, 91395, 91676, 91957, 92240,
            92523, 92807, 93093, 93379, 93666,
            93953, 94242, 94532, 94822, 95113,
            95406, 95699, 95993, 96288, 96584,
            96881, 97178, 97477, 97776, 98077,
            98378, 98680, 98984, 99288, 99593,
            99899, 100206, 100514, 100822, 101132,
            101443, 101755, 102067, 102381, 102696,
            103011, 103328, 103645, 103964, 104283,
            104603, 104925, 105247, 105571, 105895,
            106220, 106547, 106874, 107203, 107532,
            107862, 108194, 108526, 108860, 109194,
            109530, 109866, 110204, 110542, 110882,
            111223, 111565, 111907, 112251, 112596,
            112942, 113289, 113637, 113986, 114337,
            114688, 115040, 115394, 115748, 116104,
            116461, 116819, 117178, 117538, 117899,
            118261, 118624, 118989, 119354, 119721,
            120089, 120458, 120828, 121199, 121572,
            121945, 122320, 122696, 123073, 123451,
            123830, 124211, 124593, 124975, 125359,
            125745, 126131, 126518, 126907, 127297,
            127688, 128081, 128474, 128869, 129265,
            129662, 130061, 130260
         ) ),
        max_error = cms.double(0.6152529479288091),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut2 = cms.PSet(
        lut = cms.vint32( (
            256, 256, 257, 258, 259,
            260, 260, 261, 262, 263,
            264, 264, 265, 266, 267,
            268, 268, 269, 270, 271,
            272, 273, 273, 274, 275,
            276, 277, 278, 279, 279,
            280, 281, 282, 283, 284,
            285, 285, 286, 287, 288,
            289, 290, 291, 292, 293,
            293, 294, 295, 296, 297,
            298, 299, 300, 301, 302,
            303, 303, 304, 305, 306,
            307, 308, 309, 310, 311,
            312, 313, 314, 315, 316,
            317, 318, 319, 320, 321,
            322, 323, 324, 325, 326,
            327, 328, 329, 330, 331,
            332, 333, 334, 335, 336,
            337, 338, 339, 340, 341,
            342, 343, 344, 345, 346,
            347, 348, 349, 351, 352,
            353, 354, 355, 356, 357,
            358, 359, 360, 361, 363,
            364, 365, 366, 367, 368,
            369, 370, 372, 373, 374,
            375, 376, 377, 379, 380,
            381, 382, 383, 384, 386,
            387, 388, 389, 390, 392,
            393, 394, 395, 396, 398,
            399, 400, 401, 402, 404,
            405, 406, 407, 409, 410,
            411, 412, 414, 415, 416,
            418, 419, 420, 421, 423,
            424, 425, 427, 428, 429,
            431, 432, 433, 435, 436,
            437, 439, 440, 441, 443,
            444, 445, 447, 448, 449,
            451, 452, 454, 455, 456,
            458, 459, 461, 462, 463,
            465, 466, 468, 469, 471,
            472, 474, 475, 476, 478,
            479, 481, 482, 484, 485,
            487, 488, 490, 491, 493,
            494, 496, 497, 499, 500,
            502, 503, 505, 507, 508,
            510, 511, 513, 514, 516,
            518, 519, 521, 522, 524,
            526, 527, 529, 530, 532,
            534, 535, 537, 539, 540,
            542, 544, 545, 547, 549,
            550, 552, 554, 555, 557,
            559, 561, 562, 564, 566,
            567, 569, 571, 573, 575,
            576, 578, 580, 582, 583,
            585, 587, 589, 591, 592,
            594, 596, 598, 600, 602,
            603, 605, 607, 609, 611,
            613, 615, 617, 618, 620,
            622, 624, 626, 628, 630,
            632, 634, 636, 638, 640,
            642, 644, 646, 648, 650,
            652, 654, 656, 658, 660,
            662, 664, 666, 668, 670,
            672, 674, 676, 678, 680,
            682, 684, 686, 688, 691,
            693, 695, 697, 699, 701,
            703, 706, 708, 710, 712,
            714, 717, 719, 721, 723,
            725, 728, 730, 732, 734,
            737, 739, 741, 743, 746,
            748, 750, 753, 755, 757,
            760, 762, 764, 767, 769,
            771, 774, 776, 778, 781,
            783, 786, 788, 790, 793,
            795, 798, 800, 803, 805,
            808, 810, 813, 815, 818,
            820, 823, 825, 828, 830,
            833, 835, 838, 840, 843,
            846, 848, 851, 853, 856,
            859, 861, 864, 867, 869,
            872, 875, 877, 880, 883,
            885, 888, 891, 894, 896,
            899, 902, 905, 907, 910,
            913, 916, 919, 921, 924,
            927, 930, 933, 936, 939,
            941, 944, 947, 950, 953,
            956, 959, 962, 965, 968,
            971, 974, 977, 980, 983,
            986, 989, 992, 995, 998,
            1001, 1004, 1007, 1010, 1013,
            1017, 1020, 1023, 1026, 1029,
            1032, 1035, 1039, 1042, 1045,
            1048, 1051, 1055, 1058, 1061,
            1064, 1068, 1071, 1074, 1078,
            1081, 1084, 1088, 1091, 1094,
            1098, 1101, 1104, 1108, 1111,
            1115, 1118, 1121, 1125, 1128,
            1132, 1135, 1139, 1142, 1146,
            1149, 1153, 1156, 1160, 1163,
            1167, 1171, 1174, 1178, 1181,
            1185, 1189, 1192, 1196, 1200,
            1203, 1207, 1211, 1214, 1218,
            1222, 1226, 1229, 1233, 1237,
            1241, 1245, 1249, 1252, 1256,
            1260, 1264, 1268, 1272, 1276,
            1280, 1283, 1287, 1291, 1295,
            1299, 1303, 1307, 1311, 1315,
            1319, 1323, 1328, 1332, 1336,
            1340, 1344, 1348, 1352, 1356,
            1360, 1365, 1369, 1373, 1377,
            1382, 1386, 1390, 1394, 1399,
            1403, 1407, 1412, 1416, 1420,
            1425, 1429, 1433, 1438, 1442,
            1447, 1451, 1455, 1460, 1464,
            1469, 1473, 1478, 1483, 1487,
            1492, 1496, 1501, 1505, 1510,
            1515, 1519, 1524, 1529, 1533,
            1538, 1543, 1548, 1552, 1557,
            1562, 1567, 1572, 1576, 1581,
            1586, 1591, 1596, 1601, 1606,
            1611, 1616, 1620, 1625, 1630,
            1635, 1640, 1646, 1651, 1656,
            1661, 1666, 1671, 1676, 1681,
            1686, 1692, 1697, 1702, 1707,
            1712, 1718, 1723, 1728, 1734,
            1739, 1744, 1750, 1755, 1760,
            1766, 1771, 1777, 1782, 1788,
            1793, 1799, 1804, 1810, 1815,
            1821, 1826, 1832, 1838, 1843,
            1849, 1855, 1860, 1866, 1872,
            1878, 1883, 1889, 1895, 1901,
            1907, 1912, 1918, 1924, 1930,
            1936, 1942, 1948, 1954, 1960,
            1966, 1972, 1978, 1984, 1990,
            1996, 2003, 2009, 2015, 2021,
            2027, 2033, 2040, 2046, 2052,
            2059, 2065, 2071, 2078, 2084,
            2090, 2097, 2103, 2110, 2116,
            2123, 2129, 2136, 2142, 2149,
            2156, 2162, 2169, 2175, 2182,
            2189, 2196, 2202, 2209, 2216,
            2223, 2230, 2236, 2243, 2250,
            2257, 2264, 2271, 2278, 2285,
            2292, 2299, 2306, 2313, 2320,
            2327, 2335, 2342, 2349, 2356,
            2363, 2371, 2378, 2385, 2393,
            2400, 2407, 2415, 2422, 2430,
            2437, 2444, 2452, 2460, 2467,
            2475, 2482, 2490, 2498, 2505,
            2513, 2521, 2528, 2536, 2544,
            2552, 2560, 2567, 2575, 2583,
            2591, 2599, 2607, 2615, 2623,
            2631, 2639, 2647, 2656, 2664,
            2672, 2680, 2688, 2697, 2705,
            2713, 2722, 2730, 2738, 2747,
            2755, 2764, 2772, 2781, 2789,
            2798, 2806, 2815, 2824, 2832,
            2841, 2850, 2858, 2867, 2876,
            2885, 2894, 2903, 2912, 2921,
            2930, 2939, 2948, 2957, 2966,
            2975, 2984, 2993, 3002, 3012,
            3021, 3030, 3039, 3049, 3058,
            3067, 3077, 3086, 3096, 3105,
            3115, 3124, 3134, 3144, 3153,
            3163, 3173, 3183, 3192, 3202,
            3212, 3222, 3232, 3242, 3252,
            3262, 3272, 3282, 3292, 3302,
            3312, 3322, 3332, 3343, 3353,
            3363, 3374, 3384, 3394, 3405,
            3415, 3426, 3436, 3447, 3457,
            3468, 3479, 3489, 3500, 3511,
            3522, 3532, 3543, 3554, 3565,
            3576, 3587, 3598, 3609, 3620,
            3631, 3642, 3654, 3665, 3676,
            3687, 3699, 3710, 3722, 3733,
            3744, 3756, 3767, 3779, 3791,
            3802, 3814, 3826, 3837, 3849,
            3861, 3873, 3885, 3897, 3909,
            3921, 3933, 3945, 3957, 3969,
            3981, 3994, 4006, 4018, 4031,
            4043, 4055, 4068, 4080, 4093,
            4105, 4118, 4131, 4143, 4156,
            4169, 4182, 4195, 4207, 4220,
            4233, 4246, 4259, 4272, 4286,
            4299, 4312, 4325, 4339, 4352,
            4365, 4379, 4392, 4406, 4419,
            4433, 4446, 4460, 4474, 4487,
            4501, 4515, 4529, 4543, 4557,
            4571, 4585, 4599, 4613, 4627,
            4641, 4656, 4670, 4684, 4699,
            4713, 4728, 4742, 4757, 4771,
            4786, 4801, 4816, 4830, 4845,
            4860, 4875, 4890, 4905, 4920,
            4935, 4950, 4966, 4981, 4996,
            5011, 5027, 5042, 5058, 5073,
            5089, 5105, 5120, 5136, 5152,
            5168, 5183, 5199, 5215, 5231,
            5247, 5264, 5280, 5296, 5312,
            5329, 5345, 5361, 5378, 5394,
            5411, 5428, 5444, 5461, 5478,
            5495, 5512, 5528, 5545, 5562,
            5580, 5597, 5614, 5631, 5648,
            5666, 5683, 5701, 5718, 5736,
            5753, 5771, 5789, 5807, 5824,
            5842, 5860, 5878, 5896, 5914,
            5933, 5951, 5969, 5987, 6006,
            6024, 6043, 6061, 6080, 6099,
            6117, 6136, 6155, 6174, 6193,
            6212, 6231, 6250, 6269, 6289,
            6308, 6327, 6347, 6366, 6386,
            6406, 6425, 6445, 6465, 6485,
            6505, 6525, 6545, 6565, 6585,
            6605, 6625, 6646, 6666, 6687,
            6707, 6728, 6749, 6769, 6790,
            6811, 6832, 6853, 6874, 6895,
            6916, 6937, 6959, 6980, 7002,
            7023, 7045, 7066, 7088, 7110,
            7132, 7154, 7176, 7198, 7220,
            7242, 7264, 7286, 7309, 7331,
            7354, 7376, 7399, 7422, 7445,
            7468, 7490, 7513, 7537, 7560,
            7583, 7606, 7630, 7653, 7677,
            7700, 7724, 7748, 7771, 7795,
            7819, 7843, 7867, 7892, 7916,
            7940, 7964, 7989, 8014, 8038,
            8063, 8088, 8112, 8137, 8162,
            8187, 8213, 8238, 8263, 8289,
            8314, 8340, 8365, 8391, 8417,
            8443, 8468, 8495, 8521, 8547,
            8573, 8599, 8626, 8652, 8679,
            8706, 8732, 8759, 8786, 8813,
            8840, 8867, 8895, 8922, 8949,
            8977, 9004, 9032, 9060, 9088,
            9116, 9144, 9172, 9200, 9228,
            9256, 9285, 9313, 9342, 9371,
            9400, 9428, 9457, 9486, 9516,
            9545, 9574, 9604, 9633, 9663,
            9692, 9722, 9752, 9782, 9812,
            9842, 9872, 9903, 9933, 9964,
            9994, 10025, 10056, 10087, 10118,
            10149, 10180, 10211, 10243, 10274,
            10306, 10337, 10369, 10401, 10433,
            10465, 10497, 10529, 10562, 10594,
            10627, 10659, 10692, 10725, 10758,
            10791, 10824, 10858, 10891, 10924,
            10958, 10992, 11025, 11059, 11093,
            11127, 11161, 11196, 11230, 11265,
            11299, 11334, 11369, 11404, 11439,
            11474, 11509, 11545, 11580, 11616,
            11651, 11687, 11723, 11759, 11795,
            11831, 11868, 11904, 11941, 11978,
            12014, 12051, 12088, 12125, 12163,
            12200, 12238, 12275, 12313, 12351,
            12389, 12427, 12465, 12503, 12542,
            12580, 12619, 12658, 12696, 12735,
            12775, 12814, 12853, 12893, 12932,
            12972, 13012, 13052, 13092, 13132,
            13173, 13213, 13254, 13294, 13335,
            13376, 13417, 13459, 13500, 13541,
            13583, 13625, 13667, 13709, 13751,
            13793, 13835, 13878, 13920, 13963,
            14006, 14049, 14092, 14136, 14179,
            14223, 14266, 14310, 14354, 14398,
            14443, 14487, 14531, 14576, 14621,
            14666, 14711, 14756, 14801, 14847,
            14892, 14938, 14984, 15030, 15076,
            15123, 15169, 15216, 15263, 15309,
            15356, 15404, 15451, 15498, 15546,
            15594, 15642, 15690, 15738, 15786,
            15835, 15884, 15932, 15981, 16030,
            16080, 16129, 16179, 16228, 16278,
            16328, 16378, 16429, 16479, 16530,
            16581, 16632, 16683, 16734, 16785,
            16837, 16889, 16941, 16993, 17045,
            17097, 17150, 17202, 17255, 17308,
            17361, 17415, 17468, 17522, 17576,
            17630, 17684, 17738, 17793, 17848,
            17902, 17957, 18013, 18068, 18123,
            18179, 18235, 18291, 18347, 18404,
            18460, 18517, 18574, 18631, 18688,
            18746, 18803, 18861, 18919, 18977,
            19035, 19094, 19152, 19211, 19270,
            19330, 19389, 19448, 19508, 19568,
            19628, 19689, 19749, 19810, 19871,
            19932, 19993, 20054, 20116, 20178,
            20240, 20302, 20364, 20427, 20490,
            20553, 20616, 20679, 20743, 20806,
            20870, 20935, 20999, 21063, 21128,
            21193, 21258, 21323, 21389, 21455,
            21521, 21587, 21653, 21720, 21786,
            21853, 21920, 21988, 22055, 22123,
            22191, 22259, 22328, 22396, 22465,
            22534, 22603, 22673, 22742, 22812,
            22882, 22953, 23023, 23094, 23165,
            23236, 23308, 23379, 23451, 23523,
            23595, 23668, 23741, 23814, 23887,
            23960, 24034, 24108, 24182, 24256,
            24330, 24405, 24480, 24555, 24631,
            24707, 24783, 24859, 24935, 25012,
            25089, 25166, 25243, 25320, 25398,
            25476, 25555, 25633, 25712, 25791,
            25870, 25950, 26029, 26109, 26190,
            26270, 26351, 26432, 26513, 26594,
            26676, 26758, 26840, 26923, 27006,
            27088, 27172, 27255, 27339, 27423,
            27507, 27592, 27677, 27762, 27847,
            27932, 28018, 28104, 28191, 28277,
            28364, 28451, 28539, 28626, 28714,
            28803, 28891, 28980, 29069, 29158,
            29248, 29338, 29428, 29518, 29609,
            29700, 29791, 29883, 29975, 30067,
            30159, 30252, 30345, 30438, 30532,
            30625, 30719, 30814, 30909, 31003,
            31099, 31194, 31290, 31386, 31483,
            31579, 31677, 31774, 31871, 31969,
            32068, 32166, 32265, 32364, 32464,
            32563, 32663, 32764, 32864, 32965,
            33067, 33168, 33270, 33372, 33475,
            33578, 33681, 33785, 33888, 33992,
            34097, 34202, 34307, 34412, 34518,
            34624, 34730, 34837, 34944, 35051,
            35159, 35267, 35376, 35484, 35593,
            35703, 35812, 35922, 36033, 36144,
            36255, 36366, 36478, 36590, 36702,
            36815, 36928, 37042, 37155, 37270,
            37384, 37499, 37614, 37730, 37846,
            37962, 38079, 38196, 38313, 38431,
            38549, 38667, 38786, 38905, 39025,
            39145, 39265, 39386, 39507, 39628,
            39750, 39872, 39994, 40117, 40241,
            40364, 40488, 40613, 40737, 40863,
            40988, 41114, 41240, 41367, 41494,
            41622, 41750, 41878, 42007, 42136,
            42265, 42395, 42525, 42656, 42787,
            42919, 43050, 43183, 43315, 43448,
            43582, 43716, 43850, 43985, 44120,
            44256, 44392, 44528, 44665, 44802,
            44940, 45078, 45216, 45355, 45495,
            45634, 45775, 45915, 46056, 46198,
            46340, 46482, 46625, 46768, 46912,
            47056, 47201, 47346, 47491, 47637,
            47784, 47930, 48078, 48225, 48374,
            48522, 48671, 48821, 48971, 49121,
            49272, 49424, 49576, 49728, 49881,
            50034, 50188, 50342, 50497, 50652,
            50807, 50963, 51120, 51277, 51435,
            51593, 51751, 51910, 52070, 52230,
            52390, 52551, 52713, 52875, 53037,
            53200, 53364, 53528, 53692, 53857,
            54022, 54188, 54355, 54522, 54690,
            54858, 55026, 55195, 55365, 55535,
            55706, 55877, 56048, 56221, 56393,
            56567, 56740, 56915, 57090, 57265,
            57441, 57618, 57795, 57972, 58150,
            58329, 58508, 58688, 58868, 59049,
            59231, 59413, 59595, 59778, 59962,
            60146, 60331, 60516, 60702, 60889,
            61076, 61264, 61452, 61641, 61830,
            62020, 62211, 62402, 62594, 62786,
            62979, 63172, 63366, 63561, 63756,
            63952, 64149, 64346, 64544, 64742,
            64941, 65140, 65341, 65541, 65743,
            65945, 66147, 66351, 66555, 66759,
            66964, 67170, 67376, 67583, 67791,
            67999, 68208, 68418, 68628, 68839,
            69050, 69263, 69475, 69689, 69903,
            70118, 70333, 70549, 70766, 70984,
            71202, 71421, 71640, 71860, 72081,
            72302, 72525, 72747, 72971, 73195,
            73420, 73646, 73872, 74099, 74327,
            74555, 74784, 75014, 75244, 75476,
            75707, 75940, 76173, 76407, 76642,
            76878, 77114, 77351, 77589, 77827,
            78066, 78306, 78547, 78788, 79030,
            79273, 79516, 79761, 80006, 80252,
            80498, 80746, 80994, 81243, 81492,
            81743, 81994, 82246, 82498, 82752,
            83006, 83261, 83517, 83774, 84031,
            84289, 84548, 84808, 85069, 85330,
            85592, 85855, 86119, 86384, 86649,
            86915, 87182, 87450, 87719, 87989,
            88259, 88530, 88802, 89075, 89349,
            89623, 89899, 90175, 90452, 90730,
            91009, 91288, 91569, 91850, 92132,
            92415, 92699, 92984, 93270, 93557,
            93844, 94132, 94422, 94712, 95003,
            95295, 95587, 95881, 96176, 96471,
            96768, 97065, 97363, 97662, 97963,
            98264, 98565, 98868, 99172, 99477,
            99783, 100089, 100397, 100705, 101015,
            101325, 101636, 101949, 102262, 102576,
            102891, 103207, 103525, 103843, 104162,
            104482, 104803, 105125, 105448, 105772,
            106097, 106423, 106750, 107078, 107407,
            107737, 108068, 108400, 108733, 109067,
            109402, 109738, 110076, 110414, 110753,
            111093, 111435, 111777, 112121, 112465,
            112811, 113157, 113505, 113854, 114204,
            114555, 114907, 115260, 115614, 115969,
            116325, 116683, 117041, 117401, 117762,
            118124, 118486, 118851, 119216, 119582,
            119949, 120318, 120688, 121059, 121431,
            121804, 122178, 122553, 122930, 123308,
            123687, 124067, 124448, 124830, 125214,
            125598, 125984, 126371, 126760, 127149,
            127540, 127932, 128325, 128719, 129115,
            129511, 129909, 130309, 130709, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071
         ) ),
        max_error = cms.double(5748.616225984908),
        output_scale_factor = cms.double(0.953125),
        unused_lsbs = cms.uint32(2)
    ),
    inv_mass_checks = cms.untracked.bool(False),
    maxDEta = cms.double(1.6),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    sanity_checks = cms.untracked.bool(False),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    )
)


process.DoublePuppiJet16035Mass620 = cms.EDFilter("L1GTDoubleObjectCond",
    collection1 = cms.PSet(
        maxEta = cms.double(5),
        minEta = cms.double(-5),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 1.5),
        regionsMinPt = cms.vdouble(107, 74),
        tag = cms.InputTag("l1tGTProducer","CL2JetsSC4")
    ),
    collection2 = cms.PSet(
        maxEta = cms.double(5),
        minEta = cms.double(-5),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 1.5),
        regionsMinPt = cms.vdouble(25, 25),
        tag = cms.InputTag("l1tGTProducer","CL2JetsSC4")
    ),
    cos_phi_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            487, 487, 487, 487, 487,
            487, 487, 487, 487, 487,
            487, 486, 486, 486, 486,
            486, 486, 486, 485, 485,
            485, 485, 485, 485, 484,
            484, 484, 484, 484, 483,
            483, 483, 483, 483, 482,
            482, 482, 482, 481, 481,
            481, 481, 480, 480, 480,
            480, 479, 479, 479, 478,
            478, 478, 478, 477, 477,
            477, 476, 476, 476, 475,
            475, 475, 474, 474, 474,
            473, 473, 472, 472, 472,
            471, 471, 471, 470, 470,
            469, 469, 468, 468, 468,
            467, 467, 466, 466, 465,
            465, 465, 464, 464, 463,
            463, 462, 462, 461, 461,
            460, 460, 459, 459, 458,
            458, 457, 457, 456, 456,
            455, 454, 454, 453, 453,
            452, 452, 451, 451, 450,
            449, 449, 448, 448, 447,
            446, 446, 445, 445, 444,
            443, 443, 442, 441, 441,
            440, 440, 439, 438, 438,
            437, 436, 436, 435, 434,
            434, 433, 432, 431, 431,
            430, 429, 429, 428, 427,
            426, 426, 425, 424, 423,
            423, 422, 421, 420, 420,
            419, 418, 417, 417, 416,
            415, 414, 413, 413, 412,
            411, 410, 409, 409, 408,
            407, 406, 405, 405, 404,
            403, 402, 401, 400, 399,
            399, 398, 397, 396, 395,
            394, 393, 392, 392, 391,
            390, 389, 388, 387, 386,
            385, 384, 383, 382, 381,
            381, 380, 379, 378, 377,
            376, 375, 374, 373, 372,
            371, 370, 369, 368, 367,
            366, 365, 364, 363, 362,
            361, 360, 359, 358, 357,
            356, 355, 354, 353, 352,
            351, 350, 349, 348, 347,
            346, 345, 343, 342, 341,
            340, 339, 338, 337, 336,
            335, 334, 333, 332, 330,
            329, 328, 327, 326, 325,
            324, 323, 322, 320, 319,
            318, 317, 316, 315, 314,
            312, 311, 310, 309, 308,
            307, 306, 304, 303, 302,
            301, 300, 298, 297, 296,
            295, 294, 293, 291, 290,
            289, 288, 286, 285, 284,
            283, 282, 280, 279, 278,
            277, 275, 274, 273, 272,
            270, 269, 268, 267, 265,
            264, 263, 262, 260, 259,
            258, 257, 255, 254, 253,
            252, 250, 249, 248, 246,
            245, 244, 242, 241, 240,
            239, 237, 236, 235, 233,
            232, 231, 229, 228, 227,
            225, 224, 223, 221, 220,
            219, 217, 216, 215, 213,
            212, 211, 209, 208, 207,
            205, 204, 203, 201, 200,
            198, 197, 196, 194, 193,
            192, 190, 189, 187, 186,
            185, 183, 182, 181, 179,
            178, 176, 175, 174, 172,
            171, 169, 168, 167, 165,
            164, 162, 161, 159, 158,
            157, 155, 154, 152, 151,
            150, 148, 147, 145, 144,
            142, 141, 140, 138, 137,
            135, 134, 132, 131, 129,
            128, 127, 125, 124, 122,
            121, 119, 118, 116, 115,
            113, 112, 111, 109, 108,
            106, 105, 103, 102, 100,
            99, 97, 96, 94, 93,
            92, 90, 89, 87, 86,
            84, 83, 81, 80, 78,
            77, 75, 74, 72, 71,
            69, 68, 66, 65, 63,
            62, 60, 59, 58, 56,
            55, 53, 52, 50, 49,
            47, 46, 44, 43, 41,
            40, 38, 37, 35, 34,
            32, 31, 29, 28, 26,
            25, 23, 22, 20, 19,
            17, 16, 14, 13, 11,
            10, 8, 7, 5, 4,
            2, 1, -1, -2, -4,
            -5, -7, -8, -10, -11,
            -13, -14, -16, -17, -19,
            -20, -22, -23, -25, -26,
            -28, -29, -31, -32, -34,
            -35, -37, -38, -40, -41,
            -43, -44, -46, -47, -49,
            -50, -52, -53, -55, -56,
            -58, -59, -60, -62, -63,
            -65, -66, -68, -69, -71,
            -72, -74, -75, -77, -78,
            -80, -81, -83, -84, -86,
            -87, -89, -90, -92, -93,
            -94, -96, -97, -99, -100,
            -102, -103, -105, -106, -108,
            -109, -111, -112, -113, -115,
            -116, -118, -119, -121, -122,
            -124, -125, -127, -128, -129,
            -131, -132, -134, -135, -137,
            -138, -140, -141, -142, -144,
            -145, -147, -148, -150, -151,
            -152, -154, -155, -157, -158,
            -159, -161, -162, -164, -165,
            -167, -168, -169, -171, -172,
            -174, -175, -176, -178, -179,
            -181, -182, -183, -185, -186,
            -187, -189, -190, -192, -193,
            -194, -196, -197, -198, -200,
            -201, -203, -204, -205, -207,
            -208, -209, -211, -212, -213,
            -215, -216, -217, -219, -220,
            -221, -223, -224, -225, -227,
            -228, -229, -231, -232, -233,
            -235, -236, -237, -239, -240,
            -241, -242, -244, -245, -246,
            -248, -249, -250, -252, -253,
            -254, -255, -257, -258, -259,
            -260, -262, -263, -264, -265,
            -267, -268, -269, -270, -272,
            -273, -274, -275, -277, -278,
            -279, -280, -282, -283, -284,
            -285, -286, -288, -289, -290,
            -291, -293, -294, -295, -296,
            -297, -298, -300, -301, -302,
            -303, -304, -306, -307, -308,
            -309, -310, -311, -312, -314,
            -315, -316, -317, -318, -319,
            -320, -322, -323, -324, -325,
            -326, -327, -328, -329, -330,
            -332, -333, -334, -335, -336,
            -337, -338, -339, -340, -341,
            -342, -343, -345, -346, -347,
            -348, -349, -350, -351, -352,
            -353, -354, -355, -356, -357,
            -358, -359, -360, -361, -362,
            -363, -364, -365, -366, -367,
            -368, -369, -370, -371, -372,
            -373, -374, -375, -376, -377,
            -378, -379, -380, -381, -381,
            -382, -383, -384, -385, -386,
            -387, -388, -389, -390, -391,
            -392, -392, -393, -394, -395,
            -396, -397, -398, -399, -399,
            -400, -401, -402, -403, -404,
            -405, -405, -406, -407, -408,
            -409, -409, -410, -411, -412,
            -413, -413, -414, -415, -416,
            -417, -417, -418, -419, -420,
            -420, -421, -422, -423, -423,
            -424, -425, -426, -426, -427,
            -428, -429, -429, -430, -431,
            -431, -432, -433, -434, -434,
            -435, -436, -436, -437, -438,
            -438, -439, -440, -440, -441,
            -441, -442, -443, -443, -444,
            -445, -445, -446, -446, -447,
            -448, -448, -449, -449, -450,
            -451, -451, -452, -452, -453,
            -453, -454, -454, -455, -456,
            -456, -457, -457, -458, -458,
            -459, -459, -460, -460, -461,
            -461, -462, -462, -463, -463,
            -464, -464, -465, -465, -465,
            -466, -466, -467, -467, -468,
            -468, -468, -469, -469, -470,
            -470, -471, -471, -471, -472,
            -472, -472, -473, -473, -474,
            -474, -474, -475, -475, -475,
            -476, -476, -476, -477, -477,
            -477, -478, -478, -478, -478,
            -479, -479, -479, -480, -480,
            -480, -480, -481, -481, -481,
            -481, -482, -482, -482, -482,
            -483, -483, -483, -483, -483,
            -484, -484, -484, -484, -484,
            -485, -485, -485, -485, -485,
            -485, -486, -486, -486, -486,
            -486, -486, -486, -487, -487,
            -487, -487, -487, -487, -487,
            -487, -487, -487, -487, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488
         ) ),
        max_error = cms.double(0.0025338281044886835),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            489, 489, 489, 489, 489,
            489, 489, 489, 489, 489,
            489, 490, 490, 490, 490,
            490, 490, 490, 491, 491,
            491, 491, 491, 491, 492,
            492, 492, 492, 492, 493,
            493, 493, 493, 493, 494,
            494, 494, 494, 495, 495,
            495, 495, 496, 496, 496,
            496, 497, 497, 497, 498,
            498, 498, 499, 499, 499,
            499, 500, 500, 500, 501,
            501, 502, 502, 502, 503,
            503, 503, 504, 504, 504,
            505, 505, 506, 506, 507,
            507, 507, 508, 508, 509,
            509, 510, 510, 510, 511,
            511, 512, 512, 513, 513,
            514, 514, 515, 515, 516,
            516, 517, 517, 518, 518,
            519, 520, 520, 521, 521,
            522, 522, 523, 523, 524,
            525, 525, 526, 526, 527,
            528, 528, 529, 530, 530,
            531, 531, 532, 533, 533,
            534, 535, 535, 536, 537,
            537, 538, 539, 540, 540,
            541, 542, 542, 543, 544,
            545, 545, 546, 547, 548,
            548, 549, 550, 551, 551,
            552, 553, 554, 555, 555,
            556, 557, 558, 559, 560,
            560, 561, 562, 563, 564,
            565, 566, 567, 567, 568,
            569, 570, 571, 572, 573,
            574, 575, 576, 577, 577,
            578, 579, 580, 581, 582,
            583, 584, 585, 586, 587,
            588, 589, 590, 591, 592,
            593, 594, 595, 596, 598,
            599, 600, 601, 602, 603,
            604, 605, 606, 607, 608,
            610, 611, 612, 613, 614,
            615, 616, 618, 619, 620,
            621, 622, 623, 625, 626,
            627, 628, 629, 631, 632,
            633, 634, 636, 637, 638,
            639, 641, 642, 643, 644,
            646, 647, 648, 650, 651,
            652, 654, 655, 656, 658,
            659, 660, 662, 663, 665,
            666, 667, 669, 670, 672,
            673, 674, 676, 677, 679,
            680, 682, 683, 685, 686,
            687, 689, 690, 692, 693,
            695, 697, 698, 700, 701,
            703, 704, 706, 707, 709,
            710, 712, 714, 715, 717,
            719, 720, 722, 723, 725,
            727, 728, 730, 732, 733,
            735, 737, 738, 740, 742,
            744, 745, 747, 749, 750,
            752, 754, 756, 758, 759,
            761, 763, 765, 767, 768,
            770, 772, 774, 776, 778,
            779, 781, 783, 785, 787,
            789, 791, 793, 795, 796,
            798, 800, 802, 804, 806,
            808, 810, 812, 814, 816,
            818, 820, 822, 824, 826,
            828, 830, 832, 835, 837,
            839, 841, 843, 845, 847,
            849, 851, 854, 856, 858,
            860, 862, 864, 867, 869,
            871, 873, 875, 878, 880,
            882, 884, 887, 889, 891,
            894, 896, 898, 900, 903,
            905, 907, 910, 912, 915,
            917, 919, 922, 924, 927,
            929, 931, 934, 936, 939,
            941, 944, 946, 949, 951,
            954, 956, 959, 961, 964,
            966, 969, 971, 974, 977,
            979, 982, 984, 987, 990,
            992, 995, 998, 1000, 1003,
            1006, 1008, 1011, 1014, 1017,
            1019, 1022, 1025, 1028, 1030,
            1033, 1036, 1039, 1042, 1044,
            1047, 1050, 1053, 1056, 1059,
            1062, 1065, 1067, 1070, 1073,
            1076, 1079, 1082, 1085, 1088,
            1091, 1094, 1097, 1100, 1103,
            1106, 1109, 1112, 1115, 1118,
            1122, 1125, 1128, 1131, 1134,
            1137, 1140, 1143, 1147, 1150,
            1153, 1156, 1159, 1163, 1166,
            1169, 1172, 1176, 1179, 1182,
            1186, 1189, 1192, 1196, 1199,
            1202, 1206, 1209, 1212, 1216,
            1219, 1223, 1226, 1230, 1233,
            1237, 1240, 1244, 1247, 1251,
            1254, 1258, 1261, 1265, 1268,
            1272, 1276, 1279, 1283, 1287,
            1290, 1294, 1298, 1301, 1305,
            1309, 1312, 1316, 1320, 1324,
            1327, 1331, 1335, 1339, 1343,
            1347, 1350, 1354, 1358, 1362,
            1366, 1370, 1374, 1378, 1382,
            1386, 1390, 1394, 1398, 1402,
            1406, 1410, 1414, 1418, 1422,
            1426, 1430, 1434, 1439, 1443,
            1447, 1451, 1455, 1459, 1464,
            1468, 1472, 1476, 1481, 1485,
            1489, 1494, 1498, 1502, 1507,
            1511, 1516, 1520, 1524, 1529,
            1533, 1538, 1542, 1547, 1551,
            1556, 1560, 1565, 1569, 1574,
            1579, 1583, 1588, 1592, 1597,
            1602, 1606, 1611, 1616, 1621,
            1625, 1630, 1635, 1640, 1645,
            1649, 1654, 1659, 1664, 1669,
            1674, 1679, 1684, 1689, 1693,
            1698, 1703, 1708, 1714, 1719,
            1724, 1729, 1734, 1739, 1744,
            1749, 1754, 1760, 1765, 1770,
            1775, 1780, 1786, 1791, 1796,
            1802, 1807, 1812, 1818, 1823,
            1828, 1834, 1839, 1845, 1850,
            1856, 1861, 1867, 1872, 1878,
            1883, 1889, 1894, 1900, 1906,
            1911, 1917, 1923, 1929, 1934,
            1940, 1946, 1952, 1957, 1963,
            1969, 1975, 1981, 1987, 1993,
            1999, 2004, 2010, 2016, 2022,
            2028, 2035, 2041, 2047, 2053,
            2059, 2065, 2071, 2077, 2084,
            2090, 2096, 2102, 2109, 2115,
            2121, 2128, 2134, 2140, 2147,
            2153, 2160, 2166, 2173, 2179,
            2186, 2192, 2199, 2205, 2212,
            2219, 2225, 2232, 2239, 2245,
            2252, 2259, 2266, 2272, 2279,
            2286, 2293, 2300, 2307, 2314,
            2321, 2328, 2335, 2342, 2349,
            2356, 2363, 2370, 2377, 2384,
            2391, 2398, 2406, 2413, 2420,
            2427, 2435, 2442, 2449, 2457,
            2464, 2472, 2479, 2487, 2494,
            2502, 2509, 2517, 2524, 2532,
            2539, 2547, 2555, 2563, 2570,
            2578, 2586, 2594, 2601, 2609,
            2617, 2625, 2633, 2641, 2649,
            2657, 2665, 2673, 2681, 2689,
            2697, 2705, 2714, 2722, 2730,
            2738, 2747, 2755, 2763, 2772,
            2780, 2788, 2797, 2805, 2814,
            2822, 2831, 2839, 2848, 2857,
            2865, 2874, 2883, 2891, 2900,
            2909, 2918, 2927, 2935, 2944,
            2953, 2962, 2971, 2980, 2989,
            2998, 3007, 3016, 3026, 3035,
            3044, 3053, 3062, 3072, 3081,
            3090, 3100, 3109, 3119, 3128,
            3138, 3147, 3157, 3166, 3176,
            3186, 3195, 3205, 3215, 3224,
            3234, 3244, 3254, 3264, 3274,
            3284, 3294, 3304, 3314, 3324,
            3334, 3344, 3354, 3364, 3375,
            3385, 3395, 3405, 3416, 3426,
            3437, 3447, 3458, 3468, 3479,
            3489, 3500, 3510, 3521, 3532,
            3543, 3553, 3564, 3575, 3586,
            3597, 3608, 3619, 3630, 3641,
            3652, 3663, 3674, 3685, 3697,
            3708, 3719, 3730, 3742, 3753,
            3765, 3776, 3788, 3799, 3811,
            3822, 3834, 3846, 3857, 3869,
            3881, 3893, 3905, 3917, 3929,
            3941, 3953, 3965, 3977, 3989,
            4001, 4013, 4025, 4038, 4050,
            4062, 4075, 4087, 4100, 4112,
            4125, 4137, 4150, 4163, 4175,
            4188, 4201, 4214, 4226, 4239,
            4252, 4265, 4278, 4291, 4304,
            4318, 4331, 4344, 4357, 4371,
            4384, 4397, 4411, 4424, 4438,
            4451, 4465, 4479, 4492, 4506,
            4520, 4533, 4547, 4561, 4575,
            4589, 4603, 4617, 4631, 4645,
            4660, 4674, 4688, 4703, 4717,
            4731, 4746, 4760, 4775, 4789,
            4804, 4819, 4833, 4848, 4863,
            4878, 4893, 4908, 4923, 4938,
            4953, 4968, 4983, 4999, 5014,
            5029, 5045, 5060, 5075, 5091,
            5107, 5122, 5138, 5154, 5169,
            5185, 5201, 5217, 5233, 5249,
            5265, 5281, 5297, 5313, 5330,
            5346, 5362, 5379, 5395, 5412,
            5428, 5445, 5462, 5478, 5495,
            5512, 5529, 5546, 5563, 5580,
            5597, 5614, 5631, 5648, 5666,
            5683, 5700, 5718, 5735, 5753,
            5770, 5788, 5806, 5824, 5841,
            5859, 5877, 5895, 5913, 5931,
            5950, 5968, 5986, 6004, 6023,
            6041, 6060, 6078, 6097, 6116,
            6134, 6153, 6172, 6191, 6210,
            6229, 6248, 6267, 6286, 6305,
            6325, 6344, 6364, 6383, 6403,
            6422, 6442, 6462, 6481, 6501,
            6521, 6541, 6561, 6581, 6602,
            6622, 6642, 6662, 6683, 6703,
            6724, 6744, 6765, 6786, 6807,
            6828, 6848, 6869, 6891, 6912,
            6933, 6954, 6975, 6997, 7018,
            7040, 7061, 7083, 7105, 7126,
            7148, 7170, 7192, 7214, 7236,
            7259, 7281, 7303, 7325, 7348,
            7370, 7393, 7416, 7438, 7461,
            7484, 7507, 7530, 7553, 7576,
            7600, 7623, 7646, 7670, 7693,
            7717, 7741, 7764, 7788, 7812,
            7836, 7860, 7884, 7908, 7932,
            7957, 7981, 8006, 8030, 8055,
            8080, 8104, 8129, 8154, 8179,
            8204, 8229, 8255, 8280, 8305,
            8331, 8356, 8382, 8408, 8434,
            8459, 8485, 8511, 8537, 8564,
            8590, 8616, 8643, 8669, 8696,
            8722, 8749, 8776, 8803, 8830,
            8857, 8884, 8912, 8939, 8966,
            8994, 9021, 9049, 9077, 9105,
            9133, 9161, 9189, 9217, 9245,
            9274, 9302, 9331, 9359, 9388,
            9417, 9446, 9475, 9504, 9533,
            9562, 9591, 9621, 9650, 9680,
            9710, 9740, 9769, 9799, 9830,
            9860, 9890, 9920, 9951, 9981,
            10012, 10043, 10073, 10104, 10135,
            10166, 10198, 10229, 10260, 10292,
            10323, 10355, 10387, 10419, 10451,
            10483, 10515, 10547, 10580, 10612,
            10645, 10677, 10710, 10743, 10776,
            10809, 10842, 10876, 10909, 10942,
            10976, 11010, 11044, 11077, 11111,
            11146, 11180, 11214, 11248, 11283,
            11318, 11352, 11387, 11422, 11457,
            11492, 11528, 11563, 11599, 11634,
            11670, 11706, 11742, 11778, 11814,
            11850, 11887, 11923, 11960, 11996,
            12033, 12070, 12107, 12144, 12182,
            12219, 12257, 12294, 12332, 12370,
            12408, 12446, 12484, 12522, 12561,
            12599, 12638, 12677, 12716, 12755,
            12794, 12833, 12873, 12912, 12952,
            12992, 13032, 13072, 13112, 13152,
            13192, 13233, 13274, 13314, 13355,
            13396, 13437, 13479, 13520, 13561,
            13603, 13645, 13687, 13729, 13771,
            13813, 13856, 13898, 13941, 13984,
            14027, 14070, 14113, 14156, 14200,
            14243, 14287, 14331, 14375, 14419,
            14463, 14508, 14552, 14597, 14642,
            14687, 14732, 14777, 14823, 14868,
            14914, 14960, 15005, 15052, 15098,
            15144, 15191, 15237, 15284, 15331,
            15378, 15425, 15473, 15520, 15568,
            15616, 15664, 15712, 15760, 15808,
            15857, 15906, 15955, 16004, 16053,
            16102, 16151, 16201, 16251, 16301,
            16351, 16401, 16451, 16502, 16553,
            16603, 16654, 16706, 16757, 16808,
            16860, 16912, 16964, 17016, 17068,
            17121, 17173, 17226, 17279, 17332,
            17385, 17438, 17492, 17546, 17600,
            17654, 17708, 17762, 17817, 17872,
            17926, 17982, 18037, 18092, 18148,
            18203, 18259, 18315, 18372, 18428,
            18485, 18542, 18598, 18656, 18713,
            18770, 18828, 18886, 18944, 19002,
            19060, 19119, 19178, 19237, 19296,
            19355, 19414, 19474, 19534, 19594,
            19654, 19714, 19775, 19836, 19897,
            19958, 20019, 20081, 20142, 20204,
            20266, 20328, 20391, 20454, 20516,
            20579, 20643, 20706, 20770, 20833,
            20897, 20962, 21026, 21091, 21155,
            21220, 21286, 21351, 21417, 21482,
            21548, 21615, 21681, 21748, 21814,
            21881, 21949, 22016, 22084, 22151,
            22220, 22288, 22356, 22425, 22494,
            22563, 22632, 22702, 22771, 22841,
            22912, 22982, 23053, 23123, 23194,
            23266, 23337, 23409, 23481, 23553,
            23625, 23698, 23771, 23844, 23917,
            23990, 24064, 24138, 24212, 24287,
            24361, 24436, 24511, 24586, 24662,
            24738, 24814, 24890, 24966, 25043,
            25120, 25197, 25275, 25352, 25430,
            25508, 25587, 25665, 25744, 25823,
            25902, 25982, 26062, 26142, 26222,
            26303, 26384, 26465, 26546, 26627,
            26709, 26791, 26874, 26956, 27039,
            27122, 27205, 27289, 27373, 27457,
            27541, 27626, 27711, 27796, 27881,
            27967, 28053, 28139, 28226, 28312,
            28399, 28486, 28574, 28662, 28750,
            28838, 28927, 29016, 29105, 29194,
            29284, 29374, 29464, 29555, 29645,
            29736, 29828, 29919, 30011, 30104,
            30196, 30289, 30382, 30475, 30569,
            30663, 30757, 30851, 30946, 31041,
            31137, 31232, 31328, 31425, 31521,
            31618, 31715, 31813, 31910, 32008,
            32107, 32205, 32304, 32403, 32503,
            32603, 32703, 32804, 32904, 33005,
            33107, 33209, 33311, 33413, 33516,
            33619, 33722, 33825, 33929, 34034,
            34138, 34243, 34348, 34454, 34560,
            34666, 34772, 34879, 34986, 35094,
            35202, 35310, 35418, 35527, 35636,
            35746, 35856, 35966, 36076, 36187,
            36298, 36410, 36522, 36634, 36746,
            36859, 36973, 37086, 37200, 37314,
            37429, 37544, 37659, 37775, 37891,
            38008, 38124, 38241, 38359, 38477,
            38595, 38714, 38833, 38952, 39072,
            39192, 39312, 39433, 39554, 39675,
            39797, 39920, 40042, 40165, 40289,
            40413, 40537, 40661, 40786, 40911,
            41037, 41163, 41290, 41417, 41544,
            41671, 41800, 41928, 42057, 42186,
            42316, 42446, 42576, 42707, 42838,
            42970, 43102, 43234, 43367, 43500,
            43634, 43768, 43902, 44037, 44173,
            44308, 44444, 44581, 44718, 44855,
            44993, 45131, 45270, 45409, 45549,
            45689, 45829, 45970, 46111, 46253,
            46395, 46537, 46680, 46824, 46968,
            47112, 47257, 47402, 47548, 47694,
            47840, 47987, 48135, 48283, 48431,
            48580, 48729, 48879, 49029, 49180,
            49331, 49482, 49634, 49787, 49940,
            50093, 50247, 50401, 50556, 50712,
            50867, 51024, 51181, 51338, 51495,
            51654, 51812, 51972, 52131, 52291,
            52452, 52613, 52775, 52937, 53100,
            53263, 53427, 53591, 53755, 53921,
            54086, 54252, 54419, 54586, 54754,
            54922, 55091, 55260, 55430, 55600,
            55771, 55943, 56114, 56287, 56460,
            56633, 56807, 56982, 57157, 57333,
            57509, 57685, 57863, 58040, 58219,
            58398, 58577, 58757, 58938, 59119,
            59300, 59483, 59665, 59849, 60033,
            60217, 60402, 60588, 60774, 60960,
            61148, 61336, 61524, 61713, 61903,
            62093, 62284, 62475, 62667, 62860,
            63053, 63247, 63441, 63636, 63831,
            64027, 64224, 64422, 64619, 64818,
            65017, 65217, 65417, 65618, 65820,
            66022, 66225, 66429, 66633, 66837,
            67043, 67249, 67455, 67663, 67870,
            68079, 68288, 68498, 68708, 68920,
            69131, 69344, 69557, 69771, 69985,
            70200, 70416, 70632, 70849, 71067,
            71285, 71504, 71724, 71944, 72165,
            72387, 72609, 72833, 73056, 73281,
            73506, 73732, 73958, 74186, 74414,
            74642, 74872, 75102, 75332, 75564,
            75796, 76029, 76262, 76497, 76732,
            76968, 77204, 77441, 77679, 77918,
            78157, 78398, 78638, 78880, 79122,
            79366, 79609, 79854, 80099, 80345,
            80592, 80840, 81088, 81338, 81587,
            81838, 82090, 82342, 82595, 82849,
            83103, 83358, 83615, 83872, 84129,
            84388, 84647, 84907, 85168, 85430,
            85692, 85955, 86220, 86485, 86750,
            87017, 87284, 87552, 87821, 88091,
            88362, 88633, 88906, 89179, 89453,
            89728, 90003, 90280, 90557, 90836,
            91115, 91395, 91676, 91957, 92240,
            92523, 92807, 93093, 93379, 93666,
            93953, 94242, 94532, 94822, 95113,
            95406, 95699, 95993, 96288, 96584,
            96881, 97178, 97477, 97776, 98077,
            98378, 98680, 98984, 99288, 99593,
            99899, 100206, 100514, 100822, 101132,
            101443, 101755, 102067, 102381, 102696,
            103011, 103328, 103645, 103964, 104283,
            104603, 104925, 105247, 105571, 105895,
            106220, 106547, 106874, 107203, 107532,
            107862, 108194, 108526, 108860, 109194,
            109530, 109866, 110204, 110542, 110882,
            111223, 111565, 111907, 112251, 112596,
            112942, 113289, 113637, 113986, 114337,
            114688, 115040, 115394, 115748, 116104,
            116461, 116819, 117178, 117538, 117899,
            118261, 118624, 118989, 119354, 119721,
            120089, 120458, 120828, 121199, 121572,
            121945, 122320, 122696, 123073, 123451,
            123830, 124211, 124593, 124975, 125359,
            125745, 126131, 126518, 126907, 127297,
            127688, 128081, 128474, 128869, 129265,
            129662, 130061, 130260
         ) ),
        max_error = cms.double(0.6152529479288091),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut2 = cms.PSet(
        lut = cms.vint32( (
            256, 256, 257, 258, 259,
            260, 260, 261, 262, 263,
            264, 264, 265, 266, 267,
            268, 268, 269, 270, 271,
            272, 273, 273, 274, 275,
            276, 277, 278, 279, 279,
            280, 281, 282, 283, 284,
            285, 285, 286, 287, 288,
            289, 290, 291, 292, 293,
            293, 294, 295, 296, 297,
            298, 299, 300, 301, 302,
            303, 303, 304, 305, 306,
            307, 308, 309, 310, 311,
            312, 313, 314, 315, 316,
            317, 318, 319, 320, 321,
            322, 323, 324, 325, 326,
            327, 328, 329, 330, 331,
            332, 333, 334, 335, 336,
            337, 338, 339, 340, 341,
            342, 343, 344, 345, 346,
            347, 348, 349, 351, 352,
            353, 354, 355, 356, 357,
            358, 359, 360, 361, 363,
            364, 365, 366, 367, 368,
            369, 370, 372, 373, 374,
            375, 376, 377, 379, 380,
            381, 382, 383, 384, 386,
            387, 388, 389, 390, 392,
            393, 394, 395, 396, 398,
            399, 400, 401, 402, 404,
            405, 406, 407, 409, 410,
            411, 412, 414, 415, 416,
            418, 419, 420, 421, 423,
            424, 425, 427, 428, 429,
            431, 432, 433, 435, 436,
            437, 439, 440, 441, 443,
            444, 445, 447, 448, 449,
            451, 452, 454, 455, 456,
            458, 459, 461, 462, 463,
            465, 466, 468, 469, 471,
            472, 474, 475, 476, 478,
            479, 481, 482, 484, 485,
            487, 488, 490, 491, 493,
            494, 496, 497, 499, 500,
            502, 503, 505, 507, 508,
            510, 511, 513, 514, 516,
            518, 519, 521, 522, 524,
            526, 527, 529, 530, 532,
            534, 535, 537, 539, 540,
            542, 544, 545, 547, 549,
            550, 552, 554, 555, 557,
            559, 561, 562, 564, 566,
            567, 569, 571, 573, 575,
            576, 578, 580, 582, 583,
            585, 587, 589, 591, 592,
            594, 596, 598, 600, 602,
            603, 605, 607, 609, 611,
            613, 615, 617, 618, 620,
            622, 624, 626, 628, 630,
            632, 634, 636, 638, 640,
            642, 644, 646, 648, 650,
            652, 654, 656, 658, 660,
            662, 664, 666, 668, 670,
            672, 674, 676, 678, 680,
            682, 684, 686, 688, 691,
            693, 695, 697, 699, 701,
            703, 706, 708, 710, 712,
            714, 717, 719, 721, 723,
            725, 728, 730, 732, 734,
            737, 739, 741, 743, 746,
            748, 750, 753, 755, 757,
            760, 762, 764, 767, 769,
            771, 774, 776, 778, 781,
            783, 786, 788, 790, 793,
            795, 798, 800, 803, 805,
            808, 810, 813, 815, 818,
            820, 823, 825, 828, 830,
            833, 835, 838, 840, 843,
            846, 848, 851, 853, 856,
            859, 861, 864, 867, 869,
            872, 875, 877, 880, 883,
            885, 888, 891, 894, 896,
            899, 902, 905, 907, 910,
            913, 916, 919, 921, 924,
            927, 930, 933, 936, 939,
            941, 944, 947, 950, 953,
            956, 959, 962, 965, 968,
            971, 974, 977, 980, 983,
            986, 989, 992, 995, 998,
            1001, 1004, 1007, 1010, 1013,
            1017, 1020, 1023, 1026, 1029,
            1032, 1035, 1039, 1042, 1045,
            1048, 1051, 1055, 1058, 1061,
            1064, 1068, 1071, 1074, 1078,
            1081, 1084, 1088, 1091, 1094,
            1098, 1101, 1104, 1108, 1111,
            1115, 1118, 1121, 1125, 1128,
            1132, 1135, 1139, 1142, 1146,
            1149, 1153, 1156, 1160, 1163,
            1167, 1171, 1174, 1178, 1181,
            1185, 1189, 1192, 1196, 1200,
            1203, 1207, 1211, 1214, 1218,
            1222, 1226, 1229, 1233, 1237,
            1241, 1245, 1249, 1252, 1256,
            1260, 1264, 1268, 1272, 1276,
            1280, 1283, 1287, 1291, 1295,
            1299, 1303, 1307, 1311, 1315,
            1319, 1323, 1328, 1332, 1336,
            1340, 1344, 1348, 1352, 1356,
            1360, 1365, 1369, 1373, 1377,
            1382, 1386, 1390, 1394, 1399,
            1403, 1407, 1412, 1416, 1420,
            1425, 1429, 1433, 1438, 1442,
            1447, 1451, 1455, 1460, 1464,
            1469, 1473, 1478, 1483, 1487,
            1492, 1496, 1501, 1505, 1510,
            1515, 1519, 1524, 1529, 1533,
            1538, 1543, 1548, 1552, 1557,
            1562, 1567, 1572, 1576, 1581,
            1586, 1591, 1596, 1601, 1606,
            1611, 1616, 1620, 1625, 1630,
            1635, 1640, 1646, 1651, 1656,
            1661, 1666, 1671, 1676, 1681,
            1686, 1692, 1697, 1702, 1707,
            1712, 1718, 1723, 1728, 1734,
            1739, 1744, 1750, 1755, 1760,
            1766, 1771, 1777, 1782, 1788,
            1793, 1799, 1804, 1810, 1815,
            1821, 1826, 1832, 1838, 1843,
            1849, 1855, 1860, 1866, 1872,
            1878, 1883, 1889, 1895, 1901,
            1907, 1912, 1918, 1924, 1930,
            1936, 1942, 1948, 1954, 1960,
            1966, 1972, 1978, 1984, 1990,
            1996, 2003, 2009, 2015, 2021,
            2027, 2033, 2040, 2046, 2052,
            2059, 2065, 2071, 2078, 2084,
            2090, 2097, 2103, 2110, 2116,
            2123, 2129, 2136, 2142, 2149,
            2156, 2162, 2169, 2175, 2182,
            2189, 2196, 2202, 2209, 2216,
            2223, 2230, 2236, 2243, 2250,
            2257, 2264, 2271, 2278, 2285,
            2292, 2299, 2306, 2313, 2320,
            2327, 2335, 2342, 2349, 2356,
            2363, 2371, 2378, 2385, 2393,
            2400, 2407, 2415, 2422, 2430,
            2437, 2444, 2452, 2460, 2467,
            2475, 2482, 2490, 2498, 2505,
            2513, 2521, 2528, 2536, 2544,
            2552, 2560, 2567, 2575, 2583,
            2591, 2599, 2607, 2615, 2623,
            2631, 2639, 2647, 2656, 2664,
            2672, 2680, 2688, 2697, 2705,
            2713, 2722, 2730, 2738, 2747,
            2755, 2764, 2772, 2781, 2789,
            2798, 2806, 2815, 2824, 2832,
            2841, 2850, 2858, 2867, 2876,
            2885, 2894, 2903, 2912, 2921,
            2930, 2939, 2948, 2957, 2966,
            2975, 2984, 2993, 3002, 3012,
            3021, 3030, 3039, 3049, 3058,
            3067, 3077, 3086, 3096, 3105,
            3115, 3124, 3134, 3144, 3153,
            3163, 3173, 3183, 3192, 3202,
            3212, 3222, 3232, 3242, 3252,
            3262, 3272, 3282, 3292, 3302,
            3312, 3322, 3332, 3343, 3353,
            3363, 3374, 3384, 3394, 3405,
            3415, 3426, 3436, 3447, 3457,
            3468, 3479, 3489, 3500, 3511,
            3522, 3532, 3543, 3554, 3565,
            3576, 3587, 3598, 3609, 3620,
            3631, 3642, 3654, 3665, 3676,
            3687, 3699, 3710, 3722, 3733,
            3744, 3756, 3767, 3779, 3791,
            3802, 3814, 3826, 3837, 3849,
            3861, 3873, 3885, 3897, 3909,
            3921, 3933, 3945, 3957, 3969,
            3981, 3994, 4006, 4018, 4031,
            4043, 4055, 4068, 4080, 4093,
            4105, 4118, 4131, 4143, 4156,
            4169, 4182, 4195, 4207, 4220,
            4233, 4246, 4259, 4272, 4286,
            4299, 4312, 4325, 4339, 4352,
            4365, 4379, 4392, 4406, 4419,
            4433, 4446, 4460, 4474, 4487,
            4501, 4515, 4529, 4543, 4557,
            4571, 4585, 4599, 4613, 4627,
            4641, 4656, 4670, 4684, 4699,
            4713, 4728, 4742, 4757, 4771,
            4786, 4801, 4816, 4830, 4845,
            4860, 4875, 4890, 4905, 4920,
            4935, 4950, 4966, 4981, 4996,
            5011, 5027, 5042, 5058, 5073,
            5089, 5105, 5120, 5136, 5152,
            5168, 5183, 5199, 5215, 5231,
            5247, 5264, 5280, 5296, 5312,
            5329, 5345, 5361, 5378, 5394,
            5411, 5428, 5444, 5461, 5478,
            5495, 5512, 5528, 5545, 5562,
            5580, 5597, 5614, 5631, 5648,
            5666, 5683, 5701, 5718, 5736,
            5753, 5771, 5789, 5807, 5824,
            5842, 5860, 5878, 5896, 5914,
            5933, 5951, 5969, 5987, 6006,
            6024, 6043, 6061, 6080, 6099,
            6117, 6136, 6155, 6174, 6193,
            6212, 6231, 6250, 6269, 6289,
            6308, 6327, 6347, 6366, 6386,
            6406, 6425, 6445, 6465, 6485,
            6505, 6525, 6545, 6565, 6585,
            6605, 6625, 6646, 6666, 6687,
            6707, 6728, 6749, 6769, 6790,
            6811, 6832, 6853, 6874, 6895,
            6916, 6937, 6959, 6980, 7002,
            7023, 7045, 7066, 7088, 7110,
            7132, 7154, 7176, 7198, 7220,
            7242, 7264, 7286, 7309, 7331,
            7354, 7376, 7399, 7422, 7445,
            7468, 7490, 7513, 7537, 7560,
            7583, 7606, 7630, 7653, 7677,
            7700, 7724, 7748, 7771, 7795,
            7819, 7843, 7867, 7892, 7916,
            7940, 7964, 7989, 8014, 8038,
            8063, 8088, 8112, 8137, 8162,
            8187, 8213, 8238, 8263, 8289,
            8314, 8340, 8365, 8391, 8417,
            8443, 8468, 8495, 8521, 8547,
            8573, 8599, 8626, 8652, 8679,
            8706, 8732, 8759, 8786, 8813,
            8840, 8867, 8895, 8922, 8949,
            8977, 9004, 9032, 9060, 9088,
            9116, 9144, 9172, 9200, 9228,
            9256, 9285, 9313, 9342, 9371,
            9400, 9428, 9457, 9486, 9516,
            9545, 9574, 9604, 9633, 9663,
            9692, 9722, 9752, 9782, 9812,
            9842, 9872, 9903, 9933, 9964,
            9994, 10025, 10056, 10087, 10118,
            10149, 10180, 10211, 10243, 10274,
            10306, 10337, 10369, 10401, 10433,
            10465, 10497, 10529, 10562, 10594,
            10627, 10659, 10692, 10725, 10758,
            10791, 10824, 10858, 10891, 10924,
            10958, 10992, 11025, 11059, 11093,
            11127, 11161, 11196, 11230, 11265,
            11299, 11334, 11369, 11404, 11439,
            11474, 11509, 11545, 11580, 11616,
            11651, 11687, 11723, 11759, 11795,
            11831, 11868, 11904, 11941, 11978,
            12014, 12051, 12088, 12125, 12163,
            12200, 12238, 12275, 12313, 12351,
            12389, 12427, 12465, 12503, 12542,
            12580, 12619, 12658, 12696, 12735,
            12775, 12814, 12853, 12893, 12932,
            12972, 13012, 13052, 13092, 13132,
            13173, 13213, 13254, 13294, 13335,
            13376, 13417, 13459, 13500, 13541,
            13583, 13625, 13667, 13709, 13751,
            13793, 13835, 13878, 13920, 13963,
            14006, 14049, 14092, 14136, 14179,
            14223, 14266, 14310, 14354, 14398,
            14443, 14487, 14531, 14576, 14621,
            14666, 14711, 14756, 14801, 14847,
            14892, 14938, 14984, 15030, 15076,
            15123, 15169, 15216, 15263, 15309,
            15356, 15404, 15451, 15498, 15546,
            15594, 15642, 15690, 15738, 15786,
            15835, 15884, 15932, 15981, 16030,
            16080, 16129, 16179, 16228, 16278,
            16328, 16378, 16429, 16479, 16530,
            16581, 16632, 16683, 16734, 16785,
            16837, 16889, 16941, 16993, 17045,
            17097, 17150, 17202, 17255, 17308,
            17361, 17415, 17468, 17522, 17576,
            17630, 17684, 17738, 17793, 17848,
            17902, 17957, 18013, 18068, 18123,
            18179, 18235, 18291, 18347, 18404,
            18460, 18517, 18574, 18631, 18688,
            18746, 18803, 18861, 18919, 18977,
            19035, 19094, 19152, 19211, 19270,
            19330, 19389, 19448, 19508, 19568,
            19628, 19689, 19749, 19810, 19871,
            19932, 19993, 20054, 20116, 20178,
            20240, 20302, 20364, 20427, 20490,
            20553, 20616, 20679, 20743, 20806,
            20870, 20935, 20999, 21063, 21128,
            21193, 21258, 21323, 21389, 21455,
            21521, 21587, 21653, 21720, 21786,
            21853, 21920, 21988, 22055, 22123,
            22191, 22259, 22328, 22396, 22465,
            22534, 22603, 22673, 22742, 22812,
            22882, 22953, 23023, 23094, 23165,
            23236, 23308, 23379, 23451, 23523,
            23595, 23668, 23741, 23814, 23887,
            23960, 24034, 24108, 24182, 24256,
            24330, 24405, 24480, 24555, 24631,
            24707, 24783, 24859, 24935, 25012,
            25089, 25166, 25243, 25320, 25398,
            25476, 25555, 25633, 25712, 25791,
            25870, 25950, 26029, 26109, 26190,
            26270, 26351, 26432, 26513, 26594,
            26676, 26758, 26840, 26923, 27006,
            27088, 27172, 27255, 27339, 27423,
            27507, 27592, 27677, 27762, 27847,
            27932, 28018, 28104, 28191, 28277,
            28364, 28451, 28539, 28626, 28714,
            28803, 28891, 28980, 29069, 29158,
            29248, 29338, 29428, 29518, 29609,
            29700, 29791, 29883, 29975, 30067,
            30159, 30252, 30345, 30438, 30532,
            30625, 30719, 30814, 30909, 31003,
            31099, 31194, 31290, 31386, 31483,
            31579, 31677, 31774, 31871, 31969,
            32068, 32166, 32265, 32364, 32464,
            32563, 32663, 32764, 32864, 32965,
            33067, 33168, 33270, 33372, 33475,
            33578, 33681, 33785, 33888, 33992,
            34097, 34202, 34307, 34412, 34518,
            34624, 34730, 34837, 34944, 35051,
            35159, 35267, 35376, 35484, 35593,
            35703, 35812, 35922, 36033, 36144,
            36255, 36366, 36478, 36590, 36702,
            36815, 36928, 37042, 37155, 37270,
            37384, 37499, 37614, 37730, 37846,
            37962, 38079, 38196, 38313, 38431,
            38549, 38667, 38786, 38905, 39025,
            39145, 39265, 39386, 39507, 39628,
            39750, 39872, 39994, 40117, 40241,
            40364, 40488, 40613, 40737, 40863,
            40988, 41114, 41240, 41367, 41494,
            41622, 41750, 41878, 42007, 42136,
            42265, 42395, 42525, 42656, 42787,
            42919, 43050, 43183, 43315, 43448,
            43582, 43716, 43850, 43985, 44120,
            44256, 44392, 44528, 44665, 44802,
            44940, 45078, 45216, 45355, 45495,
            45634, 45775, 45915, 46056, 46198,
            46340, 46482, 46625, 46768, 46912,
            47056, 47201, 47346, 47491, 47637,
            47784, 47930, 48078, 48225, 48374,
            48522, 48671, 48821, 48971, 49121,
            49272, 49424, 49576, 49728, 49881,
            50034, 50188, 50342, 50497, 50652,
            50807, 50963, 51120, 51277, 51435,
            51593, 51751, 51910, 52070, 52230,
            52390, 52551, 52713, 52875, 53037,
            53200, 53364, 53528, 53692, 53857,
            54022, 54188, 54355, 54522, 54690,
            54858, 55026, 55195, 55365, 55535,
            55706, 55877, 56048, 56221, 56393,
            56567, 56740, 56915, 57090, 57265,
            57441, 57618, 57795, 57972, 58150,
            58329, 58508, 58688, 58868, 59049,
            59231, 59413, 59595, 59778, 59962,
            60146, 60331, 60516, 60702, 60889,
            61076, 61264, 61452, 61641, 61830,
            62020, 62211, 62402, 62594, 62786,
            62979, 63172, 63366, 63561, 63756,
            63952, 64149, 64346, 64544, 64742,
            64941, 65140, 65341, 65541, 65743,
            65945, 66147, 66351, 66555, 66759,
            66964, 67170, 67376, 67583, 67791,
            67999, 68208, 68418, 68628, 68839,
            69050, 69263, 69475, 69689, 69903,
            70118, 70333, 70549, 70766, 70984,
            71202, 71421, 71640, 71860, 72081,
            72302, 72525, 72747, 72971, 73195,
            73420, 73646, 73872, 74099, 74327,
            74555, 74784, 75014, 75244, 75476,
            75707, 75940, 76173, 76407, 76642,
            76878, 77114, 77351, 77589, 77827,
            78066, 78306, 78547, 78788, 79030,
            79273, 79516, 79761, 80006, 80252,
            80498, 80746, 80994, 81243, 81492,
            81743, 81994, 82246, 82498, 82752,
            83006, 83261, 83517, 83774, 84031,
            84289, 84548, 84808, 85069, 85330,
            85592, 85855, 86119, 86384, 86649,
            86915, 87182, 87450, 87719, 87989,
            88259, 88530, 88802, 89075, 89349,
            89623, 89899, 90175, 90452, 90730,
            91009, 91288, 91569, 91850, 92132,
            92415, 92699, 92984, 93270, 93557,
            93844, 94132, 94422, 94712, 95003,
            95295, 95587, 95881, 96176, 96471,
            96768, 97065, 97363, 97662, 97963,
            98264, 98565, 98868, 99172, 99477,
            99783, 100089, 100397, 100705, 101015,
            101325, 101636, 101949, 102262, 102576,
            102891, 103207, 103525, 103843, 104162,
            104482, 104803, 105125, 105448, 105772,
            106097, 106423, 106750, 107078, 107407,
            107737, 108068, 108400, 108733, 109067,
            109402, 109738, 110076, 110414, 110753,
            111093, 111435, 111777, 112121, 112465,
            112811, 113157, 113505, 113854, 114204,
            114555, 114907, 115260, 115614, 115969,
            116325, 116683, 117041, 117401, 117762,
            118124, 118486, 118851, 119216, 119582,
            119949, 120318, 120688, 121059, 121431,
            121804, 122178, 122553, 122930, 123308,
            123687, 124067, 124448, 124830, 125214,
            125598, 125984, 126371, 126760, 127149,
            127540, 127932, 128325, 128719, 129115,
            129511, 129909, 130309, 130709, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071
         ) ),
        max_error = cms.double(5748.616225984908),
        output_scale_factor = cms.double(0.953125),
        unused_lsbs = cms.uint32(2)
    ),
    inv_mass_checks = cms.untracked.bool(False),
    minInvMass = cms.double(620),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    sanity_checks = cms.untracked.bool(False),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    )
)


process.DoublePuppiTau5252 = cms.EDFilter("L1GTDoubleObjectCond",
    collection1 = cms.PSet(
        maxEta = cms.double(2.172),
        minEta = cms.double(-2.172),
        minQualityScore = cms.uint32(225),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 1.5),
        regionsMinPt = cms.vdouble(28, 20),
        tag = cms.InputTag("l1tGTProducer","CL2Taus")
    ),
    collection2 = cms.PSet(
        maxEta = cms.double(2.172),
        minEta = cms.double(-2.172),
        minQualityScore = cms.uint32(225),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 1.5),
        regionsMinPt = cms.vdouble(28, 20),
        tag = cms.InputTag("l1tGTProducer","CL2Taus")
    ),
    cos_phi_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            487, 487, 487, 487, 487,
            487, 487, 487, 487, 487,
            487, 486, 486, 486, 486,
            486, 486, 486, 485, 485,
            485, 485, 485, 485, 484,
            484, 484, 484, 484, 483,
            483, 483, 483, 483, 482,
            482, 482, 482, 481, 481,
            481, 481, 480, 480, 480,
            480, 479, 479, 479, 478,
            478, 478, 478, 477, 477,
            477, 476, 476, 476, 475,
            475, 475, 474, 474, 474,
            473, 473, 472, 472, 472,
            471, 471, 471, 470, 470,
            469, 469, 468, 468, 468,
            467, 467, 466, 466, 465,
            465, 465, 464, 464, 463,
            463, 462, 462, 461, 461,
            460, 460, 459, 459, 458,
            458, 457, 457, 456, 456,
            455, 454, 454, 453, 453,
            452, 452, 451, 451, 450,
            449, 449, 448, 448, 447,
            446, 446, 445, 445, 444,
            443, 443, 442, 441, 441,
            440, 440, 439, 438, 438,
            437, 436, 436, 435, 434,
            434, 433, 432, 431, 431,
            430, 429, 429, 428, 427,
            426, 426, 425, 424, 423,
            423, 422, 421, 420, 420,
            419, 418, 417, 417, 416,
            415, 414, 413, 413, 412,
            411, 410, 409, 409, 408,
            407, 406, 405, 405, 404,
            403, 402, 401, 400, 399,
            399, 398, 397, 396, 395,
            394, 393, 392, 392, 391,
            390, 389, 388, 387, 386,
            385, 384, 383, 382, 381,
            381, 380, 379, 378, 377,
            376, 375, 374, 373, 372,
            371, 370, 369, 368, 367,
            366, 365, 364, 363, 362,
            361, 360, 359, 358, 357,
            356, 355, 354, 353, 352,
            351, 350, 349, 348, 347,
            346, 345, 343, 342, 341,
            340, 339, 338, 337, 336,
            335, 334, 333, 332, 330,
            329, 328, 327, 326, 325,
            324, 323, 322, 320, 319,
            318, 317, 316, 315, 314,
            312, 311, 310, 309, 308,
            307, 306, 304, 303, 302,
            301, 300, 298, 297, 296,
            295, 294, 293, 291, 290,
            289, 288, 286, 285, 284,
            283, 282, 280, 279, 278,
            277, 275, 274, 273, 272,
            270, 269, 268, 267, 265,
            264, 263, 262, 260, 259,
            258, 257, 255, 254, 253,
            252, 250, 249, 248, 246,
            245, 244, 242, 241, 240,
            239, 237, 236, 235, 233,
            232, 231, 229, 228, 227,
            225, 224, 223, 221, 220,
            219, 217, 216, 215, 213,
            212, 211, 209, 208, 207,
            205, 204, 203, 201, 200,
            198, 197, 196, 194, 193,
            192, 190, 189, 187, 186,
            185, 183, 182, 181, 179,
            178, 176, 175, 174, 172,
            171, 169, 168, 167, 165,
            164, 162, 161, 159, 158,
            157, 155, 154, 152, 151,
            150, 148, 147, 145, 144,
            142, 141, 140, 138, 137,
            135, 134, 132, 131, 129,
            128, 127, 125, 124, 122,
            121, 119, 118, 116, 115,
            113, 112, 111, 109, 108,
            106, 105, 103, 102, 100,
            99, 97, 96, 94, 93,
            92, 90, 89, 87, 86,
            84, 83, 81, 80, 78,
            77, 75, 74, 72, 71,
            69, 68, 66, 65, 63,
            62, 60, 59, 58, 56,
            55, 53, 52, 50, 49,
            47, 46, 44, 43, 41,
            40, 38, 37, 35, 34,
            32, 31, 29, 28, 26,
            25, 23, 22, 20, 19,
            17, 16, 14, 13, 11,
            10, 8, 7, 5, 4,
            2, 1, -1, -2, -4,
            -5, -7, -8, -10, -11,
            -13, -14, -16, -17, -19,
            -20, -22, -23, -25, -26,
            -28, -29, -31, -32, -34,
            -35, -37, -38, -40, -41,
            -43, -44, -46, -47, -49,
            -50, -52, -53, -55, -56,
            -58, -59, -60, -62, -63,
            -65, -66, -68, -69, -71,
            -72, -74, -75, -77, -78,
            -80, -81, -83, -84, -86,
            -87, -89, -90, -92, -93,
            -94, -96, -97, -99, -100,
            -102, -103, -105, -106, -108,
            -109, -111, -112, -113, -115,
            -116, -118, -119, -121, -122,
            -124, -125, -127, -128, -129,
            -131, -132, -134, -135, -137,
            -138, -140, -141, -142, -144,
            -145, -147, -148, -150, -151,
            -152, -154, -155, -157, -158,
            -159, -161, -162, -164, -165,
            -167, -168, -169, -171, -172,
            -174, -175, -176, -178, -179,
            -181, -182, -183, -185, -186,
            -187, -189, -190, -192, -193,
            -194, -196, -197, -198, -200,
            -201, -203, -204, -205, -207,
            -208, -209, -211, -212, -213,
            -215, -216, -217, -219, -220,
            -221, -223, -224, -225, -227,
            -228, -229, -231, -232, -233,
            -235, -236, -237, -239, -240,
            -241, -242, -244, -245, -246,
            -248, -249, -250, -252, -253,
            -254, -255, -257, -258, -259,
            -260, -262, -263, -264, -265,
            -267, -268, -269, -270, -272,
            -273, -274, -275, -277, -278,
            -279, -280, -282, -283, -284,
            -285, -286, -288, -289, -290,
            -291, -293, -294, -295, -296,
            -297, -298, -300, -301, -302,
            -303, -304, -306, -307, -308,
            -309, -310, -311, -312, -314,
            -315, -316, -317, -318, -319,
            -320, -322, -323, -324, -325,
            -326, -327, -328, -329, -330,
            -332, -333, -334, -335, -336,
            -337, -338, -339, -340, -341,
            -342, -343, -345, -346, -347,
            -348, -349, -350, -351, -352,
            -353, -354, -355, -356, -357,
            -358, -359, -360, -361, -362,
            -363, -364, -365, -366, -367,
            -368, -369, -370, -371, -372,
            -373, -374, -375, -376, -377,
            -378, -379, -380, -381, -381,
            -382, -383, -384, -385, -386,
            -387, -388, -389, -390, -391,
            -392, -392, -393, -394, -395,
            -396, -397, -398, -399, -399,
            -400, -401, -402, -403, -404,
            -405, -405, -406, -407, -408,
            -409, -409, -410, -411, -412,
            -413, -413, -414, -415, -416,
            -417, -417, -418, -419, -420,
            -420, -421, -422, -423, -423,
            -424, -425, -426, -426, -427,
            -428, -429, -429, -430, -431,
            -431, -432, -433, -434, -434,
            -435, -436, -436, -437, -438,
            -438, -439, -440, -440, -441,
            -441, -442, -443, -443, -444,
            -445, -445, -446, -446, -447,
            -448, -448, -449, -449, -450,
            -451, -451, -452, -452, -453,
            -453, -454, -454, -455, -456,
            -456, -457, -457, -458, -458,
            -459, -459, -460, -460, -461,
            -461, -462, -462, -463, -463,
            -464, -464, -465, -465, -465,
            -466, -466, -467, -467, -468,
            -468, -468, -469, -469, -470,
            -470, -471, -471, -471, -472,
            -472, -472, -473, -473, -474,
            -474, -474, -475, -475, -475,
            -476, -476, -476, -477, -477,
            -477, -478, -478, -478, -478,
            -479, -479, -479, -480, -480,
            -480, -480, -481, -481, -481,
            -481, -482, -482, -482, -482,
            -483, -483, -483, -483, -483,
            -484, -484, -484, -484, -484,
            -485, -485, -485, -485, -485,
            -485, -486, -486, -486, -486,
            -486, -486, -486, -487, -487,
            -487, -487, -487, -487, -487,
            -487, -487, -487, -487, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488
         ) ),
        max_error = cms.double(0.0025338281044886835),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            489, 489, 489, 489, 489,
            489, 489, 489, 489, 489,
            489, 490, 490, 490, 490,
            490, 490, 490, 491, 491,
            491, 491, 491, 491, 492,
            492, 492, 492, 492, 493,
            493, 493, 493, 493, 494,
            494, 494, 494, 495, 495,
            495, 495, 496, 496, 496,
            496, 497, 497, 497, 498,
            498, 498, 499, 499, 499,
            499, 500, 500, 500, 501,
            501, 502, 502, 502, 503,
            503, 503, 504, 504, 504,
            505, 505, 506, 506, 507,
            507, 507, 508, 508, 509,
            509, 510, 510, 510, 511,
            511, 512, 512, 513, 513,
            514, 514, 515, 515, 516,
            516, 517, 517, 518, 518,
            519, 520, 520, 521, 521,
            522, 522, 523, 523, 524,
            525, 525, 526, 526, 527,
            528, 528, 529, 530, 530,
            531, 531, 532, 533, 533,
            534, 535, 535, 536, 537,
            537, 538, 539, 540, 540,
            541, 542, 542, 543, 544,
            545, 545, 546, 547, 548,
            548, 549, 550, 551, 551,
            552, 553, 554, 555, 555,
            556, 557, 558, 559, 560,
            560, 561, 562, 563, 564,
            565, 566, 567, 567, 568,
            569, 570, 571, 572, 573,
            574, 575, 576, 577, 577,
            578, 579, 580, 581, 582,
            583, 584, 585, 586, 587,
            588, 589, 590, 591, 592,
            593, 594, 595, 596, 598,
            599, 600, 601, 602, 603,
            604, 605, 606, 607, 608,
            610, 611, 612, 613, 614,
            615, 616, 618, 619, 620,
            621, 622, 623, 625, 626,
            627, 628, 629, 631, 632,
            633, 634, 636, 637, 638,
            639, 641, 642, 643, 644,
            646, 647, 648, 650, 651,
            652, 654, 655, 656, 658,
            659, 660, 662, 663, 665,
            666, 667, 669, 670, 672,
            673, 674, 676, 677, 679,
            680, 682, 683, 685, 686,
            687, 689, 690, 692, 693,
            695, 697, 698, 700, 701,
            703, 704, 706, 707, 709,
            710, 712, 714, 715, 717,
            719, 720, 722, 723, 725,
            727, 728, 730, 732, 733,
            735, 737, 738, 740, 742,
            744, 745, 747, 749, 750,
            752, 754, 756, 758, 759,
            761, 763, 765, 767, 768,
            770, 772, 774, 776, 778,
            779, 781, 783, 785, 787,
            789, 791, 793, 795, 796,
            798, 800, 802, 804, 806,
            808, 810, 812, 814, 816,
            818, 820, 822, 824, 826,
            828, 830, 832, 835, 837,
            839, 841, 843, 845, 847,
            849, 851, 854, 856, 858,
            860, 862, 864, 867, 869,
            871, 873, 875, 878, 880,
            882, 884, 887, 889, 891,
            894, 896, 898, 900, 903,
            905, 907, 910, 912, 915,
            917, 919, 922, 924, 927,
            929, 931, 934, 936, 939,
            941, 944, 946, 949, 951,
            954, 956, 959, 961, 964,
            966, 969, 971, 974, 977,
            979, 982, 984, 987, 990,
            992, 995, 998, 1000, 1003,
            1006, 1008, 1011, 1014, 1017,
            1019, 1022, 1025, 1028, 1030,
            1033, 1036, 1039, 1042, 1044,
            1047, 1050, 1053, 1056, 1059,
            1062, 1065, 1067, 1070, 1073,
            1076, 1079, 1082, 1085, 1088,
            1091, 1094, 1097, 1100, 1103,
            1106, 1109, 1112, 1115, 1118,
            1122, 1125, 1128, 1131, 1134,
            1137, 1140, 1143, 1147, 1150,
            1153, 1156, 1159, 1163, 1166,
            1169, 1172, 1176, 1179, 1182,
            1186, 1189, 1192, 1196, 1199,
            1202, 1206, 1209, 1212, 1216,
            1219, 1223, 1226, 1230, 1233,
            1237, 1240, 1244, 1247, 1251,
            1254, 1258, 1261, 1265, 1268,
            1272, 1276, 1279, 1283, 1287,
            1290, 1294, 1298, 1301, 1305,
            1309, 1312, 1316, 1320, 1324,
            1327, 1331, 1335, 1339, 1343,
            1347, 1350, 1354, 1358, 1362,
            1366, 1370, 1374, 1378, 1382,
            1386, 1390, 1394, 1398, 1402,
            1406, 1410, 1414, 1418, 1422,
            1426, 1430, 1434, 1439, 1443,
            1447, 1451, 1455, 1459, 1464,
            1468, 1472, 1476, 1481, 1485,
            1489, 1494, 1498, 1502, 1507,
            1511, 1516, 1520, 1524, 1529,
            1533, 1538, 1542, 1547, 1551,
            1556, 1560, 1565, 1569, 1574,
            1579, 1583, 1588, 1592, 1597,
            1602, 1606, 1611, 1616, 1621,
            1625, 1630, 1635, 1640, 1645,
            1649, 1654, 1659, 1664, 1669,
            1674, 1679, 1684, 1689, 1693,
            1698, 1703, 1708, 1714, 1719,
            1724, 1729, 1734, 1739, 1744,
            1749, 1754, 1760, 1765, 1770,
            1775, 1780, 1786, 1791, 1796,
            1802, 1807, 1812, 1818, 1823,
            1828, 1834, 1839, 1845, 1850,
            1856, 1861, 1867, 1872, 1878,
            1883, 1889, 1894, 1900, 1906,
            1911, 1917, 1923, 1929, 1934,
            1940, 1946, 1952, 1957, 1963,
            1969, 1975, 1981, 1987, 1993,
            1999, 2004, 2010, 2016, 2022,
            2028, 2035, 2041, 2047, 2053,
            2059, 2065, 2071, 2077, 2084,
            2090, 2096, 2102, 2109, 2115,
            2121, 2128, 2134, 2140, 2147,
            2153, 2160, 2166, 2173, 2179,
            2186, 2192, 2199, 2205, 2212,
            2219, 2225, 2232, 2239, 2245,
            2252, 2259, 2266, 2272, 2279,
            2286, 2293, 2300, 2307, 2314,
            2321, 2328, 2335, 2342, 2349,
            2356, 2363, 2370, 2377, 2384,
            2391, 2398, 2406, 2413, 2420,
            2427, 2435, 2442, 2449, 2457,
            2464, 2472, 2479, 2487, 2494,
            2502, 2509, 2517, 2524, 2532,
            2539, 2547, 2555, 2563, 2570,
            2578, 2586, 2594, 2601, 2609,
            2617, 2625, 2633, 2641, 2649,
            2657, 2665, 2673, 2681, 2689,
            2697, 2705, 2714, 2722, 2730,
            2738, 2747, 2755, 2763, 2772,
            2780, 2788, 2797, 2805, 2814,
            2822, 2831, 2839, 2848, 2857,
            2865, 2874, 2883, 2891, 2900,
            2909, 2918, 2927, 2935, 2944,
            2953, 2962, 2971, 2980, 2989,
            2998, 3007, 3016, 3026, 3035,
            3044, 3053, 3062, 3072, 3081,
            3090, 3100, 3109, 3119, 3128,
            3138, 3147, 3157, 3166, 3176,
            3186, 3195, 3205, 3215, 3224,
            3234, 3244, 3254, 3264, 3274,
            3284, 3294, 3304, 3314, 3324,
            3334, 3344, 3354, 3364, 3375,
            3385, 3395, 3405, 3416, 3426,
            3437, 3447, 3458, 3468, 3479,
            3489, 3500, 3510, 3521, 3532,
            3543, 3553, 3564, 3575, 3586,
            3597, 3608, 3619, 3630, 3641,
            3652, 3663, 3674, 3685, 3697,
            3708, 3719, 3730, 3742, 3753,
            3765, 3776, 3788, 3799, 3811,
            3822, 3834, 3846, 3857, 3869,
            3881, 3893, 3905, 3917, 3929,
            3941, 3953, 3965, 3977, 3989,
            4001, 4013, 4025, 4038, 4050,
            4062, 4075, 4087, 4100, 4112,
            4125, 4137, 4150, 4163, 4175,
            4188, 4201, 4214, 4226, 4239,
            4252, 4265, 4278, 4291, 4304,
            4318, 4331, 4344, 4357, 4371,
            4384, 4397, 4411, 4424, 4438,
            4451, 4465, 4479, 4492, 4506,
            4520, 4533, 4547, 4561, 4575,
            4589, 4603, 4617, 4631, 4645,
            4660, 4674, 4688, 4703, 4717,
            4731, 4746, 4760, 4775, 4789,
            4804, 4819, 4833, 4848, 4863,
            4878, 4893, 4908, 4923, 4938,
            4953, 4968, 4983, 4999, 5014,
            5029, 5045, 5060, 5075, 5091,
            5107, 5122, 5138, 5154, 5169,
            5185, 5201, 5217, 5233, 5249,
            5265, 5281, 5297, 5313, 5330,
            5346, 5362, 5379, 5395, 5412,
            5428, 5445, 5462, 5478, 5495,
            5512, 5529, 5546, 5563, 5580,
            5597, 5614, 5631, 5648, 5666,
            5683, 5700, 5718, 5735, 5753,
            5770, 5788, 5806, 5824, 5841,
            5859, 5877, 5895, 5913, 5931,
            5950, 5968, 5986, 6004, 6023,
            6041, 6060, 6078, 6097, 6116,
            6134, 6153, 6172, 6191, 6210,
            6229, 6248, 6267, 6286, 6305,
            6325, 6344, 6364, 6383, 6403,
            6422, 6442, 6462, 6481, 6501,
            6521, 6541, 6561, 6581, 6602,
            6622, 6642, 6662, 6683, 6703,
            6724, 6744, 6765, 6786, 6807,
            6828, 6848, 6869, 6891, 6912,
            6933, 6954, 6975, 6997, 7018,
            7040, 7061, 7083, 7105, 7126,
            7148, 7170, 7192, 7214, 7236,
            7259, 7281, 7303, 7325, 7348,
            7370, 7393, 7416, 7438, 7461,
            7484, 7507, 7530, 7553, 7576,
            7600, 7623, 7646, 7670, 7693,
            7717, 7741, 7764, 7788, 7812,
            7836, 7860, 7884, 7908, 7932,
            7957, 7981, 8006, 8030, 8055,
            8080, 8104, 8129, 8154, 8179,
            8204, 8229, 8255, 8280, 8305,
            8331, 8356, 8382, 8408, 8434,
            8459, 8485, 8511, 8537, 8564,
            8590, 8616, 8643, 8669, 8696,
            8722, 8749, 8776, 8803, 8830,
            8857, 8884, 8912, 8939, 8966,
            8994, 9021, 9049, 9077, 9105,
            9133, 9161, 9189, 9217, 9245,
            9274, 9302, 9331, 9359, 9388,
            9417, 9446, 9475, 9504, 9533,
            9562, 9591, 9621, 9650, 9680,
            9710, 9740, 9769, 9799, 9830,
            9860, 9890, 9920, 9951, 9981,
            10012, 10043, 10073, 10104, 10135,
            10166, 10198, 10229, 10260, 10292,
            10323, 10355, 10387, 10419, 10451,
            10483, 10515, 10547, 10580, 10612,
            10645, 10677, 10710, 10743, 10776,
            10809, 10842, 10876, 10909, 10942,
            10976, 11010, 11044, 11077, 11111,
            11146, 11180, 11214, 11248, 11283,
            11318, 11352, 11387, 11422, 11457,
            11492, 11528, 11563, 11599, 11634,
            11670, 11706, 11742, 11778, 11814,
            11850, 11887, 11923, 11960, 11996,
            12033, 12070, 12107, 12144, 12182,
            12219, 12257, 12294, 12332, 12370,
            12408, 12446, 12484, 12522, 12561,
            12599, 12638, 12677, 12716, 12755,
            12794, 12833, 12873, 12912, 12952,
            12992, 13032, 13072, 13112, 13152,
            13192, 13233, 13274, 13314, 13355,
            13396, 13437, 13479, 13520, 13561,
            13603, 13645, 13687, 13729, 13771,
            13813, 13856, 13898, 13941, 13984,
            14027, 14070, 14113, 14156, 14200,
            14243, 14287, 14331, 14375, 14419,
            14463, 14508, 14552, 14597, 14642,
            14687, 14732, 14777, 14823, 14868,
            14914, 14960, 15005, 15052, 15098,
            15144, 15191, 15237, 15284, 15331,
            15378, 15425, 15473, 15520, 15568,
            15616, 15664, 15712, 15760, 15808,
            15857, 15906, 15955, 16004, 16053,
            16102, 16151, 16201, 16251, 16301,
            16351, 16401, 16451, 16502, 16553,
            16603, 16654, 16706, 16757, 16808,
            16860, 16912, 16964, 17016, 17068,
            17121, 17173, 17226, 17279, 17332,
            17385, 17438, 17492, 17546, 17600,
            17654, 17708, 17762, 17817, 17872,
            17926, 17982, 18037, 18092, 18148,
            18203, 18259, 18315, 18372, 18428,
            18485, 18542, 18598, 18656, 18713,
            18770, 18828, 18886, 18944, 19002,
            19060, 19119, 19178, 19237, 19296,
            19355, 19414, 19474, 19534, 19594,
            19654, 19714, 19775, 19836, 19897,
            19958, 20019, 20081, 20142, 20204,
            20266, 20328, 20391, 20454, 20516,
            20579, 20643, 20706, 20770, 20833,
            20897, 20962, 21026, 21091, 21155,
            21220, 21286, 21351, 21417, 21482,
            21548, 21615, 21681, 21748, 21814,
            21881, 21949, 22016, 22084, 22151,
            22220, 22288, 22356, 22425, 22494,
            22563, 22632, 22702, 22771, 22841,
            22912, 22982, 23053, 23123, 23194,
            23266, 23337, 23409, 23481, 23553,
            23625, 23698, 23771, 23844, 23917,
            23990, 24064, 24138, 24212, 24287,
            24361, 24436, 24511, 24586, 24662,
            24738, 24814, 24890, 24966, 25043,
            25120, 25197, 25275, 25352, 25430,
            25508, 25587, 25665, 25744, 25823,
            25902, 25982, 26062, 26142, 26222,
            26303, 26384, 26465, 26546, 26627,
            26709, 26791, 26874, 26956, 27039,
            27122, 27205, 27289, 27373, 27457,
            27541, 27626, 27711, 27796, 27881,
            27967, 28053, 28139, 28226, 28312,
            28399, 28486, 28574, 28662, 28750,
            28838, 28927, 29016, 29105, 29194,
            29284, 29374, 29464, 29555, 29645,
            29736, 29828, 29919, 30011, 30104,
            30196, 30289, 30382, 30475, 30569,
            30663, 30757, 30851, 30946, 31041,
            31137, 31232, 31328, 31425, 31521,
            31618, 31715, 31813, 31910, 32008,
            32107, 32205, 32304, 32403, 32503,
            32603, 32703, 32804, 32904, 33005,
            33107, 33209, 33311, 33413, 33516,
            33619, 33722, 33825, 33929, 34034,
            34138, 34243, 34348, 34454, 34560,
            34666, 34772, 34879, 34986, 35094,
            35202, 35310, 35418, 35527, 35636,
            35746, 35856, 35966, 36076, 36187,
            36298, 36410, 36522, 36634, 36746,
            36859, 36973, 37086, 37200, 37314,
            37429, 37544, 37659, 37775, 37891,
            38008, 38124, 38241, 38359, 38477,
            38595, 38714, 38833, 38952, 39072,
            39192, 39312, 39433, 39554, 39675,
            39797, 39920, 40042, 40165, 40289,
            40413, 40537, 40661, 40786, 40911,
            41037, 41163, 41290, 41417, 41544,
            41671, 41800, 41928, 42057, 42186,
            42316, 42446, 42576, 42707, 42838,
            42970, 43102, 43234, 43367, 43500,
            43634, 43768, 43902, 44037, 44173,
            44308, 44444, 44581, 44718, 44855,
            44993, 45131, 45270, 45409, 45549,
            45689, 45829, 45970, 46111, 46253,
            46395, 46537, 46680, 46824, 46968,
            47112, 47257, 47402, 47548, 47694,
            47840, 47987, 48135, 48283, 48431,
            48580, 48729, 48879, 49029, 49180,
            49331, 49482, 49634, 49787, 49940,
            50093, 50247, 50401, 50556, 50712,
            50867, 51024, 51181, 51338, 51495,
            51654, 51812, 51972, 52131, 52291,
            52452, 52613, 52775, 52937, 53100,
            53263, 53427, 53591, 53755, 53921,
            54086, 54252, 54419, 54586, 54754,
            54922, 55091, 55260, 55430, 55600,
            55771, 55943, 56114, 56287, 56460,
            56633, 56807, 56982, 57157, 57333,
            57509, 57685, 57863, 58040, 58219,
            58398, 58577, 58757, 58938, 59119,
            59300, 59483, 59665, 59849, 60033,
            60217, 60402, 60588, 60774, 60960,
            61148, 61336, 61524, 61713, 61903,
            62093, 62284, 62475, 62667, 62860,
            63053, 63247, 63441, 63636, 63831,
            64027, 64224, 64422, 64619, 64818,
            65017, 65217, 65417, 65618, 65820,
            66022, 66225, 66429, 66633, 66837,
            67043, 67249, 67455, 67663, 67870,
            68079, 68288, 68498, 68708, 68920,
            69131, 69344, 69557, 69771, 69985,
            70200, 70416, 70632, 70849, 71067,
            71285, 71504, 71724, 71944, 72165,
            72387, 72609, 72833, 73056, 73281,
            73506, 73732, 73958, 74186, 74414,
            74642, 74872, 75102, 75332, 75564,
            75796, 76029, 76262, 76497, 76732,
            76968, 77204, 77441, 77679, 77918,
            78157, 78398, 78638, 78880, 79122,
            79366, 79609, 79854, 80099, 80345,
            80592, 80840, 81088, 81338, 81587,
            81838, 82090, 82342, 82595, 82849,
            83103, 83358, 83615, 83872, 84129,
            84388, 84647, 84907, 85168, 85430,
            85692, 85955, 86220, 86485, 86750,
            87017, 87284, 87552, 87821, 88091,
            88362, 88633, 88906, 89179, 89453,
            89728, 90003, 90280, 90557, 90836,
            91115, 91395, 91676, 91957, 92240,
            92523, 92807, 93093, 93379, 93666,
            93953, 94242, 94532, 94822, 95113,
            95406, 95699, 95993, 96288, 96584,
            96881, 97178, 97477, 97776, 98077,
            98378, 98680, 98984, 99288, 99593,
            99899, 100206, 100514, 100822, 101132,
            101443, 101755, 102067, 102381, 102696,
            103011, 103328, 103645, 103964, 104283,
            104603, 104925, 105247, 105571, 105895,
            106220, 106547, 106874, 107203, 107532,
            107862, 108194, 108526, 108860, 109194,
            109530, 109866, 110204, 110542, 110882,
            111223, 111565, 111907, 112251, 112596,
            112942, 113289, 113637, 113986, 114337,
            114688, 115040, 115394, 115748, 116104,
            116461, 116819, 117178, 117538, 117899,
            118261, 118624, 118989, 119354, 119721,
            120089, 120458, 120828, 121199, 121572,
            121945, 122320, 122696, 123073, 123451,
            123830, 124211, 124593, 124975, 125359,
            125745, 126131, 126518, 126907, 127297,
            127688, 128081, 128474, 128869, 129265,
            129662, 130061, 130260
         ) ),
        max_error = cms.double(0.6152529479288091),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut2 = cms.PSet(
        lut = cms.vint32( (
            256, 256, 257, 258, 259,
            260, 260, 261, 262, 263,
            264, 264, 265, 266, 267,
            268, 268, 269, 270, 271,
            272, 273, 273, 274, 275,
            276, 277, 278, 279, 279,
            280, 281, 282, 283, 284,
            285, 285, 286, 287, 288,
            289, 290, 291, 292, 293,
            293, 294, 295, 296, 297,
            298, 299, 300, 301, 302,
            303, 303, 304, 305, 306,
            307, 308, 309, 310, 311,
            312, 313, 314, 315, 316,
            317, 318, 319, 320, 321,
            322, 323, 324, 325, 326,
            327, 328, 329, 330, 331,
            332, 333, 334, 335, 336,
            337, 338, 339, 340, 341,
            342, 343, 344, 345, 346,
            347, 348, 349, 351, 352,
            353, 354, 355, 356, 357,
            358, 359, 360, 361, 363,
            364, 365, 366, 367, 368,
            369, 370, 372, 373, 374,
            375, 376, 377, 379, 380,
            381, 382, 383, 384, 386,
            387, 388, 389, 390, 392,
            393, 394, 395, 396, 398,
            399, 400, 401, 402, 404,
            405, 406, 407, 409, 410,
            411, 412, 414, 415, 416,
            418, 419, 420, 421, 423,
            424, 425, 427, 428, 429,
            431, 432, 433, 435, 436,
            437, 439, 440, 441, 443,
            444, 445, 447, 448, 449,
            451, 452, 454, 455, 456,
            458, 459, 461, 462, 463,
            465, 466, 468, 469, 471,
            472, 474, 475, 476, 478,
            479, 481, 482, 484, 485,
            487, 488, 490, 491, 493,
            494, 496, 497, 499, 500,
            502, 503, 505, 507, 508,
            510, 511, 513, 514, 516,
            518, 519, 521, 522, 524,
            526, 527, 529, 530, 532,
            534, 535, 537, 539, 540,
            542, 544, 545, 547, 549,
            550, 552, 554, 555, 557,
            559, 561, 562, 564, 566,
            567, 569, 571, 573, 575,
            576, 578, 580, 582, 583,
            585, 587, 589, 591, 592,
            594, 596, 598, 600, 602,
            603, 605, 607, 609, 611,
            613, 615, 617, 618, 620,
            622, 624, 626, 628, 630,
            632, 634, 636, 638, 640,
            642, 644, 646, 648, 650,
            652, 654, 656, 658, 660,
            662, 664, 666, 668, 670,
            672, 674, 676, 678, 680,
            682, 684, 686, 688, 691,
            693, 695, 697, 699, 701,
            703, 706, 708, 710, 712,
            714, 717, 719, 721, 723,
            725, 728, 730, 732, 734,
            737, 739, 741, 743, 746,
            748, 750, 753, 755, 757,
            760, 762, 764, 767, 769,
            771, 774, 776, 778, 781,
            783, 786, 788, 790, 793,
            795, 798, 800, 803, 805,
            808, 810, 813, 815, 818,
            820, 823, 825, 828, 830,
            833, 835, 838, 840, 843,
            846, 848, 851, 853, 856,
            859, 861, 864, 867, 869,
            872, 875, 877, 880, 883,
            885, 888, 891, 894, 896,
            899, 902, 905, 907, 910,
            913, 916, 919, 921, 924,
            927, 930, 933, 936, 939,
            941, 944, 947, 950, 953,
            956, 959, 962, 965, 968,
            971, 974, 977, 980, 983,
            986, 989, 992, 995, 998,
            1001, 1004, 1007, 1010, 1013,
            1017, 1020, 1023, 1026, 1029,
            1032, 1035, 1039, 1042, 1045,
            1048, 1051, 1055, 1058, 1061,
            1064, 1068, 1071, 1074, 1078,
            1081, 1084, 1088, 1091, 1094,
            1098, 1101, 1104, 1108, 1111,
            1115, 1118, 1121, 1125, 1128,
            1132, 1135, 1139, 1142, 1146,
            1149, 1153, 1156, 1160, 1163,
            1167, 1171, 1174, 1178, 1181,
            1185, 1189, 1192, 1196, 1200,
            1203, 1207, 1211, 1214, 1218,
            1222, 1226, 1229, 1233, 1237,
            1241, 1245, 1249, 1252, 1256,
            1260, 1264, 1268, 1272, 1276,
            1280, 1283, 1287, 1291, 1295,
            1299, 1303, 1307, 1311, 1315,
            1319, 1323, 1328, 1332, 1336,
            1340, 1344, 1348, 1352, 1356,
            1360, 1365, 1369, 1373, 1377,
            1382, 1386, 1390, 1394, 1399,
            1403, 1407, 1412, 1416, 1420,
            1425, 1429, 1433, 1438, 1442,
            1447, 1451, 1455, 1460, 1464,
            1469, 1473, 1478, 1483, 1487,
            1492, 1496, 1501, 1505, 1510,
            1515, 1519, 1524, 1529, 1533,
            1538, 1543, 1548, 1552, 1557,
            1562, 1567, 1572, 1576, 1581,
            1586, 1591, 1596, 1601, 1606,
            1611, 1616, 1620, 1625, 1630,
            1635, 1640, 1646, 1651, 1656,
            1661, 1666, 1671, 1676, 1681,
            1686, 1692, 1697, 1702, 1707,
            1712, 1718, 1723, 1728, 1734,
            1739, 1744, 1750, 1755, 1760,
            1766, 1771, 1777, 1782, 1788,
            1793, 1799, 1804, 1810, 1815,
            1821, 1826, 1832, 1838, 1843,
            1849, 1855, 1860, 1866, 1872,
            1878, 1883, 1889, 1895, 1901,
            1907, 1912, 1918, 1924, 1930,
            1936, 1942, 1948, 1954, 1960,
            1966, 1972, 1978, 1984, 1990,
            1996, 2003, 2009, 2015, 2021,
            2027, 2033, 2040, 2046, 2052,
            2059, 2065, 2071, 2078, 2084,
            2090, 2097, 2103, 2110, 2116,
            2123, 2129, 2136, 2142, 2149,
            2156, 2162, 2169, 2175, 2182,
            2189, 2196, 2202, 2209, 2216,
            2223, 2230, 2236, 2243, 2250,
            2257, 2264, 2271, 2278, 2285,
            2292, 2299, 2306, 2313, 2320,
            2327, 2335, 2342, 2349, 2356,
            2363, 2371, 2378, 2385, 2393,
            2400, 2407, 2415, 2422, 2430,
            2437, 2444, 2452, 2460, 2467,
            2475, 2482, 2490, 2498, 2505,
            2513, 2521, 2528, 2536, 2544,
            2552, 2560, 2567, 2575, 2583,
            2591, 2599, 2607, 2615, 2623,
            2631, 2639, 2647, 2656, 2664,
            2672, 2680, 2688, 2697, 2705,
            2713, 2722, 2730, 2738, 2747,
            2755, 2764, 2772, 2781, 2789,
            2798, 2806, 2815, 2824, 2832,
            2841, 2850, 2858, 2867, 2876,
            2885, 2894, 2903, 2912, 2921,
            2930, 2939, 2948, 2957, 2966,
            2975, 2984, 2993, 3002, 3012,
            3021, 3030, 3039, 3049, 3058,
            3067, 3077, 3086, 3096, 3105,
            3115, 3124, 3134, 3144, 3153,
            3163, 3173, 3183, 3192, 3202,
            3212, 3222, 3232, 3242, 3252,
            3262, 3272, 3282, 3292, 3302,
            3312, 3322, 3332, 3343, 3353,
            3363, 3374, 3384, 3394, 3405,
            3415, 3426, 3436, 3447, 3457,
            3468, 3479, 3489, 3500, 3511,
            3522, 3532, 3543, 3554, 3565,
            3576, 3587, 3598, 3609, 3620,
            3631, 3642, 3654, 3665, 3676,
            3687, 3699, 3710, 3722, 3733,
            3744, 3756, 3767, 3779, 3791,
            3802, 3814, 3826, 3837, 3849,
            3861, 3873, 3885, 3897, 3909,
            3921, 3933, 3945, 3957, 3969,
            3981, 3994, 4006, 4018, 4031,
            4043, 4055, 4068, 4080, 4093,
            4105, 4118, 4131, 4143, 4156,
            4169, 4182, 4195, 4207, 4220,
            4233, 4246, 4259, 4272, 4286,
            4299, 4312, 4325, 4339, 4352,
            4365, 4379, 4392, 4406, 4419,
            4433, 4446, 4460, 4474, 4487,
            4501, 4515, 4529, 4543, 4557,
            4571, 4585, 4599, 4613, 4627,
            4641, 4656, 4670, 4684, 4699,
            4713, 4728, 4742, 4757, 4771,
            4786, 4801, 4816, 4830, 4845,
            4860, 4875, 4890, 4905, 4920,
            4935, 4950, 4966, 4981, 4996,
            5011, 5027, 5042, 5058, 5073,
            5089, 5105, 5120, 5136, 5152,
            5168, 5183, 5199, 5215, 5231,
            5247, 5264, 5280, 5296, 5312,
            5329, 5345, 5361, 5378, 5394,
            5411, 5428, 5444, 5461, 5478,
            5495, 5512, 5528, 5545, 5562,
            5580, 5597, 5614, 5631, 5648,
            5666, 5683, 5701, 5718, 5736,
            5753, 5771, 5789, 5807, 5824,
            5842, 5860, 5878, 5896, 5914,
            5933, 5951, 5969, 5987, 6006,
            6024, 6043, 6061, 6080, 6099,
            6117, 6136, 6155, 6174, 6193,
            6212, 6231, 6250, 6269, 6289,
            6308, 6327, 6347, 6366, 6386,
            6406, 6425, 6445, 6465, 6485,
            6505, 6525, 6545, 6565, 6585,
            6605, 6625, 6646, 6666, 6687,
            6707, 6728, 6749, 6769, 6790,
            6811, 6832, 6853, 6874, 6895,
            6916, 6937, 6959, 6980, 7002,
            7023, 7045, 7066, 7088, 7110,
            7132, 7154, 7176, 7198, 7220,
            7242, 7264, 7286, 7309, 7331,
            7354, 7376, 7399, 7422, 7445,
            7468, 7490, 7513, 7537, 7560,
            7583, 7606, 7630, 7653, 7677,
            7700, 7724, 7748, 7771, 7795,
            7819, 7843, 7867, 7892, 7916,
            7940, 7964, 7989, 8014, 8038,
            8063, 8088, 8112, 8137, 8162,
            8187, 8213, 8238, 8263, 8289,
            8314, 8340, 8365, 8391, 8417,
            8443, 8468, 8495, 8521, 8547,
            8573, 8599, 8626, 8652, 8679,
            8706, 8732, 8759, 8786, 8813,
            8840, 8867, 8895, 8922, 8949,
            8977, 9004, 9032, 9060, 9088,
            9116, 9144, 9172, 9200, 9228,
            9256, 9285, 9313, 9342, 9371,
            9400, 9428, 9457, 9486, 9516,
            9545, 9574, 9604, 9633, 9663,
            9692, 9722, 9752, 9782, 9812,
            9842, 9872, 9903, 9933, 9964,
            9994, 10025, 10056, 10087, 10118,
            10149, 10180, 10211, 10243, 10274,
            10306, 10337, 10369, 10401, 10433,
            10465, 10497, 10529, 10562, 10594,
            10627, 10659, 10692, 10725, 10758,
            10791, 10824, 10858, 10891, 10924,
            10958, 10992, 11025, 11059, 11093,
            11127, 11161, 11196, 11230, 11265,
            11299, 11334, 11369, 11404, 11439,
            11474, 11509, 11545, 11580, 11616,
            11651, 11687, 11723, 11759, 11795,
            11831, 11868, 11904, 11941, 11978,
            12014, 12051, 12088, 12125, 12163,
            12200, 12238, 12275, 12313, 12351,
            12389, 12427, 12465, 12503, 12542,
            12580, 12619, 12658, 12696, 12735,
            12775, 12814, 12853, 12893, 12932,
            12972, 13012, 13052, 13092, 13132,
            13173, 13213, 13254, 13294, 13335,
            13376, 13417, 13459, 13500, 13541,
            13583, 13625, 13667, 13709, 13751,
            13793, 13835, 13878, 13920, 13963,
            14006, 14049, 14092, 14136, 14179,
            14223, 14266, 14310, 14354, 14398,
            14443, 14487, 14531, 14576, 14621,
            14666, 14711, 14756, 14801, 14847,
            14892, 14938, 14984, 15030, 15076,
            15123, 15169, 15216, 15263, 15309,
            15356, 15404, 15451, 15498, 15546,
            15594, 15642, 15690, 15738, 15786,
            15835, 15884, 15932, 15981, 16030,
            16080, 16129, 16179, 16228, 16278,
            16328, 16378, 16429, 16479, 16530,
            16581, 16632, 16683, 16734, 16785,
            16837, 16889, 16941, 16993, 17045,
            17097, 17150, 17202, 17255, 17308,
            17361, 17415, 17468, 17522, 17576,
            17630, 17684, 17738, 17793, 17848,
            17902, 17957, 18013, 18068, 18123,
            18179, 18235, 18291, 18347, 18404,
            18460, 18517, 18574, 18631, 18688,
            18746, 18803, 18861, 18919, 18977,
            19035, 19094, 19152, 19211, 19270,
            19330, 19389, 19448, 19508, 19568,
            19628, 19689, 19749, 19810, 19871,
            19932, 19993, 20054, 20116, 20178,
            20240, 20302, 20364, 20427, 20490,
            20553, 20616, 20679, 20743, 20806,
            20870, 20935, 20999, 21063, 21128,
            21193, 21258, 21323, 21389, 21455,
            21521, 21587, 21653, 21720, 21786,
            21853, 21920, 21988, 22055, 22123,
            22191, 22259, 22328, 22396, 22465,
            22534, 22603, 22673, 22742, 22812,
            22882, 22953, 23023, 23094, 23165,
            23236, 23308, 23379, 23451, 23523,
            23595, 23668, 23741, 23814, 23887,
            23960, 24034, 24108, 24182, 24256,
            24330, 24405, 24480, 24555, 24631,
            24707, 24783, 24859, 24935, 25012,
            25089, 25166, 25243, 25320, 25398,
            25476, 25555, 25633, 25712, 25791,
            25870, 25950, 26029, 26109, 26190,
            26270, 26351, 26432, 26513, 26594,
            26676, 26758, 26840, 26923, 27006,
            27088, 27172, 27255, 27339, 27423,
            27507, 27592, 27677, 27762, 27847,
            27932, 28018, 28104, 28191, 28277,
            28364, 28451, 28539, 28626, 28714,
            28803, 28891, 28980, 29069, 29158,
            29248, 29338, 29428, 29518, 29609,
            29700, 29791, 29883, 29975, 30067,
            30159, 30252, 30345, 30438, 30532,
            30625, 30719, 30814, 30909, 31003,
            31099, 31194, 31290, 31386, 31483,
            31579, 31677, 31774, 31871, 31969,
            32068, 32166, 32265, 32364, 32464,
            32563, 32663, 32764, 32864, 32965,
            33067, 33168, 33270, 33372, 33475,
            33578, 33681, 33785, 33888, 33992,
            34097, 34202, 34307, 34412, 34518,
            34624, 34730, 34837, 34944, 35051,
            35159, 35267, 35376, 35484, 35593,
            35703, 35812, 35922, 36033, 36144,
            36255, 36366, 36478, 36590, 36702,
            36815, 36928, 37042, 37155, 37270,
            37384, 37499, 37614, 37730, 37846,
            37962, 38079, 38196, 38313, 38431,
            38549, 38667, 38786, 38905, 39025,
            39145, 39265, 39386, 39507, 39628,
            39750, 39872, 39994, 40117, 40241,
            40364, 40488, 40613, 40737, 40863,
            40988, 41114, 41240, 41367, 41494,
            41622, 41750, 41878, 42007, 42136,
            42265, 42395, 42525, 42656, 42787,
            42919, 43050, 43183, 43315, 43448,
            43582, 43716, 43850, 43985, 44120,
            44256, 44392, 44528, 44665, 44802,
            44940, 45078, 45216, 45355, 45495,
            45634, 45775, 45915, 46056, 46198,
            46340, 46482, 46625, 46768, 46912,
            47056, 47201, 47346, 47491, 47637,
            47784, 47930, 48078, 48225, 48374,
            48522, 48671, 48821, 48971, 49121,
            49272, 49424, 49576, 49728, 49881,
            50034, 50188, 50342, 50497, 50652,
            50807, 50963, 51120, 51277, 51435,
            51593, 51751, 51910, 52070, 52230,
            52390, 52551, 52713, 52875, 53037,
            53200, 53364, 53528, 53692, 53857,
            54022, 54188, 54355, 54522, 54690,
            54858, 55026, 55195, 55365, 55535,
            55706, 55877, 56048, 56221, 56393,
            56567, 56740, 56915, 57090, 57265,
            57441, 57618, 57795, 57972, 58150,
            58329, 58508, 58688, 58868, 59049,
            59231, 59413, 59595, 59778, 59962,
            60146, 60331, 60516, 60702, 60889,
            61076, 61264, 61452, 61641, 61830,
            62020, 62211, 62402, 62594, 62786,
            62979, 63172, 63366, 63561, 63756,
            63952, 64149, 64346, 64544, 64742,
            64941, 65140, 65341, 65541, 65743,
            65945, 66147, 66351, 66555, 66759,
            66964, 67170, 67376, 67583, 67791,
            67999, 68208, 68418, 68628, 68839,
            69050, 69263, 69475, 69689, 69903,
            70118, 70333, 70549, 70766, 70984,
            71202, 71421, 71640, 71860, 72081,
            72302, 72525, 72747, 72971, 73195,
            73420, 73646, 73872, 74099, 74327,
            74555, 74784, 75014, 75244, 75476,
            75707, 75940, 76173, 76407, 76642,
            76878, 77114, 77351, 77589, 77827,
            78066, 78306, 78547, 78788, 79030,
            79273, 79516, 79761, 80006, 80252,
            80498, 80746, 80994, 81243, 81492,
            81743, 81994, 82246, 82498, 82752,
            83006, 83261, 83517, 83774, 84031,
            84289, 84548, 84808, 85069, 85330,
            85592, 85855, 86119, 86384, 86649,
            86915, 87182, 87450, 87719, 87989,
            88259, 88530, 88802, 89075, 89349,
            89623, 89899, 90175, 90452, 90730,
            91009, 91288, 91569, 91850, 92132,
            92415, 92699, 92984, 93270, 93557,
            93844, 94132, 94422, 94712, 95003,
            95295, 95587, 95881, 96176, 96471,
            96768, 97065, 97363, 97662, 97963,
            98264, 98565, 98868, 99172, 99477,
            99783, 100089, 100397, 100705, 101015,
            101325, 101636, 101949, 102262, 102576,
            102891, 103207, 103525, 103843, 104162,
            104482, 104803, 105125, 105448, 105772,
            106097, 106423, 106750, 107078, 107407,
            107737, 108068, 108400, 108733, 109067,
            109402, 109738, 110076, 110414, 110753,
            111093, 111435, 111777, 112121, 112465,
            112811, 113157, 113505, 113854, 114204,
            114555, 114907, 115260, 115614, 115969,
            116325, 116683, 117041, 117401, 117762,
            118124, 118486, 118851, 119216, 119582,
            119949, 120318, 120688, 121059, 121431,
            121804, 122178, 122553, 122930, 123308,
            123687, 124067, 124448, 124830, 125214,
            125598, 125984, 126371, 126760, 127149,
            127540, 127932, 128325, 128719, 129115,
            129511, 129909, 130309, 130709, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071
         ) ),
        max_error = cms.double(5748.616225984908),
        output_scale_factor = cms.double(0.953125),
        unused_lsbs = cms.uint32(2)
    ),
    inv_mass_checks = cms.untracked.bool(False),
    minDR = cms.double(0.5),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    sanity_checks = cms.untracked.bool(False),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    )
)


process.DoubleTkEle2512 = cms.EDFilter("L1GTDoubleObjectCond",
    collection1 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 1.479),
        regionsMinPt = cms.vdouble(20, 20),
        regionsQualityFlags = cms.vuint32(2, 0),
        tag = cms.InputTag("l1tGTProducer","CL2Electrons")
    ),
    collection2 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 1.479),
        regionsMinPt = cms.vdouble(9, 9),
        regionsQualityFlags = cms.vuint32(2, 0),
        tag = cms.InputTag("l1tGTProducer","CL2Electrons")
    ),
    cos_phi_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            487, 487, 487, 487, 487,
            487, 487, 487, 487, 487,
            487, 486, 486, 486, 486,
            486, 486, 486, 485, 485,
            485, 485, 485, 485, 484,
            484, 484, 484, 484, 483,
            483, 483, 483, 483, 482,
            482, 482, 482, 481, 481,
            481, 481, 480, 480, 480,
            480, 479, 479, 479, 478,
            478, 478, 478, 477, 477,
            477, 476, 476, 476, 475,
            475, 475, 474, 474, 474,
            473, 473, 472, 472, 472,
            471, 471, 471, 470, 470,
            469, 469, 468, 468, 468,
            467, 467, 466, 466, 465,
            465, 465, 464, 464, 463,
            463, 462, 462, 461, 461,
            460, 460, 459, 459, 458,
            458, 457, 457, 456, 456,
            455, 454, 454, 453, 453,
            452, 452, 451, 451, 450,
            449, 449, 448, 448, 447,
            446, 446, 445, 445, 444,
            443, 443, 442, 441, 441,
            440, 440, 439, 438, 438,
            437, 436, 436, 435, 434,
            434, 433, 432, 431, 431,
            430, 429, 429, 428, 427,
            426, 426, 425, 424, 423,
            423, 422, 421, 420, 420,
            419, 418, 417, 417, 416,
            415, 414, 413, 413, 412,
            411, 410, 409, 409, 408,
            407, 406, 405, 405, 404,
            403, 402, 401, 400, 399,
            399, 398, 397, 396, 395,
            394, 393, 392, 392, 391,
            390, 389, 388, 387, 386,
            385, 384, 383, 382, 381,
            381, 380, 379, 378, 377,
            376, 375, 374, 373, 372,
            371, 370, 369, 368, 367,
            366, 365, 364, 363, 362,
            361, 360, 359, 358, 357,
            356, 355, 354, 353, 352,
            351, 350, 349, 348, 347,
            346, 345, 343, 342, 341,
            340, 339, 338, 337, 336,
            335, 334, 333, 332, 330,
            329, 328, 327, 326, 325,
            324, 323, 322, 320, 319,
            318, 317, 316, 315, 314,
            312, 311, 310, 309, 308,
            307, 306, 304, 303, 302,
            301, 300, 298, 297, 296,
            295, 294, 293, 291, 290,
            289, 288, 286, 285, 284,
            283, 282, 280, 279, 278,
            277, 275, 274, 273, 272,
            270, 269, 268, 267, 265,
            264, 263, 262, 260, 259,
            258, 257, 255, 254, 253,
            252, 250, 249, 248, 246,
            245, 244, 242, 241, 240,
            239, 237, 236, 235, 233,
            232, 231, 229, 228, 227,
            225, 224, 223, 221, 220,
            219, 217, 216, 215, 213,
            212, 211, 209, 208, 207,
            205, 204, 203, 201, 200,
            198, 197, 196, 194, 193,
            192, 190, 189, 187, 186,
            185, 183, 182, 181, 179,
            178, 176, 175, 174, 172,
            171, 169, 168, 167, 165,
            164, 162, 161, 159, 158,
            157, 155, 154, 152, 151,
            150, 148, 147, 145, 144,
            142, 141, 140, 138, 137,
            135, 134, 132, 131, 129,
            128, 127, 125, 124, 122,
            121, 119, 118, 116, 115,
            113, 112, 111, 109, 108,
            106, 105, 103, 102, 100,
            99, 97, 96, 94, 93,
            92, 90, 89, 87, 86,
            84, 83, 81, 80, 78,
            77, 75, 74, 72, 71,
            69, 68, 66, 65, 63,
            62, 60, 59, 58, 56,
            55, 53, 52, 50, 49,
            47, 46, 44, 43, 41,
            40, 38, 37, 35, 34,
            32, 31, 29, 28, 26,
            25, 23, 22, 20, 19,
            17, 16, 14, 13, 11,
            10, 8, 7, 5, 4,
            2, 1, -1, -2, -4,
            -5, -7, -8, -10, -11,
            -13, -14, -16, -17, -19,
            -20, -22, -23, -25, -26,
            -28, -29, -31, -32, -34,
            -35, -37, -38, -40, -41,
            -43, -44, -46, -47, -49,
            -50, -52, -53, -55, -56,
            -58, -59, -60, -62, -63,
            -65, -66, -68, -69, -71,
            -72, -74, -75, -77, -78,
            -80, -81, -83, -84, -86,
            -87, -89, -90, -92, -93,
            -94, -96, -97, -99, -100,
            -102, -103, -105, -106, -108,
            -109, -111, -112, -113, -115,
            -116, -118, -119, -121, -122,
            -124, -125, -127, -128, -129,
            -131, -132, -134, -135, -137,
            -138, -140, -141, -142, -144,
            -145, -147, -148, -150, -151,
            -152, -154, -155, -157, -158,
            -159, -161, -162, -164, -165,
            -167, -168, -169, -171, -172,
            -174, -175, -176, -178, -179,
            -181, -182, -183, -185, -186,
            -187, -189, -190, -192, -193,
            -194, -196, -197, -198, -200,
            -201, -203, -204, -205, -207,
            -208, -209, -211, -212, -213,
            -215, -216, -217, -219, -220,
            -221, -223, -224, -225, -227,
            -228, -229, -231, -232, -233,
            -235, -236, -237, -239, -240,
            -241, -242, -244, -245, -246,
            -248, -249, -250, -252, -253,
            -254, -255, -257, -258, -259,
            -260, -262, -263, -264, -265,
            -267, -268, -269, -270, -272,
            -273, -274, -275, -277, -278,
            -279, -280, -282, -283, -284,
            -285, -286, -288, -289, -290,
            -291, -293, -294, -295, -296,
            -297, -298, -300, -301, -302,
            -303, -304, -306, -307, -308,
            -309, -310, -311, -312, -314,
            -315, -316, -317, -318, -319,
            -320, -322, -323, -324, -325,
            -326, -327, -328, -329, -330,
            -332, -333, -334, -335, -336,
            -337, -338, -339, -340, -341,
            -342, -343, -345, -346, -347,
            -348, -349, -350, -351, -352,
            -353, -354, -355, -356, -357,
            -358, -359, -360, -361, -362,
            -363, -364, -365, -366, -367,
            -368, -369, -370, -371, -372,
            -373, -374, -375, -376, -377,
            -378, -379, -380, -381, -381,
            -382, -383, -384, -385, -386,
            -387, -388, -389, -390, -391,
            -392, -392, -393, -394, -395,
            -396, -397, -398, -399, -399,
            -400, -401, -402, -403, -404,
            -405, -405, -406, -407, -408,
            -409, -409, -410, -411, -412,
            -413, -413, -414, -415, -416,
            -417, -417, -418, -419, -420,
            -420, -421, -422, -423, -423,
            -424, -425, -426, -426, -427,
            -428, -429, -429, -430, -431,
            -431, -432, -433, -434, -434,
            -435, -436, -436, -437, -438,
            -438, -439, -440, -440, -441,
            -441, -442, -443, -443, -444,
            -445, -445, -446, -446, -447,
            -448, -448, -449, -449, -450,
            -451, -451, -452, -452, -453,
            -453, -454, -454, -455, -456,
            -456, -457, -457, -458, -458,
            -459, -459, -460, -460, -461,
            -461, -462, -462, -463, -463,
            -464, -464, -465, -465, -465,
            -466, -466, -467, -467, -468,
            -468, -468, -469, -469, -470,
            -470, -471, -471, -471, -472,
            -472, -472, -473, -473, -474,
            -474, -474, -475, -475, -475,
            -476, -476, -476, -477, -477,
            -477, -478, -478, -478, -478,
            -479, -479, -479, -480, -480,
            -480, -480, -481, -481, -481,
            -481, -482, -482, -482, -482,
            -483, -483, -483, -483, -483,
            -484, -484, -484, -484, -484,
            -485, -485, -485, -485, -485,
            -485, -486, -486, -486, -486,
            -486, -486, -486, -487, -487,
            -487, -487, -487, -487, -487,
            -487, -487, -487, -487, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488
         ) ),
        max_error = cms.double(0.0025338281044886835),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            489, 489, 489, 489, 489,
            489, 489, 489, 489, 489,
            489, 490, 490, 490, 490,
            490, 490, 490, 491, 491,
            491, 491, 491, 491, 492,
            492, 492, 492, 492, 493,
            493, 493, 493, 493, 494,
            494, 494, 494, 495, 495,
            495, 495, 496, 496, 496,
            496, 497, 497, 497, 498,
            498, 498, 499, 499, 499,
            499, 500, 500, 500, 501,
            501, 502, 502, 502, 503,
            503, 503, 504, 504, 504,
            505, 505, 506, 506, 507,
            507, 507, 508, 508, 509,
            509, 510, 510, 510, 511,
            511, 512, 512, 513, 513,
            514, 514, 515, 515, 516,
            516, 517, 517, 518, 518,
            519, 520, 520, 521, 521,
            522, 522, 523, 523, 524,
            525, 525, 526, 526, 527,
            528, 528, 529, 530, 530,
            531, 531, 532, 533, 533,
            534, 535, 535, 536, 537,
            537, 538, 539, 540, 540,
            541, 542, 542, 543, 544,
            545, 545, 546, 547, 548,
            548, 549, 550, 551, 551,
            552, 553, 554, 555, 555,
            556, 557, 558, 559, 560,
            560, 561, 562, 563, 564,
            565, 566, 567, 567, 568,
            569, 570, 571, 572, 573,
            574, 575, 576, 577, 577,
            578, 579, 580, 581, 582,
            583, 584, 585, 586, 587,
            588, 589, 590, 591, 592,
            593, 594, 595, 596, 598,
            599, 600, 601, 602, 603,
            604, 605, 606, 607, 608,
            610, 611, 612, 613, 614,
            615, 616, 618, 619, 620,
            621, 622, 623, 625, 626,
            627, 628, 629, 631, 632,
            633, 634, 636, 637, 638,
            639, 641, 642, 643, 644,
            646, 647, 648, 650, 651,
            652, 654, 655, 656, 658,
            659, 660, 662, 663, 665,
            666, 667, 669, 670, 672,
            673, 674, 676, 677, 679,
            680, 682, 683, 685, 686,
            687, 689, 690, 692, 693,
            695, 697, 698, 700, 701,
            703, 704, 706, 707, 709,
            710, 712, 714, 715, 717,
            719, 720, 722, 723, 725,
            727, 728, 730, 732, 733,
            735, 737, 738, 740, 742,
            744, 745, 747, 749, 750,
            752, 754, 756, 758, 759,
            761, 763, 765, 767, 768,
            770, 772, 774, 776, 778,
            779, 781, 783, 785, 787,
            789, 791, 793, 795, 796,
            798, 800, 802, 804, 806,
            808, 810, 812, 814, 816,
            818, 820, 822, 824, 826,
            828, 830, 832, 835, 837,
            839, 841, 843, 845, 847,
            849, 851, 854, 856, 858,
            860, 862, 864, 867, 869,
            871, 873, 875, 878, 880,
            882, 884, 887, 889, 891,
            894, 896, 898, 900, 903,
            905, 907, 910, 912, 915,
            917, 919, 922, 924, 927,
            929, 931, 934, 936, 939,
            941, 944, 946, 949, 951,
            954, 956, 959, 961, 964,
            966, 969, 971, 974, 977,
            979, 982, 984, 987, 990,
            992, 995, 998, 1000, 1003,
            1006, 1008, 1011, 1014, 1017,
            1019, 1022, 1025, 1028, 1030,
            1033, 1036, 1039, 1042, 1044,
            1047, 1050, 1053, 1056, 1059,
            1062, 1065, 1067, 1070, 1073,
            1076, 1079, 1082, 1085, 1088,
            1091, 1094, 1097, 1100, 1103,
            1106, 1109, 1112, 1115, 1118,
            1122, 1125, 1128, 1131, 1134,
            1137, 1140, 1143, 1147, 1150,
            1153, 1156, 1159, 1163, 1166,
            1169, 1172, 1176, 1179, 1182,
            1186, 1189, 1192, 1196, 1199,
            1202, 1206, 1209, 1212, 1216,
            1219, 1223, 1226, 1230, 1233,
            1237, 1240, 1244, 1247, 1251,
            1254, 1258, 1261, 1265, 1268,
            1272, 1276, 1279, 1283, 1287,
            1290, 1294, 1298, 1301, 1305,
            1309, 1312, 1316, 1320, 1324,
            1327, 1331, 1335, 1339, 1343,
            1347, 1350, 1354, 1358, 1362,
            1366, 1370, 1374, 1378, 1382,
            1386, 1390, 1394, 1398, 1402,
            1406, 1410, 1414, 1418, 1422,
            1426, 1430, 1434, 1439, 1443,
            1447, 1451, 1455, 1459, 1464,
            1468, 1472, 1476, 1481, 1485,
            1489, 1494, 1498, 1502, 1507,
            1511, 1516, 1520, 1524, 1529,
            1533, 1538, 1542, 1547, 1551,
            1556, 1560, 1565, 1569, 1574,
            1579, 1583, 1588, 1592, 1597,
            1602, 1606, 1611, 1616, 1621,
            1625, 1630, 1635, 1640, 1645,
            1649, 1654, 1659, 1664, 1669,
            1674, 1679, 1684, 1689, 1693,
            1698, 1703, 1708, 1714, 1719,
            1724, 1729, 1734, 1739, 1744,
            1749, 1754, 1760, 1765, 1770,
            1775, 1780, 1786, 1791, 1796,
            1802, 1807, 1812, 1818, 1823,
            1828, 1834, 1839, 1845, 1850,
            1856, 1861, 1867, 1872, 1878,
            1883, 1889, 1894, 1900, 1906,
            1911, 1917, 1923, 1929, 1934,
            1940, 1946, 1952, 1957, 1963,
            1969, 1975, 1981, 1987, 1993,
            1999, 2004, 2010, 2016, 2022,
            2028, 2035, 2041, 2047, 2053,
            2059, 2065, 2071, 2077, 2084,
            2090, 2096, 2102, 2109, 2115,
            2121, 2128, 2134, 2140, 2147,
            2153, 2160, 2166, 2173, 2179,
            2186, 2192, 2199, 2205, 2212,
            2219, 2225, 2232, 2239, 2245,
            2252, 2259, 2266, 2272, 2279,
            2286, 2293, 2300, 2307, 2314,
            2321, 2328, 2335, 2342, 2349,
            2356, 2363, 2370, 2377, 2384,
            2391, 2398, 2406, 2413, 2420,
            2427, 2435, 2442, 2449, 2457,
            2464, 2472, 2479, 2487, 2494,
            2502, 2509, 2517, 2524, 2532,
            2539, 2547, 2555, 2563, 2570,
            2578, 2586, 2594, 2601, 2609,
            2617, 2625, 2633, 2641, 2649,
            2657, 2665, 2673, 2681, 2689,
            2697, 2705, 2714, 2722, 2730,
            2738, 2747, 2755, 2763, 2772,
            2780, 2788, 2797, 2805, 2814,
            2822, 2831, 2839, 2848, 2857,
            2865, 2874, 2883, 2891, 2900,
            2909, 2918, 2927, 2935, 2944,
            2953, 2962, 2971, 2980, 2989,
            2998, 3007, 3016, 3026, 3035,
            3044, 3053, 3062, 3072, 3081,
            3090, 3100, 3109, 3119, 3128,
            3138, 3147, 3157, 3166, 3176,
            3186, 3195, 3205, 3215, 3224,
            3234, 3244, 3254, 3264, 3274,
            3284, 3294, 3304, 3314, 3324,
            3334, 3344, 3354, 3364, 3375,
            3385, 3395, 3405, 3416, 3426,
            3437, 3447, 3458, 3468, 3479,
            3489, 3500, 3510, 3521, 3532,
            3543, 3553, 3564, 3575, 3586,
            3597, 3608, 3619, 3630, 3641,
            3652, 3663, 3674, 3685, 3697,
            3708, 3719, 3730, 3742, 3753,
            3765, 3776, 3788, 3799, 3811,
            3822, 3834, 3846, 3857, 3869,
            3881, 3893, 3905, 3917, 3929,
            3941, 3953, 3965, 3977, 3989,
            4001, 4013, 4025, 4038, 4050,
            4062, 4075, 4087, 4100, 4112,
            4125, 4137, 4150, 4163, 4175,
            4188, 4201, 4214, 4226, 4239,
            4252, 4265, 4278, 4291, 4304,
            4318, 4331, 4344, 4357, 4371,
            4384, 4397, 4411, 4424, 4438,
            4451, 4465, 4479, 4492, 4506,
            4520, 4533, 4547, 4561, 4575,
            4589, 4603, 4617, 4631, 4645,
            4660, 4674, 4688, 4703, 4717,
            4731, 4746, 4760, 4775, 4789,
            4804, 4819, 4833, 4848, 4863,
            4878, 4893, 4908, 4923, 4938,
            4953, 4968, 4983, 4999, 5014,
            5029, 5045, 5060, 5075, 5091,
            5107, 5122, 5138, 5154, 5169,
            5185, 5201, 5217, 5233, 5249,
            5265, 5281, 5297, 5313, 5330,
            5346, 5362, 5379, 5395, 5412,
            5428, 5445, 5462, 5478, 5495,
            5512, 5529, 5546, 5563, 5580,
            5597, 5614, 5631, 5648, 5666,
            5683, 5700, 5718, 5735, 5753,
            5770, 5788, 5806, 5824, 5841,
            5859, 5877, 5895, 5913, 5931,
            5950, 5968, 5986, 6004, 6023,
            6041, 6060, 6078, 6097, 6116,
            6134, 6153, 6172, 6191, 6210,
            6229, 6248, 6267, 6286, 6305,
            6325, 6344, 6364, 6383, 6403,
            6422, 6442, 6462, 6481, 6501,
            6521, 6541, 6561, 6581, 6602,
            6622, 6642, 6662, 6683, 6703,
            6724, 6744, 6765, 6786, 6807,
            6828, 6848, 6869, 6891, 6912,
            6933, 6954, 6975, 6997, 7018,
            7040, 7061, 7083, 7105, 7126,
            7148, 7170, 7192, 7214, 7236,
            7259, 7281, 7303, 7325, 7348,
            7370, 7393, 7416, 7438, 7461,
            7484, 7507, 7530, 7553, 7576,
            7600, 7623, 7646, 7670, 7693,
            7717, 7741, 7764, 7788, 7812,
            7836, 7860, 7884, 7908, 7932,
            7957, 7981, 8006, 8030, 8055,
            8080, 8104, 8129, 8154, 8179,
            8204, 8229, 8255, 8280, 8305,
            8331, 8356, 8382, 8408, 8434,
            8459, 8485, 8511, 8537, 8564,
            8590, 8616, 8643, 8669, 8696,
            8722, 8749, 8776, 8803, 8830,
            8857, 8884, 8912, 8939, 8966,
            8994, 9021, 9049, 9077, 9105,
            9133, 9161, 9189, 9217, 9245,
            9274, 9302, 9331, 9359, 9388,
            9417, 9446, 9475, 9504, 9533,
            9562, 9591, 9621, 9650, 9680,
            9710, 9740, 9769, 9799, 9830,
            9860, 9890, 9920, 9951, 9981,
            10012, 10043, 10073, 10104, 10135,
            10166, 10198, 10229, 10260, 10292,
            10323, 10355, 10387, 10419, 10451,
            10483, 10515, 10547, 10580, 10612,
            10645, 10677, 10710, 10743, 10776,
            10809, 10842, 10876, 10909, 10942,
            10976, 11010, 11044, 11077, 11111,
            11146, 11180, 11214, 11248, 11283,
            11318, 11352, 11387, 11422, 11457,
            11492, 11528, 11563, 11599, 11634,
            11670, 11706, 11742, 11778, 11814,
            11850, 11887, 11923, 11960, 11996,
            12033, 12070, 12107, 12144, 12182,
            12219, 12257, 12294, 12332, 12370,
            12408, 12446, 12484, 12522, 12561,
            12599, 12638, 12677, 12716, 12755,
            12794, 12833, 12873, 12912, 12952,
            12992, 13032, 13072, 13112, 13152,
            13192, 13233, 13274, 13314, 13355,
            13396, 13437, 13479, 13520, 13561,
            13603, 13645, 13687, 13729, 13771,
            13813, 13856, 13898, 13941, 13984,
            14027, 14070, 14113, 14156, 14200,
            14243, 14287, 14331, 14375, 14419,
            14463, 14508, 14552, 14597, 14642,
            14687, 14732, 14777, 14823, 14868,
            14914, 14960, 15005, 15052, 15098,
            15144, 15191, 15237, 15284, 15331,
            15378, 15425, 15473, 15520, 15568,
            15616, 15664, 15712, 15760, 15808,
            15857, 15906, 15955, 16004, 16053,
            16102, 16151, 16201, 16251, 16301,
            16351, 16401, 16451, 16502, 16553,
            16603, 16654, 16706, 16757, 16808,
            16860, 16912, 16964, 17016, 17068,
            17121, 17173, 17226, 17279, 17332,
            17385, 17438, 17492, 17546, 17600,
            17654, 17708, 17762, 17817, 17872,
            17926, 17982, 18037, 18092, 18148,
            18203, 18259, 18315, 18372, 18428,
            18485, 18542, 18598, 18656, 18713,
            18770, 18828, 18886, 18944, 19002,
            19060, 19119, 19178, 19237, 19296,
            19355, 19414, 19474, 19534, 19594,
            19654, 19714, 19775, 19836, 19897,
            19958, 20019, 20081, 20142, 20204,
            20266, 20328, 20391, 20454, 20516,
            20579, 20643, 20706, 20770, 20833,
            20897, 20962, 21026, 21091, 21155,
            21220, 21286, 21351, 21417, 21482,
            21548, 21615, 21681, 21748, 21814,
            21881, 21949, 22016, 22084, 22151,
            22220, 22288, 22356, 22425, 22494,
            22563, 22632, 22702, 22771, 22841,
            22912, 22982, 23053, 23123, 23194,
            23266, 23337, 23409, 23481, 23553,
            23625, 23698, 23771, 23844, 23917,
            23990, 24064, 24138, 24212, 24287,
            24361, 24436, 24511, 24586, 24662,
            24738, 24814, 24890, 24966, 25043,
            25120, 25197, 25275, 25352, 25430,
            25508, 25587, 25665, 25744, 25823,
            25902, 25982, 26062, 26142, 26222,
            26303, 26384, 26465, 26546, 26627,
            26709, 26791, 26874, 26956, 27039,
            27122, 27205, 27289, 27373, 27457,
            27541, 27626, 27711, 27796, 27881,
            27967, 28053, 28139, 28226, 28312,
            28399, 28486, 28574, 28662, 28750,
            28838, 28927, 29016, 29105, 29194,
            29284, 29374, 29464, 29555, 29645,
            29736, 29828, 29919, 30011, 30104,
            30196, 30289, 30382, 30475, 30569,
            30663, 30757, 30851, 30946, 31041,
            31137, 31232, 31328, 31425, 31521,
            31618, 31715, 31813, 31910, 32008,
            32107, 32205, 32304, 32403, 32503,
            32603, 32703, 32804, 32904, 33005,
            33107, 33209, 33311, 33413, 33516,
            33619, 33722, 33825, 33929, 34034,
            34138, 34243, 34348, 34454, 34560,
            34666, 34772, 34879, 34986, 35094,
            35202, 35310, 35418, 35527, 35636,
            35746, 35856, 35966, 36076, 36187,
            36298, 36410, 36522, 36634, 36746,
            36859, 36973, 37086, 37200, 37314,
            37429, 37544, 37659, 37775, 37891,
            38008, 38124, 38241, 38359, 38477,
            38595, 38714, 38833, 38952, 39072,
            39192, 39312, 39433, 39554, 39675,
            39797, 39920, 40042, 40165, 40289,
            40413, 40537, 40661, 40786, 40911,
            41037, 41163, 41290, 41417, 41544,
            41671, 41800, 41928, 42057, 42186,
            42316, 42446, 42576, 42707, 42838,
            42970, 43102, 43234, 43367, 43500,
            43634, 43768, 43902, 44037, 44173,
            44308, 44444, 44581, 44718, 44855,
            44993, 45131, 45270, 45409, 45549,
            45689, 45829, 45970, 46111, 46253,
            46395, 46537, 46680, 46824, 46968,
            47112, 47257, 47402, 47548, 47694,
            47840, 47987, 48135, 48283, 48431,
            48580, 48729, 48879, 49029, 49180,
            49331, 49482, 49634, 49787, 49940,
            50093, 50247, 50401, 50556, 50712,
            50867, 51024, 51181, 51338, 51495,
            51654, 51812, 51972, 52131, 52291,
            52452, 52613, 52775, 52937, 53100,
            53263, 53427, 53591, 53755, 53921,
            54086, 54252, 54419, 54586, 54754,
            54922, 55091, 55260, 55430, 55600,
            55771, 55943, 56114, 56287, 56460,
            56633, 56807, 56982, 57157, 57333,
            57509, 57685, 57863, 58040, 58219,
            58398, 58577, 58757, 58938, 59119,
            59300, 59483, 59665, 59849, 60033,
            60217, 60402, 60588, 60774, 60960,
            61148, 61336, 61524, 61713, 61903,
            62093, 62284, 62475, 62667, 62860,
            63053, 63247, 63441, 63636, 63831,
            64027, 64224, 64422, 64619, 64818,
            65017, 65217, 65417, 65618, 65820,
            66022, 66225, 66429, 66633, 66837,
            67043, 67249, 67455, 67663, 67870,
            68079, 68288, 68498, 68708, 68920,
            69131, 69344, 69557, 69771, 69985,
            70200, 70416, 70632, 70849, 71067,
            71285, 71504, 71724, 71944, 72165,
            72387, 72609, 72833, 73056, 73281,
            73506, 73732, 73958, 74186, 74414,
            74642, 74872, 75102, 75332, 75564,
            75796, 76029, 76262, 76497, 76732,
            76968, 77204, 77441, 77679, 77918,
            78157, 78398, 78638, 78880, 79122,
            79366, 79609, 79854, 80099, 80345,
            80592, 80840, 81088, 81338, 81587,
            81838, 82090, 82342, 82595, 82849,
            83103, 83358, 83615, 83872, 84129,
            84388, 84647, 84907, 85168, 85430,
            85692, 85955, 86220, 86485, 86750,
            87017, 87284, 87552, 87821, 88091,
            88362, 88633, 88906, 89179, 89453,
            89728, 90003, 90280, 90557, 90836,
            91115, 91395, 91676, 91957, 92240,
            92523, 92807, 93093, 93379, 93666,
            93953, 94242, 94532, 94822, 95113,
            95406, 95699, 95993, 96288, 96584,
            96881, 97178, 97477, 97776, 98077,
            98378, 98680, 98984, 99288, 99593,
            99899, 100206, 100514, 100822, 101132,
            101443, 101755, 102067, 102381, 102696,
            103011, 103328, 103645, 103964, 104283,
            104603, 104925, 105247, 105571, 105895,
            106220, 106547, 106874, 107203, 107532,
            107862, 108194, 108526, 108860, 109194,
            109530, 109866, 110204, 110542, 110882,
            111223, 111565, 111907, 112251, 112596,
            112942, 113289, 113637, 113986, 114337,
            114688, 115040, 115394, 115748, 116104,
            116461, 116819, 117178, 117538, 117899,
            118261, 118624, 118989, 119354, 119721,
            120089, 120458, 120828, 121199, 121572,
            121945, 122320, 122696, 123073, 123451,
            123830, 124211, 124593, 124975, 125359,
            125745, 126131, 126518, 126907, 127297,
            127688, 128081, 128474, 128869, 129265,
            129662, 130061, 130260
         ) ),
        max_error = cms.double(0.6152529479288091),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut2 = cms.PSet(
        lut = cms.vint32( (
            256, 256, 257, 258, 259,
            260, 260, 261, 262, 263,
            264, 264, 265, 266, 267,
            268, 268, 269, 270, 271,
            272, 273, 273, 274, 275,
            276, 277, 278, 279, 279,
            280, 281, 282, 283, 284,
            285, 285, 286, 287, 288,
            289, 290, 291, 292, 293,
            293, 294, 295, 296, 297,
            298, 299, 300, 301, 302,
            303, 303, 304, 305, 306,
            307, 308, 309, 310, 311,
            312, 313, 314, 315, 316,
            317, 318, 319, 320, 321,
            322, 323, 324, 325, 326,
            327, 328, 329, 330, 331,
            332, 333, 334, 335, 336,
            337, 338, 339, 340, 341,
            342, 343, 344, 345, 346,
            347, 348, 349, 351, 352,
            353, 354, 355, 356, 357,
            358, 359, 360, 361, 363,
            364, 365, 366, 367, 368,
            369, 370, 372, 373, 374,
            375, 376, 377, 379, 380,
            381, 382, 383, 384, 386,
            387, 388, 389, 390, 392,
            393, 394, 395, 396, 398,
            399, 400, 401, 402, 404,
            405, 406, 407, 409, 410,
            411, 412, 414, 415, 416,
            418, 419, 420, 421, 423,
            424, 425, 427, 428, 429,
            431, 432, 433, 435, 436,
            437, 439, 440, 441, 443,
            444, 445, 447, 448, 449,
            451, 452, 454, 455, 456,
            458, 459, 461, 462, 463,
            465, 466, 468, 469, 471,
            472, 474, 475, 476, 478,
            479, 481, 482, 484, 485,
            487, 488, 490, 491, 493,
            494, 496, 497, 499, 500,
            502, 503, 505, 507, 508,
            510, 511, 513, 514, 516,
            518, 519, 521, 522, 524,
            526, 527, 529, 530, 532,
            534, 535, 537, 539, 540,
            542, 544, 545, 547, 549,
            550, 552, 554, 555, 557,
            559, 561, 562, 564, 566,
            567, 569, 571, 573, 575,
            576, 578, 580, 582, 583,
            585, 587, 589, 591, 592,
            594, 596, 598, 600, 602,
            603, 605, 607, 609, 611,
            613, 615, 617, 618, 620,
            622, 624, 626, 628, 630,
            632, 634, 636, 638, 640,
            642, 644, 646, 648, 650,
            652, 654, 656, 658, 660,
            662, 664, 666, 668, 670,
            672, 674, 676, 678, 680,
            682, 684, 686, 688, 691,
            693, 695, 697, 699, 701,
            703, 706, 708, 710, 712,
            714, 717, 719, 721, 723,
            725, 728, 730, 732, 734,
            737, 739, 741, 743, 746,
            748, 750, 753, 755, 757,
            760, 762, 764, 767, 769,
            771, 774, 776, 778, 781,
            783, 786, 788, 790, 793,
            795, 798, 800, 803, 805,
            808, 810, 813, 815, 818,
            820, 823, 825, 828, 830,
            833, 835, 838, 840, 843,
            846, 848, 851, 853, 856,
            859, 861, 864, 867, 869,
            872, 875, 877, 880, 883,
            885, 888, 891, 894, 896,
            899, 902, 905, 907, 910,
            913, 916, 919, 921, 924,
            927, 930, 933, 936, 939,
            941, 944, 947, 950, 953,
            956, 959, 962, 965, 968,
            971, 974, 977, 980, 983,
            986, 989, 992, 995, 998,
            1001, 1004, 1007, 1010, 1013,
            1017, 1020, 1023, 1026, 1029,
            1032, 1035, 1039, 1042, 1045,
            1048, 1051, 1055, 1058, 1061,
            1064, 1068, 1071, 1074, 1078,
            1081, 1084, 1088, 1091, 1094,
            1098, 1101, 1104, 1108, 1111,
            1115, 1118, 1121, 1125, 1128,
            1132, 1135, 1139, 1142, 1146,
            1149, 1153, 1156, 1160, 1163,
            1167, 1171, 1174, 1178, 1181,
            1185, 1189, 1192, 1196, 1200,
            1203, 1207, 1211, 1214, 1218,
            1222, 1226, 1229, 1233, 1237,
            1241, 1245, 1249, 1252, 1256,
            1260, 1264, 1268, 1272, 1276,
            1280, 1283, 1287, 1291, 1295,
            1299, 1303, 1307, 1311, 1315,
            1319, 1323, 1328, 1332, 1336,
            1340, 1344, 1348, 1352, 1356,
            1360, 1365, 1369, 1373, 1377,
            1382, 1386, 1390, 1394, 1399,
            1403, 1407, 1412, 1416, 1420,
            1425, 1429, 1433, 1438, 1442,
            1447, 1451, 1455, 1460, 1464,
            1469, 1473, 1478, 1483, 1487,
            1492, 1496, 1501, 1505, 1510,
            1515, 1519, 1524, 1529, 1533,
            1538, 1543, 1548, 1552, 1557,
            1562, 1567, 1572, 1576, 1581,
            1586, 1591, 1596, 1601, 1606,
            1611, 1616, 1620, 1625, 1630,
            1635, 1640, 1646, 1651, 1656,
            1661, 1666, 1671, 1676, 1681,
            1686, 1692, 1697, 1702, 1707,
            1712, 1718, 1723, 1728, 1734,
            1739, 1744, 1750, 1755, 1760,
            1766, 1771, 1777, 1782, 1788,
            1793, 1799, 1804, 1810, 1815,
            1821, 1826, 1832, 1838, 1843,
            1849, 1855, 1860, 1866, 1872,
            1878, 1883, 1889, 1895, 1901,
            1907, 1912, 1918, 1924, 1930,
            1936, 1942, 1948, 1954, 1960,
            1966, 1972, 1978, 1984, 1990,
            1996, 2003, 2009, 2015, 2021,
            2027, 2033, 2040, 2046, 2052,
            2059, 2065, 2071, 2078, 2084,
            2090, 2097, 2103, 2110, 2116,
            2123, 2129, 2136, 2142, 2149,
            2156, 2162, 2169, 2175, 2182,
            2189, 2196, 2202, 2209, 2216,
            2223, 2230, 2236, 2243, 2250,
            2257, 2264, 2271, 2278, 2285,
            2292, 2299, 2306, 2313, 2320,
            2327, 2335, 2342, 2349, 2356,
            2363, 2371, 2378, 2385, 2393,
            2400, 2407, 2415, 2422, 2430,
            2437, 2444, 2452, 2460, 2467,
            2475, 2482, 2490, 2498, 2505,
            2513, 2521, 2528, 2536, 2544,
            2552, 2560, 2567, 2575, 2583,
            2591, 2599, 2607, 2615, 2623,
            2631, 2639, 2647, 2656, 2664,
            2672, 2680, 2688, 2697, 2705,
            2713, 2722, 2730, 2738, 2747,
            2755, 2764, 2772, 2781, 2789,
            2798, 2806, 2815, 2824, 2832,
            2841, 2850, 2858, 2867, 2876,
            2885, 2894, 2903, 2912, 2921,
            2930, 2939, 2948, 2957, 2966,
            2975, 2984, 2993, 3002, 3012,
            3021, 3030, 3039, 3049, 3058,
            3067, 3077, 3086, 3096, 3105,
            3115, 3124, 3134, 3144, 3153,
            3163, 3173, 3183, 3192, 3202,
            3212, 3222, 3232, 3242, 3252,
            3262, 3272, 3282, 3292, 3302,
            3312, 3322, 3332, 3343, 3353,
            3363, 3374, 3384, 3394, 3405,
            3415, 3426, 3436, 3447, 3457,
            3468, 3479, 3489, 3500, 3511,
            3522, 3532, 3543, 3554, 3565,
            3576, 3587, 3598, 3609, 3620,
            3631, 3642, 3654, 3665, 3676,
            3687, 3699, 3710, 3722, 3733,
            3744, 3756, 3767, 3779, 3791,
            3802, 3814, 3826, 3837, 3849,
            3861, 3873, 3885, 3897, 3909,
            3921, 3933, 3945, 3957, 3969,
            3981, 3994, 4006, 4018, 4031,
            4043, 4055, 4068, 4080, 4093,
            4105, 4118, 4131, 4143, 4156,
            4169, 4182, 4195, 4207, 4220,
            4233, 4246, 4259, 4272, 4286,
            4299, 4312, 4325, 4339, 4352,
            4365, 4379, 4392, 4406, 4419,
            4433, 4446, 4460, 4474, 4487,
            4501, 4515, 4529, 4543, 4557,
            4571, 4585, 4599, 4613, 4627,
            4641, 4656, 4670, 4684, 4699,
            4713, 4728, 4742, 4757, 4771,
            4786, 4801, 4816, 4830, 4845,
            4860, 4875, 4890, 4905, 4920,
            4935, 4950, 4966, 4981, 4996,
            5011, 5027, 5042, 5058, 5073,
            5089, 5105, 5120, 5136, 5152,
            5168, 5183, 5199, 5215, 5231,
            5247, 5264, 5280, 5296, 5312,
            5329, 5345, 5361, 5378, 5394,
            5411, 5428, 5444, 5461, 5478,
            5495, 5512, 5528, 5545, 5562,
            5580, 5597, 5614, 5631, 5648,
            5666, 5683, 5701, 5718, 5736,
            5753, 5771, 5789, 5807, 5824,
            5842, 5860, 5878, 5896, 5914,
            5933, 5951, 5969, 5987, 6006,
            6024, 6043, 6061, 6080, 6099,
            6117, 6136, 6155, 6174, 6193,
            6212, 6231, 6250, 6269, 6289,
            6308, 6327, 6347, 6366, 6386,
            6406, 6425, 6445, 6465, 6485,
            6505, 6525, 6545, 6565, 6585,
            6605, 6625, 6646, 6666, 6687,
            6707, 6728, 6749, 6769, 6790,
            6811, 6832, 6853, 6874, 6895,
            6916, 6937, 6959, 6980, 7002,
            7023, 7045, 7066, 7088, 7110,
            7132, 7154, 7176, 7198, 7220,
            7242, 7264, 7286, 7309, 7331,
            7354, 7376, 7399, 7422, 7445,
            7468, 7490, 7513, 7537, 7560,
            7583, 7606, 7630, 7653, 7677,
            7700, 7724, 7748, 7771, 7795,
            7819, 7843, 7867, 7892, 7916,
            7940, 7964, 7989, 8014, 8038,
            8063, 8088, 8112, 8137, 8162,
            8187, 8213, 8238, 8263, 8289,
            8314, 8340, 8365, 8391, 8417,
            8443, 8468, 8495, 8521, 8547,
            8573, 8599, 8626, 8652, 8679,
            8706, 8732, 8759, 8786, 8813,
            8840, 8867, 8895, 8922, 8949,
            8977, 9004, 9032, 9060, 9088,
            9116, 9144, 9172, 9200, 9228,
            9256, 9285, 9313, 9342, 9371,
            9400, 9428, 9457, 9486, 9516,
            9545, 9574, 9604, 9633, 9663,
            9692, 9722, 9752, 9782, 9812,
            9842, 9872, 9903, 9933, 9964,
            9994, 10025, 10056, 10087, 10118,
            10149, 10180, 10211, 10243, 10274,
            10306, 10337, 10369, 10401, 10433,
            10465, 10497, 10529, 10562, 10594,
            10627, 10659, 10692, 10725, 10758,
            10791, 10824, 10858, 10891, 10924,
            10958, 10992, 11025, 11059, 11093,
            11127, 11161, 11196, 11230, 11265,
            11299, 11334, 11369, 11404, 11439,
            11474, 11509, 11545, 11580, 11616,
            11651, 11687, 11723, 11759, 11795,
            11831, 11868, 11904, 11941, 11978,
            12014, 12051, 12088, 12125, 12163,
            12200, 12238, 12275, 12313, 12351,
            12389, 12427, 12465, 12503, 12542,
            12580, 12619, 12658, 12696, 12735,
            12775, 12814, 12853, 12893, 12932,
            12972, 13012, 13052, 13092, 13132,
            13173, 13213, 13254, 13294, 13335,
            13376, 13417, 13459, 13500, 13541,
            13583, 13625, 13667, 13709, 13751,
            13793, 13835, 13878, 13920, 13963,
            14006, 14049, 14092, 14136, 14179,
            14223, 14266, 14310, 14354, 14398,
            14443, 14487, 14531, 14576, 14621,
            14666, 14711, 14756, 14801, 14847,
            14892, 14938, 14984, 15030, 15076,
            15123, 15169, 15216, 15263, 15309,
            15356, 15404, 15451, 15498, 15546,
            15594, 15642, 15690, 15738, 15786,
            15835, 15884, 15932, 15981, 16030,
            16080, 16129, 16179, 16228, 16278,
            16328, 16378, 16429, 16479, 16530,
            16581, 16632, 16683, 16734, 16785,
            16837, 16889, 16941, 16993, 17045,
            17097, 17150, 17202, 17255, 17308,
            17361, 17415, 17468, 17522, 17576,
            17630, 17684, 17738, 17793, 17848,
            17902, 17957, 18013, 18068, 18123,
            18179, 18235, 18291, 18347, 18404,
            18460, 18517, 18574, 18631, 18688,
            18746, 18803, 18861, 18919, 18977,
            19035, 19094, 19152, 19211, 19270,
            19330, 19389, 19448, 19508, 19568,
            19628, 19689, 19749, 19810, 19871,
            19932, 19993, 20054, 20116, 20178,
            20240, 20302, 20364, 20427, 20490,
            20553, 20616, 20679, 20743, 20806,
            20870, 20935, 20999, 21063, 21128,
            21193, 21258, 21323, 21389, 21455,
            21521, 21587, 21653, 21720, 21786,
            21853, 21920, 21988, 22055, 22123,
            22191, 22259, 22328, 22396, 22465,
            22534, 22603, 22673, 22742, 22812,
            22882, 22953, 23023, 23094, 23165,
            23236, 23308, 23379, 23451, 23523,
            23595, 23668, 23741, 23814, 23887,
            23960, 24034, 24108, 24182, 24256,
            24330, 24405, 24480, 24555, 24631,
            24707, 24783, 24859, 24935, 25012,
            25089, 25166, 25243, 25320, 25398,
            25476, 25555, 25633, 25712, 25791,
            25870, 25950, 26029, 26109, 26190,
            26270, 26351, 26432, 26513, 26594,
            26676, 26758, 26840, 26923, 27006,
            27088, 27172, 27255, 27339, 27423,
            27507, 27592, 27677, 27762, 27847,
            27932, 28018, 28104, 28191, 28277,
            28364, 28451, 28539, 28626, 28714,
            28803, 28891, 28980, 29069, 29158,
            29248, 29338, 29428, 29518, 29609,
            29700, 29791, 29883, 29975, 30067,
            30159, 30252, 30345, 30438, 30532,
            30625, 30719, 30814, 30909, 31003,
            31099, 31194, 31290, 31386, 31483,
            31579, 31677, 31774, 31871, 31969,
            32068, 32166, 32265, 32364, 32464,
            32563, 32663, 32764, 32864, 32965,
            33067, 33168, 33270, 33372, 33475,
            33578, 33681, 33785, 33888, 33992,
            34097, 34202, 34307, 34412, 34518,
            34624, 34730, 34837, 34944, 35051,
            35159, 35267, 35376, 35484, 35593,
            35703, 35812, 35922, 36033, 36144,
            36255, 36366, 36478, 36590, 36702,
            36815, 36928, 37042, 37155, 37270,
            37384, 37499, 37614, 37730, 37846,
            37962, 38079, 38196, 38313, 38431,
            38549, 38667, 38786, 38905, 39025,
            39145, 39265, 39386, 39507, 39628,
            39750, 39872, 39994, 40117, 40241,
            40364, 40488, 40613, 40737, 40863,
            40988, 41114, 41240, 41367, 41494,
            41622, 41750, 41878, 42007, 42136,
            42265, 42395, 42525, 42656, 42787,
            42919, 43050, 43183, 43315, 43448,
            43582, 43716, 43850, 43985, 44120,
            44256, 44392, 44528, 44665, 44802,
            44940, 45078, 45216, 45355, 45495,
            45634, 45775, 45915, 46056, 46198,
            46340, 46482, 46625, 46768, 46912,
            47056, 47201, 47346, 47491, 47637,
            47784, 47930, 48078, 48225, 48374,
            48522, 48671, 48821, 48971, 49121,
            49272, 49424, 49576, 49728, 49881,
            50034, 50188, 50342, 50497, 50652,
            50807, 50963, 51120, 51277, 51435,
            51593, 51751, 51910, 52070, 52230,
            52390, 52551, 52713, 52875, 53037,
            53200, 53364, 53528, 53692, 53857,
            54022, 54188, 54355, 54522, 54690,
            54858, 55026, 55195, 55365, 55535,
            55706, 55877, 56048, 56221, 56393,
            56567, 56740, 56915, 57090, 57265,
            57441, 57618, 57795, 57972, 58150,
            58329, 58508, 58688, 58868, 59049,
            59231, 59413, 59595, 59778, 59962,
            60146, 60331, 60516, 60702, 60889,
            61076, 61264, 61452, 61641, 61830,
            62020, 62211, 62402, 62594, 62786,
            62979, 63172, 63366, 63561, 63756,
            63952, 64149, 64346, 64544, 64742,
            64941, 65140, 65341, 65541, 65743,
            65945, 66147, 66351, 66555, 66759,
            66964, 67170, 67376, 67583, 67791,
            67999, 68208, 68418, 68628, 68839,
            69050, 69263, 69475, 69689, 69903,
            70118, 70333, 70549, 70766, 70984,
            71202, 71421, 71640, 71860, 72081,
            72302, 72525, 72747, 72971, 73195,
            73420, 73646, 73872, 74099, 74327,
            74555, 74784, 75014, 75244, 75476,
            75707, 75940, 76173, 76407, 76642,
            76878, 77114, 77351, 77589, 77827,
            78066, 78306, 78547, 78788, 79030,
            79273, 79516, 79761, 80006, 80252,
            80498, 80746, 80994, 81243, 81492,
            81743, 81994, 82246, 82498, 82752,
            83006, 83261, 83517, 83774, 84031,
            84289, 84548, 84808, 85069, 85330,
            85592, 85855, 86119, 86384, 86649,
            86915, 87182, 87450, 87719, 87989,
            88259, 88530, 88802, 89075, 89349,
            89623, 89899, 90175, 90452, 90730,
            91009, 91288, 91569, 91850, 92132,
            92415, 92699, 92984, 93270, 93557,
            93844, 94132, 94422, 94712, 95003,
            95295, 95587, 95881, 96176, 96471,
            96768, 97065, 97363, 97662, 97963,
            98264, 98565, 98868, 99172, 99477,
            99783, 100089, 100397, 100705, 101015,
            101325, 101636, 101949, 102262, 102576,
            102891, 103207, 103525, 103843, 104162,
            104482, 104803, 105125, 105448, 105772,
            106097, 106423, 106750, 107078, 107407,
            107737, 108068, 108400, 108733, 109067,
            109402, 109738, 110076, 110414, 110753,
            111093, 111435, 111777, 112121, 112465,
            112811, 113157, 113505, 113854, 114204,
            114555, 114907, 115260, 115614, 115969,
            116325, 116683, 117041, 117401, 117762,
            118124, 118486, 118851, 119216, 119582,
            119949, 120318, 120688, 121059, 121431,
            121804, 122178, 122553, 122930, 123308,
            123687, 124067, 124448, 124830, 125214,
            125598, 125984, 126371, 126760, 127149,
            127540, 127932, 128325, 128719, 129115,
            129511, 129909, 130309, 130709, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071
         ) ),
        max_error = cms.double(5748.616225984908),
        output_scale_factor = cms.double(0.953125),
        unused_lsbs = cms.uint32(2)
    ),
    inv_mass_checks = cms.untracked.bool(False),
    maxDz = cms.double(1),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    sanity_checks = cms.untracked.bool(False),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    )
)


process.DoubleTkElePuppiHT = cms.EDFilter("L1GTTripleObjectCond",
    collection1 = cms.PSet(
        maxEta = cms.double(2.4),
        maxPrimVertDz = cms.double(1),
        minEta = cms.double(-2.4),
        primVertex = cms.uint32(0),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 1.479),
        regionsMinPt = cms.vdouble(6, 6),
        regionsQualityFlags = cms.vuint32(2, 0),
        tag = cms.InputTag("l1tGTProducer","CL2Electrons")
    ),
    collection2 = cms.PSet(
        maxEta = cms.double(2.4),
        maxPrimVertDz = cms.double(1),
        minEta = cms.double(-2.4),
        primVertex = cms.uint32(0),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 1.479),
        regionsMinPt = cms.vdouble(6, 6),
        regionsQualityFlags = cms.vuint32(2, 0),
        tag = cms.InputTag("l1tGTProducer","CL2Electrons")
    ),
    collection3 = cms.PSet(
        minScalarSumPt = cms.double(316),
        tag = cms.InputTag("l1tGTProducer","CL2HtSum")
    ),
    cos_phi_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            487, 487, 487, 487, 487,
            487, 487, 487, 487, 487,
            487, 486, 486, 486, 486,
            486, 486, 486, 485, 485,
            485, 485, 485, 485, 484,
            484, 484, 484, 484, 483,
            483, 483, 483, 483, 482,
            482, 482, 482, 481, 481,
            481, 481, 480, 480, 480,
            480, 479, 479, 479, 478,
            478, 478, 478, 477, 477,
            477, 476, 476, 476, 475,
            475, 475, 474, 474, 474,
            473, 473, 472, 472, 472,
            471, 471, 471, 470, 470,
            469, 469, 468, 468, 468,
            467, 467, 466, 466, 465,
            465, 465, 464, 464, 463,
            463, 462, 462, 461, 461,
            460, 460, 459, 459, 458,
            458, 457, 457, 456, 456,
            455, 454, 454, 453, 453,
            452, 452, 451, 451, 450,
            449, 449, 448, 448, 447,
            446, 446, 445, 445, 444,
            443, 443, 442, 441, 441,
            440, 440, 439, 438, 438,
            437, 436, 436, 435, 434,
            434, 433, 432, 431, 431,
            430, 429, 429, 428, 427,
            426, 426, 425, 424, 423,
            423, 422, 421, 420, 420,
            419, 418, 417, 417, 416,
            415, 414, 413, 413, 412,
            411, 410, 409, 409, 408,
            407, 406, 405, 405, 404,
            403, 402, 401, 400, 399,
            399, 398, 397, 396, 395,
            394, 393, 392, 392, 391,
            390, 389, 388, 387, 386,
            385, 384, 383, 382, 381,
            381, 380, 379, 378, 377,
            376, 375, 374, 373, 372,
            371, 370, 369, 368, 367,
            366, 365, 364, 363, 362,
            361, 360, 359, 358, 357,
            356, 355, 354, 353, 352,
            351, 350, 349, 348, 347,
            346, 345, 343, 342, 341,
            340, 339, 338, 337, 336,
            335, 334, 333, 332, 330,
            329, 328, 327, 326, 325,
            324, 323, 322, 320, 319,
            318, 317, 316, 315, 314,
            312, 311, 310, 309, 308,
            307, 306, 304, 303, 302,
            301, 300, 298, 297, 296,
            295, 294, 293, 291, 290,
            289, 288, 286, 285, 284,
            283, 282, 280, 279, 278,
            277, 275, 274, 273, 272,
            270, 269, 268, 267, 265,
            264, 263, 262, 260, 259,
            258, 257, 255, 254, 253,
            252, 250, 249, 248, 246,
            245, 244, 242, 241, 240,
            239, 237, 236, 235, 233,
            232, 231, 229, 228, 227,
            225, 224, 223, 221, 220,
            219, 217, 216, 215, 213,
            212, 211, 209, 208, 207,
            205, 204, 203, 201, 200,
            198, 197, 196, 194, 193,
            192, 190, 189, 187, 186,
            185, 183, 182, 181, 179,
            178, 176, 175, 174, 172,
            171, 169, 168, 167, 165,
            164, 162, 161, 159, 158,
            157, 155, 154, 152, 151,
            150, 148, 147, 145, 144,
            142, 141, 140, 138, 137,
            135, 134, 132, 131, 129,
            128, 127, 125, 124, 122,
            121, 119, 118, 116, 115,
            113, 112, 111, 109, 108,
            106, 105, 103, 102, 100,
            99, 97, 96, 94, 93,
            92, 90, 89, 87, 86,
            84, 83, 81, 80, 78,
            77, 75, 74, 72, 71,
            69, 68, 66, 65, 63,
            62, 60, 59, 58, 56,
            55, 53, 52, 50, 49,
            47, 46, 44, 43, 41,
            40, 38, 37, 35, 34,
            32, 31, 29, 28, 26,
            25, 23, 22, 20, 19,
            17, 16, 14, 13, 11,
            10, 8, 7, 5, 4,
            2, 1, -1, -2, -4,
            -5, -7, -8, -10, -11,
            -13, -14, -16, -17, -19,
            -20, -22, -23, -25, -26,
            -28, -29, -31, -32, -34,
            -35, -37, -38, -40, -41,
            -43, -44, -46, -47, -49,
            -50, -52, -53, -55, -56,
            -58, -59, -60, -62, -63,
            -65, -66, -68, -69, -71,
            -72, -74, -75, -77, -78,
            -80, -81, -83, -84, -86,
            -87, -89, -90, -92, -93,
            -94, -96, -97, -99, -100,
            -102, -103, -105, -106, -108,
            -109, -111, -112, -113, -115,
            -116, -118, -119, -121, -122,
            -124, -125, -127, -128, -129,
            -131, -132, -134, -135, -137,
            -138, -140, -141, -142, -144,
            -145, -147, -148, -150, -151,
            -152, -154, -155, -157, -158,
            -159, -161, -162, -164, -165,
            -167, -168, -169, -171, -172,
            -174, -175, -176, -178, -179,
            -181, -182, -183, -185, -186,
            -187, -189, -190, -192, -193,
            -194, -196, -197, -198, -200,
            -201, -203, -204, -205, -207,
            -208, -209, -211, -212, -213,
            -215, -216, -217, -219, -220,
            -221, -223, -224, -225, -227,
            -228, -229, -231, -232, -233,
            -235, -236, -237, -239, -240,
            -241, -242, -244, -245, -246,
            -248, -249, -250, -252, -253,
            -254, -255, -257, -258, -259,
            -260, -262, -263, -264, -265,
            -267, -268, -269, -270, -272,
            -273, -274, -275, -277, -278,
            -279, -280, -282, -283, -284,
            -285, -286, -288, -289, -290,
            -291, -293, -294, -295, -296,
            -297, -298, -300, -301, -302,
            -303, -304, -306, -307, -308,
            -309, -310, -311, -312, -314,
            -315, -316, -317, -318, -319,
            -320, -322, -323, -324, -325,
            -326, -327, -328, -329, -330,
            -332, -333, -334, -335, -336,
            -337, -338, -339, -340, -341,
            -342, -343, -345, -346, -347,
            -348, -349, -350, -351, -352,
            -353, -354, -355, -356, -357,
            -358, -359, -360, -361, -362,
            -363, -364, -365, -366, -367,
            -368, -369, -370, -371, -372,
            -373, -374, -375, -376, -377,
            -378, -379, -380, -381, -381,
            -382, -383, -384, -385, -386,
            -387, -388, -389, -390, -391,
            -392, -392, -393, -394, -395,
            -396, -397, -398, -399, -399,
            -400, -401, -402, -403, -404,
            -405, -405, -406, -407, -408,
            -409, -409, -410, -411, -412,
            -413, -413, -414, -415, -416,
            -417, -417, -418, -419, -420,
            -420, -421, -422, -423, -423,
            -424, -425, -426, -426, -427,
            -428, -429, -429, -430, -431,
            -431, -432, -433, -434, -434,
            -435, -436, -436, -437, -438,
            -438, -439, -440, -440, -441,
            -441, -442, -443, -443, -444,
            -445, -445, -446, -446, -447,
            -448, -448, -449, -449, -450,
            -451, -451, -452, -452, -453,
            -453, -454, -454, -455, -456,
            -456, -457, -457, -458, -458,
            -459, -459, -460, -460, -461,
            -461, -462, -462, -463, -463,
            -464, -464, -465, -465, -465,
            -466, -466, -467, -467, -468,
            -468, -468, -469, -469, -470,
            -470, -471, -471, -471, -472,
            -472, -472, -473, -473, -474,
            -474, -474, -475, -475, -475,
            -476, -476, -476, -477, -477,
            -477, -478, -478, -478, -478,
            -479, -479, -479, -480, -480,
            -480, -480, -481, -481, -481,
            -481, -482, -482, -482, -482,
            -483, -483, -483, -483, -483,
            -484, -484, -484, -484, -484,
            -485, -485, -485, -485, -485,
            -485, -486, -486, -486, -486,
            -486, -486, -486, -487, -487,
            -487, -487, -487, -487, -487,
            -487, -487, -487, -487, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488
         ) ),
        max_error = cms.double(0.0025338281044886835),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            489, 489, 489, 489, 489,
            489, 489, 489, 489, 489,
            489, 490, 490, 490, 490,
            490, 490, 490, 491, 491,
            491, 491, 491, 491, 492,
            492, 492, 492, 492, 493,
            493, 493, 493, 493, 494,
            494, 494, 494, 495, 495,
            495, 495, 496, 496, 496,
            496, 497, 497, 497, 498,
            498, 498, 499, 499, 499,
            499, 500, 500, 500, 501,
            501, 502, 502, 502, 503,
            503, 503, 504, 504, 504,
            505, 505, 506, 506, 507,
            507, 507, 508, 508, 509,
            509, 510, 510, 510, 511,
            511, 512, 512, 513, 513,
            514, 514, 515, 515, 516,
            516, 517, 517, 518, 518,
            519, 520, 520, 521, 521,
            522, 522, 523, 523, 524,
            525, 525, 526, 526, 527,
            528, 528, 529, 530, 530,
            531, 531, 532, 533, 533,
            534, 535, 535, 536, 537,
            537, 538, 539, 540, 540,
            541, 542, 542, 543, 544,
            545, 545, 546, 547, 548,
            548, 549, 550, 551, 551,
            552, 553, 554, 555, 555,
            556, 557, 558, 559, 560,
            560, 561, 562, 563, 564,
            565, 566, 567, 567, 568,
            569, 570, 571, 572, 573,
            574, 575, 576, 577, 577,
            578, 579, 580, 581, 582,
            583, 584, 585, 586, 587,
            588, 589, 590, 591, 592,
            593, 594, 595, 596, 598,
            599, 600, 601, 602, 603,
            604, 605, 606, 607, 608,
            610, 611, 612, 613, 614,
            615, 616, 618, 619, 620,
            621, 622, 623, 625, 626,
            627, 628, 629, 631, 632,
            633, 634, 636, 637, 638,
            639, 641, 642, 643, 644,
            646, 647, 648, 650, 651,
            652, 654, 655, 656, 658,
            659, 660, 662, 663, 665,
            666, 667, 669, 670, 672,
            673, 674, 676, 677, 679,
            680, 682, 683, 685, 686,
            687, 689, 690, 692, 693,
            695, 697, 698, 700, 701,
            703, 704, 706, 707, 709,
            710, 712, 714, 715, 717,
            719, 720, 722, 723, 725,
            727, 728, 730, 732, 733,
            735, 737, 738, 740, 742,
            744, 745, 747, 749, 750,
            752, 754, 756, 758, 759,
            761, 763, 765, 767, 768,
            770, 772, 774, 776, 778,
            779, 781, 783, 785, 787,
            789, 791, 793, 795, 796,
            798, 800, 802, 804, 806,
            808, 810, 812, 814, 816,
            818, 820, 822, 824, 826,
            828, 830, 832, 835, 837,
            839, 841, 843, 845, 847,
            849, 851, 854, 856, 858,
            860, 862, 864, 867, 869,
            871, 873, 875, 878, 880,
            882, 884, 887, 889, 891,
            894, 896, 898, 900, 903,
            905, 907, 910, 912, 915,
            917, 919, 922, 924, 927,
            929, 931, 934, 936, 939,
            941, 944, 946, 949, 951,
            954, 956, 959, 961, 964,
            966, 969, 971, 974, 977,
            979, 982, 984, 987, 990,
            992, 995, 998, 1000, 1003,
            1006, 1008, 1011, 1014, 1017,
            1019, 1022, 1025, 1028, 1030,
            1033, 1036, 1039, 1042, 1044,
            1047, 1050, 1053, 1056, 1059,
            1062, 1065, 1067, 1070, 1073,
            1076, 1079, 1082, 1085, 1088,
            1091, 1094, 1097, 1100, 1103,
            1106, 1109, 1112, 1115, 1118,
            1122, 1125, 1128, 1131, 1134,
            1137, 1140, 1143, 1147, 1150,
            1153, 1156, 1159, 1163, 1166,
            1169, 1172, 1176, 1179, 1182,
            1186, 1189, 1192, 1196, 1199,
            1202, 1206, 1209, 1212, 1216,
            1219, 1223, 1226, 1230, 1233,
            1237, 1240, 1244, 1247, 1251,
            1254, 1258, 1261, 1265, 1268,
            1272, 1276, 1279, 1283, 1287,
            1290, 1294, 1298, 1301, 1305,
            1309, 1312, 1316, 1320, 1324,
            1327, 1331, 1335, 1339, 1343,
            1347, 1350, 1354, 1358, 1362,
            1366, 1370, 1374, 1378, 1382,
            1386, 1390, 1394, 1398, 1402,
            1406, 1410, 1414, 1418, 1422,
            1426, 1430, 1434, 1439, 1443,
            1447, 1451, 1455, 1459, 1464,
            1468, 1472, 1476, 1481, 1485,
            1489, 1494, 1498, 1502, 1507,
            1511, 1516, 1520, 1524, 1529,
            1533, 1538, 1542, 1547, 1551,
            1556, 1560, 1565, 1569, 1574,
            1579, 1583, 1588, 1592, 1597,
            1602, 1606, 1611, 1616, 1621,
            1625, 1630, 1635, 1640, 1645,
            1649, 1654, 1659, 1664, 1669,
            1674, 1679, 1684, 1689, 1693,
            1698, 1703, 1708, 1714, 1719,
            1724, 1729, 1734, 1739, 1744,
            1749, 1754, 1760, 1765, 1770,
            1775, 1780, 1786, 1791, 1796,
            1802, 1807, 1812, 1818, 1823,
            1828, 1834, 1839, 1845, 1850,
            1856, 1861, 1867, 1872, 1878,
            1883, 1889, 1894, 1900, 1906,
            1911, 1917, 1923, 1929, 1934,
            1940, 1946, 1952, 1957, 1963,
            1969, 1975, 1981, 1987, 1993,
            1999, 2004, 2010, 2016, 2022,
            2028, 2035, 2041, 2047, 2053,
            2059, 2065, 2071, 2077, 2084,
            2090, 2096, 2102, 2109, 2115,
            2121, 2128, 2134, 2140, 2147,
            2153, 2160, 2166, 2173, 2179,
            2186, 2192, 2199, 2205, 2212,
            2219, 2225, 2232, 2239, 2245,
            2252, 2259, 2266, 2272, 2279,
            2286, 2293, 2300, 2307, 2314,
            2321, 2328, 2335, 2342, 2349,
            2356, 2363, 2370, 2377, 2384,
            2391, 2398, 2406, 2413, 2420,
            2427, 2435, 2442, 2449, 2457,
            2464, 2472, 2479, 2487, 2494,
            2502, 2509, 2517, 2524, 2532,
            2539, 2547, 2555, 2563, 2570,
            2578, 2586, 2594, 2601, 2609,
            2617, 2625, 2633, 2641, 2649,
            2657, 2665, 2673, 2681, 2689,
            2697, 2705, 2714, 2722, 2730,
            2738, 2747, 2755, 2763, 2772,
            2780, 2788, 2797, 2805, 2814,
            2822, 2831, 2839, 2848, 2857,
            2865, 2874, 2883, 2891, 2900,
            2909, 2918, 2927, 2935, 2944,
            2953, 2962, 2971, 2980, 2989,
            2998, 3007, 3016, 3026, 3035,
            3044, 3053, 3062, 3072, 3081,
            3090, 3100, 3109, 3119, 3128,
            3138, 3147, 3157, 3166, 3176,
            3186, 3195, 3205, 3215, 3224,
            3234, 3244, 3254, 3264, 3274,
            3284, 3294, 3304, 3314, 3324,
            3334, 3344, 3354, 3364, 3375,
            3385, 3395, 3405, 3416, 3426,
            3437, 3447, 3458, 3468, 3479,
            3489, 3500, 3510, 3521, 3532,
            3543, 3553, 3564, 3575, 3586,
            3597, 3608, 3619, 3630, 3641,
            3652, 3663, 3674, 3685, 3697,
            3708, 3719, 3730, 3742, 3753,
            3765, 3776, 3788, 3799, 3811,
            3822, 3834, 3846, 3857, 3869,
            3881, 3893, 3905, 3917, 3929,
            3941, 3953, 3965, 3977, 3989,
            4001, 4013, 4025, 4038, 4050,
            4062, 4075, 4087, 4100, 4112,
            4125, 4137, 4150, 4163, 4175,
            4188, 4201, 4214, 4226, 4239,
            4252, 4265, 4278, 4291, 4304,
            4318, 4331, 4344, 4357, 4371,
            4384, 4397, 4411, 4424, 4438,
            4451, 4465, 4479, 4492, 4506,
            4520, 4533, 4547, 4561, 4575,
            4589, 4603, 4617, 4631, 4645,
            4660, 4674, 4688, 4703, 4717,
            4731, 4746, 4760, 4775, 4789,
            4804, 4819, 4833, 4848, 4863,
            4878, 4893, 4908, 4923, 4938,
            4953, 4968, 4983, 4999, 5014,
            5029, 5045, 5060, 5075, 5091,
            5107, 5122, 5138, 5154, 5169,
            5185, 5201, 5217, 5233, 5249,
            5265, 5281, 5297, 5313, 5330,
            5346, 5362, 5379, 5395, 5412,
            5428, 5445, 5462, 5478, 5495,
            5512, 5529, 5546, 5563, 5580,
            5597, 5614, 5631, 5648, 5666,
            5683, 5700, 5718, 5735, 5753,
            5770, 5788, 5806, 5824, 5841,
            5859, 5877, 5895, 5913, 5931,
            5950, 5968, 5986, 6004, 6023,
            6041, 6060, 6078, 6097, 6116,
            6134, 6153, 6172, 6191, 6210,
            6229, 6248, 6267, 6286, 6305,
            6325, 6344, 6364, 6383, 6403,
            6422, 6442, 6462, 6481, 6501,
            6521, 6541, 6561, 6581, 6602,
            6622, 6642, 6662, 6683, 6703,
            6724, 6744, 6765, 6786, 6807,
            6828, 6848, 6869, 6891, 6912,
            6933, 6954, 6975, 6997, 7018,
            7040, 7061, 7083, 7105, 7126,
            7148, 7170, 7192, 7214, 7236,
            7259, 7281, 7303, 7325, 7348,
            7370, 7393, 7416, 7438, 7461,
            7484, 7507, 7530, 7553, 7576,
            7600, 7623, 7646, 7670, 7693,
            7717, 7741, 7764, 7788, 7812,
            7836, 7860, 7884, 7908, 7932,
            7957, 7981, 8006, 8030, 8055,
            8080, 8104, 8129, 8154, 8179,
            8204, 8229, 8255, 8280, 8305,
            8331, 8356, 8382, 8408, 8434,
            8459, 8485, 8511, 8537, 8564,
            8590, 8616, 8643, 8669, 8696,
            8722, 8749, 8776, 8803, 8830,
            8857, 8884, 8912, 8939, 8966,
            8994, 9021, 9049, 9077, 9105,
            9133, 9161, 9189, 9217, 9245,
            9274, 9302, 9331, 9359, 9388,
            9417, 9446, 9475, 9504, 9533,
            9562, 9591, 9621, 9650, 9680,
            9710, 9740, 9769, 9799, 9830,
            9860, 9890, 9920, 9951, 9981,
            10012, 10043, 10073, 10104, 10135,
            10166, 10198, 10229, 10260, 10292,
            10323, 10355, 10387, 10419, 10451,
            10483, 10515, 10547, 10580, 10612,
            10645, 10677, 10710, 10743, 10776,
            10809, 10842, 10876, 10909, 10942,
            10976, 11010, 11044, 11077, 11111,
            11146, 11180, 11214, 11248, 11283,
            11318, 11352, 11387, 11422, 11457,
            11492, 11528, 11563, 11599, 11634,
            11670, 11706, 11742, 11778, 11814,
            11850, 11887, 11923, 11960, 11996,
            12033, 12070, 12107, 12144, 12182,
            12219, 12257, 12294, 12332, 12370,
            12408, 12446, 12484, 12522, 12561,
            12599, 12638, 12677, 12716, 12755,
            12794, 12833, 12873, 12912, 12952,
            12992, 13032, 13072, 13112, 13152,
            13192, 13233, 13274, 13314, 13355,
            13396, 13437, 13479, 13520, 13561,
            13603, 13645, 13687, 13729, 13771,
            13813, 13856, 13898, 13941, 13984,
            14027, 14070, 14113, 14156, 14200,
            14243, 14287, 14331, 14375, 14419,
            14463, 14508, 14552, 14597, 14642,
            14687, 14732, 14777, 14823, 14868,
            14914, 14960, 15005, 15052, 15098,
            15144, 15191, 15237, 15284, 15331,
            15378, 15425, 15473, 15520, 15568,
            15616, 15664, 15712, 15760, 15808,
            15857, 15906, 15955, 16004, 16053,
            16102, 16151, 16201, 16251, 16301,
            16351, 16401, 16451, 16502, 16553,
            16603, 16654, 16706, 16757, 16808,
            16860, 16912, 16964, 17016, 17068,
            17121, 17173, 17226, 17279, 17332,
            17385, 17438, 17492, 17546, 17600,
            17654, 17708, 17762, 17817, 17872,
            17926, 17982, 18037, 18092, 18148,
            18203, 18259, 18315, 18372, 18428,
            18485, 18542, 18598, 18656, 18713,
            18770, 18828, 18886, 18944, 19002,
            19060, 19119, 19178, 19237, 19296,
            19355, 19414, 19474, 19534, 19594,
            19654, 19714, 19775, 19836, 19897,
            19958, 20019, 20081, 20142, 20204,
            20266, 20328, 20391, 20454, 20516,
            20579, 20643, 20706, 20770, 20833,
            20897, 20962, 21026, 21091, 21155,
            21220, 21286, 21351, 21417, 21482,
            21548, 21615, 21681, 21748, 21814,
            21881, 21949, 22016, 22084, 22151,
            22220, 22288, 22356, 22425, 22494,
            22563, 22632, 22702, 22771, 22841,
            22912, 22982, 23053, 23123, 23194,
            23266, 23337, 23409, 23481, 23553,
            23625, 23698, 23771, 23844, 23917,
            23990, 24064, 24138, 24212, 24287,
            24361, 24436, 24511, 24586, 24662,
            24738, 24814, 24890, 24966, 25043,
            25120, 25197, 25275, 25352, 25430,
            25508, 25587, 25665, 25744, 25823,
            25902, 25982, 26062, 26142, 26222,
            26303, 26384, 26465, 26546, 26627,
            26709, 26791, 26874, 26956, 27039,
            27122, 27205, 27289, 27373, 27457,
            27541, 27626, 27711, 27796, 27881,
            27967, 28053, 28139, 28226, 28312,
            28399, 28486, 28574, 28662, 28750,
            28838, 28927, 29016, 29105, 29194,
            29284, 29374, 29464, 29555, 29645,
            29736, 29828, 29919, 30011, 30104,
            30196, 30289, 30382, 30475, 30569,
            30663, 30757, 30851, 30946, 31041,
            31137, 31232, 31328, 31425, 31521,
            31618, 31715, 31813, 31910, 32008,
            32107, 32205, 32304, 32403, 32503,
            32603, 32703, 32804, 32904, 33005,
            33107, 33209, 33311, 33413, 33516,
            33619, 33722, 33825, 33929, 34034,
            34138, 34243, 34348, 34454, 34560,
            34666, 34772, 34879, 34986, 35094,
            35202, 35310, 35418, 35527, 35636,
            35746, 35856, 35966, 36076, 36187,
            36298, 36410, 36522, 36634, 36746,
            36859, 36973, 37086, 37200, 37314,
            37429, 37544, 37659, 37775, 37891,
            38008, 38124, 38241, 38359, 38477,
            38595, 38714, 38833, 38952, 39072,
            39192, 39312, 39433, 39554, 39675,
            39797, 39920, 40042, 40165, 40289,
            40413, 40537, 40661, 40786, 40911,
            41037, 41163, 41290, 41417, 41544,
            41671, 41800, 41928, 42057, 42186,
            42316, 42446, 42576, 42707, 42838,
            42970, 43102, 43234, 43367, 43500,
            43634, 43768, 43902, 44037, 44173,
            44308, 44444, 44581, 44718, 44855,
            44993, 45131, 45270, 45409, 45549,
            45689, 45829, 45970, 46111, 46253,
            46395, 46537, 46680, 46824, 46968,
            47112, 47257, 47402, 47548, 47694,
            47840, 47987, 48135, 48283, 48431,
            48580, 48729, 48879, 49029, 49180,
            49331, 49482, 49634, 49787, 49940,
            50093, 50247, 50401, 50556, 50712,
            50867, 51024, 51181, 51338, 51495,
            51654, 51812, 51972, 52131, 52291,
            52452, 52613, 52775, 52937, 53100,
            53263, 53427, 53591, 53755, 53921,
            54086, 54252, 54419, 54586, 54754,
            54922, 55091, 55260, 55430, 55600,
            55771, 55943, 56114, 56287, 56460,
            56633, 56807, 56982, 57157, 57333,
            57509, 57685, 57863, 58040, 58219,
            58398, 58577, 58757, 58938, 59119,
            59300, 59483, 59665, 59849, 60033,
            60217, 60402, 60588, 60774, 60960,
            61148, 61336, 61524, 61713, 61903,
            62093, 62284, 62475, 62667, 62860,
            63053, 63247, 63441, 63636, 63831,
            64027, 64224, 64422, 64619, 64818,
            65017, 65217, 65417, 65618, 65820,
            66022, 66225, 66429, 66633, 66837,
            67043, 67249, 67455, 67663, 67870,
            68079, 68288, 68498, 68708, 68920,
            69131, 69344, 69557, 69771, 69985,
            70200, 70416, 70632, 70849, 71067,
            71285, 71504, 71724, 71944, 72165,
            72387, 72609, 72833, 73056, 73281,
            73506, 73732, 73958, 74186, 74414,
            74642, 74872, 75102, 75332, 75564,
            75796, 76029, 76262, 76497, 76732,
            76968, 77204, 77441, 77679, 77918,
            78157, 78398, 78638, 78880, 79122,
            79366, 79609, 79854, 80099, 80345,
            80592, 80840, 81088, 81338, 81587,
            81838, 82090, 82342, 82595, 82849,
            83103, 83358, 83615, 83872, 84129,
            84388, 84647, 84907, 85168, 85430,
            85692, 85955, 86220, 86485, 86750,
            87017, 87284, 87552, 87821, 88091,
            88362, 88633, 88906, 89179, 89453,
            89728, 90003, 90280, 90557, 90836,
            91115, 91395, 91676, 91957, 92240,
            92523, 92807, 93093, 93379, 93666,
            93953, 94242, 94532, 94822, 95113,
            95406, 95699, 95993, 96288, 96584,
            96881, 97178, 97477, 97776, 98077,
            98378, 98680, 98984, 99288, 99593,
            99899, 100206, 100514, 100822, 101132,
            101443, 101755, 102067, 102381, 102696,
            103011, 103328, 103645, 103964, 104283,
            104603, 104925, 105247, 105571, 105895,
            106220, 106547, 106874, 107203, 107532,
            107862, 108194, 108526, 108860, 109194,
            109530, 109866, 110204, 110542, 110882,
            111223, 111565, 111907, 112251, 112596,
            112942, 113289, 113637, 113986, 114337,
            114688, 115040, 115394, 115748, 116104,
            116461, 116819, 117178, 117538, 117899,
            118261, 118624, 118989, 119354, 119721,
            120089, 120458, 120828, 121199, 121572,
            121945, 122320, 122696, 123073, 123451,
            123830, 124211, 124593, 124975, 125359,
            125745, 126131, 126518, 126907, 127297,
            127688, 128081, 128474, 128869, 129265,
            129662, 130061, 130260
         ) ),
        max_error = cms.double(0.6152529479288091),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut2 = cms.PSet(
        lut = cms.vint32( (
            256, 256, 257, 258, 259,
            260, 260, 261, 262, 263,
            264, 264, 265, 266, 267,
            268, 268, 269, 270, 271,
            272, 273, 273, 274, 275,
            276, 277, 278, 279, 279,
            280, 281, 282, 283, 284,
            285, 285, 286, 287, 288,
            289, 290, 291, 292, 293,
            293, 294, 295, 296, 297,
            298, 299, 300, 301, 302,
            303, 303, 304, 305, 306,
            307, 308, 309, 310, 311,
            312, 313, 314, 315, 316,
            317, 318, 319, 320, 321,
            322, 323, 324, 325, 326,
            327, 328, 329, 330, 331,
            332, 333, 334, 335, 336,
            337, 338, 339, 340, 341,
            342, 343, 344, 345, 346,
            347, 348, 349, 351, 352,
            353, 354, 355, 356, 357,
            358, 359, 360, 361, 363,
            364, 365, 366, 367, 368,
            369, 370, 372, 373, 374,
            375, 376, 377, 379, 380,
            381, 382, 383, 384, 386,
            387, 388, 389, 390, 392,
            393, 394, 395, 396, 398,
            399, 400, 401, 402, 404,
            405, 406, 407, 409, 410,
            411, 412, 414, 415, 416,
            418, 419, 420, 421, 423,
            424, 425, 427, 428, 429,
            431, 432, 433, 435, 436,
            437, 439, 440, 441, 443,
            444, 445, 447, 448, 449,
            451, 452, 454, 455, 456,
            458, 459, 461, 462, 463,
            465, 466, 468, 469, 471,
            472, 474, 475, 476, 478,
            479, 481, 482, 484, 485,
            487, 488, 490, 491, 493,
            494, 496, 497, 499, 500,
            502, 503, 505, 507, 508,
            510, 511, 513, 514, 516,
            518, 519, 521, 522, 524,
            526, 527, 529, 530, 532,
            534, 535, 537, 539, 540,
            542, 544, 545, 547, 549,
            550, 552, 554, 555, 557,
            559, 561, 562, 564, 566,
            567, 569, 571, 573, 575,
            576, 578, 580, 582, 583,
            585, 587, 589, 591, 592,
            594, 596, 598, 600, 602,
            603, 605, 607, 609, 611,
            613, 615, 617, 618, 620,
            622, 624, 626, 628, 630,
            632, 634, 636, 638, 640,
            642, 644, 646, 648, 650,
            652, 654, 656, 658, 660,
            662, 664, 666, 668, 670,
            672, 674, 676, 678, 680,
            682, 684, 686, 688, 691,
            693, 695, 697, 699, 701,
            703, 706, 708, 710, 712,
            714, 717, 719, 721, 723,
            725, 728, 730, 732, 734,
            737, 739, 741, 743, 746,
            748, 750, 753, 755, 757,
            760, 762, 764, 767, 769,
            771, 774, 776, 778, 781,
            783, 786, 788, 790, 793,
            795, 798, 800, 803, 805,
            808, 810, 813, 815, 818,
            820, 823, 825, 828, 830,
            833, 835, 838, 840, 843,
            846, 848, 851, 853, 856,
            859, 861, 864, 867, 869,
            872, 875, 877, 880, 883,
            885, 888, 891, 894, 896,
            899, 902, 905, 907, 910,
            913, 916, 919, 921, 924,
            927, 930, 933, 936, 939,
            941, 944, 947, 950, 953,
            956, 959, 962, 965, 968,
            971, 974, 977, 980, 983,
            986, 989, 992, 995, 998,
            1001, 1004, 1007, 1010, 1013,
            1017, 1020, 1023, 1026, 1029,
            1032, 1035, 1039, 1042, 1045,
            1048, 1051, 1055, 1058, 1061,
            1064, 1068, 1071, 1074, 1078,
            1081, 1084, 1088, 1091, 1094,
            1098, 1101, 1104, 1108, 1111,
            1115, 1118, 1121, 1125, 1128,
            1132, 1135, 1139, 1142, 1146,
            1149, 1153, 1156, 1160, 1163,
            1167, 1171, 1174, 1178, 1181,
            1185, 1189, 1192, 1196, 1200,
            1203, 1207, 1211, 1214, 1218,
            1222, 1226, 1229, 1233, 1237,
            1241, 1245, 1249, 1252, 1256,
            1260, 1264, 1268, 1272, 1276,
            1280, 1283, 1287, 1291, 1295,
            1299, 1303, 1307, 1311, 1315,
            1319, 1323, 1328, 1332, 1336,
            1340, 1344, 1348, 1352, 1356,
            1360, 1365, 1369, 1373, 1377,
            1382, 1386, 1390, 1394, 1399,
            1403, 1407, 1412, 1416, 1420,
            1425, 1429, 1433, 1438, 1442,
            1447, 1451, 1455, 1460, 1464,
            1469, 1473, 1478, 1483, 1487,
            1492, 1496, 1501, 1505, 1510,
            1515, 1519, 1524, 1529, 1533,
            1538, 1543, 1548, 1552, 1557,
            1562, 1567, 1572, 1576, 1581,
            1586, 1591, 1596, 1601, 1606,
            1611, 1616, 1620, 1625, 1630,
            1635, 1640, 1646, 1651, 1656,
            1661, 1666, 1671, 1676, 1681,
            1686, 1692, 1697, 1702, 1707,
            1712, 1718, 1723, 1728, 1734,
            1739, 1744, 1750, 1755, 1760,
            1766, 1771, 1777, 1782, 1788,
            1793, 1799, 1804, 1810, 1815,
            1821, 1826, 1832, 1838, 1843,
            1849, 1855, 1860, 1866, 1872,
            1878, 1883, 1889, 1895, 1901,
            1907, 1912, 1918, 1924, 1930,
            1936, 1942, 1948, 1954, 1960,
            1966, 1972, 1978, 1984, 1990,
            1996, 2003, 2009, 2015, 2021,
            2027, 2033, 2040, 2046, 2052,
            2059, 2065, 2071, 2078, 2084,
            2090, 2097, 2103, 2110, 2116,
            2123, 2129, 2136, 2142, 2149,
            2156, 2162, 2169, 2175, 2182,
            2189, 2196, 2202, 2209, 2216,
            2223, 2230, 2236, 2243, 2250,
            2257, 2264, 2271, 2278, 2285,
            2292, 2299, 2306, 2313, 2320,
            2327, 2335, 2342, 2349, 2356,
            2363, 2371, 2378, 2385, 2393,
            2400, 2407, 2415, 2422, 2430,
            2437, 2444, 2452, 2460, 2467,
            2475, 2482, 2490, 2498, 2505,
            2513, 2521, 2528, 2536, 2544,
            2552, 2560, 2567, 2575, 2583,
            2591, 2599, 2607, 2615, 2623,
            2631, 2639, 2647, 2656, 2664,
            2672, 2680, 2688, 2697, 2705,
            2713, 2722, 2730, 2738, 2747,
            2755, 2764, 2772, 2781, 2789,
            2798, 2806, 2815, 2824, 2832,
            2841, 2850, 2858, 2867, 2876,
            2885, 2894, 2903, 2912, 2921,
            2930, 2939, 2948, 2957, 2966,
            2975, 2984, 2993, 3002, 3012,
            3021, 3030, 3039, 3049, 3058,
            3067, 3077, 3086, 3096, 3105,
            3115, 3124, 3134, 3144, 3153,
            3163, 3173, 3183, 3192, 3202,
            3212, 3222, 3232, 3242, 3252,
            3262, 3272, 3282, 3292, 3302,
            3312, 3322, 3332, 3343, 3353,
            3363, 3374, 3384, 3394, 3405,
            3415, 3426, 3436, 3447, 3457,
            3468, 3479, 3489, 3500, 3511,
            3522, 3532, 3543, 3554, 3565,
            3576, 3587, 3598, 3609, 3620,
            3631, 3642, 3654, 3665, 3676,
            3687, 3699, 3710, 3722, 3733,
            3744, 3756, 3767, 3779, 3791,
            3802, 3814, 3826, 3837, 3849,
            3861, 3873, 3885, 3897, 3909,
            3921, 3933, 3945, 3957, 3969,
            3981, 3994, 4006, 4018, 4031,
            4043, 4055, 4068, 4080, 4093,
            4105, 4118, 4131, 4143, 4156,
            4169, 4182, 4195, 4207, 4220,
            4233, 4246, 4259, 4272, 4286,
            4299, 4312, 4325, 4339, 4352,
            4365, 4379, 4392, 4406, 4419,
            4433, 4446, 4460, 4474, 4487,
            4501, 4515, 4529, 4543, 4557,
            4571, 4585, 4599, 4613, 4627,
            4641, 4656, 4670, 4684, 4699,
            4713, 4728, 4742, 4757, 4771,
            4786, 4801, 4816, 4830, 4845,
            4860, 4875, 4890, 4905, 4920,
            4935, 4950, 4966, 4981, 4996,
            5011, 5027, 5042, 5058, 5073,
            5089, 5105, 5120, 5136, 5152,
            5168, 5183, 5199, 5215, 5231,
            5247, 5264, 5280, 5296, 5312,
            5329, 5345, 5361, 5378, 5394,
            5411, 5428, 5444, 5461, 5478,
            5495, 5512, 5528, 5545, 5562,
            5580, 5597, 5614, 5631, 5648,
            5666, 5683, 5701, 5718, 5736,
            5753, 5771, 5789, 5807, 5824,
            5842, 5860, 5878, 5896, 5914,
            5933, 5951, 5969, 5987, 6006,
            6024, 6043, 6061, 6080, 6099,
            6117, 6136, 6155, 6174, 6193,
            6212, 6231, 6250, 6269, 6289,
            6308, 6327, 6347, 6366, 6386,
            6406, 6425, 6445, 6465, 6485,
            6505, 6525, 6545, 6565, 6585,
            6605, 6625, 6646, 6666, 6687,
            6707, 6728, 6749, 6769, 6790,
            6811, 6832, 6853, 6874, 6895,
            6916, 6937, 6959, 6980, 7002,
            7023, 7045, 7066, 7088, 7110,
            7132, 7154, 7176, 7198, 7220,
            7242, 7264, 7286, 7309, 7331,
            7354, 7376, 7399, 7422, 7445,
            7468, 7490, 7513, 7537, 7560,
            7583, 7606, 7630, 7653, 7677,
            7700, 7724, 7748, 7771, 7795,
            7819, 7843, 7867, 7892, 7916,
            7940, 7964, 7989, 8014, 8038,
            8063, 8088, 8112, 8137, 8162,
            8187, 8213, 8238, 8263, 8289,
            8314, 8340, 8365, 8391, 8417,
            8443, 8468, 8495, 8521, 8547,
            8573, 8599, 8626, 8652, 8679,
            8706, 8732, 8759, 8786, 8813,
            8840, 8867, 8895, 8922, 8949,
            8977, 9004, 9032, 9060, 9088,
            9116, 9144, 9172, 9200, 9228,
            9256, 9285, 9313, 9342, 9371,
            9400, 9428, 9457, 9486, 9516,
            9545, 9574, 9604, 9633, 9663,
            9692, 9722, 9752, 9782, 9812,
            9842, 9872, 9903, 9933, 9964,
            9994, 10025, 10056, 10087, 10118,
            10149, 10180, 10211, 10243, 10274,
            10306, 10337, 10369, 10401, 10433,
            10465, 10497, 10529, 10562, 10594,
            10627, 10659, 10692, 10725, 10758,
            10791, 10824, 10858, 10891, 10924,
            10958, 10992, 11025, 11059, 11093,
            11127, 11161, 11196, 11230, 11265,
            11299, 11334, 11369, 11404, 11439,
            11474, 11509, 11545, 11580, 11616,
            11651, 11687, 11723, 11759, 11795,
            11831, 11868, 11904, 11941, 11978,
            12014, 12051, 12088, 12125, 12163,
            12200, 12238, 12275, 12313, 12351,
            12389, 12427, 12465, 12503, 12542,
            12580, 12619, 12658, 12696, 12735,
            12775, 12814, 12853, 12893, 12932,
            12972, 13012, 13052, 13092, 13132,
            13173, 13213, 13254, 13294, 13335,
            13376, 13417, 13459, 13500, 13541,
            13583, 13625, 13667, 13709, 13751,
            13793, 13835, 13878, 13920, 13963,
            14006, 14049, 14092, 14136, 14179,
            14223, 14266, 14310, 14354, 14398,
            14443, 14487, 14531, 14576, 14621,
            14666, 14711, 14756, 14801, 14847,
            14892, 14938, 14984, 15030, 15076,
            15123, 15169, 15216, 15263, 15309,
            15356, 15404, 15451, 15498, 15546,
            15594, 15642, 15690, 15738, 15786,
            15835, 15884, 15932, 15981, 16030,
            16080, 16129, 16179, 16228, 16278,
            16328, 16378, 16429, 16479, 16530,
            16581, 16632, 16683, 16734, 16785,
            16837, 16889, 16941, 16993, 17045,
            17097, 17150, 17202, 17255, 17308,
            17361, 17415, 17468, 17522, 17576,
            17630, 17684, 17738, 17793, 17848,
            17902, 17957, 18013, 18068, 18123,
            18179, 18235, 18291, 18347, 18404,
            18460, 18517, 18574, 18631, 18688,
            18746, 18803, 18861, 18919, 18977,
            19035, 19094, 19152, 19211, 19270,
            19330, 19389, 19448, 19508, 19568,
            19628, 19689, 19749, 19810, 19871,
            19932, 19993, 20054, 20116, 20178,
            20240, 20302, 20364, 20427, 20490,
            20553, 20616, 20679, 20743, 20806,
            20870, 20935, 20999, 21063, 21128,
            21193, 21258, 21323, 21389, 21455,
            21521, 21587, 21653, 21720, 21786,
            21853, 21920, 21988, 22055, 22123,
            22191, 22259, 22328, 22396, 22465,
            22534, 22603, 22673, 22742, 22812,
            22882, 22953, 23023, 23094, 23165,
            23236, 23308, 23379, 23451, 23523,
            23595, 23668, 23741, 23814, 23887,
            23960, 24034, 24108, 24182, 24256,
            24330, 24405, 24480, 24555, 24631,
            24707, 24783, 24859, 24935, 25012,
            25089, 25166, 25243, 25320, 25398,
            25476, 25555, 25633, 25712, 25791,
            25870, 25950, 26029, 26109, 26190,
            26270, 26351, 26432, 26513, 26594,
            26676, 26758, 26840, 26923, 27006,
            27088, 27172, 27255, 27339, 27423,
            27507, 27592, 27677, 27762, 27847,
            27932, 28018, 28104, 28191, 28277,
            28364, 28451, 28539, 28626, 28714,
            28803, 28891, 28980, 29069, 29158,
            29248, 29338, 29428, 29518, 29609,
            29700, 29791, 29883, 29975, 30067,
            30159, 30252, 30345, 30438, 30532,
            30625, 30719, 30814, 30909, 31003,
            31099, 31194, 31290, 31386, 31483,
            31579, 31677, 31774, 31871, 31969,
            32068, 32166, 32265, 32364, 32464,
            32563, 32663, 32764, 32864, 32965,
            33067, 33168, 33270, 33372, 33475,
            33578, 33681, 33785, 33888, 33992,
            34097, 34202, 34307, 34412, 34518,
            34624, 34730, 34837, 34944, 35051,
            35159, 35267, 35376, 35484, 35593,
            35703, 35812, 35922, 36033, 36144,
            36255, 36366, 36478, 36590, 36702,
            36815, 36928, 37042, 37155, 37270,
            37384, 37499, 37614, 37730, 37846,
            37962, 38079, 38196, 38313, 38431,
            38549, 38667, 38786, 38905, 39025,
            39145, 39265, 39386, 39507, 39628,
            39750, 39872, 39994, 40117, 40241,
            40364, 40488, 40613, 40737, 40863,
            40988, 41114, 41240, 41367, 41494,
            41622, 41750, 41878, 42007, 42136,
            42265, 42395, 42525, 42656, 42787,
            42919, 43050, 43183, 43315, 43448,
            43582, 43716, 43850, 43985, 44120,
            44256, 44392, 44528, 44665, 44802,
            44940, 45078, 45216, 45355, 45495,
            45634, 45775, 45915, 46056, 46198,
            46340, 46482, 46625, 46768, 46912,
            47056, 47201, 47346, 47491, 47637,
            47784, 47930, 48078, 48225, 48374,
            48522, 48671, 48821, 48971, 49121,
            49272, 49424, 49576, 49728, 49881,
            50034, 50188, 50342, 50497, 50652,
            50807, 50963, 51120, 51277, 51435,
            51593, 51751, 51910, 52070, 52230,
            52390, 52551, 52713, 52875, 53037,
            53200, 53364, 53528, 53692, 53857,
            54022, 54188, 54355, 54522, 54690,
            54858, 55026, 55195, 55365, 55535,
            55706, 55877, 56048, 56221, 56393,
            56567, 56740, 56915, 57090, 57265,
            57441, 57618, 57795, 57972, 58150,
            58329, 58508, 58688, 58868, 59049,
            59231, 59413, 59595, 59778, 59962,
            60146, 60331, 60516, 60702, 60889,
            61076, 61264, 61452, 61641, 61830,
            62020, 62211, 62402, 62594, 62786,
            62979, 63172, 63366, 63561, 63756,
            63952, 64149, 64346, 64544, 64742,
            64941, 65140, 65341, 65541, 65743,
            65945, 66147, 66351, 66555, 66759,
            66964, 67170, 67376, 67583, 67791,
            67999, 68208, 68418, 68628, 68839,
            69050, 69263, 69475, 69689, 69903,
            70118, 70333, 70549, 70766, 70984,
            71202, 71421, 71640, 71860, 72081,
            72302, 72525, 72747, 72971, 73195,
            73420, 73646, 73872, 74099, 74327,
            74555, 74784, 75014, 75244, 75476,
            75707, 75940, 76173, 76407, 76642,
            76878, 77114, 77351, 77589, 77827,
            78066, 78306, 78547, 78788, 79030,
            79273, 79516, 79761, 80006, 80252,
            80498, 80746, 80994, 81243, 81492,
            81743, 81994, 82246, 82498, 82752,
            83006, 83261, 83517, 83774, 84031,
            84289, 84548, 84808, 85069, 85330,
            85592, 85855, 86119, 86384, 86649,
            86915, 87182, 87450, 87719, 87989,
            88259, 88530, 88802, 89075, 89349,
            89623, 89899, 90175, 90452, 90730,
            91009, 91288, 91569, 91850, 92132,
            92415, 92699, 92984, 93270, 93557,
            93844, 94132, 94422, 94712, 95003,
            95295, 95587, 95881, 96176, 96471,
            96768, 97065, 97363, 97662, 97963,
            98264, 98565, 98868, 99172, 99477,
            99783, 100089, 100397, 100705, 101015,
            101325, 101636, 101949, 102262, 102576,
            102891, 103207, 103525, 103843, 104162,
            104482, 104803, 105125, 105448, 105772,
            106097, 106423, 106750, 107078, 107407,
            107737, 108068, 108400, 108733, 109067,
            109402, 109738, 110076, 110414, 110753,
            111093, 111435, 111777, 112121, 112465,
            112811, 113157, 113505, 113854, 114204,
            114555, 114907, 115260, 115614, 115969,
            116325, 116683, 117041, 117401, 117762,
            118124, 118486, 118851, 119216, 119582,
            119949, 120318, 120688, 121059, 121431,
            121804, 122178, 122553, 122930, 123308,
            123687, 124067, 124448, 124830, 125214,
            125598, 125984, 126371, 126760, 127149,
            127540, 127932, 128325, 128719, 129115,
            129511, 129909, 130309, 130709, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071
         ) ),
        max_error = cms.double(5748.616225984908),
        output_scale_factor = cms.double(0.953125),
        unused_lsbs = cms.uint32(2)
    ),
    inv_mass_checks = cms.untracked.bool(False),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    sanity_checks = cms.untracked.bool(False),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    )
)


process.DoubleTkMuPuppiHT = cms.EDFilter("L1GTTripleObjectCond",
    collection1 = cms.PSet(
        maxEta = cms.double(2.4),
        maxPrimVertDz = cms.double(1),
        minEta = cms.double(-2.4),
        minQualityScore = cms.uint32(0),
        primVertex = cms.uint32(0),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 0.83, 1.24),
        regionsMinPt = cms.vdouble(3, 3, 3),
        tag = cms.InputTag("l1tGTProducer","GMTTkMuons")
    ),
    collection2 = cms.PSet(
        maxEta = cms.double(2.4),
        maxPrimVertDz = cms.double(1),
        minEta = cms.double(-2.4),
        minQualityScore = cms.uint32(0),
        primVertex = cms.uint32(0),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 0.83, 1.24),
        regionsMinPt = cms.vdouble(3, 3, 3),
        tag = cms.InputTag("l1tGTProducer","GMTTkMuons")
    ),
    collection3 = cms.PSet(
        minScalarSumPt = cms.double(232),
        tag = cms.InputTag("l1tGTProducer","CL2HtSum")
    ),
    correl12 = cms.PSet(
        minDR = cms.double(0)
    ),
    cos_phi_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            487, 487, 487, 487, 487,
            487, 487, 487, 487, 487,
            487, 486, 486, 486, 486,
            486, 486, 486, 485, 485,
            485, 485, 485, 485, 484,
            484, 484, 484, 484, 483,
            483, 483, 483, 483, 482,
            482, 482, 482, 481, 481,
            481, 481, 480, 480, 480,
            480, 479, 479, 479, 478,
            478, 478, 478, 477, 477,
            477, 476, 476, 476, 475,
            475, 475, 474, 474, 474,
            473, 473, 472, 472, 472,
            471, 471, 471, 470, 470,
            469, 469, 468, 468, 468,
            467, 467, 466, 466, 465,
            465, 465, 464, 464, 463,
            463, 462, 462, 461, 461,
            460, 460, 459, 459, 458,
            458, 457, 457, 456, 456,
            455, 454, 454, 453, 453,
            452, 452, 451, 451, 450,
            449, 449, 448, 448, 447,
            446, 446, 445, 445, 444,
            443, 443, 442, 441, 441,
            440, 440, 439, 438, 438,
            437, 436, 436, 435, 434,
            434, 433, 432, 431, 431,
            430, 429, 429, 428, 427,
            426, 426, 425, 424, 423,
            423, 422, 421, 420, 420,
            419, 418, 417, 417, 416,
            415, 414, 413, 413, 412,
            411, 410, 409, 409, 408,
            407, 406, 405, 405, 404,
            403, 402, 401, 400, 399,
            399, 398, 397, 396, 395,
            394, 393, 392, 392, 391,
            390, 389, 388, 387, 386,
            385, 384, 383, 382, 381,
            381, 380, 379, 378, 377,
            376, 375, 374, 373, 372,
            371, 370, 369, 368, 367,
            366, 365, 364, 363, 362,
            361, 360, 359, 358, 357,
            356, 355, 354, 353, 352,
            351, 350, 349, 348, 347,
            346, 345, 343, 342, 341,
            340, 339, 338, 337, 336,
            335, 334, 333, 332, 330,
            329, 328, 327, 326, 325,
            324, 323, 322, 320, 319,
            318, 317, 316, 315, 314,
            312, 311, 310, 309, 308,
            307, 306, 304, 303, 302,
            301, 300, 298, 297, 296,
            295, 294, 293, 291, 290,
            289, 288, 286, 285, 284,
            283, 282, 280, 279, 278,
            277, 275, 274, 273, 272,
            270, 269, 268, 267, 265,
            264, 263, 262, 260, 259,
            258, 257, 255, 254, 253,
            252, 250, 249, 248, 246,
            245, 244, 242, 241, 240,
            239, 237, 236, 235, 233,
            232, 231, 229, 228, 227,
            225, 224, 223, 221, 220,
            219, 217, 216, 215, 213,
            212, 211, 209, 208, 207,
            205, 204, 203, 201, 200,
            198, 197, 196, 194, 193,
            192, 190, 189, 187, 186,
            185, 183, 182, 181, 179,
            178, 176, 175, 174, 172,
            171, 169, 168, 167, 165,
            164, 162, 161, 159, 158,
            157, 155, 154, 152, 151,
            150, 148, 147, 145, 144,
            142, 141, 140, 138, 137,
            135, 134, 132, 131, 129,
            128, 127, 125, 124, 122,
            121, 119, 118, 116, 115,
            113, 112, 111, 109, 108,
            106, 105, 103, 102, 100,
            99, 97, 96, 94, 93,
            92, 90, 89, 87, 86,
            84, 83, 81, 80, 78,
            77, 75, 74, 72, 71,
            69, 68, 66, 65, 63,
            62, 60, 59, 58, 56,
            55, 53, 52, 50, 49,
            47, 46, 44, 43, 41,
            40, 38, 37, 35, 34,
            32, 31, 29, 28, 26,
            25, 23, 22, 20, 19,
            17, 16, 14, 13, 11,
            10, 8, 7, 5, 4,
            2, 1, -1, -2, -4,
            -5, -7, -8, -10, -11,
            -13, -14, -16, -17, -19,
            -20, -22, -23, -25, -26,
            -28, -29, -31, -32, -34,
            -35, -37, -38, -40, -41,
            -43, -44, -46, -47, -49,
            -50, -52, -53, -55, -56,
            -58, -59, -60, -62, -63,
            -65, -66, -68, -69, -71,
            -72, -74, -75, -77, -78,
            -80, -81, -83, -84, -86,
            -87, -89, -90, -92, -93,
            -94, -96, -97, -99, -100,
            -102, -103, -105, -106, -108,
            -109, -111, -112, -113, -115,
            -116, -118, -119, -121, -122,
            -124, -125, -127, -128, -129,
            -131, -132, -134, -135, -137,
            -138, -140, -141, -142, -144,
            -145, -147, -148, -150, -151,
            -152, -154, -155, -157, -158,
            -159, -161, -162, -164, -165,
            -167, -168, -169, -171, -172,
            -174, -175, -176, -178, -179,
            -181, -182, -183, -185, -186,
            -187, -189, -190, -192, -193,
            -194, -196, -197, -198, -200,
            -201, -203, -204, -205, -207,
            -208, -209, -211, -212, -213,
            -215, -216, -217, -219, -220,
            -221, -223, -224, -225, -227,
            -228, -229, -231, -232, -233,
            -235, -236, -237, -239, -240,
            -241, -242, -244, -245, -246,
            -248, -249, -250, -252, -253,
            -254, -255, -257, -258, -259,
            -260, -262, -263, -264, -265,
            -267, -268, -269, -270, -272,
            -273, -274, -275, -277, -278,
            -279, -280, -282, -283, -284,
            -285, -286, -288, -289, -290,
            -291, -293, -294, -295, -296,
            -297, -298, -300, -301, -302,
            -303, -304, -306, -307, -308,
            -309, -310, -311, -312, -314,
            -315, -316, -317, -318, -319,
            -320, -322, -323, -324, -325,
            -326, -327, -328, -329, -330,
            -332, -333, -334, -335, -336,
            -337, -338, -339, -340, -341,
            -342, -343, -345, -346, -347,
            -348, -349, -350, -351, -352,
            -353, -354, -355, -356, -357,
            -358, -359, -360, -361, -362,
            -363, -364, -365, -366, -367,
            -368, -369, -370, -371, -372,
            -373, -374, -375, -376, -377,
            -378, -379, -380, -381, -381,
            -382, -383, -384, -385, -386,
            -387, -388, -389, -390, -391,
            -392, -392, -393, -394, -395,
            -396, -397, -398, -399, -399,
            -400, -401, -402, -403, -404,
            -405, -405, -406, -407, -408,
            -409, -409, -410, -411, -412,
            -413, -413, -414, -415, -416,
            -417, -417, -418, -419, -420,
            -420, -421, -422, -423, -423,
            -424, -425, -426, -426, -427,
            -428, -429, -429, -430, -431,
            -431, -432, -433, -434, -434,
            -435, -436, -436, -437, -438,
            -438, -439, -440, -440, -441,
            -441, -442, -443, -443, -444,
            -445, -445, -446, -446, -447,
            -448, -448, -449, -449, -450,
            -451, -451, -452, -452, -453,
            -453, -454, -454, -455, -456,
            -456, -457, -457, -458, -458,
            -459, -459, -460, -460, -461,
            -461, -462, -462, -463, -463,
            -464, -464, -465, -465, -465,
            -466, -466, -467, -467, -468,
            -468, -468, -469, -469, -470,
            -470, -471, -471, -471, -472,
            -472, -472, -473, -473, -474,
            -474, -474, -475, -475, -475,
            -476, -476, -476, -477, -477,
            -477, -478, -478, -478, -478,
            -479, -479, -479, -480, -480,
            -480, -480, -481, -481, -481,
            -481, -482, -482, -482, -482,
            -483, -483, -483, -483, -483,
            -484, -484, -484, -484, -484,
            -485, -485, -485, -485, -485,
            -485, -486, -486, -486, -486,
            -486, -486, -486, -487, -487,
            -487, -487, -487, -487, -487,
            -487, -487, -487, -487, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488
         ) ),
        max_error = cms.double(0.0025338281044886835),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            489, 489, 489, 489, 489,
            489, 489, 489, 489, 489,
            489, 490, 490, 490, 490,
            490, 490, 490, 491, 491,
            491, 491, 491, 491, 492,
            492, 492, 492, 492, 493,
            493, 493, 493, 493, 494,
            494, 494, 494, 495, 495,
            495, 495, 496, 496, 496,
            496, 497, 497, 497, 498,
            498, 498, 499, 499, 499,
            499, 500, 500, 500, 501,
            501, 502, 502, 502, 503,
            503, 503, 504, 504, 504,
            505, 505, 506, 506, 507,
            507, 507, 508, 508, 509,
            509, 510, 510, 510, 511,
            511, 512, 512, 513, 513,
            514, 514, 515, 515, 516,
            516, 517, 517, 518, 518,
            519, 520, 520, 521, 521,
            522, 522, 523, 523, 524,
            525, 525, 526, 526, 527,
            528, 528, 529, 530, 530,
            531, 531, 532, 533, 533,
            534, 535, 535, 536, 537,
            537, 538, 539, 540, 540,
            541, 542, 542, 543, 544,
            545, 545, 546, 547, 548,
            548, 549, 550, 551, 551,
            552, 553, 554, 555, 555,
            556, 557, 558, 559, 560,
            560, 561, 562, 563, 564,
            565, 566, 567, 567, 568,
            569, 570, 571, 572, 573,
            574, 575, 576, 577, 577,
            578, 579, 580, 581, 582,
            583, 584, 585, 586, 587,
            588, 589, 590, 591, 592,
            593, 594, 595, 596, 598,
            599, 600, 601, 602, 603,
            604, 605, 606, 607, 608,
            610, 611, 612, 613, 614,
            615, 616, 618, 619, 620,
            621, 622, 623, 625, 626,
            627, 628, 629, 631, 632,
            633, 634, 636, 637, 638,
            639, 641, 642, 643, 644,
            646, 647, 648, 650, 651,
            652, 654, 655, 656, 658,
            659, 660, 662, 663, 665,
            666, 667, 669, 670, 672,
            673, 674, 676, 677, 679,
            680, 682, 683, 685, 686,
            687, 689, 690, 692, 693,
            695, 697, 698, 700, 701,
            703, 704, 706, 707, 709,
            710, 712, 714, 715, 717,
            719, 720, 722, 723, 725,
            727, 728, 730, 732, 733,
            735, 737, 738, 740, 742,
            744, 745, 747, 749, 750,
            752, 754, 756, 758, 759,
            761, 763, 765, 767, 768,
            770, 772, 774, 776, 778,
            779, 781, 783, 785, 787,
            789, 791, 793, 795, 796,
            798, 800, 802, 804, 806,
            808, 810, 812, 814, 816,
            818, 820, 822, 824, 826,
            828, 830, 832, 835, 837,
            839, 841, 843, 845, 847,
            849, 851, 854, 856, 858,
            860, 862, 864, 867, 869,
            871, 873, 875, 878, 880,
            882, 884, 887, 889, 891,
            894, 896, 898, 900, 903,
            905, 907, 910, 912, 915,
            917, 919, 922, 924, 927,
            929, 931, 934, 936, 939,
            941, 944, 946, 949, 951,
            954, 956, 959, 961, 964,
            966, 969, 971, 974, 977,
            979, 982, 984, 987, 990,
            992, 995, 998, 1000, 1003,
            1006, 1008, 1011, 1014, 1017,
            1019, 1022, 1025, 1028, 1030,
            1033, 1036, 1039, 1042, 1044,
            1047, 1050, 1053, 1056, 1059,
            1062, 1065, 1067, 1070, 1073,
            1076, 1079, 1082, 1085, 1088,
            1091, 1094, 1097, 1100, 1103,
            1106, 1109, 1112, 1115, 1118,
            1122, 1125, 1128, 1131, 1134,
            1137, 1140, 1143, 1147, 1150,
            1153, 1156, 1159, 1163, 1166,
            1169, 1172, 1176, 1179, 1182,
            1186, 1189, 1192, 1196, 1199,
            1202, 1206, 1209, 1212, 1216,
            1219, 1223, 1226, 1230, 1233,
            1237, 1240, 1244, 1247, 1251,
            1254, 1258, 1261, 1265, 1268,
            1272, 1276, 1279, 1283, 1287,
            1290, 1294, 1298, 1301, 1305,
            1309, 1312, 1316, 1320, 1324,
            1327, 1331, 1335, 1339, 1343,
            1347, 1350, 1354, 1358, 1362,
            1366, 1370, 1374, 1378, 1382,
            1386, 1390, 1394, 1398, 1402,
            1406, 1410, 1414, 1418, 1422,
            1426, 1430, 1434, 1439, 1443,
            1447, 1451, 1455, 1459, 1464,
            1468, 1472, 1476, 1481, 1485,
            1489, 1494, 1498, 1502, 1507,
            1511, 1516, 1520, 1524, 1529,
            1533, 1538, 1542, 1547, 1551,
            1556, 1560, 1565, 1569, 1574,
            1579, 1583, 1588, 1592, 1597,
            1602, 1606, 1611, 1616, 1621,
            1625, 1630, 1635, 1640, 1645,
            1649, 1654, 1659, 1664, 1669,
            1674, 1679, 1684, 1689, 1693,
            1698, 1703, 1708, 1714, 1719,
            1724, 1729, 1734, 1739, 1744,
            1749, 1754, 1760, 1765, 1770,
            1775, 1780, 1786, 1791, 1796,
            1802, 1807, 1812, 1818, 1823,
            1828, 1834, 1839, 1845, 1850,
            1856, 1861, 1867, 1872, 1878,
            1883, 1889, 1894, 1900, 1906,
            1911, 1917, 1923, 1929, 1934,
            1940, 1946, 1952, 1957, 1963,
            1969, 1975, 1981, 1987, 1993,
            1999, 2004, 2010, 2016, 2022,
            2028, 2035, 2041, 2047, 2053,
            2059, 2065, 2071, 2077, 2084,
            2090, 2096, 2102, 2109, 2115,
            2121, 2128, 2134, 2140, 2147,
            2153, 2160, 2166, 2173, 2179,
            2186, 2192, 2199, 2205, 2212,
            2219, 2225, 2232, 2239, 2245,
            2252, 2259, 2266, 2272, 2279,
            2286, 2293, 2300, 2307, 2314,
            2321, 2328, 2335, 2342, 2349,
            2356, 2363, 2370, 2377, 2384,
            2391, 2398, 2406, 2413, 2420,
            2427, 2435, 2442, 2449, 2457,
            2464, 2472, 2479, 2487, 2494,
            2502, 2509, 2517, 2524, 2532,
            2539, 2547, 2555, 2563, 2570,
            2578, 2586, 2594, 2601, 2609,
            2617, 2625, 2633, 2641, 2649,
            2657, 2665, 2673, 2681, 2689,
            2697, 2705, 2714, 2722, 2730,
            2738, 2747, 2755, 2763, 2772,
            2780, 2788, 2797, 2805, 2814,
            2822, 2831, 2839, 2848, 2857,
            2865, 2874, 2883, 2891, 2900,
            2909, 2918, 2927, 2935, 2944,
            2953, 2962, 2971, 2980, 2989,
            2998, 3007, 3016, 3026, 3035,
            3044, 3053, 3062, 3072, 3081,
            3090, 3100, 3109, 3119, 3128,
            3138, 3147, 3157, 3166, 3176,
            3186, 3195, 3205, 3215, 3224,
            3234, 3244, 3254, 3264, 3274,
            3284, 3294, 3304, 3314, 3324,
            3334, 3344, 3354, 3364, 3375,
            3385, 3395, 3405, 3416, 3426,
            3437, 3447, 3458, 3468, 3479,
            3489, 3500, 3510, 3521, 3532,
            3543, 3553, 3564, 3575, 3586,
            3597, 3608, 3619, 3630, 3641,
            3652, 3663, 3674, 3685, 3697,
            3708, 3719, 3730, 3742, 3753,
            3765, 3776, 3788, 3799, 3811,
            3822, 3834, 3846, 3857, 3869,
            3881, 3893, 3905, 3917, 3929,
            3941, 3953, 3965, 3977, 3989,
            4001, 4013, 4025, 4038, 4050,
            4062, 4075, 4087, 4100, 4112,
            4125, 4137, 4150, 4163, 4175,
            4188, 4201, 4214, 4226, 4239,
            4252, 4265, 4278, 4291, 4304,
            4318, 4331, 4344, 4357, 4371,
            4384, 4397, 4411, 4424, 4438,
            4451, 4465, 4479, 4492, 4506,
            4520, 4533, 4547, 4561, 4575,
            4589, 4603, 4617, 4631, 4645,
            4660, 4674, 4688, 4703, 4717,
            4731, 4746, 4760, 4775, 4789,
            4804, 4819, 4833, 4848, 4863,
            4878, 4893, 4908, 4923, 4938,
            4953, 4968, 4983, 4999, 5014,
            5029, 5045, 5060, 5075, 5091,
            5107, 5122, 5138, 5154, 5169,
            5185, 5201, 5217, 5233, 5249,
            5265, 5281, 5297, 5313, 5330,
            5346, 5362, 5379, 5395, 5412,
            5428, 5445, 5462, 5478, 5495,
            5512, 5529, 5546, 5563, 5580,
            5597, 5614, 5631, 5648, 5666,
            5683, 5700, 5718, 5735, 5753,
            5770, 5788, 5806, 5824, 5841,
            5859, 5877, 5895, 5913, 5931,
            5950, 5968, 5986, 6004, 6023,
            6041, 6060, 6078, 6097, 6116,
            6134, 6153, 6172, 6191, 6210,
            6229, 6248, 6267, 6286, 6305,
            6325, 6344, 6364, 6383, 6403,
            6422, 6442, 6462, 6481, 6501,
            6521, 6541, 6561, 6581, 6602,
            6622, 6642, 6662, 6683, 6703,
            6724, 6744, 6765, 6786, 6807,
            6828, 6848, 6869, 6891, 6912,
            6933, 6954, 6975, 6997, 7018,
            7040, 7061, 7083, 7105, 7126,
            7148, 7170, 7192, 7214, 7236,
            7259, 7281, 7303, 7325, 7348,
            7370, 7393, 7416, 7438, 7461,
            7484, 7507, 7530, 7553, 7576,
            7600, 7623, 7646, 7670, 7693,
            7717, 7741, 7764, 7788, 7812,
            7836, 7860, 7884, 7908, 7932,
            7957, 7981, 8006, 8030, 8055,
            8080, 8104, 8129, 8154, 8179,
            8204, 8229, 8255, 8280, 8305,
            8331, 8356, 8382, 8408, 8434,
            8459, 8485, 8511, 8537, 8564,
            8590, 8616, 8643, 8669, 8696,
            8722, 8749, 8776, 8803, 8830,
            8857, 8884, 8912, 8939, 8966,
            8994, 9021, 9049, 9077, 9105,
            9133, 9161, 9189, 9217, 9245,
            9274, 9302, 9331, 9359, 9388,
            9417, 9446, 9475, 9504, 9533,
            9562, 9591, 9621, 9650, 9680,
            9710, 9740, 9769, 9799, 9830,
            9860, 9890, 9920, 9951, 9981,
            10012, 10043, 10073, 10104, 10135,
            10166, 10198, 10229, 10260, 10292,
            10323, 10355, 10387, 10419, 10451,
            10483, 10515, 10547, 10580, 10612,
            10645, 10677, 10710, 10743, 10776,
            10809, 10842, 10876, 10909, 10942,
            10976, 11010, 11044, 11077, 11111,
            11146, 11180, 11214, 11248, 11283,
            11318, 11352, 11387, 11422, 11457,
            11492, 11528, 11563, 11599, 11634,
            11670, 11706, 11742, 11778, 11814,
            11850, 11887, 11923, 11960, 11996,
            12033, 12070, 12107, 12144, 12182,
            12219, 12257, 12294, 12332, 12370,
            12408, 12446, 12484, 12522, 12561,
            12599, 12638, 12677, 12716, 12755,
            12794, 12833, 12873, 12912, 12952,
            12992, 13032, 13072, 13112, 13152,
            13192, 13233, 13274, 13314, 13355,
            13396, 13437, 13479, 13520, 13561,
            13603, 13645, 13687, 13729, 13771,
            13813, 13856, 13898, 13941, 13984,
            14027, 14070, 14113, 14156, 14200,
            14243, 14287, 14331, 14375, 14419,
            14463, 14508, 14552, 14597, 14642,
            14687, 14732, 14777, 14823, 14868,
            14914, 14960, 15005, 15052, 15098,
            15144, 15191, 15237, 15284, 15331,
            15378, 15425, 15473, 15520, 15568,
            15616, 15664, 15712, 15760, 15808,
            15857, 15906, 15955, 16004, 16053,
            16102, 16151, 16201, 16251, 16301,
            16351, 16401, 16451, 16502, 16553,
            16603, 16654, 16706, 16757, 16808,
            16860, 16912, 16964, 17016, 17068,
            17121, 17173, 17226, 17279, 17332,
            17385, 17438, 17492, 17546, 17600,
            17654, 17708, 17762, 17817, 17872,
            17926, 17982, 18037, 18092, 18148,
            18203, 18259, 18315, 18372, 18428,
            18485, 18542, 18598, 18656, 18713,
            18770, 18828, 18886, 18944, 19002,
            19060, 19119, 19178, 19237, 19296,
            19355, 19414, 19474, 19534, 19594,
            19654, 19714, 19775, 19836, 19897,
            19958, 20019, 20081, 20142, 20204,
            20266, 20328, 20391, 20454, 20516,
            20579, 20643, 20706, 20770, 20833,
            20897, 20962, 21026, 21091, 21155,
            21220, 21286, 21351, 21417, 21482,
            21548, 21615, 21681, 21748, 21814,
            21881, 21949, 22016, 22084, 22151,
            22220, 22288, 22356, 22425, 22494,
            22563, 22632, 22702, 22771, 22841,
            22912, 22982, 23053, 23123, 23194,
            23266, 23337, 23409, 23481, 23553,
            23625, 23698, 23771, 23844, 23917,
            23990, 24064, 24138, 24212, 24287,
            24361, 24436, 24511, 24586, 24662,
            24738, 24814, 24890, 24966, 25043,
            25120, 25197, 25275, 25352, 25430,
            25508, 25587, 25665, 25744, 25823,
            25902, 25982, 26062, 26142, 26222,
            26303, 26384, 26465, 26546, 26627,
            26709, 26791, 26874, 26956, 27039,
            27122, 27205, 27289, 27373, 27457,
            27541, 27626, 27711, 27796, 27881,
            27967, 28053, 28139, 28226, 28312,
            28399, 28486, 28574, 28662, 28750,
            28838, 28927, 29016, 29105, 29194,
            29284, 29374, 29464, 29555, 29645,
            29736, 29828, 29919, 30011, 30104,
            30196, 30289, 30382, 30475, 30569,
            30663, 30757, 30851, 30946, 31041,
            31137, 31232, 31328, 31425, 31521,
            31618, 31715, 31813, 31910, 32008,
            32107, 32205, 32304, 32403, 32503,
            32603, 32703, 32804, 32904, 33005,
            33107, 33209, 33311, 33413, 33516,
            33619, 33722, 33825, 33929, 34034,
            34138, 34243, 34348, 34454, 34560,
            34666, 34772, 34879, 34986, 35094,
            35202, 35310, 35418, 35527, 35636,
            35746, 35856, 35966, 36076, 36187,
            36298, 36410, 36522, 36634, 36746,
            36859, 36973, 37086, 37200, 37314,
            37429, 37544, 37659, 37775, 37891,
            38008, 38124, 38241, 38359, 38477,
            38595, 38714, 38833, 38952, 39072,
            39192, 39312, 39433, 39554, 39675,
            39797, 39920, 40042, 40165, 40289,
            40413, 40537, 40661, 40786, 40911,
            41037, 41163, 41290, 41417, 41544,
            41671, 41800, 41928, 42057, 42186,
            42316, 42446, 42576, 42707, 42838,
            42970, 43102, 43234, 43367, 43500,
            43634, 43768, 43902, 44037, 44173,
            44308, 44444, 44581, 44718, 44855,
            44993, 45131, 45270, 45409, 45549,
            45689, 45829, 45970, 46111, 46253,
            46395, 46537, 46680, 46824, 46968,
            47112, 47257, 47402, 47548, 47694,
            47840, 47987, 48135, 48283, 48431,
            48580, 48729, 48879, 49029, 49180,
            49331, 49482, 49634, 49787, 49940,
            50093, 50247, 50401, 50556, 50712,
            50867, 51024, 51181, 51338, 51495,
            51654, 51812, 51972, 52131, 52291,
            52452, 52613, 52775, 52937, 53100,
            53263, 53427, 53591, 53755, 53921,
            54086, 54252, 54419, 54586, 54754,
            54922, 55091, 55260, 55430, 55600,
            55771, 55943, 56114, 56287, 56460,
            56633, 56807, 56982, 57157, 57333,
            57509, 57685, 57863, 58040, 58219,
            58398, 58577, 58757, 58938, 59119,
            59300, 59483, 59665, 59849, 60033,
            60217, 60402, 60588, 60774, 60960,
            61148, 61336, 61524, 61713, 61903,
            62093, 62284, 62475, 62667, 62860,
            63053, 63247, 63441, 63636, 63831,
            64027, 64224, 64422, 64619, 64818,
            65017, 65217, 65417, 65618, 65820,
            66022, 66225, 66429, 66633, 66837,
            67043, 67249, 67455, 67663, 67870,
            68079, 68288, 68498, 68708, 68920,
            69131, 69344, 69557, 69771, 69985,
            70200, 70416, 70632, 70849, 71067,
            71285, 71504, 71724, 71944, 72165,
            72387, 72609, 72833, 73056, 73281,
            73506, 73732, 73958, 74186, 74414,
            74642, 74872, 75102, 75332, 75564,
            75796, 76029, 76262, 76497, 76732,
            76968, 77204, 77441, 77679, 77918,
            78157, 78398, 78638, 78880, 79122,
            79366, 79609, 79854, 80099, 80345,
            80592, 80840, 81088, 81338, 81587,
            81838, 82090, 82342, 82595, 82849,
            83103, 83358, 83615, 83872, 84129,
            84388, 84647, 84907, 85168, 85430,
            85692, 85955, 86220, 86485, 86750,
            87017, 87284, 87552, 87821, 88091,
            88362, 88633, 88906, 89179, 89453,
            89728, 90003, 90280, 90557, 90836,
            91115, 91395, 91676, 91957, 92240,
            92523, 92807, 93093, 93379, 93666,
            93953, 94242, 94532, 94822, 95113,
            95406, 95699, 95993, 96288, 96584,
            96881, 97178, 97477, 97776, 98077,
            98378, 98680, 98984, 99288, 99593,
            99899, 100206, 100514, 100822, 101132,
            101443, 101755, 102067, 102381, 102696,
            103011, 103328, 103645, 103964, 104283,
            104603, 104925, 105247, 105571, 105895,
            106220, 106547, 106874, 107203, 107532,
            107862, 108194, 108526, 108860, 109194,
            109530, 109866, 110204, 110542, 110882,
            111223, 111565, 111907, 112251, 112596,
            112942, 113289, 113637, 113986, 114337,
            114688, 115040, 115394, 115748, 116104,
            116461, 116819, 117178, 117538, 117899,
            118261, 118624, 118989, 119354, 119721,
            120089, 120458, 120828, 121199, 121572,
            121945, 122320, 122696, 123073, 123451,
            123830, 124211, 124593, 124975, 125359,
            125745, 126131, 126518, 126907, 127297,
            127688, 128081, 128474, 128869, 129265,
            129662, 130061, 130260
         ) ),
        max_error = cms.double(0.6152529479288091),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut2 = cms.PSet(
        lut = cms.vint32( (
            256, 256, 257, 258, 259,
            260, 260, 261, 262, 263,
            264, 264, 265, 266, 267,
            268, 268, 269, 270, 271,
            272, 273, 273, 274, 275,
            276, 277, 278, 279, 279,
            280, 281, 282, 283, 284,
            285, 285, 286, 287, 288,
            289, 290, 291, 292, 293,
            293, 294, 295, 296, 297,
            298, 299, 300, 301, 302,
            303, 303, 304, 305, 306,
            307, 308, 309, 310, 311,
            312, 313, 314, 315, 316,
            317, 318, 319, 320, 321,
            322, 323, 324, 325, 326,
            327, 328, 329, 330, 331,
            332, 333, 334, 335, 336,
            337, 338, 339, 340, 341,
            342, 343, 344, 345, 346,
            347, 348, 349, 351, 352,
            353, 354, 355, 356, 357,
            358, 359, 360, 361, 363,
            364, 365, 366, 367, 368,
            369, 370, 372, 373, 374,
            375, 376, 377, 379, 380,
            381, 382, 383, 384, 386,
            387, 388, 389, 390, 392,
            393, 394, 395, 396, 398,
            399, 400, 401, 402, 404,
            405, 406, 407, 409, 410,
            411, 412, 414, 415, 416,
            418, 419, 420, 421, 423,
            424, 425, 427, 428, 429,
            431, 432, 433, 435, 436,
            437, 439, 440, 441, 443,
            444, 445, 447, 448, 449,
            451, 452, 454, 455, 456,
            458, 459, 461, 462, 463,
            465, 466, 468, 469, 471,
            472, 474, 475, 476, 478,
            479, 481, 482, 484, 485,
            487, 488, 490, 491, 493,
            494, 496, 497, 499, 500,
            502, 503, 505, 507, 508,
            510, 511, 513, 514, 516,
            518, 519, 521, 522, 524,
            526, 527, 529, 530, 532,
            534, 535, 537, 539, 540,
            542, 544, 545, 547, 549,
            550, 552, 554, 555, 557,
            559, 561, 562, 564, 566,
            567, 569, 571, 573, 575,
            576, 578, 580, 582, 583,
            585, 587, 589, 591, 592,
            594, 596, 598, 600, 602,
            603, 605, 607, 609, 611,
            613, 615, 617, 618, 620,
            622, 624, 626, 628, 630,
            632, 634, 636, 638, 640,
            642, 644, 646, 648, 650,
            652, 654, 656, 658, 660,
            662, 664, 666, 668, 670,
            672, 674, 676, 678, 680,
            682, 684, 686, 688, 691,
            693, 695, 697, 699, 701,
            703, 706, 708, 710, 712,
            714, 717, 719, 721, 723,
            725, 728, 730, 732, 734,
            737, 739, 741, 743, 746,
            748, 750, 753, 755, 757,
            760, 762, 764, 767, 769,
            771, 774, 776, 778, 781,
            783, 786, 788, 790, 793,
            795, 798, 800, 803, 805,
            808, 810, 813, 815, 818,
            820, 823, 825, 828, 830,
            833, 835, 838, 840, 843,
            846, 848, 851, 853, 856,
            859, 861, 864, 867, 869,
            872, 875, 877, 880, 883,
            885, 888, 891, 894, 896,
            899, 902, 905, 907, 910,
            913, 916, 919, 921, 924,
            927, 930, 933, 936, 939,
            941, 944, 947, 950, 953,
            956, 959, 962, 965, 968,
            971, 974, 977, 980, 983,
            986, 989, 992, 995, 998,
            1001, 1004, 1007, 1010, 1013,
            1017, 1020, 1023, 1026, 1029,
            1032, 1035, 1039, 1042, 1045,
            1048, 1051, 1055, 1058, 1061,
            1064, 1068, 1071, 1074, 1078,
            1081, 1084, 1088, 1091, 1094,
            1098, 1101, 1104, 1108, 1111,
            1115, 1118, 1121, 1125, 1128,
            1132, 1135, 1139, 1142, 1146,
            1149, 1153, 1156, 1160, 1163,
            1167, 1171, 1174, 1178, 1181,
            1185, 1189, 1192, 1196, 1200,
            1203, 1207, 1211, 1214, 1218,
            1222, 1226, 1229, 1233, 1237,
            1241, 1245, 1249, 1252, 1256,
            1260, 1264, 1268, 1272, 1276,
            1280, 1283, 1287, 1291, 1295,
            1299, 1303, 1307, 1311, 1315,
            1319, 1323, 1328, 1332, 1336,
            1340, 1344, 1348, 1352, 1356,
            1360, 1365, 1369, 1373, 1377,
            1382, 1386, 1390, 1394, 1399,
            1403, 1407, 1412, 1416, 1420,
            1425, 1429, 1433, 1438, 1442,
            1447, 1451, 1455, 1460, 1464,
            1469, 1473, 1478, 1483, 1487,
            1492, 1496, 1501, 1505, 1510,
            1515, 1519, 1524, 1529, 1533,
            1538, 1543, 1548, 1552, 1557,
            1562, 1567, 1572, 1576, 1581,
            1586, 1591, 1596, 1601, 1606,
            1611, 1616, 1620, 1625, 1630,
            1635, 1640, 1646, 1651, 1656,
            1661, 1666, 1671, 1676, 1681,
            1686, 1692, 1697, 1702, 1707,
            1712, 1718, 1723, 1728, 1734,
            1739, 1744, 1750, 1755, 1760,
            1766, 1771, 1777, 1782, 1788,
            1793, 1799, 1804, 1810, 1815,
            1821, 1826, 1832, 1838, 1843,
            1849, 1855, 1860, 1866, 1872,
            1878, 1883, 1889, 1895, 1901,
            1907, 1912, 1918, 1924, 1930,
            1936, 1942, 1948, 1954, 1960,
            1966, 1972, 1978, 1984, 1990,
            1996, 2003, 2009, 2015, 2021,
            2027, 2033, 2040, 2046, 2052,
            2059, 2065, 2071, 2078, 2084,
            2090, 2097, 2103, 2110, 2116,
            2123, 2129, 2136, 2142, 2149,
            2156, 2162, 2169, 2175, 2182,
            2189, 2196, 2202, 2209, 2216,
            2223, 2230, 2236, 2243, 2250,
            2257, 2264, 2271, 2278, 2285,
            2292, 2299, 2306, 2313, 2320,
            2327, 2335, 2342, 2349, 2356,
            2363, 2371, 2378, 2385, 2393,
            2400, 2407, 2415, 2422, 2430,
            2437, 2444, 2452, 2460, 2467,
            2475, 2482, 2490, 2498, 2505,
            2513, 2521, 2528, 2536, 2544,
            2552, 2560, 2567, 2575, 2583,
            2591, 2599, 2607, 2615, 2623,
            2631, 2639, 2647, 2656, 2664,
            2672, 2680, 2688, 2697, 2705,
            2713, 2722, 2730, 2738, 2747,
            2755, 2764, 2772, 2781, 2789,
            2798, 2806, 2815, 2824, 2832,
            2841, 2850, 2858, 2867, 2876,
            2885, 2894, 2903, 2912, 2921,
            2930, 2939, 2948, 2957, 2966,
            2975, 2984, 2993, 3002, 3012,
            3021, 3030, 3039, 3049, 3058,
            3067, 3077, 3086, 3096, 3105,
            3115, 3124, 3134, 3144, 3153,
            3163, 3173, 3183, 3192, 3202,
            3212, 3222, 3232, 3242, 3252,
            3262, 3272, 3282, 3292, 3302,
            3312, 3322, 3332, 3343, 3353,
            3363, 3374, 3384, 3394, 3405,
            3415, 3426, 3436, 3447, 3457,
            3468, 3479, 3489, 3500, 3511,
            3522, 3532, 3543, 3554, 3565,
            3576, 3587, 3598, 3609, 3620,
            3631, 3642, 3654, 3665, 3676,
            3687, 3699, 3710, 3722, 3733,
            3744, 3756, 3767, 3779, 3791,
            3802, 3814, 3826, 3837, 3849,
            3861, 3873, 3885, 3897, 3909,
            3921, 3933, 3945, 3957, 3969,
            3981, 3994, 4006, 4018, 4031,
            4043, 4055, 4068, 4080, 4093,
            4105, 4118, 4131, 4143, 4156,
            4169, 4182, 4195, 4207, 4220,
            4233, 4246, 4259, 4272, 4286,
            4299, 4312, 4325, 4339, 4352,
            4365, 4379, 4392, 4406, 4419,
            4433, 4446, 4460, 4474, 4487,
            4501, 4515, 4529, 4543, 4557,
            4571, 4585, 4599, 4613, 4627,
            4641, 4656, 4670, 4684, 4699,
            4713, 4728, 4742, 4757, 4771,
            4786, 4801, 4816, 4830, 4845,
            4860, 4875, 4890, 4905, 4920,
            4935, 4950, 4966, 4981, 4996,
            5011, 5027, 5042, 5058, 5073,
            5089, 5105, 5120, 5136, 5152,
            5168, 5183, 5199, 5215, 5231,
            5247, 5264, 5280, 5296, 5312,
            5329, 5345, 5361, 5378, 5394,
            5411, 5428, 5444, 5461, 5478,
            5495, 5512, 5528, 5545, 5562,
            5580, 5597, 5614, 5631, 5648,
            5666, 5683, 5701, 5718, 5736,
            5753, 5771, 5789, 5807, 5824,
            5842, 5860, 5878, 5896, 5914,
            5933, 5951, 5969, 5987, 6006,
            6024, 6043, 6061, 6080, 6099,
            6117, 6136, 6155, 6174, 6193,
            6212, 6231, 6250, 6269, 6289,
            6308, 6327, 6347, 6366, 6386,
            6406, 6425, 6445, 6465, 6485,
            6505, 6525, 6545, 6565, 6585,
            6605, 6625, 6646, 6666, 6687,
            6707, 6728, 6749, 6769, 6790,
            6811, 6832, 6853, 6874, 6895,
            6916, 6937, 6959, 6980, 7002,
            7023, 7045, 7066, 7088, 7110,
            7132, 7154, 7176, 7198, 7220,
            7242, 7264, 7286, 7309, 7331,
            7354, 7376, 7399, 7422, 7445,
            7468, 7490, 7513, 7537, 7560,
            7583, 7606, 7630, 7653, 7677,
            7700, 7724, 7748, 7771, 7795,
            7819, 7843, 7867, 7892, 7916,
            7940, 7964, 7989, 8014, 8038,
            8063, 8088, 8112, 8137, 8162,
            8187, 8213, 8238, 8263, 8289,
            8314, 8340, 8365, 8391, 8417,
            8443, 8468, 8495, 8521, 8547,
            8573, 8599, 8626, 8652, 8679,
            8706, 8732, 8759, 8786, 8813,
            8840, 8867, 8895, 8922, 8949,
            8977, 9004, 9032, 9060, 9088,
            9116, 9144, 9172, 9200, 9228,
            9256, 9285, 9313, 9342, 9371,
            9400, 9428, 9457, 9486, 9516,
            9545, 9574, 9604, 9633, 9663,
            9692, 9722, 9752, 9782, 9812,
            9842, 9872, 9903, 9933, 9964,
            9994, 10025, 10056, 10087, 10118,
            10149, 10180, 10211, 10243, 10274,
            10306, 10337, 10369, 10401, 10433,
            10465, 10497, 10529, 10562, 10594,
            10627, 10659, 10692, 10725, 10758,
            10791, 10824, 10858, 10891, 10924,
            10958, 10992, 11025, 11059, 11093,
            11127, 11161, 11196, 11230, 11265,
            11299, 11334, 11369, 11404, 11439,
            11474, 11509, 11545, 11580, 11616,
            11651, 11687, 11723, 11759, 11795,
            11831, 11868, 11904, 11941, 11978,
            12014, 12051, 12088, 12125, 12163,
            12200, 12238, 12275, 12313, 12351,
            12389, 12427, 12465, 12503, 12542,
            12580, 12619, 12658, 12696, 12735,
            12775, 12814, 12853, 12893, 12932,
            12972, 13012, 13052, 13092, 13132,
            13173, 13213, 13254, 13294, 13335,
            13376, 13417, 13459, 13500, 13541,
            13583, 13625, 13667, 13709, 13751,
            13793, 13835, 13878, 13920, 13963,
            14006, 14049, 14092, 14136, 14179,
            14223, 14266, 14310, 14354, 14398,
            14443, 14487, 14531, 14576, 14621,
            14666, 14711, 14756, 14801, 14847,
            14892, 14938, 14984, 15030, 15076,
            15123, 15169, 15216, 15263, 15309,
            15356, 15404, 15451, 15498, 15546,
            15594, 15642, 15690, 15738, 15786,
            15835, 15884, 15932, 15981, 16030,
            16080, 16129, 16179, 16228, 16278,
            16328, 16378, 16429, 16479, 16530,
            16581, 16632, 16683, 16734, 16785,
            16837, 16889, 16941, 16993, 17045,
            17097, 17150, 17202, 17255, 17308,
            17361, 17415, 17468, 17522, 17576,
            17630, 17684, 17738, 17793, 17848,
            17902, 17957, 18013, 18068, 18123,
            18179, 18235, 18291, 18347, 18404,
            18460, 18517, 18574, 18631, 18688,
            18746, 18803, 18861, 18919, 18977,
            19035, 19094, 19152, 19211, 19270,
            19330, 19389, 19448, 19508, 19568,
            19628, 19689, 19749, 19810, 19871,
            19932, 19993, 20054, 20116, 20178,
            20240, 20302, 20364, 20427, 20490,
            20553, 20616, 20679, 20743, 20806,
            20870, 20935, 20999, 21063, 21128,
            21193, 21258, 21323, 21389, 21455,
            21521, 21587, 21653, 21720, 21786,
            21853, 21920, 21988, 22055, 22123,
            22191, 22259, 22328, 22396, 22465,
            22534, 22603, 22673, 22742, 22812,
            22882, 22953, 23023, 23094, 23165,
            23236, 23308, 23379, 23451, 23523,
            23595, 23668, 23741, 23814, 23887,
            23960, 24034, 24108, 24182, 24256,
            24330, 24405, 24480, 24555, 24631,
            24707, 24783, 24859, 24935, 25012,
            25089, 25166, 25243, 25320, 25398,
            25476, 25555, 25633, 25712, 25791,
            25870, 25950, 26029, 26109, 26190,
            26270, 26351, 26432, 26513, 26594,
            26676, 26758, 26840, 26923, 27006,
            27088, 27172, 27255, 27339, 27423,
            27507, 27592, 27677, 27762, 27847,
            27932, 28018, 28104, 28191, 28277,
            28364, 28451, 28539, 28626, 28714,
            28803, 28891, 28980, 29069, 29158,
            29248, 29338, 29428, 29518, 29609,
            29700, 29791, 29883, 29975, 30067,
            30159, 30252, 30345, 30438, 30532,
            30625, 30719, 30814, 30909, 31003,
            31099, 31194, 31290, 31386, 31483,
            31579, 31677, 31774, 31871, 31969,
            32068, 32166, 32265, 32364, 32464,
            32563, 32663, 32764, 32864, 32965,
            33067, 33168, 33270, 33372, 33475,
            33578, 33681, 33785, 33888, 33992,
            34097, 34202, 34307, 34412, 34518,
            34624, 34730, 34837, 34944, 35051,
            35159, 35267, 35376, 35484, 35593,
            35703, 35812, 35922, 36033, 36144,
            36255, 36366, 36478, 36590, 36702,
            36815, 36928, 37042, 37155, 37270,
            37384, 37499, 37614, 37730, 37846,
            37962, 38079, 38196, 38313, 38431,
            38549, 38667, 38786, 38905, 39025,
            39145, 39265, 39386, 39507, 39628,
            39750, 39872, 39994, 40117, 40241,
            40364, 40488, 40613, 40737, 40863,
            40988, 41114, 41240, 41367, 41494,
            41622, 41750, 41878, 42007, 42136,
            42265, 42395, 42525, 42656, 42787,
            42919, 43050, 43183, 43315, 43448,
            43582, 43716, 43850, 43985, 44120,
            44256, 44392, 44528, 44665, 44802,
            44940, 45078, 45216, 45355, 45495,
            45634, 45775, 45915, 46056, 46198,
            46340, 46482, 46625, 46768, 46912,
            47056, 47201, 47346, 47491, 47637,
            47784, 47930, 48078, 48225, 48374,
            48522, 48671, 48821, 48971, 49121,
            49272, 49424, 49576, 49728, 49881,
            50034, 50188, 50342, 50497, 50652,
            50807, 50963, 51120, 51277, 51435,
            51593, 51751, 51910, 52070, 52230,
            52390, 52551, 52713, 52875, 53037,
            53200, 53364, 53528, 53692, 53857,
            54022, 54188, 54355, 54522, 54690,
            54858, 55026, 55195, 55365, 55535,
            55706, 55877, 56048, 56221, 56393,
            56567, 56740, 56915, 57090, 57265,
            57441, 57618, 57795, 57972, 58150,
            58329, 58508, 58688, 58868, 59049,
            59231, 59413, 59595, 59778, 59962,
            60146, 60331, 60516, 60702, 60889,
            61076, 61264, 61452, 61641, 61830,
            62020, 62211, 62402, 62594, 62786,
            62979, 63172, 63366, 63561, 63756,
            63952, 64149, 64346, 64544, 64742,
            64941, 65140, 65341, 65541, 65743,
            65945, 66147, 66351, 66555, 66759,
            66964, 67170, 67376, 67583, 67791,
            67999, 68208, 68418, 68628, 68839,
            69050, 69263, 69475, 69689, 69903,
            70118, 70333, 70549, 70766, 70984,
            71202, 71421, 71640, 71860, 72081,
            72302, 72525, 72747, 72971, 73195,
            73420, 73646, 73872, 74099, 74327,
            74555, 74784, 75014, 75244, 75476,
            75707, 75940, 76173, 76407, 76642,
            76878, 77114, 77351, 77589, 77827,
            78066, 78306, 78547, 78788, 79030,
            79273, 79516, 79761, 80006, 80252,
            80498, 80746, 80994, 81243, 81492,
            81743, 81994, 82246, 82498, 82752,
            83006, 83261, 83517, 83774, 84031,
            84289, 84548, 84808, 85069, 85330,
            85592, 85855, 86119, 86384, 86649,
            86915, 87182, 87450, 87719, 87989,
            88259, 88530, 88802, 89075, 89349,
            89623, 89899, 90175, 90452, 90730,
            91009, 91288, 91569, 91850, 92132,
            92415, 92699, 92984, 93270, 93557,
            93844, 94132, 94422, 94712, 95003,
            95295, 95587, 95881, 96176, 96471,
            96768, 97065, 97363, 97662, 97963,
            98264, 98565, 98868, 99172, 99477,
            99783, 100089, 100397, 100705, 101015,
            101325, 101636, 101949, 102262, 102576,
            102891, 103207, 103525, 103843, 104162,
            104482, 104803, 105125, 105448, 105772,
            106097, 106423, 106750, 107078, 107407,
            107737, 108068, 108400, 108733, 109067,
            109402, 109738, 110076, 110414, 110753,
            111093, 111435, 111777, 112121, 112465,
            112811, 113157, 113505, 113854, 114204,
            114555, 114907, 115260, 115614, 115969,
            116325, 116683, 117041, 117401, 117762,
            118124, 118486, 118851, 119216, 119582,
            119949, 120318, 120688, 121059, 121431,
            121804, 122178, 122553, 122930, 123308,
            123687, 124067, 124448, 124830, 125214,
            125598, 125984, 126371, 126760, 127149,
            127540, 127932, 128325, 128719, 129115,
            129511, 129909, 130309, 130709, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071
         ) ),
        max_error = cms.double(5748.616225984908),
        output_scale_factor = cms.double(0.953125),
        unused_lsbs = cms.uint32(2)
    ),
    inv_mass_checks = cms.untracked.bool(False),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    sanity_checks = cms.untracked.bool(False),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    )
)


process.DoubleTkMuPuppiJetPuppiMet = cms.EDFilter("L1GTQuadObjectCond",
    collection1 = cms.PSet(
        maxEta = cms.double(2.4),
        maxPrimVertDz = cms.double(1),
        minEta = cms.double(-2.4),
        minQualityScore = cms.uint32(0),
        primVertex = cms.uint32(0),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 0.83, 1.24),
        regionsMinPt = cms.vdouble(3, 3, 3),
        tag = cms.InputTag("l1tGTProducer","GMTTkMuons")
    ),
    collection2 = cms.PSet(
        maxEta = cms.double(2.4),
        maxPrimVertDz = cms.double(1),
        minEta = cms.double(-2.4),
        minQualityScore = cms.uint32(0),
        primVertex = cms.uint32(0),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 0.83, 1.24),
        regionsMinPt = cms.vdouble(3, 3, 3),
        tag = cms.InputTag("l1tGTProducer","GMTTkMuons")
    ),
    collection3 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 1.5),
        regionsMinPt = cms.vdouble(30, 25),
        tag = cms.InputTag("l1tGTProducer","CL2JetsSC4")
    ),
    collection4 = cms.PSet(
        minPt = cms.double(45),
        tag = cms.InputTag("l1tGTProducer","CL2EtSum")
    ),
    correl12 = cms.PSet(
        minDR = cms.double(0)
    ),
    cos_phi_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            487, 487, 487, 487, 487,
            487, 487, 487, 487, 487,
            487, 486, 486, 486, 486,
            486, 486, 486, 485, 485,
            485, 485, 485, 485, 484,
            484, 484, 484, 484, 483,
            483, 483, 483, 483, 482,
            482, 482, 482, 481, 481,
            481, 481, 480, 480, 480,
            480, 479, 479, 479, 478,
            478, 478, 478, 477, 477,
            477, 476, 476, 476, 475,
            475, 475, 474, 474, 474,
            473, 473, 472, 472, 472,
            471, 471, 471, 470, 470,
            469, 469, 468, 468, 468,
            467, 467, 466, 466, 465,
            465, 465, 464, 464, 463,
            463, 462, 462, 461, 461,
            460, 460, 459, 459, 458,
            458, 457, 457, 456, 456,
            455, 454, 454, 453, 453,
            452, 452, 451, 451, 450,
            449, 449, 448, 448, 447,
            446, 446, 445, 445, 444,
            443, 443, 442, 441, 441,
            440, 440, 439, 438, 438,
            437, 436, 436, 435, 434,
            434, 433, 432, 431, 431,
            430, 429, 429, 428, 427,
            426, 426, 425, 424, 423,
            423, 422, 421, 420, 420,
            419, 418, 417, 417, 416,
            415, 414, 413, 413, 412,
            411, 410, 409, 409, 408,
            407, 406, 405, 405, 404,
            403, 402, 401, 400, 399,
            399, 398, 397, 396, 395,
            394, 393, 392, 392, 391,
            390, 389, 388, 387, 386,
            385, 384, 383, 382, 381,
            381, 380, 379, 378, 377,
            376, 375, 374, 373, 372,
            371, 370, 369, 368, 367,
            366, 365, 364, 363, 362,
            361, 360, 359, 358, 357,
            356, 355, 354, 353, 352,
            351, 350, 349, 348, 347,
            346, 345, 343, 342, 341,
            340, 339, 338, 337, 336,
            335, 334, 333, 332, 330,
            329, 328, 327, 326, 325,
            324, 323, 322, 320, 319,
            318, 317, 316, 315, 314,
            312, 311, 310, 309, 308,
            307, 306, 304, 303, 302,
            301, 300, 298, 297, 296,
            295, 294, 293, 291, 290,
            289, 288, 286, 285, 284,
            283, 282, 280, 279, 278,
            277, 275, 274, 273, 272,
            270, 269, 268, 267, 265,
            264, 263, 262, 260, 259,
            258, 257, 255, 254, 253,
            252, 250, 249, 248, 246,
            245, 244, 242, 241, 240,
            239, 237, 236, 235, 233,
            232, 231, 229, 228, 227,
            225, 224, 223, 221, 220,
            219, 217, 216, 215, 213,
            212, 211, 209, 208, 207,
            205, 204, 203, 201, 200,
            198, 197, 196, 194, 193,
            192, 190, 189, 187, 186,
            185, 183, 182, 181, 179,
            178, 176, 175, 174, 172,
            171, 169, 168, 167, 165,
            164, 162, 161, 159, 158,
            157, 155, 154, 152, 151,
            150, 148, 147, 145, 144,
            142, 141, 140, 138, 137,
            135, 134, 132, 131, 129,
            128, 127, 125, 124, 122,
            121, 119, 118, 116, 115,
            113, 112, 111, 109, 108,
            106, 105, 103, 102, 100,
            99, 97, 96, 94, 93,
            92, 90, 89, 87, 86,
            84, 83, 81, 80, 78,
            77, 75, 74, 72, 71,
            69, 68, 66, 65, 63,
            62, 60, 59, 58, 56,
            55, 53, 52, 50, 49,
            47, 46, 44, 43, 41,
            40, 38, 37, 35, 34,
            32, 31, 29, 28, 26,
            25, 23, 22, 20, 19,
            17, 16, 14, 13, 11,
            10, 8, 7, 5, 4,
            2, 1, -1, -2, -4,
            -5, -7, -8, -10, -11,
            -13, -14, -16, -17, -19,
            -20, -22, -23, -25, -26,
            -28, -29, -31, -32, -34,
            -35, -37, -38, -40, -41,
            -43, -44, -46, -47, -49,
            -50, -52, -53, -55, -56,
            -58, -59, -60, -62, -63,
            -65, -66, -68, -69, -71,
            -72, -74, -75, -77, -78,
            -80, -81, -83, -84, -86,
            -87, -89, -90, -92, -93,
            -94, -96, -97, -99, -100,
            -102, -103, -105, -106, -108,
            -109, -111, -112, -113, -115,
            -116, -118, -119, -121, -122,
            -124, -125, -127, -128, -129,
            -131, -132, -134, -135, -137,
            -138, -140, -141, -142, -144,
            -145, -147, -148, -150, -151,
            -152, -154, -155, -157, -158,
            -159, -161, -162, -164, -165,
            -167, -168, -169, -171, -172,
            -174, -175, -176, -178, -179,
            -181, -182, -183, -185, -186,
            -187, -189, -190, -192, -193,
            -194, -196, -197, -198, -200,
            -201, -203, -204, -205, -207,
            -208, -209, -211, -212, -213,
            -215, -216, -217, -219, -220,
            -221, -223, -224, -225, -227,
            -228, -229, -231, -232, -233,
            -235, -236, -237, -239, -240,
            -241, -242, -244, -245, -246,
            -248, -249, -250, -252, -253,
            -254, -255, -257, -258, -259,
            -260, -262, -263, -264, -265,
            -267, -268, -269, -270, -272,
            -273, -274, -275, -277, -278,
            -279, -280, -282, -283, -284,
            -285, -286, -288, -289, -290,
            -291, -293, -294, -295, -296,
            -297, -298, -300, -301, -302,
            -303, -304, -306, -307, -308,
            -309, -310, -311, -312, -314,
            -315, -316, -317, -318, -319,
            -320, -322, -323, -324, -325,
            -326, -327, -328, -329, -330,
            -332, -333, -334, -335, -336,
            -337, -338, -339, -340, -341,
            -342, -343, -345, -346, -347,
            -348, -349, -350, -351, -352,
            -353, -354, -355, -356, -357,
            -358, -359, -360, -361, -362,
            -363, -364, -365, -366, -367,
            -368, -369, -370, -371, -372,
            -373, -374, -375, -376, -377,
            -378, -379, -380, -381, -381,
            -382, -383, -384, -385, -386,
            -387, -388, -389, -390, -391,
            -392, -392, -393, -394, -395,
            -396, -397, -398, -399, -399,
            -400, -401, -402, -403, -404,
            -405, -405, -406, -407, -408,
            -409, -409, -410, -411, -412,
            -413, -413, -414, -415, -416,
            -417, -417, -418, -419, -420,
            -420, -421, -422, -423, -423,
            -424, -425, -426, -426, -427,
            -428, -429, -429, -430, -431,
            -431, -432, -433, -434, -434,
            -435, -436, -436, -437, -438,
            -438, -439, -440, -440, -441,
            -441, -442, -443, -443, -444,
            -445, -445, -446, -446, -447,
            -448, -448, -449, -449, -450,
            -451, -451, -452, -452, -453,
            -453, -454, -454, -455, -456,
            -456, -457, -457, -458, -458,
            -459, -459, -460, -460, -461,
            -461, -462, -462, -463, -463,
            -464, -464, -465, -465, -465,
            -466, -466, -467, -467, -468,
            -468, -468, -469, -469, -470,
            -470, -471, -471, -471, -472,
            -472, -472, -473, -473, -474,
            -474, -474, -475, -475, -475,
            -476, -476, -476, -477, -477,
            -477, -478, -478, -478, -478,
            -479, -479, -479, -480, -480,
            -480, -480, -481, -481, -481,
            -481, -482, -482, -482, -482,
            -483, -483, -483, -483, -483,
            -484, -484, -484, -484, -484,
            -485, -485, -485, -485, -485,
            -485, -486, -486, -486, -486,
            -486, -486, -486, -487, -487,
            -487, -487, -487, -487, -487,
            -487, -487, -487, -487, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488
         ) ),
        max_error = cms.double(0.0025338281044886835),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            489, 489, 489, 489, 489,
            489, 489, 489, 489, 489,
            489, 490, 490, 490, 490,
            490, 490, 490, 491, 491,
            491, 491, 491, 491, 492,
            492, 492, 492, 492, 493,
            493, 493, 493, 493, 494,
            494, 494, 494, 495, 495,
            495, 495, 496, 496, 496,
            496, 497, 497, 497, 498,
            498, 498, 499, 499, 499,
            499, 500, 500, 500, 501,
            501, 502, 502, 502, 503,
            503, 503, 504, 504, 504,
            505, 505, 506, 506, 507,
            507, 507, 508, 508, 509,
            509, 510, 510, 510, 511,
            511, 512, 512, 513, 513,
            514, 514, 515, 515, 516,
            516, 517, 517, 518, 518,
            519, 520, 520, 521, 521,
            522, 522, 523, 523, 524,
            525, 525, 526, 526, 527,
            528, 528, 529, 530, 530,
            531, 531, 532, 533, 533,
            534, 535, 535, 536, 537,
            537, 538, 539, 540, 540,
            541, 542, 542, 543, 544,
            545, 545, 546, 547, 548,
            548, 549, 550, 551, 551,
            552, 553, 554, 555, 555,
            556, 557, 558, 559, 560,
            560, 561, 562, 563, 564,
            565, 566, 567, 567, 568,
            569, 570, 571, 572, 573,
            574, 575, 576, 577, 577,
            578, 579, 580, 581, 582,
            583, 584, 585, 586, 587,
            588, 589, 590, 591, 592,
            593, 594, 595, 596, 598,
            599, 600, 601, 602, 603,
            604, 605, 606, 607, 608,
            610, 611, 612, 613, 614,
            615, 616, 618, 619, 620,
            621, 622, 623, 625, 626,
            627, 628, 629, 631, 632,
            633, 634, 636, 637, 638,
            639, 641, 642, 643, 644,
            646, 647, 648, 650, 651,
            652, 654, 655, 656, 658,
            659, 660, 662, 663, 665,
            666, 667, 669, 670, 672,
            673, 674, 676, 677, 679,
            680, 682, 683, 685, 686,
            687, 689, 690, 692, 693,
            695, 697, 698, 700, 701,
            703, 704, 706, 707, 709,
            710, 712, 714, 715, 717,
            719, 720, 722, 723, 725,
            727, 728, 730, 732, 733,
            735, 737, 738, 740, 742,
            744, 745, 747, 749, 750,
            752, 754, 756, 758, 759,
            761, 763, 765, 767, 768,
            770, 772, 774, 776, 778,
            779, 781, 783, 785, 787,
            789, 791, 793, 795, 796,
            798, 800, 802, 804, 806,
            808, 810, 812, 814, 816,
            818, 820, 822, 824, 826,
            828, 830, 832, 835, 837,
            839, 841, 843, 845, 847,
            849, 851, 854, 856, 858,
            860, 862, 864, 867, 869,
            871, 873, 875, 878, 880,
            882, 884, 887, 889, 891,
            894, 896, 898, 900, 903,
            905, 907, 910, 912, 915,
            917, 919, 922, 924, 927,
            929, 931, 934, 936, 939,
            941, 944, 946, 949, 951,
            954, 956, 959, 961, 964,
            966, 969, 971, 974, 977,
            979, 982, 984, 987, 990,
            992, 995, 998, 1000, 1003,
            1006, 1008, 1011, 1014, 1017,
            1019, 1022, 1025, 1028, 1030,
            1033, 1036, 1039, 1042, 1044,
            1047, 1050, 1053, 1056, 1059,
            1062, 1065, 1067, 1070, 1073,
            1076, 1079, 1082, 1085, 1088,
            1091, 1094, 1097, 1100, 1103,
            1106, 1109, 1112, 1115, 1118,
            1122, 1125, 1128, 1131, 1134,
            1137, 1140, 1143, 1147, 1150,
            1153, 1156, 1159, 1163, 1166,
            1169, 1172, 1176, 1179, 1182,
            1186, 1189, 1192, 1196, 1199,
            1202, 1206, 1209, 1212, 1216,
            1219, 1223, 1226, 1230, 1233,
            1237, 1240, 1244, 1247, 1251,
            1254, 1258, 1261, 1265, 1268,
            1272, 1276, 1279, 1283, 1287,
            1290, 1294, 1298, 1301, 1305,
            1309, 1312, 1316, 1320, 1324,
            1327, 1331, 1335, 1339, 1343,
            1347, 1350, 1354, 1358, 1362,
            1366, 1370, 1374, 1378, 1382,
            1386, 1390, 1394, 1398, 1402,
            1406, 1410, 1414, 1418, 1422,
            1426, 1430, 1434, 1439, 1443,
            1447, 1451, 1455, 1459, 1464,
            1468, 1472, 1476, 1481, 1485,
            1489, 1494, 1498, 1502, 1507,
            1511, 1516, 1520, 1524, 1529,
            1533, 1538, 1542, 1547, 1551,
            1556, 1560, 1565, 1569, 1574,
            1579, 1583, 1588, 1592, 1597,
            1602, 1606, 1611, 1616, 1621,
            1625, 1630, 1635, 1640, 1645,
            1649, 1654, 1659, 1664, 1669,
            1674, 1679, 1684, 1689, 1693,
            1698, 1703, 1708, 1714, 1719,
            1724, 1729, 1734, 1739, 1744,
            1749, 1754, 1760, 1765, 1770,
            1775, 1780, 1786, 1791, 1796,
            1802, 1807, 1812, 1818, 1823,
            1828, 1834, 1839, 1845, 1850,
            1856, 1861, 1867, 1872, 1878,
            1883, 1889, 1894, 1900, 1906,
            1911, 1917, 1923, 1929, 1934,
            1940, 1946, 1952, 1957, 1963,
            1969, 1975, 1981, 1987, 1993,
            1999, 2004, 2010, 2016, 2022,
            2028, 2035, 2041, 2047, 2053,
            2059, 2065, 2071, 2077, 2084,
            2090, 2096, 2102, 2109, 2115,
            2121, 2128, 2134, 2140, 2147,
            2153, 2160, 2166, 2173, 2179,
            2186, 2192, 2199, 2205, 2212,
            2219, 2225, 2232, 2239, 2245,
            2252, 2259, 2266, 2272, 2279,
            2286, 2293, 2300, 2307, 2314,
            2321, 2328, 2335, 2342, 2349,
            2356, 2363, 2370, 2377, 2384,
            2391, 2398, 2406, 2413, 2420,
            2427, 2435, 2442, 2449, 2457,
            2464, 2472, 2479, 2487, 2494,
            2502, 2509, 2517, 2524, 2532,
            2539, 2547, 2555, 2563, 2570,
            2578, 2586, 2594, 2601, 2609,
            2617, 2625, 2633, 2641, 2649,
            2657, 2665, 2673, 2681, 2689,
            2697, 2705, 2714, 2722, 2730,
            2738, 2747, 2755, 2763, 2772,
            2780, 2788, 2797, 2805, 2814,
            2822, 2831, 2839, 2848, 2857,
            2865, 2874, 2883, 2891, 2900,
            2909, 2918, 2927, 2935, 2944,
            2953, 2962, 2971, 2980, 2989,
            2998, 3007, 3016, 3026, 3035,
            3044, 3053, 3062, 3072, 3081,
            3090, 3100, 3109, 3119, 3128,
            3138, 3147, 3157, 3166, 3176,
            3186, 3195, 3205, 3215, 3224,
            3234, 3244, 3254, 3264, 3274,
            3284, 3294, 3304, 3314, 3324,
            3334, 3344, 3354, 3364, 3375,
            3385, 3395, 3405, 3416, 3426,
            3437, 3447, 3458, 3468, 3479,
            3489, 3500, 3510, 3521, 3532,
            3543, 3553, 3564, 3575, 3586,
            3597, 3608, 3619, 3630, 3641,
            3652, 3663, 3674, 3685, 3697,
            3708, 3719, 3730, 3742, 3753,
            3765, 3776, 3788, 3799, 3811,
            3822, 3834, 3846, 3857, 3869,
            3881, 3893, 3905, 3917, 3929,
            3941, 3953, 3965, 3977, 3989,
            4001, 4013, 4025, 4038, 4050,
            4062, 4075, 4087, 4100, 4112,
            4125, 4137, 4150, 4163, 4175,
            4188, 4201, 4214, 4226, 4239,
            4252, 4265, 4278, 4291, 4304,
            4318, 4331, 4344, 4357, 4371,
            4384, 4397, 4411, 4424, 4438,
            4451, 4465, 4479, 4492, 4506,
            4520, 4533, 4547, 4561, 4575,
            4589, 4603, 4617, 4631, 4645,
            4660, 4674, 4688, 4703, 4717,
            4731, 4746, 4760, 4775, 4789,
            4804, 4819, 4833, 4848, 4863,
            4878, 4893, 4908, 4923, 4938,
            4953, 4968, 4983, 4999, 5014,
            5029, 5045, 5060, 5075, 5091,
            5107, 5122, 5138, 5154, 5169,
            5185, 5201, 5217, 5233, 5249,
            5265, 5281, 5297, 5313, 5330,
            5346, 5362, 5379, 5395, 5412,
            5428, 5445, 5462, 5478, 5495,
            5512, 5529, 5546, 5563, 5580,
            5597, 5614, 5631, 5648, 5666,
            5683, 5700, 5718, 5735, 5753,
            5770, 5788, 5806, 5824, 5841,
            5859, 5877, 5895, 5913, 5931,
            5950, 5968, 5986, 6004, 6023,
            6041, 6060, 6078, 6097, 6116,
            6134, 6153, 6172, 6191, 6210,
            6229, 6248, 6267, 6286, 6305,
            6325, 6344, 6364, 6383, 6403,
            6422, 6442, 6462, 6481, 6501,
            6521, 6541, 6561, 6581, 6602,
            6622, 6642, 6662, 6683, 6703,
            6724, 6744, 6765, 6786, 6807,
            6828, 6848, 6869, 6891, 6912,
            6933, 6954, 6975, 6997, 7018,
            7040, 7061, 7083, 7105, 7126,
            7148, 7170, 7192, 7214, 7236,
            7259, 7281, 7303, 7325, 7348,
            7370, 7393, 7416, 7438, 7461,
            7484, 7507, 7530, 7553, 7576,
            7600, 7623, 7646, 7670, 7693,
            7717, 7741, 7764, 7788, 7812,
            7836, 7860, 7884, 7908, 7932,
            7957, 7981, 8006, 8030, 8055,
            8080, 8104, 8129, 8154, 8179,
            8204, 8229, 8255, 8280, 8305,
            8331, 8356, 8382, 8408, 8434,
            8459, 8485, 8511, 8537, 8564,
            8590, 8616, 8643, 8669, 8696,
            8722, 8749, 8776, 8803, 8830,
            8857, 8884, 8912, 8939, 8966,
            8994, 9021, 9049, 9077, 9105,
            9133, 9161, 9189, 9217, 9245,
            9274, 9302, 9331, 9359, 9388,
            9417, 9446, 9475, 9504, 9533,
            9562, 9591, 9621, 9650, 9680,
            9710, 9740, 9769, 9799, 9830,
            9860, 9890, 9920, 9951, 9981,
            10012, 10043, 10073, 10104, 10135,
            10166, 10198, 10229, 10260, 10292,
            10323, 10355, 10387, 10419, 10451,
            10483, 10515, 10547, 10580, 10612,
            10645, 10677, 10710, 10743, 10776,
            10809, 10842, 10876, 10909, 10942,
            10976, 11010, 11044, 11077, 11111,
            11146, 11180, 11214, 11248, 11283,
            11318, 11352, 11387, 11422, 11457,
            11492, 11528, 11563, 11599, 11634,
            11670, 11706, 11742, 11778, 11814,
            11850, 11887, 11923, 11960, 11996,
            12033, 12070, 12107, 12144, 12182,
            12219, 12257, 12294, 12332, 12370,
            12408, 12446, 12484, 12522, 12561,
            12599, 12638, 12677, 12716, 12755,
            12794, 12833, 12873, 12912, 12952,
            12992, 13032, 13072, 13112, 13152,
            13192, 13233, 13274, 13314, 13355,
            13396, 13437, 13479, 13520, 13561,
            13603, 13645, 13687, 13729, 13771,
            13813, 13856, 13898, 13941, 13984,
            14027, 14070, 14113, 14156, 14200,
            14243, 14287, 14331, 14375, 14419,
            14463, 14508, 14552, 14597, 14642,
            14687, 14732, 14777, 14823, 14868,
            14914, 14960, 15005, 15052, 15098,
            15144, 15191, 15237, 15284, 15331,
            15378, 15425, 15473, 15520, 15568,
            15616, 15664, 15712, 15760, 15808,
            15857, 15906, 15955, 16004, 16053,
            16102, 16151, 16201, 16251, 16301,
            16351, 16401, 16451, 16502, 16553,
            16603, 16654, 16706, 16757, 16808,
            16860, 16912, 16964, 17016, 17068,
            17121, 17173, 17226, 17279, 17332,
            17385, 17438, 17492, 17546, 17600,
            17654, 17708, 17762, 17817, 17872,
            17926, 17982, 18037, 18092, 18148,
            18203, 18259, 18315, 18372, 18428,
            18485, 18542, 18598, 18656, 18713,
            18770, 18828, 18886, 18944, 19002,
            19060, 19119, 19178, 19237, 19296,
            19355, 19414, 19474, 19534, 19594,
            19654, 19714, 19775, 19836, 19897,
            19958, 20019, 20081, 20142, 20204,
            20266, 20328, 20391, 20454, 20516,
            20579, 20643, 20706, 20770, 20833,
            20897, 20962, 21026, 21091, 21155,
            21220, 21286, 21351, 21417, 21482,
            21548, 21615, 21681, 21748, 21814,
            21881, 21949, 22016, 22084, 22151,
            22220, 22288, 22356, 22425, 22494,
            22563, 22632, 22702, 22771, 22841,
            22912, 22982, 23053, 23123, 23194,
            23266, 23337, 23409, 23481, 23553,
            23625, 23698, 23771, 23844, 23917,
            23990, 24064, 24138, 24212, 24287,
            24361, 24436, 24511, 24586, 24662,
            24738, 24814, 24890, 24966, 25043,
            25120, 25197, 25275, 25352, 25430,
            25508, 25587, 25665, 25744, 25823,
            25902, 25982, 26062, 26142, 26222,
            26303, 26384, 26465, 26546, 26627,
            26709, 26791, 26874, 26956, 27039,
            27122, 27205, 27289, 27373, 27457,
            27541, 27626, 27711, 27796, 27881,
            27967, 28053, 28139, 28226, 28312,
            28399, 28486, 28574, 28662, 28750,
            28838, 28927, 29016, 29105, 29194,
            29284, 29374, 29464, 29555, 29645,
            29736, 29828, 29919, 30011, 30104,
            30196, 30289, 30382, 30475, 30569,
            30663, 30757, 30851, 30946, 31041,
            31137, 31232, 31328, 31425, 31521,
            31618, 31715, 31813, 31910, 32008,
            32107, 32205, 32304, 32403, 32503,
            32603, 32703, 32804, 32904, 33005,
            33107, 33209, 33311, 33413, 33516,
            33619, 33722, 33825, 33929, 34034,
            34138, 34243, 34348, 34454, 34560,
            34666, 34772, 34879, 34986, 35094,
            35202, 35310, 35418, 35527, 35636,
            35746, 35856, 35966, 36076, 36187,
            36298, 36410, 36522, 36634, 36746,
            36859, 36973, 37086, 37200, 37314,
            37429, 37544, 37659, 37775, 37891,
            38008, 38124, 38241, 38359, 38477,
            38595, 38714, 38833, 38952, 39072,
            39192, 39312, 39433, 39554, 39675,
            39797, 39920, 40042, 40165, 40289,
            40413, 40537, 40661, 40786, 40911,
            41037, 41163, 41290, 41417, 41544,
            41671, 41800, 41928, 42057, 42186,
            42316, 42446, 42576, 42707, 42838,
            42970, 43102, 43234, 43367, 43500,
            43634, 43768, 43902, 44037, 44173,
            44308, 44444, 44581, 44718, 44855,
            44993, 45131, 45270, 45409, 45549,
            45689, 45829, 45970, 46111, 46253,
            46395, 46537, 46680, 46824, 46968,
            47112, 47257, 47402, 47548, 47694,
            47840, 47987, 48135, 48283, 48431,
            48580, 48729, 48879, 49029, 49180,
            49331, 49482, 49634, 49787, 49940,
            50093, 50247, 50401, 50556, 50712,
            50867, 51024, 51181, 51338, 51495,
            51654, 51812, 51972, 52131, 52291,
            52452, 52613, 52775, 52937, 53100,
            53263, 53427, 53591, 53755, 53921,
            54086, 54252, 54419, 54586, 54754,
            54922, 55091, 55260, 55430, 55600,
            55771, 55943, 56114, 56287, 56460,
            56633, 56807, 56982, 57157, 57333,
            57509, 57685, 57863, 58040, 58219,
            58398, 58577, 58757, 58938, 59119,
            59300, 59483, 59665, 59849, 60033,
            60217, 60402, 60588, 60774, 60960,
            61148, 61336, 61524, 61713, 61903,
            62093, 62284, 62475, 62667, 62860,
            63053, 63247, 63441, 63636, 63831,
            64027, 64224, 64422, 64619, 64818,
            65017, 65217, 65417, 65618, 65820,
            66022, 66225, 66429, 66633, 66837,
            67043, 67249, 67455, 67663, 67870,
            68079, 68288, 68498, 68708, 68920,
            69131, 69344, 69557, 69771, 69985,
            70200, 70416, 70632, 70849, 71067,
            71285, 71504, 71724, 71944, 72165,
            72387, 72609, 72833, 73056, 73281,
            73506, 73732, 73958, 74186, 74414,
            74642, 74872, 75102, 75332, 75564,
            75796, 76029, 76262, 76497, 76732,
            76968, 77204, 77441, 77679, 77918,
            78157, 78398, 78638, 78880, 79122,
            79366, 79609, 79854, 80099, 80345,
            80592, 80840, 81088, 81338, 81587,
            81838, 82090, 82342, 82595, 82849,
            83103, 83358, 83615, 83872, 84129,
            84388, 84647, 84907, 85168, 85430,
            85692, 85955, 86220, 86485, 86750,
            87017, 87284, 87552, 87821, 88091,
            88362, 88633, 88906, 89179, 89453,
            89728, 90003, 90280, 90557, 90836,
            91115, 91395, 91676, 91957, 92240,
            92523, 92807, 93093, 93379, 93666,
            93953, 94242, 94532, 94822, 95113,
            95406, 95699, 95993, 96288, 96584,
            96881, 97178, 97477, 97776, 98077,
            98378, 98680, 98984, 99288, 99593,
            99899, 100206, 100514, 100822, 101132,
            101443, 101755, 102067, 102381, 102696,
            103011, 103328, 103645, 103964, 104283,
            104603, 104925, 105247, 105571, 105895,
            106220, 106547, 106874, 107203, 107532,
            107862, 108194, 108526, 108860, 109194,
            109530, 109866, 110204, 110542, 110882,
            111223, 111565, 111907, 112251, 112596,
            112942, 113289, 113637, 113986, 114337,
            114688, 115040, 115394, 115748, 116104,
            116461, 116819, 117178, 117538, 117899,
            118261, 118624, 118989, 119354, 119721,
            120089, 120458, 120828, 121199, 121572,
            121945, 122320, 122696, 123073, 123451,
            123830, 124211, 124593, 124975, 125359,
            125745, 126131, 126518, 126907, 127297,
            127688, 128081, 128474, 128869, 129265,
            129662, 130061, 130260
         ) ),
        max_error = cms.double(0.6152529479288091),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut2 = cms.PSet(
        lut = cms.vint32( (
            256, 256, 257, 258, 259,
            260, 260, 261, 262, 263,
            264, 264, 265, 266, 267,
            268, 268, 269, 270, 271,
            272, 273, 273, 274, 275,
            276, 277, 278, 279, 279,
            280, 281, 282, 283, 284,
            285, 285, 286, 287, 288,
            289, 290, 291, 292, 293,
            293, 294, 295, 296, 297,
            298, 299, 300, 301, 302,
            303, 303, 304, 305, 306,
            307, 308, 309, 310, 311,
            312, 313, 314, 315, 316,
            317, 318, 319, 320, 321,
            322, 323, 324, 325, 326,
            327, 328, 329, 330, 331,
            332, 333, 334, 335, 336,
            337, 338, 339, 340, 341,
            342, 343, 344, 345, 346,
            347, 348, 349, 351, 352,
            353, 354, 355, 356, 357,
            358, 359, 360, 361, 363,
            364, 365, 366, 367, 368,
            369, 370, 372, 373, 374,
            375, 376, 377, 379, 380,
            381, 382, 383, 384, 386,
            387, 388, 389, 390, 392,
            393, 394, 395, 396, 398,
            399, 400, 401, 402, 404,
            405, 406, 407, 409, 410,
            411, 412, 414, 415, 416,
            418, 419, 420, 421, 423,
            424, 425, 427, 428, 429,
            431, 432, 433, 435, 436,
            437, 439, 440, 441, 443,
            444, 445, 447, 448, 449,
            451, 452, 454, 455, 456,
            458, 459, 461, 462, 463,
            465, 466, 468, 469, 471,
            472, 474, 475, 476, 478,
            479, 481, 482, 484, 485,
            487, 488, 490, 491, 493,
            494, 496, 497, 499, 500,
            502, 503, 505, 507, 508,
            510, 511, 513, 514, 516,
            518, 519, 521, 522, 524,
            526, 527, 529, 530, 532,
            534, 535, 537, 539, 540,
            542, 544, 545, 547, 549,
            550, 552, 554, 555, 557,
            559, 561, 562, 564, 566,
            567, 569, 571, 573, 575,
            576, 578, 580, 582, 583,
            585, 587, 589, 591, 592,
            594, 596, 598, 600, 602,
            603, 605, 607, 609, 611,
            613, 615, 617, 618, 620,
            622, 624, 626, 628, 630,
            632, 634, 636, 638, 640,
            642, 644, 646, 648, 650,
            652, 654, 656, 658, 660,
            662, 664, 666, 668, 670,
            672, 674, 676, 678, 680,
            682, 684, 686, 688, 691,
            693, 695, 697, 699, 701,
            703, 706, 708, 710, 712,
            714, 717, 719, 721, 723,
            725, 728, 730, 732, 734,
            737, 739, 741, 743, 746,
            748, 750, 753, 755, 757,
            760, 762, 764, 767, 769,
            771, 774, 776, 778, 781,
            783, 786, 788, 790, 793,
            795, 798, 800, 803, 805,
            808, 810, 813, 815, 818,
            820, 823, 825, 828, 830,
            833, 835, 838, 840, 843,
            846, 848, 851, 853, 856,
            859, 861, 864, 867, 869,
            872, 875, 877, 880, 883,
            885, 888, 891, 894, 896,
            899, 902, 905, 907, 910,
            913, 916, 919, 921, 924,
            927, 930, 933, 936, 939,
            941, 944, 947, 950, 953,
            956, 959, 962, 965, 968,
            971, 974, 977, 980, 983,
            986, 989, 992, 995, 998,
            1001, 1004, 1007, 1010, 1013,
            1017, 1020, 1023, 1026, 1029,
            1032, 1035, 1039, 1042, 1045,
            1048, 1051, 1055, 1058, 1061,
            1064, 1068, 1071, 1074, 1078,
            1081, 1084, 1088, 1091, 1094,
            1098, 1101, 1104, 1108, 1111,
            1115, 1118, 1121, 1125, 1128,
            1132, 1135, 1139, 1142, 1146,
            1149, 1153, 1156, 1160, 1163,
            1167, 1171, 1174, 1178, 1181,
            1185, 1189, 1192, 1196, 1200,
            1203, 1207, 1211, 1214, 1218,
            1222, 1226, 1229, 1233, 1237,
            1241, 1245, 1249, 1252, 1256,
            1260, 1264, 1268, 1272, 1276,
            1280, 1283, 1287, 1291, 1295,
            1299, 1303, 1307, 1311, 1315,
            1319, 1323, 1328, 1332, 1336,
            1340, 1344, 1348, 1352, 1356,
            1360, 1365, 1369, 1373, 1377,
            1382, 1386, 1390, 1394, 1399,
            1403, 1407, 1412, 1416, 1420,
            1425, 1429, 1433, 1438, 1442,
            1447, 1451, 1455, 1460, 1464,
            1469, 1473, 1478, 1483, 1487,
            1492, 1496, 1501, 1505, 1510,
            1515, 1519, 1524, 1529, 1533,
            1538, 1543, 1548, 1552, 1557,
            1562, 1567, 1572, 1576, 1581,
            1586, 1591, 1596, 1601, 1606,
            1611, 1616, 1620, 1625, 1630,
            1635, 1640, 1646, 1651, 1656,
            1661, 1666, 1671, 1676, 1681,
            1686, 1692, 1697, 1702, 1707,
            1712, 1718, 1723, 1728, 1734,
            1739, 1744, 1750, 1755, 1760,
            1766, 1771, 1777, 1782, 1788,
            1793, 1799, 1804, 1810, 1815,
            1821, 1826, 1832, 1838, 1843,
            1849, 1855, 1860, 1866, 1872,
            1878, 1883, 1889, 1895, 1901,
            1907, 1912, 1918, 1924, 1930,
            1936, 1942, 1948, 1954, 1960,
            1966, 1972, 1978, 1984, 1990,
            1996, 2003, 2009, 2015, 2021,
            2027, 2033, 2040, 2046, 2052,
            2059, 2065, 2071, 2078, 2084,
            2090, 2097, 2103, 2110, 2116,
            2123, 2129, 2136, 2142, 2149,
            2156, 2162, 2169, 2175, 2182,
            2189, 2196, 2202, 2209, 2216,
            2223, 2230, 2236, 2243, 2250,
            2257, 2264, 2271, 2278, 2285,
            2292, 2299, 2306, 2313, 2320,
            2327, 2335, 2342, 2349, 2356,
            2363, 2371, 2378, 2385, 2393,
            2400, 2407, 2415, 2422, 2430,
            2437, 2444, 2452, 2460, 2467,
            2475, 2482, 2490, 2498, 2505,
            2513, 2521, 2528, 2536, 2544,
            2552, 2560, 2567, 2575, 2583,
            2591, 2599, 2607, 2615, 2623,
            2631, 2639, 2647, 2656, 2664,
            2672, 2680, 2688, 2697, 2705,
            2713, 2722, 2730, 2738, 2747,
            2755, 2764, 2772, 2781, 2789,
            2798, 2806, 2815, 2824, 2832,
            2841, 2850, 2858, 2867, 2876,
            2885, 2894, 2903, 2912, 2921,
            2930, 2939, 2948, 2957, 2966,
            2975, 2984, 2993, 3002, 3012,
            3021, 3030, 3039, 3049, 3058,
            3067, 3077, 3086, 3096, 3105,
            3115, 3124, 3134, 3144, 3153,
            3163, 3173, 3183, 3192, 3202,
            3212, 3222, 3232, 3242, 3252,
            3262, 3272, 3282, 3292, 3302,
            3312, 3322, 3332, 3343, 3353,
            3363, 3374, 3384, 3394, 3405,
            3415, 3426, 3436, 3447, 3457,
            3468, 3479, 3489, 3500, 3511,
            3522, 3532, 3543, 3554, 3565,
            3576, 3587, 3598, 3609, 3620,
            3631, 3642, 3654, 3665, 3676,
            3687, 3699, 3710, 3722, 3733,
            3744, 3756, 3767, 3779, 3791,
            3802, 3814, 3826, 3837, 3849,
            3861, 3873, 3885, 3897, 3909,
            3921, 3933, 3945, 3957, 3969,
            3981, 3994, 4006, 4018, 4031,
            4043, 4055, 4068, 4080, 4093,
            4105, 4118, 4131, 4143, 4156,
            4169, 4182, 4195, 4207, 4220,
            4233, 4246, 4259, 4272, 4286,
            4299, 4312, 4325, 4339, 4352,
            4365, 4379, 4392, 4406, 4419,
            4433, 4446, 4460, 4474, 4487,
            4501, 4515, 4529, 4543, 4557,
            4571, 4585, 4599, 4613, 4627,
            4641, 4656, 4670, 4684, 4699,
            4713, 4728, 4742, 4757, 4771,
            4786, 4801, 4816, 4830, 4845,
            4860, 4875, 4890, 4905, 4920,
            4935, 4950, 4966, 4981, 4996,
            5011, 5027, 5042, 5058, 5073,
            5089, 5105, 5120, 5136, 5152,
            5168, 5183, 5199, 5215, 5231,
            5247, 5264, 5280, 5296, 5312,
            5329, 5345, 5361, 5378, 5394,
            5411, 5428, 5444, 5461, 5478,
            5495, 5512, 5528, 5545, 5562,
            5580, 5597, 5614, 5631, 5648,
            5666, 5683, 5701, 5718, 5736,
            5753, 5771, 5789, 5807, 5824,
            5842, 5860, 5878, 5896, 5914,
            5933, 5951, 5969, 5987, 6006,
            6024, 6043, 6061, 6080, 6099,
            6117, 6136, 6155, 6174, 6193,
            6212, 6231, 6250, 6269, 6289,
            6308, 6327, 6347, 6366, 6386,
            6406, 6425, 6445, 6465, 6485,
            6505, 6525, 6545, 6565, 6585,
            6605, 6625, 6646, 6666, 6687,
            6707, 6728, 6749, 6769, 6790,
            6811, 6832, 6853, 6874, 6895,
            6916, 6937, 6959, 6980, 7002,
            7023, 7045, 7066, 7088, 7110,
            7132, 7154, 7176, 7198, 7220,
            7242, 7264, 7286, 7309, 7331,
            7354, 7376, 7399, 7422, 7445,
            7468, 7490, 7513, 7537, 7560,
            7583, 7606, 7630, 7653, 7677,
            7700, 7724, 7748, 7771, 7795,
            7819, 7843, 7867, 7892, 7916,
            7940, 7964, 7989, 8014, 8038,
            8063, 8088, 8112, 8137, 8162,
            8187, 8213, 8238, 8263, 8289,
            8314, 8340, 8365, 8391, 8417,
            8443, 8468, 8495, 8521, 8547,
            8573, 8599, 8626, 8652, 8679,
            8706, 8732, 8759, 8786, 8813,
            8840, 8867, 8895, 8922, 8949,
            8977, 9004, 9032, 9060, 9088,
            9116, 9144, 9172, 9200, 9228,
            9256, 9285, 9313, 9342, 9371,
            9400, 9428, 9457, 9486, 9516,
            9545, 9574, 9604, 9633, 9663,
            9692, 9722, 9752, 9782, 9812,
            9842, 9872, 9903, 9933, 9964,
            9994, 10025, 10056, 10087, 10118,
            10149, 10180, 10211, 10243, 10274,
            10306, 10337, 10369, 10401, 10433,
            10465, 10497, 10529, 10562, 10594,
            10627, 10659, 10692, 10725, 10758,
            10791, 10824, 10858, 10891, 10924,
            10958, 10992, 11025, 11059, 11093,
            11127, 11161, 11196, 11230, 11265,
            11299, 11334, 11369, 11404, 11439,
            11474, 11509, 11545, 11580, 11616,
            11651, 11687, 11723, 11759, 11795,
            11831, 11868, 11904, 11941, 11978,
            12014, 12051, 12088, 12125, 12163,
            12200, 12238, 12275, 12313, 12351,
            12389, 12427, 12465, 12503, 12542,
            12580, 12619, 12658, 12696, 12735,
            12775, 12814, 12853, 12893, 12932,
            12972, 13012, 13052, 13092, 13132,
            13173, 13213, 13254, 13294, 13335,
            13376, 13417, 13459, 13500, 13541,
            13583, 13625, 13667, 13709, 13751,
            13793, 13835, 13878, 13920, 13963,
            14006, 14049, 14092, 14136, 14179,
            14223, 14266, 14310, 14354, 14398,
            14443, 14487, 14531, 14576, 14621,
            14666, 14711, 14756, 14801, 14847,
            14892, 14938, 14984, 15030, 15076,
            15123, 15169, 15216, 15263, 15309,
            15356, 15404, 15451, 15498, 15546,
            15594, 15642, 15690, 15738, 15786,
            15835, 15884, 15932, 15981, 16030,
            16080, 16129, 16179, 16228, 16278,
            16328, 16378, 16429, 16479, 16530,
            16581, 16632, 16683, 16734, 16785,
            16837, 16889, 16941, 16993, 17045,
            17097, 17150, 17202, 17255, 17308,
            17361, 17415, 17468, 17522, 17576,
            17630, 17684, 17738, 17793, 17848,
            17902, 17957, 18013, 18068, 18123,
            18179, 18235, 18291, 18347, 18404,
            18460, 18517, 18574, 18631, 18688,
            18746, 18803, 18861, 18919, 18977,
            19035, 19094, 19152, 19211, 19270,
            19330, 19389, 19448, 19508, 19568,
            19628, 19689, 19749, 19810, 19871,
            19932, 19993, 20054, 20116, 20178,
            20240, 20302, 20364, 20427, 20490,
            20553, 20616, 20679, 20743, 20806,
            20870, 20935, 20999, 21063, 21128,
            21193, 21258, 21323, 21389, 21455,
            21521, 21587, 21653, 21720, 21786,
            21853, 21920, 21988, 22055, 22123,
            22191, 22259, 22328, 22396, 22465,
            22534, 22603, 22673, 22742, 22812,
            22882, 22953, 23023, 23094, 23165,
            23236, 23308, 23379, 23451, 23523,
            23595, 23668, 23741, 23814, 23887,
            23960, 24034, 24108, 24182, 24256,
            24330, 24405, 24480, 24555, 24631,
            24707, 24783, 24859, 24935, 25012,
            25089, 25166, 25243, 25320, 25398,
            25476, 25555, 25633, 25712, 25791,
            25870, 25950, 26029, 26109, 26190,
            26270, 26351, 26432, 26513, 26594,
            26676, 26758, 26840, 26923, 27006,
            27088, 27172, 27255, 27339, 27423,
            27507, 27592, 27677, 27762, 27847,
            27932, 28018, 28104, 28191, 28277,
            28364, 28451, 28539, 28626, 28714,
            28803, 28891, 28980, 29069, 29158,
            29248, 29338, 29428, 29518, 29609,
            29700, 29791, 29883, 29975, 30067,
            30159, 30252, 30345, 30438, 30532,
            30625, 30719, 30814, 30909, 31003,
            31099, 31194, 31290, 31386, 31483,
            31579, 31677, 31774, 31871, 31969,
            32068, 32166, 32265, 32364, 32464,
            32563, 32663, 32764, 32864, 32965,
            33067, 33168, 33270, 33372, 33475,
            33578, 33681, 33785, 33888, 33992,
            34097, 34202, 34307, 34412, 34518,
            34624, 34730, 34837, 34944, 35051,
            35159, 35267, 35376, 35484, 35593,
            35703, 35812, 35922, 36033, 36144,
            36255, 36366, 36478, 36590, 36702,
            36815, 36928, 37042, 37155, 37270,
            37384, 37499, 37614, 37730, 37846,
            37962, 38079, 38196, 38313, 38431,
            38549, 38667, 38786, 38905, 39025,
            39145, 39265, 39386, 39507, 39628,
            39750, 39872, 39994, 40117, 40241,
            40364, 40488, 40613, 40737, 40863,
            40988, 41114, 41240, 41367, 41494,
            41622, 41750, 41878, 42007, 42136,
            42265, 42395, 42525, 42656, 42787,
            42919, 43050, 43183, 43315, 43448,
            43582, 43716, 43850, 43985, 44120,
            44256, 44392, 44528, 44665, 44802,
            44940, 45078, 45216, 45355, 45495,
            45634, 45775, 45915, 46056, 46198,
            46340, 46482, 46625, 46768, 46912,
            47056, 47201, 47346, 47491, 47637,
            47784, 47930, 48078, 48225, 48374,
            48522, 48671, 48821, 48971, 49121,
            49272, 49424, 49576, 49728, 49881,
            50034, 50188, 50342, 50497, 50652,
            50807, 50963, 51120, 51277, 51435,
            51593, 51751, 51910, 52070, 52230,
            52390, 52551, 52713, 52875, 53037,
            53200, 53364, 53528, 53692, 53857,
            54022, 54188, 54355, 54522, 54690,
            54858, 55026, 55195, 55365, 55535,
            55706, 55877, 56048, 56221, 56393,
            56567, 56740, 56915, 57090, 57265,
            57441, 57618, 57795, 57972, 58150,
            58329, 58508, 58688, 58868, 59049,
            59231, 59413, 59595, 59778, 59962,
            60146, 60331, 60516, 60702, 60889,
            61076, 61264, 61452, 61641, 61830,
            62020, 62211, 62402, 62594, 62786,
            62979, 63172, 63366, 63561, 63756,
            63952, 64149, 64346, 64544, 64742,
            64941, 65140, 65341, 65541, 65743,
            65945, 66147, 66351, 66555, 66759,
            66964, 67170, 67376, 67583, 67791,
            67999, 68208, 68418, 68628, 68839,
            69050, 69263, 69475, 69689, 69903,
            70118, 70333, 70549, 70766, 70984,
            71202, 71421, 71640, 71860, 72081,
            72302, 72525, 72747, 72971, 73195,
            73420, 73646, 73872, 74099, 74327,
            74555, 74784, 75014, 75244, 75476,
            75707, 75940, 76173, 76407, 76642,
            76878, 77114, 77351, 77589, 77827,
            78066, 78306, 78547, 78788, 79030,
            79273, 79516, 79761, 80006, 80252,
            80498, 80746, 80994, 81243, 81492,
            81743, 81994, 82246, 82498, 82752,
            83006, 83261, 83517, 83774, 84031,
            84289, 84548, 84808, 85069, 85330,
            85592, 85855, 86119, 86384, 86649,
            86915, 87182, 87450, 87719, 87989,
            88259, 88530, 88802, 89075, 89349,
            89623, 89899, 90175, 90452, 90730,
            91009, 91288, 91569, 91850, 92132,
            92415, 92699, 92984, 93270, 93557,
            93844, 94132, 94422, 94712, 95003,
            95295, 95587, 95881, 96176, 96471,
            96768, 97065, 97363, 97662, 97963,
            98264, 98565, 98868, 99172, 99477,
            99783, 100089, 100397, 100705, 101015,
            101325, 101636, 101949, 102262, 102576,
            102891, 103207, 103525, 103843, 104162,
            104482, 104803, 105125, 105448, 105772,
            106097, 106423, 106750, 107078, 107407,
            107737, 108068, 108400, 108733, 109067,
            109402, 109738, 110076, 110414, 110753,
            111093, 111435, 111777, 112121, 112465,
            112811, 113157, 113505, 113854, 114204,
            114555, 114907, 115260, 115614, 115969,
            116325, 116683, 117041, 117401, 117762,
            118124, 118486, 118851, 119216, 119582,
            119949, 120318, 120688, 121059, 121431,
            121804, 122178, 122553, 122930, 123308,
            123687, 124067, 124448, 124830, 125214,
            125598, 125984, 126371, 126760, 127149,
            127540, 127932, 128325, 128719, 129115,
            129511, 129909, 130309, 130709, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071
         ) ),
        max_error = cms.double(5748.616225984908),
        output_scale_factor = cms.double(0.953125),
        unused_lsbs = cms.uint32(2)
    ),
    inv_mass_checks = cms.untracked.bool(False),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    sanity_checks = cms.untracked.bool(False),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    )
)


process.DoubleTkMuon157 = cms.EDFilter("L1GTDoubleObjectCond",
    collection1 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 0.83, 1.24),
        regionsMinPt = cms.vdouble(13, 13, 13),
        tag = cms.InputTag("l1tGTProducer","GMTTkMuons")
    ),
    collection2 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        minQualityScore = cms.uint32(0),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 0.83, 1.24),
        regionsMinPt = cms.vdouble(7, 7, 7),
        tag = cms.InputTag("l1tGTProducer","GMTTkMuons")
    ),
    cos_phi_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            487, 487, 487, 487, 487,
            487, 487, 487, 487, 487,
            487, 486, 486, 486, 486,
            486, 486, 486, 485, 485,
            485, 485, 485, 485, 484,
            484, 484, 484, 484, 483,
            483, 483, 483, 483, 482,
            482, 482, 482, 481, 481,
            481, 481, 480, 480, 480,
            480, 479, 479, 479, 478,
            478, 478, 478, 477, 477,
            477, 476, 476, 476, 475,
            475, 475, 474, 474, 474,
            473, 473, 472, 472, 472,
            471, 471, 471, 470, 470,
            469, 469, 468, 468, 468,
            467, 467, 466, 466, 465,
            465, 465, 464, 464, 463,
            463, 462, 462, 461, 461,
            460, 460, 459, 459, 458,
            458, 457, 457, 456, 456,
            455, 454, 454, 453, 453,
            452, 452, 451, 451, 450,
            449, 449, 448, 448, 447,
            446, 446, 445, 445, 444,
            443, 443, 442, 441, 441,
            440, 440, 439, 438, 438,
            437, 436, 436, 435, 434,
            434, 433, 432, 431, 431,
            430, 429, 429, 428, 427,
            426, 426, 425, 424, 423,
            423, 422, 421, 420, 420,
            419, 418, 417, 417, 416,
            415, 414, 413, 413, 412,
            411, 410, 409, 409, 408,
            407, 406, 405, 405, 404,
            403, 402, 401, 400, 399,
            399, 398, 397, 396, 395,
            394, 393, 392, 392, 391,
            390, 389, 388, 387, 386,
            385, 384, 383, 382, 381,
            381, 380, 379, 378, 377,
            376, 375, 374, 373, 372,
            371, 370, 369, 368, 367,
            366, 365, 364, 363, 362,
            361, 360, 359, 358, 357,
            356, 355, 354, 353, 352,
            351, 350, 349, 348, 347,
            346, 345, 343, 342, 341,
            340, 339, 338, 337, 336,
            335, 334, 333, 332, 330,
            329, 328, 327, 326, 325,
            324, 323, 322, 320, 319,
            318, 317, 316, 315, 314,
            312, 311, 310, 309, 308,
            307, 306, 304, 303, 302,
            301, 300, 298, 297, 296,
            295, 294, 293, 291, 290,
            289, 288, 286, 285, 284,
            283, 282, 280, 279, 278,
            277, 275, 274, 273, 272,
            270, 269, 268, 267, 265,
            264, 263, 262, 260, 259,
            258, 257, 255, 254, 253,
            252, 250, 249, 248, 246,
            245, 244, 242, 241, 240,
            239, 237, 236, 235, 233,
            232, 231, 229, 228, 227,
            225, 224, 223, 221, 220,
            219, 217, 216, 215, 213,
            212, 211, 209, 208, 207,
            205, 204, 203, 201, 200,
            198, 197, 196, 194, 193,
            192, 190, 189, 187, 186,
            185, 183, 182, 181, 179,
            178, 176, 175, 174, 172,
            171, 169, 168, 167, 165,
            164, 162, 161, 159, 158,
            157, 155, 154, 152, 151,
            150, 148, 147, 145, 144,
            142, 141, 140, 138, 137,
            135, 134, 132, 131, 129,
            128, 127, 125, 124, 122,
            121, 119, 118, 116, 115,
            113, 112, 111, 109, 108,
            106, 105, 103, 102, 100,
            99, 97, 96, 94, 93,
            92, 90, 89, 87, 86,
            84, 83, 81, 80, 78,
            77, 75, 74, 72, 71,
            69, 68, 66, 65, 63,
            62, 60, 59, 58, 56,
            55, 53, 52, 50, 49,
            47, 46, 44, 43, 41,
            40, 38, 37, 35, 34,
            32, 31, 29, 28, 26,
            25, 23, 22, 20, 19,
            17, 16, 14, 13, 11,
            10, 8, 7, 5, 4,
            2, 1, -1, -2, -4,
            -5, -7, -8, -10, -11,
            -13, -14, -16, -17, -19,
            -20, -22, -23, -25, -26,
            -28, -29, -31, -32, -34,
            -35, -37, -38, -40, -41,
            -43, -44, -46, -47, -49,
            -50, -52, -53, -55, -56,
            -58, -59, -60, -62, -63,
            -65, -66, -68, -69, -71,
            -72, -74, -75, -77, -78,
            -80, -81, -83, -84, -86,
            -87, -89, -90, -92, -93,
            -94, -96, -97, -99, -100,
            -102, -103, -105, -106, -108,
            -109, -111, -112, -113, -115,
            -116, -118, -119, -121, -122,
            -124, -125, -127, -128, -129,
            -131, -132, -134, -135, -137,
            -138, -140, -141, -142, -144,
            -145, -147, -148, -150, -151,
            -152, -154, -155, -157, -158,
            -159, -161, -162, -164, -165,
            -167, -168, -169, -171, -172,
            -174, -175, -176, -178, -179,
            -181, -182, -183, -185, -186,
            -187, -189, -190, -192, -193,
            -194, -196, -197, -198, -200,
            -201, -203, -204, -205, -207,
            -208, -209, -211, -212, -213,
            -215, -216, -217, -219, -220,
            -221, -223, -224, -225, -227,
            -228, -229, -231, -232, -233,
            -235, -236, -237, -239, -240,
            -241, -242, -244, -245, -246,
            -248, -249, -250, -252, -253,
            -254, -255, -257, -258, -259,
            -260, -262, -263, -264, -265,
            -267, -268, -269, -270, -272,
            -273, -274, -275, -277, -278,
            -279, -280, -282, -283, -284,
            -285, -286, -288, -289, -290,
            -291, -293, -294, -295, -296,
            -297, -298, -300, -301, -302,
            -303, -304, -306, -307, -308,
            -309, -310, -311, -312, -314,
            -315, -316, -317, -318, -319,
            -320, -322, -323, -324, -325,
            -326, -327, -328, -329, -330,
            -332, -333, -334, -335, -336,
            -337, -338, -339, -340, -341,
            -342, -343, -345, -346, -347,
            -348, -349, -350, -351, -352,
            -353, -354, -355, -356, -357,
            -358, -359, -360, -361, -362,
            -363, -364, -365, -366, -367,
            -368, -369, -370, -371, -372,
            -373, -374, -375, -376, -377,
            -378, -379, -380, -381, -381,
            -382, -383, -384, -385, -386,
            -387, -388, -389, -390, -391,
            -392, -392, -393, -394, -395,
            -396, -397, -398, -399, -399,
            -400, -401, -402, -403, -404,
            -405, -405, -406, -407, -408,
            -409, -409, -410, -411, -412,
            -413, -413, -414, -415, -416,
            -417, -417, -418, -419, -420,
            -420, -421, -422, -423, -423,
            -424, -425, -426, -426, -427,
            -428, -429, -429, -430, -431,
            -431, -432, -433, -434, -434,
            -435, -436, -436, -437, -438,
            -438, -439, -440, -440, -441,
            -441, -442, -443, -443, -444,
            -445, -445, -446, -446, -447,
            -448, -448, -449, -449, -450,
            -451, -451, -452, -452, -453,
            -453, -454, -454, -455, -456,
            -456, -457, -457, -458, -458,
            -459, -459, -460, -460, -461,
            -461, -462, -462, -463, -463,
            -464, -464, -465, -465, -465,
            -466, -466, -467, -467, -468,
            -468, -468, -469, -469, -470,
            -470, -471, -471, -471, -472,
            -472, -472, -473, -473, -474,
            -474, -474, -475, -475, -475,
            -476, -476, -476, -477, -477,
            -477, -478, -478, -478, -478,
            -479, -479, -479, -480, -480,
            -480, -480, -481, -481, -481,
            -481, -482, -482, -482, -482,
            -483, -483, -483, -483, -483,
            -484, -484, -484, -484, -484,
            -485, -485, -485, -485, -485,
            -485, -486, -486, -486, -486,
            -486, -486, -486, -487, -487,
            -487, -487, -487, -487, -487,
            -487, -487, -487, -487, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488
         ) ),
        max_error = cms.double(0.0025338281044886835),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            489, 489, 489, 489, 489,
            489, 489, 489, 489, 489,
            489, 490, 490, 490, 490,
            490, 490, 490, 491, 491,
            491, 491, 491, 491, 492,
            492, 492, 492, 492, 493,
            493, 493, 493, 493, 494,
            494, 494, 494, 495, 495,
            495, 495, 496, 496, 496,
            496, 497, 497, 497, 498,
            498, 498, 499, 499, 499,
            499, 500, 500, 500, 501,
            501, 502, 502, 502, 503,
            503, 503, 504, 504, 504,
            505, 505, 506, 506, 507,
            507, 507, 508, 508, 509,
            509, 510, 510, 510, 511,
            511, 512, 512, 513, 513,
            514, 514, 515, 515, 516,
            516, 517, 517, 518, 518,
            519, 520, 520, 521, 521,
            522, 522, 523, 523, 524,
            525, 525, 526, 526, 527,
            528, 528, 529, 530, 530,
            531, 531, 532, 533, 533,
            534, 535, 535, 536, 537,
            537, 538, 539, 540, 540,
            541, 542, 542, 543, 544,
            545, 545, 546, 547, 548,
            548, 549, 550, 551, 551,
            552, 553, 554, 555, 555,
            556, 557, 558, 559, 560,
            560, 561, 562, 563, 564,
            565, 566, 567, 567, 568,
            569, 570, 571, 572, 573,
            574, 575, 576, 577, 577,
            578, 579, 580, 581, 582,
            583, 584, 585, 586, 587,
            588, 589, 590, 591, 592,
            593, 594, 595, 596, 598,
            599, 600, 601, 602, 603,
            604, 605, 606, 607, 608,
            610, 611, 612, 613, 614,
            615, 616, 618, 619, 620,
            621, 622, 623, 625, 626,
            627, 628, 629, 631, 632,
            633, 634, 636, 637, 638,
            639, 641, 642, 643, 644,
            646, 647, 648, 650, 651,
            652, 654, 655, 656, 658,
            659, 660, 662, 663, 665,
            666, 667, 669, 670, 672,
            673, 674, 676, 677, 679,
            680, 682, 683, 685, 686,
            687, 689, 690, 692, 693,
            695, 697, 698, 700, 701,
            703, 704, 706, 707, 709,
            710, 712, 714, 715, 717,
            719, 720, 722, 723, 725,
            727, 728, 730, 732, 733,
            735, 737, 738, 740, 742,
            744, 745, 747, 749, 750,
            752, 754, 756, 758, 759,
            761, 763, 765, 767, 768,
            770, 772, 774, 776, 778,
            779, 781, 783, 785, 787,
            789, 791, 793, 795, 796,
            798, 800, 802, 804, 806,
            808, 810, 812, 814, 816,
            818, 820, 822, 824, 826,
            828, 830, 832, 835, 837,
            839, 841, 843, 845, 847,
            849, 851, 854, 856, 858,
            860, 862, 864, 867, 869,
            871, 873, 875, 878, 880,
            882, 884, 887, 889, 891,
            894, 896, 898, 900, 903,
            905, 907, 910, 912, 915,
            917, 919, 922, 924, 927,
            929, 931, 934, 936, 939,
            941, 944, 946, 949, 951,
            954, 956, 959, 961, 964,
            966, 969, 971, 974, 977,
            979, 982, 984, 987, 990,
            992, 995, 998, 1000, 1003,
            1006, 1008, 1011, 1014, 1017,
            1019, 1022, 1025, 1028, 1030,
            1033, 1036, 1039, 1042, 1044,
            1047, 1050, 1053, 1056, 1059,
            1062, 1065, 1067, 1070, 1073,
            1076, 1079, 1082, 1085, 1088,
            1091, 1094, 1097, 1100, 1103,
            1106, 1109, 1112, 1115, 1118,
            1122, 1125, 1128, 1131, 1134,
            1137, 1140, 1143, 1147, 1150,
            1153, 1156, 1159, 1163, 1166,
            1169, 1172, 1176, 1179, 1182,
            1186, 1189, 1192, 1196, 1199,
            1202, 1206, 1209, 1212, 1216,
            1219, 1223, 1226, 1230, 1233,
            1237, 1240, 1244, 1247, 1251,
            1254, 1258, 1261, 1265, 1268,
            1272, 1276, 1279, 1283, 1287,
            1290, 1294, 1298, 1301, 1305,
            1309, 1312, 1316, 1320, 1324,
            1327, 1331, 1335, 1339, 1343,
            1347, 1350, 1354, 1358, 1362,
            1366, 1370, 1374, 1378, 1382,
            1386, 1390, 1394, 1398, 1402,
            1406, 1410, 1414, 1418, 1422,
            1426, 1430, 1434, 1439, 1443,
            1447, 1451, 1455, 1459, 1464,
            1468, 1472, 1476, 1481, 1485,
            1489, 1494, 1498, 1502, 1507,
            1511, 1516, 1520, 1524, 1529,
            1533, 1538, 1542, 1547, 1551,
            1556, 1560, 1565, 1569, 1574,
            1579, 1583, 1588, 1592, 1597,
            1602, 1606, 1611, 1616, 1621,
            1625, 1630, 1635, 1640, 1645,
            1649, 1654, 1659, 1664, 1669,
            1674, 1679, 1684, 1689, 1693,
            1698, 1703, 1708, 1714, 1719,
            1724, 1729, 1734, 1739, 1744,
            1749, 1754, 1760, 1765, 1770,
            1775, 1780, 1786, 1791, 1796,
            1802, 1807, 1812, 1818, 1823,
            1828, 1834, 1839, 1845, 1850,
            1856, 1861, 1867, 1872, 1878,
            1883, 1889, 1894, 1900, 1906,
            1911, 1917, 1923, 1929, 1934,
            1940, 1946, 1952, 1957, 1963,
            1969, 1975, 1981, 1987, 1993,
            1999, 2004, 2010, 2016, 2022,
            2028, 2035, 2041, 2047, 2053,
            2059, 2065, 2071, 2077, 2084,
            2090, 2096, 2102, 2109, 2115,
            2121, 2128, 2134, 2140, 2147,
            2153, 2160, 2166, 2173, 2179,
            2186, 2192, 2199, 2205, 2212,
            2219, 2225, 2232, 2239, 2245,
            2252, 2259, 2266, 2272, 2279,
            2286, 2293, 2300, 2307, 2314,
            2321, 2328, 2335, 2342, 2349,
            2356, 2363, 2370, 2377, 2384,
            2391, 2398, 2406, 2413, 2420,
            2427, 2435, 2442, 2449, 2457,
            2464, 2472, 2479, 2487, 2494,
            2502, 2509, 2517, 2524, 2532,
            2539, 2547, 2555, 2563, 2570,
            2578, 2586, 2594, 2601, 2609,
            2617, 2625, 2633, 2641, 2649,
            2657, 2665, 2673, 2681, 2689,
            2697, 2705, 2714, 2722, 2730,
            2738, 2747, 2755, 2763, 2772,
            2780, 2788, 2797, 2805, 2814,
            2822, 2831, 2839, 2848, 2857,
            2865, 2874, 2883, 2891, 2900,
            2909, 2918, 2927, 2935, 2944,
            2953, 2962, 2971, 2980, 2989,
            2998, 3007, 3016, 3026, 3035,
            3044, 3053, 3062, 3072, 3081,
            3090, 3100, 3109, 3119, 3128,
            3138, 3147, 3157, 3166, 3176,
            3186, 3195, 3205, 3215, 3224,
            3234, 3244, 3254, 3264, 3274,
            3284, 3294, 3304, 3314, 3324,
            3334, 3344, 3354, 3364, 3375,
            3385, 3395, 3405, 3416, 3426,
            3437, 3447, 3458, 3468, 3479,
            3489, 3500, 3510, 3521, 3532,
            3543, 3553, 3564, 3575, 3586,
            3597, 3608, 3619, 3630, 3641,
            3652, 3663, 3674, 3685, 3697,
            3708, 3719, 3730, 3742, 3753,
            3765, 3776, 3788, 3799, 3811,
            3822, 3834, 3846, 3857, 3869,
            3881, 3893, 3905, 3917, 3929,
            3941, 3953, 3965, 3977, 3989,
            4001, 4013, 4025, 4038, 4050,
            4062, 4075, 4087, 4100, 4112,
            4125, 4137, 4150, 4163, 4175,
            4188, 4201, 4214, 4226, 4239,
            4252, 4265, 4278, 4291, 4304,
            4318, 4331, 4344, 4357, 4371,
            4384, 4397, 4411, 4424, 4438,
            4451, 4465, 4479, 4492, 4506,
            4520, 4533, 4547, 4561, 4575,
            4589, 4603, 4617, 4631, 4645,
            4660, 4674, 4688, 4703, 4717,
            4731, 4746, 4760, 4775, 4789,
            4804, 4819, 4833, 4848, 4863,
            4878, 4893, 4908, 4923, 4938,
            4953, 4968, 4983, 4999, 5014,
            5029, 5045, 5060, 5075, 5091,
            5107, 5122, 5138, 5154, 5169,
            5185, 5201, 5217, 5233, 5249,
            5265, 5281, 5297, 5313, 5330,
            5346, 5362, 5379, 5395, 5412,
            5428, 5445, 5462, 5478, 5495,
            5512, 5529, 5546, 5563, 5580,
            5597, 5614, 5631, 5648, 5666,
            5683, 5700, 5718, 5735, 5753,
            5770, 5788, 5806, 5824, 5841,
            5859, 5877, 5895, 5913, 5931,
            5950, 5968, 5986, 6004, 6023,
            6041, 6060, 6078, 6097, 6116,
            6134, 6153, 6172, 6191, 6210,
            6229, 6248, 6267, 6286, 6305,
            6325, 6344, 6364, 6383, 6403,
            6422, 6442, 6462, 6481, 6501,
            6521, 6541, 6561, 6581, 6602,
            6622, 6642, 6662, 6683, 6703,
            6724, 6744, 6765, 6786, 6807,
            6828, 6848, 6869, 6891, 6912,
            6933, 6954, 6975, 6997, 7018,
            7040, 7061, 7083, 7105, 7126,
            7148, 7170, 7192, 7214, 7236,
            7259, 7281, 7303, 7325, 7348,
            7370, 7393, 7416, 7438, 7461,
            7484, 7507, 7530, 7553, 7576,
            7600, 7623, 7646, 7670, 7693,
            7717, 7741, 7764, 7788, 7812,
            7836, 7860, 7884, 7908, 7932,
            7957, 7981, 8006, 8030, 8055,
            8080, 8104, 8129, 8154, 8179,
            8204, 8229, 8255, 8280, 8305,
            8331, 8356, 8382, 8408, 8434,
            8459, 8485, 8511, 8537, 8564,
            8590, 8616, 8643, 8669, 8696,
            8722, 8749, 8776, 8803, 8830,
            8857, 8884, 8912, 8939, 8966,
            8994, 9021, 9049, 9077, 9105,
            9133, 9161, 9189, 9217, 9245,
            9274, 9302, 9331, 9359, 9388,
            9417, 9446, 9475, 9504, 9533,
            9562, 9591, 9621, 9650, 9680,
            9710, 9740, 9769, 9799, 9830,
            9860, 9890, 9920, 9951, 9981,
            10012, 10043, 10073, 10104, 10135,
            10166, 10198, 10229, 10260, 10292,
            10323, 10355, 10387, 10419, 10451,
            10483, 10515, 10547, 10580, 10612,
            10645, 10677, 10710, 10743, 10776,
            10809, 10842, 10876, 10909, 10942,
            10976, 11010, 11044, 11077, 11111,
            11146, 11180, 11214, 11248, 11283,
            11318, 11352, 11387, 11422, 11457,
            11492, 11528, 11563, 11599, 11634,
            11670, 11706, 11742, 11778, 11814,
            11850, 11887, 11923, 11960, 11996,
            12033, 12070, 12107, 12144, 12182,
            12219, 12257, 12294, 12332, 12370,
            12408, 12446, 12484, 12522, 12561,
            12599, 12638, 12677, 12716, 12755,
            12794, 12833, 12873, 12912, 12952,
            12992, 13032, 13072, 13112, 13152,
            13192, 13233, 13274, 13314, 13355,
            13396, 13437, 13479, 13520, 13561,
            13603, 13645, 13687, 13729, 13771,
            13813, 13856, 13898, 13941, 13984,
            14027, 14070, 14113, 14156, 14200,
            14243, 14287, 14331, 14375, 14419,
            14463, 14508, 14552, 14597, 14642,
            14687, 14732, 14777, 14823, 14868,
            14914, 14960, 15005, 15052, 15098,
            15144, 15191, 15237, 15284, 15331,
            15378, 15425, 15473, 15520, 15568,
            15616, 15664, 15712, 15760, 15808,
            15857, 15906, 15955, 16004, 16053,
            16102, 16151, 16201, 16251, 16301,
            16351, 16401, 16451, 16502, 16553,
            16603, 16654, 16706, 16757, 16808,
            16860, 16912, 16964, 17016, 17068,
            17121, 17173, 17226, 17279, 17332,
            17385, 17438, 17492, 17546, 17600,
            17654, 17708, 17762, 17817, 17872,
            17926, 17982, 18037, 18092, 18148,
            18203, 18259, 18315, 18372, 18428,
            18485, 18542, 18598, 18656, 18713,
            18770, 18828, 18886, 18944, 19002,
            19060, 19119, 19178, 19237, 19296,
            19355, 19414, 19474, 19534, 19594,
            19654, 19714, 19775, 19836, 19897,
            19958, 20019, 20081, 20142, 20204,
            20266, 20328, 20391, 20454, 20516,
            20579, 20643, 20706, 20770, 20833,
            20897, 20962, 21026, 21091, 21155,
            21220, 21286, 21351, 21417, 21482,
            21548, 21615, 21681, 21748, 21814,
            21881, 21949, 22016, 22084, 22151,
            22220, 22288, 22356, 22425, 22494,
            22563, 22632, 22702, 22771, 22841,
            22912, 22982, 23053, 23123, 23194,
            23266, 23337, 23409, 23481, 23553,
            23625, 23698, 23771, 23844, 23917,
            23990, 24064, 24138, 24212, 24287,
            24361, 24436, 24511, 24586, 24662,
            24738, 24814, 24890, 24966, 25043,
            25120, 25197, 25275, 25352, 25430,
            25508, 25587, 25665, 25744, 25823,
            25902, 25982, 26062, 26142, 26222,
            26303, 26384, 26465, 26546, 26627,
            26709, 26791, 26874, 26956, 27039,
            27122, 27205, 27289, 27373, 27457,
            27541, 27626, 27711, 27796, 27881,
            27967, 28053, 28139, 28226, 28312,
            28399, 28486, 28574, 28662, 28750,
            28838, 28927, 29016, 29105, 29194,
            29284, 29374, 29464, 29555, 29645,
            29736, 29828, 29919, 30011, 30104,
            30196, 30289, 30382, 30475, 30569,
            30663, 30757, 30851, 30946, 31041,
            31137, 31232, 31328, 31425, 31521,
            31618, 31715, 31813, 31910, 32008,
            32107, 32205, 32304, 32403, 32503,
            32603, 32703, 32804, 32904, 33005,
            33107, 33209, 33311, 33413, 33516,
            33619, 33722, 33825, 33929, 34034,
            34138, 34243, 34348, 34454, 34560,
            34666, 34772, 34879, 34986, 35094,
            35202, 35310, 35418, 35527, 35636,
            35746, 35856, 35966, 36076, 36187,
            36298, 36410, 36522, 36634, 36746,
            36859, 36973, 37086, 37200, 37314,
            37429, 37544, 37659, 37775, 37891,
            38008, 38124, 38241, 38359, 38477,
            38595, 38714, 38833, 38952, 39072,
            39192, 39312, 39433, 39554, 39675,
            39797, 39920, 40042, 40165, 40289,
            40413, 40537, 40661, 40786, 40911,
            41037, 41163, 41290, 41417, 41544,
            41671, 41800, 41928, 42057, 42186,
            42316, 42446, 42576, 42707, 42838,
            42970, 43102, 43234, 43367, 43500,
            43634, 43768, 43902, 44037, 44173,
            44308, 44444, 44581, 44718, 44855,
            44993, 45131, 45270, 45409, 45549,
            45689, 45829, 45970, 46111, 46253,
            46395, 46537, 46680, 46824, 46968,
            47112, 47257, 47402, 47548, 47694,
            47840, 47987, 48135, 48283, 48431,
            48580, 48729, 48879, 49029, 49180,
            49331, 49482, 49634, 49787, 49940,
            50093, 50247, 50401, 50556, 50712,
            50867, 51024, 51181, 51338, 51495,
            51654, 51812, 51972, 52131, 52291,
            52452, 52613, 52775, 52937, 53100,
            53263, 53427, 53591, 53755, 53921,
            54086, 54252, 54419, 54586, 54754,
            54922, 55091, 55260, 55430, 55600,
            55771, 55943, 56114, 56287, 56460,
            56633, 56807, 56982, 57157, 57333,
            57509, 57685, 57863, 58040, 58219,
            58398, 58577, 58757, 58938, 59119,
            59300, 59483, 59665, 59849, 60033,
            60217, 60402, 60588, 60774, 60960,
            61148, 61336, 61524, 61713, 61903,
            62093, 62284, 62475, 62667, 62860,
            63053, 63247, 63441, 63636, 63831,
            64027, 64224, 64422, 64619, 64818,
            65017, 65217, 65417, 65618, 65820,
            66022, 66225, 66429, 66633, 66837,
            67043, 67249, 67455, 67663, 67870,
            68079, 68288, 68498, 68708, 68920,
            69131, 69344, 69557, 69771, 69985,
            70200, 70416, 70632, 70849, 71067,
            71285, 71504, 71724, 71944, 72165,
            72387, 72609, 72833, 73056, 73281,
            73506, 73732, 73958, 74186, 74414,
            74642, 74872, 75102, 75332, 75564,
            75796, 76029, 76262, 76497, 76732,
            76968, 77204, 77441, 77679, 77918,
            78157, 78398, 78638, 78880, 79122,
            79366, 79609, 79854, 80099, 80345,
            80592, 80840, 81088, 81338, 81587,
            81838, 82090, 82342, 82595, 82849,
            83103, 83358, 83615, 83872, 84129,
            84388, 84647, 84907, 85168, 85430,
            85692, 85955, 86220, 86485, 86750,
            87017, 87284, 87552, 87821, 88091,
            88362, 88633, 88906, 89179, 89453,
            89728, 90003, 90280, 90557, 90836,
            91115, 91395, 91676, 91957, 92240,
            92523, 92807, 93093, 93379, 93666,
            93953, 94242, 94532, 94822, 95113,
            95406, 95699, 95993, 96288, 96584,
            96881, 97178, 97477, 97776, 98077,
            98378, 98680, 98984, 99288, 99593,
            99899, 100206, 100514, 100822, 101132,
            101443, 101755, 102067, 102381, 102696,
            103011, 103328, 103645, 103964, 104283,
            104603, 104925, 105247, 105571, 105895,
            106220, 106547, 106874, 107203, 107532,
            107862, 108194, 108526, 108860, 109194,
            109530, 109866, 110204, 110542, 110882,
            111223, 111565, 111907, 112251, 112596,
            112942, 113289, 113637, 113986, 114337,
            114688, 115040, 115394, 115748, 116104,
            116461, 116819, 117178, 117538, 117899,
            118261, 118624, 118989, 119354, 119721,
            120089, 120458, 120828, 121199, 121572,
            121945, 122320, 122696, 123073, 123451,
            123830, 124211, 124593, 124975, 125359,
            125745, 126131, 126518, 126907, 127297,
            127688, 128081, 128474, 128869, 129265,
            129662, 130061, 130260
         ) ),
        max_error = cms.double(0.6152529479288091),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut2 = cms.PSet(
        lut = cms.vint32( (
            256, 256, 257, 258, 259,
            260, 260, 261, 262, 263,
            264, 264, 265, 266, 267,
            268, 268, 269, 270, 271,
            272, 273, 273, 274, 275,
            276, 277, 278, 279, 279,
            280, 281, 282, 283, 284,
            285, 285, 286, 287, 288,
            289, 290, 291, 292, 293,
            293, 294, 295, 296, 297,
            298, 299, 300, 301, 302,
            303, 303, 304, 305, 306,
            307, 308, 309, 310, 311,
            312, 313, 314, 315, 316,
            317, 318, 319, 320, 321,
            322, 323, 324, 325, 326,
            327, 328, 329, 330, 331,
            332, 333, 334, 335, 336,
            337, 338, 339, 340, 341,
            342, 343, 344, 345, 346,
            347, 348, 349, 351, 352,
            353, 354, 355, 356, 357,
            358, 359, 360, 361, 363,
            364, 365, 366, 367, 368,
            369, 370, 372, 373, 374,
            375, 376, 377, 379, 380,
            381, 382, 383, 384, 386,
            387, 388, 389, 390, 392,
            393, 394, 395, 396, 398,
            399, 400, 401, 402, 404,
            405, 406, 407, 409, 410,
            411, 412, 414, 415, 416,
            418, 419, 420, 421, 423,
            424, 425, 427, 428, 429,
            431, 432, 433, 435, 436,
            437, 439, 440, 441, 443,
            444, 445, 447, 448, 449,
            451, 452, 454, 455, 456,
            458, 459, 461, 462, 463,
            465, 466, 468, 469, 471,
            472, 474, 475, 476, 478,
            479, 481, 482, 484, 485,
            487, 488, 490, 491, 493,
            494, 496, 497, 499, 500,
            502, 503, 505, 507, 508,
            510, 511, 513, 514, 516,
            518, 519, 521, 522, 524,
            526, 527, 529, 530, 532,
            534, 535, 537, 539, 540,
            542, 544, 545, 547, 549,
            550, 552, 554, 555, 557,
            559, 561, 562, 564, 566,
            567, 569, 571, 573, 575,
            576, 578, 580, 582, 583,
            585, 587, 589, 591, 592,
            594, 596, 598, 600, 602,
            603, 605, 607, 609, 611,
            613, 615, 617, 618, 620,
            622, 624, 626, 628, 630,
            632, 634, 636, 638, 640,
            642, 644, 646, 648, 650,
            652, 654, 656, 658, 660,
            662, 664, 666, 668, 670,
            672, 674, 676, 678, 680,
            682, 684, 686, 688, 691,
            693, 695, 697, 699, 701,
            703, 706, 708, 710, 712,
            714, 717, 719, 721, 723,
            725, 728, 730, 732, 734,
            737, 739, 741, 743, 746,
            748, 750, 753, 755, 757,
            760, 762, 764, 767, 769,
            771, 774, 776, 778, 781,
            783, 786, 788, 790, 793,
            795, 798, 800, 803, 805,
            808, 810, 813, 815, 818,
            820, 823, 825, 828, 830,
            833, 835, 838, 840, 843,
            846, 848, 851, 853, 856,
            859, 861, 864, 867, 869,
            872, 875, 877, 880, 883,
            885, 888, 891, 894, 896,
            899, 902, 905, 907, 910,
            913, 916, 919, 921, 924,
            927, 930, 933, 936, 939,
            941, 944, 947, 950, 953,
            956, 959, 962, 965, 968,
            971, 974, 977, 980, 983,
            986, 989, 992, 995, 998,
            1001, 1004, 1007, 1010, 1013,
            1017, 1020, 1023, 1026, 1029,
            1032, 1035, 1039, 1042, 1045,
            1048, 1051, 1055, 1058, 1061,
            1064, 1068, 1071, 1074, 1078,
            1081, 1084, 1088, 1091, 1094,
            1098, 1101, 1104, 1108, 1111,
            1115, 1118, 1121, 1125, 1128,
            1132, 1135, 1139, 1142, 1146,
            1149, 1153, 1156, 1160, 1163,
            1167, 1171, 1174, 1178, 1181,
            1185, 1189, 1192, 1196, 1200,
            1203, 1207, 1211, 1214, 1218,
            1222, 1226, 1229, 1233, 1237,
            1241, 1245, 1249, 1252, 1256,
            1260, 1264, 1268, 1272, 1276,
            1280, 1283, 1287, 1291, 1295,
            1299, 1303, 1307, 1311, 1315,
            1319, 1323, 1328, 1332, 1336,
            1340, 1344, 1348, 1352, 1356,
            1360, 1365, 1369, 1373, 1377,
            1382, 1386, 1390, 1394, 1399,
            1403, 1407, 1412, 1416, 1420,
            1425, 1429, 1433, 1438, 1442,
            1447, 1451, 1455, 1460, 1464,
            1469, 1473, 1478, 1483, 1487,
            1492, 1496, 1501, 1505, 1510,
            1515, 1519, 1524, 1529, 1533,
            1538, 1543, 1548, 1552, 1557,
            1562, 1567, 1572, 1576, 1581,
            1586, 1591, 1596, 1601, 1606,
            1611, 1616, 1620, 1625, 1630,
            1635, 1640, 1646, 1651, 1656,
            1661, 1666, 1671, 1676, 1681,
            1686, 1692, 1697, 1702, 1707,
            1712, 1718, 1723, 1728, 1734,
            1739, 1744, 1750, 1755, 1760,
            1766, 1771, 1777, 1782, 1788,
            1793, 1799, 1804, 1810, 1815,
            1821, 1826, 1832, 1838, 1843,
            1849, 1855, 1860, 1866, 1872,
            1878, 1883, 1889, 1895, 1901,
            1907, 1912, 1918, 1924, 1930,
            1936, 1942, 1948, 1954, 1960,
            1966, 1972, 1978, 1984, 1990,
            1996, 2003, 2009, 2015, 2021,
            2027, 2033, 2040, 2046, 2052,
            2059, 2065, 2071, 2078, 2084,
            2090, 2097, 2103, 2110, 2116,
            2123, 2129, 2136, 2142, 2149,
            2156, 2162, 2169, 2175, 2182,
            2189, 2196, 2202, 2209, 2216,
            2223, 2230, 2236, 2243, 2250,
            2257, 2264, 2271, 2278, 2285,
            2292, 2299, 2306, 2313, 2320,
            2327, 2335, 2342, 2349, 2356,
            2363, 2371, 2378, 2385, 2393,
            2400, 2407, 2415, 2422, 2430,
            2437, 2444, 2452, 2460, 2467,
            2475, 2482, 2490, 2498, 2505,
            2513, 2521, 2528, 2536, 2544,
            2552, 2560, 2567, 2575, 2583,
            2591, 2599, 2607, 2615, 2623,
            2631, 2639, 2647, 2656, 2664,
            2672, 2680, 2688, 2697, 2705,
            2713, 2722, 2730, 2738, 2747,
            2755, 2764, 2772, 2781, 2789,
            2798, 2806, 2815, 2824, 2832,
            2841, 2850, 2858, 2867, 2876,
            2885, 2894, 2903, 2912, 2921,
            2930, 2939, 2948, 2957, 2966,
            2975, 2984, 2993, 3002, 3012,
            3021, 3030, 3039, 3049, 3058,
            3067, 3077, 3086, 3096, 3105,
            3115, 3124, 3134, 3144, 3153,
            3163, 3173, 3183, 3192, 3202,
            3212, 3222, 3232, 3242, 3252,
            3262, 3272, 3282, 3292, 3302,
            3312, 3322, 3332, 3343, 3353,
            3363, 3374, 3384, 3394, 3405,
            3415, 3426, 3436, 3447, 3457,
            3468, 3479, 3489, 3500, 3511,
            3522, 3532, 3543, 3554, 3565,
            3576, 3587, 3598, 3609, 3620,
            3631, 3642, 3654, 3665, 3676,
            3687, 3699, 3710, 3722, 3733,
            3744, 3756, 3767, 3779, 3791,
            3802, 3814, 3826, 3837, 3849,
            3861, 3873, 3885, 3897, 3909,
            3921, 3933, 3945, 3957, 3969,
            3981, 3994, 4006, 4018, 4031,
            4043, 4055, 4068, 4080, 4093,
            4105, 4118, 4131, 4143, 4156,
            4169, 4182, 4195, 4207, 4220,
            4233, 4246, 4259, 4272, 4286,
            4299, 4312, 4325, 4339, 4352,
            4365, 4379, 4392, 4406, 4419,
            4433, 4446, 4460, 4474, 4487,
            4501, 4515, 4529, 4543, 4557,
            4571, 4585, 4599, 4613, 4627,
            4641, 4656, 4670, 4684, 4699,
            4713, 4728, 4742, 4757, 4771,
            4786, 4801, 4816, 4830, 4845,
            4860, 4875, 4890, 4905, 4920,
            4935, 4950, 4966, 4981, 4996,
            5011, 5027, 5042, 5058, 5073,
            5089, 5105, 5120, 5136, 5152,
            5168, 5183, 5199, 5215, 5231,
            5247, 5264, 5280, 5296, 5312,
            5329, 5345, 5361, 5378, 5394,
            5411, 5428, 5444, 5461, 5478,
            5495, 5512, 5528, 5545, 5562,
            5580, 5597, 5614, 5631, 5648,
            5666, 5683, 5701, 5718, 5736,
            5753, 5771, 5789, 5807, 5824,
            5842, 5860, 5878, 5896, 5914,
            5933, 5951, 5969, 5987, 6006,
            6024, 6043, 6061, 6080, 6099,
            6117, 6136, 6155, 6174, 6193,
            6212, 6231, 6250, 6269, 6289,
            6308, 6327, 6347, 6366, 6386,
            6406, 6425, 6445, 6465, 6485,
            6505, 6525, 6545, 6565, 6585,
            6605, 6625, 6646, 6666, 6687,
            6707, 6728, 6749, 6769, 6790,
            6811, 6832, 6853, 6874, 6895,
            6916, 6937, 6959, 6980, 7002,
            7023, 7045, 7066, 7088, 7110,
            7132, 7154, 7176, 7198, 7220,
            7242, 7264, 7286, 7309, 7331,
            7354, 7376, 7399, 7422, 7445,
            7468, 7490, 7513, 7537, 7560,
            7583, 7606, 7630, 7653, 7677,
            7700, 7724, 7748, 7771, 7795,
            7819, 7843, 7867, 7892, 7916,
            7940, 7964, 7989, 8014, 8038,
            8063, 8088, 8112, 8137, 8162,
            8187, 8213, 8238, 8263, 8289,
            8314, 8340, 8365, 8391, 8417,
            8443, 8468, 8495, 8521, 8547,
            8573, 8599, 8626, 8652, 8679,
            8706, 8732, 8759, 8786, 8813,
            8840, 8867, 8895, 8922, 8949,
            8977, 9004, 9032, 9060, 9088,
            9116, 9144, 9172, 9200, 9228,
            9256, 9285, 9313, 9342, 9371,
            9400, 9428, 9457, 9486, 9516,
            9545, 9574, 9604, 9633, 9663,
            9692, 9722, 9752, 9782, 9812,
            9842, 9872, 9903, 9933, 9964,
            9994, 10025, 10056, 10087, 10118,
            10149, 10180, 10211, 10243, 10274,
            10306, 10337, 10369, 10401, 10433,
            10465, 10497, 10529, 10562, 10594,
            10627, 10659, 10692, 10725, 10758,
            10791, 10824, 10858, 10891, 10924,
            10958, 10992, 11025, 11059, 11093,
            11127, 11161, 11196, 11230, 11265,
            11299, 11334, 11369, 11404, 11439,
            11474, 11509, 11545, 11580, 11616,
            11651, 11687, 11723, 11759, 11795,
            11831, 11868, 11904, 11941, 11978,
            12014, 12051, 12088, 12125, 12163,
            12200, 12238, 12275, 12313, 12351,
            12389, 12427, 12465, 12503, 12542,
            12580, 12619, 12658, 12696, 12735,
            12775, 12814, 12853, 12893, 12932,
            12972, 13012, 13052, 13092, 13132,
            13173, 13213, 13254, 13294, 13335,
            13376, 13417, 13459, 13500, 13541,
            13583, 13625, 13667, 13709, 13751,
            13793, 13835, 13878, 13920, 13963,
            14006, 14049, 14092, 14136, 14179,
            14223, 14266, 14310, 14354, 14398,
            14443, 14487, 14531, 14576, 14621,
            14666, 14711, 14756, 14801, 14847,
            14892, 14938, 14984, 15030, 15076,
            15123, 15169, 15216, 15263, 15309,
            15356, 15404, 15451, 15498, 15546,
            15594, 15642, 15690, 15738, 15786,
            15835, 15884, 15932, 15981, 16030,
            16080, 16129, 16179, 16228, 16278,
            16328, 16378, 16429, 16479, 16530,
            16581, 16632, 16683, 16734, 16785,
            16837, 16889, 16941, 16993, 17045,
            17097, 17150, 17202, 17255, 17308,
            17361, 17415, 17468, 17522, 17576,
            17630, 17684, 17738, 17793, 17848,
            17902, 17957, 18013, 18068, 18123,
            18179, 18235, 18291, 18347, 18404,
            18460, 18517, 18574, 18631, 18688,
            18746, 18803, 18861, 18919, 18977,
            19035, 19094, 19152, 19211, 19270,
            19330, 19389, 19448, 19508, 19568,
            19628, 19689, 19749, 19810, 19871,
            19932, 19993, 20054, 20116, 20178,
            20240, 20302, 20364, 20427, 20490,
            20553, 20616, 20679, 20743, 20806,
            20870, 20935, 20999, 21063, 21128,
            21193, 21258, 21323, 21389, 21455,
            21521, 21587, 21653, 21720, 21786,
            21853, 21920, 21988, 22055, 22123,
            22191, 22259, 22328, 22396, 22465,
            22534, 22603, 22673, 22742, 22812,
            22882, 22953, 23023, 23094, 23165,
            23236, 23308, 23379, 23451, 23523,
            23595, 23668, 23741, 23814, 23887,
            23960, 24034, 24108, 24182, 24256,
            24330, 24405, 24480, 24555, 24631,
            24707, 24783, 24859, 24935, 25012,
            25089, 25166, 25243, 25320, 25398,
            25476, 25555, 25633, 25712, 25791,
            25870, 25950, 26029, 26109, 26190,
            26270, 26351, 26432, 26513, 26594,
            26676, 26758, 26840, 26923, 27006,
            27088, 27172, 27255, 27339, 27423,
            27507, 27592, 27677, 27762, 27847,
            27932, 28018, 28104, 28191, 28277,
            28364, 28451, 28539, 28626, 28714,
            28803, 28891, 28980, 29069, 29158,
            29248, 29338, 29428, 29518, 29609,
            29700, 29791, 29883, 29975, 30067,
            30159, 30252, 30345, 30438, 30532,
            30625, 30719, 30814, 30909, 31003,
            31099, 31194, 31290, 31386, 31483,
            31579, 31677, 31774, 31871, 31969,
            32068, 32166, 32265, 32364, 32464,
            32563, 32663, 32764, 32864, 32965,
            33067, 33168, 33270, 33372, 33475,
            33578, 33681, 33785, 33888, 33992,
            34097, 34202, 34307, 34412, 34518,
            34624, 34730, 34837, 34944, 35051,
            35159, 35267, 35376, 35484, 35593,
            35703, 35812, 35922, 36033, 36144,
            36255, 36366, 36478, 36590, 36702,
            36815, 36928, 37042, 37155, 37270,
            37384, 37499, 37614, 37730, 37846,
            37962, 38079, 38196, 38313, 38431,
            38549, 38667, 38786, 38905, 39025,
            39145, 39265, 39386, 39507, 39628,
            39750, 39872, 39994, 40117, 40241,
            40364, 40488, 40613, 40737, 40863,
            40988, 41114, 41240, 41367, 41494,
            41622, 41750, 41878, 42007, 42136,
            42265, 42395, 42525, 42656, 42787,
            42919, 43050, 43183, 43315, 43448,
            43582, 43716, 43850, 43985, 44120,
            44256, 44392, 44528, 44665, 44802,
            44940, 45078, 45216, 45355, 45495,
            45634, 45775, 45915, 46056, 46198,
            46340, 46482, 46625, 46768, 46912,
            47056, 47201, 47346, 47491, 47637,
            47784, 47930, 48078, 48225, 48374,
            48522, 48671, 48821, 48971, 49121,
            49272, 49424, 49576, 49728, 49881,
            50034, 50188, 50342, 50497, 50652,
            50807, 50963, 51120, 51277, 51435,
            51593, 51751, 51910, 52070, 52230,
            52390, 52551, 52713, 52875, 53037,
            53200, 53364, 53528, 53692, 53857,
            54022, 54188, 54355, 54522, 54690,
            54858, 55026, 55195, 55365, 55535,
            55706, 55877, 56048, 56221, 56393,
            56567, 56740, 56915, 57090, 57265,
            57441, 57618, 57795, 57972, 58150,
            58329, 58508, 58688, 58868, 59049,
            59231, 59413, 59595, 59778, 59962,
            60146, 60331, 60516, 60702, 60889,
            61076, 61264, 61452, 61641, 61830,
            62020, 62211, 62402, 62594, 62786,
            62979, 63172, 63366, 63561, 63756,
            63952, 64149, 64346, 64544, 64742,
            64941, 65140, 65341, 65541, 65743,
            65945, 66147, 66351, 66555, 66759,
            66964, 67170, 67376, 67583, 67791,
            67999, 68208, 68418, 68628, 68839,
            69050, 69263, 69475, 69689, 69903,
            70118, 70333, 70549, 70766, 70984,
            71202, 71421, 71640, 71860, 72081,
            72302, 72525, 72747, 72971, 73195,
            73420, 73646, 73872, 74099, 74327,
            74555, 74784, 75014, 75244, 75476,
            75707, 75940, 76173, 76407, 76642,
            76878, 77114, 77351, 77589, 77827,
            78066, 78306, 78547, 78788, 79030,
            79273, 79516, 79761, 80006, 80252,
            80498, 80746, 80994, 81243, 81492,
            81743, 81994, 82246, 82498, 82752,
            83006, 83261, 83517, 83774, 84031,
            84289, 84548, 84808, 85069, 85330,
            85592, 85855, 86119, 86384, 86649,
            86915, 87182, 87450, 87719, 87989,
            88259, 88530, 88802, 89075, 89349,
            89623, 89899, 90175, 90452, 90730,
            91009, 91288, 91569, 91850, 92132,
            92415, 92699, 92984, 93270, 93557,
            93844, 94132, 94422, 94712, 95003,
            95295, 95587, 95881, 96176, 96471,
            96768, 97065, 97363, 97662, 97963,
            98264, 98565, 98868, 99172, 99477,
            99783, 100089, 100397, 100705, 101015,
            101325, 101636, 101949, 102262, 102576,
            102891, 103207, 103525, 103843, 104162,
            104482, 104803, 105125, 105448, 105772,
            106097, 106423, 106750, 107078, 107407,
            107737, 108068, 108400, 108733, 109067,
            109402, 109738, 110076, 110414, 110753,
            111093, 111435, 111777, 112121, 112465,
            112811, 113157, 113505, 113854, 114204,
            114555, 114907, 115260, 115614, 115969,
            116325, 116683, 117041, 117401, 117762,
            118124, 118486, 118851, 119216, 119582,
            119949, 120318, 120688, 121059, 121431,
            121804, 122178, 122553, 122930, 123308,
            123687, 124067, 124448, 124830, 125214,
            125598, 125984, 126371, 126760, 127149,
            127540, 127932, 128325, 128719, 129115,
            129511, 129909, 130309, 130709, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071
         ) ),
        max_error = cms.double(5748.616225984908),
        output_scale_factor = cms.double(0.953125),
        unused_lsbs = cms.uint32(2)
    ),
    inv_mass_checks = cms.untracked.bool(False),
    maxDz = cms.double(1),
    minDR = cms.double(0),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    sanity_checks = cms.untracked.bool(False),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    )
)


process.DoubleTkMuon44OSDr1p2 = cms.EDFilter("L1GTDoubleObjectCond",
    collection1 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        minQualityScore = cms.uint32(0),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 0.83, 1.24),
        regionsMinPt = cms.vdouble(4, 4, 4),
        tag = cms.InputTag("l1tGTProducer","GMTTkMuons")
    ),
    collection2 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        minQualityScore = cms.uint32(0),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 0.83, 1.24),
        regionsMinPt = cms.vdouble(4, 4, 4),
        tag = cms.InputTag("l1tGTProducer","GMTTkMuons")
    ),
    cos_phi_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            487, 487, 487, 487, 487,
            487, 487, 487, 487, 487,
            487, 486, 486, 486, 486,
            486, 486, 486, 485, 485,
            485, 485, 485, 485, 484,
            484, 484, 484, 484, 483,
            483, 483, 483, 483, 482,
            482, 482, 482, 481, 481,
            481, 481, 480, 480, 480,
            480, 479, 479, 479, 478,
            478, 478, 478, 477, 477,
            477, 476, 476, 476, 475,
            475, 475, 474, 474, 474,
            473, 473, 472, 472, 472,
            471, 471, 471, 470, 470,
            469, 469, 468, 468, 468,
            467, 467, 466, 466, 465,
            465, 465, 464, 464, 463,
            463, 462, 462, 461, 461,
            460, 460, 459, 459, 458,
            458, 457, 457, 456, 456,
            455, 454, 454, 453, 453,
            452, 452, 451, 451, 450,
            449, 449, 448, 448, 447,
            446, 446, 445, 445, 444,
            443, 443, 442, 441, 441,
            440, 440, 439, 438, 438,
            437, 436, 436, 435, 434,
            434, 433, 432, 431, 431,
            430, 429, 429, 428, 427,
            426, 426, 425, 424, 423,
            423, 422, 421, 420, 420,
            419, 418, 417, 417, 416,
            415, 414, 413, 413, 412,
            411, 410, 409, 409, 408,
            407, 406, 405, 405, 404,
            403, 402, 401, 400, 399,
            399, 398, 397, 396, 395,
            394, 393, 392, 392, 391,
            390, 389, 388, 387, 386,
            385, 384, 383, 382, 381,
            381, 380, 379, 378, 377,
            376, 375, 374, 373, 372,
            371, 370, 369, 368, 367,
            366, 365, 364, 363, 362,
            361, 360, 359, 358, 357,
            356, 355, 354, 353, 352,
            351, 350, 349, 348, 347,
            346, 345, 343, 342, 341,
            340, 339, 338, 337, 336,
            335, 334, 333, 332, 330,
            329, 328, 327, 326, 325,
            324, 323, 322, 320, 319,
            318, 317, 316, 315, 314,
            312, 311, 310, 309, 308,
            307, 306, 304, 303, 302,
            301, 300, 298, 297, 296,
            295, 294, 293, 291, 290,
            289, 288, 286, 285, 284,
            283, 282, 280, 279, 278,
            277, 275, 274, 273, 272,
            270, 269, 268, 267, 265,
            264, 263, 262, 260, 259,
            258, 257, 255, 254, 253,
            252, 250, 249, 248, 246,
            245, 244, 242, 241, 240,
            239, 237, 236, 235, 233,
            232, 231, 229, 228, 227,
            225, 224, 223, 221, 220,
            219, 217, 216, 215, 213,
            212, 211, 209, 208, 207,
            205, 204, 203, 201, 200,
            198, 197, 196, 194, 193,
            192, 190, 189, 187, 186,
            185, 183, 182, 181, 179,
            178, 176, 175, 174, 172,
            171, 169, 168, 167, 165,
            164, 162, 161, 159, 158,
            157, 155, 154, 152, 151,
            150, 148, 147, 145, 144,
            142, 141, 140, 138, 137,
            135, 134, 132, 131, 129,
            128, 127, 125, 124, 122,
            121, 119, 118, 116, 115,
            113, 112, 111, 109, 108,
            106, 105, 103, 102, 100,
            99, 97, 96, 94, 93,
            92, 90, 89, 87, 86,
            84, 83, 81, 80, 78,
            77, 75, 74, 72, 71,
            69, 68, 66, 65, 63,
            62, 60, 59, 58, 56,
            55, 53, 52, 50, 49,
            47, 46, 44, 43, 41,
            40, 38, 37, 35, 34,
            32, 31, 29, 28, 26,
            25, 23, 22, 20, 19,
            17, 16, 14, 13, 11,
            10, 8, 7, 5, 4,
            2, 1, -1, -2, -4,
            -5, -7, -8, -10, -11,
            -13, -14, -16, -17, -19,
            -20, -22, -23, -25, -26,
            -28, -29, -31, -32, -34,
            -35, -37, -38, -40, -41,
            -43, -44, -46, -47, -49,
            -50, -52, -53, -55, -56,
            -58, -59, -60, -62, -63,
            -65, -66, -68, -69, -71,
            -72, -74, -75, -77, -78,
            -80, -81, -83, -84, -86,
            -87, -89, -90, -92, -93,
            -94, -96, -97, -99, -100,
            -102, -103, -105, -106, -108,
            -109, -111, -112, -113, -115,
            -116, -118, -119, -121, -122,
            -124, -125, -127, -128, -129,
            -131, -132, -134, -135, -137,
            -138, -140, -141, -142, -144,
            -145, -147, -148, -150, -151,
            -152, -154, -155, -157, -158,
            -159, -161, -162, -164, -165,
            -167, -168, -169, -171, -172,
            -174, -175, -176, -178, -179,
            -181, -182, -183, -185, -186,
            -187, -189, -190, -192, -193,
            -194, -196, -197, -198, -200,
            -201, -203, -204, -205, -207,
            -208, -209, -211, -212, -213,
            -215, -216, -217, -219, -220,
            -221, -223, -224, -225, -227,
            -228, -229, -231, -232, -233,
            -235, -236, -237, -239, -240,
            -241, -242, -244, -245, -246,
            -248, -249, -250, -252, -253,
            -254, -255, -257, -258, -259,
            -260, -262, -263, -264, -265,
            -267, -268, -269, -270, -272,
            -273, -274, -275, -277, -278,
            -279, -280, -282, -283, -284,
            -285, -286, -288, -289, -290,
            -291, -293, -294, -295, -296,
            -297, -298, -300, -301, -302,
            -303, -304, -306, -307, -308,
            -309, -310, -311, -312, -314,
            -315, -316, -317, -318, -319,
            -320, -322, -323, -324, -325,
            -326, -327, -328, -329, -330,
            -332, -333, -334, -335, -336,
            -337, -338, -339, -340, -341,
            -342, -343, -345, -346, -347,
            -348, -349, -350, -351, -352,
            -353, -354, -355, -356, -357,
            -358, -359, -360, -361, -362,
            -363, -364, -365, -366, -367,
            -368, -369, -370, -371, -372,
            -373, -374, -375, -376, -377,
            -378, -379, -380, -381, -381,
            -382, -383, -384, -385, -386,
            -387, -388, -389, -390, -391,
            -392, -392, -393, -394, -395,
            -396, -397, -398, -399, -399,
            -400, -401, -402, -403, -404,
            -405, -405, -406, -407, -408,
            -409, -409, -410, -411, -412,
            -413, -413, -414, -415, -416,
            -417, -417, -418, -419, -420,
            -420, -421, -422, -423, -423,
            -424, -425, -426, -426, -427,
            -428, -429, -429, -430, -431,
            -431, -432, -433, -434, -434,
            -435, -436, -436, -437, -438,
            -438, -439, -440, -440, -441,
            -441, -442, -443, -443, -444,
            -445, -445, -446, -446, -447,
            -448, -448, -449, -449, -450,
            -451, -451, -452, -452, -453,
            -453, -454, -454, -455, -456,
            -456, -457, -457, -458, -458,
            -459, -459, -460, -460, -461,
            -461, -462, -462, -463, -463,
            -464, -464, -465, -465, -465,
            -466, -466, -467, -467, -468,
            -468, -468, -469, -469, -470,
            -470, -471, -471, -471, -472,
            -472, -472, -473, -473, -474,
            -474, -474, -475, -475, -475,
            -476, -476, -476, -477, -477,
            -477, -478, -478, -478, -478,
            -479, -479, -479, -480, -480,
            -480, -480, -481, -481, -481,
            -481, -482, -482, -482, -482,
            -483, -483, -483, -483, -483,
            -484, -484, -484, -484, -484,
            -485, -485, -485, -485, -485,
            -485, -486, -486, -486, -486,
            -486, -486, -486, -487, -487,
            -487, -487, -487, -487, -487,
            -487, -487, -487, -487, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488
         ) ),
        max_error = cms.double(0.0025338281044886835),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            489, 489, 489, 489, 489,
            489, 489, 489, 489, 489,
            489, 490, 490, 490, 490,
            490, 490, 490, 491, 491,
            491, 491, 491, 491, 492,
            492, 492, 492, 492, 493,
            493, 493, 493, 493, 494,
            494, 494, 494, 495, 495,
            495, 495, 496, 496, 496,
            496, 497, 497, 497, 498,
            498, 498, 499, 499, 499,
            499, 500, 500, 500, 501,
            501, 502, 502, 502, 503,
            503, 503, 504, 504, 504,
            505, 505, 506, 506, 507,
            507, 507, 508, 508, 509,
            509, 510, 510, 510, 511,
            511, 512, 512, 513, 513,
            514, 514, 515, 515, 516,
            516, 517, 517, 518, 518,
            519, 520, 520, 521, 521,
            522, 522, 523, 523, 524,
            525, 525, 526, 526, 527,
            528, 528, 529, 530, 530,
            531, 531, 532, 533, 533,
            534, 535, 535, 536, 537,
            537, 538, 539, 540, 540,
            541, 542, 542, 543, 544,
            545, 545, 546, 547, 548,
            548, 549, 550, 551, 551,
            552, 553, 554, 555, 555,
            556, 557, 558, 559, 560,
            560, 561, 562, 563, 564,
            565, 566, 567, 567, 568,
            569, 570, 571, 572, 573,
            574, 575, 576, 577, 577,
            578, 579, 580, 581, 582,
            583, 584, 585, 586, 587,
            588, 589, 590, 591, 592,
            593, 594, 595, 596, 598,
            599, 600, 601, 602, 603,
            604, 605, 606, 607, 608,
            610, 611, 612, 613, 614,
            615, 616, 618, 619, 620,
            621, 622, 623, 625, 626,
            627, 628, 629, 631, 632,
            633, 634, 636, 637, 638,
            639, 641, 642, 643, 644,
            646, 647, 648, 650, 651,
            652, 654, 655, 656, 658,
            659, 660, 662, 663, 665,
            666, 667, 669, 670, 672,
            673, 674, 676, 677, 679,
            680, 682, 683, 685, 686,
            687, 689, 690, 692, 693,
            695, 697, 698, 700, 701,
            703, 704, 706, 707, 709,
            710, 712, 714, 715, 717,
            719, 720, 722, 723, 725,
            727, 728, 730, 732, 733,
            735, 737, 738, 740, 742,
            744, 745, 747, 749, 750,
            752, 754, 756, 758, 759,
            761, 763, 765, 767, 768,
            770, 772, 774, 776, 778,
            779, 781, 783, 785, 787,
            789, 791, 793, 795, 796,
            798, 800, 802, 804, 806,
            808, 810, 812, 814, 816,
            818, 820, 822, 824, 826,
            828, 830, 832, 835, 837,
            839, 841, 843, 845, 847,
            849, 851, 854, 856, 858,
            860, 862, 864, 867, 869,
            871, 873, 875, 878, 880,
            882, 884, 887, 889, 891,
            894, 896, 898, 900, 903,
            905, 907, 910, 912, 915,
            917, 919, 922, 924, 927,
            929, 931, 934, 936, 939,
            941, 944, 946, 949, 951,
            954, 956, 959, 961, 964,
            966, 969, 971, 974, 977,
            979, 982, 984, 987, 990,
            992, 995, 998, 1000, 1003,
            1006, 1008, 1011, 1014, 1017,
            1019, 1022, 1025, 1028, 1030,
            1033, 1036, 1039, 1042, 1044,
            1047, 1050, 1053, 1056, 1059,
            1062, 1065, 1067, 1070, 1073,
            1076, 1079, 1082, 1085, 1088,
            1091, 1094, 1097, 1100, 1103,
            1106, 1109, 1112, 1115, 1118,
            1122, 1125, 1128, 1131, 1134,
            1137, 1140, 1143, 1147, 1150,
            1153, 1156, 1159, 1163, 1166,
            1169, 1172, 1176, 1179, 1182,
            1186, 1189, 1192, 1196, 1199,
            1202, 1206, 1209, 1212, 1216,
            1219, 1223, 1226, 1230, 1233,
            1237, 1240, 1244, 1247, 1251,
            1254, 1258, 1261, 1265, 1268,
            1272, 1276, 1279, 1283, 1287,
            1290, 1294, 1298, 1301, 1305,
            1309, 1312, 1316, 1320, 1324,
            1327, 1331, 1335, 1339, 1343,
            1347, 1350, 1354, 1358, 1362,
            1366, 1370, 1374, 1378, 1382,
            1386, 1390, 1394, 1398, 1402,
            1406, 1410, 1414, 1418, 1422,
            1426, 1430, 1434, 1439, 1443,
            1447, 1451, 1455, 1459, 1464,
            1468, 1472, 1476, 1481, 1485,
            1489, 1494, 1498, 1502, 1507,
            1511, 1516, 1520, 1524, 1529,
            1533, 1538, 1542, 1547, 1551,
            1556, 1560, 1565, 1569, 1574,
            1579, 1583, 1588, 1592, 1597,
            1602, 1606, 1611, 1616, 1621,
            1625, 1630, 1635, 1640, 1645,
            1649, 1654, 1659, 1664, 1669,
            1674, 1679, 1684, 1689, 1693,
            1698, 1703, 1708, 1714, 1719,
            1724, 1729, 1734, 1739, 1744,
            1749, 1754, 1760, 1765, 1770,
            1775, 1780, 1786, 1791, 1796,
            1802, 1807, 1812, 1818, 1823,
            1828, 1834, 1839, 1845, 1850,
            1856, 1861, 1867, 1872, 1878,
            1883, 1889, 1894, 1900, 1906,
            1911, 1917, 1923, 1929, 1934,
            1940, 1946, 1952, 1957, 1963,
            1969, 1975, 1981, 1987, 1993,
            1999, 2004, 2010, 2016, 2022,
            2028, 2035, 2041, 2047, 2053,
            2059, 2065, 2071, 2077, 2084,
            2090, 2096, 2102, 2109, 2115,
            2121, 2128, 2134, 2140, 2147,
            2153, 2160, 2166, 2173, 2179,
            2186, 2192, 2199, 2205, 2212,
            2219, 2225, 2232, 2239, 2245,
            2252, 2259, 2266, 2272, 2279,
            2286, 2293, 2300, 2307, 2314,
            2321, 2328, 2335, 2342, 2349,
            2356, 2363, 2370, 2377, 2384,
            2391, 2398, 2406, 2413, 2420,
            2427, 2435, 2442, 2449, 2457,
            2464, 2472, 2479, 2487, 2494,
            2502, 2509, 2517, 2524, 2532,
            2539, 2547, 2555, 2563, 2570,
            2578, 2586, 2594, 2601, 2609,
            2617, 2625, 2633, 2641, 2649,
            2657, 2665, 2673, 2681, 2689,
            2697, 2705, 2714, 2722, 2730,
            2738, 2747, 2755, 2763, 2772,
            2780, 2788, 2797, 2805, 2814,
            2822, 2831, 2839, 2848, 2857,
            2865, 2874, 2883, 2891, 2900,
            2909, 2918, 2927, 2935, 2944,
            2953, 2962, 2971, 2980, 2989,
            2998, 3007, 3016, 3026, 3035,
            3044, 3053, 3062, 3072, 3081,
            3090, 3100, 3109, 3119, 3128,
            3138, 3147, 3157, 3166, 3176,
            3186, 3195, 3205, 3215, 3224,
            3234, 3244, 3254, 3264, 3274,
            3284, 3294, 3304, 3314, 3324,
            3334, 3344, 3354, 3364, 3375,
            3385, 3395, 3405, 3416, 3426,
            3437, 3447, 3458, 3468, 3479,
            3489, 3500, 3510, 3521, 3532,
            3543, 3553, 3564, 3575, 3586,
            3597, 3608, 3619, 3630, 3641,
            3652, 3663, 3674, 3685, 3697,
            3708, 3719, 3730, 3742, 3753,
            3765, 3776, 3788, 3799, 3811,
            3822, 3834, 3846, 3857, 3869,
            3881, 3893, 3905, 3917, 3929,
            3941, 3953, 3965, 3977, 3989,
            4001, 4013, 4025, 4038, 4050,
            4062, 4075, 4087, 4100, 4112,
            4125, 4137, 4150, 4163, 4175,
            4188, 4201, 4214, 4226, 4239,
            4252, 4265, 4278, 4291, 4304,
            4318, 4331, 4344, 4357, 4371,
            4384, 4397, 4411, 4424, 4438,
            4451, 4465, 4479, 4492, 4506,
            4520, 4533, 4547, 4561, 4575,
            4589, 4603, 4617, 4631, 4645,
            4660, 4674, 4688, 4703, 4717,
            4731, 4746, 4760, 4775, 4789,
            4804, 4819, 4833, 4848, 4863,
            4878, 4893, 4908, 4923, 4938,
            4953, 4968, 4983, 4999, 5014,
            5029, 5045, 5060, 5075, 5091,
            5107, 5122, 5138, 5154, 5169,
            5185, 5201, 5217, 5233, 5249,
            5265, 5281, 5297, 5313, 5330,
            5346, 5362, 5379, 5395, 5412,
            5428, 5445, 5462, 5478, 5495,
            5512, 5529, 5546, 5563, 5580,
            5597, 5614, 5631, 5648, 5666,
            5683, 5700, 5718, 5735, 5753,
            5770, 5788, 5806, 5824, 5841,
            5859, 5877, 5895, 5913, 5931,
            5950, 5968, 5986, 6004, 6023,
            6041, 6060, 6078, 6097, 6116,
            6134, 6153, 6172, 6191, 6210,
            6229, 6248, 6267, 6286, 6305,
            6325, 6344, 6364, 6383, 6403,
            6422, 6442, 6462, 6481, 6501,
            6521, 6541, 6561, 6581, 6602,
            6622, 6642, 6662, 6683, 6703,
            6724, 6744, 6765, 6786, 6807,
            6828, 6848, 6869, 6891, 6912,
            6933, 6954, 6975, 6997, 7018,
            7040, 7061, 7083, 7105, 7126,
            7148, 7170, 7192, 7214, 7236,
            7259, 7281, 7303, 7325, 7348,
            7370, 7393, 7416, 7438, 7461,
            7484, 7507, 7530, 7553, 7576,
            7600, 7623, 7646, 7670, 7693,
            7717, 7741, 7764, 7788, 7812,
            7836, 7860, 7884, 7908, 7932,
            7957, 7981, 8006, 8030, 8055,
            8080, 8104, 8129, 8154, 8179,
            8204, 8229, 8255, 8280, 8305,
            8331, 8356, 8382, 8408, 8434,
            8459, 8485, 8511, 8537, 8564,
            8590, 8616, 8643, 8669, 8696,
            8722, 8749, 8776, 8803, 8830,
            8857, 8884, 8912, 8939, 8966,
            8994, 9021, 9049, 9077, 9105,
            9133, 9161, 9189, 9217, 9245,
            9274, 9302, 9331, 9359, 9388,
            9417, 9446, 9475, 9504, 9533,
            9562, 9591, 9621, 9650, 9680,
            9710, 9740, 9769, 9799, 9830,
            9860, 9890, 9920, 9951, 9981,
            10012, 10043, 10073, 10104, 10135,
            10166, 10198, 10229, 10260, 10292,
            10323, 10355, 10387, 10419, 10451,
            10483, 10515, 10547, 10580, 10612,
            10645, 10677, 10710, 10743, 10776,
            10809, 10842, 10876, 10909, 10942,
            10976, 11010, 11044, 11077, 11111,
            11146, 11180, 11214, 11248, 11283,
            11318, 11352, 11387, 11422, 11457,
            11492, 11528, 11563, 11599, 11634,
            11670, 11706, 11742, 11778, 11814,
            11850, 11887, 11923, 11960, 11996,
            12033, 12070, 12107, 12144, 12182,
            12219, 12257, 12294, 12332, 12370,
            12408, 12446, 12484, 12522, 12561,
            12599, 12638, 12677, 12716, 12755,
            12794, 12833, 12873, 12912, 12952,
            12992, 13032, 13072, 13112, 13152,
            13192, 13233, 13274, 13314, 13355,
            13396, 13437, 13479, 13520, 13561,
            13603, 13645, 13687, 13729, 13771,
            13813, 13856, 13898, 13941, 13984,
            14027, 14070, 14113, 14156, 14200,
            14243, 14287, 14331, 14375, 14419,
            14463, 14508, 14552, 14597, 14642,
            14687, 14732, 14777, 14823, 14868,
            14914, 14960, 15005, 15052, 15098,
            15144, 15191, 15237, 15284, 15331,
            15378, 15425, 15473, 15520, 15568,
            15616, 15664, 15712, 15760, 15808,
            15857, 15906, 15955, 16004, 16053,
            16102, 16151, 16201, 16251, 16301,
            16351, 16401, 16451, 16502, 16553,
            16603, 16654, 16706, 16757, 16808,
            16860, 16912, 16964, 17016, 17068,
            17121, 17173, 17226, 17279, 17332,
            17385, 17438, 17492, 17546, 17600,
            17654, 17708, 17762, 17817, 17872,
            17926, 17982, 18037, 18092, 18148,
            18203, 18259, 18315, 18372, 18428,
            18485, 18542, 18598, 18656, 18713,
            18770, 18828, 18886, 18944, 19002,
            19060, 19119, 19178, 19237, 19296,
            19355, 19414, 19474, 19534, 19594,
            19654, 19714, 19775, 19836, 19897,
            19958, 20019, 20081, 20142, 20204,
            20266, 20328, 20391, 20454, 20516,
            20579, 20643, 20706, 20770, 20833,
            20897, 20962, 21026, 21091, 21155,
            21220, 21286, 21351, 21417, 21482,
            21548, 21615, 21681, 21748, 21814,
            21881, 21949, 22016, 22084, 22151,
            22220, 22288, 22356, 22425, 22494,
            22563, 22632, 22702, 22771, 22841,
            22912, 22982, 23053, 23123, 23194,
            23266, 23337, 23409, 23481, 23553,
            23625, 23698, 23771, 23844, 23917,
            23990, 24064, 24138, 24212, 24287,
            24361, 24436, 24511, 24586, 24662,
            24738, 24814, 24890, 24966, 25043,
            25120, 25197, 25275, 25352, 25430,
            25508, 25587, 25665, 25744, 25823,
            25902, 25982, 26062, 26142, 26222,
            26303, 26384, 26465, 26546, 26627,
            26709, 26791, 26874, 26956, 27039,
            27122, 27205, 27289, 27373, 27457,
            27541, 27626, 27711, 27796, 27881,
            27967, 28053, 28139, 28226, 28312,
            28399, 28486, 28574, 28662, 28750,
            28838, 28927, 29016, 29105, 29194,
            29284, 29374, 29464, 29555, 29645,
            29736, 29828, 29919, 30011, 30104,
            30196, 30289, 30382, 30475, 30569,
            30663, 30757, 30851, 30946, 31041,
            31137, 31232, 31328, 31425, 31521,
            31618, 31715, 31813, 31910, 32008,
            32107, 32205, 32304, 32403, 32503,
            32603, 32703, 32804, 32904, 33005,
            33107, 33209, 33311, 33413, 33516,
            33619, 33722, 33825, 33929, 34034,
            34138, 34243, 34348, 34454, 34560,
            34666, 34772, 34879, 34986, 35094,
            35202, 35310, 35418, 35527, 35636,
            35746, 35856, 35966, 36076, 36187,
            36298, 36410, 36522, 36634, 36746,
            36859, 36973, 37086, 37200, 37314,
            37429, 37544, 37659, 37775, 37891,
            38008, 38124, 38241, 38359, 38477,
            38595, 38714, 38833, 38952, 39072,
            39192, 39312, 39433, 39554, 39675,
            39797, 39920, 40042, 40165, 40289,
            40413, 40537, 40661, 40786, 40911,
            41037, 41163, 41290, 41417, 41544,
            41671, 41800, 41928, 42057, 42186,
            42316, 42446, 42576, 42707, 42838,
            42970, 43102, 43234, 43367, 43500,
            43634, 43768, 43902, 44037, 44173,
            44308, 44444, 44581, 44718, 44855,
            44993, 45131, 45270, 45409, 45549,
            45689, 45829, 45970, 46111, 46253,
            46395, 46537, 46680, 46824, 46968,
            47112, 47257, 47402, 47548, 47694,
            47840, 47987, 48135, 48283, 48431,
            48580, 48729, 48879, 49029, 49180,
            49331, 49482, 49634, 49787, 49940,
            50093, 50247, 50401, 50556, 50712,
            50867, 51024, 51181, 51338, 51495,
            51654, 51812, 51972, 52131, 52291,
            52452, 52613, 52775, 52937, 53100,
            53263, 53427, 53591, 53755, 53921,
            54086, 54252, 54419, 54586, 54754,
            54922, 55091, 55260, 55430, 55600,
            55771, 55943, 56114, 56287, 56460,
            56633, 56807, 56982, 57157, 57333,
            57509, 57685, 57863, 58040, 58219,
            58398, 58577, 58757, 58938, 59119,
            59300, 59483, 59665, 59849, 60033,
            60217, 60402, 60588, 60774, 60960,
            61148, 61336, 61524, 61713, 61903,
            62093, 62284, 62475, 62667, 62860,
            63053, 63247, 63441, 63636, 63831,
            64027, 64224, 64422, 64619, 64818,
            65017, 65217, 65417, 65618, 65820,
            66022, 66225, 66429, 66633, 66837,
            67043, 67249, 67455, 67663, 67870,
            68079, 68288, 68498, 68708, 68920,
            69131, 69344, 69557, 69771, 69985,
            70200, 70416, 70632, 70849, 71067,
            71285, 71504, 71724, 71944, 72165,
            72387, 72609, 72833, 73056, 73281,
            73506, 73732, 73958, 74186, 74414,
            74642, 74872, 75102, 75332, 75564,
            75796, 76029, 76262, 76497, 76732,
            76968, 77204, 77441, 77679, 77918,
            78157, 78398, 78638, 78880, 79122,
            79366, 79609, 79854, 80099, 80345,
            80592, 80840, 81088, 81338, 81587,
            81838, 82090, 82342, 82595, 82849,
            83103, 83358, 83615, 83872, 84129,
            84388, 84647, 84907, 85168, 85430,
            85692, 85955, 86220, 86485, 86750,
            87017, 87284, 87552, 87821, 88091,
            88362, 88633, 88906, 89179, 89453,
            89728, 90003, 90280, 90557, 90836,
            91115, 91395, 91676, 91957, 92240,
            92523, 92807, 93093, 93379, 93666,
            93953, 94242, 94532, 94822, 95113,
            95406, 95699, 95993, 96288, 96584,
            96881, 97178, 97477, 97776, 98077,
            98378, 98680, 98984, 99288, 99593,
            99899, 100206, 100514, 100822, 101132,
            101443, 101755, 102067, 102381, 102696,
            103011, 103328, 103645, 103964, 104283,
            104603, 104925, 105247, 105571, 105895,
            106220, 106547, 106874, 107203, 107532,
            107862, 108194, 108526, 108860, 109194,
            109530, 109866, 110204, 110542, 110882,
            111223, 111565, 111907, 112251, 112596,
            112942, 113289, 113637, 113986, 114337,
            114688, 115040, 115394, 115748, 116104,
            116461, 116819, 117178, 117538, 117899,
            118261, 118624, 118989, 119354, 119721,
            120089, 120458, 120828, 121199, 121572,
            121945, 122320, 122696, 123073, 123451,
            123830, 124211, 124593, 124975, 125359,
            125745, 126131, 126518, 126907, 127297,
            127688, 128081, 128474, 128869, 129265,
            129662, 130061, 130260
         ) ),
        max_error = cms.double(0.6152529479288091),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut2 = cms.PSet(
        lut = cms.vint32( (
            256, 256, 257, 258, 259,
            260, 260, 261, 262, 263,
            264, 264, 265, 266, 267,
            268, 268, 269, 270, 271,
            272, 273, 273, 274, 275,
            276, 277, 278, 279, 279,
            280, 281, 282, 283, 284,
            285, 285, 286, 287, 288,
            289, 290, 291, 292, 293,
            293, 294, 295, 296, 297,
            298, 299, 300, 301, 302,
            303, 303, 304, 305, 306,
            307, 308, 309, 310, 311,
            312, 313, 314, 315, 316,
            317, 318, 319, 320, 321,
            322, 323, 324, 325, 326,
            327, 328, 329, 330, 331,
            332, 333, 334, 335, 336,
            337, 338, 339, 340, 341,
            342, 343, 344, 345, 346,
            347, 348, 349, 351, 352,
            353, 354, 355, 356, 357,
            358, 359, 360, 361, 363,
            364, 365, 366, 367, 368,
            369, 370, 372, 373, 374,
            375, 376, 377, 379, 380,
            381, 382, 383, 384, 386,
            387, 388, 389, 390, 392,
            393, 394, 395, 396, 398,
            399, 400, 401, 402, 404,
            405, 406, 407, 409, 410,
            411, 412, 414, 415, 416,
            418, 419, 420, 421, 423,
            424, 425, 427, 428, 429,
            431, 432, 433, 435, 436,
            437, 439, 440, 441, 443,
            444, 445, 447, 448, 449,
            451, 452, 454, 455, 456,
            458, 459, 461, 462, 463,
            465, 466, 468, 469, 471,
            472, 474, 475, 476, 478,
            479, 481, 482, 484, 485,
            487, 488, 490, 491, 493,
            494, 496, 497, 499, 500,
            502, 503, 505, 507, 508,
            510, 511, 513, 514, 516,
            518, 519, 521, 522, 524,
            526, 527, 529, 530, 532,
            534, 535, 537, 539, 540,
            542, 544, 545, 547, 549,
            550, 552, 554, 555, 557,
            559, 561, 562, 564, 566,
            567, 569, 571, 573, 575,
            576, 578, 580, 582, 583,
            585, 587, 589, 591, 592,
            594, 596, 598, 600, 602,
            603, 605, 607, 609, 611,
            613, 615, 617, 618, 620,
            622, 624, 626, 628, 630,
            632, 634, 636, 638, 640,
            642, 644, 646, 648, 650,
            652, 654, 656, 658, 660,
            662, 664, 666, 668, 670,
            672, 674, 676, 678, 680,
            682, 684, 686, 688, 691,
            693, 695, 697, 699, 701,
            703, 706, 708, 710, 712,
            714, 717, 719, 721, 723,
            725, 728, 730, 732, 734,
            737, 739, 741, 743, 746,
            748, 750, 753, 755, 757,
            760, 762, 764, 767, 769,
            771, 774, 776, 778, 781,
            783, 786, 788, 790, 793,
            795, 798, 800, 803, 805,
            808, 810, 813, 815, 818,
            820, 823, 825, 828, 830,
            833, 835, 838, 840, 843,
            846, 848, 851, 853, 856,
            859, 861, 864, 867, 869,
            872, 875, 877, 880, 883,
            885, 888, 891, 894, 896,
            899, 902, 905, 907, 910,
            913, 916, 919, 921, 924,
            927, 930, 933, 936, 939,
            941, 944, 947, 950, 953,
            956, 959, 962, 965, 968,
            971, 974, 977, 980, 983,
            986, 989, 992, 995, 998,
            1001, 1004, 1007, 1010, 1013,
            1017, 1020, 1023, 1026, 1029,
            1032, 1035, 1039, 1042, 1045,
            1048, 1051, 1055, 1058, 1061,
            1064, 1068, 1071, 1074, 1078,
            1081, 1084, 1088, 1091, 1094,
            1098, 1101, 1104, 1108, 1111,
            1115, 1118, 1121, 1125, 1128,
            1132, 1135, 1139, 1142, 1146,
            1149, 1153, 1156, 1160, 1163,
            1167, 1171, 1174, 1178, 1181,
            1185, 1189, 1192, 1196, 1200,
            1203, 1207, 1211, 1214, 1218,
            1222, 1226, 1229, 1233, 1237,
            1241, 1245, 1249, 1252, 1256,
            1260, 1264, 1268, 1272, 1276,
            1280, 1283, 1287, 1291, 1295,
            1299, 1303, 1307, 1311, 1315,
            1319, 1323, 1328, 1332, 1336,
            1340, 1344, 1348, 1352, 1356,
            1360, 1365, 1369, 1373, 1377,
            1382, 1386, 1390, 1394, 1399,
            1403, 1407, 1412, 1416, 1420,
            1425, 1429, 1433, 1438, 1442,
            1447, 1451, 1455, 1460, 1464,
            1469, 1473, 1478, 1483, 1487,
            1492, 1496, 1501, 1505, 1510,
            1515, 1519, 1524, 1529, 1533,
            1538, 1543, 1548, 1552, 1557,
            1562, 1567, 1572, 1576, 1581,
            1586, 1591, 1596, 1601, 1606,
            1611, 1616, 1620, 1625, 1630,
            1635, 1640, 1646, 1651, 1656,
            1661, 1666, 1671, 1676, 1681,
            1686, 1692, 1697, 1702, 1707,
            1712, 1718, 1723, 1728, 1734,
            1739, 1744, 1750, 1755, 1760,
            1766, 1771, 1777, 1782, 1788,
            1793, 1799, 1804, 1810, 1815,
            1821, 1826, 1832, 1838, 1843,
            1849, 1855, 1860, 1866, 1872,
            1878, 1883, 1889, 1895, 1901,
            1907, 1912, 1918, 1924, 1930,
            1936, 1942, 1948, 1954, 1960,
            1966, 1972, 1978, 1984, 1990,
            1996, 2003, 2009, 2015, 2021,
            2027, 2033, 2040, 2046, 2052,
            2059, 2065, 2071, 2078, 2084,
            2090, 2097, 2103, 2110, 2116,
            2123, 2129, 2136, 2142, 2149,
            2156, 2162, 2169, 2175, 2182,
            2189, 2196, 2202, 2209, 2216,
            2223, 2230, 2236, 2243, 2250,
            2257, 2264, 2271, 2278, 2285,
            2292, 2299, 2306, 2313, 2320,
            2327, 2335, 2342, 2349, 2356,
            2363, 2371, 2378, 2385, 2393,
            2400, 2407, 2415, 2422, 2430,
            2437, 2444, 2452, 2460, 2467,
            2475, 2482, 2490, 2498, 2505,
            2513, 2521, 2528, 2536, 2544,
            2552, 2560, 2567, 2575, 2583,
            2591, 2599, 2607, 2615, 2623,
            2631, 2639, 2647, 2656, 2664,
            2672, 2680, 2688, 2697, 2705,
            2713, 2722, 2730, 2738, 2747,
            2755, 2764, 2772, 2781, 2789,
            2798, 2806, 2815, 2824, 2832,
            2841, 2850, 2858, 2867, 2876,
            2885, 2894, 2903, 2912, 2921,
            2930, 2939, 2948, 2957, 2966,
            2975, 2984, 2993, 3002, 3012,
            3021, 3030, 3039, 3049, 3058,
            3067, 3077, 3086, 3096, 3105,
            3115, 3124, 3134, 3144, 3153,
            3163, 3173, 3183, 3192, 3202,
            3212, 3222, 3232, 3242, 3252,
            3262, 3272, 3282, 3292, 3302,
            3312, 3322, 3332, 3343, 3353,
            3363, 3374, 3384, 3394, 3405,
            3415, 3426, 3436, 3447, 3457,
            3468, 3479, 3489, 3500, 3511,
            3522, 3532, 3543, 3554, 3565,
            3576, 3587, 3598, 3609, 3620,
            3631, 3642, 3654, 3665, 3676,
            3687, 3699, 3710, 3722, 3733,
            3744, 3756, 3767, 3779, 3791,
            3802, 3814, 3826, 3837, 3849,
            3861, 3873, 3885, 3897, 3909,
            3921, 3933, 3945, 3957, 3969,
            3981, 3994, 4006, 4018, 4031,
            4043, 4055, 4068, 4080, 4093,
            4105, 4118, 4131, 4143, 4156,
            4169, 4182, 4195, 4207, 4220,
            4233, 4246, 4259, 4272, 4286,
            4299, 4312, 4325, 4339, 4352,
            4365, 4379, 4392, 4406, 4419,
            4433, 4446, 4460, 4474, 4487,
            4501, 4515, 4529, 4543, 4557,
            4571, 4585, 4599, 4613, 4627,
            4641, 4656, 4670, 4684, 4699,
            4713, 4728, 4742, 4757, 4771,
            4786, 4801, 4816, 4830, 4845,
            4860, 4875, 4890, 4905, 4920,
            4935, 4950, 4966, 4981, 4996,
            5011, 5027, 5042, 5058, 5073,
            5089, 5105, 5120, 5136, 5152,
            5168, 5183, 5199, 5215, 5231,
            5247, 5264, 5280, 5296, 5312,
            5329, 5345, 5361, 5378, 5394,
            5411, 5428, 5444, 5461, 5478,
            5495, 5512, 5528, 5545, 5562,
            5580, 5597, 5614, 5631, 5648,
            5666, 5683, 5701, 5718, 5736,
            5753, 5771, 5789, 5807, 5824,
            5842, 5860, 5878, 5896, 5914,
            5933, 5951, 5969, 5987, 6006,
            6024, 6043, 6061, 6080, 6099,
            6117, 6136, 6155, 6174, 6193,
            6212, 6231, 6250, 6269, 6289,
            6308, 6327, 6347, 6366, 6386,
            6406, 6425, 6445, 6465, 6485,
            6505, 6525, 6545, 6565, 6585,
            6605, 6625, 6646, 6666, 6687,
            6707, 6728, 6749, 6769, 6790,
            6811, 6832, 6853, 6874, 6895,
            6916, 6937, 6959, 6980, 7002,
            7023, 7045, 7066, 7088, 7110,
            7132, 7154, 7176, 7198, 7220,
            7242, 7264, 7286, 7309, 7331,
            7354, 7376, 7399, 7422, 7445,
            7468, 7490, 7513, 7537, 7560,
            7583, 7606, 7630, 7653, 7677,
            7700, 7724, 7748, 7771, 7795,
            7819, 7843, 7867, 7892, 7916,
            7940, 7964, 7989, 8014, 8038,
            8063, 8088, 8112, 8137, 8162,
            8187, 8213, 8238, 8263, 8289,
            8314, 8340, 8365, 8391, 8417,
            8443, 8468, 8495, 8521, 8547,
            8573, 8599, 8626, 8652, 8679,
            8706, 8732, 8759, 8786, 8813,
            8840, 8867, 8895, 8922, 8949,
            8977, 9004, 9032, 9060, 9088,
            9116, 9144, 9172, 9200, 9228,
            9256, 9285, 9313, 9342, 9371,
            9400, 9428, 9457, 9486, 9516,
            9545, 9574, 9604, 9633, 9663,
            9692, 9722, 9752, 9782, 9812,
            9842, 9872, 9903, 9933, 9964,
            9994, 10025, 10056, 10087, 10118,
            10149, 10180, 10211, 10243, 10274,
            10306, 10337, 10369, 10401, 10433,
            10465, 10497, 10529, 10562, 10594,
            10627, 10659, 10692, 10725, 10758,
            10791, 10824, 10858, 10891, 10924,
            10958, 10992, 11025, 11059, 11093,
            11127, 11161, 11196, 11230, 11265,
            11299, 11334, 11369, 11404, 11439,
            11474, 11509, 11545, 11580, 11616,
            11651, 11687, 11723, 11759, 11795,
            11831, 11868, 11904, 11941, 11978,
            12014, 12051, 12088, 12125, 12163,
            12200, 12238, 12275, 12313, 12351,
            12389, 12427, 12465, 12503, 12542,
            12580, 12619, 12658, 12696, 12735,
            12775, 12814, 12853, 12893, 12932,
            12972, 13012, 13052, 13092, 13132,
            13173, 13213, 13254, 13294, 13335,
            13376, 13417, 13459, 13500, 13541,
            13583, 13625, 13667, 13709, 13751,
            13793, 13835, 13878, 13920, 13963,
            14006, 14049, 14092, 14136, 14179,
            14223, 14266, 14310, 14354, 14398,
            14443, 14487, 14531, 14576, 14621,
            14666, 14711, 14756, 14801, 14847,
            14892, 14938, 14984, 15030, 15076,
            15123, 15169, 15216, 15263, 15309,
            15356, 15404, 15451, 15498, 15546,
            15594, 15642, 15690, 15738, 15786,
            15835, 15884, 15932, 15981, 16030,
            16080, 16129, 16179, 16228, 16278,
            16328, 16378, 16429, 16479, 16530,
            16581, 16632, 16683, 16734, 16785,
            16837, 16889, 16941, 16993, 17045,
            17097, 17150, 17202, 17255, 17308,
            17361, 17415, 17468, 17522, 17576,
            17630, 17684, 17738, 17793, 17848,
            17902, 17957, 18013, 18068, 18123,
            18179, 18235, 18291, 18347, 18404,
            18460, 18517, 18574, 18631, 18688,
            18746, 18803, 18861, 18919, 18977,
            19035, 19094, 19152, 19211, 19270,
            19330, 19389, 19448, 19508, 19568,
            19628, 19689, 19749, 19810, 19871,
            19932, 19993, 20054, 20116, 20178,
            20240, 20302, 20364, 20427, 20490,
            20553, 20616, 20679, 20743, 20806,
            20870, 20935, 20999, 21063, 21128,
            21193, 21258, 21323, 21389, 21455,
            21521, 21587, 21653, 21720, 21786,
            21853, 21920, 21988, 22055, 22123,
            22191, 22259, 22328, 22396, 22465,
            22534, 22603, 22673, 22742, 22812,
            22882, 22953, 23023, 23094, 23165,
            23236, 23308, 23379, 23451, 23523,
            23595, 23668, 23741, 23814, 23887,
            23960, 24034, 24108, 24182, 24256,
            24330, 24405, 24480, 24555, 24631,
            24707, 24783, 24859, 24935, 25012,
            25089, 25166, 25243, 25320, 25398,
            25476, 25555, 25633, 25712, 25791,
            25870, 25950, 26029, 26109, 26190,
            26270, 26351, 26432, 26513, 26594,
            26676, 26758, 26840, 26923, 27006,
            27088, 27172, 27255, 27339, 27423,
            27507, 27592, 27677, 27762, 27847,
            27932, 28018, 28104, 28191, 28277,
            28364, 28451, 28539, 28626, 28714,
            28803, 28891, 28980, 29069, 29158,
            29248, 29338, 29428, 29518, 29609,
            29700, 29791, 29883, 29975, 30067,
            30159, 30252, 30345, 30438, 30532,
            30625, 30719, 30814, 30909, 31003,
            31099, 31194, 31290, 31386, 31483,
            31579, 31677, 31774, 31871, 31969,
            32068, 32166, 32265, 32364, 32464,
            32563, 32663, 32764, 32864, 32965,
            33067, 33168, 33270, 33372, 33475,
            33578, 33681, 33785, 33888, 33992,
            34097, 34202, 34307, 34412, 34518,
            34624, 34730, 34837, 34944, 35051,
            35159, 35267, 35376, 35484, 35593,
            35703, 35812, 35922, 36033, 36144,
            36255, 36366, 36478, 36590, 36702,
            36815, 36928, 37042, 37155, 37270,
            37384, 37499, 37614, 37730, 37846,
            37962, 38079, 38196, 38313, 38431,
            38549, 38667, 38786, 38905, 39025,
            39145, 39265, 39386, 39507, 39628,
            39750, 39872, 39994, 40117, 40241,
            40364, 40488, 40613, 40737, 40863,
            40988, 41114, 41240, 41367, 41494,
            41622, 41750, 41878, 42007, 42136,
            42265, 42395, 42525, 42656, 42787,
            42919, 43050, 43183, 43315, 43448,
            43582, 43716, 43850, 43985, 44120,
            44256, 44392, 44528, 44665, 44802,
            44940, 45078, 45216, 45355, 45495,
            45634, 45775, 45915, 46056, 46198,
            46340, 46482, 46625, 46768, 46912,
            47056, 47201, 47346, 47491, 47637,
            47784, 47930, 48078, 48225, 48374,
            48522, 48671, 48821, 48971, 49121,
            49272, 49424, 49576, 49728, 49881,
            50034, 50188, 50342, 50497, 50652,
            50807, 50963, 51120, 51277, 51435,
            51593, 51751, 51910, 52070, 52230,
            52390, 52551, 52713, 52875, 53037,
            53200, 53364, 53528, 53692, 53857,
            54022, 54188, 54355, 54522, 54690,
            54858, 55026, 55195, 55365, 55535,
            55706, 55877, 56048, 56221, 56393,
            56567, 56740, 56915, 57090, 57265,
            57441, 57618, 57795, 57972, 58150,
            58329, 58508, 58688, 58868, 59049,
            59231, 59413, 59595, 59778, 59962,
            60146, 60331, 60516, 60702, 60889,
            61076, 61264, 61452, 61641, 61830,
            62020, 62211, 62402, 62594, 62786,
            62979, 63172, 63366, 63561, 63756,
            63952, 64149, 64346, 64544, 64742,
            64941, 65140, 65341, 65541, 65743,
            65945, 66147, 66351, 66555, 66759,
            66964, 67170, 67376, 67583, 67791,
            67999, 68208, 68418, 68628, 68839,
            69050, 69263, 69475, 69689, 69903,
            70118, 70333, 70549, 70766, 70984,
            71202, 71421, 71640, 71860, 72081,
            72302, 72525, 72747, 72971, 73195,
            73420, 73646, 73872, 74099, 74327,
            74555, 74784, 75014, 75244, 75476,
            75707, 75940, 76173, 76407, 76642,
            76878, 77114, 77351, 77589, 77827,
            78066, 78306, 78547, 78788, 79030,
            79273, 79516, 79761, 80006, 80252,
            80498, 80746, 80994, 81243, 81492,
            81743, 81994, 82246, 82498, 82752,
            83006, 83261, 83517, 83774, 84031,
            84289, 84548, 84808, 85069, 85330,
            85592, 85855, 86119, 86384, 86649,
            86915, 87182, 87450, 87719, 87989,
            88259, 88530, 88802, 89075, 89349,
            89623, 89899, 90175, 90452, 90730,
            91009, 91288, 91569, 91850, 92132,
            92415, 92699, 92984, 93270, 93557,
            93844, 94132, 94422, 94712, 95003,
            95295, 95587, 95881, 96176, 96471,
            96768, 97065, 97363, 97662, 97963,
            98264, 98565, 98868, 99172, 99477,
            99783, 100089, 100397, 100705, 101015,
            101325, 101636, 101949, 102262, 102576,
            102891, 103207, 103525, 103843, 104162,
            104482, 104803, 105125, 105448, 105772,
            106097, 106423, 106750, 107078, 107407,
            107737, 108068, 108400, 108733, 109067,
            109402, 109738, 110076, 110414, 110753,
            111093, 111435, 111777, 112121, 112465,
            112811, 113157, 113505, 113854, 114204,
            114555, 114907, 115260, 115614, 115969,
            116325, 116683, 117041, 117401, 117762,
            118124, 118486, 118851, 119216, 119582,
            119949, 120318, 120688, 121059, 121431,
            121804, 122178, 122553, 122930, 123308,
            123687, 124067, 124448, 124830, 125214,
            125598, 125984, 126371, 126760, 127149,
            127540, 127932, 128325, 128719, 129115,
            129511, 129909, 130309, 130709, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071
         ) ),
        max_error = cms.double(5748.616225984908),
        output_scale_factor = cms.double(0.953125),
        unused_lsbs = cms.uint32(2)
    ),
    inv_mass_checks = cms.untracked.bool(False),
    maxDR = cms.double(1.2),
    maxDz = cms.double(1),
    minDR = cms.double(0),
    os = cms.bool(True),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    sanity_checks = cms.untracked.bool(False),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    )
)


process.DoubleTkMuon4p5OSEr2Mass7to18 = cms.EDFilter("L1GTDoubleObjectCond",
    collection1 = cms.PSet(
        maxEta = cms.double(2.0),
        minEta = cms.double(-2.0),
        minQualityScore = cms.uint32(0),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 0.83, 1.24),
        regionsMinPt = cms.vdouble(4, 4, 4),
        tag = cms.InputTag("l1tGTProducer","GMTTkMuons")
    ),
    collection2 = cms.PSet(
        maxEta = cms.double(2.0),
        minEta = cms.double(-2.0),
        minQualityScore = cms.uint32(0),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 0.83, 1.24),
        regionsMinPt = cms.vdouble(4, 4, 4),
        tag = cms.InputTag("l1tGTProducer","GMTTkMuons")
    ),
    cos_phi_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            487, 487, 487, 487, 487,
            487, 487, 487, 487, 487,
            487, 486, 486, 486, 486,
            486, 486, 486, 485, 485,
            485, 485, 485, 485, 484,
            484, 484, 484, 484, 483,
            483, 483, 483, 483, 482,
            482, 482, 482, 481, 481,
            481, 481, 480, 480, 480,
            480, 479, 479, 479, 478,
            478, 478, 478, 477, 477,
            477, 476, 476, 476, 475,
            475, 475, 474, 474, 474,
            473, 473, 472, 472, 472,
            471, 471, 471, 470, 470,
            469, 469, 468, 468, 468,
            467, 467, 466, 466, 465,
            465, 465, 464, 464, 463,
            463, 462, 462, 461, 461,
            460, 460, 459, 459, 458,
            458, 457, 457, 456, 456,
            455, 454, 454, 453, 453,
            452, 452, 451, 451, 450,
            449, 449, 448, 448, 447,
            446, 446, 445, 445, 444,
            443, 443, 442, 441, 441,
            440, 440, 439, 438, 438,
            437, 436, 436, 435, 434,
            434, 433, 432, 431, 431,
            430, 429, 429, 428, 427,
            426, 426, 425, 424, 423,
            423, 422, 421, 420, 420,
            419, 418, 417, 417, 416,
            415, 414, 413, 413, 412,
            411, 410, 409, 409, 408,
            407, 406, 405, 405, 404,
            403, 402, 401, 400, 399,
            399, 398, 397, 396, 395,
            394, 393, 392, 392, 391,
            390, 389, 388, 387, 386,
            385, 384, 383, 382, 381,
            381, 380, 379, 378, 377,
            376, 375, 374, 373, 372,
            371, 370, 369, 368, 367,
            366, 365, 364, 363, 362,
            361, 360, 359, 358, 357,
            356, 355, 354, 353, 352,
            351, 350, 349, 348, 347,
            346, 345, 343, 342, 341,
            340, 339, 338, 337, 336,
            335, 334, 333, 332, 330,
            329, 328, 327, 326, 325,
            324, 323, 322, 320, 319,
            318, 317, 316, 315, 314,
            312, 311, 310, 309, 308,
            307, 306, 304, 303, 302,
            301, 300, 298, 297, 296,
            295, 294, 293, 291, 290,
            289, 288, 286, 285, 284,
            283, 282, 280, 279, 278,
            277, 275, 274, 273, 272,
            270, 269, 268, 267, 265,
            264, 263, 262, 260, 259,
            258, 257, 255, 254, 253,
            252, 250, 249, 248, 246,
            245, 244, 242, 241, 240,
            239, 237, 236, 235, 233,
            232, 231, 229, 228, 227,
            225, 224, 223, 221, 220,
            219, 217, 216, 215, 213,
            212, 211, 209, 208, 207,
            205, 204, 203, 201, 200,
            198, 197, 196, 194, 193,
            192, 190, 189, 187, 186,
            185, 183, 182, 181, 179,
            178, 176, 175, 174, 172,
            171, 169, 168, 167, 165,
            164, 162, 161, 159, 158,
            157, 155, 154, 152, 151,
            150, 148, 147, 145, 144,
            142, 141, 140, 138, 137,
            135, 134, 132, 131, 129,
            128, 127, 125, 124, 122,
            121, 119, 118, 116, 115,
            113, 112, 111, 109, 108,
            106, 105, 103, 102, 100,
            99, 97, 96, 94, 93,
            92, 90, 89, 87, 86,
            84, 83, 81, 80, 78,
            77, 75, 74, 72, 71,
            69, 68, 66, 65, 63,
            62, 60, 59, 58, 56,
            55, 53, 52, 50, 49,
            47, 46, 44, 43, 41,
            40, 38, 37, 35, 34,
            32, 31, 29, 28, 26,
            25, 23, 22, 20, 19,
            17, 16, 14, 13, 11,
            10, 8, 7, 5, 4,
            2, 1, -1, -2, -4,
            -5, -7, -8, -10, -11,
            -13, -14, -16, -17, -19,
            -20, -22, -23, -25, -26,
            -28, -29, -31, -32, -34,
            -35, -37, -38, -40, -41,
            -43, -44, -46, -47, -49,
            -50, -52, -53, -55, -56,
            -58, -59, -60, -62, -63,
            -65, -66, -68, -69, -71,
            -72, -74, -75, -77, -78,
            -80, -81, -83, -84, -86,
            -87, -89, -90, -92, -93,
            -94, -96, -97, -99, -100,
            -102, -103, -105, -106, -108,
            -109, -111, -112, -113, -115,
            -116, -118, -119, -121, -122,
            -124, -125, -127, -128, -129,
            -131, -132, -134, -135, -137,
            -138, -140, -141, -142, -144,
            -145, -147, -148, -150, -151,
            -152, -154, -155, -157, -158,
            -159, -161, -162, -164, -165,
            -167, -168, -169, -171, -172,
            -174, -175, -176, -178, -179,
            -181, -182, -183, -185, -186,
            -187, -189, -190, -192, -193,
            -194, -196, -197, -198, -200,
            -201, -203, -204, -205, -207,
            -208, -209, -211, -212, -213,
            -215, -216, -217, -219, -220,
            -221, -223, -224, -225, -227,
            -228, -229, -231, -232, -233,
            -235, -236, -237, -239, -240,
            -241, -242, -244, -245, -246,
            -248, -249, -250, -252, -253,
            -254, -255, -257, -258, -259,
            -260, -262, -263, -264, -265,
            -267, -268, -269, -270, -272,
            -273, -274, -275, -277, -278,
            -279, -280, -282, -283, -284,
            -285, -286, -288, -289, -290,
            -291, -293, -294, -295, -296,
            -297, -298, -300, -301, -302,
            -303, -304, -306, -307, -308,
            -309, -310, -311, -312, -314,
            -315, -316, -317, -318, -319,
            -320, -322, -323, -324, -325,
            -326, -327, -328, -329, -330,
            -332, -333, -334, -335, -336,
            -337, -338, -339, -340, -341,
            -342, -343, -345, -346, -347,
            -348, -349, -350, -351, -352,
            -353, -354, -355, -356, -357,
            -358, -359, -360, -361, -362,
            -363, -364, -365, -366, -367,
            -368, -369, -370, -371, -372,
            -373, -374, -375, -376, -377,
            -378, -379, -380, -381, -381,
            -382, -383, -384, -385, -386,
            -387, -388, -389, -390, -391,
            -392, -392, -393, -394, -395,
            -396, -397, -398, -399, -399,
            -400, -401, -402, -403, -404,
            -405, -405, -406, -407, -408,
            -409, -409, -410, -411, -412,
            -413, -413, -414, -415, -416,
            -417, -417, -418, -419, -420,
            -420, -421, -422, -423, -423,
            -424, -425, -426, -426, -427,
            -428, -429, -429, -430, -431,
            -431, -432, -433, -434, -434,
            -435, -436, -436, -437, -438,
            -438, -439, -440, -440, -441,
            -441, -442, -443, -443, -444,
            -445, -445, -446, -446, -447,
            -448, -448, -449, -449, -450,
            -451, -451, -452, -452, -453,
            -453, -454, -454, -455, -456,
            -456, -457, -457, -458, -458,
            -459, -459, -460, -460, -461,
            -461, -462, -462, -463, -463,
            -464, -464, -465, -465, -465,
            -466, -466, -467, -467, -468,
            -468, -468, -469, -469, -470,
            -470, -471, -471, -471, -472,
            -472, -472, -473, -473, -474,
            -474, -474, -475, -475, -475,
            -476, -476, -476, -477, -477,
            -477, -478, -478, -478, -478,
            -479, -479, -479, -480, -480,
            -480, -480, -481, -481, -481,
            -481, -482, -482, -482, -482,
            -483, -483, -483, -483, -483,
            -484, -484, -484, -484, -484,
            -485, -485, -485, -485, -485,
            -485, -486, -486, -486, -486,
            -486, -486, -486, -487, -487,
            -487, -487, -487, -487, -487,
            -487, -487, -487, -487, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488
         ) ),
        max_error = cms.double(0.0025338281044886835),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            489, 489, 489, 489, 489,
            489, 489, 489, 489, 489,
            489, 490, 490, 490, 490,
            490, 490, 490, 491, 491,
            491, 491, 491, 491, 492,
            492, 492, 492, 492, 493,
            493, 493, 493, 493, 494,
            494, 494, 494, 495, 495,
            495, 495, 496, 496, 496,
            496, 497, 497, 497, 498,
            498, 498, 499, 499, 499,
            499, 500, 500, 500, 501,
            501, 502, 502, 502, 503,
            503, 503, 504, 504, 504,
            505, 505, 506, 506, 507,
            507, 507, 508, 508, 509,
            509, 510, 510, 510, 511,
            511, 512, 512, 513, 513,
            514, 514, 515, 515, 516,
            516, 517, 517, 518, 518,
            519, 520, 520, 521, 521,
            522, 522, 523, 523, 524,
            525, 525, 526, 526, 527,
            528, 528, 529, 530, 530,
            531, 531, 532, 533, 533,
            534, 535, 535, 536, 537,
            537, 538, 539, 540, 540,
            541, 542, 542, 543, 544,
            545, 545, 546, 547, 548,
            548, 549, 550, 551, 551,
            552, 553, 554, 555, 555,
            556, 557, 558, 559, 560,
            560, 561, 562, 563, 564,
            565, 566, 567, 567, 568,
            569, 570, 571, 572, 573,
            574, 575, 576, 577, 577,
            578, 579, 580, 581, 582,
            583, 584, 585, 586, 587,
            588, 589, 590, 591, 592,
            593, 594, 595, 596, 598,
            599, 600, 601, 602, 603,
            604, 605, 606, 607, 608,
            610, 611, 612, 613, 614,
            615, 616, 618, 619, 620,
            621, 622, 623, 625, 626,
            627, 628, 629, 631, 632,
            633, 634, 636, 637, 638,
            639, 641, 642, 643, 644,
            646, 647, 648, 650, 651,
            652, 654, 655, 656, 658,
            659, 660, 662, 663, 665,
            666, 667, 669, 670, 672,
            673, 674, 676, 677, 679,
            680, 682, 683, 685, 686,
            687, 689, 690, 692, 693,
            695, 697, 698, 700, 701,
            703, 704, 706, 707, 709,
            710, 712, 714, 715, 717,
            719, 720, 722, 723, 725,
            727, 728, 730, 732, 733,
            735, 737, 738, 740, 742,
            744, 745, 747, 749, 750,
            752, 754, 756, 758, 759,
            761, 763, 765, 767, 768,
            770, 772, 774, 776, 778,
            779, 781, 783, 785, 787,
            789, 791, 793, 795, 796,
            798, 800, 802, 804, 806,
            808, 810, 812, 814, 816,
            818, 820, 822, 824, 826,
            828, 830, 832, 835, 837,
            839, 841, 843, 845, 847,
            849, 851, 854, 856, 858,
            860, 862, 864, 867, 869,
            871, 873, 875, 878, 880,
            882, 884, 887, 889, 891,
            894, 896, 898, 900, 903,
            905, 907, 910, 912, 915,
            917, 919, 922, 924, 927,
            929, 931, 934, 936, 939,
            941, 944, 946, 949, 951,
            954, 956, 959, 961, 964,
            966, 969, 971, 974, 977,
            979, 982, 984, 987, 990,
            992, 995, 998, 1000, 1003,
            1006, 1008, 1011, 1014, 1017,
            1019, 1022, 1025, 1028, 1030,
            1033, 1036, 1039, 1042, 1044,
            1047, 1050, 1053, 1056, 1059,
            1062, 1065, 1067, 1070, 1073,
            1076, 1079, 1082, 1085, 1088,
            1091, 1094, 1097, 1100, 1103,
            1106, 1109, 1112, 1115, 1118,
            1122, 1125, 1128, 1131, 1134,
            1137, 1140, 1143, 1147, 1150,
            1153, 1156, 1159, 1163, 1166,
            1169, 1172, 1176, 1179, 1182,
            1186, 1189, 1192, 1196, 1199,
            1202, 1206, 1209, 1212, 1216,
            1219, 1223, 1226, 1230, 1233,
            1237, 1240, 1244, 1247, 1251,
            1254, 1258, 1261, 1265, 1268,
            1272, 1276, 1279, 1283, 1287,
            1290, 1294, 1298, 1301, 1305,
            1309, 1312, 1316, 1320, 1324,
            1327, 1331, 1335, 1339, 1343,
            1347, 1350, 1354, 1358, 1362,
            1366, 1370, 1374, 1378, 1382,
            1386, 1390, 1394, 1398, 1402,
            1406, 1410, 1414, 1418, 1422,
            1426, 1430, 1434, 1439, 1443,
            1447, 1451, 1455, 1459, 1464,
            1468, 1472, 1476, 1481, 1485,
            1489, 1494, 1498, 1502, 1507,
            1511, 1516, 1520, 1524, 1529,
            1533, 1538, 1542, 1547, 1551,
            1556, 1560, 1565, 1569, 1574,
            1579, 1583, 1588, 1592, 1597,
            1602, 1606, 1611, 1616, 1621,
            1625, 1630, 1635, 1640, 1645,
            1649, 1654, 1659, 1664, 1669,
            1674, 1679, 1684, 1689, 1693,
            1698, 1703, 1708, 1714, 1719,
            1724, 1729, 1734, 1739, 1744,
            1749, 1754, 1760, 1765, 1770,
            1775, 1780, 1786, 1791, 1796,
            1802, 1807, 1812, 1818, 1823,
            1828, 1834, 1839, 1845, 1850,
            1856, 1861, 1867, 1872, 1878,
            1883, 1889, 1894, 1900, 1906,
            1911, 1917, 1923, 1929, 1934,
            1940, 1946, 1952, 1957, 1963,
            1969, 1975, 1981, 1987, 1993,
            1999, 2004, 2010, 2016, 2022,
            2028, 2035, 2041, 2047, 2053,
            2059, 2065, 2071, 2077, 2084,
            2090, 2096, 2102, 2109, 2115,
            2121, 2128, 2134, 2140, 2147,
            2153, 2160, 2166, 2173, 2179,
            2186, 2192, 2199, 2205, 2212,
            2219, 2225, 2232, 2239, 2245,
            2252, 2259, 2266, 2272, 2279,
            2286, 2293, 2300, 2307, 2314,
            2321, 2328, 2335, 2342, 2349,
            2356, 2363, 2370, 2377, 2384,
            2391, 2398, 2406, 2413, 2420,
            2427, 2435, 2442, 2449, 2457,
            2464, 2472, 2479, 2487, 2494,
            2502, 2509, 2517, 2524, 2532,
            2539, 2547, 2555, 2563, 2570,
            2578, 2586, 2594, 2601, 2609,
            2617, 2625, 2633, 2641, 2649,
            2657, 2665, 2673, 2681, 2689,
            2697, 2705, 2714, 2722, 2730,
            2738, 2747, 2755, 2763, 2772,
            2780, 2788, 2797, 2805, 2814,
            2822, 2831, 2839, 2848, 2857,
            2865, 2874, 2883, 2891, 2900,
            2909, 2918, 2927, 2935, 2944,
            2953, 2962, 2971, 2980, 2989,
            2998, 3007, 3016, 3026, 3035,
            3044, 3053, 3062, 3072, 3081,
            3090, 3100, 3109, 3119, 3128,
            3138, 3147, 3157, 3166, 3176,
            3186, 3195, 3205, 3215, 3224,
            3234, 3244, 3254, 3264, 3274,
            3284, 3294, 3304, 3314, 3324,
            3334, 3344, 3354, 3364, 3375,
            3385, 3395, 3405, 3416, 3426,
            3437, 3447, 3458, 3468, 3479,
            3489, 3500, 3510, 3521, 3532,
            3543, 3553, 3564, 3575, 3586,
            3597, 3608, 3619, 3630, 3641,
            3652, 3663, 3674, 3685, 3697,
            3708, 3719, 3730, 3742, 3753,
            3765, 3776, 3788, 3799, 3811,
            3822, 3834, 3846, 3857, 3869,
            3881, 3893, 3905, 3917, 3929,
            3941, 3953, 3965, 3977, 3989,
            4001, 4013, 4025, 4038, 4050,
            4062, 4075, 4087, 4100, 4112,
            4125, 4137, 4150, 4163, 4175,
            4188, 4201, 4214, 4226, 4239,
            4252, 4265, 4278, 4291, 4304,
            4318, 4331, 4344, 4357, 4371,
            4384, 4397, 4411, 4424, 4438,
            4451, 4465, 4479, 4492, 4506,
            4520, 4533, 4547, 4561, 4575,
            4589, 4603, 4617, 4631, 4645,
            4660, 4674, 4688, 4703, 4717,
            4731, 4746, 4760, 4775, 4789,
            4804, 4819, 4833, 4848, 4863,
            4878, 4893, 4908, 4923, 4938,
            4953, 4968, 4983, 4999, 5014,
            5029, 5045, 5060, 5075, 5091,
            5107, 5122, 5138, 5154, 5169,
            5185, 5201, 5217, 5233, 5249,
            5265, 5281, 5297, 5313, 5330,
            5346, 5362, 5379, 5395, 5412,
            5428, 5445, 5462, 5478, 5495,
            5512, 5529, 5546, 5563, 5580,
            5597, 5614, 5631, 5648, 5666,
            5683, 5700, 5718, 5735, 5753,
            5770, 5788, 5806, 5824, 5841,
            5859, 5877, 5895, 5913, 5931,
            5950, 5968, 5986, 6004, 6023,
            6041, 6060, 6078, 6097, 6116,
            6134, 6153, 6172, 6191, 6210,
            6229, 6248, 6267, 6286, 6305,
            6325, 6344, 6364, 6383, 6403,
            6422, 6442, 6462, 6481, 6501,
            6521, 6541, 6561, 6581, 6602,
            6622, 6642, 6662, 6683, 6703,
            6724, 6744, 6765, 6786, 6807,
            6828, 6848, 6869, 6891, 6912,
            6933, 6954, 6975, 6997, 7018,
            7040, 7061, 7083, 7105, 7126,
            7148, 7170, 7192, 7214, 7236,
            7259, 7281, 7303, 7325, 7348,
            7370, 7393, 7416, 7438, 7461,
            7484, 7507, 7530, 7553, 7576,
            7600, 7623, 7646, 7670, 7693,
            7717, 7741, 7764, 7788, 7812,
            7836, 7860, 7884, 7908, 7932,
            7957, 7981, 8006, 8030, 8055,
            8080, 8104, 8129, 8154, 8179,
            8204, 8229, 8255, 8280, 8305,
            8331, 8356, 8382, 8408, 8434,
            8459, 8485, 8511, 8537, 8564,
            8590, 8616, 8643, 8669, 8696,
            8722, 8749, 8776, 8803, 8830,
            8857, 8884, 8912, 8939, 8966,
            8994, 9021, 9049, 9077, 9105,
            9133, 9161, 9189, 9217, 9245,
            9274, 9302, 9331, 9359, 9388,
            9417, 9446, 9475, 9504, 9533,
            9562, 9591, 9621, 9650, 9680,
            9710, 9740, 9769, 9799, 9830,
            9860, 9890, 9920, 9951, 9981,
            10012, 10043, 10073, 10104, 10135,
            10166, 10198, 10229, 10260, 10292,
            10323, 10355, 10387, 10419, 10451,
            10483, 10515, 10547, 10580, 10612,
            10645, 10677, 10710, 10743, 10776,
            10809, 10842, 10876, 10909, 10942,
            10976, 11010, 11044, 11077, 11111,
            11146, 11180, 11214, 11248, 11283,
            11318, 11352, 11387, 11422, 11457,
            11492, 11528, 11563, 11599, 11634,
            11670, 11706, 11742, 11778, 11814,
            11850, 11887, 11923, 11960, 11996,
            12033, 12070, 12107, 12144, 12182,
            12219, 12257, 12294, 12332, 12370,
            12408, 12446, 12484, 12522, 12561,
            12599, 12638, 12677, 12716, 12755,
            12794, 12833, 12873, 12912, 12952,
            12992, 13032, 13072, 13112, 13152,
            13192, 13233, 13274, 13314, 13355,
            13396, 13437, 13479, 13520, 13561,
            13603, 13645, 13687, 13729, 13771,
            13813, 13856, 13898, 13941, 13984,
            14027, 14070, 14113, 14156, 14200,
            14243, 14287, 14331, 14375, 14419,
            14463, 14508, 14552, 14597, 14642,
            14687, 14732, 14777, 14823, 14868,
            14914, 14960, 15005, 15052, 15098,
            15144, 15191, 15237, 15284, 15331,
            15378, 15425, 15473, 15520, 15568,
            15616, 15664, 15712, 15760, 15808,
            15857, 15906, 15955, 16004, 16053,
            16102, 16151, 16201, 16251, 16301,
            16351, 16401, 16451, 16502, 16553,
            16603, 16654, 16706, 16757, 16808,
            16860, 16912, 16964, 17016, 17068,
            17121, 17173, 17226, 17279, 17332,
            17385, 17438, 17492, 17546, 17600,
            17654, 17708, 17762, 17817, 17872,
            17926, 17982, 18037, 18092, 18148,
            18203, 18259, 18315, 18372, 18428,
            18485, 18542, 18598, 18656, 18713,
            18770, 18828, 18886, 18944, 19002,
            19060, 19119, 19178, 19237, 19296,
            19355, 19414, 19474, 19534, 19594,
            19654, 19714, 19775, 19836, 19897,
            19958, 20019, 20081, 20142, 20204,
            20266, 20328, 20391, 20454, 20516,
            20579, 20643, 20706, 20770, 20833,
            20897, 20962, 21026, 21091, 21155,
            21220, 21286, 21351, 21417, 21482,
            21548, 21615, 21681, 21748, 21814,
            21881, 21949, 22016, 22084, 22151,
            22220, 22288, 22356, 22425, 22494,
            22563, 22632, 22702, 22771, 22841,
            22912, 22982, 23053, 23123, 23194,
            23266, 23337, 23409, 23481, 23553,
            23625, 23698, 23771, 23844, 23917,
            23990, 24064, 24138, 24212, 24287,
            24361, 24436, 24511, 24586, 24662,
            24738, 24814, 24890, 24966, 25043,
            25120, 25197, 25275, 25352, 25430,
            25508, 25587, 25665, 25744, 25823,
            25902, 25982, 26062, 26142, 26222,
            26303, 26384, 26465, 26546, 26627,
            26709, 26791, 26874, 26956, 27039,
            27122, 27205, 27289, 27373, 27457,
            27541, 27626, 27711, 27796, 27881,
            27967, 28053, 28139, 28226, 28312,
            28399, 28486, 28574, 28662, 28750,
            28838, 28927, 29016, 29105, 29194,
            29284, 29374, 29464, 29555, 29645,
            29736, 29828, 29919, 30011, 30104,
            30196, 30289, 30382, 30475, 30569,
            30663, 30757, 30851, 30946, 31041,
            31137, 31232, 31328, 31425, 31521,
            31618, 31715, 31813, 31910, 32008,
            32107, 32205, 32304, 32403, 32503,
            32603, 32703, 32804, 32904, 33005,
            33107, 33209, 33311, 33413, 33516,
            33619, 33722, 33825, 33929, 34034,
            34138, 34243, 34348, 34454, 34560,
            34666, 34772, 34879, 34986, 35094,
            35202, 35310, 35418, 35527, 35636,
            35746, 35856, 35966, 36076, 36187,
            36298, 36410, 36522, 36634, 36746,
            36859, 36973, 37086, 37200, 37314,
            37429, 37544, 37659, 37775, 37891,
            38008, 38124, 38241, 38359, 38477,
            38595, 38714, 38833, 38952, 39072,
            39192, 39312, 39433, 39554, 39675,
            39797, 39920, 40042, 40165, 40289,
            40413, 40537, 40661, 40786, 40911,
            41037, 41163, 41290, 41417, 41544,
            41671, 41800, 41928, 42057, 42186,
            42316, 42446, 42576, 42707, 42838,
            42970, 43102, 43234, 43367, 43500,
            43634, 43768, 43902, 44037, 44173,
            44308, 44444, 44581, 44718, 44855,
            44993, 45131, 45270, 45409, 45549,
            45689, 45829, 45970, 46111, 46253,
            46395, 46537, 46680, 46824, 46968,
            47112, 47257, 47402, 47548, 47694,
            47840, 47987, 48135, 48283, 48431,
            48580, 48729, 48879, 49029, 49180,
            49331, 49482, 49634, 49787, 49940,
            50093, 50247, 50401, 50556, 50712,
            50867, 51024, 51181, 51338, 51495,
            51654, 51812, 51972, 52131, 52291,
            52452, 52613, 52775, 52937, 53100,
            53263, 53427, 53591, 53755, 53921,
            54086, 54252, 54419, 54586, 54754,
            54922, 55091, 55260, 55430, 55600,
            55771, 55943, 56114, 56287, 56460,
            56633, 56807, 56982, 57157, 57333,
            57509, 57685, 57863, 58040, 58219,
            58398, 58577, 58757, 58938, 59119,
            59300, 59483, 59665, 59849, 60033,
            60217, 60402, 60588, 60774, 60960,
            61148, 61336, 61524, 61713, 61903,
            62093, 62284, 62475, 62667, 62860,
            63053, 63247, 63441, 63636, 63831,
            64027, 64224, 64422, 64619, 64818,
            65017, 65217, 65417, 65618, 65820,
            66022, 66225, 66429, 66633, 66837,
            67043, 67249, 67455, 67663, 67870,
            68079, 68288, 68498, 68708, 68920,
            69131, 69344, 69557, 69771, 69985,
            70200, 70416, 70632, 70849, 71067,
            71285, 71504, 71724, 71944, 72165,
            72387, 72609, 72833, 73056, 73281,
            73506, 73732, 73958, 74186, 74414,
            74642, 74872, 75102, 75332, 75564,
            75796, 76029, 76262, 76497, 76732,
            76968, 77204, 77441, 77679, 77918,
            78157, 78398, 78638, 78880, 79122,
            79366, 79609, 79854, 80099, 80345,
            80592, 80840, 81088, 81338, 81587,
            81838, 82090, 82342, 82595, 82849,
            83103, 83358, 83615, 83872, 84129,
            84388, 84647, 84907, 85168, 85430,
            85692, 85955, 86220, 86485, 86750,
            87017, 87284, 87552, 87821, 88091,
            88362, 88633, 88906, 89179, 89453,
            89728, 90003, 90280, 90557, 90836,
            91115, 91395, 91676, 91957, 92240,
            92523, 92807, 93093, 93379, 93666,
            93953, 94242, 94532, 94822, 95113,
            95406, 95699, 95993, 96288, 96584,
            96881, 97178, 97477, 97776, 98077,
            98378, 98680, 98984, 99288, 99593,
            99899, 100206, 100514, 100822, 101132,
            101443, 101755, 102067, 102381, 102696,
            103011, 103328, 103645, 103964, 104283,
            104603, 104925, 105247, 105571, 105895,
            106220, 106547, 106874, 107203, 107532,
            107862, 108194, 108526, 108860, 109194,
            109530, 109866, 110204, 110542, 110882,
            111223, 111565, 111907, 112251, 112596,
            112942, 113289, 113637, 113986, 114337,
            114688, 115040, 115394, 115748, 116104,
            116461, 116819, 117178, 117538, 117899,
            118261, 118624, 118989, 119354, 119721,
            120089, 120458, 120828, 121199, 121572,
            121945, 122320, 122696, 123073, 123451,
            123830, 124211, 124593, 124975, 125359,
            125745, 126131, 126518, 126907, 127297,
            127688, 128081, 128474, 128869, 129265,
            129662, 130061, 130260
         ) ),
        max_error = cms.double(0.6152529479288091),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut2 = cms.PSet(
        lut = cms.vint32( (
            256, 256, 257, 258, 259,
            260, 260, 261, 262, 263,
            264, 264, 265, 266, 267,
            268, 268, 269, 270, 271,
            272, 273, 273, 274, 275,
            276, 277, 278, 279, 279,
            280, 281, 282, 283, 284,
            285, 285, 286, 287, 288,
            289, 290, 291, 292, 293,
            293, 294, 295, 296, 297,
            298, 299, 300, 301, 302,
            303, 303, 304, 305, 306,
            307, 308, 309, 310, 311,
            312, 313, 314, 315, 316,
            317, 318, 319, 320, 321,
            322, 323, 324, 325, 326,
            327, 328, 329, 330, 331,
            332, 333, 334, 335, 336,
            337, 338, 339, 340, 341,
            342, 343, 344, 345, 346,
            347, 348, 349, 351, 352,
            353, 354, 355, 356, 357,
            358, 359, 360, 361, 363,
            364, 365, 366, 367, 368,
            369, 370, 372, 373, 374,
            375, 376, 377, 379, 380,
            381, 382, 383, 384, 386,
            387, 388, 389, 390, 392,
            393, 394, 395, 396, 398,
            399, 400, 401, 402, 404,
            405, 406, 407, 409, 410,
            411, 412, 414, 415, 416,
            418, 419, 420, 421, 423,
            424, 425, 427, 428, 429,
            431, 432, 433, 435, 436,
            437, 439, 440, 441, 443,
            444, 445, 447, 448, 449,
            451, 452, 454, 455, 456,
            458, 459, 461, 462, 463,
            465, 466, 468, 469, 471,
            472, 474, 475, 476, 478,
            479, 481, 482, 484, 485,
            487, 488, 490, 491, 493,
            494, 496, 497, 499, 500,
            502, 503, 505, 507, 508,
            510, 511, 513, 514, 516,
            518, 519, 521, 522, 524,
            526, 527, 529, 530, 532,
            534, 535, 537, 539, 540,
            542, 544, 545, 547, 549,
            550, 552, 554, 555, 557,
            559, 561, 562, 564, 566,
            567, 569, 571, 573, 575,
            576, 578, 580, 582, 583,
            585, 587, 589, 591, 592,
            594, 596, 598, 600, 602,
            603, 605, 607, 609, 611,
            613, 615, 617, 618, 620,
            622, 624, 626, 628, 630,
            632, 634, 636, 638, 640,
            642, 644, 646, 648, 650,
            652, 654, 656, 658, 660,
            662, 664, 666, 668, 670,
            672, 674, 676, 678, 680,
            682, 684, 686, 688, 691,
            693, 695, 697, 699, 701,
            703, 706, 708, 710, 712,
            714, 717, 719, 721, 723,
            725, 728, 730, 732, 734,
            737, 739, 741, 743, 746,
            748, 750, 753, 755, 757,
            760, 762, 764, 767, 769,
            771, 774, 776, 778, 781,
            783, 786, 788, 790, 793,
            795, 798, 800, 803, 805,
            808, 810, 813, 815, 818,
            820, 823, 825, 828, 830,
            833, 835, 838, 840, 843,
            846, 848, 851, 853, 856,
            859, 861, 864, 867, 869,
            872, 875, 877, 880, 883,
            885, 888, 891, 894, 896,
            899, 902, 905, 907, 910,
            913, 916, 919, 921, 924,
            927, 930, 933, 936, 939,
            941, 944, 947, 950, 953,
            956, 959, 962, 965, 968,
            971, 974, 977, 980, 983,
            986, 989, 992, 995, 998,
            1001, 1004, 1007, 1010, 1013,
            1017, 1020, 1023, 1026, 1029,
            1032, 1035, 1039, 1042, 1045,
            1048, 1051, 1055, 1058, 1061,
            1064, 1068, 1071, 1074, 1078,
            1081, 1084, 1088, 1091, 1094,
            1098, 1101, 1104, 1108, 1111,
            1115, 1118, 1121, 1125, 1128,
            1132, 1135, 1139, 1142, 1146,
            1149, 1153, 1156, 1160, 1163,
            1167, 1171, 1174, 1178, 1181,
            1185, 1189, 1192, 1196, 1200,
            1203, 1207, 1211, 1214, 1218,
            1222, 1226, 1229, 1233, 1237,
            1241, 1245, 1249, 1252, 1256,
            1260, 1264, 1268, 1272, 1276,
            1280, 1283, 1287, 1291, 1295,
            1299, 1303, 1307, 1311, 1315,
            1319, 1323, 1328, 1332, 1336,
            1340, 1344, 1348, 1352, 1356,
            1360, 1365, 1369, 1373, 1377,
            1382, 1386, 1390, 1394, 1399,
            1403, 1407, 1412, 1416, 1420,
            1425, 1429, 1433, 1438, 1442,
            1447, 1451, 1455, 1460, 1464,
            1469, 1473, 1478, 1483, 1487,
            1492, 1496, 1501, 1505, 1510,
            1515, 1519, 1524, 1529, 1533,
            1538, 1543, 1548, 1552, 1557,
            1562, 1567, 1572, 1576, 1581,
            1586, 1591, 1596, 1601, 1606,
            1611, 1616, 1620, 1625, 1630,
            1635, 1640, 1646, 1651, 1656,
            1661, 1666, 1671, 1676, 1681,
            1686, 1692, 1697, 1702, 1707,
            1712, 1718, 1723, 1728, 1734,
            1739, 1744, 1750, 1755, 1760,
            1766, 1771, 1777, 1782, 1788,
            1793, 1799, 1804, 1810, 1815,
            1821, 1826, 1832, 1838, 1843,
            1849, 1855, 1860, 1866, 1872,
            1878, 1883, 1889, 1895, 1901,
            1907, 1912, 1918, 1924, 1930,
            1936, 1942, 1948, 1954, 1960,
            1966, 1972, 1978, 1984, 1990,
            1996, 2003, 2009, 2015, 2021,
            2027, 2033, 2040, 2046, 2052,
            2059, 2065, 2071, 2078, 2084,
            2090, 2097, 2103, 2110, 2116,
            2123, 2129, 2136, 2142, 2149,
            2156, 2162, 2169, 2175, 2182,
            2189, 2196, 2202, 2209, 2216,
            2223, 2230, 2236, 2243, 2250,
            2257, 2264, 2271, 2278, 2285,
            2292, 2299, 2306, 2313, 2320,
            2327, 2335, 2342, 2349, 2356,
            2363, 2371, 2378, 2385, 2393,
            2400, 2407, 2415, 2422, 2430,
            2437, 2444, 2452, 2460, 2467,
            2475, 2482, 2490, 2498, 2505,
            2513, 2521, 2528, 2536, 2544,
            2552, 2560, 2567, 2575, 2583,
            2591, 2599, 2607, 2615, 2623,
            2631, 2639, 2647, 2656, 2664,
            2672, 2680, 2688, 2697, 2705,
            2713, 2722, 2730, 2738, 2747,
            2755, 2764, 2772, 2781, 2789,
            2798, 2806, 2815, 2824, 2832,
            2841, 2850, 2858, 2867, 2876,
            2885, 2894, 2903, 2912, 2921,
            2930, 2939, 2948, 2957, 2966,
            2975, 2984, 2993, 3002, 3012,
            3021, 3030, 3039, 3049, 3058,
            3067, 3077, 3086, 3096, 3105,
            3115, 3124, 3134, 3144, 3153,
            3163, 3173, 3183, 3192, 3202,
            3212, 3222, 3232, 3242, 3252,
            3262, 3272, 3282, 3292, 3302,
            3312, 3322, 3332, 3343, 3353,
            3363, 3374, 3384, 3394, 3405,
            3415, 3426, 3436, 3447, 3457,
            3468, 3479, 3489, 3500, 3511,
            3522, 3532, 3543, 3554, 3565,
            3576, 3587, 3598, 3609, 3620,
            3631, 3642, 3654, 3665, 3676,
            3687, 3699, 3710, 3722, 3733,
            3744, 3756, 3767, 3779, 3791,
            3802, 3814, 3826, 3837, 3849,
            3861, 3873, 3885, 3897, 3909,
            3921, 3933, 3945, 3957, 3969,
            3981, 3994, 4006, 4018, 4031,
            4043, 4055, 4068, 4080, 4093,
            4105, 4118, 4131, 4143, 4156,
            4169, 4182, 4195, 4207, 4220,
            4233, 4246, 4259, 4272, 4286,
            4299, 4312, 4325, 4339, 4352,
            4365, 4379, 4392, 4406, 4419,
            4433, 4446, 4460, 4474, 4487,
            4501, 4515, 4529, 4543, 4557,
            4571, 4585, 4599, 4613, 4627,
            4641, 4656, 4670, 4684, 4699,
            4713, 4728, 4742, 4757, 4771,
            4786, 4801, 4816, 4830, 4845,
            4860, 4875, 4890, 4905, 4920,
            4935, 4950, 4966, 4981, 4996,
            5011, 5027, 5042, 5058, 5073,
            5089, 5105, 5120, 5136, 5152,
            5168, 5183, 5199, 5215, 5231,
            5247, 5264, 5280, 5296, 5312,
            5329, 5345, 5361, 5378, 5394,
            5411, 5428, 5444, 5461, 5478,
            5495, 5512, 5528, 5545, 5562,
            5580, 5597, 5614, 5631, 5648,
            5666, 5683, 5701, 5718, 5736,
            5753, 5771, 5789, 5807, 5824,
            5842, 5860, 5878, 5896, 5914,
            5933, 5951, 5969, 5987, 6006,
            6024, 6043, 6061, 6080, 6099,
            6117, 6136, 6155, 6174, 6193,
            6212, 6231, 6250, 6269, 6289,
            6308, 6327, 6347, 6366, 6386,
            6406, 6425, 6445, 6465, 6485,
            6505, 6525, 6545, 6565, 6585,
            6605, 6625, 6646, 6666, 6687,
            6707, 6728, 6749, 6769, 6790,
            6811, 6832, 6853, 6874, 6895,
            6916, 6937, 6959, 6980, 7002,
            7023, 7045, 7066, 7088, 7110,
            7132, 7154, 7176, 7198, 7220,
            7242, 7264, 7286, 7309, 7331,
            7354, 7376, 7399, 7422, 7445,
            7468, 7490, 7513, 7537, 7560,
            7583, 7606, 7630, 7653, 7677,
            7700, 7724, 7748, 7771, 7795,
            7819, 7843, 7867, 7892, 7916,
            7940, 7964, 7989, 8014, 8038,
            8063, 8088, 8112, 8137, 8162,
            8187, 8213, 8238, 8263, 8289,
            8314, 8340, 8365, 8391, 8417,
            8443, 8468, 8495, 8521, 8547,
            8573, 8599, 8626, 8652, 8679,
            8706, 8732, 8759, 8786, 8813,
            8840, 8867, 8895, 8922, 8949,
            8977, 9004, 9032, 9060, 9088,
            9116, 9144, 9172, 9200, 9228,
            9256, 9285, 9313, 9342, 9371,
            9400, 9428, 9457, 9486, 9516,
            9545, 9574, 9604, 9633, 9663,
            9692, 9722, 9752, 9782, 9812,
            9842, 9872, 9903, 9933, 9964,
            9994, 10025, 10056, 10087, 10118,
            10149, 10180, 10211, 10243, 10274,
            10306, 10337, 10369, 10401, 10433,
            10465, 10497, 10529, 10562, 10594,
            10627, 10659, 10692, 10725, 10758,
            10791, 10824, 10858, 10891, 10924,
            10958, 10992, 11025, 11059, 11093,
            11127, 11161, 11196, 11230, 11265,
            11299, 11334, 11369, 11404, 11439,
            11474, 11509, 11545, 11580, 11616,
            11651, 11687, 11723, 11759, 11795,
            11831, 11868, 11904, 11941, 11978,
            12014, 12051, 12088, 12125, 12163,
            12200, 12238, 12275, 12313, 12351,
            12389, 12427, 12465, 12503, 12542,
            12580, 12619, 12658, 12696, 12735,
            12775, 12814, 12853, 12893, 12932,
            12972, 13012, 13052, 13092, 13132,
            13173, 13213, 13254, 13294, 13335,
            13376, 13417, 13459, 13500, 13541,
            13583, 13625, 13667, 13709, 13751,
            13793, 13835, 13878, 13920, 13963,
            14006, 14049, 14092, 14136, 14179,
            14223, 14266, 14310, 14354, 14398,
            14443, 14487, 14531, 14576, 14621,
            14666, 14711, 14756, 14801, 14847,
            14892, 14938, 14984, 15030, 15076,
            15123, 15169, 15216, 15263, 15309,
            15356, 15404, 15451, 15498, 15546,
            15594, 15642, 15690, 15738, 15786,
            15835, 15884, 15932, 15981, 16030,
            16080, 16129, 16179, 16228, 16278,
            16328, 16378, 16429, 16479, 16530,
            16581, 16632, 16683, 16734, 16785,
            16837, 16889, 16941, 16993, 17045,
            17097, 17150, 17202, 17255, 17308,
            17361, 17415, 17468, 17522, 17576,
            17630, 17684, 17738, 17793, 17848,
            17902, 17957, 18013, 18068, 18123,
            18179, 18235, 18291, 18347, 18404,
            18460, 18517, 18574, 18631, 18688,
            18746, 18803, 18861, 18919, 18977,
            19035, 19094, 19152, 19211, 19270,
            19330, 19389, 19448, 19508, 19568,
            19628, 19689, 19749, 19810, 19871,
            19932, 19993, 20054, 20116, 20178,
            20240, 20302, 20364, 20427, 20490,
            20553, 20616, 20679, 20743, 20806,
            20870, 20935, 20999, 21063, 21128,
            21193, 21258, 21323, 21389, 21455,
            21521, 21587, 21653, 21720, 21786,
            21853, 21920, 21988, 22055, 22123,
            22191, 22259, 22328, 22396, 22465,
            22534, 22603, 22673, 22742, 22812,
            22882, 22953, 23023, 23094, 23165,
            23236, 23308, 23379, 23451, 23523,
            23595, 23668, 23741, 23814, 23887,
            23960, 24034, 24108, 24182, 24256,
            24330, 24405, 24480, 24555, 24631,
            24707, 24783, 24859, 24935, 25012,
            25089, 25166, 25243, 25320, 25398,
            25476, 25555, 25633, 25712, 25791,
            25870, 25950, 26029, 26109, 26190,
            26270, 26351, 26432, 26513, 26594,
            26676, 26758, 26840, 26923, 27006,
            27088, 27172, 27255, 27339, 27423,
            27507, 27592, 27677, 27762, 27847,
            27932, 28018, 28104, 28191, 28277,
            28364, 28451, 28539, 28626, 28714,
            28803, 28891, 28980, 29069, 29158,
            29248, 29338, 29428, 29518, 29609,
            29700, 29791, 29883, 29975, 30067,
            30159, 30252, 30345, 30438, 30532,
            30625, 30719, 30814, 30909, 31003,
            31099, 31194, 31290, 31386, 31483,
            31579, 31677, 31774, 31871, 31969,
            32068, 32166, 32265, 32364, 32464,
            32563, 32663, 32764, 32864, 32965,
            33067, 33168, 33270, 33372, 33475,
            33578, 33681, 33785, 33888, 33992,
            34097, 34202, 34307, 34412, 34518,
            34624, 34730, 34837, 34944, 35051,
            35159, 35267, 35376, 35484, 35593,
            35703, 35812, 35922, 36033, 36144,
            36255, 36366, 36478, 36590, 36702,
            36815, 36928, 37042, 37155, 37270,
            37384, 37499, 37614, 37730, 37846,
            37962, 38079, 38196, 38313, 38431,
            38549, 38667, 38786, 38905, 39025,
            39145, 39265, 39386, 39507, 39628,
            39750, 39872, 39994, 40117, 40241,
            40364, 40488, 40613, 40737, 40863,
            40988, 41114, 41240, 41367, 41494,
            41622, 41750, 41878, 42007, 42136,
            42265, 42395, 42525, 42656, 42787,
            42919, 43050, 43183, 43315, 43448,
            43582, 43716, 43850, 43985, 44120,
            44256, 44392, 44528, 44665, 44802,
            44940, 45078, 45216, 45355, 45495,
            45634, 45775, 45915, 46056, 46198,
            46340, 46482, 46625, 46768, 46912,
            47056, 47201, 47346, 47491, 47637,
            47784, 47930, 48078, 48225, 48374,
            48522, 48671, 48821, 48971, 49121,
            49272, 49424, 49576, 49728, 49881,
            50034, 50188, 50342, 50497, 50652,
            50807, 50963, 51120, 51277, 51435,
            51593, 51751, 51910, 52070, 52230,
            52390, 52551, 52713, 52875, 53037,
            53200, 53364, 53528, 53692, 53857,
            54022, 54188, 54355, 54522, 54690,
            54858, 55026, 55195, 55365, 55535,
            55706, 55877, 56048, 56221, 56393,
            56567, 56740, 56915, 57090, 57265,
            57441, 57618, 57795, 57972, 58150,
            58329, 58508, 58688, 58868, 59049,
            59231, 59413, 59595, 59778, 59962,
            60146, 60331, 60516, 60702, 60889,
            61076, 61264, 61452, 61641, 61830,
            62020, 62211, 62402, 62594, 62786,
            62979, 63172, 63366, 63561, 63756,
            63952, 64149, 64346, 64544, 64742,
            64941, 65140, 65341, 65541, 65743,
            65945, 66147, 66351, 66555, 66759,
            66964, 67170, 67376, 67583, 67791,
            67999, 68208, 68418, 68628, 68839,
            69050, 69263, 69475, 69689, 69903,
            70118, 70333, 70549, 70766, 70984,
            71202, 71421, 71640, 71860, 72081,
            72302, 72525, 72747, 72971, 73195,
            73420, 73646, 73872, 74099, 74327,
            74555, 74784, 75014, 75244, 75476,
            75707, 75940, 76173, 76407, 76642,
            76878, 77114, 77351, 77589, 77827,
            78066, 78306, 78547, 78788, 79030,
            79273, 79516, 79761, 80006, 80252,
            80498, 80746, 80994, 81243, 81492,
            81743, 81994, 82246, 82498, 82752,
            83006, 83261, 83517, 83774, 84031,
            84289, 84548, 84808, 85069, 85330,
            85592, 85855, 86119, 86384, 86649,
            86915, 87182, 87450, 87719, 87989,
            88259, 88530, 88802, 89075, 89349,
            89623, 89899, 90175, 90452, 90730,
            91009, 91288, 91569, 91850, 92132,
            92415, 92699, 92984, 93270, 93557,
            93844, 94132, 94422, 94712, 95003,
            95295, 95587, 95881, 96176, 96471,
            96768, 97065, 97363, 97662, 97963,
            98264, 98565, 98868, 99172, 99477,
            99783, 100089, 100397, 100705, 101015,
            101325, 101636, 101949, 102262, 102576,
            102891, 103207, 103525, 103843, 104162,
            104482, 104803, 105125, 105448, 105772,
            106097, 106423, 106750, 107078, 107407,
            107737, 108068, 108400, 108733, 109067,
            109402, 109738, 110076, 110414, 110753,
            111093, 111435, 111777, 112121, 112465,
            112811, 113157, 113505, 113854, 114204,
            114555, 114907, 115260, 115614, 115969,
            116325, 116683, 117041, 117401, 117762,
            118124, 118486, 118851, 119216, 119582,
            119949, 120318, 120688, 121059, 121431,
            121804, 122178, 122553, 122930, 123308,
            123687, 124067, 124448, 124830, 125214,
            125598, 125984, 126371, 126760, 127149,
            127540, 127932, 128325, 128719, 129115,
            129511, 129909, 130309, 130709, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071
         ) ),
        max_error = cms.double(5748.616225984908),
        output_scale_factor = cms.double(0.953125),
        unused_lsbs = cms.uint32(2)
    ),
    inv_mass_checks = cms.untracked.bool(False),
    maxDz = cms.double(1),
    maxInvMass = cms.double(18),
    minDR = cms.double(0),
    minInvMass = cms.double(7),
    os = cms.bool(True),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    sanity_checks = cms.untracked.bool(False),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    )
)


process.DoubleTkMuonOSEr1p5Dr1p4 = cms.EDFilter("L1GTDoubleObjectCond",
    collection1 = cms.PSet(
        maxEta = cms.double(1.5),
        minEta = cms.double(-1.5),
        minQualityScore = cms.uint32(0),
        tag = cms.InputTag("l1tGTProducer","GMTTkMuons")
    ),
    collection2 = cms.PSet(
        maxEta = cms.double(1.5),
        minEta = cms.double(-1.5),
        minQualityScore = cms.uint32(0),
        tag = cms.InputTag("l1tGTProducer","GMTTkMuons")
    ),
    cos_phi_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            487, 487, 487, 487, 487,
            487, 487, 487, 487, 487,
            487, 486, 486, 486, 486,
            486, 486, 486, 485, 485,
            485, 485, 485, 485, 484,
            484, 484, 484, 484, 483,
            483, 483, 483, 483, 482,
            482, 482, 482, 481, 481,
            481, 481, 480, 480, 480,
            480, 479, 479, 479, 478,
            478, 478, 478, 477, 477,
            477, 476, 476, 476, 475,
            475, 475, 474, 474, 474,
            473, 473, 472, 472, 472,
            471, 471, 471, 470, 470,
            469, 469, 468, 468, 468,
            467, 467, 466, 466, 465,
            465, 465, 464, 464, 463,
            463, 462, 462, 461, 461,
            460, 460, 459, 459, 458,
            458, 457, 457, 456, 456,
            455, 454, 454, 453, 453,
            452, 452, 451, 451, 450,
            449, 449, 448, 448, 447,
            446, 446, 445, 445, 444,
            443, 443, 442, 441, 441,
            440, 440, 439, 438, 438,
            437, 436, 436, 435, 434,
            434, 433, 432, 431, 431,
            430, 429, 429, 428, 427,
            426, 426, 425, 424, 423,
            423, 422, 421, 420, 420,
            419, 418, 417, 417, 416,
            415, 414, 413, 413, 412,
            411, 410, 409, 409, 408,
            407, 406, 405, 405, 404,
            403, 402, 401, 400, 399,
            399, 398, 397, 396, 395,
            394, 393, 392, 392, 391,
            390, 389, 388, 387, 386,
            385, 384, 383, 382, 381,
            381, 380, 379, 378, 377,
            376, 375, 374, 373, 372,
            371, 370, 369, 368, 367,
            366, 365, 364, 363, 362,
            361, 360, 359, 358, 357,
            356, 355, 354, 353, 352,
            351, 350, 349, 348, 347,
            346, 345, 343, 342, 341,
            340, 339, 338, 337, 336,
            335, 334, 333, 332, 330,
            329, 328, 327, 326, 325,
            324, 323, 322, 320, 319,
            318, 317, 316, 315, 314,
            312, 311, 310, 309, 308,
            307, 306, 304, 303, 302,
            301, 300, 298, 297, 296,
            295, 294, 293, 291, 290,
            289, 288, 286, 285, 284,
            283, 282, 280, 279, 278,
            277, 275, 274, 273, 272,
            270, 269, 268, 267, 265,
            264, 263, 262, 260, 259,
            258, 257, 255, 254, 253,
            252, 250, 249, 248, 246,
            245, 244, 242, 241, 240,
            239, 237, 236, 235, 233,
            232, 231, 229, 228, 227,
            225, 224, 223, 221, 220,
            219, 217, 216, 215, 213,
            212, 211, 209, 208, 207,
            205, 204, 203, 201, 200,
            198, 197, 196, 194, 193,
            192, 190, 189, 187, 186,
            185, 183, 182, 181, 179,
            178, 176, 175, 174, 172,
            171, 169, 168, 167, 165,
            164, 162, 161, 159, 158,
            157, 155, 154, 152, 151,
            150, 148, 147, 145, 144,
            142, 141, 140, 138, 137,
            135, 134, 132, 131, 129,
            128, 127, 125, 124, 122,
            121, 119, 118, 116, 115,
            113, 112, 111, 109, 108,
            106, 105, 103, 102, 100,
            99, 97, 96, 94, 93,
            92, 90, 89, 87, 86,
            84, 83, 81, 80, 78,
            77, 75, 74, 72, 71,
            69, 68, 66, 65, 63,
            62, 60, 59, 58, 56,
            55, 53, 52, 50, 49,
            47, 46, 44, 43, 41,
            40, 38, 37, 35, 34,
            32, 31, 29, 28, 26,
            25, 23, 22, 20, 19,
            17, 16, 14, 13, 11,
            10, 8, 7, 5, 4,
            2, 1, -1, -2, -4,
            -5, -7, -8, -10, -11,
            -13, -14, -16, -17, -19,
            -20, -22, -23, -25, -26,
            -28, -29, -31, -32, -34,
            -35, -37, -38, -40, -41,
            -43, -44, -46, -47, -49,
            -50, -52, -53, -55, -56,
            -58, -59, -60, -62, -63,
            -65, -66, -68, -69, -71,
            -72, -74, -75, -77, -78,
            -80, -81, -83, -84, -86,
            -87, -89, -90, -92, -93,
            -94, -96, -97, -99, -100,
            -102, -103, -105, -106, -108,
            -109, -111, -112, -113, -115,
            -116, -118, -119, -121, -122,
            -124, -125, -127, -128, -129,
            -131, -132, -134, -135, -137,
            -138, -140, -141, -142, -144,
            -145, -147, -148, -150, -151,
            -152, -154, -155, -157, -158,
            -159, -161, -162, -164, -165,
            -167, -168, -169, -171, -172,
            -174, -175, -176, -178, -179,
            -181, -182, -183, -185, -186,
            -187, -189, -190, -192, -193,
            -194, -196, -197, -198, -200,
            -201, -203, -204, -205, -207,
            -208, -209, -211, -212, -213,
            -215, -216, -217, -219, -220,
            -221, -223, -224, -225, -227,
            -228, -229, -231, -232, -233,
            -235, -236, -237, -239, -240,
            -241, -242, -244, -245, -246,
            -248, -249, -250, -252, -253,
            -254, -255, -257, -258, -259,
            -260, -262, -263, -264, -265,
            -267, -268, -269, -270, -272,
            -273, -274, -275, -277, -278,
            -279, -280, -282, -283, -284,
            -285, -286, -288, -289, -290,
            -291, -293, -294, -295, -296,
            -297, -298, -300, -301, -302,
            -303, -304, -306, -307, -308,
            -309, -310, -311, -312, -314,
            -315, -316, -317, -318, -319,
            -320, -322, -323, -324, -325,
            -326, -327, -328, -329, -330,
            -332, -333, -334, -335, -336,
            -337, -338, -339, -340, -341,
            -342, -343, -345, -346, -347,
            -348, -349, -350, -351, -352,
            -353, -354, -355, -356, -357,
            -358, -359, -360, -361, -362,
            -363, -364, -365, -366, -367,
            -368, -369, -370, -371, -372,
            -373, -374, -375, -376, -377,
            -378, -379, -380, -381, -381,
            -382, -383, -384, -385, -386,
            -387, -388, -389, -390, -391,
            -392, -392, -393, -394, -395,
            -396, -397, -398, -399, -399,
            -400, -401, -402, -403, -404,
            -405, -405, -406, -407, -408,
            -409, -409, -410, -411, -412,
            -413, -413, -414, -415, -416,
            -417, -417, -418, -419, -420,
            -420, -421, -422, -423, -423,
            -424, -425, -426, -426, -427,
            -428, -429, -429, -430, -431,
            -431, -432, -433, -434, -434,
            -435, -436, -436, -437, -438,
            -438, -439, -440, -440, -441,
            -441, -442, -443, -443, -444,
            -445, -445, -446, -446, -447,
            -448, -448, -449, -449, -450,
            -451, -451, -452, -452, -453,
            -453, -454, -454, -455, -456,
            -456, -457, -457, -458, -458,
            -459, -459, -460, -460, -461,
            -461, -462, -462, -463, -463,
            -464, -464, -465, -465, -465,
            -466, -466, -467, -467, -468,
            -468, -468, -469, -469, -470,
            -470, -471, -471, -471, -472,
            -472, -472, -473, -473, -474,
            -474, -474, -475, -475, -475,
            -476, -476, -476, -477, -477,
            -477, -478, -478, -478, -478,
            -479, -479, -479, -480, -480,
            -480, -480, -481, -481, -481,
            -481, -482, -482, -482, -482,
            -483, -483, -483, -483, -483,
            -484, -484, -484, -484, -484,
            -485, -485, -485, -485, -485,
            -485, -486, -486, -486, -486,
            -486, -486, -486, -487, -487,
            -487, -487, -487, -487, -487,
            -487, -487, -487, -487, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488
         ) ),
        max_error = cms.double(0.0025338281044886835),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            489, 489, 489, 489, 489,
            489, 489, 489, 489, 489,
            489, 490, 490, 490, 490,
            490, 490, 490, 491, 491,
            491, 491, 491, 491, 492,
            492, 492, 492, 492, 493,
            493, 493, 493, 493, 494,
            494, 494, 494, 495, 495,
            495, 495, 496, 496, 496,
            496, 497, 497, 497, 498,
            498, 498, 499, 499, 499,
            499, 500, 500, 500, 501,
            501, 502, 502, 502, 503,
            503, 503, 504, 504, 504,
            505, 505, 506, 506, 507,
            507, 507, 508, 508, 509,
            509, 510, 510, 510, 511,
            511, 512, 512, 513, 513,
            514, 514, 515, 515, 516,
            516, 517, 517, 518, 518,
            519, 520, 520, 521, 521,
            522, 522, 523, 523, 524,
            525, 525, 526, 526, 527,
            528, 528, 529, 530, 530,
            531, 531, 532, 533, 533,
            534, 535, 535, 536, 537,
            537, 538, 539, 540, 540,
            541, 542, 542, 543, 544,
            545, 545, 546, 547, 548,
            548, 549, 550, 551, 551,
            552, 553, 554, 555, 555,
            556, 557, 558, 559, 560,
            560, 561, 562, 563, 564,
            565, 566, 567, 567, 568,
            569, 570, 571, 572, 573,
            574, 575, 576, 577, 577,
            578, 579, 580, 581, 582,
            583, 584, 585, 586, 587,
            588, 589, 590, 591, 592,
            593, 594, 595, 596, 598,
            599, 600, 601, 602, 603,
            604, 605, 606, 607, 608,
            610, 611, 612, 613, 614,
            615, 616, 618, 619, 620,
            621, 622, 623, 625, 626,
            627, 628, 629, 631, 632,
            633, 634, 636, 637, 638,
            639, 641, 642, 643, 644,
            646, 647, 648, 650, 651,
            652, 654, 655, 656, 658,
            659, 660, 662, 663, 665,
            666, 667, 669, 670, 672,
            673, 674, 676, 677, 679,
            680, 682, 683, 685, 686,
            687, 689, 690, 692, 693,
            695, 697, 698, 700, 701,
            703, 704, 706, 707, 709,
            710, 712, 714, 715, 717,
            719, 720, 722, 723, 725,
            727, 728, 730, 732, 733,
            735, 737, 738, 740, 742,
            744, 745, 747, 749, 750,
            752, 754, 756, 758, 759,
            761, 763, 765, 767, 768,
            770, 772, 774, 776, 778,
            779, 781, 783, 785, 787,
            789, 791, 793, 795, 796,
            798, 800, 802, 804, 806,
            808, 810, 812, 814, 816,
            818, 820, 822, 824, 826,
            828, 830, 832, 835, 837,
            839, 841, 843, 845, 847,
            849, 851, 854, 856, 858,
            860, 862, 864, 867, 869,
            871, 873, 875, 878, 880,
            882, 884, 887, 889, 891,
            894, 896, 898, 900, 903,
            905, 907, 910, 912, 915,
            917, 919, 922, 924, 927,
            929, 931, 934, 936, 939,
            941, 944, 946, 949, 951,
            954, 956, 959, 961, 964,
            966, 969, 971, 974, 977,
            979, 982, 984, 987, 990,
            992, 995, 998, 1000, 1003,
            1006, 1008, 1011, 1014, 1017,
            1019, 1022, 1025, 1028, 1030,
            1033, 1036, 1039, 1042, 1044,
            1047, 1050, 1053, 1056, 1059,
            1062, 1065, 1067, 1070, 1073,
            1076, 1079, 1082, 1085, 1088,
            1091, 1094, 1097, 1100, 1103,
            1106, 1109, 1112, 1115, 1118,
            1122, 1125, 1128, 1131, 1134,
            1137, 1140, 1143, 1147, 1150,
            1153, 1156, 1159, 1163, 1166,
            1169, 1172, 1176, 1179, 1182,
            1186, 1189, 1192, 1196, 1199,
            1202, 1206, 1209, 1212, 1216,
            1219, 1223, 1226, 1230, 1233,
            1237, 1240, 1244, 1247, 1251,
            1254, 1258, 1261, 1265, 1268,
            1272, 1276, 1279, 1283, 1287,
            1290, 1294, 1298, 1301, 1305,
            1309, 1312, 1316, 1320, 1324,
            1327, 1331, 1335, 1339, 1343,
            1347, 1350, 1354, 1358, 1362,
            1366, 1370, 1374, 1378, 1382,
            1386, 1390, 1394, 1398, 1402,
            1406, 1410, 1414, 1418, 1422,
            1426, 1430, 1434, 1439, 1443,
            1447, 1451, 1455, 1459, 1464,
            1468, 1472, 1476, 1481, 1485,
            1489, 1494, 1498, 1502, 1507,
            1511, 1516, 1520, 1524, 1529,
            1533, 1538, 1542, 1547, 1551,
            1556, 1560, 1565, 1569, 1574,
            1579, 1583, 1588, 1592, 1597,
            1602, 1606, 1611, 1616, 1621,
            1625, 1630, 1635, 1640, 1645,
            1649, 1654, 1659, 1664, 1669,
            1674, 1679, 1684, 1689, 1693,
            1698, 1703, 1708, 1714, 1719,
            1724, 1729, 1734, 1739, 1744,
            1749, 1754, 1760, 1765, 1770,
            1775, 1780, 1786, 1791, 1796,
            1802, 1807, 1812, 1818, 1823,
            1828, 1834, 1839, 1845, 1850,
            1856, 1861, 1867, 1872, 1878,
            1883, 1889, 1894, 1900, 1906,
            1911, 1917, 1923, 1929, 1934,
            1940, 1946, 1952, 1957, 1963,
            1969, 1975, 1981, 1987, 1993,
            1999, 2004, 2010, 2016, 2022,
            2028, 2035, 2041, 2047, 2053,
            2059, 2065, 2071, 2077, 2084,
            2090, 2096, 2102, 2109, 2115,
            2121, 2128, 2134, 2140, 2147,
            2153, 2160, 2166, 2173, 2179,
            2186, 2192, 2199, 2205, 2212,
            2219, 2225, 2232, 2239, 2245,
            2252, 2259, 2266, 2272, 2279,
            2286, 2293, 2300, 2307, 2314,
            2321, 2328, 2335, 2342, 2349,
            2356, 2363, 2370, 2377, 2384,
            2391, 2398, 2406, 2413, 2420,
            2427, 2435, 2442, 2449, 2457,
            2464, 2472, 2479, 2487, 2494,
            2502, 2509, 2517, 2524, 2532,
            2539, 2547, 2555, 2563, 2570,
            2578, 2586, 2594, 2601, 2609,
            2617, 2625, 2633, 2641, 2649,
            2657, 2665, 2673, 2681, 2689,
            2697, 2705, 2714, 2722, 2730,
            2738, 2747, 2755, 2763, 2772,
            2780, 2788, 2797, 2805, 2814,
            2822, 2831, 2839, 2848, 2857,
            2865, 2874, 2883, 2891, 2900,
            2909, 2918, 2927, 2935, 2944,
            2953, 2962, 2971, 2980, 2989,
            2998, 3007, 3016, 3026, 3035,
            3044, 3053, 3062, 3072, 3081,
            3090, 3100, 3109, 3119, 3128,
            3138, 3147, 3157, 3166, 3176,
            3186, 3195, 3205, 3215, 3224,
            3234, 3244, 3254, 3264, 3274,
            3284, 3294, 3304, 3314, 3324,
            3334, 3344, 3354, 3364, 3375,
            3385, 3395, 3405, 3416, 3426,
            3437, 3447, 3458, 3468, 3479,
            3489, 3500, 3510, 3521, 3532,
            3543, 3553, 3564, 3575, 3586,
            3597, 3608, 3619, 3630, 3641,
            3652, 3663, 3674, 3685, 3697,
            3708, 3719, 3730, 3742, 3753,
            3765, 3776, 3788, 3799, 3811,
            3822, 3834, 3846, 3857, 3869,
            3881, 3893, 3905, 3917, 3929,
            3941, 3953, 3965, 3977, 3989,
            4001, 4013, 4025, 4038, 4050,
            4062, 4075, 4087, 4100, 4112,
            4125, 4137, 4150, 4163, 4175,
            4188, 4201, 4214, 4226, 4239,
            4252, 4265, 4278, 4291, 4304,
            4318, 4331, 4344, 4357, 4371,
            4384, 4397, 4411, 4424, 4438,
            4451, 4465, 4479, 4492, 4506,
            4520, 4533, 4547, 4561, 4575,
            4589, 4603, 4617, 4631, 4645,
            4660, 4674, 4688, 4703, 4717,
            4731, 4746, 4760, 4775, 4789,
            4804, 4819, 4833, 4848, 4863,
            4878, 4893, 4908, 4923, 4938,
            4953, 4968, 4983, 4999, 5014,
            5029, 5045, 5060, 5075, 5091,
            5107, 5122, 5138, 5154, 5169,
            5185, 5201, 5217, 5233, 5249,
            5265, 5281, 5297, 5313, 5330,
            5346, 5362, 5379, 5395, 5412,
            5428, 5445, 5462, 5478, 5495,
            5512, 5529, 5546, 5563, 5580,
            5597, 5614, 5631, 5648, 5666,
            5683, 5700, 5718, 5735, 5753,
            5770, 5788, 5806, 5824, 5841,
            5859, 5877, 5895, 5913, 5931,
            5950, 5968, 5986, 6004, 6023,
            6041, 6060, 6078, 6097, 6116,
            6134, 6153, 6172, 6191, 6210,
            6229, 6248, 6267, 6286, 6305,
            6325, 6344, 6364, 6383, 6403,
            6422, 6442, 6462, 6481, 6501,
            6521, 6541, 6561, 6581, 6602,
            6622, 6642, 6662, 6683, 6703,
            6724, 6744, 6765, 6786, 6807,
            6828, 6848, 6869, 6891, 6912,
            6933, 6954, 6975, 6997, 7018,
            7040, 7061, 7083, 7105, 7126,
            7148, 7170, 7192, 7214, 7236,
            7259, 7281, 7303, 7325, 7348,
            7370, 7393, 7416, 7438, 7461,
            7484, 7507, 7530, 7553, 7576,
            7600, 7623, 7646, 7670, 7693,
            7717, 7741, 7764, 7788, 7812,
            7836, 7860, 7884, 7908, 7932,
            7957, 7981, 8006, 8030, 8055,
            8080, 8104, 8129, 8154, 8179,
            8204, 8229, 8255, 8280, 8305,
            8331, 8356, 8382, 8408, 8434,
            8459, 8485, 8511, 8537, 8564,
            8590, 8616, 8643, 8669, 8696,
            8722, 8749, 8776, 8803, 8830,
            8857, 8884, 8912, 8939, 8966,
            8994, 9021, 9049, 9077, 9105,
            9133, 9161, 9189, 9217, 9245,
            9274, 9302, 9331, 9359, 9388,
            9417, 9446, 9475, 9504, 9533,
            9562, 9591, 9621, 9650, 9680,
            9710, 9740, 9769, 9799, 9830,
            9860, 9890, 9920, 9951, 9981,
            10012, 10043, 10073, 10104, 10135,
            10166, 10198, 10229, 10260, 10292,
            10323, 10355, 10387, 10419, 10451,
            10483, 10515, 10547, 10580, 10612,
            10645, 10677, 10710, 10743, 10776,
            10809, 10842, 10876, 10909, 10942,
            10976, 11010, 11044, 11077, 11111,
            11146, 11180, 11214, 11248, 11283,
            11318, 11352, 11387, 11422, 11457,
            11492, 11528, 11563, 11599, 11634,
            11670, 11706, 11742, 11778, 11814,
            11850, 11887, 11923, 11960, 11996,
            12033, 12070, 12107, 12144, 12182,
            12219, 12257, 12294, 12332, 12370,
            12408, 12446, 12484, 12522, 12561,
            12599, 12638, 12677, 12716, 12755,
            12794, 12833, 12873, 12912, 12952,
            12992, 13032, 13072, 13112, 13152,
            13192, 13233, 13274, 13314, 13355,
            13396, 13437, 13479, 13520, 13561,
            13603, 13645, 13687, 13729, 13771,
            13813, 13856, 13898, 13941, 13984,
            14027, 14070, 14113, 14156, 14200,
            14243, 14287, 14331, 14375, 14419,
            14463, 14508, 14552, 14597, 14642,
            14687, 14732, 14777, 14823, 14868,
            14914, 14960, 15005, 15052, 15098,
            15144, 15191, 15237, 15284, 15331,
            15378, 15425, 15473, 15520, 15568,
            15616, 15664, 15712, 15760, 15808,
            15857, 15906, 15955, 16004, 16053,
            16102, 16151, 16201, 16251, 16301,
            16351, 16401, 16451, 16502, 16553,
            16603, 16654, 16706, 16757, 16808,
            16860, 16912, 16964, 17016, 17068,
            17121, 17173, 17226, 17279, 17332,
            17385, 17438, 17492, 17546, 17600,
            17654, 17708, 17762, 17817, 17872,
            17926, 17982, 18037, 18092, 18148,
            18203, 18259, 18315, 18372, 18428,
            18485, 18542, 18598, 18656, 18713,
            18770, 18828, 18886, 18944, 19002,
            19060, 19119, 19178, 19237, 19296,
            19355, 19414, 19474, 19534, 19594,
            19654, 19714, 19775, 19836, 19897,
            19958, 20019, 20081, 20142, 20204,
            20266, 20328, 20391, 20454, 20516,
            20579, 20643, 20706, 20770, 20833,
            20897, 20962, 21026, 21091, 21155,
            21220, 21286, 21351, 21417, 21482,
            21548, 21615, 21681, 21748, 21814,
            21881, 21949, 22016, 22084, 22151,
            22220, 22288, 22356, 22425, 22494,
            22563, 22632, 22702, 22771, 22841,
            22912, 22982, 23053, 23123, 23194,
            23266, 23337, 23409, 23481, 23553,
            23625, 23698, 23771, 23844, 23917,
            23990, 24064, 24138, 24212, 24287,
            24361, 24436, 24511, 24586, 24662,
            24738, 24814, 24890, 24966, 25043,
            25120, 25197, 25275, 25352, 25430,
            25508, 25587, 25665, 25744, 25823,
            25902, 25982, 26062, 26142, 26222,
            26303, 26384, 26465, 26546, 26627,
            26709, 26791, 26874, 26956, 27039,
            27122, 27205, 27289, 27373, 27457,
            27541, 27626, 27711, 27796, 27881,
            27967, 28053, 28139, 28226, 28312,
            28399, 28486, 28574, 28662, 28750,
            28838, 28927, 29016, 29105, 29194,
            29284, 29374, 29464, 29555, 29645,
            29736, 29828, 29919, 30011, 30104,
            30196, 30289, 30382, 30475, 30569,
            30663, 30757, 30851, 30946, 31041,
            31137, 31232, 31328, 31425, 31521,
            31618, 31715, 31813, 31910, 32008,
            32107, 32205, 32304, 32403, 32503,
            32603, 32703, 32804, 32904, 33005,
            33107, 33209, 33311, 33413, 33516,
            33619, 33722, 33825, 33929, 34034,
            34138, 34243, 34348, 34454, 34560,
            34666, 34772, 34879, 34986, 35094,
            35202, 35310, 35418, 35527, 35636,
            35746, 35856, 35966, 36076, 36187,
            36298, 36410, 36522, 36634, 36746,
            36859, 36973, 37086, 37200, 37314,
            37429, 37544, 37659, 37775, 37891,
            38008, 38124, 38241, 38359, 38477,
            38595, 38714, 38833, 38952, 39072,
            39192, 39312, 39433, 39554, 39675,
            39797, 39920, 40042, 40165, 40289,
            40413, 40537, 40661, 40786, 40911,
            41037, 41163, 41290, 41417, 41544,
            41671, 41800, 41928, 42057, 42186,
            42316, 42446, 42576, 42707, 42838,
            42970, 43102, 43234, 43367, 43500,
            43634, 43768, 43902, 44037, 44173,
            44308, 44444, 44581, 44718, 44855,
            44993, 45131, 45270, 45409, 45549,
            45689, 45829, 45970, 46111, 46253,
            46395, 46537, 46680, 46824, 46968,
            47112, 47257, 47402, 47548, 47694,
            47840, 47987, 48135, 48283, 48431,
            48580, 48729, 48879, 49029, 49180,
            49331, 49482, 49634, 49787, 49940,
            50093, 50247, 50401, 50556, 50712,
            50867, 51024, 51181, 51338, 51495,
            51654, 51812, 51972, 52131, 52291,
            52452, 52613, 52775, 52937, 53100,
            53263, 53427, 53591, 53755, 53921,
            54086, 54252, 54419, 54586, 54754,
            54922, 55091, 55260, 55430, 55600,
            55771, 55943, 56114, 56287, 56460,
            56633, 56807, 56982, 57157, 57333,
            57509, 57685, 57863, 58040, 58219,
            58398, 58577, 58757, 58938, 59119,
            59300, 59483, 59665, 59849, 60033,
            60217, 60402, 60588, 60774, 60960,
            61148, 61336, 61524, 61713, 61903,
            62093, 62284, 62475, 62667, 62860,
            63053, 63247, 63441, 63636, 63831,
            64027, 64224, 64422, 64619, 64818,
            65017, 65217, 65417, 65618, 65820,
            66022, 66225, 66429, 66633, 66837,
            67043, 67249, 67455, 67663, 67870,
            68079, 68288, 68498, 68708, 68920,
            69131, 69344, 69557, 69771, 69985,
            70200, 70416, 70632, 70849, 71067,
            71285, 71504, 71724, 71944, 72165,
            72387, 72609, 72833, 73056, 73281,
            73506, 73732, 73958, 74186, 74414,
            74642, 74872, 75102, 75332, 75564,
            75796, 76029, 76262, 76497, 76732,
            76968, 77204, 77441, 77679, 77918,
            78157, 78398, 78638, 78880, 79122,
            79366, 79609, 79854, 80099, 80345,
            80592, 80840, 81088, 81338, 81587,
            81838, 82090, 82342, 82595, 82849,
            83103, 83358, 83615, 83872, 84129,
            84388, 84647, 84907, 85168, 85430,
            85692, 85955, 86220, 86485, 86750,
            87017, 87284, 87552, 87821, 88091,
            88362, 88633, 88906, 89179, 89453,
            89728, 90003, 90280, 90557, 90836,
            91115, 91395, 91676, 91957, 92240,
            92523, 92807, 93093, 93379, 93666,
            93953, 94242, 94532, 94822, 95113,
            95406, 95699, 95993, 96288, 96584,
            96881, 97178, 97477, 97776, 98077,
            98378, 98680, 98984, 99288, 99593,
            99899, 100206, 100514, 100822, 101132,
            101443, 101755, 102067, 102381, 102696,
            103011, 103328, 103645, 103964, 104283,
            104603, 104925, 105247, 105571, 105895,
            106220, 106547, 106874, 107203, 107532,
            107862, 108194, 108526, 108860, 109194,
            109530, 109866, 110204, 110542, 110882,
            111223, 111565, 111907, 112251, 112596,
            112942, 113289, 113637, 113986, 114337,
            114688, 115040, 115394, 115748, 116104,
            116461, 116819, 117178, 117538, 117899,
            118261, 118624, 118989, 119354, 119721,
            120089, 120458, 120828, 121199, 121572,
            121945, 122320, 122696, 123073, 123451,
            123830, 124211, 124593, 124975, 125359,
            125745, 126131, 126518, 126907, 127297,
            127688, 128081, 128474, 128869, 129265,
            129662, 130061, 130260
         ) ),
        max_error = cms.double(0.6152529479288091),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut2 = cms.PSet(
        lut = cms.vint32( (
            256, 256, 257, 258, 259,
            260, 260, 261, 262, 263,
            264, 264, 265, 266, 267,
            268, 268, 269, 270, 271,
            272, 273, 273, 274, 275,
            276, 277, 278, 279, 279,
            280, 281, 282, 283, 284,
            285, 285, 286, 287, 288,
            289, 290, 291, 292, 293,
            293, 294, 295, 296, 297,
            298, 299, 300, 301, 302,
            303, 303, 304, 305, 306,
            307, 308, 309, 310, 311,
            312, 313, 314, 315, 316,
            317, 318, 319, 320, 321,
            322, 323, 324, 325, 326,
            327, 328, 329, 330, 331,
            332, 333, 334, 335, 336,
            337, 338, 339, 340, 341,
            342, 343, 344, 345, 346,
            347, 348, 349, 351, 352,
            353, 354, 355, 356, 357,
            358, 359, 360, 361, 363,
            364, 365, 366, 367, 368,
            369, 370, 372, 373, 374,
            375, 376, 377, 379, 380,
            381, 382, 383, 384, 386,
            387, 388, 389, 390, 392,
            393, 394, 395, 396, 398,
            399, 400, 401, 402, 404,
            405, 406, 407, 409, 410,
            411, 412, 414, 415, 416,
            418, 419, 420, 421, 423,
            424, 425, 427, 428, 429,
            431, 432, 433, 435, 436,
            437, 439, 440, 441, 443,
            444, 445, 447, 448, 449,
            451, 452, 454, 455, 456,
            458, 459, 461, 462, 463,
            465, 466, 468, 469, 471,
            472, 474, 475, 476, 478,
            479, 481, 482, 484, 485,
            487, 488, 490, 491, 493,
            494, 496, 497, 499, 500,
            502, 503, 505, 507, 508,
            510, 511, 513, 514, 516,
            518, 519, 521, 522, 524,
            526, 527, 529, 530, 532,
            534, 535, 537, 539, 540,
            542, 544, 545, 547, 549,
            550, 552, 554, 555, 557,
            559, 561, 562, 564, 566,
            567, 569, 571, 573, 575,
            576, 578, 580, 582, 583,
            585, 587, 589, 591, 592,
            594, 596, 598, 600, 602,
            603, 605, 607, 609, 611,
            613, 615, 617, 618, 620,
            622, 624, 626, 628, 630,
            632, 634, 636, 638, 640,
            642, 644, 646, 648, 650,
            652, 654, 656, 658, 660,
            662, 664, 666, 668, 670,
            672, 674, 676, 678, 680,
            682, 684, 686, 688, 691,
            693, 695, 697, 699, 701,
            703, 706, 708, 710, 712,
            714, 717, 719, 721, 723,
            725, 728, 730, 732, 734,
            737, 739, 741, 743, 746,
            748, 750, 753, 755, 757,
            760, 762, 764, 767, 769,
            771, 774, 776, 778, 781,
            783, 786, 788, 790, 793,
            795, 798, 800, 803, 805,
            808, 810, 813, 815, 818,
            820, 823, 825, 828, 830,
            833, 835, 838, 840, 843,
            846, 848, 851, 853, 856,
            859, 861, 864, 867, 869,
            872, 875, 877, 880, 883,
            885, 888, 891, 894, 896,
            899, 902, 905, 907, 910,
            913, 916, 919, 921, 924,
            927, 930, 933, 936, 939,
            941, 944, 947, 950, 953,
            956, 959, 962, 965, 968,
            971, 974, 977, 980, 983,
            986, 989, 992, 995, 998,
            1001, 1004, 1007, 1010, 1013,
            1017, 1020, 1023, 1026, 1029,
            1032, 1035, 1039, 1042, 1045,
            1048, 1051, 1055, 1058, 1061,
            1064, 1068, 1071, 1074, 1078,
            1081, 1084, 1088, 1091, 1094,
            1098, 1101, 1104, 1108, 1111,
            1115, 1118, 1121, 1125, 1128,
            1132, 1135, 1139, 1142, 1146,
            1149, 1153, 1156, 1160, 1163,
            1167, 1171, 1174, 1178, 1181,
            1185, 1189, 1192, 1196, 1200,
            1203, 1207, 1211, 1214, 1218,
            1222, 1226, 1229, 1233, 1237,
            1241, 1245, 1249, 1252, 1256,
            1260, 1264, 1268, 1272, 1276,
            1280, 1283, 1287, 1291, 1295,
            1299, 1303, 1307, 1311, 1315,
            1319, 1323, 1328, 1332, 1336,
            1340, 1344, 1348, 1352, 1356,
            1360, 1365, 1369, 1373, 1377,
            1382, 1386, 1390, 1394, 1399,
            1403, 1407, 1412, 1416, 1420,
            1425, 1429, 1433, 1438, 1442,
            1447, 1451, 1455, 1460, 1464,
            1469, 1473, 1478, 1483, 1487,
            1492, 1496, 1501, 1505, 1510,
            1515, 1519, 1524, 1529, 1533,
            1538, 1543, 1548, 1552, 1557,
            1562, 1567, 1572, 1576, 1581,
            1586, 1591, 1596, 1601, 1606,
            1611, 1616, 1620, 1625, 1630,
            1635, 1640, 1646, 1651, 1656,
            1661, 1666, 1671, 1676, 1681,
            1686, 1692, 1697, 1702, 1707,
            1712, 1718, 1723, 1728, 1734,
            1739, 1744, 1750, 1755, 1760,
            1766, 1771, 1777, 1782, 1788,
            1793, 1799, 1804, 1810, 1815,
            1821, 1826, 1832, 1838, 1843,
            1849, 1855, 1860, 1866, 1872,
            1878, 1883, 1889, 1895, 1901,
            1907, 1912, 1918, 1924, 1930,
            1936, 1942, 1948, 1954, 1960,
            1966, 1972, 1978, 1984, 1990,
            1996, 2003, 2009, 2015, 2021,
            2027, 2033, 2040, 2046, 2052,
            2059, 2065, 2071, 2078, 2084,
            2090, 2097, 2103, 2110, 2116,
            2123, 2129, 2136, 2142, 2149,
            2156, 2162, 2169, 2175, 2182,
            2189, 2196, 2202, 2209, 2216,
            2223, 2230, 2236, 2243, 2250,
            2257, 2264, 2271, 2278, 2285,
            2292, 2299, 2306, 2313, 2320,
            2327, 2335, 2342, 2349, 2356,
            2363, 2371, 2378, 2385, 2393,
            2400, 2407, 2415, 2422, 2430,
            2437, 2444, 2452, 2460, 2467,
            2475, 2482, 2490, 2498, 2505,
            2513, 2521, 2528, 2536, 2544,
            2552, 2560, 2567, 2575, 2583,
            2591, 2599, 2607, 2615, 2623,
            2631, 2639, 2647, 2656, 2664,
            2672, 2680, 2688, 2697, 2705,
            2713, 2722, 2730, 2738, 2747,
            2755, 2764, 2772, 2781, 2789,
            2798, 2806, 2815, 2824, 2832,
            2841, 2850, 2858, 2867, 2876,
            2885, 2894, 2903, 2912, 2921,
            2930, 2939, 2948, 2957, 2966,
            2975, 2984, 2993, 3002, 3012,
            3021, 3030, 3039, 3049, 3058,
            3067, 3077, 3086, 3096, 3105,
            3115, 3124, 3134, 3144, 3153,
            3163, 3173, 3183, 3192, 3202,
            3212, 3222, 3232, 3242, 3252,
            3262, 3272, 3282, 3292, 3302,
            3312, 3322, 3332, 3343, 3353,
            3363, 3374, 3384, 3394, 3405,
            3415, 3426, 3436, 3447, 3457,
            3468, 3479, 3489, 3500, 3511,
            3522, 3532, 3543, 3554, 3565,
            3576, 3587, 3598, 3609, 3620,
            3631, 3642, 3654, 3665, 3676,
            3687, 3699, 3710, 3722, 3733,
            3744, 3756, 3767, 3779, 3791,
            3802, 3814, 3826, 3837, 3849,
            3861, 3873, 3885, 3897, 3909,
            3921, 3933, 3945, 3957, 3969,
            3981, 3994, 4006, 4018, 4031,
            4043, 4055, 4068, 4080, 4093,
            4105, 4118, 4131, 4143, 4156,
            4169, 4182, 4195, 4207, 4220,
            4233, 4246, 4259, 4272, 4286,
            4299, 4312, 4325, 4339, 4352,
            4365, 4379, 4392, 4406, 4419,
            4433, 4446, 4460, 4474, 4487,
            4501, 4515, 4529, 4543, 4557,
            4571, 4585, 4599, 4613, 4627,
            4641, 4656, 4670, 4684, 4699,
            4713, 4728, 4742, 4757, 4771,
            4786, 4801, 4816, 4830, 4845,
            4860, 4875, 4890, 4905, 4920,
            4935, 4950, 4966, 4981, 4996,
            5011, 5027, 5042, 5058, 5073,
            5089, 5105, 5120, 5136, 5152,
            5168, 5183, 5199, 5215, 5231,
            5247, 5264, 5280, 5296, 5312,
            5329, 5345, 5361, 5378, 5394,
            5411, 5428, 5444, 5461, 5478,
            5495, 5512, 5528, 5545, 5562,
            5580, 5597, 5614, 5631, 5648,
            5666, 5683, 5701, 5718, 5736,
            5753, 5771, 5789, 5807, 5824,
            5842, 5860, 5878, 5896, 5914,
            5933, 5951, 5969, 5987, 6006,
            6024, 6043, 6061, 6080, 6099,
            6117, 6136, 6155, 6174, 6193,
            6212, 6231, 6250, 6269, 6289,
            6308, 6327, 6347, 6366, 6386,
            6406, 6425, 6445, 6465, 6485,
            6505, 6525, 6545, 6565, 6585,
            6605, 6625, 6646, 6666, 6687,
            6707, 6728, 6749, 6769, 6790,
            6811, 6832, 6853, 6874, 6895,
            6916, 6937, 6959, 6980, 7002,
            7023, 7045, 7066, 7088, 7110,
            7132, 7154, 7176, 7198, 7220,
            7242, 7264, 7286, 7309, 7331,
            7354, 7376, 7399, 7422, 7445,
            7468, 7490, 7513, 7537, 7560,
            7583, 7606, 7630, 7653, 7677,
            7700, 7724, 7748, 7771, 7795,
            7819, 7843, 7867, 7892, 7916,
            7940, 7964, 7989, 8014, 8038,
            8063, 8088, 8112, 8137, 8162,
            8187, 8213, 8238, 8263, 8289,
            8314, 8340, 8365, 8391, 8417,
            8443, 8468, 8495, 8521, 8547,
            8573, 8599, 8626, 8652, 8679,
            8706, 8732, 8759, 8786, 8813,
            8840, 8867, 8895, 8922, 8949,
            8977, 9004, 9032, 9060, 9088,
            9116, 9144, 9172, 9200, 9228,
            9256, 9285, 9313, 9342, 9371,
            9400, 9428, 9457, 9486, 9516,
            9545, 9574, 9604, 9633, 9663,
            9692, 9722, 9752, 9782, 9812,
            9842, 9872, 9903, 9933, 9964,
            9994, 10025, 10056, 10087, 10118,
            10149, 10180, 10211, 10243, 10274,
            10306, 10337, 10369, 10401, 10433,
            10465, 10497, 10529, 10562, 10594,
            10627, 10659, 10692, 10725, 10758,
            10791, 10824, 10858, 10891, 10924,
            10958, 10992, 11025, 11059, 11093,
            11127, 11161, 11196, 11230, 11265,
            11299, 11334, 11369, 11404, 11439,
            11474, 11509, 11545, 11580, 11616,
            11651, 11687, 11723, 11759, 11795,
            11831, 11868, 11904, 11941, 11978,
            12014, 12051, 12088, 12125, 12163,
            12200, 12238, 12275, 12313, 12351,
            12389, 12427, 12465, 12503, 12542,
            12580, 12619, 12658, 12696, 12735,
            12775, 12814, 12853, 12893, 12932,
            12972, 13012, 13052, 13092, 13132,
            13173, 13213, 13254, 13294, 13335,
            13376, 13417, 13459, 13500, 13541,
            13583, 13625, 13667, 13709, 13751,
            13793, 13835, 13878, 13920, 13963,
            14006, 14049, 14092, 14136, 14179,
            14223, 14266, 14310, 14354, 14398,
            14443, 14487, 14531, 14576, 14621,
            14666, 14711, 14756, 14801, 14847,
            14892, 14938, 14984, 15030, 15076,
            15123, 15169, 15216, 15263, 15309,
            15356, 15404, 15451, 15498, 15546,
            15594, 15642, 15690, 15738, 15786,
            15835, 15884, 15932, 15981, 16030,
            16080, 16129, 16179, 16228, 16278,
            16328, 16378, 16429, 16479, 16530,
            16581, 16632, 16683, 16734, 16785,
            16837, 16889, 16941, 16993, 17045,
            17097, 17150, 17202, 17255, 17308,
            17361, 17415, 17468, 17522, 17576,
            17630, 17684, 17738, 17793, 17848,
            17902, 17957, 18013, 18068, 18123,
            18179, 18235, 18291, 18347, 18404,
            18460, 18517, 18574, 18631, 18688,
            18746, 18803, 18861, 18919, 18977,
            19035, 19094, 19152, 19211, 19270,
            19330, 19389, 19448, 19508, 19568,
            19628, 19689, 19749, 19810, 19871,
            19932, 19993, 20054, 20116, 20178,
            20240, 20302, 20364, 20427, 20490,
            20553, 20616, 20679, 20743, 20806,
            20870, 20935, 20999, 21063, 21128,
            21193, 21258, 21323, 21389, 21455,
            21521, 21587, 21653, 21720, 21786,
            21853, 21920, 21988, 22055, 22123,
            22191, 22259, 22328, 22396, 22465,
            22534, 22603, 22673, 22742, 22812,
            22882, 22953, 23023, 23094, 23165,
            23236, 23308, 23379, 23451, 23523,
            23595, 23668, 23741, 23814, 23887,
            23960, 24034, 24108, 24182, 24256,
            24330, 24405, 24480, 24555, 24631,
            24707, 24783, 24859, 24935, 25012,
            25089, 25166, 25243, 25320, 25398,
            25476, 25555, 25633, 25712, 25791,
            25870, 25950, 26029, 26109, 26190,
            26270, 26351, 26432, 26513, 26594,
            26676, 26758, 26840, 26923, 27006,
            27088, 27172, 27255, 27339, 27423,
            27507, 27592, 27677, 27762, 27847,
            27932, 28018, 28104, 28191, 28277,
            28364, 28451, 28539, 28626, 28714,
            28803, 28891, 28980, 29069, 29158,
            29248, 29338, 29428, 29518, 29609,
            29700, 29791, 29883, 29975, 30067,
            30159, 30252, 30345, 30438, 30532,
            30625, 30719, 30814, 30909, 31003,
            31099, 31194, 31290, 31386, 31483,
            31579, 31677, 31774, 31871, 31969,
            32068, 32166, 32265, 32364, 32464,
            32563, 32663, 32764, 32864, 32965,
            33067, 33168, 33270, 33372, 33475,
            33578, 33681, 33785, 33888, 33992,
            34097, 34202, 34307, 34412, 34518,
            34624, 34730, 34837, 34944, 35051,
            35159, 35267, 35376, 35484, 35593,
            35703, 35812, 35922, 36033, 36144,
            36255, 36366, 36478, 36590, 36702,
            36815, 36928, 37042, 37155, 37270,
            37384, 37499, 37614, 37730, 37846,
            37962, 38079, 38196, 38313, 38431,
            38549, 38667, 38786, 38905, 39025,
            39145, 39265, 39386, 39507, 39628,
            39750, 39872, 39994, 40117, 40241,
            40364, 40488, 40613, 40737, 40863,
            40988, 41114, 41240, 41367, 41494,
            41622, 41750, 41878, 42007, 42136,
            42265, 42395, 42525, 42656, 42787,
            42919, 43050, 43183, 43315, 43448,
            43582, 43716, 43850, 43985, 44120,
            44256, 44392, 44528, 44665, 44802,
            44940, 45078, 45216, 45355, 45495,
            45634, 45775, 45915, 46056, 46198,
            46340, 46482, 46625, 46768, 46912,
            47056, 47201, 47346, 47491, 47637,
            47784, 47930, 48078, 48225, 48374,
            48522, 48671, 48821, 48971, 49121,
            49272, 49424, 49576, 49728, 49881,
            50034, 50188, 50342, 50497, 50652,
            50807, 50963, 51120, 51277, 51435,
            51593, 51751, 51910, 52070, 52230,
            52390, 52551, 52713, 52875, 53037,
            53200, 53364, 53528, 53692, 53857,
            54022, 54188, 54355, 54522, 54690,
            54858, 55026, 55195, 55365, 55535,
            55706, 55877, 56048, 56221, 56393,
            56567, 56740, 56915, 57090, 57265,
            57441, 57618, 57795, 57972, 58150,
            58329, 58508, 58688, 58868, 59049,
            59231, 59413, 59595, 59778, 59962,
            60146, 60331, 60516, 60702, 60889,
            61076, 61264, 61452, 61641, 61830,
            62020, 62211, 62402, 62594, 62786,
            62979, 63172, 63366, 63561, 63756,
            63952, 64149, 64346, 64544, 64742,
            64941, 65140, 65341, 65541, 65743,
            65945, 66147, 66351, 66555, 66759,
            66964, 67170, 67376, 67583, 67791,
            67999, 68208, 68418, 68628, 68839,
            69050, 69263, 69475, 69689, 69903,
            70118, 70333, 70549, 70766, 70984,
            71202, 71421, 71640, 71860, 72081,
            72302, 72525, 72747, 72971, 73195,
            73420, 73646, 73872, 74099, 74327,
            74555, 74784, 75014, 75244, 75476,
            75707, 75940, 76173, 76407, 76642,
            76878, 77114, 77351, 77589, 77827,
            78066, 78306, 78547, 78788, 79030,
            79273, 79516, 79761, 80006, 80252,
            80498, 80746, 80994, 81243, 81492,
            81743, 81994, 82246, 82498, 82752,
            83006, 83261, 83517, 83774, 84031,
            84289, 84548, 84808, 85069, 85330,
            85592, 85855, 86119, 86384, 86649,
            86915, 87182, 87450, 87719, 87989,
            88259, 88530, 88802, 89075, 89349,
            89623, 89899, 90175, 90452, 90730,
            91009, 91288, 91569, 91850, 92132,
            92415, 92699, 92984, 93270, 93557,
            93844, 94132, 94422, 94712, 95003,
            95295, 95587, 95881, 96176, 96471,
            96768, 97065, 97363, 97662, 97963,
            98264, 98565, 98868, 99172, 99477,
            99783, 100089, 100397, 100705, 101015,
            101325, 101636, 101949, 102262, 102576,
            102891, 103207, 103525, 103843, 104162,
            104482, 104803, 105125, 105448, 105772,
            106097, 106423, 106750, 107078, 107407,
            107737, 108068, 108400, 108733, 109067,
            109402, 109738, 110076, 110414, 110753,
            111093, 111435, 111777, 112121, 112465,
            112811, 113157, 113505, 113854, 114204,
            114555, 114907, 115260, 115614, 115969,
            116325, 116683, 117041, 117401, 117762,
            118124, 118486, 118851, 119216, 119582,
            119949, 120318, 120688, 121059, 121431,
            121804, 122178, 122553, 122930, 123308,
            123687, 124067, 124448, 124830, 125214,
            125598, 125984, 126371, 126760, 127149,
            127540, 127932, 128325, 128719, 129115,
            129511, 129909, 130309, 130709, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071
         ) ),
        max_error = cms.double(5748.616225984908),
        output_scale_factor = cms.double(0.953125),
        unused_lsbs = cms.uint32(2)
    ),
    inv_mass_checks = cms.untracked.bool(False),
    maxDR = cms.double(1.4),
    maxDz = cms.double(1),
    minDR = cms.double(0),
    os = cms.bool(True),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    sanity_checks = cms.untracked.bool(False),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    )
)


process.DoubleTkMuonTkEle559 = cms.EDFilter("L1GTTripleObjectCond",
    collection1 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        minQualityScore = cms.uint32(0),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 0.83, 1.24),
        regionsMinPt = cms.vdouble(5, 5, 5),
        tag = cms.InputTag("l1tGTProducer","GMTTkMuons")
    ),
    collection2 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        minQualityScore = cms.uint32(0),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 0.83, 1.24),
        regionsMinPt = cms.vdouble(5, 5, 5),
        tag = cms.InputTag("l1tGTProducer","GMTTkMuons")
    ),
    collection3 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 1.479),
        regionsMinPt = cms.vdouble(7, 6),
        regionsQualityFlags = cms.vuint32(2, 0),
        tag = cms.InputTag("l1tGTProducer","CL2Electrons")
    ),
    correl12 = cms.PSet(
        maxDz = cms.double(1),
        minDR = cms.double(0)
    ),
    correl13 = cms.PSet(
        maxDz = cms.double(1)
    ),
    cos_phi_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            487, 487, 487, 487, 487,
            487, 487, 487, 487, 487,
            487, 486, 486, 486, 486,
            486, 486, 486, 485, 485,
            485, 485, 485, 485, 484,
            484, 484, 484, 484, 483,
            483, 483, 483, 483, 482,
            482, 482, 482, 481, 481,
            481, 481, 480, 480, 480,
            480, 479, 479, 479, 478,
            478, 478, 478, 477, 477,
            477, 476, 476, 476, 475,
            475, 475, 474, 474, 474,
            473, 473, 472, 472, 472,
            471, 471, 471, 470, 470,
            469, 469, 468, 468, 468,
            467, 467, 466, 466, 465,
            465, 465, 464, 464, 463,
            463, 462, 462, 461, 461,
            460, 460, 459, 459, 458,
            458, 457, 457, 456, 456,
            455, 454, 454, 453, 453,
            452, 452, 451, 451, 450,
            449, 449, 448, 448, 447,
            446, 446, 445, 445, 444,
            443, 443, 442, 441, 441,
            440, 440, 439, 438, 438,
            437, 436, 436, 435, 434,
            434, 433, 432, 431, 431,
            430, 429, 429, 428, 427,
            426, 426, 425, 424, 423,
            423, 422, 421, 420, 420,
            419, 418, 417, 417, 416,
            415, 414, 413, 413, 412,
            411, 410, 409, 409, 408,
            407, 406, 405, 405, 404,
            403, 402, 401, 400, 399,
            399, 398, 397, 396, 395,
            394, 393, 392, 392, 391,
            390, 389, 388, 387, 386,
            385, 384, 383, 382, 381,
            381, 380, 379, 378, 377,
            376, 375, 374, 373, 372,
            371, 370, 369, 368, 367,
            366, 365, 364, 363, 362,
            361, 360, 359, 358, 357,
            356, 355, 354, 353, 352,
            351, 350, 349, 348, 347,
            346, 345, 343, 342, 341,
            340, 339, 338, 337, 336,
            335, 334, 333, 332, 330,
            329, 328, 327, 326, 325,
            324, 323, 322, 320, 319,
            318, 317, 316, 315, 314,
            312, 311, 310, 309, 308,
            307, 306, 304, 303, 302,
            301, 300, 298, 297, 296,
            295, 294, 293, 291, 290,
            289, 288, 286, 285, 284,
            283, 282, 280, 279, 278,
            277, 275, 274, 273, 272,
            270, 269, 268, 267, 265,
            264, 263, 262, 260, 259,
            258, 257, 255, 254, 253,
            252, 250, 249, 248, 246,
            245, 244, 242, 241, 240,
            239, 237, 236, 235, 233,
            232, 231, 229, 228, 227,
            225, 224, 223, 221, 220,
            219, 217, 216, 215, 213,
            212, 211, 209, 208, 207,
            205, 204, 203, 201, 200,
            198, 197, 196, 194, 193,
            192, 190, 189, 187, 186,
            185, 183, 182, 181, 179,
            178, 176, 175, 174, 172,
            171, 169, 168, 167, 165,
            164, 162, 161, 159, 158,
            157, 155, 154, 152, 151,
            150, 148, 147, 145, 144,
            142, 141, 140, 138, 137,
            135, 134, 132, 131, 129,
            128, 127, 125, 124, 122,
            121, 119, 118, 116, 115,
            113, 112, 111, 109, 108,
            106, 105, 103, 102, 100,
            99, 97, 96, 94, 93,
            92, 90, 89, 87, 86,
            84, 83, 81, 80, 78,
            77, 75, 74, 72, 71,
            69, 68, 66, 65, 63,
            62, 60, 59, 58, 56,
            55, 53, 52, 50, 49,
            47, 46, 44, 43, 41,
            40, 38, 37, 35, 34,
            32, 31, 29, 28, 26,
            25, 23, 22, 20, 19,
            17, 16, 14, 13, 11,
            10, 8, 7, 5, 4,
            2, 1, -1, -2, -4,
            -5, -7, -8, -10, -11,
            -13, -14, -16, -17, -19,
            -20, -22, -23, -25, -26,
            -28, -29, -31, -32, -34,
            -35, -37, -38, -40, -41,
            -43, -44, -46, -47, -49,
            -50, -52, -53, -55, -56,
            -58, -59, -60, -62, -63,
            -65, -66, -68, -69, -71,
            -72, -74, -75, -77, -78,
            -80, -81, -83, -84, -86,
            -87, -89, -90, -92, -93,
            -94, -96, -97, -99, -100,
            -102, -103, -105, -106, -108,
            -109, -111, -112, -113, -115,
            -116, -118, -119, -121, -122,
            -124, -125, -127, -128, -129,
            -131, -132, -134, -135, -137,
            -138, -140, -141, -142, -144,
            -145, -147, -148, -150, -151,
            -152, -154, -155, -157, -158,
            -159, -161, -162, -164, -165,
            -167, -168, -169, -171, -172,
            -174, -175, -176, -178, -179,
            -181, -182, -183, -185, -186,
            -187, -189, -190, -192, -193,
            -194, -196, -197, -198, -200,
            -201, -203, -204, -205, -207,
            -208, -209, -211, -212, -213,
            -215, -216, -217, -219, -220,
            -221, -223, -224, -225, -227,
            -228, -229, -231, -232, -233,
            -235, -236, -237, -239, -240,
            -241, -242, -244, -245, -246,
            -248, -249, -250, -252, -253,
            -254, -255, -257, -258, -259,
            -260, -262, -263, -264, -265,
            -267, -268, -269, -270, -272,
            -273, -274, -275, -277, -278,
            -279, -280, -282, -283, -284,
            -285, -286, -288, -289, -290,
            -291, -293, -294, -295, -296,
            -297, -298, -300, -301, -302,
            -303, -304, -306, -307, -308,
            -309, -310, -311, -312, -314,
            -315, -316, -317, -318, -319,
            -320, -322, -323, -324, -325,
            -326, -327, -328, -329, -330,
            -332, -333, -334, -335, -336,
            -337, -338, -339, -340, -341,
            -342, -343, -345, -346, -347,
            -348, -349, -350, -351, -352,
            -353, -354, -355, -356, -357,
            -358, -359, -360, -361, -362,
            -363, -364, -365, -366, -367,
            -368, -369, -370, -371, -372,
            -373, -374, -375, -376, -377,
            -378, -379, -380, -381, -381,
            -382, -383, -384, -385, -386,
            -387, -388, -389, -390, -391,
            -392, -392, -393, -394, -395,
            -396, -397, -398, -399, -399,
            -400, -401, -402, -403, -404,
            -405, -405, -406, -407, -408,
            -409, -409, -410, -411, -412,
            -413, -413, -414, -415, -416,
            -417, -417, -418, -419, -420,
            -420, -421, -422, -423, -423,
            -424, -425, -426, -426, -427,
            -428, -429, -429, -430, -431,
            -431, -432, -433, -434, -434,
            -435, -436, -436, -437, -438,
            -438, -439, -440, -440, -441,
            -441, -442, -443, -443, -444,
            -445, -445, -446, -446, -447,
            -448, -448, -449, -449, -450,
            -451, -451, -452, -452, -453,
            -453, -454, -454, -455, -456,
            -456, -457, -457, -458, -458,
            -459, -459, -460, -460, -461,
            -461, -462, -462, -463, -463,
            -464, -464, -465, -465, -465,
            -466, -466, -467, -467, -468,
            -468, -468, -469, -469, -470,
            -470, -471, -471, -471, -472,
            -472, -472, -473, -473, -474,
            -474, -474, -475, -475, -475,
            -476, -476, -476, -477, -477,
            -477, -478, -478, -478, -478,
            -479, -479, -479, -480, -480,
            -480, -480, -481, -481, -481,
            -481, -482, -482, -482, -482,
            -483, -483, -483, -483, -483,
            -484, -484, -484, -484, -484,
            -485, -485, -485, -485, -485,
            -485, -486, -486, -486, -486,
            -486, -486, -486, -487, -487,
            -487, -487, -487, -487, -487,
            -487, -487, -487, -487, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488
         ) ),
        max_error = cms.double(0.0025338281044886835),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            489, 489, 489, 489, 489,
            489, 489, 489, 489, 489,
            489, 490, 490, 490, 490,
            490, 490, 490, 491, 491,
            491, 491, 491, 491, 492,
            492, 492, 492, 492, 493,
            493, 493, 493, 493, 494,
            494, 494, 494, 495, 495,
            495, 495, 496, 496, 496,
            496, 497, 497, 497, 498,
            498, 498, 499, 499, 499,
            499, 500, 500, 500, 501,
            501, 502, 502, 502, 503,
            503, 503, 504, 504, 504,
            505, 505, 506, 506, 507,
            507, 507, 508, 508, 509,
            509, 510, 510, 510, 511,
            511, 512, 512, 513, 513,
            514, 514, 515, 515, 516,
            516, 517, 517, 518, 518,
            519, 520, 520, 521, 521,
            522, 522, 523, 523, 524,
            525, 525, 526, 526, 527,
            528, 528, 529, 530, 530,
            531, 531, 532, 533, 533,
            534, 535, 535, 536, 537,
            537, 538, 539, 540, 540,
            541, 542, 542, 543, 544,
            545, 545, 546, 547, 548,
            548, 549, 550, 551, 551,
            552, 553, 554, 555, 555,
            556, 557, 558, 559, 560,
            560, 561, 562, 563, 564,
            565, 566, 567, 567, 568,
            569, 570, 571, 572, 573,
            574, 575, 576, 577, 577,
            578, 579, 580, 581, 582,
            583, 584, 585, 586, 587,
            588, 589, 590, 591, 592,
            593, 594, 595, 596, 598,
            599, 600, 601, 602, 603,
            604, 605, 606, 607, 608,
            610, 611, 612, 613, 614,
            615, 616, 618, 619, 620,
            621, 622, 623, 625, 626,
            627, 628, 629, 631, 632,
            633, 634, 636, 637, 638,
            639, 641, 642, 643, 644,
            646, 647, 648, 650, 651,
            652, 654, 655, 656, 658,
            659, 660, 662, 663, 665,
            666, 667, 669, 670, 672,
            673, 674, 676, 677, 679,
            680, 682, 683, 685, 686,
            687, 689, 690, 692, 693,
            695, 697, 698, 700, 701,
            703, 704, 706, 707, 709,
            710, 712, 714, 715, 717,
            719, 720, 722, 723, 725,
            727, 728, 730, 732, 733,
            735, 737, 738, 740, 742,
            744, 745, 747, 749, 750,
            752, 754, 756, 758, 759,
            761, 763, 765, 767, 768,
            770, 772, 774, 776, 778,
            779, 781, 783, 785, 787,
            789, 791, 793, 795, 796,
            798, 800, 802, 804, 806,
            808, 810, 812, 814, 816,
            818, 820, 822, 824, 826,
            828, 830, 832, 835, 837,
            839, 841, 843, 845, 847,
            849, 851, 854, 856, 858,
            860, 862, 864, 867, 869,
            871, 873, 875, 878, 880,
            882, 884, 887, 889, 891,
            894, 896, 898, 900, 903,
            905, 907, 910, 912, 915,
            917, 919, 922, 924, 927,
            929, 931, 934, 936, 939,
            941, 944, 946, 949, 951,
            954, 956, 959, 961, 964,
            966, 969, 971, 974, 977,
            979, 982, 984, 987, 990,
            992, 995, 998, 1000, 1003,
            1006, 1008, 1011, 1014, 1017,
            1019, 1022, 1025, 1028, 1030,
            1033, 1036, 1039, 1042, 1044,
            1047, 1050, 1053, 1056, 1059,
            1062, 1065, 1067, 1070, 1073,
            1076, 1079, 1082, 1085, 1088,
            1091, 1094, 1097, 1100, 1103,
            1106, 1109, 1112, 1115, 1118,
            1122, 1125, 1128, 1131, 1134,
            1137, 1140, 1143, 1147, 1150,
            1153, 1156, 1159, 1163, 1166,
            1169, 1172, 1176, 1179, 1182,
            1186, 1189, 1192, 1196, 1199,
            1202, 1206, 1209, 1212, 1216,
            1219, 1223, 1226, 1230, 1233,
            1237, 1240, 1244, 1247, 1251,
            1254, 1258, 1261, 1265, 1268,
            1272, 1276, 1279, 1283, 1287,
            1290, 1294, 1298, 1301, 1305,
            1309, 1312, 1316, 1320, 1324,
            1327, 1331, 1335, 1339, 1343,
            1347, 1350, 1354, 1358, 1362,
            1366, 1370, 1374, 1378, 1382,
            1386, 1390, 1394, 1398, 1402,
            1406, 1410, 1414, 1418, 1422,
            1426, 1430, 1434, 1439, 1443,
            1447, 1451, 1455, 1459, 1464,
            1468, 1472, 1476, 1481, 1485,
            1489, 1494, 1498, 1502, 1507,
            1511, 1516, 1520, 1524, 1529,
            1533, 1538, 1542, 1547, 1551,
            1556, 1560, 1565, 1569, 1574,
            1579, 1583, 1588, 1592, 1597,
            1602, 1606, 1611, 1616, 1621,
            1625, 1630, 1635, 1640, 1645,
            1649, 1654, 1659, 1664, 1669,
            1674, 1679, 1684, 1689, 1693,
            1698, 1703, 1708, 1714, 1719,
            1724, 1729, 1734, 1739, 1744,
            1749, 1754, 1760, 1765, 1770,
            1775, 1780, 1786, 1791, 1796,
            1802, 1807, 1812, 1818, 1823,
            1828, 1834, 1839, 1845, 1850,
            1856, 1861, 1867, 1872, 1878,
            1883, 1889, 1894, 1900, 1906,
            1911, 1917, 1923, 1929, 1934,
            1940, 1946, 1952, 1957, 1963,
            1969, 1975, 1981, 1987, 1993,
            1999, 2004, 2010, 2016, 2022,
            2028, 2035, 2041, 2047, 2053,
            2059, 2065, 2071, 2077, 2084,
            2090, 2096, 2102, 2109, 2115,
            2121, 2128, 2134, 2140, 2147,
            2153, 2160, 2166, 2173, 2179,
            2186, 2192, 2199, 2205, 2212,
            2219, 2225, 2232, 2239, 2245,
            2252, 2259, 2266, 2272, 2279,
            2286, 2293, 2300, 2307, 2314,
            2321, 2328, 2335, 2342, 2349,
            2356, 2363, 2370, 2377, 2384,
            2391, 2398, 2406, 2413, 2420,
            2427, 2435, 2442, 2449, 2457,
            2464, 2472, 2479, 2487, 2494,
            2502, 2509, 2517, 2524, 2532,
            2539, 2547, 2555, 2563, 2570,
            2578, 2586, 2594, 2601, 2609,
            2617, 2625, 2633, 2641, 2649,
            2657, 2665, 2673, 2681, 2689,
            2697, 2705, 2714, 2722, 2730,
            2738, 2747, 2755, 2763, 2772,
            2780, 2788, 2797, 2805, 2814,
            2822, 2831, 2839, 2848, 2857,
            2865, 2874, 2883, 2891, 2900,
            2909, 2918, 2927, 2935, 2944,
            2953, 2962, 2971, 2980, 2989,
            2998, 3007, 3016, 3026, 3035,
            3044, 3053, 3062, 3072, 3081,
            3090, 3100, 3109, 3119, 3128,
            3138, 3147, 3157, 3166, 3176,
            3186, 3195, 3205, 3215, 3224,
            3234, 3244, 3254, 3264, 3274,
            3284, 3294, 3304, 3314, 3324,
            3334, 3344, 3354, 3364, 3375,
            3385, 3395, 3405, 3416, 3426,
            3437, 3447, 3458, 3468, 3479,
            3489, 3500, 3510, 3521, 3532,
            3543, 3553, 3564, 3575, 3586,
            3597, 3608, 3619, 3630, 3641,
            3652, 3663, 3674, 3685, 3697,
            3708, 3719, 3730, 3742, 3753,
            3765, 3776, 3788, 3799, 3811,
            3822, 3834, 3846, 3857, 3869,
            3881, 3893, 3905, 3917, 3929,
            3941, 3953, 3965, 3977, 3989,
            4001, 4013, 4025, 4038, 4050,
            4062, 4075, 4087, 4100, 4112,
            4125, 4137, 4150, 4163, 4175,
            4188, 4201, 4214, 4226, 4239,
            4252, 4265, 4278, 4291, 4304,
            4318, 4331, 4344, 4357, 4371,
            4384, 4397, 4411, 4424, 4438,
            4451, 4465, 4479, 4492, 4506,
            4520, 4533, 4547, 4561, 4575,
            4589, 4603, 4617, 4631, 4645,
            4660, 4674, 4688, 4703, 4717,
            4731, 4746, 4760, 4775, 4789,
            4804, 4819, 4833, 4848, 4863,
            4878, 4893, 4908, 4923, 4938,
            4953, 4968, 4983, 4999, 5014,
            5029, 5045, 5060, 5075, 5091,
            5107, 5122, 5138, 5154, 5169,
            5185, 5201, 5217, 5233, 5249,
            5265, 5281, 5297, 5313, 5330,
            5346, 5362, 5379, 5395, 5412,
            5428, 5445, 5462, 5478, 5495,
            5512, 5529, 5546, 5563, 5580,
            5597, 5614, 5631, 5648, 5666,
            5683, 5700, 5718, 5735, 5753,
            5770, 5788, 5806, 5824, 5841,
            5859, 5877, 5895, 5913, 5931,
            5950, 5968, 5986, 6004, 6023,
            6041, 6060, 6078, 6097, 6116,
            6134, 6153, 6172, 6191, 6210,
            6229, 6248, 6267, 6286, 6305,
            6325, 6344, 6364, 6383, 6403,
            6422, 6442, 6462, 6481, 6501,
            6521, 6541, 6561, 6581, 6602,
            6622, 6642, 6662, 6683, 6703,
            6724, 6744, 6765, 6786, 6807,
            6828, 6848, 6869, 6891, 6912,
            6933, 6954, 6975, 6997, 7018,
            7040, 7061, 7083, 7105, 7126,
            7148, 7170, 7192, 7214, 7236,
            7259, 7281, 7303, 7325, 7348,
            7370, 7393, 7416, 7438, 7461,
            7484, 7507, 7530, 7553, 7576,
            7600, 7623, 7646, 7670, 7693,
            7717, 7741, 7764, 7788, 7812,
            7836, 7860, 7884, 7908, 7932,
            7957, 7981, 8006, 8030, 8055,
            8080, 8104, 8129, 8154, 8179,
            8204, 8229, 8255, 8280, 8305,
            8331, 8356, 8382, 8408, 8434,
            8459, 8485, 8511, 8537, 8564,
            8590, 8616, 8643, 8669, 8696,
            8722, 8749, 8776, 8803, 8830,
            8857, 8884, 8912, 8939, 8966,
            8994, 9021, 9049, 9077, 9105,
            9133, 9161, 9189, 9217, 9245,
            9274, 9302, 9331, 9359, 9388,
            9417, 9446, 9475, 9504, 9533,
            9562, 9591, 9621, 9650, 9680,
            9710, 9740, 9769, 9799, 9830,
            9860, 9890, 9920, 9951, 9981,
            10012, 10043, 10073, 10104, 10135,
            10166, 10198, 10229, 10260, 10292,
            10323, 10355, 10387, 10419, 10451,
            10483, 10515, 10547, 10580, 10612,
            10645, 10677, 10710, 10743, 10776,
            10809, 10842, 10876, 10909, 10942,
            10976, 11010, 11044, 11077, 11111,
            11146, 11180, 11214, 11248, 11283,
            11318, 11352, 11387, 11422, 11457,
            11492, 11528, 11563, 11599, 11634,
            11670, 11706, 11742, 11778, 11814,
            11850, 11887, 11923, 11960, 11996,
            12033, 12070, 12107, 12144, 12182,
            12219, 12257, 12294, 12332, 12370,
            12408, 12446, 12484, 12522, 12561,
            12599, 12638, 12677, 12716, 12755,
            12794, 12833, 12873, 12912, 12952,
            12992, 13032, 13072, 13112, 13152,
            13192, 13233, 13274, 13314, 13355,
            13396, 13437, 13479, 13520, 13561,
            13603, 13645, 13687, 13729, 13771,
            13813, 13856, 13898, 13941, 13984,
            14027, 14070, 14113, 14156, 14200,
            14243, 14287, 14331, 14375, 14419,
            14463, 14508, 14552, 14597, 14642,
            14687, 14732, 14777, 14823, 14868,
            14914, 14960, 15005, 15052, 15098,
            15144, 15191, 15237, 15284, 15331,
            15378, 15425, 15473, 15520, 15568,
            15616, 15664, 15712, 15760, 15808,
            15857, 15906, 15955, 16004, 16053,
            16102, 16151, 16201, 16251, 16301,
            16351, 16401, 16451, 16502, 16553,
            16603, 16654, 16706, 16757, 16808,
            16860, 16912, 16964, 17016, 17068,
            17121, 17173, 17226, 17279, 17332,
            17385, 17438, 17492, 17546, 17600,
            17654, 17708, 17762, 17817, 17872,
            17926, 17982, 18037, 18092, 18148,
            18203, 18259, 18315, 18372, 18428,
            18485, 18542, 18598, 18656, 18713,
            18770, 18828, 18886, 18944, 19002,
            19060, 19119, 19178, 19237, 19296,
            19355, 19414, 19474, 19534, 19594,
            19654, 19714, 19775, 19836, 19897,
            19958, 20019, 20081, 20142, 20204,
            20266, 20328, 20391, 20454, 20516,
            20579, 20643, 20706, 20770, 20833,
            20897, 20962, 21026, 21091, 21155,
            21220, 21286, 21351, 21417, 21482,
            21548, 21615, 21681, 21748, 21814,
            21881, 21949, 22016, 22084, 22151,
            22220, 22288, 22356, 22425, 22494,
            22563, 22632, 22702, 22771, 22841,
            22912, 22982, 23053, 23123, 23194,
            23266, 23337, 23409, 23481, 23553,
            23625, 23698, 23771, 23844, 23917,
            23990, 24064, 24138, 24212, 24287,
            24361, 24436, 24511, 24586, 24662,
            24738, 24814, 24890, 24966, 25043,
            25120, 25197, 25275, 25352, 25430,
            25508, 25587, 25665, 25744, 25823,
            25902, 25982, 26062, 26142, 26222,
            26303, 26384, 26465, 26546, 26627,
            26709, 26791, 26874, 26956, 27039,
            27122, 27205, 27289, 27373, 27457,
            27541, 27626, 27711, 27796, 27881,
            27967, 28053, 28139, 28226, 28312,
            28399, 28486, 28574, 28662, 28750,
            28838, 28927, 29016, 29105, 29194,
            29284, 29374, 29464, 29555, 29645,
            29736, 29828, 29919, 30011, 30104,
            30196, 30289, 30382, 30475, 30569,
            30663, 30757, 30851, 30946, 31041,
            31137, 31232, 31328, 31425, 31521,
            31618, 31715, 31813, 31910, 32008,
            32107, 32205, 32304, 32403, 32503,
            32603, 32703, 32804, 32904, 33005,
            33107, 33209, 33311, 33413, 33516,
            33619, 33722, 33825, 33929, 34034,
            34138, 34243, 34348, 34454, 34560,
            34666, 34772, 34879, 34986, 35094,
            35202, 35310, 35418, 35527, 35636,
            35746, 35856, 35966, 36076, 36187,
            36298, 36410, 36522, 36634, 36746,
            36859, 36973, 37086, 37200, 37314,
            37429, 37544, 37659, 37775, 37891,
            38008, 38124, 38241, 38359, 38477,
            38595, 38714, 38833, 38952, 39072,
            39192, 39312, 39433, 39554, 39675,
            39797, 39920, 40042, 40165, 40289,
            40413, 40537, 40661, 40786, 40911,
            41037, 41163, 41290, 41417, 41544,
            41671, 41800, 41928, 42057, 42186,
            42316, 42446, 42576, 42707, 42838,
            42970, 43102, 43234, 43367, 43500,
            43634, 43768, 43902, 44037, 44173,
            44308, 44444, 44581, 44718, 44855,
            44993, 45131, 45270, 45409, 45549,
            45689, 45829, 45970, 46111, 46253,
            46395, 46537, 46680, 46824, 46968,
            47112, 47257, 47402, 47548, 47694,
            47840, 47987, 48135, 48283, 48431,
            48580, 48729, 48879, 49029, 49180,
            49331, 49482, 49634, 49787, 49940,
            50093, 50247, 50401, 50556, 50712,
            50867, 51024, 51181, 51338, 51495,
            51654, 51812, 51972, 52131, 52291,
            52452, 52613, 52775, 52937, 53100,
            53263, 53427, 53591, 53755, 53921,
            54086, 54252, 54419, 54586, 54754,
            54922, 55091, 55260, 55430, 55600,
            55771, 55943, 56114, 56287, 56460,
            56633, 56807, 56982, 57157, 57333,
            57509, 57685, 57863, 58040, 58219,
            58398, 58577, 58757, 58938, 59119,
            59300, 59483, 59665, 59849, 60033,
            60217, 60402, 60588, 60774, 60960,
            61148, 61336, 61524, 61713, 61903,
            62093, 62284, 62475, 62667, 62860,
            63053, 63247, 63441, 63636, 63831,
            64027, 64224, 64422, 64619, 64818,
            65017, 65217, 65417, 65618, 65820,
            66022, 66225, 66429, 66633, 66837,
            67043, 67249, 67455, 67663, 67870,
            68079, 68288, 68498, 68708, 68920,
            69131, 69344, 69557, 69771, 69985,
            70200, 70416, 70632, 70849, 71067,
            71285, 71504, 71724, 71944, 72165,
            72387, 72609, 72833, 73056, 73281,
            73506, 73732, 73958, 74186, 74414,
            74642, 74872, 75102, 75332, 75564,
            75796, 76029, 76262, 76497, 76732,
            76968, 77204, 77441, 77679, 77918,
            78157, 78398, 78638, 78880, 79122,
            79366, 79609, 79854, 80099, 80345,
            80592, 80840, 81088, 81338, 81587,
            81838, 82090, 82342, 82595, 82849,
            83103, 83358, 83615, 83872, 84129,
            84388, 84647, 84907, 85168, 85430,
            85692, 85955, 86220, 86485, 86750,
            87017, 87284, 87552, 87821, 88091,
            88362, 88633, 88906, 89179, 89453,
            89728, 90003, 90280, 90557, 90836,
            91115, 91395, 91676, 91957, 92240,
            92523, 92807, 93093, 93379, 93666,
            93953, 94242, 94532, 94822, 95113,
            95406, 95699, 95993, 96288, 96584,
            96881, 97178, 97477, 97776, 98077,
            98378, 98680, 98984, 99288, 99593,
            99899, 100206, 100514, 100822, 101132,
            101443, 101755, 102067, 102381, 102696,
            103011, 103328, 103645, 103964, 104283,
            104603, 104925, 105247, 105571, 105895,
            106220, 106547, 106874, 107203, 107532,
            107862, 108194, 108526, 108860, 109194,
            109530, 109866, 110204, 110542, 110882,
            111223, 111565, 111907, 112251, 112596,
            112942, 113289, 113637, 113986, 114337,
            114688, 115040, 115394, 115748, 116104,
            116461, 116819, 117178, 117538, 117899,
            118261, 118624, 118989, 119354, 119721,
            120089, 120458, 120828, 121199, 121572,
            121945, 122320, 122696, 123073, 123451,
            123830, 124211, 124593, 124975, 125359,
            125745, 126131, 126518, 126907, 127297,
            127688, 128081, 128474, 128869, 129265,
            129662, 130061, 130260
         ) ),
        max_error = cms.double(0.6152529479288091),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut2 = cms.PSet(
        lut = cms.vint32( (
            256, 256, 257, 258, 259,
            260, 260, 261, 262, 263,
            264, 264, 265, 266, 267,
            268, 268, 269, 270, 271,
            272, 273, 273, 274, 275,
            276, 277, 278, 279, 279,
            280, 281, 282, 283, 284,
            285, 285, 286, 287, 288,
            289, 290, 291, 292, 293,
            293, 294, 295, 296, 297,
            298, 299, 300, 301, 302,
            303, 303, 304, 305, 306,
            307, 308, 309, 310, 311,
            312, 313, 314, 315, 316,
            317, 318, 319, 320, 321,
            322, 323, 324, 325, 326,
            327, 328, 329, 330, 331,
            332, 333, 334, 335, 336,
            337, 338, 339, 340, 341,
            342, 343, 344, 345, 346,
            347, 348, 349, 351, 352,
            353, 354, 355, 356, 357,
            358, 359, 360, 361, 363,
            364, 365, 366, 367, 368,
            369, 370, 372, 373, 374,
            375, 376, 377, 379, 380,
            381, 382, 383, 384, 386,
            387, 388, 389, 390, 392,
            393, 394, 395, 396, 398,
            399, 400, 401, 402, 404,
            405, 406, 407, 409, 410,
            411, 412, 414, 415, 416,
            418, 419, 420, 421, 423,
            424, 425, 427, 428, 429,
            431, 432, 433, 435, 436,
            437, 439, 440, 441, 443,
            444, 445, 447, 448, 449,
            451, 452, 454, 455, 456,
            458, 459, 461, 462, 463,
            465, 466, 468, 469, 471,
            472, 474, 475, 476, 478,
            479, 481, 482, 484, 485,
            487, 488, 490, 491, 493,
            494, 496, 497, 499, 500,
            502, 503, 505, 507, 508,
            510, 511, 513, 514, 516,
            518, 519, 521, 522, 524,
            526, 527, 529, 530, 532,
            534, 535, 537, 539, 540,
            542, 544, 545, 547, 549,
            550, 552, 554, 555, 557,
            559, 561, 562, 564, 566,
            567, 569, 571, 573, 575,
            576, 578, 580, 582, 583,
            585, 587, 589, 591, 592,
            594, 596, 598, 600, 602,
            603, 605, 607, 609, 611,
            613, 615, 617, 618, 620,
            622, 624, 626, 628, 630,
            632, 634, 636, 638, 640,
            642, 644, 646, 648, 650,
            652, 654, 656, 658, 660,
            662, 664, 666, 668, 670,
            672, 674, 676, 678, 680,
            682, 684, 686, 688, 691,
            693, 695, 697, 699, 701,
            703, 706, 708, 710, 712,
            714, 717, 719, 721, 723,
            725, 728, 730, 732, 734,
            737, 739, 741, 743, 746,
            748, 750, 753, 755, 757,
            760, 762, 764, 767, 769,
            771, 774, 776, 778, 781,
            783, 786, 788, 790, 793,
            795, 798, 800, 803, 805,
            808, 810, 813, 815, 818,
            820, 823, 825, 828, 830,
            833, 835, 838, 840, 843,
            846, 848, 851, 853, 856,
            859, 861, 864, 867, 869,
            872, 875, 877, 880, 883,
            885, 888, 891, 894, 896,
            899, 902, 905, 907, 910,
            913, 916, 919, 921, 924,
            927, 930, 933, 936, 939,
            941, 944, 947, 950, 953,
            956, 959, 962, 965, 968,
            971, 974, 977, 980, 983,
            986, 989, 992, 995, 998,
            1001, 1004, 1007, 1010, 1013,
            1017, 1020, 1023, 1026, 1029,
            1032, 1035, 1039, 1042, 1045,
            1048, 1051, 1055, 1058, 1061,
            1064, 1068, 1071, 1074, 1078,
            1081, 1084, 1088, 1091, 1094,
            1098, 1101, 1104, 1108, 1111,
            1115, 1118, 1121, 1125, 1128,
            1132, 1135, 1139, 1142, 1146,
            1149, 1153, 1156, 1160, 1163,
            1167, 1171, 1174, 1178, 1181,
            1185, 1189, 1192, 1196, 1200,
            1203, 1207, 1211, 1214, 1218,
            1222, 1226, 1229, 1233, 1237,
            1241, 1245, 1249, 1252, 1256,
            1260, 1264, 1268, 1272, 1276,
            1280, 1283, 1287, 1291, 1295,
            1299, 1303, 1307, 1311, 1315,
            1319, 1323, 1328, 1332, 1336,
            1340, 1344, 1348, 1352, 1356,
            1360, 1365, 1369, 1373, 1377,
            1382, 1386, 1390, 1394, 1399,
            1403, 1407, 1412, 1416, 1420,
            1425, 1429, 1433, 1438, 1442,
            1447, 1451, 1455, 1460, 1464,
            1469, 1473, 1478, 1483, 1487,
            1492, 1496, 1501, 1505, 1510,
            1515, 1519, 1524, 1529, 1533,
            1538, 1543, 1548, 1552, 1557,
            1562, 1567, 1572, 1576, 1581,
            1586, 1591, 1596, 1601, 1606,
            1611, 1616, 1620, 1625, 1630,
            1635, 1640, 1646, 1651, 1656,
            1661, 1666, 1671, 1676, 1681,
            1686, 1692, 1697, 1702, 1707,
            1712, 1718, 1723, 1728, 1734,
            1739, 1744, 1750, 1755, 1760,
            1766, 1771, 1777, 1782, 1788,
            1793, 1799, 1804, 1810, 1815,
            1821, 1826, 1832, 1838, 1843,
            1849, 1855, 1860, 1866, 1872,
            1878, 1883, 1889, 1895, 1901,
            1907, 1912, 1918, 1924, 1930,
            1936, 1942, 1948, 1954, 1960,
            1966, 1972, 1978, 1984, 1990,
            1996, 2003, 2009, 2015, 2021,
            2027, 2033, 2040, 2046, 2052,
            2059, 2065, 2071, 2078, 2084,
            2090, 2097, 2103, 2110, 2116,
            2123, 2129, 2136, 2142, 2149,
            2156, 2162, 2169, 2175, 2182,
            2189, 2196, 2202, 2209, 2216,
            2223, 2230, 2236, 2243, 2250,
            2257, 2264, 2271, 2278, 2285,
            2292, 2299, 2306, 2313, 2320,
            2327, 2335, 2342, 2349, 2356,
            2363, 2371, 2378, 2385, 2393,
            2400, 2407, 2415, 2422, 2430,
            2437, 2444, 2452, 2460, 2467,
            2475, 2482, 2490, 2498, 2505,
            2513, 2521, 2528, 2536, 2544,
            2552, 2560, 2567, 2575, 2583,
            2591, 2599, 2607, 2615, 2623,
            2631, 2639, 2647, 2656, 2664,
            2672, 2680, 2688, 2697, 2705,
            2713, 2722, 2730, 2738, 2747,
            2755, 2764, 2772, 2781, 2789,
            2798, 2806, 2815, 2824, 2832,
            2841, 2850, 2858, 2867, 2876,
            2885, 2894, 2903, 2912, 2921,
            2930, 2939, 2948, 2957, 2966,
            2975, 2984, 2993, 3002, 3012,
            3021, 3030, 3039, 3049, 3058,
            3067, 3077, 3086, 3096, 3105,
            3115, 3124, 3134, 3144, 3153,
            3163, 3173, 3183, 3192, 3202,
            3212, 3222, 3232, 3242, 3252,
            3262, 3272, 3282, 3292, 3302,
            3312, 3322, 3332, 3343, 3353,
            3363, 3374, 3384, 3394, 3405,
            3415, 3426, 3436, 3447, 3457,
            3468, 3479, 3489, 3500, 3511,
            3522, 3532, 3543, 3554, 3565,
            3576, 3587, 3598, 3609, 3620,
            3631, 3642, 3654, 3665, 3676,
            3687, 3699, 3710, 3722, 3733,
            3744, 3756, 3767, 3779, 3791,
            3802, 3814, 3826, 3837, 3849,
            3861, 3873, 3885, 3897, 3909,
            3921, 3933, 3945, 3957, 3969,
            3981, 3994, 4006, 4018, 4031,
            4043, 4055, 4068, 4080, 4093,
            4105, 4118, 4131, 4143, 4156,
            4169, 4182, 4195, 4207, 4220,
            4233, 4246, 4259, 4272, 4286,
            4299, 4312, 4325, 4339, 4352,
            4365, 4379, 4392, 4406, 4419,
            4433, 4446, 4460, 4474, 4487,
            4501, 4515, 4529, 4543, 4557,
            4571, 4585, 4599, 4613, 4627,
            4641, 4656, 4670, 4684, 4699,
            4713, 4728, 4742, 4757, 4771,
            4786, 4801, 4816, 4830, 4845,
            4860, 4875, 4890, 4905, 4920,
            4935, 4950, 4966, 4981, 4996,
            5011, 5027, 5042, 5058, 5073,
            5089, 5105, 5120, 5136, 5152,
            5168, 5183, 5199, 5215, 5231,
            5247, 5264, 5280, 5296, 5312,
            5329, 5345, 5361, 5378, 5394,
            5411, 5428, 5444, 5461, 5478,
            5495, 5512, 5528, 5545, 5562,
            5580, 5597, 5614, 5631, 5648,
            5666, 5683, 5701, 5718, 5736,
            5753, 5771, 5789, 5807, 5824,
            5842, 5860, 5878, 5896, 5914,
            5933, 5951, 5969, 5987, 6006,
            6024, 6043, 6061, 6080, 6099,
            6117, 6136, 6155, 6174, 6193,
            6212, 6231, 6250, 6269, 6289,
            6308, 6327, 6347, 6366, 6386,
            6406, 6425, 6445, 6465, 6485,
            6505, 6525, 6545, 6565, 6585,
            6605, 6625, 6646, 6666, 6687,
            6707, 6728, 6749, 6769, 6790,
            6811, 6832, 6853, 6874, 6895,
            6916, 6937, 6959, 6980, 7002,
            7023, 7045, 7066, 7088, 7110,
            7132, 7154, 7176, 7198, 7220,
            7242, 7264, 7286, 7309, 7331,
            7354, 7376, 7399, 7422, 7445,
            7468, 7490, 7513, 7537, 7560,
            7583, 7606, 7630, 7653, 7677,
            7700, 7724, 7748, 7771, 7795,
            7819, 7843, 7867, 7892, 7916,
            7940, 7964, 7989, 8014, 8038,
            8063, 8088, 8112, 8137, 8162,
            8187, 8213, 8238, 8263, 8289,
            8314, 8340, 8365, 8391, 8417,
            8443, 8468, 8495, 8521, 8547,
            8573, 8599, 8626, 8652, 8679,
            8706, 8732, 8759, 8786, 8813,
            8840, 8867, 8895, 8922, 8949,
            8977, 9004, 9032, 9060, 9088,
            9116, 9144, 9172, 9200, 9228,
            9256, 9285, 9313, 9342, 9371,
            9400, 9428, 9457, 9486, 9516,
            9545, 9574, 9604, 9633, 9663,
            9692, 9722, 9752, 9782, 9812,
            9842, 9872, 9903, 9933, 9964,
            9994, 10025, 10056, 10087, 10118,
            10149, 10180, 10211, 10243, 10274,
            10306, 10337, 10369, 10401, 10433,
            10465, 10497, 10529, 10562, 10594,
            10627, 10659, 10692, 10725, 10758,
            10791, 10824, 10858, 10891, 10924,
            10958, 10992, 11025, 11059, 11093,
            11127, 11161, 11196, 11230, 11265,
            11299, 11334, 11369, 11404, 11439,
            11474, 11509, 11545, 11580, 11616,
            11651, 11687, 11723, 11759, 11795,
            11831, 11868, 11904, 11941, 11978,
            12014, 12051, 12088, 12125, 12163,
            12200, 12238, 12275, 12313, 12351,
            12389, 12427, 12465, 12503, 12542,
            12580, 12619, 12658, 12696, 12735,
            12775, 12814, 12853, 12893, 12932,
            12972, 13012, 13052, 13092, 13132,
            13173, 13213, 13254, 13294, 13335,
            13376, 13417, 13459, 13500, 13541,
            13583, 13625, 13667, 13709, 13751,
            13793, 13835, 13878, 13920, 13963,
            14006, 14049, 14092, 14136, 14179,
            14223, 14266, 14310, 14354, 14398,
            14443, 14487, 14531, 14576, 14621,
            14666, 14711, 14756, 14801, 14847,
            14892, 14938, 14984, 15030, 15076,
            15123, 15169, 15216, 15263, 15309,
            15356, 15404, 15451, 15498, 15546,
            15594, 15642, 15690, 15738, 15786,
            15835, 15884, 15932, 15981, 16030,
            16080, 16129, 16179, 16228, 16278,
            16328, 16378, 16429, 16479, 16530,
            16581, 16632, 16683, 16734, 16785,
            16837, 16889, 16941, 16993, 17045,
            17097, 17150, 17202, 17255, 17308,
            17361, 17415, 17468, 17522, 17576,
            17630, 17684, 17738, 17793, 17848,
            17902, 17957, 18013, 18068, 18123,
            18179, 18235, 18291, 18347, 18404,
            18460, 18517, 18574, 18631, 18688,
            18746, 18803, 18861, 18919, 18977,
            19035, 19094, 19152, 19211, 19270,
            19330, 19389, 19448, 19508, 19568,
            19628, 19689, 19749, 19810, 19871,
            19932, 19993, 20054, 20116, 20178,
            20240, 20302, 20364, 20427, 20490,
            20553, 20616, 20679, 20743, 20806,
            20870, 20935, 20999, 21063, 21128,
            21193, 21258, 21323, 21389, 21455,
            21521, 21587, 21653, 21720, 21786,
            21853, 21920, 21988, 22055, 22123,
            22191, 22259, 22328, 22396, 22465,
            22534, 22603, 22673, 22742, 22812,
            22882, 22953, 23023, 23094, 23165,
            23236, 23308, 23379, 23451, 23523,
            23595, 23668, 23741, 23814, 23887,
            23960, 24034, 24108, 24182, 24256,
            24330, 24405, 24480, 24555, 24631,
            24707, 24783, 24859, 24935, 25012,
            25089, 25166, 25243, 25320, 25398,
            25476, 25555, 25633, 25712, 25791,
            25870, 25950, 26029, 26109, 26190,
            26270, 26351, 26432, 26513, 26594,
            26676, 26758, 26840, 26923, 27006,
            27088, 27172, 27255, 27339, 27423,
            27507, 27592, 27677, 27762, 27847,
            27932, 28018, 28104, 28191, 28277,
            28364, 28451, 28539, 28626, 28714,
            28803, 28891, 28980, 29069, 29158,
            29248, 29338, 29428, 29518, 29609,
            29700, 29791, 29883, 29975, 30067,
            30159, 30252, 30345, 30438, 30532,
            30625, 30719, 30814, 30909, 31003,
            31099, 31194, 31290, 31386, 31483,
            31579, 31677, 31774, 31871, 31969,
            32068, 32166, 32265, 32364, 32464,
            32563, 32663, 32764, 32864, 32965,
            33067, 33168, 33270, 33372, 33475,
            33578, 33681, 33785, 33888, 33992,
            34097, 34202, 34307, 34412, 34518,
            34624, 34730, 34837, 34944, 35051,
            35159, 35267, 35376, 35484, 35593,
            35703, 35812, 35922, 36033, 36144,
            36255, 36366, 36478, 36590, 36702,
            36815, 36928, 37042, 37155, 37270,
            37384, 37499, 37614, 37730, 37846,
            37962, 38079, 38196, 38313, 38431,
            38549, 38667, 38786, 38905, 39025,
            39145, 39265, 39386, 39507, 39628,
            39750, 39872, 39994, 40117, 40241,
            40364, 40488, 40613, 40737, 40863,
            40988, 41114, 41240, 41367, 41494,
            41622, 41750, 41878, 42007, 42136,
            42265, 42395, 42525, 42656, 42787,
            42919, 43050, 43183, 43315, 43448,
            43582, 43716, 43850, 43985, 44120,
            44256, 44392, 44528, 44665, 44802,
            44940, 45078, 45216, 45355, 45495,
            45634, 45775, 45915, 46056, 46198,
            46340, 46482, 46625, 46768, 46912,
            47056, 47201, 47346, 47491, 47637,
            47784, 47930, 48078, 48225, 48374,
            48522, 48671, 48821, 48971, 49121,
            49272, 49424, 49576, 49728, 49881,
            50034, 50188, 50342, 50497, 50652,
            50807, 50963, 51120, 51277, 51435,
            51593, 51751, 51910, 52070, 52230,
            52390, 52551, 52713, 52875, 53037,
            53200, 53364, 53528, 53692, 53857,
            54022, 54188, 54355, 54522, 54690,
            54858, 55026, 55195, 55365, 55535,
            55706, 55877, 56048, 56221, 56393,
            56567, 56740, 56915, 57090, 57265,
            57441, 57618, 57795, 57972, 58150,
            58329, 58508, 58688, 58868, 59049,
            59231, 59413, 59595, 59778, 59962,
            60146, 60331, 60516, 60702, 60889,
            61076, 61264, 61452, 61641, 61830,
            62020, 62211, 62402, 62594, 62786,
            62979, 63172, 63366, 63561, 63756,
            63952, 64149, 64346, 64544, 64742,
            64941, 65140, 65341, 65541, 65743,
            65945, 66147, 66351, 66555, 66759,
            66964, 67170, 67376, 67583, 67791,
            67999, 68208, 68418, 68628, 68839,
            69050, 69263, 69475, 69689, 69903,
            70118, 70333, 70549, 70766, 70984,
            71202, 71421, 71640, 71860, 72081,
            72302, 72525, 72747, 72971, 73195,
            73420, 73646, 73872, 74099, 74327,
            74555, 74784, 75014, 75244, 75476,
            75707, 75940, 76173, 76407, 76642,
            76878, 77114, 77351, 77589, 77827,
            78066, 78306, 78547, 78788, 79030,
            79273, 79516, 79761, 80006, 80252,
            80498, 80746, 80994, 81243, 81492,
            81743, 81994, 82246, 82498, 82752,
            83006, 83261, 83517, 83774, 84031,
            84289, 84548, 84808, 85069, 85330,
            85592, 85855, 86119, 86384, 86649,
            86915, 87182, 87450, 87719, 87989,
            88259, 88530, 88802, 89075, 89349,
            89623, 89899, 90175, 90452, 90730,
            91009, 91288, 91569, 91850, 92132,
            92415, 92699, 92984, 93270, 93557,
            93844, 94132, 94422, 94712, 95003,
            95295, 95587, 95881, 96176, 96471,
            96768, 97065, 97363, 97662, 97963,
            98264, 98565, 98868, 99172, 99477,
            99783, 100089, 100397, 100705, 101015,
            101325, 101636, 101949, 102262, 102576,
            102891, 103207, 103525, 103843, 104162,
            104482, 104803, 105125, 105448, 105772,
            106097, 106423, 106750, 107078, 107407,
            107737, 108068, 108400, 108733, 109067,
            109402, 109738, 110076, 110414, 110753,
            111093, 111435, 111777, 112121, 112465,
            112811, 113157, 113505, 113854, 114204,
            114555, 114907, 115260, 115614, 115969,
            116325, 116683, 117041, 117401, 117762,
            118124, 118486, 118851, 119216, 119582,
            119949, 120318, 120688, 121059, 121431,
            121804, 122178, 122553, 122930, 123308,
            123687, 124067, 124448, 124830, 125214,
            125598, 125984, 126371, 126760, 127149,
            127540, 127932, 128325, 128719, 129115,
            129511, 129909, 130309, 130709, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071
         ) ),
        max_error = cms.double(5748.616225984908),
        output_scale_factor = cms.double(0.953125),
        unused_lsbs = cms.uint32(2)
    ),
    inv_mass_checks = cms.untracked.bool(False),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    sanity_checks = cms.untracked.bool(False),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    )
)


process.IsoTkEleEGEle2212 = cms.EDFilter("L1GTDoubleObjectCond",
    collection1 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 1.479),
        regionsMaxRelIsolationPt = cms.vdouble(0.13, 0.28),
        regionsMinPt = cms.vdouble(18, 17),
        tag = cms.InputTag("l1tGTProducer","CL2Electrons")
    ),
    collection2 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 1.479),
        regionsMinPt = cms.vdouble(8, 8),
        regionsQualityFlags = cms.vuint32(2, 4),
        tag = cms.InputTag("l1tGTProducer","CL2Photons")
    ),
    cos_phi_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            487, 487, 487, 487, 487,
            487, 487, 487, 487, 487,
            487, 486, 486, 486, 486,
            486, 486, 486, 485, 485,
            485, 485, 485, 485, 484,
            484, 484, 484, 484, 483,
            483, 483, 483, 483, 482,
            482, 482, 482, 481, 481,
            481, 481, 480, 480, 480,
            480, 479, 479, 479, 478,
            478, 478, 478, 477, 477,
            477, 476, 476, 476, 475,
            475, 475, 474, 474, 474,
            473, 473, 472, 472, 472,
            471, 471, 471, 470, 470,
            469, 469, 468, 468, 468,
            467, 467, 466, 466, 465,
            465, 465, 464, 464, 463,
            463, 462, 462, 461, 461,
            460, 460, 459, 459, 458,
            458, 457, 457, 456, 456,
            455, 454, 454, 453, 453,
            452, 452, 451, 451, 450,
            449, 449, 448, 448, 447,
            446, 446, 445, 445, 444,
            443, 443, 442, 441, 441,
            440, 440, 439, 438, 438,
            437, 436, 436, 435, 434,
            434, 433, 432, 431, 431,
            430, 429, 429, 428, 427,
            426, 426, 425, 424, 423,
            423, 422, 421, 420, 420,
            419, 418, 417, 417, 416,
            415, 414, 413, 413, 412,
            411, 410, 409, 409, 408,
            407, 406, 405, 405, 404,
            403, 402, 401, 400, 399,
            399, 398, 397, 396, 395,
            394, 393, 392, 392, 391,
            390, 389, 388, 387, 386,
            385, 384, 383, 382, 381,
            381, 380, 379, 378, 377,
            376, 375, 374, 373, 372,
            371, 370, 369, 368, 367,
            366, 365, 364, 363, 362,
            361, 360, 359, 358, 357,
            356, 355, 354, 353, 352,
            351, 350, 349, 348, 347,
            346, 345, 343, 342, 341,
            340, 339, 338, 337, 336,
            335, 334, 333, 332, 330,
            329, 328, 327, 326, 325,
            324, 323, 322, 320, 319,
            318, 317, 316, 315, 314,
            312, 311, 310, 309, 308,
            307, 306, 304, 303, 302,
            301, 300, 298, 297, 296,
            295, 294, 293, 291, 290,
            289, 288, 286, 285, 284,
            283, 282, 280, 279, 278,
            277, 275, 274, 273, 272,
            270, 269, 268, 267, 265,
            264, 263, 262, 260, 259,
            258, 257, 255, 254, 253,
            252, 250, 249, 248, 246,
            245, 244, 242, 241, 240,
            239, 237, 236, 235, 233,
            232, 231, 229, 228, 227,
            225, 224, 223, 221, 220,
            219, 217, 216, 215, 213,
            212, 211, 209, 208, 207,
            205, 204, 203, 201, 200,
            198, 197, 196, 194, 193,
            192, 190, 189, 187, 186,
            185, 183, 182, 181, 179,
            178, 176, 175, 174, 172,
            171, 169, 168, 167, 165,
            164, 162, 161, 159, 158,
            157, 155, 154, 152, 151,
            150, 148, 147, 145, 144,
            142, 141, 140, 138, 137,
            135, 134, 132, 131, 129,
            128, 127, 125, 124, 122,
            121, 119, 118, 116, 115,
            113, 112, 111, 109, 108,
            106, 105, 103, 102, 100,
            99, 97, 96, 94, 93,
            92, 90, 89, 87, 86,
            84, 83, 81, 80, 78,
            77, 75, 74, 72, 71,
            69, 68, 66, 65, 63,
            62, 60, 59, 58, 56,
            55, 53, 52, 50, 49,
            47, 46, 44, 43, 41,
            40, 38, 37, 35, 34,
            32, 31, 29, 28, 26,
            25, 23, 22, 20, 19,
            17, 16, 14, 13, 11,
            10, 8, 7, 5, 4,
            2, 1, -1, -2, -4,
            -5, -7, -8, -10, -11,
            -13, -14, -16, -17, -19,
            -20, -22, -23, -25, -26,
            -28, -29, -31, -32, -34,
            -35, -37, -38, -40, -41,
            -43, -44, -46, -47, -49,
            -50, -52, -53, -55, -56,
            -58, -59, -60, -62, -63,
            -65, -66, -68, -69, -71,
            -72, -74, -75, -77, -78,
            -80, -81, -83, -84, -86,
            -87, -89, -90, -92, -93,
            -94, -96, -97, -99, -100,
            -102, -103, -105, -106, -108,
            -109, -111, -112, -113, -115,
            -116, -118, -119, -121, -122,
            -124, -125, -127, -128, -129,
            -131, -132, -134, -135, -137,
            -138, -140, -141, -142, -144,
            -145, -147, -148, -150, -151,
            -152, -154, -155, -157, -158,
            -159, -161, -162, -164, -165,
            -167, -168, -169, -171, -172,
            -174, -175, -176, -178, -179,
            -181, -182, -183, -185, -186,
            -187, -189, -190, -192, -193,
            -194, -196, -197, -198, -200,
            -201, -203, -204, -205, -207,
            -208, -209, -211, -212, -213,
            -215, -216, -217, -219, -220,
            -221, -223, -224, -225, -227,
            -228, -229, -231, -232, -233,
            -235, -236, -237, -239, -240,
            -241, -242, -244, -245, -246,
            -248, -249, -250, -252, -253,
            -254, -255, -257, -258, -259,
            -260, -262, -263, -264, -265,
            -267, -268, -269, -270, -272,
            -273, -274, -275, -277, -278,
            -279, -280, -282, -283, -284,
            -285, -286, -288, -289, -290,
            -291, -293, -294, -295, -296,
            -297, -298, -300, -301, -302,
            -303, -304, -306, -307, -308,
            -309, -310, -311, -312, -314,
            -315, -316, -317, -318, -319,
            -320, -322, -323, -324, -325,
            -326, -327, -328, -329, -330,
            -332, -333, -334, -335, -336,
            -337, -338, -339, -340, -341,
            -342, -343, -345, -346, -347,
            -348, -349, -350, -351, -352,
            -353, -354, -355, -356, -357,
            -358, -359, -360, -361, -362,
            -363, -364, -365, -366, -367,
            -368, -369, -370, -371, -372,
            -373, -374, -375, -376, -377,
            -378, -379, -380, -381, -381,
            -382, -383, -384, -385, -386,
            -387, -388, -389, -390, -391,
            -392, -392, -393, -394, -395,
            -396, -397, -398, -399, -399,
            -400, -401, -402, -403, -404,
            -405, -405, -406, -407, -408,
            -409, -409, -410, -411, -412,
            -413, -413, -414, -415, -416,
            -417, -417, -418, -419, -420,
            -420, -421, -422, -423, -423,
            -424, -425, -426, -426, -427,
            -428, -429, -429, -430, -431,
            -431, -432, -433, -434, -434,
            -435, -436, -436, -437, -438,
            -438, -439, -440, -440, -441,
            -441, -442, -443, -443, -444,
            -445, -445, -446, -446, -447,
            -448, -448, -449, -449, -450,
            -451, -451, -452, -452, -453,
            -453, -454, -454, -455, -456,
            -456, -457, -457, -458, -458,
            -459, -459, -460, -460, -461,
            -461, -462, -462, -463, -463,
            -464, -464, -465, -465, -465,
            -466, -466, -467, -467, -468,
            -468, -468, -469, -469, -470,
            -470, -471, -471, -471, -472,
            -472, -472, -473, -473, -474,
            -474, -474, -475, -475, -475,
            -476, -476, -476, -477, -477,
            -477, -478, -478, -478, -478,
            -479, -479, -479, -480, -480,
            -480, -480, -481, -481, -481,
            -481, -482, -482, -482, -482,
            -483, -483, -483, -483, -483,
            -484, -484, -484, -484, -484,
            -485, -485, -485, -485, -485,
            -485, -486, -486, -486, -486,
            -486, -486, -486, -487, -487,
            -487, -487, -487, -487, -487,
            -487, -487, -487, -487, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488
         ) ),
        max_error = cms.double(0.0025338281044886835),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            489, 489, 489, 489, 489,
            489, 489, 489, 489, 489,
            489, 490, 490, 490, 490,
            490, 490, 490, 491, 491,
            491, 491, 491, 491, 492,
            492, 492, 492, 492, 493,
            493, 493, 493, 493, 494,
            494, 494, 494, 495, 495,
            495, 495, 496, 496, 496,
            496, 497, 497, 497, 498,
            498, 498, 499, 499, 499,
            499, 500, 500, 500, 501,
            501, 502, 502, 502, 503,
            503, 503, 504, 504, 504,
            505, 505, 506, 506, 507,
            507, 507, 508, 508, 509,
            509, 510, 510, 510, 511,
            511, 512, 512, 513, 513,
            514, 514, 515, 515, 516,
            516, 517, 517, 518, 518,
            519, 520, 520, 521, 521,
            522, 522, 523, 523, 524,
            525, 525, 526, 526, 527,
            528, 528, 529, 530, 530,
            531, 531, 532, 533, 533,
            534, 535, 535, 536, 537,
            537, 538, 539, 540, 540,
            541, 542, 542, 543, 544,
            545, 545, 546, 547, 548,
            548, 549, 550, 551, 551,
            552, 553, 554, 555, 555,
            556, 557, 558, 559, 560,
            560, 561, 562, 563, 564,
            565, 566, 567, 567, 568,
            569, 570, 571, 572, 573,
            574, 575, 576, 577, 577,
            578, 579, 580, 581, 582,
            583, 584, 585, 586, 587,
            588, 589, 590, 591, 592,
            593, 594, 595, 596, 598,
            599, 600, 601, 602, 603,
            604, 605, 606, 607, 608,
            610, 611, 612, 613, 614,
            615, 616, 618, 619, 620,
            621, 622, 623, 625, 626,
            627, 628, 629, 631, 632,
            633, 634, 636, 637, 638,
            639, 641, 642, 643, 644,
            646, 647, 648, 650, 651,
            652, 654, 655, 656, 658,
            659, 660, 662, 663, 665,
            666, 667, 669, 670, 672,
            673, 674, 676, 677, 679,
            680, 682, 683, 685, 686,
            687, 689, 690, 692, 693,
            695, 697, 698, 700, 701,
            703, 704, 706, 707, 709,
            710, 712, 714, 715, 717,
            719, 720, 722, 723, 725,
            727, 728, 730, 732, 733,
            735, 737, 738, 740, 742,
            744, 745, 747, 749, 750,
            752, 754, 756, 758, 759,
            761, 763, 765, 767, 768,
            770, 772, 774, 776, 778,
            779, 781, 783, 785, 787,
            789, 791, 793, 795, 796,
            798, 800, 802, 804, 806,
            808, 810, 812, 814, 816,
            818, 820, 822, 824, 826,
            828, 830, 832, 835, 837,
            839, 841, 843, 845, 847,
            849, 851, 854, 856, 858,
            860, 862, 864, 867, 869,
            871, 873, 875, 878, 880,
            882, 884, 887, 889, 891,
            894, 896, 898, 900, 903,
            905, 907, 910, 912, 915,
            917, 919, 922, 924, 927,
            929, 931, 934, 936, 939,
            941, 944, 946, 949, 951,
            954, 956, 959, 961, 964,
            966, 969, 971, 974, 977,
            979, 982, 984, 987, 990,
            992, 995, 998, 1000, 1003,
            1006, 1008, 1011, 1014, 1017,
            1019, 1022, 1025, 1028, 1030,
            1033, 1036, 1039, 1042, 1044,
            1047, 1050, 1053, 1056, 1059,
            1062, 1065, 1067, 1070, 1073,
            1076, 1079, 1082, 1085, 1088,
            1091, 1094, 1097, 1100, 1103,
            1106, 1109, 1112, 1115, 1118,
            1122, 1125, 1128, 1131, 1134,
            1137, 1140, 1143, 1147, 1150,
            1153, 1156, 1159, 1163, 1166,
            1169, 1172, 1176, 1179, 1182,
            1186, 1189, 1192, 1196, 1199,
            1202, 1206, 1209, 1212, 1216,
            1219, 1223, 1226, 1230, 1233,
            1237, 1240, 1244, 1247, 1251,
            1254, 1258, 1261, 1265, 1268,
            1272, 1276, 1279, 1283, 1287,
            1290, 1294, 1298, 1301, 1305,
            1309, 1312, 1316, 1320, 1324,
            1327, 1331, 1335, 1339, 1343,
            1347, 1350, 1354, 1358, 1362,
            1366, 1370, 1374, 1378, 1382,
            1386, 1390, 1394, 1398, 1402,
            1406, 1410, 1414, 1418, 1422,
            1426, 1430, 1434, 1439, 1443,
            1447, 1451, 1455, 1459, 1464,
            1468, 1472, 1476, 1481, 1485,
            1489, 1494, 1498, 1502, 1507,
            1511, 1516, 1520, 1524, 1529,
            1533, 1538, 1542, 1547, 1551,
            1556, 1560, 1565, 1569, 1574,
            1579, 1583, 1588, 1592, 1597,
            1602, 1606, 1611, 1616, 1621,
            1625, 1630, 1635, 1640, 1645,
            1649, 1654, 1659, 1664, 1669,
            1674, 1679, 1684, 1689, 1693,
            1698, 1703, 1708, 1714, 1719,
            1724, 1729, 1734, 1739, 1744,
            1749, 1754, 1760, 1765, 1770,
            1775, 1780, 1786, 1791, 1796,
            1802, 1807, 1812, 1818, 1823,
            1828, 1834, 1839, 1845, 1850,
            1856, 1861, 1867, 1872, 1878,
            1883, 1889, 1894, 1900, 1906,
            1911, 1917, 1923, 1929, 1934,
            1940, 1946, 1952, 1957, 1963,
            1969, 1975, 1981, 1987, 1993,
            1999, 2004, 2010, 2016, 2022,
            2028, 2035, 2041, 2047, 2053,
            2059, 2065, 2071, 2077, 2084,
            2090, 2096, 2102, 2109, 2115,
            2121, 2128, 2134, 2140, 2147,
            2153, 2160, 2166, 2173, 2179,
            2186, 2192, 2199, 2205, 2212,
            2219, 2225, 2232, 2239, 2245,
            2252, 2259, 2266, 2272, 2279,
            2286, 2293, 2300, 2307, 2314,
            2321, 2328, 2335, 2342, 2349,
            2356, 2363, 2370, 2377, 2384,
            2391, 2398, 2406, 2413, 2420,
            2427, 2435, 2442, 2449, 2457,
            2464, 2472, 2479, 2487, 2494,
            2502, 2509, 2517, 2524, 2532,
            2539, 2547, 2555, 2563, 2570,
            2578, 2586, 2594, 2601, 2609,
            2617, 2625, 2633, 2641, 2649,
            2657, 2665, 2673, 2681, 2689,
            2697, 2705, 2714, 2722, 2730,
            2738, 2747, 2755, 2763, 2772,
            2780, 2788, 2797, 2805, 2814,
            2822, 2831, 2839, 2848, 2857,
            2865, 2874, 2883, 2891, 2900,
            2909, 2918, 2927, 2935, 2944,
            2953, 2962, 2971, 2980, 2989,
            2998, 3007, 3016, 3026, 3035,
            3044, 3053, 3062, 3072, 3081,
            3090, 3100, 3109, 3119, 3128,
            3138, 3147, 3157, 3166, 3176,
            3186, 3195, 3205, 3215, 3224,
            3234, 3244, 3254, 3264, 3274,
            3284, 3294, 3304, 3314, 3324,
            3334, 3344, 3354, 3364, 3375,
            3385, 3395, 3405, 3416, 3426,
            3437, 3447, 3458, 3468, 3479,
            3489, 3500, 3510, 3521, 3532,
            3543, 3553, 3564, 3575, 3586,
            3597, 3608, 3619, 3630, 3641,
            3652, 3663, 3674, 3685, 3697,
            3708, 3719, 3730, 3742, 3753,
            3765, 3776, 3788, 3799, 3811,
            3822, 3834, 3846, 3857, 3869,
            3881, 3893, 3905, 3917, 3929,
            3941, 3953, 3965, 3977, 3989,
            4001, 4013, 4025, 4038, 4050,
            4062, 4075, 4087, 4100, 4112,
            4125, 4137, 4150, 4163, 4175,
            4188, 4201, 4214, 4226, 4239,
            4252, 4265, 4278, 4291, 4304,
            4318, 4331, 4344, 4357, 4371,
            4384, 4397, 4411, 4424, 4438,
            4451, 4465, 4479, 4492, 4506,
            4520, 4533, 4547, 4561, 4575,
            4589, 4603, 4617, 4631, 4645,
            4660, 4674, 4688, 4703, 4717,
            4731, 4746, 4760, 4775, 4789,
            4804, 4819, 4833, 4848, 4863,
            4878, 4893, 4908, 4923, 4938,
            4953, 4968, 4983, 4999, 5014,
            5029, 5045, 5060, 5075, 5091,
            5107, 5122, 5138, 5154, 5169,
            5185, 5201, 5217, 5233, 5249,
            5265, 5281, 5297, 5313, 5330,
            5346, 5362, 5379, 5395, 5412,
            5428, 5445, 5462, 5478, 5495,
            5512, 5529, 5546, 5563, 5580,
            5597, 5614, 5631, 5648, 5666,
            5683, 5700, 5718, 5735, 5753,
            5770, 5788, 5806, 5824, 5841,
            5859, 5877, 5895, 5913, 5931,
            5950, 5968, 5986, 6004, 6023,
            6041, 6060, 6078, 6097, 6116,
            6134, 6153, 6172, 6191, 6210,
            6229, 6248, 6267, 6286, 6305,
            6325, 6344, 6364, 6383, 6403,
            6422, 6442, 6462, 6481, 6501,
            6521, 6541, 6561, 6581, 6602,
            6622, 6642, 6662, 6683, 6703,
            6724, 6744, 6765, 6786, 6807,
            6828, 6848, 6869, 6891, 6912,
            6933, 6954, 6975, 6997, 7018,
            7040, 7061, 7083, 7105, 7126,
            7148, 7170, 7192, 7214, 7236,
            7259, 7281, 7303, 7325, 7348,
            7370, 7393, 7416, 7438, 7461,
            7484, 7507, 7530, 7553, 7576,
            7600, 7623, 7646, 7670, 7693,
            7717, 7741, 7764, 7788, 7812,
            7836, 7860, 7884, 7908, 7932,
            7957, 7981, 8006, 8030, 8055,
            8080, 8104, 8129, 8154, 8179,
            8204, 8229, 8255, 8280, 8305,
            8331, 8356, 8382, 8408, 8434,
            8459, 8485, 8511, 8537, 8564,
            8590, 8616, 8643, 8669, 8696,
            8722, 8749, 8776, 8803, 8830,
            8857, 8884, 8912, 8939, 8966,
            8994, 9021, 9049, 9077, 9105,
            9133, 9161, 9189, 9217, 9245,
            9274, 9302, 9331, 9359, 9388,
            9417, 9446, 9475, 9504, 9533,
            9562, 9591, 9621, 9650, 9680,
            9710, 9740, 9769, 9799, 9830,
            9860, 9890, 9920, 9951, 9981,
            10012, 10043, 10073, 10104, 10135,
            10166, 10198, 10229, 10260, 10292,
            10323, 10355, 10387, 10419, 10451,
            10483, 10515, 10547, 10580, 10612,
            10645, 10677, 10710, 10743, 10776,
            10809, 10842, 10876, 10909, 10942,
            10976, 11010, 11044, 11077, 11111,
            11146, 11180, 11214, 11248, 11283,
            11318, 11352, 11387, 11422, 11457,
            11492, 11528, 11563, 11599, 11634,
            11670, 11706, 11742, 11778, 11814,
            11850, 11887, 11923, 11960, 11996,
            12033, 12070, 12107, 12144, 12182,
            12219, 12257, 12294, 12332, 12370,
            12408, 12446, 12484, 12522, 12561,
            12599, 12638, 12677, 12716, 12755,
            12794, 12833, 12873, 12912, 12952,
            12992, 13032, 13072, 13112, 13152,
            13192, 13233, 13274, 13314, 13355,
            13396, 13437, 13479, 13520, 13561,
            13603, 13645, 13687, 13729, 13771,
            13813, 13856, 13898, 13941, 13984,
            14027, 14070, 14113, 14156, 14200,
            14243, 14287, 14331, 14375, 14419,
            14463, 14508, 14552, 14597, 14642,
            14687, 14732, 14777, 14823, 14868,
            14914, 14960, 15005, 15052, 15098,
            15144, 15191, 15237, 15284, 15331,
            15378, 15425, 15473, 15520, 15568,
            15616, 15664, 15712, 15760, 15808,
            15857, 15906, 15955, 16004, 16053,
            16102, 16151, 16201, 16251, 16301,
            16351, 16401, 16451, 16502, 16553,
            16603, 16654, 16706, 16757, 16808,
            16860, 16912, 16964, 17016, 17068,
            17121, 17173, 17226, 17279, 17332,
            17385, 17438, 17492, 17546, 17600,
            17654, 17708, 17762, 17817, 17872,
            17926, 17982, 18037, 18092, 18148,
            18203, 18259, 18315, 18372, 18428,
            18485, 18542, 18598, 18656, 18713,
            18770, 18828, 18886, 18944, 19002,
            19060, 19119, 19178, 19237, 19296,
            19355, 19414, 19474, 19534, 19594,
            19654, 19714, 19775, 19836, 19897,
            19958, 20019, 20081, 20142, 20204,
            20266, 20328, 20391, 20454, 20516,
            20579, 20643, 20706, 20770, 20833,
            20897, 20962, 21026, 21091, 21155,
            21220, 21286, 21351, 21417, 21482,
            21548, 21615, 21681, 21748, 21814,
            21881, 21949, 22016, 22084, 22151,
            22220, 22288, 22356, 22425, 22494,
            22563, 22632, 22702, 22771, 22841,
            22912, 22982, 23053, 23123, 23194,
            23266, 23337, 23409, 23481, 23553,
            23625, 23698, 23771, 23844, 23917,
            23990, 24064, 24138, 24212, 24287,
            24361, 24436, 24511, 24586, 24662,
            24738, 24814, 24890, 24966, 25043,
            25120, 25197, 25275, 25352, 25430,
            25508, 25587, 25665, 25744, 25823,
            25902, 25982, 26062, 26142, 26222,
            26303, 26384, 26465, 26546, 26627,
            26709, 26791, 26874, 26956, 27039,
            27122, 27205, 27289, 27373, 27457,
            27541, 27626, 27711, 27796, 27881,
            27967, 28053, 28139, 28226, 28312,
            28399, 28486, 28574, 28662, 28750,
            28838, 28927, 29016, 29105, 29194,
            29284, 29374, 29464, 29555, 29645,
            29736, 29828, 29919, 30011, 30104,
            30196, 30289, 30382, 30475, 30569,
            30663, 30757, 30851, 30946, 31041,
            31137, 31232, 31328, 31425, 31521,
            31618, 31715, 31813, 31910, 32008,
            32107, 32205, 32304, 32403, 32503,
            32603, 32703, 32804, 32904, 33005,
            33107, 33209, 33311, 33413, 33516,
            33619, 33722, 33825, 33929, 34034,
            34138, 34243, 34348, 34454, 34560,
            34666, 34772, 34879, 34986, 35094,
            35202, 35310, 35418, 35527, 35636,
            35746, 35856, 35966, 36076, 36187,
            36298, 36410, 36522, 36634, 36746,
            36859, 36973, 37086, 37200, 37314,
            37429, 37544, 37659, 37775, 37891,
            38008, 38124, 38241, 38359, 38477,
            38595, 38714, 38833, 38952, 39072,
            39192, 39312, 39433, 39554, 39675,
            39797, 39920, 40042, 40165, 40289,
            40413, 40537, 40661, 40786, 40911,
            41037, 41163, 41290, 41417, 41544,
            41671, 41800, 41928, 42057, 42186,
            42316, 42446, 42576, 42707, 42838,
            42970, 43102, 43234, 43367, 43500,
            43634, 43768, 43902, 44037, 44173,
            44308, 44444, 44581, 44718, 44855,
            44993, 45131, 45270, 45409, 45549,
            45689, 45829, 45970, 46111, 46253,
            46395, 46537, 46680, 46824, 46968,
            47112, 47257, 47402, 47548, 47694,
            47840, 47987, 48135, 48283, 48431,
            48580, 48729, 48879, 49029, 49180,
            49331, 49482, 49634, 49787, 49940,
            50093, 50247, 50401, 50556, 50712,
            50867, 51024, 51181, 51338, 51495,
            51654, 51812, 51972, 52131, 52291,
            52452, 52613, 52775, 52937, 53100,
            53263, 53427, 53591, 53755, 53921,
            54086, 54252, 54419, 54586, 54754,
            54922, 55091, 55260, 55430, 55600,
            55771, 55943, 56114, 56287, 56460,
            56633, 56807, 56982, 57157, 57333,
            57509, 57685, 57863, 58040, 58219,
            58398, 58577, 58757, 58938, 59119,
            59300, 59483, 59665, 59849, 60033,
            60217, 60402, 60588, 60774, 60960,
            61148, 61336, 61524, 61713, 61903,
            62093, 62284, 62475, 62667, 62860,
            63053, 63247, 63441, 63636, 63831,
            64027, 64224, 64422, 64619, 64818,
            65017, 65217, 65417, 65618, 65820,
            66022, 66225, 66429, 66633, 66837,
            67043, 67249, 67455, 67663, 67870,
            68079, 68288, 68498, 68708, 68920,
            69131, 69344, 69557, 69771, 69985,
            70200, 70416, 70632, 70849, 71067,
            71285, 71504, 71724, 71944, 72165,
            72387, 72609, 72833, 73056, 73281,
            73506, 73732, 73958, 74186, 74414,
            74642, 74872, 75102, 75332, 75564,
            75796, 76029, 76262, 76497, 76732,
            76968, 77204, 77441, 77679, 77918,
            78157, 78398, 78638, 78880, 79122,
            79366, 79609, 79854, 80099, 80345,
            80592, 80840, 81088, 81338, 81587,
            81838, 82090, 82342, 82595, 82849,
            83103, 83358, 83615, 83872, 84129,
            84388, 84647, 84907, 85168, 85430,
            85692, 85955, 86220, 86485, 86750,
            87017, 87284, 87552, 87821, 88091,
            88362, 88633, 88906, 89179, 89453,
            89728, 90003, 90280, 90557, 90836,
            91115, 91395, 91676, 91957, 92240,
            92523, 92807, 93093, 93379, 93666,
            93953, 94242, 94532, 94822, 95113,
            95406, 95699, 95993, 96288, 96584,
            96881, 97178, 97477, 97776, 98077,
            98378, 98680, 98984, 99288, 99593,
            99899, 100206, 100514, 100822, 101132,
            101443, 101755, 102067, 102381, 102696,
            103011, 103328, 103645, 103964, 104283,
            104603, 104925, 105247, 105571, 105895,
            106220, 106547, 106874, 107203, 107532,
            107862, 108194, 108526, 108860, 109194,
            109530, 109866, 110204, 110542, 110882,
            111223, 111565, 111907, 112251, 112596,
            112942, 113289, 113637, 113986, 114337,
            114688, 115040, 115394, 115748, 116104,
            116461, 116819, 117178, 117538, 117899,
            118261, 118624, 118989, 119354, 119721,
            120089, 120458, 120828, 121199, 121572,
            121945, 122320, 122696, 123073, 123451,
            123830, 124211, 124593, 124975, 125359,
            125745, 126131, 126518, 126907, 127297,
            127688, 128081, 128474, 128869, 129265,
            129662, 130061, 130260
         ) ),
        max_error = cms.double(0.6152529479288091),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut2 = cms.PSet(
        lut = cms.vint32( (
            256, 256, 257, 258, 259,
            260, 260, 261, 262, 263,
            264, 264, 265, 266, 267,
            268, 268, 269, 270, 271,
            272, 273, 273, 274, 275,
            276, 277, 278, 279, 279,
            280, 281, 282, 283, 284,
            285, 285, 286, 287, 288,
            289, 290, 291, 292, 293,
            293, 294, 295, 296, 297,
            298, 299, 300, 301, 302,
            303, 303, 304, 305, 306,
            307, 308, 309, 310, 311,
            312, 313, 314, 315, 316,
            317, 318, 319, 320, 321,
            322, 323, 324, 325, 326,
            327, 328, 329, 330, 331,
            332, 333, 334, 335, 336,
            337, 338, 339, 340, 341,
            342, 343, 344, 345, 346,
            347, 348, 349, 351, 352,
            353, 354, 355, 356, 357,
            358, 359, 360, 361, 363,
            364, 365, 366, 367, 368,
            369, 370, 372, 373, 374,
            375, 376, 377, 379, 380,
            381, 382, 383, 384, 386,
            387, 388, 389, 390, 392,
            393, 394, 395, 396, 398,
            399, 400, 401, 402, 404,
            405, 406, 407, 409, 410,
            411, 412, 414, 415, 416,
            418, 419, 420, 421, 423,
            424, 425, 427, 428, 429,
            431, 432, 433, 435, 436,
            437, 439, 440, 441, 443,
            444, 445, 447, 448, 449,
            451, 452, 454, 455, 456,
            458, 459, 461, 462, 463,
            465, 466, 468, 469, 471,
            472, 474, 475, 476, 478,
            479, 481, 482, 484, 485,
            487, 488, 490, 491, 493,
            494, 496, 497, 499, 500,
            502, 503, 505, 507, 508,
            510, 511, 513, 514, 516,
            518, 519, 521, 522, 524,
            526, 527, 529, 530, 532,
            534, 535, 537, 539, 540,
            542, 544, 545, 547, 549,
            550, 552, 554, 555, 557,
            559, 561, 562, 564, 566,
            567, 569, 571, 573, 575,
            576, 578, 580, 582, 583,
            585, 587, 589, 591, 592,
            594, 596, 598, 600, 602,
            603, 605, 607, 609, 611,
            613, 615, 617, 618, 620,
            622, 624, 626, 628, 630,
            632, 634, 636, 638, 640,
            642, 644, 646, 648, 650,
            652, 654, 656, 658, 660,
            662, 664, 666, 668, 670,
            672, 674, 676, 678, 680,
            682, 684, 686, 688, 691,
            693, 695, 697, 699, 701,
            703, 706, 708, 710, 712,
            714, 717, 719, 721, 723,
            725, 728, 730, 732, 734,
            737, 739, 741, 743, 746,
            748, 750, 753, 755, 757,
            760, 762, 764, 767, 769,
            771, 774, 776, 778, 781,
            783, 786, 788, 790, 793,
            795, 798, 800, 803, 805,
            808, 810, 813, 815, 818,
            820, 823, 825, 828, 830,
            833, 835, 838, 840, 843,
            846, 848, 851, 853, 856,
            859, 861, 864, 867, 869,
            872, 875, 877, 880, 883,
            885, 888, 891, 894, 896,
            899, 902, 905, 907, 910,
            913, 916, 919, 921, 924,
            927, 930, 933, 936, 939,
            941, 944, 947, 950, 953,
            956, 959, 962, 965, 968,
            971, 974, 977, 980, 983,
            986, 989, 992, 995, 998,
            1001, 1004, 1007, 1010, 1013,
            1017, 1020, 1023, 1026, 1029,
            1032, 1035, 1039, 1042, 1045,
            1048, 1051, 1055, 1058, 1061,
            1064, 1068, 1071, 1074, 1078,
            1081, 1084, 1088, 1091, 1094,
            1098, 1101, 1104, 1108, 1111,
            1115, 1118, 1121, 1125, 1128,
            1132, 1135, 1139, 1142, 1146,
            1149, 1153, 1156, 1160, 1163,
            1167, 1171, 1174, 1178, 1181,
            1185, 1189, 1192, 1196, 1200,
            1203, 1207, 1211, 1214, 1218,
            1222, 1226, 1229, 1233, 1237,
            1241, 1245, 1249, 1252, 1256,
            1260, 1264, 1268, 1272, 1276,
            1280, 1283, 1287, 1291, 1295,
            1299, 1303, 1307, 1311, 1315,
            1319, 1323, 1328, 1332, 1336,
            1340, 1344, 1348, 1352, 1356,
            1360, 1365, 1369, 1373, 1377,
            1382, 1386, 1390, 1394, 1399,
            1403, 1407, 1412, 1416, 1420,
            1425, 1429, 1433, 1438, 1442,
            1447, 1451, 1455, 1460, 1464,
            1469, 1473, 1478, 1483, 1487,
            1492, 1496, 1501, 1505, 1510,
            1515, 1519, 1524, 1529, 1533,
            1538, 1543, 1548, 1552, 1557,
            1562, 1567, 1572, 1576, 1581,
            1586, 1591, 1596, 1601, 1606,
            1611, 1616, 1620, 1625, 1630,
            1635, 1640, 1646, 1651, 1656,
            1661, 1666, 1671, 1676, 1681,
            1686, 1692, 1697, 1702, 1707,
            1712, 1718, 1723, 1728, 1734,
            1739, 1744, 1750, 1755, 1760,
            1766, 1771, 1777, 1782, 1788,
            1793, 1799, 1804, 1810, 1815,
            1821, 1826, 1832, 1838, 1843,
            1849, 1855, 1860, 1866, 1872,
            1878, 1883, 1889, 1895, 1901,
            1907, 1912, 1918, 1924, 1930,
            1936, 1942, 1948, 1954, 1960,
            1966, 1972, 1978, 1984, 1990,
            1996, 2003, 2009, 2015, 2021,
            2027, 2033, 2040, 2046, 2052,
            2059, 2065, 2071, 2078, 2084,
            2090, 2097, 2103, 2110, 2116,
            2123, 2129, 2136, 2142, 2149,
            2156, 2162, 2169, 2175, 2182,
            2189, 2196, 2202, 2209, 2216,
            2223, 2230, 2236, 2243, 2250,
            2257, 2264, 2271, 2278, 2285,
            2292, 2299, 2306, 2313, 2320,
            2327, 2335, 2342, 2349, 2356,
            2363, 2371, 2378, 2385, 2393,
            2400, 2407, 2415, 2422, 2430,
            2437, 2444, 2452, 2460, 2467,
            2475, 2482, 2490, 2498, 2505,
            2513, 2521, 2528, 2536, 2544,
            2552, 2560, 2567, 2575, 2583,
            2591, 2599, 2607, 2615, 2623,
            2631, 2639, 2647, 2656, 2664,
            2672, 2680, 2688, 2697, 2705,
            2713, 2722, 2730, 2738, 2747,
            2755, 2764, 2772, 2781, 2789,
            2798, 2806, 2815, 2824, 2832,
            2841, 2850, 2858, 2867, 2876,
            2885, 2894, 2903, 2912, 2921,
            2930, 2939, 2948, 2957, 2966,
            2975, 2984, 2993, 3002, 3012,
            3021, 3030, 3039, 3049, 3058,
            3067, 3077, 3086, 3096, 3105,
            3115, 3124, 3134, 3144, 3153,
            3163, 3173, 3183, 3192, 3202,
            3212, 3222, 3232, 3242, 3252,
            3262, 3272, 3282, 3292, 3302,
            3312, 3322, 3332, 3343, 3353,
            3363, 3374, 3384, 3394, 3405,
            3415, 3426, 3436, 3447, 3457,
            3468, 3479, 3489, 3500, 3511,
            3522, 3532, 3543, 3554, 3565,
            3576, 3587, 3598, 3609, 3620,
            3631, 3642, 3654, 3665, 3676,
            3687, 3699, 3710, 3722, 3733,
            3744, 3756, 3767, 3779, 3791,
            3802, 3814, 3826, 3837, 3849,
            3861, 3873, 3885, 3897, 3909,
            3921, 3933, 3945, 3957, 3969,
            3981, 3994, 4006, 4018, 4031,
            4043, 4055, 4068, 4080, 4093,
            4105, 4118, 4131, 4143, 4156,
            4169, 4182, 4195, 4207, 4220,
            4233, 4246, 4259, 4272, 4286,
            4299, 4312, 4325, 4339, 4352,
            4365, 4379, 4392, 4406, 4419,
            4433, 4446, 4460, 4474, 4487,
            4501, 4515, 4529, 4543, 4557,
            4571, 4585, 4599, 4613, 4627,
            4641, 4656, 4670, 4684, 4699,
            4713, 4728, 4742, 4757, 4771,
            4786, 4801, 4816, 4830, 4845,
            4860, 4875, 4890, 4905, 4920,
            4935, 4950, 4966, 4981, 4996,
            5011, 5027, 5042, 5058, 5073,
            5089, 5105, 5120, 5136, 5152,
            5168, 5183, 5199, 5215, 5231,
            5247, 5264, 5280, 5296, 5312,
            5329, 5345, 5361, 5378, 5394,
            5411, 5428, 5444, 5461, 5478,
            5495, 5512, 5528, 5545, 5562,
            5580, 5597, 5614, 5631, 5648,
            5666, 5683, 5701, 5718, 5736,
            5753, 5771, 5789, 5807, 5824,
            5842, 5860, 5878, 5896, 5914,
            5933, 5951, 5969, 5987, 6006,
            6024, 6043, 6061, 6080, 6099,
            6117, 6136, 6155, 6174, 6193,
            6212, 6231, 6250, 6269, 6289,
            6308, 6327, 6347, 6366, 6386,
            6406, 6425, 6445, 6465, 6485,
            6505, 6525, 6545, 6565, 6585,
            6605, 6625, 6646, 6666, 6687,
            6707, 6728, 6749, 6769, 6790,
            6811, 6832, 6853, 6874, 6895,
            6916, 6937, 6959, 6980, 7002,
            7023, 7045, 7066, 7088, 7110,
            7132, 7154, 7176, 7198, 7220,
            7242, 7264, 7286, 7309, 7331,
            7354, 7376, 7399, 7422, 7445,
            7468, 7490, 7513, 7537, 7560,
            7583, 7606, 7630, 7653, 7677,
            7700, 7724, 7748, 7771, 7795,
            7819, 7843, 7867, 7892, 7916,
            7940, 7964, 7989, 8014, 8038,
            8063, 8088, 8112, 8137, 8162,
            8187, 8213, 8238, 8263, 8289,
            8314, 8340, 8365, 8391, 8417,
            8443, 8468, 8495, 8521, 8547,
            8573, 8599, 8626, 8652, 8679,
            8706, 8732, 8759, 8786, 8813,
            8840, 8867, 8895, 8922, 8949,
            8977, 9004, 9032, 9060, 9088,
            9116, 9144, 9172, 9200, 9228,
            9256, 9285, 9313, 9342, 9371,
            9400, 9428, 9457, 9486, 9516,
            9545, 9574, 9604, 9633, 9663,
            9692, 9722, 9752, 9782, 9812,
            9842, 9872, 9903, 9933, 9964,
            9994, 10025, 10056, 10087, 10118,
            10149, 10180, 10211, 10243, 10274,
            10306, 10337, 10369, 10401, 10433,
            10465, 10497, 10529, 10562, 10594,
            10627, 10659, 10692, 10725, 10758,
            10791, 10824, 10858, 10891, 10924,
            10958, 10992, 11025, 11059, 11093,
            11127, 11161, 11196, 11230, 11265,
            11299, 11334, 11369, 11404, 11439,
            11474, 11509, 11545, 11580, 11616,
            11651, 11687, 11723, 11759, 11795,
            11831, 11868, 11904, 11941, 11978,
            12014, 12051, 12088, 12125, 12163,
            12200, 12238, 12275, 12313, 12351,
            12389, 12427, 12465, 12503, 12542,
            12580, 12619, 12658, 12696, 12735,
            12775, 12814, 12853, 12893, 12932,
            12972, 13012, 13052, 13092, 13132,
            13173, 13213, 13254, 13294, 13335,
            13376, 13417, 13459, 13500, 13541,
            13583, 13625, 13667, 13709, 13751,
            13793, 13835, 13878, 13920, 13963,
            14006, 14049, 14092, 14136, 14179,
            14223, 14266, 14310, 14354, 14398,
            14443, 14487, 14531, 14576, 14621,
            14666, 14711, 14756, 14801, 14847,
            14892, 14938, 14984, 15030, 15076,
            15123, 15169, 15216, 15263, 15309,
            15356, 15404, 15451, 15498, 15546,
            15594, 15642, 15690, 15738, 15786,
            15835, 15884, 15932, 15981, 16030,
            16080, 16129, 16179, 16228, 16278,
            16328, 16378, 16429, 16479, 16530,
            16581, 16632, 16683, 16734, 16785,
            16837, 16889, 16941, 16993, 17045,
            17097, 17150, 17202, 17255, 17308,
            17361, 17415, 17468, 17522, 17576,
            17630, 17684, 17738, 17793, 17848,
            17902, 17957, 18013, 18068, 18123,
            18179, 18235, 18291, 18347, 18404,
            18460, 18517, 18574, 18631, 18688,
            18746, 18803, 18861, 18919, 18977,
            19035, 19094, 19152, 19211, 19270,
            19330, 19389, 19448, 19508, 19568,
            19628, 19689, 19749, 19810, 19871,
            19932, 19993, 20054, 20116, 20178,
            20240, 20302, 20364, 20427, 20490,
            20553, 20616, 20679, 20743, 20806,
            20870, 20935, 20999, 21063, 21128,
            21193, 21258, 21323, 21389, 21455,
            21521, 21587, 21653, 21720, 21786,
            21853, 21920, 21988, 22055, 22123,
            22191, 22259, 22328, 22396, 22465,
            22534, 22603, 22673, 22742, 22812,
            22882, 22953, 23023, 23094, 23165,
            23236, 23308, 23379, 23451, 23523,
            23595, 23668, 23741, 23814, 23887,
            23960, 24034, 24108, 24182, 24256,
            24330, 24405, 24480, 24555, 24631,
            24707, 24783, 24859, 24935, 25012,
            25089, 25166, 25243, 25320, 25398,
            25476, 25555, 25633, 25712, 25791,
            25870, 25950, 26029, 26109, 26190,
            26270, 26351, 26432, 26513, 26594,
            26676, 26758, 26840, 26923, 27006,
            27088, 27172, 27255, 27339, 27423,
            27507, 27592, 27677, 27762, 27847,
            27932, 28018, 28104, 28191, 28277,
            28364, 28451, 28539, 28626, 28714,
            28803, 28891, 28980, 29069, 29158,
            29248, 29338, 29428, 29518, 29609,
            29700, 29791, 29883, 29975, 30067,
            30159, 30252, 30345, 30438, 30532,
            30625, 30719, 30814, 30909, 31003,
            31099, 31194, 31290, 31386, 31483,
            31579, 31677, 31774, 31871, 31969,
            32068, 32166, 32265, 32364, 32464,
            32563, 32663, 32764, 32864, 32965,
            33067, 33168, 33270, 33372, 33475,
            33578, 33681, 33785, 33888, 33992,
            34097, 34202, 34307, 34412, 34518,
            34624, 34730, 34837, 34944, 35051,
            35159, 35267, 35376, 35484, 35593,
            35703, 35812, 35922, 36033, 36144,
            36255, 36366, 36478, 36590, 36702,
            36815, 36928, 37042, 37155, 37270,
            37384, 37499, 37614, 37730, 37846,
            37962, 38079, 38196, 38313, 38431,
            38549, 38667, 38786, 38905, 39025,
            39145, 39265, 39386, 39507, 39628,
            39750, 39872, 39994, 40117, 40241,
            40364, 40488, 40613, 40737, 40863,
            40988, 41114, 41240, 41367, 41494,
            41622, 41750, 41878, 42007, 42136,
            42265, 42395, 42525, 42656, 42787,
            42919, 43050, 43183, 43315, 43448,
            43582, 43716, 43850, 43985, 44120,
            44256, 44392, 44528, 44665, 44802,
            44940, 45078, 45216, 45355, 45495,
            45634, 45775, 45915, 46056, 46198,
            46340, 46482, 46625, 46768, 46912,
            47056, 47201, 47346, 47491, 47637,
            47784, 47930, 48078, 48225, 48374,
            48522, 48671, 48821, 48971, 49121,
            49272, 49424, 49576, 49728, 49881,
            50034, 50188, 50342, 50497, 50652,
            50807, 50963, 51120, 51277, 51435,
            51593, 51751, 51910, 52070, 52230,
            52390, 52551, 52713, 52875, 53037,
            53200, 53364, 53528, 53692, 53857,
            54022, 54188, 54355, 54522, 54690,
            54858, 55026, 55195, 55365, 55535,
            55706, 55877, 56048, 56221, 56393,
            56567, 56740, 56915, 57090, 57265,
            57441, 57618, 57795, 57972, 58150,
            58329, 58508, 58688, 58868, 59049,
            59231, 59413, 59595, 59778, 59962,
            60146, 60331, 60516, 60702, 60889,
            61076, 61264, 61452, 61641, 61830,
            62020, 62211, 62402, 62594, 62786,
            62979, 63172, 63366, 63561, 63756,
            63952, 64149, 64346, 64544, 64742,
            64941, 65140, 65341, 65541, 65743,
            65945, 66147, 66351, 66555, 66759,
            66964, 67170, 67376, 67583, 67791,
            67999, 68208, 68418, 68628, 68839,
            69050, 69263, 69475, 69689, 69903,
            70118, 70333, 70549, 70766, 70984,
            71202, 71421, 71640, 71860, 72081,
            72302, 72525, 72747, 72971, 73195,
            73420, 73646, 73872, 74099, 74327,
            74555, 74784, 75014, 75244, 75476,
            75707, 75940, 76173, 76407, 76642,
            76878, 77114, 77351, 77589, 77827,
            78066, 78306, 78547, 78788, 79030,
            79273, 79516, 79761, 80006, 80252,
            80498, 80746, 80994, 81243, 81492,
            81743, 81994, 82246, 82498, 82752,
            83006, 83261, 83517, 83774, 84031,
            84289, 84548, 84808, 85069, 85330,
            85592, 85855, 86119, 86384, 86649,
            86915, 87182, 87450, 87719, 87989,
            88259, 88530, 88802, 89075, 89349,
            89623, 89899, 90175, 90452, 90730,
            91009, 91288, 91569, 91850, 92132,
            92415, 92699, 92984, 93270, 93557,
            93844, 94132, 94422, 94712, 95003,
            95295, 95587, 95881, 96176, 96471,
            96768, 97065, 97363, 97662, 97963,
            98264, 98565, 98868, 99172, 99477,
            99783, 100089, 100397, 100705, 101015,
            101325, 101636, 101949, 102262, 102576,
            102891, 103207, 103525, 103843, 104162,
            104482, 104803, 105125, 105448, 105772,
            106097, 106423, 106750, 107078, 107407,
            107737, 108068, 108400, 108733, 109067,
            109402, 109738, 110076, 110414, 110753,
            111093, 111435, 111777, 112121, 112465,
            112811, 113157, 113505, 113854, 114204,
            114555, 114907, 115260, 115614, 115969,
            116325, 116683, 117041, 117401, 117762,
            118124, 118486, 118851, 119216, 119582,
            119949, 120318, 120688, 121059, 121431,
            121804, 122178, 122553, 122930, 123308,
            123687, 124067, 124448, 124830, 125214,
            125598, 125984, 126371, 126760, 127149,
            127540, 127932, 128325, 128719, 129115,
            129511, 129909, 130309, 130709, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071
         ) ),
        max_error = cms.double(5748.616225984908),
        output_scale_factor = cms.double(0.953125),
        unused_lsbs = cms.uint32(2)
    ),
    inv_mass_checks = cms.untracked.bool(False),
    minDR = cms.double(0.1),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    sanity_checks = cms.untracked.bool(False),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    )
)


process.NNPuppiTauPuppiMet = cms.EDFilter("L1GTDoubleObjectCond",
    collection1 = cms.PSet(
        maxEta = cms.double(2.172),
        minEta = cms.double(-2.172),
        minQualityScore = cms.uint32(225),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 1.5),
        regionsMinPt = cms.vdouble(30, 22),
        tag = cms.InputTag("l1tGTProducer","CL2Taus")
    ),
    collection2 = cms.PSet(
        minPt = cms.double(86),
        tag = cms.InputTag("l1tGTProducer","CL2EtSum")
    ),
    cos_phi_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            487, 487, 487, 487, 487,
            487, 487, 487, 487, 487,
            487, 486, 486, 486, 486,
            486, 486, 486, 485, 485,
            485, 485, 485, 485, 484,
            484, 484, 484, 484, 483,
            483, 483, 483, 483, 482,
            482, 482, 482, 481, 481,
            481, 481, 480, 480, 480,
            480, 479, 479, 479, 478,
            478, 478, 478, 477, 477,
            477, 476, 476, 476, 475,
            475, 475, 474, 474, 474,
            473, 473, 472, 472, 472,
            471, 471, 471, 470, 470,
            469, 469, 468, 468, 468,
            467, 467, 466, 466, 465,
            465, 465, 464, 464, 463,
            463, 462, 462, 461, 461,
            460, 460, 459, 459, 458,
            458, 457, 457, 456, 456,
            455, 454, 454, 453, 453,
            452, 452, 451, 451, 450,
            449, 449, 448, 448, 447,
            446, 446, 445, 445, 444,
            443, 443, 442, 441, 441,
            440, 440, 439, 438, 438,
            437, 436, 436, 435, 434,
            434, 433, 432, 431, 431,
            430, 429, 429, 428, 427,
            426, 426, 425, 424, 423,
            423, 422, 421, 420, 420,
            419, 418, 417, 417, 416,
            415, 414, 413, 413, 412,
            411, 410, 409, 409, 408,
            407, 406, 405, 405, 404,
            403, 402, 401, 400, 399,
            399, 398, 397, 396, 395,
            394, 393, 392, 392, 391,
            390, 389, 388, 387, 386,
            385, 384, 383, 382, 381,
            381, 380, 379, 378, 377,
            376, 375, 374, 373, 372,
            371, 370, 369, 368, 367,
            366, 365, 364, 363, 362,
            361, 360, 359, 358, 357,
            356, 355, 354, 353, 352,
            351, 350, 349, 348, 347,
            346, 345, 343, 342, 341,
            340, 339, 338, 337, 336,
            335, 334, 333, 332, 330,
            329, 328, 327, 326, 325,
            324, 323, 322, 320, 319,
            318, 317, 316, 315, 314,
            312, 311, 310, 309, 308,
            307, 306, 304, 303, 302,
            301, 300, 298, 297, 296,
            295, 294, 293, 291, 290,
            289, 288, 286, 285, 284,
            283, 282, 280, 279, 278,
            277, 275, 274, 273, 272,
            270, 269, 268, 267, 265,
            264, 263, 262, 260, 259,
            258, 257, 255, 254, 253,
            252, 250, 249, 248, 246,
            245, 244, 242, 241, 240,
            239, 237, 236, 235, 233,
            232, 231, 229, 228, 227,
            225, 224, 223, 221, 220,
            219, 217, 216, 215, 213,
            212, 211, 209, 208, 207,
            205, 204, 203, 201, 200,
            198, 197, 196, 194, 193,
            192, 190, 189, 187, 186,
            185, 183, 182, 181, 179,
            178, 176, 175, 174, 172,
            171, 169, 168, 167, 165,
            164, 162, 161, 159, 158,
            157, 155, 154, 152, 151,
            150, 148, 147, 145, 144,
            142, 141, 140, 138, 137,
            135, 134, 132, 131, 129,
            128, 127, 125, 124, 122,
            121, 119, 118, 116, 115,
            113, 112, 111, 109, 108,
            106, 105, 103, 102, 100,
            99, 97, 96, 94, 93,
            92, 90, 89, 87, 86,
            84, 83, 81, 80, 78,
            77, 75, 74, 72, 71,
            69, 68, 66, 65, 63,
            62, 60, 59, 58, 56,
            55, 53, 52, 50, 49,
            47, 46, 44, 43, 41,
            40, 38, 37, 35, 34,
            32, 31, 29, 28, 26,
            25, 23, 22, 20, 19,
            17, 16, 14, 13, 11,
            10, 8, 7, 5, 4,
            2, 1, -1, -2, -4,
            -5, -7, -8, -10, -11,
            -13, -14, -16, -17, -19,
            -20, -22, -23, -25, -26,
            -28, -29, -31, -32, -34,
            -35, -37, -38, -40, -41,
            -43, -44, -46, -47, -49,
            -50, -52, -53, -55, -56,
            -58, -59, -60, -62, -63,
            -65, -66, -68, -69, -71,
            -72, -74, -75, -77, -78,
            -80, -81, -83, -84, -86,
            -87, -89, -90, -92, -93,
            -94, -96, -97, -99, -100,
            -102, -103, -105, -106, -108,
            -109, -111, -112, -113, -115,
            -116, -118, -119, -121, -122,
            -124, -125, -127, -128, -129,
            -131, -132, -134, -135, -137,
            -138, -140, -141, -142, -144,
            -145, -147, -148, -150, -151,
            -152, -154, -155, -157, -158,
            -159, -161, -162, -164, -165,
            -167, -168, -169, -171, -172,
            -174, -175, -176, -178, -179,
            -181, -182, -183, -185, -186,
            -187, -189, -190, -192, -193,
            -194, -196, -197, -198, -200,
            -201, -203, -204, -205, -207,
            -208, -209, -211, -212, -213,
            -215, -216, -217, -219, -220,
            -221, -223, -224, -225, -227,
            -228, -229, -231, -232, -233,
            -235, -236, -237, -239, -240,
            -241, -242, -244, -245, -246,
            -248, -249, -250, -252, -253,
            -254, -255, -257, -258, -259,
            -260, -262, -263, -264, -265,
            -267, -268, -269, -270, -272,
            -273, -274, -275, -277, -278,
            -279, -280, -282, -283, -284,
            -285, -286, -288, -289, -290,
            -291, -293, -294, -295, -296,
            -297, -298, -300, -301, -302,
            -303, -304, -306, -307, -308,
            -309, -310, -311, -312, -314,
            -315, -316, -317, -318, -319,
            -320, -322, -323, -324, -325,
            -326, -327, -328, -329, -330,
            -332, -333, -334, -335, -336,
            -337, -338, -339, -340, -341,
            -342, -343, -345, -346, -347,
            -348, -349, -350, -351, -352,
            -353, -354, -355, -356, -357,
            -358, -359, -360, -361, -362,
            -363, -364, -365, -366, -367,
            -368, -369, -370, -371, -372,
            -373, -374, -375, -376, -377,
            -378, -379, -380, -381, -381,
            -382, -383, -384, -385, -386,
            -387, -388, -389, -390, -391,
            -392, -392, -393, -394, -395,
            -396, -397, -398, -399, -399,
            -400, -401, -402, -403, -404,
            -405, -405, -406, -407, -408,
            -409, -409, -410, -411, -412,
            -413, -413, -414, -415, -416,
            -417, -417, -418, -419, -420,
            -420, -421, -422, -423, -423,
            -424, -425, -426, -426, -427,
            -428, -429, -429, -430, -431,
            -431, -432, -433, -434, -434,
            -435, -436, -436, -437, -438,
            -438, -439, -440, -440, -441,
            -441, -442, -443, -443, -444,
            -445, -445, -446, -446, -447,
            -448, -448, -449, -449, -450,
            -451, -451, -452, -452, -453,
            -453, -454, -454, -455, -456,
            -456, -457, -457, -458, -458,
            -459, -459, -460, -460, -461,
            -461, -462, -462, -463, -463,
            -464, -464, -465, -465, -465,
            -466, -466, -467, -467, -468,
            -468, -468, -469, -469, -470,
            -470, -471, -471, -471, -472,
            -472, -472, -473, -473, -474,
            -474, -474, -475, -475, -475,
            -476, -476, -476, -477, -477,
            -477, -478, -478, -478, -478,
            -479, -479, -479, -480, -480,
            -480, -480, -481, -481, -481,
            -481, -482, -482, -482, -482,
            -483, -483, -483, -483, -483,
            -484, -484, -484, -484, -484,
            -485, -485, -485, -485, -485,
            -485, -486, -486, -486, -486,
            -486, -486, -486, -487, -487,
            -487, -487, -487, -487, -487,
            -487, -487, -487, -487, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488
         ) ),
        max_error = cms.double(0.0025338281044886835),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            489, 489, 489, 489, 489,
            489, 489, 489, 489, 489,
            489, 490, 490, 490, 490,
            490, 490, 490, 491, 491,
            491, 491, 491, 491, 492,
            492, 492, 492, 492, 493,
            493, 493, 493, 493, 494,
            494, 494, 494, 495, 495,
            495, 495, 496, 496, 496,
            496, 497, 497, 497, 498,
            498, 498, 499, 499, 499,
            499, 500, 500, 500, 501,
            501, 502, 502, 502, 503,
            503, 503, 504, 504, 504,
            505, 505, 506, 506, 507,
            507, 507, 508, 508, 509,
            509, 510, 510, 510, 511,
            511, 512, 512, 513, 513,
            514, 514, 515, 515, 516,
            516, 517, 517, 518, 518,
            519, 520, 520, 521, 521,
            522, 522, 523, 523, 524,
            525, 525, 526, 526, 527,
            528, 528, 529, 530, 530,
            531, 531, 532, 533, 533,
            534, 535, 535, 536, 537,
            537, 538, 539, 540, 540,
            541, 542, 542, 543, 544,
            545, 545, 546, 547, 548,
            548, 549, 550, 551, 551,
            552, 553, 554, 555, 555,
            556, 557, 558, 559, 560,
            560, 561, 562, 563, 564,
            565, 566, 567, 567, 568,
            569, 570, 571, 572, 573,
            574, 575, 576, 577, 577,
            578, 579, 580, 581, 582,
            583, 584, 585, 586, 587,
            588, 589, 590, 591, 592,
            593, 594, 595, 596, 598,
            599, 600, 601, 602, 603,
            604, 605, 606, 607, 608,
            610, 611, 612, 613, 614,
            615, 616, 618, 619, 620,
            621, 622, 623, 625, 626,
            627, 628, 629, 631, 632,
            633, 634, 636, 637, 638,
            639, 641, 642, 643, 644,
            646, 647, 648, 650, 651,
            652, 654, 655, 656, 658,
            659, 660, 662, 663, 665,
            666, 667, 669, 670, 672,
            673, 674, 676, 677, 679,
            680, 682, 683, 685, 686,
            687, 689, 690, 692, 693,
            695, 697, 698, 700, 701,
            703, 704, 706, 707, 709,
            710, 712, 714, 715, 717,
            719, 720, 722, 723, 725,
            727, 728, 730, 732, 733,
            735, 737, 738, 740, 742,
            744, 745, 747, 749, 750,
            752, 754, 756, 758, 759,
            761, 763, 765, 767, 768,
            770, 772, 774, 776, 778,
            779, 781, 783, 785, 787,
            789, 791, 793, 795, 796,
            798, 800, 802, 804, 806,
            808, 810, 812, 814, 816,
            818, 820, 822, 824, 826,
            828, 830, 832, 835, 837,
            839, 841, 843, 845, 847,
            849, 851, 854, 856, 858,
            860, 862, 864, 867, 869,
            871, 873, 875, 878, 880,
            882, 884, 887, 889, 891,
            894, 896, 898, 900, 903,
            905, 907, 910, 912, 915,
            917, 919, 922, 924, 927,
            929, 931, 934, 936, 939,
            941, 944, 946, 949, 951,
            954, 956, 959, 961, 964,
            966, 969, 971, 974, 977,
            979, 982, 984, 987, 990,
            992, 995, 998, 1000, 1003,
            1006, 1008, 1011, 1014, 1017,
            1019, 1022, 1025, 1028, 1030,
            1033, 1036, 1039, 1042, 1044,
            1047, 1050, 1053, 1056, 1059,
            1062, 1065, 1067, 1070, 1073,
            1076, 1079, 1082, 1085, 1088,
            1091, 1094, 1097, 1100, 1103,
            1106, 1109, 1112, 1115, 1118,
            1122, 1125, 1128, 1131, 1134,
            1137, 1140, 1143, 1147, 1150,
            1153, 1156, 1159, 1163, 1166,
            1169, 1172, 1176, 1179, 1182,
            1186, 1189, 1192, 1196, 1199,
            1202, 1206, 1209, 1212, 1216,
            1219, 1223, 1226, 1230, 1233,
            1237, 1240, 1244, 1247, 1251,
            1254, 1258, 1261, 1265, 1268,
            1272, 1276, 1279, 1283, 1287,
            1290, 1294, 1298, 1301, 1305,
            1309, 1312, 1316, 1320, 1324,
            1327, 1331, 1335, 1339, 1343,
            1347, 1350, 1354, 1358, 1362,
            1366, 1370, 1374, 1378, 1382,
            1386, 1390, 1394, 1398, 1402,
            1406, 1410, 1414, 1418, 1422,
            1426, 1430, 1434, 1439, 1443,
            1447, 1451, 1455, 1459, 1464,
            1468, 1472, 1476, 1481, 1485,
            1489, 1494, 1498, 1502, 1507,
            1511, 1516, 1520, 1524, 1529,
            1533, 1538, 1542, 1547, 1551,
            1556, 1560, 1565, 1569, 1574,
            1579, 1583, 1588, 1592, 1597,
            1602, 1606, 1611, 1616, 1621,
            1625, 1630, 1635, 1640, 1645,
            1649, 1654, 1659, 1664, 1669,
            1674, 1679, 1684, 1689, 1693,
            1698, 1703, 1708, 1714, 1719,
            1724, 1729, 1734, 1739, 1744,
            1749, 1754, 1760, 1765, 1770,
            1775, 1780, 1786, 1791, 1796,
            1802, 1807, 1812, 1818, 1823,
            1828, 1834, 1839, 1845, 1850,
            1856, 1861, 1867, 1872, 1878,
            1883, 1889, 1894, 1900, 1906,
            1911, 1917, 1923, 1929, 1934,
            1940, 1946, 1952, 1957, 1963,
            1969, 1975, 1981, 1987, 1993,
            1999, 2004, 2010, 2016, 2022,
            2028, 2035, 2041, 2047, 2053,
            2059, 2065, 2071, 2077, 2084,
            2090, 2096, 2102, 2109, 2115,
            2121, 2128, 2134, 2140, 2147,
            2153, 2160, 2166, 2173, 2179,
            2186, 2192, 2199, 2205, 2212,
            2219, 2225, 2232, 2239, 2245,
            2252, 2259, 2266, 2272, 2279,
            2286, 2293, 2300, 2307, 2314,
            2321, 2328, 2335, 2342, 2349,
            2356, 2363, 2370, 2377, 2384,
            2391, 2398, 2406, 2413, 2420,
            2427, 2435, 2442, 2449, 2457,
            2464, 2472, 2479, 2487, 2494,
            2502, 2509, 2517, 2524, 2532,
            2539, 2547, 2555, 2563, 2570,
            2578, 2586, 2594, 2601, 2609,
            2617, 2625, 2633, 2641, 2649,
            2657, 2665, 2673, 2681, 2689,
            2697, 2705, 2714, 2722, 2730,
            2738, 2747, 2755, 2763, 2772,
            2780, 2788, 2797, 2805, 2814,
            2822, 2831, 2839, 2848, 2857,
            2865, 2874, 2883, 2891, 2900,
            2909, 2918, 2927, 2935, 2944,
            2953, 2962, 2971, 2980, 2989,
            2998, 3007, 3016, 3026, 3035,
            3044, 3053, 3062, 3072, 3081,
            3090, 3100, 3109, 3119, 3128,
            3138, 3147, 3157, 3166, 3176,
            3186, 3195, 3205, 3215, 3224,
            3234, 3244, 3254, 3264, 3274,
            3284, 3294, 3304, 3314, 3324,
            3334, 3344, 3354, 3364, 3375,
            3385, 3395, 3405, 3416, 3426,
            3437, 3447, 3458, 3468, 3479,
            3489, 3500, 3510, 3521, 3532,
            3543, 3553, 3564, 3575, 3586,
            3597, 3608, 3619, 3630, 3641,
            3652, 3663, 3674, 3685, 3697,
            3708, 3719, 3730, 3742, 3753,
            3765, 3776, 3788, 3799, 3811,
            3822, 3834, 3846, 3857, 3869,
            3881, 3893, 3905, 3917, 3929,
            3941, 3953, 3965, 3977, 3989,
            4001, 4013, 4025, 4038, 4050,
            4062, 4075, 4087, 4100, 4112,
            4125, 4137, 4150, 4163, 4175,
            4188, 4201, 4214, 4226, 4239,
            4252, 4265, 4278, 4291, 4304,
            4318, 4331, 4344, 4357, 4371,
            4384, 4397, 4411, 4424, 4438,
            4451, 4465, 4479, 4492, 4506,
            4520, 4533, 4547, 4561, 4575,
            4589, 4603, 4617, 4631, 4645,
            4660, 4674, 4688, 4703, 4717,
            4731, 4746, 4760, 4775, 4789,
            4804, 4819, 4833, 4848, 4863,
            4878, 4893, 4908, 4923, 4938,
            4953, 4968, 4983, 4999, 5014,
            5029, 5045, 5060, 5075, 5091,
            5107, 5122, 5138, 5154, 5169,
            5185, 5201, 5217, 5233, 5249,
            5265, 5281, 5297, 5313, 5330,
            5346, 5362, 5379, 5395, 5412,
            5428, 5445, 5462, 5478, 5495,
            5512, 5529, 5546, 5563, 5580,
            5597, 5614, 5631, 5648, 5666,
            5683, 5700, 5718, 5735, 5753,
            5770, 5788, 5806, 5824, 5841,
            5859, 5877, 5895, 5913, 5931,
            5950, 5968, 5986, 6004, 6023,
            6041, 6060, 6078, 6097, 6116,
            6134, 6153, 6172, 6191, 6210,
            6229, 6248, 6267, 6286, 6305,
            6325, 6344, 6364, 6383, 6403,
            6422, 6442, 6462, 6481, 6501,
            6521, 6541, 6561, 6581, 6602,
            6622, 6642, 6662, 6683, 6703,
            6724, 6744, 6765, 6786, 6807,
            6828, 6848, 6869, 6891, 6912,
            6933, 6954, 6975, 6997, 7018,
            7040, 7061, 7083, 7105, 7126,
            7148, 7170, 7192, 7214, 7236,
            7259, 7281, 7303, 7325, 7348,
            7370, 7393, 7416, 7438, 7461,
            7484, 7507, 7530, 7553, 7576,
            7600, 7623, 7646, 7670, 7693,
            7717, 7741, 7764, 7788, 7812,
            7836, 7860, 7884, 7908, 7932,
            7957, 7981, 8006, 8030, 8055,
            8080, 8104, 8129, 8154, 8179,
            8204, 8229, 8255, 8280, 8305,
            8331, 8356, 8382, 8408, 8434,
            8459, 8485, 8511, 8537, 8564,
            8590, 8616, 8643, 8669, 8696,
            8722, 8749, 8776, 8803, 8830,
            8857, 8884, 8912, 8939, 8966,
            8994, 9021, 9049, 9077, 9105,
            9133, 9161, 9189, 9217, 9245,
            9274, 9302, 9331, 9359, 9388,
            9417, 9446, 9475, 9504, 9533,
            9562, 9591, 9621, 9650, 9680,
            9710, 9740, 9769, 9799, 9830,
            9860, 9890, 9920, 9951, 9981,
            10012, 10043, 10073, 10104, 10135,
            10166, 10198, 10229, 10260, 10292,
            10323, 10355, 10387, 10419, 10451,
            10483, 10515, 10547, 10580, 10612,
            10645, 10677, 10710, 10743, 10776,
            10809, 10842, 10876, 10909, 10942,
            10976, 11010, 11044, 11077, 11111,
            11146, 11180, 11214, 11248, 11283,
            11318, 11352, 11387, 11422, 11457,
            11492, 11528, 11563, 11599, 11634,
            11670, 11706, 11742, 11778, 11814,
            11850, 11887, 11923, 11960, 11996,
            12033, 12070, 12107, 12144, 12182,
            12219, 12257, 12294, 12332, 12370,
            12408, 12446, 12484, 12522, 12561,
            12599, 12638, 12677, 12716, 12755,
            12794, 12833, 12873, 12912, 12952,
            12992, 13032, 13072, 13112, 13152,
            13192, 13233, 13274, 13314, 13355,
            13396, 13437, 13479, 13520, 13561,
            13603, 13645, 13687, 13729, 13771,
            13813, 13856, 13898, 13941, 13984,
            14027, 14070, 14113, 14156, 14200,
            14243, 14287, 14331, 14375, 14419,
            14463, 14508, 14552, 14597, 14642,
            14687, 14732, 14777, 14823, 14868,
            14914, 14960, 15005, 15052, 15098,
            15144, 15191, 15237, 15284, 15331,
            15378, 15425, 15473, 15520, 15568,
            15616, 15664, 15712, 15760, 15808,
            15857, 15906, 15955, 16004, 16053,
            16102, 16151, 16201, 16251, 16301,
            16351, 16401, 16451, 16502, 16553,
            16603, 16654, 16706, 16757, 16808,
            16860, 16912, 16964, 17016, 17068,
            17121, 17173, 17226, 17279, 17332,
            17385, 17438, 17492, 17546, 17600,
            17654, 17708, 17762, 17817, 17872,
            17926, 17982, 18037, 18092, 18148,
            18203, 18259, 18315, 18372, 18428,
            18485, 18542, 18598, 18656, 18713,
            18770, 18828, 18886, 18944, 19002,
            19060, 19119, 19178, 19237, 19296,
            19355, 19414, 19474, 19534, 19594,
            19654, 19714, 19775, 19836, 19897,
            19958, 20019, 20081, 20142, 20204,
            20266, 20328, 20391, 20454, 20516,
            20579, 20643, 20706, 20770, 20833,
            20897, 20962, 21026, 21091, 21155,
            21220, 21286, 21351, 21417, 21482,
            21548, 21615, 21681, 21748, 21814,
            21881, 21949, 22016, 22084, 22151,
            22220, 22288, 22356, 22425, 22494,
            22563, 22632, 22702, 22771, 22841,
            22912, 22982, 23053, 23123, 23194,
            23266, 23337, 23409, 23481, 23553,
            23625, 23698, 23771, 23844, 23917,
            23990, 24064, 24138, 24212, 24287,
            24361, 24436, 24511, 24586, 24662,
            24738, 24814, 24890, 24966, 25043,
            25120, 25197, 25275, 25352, 25430,
            25508, 25587, 25665, 25744, 25823,
            25902, 25982, 26062, 26142, 26222,
            26303, 26384, 26465, 26546, 26627,
            26709, 26791, 26874, 26956, 27039,
            27122, 27205, 27289, 27373, 27457,
            27541, 27626, 27711, 27796, 27881,
            27967, 28053, 28139, 28226, 28312,
            28399, 28486, 28574, 28662, 28750,
            28838, 28927, 29016, 29105, 29194,
            29284, 29374, 29464, 29555, 29645,
            29736, 29828, 29919, 30011, 30104,
            30196, 30289, 30382, 30475, 30569,
            30663, 30757, 30851, 30946, 31041,
            31137, 31232, 31328, 31425, 31521,
            31618, 31715, 31813, 31910, 32008,
            32107, 32205, 32304, 32403, 32503,
            32603, 32703, 32804, 32904, 33005,
            33107, 33209, 33311, 33413, 33516,
            33619, 33722, 33825, 33929, 34034,
            34138, 34243, 34348, 34454, 34560,
            34666, 34772, 34879, 34986, 35094,
            35202, 35310, 35418, 35527, 35636,
            35746, 35856, 35966, 36076, 36187,
            36298, 36410, 36522, 36634, 36746,
            36859, 36973, 37086, 37200, 37314,
            37429, 37544, 37659, 37775, 37891,
            38008, 38124, 38241, 38359, 38477,
            38595, 38714, 38833, 38952, 39072,
            39192, 39312, 39433, 39554, 39675,
            39797, 39920, 40042, 40165, 40289,
            40413, 40537, 40661, 40786, 40911,
            41037, 41163, 41290, 41417, 41544,
            41671, 41800, 41928, 42057, 42186,
            42316, 42446, 42576, 42707, 42838,
            42970, 43102, 43234, 43367, 43500,
            43634, 43768, 43902, 44037, 44173,
            44308, 44444, 44581, 44718, 44855,
            44993, 45131, 45270, 45409, 45549,
            45689, 45829, 45970, 46111, 46253,
            46395, 46537, 46680, 46824, 46968,
            47112, 47257, 47402, 47548, 47694,
            47840, 47987, 48135, 48283, 48431,
            48580, 48729, 48879, 49029, 49180,
            49331, 49482, 49634, 49787, 49940,
            50093, 50247, 50401, 50556, 50712,
            50867, 51024, 51181, 51338, 51495,
            51654, 51812, 51972, 52131, 52291,
            52452, 52613, 52775, 52937, 53100,
            53263, 53427, 53591, 53755, 53921,
            54086, 54252, 54419, 54586, 54754,
            54922, 55091, 55260, 55430, 55600,
            55771, 55943, 56114, 56287, 56460,
            56633, 56807, 56982, 57157, 57333,
            57509, 57685, 57863, 58040, 58219,
            58398, 58577, 58757, 58938, 59119,
            59300, 59483, 59665, 59849, 60033,
            60217, 60402, 60588, 60774, 60960,
            61148, 61336, 61524, 61713, 61903,
            62093, 62284, 62475, 62667, 62860,
            63053, 63247, 63441, 63636, 63831,
            64027, 64224, 64422, 64619, 64818,
            65017, 65217, 65417, 65618, 65820,
            66022, 66225, 66429, 66633, 66837,
            67043, 67249, 67455, 67663, 67870,
            68079, 68288, 68498, 68708, 68920,
            69131, 69344, 69557, 69771, 69985,
            70200, 70416, 70632, 70849, 71067,
            71285, 71504, 71724, 71944, 72165,
            72387, 72609, 72833, 73056, 73281,
            73506, 73732, 73958, 74186, 74414,
            74642, 74872, 75102, 75332, 75564,
            75796, 76029, 76262, 76497, 76732,
            76968, 77204, 77441, 77679, 77918,
            78157, 78398, 78638, 78880, 79122,
            79366, 79609, 79854, 80099, 80345,
            80592, 80840, 81088, 81338, 81587,
            81838, 82090, 82342, 82595, 82849,
            83103, 83358, 83615, 83872, 84129,
            84388, 84647, 84907, 85168, 85430,
            85692, 85955, 86220, 86485, 86750,
            87017, 87284, 87552, 87821, 88091,
            88362, 88633, 88906, 89179, 89453,
            89728, 90003, 90280, 90557, 90836,
            91115, 91395, 91676, 91957, 92240,
            92523, 92807, 93093, 93379, 93666,
            93953, 94242, 94532, 94822, 95113,
            95406, 95699, 95993, 96288, 96584,
            96881, 97178, 97477, 97776, 98077,
            98378, 98680, 98984, 99288, 99593,
            99899, 100206, 100514, 100822, 101132,
            101443, 101755, 102067, 102381, 102696,
            103011, 103328, 103645, 103964, 104283,
            104603, 104925, 105247, 105571, 105895,
            106220, 106547, 106874, 107203, 107532,
            107862, 108194, 108526, 108860, 109194,
            109530, 109866, 110204, 110542, 110882,
            111223, 111565, 111907, 112251, 112596,
            112942, 113289, 113637, 113986, 114337,
            114688, 115040, 115394, 115748, 116104,
            116461, 116819, 117178, 117538, 117899,
            118261, 118624, 118989, 119354, 119721,
            120089, 120458, 120828, 121199, 121572,
            121945, 122320, 122696, 123073, 123451,
            123830, 124211, 124593, 124975, 125359,
            125745, 126131, 126518, 126907, 127297,
            127688, 128081, 128474, 128869, 129265,
            129662, 130061, 130260
         ) ),
        max_error = cms.double(0.6152529479288091),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut2 = cms.PSet(
        lut = cms.vint32( (
            256, 256, 257, 258, 259,
            260, 260, 261, 262, 263,
            264, 264, 265, 266, 267,
            268, 268, 269, 270, 271,
            272, 273, 273, 274, 275,
            276, 277, 278, 279, 279,
            280, 281, 282, 283, 284,
            285, 285, 286, 287, 288,
            289, 290, 291, 292, 293,
            293, 294, 295, 296, 297,
            298, 299, 300, 301, 302,
            303, 303, 304, 305, 306,
            307, 308, 309, 310, 311,
            312, 313, 314, 315, 316,
            317, 318, 319, 320, 321,
            322, 323, 324, 325, 326,
            327, 328, 329, 330, 331,
            332, 333, 334, 335, 336,
            337, 338, 339, 340, 341,
            342, 343, 344, 345, 346,
            347, 348, 349, 351, 352,
            353, 354, 355, 356, 357,
            358, 359, 360, 361, 363,
            364, 365, 366, 367, 368,
            369, 370, 372, 373, 374,
            375, 376, 377, 379, 380,
            381, 382, 383, 384, 386,
            387, 388, 389, 390, 392,
            393, 394, 395, 396, 398,
            399, 400, 401, 402, 404,
            405, 406, 407, 409, 410,
            411, 412, 414, 415, 416,
            418, 419, 420, 421, 423,
            424, 425, 427, 428, 429,
            431, 432, 433, 435, 436,
            437, 439, 440, 441, 443,
            444, 445, 447, 448, 449,
            451, 452, 454, 455, 456,
            458, 459, 461, 462, 463,
            465, 466, 468, 469, 471,
            472, 474, 475, 476, 478,
            479, 481, 482, 484, 485,
            487, 488, 490, 491, 493,
            494, 496, 497, 499, 500,
            502, 503, 505, 507, 508,
            510, 511, 513, 514, 516,
            518, 519, 521, 522, 524,
            526, 527, 529, 530, 532,
            534, 535, 537, 539, 540,
            542, 544, 545, 547, 549,
            550, 552, 554, 555, 557,
            559, 561, 562, 564, 566,
            567, 569, 571, 573, 575,
            576, 578, 580, 582, 583,
            585, 587, 589, 591, 592,
            594, 596, 598, 600, 602,
            603, 605, 607, 609, 611,
            613, 615, 617, 618, 620,
            622, 624, 626, 628, 630,
            632, 634, 636, 638, 640,
            642, 644, 646, 648, 650,
            652, 654, 656, 658, 660,
            662, 664, 666, 668, 670,
            672, 674, 676, 678, 680,
            682, 684, 686, 688, 691,
            693, 695, 697, 699, 701,
            703, 706, 708, 710, 712,
            714, 717, 719, 721, 723,
            725, 728, 730, 732, 734,
            737, 739, 741, 743, 746,
            748, 750, 753, 755, 757,
            760, 762, 764, 767, 769,
            771, 774, 776, 778, 781,
            783, 786, 788, 790, 793,
            795, 798, 800, 803, 805,
            808, 810, 813, 815, 818,
            820, 823, 825, 828, 830,
            833, 835, 838, 840, 843,
            846, 848, 851, 853, 856,
            859, 861, 864, 867, 869,
            872, 875, 877, 880, 883,
            885, 888, 891, 894, 896,
            899, 902, 905, 907, 910,
            913, 916, 919, 921, 924,
            927, 930, 933, 936, 939,
            941, 944, 947, 950, 953,
            956, 959, 962, 965, 968,
            971, 974, 977, 980, 983,
            986, 989, 992, 995, 998,
            1001, 1004, 1007, 1010, 1013,
            1017, 1020, 1023, 1026, 1029,
            1032, 1035, 1039, 1042, 1045,
            1048, 1051, 1055, 1058, 1061,
            1064, 1068, 1071, 1074, 1078,
            1081, 1084, 1088, 1091, 1094,
            1098, 1101, 1104, 1108, 1111,
            1115, 1118, 1121, 1125, 1128,
            1132, 1135, 1139, 1142, 1146,
            1149, 1153, 1156, 1160, 1163,
            1167, 1171, 1174, 1178, 1181,
            1185, 1189, 1192, 1196, 1200,
            1203, 1207, 1211, 1214, 1218,
            1222, 1226, 1229, 1233, 1237,
            1241, 1245, 1249, 1252, 1256,
            1260, 1264, 1268, 1272, 1276,
            1280, 1283, 1287, 1291, 1295,
            1299, 1303, 1307, 1311, 1315,
            1319, 1323, 1328, 1332, 1336,
            1340, 1344, 1348, 1352, 1356,
            1360, 1365, 1369, 1373, 1377,
            1382, 1386, 1390, 1394, 1399,
            1403, 1407, 1412, 1416, 1420,
            1425, 1429, 1433, 1438, 1442,
            1447, 1451, 1455, 1460, 1464,
            1469, 1473, 1478, 1483, 1487,
            1492, 1496, 1501, 1505, 1510,
            1515, 1519, 1524, 1529, 1533,
            1538, 1543, 1548, 1552, 1557,
            1562, 1567, 1572, 1576, 1581,
            1586, 1591, 1596, 1601, 1606,
            1611, 1616, 1620, 1625, 1630,
            1635, 1640, 1646, 1651, 1656,
            1661, 1666, 1671, 1676, 1681,
            1686, 1692, 1697, 1702, 1707,
            1712, 1718, 1723, 1728, 1734,
            1739, 1744, 1750, 1755, 1760,
            1766, 1771, 1777, 1782, 1788,
            1793, 1799, 1804, 1810, 1815,
            1821, 1826, 1832, 1838, 1843,
            1849, 1855, 1860, 1866, 1872,
            1878, 1883, 1889, 1895, 1901,
            1907, 1912, 1918, 1924, 1930,
            1936, 1942, 1948, 1954, 1960,
            1966, 1972, 1978, 1984, 1990,
            1996, 2003, 2009, 2015, 2021,
            2027, 2033, 2040, 2046, 2052,
            2059, 2065, 2071, 2078, 2084,
            2090, 2097, 2103, 2110, 2116,
            2123, 2129, 2136, 2142, 2149,
            2156, 2162, 2169, 2175, 2182,
            2189, 2196, 2202, 2209, 2216,
            2223, 2230, 2236, 2243, 2250,
            2257, 2264, 2271, 2278, 2285,
            2292, 2299, 2306, 2313, 2320,
            2327, 2335, 2342, 2349, 2356,
            2363, 2371, 2378, 2385, 2393,
            2400, 2407, 2415, 2422, 2430,
            2437, 2444, 2452, 2460, 2467,
            2475, 2482, 2490, 2498, 2505,
            2513, 2521, 2528, 2536, 2544,
            2552, 2560, 2567, 2575, 2583,
            2591, 2599, 2607, 2615, 2623,
            2631, 2639, 2647, 2656, 2664,
            2672, 2680, 2688, 2697, 2705,
            2713, 2722, 2730, 2738, 2747,
            2755, 2764, 2772, 2781, 2789,
            2798, 2806, 2815, 2824, 2832,
            2841, 2850, 2858, 2867, 2876,
            2885, 2894, 2903, 2912, 2921,
            2930, 2939, 2948, 2957, 2966,
            2975, 2984, 2993, 3002, 3012,
            3021, 3030, 3039, 3049, 3058,
            3067, 3077, 3086, 3096, 3105,
            3115, 3124, 3134, 3144, 3153,
            3163, 3173, 3183, 3192, 3202,
            3212, 3222, 3232, 3242, 3252,
            3262, 3272, 3282, 3292, 3302,
            3312, 3322, 3332, 3343, 3353,
            3363, 3374, 3384, 3394, 3405,
            3415, 3426, 3436, 3447, 3457,
            3468, 3479, 3489, 3500, 3511,
            3522, 3532, 3543, 3554, 3565,
            3576, 3587, 3598, 3609, 3620,
            3631, 3642, 3654, 3665, 3676,
            3687, 3699, 3710, 3722, 3733,
            3744, 3756, 3767, 3779, 3791,
            3802, 3814, 3826, 3837, 3849,
            3861, 3873, 3885, 3897, 3909,
            3921, 3933, 3945, 3957, 3969,
            3981, 3994, 4006, 4018, 4031,
            4043, 4055, 4068, 4080, 4093,
            4105, 4118, 4131, 4143, 4156,
            4169, 4182, 4195, 4207, 4220,
            4233, 4246, 4259, 4272, 4286,
            4299, 4312, 4325, 4339, 4352,
            4365, 4379, 4392, 4406, 4419,
            4433, 4446, 4460, 4474, 4487,
            4501, 4515, 4529, 4543, 4557,
            4571, 4585, 4599, 4613, 4627,
            4641, 4656, 4670, 4684, 4699,
            4713, 4728, 4742, 4757, 4771,
            4786, 4801, 4816, 4830, 4845,
            4860, 4875, 4890, 4905, 4920,
            4935, 4950, 4966, 4981, 4996,
            5011, 5027, 5042, 5058, 5073,
            5089, 5105, 5120, 5136, 5152,
            5168, 5183, 5199, 5215, 5231,
            5247, 5264, 5280, 5296, 5312,
            5329, 5345, 5361, 5378, 5394,
            5411, 5428, 5444, 5461, 5478,
            5495, 5512, 5528, 5545, 5562,
            5580, 5597, 5614, 5631, 5648,
            5666, 5683, 5701, 5718, 5736,
            5753, 5771, 5789, 5807, 5824,
            5842, 5860, 5878, 5896, 5914,
            5933, 5951, 5969, 5987, 6006,
            6024, 6043, 6061, 6080, 6099,
            6117, 6136, 6155, 6174, 6193,
            6212, 6231, 6250, 6269, 6289,
            6308, 6327, 6347, 6366, 6386,
            6406, 6425, 6445, 6465, 6485,
            6505, 6525, 6545, 6565, 6585,
            6605, 6625, 6646, 6666, 6687,
            6707, 6728, 6749, 6769, 6790,
            6811, 6832, 6853, 6874, 6895,
            6916, 6937, 6959, 6980, 7002,
            7023, 7045, 7066, 7088, 7110,
            7132, 7154, 7176, 7198, 7220,
            7242, 7264, 7286, 7309, 7331,
            7354, 7376, 7399, 7422, 7445,
            7468, 7490, 7513, 7537, 7560,
            7583, 7606, 7630, 7653, 7677,
            7700, 7724, 7748, 7771, 7795,
            7819, 7843, 7867, 7892, 7916,
            7940, 7964, 7989, 8014, 8038,
            8063, 8088, 8112, 8137, 8162,
            8187, 8213, 8238, 8263, 8289,
            8314, 8340, 8365, 8391, 8417,
            8443, 8468, 8495, 8521, 8547,
            8573, 8599, 8626, 8652, 8679,
            8706, 8732, 8759, 8786, 8813,
            8840, 8867, 8895, 8922, 8949,
            8977, 9004, 9032, 9060, 9088,
            9116, 9144, 9172, 9200, 9228,
            9256, 9285, 9313, 9342, 9371,
            9400, 9428, 9457, 9486, 9516,
            9545, 9574, 9604, 9633, 9663,
            9692, 9722, 9752, 9782, 9812,
            9842, 9872, 9903, 9933, 9964,
            9994, 10025, 10056, 10087, 10118,
            10149, 10180, 10211, 10243, 10274,
            10306, 10337, 10369, 10401, 10433,
            10465, 10497, 10529, 10562, 10594,
            10627, 10659, 10692, 10725, 10758,
            10791, 10824, 10858, 10891, 10924,
            10958, 10992, 11025, 11059, 11093,
            11127, 11161, 11196, 11230, 11265,
            11299, 11334, 11369, 11404, 11439,
            11474, 11509, 11545, 11580, 11616,
            11651, 11687, 11723, 11759, 11795,
            11831, 11868, 11904, 11941, 11978,
            12014, 12051, 12088, 12125, 12163,
            12200, 12238, 12275, 12313, 12351,
            12389, 12427, 12465, 12503, 12542,
            12580, 12619, 12658, 12696, 12735,
            12775, 12814, 12853, 12893, 12932,
            12972, 13012, 13052, 13092, 13132,
            13173, 13213, 13254, 13294, 13335,
            13376, 13417, 13459, 13500, 13541,
            13583, 13625, 13667, 13709, 13751,
            13793, 13835, 13878, 13920, 13963,
            14006, 14049, 14092, 14136, 14179,
            14223, 14266, 14310, 14354, 14398,
            14443, 14487, 14531, 14576, 14621,
            14666, 14711, 14756, 14801, 14847,
            14892, 14938, 14984, 15030, 15076,
            15123, 15169, 15216, 15263, 15309,
            15356, 15404, 15451, 15498, 15546,
            15594, 15642, 15690, 15738, 15786,
            15835, 15884, 15932, 15981, 16030,
            16080, 16129, 16179, 16228, 16278,
            16328, 16378, 16429, 16479, 16530,
            16581, 16632, 16683, 16734, 16785,
            16837, 16889, 16941, 16993, 17045,
            17097, 17150, 17202, 17255, 17308,
            17361, 17415, 17468, 17522, 17576,
            17630, 17684, 17738, 17793, 17848,
            17902, 17957, 18013, 18068, 18123,
            18179, 18235, 18291, 18347, 18404,
            18460, 18517, 18574, 18631, 18688,
            18746, 18803, 18861, 18919, 18977,
            19035, 19094, 19152, 19211, 19270,
            19330, 19389, 19448, 19508, 19568,
            19628, 19689, 19749, 19810, 19871,
            19932, 19993, 20054, 20116, 20178,
            20240, 20302, 20364, 20427, 20490,
            20553, 20616, 20679, 20743, 20806,
            20870, 20935, 20999, 21063, 21128,
            21193, 21258, 21323, 21389, 21455,
            21521, 21587, 21653, 21720, 21786,
            21853, 21920, 21988, 22055, 22123,
            22191, 22259, 22328, 22396, 22465,
            22534, 22603, 22673, 22742, 22812,
            22882, 22953, 23023, 23094, 23165,
            23236, 23308, 23379, 23451, 23523,
            23595, 23668, 23741, 23814, 23887,
            23960, 24034, 24108, 24182, 24256,
            24330, 24405, 24480, 24555, 24631,
            24707, 24783, 24859, 24935, 25012,
            25089, 25166, 25243, 25320, 25398,
            25476, 25555, 25633, 25712, 25791,
            25870, 25950, 26029, 26109, 26190,
            26270, 26351, 26432, 26513, 26594,
            26676, 26758, 26840, 26923, 27006,
            27088, 27172, 27255, 27339, 27423,
            27507, 27592, 27677, 27762, 27847,
            27932, 28018, 28104, 28191, 28277,
            28364, 28451, 28539, 28626, 28714,
            28803, 28891, 28980, 29069, 29158,
            29248, 29338, 29428, 29518, 29609,
            29700, 29791, 29883, 29975, 30067,
            30159, 30252, 30345, 30438, 30532,
            30625, 30719, 30814, 30909, 31003,
            31099, 31194, 31290, 31386, 31483,
            31579, 31677, 31774, 31871, 31969,
            32068, 32166, 32265, 32364, 32464,
            32563, 32663, 32764, 32864, 32965,
            33067, 33168, 33270, 33372, 33475,
            33578, 33681, 33785, 33888, 33992,
            34097, 34202, 34307, 34412, 34518,
            34624, 34730, 34837, 34944, 35051,
            35159, 35267, 35376, 35484, 35593,
            35703, 35812, 35922, 36033, 36144,
            36255, 36366, 36478, 36590, 36702,
            36815, 36928, 37042, 37155, 37270,
            37384, 37499, 37614, 37730, 37846,
            37962, 38079, 38196, 38313, 38431,
            38549, 38667, 38786, 38905, 39025,
            39145, 39265, 39386, 39507, 39628,
            39750, 39872, 39994, 40117, 40241,
            40364, 40488, 40613, 40737, 40863,
            40988, 41114, 41240, 41367, 41494,
            41622, 41750, 41878, 42007, 42136,
            42265, 42395, 42525, 42656, 42787,
            42919, 43050, 43183, 43315, 43448,
            43582, 43716, 43850, 43985, 44120,
            44256, 44392, 44528, 44665, 44802,
            44940, 45078, 45216, 45355, 45495,
            45634, 45775, 45915, 46056, 46198,
            46340, 46482, 46625, 46768, 46912,
            47056, 47201, 47346, 47491, 47637,
            47784, 47930, 48078, 48225, 48374,
            48522, 48671, 48821, 48971, 49121,
            49272, 49424, 49576, 49728, 49881,
            50034, 50188, 50342, 50497, 50652,
            50807, 50963, 51120, 51277, 51435,
            51593, 51751, 51910, 52070, 52230,
            52390, 52551, 52713, 52875, 53037,
            53200, 53364, 53528, 53692, 53857,
            54022, 54188, 54355, 54522, 54690,
            54858, 55026, 55195, 55365, 55535,
            55706, 55877, 56048, 56221, 56393,
            56567, 56740, 56915, 57090, 57265,
            57441, 57618, 57795, 57972, 58150,
            58329, 58508, 58688, 58868, 59049,
            59231, 59413, 59595, 59778, 59962,
            60146, 60331, 60516, 60702, 60889,
            61076, 61264, 61452, 61641, 61830,
            62020, 62211, 62402, 62594, 62786,
            62979, 63172, 63366, 63561, 63756,
            63952, 64149, 64346, 64544, 64742,
            64941, 65140, 65341, 65541, 65743,
            65945, 66147, 66351, 66555, 66759,
            66964, 67170, 67376, 67583, 67791,
            67999, 68208, 68418, 68628, 68839,
            69050, 69263, 69475, 69689, 69903,
            70118, 70333, 70549, 70766, 70984,
            71202, 71421, 71640, 71860, 72081,
            72302, 72525, 72747, 72971, 73195,
            73420, 73646, 73872, 74099, 74327,
            74555, 74784, 75014, 75244, 75476,
            75707, 75940, 76173, 76407, 76642,
            76878, 77114, 77351, 77589, 77827,
            78066, 78306, 78547, 78788, 79030,
            79273, 79516, 79761, 80006, 80252,
            80498, 80746, 80994, 81243, 81492,
            81743, 81994, 82246, 82498, 82752,
            83006, 83261, 83517, 83774, 84031,
            84289, 84548, 84808, 85069, 85330,
            85592, 85855, 86119, 86384, 86649,
            86915, 87182, 87450, 87719, 87989,
            88259, 88530, 88802, 89075, 89349,
            89623, 89899, 90175, 90452, 90730,
            91009, 91288, 91569, 91850, 92132,
            92415, 92699, 92984, 93270, 93557,
            93844, 94132, 94422, 94712, 95003,
            95295, 95587, 95881, 96176, 96471,
            96768, 97065, 97363, 97662, 97963,
            98264, 98565, 98868, 99172, 99477,
            99783, 100089, 100397, 100705, 101015,
            101325, 101636, 101949, 102262, 102576,
            102891, 103207, 103525, 103843, 104162,
            104482, 104803, 105125, 105448, 105772,
            106097, 106423, 106750, 107078, 107407,
            107737, 108068, 108400, 108733, 109067,
            109402, 109738, 110076, 110414, 110753,
            111093, 111435, 111777, 112121, 112465,
            112811, 113157, 113505, 113854, 114204,
            114555, 114907, 115260, 115614, 115969,
            116325, 116683, 117041, 117401, 117762,
            118124, 118486, 118851, 119216, 119582,
            119949, 120318, 120688, 121059, 121431,
            121804, 122178, 122553, 122930, 123308,
            123687, 124067, 124448, 124830, 125214,
            125598, 125984, 126371, 126760, 127149,
            127540, 127932, 128325, 128719, 129115,
            129511, 129909, 130309, 130709, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071
         ) ),
        max_error = cms.double(5748.616225984908),
        output_scale_factor = cms.double(0.953125),
        unused_lsbs = cms.uint32(2)
    ),
    inv_mass_checks = cms.untracked.bool(False),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    sanity_checks = cms.untracked.bool(False),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    )
)


process.PuppiHT400 = cms.EDFilter("L1GTSingleObjectCond",
    minScalarSumPt = cms.double(325),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    ),
    tag = cms.InputTag("l1tGTProducer","CL2HtSum")
)


process.PuppiHT450 = cms.EDFilter("L1GTSingleObjectCond",
    minScalarSumPt = cms.double(371),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    ),
    tag = cms.InputTag("l1tGTProducer","CL2HtSum")
)


process.PuppiMET200 = cms.EDFilter("L1GTSingleObjectCond",
    minPt = cms.double(93),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    ),
    tag = cms.InputTag("l1tGTProducer","CL2EtSum")
)


process.PuppiMHT140 = cms.EDFilter("L1GTSingleObjectCond",
    minPt = cms.double(133),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    ),
    tag = cms.InputTag("l1tGTProducer","CL2HtSum")
)


process.PuppiTauTkIsoEle4522 = cms.EDFilter("L1GTDoubleObjectCond",
    collection1 = cms.PSet(
        maxEta = cms.double(2.1),
        maxPrimVertDz = cms.double(1),
        minEta = cms.double(-2.1),
        primVertex = cms.uint32(0),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 1.479),
        regionsMaxRelIsolationPt = cms.vdouble(0.13, 0.28),
        regionsMinPt = cms.vdouble(18, 17),
        tag = cms.InputTag("l1tGTProducer","CL2Electrons")
    ),
    collection2 = cms.PSet(
        maxEta = cms.double(2.172),
        minEta = cms.double(-2.172),
        minQualityScore = cms.uint32(225),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 1.5),
        regionsMinPt = cms.vdouble(25, 16),
        tag = cms.InputTag("l1tGTProducer","CL2Taus")
    ),
    cos_phi_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            487, 487, 487, 487, 487,
            487, 487, 487, 487, 487,
            487, 486, 486, 486, 486,
            486, 486, 486, 485, 485,
            485, 485, 485, 485, 484,
            484, 484, 484, 484, 483,
            483, 483, 483, 483, 482,
            482, 482, 482, 481, 481,
            481, 481, 480, 480, 480,
            480, 479, 479, 479, 478,
            478, 478, 478, 477, 477,
            477, 476, 476, 476, 475,
            475, 475, 474, 474, 474,
            473, 473, 472, 472, 472,
            471, 471, 471, 470, 470,
            469, 469, 468, 468, 468,
            467, 467, 466, 466, 465,
            465, 465, 464, 464, 463,
            463, 462, 462, 461, 461,
            460, 460, 459, 459, 458,
            458, 457, 457, 456, 456,
            455, 454, 454, 453, 453,
            452, 452, 451, 451, 450,
            449, 449, 448, 448, 447,
            446, 446, 445, 445, 444,
            443, 443, 442, 441, 441,
            440, 440, 439, 438, 438,
            437, 436, 436, 435, 434,
            434, 433, 432, 431, 431,
            430, 429, 429, 428, 427,
            426, 426, 425, 424, 423,
            423, 422, 421, 420, 420,
            419, 418, 417, 417, 416,
            415, 414, 413, 413, 412,
            411, 410, 409, 409, 408,
            407, 406, 405, 405, 404,
            403, 402, 401, 400, 399,
            399, 398, 397, 396, 395,
            394, 393, 392, 392, 391,
            390, 389, 388, 387, 386,
            385, 384, 383, 382, 381,
            381, 380, 379, 378, 377,
            376, 375, 374, 373, 372,
            371, 370, 369, 368, 367,
            366, 365, 364, 363, 362,
            361, 360, 359, 358, 357,
            356, 355, 354, 353, 352,
            351, 350, 349, 348, 347,
            346, 345, 343, 342, 341,
            340, 339, 338, 337, 336,
            335, 334, 333, 332, 330,
            329, 328, 327, 326, 325,
            324, 323, 322, 320, 319,
            318, 317, 316, 315, 314,
            312, 311, 310, 309, 308,
            307, 306, 304, 303, 302,
            301, 300, 298, 297, 296,
            295, 294, 293, 291, 290,
            289, 288, 286, 285, 284,
            283, 282, 280, 279, 278,
            277, 275, 274, 273, 272,
            270, 269, 268, 267, 265,
            264, 263, 262, 260, 259,
            258, 257, 255, 254, 253,
            252, 250, 249, 248, 246,
            245, 244, 242, 241, 240,
            239, 237, 236, 235, 233,
            232, 231, 229, 228, 227,
            225, 224, 223, 221, 220,
            219, 217, 216, 215, 213,
            212, 211, 209, 208, 207,
            205, 204, 203, 201, 200,
            198, 197, 196, 194, 193,
            192, 190, 189, 187, 186,
            185, 183, 182, 181, 179,
            178, 176, 175, 174, 172,
            171, 169, 168, 167, 165,
            164, 162, 161, 159, 158,
            157, 155, 154, 152, 151,
            150, 148, 147, 145, 144,
            142, 141, 140, 138, 137,
            135, 134, 132, 131, 129,
            128, 127, 125, 124, 122,
            121, 119, 118, 116, 115,
            113, 112, 111, 109, 108,
            106, 105, 103, 102, 100,
            99, 97, 96, 94, 93,
            92, 90, 89, 87, 86,
            84, 83, 81, 80, 78,
            77, 75, 74, 72, 71,
            69, 68, 66, 65, 63,
            62, 60, 59, 58, 56,
            55, 53, 52, 50, 49,
            47, 46, 44, 43, 41,
            40, 38, 37, 35, 34,
            32, 31, 29, 28, 26,
            25, 23, 22, 20, 19,
            17, 16, 14, 13, 11,
            10, 8, 7, 5, 4,
            2, 1, -1, -2, -4,
            -5, -7, -8, -10, -11,
            -13, -14, -16, -17, -19,
            -20, -22, -23, -25, -26,
            -28, -29, -31, -32, -34,
            -35, -37, -38, -40, -41,
            -43, -44, -46, -47, -49,
            -50, -52, -53, -55, -56,
            -58, -59, -60, -62, -63,
            -65, -66, -68, -69, -71,
            -72, -74, -75, -77, -78,
            -80, -81, -83, -84, -86,
            -87, -89, -90, -92, -93,
            -94, -96, -97, -99, -100,
            -102, -103, -105, -106, -108,
            -109, -111, -112, -113, -115,
            -116, -118, -119, -121, -122,
            -124, -125, -127, -128, -129,
            -131, -132, -134, -135, -137,
            -138, -140, -141, -142, -144,
            -145, -147, -148, -150, -151,
            -152, -154, -155, -157, -158,
            -159, -161, -162, -164, -165,
            -167, -168, -169, -171, -172,
            -174, -175, -176, -178, -179,
            -181, -182, -183, -185, -186,
            -187, -189, -190, -192, -193,
            -194, -196, -197, -198, -200,
            -201, -203, -204, -205, -207,
            -208, -209, -211, -212, -213,
            -215, -216, -217, -219, -220,
            -221, -223, -224, -225, -227,
            -228, -229, -231, -232, -233,
            -235, -236, -237, -239, -240,
            -241, -242, -244, -245, -246,
            -248, -249, -250, -252, -253,
            -254, -255, -257, -258, -259,
            -260, -262, -263, -264, -265,
            -267, -268, -269, -270, -272,
            -273, -274, -275, -277, -278,
            -279, -280, -282, -283, -284,
            -285, -286, -288, -289, -290,
            -291, -293, -294, -295, -296,
            -297, -298, -300, -301, -302,
            -303, -304, -306, -307, -308,
            -309, -310, -311, -312, -314,
            -315, -316, -317, -318, -319,
            -320, -322, -323, -324, -325,
            -326, -327, -328, -329, -330,
            -332, -333, -334, -335, -336,
            -337, -338, -339, -340, -341,
            -342, -343, -345, -346, -347,
            -348, -349, -350, -351, -352,
            -353, -354, -355, -356, -357,
            -358, -359, -360, -361, -362,
            -363, -364, -365, -366, -367,
            -368, -369, -370, -371, -372,
            -373, -374, -375, -376, -377,
            -378, -379, -380, -381, -381,
            -382, -383, -384, -385, -386,
            -387, -388, -389, -390, -391,
            -392, -392, -393, -394, -395,
            -396, -397, -398, -399, -399,
            -400, -401, -402, -403, -404,
            -405, -405, -406, -407, -408,
            -409, -409, -410, -411, -412,
            -413, -413, -414, -415, -416,
            -417, -417, -418, -419, -420,
            -420, -421, -422, -423, -423,
            -424, -425, -426, -426, -427,
            -428, -429, -429, -430, -431,
            -431, -432, -433, -434, -434,
            -435, -436, -436, -437, -438,
            -438, -439, -440, -440, -441,
            -441, -442, -443, -443, -444,
            -445, -445, -446, -446, -447,
            -448, -448, -449, -449, -450,
            -451, -451, -452, -452, -453,
            -453, -454, -454, -455, -456,
            -456, -457, -457, -458, -458,
            -459, -459, -460, -460, -461,
            -461, -462, -462, -463, -463,
            -464, -464, -465, -465, -465,
            -466, -466, -467, -467, -468,
            -468, -468, -469, -469, -470,
            -470, -471, -471, -471, -472,
            -472, -472, -473, -473, -474,
            -474, -474, -475, -475, -475,
            -476, -476, -476, -477, -477,
            -477, -478, -478, -478, -478,
            -479, -479, -479, -480, -480,
            -480, -480, -481, -481, -481,
            -481, -482, -482, -482, -482,
            -483, -483, -483, -483, -483,
            -484, -484, -484, -484, -484,
            -485, -485, -485, -485, -485,
            -485, -486, -486, -486, -486,
            -486, -486, -486, -487, -487,
            -487, -487, -487, -487, -487,
            -487, -487, -487, -487, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488
         ) ),
        max_error = cms.double(0.0025338281044886835),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            489, 489, 489, 489, 489,
            489, 489, 489, 489, 489,
            489, 490, 490, 490, 490,
            490, 490, 490, 491, 491,
            491, 491, 491, 491, 492,
            492, 492, 492, 492, 493,
            493, 493, 493, 493, 494,
            494, 494, 494, 495, 495,
            495, 495, 496, 496, 496,
            496, 497, 497, 497, 498,
            498, 498, 499, 499, 499,
            499, 500, 500, 500, 501,
            501, 502, 502, 502, 503,
            503, 503, 504, 504, 504,
            505, 505, 506, 506, 507,
            507, 507, 508, 508, 509,
            509, 510, 510, 510, 511,
            511, 512, 512, 513, 513,
            514, 514, 515, 515, 516,
            516, 517, 517, 518, 518,
            519, 520, 520, 521, 521,
            522, 522, 523, 523, 524,
            525, 525, 526, 526, 527,
            528, 528, 529, 530, 530,
            531, 531, 532, 533, 533,
            534, 535, 535, 536, 537,
            537, 538, 539, 540, 540,
            541, 542, 542, 543, 544,
            545, 545, 546, 547, 548,
            548, 549, 550, 551, 551,
            552, 553, 554, 555, 555,
            556, 557, 558, 559, 560,
            560, 561, 562, 563, 564,
            565, 566, 567, 567, 568,
            569, 570, 571, 572, 573,
            574, 575, 576, 577, 577,
            578, 579, 580, 581, 582,
            583, 584, 585, 586, 587,
            588, 589, 590, 591, 592,
            593, 594, 595, 596, 598,
            599, 600, 601, 602, 603,
            604, 605, 606, 607, 608,
            610, 611, 612, 613, 614,
            615, 616, 618, 619, 620,
            621, 622, 623, 625, 626,
            627, 628, 629, 631, 632,
            633, 634, 636, 637, 638,
            639, 641, 642, 643, 644,
            646, 647, 648, 650, 651,
            652, 654, 655, 656, 658,
            659, 660, 662, 663, 665,
            666, 667, 669, 670, 672,
            673, 674, 676, 677, 679,
            680, 682, 683, 685, 686,
            687, 689, 690, 692, 693,
            695, 697, 698, 700, 701,
            703, 704, 706, 707, 709,
            710, 712, 714, 715, 717,
            719, 720, 722, 723, 725,
            727, 728, 730, 732, 733,
            735, 737, 738, 740, 742,
            744, 745, 747, 749, 750,
            752, 754, 756, 758, 759,
            761, 763, 765, 767, 768,
            770, 772, 774, 776, 778,
            779, 781, 783, 785, 787,
            789, 791, 793, 795, 796,
            798, 800, 802, 804, 806,
            808, 810, 812, 814, 816,
            818, 820, 822, 824, 826,
            828, 830, 832, 835, 837,
            839, 841, 843, 845, 847,
            849, 851, 854, 856, 858,
            860, 862, 864, 867, 869,
            871, 873, 875, 878, 880,
            882, 884, 887, 889, 891,
            894, 896, 898, 900, 903,
            905, 907, 910, 912, 915,
            917, 919, 922, 924, 927,
            929, 931, 934, 936, 939,
            941, 944, 946, 949, 951,
            954, 956, 959, 961, 964,
            966, 969, 971, 974, 977,
            979, 982, 984, 987, 990,
            992, 995, 998, 1000, 1003,
            1006, 1008, 1011, 1014, 1017,
            1019, 1022, 1025, 1028, 1030,
            1033, 1036, 1039, 1042, 1044,
            1047, 1050, 1053, 1056, 1059,
            1062, 1065, 1067, 1070, 1073,
            1076, 1079, 1082, 1085, 1088,
            1091, 1094, 1097, 1100, 1103,
            1106, 1109, 1112, 1115, 1118,
            1122, 1125, 1128, 1131, 1134,
            1137, 1140, 1143, 1147, 1150,
            1153, 1156, 1159, 1163, 1166,
            1169, 1172, 1176, 1179, 1182,
            1186, 1189, 1192, 1196, 1199,
            1202, 1206, 1209, 1212, 1216,
            1219, 1223, 1226, 1230, 1233,
            1237, 1240, 1244, 1247, 1251,
            1254, 1258, 1261, 1265, 1268,
            1272, 1276, 1279, 1283, 1287,
            1290, 1294, 1298, 1301, 1305,
            1309, 1312, 1316, 1320, 1324,
            1327, 1331, 1335, 1339, 1343,
            1347, 1350, 1354, 1358, 1362,
            1366, 1370, 1374, 1378, 1382,
            1386, 1390, 1394, 1398, 1402,
            1406, 1410, 1414, 1418, 1422,
            1426, 1430, 1434, 1439, 1443,
            1447, 1451, 1455, 1459, 1464,
            1468, 1472, 1476, 1481, 1485,
            1489, 1494, 1498, 1502, 1507,
            1511, 1516, 1520, 1524, 1529,
            1533, 1538, 1542, 1547, 1551,
            1556, 1560, 1565, 1569, 1574,
            1579, 1583, 1588, 1592, 1597,
            1602, 1606, 1611, 1616, 1621,
            1625, 1630, 1635, 1640, 1645,
            1649, 1654, 1659, 1664, 1669,
            1674, 1679, 1684, 1689, 1693,
            1698, 1703, 1708, 1714, 1719,
            1724, 1729, 1734, 1739, 1744,
            1749, 1754, 1760, 1765, 1770,
            1775, 1780, 1786, 1791, 1796,
            1802, 1807, 1812, 1818, 1823,
            1828, 1834, 1839, 1845, 1850,
            1856, 1861, 1867, 1872, 1878,
            1883, 1889, 1894, 1900, 1906,
            1911, 1917, 1923, 1929, 1934,
            1940, 1946, 1952, 1957, 1963,
            1969, 1975, 1981, 1987, 1993,
            1999, 2004, 2010, 2016, 2022,
            2028, 2035, 2041, 2047, 2053,
            2059, 2065, 2071, 2077, 2084,
            2090, 2096, 2102, 2109, 2115,
            2121, 2128, 2134, 2140, 2147,
            2153, 2160, 2166, 2173, 2179,
            2186, 2192, 2199, 2205, 2212,
            2219, 2225, 2232, 2239, 2245,
            2252, 2259, 2266, 2272, 2279,
            2286, 2293, 2300, 2307, 2314,
            2321, 2328, 2335, 2342, 2349,
            2356, 2363, 2370, 2377, 2384,
            2391, 2398, 2406, 2413, 2420,
            2427, 2435, 2442, 2449, 2457,
            2464, 2472, 2479, 2487, 2494,
            2502, 2509, 2517, 2524, 2532,
            2539, 2547, 2555, 2563, 2570,
            2578, 2586, 2594, 2601, 2609,
            2617, 2625, 2633, 2641, 2649,
            2657, 2665, 2673, 2681, 2689,
            2697, 2705, 2714, 2722, 2730,
            2738, 2747, 2755, 2763, 2772,
            2780, 2788, 2797, 2805, 2814,
            2822, 2831, 2839, 2848, 2857,
            2865, 2874, 2883, 2891, 2900,
            2909, 2918, 2927, 2935, 2944,
            2953, 2962, 2971, 2980, 2989,
            2998, 3007, 3016, 3026, 3035,
            3044, 3053, 3062, 3072, 3081,
            3090, 3100, 3109, 3119, 3128,
            3138, 3147, 3157, 3166, 3176,
            3186, 3195, 3205, 3215, 3224,
            3234, 3244, 3254, 3264, 3274,
            3284, 3294, 3304, 3314, 3324,
            3334, 3344, 3354, 3364, 3375,
            3385, 3395, 3405, 3416, 3426,
            3437, 3447, 3458, 3468, 3479,
            3489, 3500, 3510, 3521, 3532,
            3543, 3553, 3564, 3575, 3586,
            3597, 3608, 3619, 3630, 3641,
            3652, 3663, 3674, 3685, 3697,
            3708, 3719, 3730, 3742, 3753,
            3765, 3776, 3788, 3799, 3811,
            3822, 3834, 3846, 3857, 3869,
            3881, 3893, 3905, 3917, 3929,
            3941, 3953, 3965, 3977, 3989,
            4001, 4013, 4025, 4038, 4050,
            4062, 4075, 4087, 4100, 4112,
            4125, 4137, 4150, 4163, 4175,
            4188, 4201, 4214, 4226, 4239,
            4252, 4265, 4278, 4291, 4304,
            4318, 4331, 4344, 4357, 4371,
            4384, 4397, 4411, 4424, 4438,
            4451, 4465, 4479, 4492, 4506,
            4520, 4533, 4547, 4561, 4575,
            4589, 4603, 4617, 4631, 4645,
            4660, 4674, 4688, 4703, 4717,
            4731, 4746, 4760, 4775, 4789,
            4804, 4819, 4833, 4848, 4863,
            4878, 4893, 4908, 4923, 4938,
            4953, 4968, 4983, 4999, 5014,
            5029, 5045, 5060, 5075, 5091,
            5107, 5122, 5138, 5154, 5169,
            5185, 5201, 5217, 5233, 5249,
            5265, 5281, 5297, 5313, 5330,
            5346, 5362, 5379, 5395, 5412,
            5428, 5445, 5462, 5478, 5495,
            5512, 5529, 5546, 5563, 5580,
            5597, 5614, 5631, 5648, 5666,
            5683, 5700, 5718, 5735, 5753,
            5770, 5788, 5806, 5824, 5841,
            5859, 5877, 5895, 5913, 5931,
            5950, 5968, 5986, 6004, 6023,
            6041, 6060, 6078, 6097, 6116,
            6134, 6153, 6172, 6191, 6210,
            6229, 6248, 6267, 6286, 6305,
            6325, 6344, 6364, 6383, 6403,
            6422, 6442, 6462, 6481, 6501,
            6521, 6541, 6561, 6581, 6602,
            6622, 6642, 6662, 6683, 6703,
            6724, 6744, 6765, 6786, 6807,
            6828, 6848, 6869, 6891, 6912,
            6933, 6954, 6975, 6997, 7018,
            7040, 7061, 7083, 7105, 7126,
            7148, 7170, 7192, 7214, 7236,
            7259, 7281, 7303, 7325, 7348,
            7370, 7393, 7416, 7438, 7461,
            7484, 7507, 7530, 7553, 7576,
            7600, 7623, 7646, 7670, 7693,
            7717, 7741, 7764, 7788, 7812,
            7836, 7860, 7884, 7908, 7932,
            7957, 7981, 8006, 8030, 8055,
            8080, 8104, 8129, 8154, 8179,
            8204, 8229, 8255, 8280, 8305,
            8331, 8356, 8382, 8408, 8434,
            8459, 8485, 8511, 8537, 8564,
            8590, 8616, 8643, 8669, 8696,
            8722, 8749, 8776, 8803, 8830,
            8857, 8884, 8912, 8939, 8966,
            8994, 9021, 9049, 9077, 9105,
            9133, 9161, 9189, 9217, 9245,
            9274, 9302, 9331, 9359, 9388,
            9417, 9446, 9475, 9504, 9533,
            9562, 9591, 9621, 9650, 9680,
            9710, 9740, 9769, 9799, 9830,
            9860, 9890, 9920, 9951, 9981,
            10012, 10043, 10073, 10104, 10135,
            10166, 10198, 10229, 10260, 10292,
            10323, 10355, 10387, 10419, 10451,
            10483, 10515, 10547, 10580, 10612,
            10645, 10677, 10710, 10743, 10776,
            10809, 10842, 10876, 10909, 10942,
            10976, 11010, 11044, 11077, 11111,
            11146, 11180, 11214, 11248, 11283,
            11318, 11352, 11387, 11422, 11457,
            11492, 11528, 11563, 11599, 11634,
            11670, 11706, 11742, 11778, 11814,
            11850, 11887, 11923, 11960, 11996,
            12033, 12070, 12107, 12144, 12182,
            12219, 12257, 12294, 12332, 12370,
            12408, 12446, 12484, 12522, 12561,
            12599, 12638, 12677, 12716, 12755,
            12794, 12833, 12873, 12912, 12952,
            12992, 13032, 13072, 13112, 13152,
            13192, 13233, 13274, 13314, 13355,
            13396, 13437, 13479, 13520, 13561,
            13603, 13645, 13687, 13729, 13771,
            13813, 13856, 13898, 13941, 13984,
            14027, 14070, 14113, 14156, 14200,
            14243, 14287, 14331, 14375, 14419,
            14463, 14508, 14552, 14597, 14642,
            14687, 14732, 14777, 14823, 14868,
            14914, 14960, 15005, 15052, 15098,
            15144, 15191, 15237, 15284, 15331,
            15378, 15425, 15473, 15520, 15568,
            15616, 15664, 15712, 15760, 15808,
            15857, 15906, 15955, 16004, 16053,
            16102, 16151, 16201, 16251, 16301,
            16351, 16401, 16451, 16502, 16553,
            16603, 16654, 16706, 16757, 16808,
            16860, 16912, 16964, 17016, 17068,
            17121, 17173, 17226, 17279, 17332,
            17385, 17438, 17492, 17546, 17600,
            17654, 17708, 17762, 17817, 17872,
            17926, 17982, 18037, 18092, 18148,
            18203, 18259, 18315, 18372, 18428,
            18485, 18542, 18598, 18656, 18713,
            18770, 18828, 18886, 18944, 19002,
            19060, 19119, 19178, 19237, 19296,
            19355, 19414, 19474, 19534, 19594,
            19654, 19714, 19775, 19836, 19897,
            19958, 20019, 20081, 20142, 20204,
            20266, 20328, 20391, 20454, 20516,
            20579, 20643, 20706, 20770, 20833,
            20897, 20962, 21026, 21091, 21155,
            21220, 21286, 21351, 21417, 21482,
            21548, 21615, 21681, 21748, 21814,
            21881, 21949, 22016, 22084, 22151,
            22220, 22288, 22356, 22425, 22494,
            22563, 22632, 22702, 22771, 22841,
            22912, 22982, 23053, 23123, 23194,
            23266, 23337, 23409, 23481, 23553,
            23625, 23698, 23771, 23844, 23917,
            23990, 24064, 24138, 24212, 24287,
            24361, 24436, 24511, 24586, 24662,
            24738, 24814, 24890, 24966, 25043,
            25120, 25197, 25275, 25352, 25430,
            25508, 25587, 25665, 25744, 25823,
            25902, 25982, 26062, 26142, 26222,
            26303, 26384, 26465, 26546, 26627,
            26709, 26791, 26874, 26956, 27039,
            27122, 27205, 27289, 27373, 27457,
            27541, 27626, 27711, 27796, 27881,
            27967, 28053, 28139, 28226, 28312,
            28399, 28486, 28574, 28662, 28750,
            28838, 28927, 29016, 29105, 29194,
            29284, 29374, 29464, 29555, 29645,
            29736, 29828, 29919, 30011, 30104,
            30196, 30289, 30382, 30475, 30569,
            30663, 30757, 30851, 30946, 31041,
            31137, 31232, 31328, 31425, 31521,
            31618, 31715, 31813, 31910, 32008,
            32107, 32205, 32304, 32403, 32503,
            32603, 32703, 32804, 32904, 33005,
            33107, 33209, 33311, 33413, 33516,
            33619, 33722, 33825, 33929, 34034,
            34138, 34243, 34348, 34454, 34560,
            34666, 34772, 34879, 34986, 35094,
            35202, 35310, 35418, 35527, 35636,
            35746, 35856, 35966, 36076, 36187,
            36298, 36410, 36522, 36634, 36746,
            36859, 36973, 37086, 37200, 37314,
            37429, 37544, 37659, 37775, 37891,
            38008, 38124, 38241, 38359, 38477,
            38595, 38714, 38833, 38952, 39072,
            39192, 39312, 39433, 39554, 39675,
            39797, 39920, 40042, 40165, 40289,
            40413, 40537, 40661, 40786, 40911,
            41037, 41163, 41290, 41417, 41544,
            41671, 41800, 41928, 42057, 42186,
            42316, 42446, 42576, 42707, 42838,
            42970, 43102, 43234, 43367, 43500,
            43634, 43768, 43902, 44037, 44173,
            44308, 44444, 44581, 44718, 44855,
            44993, 45131, 45270, 45409, 45549,
            45689, 45829, 45970, 46111, 46253,
            46395, 46537, 46680, 46824, 46968,
            47112, 47257, 47402, 47548, 47694,
            47840, 47987, 48135, 48283, 48431,
            48580, 48729, 48879, 49029, 49180,
            49331, 49482, 49634, 49787, 49940,
            50093, 50247, 50401, 50556, 50712,
            50867, 51024, 51181, 51338, 51495,
            51654, 51812, 51972, 52131, 52291,
            52452, 52613, 52775, 52937, 53100,
            53263, 53427, 53591, 53755, 53921,
            54086, 54252, 54419, 54586, 54754,
            54922, 55091, 55260, 55430, 55600,
            55771, 55943, 56114, 56287, 56460,
            56633, 56807, 56982, 57157, 57333,
            57509, 57685, 57863, 58040, 58219,
            58398, 58577, 58757, 58938, 59119,
            59300, 59483, 59665, 59849, 60033,
            60217, 60402, 60588, 60774, 60960,
            61148, 61336, 61524, 61713, 61903,
            62093, 62284, 62475, 62667, 62860,
            63053, 63247, 63441, 63636, 63831,
            64027, 64224, 64422, 64619, 64818,
            65017, 65217, 65417, 65618, 65820,
            66022, 66225, 66429, 66633, 66837,
            67043, 67249, 67455, 67663, 67870,
            68079, 68288, 68498, 68708, 68920,
            69131, 69344, 69557, 69771, 69985,
            70200, 70416, 70632, 70849, 71067,
            71285, 71504, 71724, 71944, 72165,
            72387, 72609, 72833, 73056, 73281,
            73506, 73732, 73958, 74186, 74414,
            74642, 74872, 75102, 75332, 75564,
            75796, 76029, 76262, 76497, 76732,
            76968, 77204, 77441, 77679, 77918,
            78157, 78398, 78638, 78880, 79122,
            79366, 79609, 79854, 80099, 80345,
            80592, 80840, 81088, 81338, 81587,
            81838, 82090, 82342, 82595, 82849,
            83103, 83358, 83615, 83872, 84129,
            84388, 84647, 84907, 85168, 85430,
            85692, 85955, 86220, 86485, 86750,
            87017, 87284, 87552, 87821, 88091,
            88362, 88633, 88906, 89179, 89453,
            89728, 90003, 90280, 90557, 90836,
            91115, 91395, 91676, 91957, 92240,
            92523, 92807, 93093, 93379, 93666,
            93953, 94242, 94532, 94822, 95113,
            95406, 95699, 95993, 96288, 96584,
            96881, 97178, 97477, 97776, 98077,
            98378, 98680, 98984, 99288, 99593,
            99899, 100206, 100514, 100822, 101132,
            101443, 101755, 102067, 102381, 102696,
            103011, 103328, 103645, 103964, 104283,
            104603, 104925, 105247, 105571, 105895,
            106220, 106547, 106874, 107203, 107532,
            107862, 108194, 108526, 108860, 109194,
            109530, 109866, 110204, 110542, 110882,
            111223, 111565, 111907, 112251, 112596,
            112942, 113289, 113637, 113986, 114337,
            114688, 115040, 115394, 115748, 116104,
            116461, 116819, 117178, 117538, 117899,
            118261, 118624, 118989, 119354, 119721,
            120089, 120458, 120828, 121199, 121572,
            121945, 122320, 122696, 123073, 123451,
            123830, 124211, 124593, 124975, 125359,
            125745, 126131, 126518, 126907, 127297,
            127688, 128081, 128474, 128869, 129265,
            129662, 130061, 130260
         ) ),
        max_error = cms.double(0.6152529479288091),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut2 = cms.PSet(
        lut = cms.vint32( (
            256, 256, 257, 258, 259,
            260, 260, 261, 262, 263,
            264, 264, 265, 266, 267,
            268, 268, 269, 270, 271,
            272, 273, 273, 274, 275,
            276, 277, 278, 279, 279,
            280, 281, 282, 283, 284,
            285, 285, 286, 287, 288,
            289, 290, 291, 292, 293,
            293, 294, 295, 296, 297,
            298, 299, 300, 301, 302,
            303, 303, 304, 305, 306,
            307, 308, 309, 310, 311,
            312, 313, 314, 315, 316,
            317, 318, 319, 320, 321,
            322, 323, 324, 325, 326,
            327, 328, 329, 330, 331,
            332, 333, 334, 335, 336,
            337, 338, 339, 340, 341,
            342, 343, 344, 345, 346,
            347, 348, 349, 351, 352,
            353, 354, 355, 356, 357,
            358, 359, 360, 361, 363,
            364, 365, 366, 367, 368,
            369, 370, 372, 373, 374,
            375, 376, 377, 379, 380,
            381, 382, 383, 384, 386,
            387, 388, 389, 390, 392,
            393, 394, 395, 396, 398,
            399, 400, 401, 402, 404,
            405, 406, 407, 409, 410,
            411, 412, 414, 415, 416,
            418, 419, 420, 421, 423,
            424, 425, 427, 428, 429,
            431, 432, 433, 435, 436,
            437, 439, 440, 441, 443,
            444, 445, 447, 448, 449,
            451, 452, 454, 455, 456,
            458, 459, 461, 462, 463,
            465, 466, 468, 469, 471,
            472, 474, 475, 476, 478,
            479, 481, 482, 484, 485,
            487, 488, 490, 491, 493,
            494, 496, 497, 499, 500,
            502, 503, 505, 507, 508,
            510, 511, 513, 514, 516,
            518, 519, 521, 522, 524,
            526, 527, 529, 530, 532,
            534, 535, 537, 539, 540,
            542, 544, 545, 547, 549,
            550, 552, 554, 555, 557,
            559, 561, 562, 564, 566,
            567, 569, 571, 573, 575,
            576, 578, 580, 582, 583,
            585, 587, 589, 591, 592,
            594, 596, 598, 600, 602,
            603, 605, 607, 609, 611,
            613, 615, 617, 618, 620,
            622, 624, 626, 628, 630,
            632, 634, 636, 638, 640,
            642, 644, 646, 648, 650,
            652, 654, 656, 658, 660,
            662, 664, 666, 668, 670,
            672, 674, 676, 678, 680,
            682, 684, 686, 688, 691,
            693, 695, 697, 699, 701,
            703, 706, 708, 710, 712,
            714, 717, 719, 721, 723,
            725, 728, 730, 732, 734,
            737, 739, 741, 743, 746,
            748, 750, 753, 755, 757,
            760, 762, 764, 767, 769,
            771, 774, 776, 778, 781,
            783, 786, 788, 790, 793,
            795, 798, 800, 803, 805,
            808, 810, 813, 815, 818,
            820, 823, 825, 828, 830,
            833, 835, 838, 840, 843,
            846, 848, 851, 853, 856,
            859, 861, 864, 867, 869,
            872, 875, 877, 880, 883,
            885, 888, 891, 894, 896,
            899, 902, 905, 907, 910,
            913, 916, 919, 921, 924,
            927, 930, 933, 936, 939,
            941, 944, 947, 950, 953,
            956, 959, 962, 965, 968,
            971, 974, 977, 980, 983,
            986, 989, 992, 995, 998,
            1001, 1004, 1007, 1010, 1013,
            1017, 1020, 1023, 1026, 1029,
            1032, 1035, 1039, 1042, 1045,
            1048, 1051, 1055, 1058, 1061,
            1064, 1068, 1071, 1074, 1078,
            1081, 1084, 1088, 1091, 1094,
            1098, 1101, 1104, 1108, 1111,
            1115, 1118, 1121, 1125, 1128,
            1132, 1135, 1139, 1142, 1146,
            1149, 1153, 1156, 1160, 1163,
            1167, 1171, 1174, 1178, 1181,
            1185, 1189, 1192, 1196, 1200,
            1203, 1207, 1211, 1214, 1218,
            1222, 1226, 1229, 1233, 1237,
            1241, 1245, 1249, 1252, 1256,
            1260, 1264, 1268, 1272, 1276,
            1280, 1283, 1287, 1291, 1295,
            1299, 1303, 1307, 1311, 1315,
            1319, 1323, 1328, 1332, 1336,
            1340, 1344, 1348, 1352, 1356,
            1360, 1365, 1369, 1373, 1377,
            1382, 1386, 1390, 1394, 1399,
            1403, 1407, 1412, 1416, 1420,
            1425, 1429, 1433, 1438, 1442,
            1447, 1451, 1455, 1460, 1464,
            1469, 1473, 1478, 1483, 1487,
            1492, 1496, 1501, 1505, 1510,
            1515, 1519, 1524, 1529, 1533,
            1538, 1543, 1548, 1552, 1557,
            1562, 1567, 1572, 1576, 1581,
            1586, 1591, 1596, 1601, 1606,
            1611, 1616, 1620, 1625, 1630,
            1635, 1640, 1646, 1651, 1656,
            1661, 1666, 1671, 1676, 1681,
            1686, 1692, 1697, 1702, 1707,
            1712, 1718, 1723, 1728, 1734,
            1739, 1744, 1750, 1755, 1760,
            1766, 1771, 1777, 1782, 1788,
            1793, 1799, 1804, 1810, 1815,
            1821, 1826, 1832, 1838, 1843,
            1849, 1855, 1860, 1866, 1872,
            1878, 1883, 1889, 1895, 1901,
            1907, 1912, 1918, 1924, 1930,
            1936, 1942, 1948, 1954, 1960,
            1966, 1972, 1978, 1984, 1990,
            1996, 2003, 2009, 2015, 2021,
            2027, 2033, 2040, 2046, 2052,
            2059, 2065, 2071, 2078, 2084,
            2090, 2097, 2103, 2110, 2116,
            2123, 2129, 2136, 2142, 2149,
            2156, 2162, 2169, 2175, 2182,
            2189, 2196, 2202, 2209, 2216,
            2223, 2230, 2236, 2243, 2250,
            2257, 2264, 2271, 2278, 2285,
            2292, 2299, 2306, 2313, 2320,
            2327, 2335, 2342, 2349, 2356,
            2363, 2371, 2378, 2385, 2393,
            2400, 2407, 2415, 2422, 2430,
            2437, 2444, 2452, 2460, 2467,
            2475, 2482, 2490, 2498, 2505,
            2513, 2521, 2528, 2536, 2544,
            2552, 2560, 2567, 2575, 2583,
            2591, 2599, 2607, 2615, 2623,
            2631, 2639, 2647, 2656, 2664,
            2672, 2680, 2688, 2697, 2705,
            2713, 2722, 2730, 2738, 2747,
            2755, 2764, 2772, 2781, 2789,
            2798, 2806, 2815, 2824, 2832,
            2841, 2850, 2858, 2867, 2876,
            2885, 2894, 2903, 2912, 2921,
            2930, 2939, 2948, 2957, 2966,
            2975, 2984, 2993, 3002, 3012,
            3021, 3030, 3039, 3049, 3058,
            3067, 3077, 3086, 3096, 3105,
            3115, 3124, 3134, 3144, 3153,
            3163, 3173, 3183, 3192, 3202,
            3212, 3222, 3232, 3242, 3252,
            3262, 3272, 3282, 3292, 3302,
            3312, 3322, 3332, 3343, 3353,
            3363, 3374, 3384, 3394, 3405,
            3415, 3426, 3436, 3447, 3457,
            3468, 3479, 3489, 3500, 3511,
            3522, 3532, 3543, 3554, 3565,
            3576, 3587, 3598, 3609, 3620,
            3631, 3642, 3654, 3665, 3676,
            3687, 3699, 3710, 3722, 3733,
            3744, 3756, 3767, 3779, 3791,
            3802, 3814, 3826, 3837, 3849,
            3861, 3873, 3885, 3897, 3909,
            3921, 3933, 3945, 3957, 3969,
            3981, 3994, 4006, 4018, 4031,
            4043, 4055, 4068, 4080, 4093,
            4105, 4118, 4131, 4143, 4156,
            4169, 4182, 4195, 4207, 4220,
            4233, 4246, 4259, 4272, 4286,
            4299, 4312, 4325, 4339, 4352,
            4365, 4379, 4392, 4406, 4419,
            4433, 4446, 4460, 4474, 4487,
            4501, 4515, 4529, 4543, 4557,
            4571, 4585, 4599, 4613, 4627,
            4641, 4656, 4670, 4684, 4699,
            4713, 4728, 4742, 4757, 4771,
            4786, 4801, 4816, 4830, 4845,
            4860, 4875, 4890, 4905, 4920,
            4935, 4950, 4966, 4981, 4996,
            5011, 5027, 5042, 5058, 5073,
            5089, 5105, 5120, 5136, 5152,
            5168, 5183, 5199, 5215, 5231,
            5247, 5264, 5280, 5296, 5312,
            5329, 5345, 5361, 5378, 5394,
            5411, 5428, 5444, 5461, 5478,
            5495, 5512, 5528, 5545, 5562,
            5580, 5597, 5614, 5631, 5648,
            5666, 5683, 5701, 5718, 5736,
            5753, 5771, 5789, 5807, 5824,
            5842, 5860, 5878, 5896, 5914,
            5933, 5951, 5969, 5987, 6006,
            6024, 6043, 6061, 6080, 6099,
            6117, 6136, 6155, 6174, 6193,
            6212, 6231, 6250, 6269, 6289,
            6308, 6327, 6347, 6366, 6386,
            6406, 6425, 6445, 6465, 6485,
            6505, 6525, 6545, 6565, 6585,
            6605, 6625, 6646, 6666, 6687,
            6707, 6728, 6749, 6769, 6790,
            6811, 6832, 6853, 6874, 6895,
            6916, 6937, 6959, 6980, 7002,
            7023, 7045, 7066, 7088, 7110,
            7132, 7154, 7176, 7198, 7220,
            7242, 7264, 7286, 7309, 7331,
            7354, 7376, 7399, 7422, 7445,
            7468, 7490, 7513, 7537, 7560,
            7583, 7606, 7630, 7653, 7677,
            7700, 7724, 7748, 7771, 7795,
            7819, 7843, 7867, 7892, 7916,
            7940, 7964, 7989, 8014, 8038,
            8063, 8088, 8112, 8137, 8162,
            8187, 8213, 8238, 8263, 8289,
            8314, 8340, 8365, 8391, 8417,
            8443, 8468, 8495, 8521, 8547,
            8573, 8599, 8626, 8652, 8679,
            8706, 8732, 8759, 8786, 8813,
            8840, 8867, 8895, 8922, 8949,
            8977, 9004, 9032, 9060, 9088,
            9116, 9144, 9172, 9200, 9228,
            9256, 9285, 9313, 9342, 9371,
            9400, 9428, 9457, 9486, 9516,
            9545, 9574, 9604, 9633, 9663,
            9692, 9722, 9752, 9782, 9812,
            9842, 9872, 9903, 9933, 9964,
            9994, 10025, 10056, 10087, 10118,
            10149, 10180, 10211, 10243, 10274,
            10306, 10337, 10369, 10401, 10433,
            10465, 10497, 10529, 10562, 10594,
            10627, 10659, 10692, 10725, 10758,
            10791, 10824, 10858, 10891, 10924,
            10958, 10992, 11025, 11059, 11093,
            11127, 11161, 11196, 11230, 11265,
            11299, 11334, 11369, 11404, 11439,
            11474, 11509, 11545, 11580, 11616,
            11651, 11687, 11723, 11759, 11795,
            11831, 11868, 11904, 11941, 11978,
            12014, 12051, 12088, 12125, 12163,
            12200, 12238, 12275, 12313, 12351,
            12389, 12427, 12465, 12503, 12542,
            12580, 12619, 12658, 12696, 12735,
            12775, 12814, 12853, 12893, 12932,
            12972, 13012, 13052, 13092, 13132,
            13173, 13213, 13254, 13294, 13335,
            13376, 13417, 13459, 13500, 13541,
            13583, 13625, 13667, 13709, 13751,
            13793, 13835, 13878, 13920, 13963,
            14006, 14049, 14092, 14136, 14179,
            14223, 14266, 14310, 14354, 14398,
            14443, 14487, 14531, 14576, 14621,
            14666, 14711, 14756, 14801, 14847,
            14892, 14938, 14984, 15030, 15076,
            15123, 15169, 15216, 15263, 15309,
            15356, 15404, 15451, 15498, 15546,
            15594, 15642, 15690, 15738, 15786,
            15835, 15884, 15932, 15981, 16030,
            16080, 16129, 16179, 16228, 16278,
            16328, 16378, 16429, 16479, 16530,
            16581, 16632, 16683, 16734, 16785,
            16837, 16889, 16941, 16993, 17045,
            17097, 17150, 17202, 17255, 17308,
            17361, 17415, 17468, 17522, 17576,
            17630, 17684, 17738, 17793, 17848,
            17902, 17957, 18013, 18068, 18123,
            18179, 18235, 18291, 18347, 18404,
            18460, 18517, 18574, 18631, 18688,
            18746, 18803, 18861, 18919, 18977,
            19035, 19094, 19152, 19211, 19270,
            19330, 19389, 19448, 19508, 19568,
            19628, 19689, 19749, 19810, 19871,
            19932, 19993, 20054, 20116, 20178,
            20240, 20302, 20364, 20427, 20490,
            20553, 20616, 20679, 20743, 20806,
            20870, 20935, 20999, 21063, 21128,
            21193, 21258, 21323, 21389, 21455,
            21521, 21587, 21653, 21720, 21786,
            21853, 21920, 21988, 22055, 22123,
            22191, 22259, 22328, 22396, 22465,
            22534, 22603, 22673, 22742, 22812,
            22882, 22953, 23023, 23094, 23165,
            23236, 23308, 23379, 23451, 23523,
            23595, 23668, 23741, 23814, 23887,
            23960, 24034, 24108, 24182, 24256,
            24330, 24405, 24480, 24555, 24631,
            24707, 24783, 24859, 24935, 25012,
            25089, 25166, 25243, 25320, 25398,
            25476, 25555, 25633, 25712, 25791,
            25870, 25950, 26029, 26109, 26190,
            26270, 26351, 26432, 26513, 26594,
            26676, 26758, 26840, 26923, 27006,
            27088, 27172, 27255, 27339, 27423,
            27507, 27592, 27677, 27762, 27847,
            27932, 28018, 28104, 28191, 28277,
            28364, 28451, 28539, 28626, 28714,
            28803, 28891, 28980, 29069, 29158,
            29248, 29338, 29428, 29518, 29609,
            29700, 29791, 29883, 29975, 30067,
            30159, 30252, 30345, 30438, 30532,
            30625, 30719, 30814, 30909, 31003,
            31099, 31194, 31290, 31386, 31483,
            31579, 31677, 31774, 31871, 31969,
            32068, 32166, 32265, 32364, 32464,
            32563, 32663, 32764, 32864, 32965,
            33067, 33168, 33270, 33372, 33475,
            33578, 33681, 33785, 33888, 33992,
            34097, 34202, 34307, 34412, 34518,
            34624, 34730, 34837, 34944, 35051,
            35159, 35267, 35376, 35484, 35593,
            35703, 35812, 35922, 36033, 36144,
            36255, 36366, 36478, 36590, 36702,
            36815, 36928, 37042, 37155, 37270,
            37384, 37499, 37614, 37730, 37846,
            37962, 38079, 38196, 38313, 38431,
            38549, 38667, 38786, 38905, 39025,
            39145, 39265, 39386, 39507, 39628,
            39750, 39872, 39994, 40117, 40241,
            40364, 40488, 40613, 40737, 40863,
            40988, 41114, 41240, 41367, 41494,
            41622, 41750, 41878, 42007, 42136,
            42265, 42395, 42525, 42656, 42787,
            42919, 43050, 43183, 43315, 43448,
            43582, 43716, 43850, 43985, 44120,
            44256, 44392, 44528, 44665, 44802,
            44940, 45078, 45216, 45355, 45495,
            45634, 45775, 45915, 46056, 46198,
            46340, 46482, 46625, 46768, 46912,
            47056, 47201, 47346, 47491, 47637,
            47784, 47930, 48078, 48225, 48374,
            48522, 48671, 48821, 48971, 49121,
            49272, 49424, 49576, 49728, 49881,
            50034, 50188, 50342, 50497, 50652,
            50807, 50963, 51120, 51277, 51435,
            51593, 51751, 51910, 52070, 52230,
            52390, 52551, 52713, 52875, 53037,
            53200, 53364, 53528, 53692, 53857,
            54022, 54188, 54355, 54522, 54690,
            54858, 55026, 55195, 55365, 55535,
            55706, 55877, 56048, 56221, 56393,
            56567, 56740, 56915, 57090, 57265,
            57441, 57618, 57795, 57972, 58150,
            58329, 58508, 58688, 58868, 59049,
            59231, 59413, 59595, 59778, 59962,
            60146, 60331, 60516, 60702, 60889,
            61076, 61264, 61452, 61641, 61830,
            62020, 62211, 62402, 62594, 62786,
            62979, 63172, 63366, 63561, 63756,
            63952, 64149, 64346, 64544, 64742,
            64941, 65140, 65341, 65541, 65743,
            65945, 66147, 66351, 66555, 66759,
            66964, 67170, 67376, 67583, 67791,
            67999, 68208, 68418, 68628, 68839,
            69050, 69263, 69475, 69689, 69903,
            70118, 70333, 70549, 70766, 70984,
            71202, 71421, 71640, 71860, 72081,
            72302, 72525, 72747, 72971, 73195,
            73420, 73646, 73872, 74099, 74327,
            74555, 74784, 75014, 75244, 75476,
            75707, 75940, 76173, 76407, 76642,
            76878, 77114, 77351, 77589, 77827,
            78066, 78306, 78547, 78788, 79030,
            79273, 79516, 79761, 80006, 80252,
            80498, 80746, 80994, 81243, 81492,
            81743, 81994, 82246, 82498, 82752,
            83006, 83261, 83517, 83774, 84031,
            84289, 84548, 84808, 85069, 85330,
            85592, 85855, 86119, 86384, 86649,
            86915, 87182, 87450, 87719, 87989,
            88259, 88530, 88802, 89075, 89349,
            89623, 89899, 90175, 90452, 90730,
            91009, 91288, 91569, 91850, 92132,
            92415, 92699, 92984, 93270, 93557,
            93844, 94132, 94422, 94712, 95003,
            95295, 95587, 95881, 96176, 96471,
            96768, 97065, 97363, 97662, 97963,
            98264, 98565, 98868, 99172, 99477,
            99783, 100089, 100397, 100705, 101015,
            101325, 101636, 101949, 102262, 102576,
            102891, 103207, 103525, 103843, 104162,
            104482, 104803, 105125, 105448, 105772,
            106097, 106423, 106750, 107078, 107407,
            107737, 108068, 108400, 108733, 109067,
            109402, 109738, 110076, 110414, 110753,
            111093, 111435, 111777, 112121, 112465,
            112811, 113157, 113505, 113854, 114204,
            114555, 114907, 115260, 115614, 115969,
            116325, 116683, 117041, 117401, 117762,
            118124, 118486, 118851, 119216, 119582,
            119949, 120318, 120688, 121059, 121431,
            121804, 122178, 122553, 122930, 123308,
            123687, 124067, 124448, 124830, 125214,
            125598, 125984, 126371, 126760, 127149,
            127540, 127932, 128325, 128719, 129115,
            129511, 129909, 130309, 130709, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071
         ) ),
        max_error = cms.double(5748.616225984908),
        output_scale_factor = cms.double(0.953125),
        unused_lsbs = cms.uint32(2)
    ),
    inv_mass_checks = cms.untracked.bool(False),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    sanity_checks = cms.untracked.bool(False),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    )
)


process.PuppiTauTkMuon4218 = cms.EDFilter("L1GTDoubleObjectCond",
    collection1 = cms.PSet(
        maxEta = cms.double(2.1),
        maxPrimVertDz = cms.double(1),
        minEta = cms.double(-2.1),
        primVertex = cms.uint32(0),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 0.83, 1.24),
        regionsMinPt = cms.vdouble(16, 16, 16),
        tag = cms.InputTag("l1tGTProducer","GMTTkMuons")
    ),
    collection2 = cms.PSet(
        maxEta = cms.double(2.172),
        minEta = cms.double(-2.172),
        minQualityScore = cms.uint32(225),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 1.5),
        regionsMinPt = cms.vdouble(23, 14),
        tag = cms.InputTag("l1tGTProducer","CL2Taus")
    ),
    cos_phi_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            487, 487, 487, 487, 487,
            487, 487, 487, 487, 487,
            487, 486, 486, 486, 486,
            486, 486, 486, 485, 485,
            485, 485, 485, 485, 484,
            484, 484, 484, 484, 483,
            483, 483, 483, 483, 482,
            482, 482, 482, 481, 481,
            481, 481, 480, 480, 480,
            480, 479, 479, 479, 478,
            478, 478, 478, 477, 477,
            477, 476, 476, 476, 475,
            475, 475, 474, 474, 474,
            473, 473, 472, 472, 472,
            471, 471, 471, 470, 470,
            469, 469, 468, 468, 468,
            467, 467, 466, 466, 465,
            465, 465, 464, 464, 463,
            463, 462, 462, 461, 461,
            460, 460, 459, 459, 458,
            458, 457, 457, 456, 456,
            455, 454, 454, 453, 453,
            452, 452, 451, 451, 450,
            449, 449, 448, 448, 447,
            446, 446, 445, 445, 444,
            443, 443, 442, 441, 441,
            440, 440, 439, 438, 438,
            437, 436, 436, 435, 434,
            434, 433, 432, 431, 431,
            430, 429, 429, 428, 427,
            426, 426, 425, 424, 423,
            423, 422, 421, 420, 420,
            419, 418, 417, 417, 416,
            415, 414, 413, 413, 412,
            411, 410, 409, 409, 408,
            407, 406, 405, 405, 404,
            403, 402, 401, 400, 399,
            399, 398, 397, 396, 395,
            394, 393, 392, 392, 391,
            390, 389, 388, 387, 386,
            385, 384, 383, 382, 381,
            381, 380, 379, 378, 377,
            376, 375, 374, 373, 372,
            371, 370, 369, 368, 367,
            366, 365, 364, 363, 362,
            361, 360, 359, 358, 357,
            356, 355, 354, 353, 352,
            351, 350, 349, 348, 347,
            346, 345, 343, 342, 341,
            340, 339, 338, 337, 336,
            335, 334, 333, 332, 330,
            329, 328, 327, 326, 325,
            324, 323, 322, 320, 319,
            318, 317, 316, 315, 314,
            312, 311, 310, 309, 308,
            307, 306, 304, 303, 302,
            301, 300, 298, 297, 296,
            295, 294, 293, 291, 290,
            289, 288, 286, 285, 284,
            283, 282, 280, 279, 278,
            277, 275, 274, 273, 272,
            270, 269, 268, 267, 265,
            264, 263, 262, 260, 259,
            258, 257, 255, 254, 253,
            252, 250, 249, 248, 246,
            245, 244, 242, 241, 240,
            239, 237, 236, 235, 233,
            232, 231, 229, 228, 227,
            225, 224, 223, 221, 220,
            219, 217, 216, 215, 213,
            212, 211, 209, 208, 207,
            205, 204, 203, 201, 200,
            198, 197, 196, 194, 193,
            192, 190, 189, 187, 186,
            185, 183, 182, 181, 179,
            178, 176, 175, 174, 172,
            171, 169, 168, 167, 165,
            164, 162, 161, 159, 158,
            157, 155, 154, 152, 151,
            150, 148, 147, 145, 144,
            142, 141, 140, 138, 137,
            135, 134, 132, 131, 129,
            128, 127, 125, 124, 122,
            121, 119, 118, 116, 115,
            113, 112, 111, 109, 108,
            106, 105, 103, 102, 100,
            99, 97, 96, 94, 93,
            92, 90, 89, 87, 86,
            84, 83, 81, 80, 78,
            77, 75, 74, 72, 71,
            69, 68, 66, 65, 63,
            62, 60, 59, 58, 56,
            55, 53, 52, 50, 49,
            47, 46, 44, 43, 41,
            40, 38, 37, 35, 34,
            32, 31, 29, 28, 26,
            25, 23, 22, 20, 19,
            17, 16, 14, 13, 11,
            10, 8, 7, 5, 4,
            2, 1, -1, -2, -4,
            -5, -7, -8, -10, -11,
            -13, -14, -16, -17, -19,
            -20, -22, -23, -25, -26,
            -28, -29, -31, -32, -34,
            -35, -37, -38, -40, -41,
            -43, -44, -46, -47, -49,
            -50, -52, -53, -55, -56,
            -58, -59, -60, -62, -63,
            -65, -66, -68, -69, -71,
            -72, -74, -75, -77, -78,
            -80, -81, -83, -84, -86,
            -87, -89, -90, -92, -93,
            -94, -96, -97, -99, -100,
            -102, -103, -105, -106, -108,
            -109, -111, -112, -113, -115,
            -116, -118, -119, -121, -122,
            -124, -125, -127, -128, -129,
            -131, -132, -134, -135, -137,
            -138, -140, -141, -142, -144,
            -145, -147, -148, -150, -151,
            -152, -154, -155, -157, -158,
            -159, -161, -162, -164, -165,
            -167, -168, -169, -171, -172,
            -174, -175, -176, -178, -179,
            -181, -182, -183, -185, -186,
            -187, -189, -190, -192, -193,
            -194, -196, -197, -198, -200,
            -201, -203, -204, -205, -207,
            -208, -209, -211, -212, -213,
            -215, -216, -217, -219, -220,
            -221, -223, -224, -225, -227,
            -228, -229, -231, -232, -233,
            -235, -236, -237, -239, -240,
            -241, -242, -244, -245, -246,
            -248, -249, -250, -252, -253,
            -254, -255, -257, -258, -259,
            -260, -262, -263, -264, -265,
            -267, -268, -269, -270, -272,
            -273, -274, -275, -277, -278,
            -279, -280, -282, -283, -284,
            -285, -286, -288, -289, -290,
            -291, -293, -294, -295, -296,
            -297, -298, -300, -301, -302,
            -303, -304, -306, -307, -308,
            -309, -310, -311, -312, -314,
            -315, -316, -317, -318, -319,
            -320, -322, -323, -324, -325,
            -326, -327, -328, -329, -330,
            -332, -333, -334, -335, -336,
            -337, -338, -339, -340, -341,
            -342, -343, -345, -346, -347,
            -348, -349, -350, -351, -352,
            -353, -354, -355, -356, -357,
            -358, -359, -360, -361, -362,
            -363, -364, -365, -366, -367,
            -368, -369, -370, -371, -372,
            -373, -374, -375, -376, -377,
            -378, -379, -380, -381, -381,
            -382, -383, -384, -385, -386,
            -387, -388, -389, -390, -391,
            -392, -392, -393, -394, -395,
            -396, -397, -398, -399, -399,
            -400, -401, -402, -403, -404,
            -405, -405, -406, -407, -408,
            -409, -409, -410, -411, -412,
            -413, -413, -414, -415, -416,
            -417, -417, -418, -419, -420,
            -420, -421, -422, -423, -423,
            -424, -425, -426, -426, -427,
            -428, -429, -429, -430, -431,
            -431, -432, -433, -434, -434,
            -435, -436, -436, -437, -438,
            -438, -439, -440, -440, -441,
            -441, -442, -443, -443, -444,
            -445, -445, -446, -446, -447,
            -448, -448, -449, -449, -450,
            -451, -451, -452, -452, -453,
            -453, -454, -454, -455, -456,
            -456, -457, -457, -458, -458,
            -459, -459, -460, -460, -461,
            -461, -462, -462, -463, -463,
            -464, -464, -465, -465, -465,
            -466, -466, -467, -467, -468,
            -468, -468, -469, -469, -470,
            -470, -471, -471, -471, -472,
            -472, -472, -473, -473, -474,
            -474, -474, -475, -475, -475,
            -476, -476, -476, -477, -477,
            -477, -478, -478, -478, -478,
            -479, -479, -479, -480, -480,
            -480, -480, -481, -481, -481,
            -481, -482, -482, -482, -482,
            -483, -483, -483, -483, -483,
            -484, -484, -484, -484, -484,
            -485, -485, -485, -485, -485,
            -485, -486, -486, -486, -486,
            -486, -486, -486, -487, -487,
            -487, -487, -487, -487, -487,
            -487, -487, -487, -487, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488
         ) ),
        max_error = cms.double(0.0025338281044886835),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            489, 489, 489, 489, 489,
            489, 489, 489, 489, 489,
            489, 490, 490, 490, 490,
            490, 490, 490, 491, 491,
            491, 491, 491, 491, 492,
            492, 492, 492, 492, 493,
            493, 493, 493, 493, 494,
            494, 494, 494, 495, 495,
            495, 495, 496, 496, 496,
            496, 497, 497, 497, 498,
            498, 498, 499, 499, 499,
            499, 500, 500, 500, 501,
            501, 502, 502, 502, 503,
            503, 503, 504, 504, 504,
            505, 505, 506, 506, 507,
            507, 507, 508, 508, 509,
            509, 510, 510, 510, 511,
            511, 512, 512, 513, 513,
            514, 514, 515, 515, 516,
            516, 517, 517, 518, 518,
            519, 520, 520, 521, 521,
            522, 522, 523, 523, 524,
            525, 525, 526, 526, 527,
            528, 528, 529, 530, 530,
            531, 531, 532, 533, 533,
            534, 535, 535, 536, 537,
            537, 538, 539, 540, 540,
            541, 542, 542, 543, 544,
            545, 545, 546, 547, 548,
            548, 549, 550, 551, 551,
            552, 553, 554, 555, 555,
            556, 557, 558, 559, 560,
            560, 561, 562, 563, 564,
            565, 566, 567, 567, 568,
            569, 570, 571, 572, 573,
            574, 575, 576, 577, 577,
            578, 579, 580, 581, 582,
            583, 584, 585, 586, 587,
            588, 589, 590, 591, 592,
            593, 594, 595, 596, 598,
            599, 600, 601, 602, 603,
            604, 605, 606, 607, 608,
            610, 611, 612, 613, 614,
            615, 616, 618, 619, 620,
            621, 622, 623, 625, 626,
            627, 628, 629, 631, 632,
            633, 634, 636, 637, 638,
            639, 641, 642, 643, 644,
            646, 647, 648, 650, 651,
            652, 654, 655, 656, 658,
            659, 660, 662, 663, 665,
            666, 667, 669, 670, 672,
            673, 674, 676, 677, 679,
            680, 682, 683, 685, 686,
            687, 689, 690, 692, 693,
            695, 697, 698, 700, 701,
            703, 704, 706, 707, 709,
            710, 712, 714, 715, 717,
            719, 720, 722, 723, 725,
            727, 728, 730, 732, 733,
            735, 737, 738, 740, 742,
            744, 745, 747, 749, 750,
            752, 754, 756, 758, 759,
            761, 763, 765, 767, 768,
            770, 772, 774, 776, 778,
            779, 781, 783, 785, 787,
            789, 791, 793, 795, 796,
            798, 800, 802, 804, 806,
            808, 810, 812, 814, 816,
            818, 820, 822, 824, 826,
            828, 830, 832, 835, 837,
            839, 841, 843, 845, 847,
            849, 851, 854, 856, 858,
            860, 862, 864, 867, 869,
            871, 873, 875, 878, 880,
            882, 884, 887, 889, 891,
            894, 896, 898, 900, 903,
            905, 907, 910, 912, 915,
            917, 919, 922, 924, 927,
            929, 931, 934, 936, 939,
            941, 944, 946, 949, 951,
            954, 956, 959, 961, 964,
            966, 969, 971, 974, 977,
            979, 982, 984, 987, 990,
            992, 995, 998, 1000, 1003,
            1006, 1008, 1011, 1014, 1017,
            1019, 1022, 1025, 1028, 1030,
            1033, 1036, 1039, 1042, 1044,
            1047, 1050, 1053, 1056, 1059,
            1062, 1065, 1067, 1070, 1073,
            1076, 1079, 1082, 1085, 1088,
            1091, 1094, 1097, 1100, 1103,
            1106, 1109, 1112, 1115, 1118,
            1122, 1125, 1128, 1131, 1134,
            1137, 1140, 1143, 1147, 1150,
            1153, 1156, 1159, 1163, 1166,
            1169, 1172, 1176, 1179, 1182,
            1186, 1189, 1192, 1196, 1199,
            1202, 1206, 1209, 1212, 1216,
            1219, 1223, 1226, 1230, 1233,
            1237, 1240, 1244, 1247, 1251,
            1254, 1258, 1261, 1265, 1268,
            1272, 1276, 1279, 1283, 1287,
            1290, 1294, 1298, 1301, 1305,
            1309, 1312, 1316, 1320, 1324,
            1327, 1331, 1335, 1339, 1343,
            1347, 1350, 1354, 1358, 1362,
            1366, 1370, 1374, 1378, 1382,
            1386, 1390, 1394, 1398, 1402,
            1406, 1410, 1414, 1418, 1422,
            1426, 1430, 1434, 1439, 1443,
            1447, 1451, 1455, 1459, 1464,
            1468, 1472, 1476, 1481, 1485,
            1489, 1494, 1498, 1502, 1507,
            1511, 1516, 1520, 1524, 1529,
            1533, 1538, 1542, 1547, 1551,
            1556, 1560, 1565, 1569, 1574,
            1579, 1583, 1588, 1592, 1597,
            1602, 1606, 1611, 1616, 1621,
            1625, 1630, 1635, 1640, 1645,
            1649, 1654, 1659, 1664, 1669,
            1674, 1679, 1684, 1689, 1693,
            1698, 1703, 1708, 1714, 1719,
            1724, 1729, 1734, 1739, 1744,
            1749, 1754, 1760, 1765, 1770,
            1775, 1780, 1786, 1791, 1796,
            1802, 1807, 1812, 1818, 1823,
            1828, 1834, 1839, 1845, 1850,
            1856, 1861, 1867, 1872, 1878,
            1883, 1889, 1894, 1900, 1906,
            1911, 1917, 1923, 1929, 1934,
            1940, 1946, 1952, 1957, 1963,
            1969, 1975, 1981, 1987, 1993,
            1999, 2004, 2010, 2016, 2022,
            2028, 2035, 2041, 2047, 2053,
            2059, 2065, 2071, 2077, 2084,
            2090, 2096, 2102, 2109, 2115,
            2121, 2128, 2134, 2140, 2147,
            2153, 2160, 2166, 2173, 2179,
            2186, 2192, 2199, 2205, 2212,
            2219, 2225, 2232, 2239, 2245,
            2252, 2259, 2266, 2272, 2279,
            2286, 2293, 2300, 2307, 2314,
            2321, 2328, 2335, 2342, 2349,
            2356, 2363, 2370, 2377, 2384,
            2391, 2398, 2406, 2413, 2420,
            2427, 2435, 2442, 2449, 2457,
            2464, 2472, 2479, 2487, 2494,
            2502, 2509, 2517, 2524, 2532,
            2539, 2547, 2555, 2563, 2570,
            2578, 2586, 2594, 2601, 2609,
            2617, 2625, 2633, 2641, 2649,
            2657, 2665, 2673, 2681, 2689,
            2697, 2705, 2714, 2722, 2730,
            2738, 2747, 2755, 2763, 2772,
            2780, 2788, 2797, 2805, 2814,
            2822, 2831, 2839, 2848, 2857,
            2865, 2874, 2883, 2891, 2900,
            2909, 2918, 2927, 2935, 2944,
            2953, 2962, 2971, 2980, 2989,
            2998, 3007, 3016, 3026, 3035,
            3044, 3053, 3062, 3072, 3081,
            3090, 3100, 3109, 3119, 3128,
            3138, 3147, 3157, 3166, 3176,
            3186, 3195, 3205, 3215, 3224,
            3234, 3244, 3254, 3264, 3274,
            3284, 3294, 3304, 3314, 3324,
            3334, 3344, 3354, 3364, 3375,
            3385, 3395, 3405, 3416, 3426,
            3437, 3447, 3458, 3468, 3479,
            3489, 3500, 3510, 3521, 3532,
            3543, 3553, 3564, 3575, 3586,
            3597, 3608, 3619, 3630, 3641,
            3652, 3663, 3674, 3685, 3697,
            3708, 3719, 3730, 3742, 3753,
            3765, 3776, 3788, 3799, 3811,
            3822, 3834, 3846, 3857, 3869,
            3881, 3893, 3905, 3917, 3929,
            3941, 3953, 3965, 3977, 3989,
            4001, 4013, 4025, 4038, 4050,
            4062, 4075, 4087, 4100, 4112,
            4125, 4137, 4150, 4163, 4175,
            4188, 4201, 4214, 4226, 4239,
            4252, 4265, 4278, 4291, 4304,
            4318, 4331, 4344, 4357, 4371,
            4384, 4397, 4411, 4424, 4438,
            4451, 4465, 4479, 4492, 4506,
            4520, 4533, 4547, 4561, 4575,
            4589, 4603, 4617, 4631, 4645,
            4660, 4674, 4688, 4703, 4717,
            4731, 4746, 4760, 4775, 4789,
            4804, 4819, 4833, 4848, 4863,
            4878, 4893, 4908, 4923, 4938,
            4953, 4968, 4983, 4999, 5014,
            5029, 5045, 5060, 5075, 5091,
            5107, 5122, 5138, 5154, 5169,
            5185, 5201, 5217, 5233, 5249,
            5265, 5281, 5297, 5313, 5330,
            5346, 5362, 5379, 5395, 5412,
            5428, 5445, 5462, 5478, 5495,
            5512, 5529, 5546, 5563, 5580,
            5597, 5614, 5631, 5648, 5666,
            5683, 5700, 5718, 5735, 5753,
            5770, 5788, 5806, 5824, 5841,
            5859, 5877, 5895, 5913, 5931,
            5950, 5968, 5986, 6004, 6023,
            6041, 6060, 6078, 6097, 6116,
            6134, 6153, 6172, 6191, 6210,
            6229, 6248, 6267, 6286, 6305,
            6325, 6344, 6364, 6383, 6403,
            6422, 6442, 6462, 6481, 6501,
            6521, 6541, 6561, 6581, 6602,
            6622, 6642, 6662, 6683, 6703,
            6724, 6744, 6765, 6786, 6807,
            6828, 6848, 6869, 6891, 6912,
            6933, 6954, 6975, 6997, 7018,
            7040, 7061, 7083, 7105, 7126,
            7148, 7170, 7192, 7214, 7236,
            7259, 7281, 7303, 7325, 7348,
            7370, 7393, 7416, 7438, 7461,
            7484, 7507, 7530, 7553, 7576,
            7600, 7623, 7646, 7670, 7693,
            7717, 7741, 7764, 7788, 7812,
            7836, 7860, 7884, 7908, 7932,
            7957, 7981, 8006, 8030, 8055,
            8080, 8104, 8129, 8154, 8179,
            8204, 8229, 8255, 8280, 8305,
            8331, 8356, 8382, 8408, 8434,
            8459, 8485, 8511, 8537, 8564,
            8590, 8616, 8643, 8669, 8696,
            8722, 8749, 8776, 8803, 8830,
            8857, 8884, 8912, 8939, 8966,
            8994, 9021, 9049, 9077, 9105,
            9133, 9161, 9189, 9217, 9245,
            9274, 9302, 9331, 9359, 9388,
            9417, 9446, 9475, 9504, 9533,
            9562, 9591, 9621, 9650, 9680,
            9710, 9740, 9769, 9799, 9830,
            9860, 9890, 9920, 9951, 9981,
            10012, 10043, 10073, 10104, 10135,
            10166, 10198, 10229, 10260, 10292,
            10323, 10355, 10387, 10419, 10451,
            10483, 10515, 10547, 10580, 10612,
            10645, 10677, 10710, 10743, 10776,
            10809, 10842, 10876, 10909, 10942,
            10976, 11010, 11044, 11077, 11111,
            11146, 11180, 11214, 11248, 11283,
            11318, 11352, 11387, 11422, 11457,
            11492, 11528, 11563, 11599, 11634,
            11670, 11706, 11742, 11778, 11814,
            11850, 11887, 11923, 11960, 11996,
            12033, 12070, 12107, 12144, 12182,
            12219, 12257, 12294, 12332, 12370,
            12408, 12446, 12484, 12522, 12561,
            12599, 12638, 12677, 12716, 12755,
            12794, 12833, 12873, 12912, 12952,
            12992, 13032, 13072, 13112, 13152,
            13192, 13233, 13274, 13314, 13355,
            13396, 13437, 13479, 13520, 13561,
            13603, 13645, 13687, 13729, 13771,
            13813, 13856, 13898, 13941, 13984,
            14027, 14070, 14113, 14156, 14200,
            14243, 14287, 14331, 14375, 14419,
            14463, 14508, 14552, 14597, 14642,
            14687, 14732, 14777, 14823, 14868,
            14914, 14960, 15005, 15052, 15098,
            15144, 15191, 15237, 15284, 15331,
            15378, 15425, 15473, 15520, 15568,
            15616, 15664, 15712, 15760, 15808,
            15857, 15906, 15955, 16004, 16053,
            16102, 16151, 16201, 16251, 16301,
            16351, 16401, 16451, 16502, 16553,
            16603, 16654, 16706, 16757, 16808,
            16860, 16912, 16964, 17016, 17068,
            17121, 17173, 17226, 17279, 17332,
            17385, 17438, 17492, 17546, 17600,
            17654, 17708, 17762, 17817, 17872,
            17926, 17982, 18037, 18092, 18148,
            18203, 18259, 18315, 18372, 18428,
            18485, 18542, 18598, 18656, 18713,
            18770, 18828, 18886, 18944, 19002,
            19060, 19119, 19178, 19237, 19296,
            19355, 19414, 19474, 19534, 19594,
            19654, 19714, 19775, 19836, 19897,
            19958, 20019, 20081, 20142, 20204,
            20266, 20328, 20391, 20454, 20516,
            20579, 20643, 20706, 20770, 20833,
            20897, 20962, 21026, 21091, 21155,
            21220, 21286, 21351, 21417, 21482,
            21548, 21615, 21681, 21748, 21814,
            21881, 21949, 22016, 22084, 22151,
            22220, 22288, 22356, 22425, 22494,
            22563, 22632, 22702, 22771, 22841,
            22912, 22982, 23053, 23123, 23194,
            23266, 23337, 23409, 23481, 23553,
            23625, 23698, 23771, 23844, 23917,
            23990, 24064, 24138, 24212, 24287,
            24361, 24436, 24511, 24586, 24662,
            24738, 24814, 24890, 24966, 25043,
            25120, 25197, 25275, 25352, 25430,
            25508, 25587, 25665, 25744, 25823,
            25902, 25982, 26062, 26142, 26222,
            26303, 26384, 26465, 26546, 26627,
            26709, 26791, 26874, 26956, 27039,
            27122, 27205, 27289, 27373, 27457,
            27541, 27626, 27711, 27796, 27881,
            27967, 28053, 28139, 28226, 28312,
            28399, 28486, 28574, 28662, 28750,
            28838, 28927, 29016, 29105, 29194,
            29284, 29374, 29464, 29555, 29645,
            29736, 29828, 29919, 30011, 30104,
            30196, 30289, 30382, 30475, 30569,
            30663, 30757, 30851, 30946, 31041,
            31137, 31232, 31328, 31425, 31521,
            31618, 31715, 31813, 31910, 32008,
            32107, 32205, 32304, 32403, 32503,
            32603, 32703, 32804, 32904, 33005,
            33107, 33209, 33311, 33413, 33516,
            33619, 33722, 33825, 33929, 34034,
            34138, 34243, 34348, 34454, 34560,
            34666, 34772, 34879, 34986, 35094,
            35202, 35310, 35418, 35527, 35636,
            35746, 35856, 35966, 36076, 36187,
            36298, 36410, 36522, 36634, 36746,
            36859, 36973, 37086, 37200, 37314,
            37429, 37544, 37659, 37775, 37891,
            38008, 38124, 38241, 38359, 38477,
            38595, 38714, 38833, 38952, 39072,
            39192, 39312, 39433, 39554, 39675,
            39797, 39920, 40042, 40165, 40289,
            40413, 40537, 40661, 40786, 40911,
            41037, 41163, 41290, 41417, 41544,
            41671, 41800, 41928, 42057, 42186,
            42316, 42446, 42576, 42707, 42838,
            42970, 43102, 43234, 43367, 43500,
            43634, 43768, 43902, 44037, 44173,
            44308, 44444, 44581, 44718, 44855,
            44993, 45131, 45270, 45409, 45549,
            45689, 45829, 45970, 46111, 46253,
            46395, 46537, 46680, 46824, 46968,
            47112, 47257, 47402, 47548, 47694,
            47840, 47987, 48135, 48283, 48431,
            48580, 48729, 48879, 49029, 49180,
            49331, 49482, 49634, 49787, 49940,
            50093, 50247, 50401, 50556, 50712,
            50867, 51024, 51181, 51338, 51495,
            51654, 51812, 51972, 52131, 52291,
            52452, 52613, 52775, 52937, 53100,
            53263, 53427, 53591, 53755, 53921,
            54086, 54252, 54419, 54586, 54754,
            54922, 55091, 55260, 55430, 55600,
            55771, 55943, 56114, 56287, 56460,
            56633, 56807, 56982, 57157, 57333,
            57509, 57685, 57863, 58040, 58219,
            58398, 58577, 58757, 58938, 59119,
            59300, 59483, 59665, 59849, 60033,
            60217, 60402, 60588, 60774, 60960,
            61148, 61336, 61524, 61713, 61903,
            62093, 62284, 62475, 62667, 62860,
            63053, 63247, 63441, 63636, 63831,
            64027, 64224, 64422, 64619, 64818,
            65017, 65217, 65417, 65618, 65820,
            66022, 66225, 66429, 66633, 66837,
            67043, 67249, 67455, 67663, 67870,
            68079, 68288, 68498, 68708, 68920,
            69131, 69344, 69557, 69771, 69985,
            70200, 70416, 70632, 70849, 71067,
            71285, 71504, 71724, 71944, 72165,
            72387, 72609, 72833, 73056, 73281,
            73506, 73732, 73958, 74186, 74414,
            74642, 74872, 75102, 75332, 75564,
            75796, 76029, 76262, 76497, 76732,
            76968, 77204, 77441, 77679, 77918,
            78157, 78398, 78638, 78880, 79122,
            79366, 79609, 79854, 80099, 80345,
            80592, 80840, 81088, 81338, 81587,
            81838, 82090, 82342, 82595, 82849,
            83103, 83358, 83615, 83872, 84129,
            84388, 84647, 84907, 85168, 85430,
            85692, 85955, 86220, 86485, 86750,
            87017, 87284, 87552, 87821, 88091,
            88362, 88633, 88906, 89179, 89453,
            89728, 90003, 90280, 90557, 90836,
            91115, 91395, 91676, 91957, 92240,
            92523, 92807, 93093, 93379, 93666,
            93953, 94242, 94532, 94822, 95113,
            95406, 95699, 95993, 96288, 96584,
            96881, 97178, 97477, 97776, 98077,
            98378, 98680, 98984, 99288, 99593,
            99899, 100206, 100514, 100822, 101132,
            101443, 101755, 102067, 102381, 102696,
            103011, 103328, 103645, 103964, 104283,
            104603, 104925, 105247, 105571, 105895,
            106220, 106547, 106874, 107203, 107532,
            107862, 108194, 108526, 108860, 109194,
            109530, 109866, 110204, 110542, 110882,
            111223, 111565, 111907, 112251, 112596,
            112942, 113289, 113637, 113986, 114337,
            114688, 115040, 115394, 115748, 116104,
            116461, 116819, 117178, 117538, 117899,
            118261, 118624, 118989, 119354, 119721,
            120089, 120458, 120828, 121199, 121572,
            121945, 122320, 122696, 123073, 123451,
            123830, 124211, 124593, 124975, 125359,
            125745, 126131, 126518, 126907, 127297,
            127688, 128081, 128474, 128869, 129265,
            129662, 130061, 130260
         ) ),
        max_error = cms.double(0.6152529479288091),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut2 = cms.PSet(
        lut = cms.vint32( (
            256, 256, 257, 258, 259,
            260, 260, 261, 262, 263,
            264, 264, 265, 266, 267,
            268, 268, 269, 270, 271,
            272, 273, 273, 274, 275,
            276, 277, 278, 279, 279,
            280, 281, 282, 283, 284,
            285, 285, 286, 287, 288,
            289, 290, 291, 292, 293,
            293, 294, 295, 296, 297,
            298, 299, 300, 301, 302,
            303, 303, 304, 305, 306,
            307, 308, 309, 310, 311,
            312, 313, 314, 315, 316,
            317, 318, 319, 320, 321,
            322, 323, 324, 325, 326,
            327, 328, 329, 330, 331,
            332, 333, 334, 335, 336,
            337, 338, 339, 340, 341,
            342, 343, 344, 345, 346,
            347, 348, 349, 351, 352,
            353, 354, 355, 356, 357,
            358, 359, 360, 361, 363,
            364, 365, 366, 367, 368,
            369, 370, 372, 373, 374,
            375, 376, 377, 379, 380,
            381, 382, 383, 384, 386,
            387, 388, 389, 390, 392,
            393, 394, 395, 396, 398,
            399, 400, 401, 402, 404,
            405, 406, 407, 409, 410,
            411, 412, 414, 415, 416,
            418, 419, 420, 421, 423,
            424, 425, 427, 428, 429,
            431, 432, 433, 435, 436,
            437, 439, 440, 441, 443,
            444, 445, 447, 448, 449,
            451, 452, 454, 455, 456,
            458, 459, 461, 462, 463,
            465, 466, 468, 469, 471,
            472, 474, 475, 476, 478,
            479, 481, 482, 484, 485,
            487, 488, 490, 491, 493,
            494, 496, 497, 499, 500,
            502, 503, 505, 507, 508,
            510, 511, 513, 514, 516,
            518, 519, 521, 522, 524,
            526, 527, 529, 530, 532,
            534, 535, 537, 539, 540,
            542, 544, 545, 547, 549,
            550, 552, 554, 555, 557,
            559, 561, 562, 564, 566,
            567, 569, 571, 573, 575,
            576, 578, 580, 582, 583,
            585, 587, 589, 591, 592,
            594, 596, 598, 600, 602,
            603, 605, 607, 609, 611,
            613, 615, 617, 618, 620,
            622, 624, 626, 628, 630,
            632, 634, 636, 638, 640,
            642, 644, 646, 648, 650,
            652, 654, 656, 658, 660,
            662, 664, 666, 668, 670,
            672, 674, 676, 678, 680,
            682, 684, 686, 688, 691,
            693, 695, 697, 699, 701,
            703, 706, 708, 710, 712,
            714, 717, 719, 721, 723,
            725, 728, 730, 732, 734,
            737, 739, 741, 743, 746,
            748, 750, 753, 755, 757,
            760, 762, 764, 767, 769,
            771, 774, 776, 778, 781,
            783, 786, 788, 790, 793,
            795, 798, 800, 803, 805,
            808, 810, 813, 815, 818,
            820, 823, 825, 828, 830,
            833, 835, 838, 840, 843,
            846, 848, 851, 853, 856,
            859, 861, 864, 867, 869,
            872, 875, 877, 880, 883,
            885, 888, 891, 894, 896,
            899, 902, 905, 907, 910,
            913, 916, 919, 921, 924,
            927, 930, 933, 936, 939,
            941, 944, 947, 950, 953,
            956, 959, 962, 965, 968,
            971, 974, 977, 980, 983,
            986, 989, 992, 995, 998,
            1001, 1004, 1007, 1010, 1013,
            1017, 1020, 1023, 1026, 1029,
            1032, 1035, 1039, 1042, 1045,
            1048, 1051, 1055, 1058, 1061,
            1064, 1068, 1071, 1074, 1078,
            1081, 1084, 1088, 1091, 1094,
            1098, 1101, 1104, 1108, 1111,
            1115, 1118, 1121, 1125, 1128,
            1132, 1135, 1139, 1142, 1146,
            1149, 1153, 1156, 1160, 1163,
            1167, 1171, 1174, 1178, 1181,
            1185, 1189, 1192, 1196, 1200,
            1203, 1207, 1211, 1214, 1218,
            1222, 1226, 1229, 1233, 1237,
            1241, 1245, 1249, 1252, 1256,
            1260, 1264, 1268, 1272, 1276,
            1280, 1283, 1287, 1291, 1295,
            1299, 1303, 1307, 1311, 1315,
            1319, 1323, 1328, 1332, 1336,
            1340, 1344, 1348, 1352, 1356,
            1360, 1365, 1369, 1373, 1377,
            1382, 1386, 1390, 1394, 1399,
            1403, 1407, 1412, 1416, 1420,
            1425, 1429, 1433, 1438, 1442,
            1447, 1451, 1455, 1460, 1464,
            1469, 1473, 1478, 1483, 1487,
            1492, 1496, 1501, 1505, 1510,
            1515, 1519, 1524, 1529, 1533,
            1538, 1543, 1548, 1552, 1557,
            1562, 1567, 1572, 1576, 1581,
            1586, 1591, 1596, 1601, 1606,
            1611, 1616, 1620, 1625, 1630,
            1635, 1640, 1646, 1651, 1656,
            1661, 1666, 1671, 1676, 1681,
            1686, 1692, 1697, 1702, 1707,
            1712, 1718, 1723, 1728, 1734,
            1739, 1744, 1750, 1755, 1760,
            1766, 1771, 1777, 1782, 1788,
            1793, 1799, 1804, 1810, 1815,
            1821, 1826, 1832, 1838, 1843,
            1849, 1855, 1860, 1866, 1872,
            1878, 1883, 1889, 1895, 1901,
            1907, 1912, 1918, 1924, 1930,
            1936, 1942, 1948, 1954, 1960,
            1966, 1972, 1978, 1984, 1990,
            1996, 2003, 2009, 2015, 2021,
            2027, 2033, 2040, 2046, 2052,
            2059, 2065, 2071, 2078, 2084,
            2090, 2097, 2103, 2110, 2116,
            2123, 2129, 2136, 2142, 2149,
            2156, 2162, 2169, 2175, 2182,
            2189, 2196, 2202, 2209, 2216,
            2223, 2230, 2236, 2243, 2250,
            2257, 2264, 2271, 2278, 2285,
            2292, 2299, 2306, 2313, 2320,
            2327, 2335, 2342, 2349, 2356,
            2363, 2371, 2378, 2385, 2393,
            2400, 2407, 2415, 2422, 2430,
            2437, 2444, 2452, 2460, 2467,
            2475, 2482, 2490, 2498, 2505,
            2513, 2521, 2528, 2536, 2544,
            2552, 2560, 2567, 2575, 2583,
            2591, 2599, 2607, 2615, 2623,
            2631, 2639, 2647, 2656, 2664,
            2672, 2680, 2688, 2697, 2705,
            2713, 2722, 2730, 2738, 2747,
            2755, 2764, 2772, 2781, 2789,
            2798, 2806, 2815, 2824, 2832,
            2841, 2850, 2858, 2867, 2876,
            2885, 2894, 2903, 2912, 2921,
            2930, 2939, 2948, 2957, 2966,
            2975, 2984, 2993, 3002, 3012,
            3021, 3030, 3039, 3049, 3058,
            3067, 3077, 3086, 3096, 3105,
            3115, 3124, 3134, 3144, 3153,
            3163, 3173, 3183, 3192, 3202,
            3212, 3222, 3232, 3242, 3252,
            3262, 3272, 3282, 3292, 3302,
            3312, 3322, 3332, 3343, 3353,
            3363, 3374, 3384, 3394, 3405,
            3415, 3426, 3436, 3447, 3457,
            3468, 3479, 3489, 3500, 3511,
            3522, 3532, 3543, 3554, 3565,
            3576, 3587, 3598, 3609, 3620,
            3631, 3642, 3654, 3665, 3676,
            3687, 3699, 3710, 3722, 3733,
            3744, 3756, 3767, 3779, 3791,
            3802, 3814, 3826, 3837, 3849,
            3861, 3873, 3885, 3897, 3909,
            3921, 3933, 3945, 3957, 3969,
            3981, 3994, 4006, 4018, 4031,
            4043, 4055, 4068, 4080, 4093,
            4105, 4118, 4131, 4143, 4156,
            4169, 4182, 4195, 4207, 4220,
            4233, 4246, 4259, 4272, 4286,
            4299, 4312, 4325, 4339, 4352,
            4365, 4379, 4392, 4406, 4419,
            4433, 4446, 4460, 4474, 4487,
            4501, 4515, 4529, 4543, 4557,
            4571, 4585, 4599, 4613, 4627,
            4641, 4656, 4670, 4684, 4699,
            4713, 4728, 4742, 4757, 4771,
            4786, 4801, 4816, 4830, 4845,
            4860, 4875, 4890, 4905, 4920,
            4935, 4950, 4966, 4981, 4996,
            5011, 5027, 5042, 5058, 5073,
            5089, 5105, 5120, 5136, 5152,
            5168, 5183, 5199, 5215, 5231,
            5247, 5264, 5280, 5296, 5312,
            5329, 5345, 5361, 5378, 5394,
            5411, 5428, 5444, 5461, 5478,
            5495, 5512, 5528, 5545, 5562,
            5580, 5597, 5614, 5631, 5648,
            5666, 5683, 5701, 5718, 5736,
            5753, 5771, 5789, 5807, 5824,
            5842, 5860, 5878, 5896, 5914,
            5933, 5951, 5969, 5987, 6006,
            6024, 6043, 6061, 6080, 6099,
            6117, 6136, 6155, 6174, 6193,
            6212, 6231, 6250, 6269, 6289,
            6308, 6327, 6347, 6366, 6386,
            6406, 6425, 6445, 6465, 6485,
            6505, 6525, 6545, 6565, 6585,
            6605, 6625, 6646, 6666, 6687,
            6707, 6728, 6749, 6769, 6790,
            6811, 6832, 6853, 6874, 6895,
            6916, 6937, 6959, 6980, 7002,
            7023, 7045, 7066, 7088, 7110,
            7132, 7154, 7176, 7198, 7220,
            7242, 7264, 7286, 7309, 7331,
            7354, 7376, 7399, 7422, 7445,
            7468, 7490, 7513, 7537, 7560,
            7583, 7606, 7630, 7653, 7677,
            7700, 7724, 7748, 7771, 7795,
            7819, 7843, 7867, 7892, 7916,
            7940, 7964, 7989, 8014, 8038,
            8063, 8088, 8112, 8137, 8162,
            8187, 8213, 8238, 8263, 8289,
            8314, 8340, 8365, 8391, 8417,
            8443, 8468, 8495, 8521, 8547,
            8573, 8599, 8626, 8652, 8679,
            8706, 8732, 8759, 8786, 8813,
            8840, 8867, 8895, 8922, 8949,
            8977, 9004, 9032, 9060, 9088,
            9116, 9144, 9172, 9200, 9228,
            9256, 9285, 9313, 9342, 9371,
            9400, 9428, 9457, 9486, 9516,
            9545, 9574, 9604, 9633, 9663,
            9692, 9722, 9752, 9782, 9812,
            9842, 9872, 9903, 9933, 9964,
            9994, 10025, 10056, 10087, 10118,
            10149, 10180, 10211, 10243, 10274,
            10306, 10337, 10369, 10401, 10433,
            10465, 10497, 10529, 10562, 10594,
            10627, 10659, 10692, 10725, 10758,
            10791, 10824, 10858, 10891, 10924,
            10958, 10992, 11025, 11059, 11093,
            11127, 11161, 11196, 11230, 11265,
            11299, 11334, 11369, 11404, 11439,
            11474, 11509, 11545, 11580, 11616,
            11651, 11687, 11723, 11759, 11795,
            11831, 11868, 11904, 11941, 11978,
            12014, 12051, 12088, 12125, 12163,
            12200, 12238, 12275, 12313, 12351,
            12389, 12427, 12465, 12503, 12542,
            12580, 12619, 12658, 12696, 12735,
            12775, 12814, 12853, 12893, 12932,
            12972, 13012, 13052, 13092, 13132,
            13173, 13213, 13254, 13294, 13335,
            13376, 13417, 13459, 13500, 13541,
            13583, 13625, 13667, 13709, 13751,
            13793, 13835, 13878, 13920, 13963,
            14006, 14049, 14092, 14136, 14179,
            14223, 14266, 14310, 14354, 14398,
            14443, 14487, 14531, 14576, 14621,
            14666, 14711, 14756, 14801, 14847,
            14892, 14938, 14984, 15030, 15076,
            15123, 15169, 15216, 15263, 15309,
            15356, 15404, 15451, 15498, 15546,
            15594, 15642, 15690, 15738, 15786,
            15835, 15884, 15932, 15981, 16030,
            16080, 16129, 16179, 16228, 16278,
            16328, 16378, 16429, 16479, 16530,
            16581, 16632, 16683, 16734, 16785,
            16837, 16889, 16941, 16993, 17045,
            17097, 17150, 17202, 17255, 17308,
            17361, 17415, 17468, 17522, 17576,
            17630, 17684, 17738, 17793, 17848,
            17902, 17957, 18013, 18068, 18123,
            18179, 18235, 18291, 18347, 18404,
            18460, 18517, 18574, 18631, 18688,
            18746, 18803, 18861, 18919, 18977,
            19035, 19094, 19152, 19211, 19270,
            19330, 19389, 19448, 19508, 19568,
            19628, 19689, 19749, 19810, 19871,
            19932, 19993, 20054, 20116, 20178,
            20240, 20302, 20364, 20427, 20490,
            20553, 20616, 20679, 20743, 20806,
            20870, 20935, 20999, 21063, 21128,
            21193, 21258, 21323, 21389, 21455,
            21521, 21587, 21653, 21720, 21786,
            21853, 21920, 21988, 22055, 22123,
            22191, 22259, 22328, 22396, 22465,
            22534, 22603, 22673, 22742, 22812,
            22882, 22953, 23023, 23094, 23165,
            23236, 23308, 23379, 23451, 23523,
            23595, 23668, 23741, 23814, 23887,
            23960, 24034, 24108, 24182, 24256,
            24330, 24405, 24480, 24555, 24631,
            24707, 24783, 24859, 24935, 25012,
            25089, 25166, 25243, 25320, 25398,
            25476, 25555, 25633, 25712, 25791,
            25870, 25950, 26029, 26109, 26190,
            26270, 26351, 26432, 26513, 26594,
            26676, 26758, 26840, 26923, 27006,
            27088, 27172, 27255, 27339, 27423,
            27507, 27592, 27677, 27762, 27847,
            27932, 28018, 28104, 28191, 28277,
            28364, 28451, 28539, 28626, 28714,
            28803, 28891, 28980, 29069, 29158,
            29248, 29338, 29428, 29518, 29609,
            29700, 29791, 29883, 29975, 30067,
            30159, 30252, 30345, 30438, 30532,
            30625, 30719, 30814, 30909, 31003,
            31099, 31194, 31290, 31386, 31483,
            31579, 31677, 31774, 31871, 31969,
            32068, 32166, 32265, 32364, 32464,
            32563, 32663, 32764, 32864, 32965,
            33067, 33168, 33270, 33372, 33475,
            33578, 33681, 33785, 33888, 33992,
            34097, 34202, 34307, 34412, 34518,
            34624, 34730, 34837, 34944, 35051,
            35159, 35267, 35376, 35484, 35593,
            35703, 35812, 35922, 36033, 36144,
            36255, 36366, 36478, 36590, 36702,
            36815, 36928, 37042, 37155, 37270,
            37384, 37499, 37614, 37730, 37846,
            37962, 38079, 38196, 38313, 38431,
            38549, 38667, 38786, 38905, 39025,
            39145, 39265, 39386, 39507, 39628,
            39750, 39872, 39994, 40117, 40241,
            40364, 40488, 40613, 40737, 40863,
            40988, 41114, 41240, 41367, 41494,
            41622, 41750, 41878, 42007, 42136,
            42265, 42395, 42525, 42656, 42787,
            42919, 43050, 43183, 43315, 43448,
            43582, 43716, 43850, 43985, 44120,
            44256, 44392, 44528, 44665, 44802,
            44940, 45078, 45216, 45355, 45495,
            45634, 45775, 45915, 46056, 46198,
            46340, 46482, 46625, 46768, 46912,
            47056, 47201, 47346, 47491, 47637,
            47784, 47930, 48078, 48225, 48374,
            48522, 48671, 48821, 48971, 49121,
            49272, 49424, 49576, 49728, 49881,
            50034, 50188, 50342, 50497, 50652,
            50807, 50963, 51120, 51277, 51435,
            51593, 51751, 51910, 52070, 52230,
            52390, 52551, 52713, 52875, 53037,
            53200, 53364, 53528, 53692, 53857,
            54022, 54188, 54355, 54522, 54690,
            54858, 55026, 55195, 55365, 55535,
            55706, 55877, 56048, 56221, 56393,
            56567, 56740, 56915, 57090, 57265,
            57441, 57618, 57795, 57972, 58150,
            58329, 58508, 58688, 58868, 59049,
            59231, 59413, 59595, 59778, 59962,
            60146, 60331, 60516, 60702, 60889,
            61076, 61264, 61452, 61641, 61830,
            62020, 62211, 62402, 62594, 62786,
            62979, 63172, 63366, 63561, 63756,
            63952, 64149, 64346, 64544, 64742,
            64941, 65140, 65341, 65541, 65743,
            65945, 66147, 66351, 66555, 66759,
            66964, 67170, 67376, 67583, 67791,
            67999, 68208, 68418, 68628, 68839,
            69050, 69263, 69475, 69689, 69903,
            70118, 70333, 70549, 70766, 70984,
            71202, 71421, 71640, 71860, 72081,
            72302, 72525, 72747, 72971, 73195,
            73420, 73646, 73872, 74099, 74327,
            74555, 74784, 75014, 75244, 75476,
            75707, 75940, 76173, 76407, 76642,
            76878, 77114, 77351, 77589, 77827,
            78066, 78306, 78547, 78788, 79030,
            79273, 79516, 79761, 80006, 80252,
            80498, 80746, 80994, 81243, 81492,
            81743, 81994, 82246, 82498, 82752,
            83006, 83261, 83517, 83774, 84031,
            84289, 84548, 84808, 85069, 85330,
            85592, 85855, 86119, 86384, 86649,
            86915, 87182, 87450, 87719, 87989,
            88259, 88530, 88802, 89075, 89349,
            89623, 89899, 90175, 90452, 90730,
            91009, 91288, 91569, 91850, 92132,
            92415, 92699, 92984, 93270, 93557,
            93844, 94132, 94422, 94712, 95003,
            95295, 95587, 95881, 96176, 96471,
            96768, 97065, 97363, 97662, 97963,
            98264, 98565, 98868, 99172, 99477,
            99783, 100089, 100397, 100705, 101015,
            101325, 101636, 101949, 102262, 102576,
            102891, 103207, 103525, 103843, 104162,
            104482, 104803, 105125, 105448, 105772,
            106097, 106423, 106750, 107078, 107407,
            107737, 108068, 108400, 108733, 109067,
            109402, 109738, 110076, 110414, 110753,
            111093, 111435, 111777, 112121, 112465,
            112811, 113157, 113505, 113854, 114204,
            114555, 114907, 115260, 115614, 115969,
            116325, 116683, 117041, 117401, 117762,
            118124, 118486, 118851, 119216, 119582,
            119949, 120318, 120688, 121059, 121431,
            121804, 122178, 122553, 122930, 123308,
            123687, 124067, 124448, 124830, 125214,
            125598, 125984, 126371, 126760, 127149,
            127540, 127932, 128325, 128719, 129115,
            129511, 129909, 130309, 130709, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071
         ) ),
        max_error = cms.double(5748.616225984908),
        output_scale_factor = cms.double(0.953125),
        unused_lsbs = cms.uint32(2)
    ),
    inv_mass_checks = cms.untracked.bool(False),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    sanity_checks = cms.untracked.bool(False),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    )
)


process.QuadJet70554040 = cms.EDFilter("L1GTQuadObjectCond",
    collection1 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 1.5),
        regionsMinPt = cms.vdouble(38, 30),
        tag = cms.InputTag("l1tGTProducer","CL2JetsSC4")
    ),
    collection2 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 1.5),
        regionsMinPt = cms.vdouble(27, 25.0),
        tag = cms.InputTag("l1tGTProducer","CL2JetsSC4")
    ),
    collection3 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 1.5),
        regionsMinPt = cms.vdouble(25.0, 25.0),
        tag = cms.InputTag("l1tGTProducer","CL2JetsSC4")
    ),
    collection4 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 1.5),
        regionsMinPt = cms.vdouble(25.0, 25.0),
        tag = cms.InputTag("l1tGTProducer","CL2JetsSC4")
    ),
    cos_phi_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            487, 487, 487, 487, 487,
            487, 487, 487, 487, 487,
            487, 486, 486, 486, 486,
            486, 486, 486, 485, 485,
            485, 485, 485, 485, 484,
            484, 484, 484, 484, 483,
            483, 483, 483, 483, 482,
            482, 482, 482, 481, 481,
            481, 481, 480, 480, 480,
            480, 479, 479, 479, 478,
            478, 478, 478, 477, 477,
            477, 476, 476, 476, 475,
            475, 475, 474, 474, 474,
            473, 473, 472, 472, 472,
            471, 471, 471, 470, 470,
            469, 469, 468, 468, 468,
            467, 467, 466, 466, 465,
            465, 465, 464, 464, 463,
            463, 462, 462, 461, 461,
            460, 460, 459, 459, 458,
            458, 457, 457, 456, 456,
            455, 454, 454, 453, 453,
            452, 452, 451, 451, 450,
            449, 449, 448, 448, 447,
            446, 446, 445, 445, 444,
            443, 443, 442, 441, 441,
            440, 440, 439, 438, 438,
            437, 436, 436, 435, 434,
            434, 433, 432, 431, 431,
            430, 429, 429, 428, 427,
            426, 426, 425, 424, 423,
            423, 422, 421, 420, 420,
            419, 418, 417, 417, 416,
            415, 414, 413, 413, 412,
            411, 410, 409, 409, 408,
            407, 406, 405, 405, 404,
            403, 402, 401, 400, 399,
            399, 398, 397, 396, 395,
            394, 393, 392, 392, 391,
            390, 389, 388, 387, 386,
            385, 384, 383, 382, 381,
            381, 380, 379, 378, 377,
            376, 375, 374, 373, 372,
            371, 370, 369, 368, 367,
            366, 365, 364, 363, 362,
            361, 360, 359, 358, 357,
            356, 355, 354, 353, 352,
            351, 350, 349, 348, 347,
            346, 345, 343, 342, 341,
            340, 339, 338, 337, 336,
            335, 334, 333, 332, 330,
            329, 328, 327, 326, 325,
            324, 323, 322, 320, 319,
            318, 317, 316, 315, 314,
            312, 311, 310, 309, 308,
            307, 306, 304, 303, 302,
            301, 300, 298, 297, 296,
            295, 294, 293, 291, 290,
            289, 288, 286, 285, 284,
            283, 282, 280, 279, 278,
            277, 275, 274, 273, 272,
            270, 269, 268, 267, 265,
            264, 263, 262, 260, 259,
            258, 257, 255, 254, 253,
            252, 250, 249, 248, 246,
            245, 244, 242, 241, 240,
            239, 237, 236, 235, 233,
            232, 231, 229, 228, 227,
            225, 224, 223, 221, 220,
            219, 217, 216, 215, 213,
            212, 211, 209, 208, 207,
            205, 204, 203, 201, 200,
            198, 197, 196, 194, 193,
            192, 190, 189, 187, 186,
            185, 183, 182, 181, 179,
            178, 176, 175, 174, 172,
            171, 169, 168, 167, 165,
            164, 162, 161, 159, 158,
            157, 155, 154, 152, 151,
            150, 148, 147, 145, 144,
            142, 141, 140, 138, 137,
            135, 134, 132, 131, 129,
            128, 127, 125, 124, 122,
            121, 119, 118, 116, 115,
            113, 112, 111, 109, 108,
            106, 105, 103, 102, 100,
            99, 97, 96, 94, 93,
            92, 90, 89, 87, 86,
            84, 83, 81, 80, 78,
            77, 75, 74, 72, 71,
            69, 68, 66, 65, 63,
            62, 60, 59, 58, 56,
            55, 53, 52, 50, 49,
            47, 46, 44, 43, 41,
            40, 38, 37, 35, 34,
            32, 31, 29, 28, 26,
            25, 23, 22, 20, 19,
            17, 16, 14, 13, 11,
            10, 8, 7, 5, 4,
            2, 1, -1, -2, -4,
            -5, -7, -8, -10, -11,
            -13, -14, -16, -17, -19,
            -20, -22, -23, -25, -26,
            -28, -29, -31, -32, -34,
            -35, -37, -38, -40, -41,
            -43, -44, -46, -47, -49,
            -50, -52, -53, -55, -56,
            -58, -59, -60, -62, -63,
            -65, -66, -68, -69, -71,
            -72, -74, -75, -77, -78,
            -80, -81, -83, -84, -86,
            -87, -89, -90, -92, -93,
            -94, -96, -97, -99, -100,
            -102, -103, -105, -106, -108,
            -109, -111, -112, -113, -115,
            -116, -118, -119, -121, -122,
            -124, -125, -127, -128, -129,
            -131, -132, -134, -135, -137,
            -138, -140, -141, -142, -144,
            -145, -147, -148, -150, -151,
            -152, -154, -155, -157, -158,
            -159, -161, -162, -164, -165,
            -167, -168, -169, -171, -172,
            -174, -175, -176, -178, -179,
            -181, -182, -183, -185, -186,
            -187, -189, -190, -192, -193,
            -194, -196, -197, -198, -200,
            -201, -203, -204, -205, -207,
            -208, -209, -211, -212, -213,
            -215, -216, -217, -219, -220,
            -221, -223, -224, -225, -227,
            -228, -229, -231, -232, -233,
            -235, -236, -237, -239, -240,
            -241, -242, -244, -245, -246,
            -248, -249, -250, -252, -253,
            -254, -255, -257, -258, -259,
            -260, -262, -263, -264, -265,
            -267, -268, -269, -270, -272,
            -273, -274, -275, -277, -278,
            -279, -280, -282, -283, -284,
            -285, -286, -288, -289, -290,
            -291, -293, -294, -295, -296,
            -297, -298, -300, -301, -302,
            -303, -304, -306, -307, -308,
            -309, -310, -311, -312, -314,
            -315, -316, -317, -318, -319,
            -320, -322, -323, -324, -325,
            -326, -327, -328, -329, -330,
            -332, -333, -334, -335, -336,
            -337, -338, -339, -340, -341,
            -342, -343, -345, -346, -347,
            -348, -349, -350, -351, -352,
            -353, -354, -355, -356, -357,
            -358, -359, -360, -361, -362,
            -363, -364, -365, -366, -367,
            -368, -369, -370, -371, -372,
            -373, -374, -375, -376, -377,
            -378, -379, -380, -381, -381,
            -382, -383, -384, -385, -386,
            -387, -388, -389, -390, -391,
            -392, -392, -393, -394, -395,
            -396, -397, -398, -399, -399,
            -400, -401, -402, -403, -404,
            -405, -405, -406, -407, -408,
            -409, -409, -410, -411, -412,
            -413, -413, -414, -415, -416,
            -417, -417, -418, -419, -420,
            -420, -421, -422, -423, -423,
            -424, -425, -426, -426, -427,
            -428, -429, -429, -430, -431,
            -431, -432, -433, -434, -434,
            -435, -436, -436, -437, -438,
            -438, -439, -440, -440, -441,
            -441, -442, -443, -443, -444,
            -445, -445, -446, -446, -447,
            -448, -448, -449, -449, -450,
            -451, -451, -452, -452, -453,
            -453, -454, -454, -455, -456,
            -456, -457, -457, -458, -458,
            -459, -459, -460, -460, -461,
            -461, -462, -462, -463, -463,
            -464, -464, -465, -465, -465,
            -466, -466, -467, -467, -468,
            -468, -468, -469, -469, -470,
            -470, -471, -471, -471, -472,
            -472, -472, -473, -473, -474,
            -474, -474, -475, -475, -475,
            -476, -476, -476, -477, -477,
            -477, -478, -478, -478, -478,
            -479, -479, -479, -480, -480,
            -480, -480, -481, -481, -481,
            -481, -482, -482, -482, -482,
            -483, -483, -483, -483, -483,
            -484, -484, -484, -484, -484,
            -485, -485, -485, -485, -485,
            -485, -486, -486, -486, -486,
            -486, -486, -486, -487, -487,
            -487, -487, -487, -487, -487,
            -487, -487, -487, -487, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488
         ) ),
        max_error = cms.double(0.0025338281044886835),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            489, 489, 489, 489, 489,
            489, 489, 489, 489, 489,
            489, 490, 490, 490, 490,
            490, 490, 490, 491, 491,
            491, 491, 491, 491, 492,
            492, 492, 492, 492, 493,
            493, 493, 493, 493, 494,
            494, 494, 494, 495, 495,
            495, 495, 496, 496, 496,
            496, 497, 497, 497, 498,
            498, 498, 499, 499, 499,
            499, 500, 500, 500, 501,
            501, 502, 502, 502, 503,
            503, 503, 504, 504, 504,
            505, 505, 506, 506, 507,
            507, 507, 508, 508, 509,
            509, 510, 510, 510, 511,
            511, 512, 512, 513, 513,
            514, 514, 515, 515, 516,
            516, 517, 517, 518, 518,
            519, 520, 520, 521, 521,
            522, 522, 523, 523, 524,
            525, 525, 526, 526, 527,
            528, 528, 529, 530, 530,
            531, 531, 532, 533, 533,
            534, 535, 535, 536, 537,
            537, 538, 539, 540, 540,
            541, 542, 542, 543, 544,
            545, 545, 546, 547, 548,
            548, 549, 550, 551, 551,
            552, 553, 554, 555, 555,
            556, 557, 558, 559, 560,
            560, 561, 562, 563, 564,
            565, 566, 567, 567, 568,
            569, 570, 571, 572, 573,
            574, 575, 576, 577, 577,
            578, 579, 580, 581, 582,
            583, 584, 585, 586, 587,
            588, 589, 590, 591, 592,
            593, 594, 595, 596, 598,
            599, 600, 601, 602, 603,
            604, 605, 606, 607, 608,
            610, 611, 612, 613, 614,
            615, 616, 618, 619, 620,
            621, 622, 623, 625, 626,
            627, 628, 629, 631, 632,
            633, 634, 636, 637, 638,
            639, 641, 642, 643, 644,
            646, 647, 648, 650, 651,
            652, 654, 655, 656, 658,
            659, 660, 662, 663, 665,
            666, 667, 669, 670, 672,
            673, 674, 676, 677, 679,
            680, 682, 683, 685, 686,
            687, 689, 690, 692, 693,
            695, 697, 698, 700, 701,
            703, 704, 706, 707, 709,
            710, 712, 714, 715, 717,
            719, 720, 722, 723, 725,
            727, 728, 730, 732, 733,
            735, 737, 738, 740, 742,
            744, 745, 747, 749, 750,
            752, 754, 756, 758, 759,
            761, 763, 765, 767, 768,
            770, 772, 774, 776, 778,
            779, 781, 783, 785, 787,
            789, 791, 793, 795, 796,
            798, 800, 802, 804, 806,
            808, 810, 812, 814, 816,
            818, 820, 822, 824, 826,
            828, 830, 832, 835, 837,
            839, 841, 843, 845, 847,
            849, 851, 854, 856, 858,
            860, 862, 864, 867, 869,
            871, 873, 875, 878, 880,
            882, 884, 887, 889, 891,
            894, 896, 898, 900, 903,
            905, 907, 910, 912, 915,
            917, 919, 922, 924, 927,
            929, 931, 934, 936, 939,
            941, 944, 946, 949, 951,
            954, 956, 959, 961, 964,
            966, 969, 971, 974, 977,
            979, 982, 984, 987, 990,
            992, 995, 998, 1000, 1003,
            1006, 1008, 1011, 1014, 1017,
            1019, 1022, 1025, 1028, 1030,
            1033, 1036, 1039, 1042, 1044,
            1047, 1050, 1053, 1056, 1059,
            1062, 1065, 1067, 1070, 1073,
            1076, 1079, 1082, 1085, 1088,
            1091, 1094, 1097, 1100, 1103,
            1106, 1109, 1112, 1115, 1118,
            1122, 1125, 1128, 1131, 1134,
            1137, 1140, 1143, 1147, 1150,
            1153, 1156, 1159, 1163, 1166,
            1169, 1172, 1176, 1179, 1182,
            1186, 1189, 1192, 1196, 1199,
            1202, 1206, 1209, 1212, 1216,
            1219, 1223, 1226, 1230, 1233,
            1237, 1240, 1244, 1247, 1251,
            1254, 1258, 1261, 1265, 1268,
            1272, 1276, 1279, 1283, 1287,
            1290, 1294, 1298, 1301, 1305,
            1309, 1312, 1316, 1320, 1324,
            1327, 1331, 1335, 1339, 1343,
            1347, 1350, 1354, 1358, 1362,
            1366, 1370, 1374, 1378, 1382,
            1386, 1390, 1394, 1398, 1402,
            1406, 1410, 1414, 1418, 1422,
            1426, 1430, 1434, 1439, 1443,
            1447, 1451, 1455, 1459, 1464,
            1468, 1472, 1476, 1481, 1485,
            1489, 1494, 1498, 1502, 1507,
            1511, 1516, 1520, 1524, 1529,
            1533, 1538, 1542, 1547, 1551,
            1556, 1560, 1565, 1569, 1574,
            1579, 1583, 1588, 1592, 1597,
            1602, 1606, 1611, 1616, 1621,
            1625, 1630, 1635, 1640, 1645,
            1649, 1654, 1659, 1664, 1669,
            1674, 1679, 1684, 1689, 1693,
            1698, 1703, 1708, 1714, 1719,
            1724, 1729, 1734, 1739, 1744,
            1749, 1754, 1760, 1765, 1770,
            1775, 1780, 1786, 1791, 1796,
            1802, 1807, 1812, 1818, 1823,
            1828, 1834, 1839, 1845, 1850,
            1856, 1861, 1867, 1872, 1878,
            1883, 1889, 1894, 1900, 1906,
            1911, 1917, 1923, 1929, 1934,
            1940, 1946, 1952, 1957, 1963,
            1969, 1975, 1981, 1987, 1993,
            1999, 2004, 2010, 2016, 2022,
            2028, 2035, 2041, 2047, 2053,
            2059, 2065, 2071, 2077, 2084,
            2090, 2096, 2102, 2109, 2115,
            2121, 2128, 2134, 2140, 2147,
            2153, 2160, 2166, 2173, 2179,
            2186, 2192, 2199, 2205, 2212,
            2219, 2225, 2232, 2239, 2245,
            2252, 2259, 2266, 2272, 2279,
            2286, 2293, 2300, 2307, 2314,
            2321, 2328, 2335, 2342, 2349,
            2356, 2363, 2370, 2377, 2384,
            2391, 2398, 2406, 2413, 2420,
            2427, 2435, 2442, 2449, 2457,
            2464, 2472, 2479, 2487, 2494,
            2502, 2509, 2517, 2524, 2532,
            2539, 2547, 2555, 2563, 2570,
            2578, 2586, 2594, 2601, 2609,
            2617, 2625, 2633, 2641, 2649,
            2657, 2665, 2673, 2681, 2689,
            2697, 2705, 2714, 2722, 2730,
            2738, 2747, 2755, 2763, 2772,
            2780, 2788, 2797, 2805, 2814,
            2822, 2831, 2839, 2848, 2857,
            2865, 2874, 2883, 2891, 2900,
            2909, 2918, 2927, 2935, 2944,
            2953, 2962, 2971, 2980, 2989,
            2998, 3007, 3016, 3026, 3035,
            3044, 3053, 3062, 3072, 3081,
            3090, 3100, 3109, 3119, 3128,
            3138, 3147, 3157, 3166, 3176,
            3186, 3195, 3205, 3215, 3224,
            3234, 3244, 3254, 3264, 3274,
            3284, 3294, 3304, 3314, 3324,
            3334, 3344, 3354, 3364, 3375,
            3385, 3395, 3405, 3416, 3426,
            3437, 3447, 3458, 3468, 3479,
            3489, 3500, 3510, 3521, 3532,
            3543, 3553, 3564, 3575, 3586,
            3597, 3608, 3619, 3630, 3641,
            3652, 3663, 3674, 3685, 3697,
            3708, 3719, 3730, 3742, 3753,
            3765, 3776, 3788, 3799, 3811,
            3822, 3834, 3846, 3857, 3869,
            3881, 3893, 3905, 3917, 3929,
            3941, 3953, 3965, 3977, 3989,
            4001, 4013, 4025, 4038, 4050,
            4062, 4075, 4087, 4100, 4112,
            4125, 4137, 4150, 4163, 4175,
            4188, 4201, 4214, 4226, 4239,
            4252, 4265, 4278, 4291, 4304,
            4318, 4331, 4344, 4357, 4371,
            4384, 4397, 4411, 4424, 4438,
            4451, 4465, 4479, 4492, 4506,
            4520, 4533, 4547, 4561, 4575,
            4589, 4603, 4617, 4631, 4645,
            4660, 4674, 4688, 4703, 4717,
            4731, 4746, 4760, 4775, 4789,
            4804, 4819, 4833, 4848, 4863,
            4878, 4893, 4908, 4923, 4938,
            4953, 4968, 4983, 4999, 5014,
            5029, 5045, 5060, 5075, 5091,
            5107, 5122, 5138, 5154, 5169,
            5185, 5201, 5217, 5233, 5249,
            5265, 5281, 5297, 5313, 5330,
            5346, 5362, 5379, 5395, 5412,
            5428, 5445, 5462, 5478, 5495,
            5512, 5529, 5546, 5563, 5580,
            5597, 5614, 5631, 5648, 5666,
            5683, 5700, 5718, 5735, 5753,
            5770, 5788, 5806, 5824, 5841,
            5859, 5877, 5895, 5913, 5931,
            5950, 5968, 5986, 6004, 6023,
            6041, 6060, 6078, 6097, 6116,
            6134, 6153, 6172, 6191, 6210,
            6229, 6248, 6267, 6286, 6305,
            6325, 6344, 6364, 6383, 6403,
            6422, 6442, 6462, 6481, 6501,
            6521, 6541, 6561, 6581, 6602,
            6622, 6642, 6662, 6683, 6703,
            6724, 6744, 6765, 6786, 6807,
            6828, 6848, 6869, 6891, 6912,
            6933, 6954, 6975, 6997, 7018,
            7040, 7061, 7083, 7105, 7126,
            7148, 7170, 7192, 7214, 7236,
            7259, 7281, 7303, 7325, 7348,
            7370, 7393, 7416, 7438, 7461,
            7484, 7507, 7530, 7553, 7576,
            7600, 7623, 7646, 7670, 7693,
            7717, 7741, 7764, 7788, 7812,
            7836, 7860, 7884, 7908, 7932,
            7957, 7981, 8006, 8030, 8055,
            8080, 8104, 8129, 8154, 8179,
            8204, 8229, 8255, 8280, 8305,
            8331, 8356, 8382, 8408, 8434,
            8459, 8485, 8511, 8537, 8564,
            8590, 8616, 8643, 8669, 8696,
            8722, 8749, 8776, 8803, 8830,
            8857, 8884, 8912, 8939, 8966,
            8994, 9021, 9049, 9077, 9105,
            9133, 9161, 9189, 9217, 9245,
            9274, 9302, 9331, 9359, 9388,
            9417, 9446, 9475, 9504, 9533,
            9562, 9591, 9621, 9650, 9680,
            9710, 9740, 9769, 9799, 9830,
            9860, 9890, 9920, 9951, 9981,
            10012, 10043, 10073, 10104, 10135,
            10166, 10198, 10229, 10260, 10292,
            10323, 10355, 10387, 10419, 10451,
            10483, 10515, 10547, 10580, 10612,
            10645, 10677, 10710, 10743, 10776,
            10809, 10842, 10876, 10909, 10942,
            10976, 11010, 11044, 11077, 11111,
            11146, 11180, 11214, 11248, 11283,
            11318, 11352, 11387, 11422, 11457,
            11492, 11528, 11563, 11599, 11634,
            11670, 11706, 11742, 11778, 11814,
            11850, 11887, 11923, 11960, 11996,
            12033, 12070, 12107, 12144, 12182,
            12219, 12257, 12294, 12332, 12370,
            12408, 12446, 12484, 12522, 12561,
            12599, 12638, 12677, 12716, 12755,
            12794, 12833, 12873, 12912, 12952,
            12992, 13032, 13072, 13112, 13152,
            13192, 13233, 13274, 13314, 13355,
            13396, 13437, 13479, 13520, 13561,
            13603, 13645, 13687, 13729, 13771,
            13813, 13856, 13898, 13941, 13984,
            14027, 14070, 14113, 14156, 14200,
            14243, 14287, 14331, 14375, 14419,
            14463, 14508, 14552, 14597, 14642,
            14687, 14732, 14777, 14823, 14868,
            14914, 14960, 15005, 15052, 15098,
            15144, 15191, 15237, 15284, 15331,
            15378, 15425, 15473, 15520, 15568,
            15616, 15664, 15712, 15760, 15808,
            15857, 15906, 15955, 16004, 16053,
            16102, 16151, 16201, 16251, 16301,
            16351, 16401, 16451, 16502, 16553,
            16603, 16654, 16706, 16757, 16808,
            16860, 16912, 16964, 17016, 17068,
            17121, 17173, 17226, 17279, 17332,
            17385, 17438, 17492, 17546, 17600,
            17654, 17708, 17762, 17817, 17872,
            17926, 17982, 18037, 18092, 18148,
            18203, 18259, 18315, 18372, 18428,
            18485, 18542, 18598, 18656, 18713,
            18770, 18828, 18886, 18944, 19002,
            19060, 19119, 19178, 19237, 19296,
            19355, 19414, 19474, 19534, 19594,
            19654, 19714, 19775, 19836, 19897,
            19958, 20019, 20081, 20142, 20204,
            20266, 20328, 20391, 20454, 20516,
            20579, 20643, 20706, 20770, 20833,
            20897, 20962, 21026, 21091, 21155,
            21220, 21286, 21351, 21417, 21482,
            21548, 21615, 21681, 21748, 21814,
            21881, 21949, 22016, 22084, 22151,
            22220, 22288, 22356, 22425, 22494,
            22563, 22632, 22702, 22771, 22841,
            22912, 22982, 23053, 23123, 23194,
            23266, 23337, 23409, 23481, 23553,
            23625, 23698, 23771, 23844, 23917,
            23990, 24064, 24138, 24212, 24287,
            24361, 24436, 24511, 24586, 24662,
            24738, 24814, 24890, 24966, 25043,
            25120, 25197, 25275, 25352, 25430,
            25508, 25587, 25665, 25744, 25823,
            25902, 25982, 26062, 26142, 26222,
            26303, 26384, 26465, 26546, 26627,
            26709, 26791, 26874, 26956, 27039,
            27122, 27205, 27289, 27373, 27457,
            27541, 27626, 27711, 27796, 27881,
            27967, 28053, 28139, 28226, 28312,
            28399, 28486, 28574, 28662, 28750,
            28838, 28927, 29016, 29105, 29194,
            29284, 29374, 29464, 29555, 29645,
            29736, 29828, 29919, 30011, 30104,
            30196, 30289, 30382, 30475, 30569,
            30663, 30757, 30851, 30946, 31041,
            31137, 31232, 31328, 31425, 31521,
            31618, 31715, 31813, 31910, 32008,
            32107, 32205, 32304, 32403, 32503,
            32603, 32703, 32804, 32904, 33005,
            33107, 33209, 33311, 33413, 33516,
            33619, 33722, 33825, 33929, 34034,
            34138, 34243, 34348, 34454, 34560,
            34666, 34772, 34879, 34986, 35094,
            35202, 35310, 35418, 35527, 35636,
            35746, 35856, 35966, 36076, 36187,
            36298, 36410, 36522, 36634, 36746,
            36859, 36973, 37086, 37200, 37314,
            37429, 37544, 37659, 37775, 37891,
            38008, 38124, 38241, 38359, 38477,
            38595, 38714, 38833, 38952, 39072,
            39192, 39312, 39433, 39554, 39675,
            39797, 39920, 40042, 40165, 40289,
            40413, 40537, 40661, 40786, 40911,
            41037, 41163, 41290, 41417, 41544,
            41671, 41800, 41928, 42057, 42186,
            42316, 42446, 42576, 42707, 42838,
            42970, 43102, 43234, 43367, 43500,
            43634, 43768, 43902, 44037, 44173,
            44308, 44444, 44581, 44718, 44855,
            44993, 45131, 45270, 45409, 45549,
            45689, 45829, 45970, 46111, 46253,
            46395, 46537, 46680, 46824, 46968,
            47112, 47257, 47402, 47548, 47694,
            47840, 47987, 48135, 48283, 48431,
            48580, 48729, 48879, 49029, 49180,
            49331, 49482, 49634, 49787, 49940,
            50093, 50247, 50401, 50556, 50712,
            50867, 51024, 51181, 51338, 51495,
            51654, 51812, 51972, 52131, 52291,
            52452, 52613, 52775, 52937, 53100,
            53263, 53427, 53591, 53755, 53921,
            54086, 54252, 54419, 54586, 54754,
            54922, 55091, 55260, 55430, 55600,
            55771, 55943, 56114, 56287, 56460,
            56633, 56807, 56982, 57157, 57333,
            57509, 57685, 57863, 58040, 58219,
            58398, 58577, 58757, 58938, 59119,
            59300, 59483, 59665, 59849, 60033,
            60217, 60402, 60588, 60774, 60960,
            61148, 61336, 61524, 61713, 61903,
            62093, 62284, 62475, 62667, 62860,
            63053, 63247, 63441, 63636, 63831,
            64027, 64224, 64422, 64619, 64818,
            65017, 65217, 65417, 65618, 65820,
            66022, 66225, 66429, 66633, 66837,
            67043, 67249, 67455, 67663, 67870,
            68079, 68288, 68498, 68708, 68920,
            69131, 69344, 69557, 69771, 69985,
            70200, 70416, 70632, 70849, 71067,
            71285, 71504, 71724, 71944, 72165,
            72387, 72609, 72833, 73056, 73281,
            73506, 73732, 73958, 74186, 74414,
            74642, 74872, 75102, 75332, 75564,
            75796, 76029, 76262, 76497, 76732,
            76968, 77204, 77441, 77679, 77918,
            78157, 78398, 78638, 78880, 79122,
            79366, 79609, 79854, 80099, 80345,
            80592, 80840, 81088, 81338, 81587,
            81838, 82090, 82342, 82595, 82849,
            83103, 83358, 83615, 83872, 84129,
            84388, 84647, 84907, 85168, 85430,
            85692, 85955, 86220, 86485, 86750,
            87017, 87284, 87552, 87821, 88091,
            88362, 88633, 88906, 89179, 89453,
            89728, 90003, 90280, 90557, 90836,
            91115, 91395, 91676, 91957, 92240,
            92523, 92807, 93093, 93379, 93666,
            93953, 94242, 94532, 94822, 95113,
            95406, 95699, 95993, 96288, 96584,
            96881, 97178, 97477, 97776, 98077,
            98378, 98680, 98984, 99288, 99593,
            99899, 100206, 100514, 100822, 101132,
            101443, 101755, 102067, 102381, 102696,
            103011, 103328, 103645, 103964, 104283,
            104603, 104925, 105247, 105571, 105895,
            106220, 106547, 106874, 107203, 107532,
            107862, 108194, 108526, 108860, 109194,
            109530, 109866, 110204, 110542, 110882,
            111223, 111565, 111907, 112251, 112596,
            112942, 113289, 113637, 113986, 114337,
            114688, 115040, 115394, 115748, 116104,
            116461, 116819, 117178, 117538, 117899,
            118261, 118624, 118989, 119354, 119721,
            120089, 120458, 120828, 121199, 121572,
            121945, 122320, 122696, 123073, 123451,
            123830, 124211, 124593, 124975, 125359,
            125745, 126131, 126518, 126907, 127297,
            127688, 128081, 128474, 128869, 129265,
            129662, 130061, 130260
         ) ),
        max_error = cms.double(0.6152529479288091),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut2 = cms.PSet(
        lut = cms.vint32( (
            256, 256, 257, 258, 259,
            260, 260, 261, 262, 263,
            264, 264, 265, 266, 267,
            268, 268, 269, 270, 271,
            272, 273, 273, 274, 275,
            276, 277, 278, 279, 279,
            280, 281, 282, 283, 284,
            285, 285, 286, 287, 288,
            289, 290, 291, 292, 293,
            293, 294, 295, 296, 297,
            298, 299, 300, 301, 302,
            303, 303, 304, 305, 306,
            307, 308, 309, 310, 311,
            312, 313, 314, 315, 316,
            317, 318, 319, 320, 321,
            322, 323, 324, 325, 326,
            327, 328, 329, 330, 331,
            332, 333, 334, 335, 336,
            337, 338, 339, 340, 341,
            342, 343, 344, 345, 346,
            347, 348, 349, 351, 352,
            353, 354, 355, 356, 357,
            358, 359, 360, 361, 363,
            364, 365, 366, 367, 368,
            369, 370, 372, 373, 374,
            375, 376, 377, 379, 380,
            381, 382, 383, 384, 386,
            387, 388, 389, 390, 392,
            393, 394, 395, 396, 398,
            399, 400, 401, 402, 404,
            405, 406, 407, 409, 410,
            411, 412, 414, 415, 416,
            418, 419, 420, 421, 423,
            424, 425, 427, 428, 429,
            431, 432, 433, 435, 436,
            437, 439, 440, 441, 443,
            444, 445, 447, 448, 449,
            451, 452, 454, 455, 456,
            458, 459, 461, 462, 463,
            465, 466, 468, 469, 471,
            472, 474, 475, 476, 478,
            479, 481, 482, 484, 485,
            487, 488, 490, 491, 493,
            494, 496, 497, 499, 500,
            502, 503, 505, 507, 508,
            510, 511, 513, 514, 516,
            518, 519, 521, 522, 524,
            526, 527, 529, 530, 532,
            534, 535, 537, 539, 540,
            542, 544, 545, 547, 549,
            550, 552, 554, 555, 557,
            559, 561, 562, 564, 566,
            567, 569, 571, 573, 575,
            576, 578, 580, 582, 583,
            585, 587, 589, 591, 592,
            594, 596, 598, 600, 602,
            603, 605, 607, 609, 611,
            613, 615, 617, 618, 620,
            622, 624, 626, 628, 630,
            632, 634, 636, 638, 640,
            642, 644, 646, 648, 650,
            652, 654, 656, 658, 660,
            662, 664, 666, 668, 670,
            672, 674, 676, 678, 680,
            682, 684, 686, 688, 691,
            693, 695, 697, 699, 701,
            703, 706, 708, 710, 712,
            714, 717, 719, 721, 723,
            725, 728, 730, 732, 734,
            737, 739, 741, 743, 746,
            748, 750, 753, 755, 757,
            760, 762, 764, 767, 769,
            771, 774, 776, 778, 781,
            783, 786, 788, 790, 793,
            795, 798, 800, 803, 805,
            808, 810, 813, 815, 818,
            820, 823, 825, 828, 830,
            833, 835, 838, 840, 843,
            846, 848, 851, 853, 856,
            859, 861, 864, 867, 869,
            872, 875, 877, 880, 883,
            885, 888, 891, 894, 896,
            899, 902, 905, 907, 910,
            913, 916, 919, 921, 924,
            927, 930, 933, 936, 939,
            941, 944, 947, 950, 953,
            956, 959, 962, 965, 968,
            971, 974, 977, 980, 983,
            986, 989, 992, 995, 998,
            1001, 1004, 1007, 1010, 1013,
            1017, 1020, 1023, 1026, 1029,
            1032, 1035, 1039, 1042, 1045,
            1048, 1051, 1055, 1058, 1061,
            1064, 1068, 1071, 1074, 1078,
            1081, 1084, 1088, 1091, 1094,
            1098, 1101, 1104, 1108, 1111,
            1115, 1118, 1121, 1125, 1128,
            1132, 1135, 1139, 1142, 1146,
            1149, 1153, 1156, 1160, 1163,
            1167, 1171, 1174, 1178, 1181,
            1185, 1189, 1192, 1196, 1200,
            1203, 1207, 1211, 1214, 1218,
            1222, 1226, 1229, 1233, 1237,
            1241, 1245, 1249, 1252, 1256,
            1260, 1264, 1268, 1272, 1276,
            1280, 1283, 1287, 1291, 1295,
            1299, 1303, 1307, 1311, 1315,
            1319, 1323, 1328, 1332, 1336,
            1340, 1344, 1348, 1352, 1356,
            1360, 1365, 1369, 1373, 1377,
            1382, 1386, 1390, 1394, 1399,
            1403, 1407, 1412, 1416, 1420,
            1425, 1429, 1433, 1438, 1442,
            1447, 1451, 1455, 1460, 1464,
            1469, 1473, 1478, 1483, 1487,
            1492, 1496, 1501, 1505, 1510,
            1515, 1519, 1524, 1529, 1533,
            1538, 1543, 1548, 1552, 1557,
            1562, 1567, 1572, 1576, 1581,
            1586, 1591, 1596, 1601, 1606,
            1611, 1616, 1620, 1625, 1630,
            1635, 1640, 1646, 1651, 1656,
            1661, 1666, 1671, 1676, 1681,
            1686, 1692, 1697, 1702, 1707,
            1712, 1718, 1723, 1728, 1734,
            1739, 1744, 1750, 1755, 1760,
            1766, 1771, 1777, 1782, 1788,
            1793, 1799, 1804, 1810, 1815,
            1821, 1826, 1832, 1838, 1843,
            1849, 1855, 1860, 1866, 1872,
            1878, 1883, 1889, 1895, 1901,
            1907, 1912, 1918, 1924, 1930,
            1936, 1942, 1948, 1954, 1960,
            1966, 1972, 1978, 1984, 1990,
            1996, 2003, 2009, 2015, 2021,
            2027, 2033, 2040, 2046, 2052,
            2059, 2065, 2071, 2078, 2084,
            2090, 2097, 2103, 2110, 2116,
            2123, 2129, 2136, 2142, 2149,
            2156, 2162, 2169, 2175, 2182,
            2189, 2196, 2202, 2209, 2216,
            2223, 2230, 2236, 2243, 2250,
            2257, 2264, 2271, 2278, 2285,
            2292, 2299, 2306, 2313, 2320,
            2327, 2335, 2342, 2349, 2356,
            2363, 2371, 2378, 2385, 2393,
            2400, 2407, 2415, 2422, 2430,
            2437, 2444, 2452, 2460, 2467,
            2475, 2482, 2490, 2498, 2505,
            2513, 2521, 2528, 2536, 2544,
            2552, 2560, 2567, 2575, 2583,
            2591, 2599, 2607, 2615, 2623,
            2631, 2639, 2647, 2656, 2664,
            2672, 2680, 2688, 2697, 2705,
            2713, 2722, 2730, 2738, 2747,
            2755, 2764, 2772, 2781, 2789,
            2798, 2806, 2815, 2824, 2832,
            2841, 2850, 2858, 2867, 2876,
            2885, 2894, 2903, 2912, 2921,
            2930, 2939, 2948, 2957, 2966,
            2975, 2984, 2993, 3002, 3012,
            3021, 3030, 3039, 3049, 3058,
            3067, 3077, 3086, 3096, 3105,
            3115, 3124, 3134, 3144, 3153,
            3163, 3173, 3183, 3192, 3202,
            3212, 3222, 3232, 3242, 3252,
            3262, 3272, 3282, 3292, 3302,
            3312, 3322, 3332, 3343, 3353,
            3363, 3374, 3384, 3394, 3405,
            3415, 3426, 3436, 3447, 3457,
            3468, 3479, 3489, 3500, 3511,
            3522, 3532, 3543, 3554, 3565,
            3576, 3587, 3598, 3609, 3620,
            3631, 3642, 3654, 3665, 3676,
            3687, 3699, 3710, 3722, 3733,
            3744, 3756, 3767, 3779, 3791,
            3802, 3814, 3826, 3837, 3849,
            3861, 3873, 3885, 3897, 3909,
            3921, 3933, 3945, 3957, 3969,
            3981, 3994, 4006, 4018, 4031,
            4043, 4055, 4068, 4080, 4093,
            4105, 4118, 4131, 4143, 4156,
            4169, 4182, 4195, 4207, 4220,
            4233, 4246, 4259, 4272, 4286,
            4299, 4312, 4325, 4339, 4352,
            4365, 4379, 4392, 4406, 4419,
            4433, 4446, 4460, 4474, 4487,
            4501, 4515, 4529, 4543, 4557,
            4571, 4585, 4599, 4613, 4627,
            4641, 4656, 4670, 4684, 4699,
            4713, 4728, 4742, 4757, 4771,
            4786, 4801, 4816, 4830, 4845,
            4860, 4875, 4890, 4905, 4920,
            4935, 4950, 4966, 4981, 4996,
            5011, 5027, 5042, 5058, 5073,
            5089, 5105, 5120, 5136, 5152,
            5168, 5183, 5199, 5215, 5231,
            5247, 5264, 5280, 5296, 5312,
            5329, 5345, 5361, 5378, 5394,
            5411, 5428, 5444, 5461, 5478,
            5495, 5512, 5528, 5545, 5562,
            5580, 5597, 5614, 5631, 5648,
            5666, 5683, 5701, 5718, 5736,
            5753, 5771, 5789, 5807, 5824,
            5842, 5860, 5878, 5896, 5914,
            5933, 5951, 5969, 5987, 6006,
            6024, 6043, 6061, 6080, 6099,
            6117, 6136, 6155, 6174, 6193,
            6212, 6231, 6250, 6269, 6289,
            6308, 6327, 6347, 6366, 6386,
            6406, 6425, 6445, 6465, 6485,
            6505, 6525, 6545, 6565, 6585,
            6605, 6625, 6646, 6666, 6687,
            6707, 6728, 6749, 6769, 6790,
            6811, 6832, 6853, 6874, 6895,
            6916, 6937, 6959, 6980, 7002,
            7023, 7045, 7066, 7088, 7110,
            7132, 7154, 7176, 7198, 7220,
            7242, 7264, 7286, 7309, 7331,
            7354, 7376, 7399, 7422, 7445,
            7468, 7490, 7513, 7537, 7560,
            7583, 7606, 7630, 7653, 7677,
            7700, 7724, 7748, 7771, 7795,
            7819, 7843, 7867, 7892, 7916,
            7940, 7964, 7989, 8014, 8038,
            8063, 8088, 8112, 8137, 8162,
            8187, 8213, 8238, 8263, 8289,
            8314, 8340, 8365, 8391, 8417,
            8443, 8468, 8495, 8521, 8547,
            8573, 8599, 8626, 8652, 8679,
            8706, 8732, 8759, 8786, 8813,
            8840, 8867, 8895, 8922, 8949,
            8977, 9004, 9032, 9060, 9088,
            9116, 9144, 9172, 9200, 9228,
            9256, 9285, 9313, 9342, 9371,
            9400, 9428, 9457, 9486, 9516,
            9545, 9574, 9604, 9633, 9663,
            9692, 9722, 9752, 9782, 9812,
            9842, 9872, 9903, 9933, 9964,
            9994, 10025, 10056, 10087, 10118,
            10149, 10180, 10211, 10243, 10274,
            10306, 10337, 10369, 10401, 10433,
            10465, 10497, 10529, 10562, 10594,
            10627, 10659, 10692, 10725, 10758,
            10791, 10824, 10858, 10891, 10924,
            10958, 10992, 11025, 11059, 11093,
            11127, 11161, 11196, 11230, 11265,
            11299, 11334, 11369, 11404, 11439,
            11474, 11509, 11545, 11580, 11616,
            11651, 11687, 11723, 11759, 11795,
            11831, 11868, 11904, 11941, 11978,
            12014, 12051, 12088, 12125, 12163,
            12200, 12238, 12275, 12313, 12351,
            12389, 12427, 12465, 12503, 12542,
            12580, 12619, 12658, 12696, 12735,
            12775, 12814, 12853, 12893, 12932,
            12972, 13012, 13052, 13092, 13132,
            13173, 13213, 13254, 13294, 13335,
            13376, 13417, 13459, 13500, 13541,
            13583, 13625, 13667, 13709, 13751,
            13793, 13835, 13878, 13920, 13963,
            14006, 14049, 14092, 14136, 14179,
            14223, 14266, 14310, 14354, 14398,
            14443, 14487, 14531, 14576, 14621,
            14666, 14711, 14756, 14801, 14847,
            14892, 14938, 14984, 15030, 15076,
            15123, 15169, 15216, 15263, 15309,
            15356, 15404, 15451, 15498, 15546,
            15594, 15642, 15690, 15738, 15786,
            15835, 15884, 15932, 15981, 16030,
            16080, 16129, 16179, 16228, 16278,
            16328, 16378, 16429, 16479, 16530,
            16581, 16632, 16683, 16734, 16785,
            16837, 16889, 16941, 16993, 17045,
            17097, 17150, 17202, 17255, 17308,
            17361, 17415, 17468, 17522, 17576,
            17630, 17684, 17738, 17793, 17848,
            17902, 17957, 18013, 18068, 18123,
            18179, 18235, 18291, 18347, 18404,
            18460, 18517, 18574, 18631, 18688,
            18746, 18803, 18861, 18919, 18977,
            19035, 19094, 19152, 19211, 19270,
            19330, 19389, 19448, 19508, 19568,
            19628, 19689, 19749, 19810, 19871,
            19932, 19993, 20054, 20116, 20178,
            20240, 20302, 20364, 20427, 20490,
            20553, 20616, 20679, 20743, 20806,
            20870, 20935, 20999, 21063, 21128,
            21193, 21258, 21323, 21389, 21455,
            21521, 21587, 21653, 21720, 21786,
            21853, 21920, 21988, 22055, 22123,
            22191, 22259, 22328, 22396, 22465,
            22534, 22603, 22673, 22742, 22812,
            22882, 22953, 23023, 23094, 23165,
            23236, 23308, 23379, 23451, 23523,
            23595, 23668, 23741, 23814, 23887,
            23960, 24034, 24108, 24182, 24256,
            24330, 24405, 24480, 24555, 24631,
            24707, 24783, 24859, 24935, 25012,
            25089, 25166, 25243, 25320, 25398,
            25476, 25555, 25633, 25712, 25791,
            25870, 25950, 26029, 26109, 26190,
            26270, 26351, 26432, 26513, 26594,
            26676, 26758, 26840, 26923, 27006,
            27088, 27172, 27255, 27339, 27423,
            27507, 27592, 27677, 27762, 27847,
            27932, 28018, 28104, 28191, 28277,
            28364, 28451, 28539, 28626, 28714,
            28803, 28891, 28980, 29069, 29158,
            29248, 29338, 29428, 29518, 29609,
            29700, 29791, 29883, 29975, 30067,
            30159, 30252, 30345, 30438, 30532,
            30625, 30719, 30814, 30909, 31003,
            31099, 31194, 31290, 31386, 31483,
            31579, 31677, 31774, 31871, 31969,
            32068, 32166, 32265, 32364, 32464,
            32563, 32663, 32764, 32864, 32965,
            33067, 33168, 33270, 33372, 33475,
            33578, 33681, 33785, 33888, 33992,
            34097, 34202, 34307, 34412, 34518,
            34624, 34730, 34837, 34944, 35051,
            35159, 35267, 35376, 35484, 35593,
            35703, 35812, 35922, 36033, 36144,
            36255, 36366, 36478, 36590, 36702,
            36815, 36928, 37042, 37155, 37270,
            37384, 37499, 37614, 37730, 37846,
            37962, 38079, 38196, 38313, 38431,
            38549, 38667, 38786, 38905, 39025,
            39145, 39265, 39386, 39507, 39628,
            39750, 39872, 39994, 40117, 40241,
            40364, 40488, 40613, 40737, 40863,
            40988, 41114, 41240, 41367, 41494,
            41622, 41750, 41878, 42007, 42136,
            42265, 42395, 42525, 42656, 42787,
            42919, 43050, 43183, 43315, 43448,
            43582, 43716, 43850, 43985, 44120,
            44256, 44392, 44528, 44665, 44802,
            44940, 45078, 45216, 45355, 45495,
            45634, 45775, 45915, 46056, 46198,
            46340, 46482, 46625, 46768, 46912,
            47056, 47201, 47346, 47491, 47637,
            47784, 47930, 48078, 48225, 48374,
            48522, 48671, 48821, 48971, 49121,
            49272, 49424, 49576, 49728, 49881,
            50034, 50188, 50342, 50497, 50652,
            50807, 50963, 51120, 51277, 51435,
            51593, 51751, 51910, 52070, 52230,
            52390, 52551, 52713, 52875, 53037,
            53200, 53364, 53528, 53692, 53857,
            54022, 54188, 54355, 54522, 54690,
            54858, 55026, 55195, 55365, 55535,
            55706, 55877, 56048, 56221, 56393,
            56567, 56740, 56915, 57090, 57265,
            57441, 57618, 57795, 57972, 58150,
            58329, 58508, 58688, 58868, 59049,
            59231, 59413, 59595, 59778, 59962,
            60146, 60331, 60516, 60702, 60889,
            61076, 61264, 61452, 61641, 61830,
            62020, 62211, 62402, 62594, 62786,
            62979, 63172, 63366, 63561, 63756,
            63952, 64149, 64346, 64544, 64742,
            64941, 65140, 65341, 65541, 65743,
            65945, 66147, 66351, 66555, 66759,
            66964, 67170, 67376, 67583, 67791,
            67999, 68208, 68418, 68628, 68839,
            69050, 69263, 69475, 69689, 69903,
            70118, 70333, 70549, 70766, 70984,
            71202, 71421, 71640, 71860, 72081,
            72302, 72525, 72747, 72971, 73195,
            73420, 73646, 73872, 74099, 74327,
            74555, 74784, 75014, 75244, 75476,
            75707, 75940, 76173, 76407, 76642,
            76878, 77114, 77351, 77589, 77827,
            78066, 78306, 78547, 78788, 79030,
            79273, 79516, 79761, 80006, 80252,
            80498, 80746, 80994, 81243, 81492,
            81743, 81994, 82246, 82498, 82752,
            83006, 83261, 83517, 83774, 84031,
            84289, 84548, 84808, 85069, 85330,
            85592, 85855, 86119, 86384, 86649,
            86915, 87182, 87450, 87719, 87989,
            88259, 88530, 88802, 89075, 89349,
            89623, 89899, 90175, 90452, 90730,
            91009, 91288, 91569, 91850, 92132,
            92415, 92699, 92984, 93270, 93557,
            93844, 94132, 94422, 94712, 95003,
            95295, 95587, 95881, 96176, 96471,
            96768, 97065, 97363, 97662, 97963,
            98264, 98565, 98868, 99172, 99477,
            99783, 100089, 100397, 100705, 101015,
            101325, 101636, 101949, 102262, 102576,
            102891, 103207, 103525, 103843, 104162,
            104482, 104803, 105125, 105448, 105772,
            106097, 106423, 106750, 107078, 107407,
            107737, 108068, 108400, 108733, 109067,
            109402, 109738, 110076, 110414, 110753,
            111093, 111435, 111777, 112121, 112465,
            112811, 113157, 113505, 113854, 114204,
            114555, 114907, 115260, 115614, 115969,
            116325, 116683, 117041, 117401, 117762,
            118124, 118486, 118851, 119216, 119582,
            119949, 120318, 120688, 121059, 121431,
            121804, 122178, 122553, 122930, 123308,
            123687, 124067, 124448, 124830, 125214,
            125598, 125984, 126371, 126760, 127149,
            127540, 127932, 128325, 128719, 129115,
            129511, 129909, 130309, 130709, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071
         ) ),
        max_error = cms.double(5748.616225984908),
        output_scale_factor = cms.double(0.953125),
        unused_lsbs = cms.uint32(2)
    ),
    inv_mass_checks = cms.untracked.bool(False),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    sanity_checks = cms.untracked.bool(False),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    )
)


process.SingleEGEle51 = cms.EDFilter("L1GTSingleObjectCond",
    maxEta = cms.double(2.4),
    minEta = cms.double(-2.4),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    regionsAbsEtaLowerBounds = cms.vdouble(0, 1.479),
    regionsMinPt = cms.vdouble(41, 40),
    regionsQualityFlags = cms.vuint32(2, 4),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    ),
    tag = cms.InputTag("l1tGTProducer","CL2Photons")
)


process.SingleIsoTkEle28 = cms.EDFilter("L1GTSingleObjectCond",
    maxEta = cms.double(2.4),
    minEta = cms.double(-2.4),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    regionsAbsEtaLowerBounds = cms.vdouble(0, 1.479),
    regionsMaxRelIsolationPt = cms.vdouble(0.13, 0.28),
    regionsMinPt = cms.vdouble(23, 22),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    ),
    tag = cms.InputTag("l1tGTProducer","CL2Electrons")
)


process.SingleIsoTkPho36 = cms.EDFilter("L1GTSingleObjectCond",
    maxEta = cms.double(2.4),
    minEta = cms.double(-2.4),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    regionsAbsEtaLowerBounds = cms.vdouble(0, 1.479),
    regionsMaxRelIsolationPt = cms.vdouble(0.25, 0.205),
    regionsMinPt = cms.vdouble(30, 29),
    regionsQualityFlags = cms.vuint32(2, 4),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    ),
    tag = cms.InputTag("l1tGTProducer","CL2Photons")
)


process.SinglePuppiJet230 = cms.EDFilter("L1GTSingleObjectCond",
    maxEta = cms.double(2.4),
    minEta = cms.double(-2.4),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    regionsAbsEtaLowerBounds = cms.vdouble(0, 1.5),
    regionsMinPt = cms.vdouble(160, 108),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    ),
    tag = cms.InputTag("l1tGTProducer","CL2JetsSC4")
)


process.SingleTkEle36 = cms.EDFilter("L1GTSingleObjectCond",
    maxEta = cms.double(2.4),
    minEta = cms.double(-2.4),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    regionsAbsEtaLowerBounds = cms.vdouble(0, 1.479),
    regionsMinPt = cms.vdouble(30, 29),
    regionsQualityFlags = cms.vuint32(2, 2),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    ),
    tag = cms.InputTag("l1tGTProducer","CL2Electrons")
)


process.SingleTkMuon22 = cms.EDFilter("L1GTSingleObjectCond",
    maxEta = cms.double(2.4),
    minEta = cms.double(-2.4),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    regionsAbsEtaLowerBounds = cms.vdouble(0, 0.83, 1.24),
    regionsMinPt = cms.vdouble(20, 20, 20),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    ),
    tag = cms.InputTag("l1tGTProducer","GMTTkMuons")
)


process.TkEleIsoPuppiHT = cms.EDFilter("L1GTDoubleObjectCond",
    collection1 = cms.PSet(
        maxEta = cms.double(2.1),
        maxPrimVertDz = cms.double(1),
        minEta = cms.double(-2.1),
        primVertex = cms.uint32(0),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 1.479),
        regionsMaxRelIsolationPt = cms.vdouble(0.13, 0.28),
        regionsMinPt = cms.vdouble(21, 20),
        tag = cms.InputTag("l1tGTProducer","CL2Electrons")
    ),
    collection2 = cms.PSet(
        minScalarSumPt = cms.double(131),
        tag = cms.InputTag("l1tGTProducer","CL2HtSum")
    ),
    cos_phi_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            487, 487, 487, 487, 487,
            487, 487, 487, 487, 487,
            487, 486, 486, 486, 486,
            486, 486, 486, 485, 485,
            485, 485, 485, 485, 484,
            484, 484, 484, 484, 483,
            483, 483, 483, 483, 482,
            482, 482, 482, 481, 481,
            481, 481, 480, 480, 480,
            480, 479, 479, 479, 478,
            478, 478, 478, 477, 477,
            477, 476, 476, 476, 475,
            475, 475, 474, 474, 474,
            473, 473, 472, 472, 472,
            471, 471, 471, 470, 470,
            469, 469, 468, 468, 468,
            467, 467, 466, 466, 465,
            465, 465, 464, 464, 463,
            463, 462, 462, 461, 461,
            460, 460, 459, 459, 458,
            458, 457, 457, 456, 456,
            455, 454, 454, 453, 453,
            452, 452, 451, 451, 450,
            449, 449, 448, 448, 447,
            446, 446, 445, 445, 444,
            443, 443, 442, 441, 441,
            440, 440, 439, 438, 438,
            437, 436, 436, 435, 434,
            434, 433, 432, 431, 431,
            430, 429, 429, 428, 427,
            426, 426, 425, 424, 423,
            423, 422, 421, 420, 420,
            419, 418, 417, 417, 416,
            415, 414, 413, 413, 412,
            411, 410, 409, 409, 408,
            407, 406, 405, 405, 404,
            403, 402, 401, 400, 399,
            399, 398, 397, 396, 395,
            394, 393, 392, 392, 391,
            390, 389, 388, 387, 386,
            385, 384, 383, 382, 381,
            381, 380, 379, 378, 377,
            376, 375, 374, 373, 372,
            371, 370, 369, 368, 367,
            366, 365, 364, 363, 362,
            361, 360, 359, 358, 357,
            356, 355, 354, 353, 352,
            351, 350, 349, 348, 347,
            346, 345, 343, 342, 341,
            340, 339, 338, 337, 336,
            335, 334, 333, 332, 330,
            329, 328, 327, 326, 325,
            324, 323, 322, 320, 319,
            318, 317, 316, 315, 314,
            312, 311, 310, 309, 308,
            307, 306, 304, 303, 302,
            301, 300, 298, 297, 296,
            295, 294, 293, 291, 290,
            289, 288, 286, 285, 284,
            283, 282, 280, 279, 278,
            277, 275, 274, 273, 272,
            270, 269, 268, 267, 265,
            264, 263, 262, 260, 259,
            258, 257, 255, 254, 253,
            252, 250, 249, 248, 246,
            245, 244, 242, 241, 240,
            239, 237, 236, 235, 233,
            232, 231, 229, 228, 227,
            225, 224, 223, 221, 220,
            219, 217, 216, 215, 213,
            212, 211, 209, 208, 207,
            205, 204, 203, 201, 200,
            198, 197, 196, 194, 193,
            192, 190, 189, 187, 186,
            185, 183, 182, 181, 179,
            178, 176, 175, 174, 172,
            171, 169, 168, 167, 165,
            164, 162, 161, 159, 158,
            157, 155, 154, 152, 151,
            150, 148, 147, 145, 144,
            142, 141, 140, 138, 137,
            135, 134, 132, 131, 129,
            128, 127, 125, 124, 122,
            121, 119, 118, 116, 115,
            113, 112, 111, 109, 108,
            106, 105, 103, 102, 100,
            99, 97, 96, 94, 93,
            92, 90, 89, 87, 86,
            84, 83, 81, 80, 78,
            77, 75, 74, 72, 71,
            69, 68, 66, 65, 63,
            62, 60, 59, 58, 56,
            55, 53, 52, 50, 49,
            47, 46, 44, 43, 41,
            40, 38, 37, 35, 34,
            32, 31, 29, 28, 26,
            25, 23, 22, 20, 19,
            17, 16, 14, 13, 11,
            10, 8, 7, 5, 4,
            2, 1, -1, -2, -4,
            -5, -7, -8, -10, -11,
            -13, -14, -16, -17, -19,
            -20, -22, -23, -25, -26,
            -28, -29, -31, -32, -34,
            -35, -37, -38, -40, -41,
            -43, -44, -46, -47, -49,
            -50, -52, -53, -55, -56,
            -58, -59, -60, -62, -63,
            -65, -66, -68, -69, -71,
            -72, -74, -75, -77, -78,
            -80, -81, -83, -84, -86,
            -87, -89, -90, -92, -93,
            -94, -96, -97, -99, -100,
            -102, -103, -105, -106, -108,
            -109, -111, -112, -113, -115,
            -116, -118, -119, -121, -122,
            -124, -125, -127, -128, -129,
            -131, -132, -134, -135, -137,
            -138, -140, -141, -142, -144,
            -145, -147, -148, -150, -151,
            -152, -154, -155, -157, -158,
            -159, -161, -162, -164, -165,
            -167, -168, -169, -171, -172,
            -174, -175, -176, -178, -179,
            -181, -182, -183, -185, -186,
            -187, -189, -190, -192, -193,
            -194, -196, -197, -198, -200,
            -201, -203, -204, -205, -207,
            -208, -209, -211, -212, -213,
            -215, -216, -217, -219, -220,
            -221, -223, -224, -225, -227,
            -228, -229, -231, -232, -233,
            -235, -236, -237, -239, -240,
            -241, -242, -244, -245, -246,
            -248, -249, -250, -252, -253,
            -254, -255, -257, -258, -259,
            -260, -262, -263, -264, -265,
            -267, -268, -269, -270, -272,
            -273, -274, -275, -277, -278,
            -279, -280, -282, -283, -284,
            -285, -286, -288, -289, -290,
            -291, -293, -294, -295, -296,
            -297, -298, -300, -301, -302,
            -303, -304, -306, -307, -308,
            -309, -310, -311, -312, -314,
            -315, -316, -317, -318, -319,
            -320, -322, -323, -324, -325,
            -326, -327, -328, -329, -330,
            -332, -333, -334, -335, -336,
            -337, -338, -339, -340, -341,
            -342, -343, -345, -346, -347,
            -348, -349, -350, -351, -352,
            -353, -354, -355, -356, -357,
            -358, -359, -360, -361, -362,
            -363, -364, -365, -366, -367,
            -368, -369, -370, -371, -372,
            -373, -374, -375, -376, -377,
            -378, -379, -380, -381, -381,
            -382, -383, -384, -385, -386,
            -387, -388, -389, -390, -391,
            -392, -392, -393, -394, -395,
            -396, -397, -398, -399, -399,
            -400, -401, -402, -403, -404,
            -405, -405, -406, -407, -408,
            -409, -409, -410, -411, -412,
            -413, -413, -414, -415, -416,
            -417, -417, -418, -419, -420,
            -420, -421, -422, -423, -423,
            -424, -425, -426, -426, -427,
            -428, -429, -429, -430, -431,
            -431, -432, -433, -434, -434,
            -435, -436, -436, -437, -438,
            -438, -439, -440, -440, -441,
            -441, -442, -443, -443, -444,
            -445, -445, -446, -446, -447,
            -448, -448, -449, -449, -450,
            -451, -451, -452, -452, -453,
            -453, -454, -454, -455, -456,
            -456, -457, -457, -458, -458,
            -459, -459, -460, -460, -461,
            -461, -462, -462, -463, -463,
            -464, -464, -465, -465, -465,
            -466, -466, -467, -467, -468,
            -468, -468, -469, -469, -470,
            -470, -471, -471, -471, -472,
            -472, -472, -473, -473, -474,
            -474, -474, -475, -475, -475,
            -476, -476, -476, -477, -477,
            -477, -478, -478, -478, -478,
            -479, -479, -479, -480, -480,
            -480, -480, -481, -481, -481,
            -481, -482, -482, -482, -482,
            -483, -483, -483, -483, -483,
            -484, -484, -484, -484, -484,
            -485, -485, -485, -485, -485,
            -485, -486, -486, -486, -486,
            -486, -486, -486, -487, -487,
            -487, -487, -487, -487, -487,
            -487, -487, -487, -487, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488
         ) ),
        max_error = cms.double(0.0025338281044886835),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            489, 489, 489, 489, 489,
            489, 489, 489, 489, 489,
            489, 490, 490, 490, 490,
            490, 490, 490, 491, 491,
            491, 491, 491, 491, 492,
            492, 492, 492, 492, 493,
            493, 493, 493, 493, 494,
            494, 494, 494, 495, 495,
            495, 495, 496, 496, 496,
            496, 497, 497, 497, 498,
            498, 498, 499, 499, 499,
            499, 500, 500, 500, 501,
            501, 502, 502, 502, 503,
            503, 503, 504, 504, 504,
            505, 505, 506, 506, 507,
            507, 507, 508, 508, 509,
            509, 510, 510, 510, 511,
            511, 512, 512, 513, 513,
            514, 514, 515, 515, 516,
            516, 517, 517, 518, 518,
            519, 520, 520, 521, 521,
            522, 522, 523, 523, 524,
            525, 525, 526, 526, 527,
            528, 528, 529, 530, 530,
            531, 531, 532, 533, 533,
            534, 535, 535, 536, 537,
            537, 538, 539, 540, 540,
            541, 542, 542, 543, 544,
            545, 545, 546, 547, 548,
            548, 549, 550, 551, 551,
            552, 553, 554, 555, 555,
            556, 557, 558, 559, 560,
            560, 561, 562, 563, 564,
            565, 566, 567, 567, 568,
            569, 570, 571, 572, 573,
            574, 575, 576, 577, 577,
            578, 579, 580, 581, 582,
            583, 584, 585, 586, 587,
            588, 589, 590, 591, 592,
            593, 594, 595, 596, 598,
            599, 600, 601, 602, 603,
            604, 605, 606, 607, 608,
            610, 611, 612, 613, 614,
            615, 616, 618, 619, 620,
            621, 622, 623, 625, 626,
            627, 628, 629, 631, 632,
            633, 634, 636, 637, 638,
            639, 641, 642, 643, 644,
            646, 647, 648, 650, 651,
            652, 654, 655, 656, 658,
            659, 660, 662, 663, 665,
            666, 667, 669, 670, 672,
            673, 674, 676, 677, 679,
            680, 682, 683, 685, 686,
            687, 689, 690, 692, 693,
            695, 697, 698, 700, 701,
            703, 704, 706, 707, 709,
            710, 712, 714, 715, 717,
            719, 720, 722, 723, 725,
            727, 728, 730, 732, 733,
            735, 737, 738, 740, 742,
            744, 745, 747, 749, 750,
            752, 754, 756, 758, 759,
            761, 763, 765, 767, 768,
            770, 772, 774, 776, 778,
            779, 781, 783, 785, 787,
            789, 791, 793, 795, 796,
            798, 800, 802, 804, 806,
            808, 810, 812, 814, 816,
            818, 820, 822, 824, 826,
            828, 830, 832, 835, 837,
            839, 841, 843, 845, 847,
            849, 851, 854, 856, 858,
            860, 862, 864, 867, 869,
            871, 873, 875, 878, 880,
            882, 884, 887, 889, 891,
            894, 896, 898, 900, 903,
            905, 907, 910, 912, 915,
            917, 919, 922, 924, 927,
            929, 931, 934, 936, 939,
            941, 944, 946, 949, 951,
            954, 956, 959, 961, 964,
            966, 969, 971, 974, 977,
            979, 982, 984, 987, 990,
            992, 995, 998, 1000, 1003,
            1006, 1008, 1011, 1014, 1017,
            1019, 1022, 1025, 1028, 1030,
            1033, 1036, 1039, 1042, 1044,
            1047, 1050, 1053, 1056, 1059,
            1062, 1065, 1067, 1070, 1073,
            1076, 1079, 1082, 1085, 1088,
            1091, 1094, 1097, 1100, 1103,
            1106, 1109, 1112, 1115, 1118,
            1122, 1125, 1128, 1131, 1134,
            1137, 1140, 1143, 1147, 1150,
            1153, 1156, 1159, 1163, 1166,
            1169, 1172, 1176, 1179, 1182,
            1186, 1189, 1192, 1196, 1199,
            1202, 1206, 1209, 1212, 1216,
            1219, 1223, 1226, 1230, 1233,
            1237, 1240, 1244, 1247, 1251,
            1254, 1258, 1261, 1265, 1268,
            1272, 1276, 1279, 1283, 1287,
            1290, 1294, 1298, 1301, 1305,
            1309, 1312, 1316, 1320, 1324,
            1327, 1331, 1335, 1339, 1343,
            1347, 1350, 1354, 1358, 1362,
            1366, 1370, 1374, 1378, 1382,
            1386, 1390, 1394, 1398, 1402,
            1406, 1410, 1414, 1418, 1422,
            1426, 1430, 1434, 1439, 1443,
            1447, 1451, 1455, 1459, 1464,
            1468, 1472, 1476, 1481, 1485,
            1489, 1494, 1498, 1502, 1507,
            1511, 1516, 1520, 1524, 1529,
            1533, 1538, 1542, 1547, 1551,
            1556, 1560, 1565, 1569, 1574,
            1579, 1583, 1588, 1592, 1597,
            1602, 1606, 1611, 1616, 1621,
            1625, 1630, 1635, 1640, 1645,
            1649, 1654, 1659, 1664, 1669,
            1674, 1679, 1684, 1689, 1693,
            1698, 1703, 1708, 1714, 1719,
            1724, 1729, 1734, 1739, 1744,
            1749, 1754, 1760, 1765, 1770,
            1775, 1780, 1786, 1791, 1796,
            1802, 1807, 1812, 1818, 1823,
            1828, 1834, 1839, 1845, 1850,
            1856, 1861, 1867, 1872, 1878,
            1883, 1889, 1894, 1900, 1906,
            1911, 1917, 1923, 1929, 1934,
            1940, 1946, 1952, 1957, 1963,
            1969, 1975, 1981, 1987, 1993,
            1999, 2004, 2010, 2016, 2022,
            2028, 2035, 2041, 2047, 2053,
            2059, 2065, 2071, 2077, 2084,
            2090, 2096, 2102, 2109, 2115,
            2121, 2128, 2134, 2140, 2147,
            2153, 2160, 2166, 2173, 2179,
            2186, 2192, 2199, 2205, 2212,
            2219, 2225, 2232, 2239, 2245,
            2252, 2259, 2266, 2272, 2279,
            2286, 2293, 2300, 2307, 2314,
            2321, 2328, 2335, 2342, 2349,
            2356, 2363, 2370, 2377, 2384,
            2391, 2398, 2406, 2413, 2420,
            2427, 2435, 2442, 2449, 2457,
            2464, 2472, 2479, 2487, 2494,
            2502, 2509, 2517, 2524, 2532,
            2539, 2547, 2555, 2563, 2570,
            2578, 2586, 2594, 2601, 2609,
            2617, 2625, 2633, 2641, 2649,
            2657, 2665, 2673, 2681, 2689,
            2697, 2705, 2714, 2722, 2730,
            2738, 2747, 2755, 2763, 2772,
            2780, 2788, 2797, 2805, 2814,
            2822, 2831, 2839, 2848, 2857,
            2865, 2874, 2883, 2891, 2900,
            2909, 2918, 2927, 2935, 2944,
            2953, 2962, 2971, 2980, 2989,
            2998, 3007, 3016, 3026, 3035,
            3044, 3053, 3062, 3072, 3081,
            3090, 3100, 3109, 3119, 3128,
            3138, 3147, 3157, 3166, 3176,
            3186, 3195, 3205, 3215, 3224,
            3234, 3244, 3254, 3264, 3274,
            3284, 3294, 3304, 3314, 3324,
            3334, 3344, 3354, 3364, 3375,
            3385, 3395, 3405, 3416, 3426,
            3437, 3447, 3458, 3468, 3479,
            3489, 3500, 3510, 3521, 3532,
            3543, 3553, 3564, 3575, 3586,
            3597, 3608, 3619, 3630, 3641,
            3652, 3663, 3674, 3685, 3697,
            3708, 3719, 3730, 3742, 3753,
            3765, 3776, 3788, 3799, 3811,
            3822, 3834, 3846, 3857, 3869,
            3881, 3893, 3905, 3917, 3929,
            3941, 3953, 3965, 3977, 3989,
            4001, 4013, 4025, 4038, 4050,
            4062, 4075, 4087, 4100, 4112,
            4125, 4137, 4150, 4163, 4175,
            4188, 4201, 4214, 4226, 4239,
            4252, 4265, 4278, 4291, 4304,
            4318, 4331, 4344, 4357, 4371,
            4384, 4397, 4411, 4424, 4438,
            4451, 4465, 4479, 4492, 4506,
            4520, 4533, 4547, 4561, 4575,
            4589, 4603, 4617, 4631, 4645,
            4660, 4674, 4688, 4703, 4717,
            4731, 4746, 4760, 4775, 4789,
            4804, 4819, 4833, 4848, 4863,
            4878, 4893, 4908, 4923, 4938,
            4953, 4968, 4983, 4999, 5014,
            5029, 5045, 5060, 5075, 5091,
            5107, 5122, 5138, 5154, 5169,
            5185, 5201, 5217, 5233, 5249,
            5265, 5281, 5297, 5313, 5330,
            5346, 5362, 5379, 5395, 5412,
            5428, 5445, 5462, 5478, 5495,
            5512, 5529, 5546, 5563, 5580,
            5597, 5614, 5631, 5648, 5666,
            5683, 5700, 5718, 5735, 5753,
            5770, 5788, 5806, 5824, 5841,
            5859, 5877, 5895, 5913, 5931,
            5950, 5968, 5986, 6004, 6023,
            6041, 6060, 6078, 6097, 6116,
            6134, 6153, 6172, 6191, 6210,
            6229, 6248, 6267, 6286, 6305,
            6325, 6344, 6364, 6383, 6403,
            6422, 6442, 6462, 6481, 6501,
            6521, 6541, 6561, 6581, 6602,
            6622, 6642, 6662, 6683, 6703,
            6724, 6744, 6765, 6786, 6807,
            6828, 6848, 6869, 6891, 6912,
            6933, 6954, 6975, 6997, 7018,
            7040, 7061, 7083, 7105, 7126,
            7148, 7170, 7192, 7214, 7236,
            7259, 7281, 7303, 7325, 7348,
            7370, 7393, 7416, 7438, 7461,
            7484, 7507, 7530, 7553, 7576,
            7600, 7623, 7646, 7670, 7693,
            7717, 7741, 7764, 7788, 7812,
            7836, 7860, 7884, 7908, 7932,
            7957, 7981, 8006, 8030, 8055,
            8080, 8104, 8129, 8154, 8179,
            8204, 8229, 8255, 8280, 8305,
            8331, 8356, 8382, 8408, 8434,
            8459, 8485, 8511, 8537, 8564,
            8590, 8616, 8643, 8669, 8696,
            8722, 8749, 8776, 8803, 8830,
            8857, 8884, 8912, 8939, 8966,
            8994, 9021, 9049, 9077, 9105,
            9133, 9161, 9189, 9217, 9245,
            9274, 9302, 9331, 9359, 9388,
            9417, 9446, 9475, 9504, 9533,
            9562, 9591, 9621, 9650, 9680,
            9710, 9740, 9769, 9799, 9830,
            9860, 9890, 9920, 9951, 9981,
            10012, 10043, 10073, 10104, 10135,
            10166, 10198, 10229, 10260, 10292,
            10323, 10355, 10387, 10419, 10451,
            10483, 10515, 10547, 10580, 10612,
            10645, 10677, 10710, 10743, 10776,
            10809, 10842, 10876, 10909, 10942,
            10976, 11010, 11044, 11077, 11111,
            11146, 11180, 11214, 11248, 11283,
            11318, 11352, 11387, 11422, 11457,
            11492, 11528, 11563, 11599, 11634,
            11670, 11706, 11742, 11778, 11814,
            11850, 11887, 11923, 11960, 11996,
            12033, 12070, 12107, 12144, 12182,
            12219, 12257, 12294, 12332, 12370,
            12408, 12446, 12484, 12522, 12561,
            12599, 12638, 12677, 12716, 12755,
            12794, 12833, 12873, 12912, 12952,
            12992, 13032, 13072, 13112, 13152,
            13192, 13233, 13274, 13314, 13355,
            13396, 13437, 13479, 13520, 13561,
            13603, 13645, 13687, 13729, 13771,
            13813, 13856, 13898, 13941, 13984,
            14027, 14070, 14113, 14156, 14200,
            14243, 14287, 14331, 14375, 14419,
            14463, 14508, 14552, 14597, 14642,
            14687, 14732, 14777, 14823, 14868,
            14914, 14960, 15005, 15052, 15098,
            15144, 15191, 15237, 15284, 15331,
            15378, 15425, 15473, 15520, 15568,
            15616, 15664, 15712, 15760, 15808,
            15857, 15906, 15955, 16004, 16053,
            16102, 16151, 16201, 16251, 16301,
            16351, 16401, 16451, 16502, 16553,
            16603, 16654, 16706, 16757, 16808,
            16860, 16912, 16964, 17016, 17068,
            17121, 17173, 17226, 17279, 17332,
            17385, 17438, 17492, 17546, 17600,
            17654, 17708, 17762, 17817, 17872,
            17926, 17982, 18037, 18092, 18148,
            18203, 18259, 18315, 18372, 18428,
            18485, 18542, 18598, 18656, 18713,
            18770, 18828, 18886, 18944, 19002,
            19060, 19119, 19178, 19237, 19296,
            19355, 19414, 19474, 19534, 19594,
            19654, 19714, 19775, 19836, 19897,
            19958, 20019, 20081, 20142, 20204,
            20266, 20328, 20391, 20454, 20516,
            20579, 20643, 20706, 20770, 20833,
            20897, 20962, 21026, 21091, 21155,
            21220, 21286, 21351, 21417, 21482,
            21548, 21615, 21681, 21748, 21814,
            21881, 21949, 22016, 22084, 22151,
            22220, 22288, 22356, 22425, 22494,
            22563, 22632, 22702, 22771, 22841,
            22912, 22982, 23053, 23123, 23194,
            23266, 23337, 23409, 23481, 23553,
            23625, 23698, 23771, 23844, 23917,
            23990, 24064, 24138, 24212, 24287,
            24361, 24436, 24511, 24586, 24662,
            24738, 24814, 24890, 24966, 25043,
            25120, 25197, 25275, 25352, 25430,
            25508, 25587, 25665, 25744, 25823,
            25902, 25982, 26062, 26142, 26222,
            26303, 26384, 26465, 26546, 26627,
            26709, 26791, 26874, 26956, 27039,
            27122, 27205, 27289, 27373, 27457,
            27541, 27626, 27711, 27796, 27881,
            27967, 28053, 28139, 28226, 28312,
            28399, 28486, 28574, 28662, 28750,
            28838, 28927, 29016, 29105, 29194,
            29284, 29374, 29464, 29555, 29645,
            29736, 29828, 29919, 30011, 30104,
            30196, 30289, 30382, 30475, 30569,
            30663, 30757, 30851, 30946, 31041,
            31137, 31232, 31328, 31425, 31521,
            31618, 31715, 31813, 31910, 32008,
            32107, 32205, 32304, 32403, 32503,
            32603, 32703, 32804, 32904, 33005,
            33107, 33209, 33311, 33413, 33516,
            33619, 33722, 33825, 33929, 34034,
            34138, 34243, 34348, 34454, 34560,
            34666, 34772, 34879, 34986, 35094,
            35202, 35310, 35418, 35527, 35636,
            35746, 35856, 35966, 36076, 36187,
            36298, 36410, 36522, 36634, 36746,
            36859, 36973, 37086, 37200, 37314,
            37429, 37544, 37659, 37775, 37891,
            38008, 38124, 38241, 38359, 38477,
            38595, 38714, 38833, 38952, 39072,
            39192, 39312, 39433, 39554, 39675,
            39797, 39920, 40042, 40165, 40289,
            40413, 40537, 40661, 40786, 40911,
            41037, 41163, 41290, 41417, 41544,
            41671, 41800, 41928, 42057, 42186,
            42316, 42446, 42576, 42707, 42838,
            42970, 43102, 43234, 43367, 43500,
            43634, 43768, 43902, 44037, 44173,
            44308, 44444, 44581, 44718, 44855,
            44993, 45131, 45270, 45409, 45549,
            45689, 45829, 45970, 46111, 46253,
            46395, 46537, 46680, 46824, 46968,
            47112, 47257, 47402, 47548, 47694,
            47840, 47987, 48135, 48283, 48431,
            48580, 48729, 48879, 49029, 49180,
            49331, 49482, 49634, 49787, 49940,
            50093, 50247, 50401, 50556, 50712,
            50867, 51024, 51181, 51338, 51495,
            51654, 51812, 51972, 52131, 52291,
            52452, 52613, 52775, 52937, 53100,
            53263, 53427, 53591, 53755, 53921,
            54086, 54252, 54419, 54586, 54754,
            54922, 55091, 55260, 55430, 55600,
            55771, 55943, 56114, 56287, 56460,
            56633, 56807, 56982, 57157, 57333,
            57509, 57685, 57863, 58040, 58219,
            58398, 58577, 58757, 58938, 59119,
            59300, 59483, 59665, 59849, 60033,
            60217, 60402, 60588, 60774, 60960,
            61148, 61336, 61524, 61713, 61903,
            62093, 62284, 62475, 62667, 62860,
            63053, 63247, 63441, 63636, 63831,
            64027, 64224, 64422, 64619, 64818,
            65017, 65217, 65417, 65618, 65820,
            66022, 66225, 66429, 66633, 66837,
            67043, 67249, 67455, 67663, 67870,
            68079, 68288, 68498, 68708, 68920,
            69131, 69344, 69557, 69771, 69985,
            70200, 70416, 70632, 70849, 71067,
            71285, 71504, 71724, 71944, 72165,
            72387, 72609, 72833, 73056, 73281,
            73506, 73732, 73958, 74186, 74414,
            74642, 74872, 75102, 75332, 75564,
            75796, 76029, 76262, 76497, 76732,
            76968, 77204, 77441, 77679, 77918,
            78157, 78398, 78638, 78880, 79122,
            79366, 79609, 79854, 80099, 80345,
            80592, 80840, 81088, 81338, 81587,
            81838, 82090, 82342, 82595, 82849,
            83103, 83358, 83615, 83872, 84129,
            84388, 84647, 84907, 85168, 85430,
            85692, 85955, 86220, 86485, 86750,
            87017, 87284, 87552, 87821, 88091,
            88362, 88633, 88906, 89179, 89453,
            89728, 90003, 90280, 90557, 90836,
            91115, 91395, 91676, 91957, 92240,
            92523, 92807, 93093, 93379, 93666,
            93953, 94242, 94532, 94822, 95113,
            95406, 95699, 95993, 96288, 96584,
            96881, 97178, 97477, 97776, 98077,
            98378, 98680, 98984, 99288, 99593,
            99899, 100206, 100514, 100822, 101132,
            101443, 101755, 102067, 102381, 102696,
            103011, 103328, 103645, 103964, 104283,
            104603, 104925, 105247, 105571, 105895,
            106220, 106547, 106874, 107203, 107532,
            107862, 108194, 108526, 108860, 109194,
            109530, 109866, 110204, 110542, 110882,
            111223, 111565, 111907, 112251, 112596,
            112942, 113289, 113637, 113986, 114337,
            114688, 115040, 115394, 115748, 116104,
            116461, 116819, 117178, 117538, 117899,
            118261, 118624, 118989, 119354, 119721,
            120089, 120458, 120828, 121199, 121572,
            121945, 122320, 122696, 123073, 123451,
            123830, 124211, 124593, 124975, 125359,
            125745, 126131, 126518, 126907, 127297,
            127688, 128081, 128474, 128869, 129265,
            129662, 130061, 130260
         ) ),
        max_error = cms.double(0.6152529479288091),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut2 = cms.PSet(
        lut = cms.vint32( (
            256, 256, 257, 258, 259,
            260, 260, 261, 262, 263,
            264, 264, 265, 266, 267,
            268, 268, 269, 270, 271,
            272, 273, 273, 274, 275,
            276, 277, 278, 279, 279,
            280, 281, 282, 283, 284,
            285, 285, 286, 287, 288,
            289, 290, 291, 292, 293,
            293, 294, 295, 296, 297,
            298, 299, 300, 301, 302,
            303, 303, 304, 305, 306,
            307, 308, 309, 310, 311,
            312, 313, 314, 315, 316,
            317, 318, 319, 320, 321,
            322, 323, 324, 325, 326,
            327, 328, 329, 330, 331,
            332, 333, 334, 335, 336,
            337, 338, 339, 340, 341,
            342, 343, 344, 345, 346,
            347, 348, 349, 351, 352,
            353, 354, 355, 356, 357,
            358, 359, 360, 361, 363,
            364, 365, 366, 367, 368,
            369, 370, 372, 373, 374,
            375, 376, 377, 379, 380,
            381, 382, 383, 384, 386,
            387, 388, 389, 390, 392,
            393, 394, 395, 396, 398,
            399, 400, 401, 402, 404,
            405, 406, 407, 409, 410,
            411, 412, 414, 415, 416,
            418, 419, 420, 421, 423,
            424, 425, 427, 428, 429,
            431, 432, 433, 435, 436,
            437, 439, 440, 441, 443,
            444, 445, 447, 448, 449,
            451, 452, 454, 455, 456,
            458, 459, 461, 462, 463,
            465, 466, 468, 469, 471,
            472, 474, 475, 476, 478,
            479, 481, 482, 484, 485,
            487, 488, 490, 491, 493,
            494, 496, 497, 499, 500,
            502, 503, 505, 507, 508,
            510, 511, 513, 514, 516,
            518, 519, 521, 522, 524,
            526, 527, 529, 530, 532,
            534, 535, 537, 539, 540,
            542, 544, 545, 547, 549,
            550, 552, 554, 555, 557,
            559, 561, 562, 564, 566,
            567, 569, 571, 573, 575,
            576, 578, 580, 582, 583,
            585, 587, 589, 591, 592,
            594, 596, 598, 600, 602,
            603, 605, 607, 609, 611,
            613, 615, 617, 618, 620,
            622, 624, 626, 628, 630,
            632, 634, 636, 638, 640,
            642, 644, 646, 648, 650,
            652, 654, 656, 658, 660,
            662, 664, 666, 668, 670,
            672, 674, 676, 678, 680,
            682, 684, 686, 688, 691,
            693, 695, 697, 699, 701,
            703, 706, 708, 710, 712,
            714, 717, 719, 721, 723,
            725, 728, 730, 732, 734,
            737, 739, 741, 743, 746,
            748, 750, 753, 755, 757,
            760, 762, 764, 767, 769,
            771, 774, 776, 778, 781,
            783, 786, 788, 790, 793,
            795, 798, 800, 803, 805,
            808, 810, 813, 815, 818,
            820, 823, 825, 828, 830,
            833, 835, 838, 840, 843,
            846, 848, 851, 853, 856,
            859, 861, 864, 867, 869,
            872, 875, 877, 880, 883,
            885, 888, 891, 894, 896,
            899, 902, 905, 907, 910,
            913, 916, 919, 921, 924,
            927, 930, 933, 936, 939,
            941, 944, 947, 950, 953,
            956, 959, 962, 965, 968,
            971, 974, 977, 980, 983,
            986, 989, 992, 995, 998,
            1001, 1004, 1007, 1010, 1013,
            1017, 1020, 1023, 1026, 1029,
            1032, 1035, 1039, 1042, 1045,
            1048, 1051, 1055, 1058, 1061,
            1064, 1068, 1071, 1074, 1078,
            1081, 1084, 1088, 1091, 1094,
            1098, 1101, 1104, 1108, 1111,
            1115, 1118, 1121, 1125, 1128,
            1132, 1135, 1139, 1142, 1146,
            1149, 1153, 1156, 1160, 1163,
            1167, 1171, 1174, 1178, 1181,
            1185, 1189, 1192, 1196, 1200,
            1203, 1207, 1211, 1214, 1218,
            1222, 1226, 1229, 1233, 1237,
            1241, 1245, 1249, 1252, 1256,
            1260, 1264, 1268, 1272, 1276,
            1280, 1283, 1287, 1291, 1295,
            1299, 1303, 1307, 1311, 1315,
            1319, 1323, 1328, 1332, 1336,
            1340, 1344, 1348, 1352, 1356,
            1360, 1365, 1369, 1373, 1377,
            1382, 1386, 1390, 1394, 1399,
            1403, 1407, 1412, 1416, 1420,
            1425, 1429, 1433, 1438, 1442,
            1447, 1451, 1455, 1460, 1464,
            1469, 1473, 1478, 1483, 1487,
            1492, 1496, 1501, 1505, 1510,
            1515, 1519, 1524, 1529, 1533,
            1538, 1543, 1548, 1552, 1557,
            1562, 1567, 1572, 1576, 1581,
            1586, 1591, 1596, 1601, 1606,
            1611, 1616, 1620, 1625, 1630,
            1635, 1640, 1646, 1651, 1656,
            1661, 1666, 1671, 1676, 1681,
            1686, 1692, 1697, 1702, 1707,
            1712, 1718, 1723, 1728, 1734,
            1739, 1744, 1750, 1755, 1760,
            1766, 1771, 1777, 1782, 1788,
            1793, 1799, 1804, 1810, 1815,
            1821, 1826, 1832, 1838, 1843,
            1849, 1855, 1860, 1866, 1872,
            1878, 1883, 1889, 1895, 1901,
            1907, 1912, 1918, 1924, 1930,
            1936, 1942, 1948, 1954, 1960,
            1966, 1972, 1978, 1984, 1990,
            1996, 2003, 2009, 2015, 2021,
            2027, 2033, 2040, 2046, 2052,
            2059, 2065, 2071, 2078, 2084,
            2090, 2097, 2103, 2110, 2116,
            2123, 2129, 2136, 2142, 2149,
            2156, 2162, 2169, 2175, 2182,
            2189, 2196, 2202, 2209, 2216,
            2223, 2230, 2236, 2243, 2250,
            2257, 2264, 2271, 2278, 2285,
            2292, 2299, 2306, 2313, 2320,
            2327, 2335, 2342, 2349, 2356,
            2363, 2371, 2378, 2385, 2393,
            2400, 2407, 2415, 2422, 2430,
            2437, 2444, 2452, 2460, 2467,
            2475, 2482, 2490, 2498, 2505,
            2513, 2521, 2528, 2536, 2544,
            2552, 2560, 2567, 2575, 2583,
            2591, 2599, 2607, 2615, 2623,
            2631, 2639, 2647, 2656, 2664,
            2672, 2680, 2688, 2697, 2705,
            2713, 2722, 2730, 2738, 2747,
            2755, 2764, 2772, 2781, 2789,
            2798, 2806, 2815, 2824, 2832,
            2841, 2850, 2858, 2867, 2876,
            2885, 2894, 2903, 2912, 2921,
            2930, 2939, 2948, 2957, 2966,
            2975, 2984, 2993, 3002, 3012,
            3021, 3030, 3039, 3049, 3058,
            3067, 3077, 3086, 3096, 3105,
            3115, 3124, 3134, 3144, 3153,
            3163, 3173, 3183, 3192, 3202,
            3212, 3222, 3232, 3242, 3252,
            3262, 3272, 3282, 3292, 3302,
            3312, 3322, 3332, 3343, 3353,
            3363, 3374, 3384, 3394, 3405,
            3415, 3426, 3436, 3447, 3457,
            3468, 3479, 3489, 3500, 3511,
            3522, 3532, 3543, 3554, 3565,
            3576, 3587, 3598, 3609, 3620,
            3631, 3642, 3654, 3665, 3676,
            3687, 3699, 3710, 3722, 3733,
            3744, 3756, 3767, 3779, 3791,
            3802, 3814, 3826, 3837, 3849,
            3861, 3873, 3885, 3897, 3909,
            3921, 3933, 3945, 3957, 3969,
            3981, 3994, 4006, 4018, 4031,
            4043, 4055, 4068, 4080, 4093,
            4105, 4118, 4131, 4143, 4156,
            4169, 4182, 4195, 4207, 4220,
            4233, 4246, 4259, 4272, 4286,
            4299, 4312, 4325, 4339, 4352,
            4365, 4379, 4392, 4406, 4419,
            4433, 4446, 4460, 4474, 4487,
            4501, 4515, 4529, 4543, 4557,
            4571, 4585, 4599, 4613, 4627,
            4641, 4656, 4670, 4684, 4699,
            4713, 4728, 4742, 4757, 4771,
            4786, 4801, 4816, 4830, 4845,
            4860, 4875, 4890, 4905, 4920,
            4935, 4950, 4966, 4981, 4996,
            5011, 5027, 5042, 5058, 5073,
            5089, 5105, 5120, 5136, 5152,
            5168, 5183, 5199, 5215, 5231,
            5247, 5264, 5280, 5296, 5312,
            5329, 5345, 5361, 5378, 5394,
            5411, 5428, 5444, 5461, 5478,
            5495, 5512, 5528, 5545, 5562,
            5580, 5597, 5614, 5631, 5648,
            5666, 5683, 5701, 5718, 5736,
            5753, 5771, 5789, 5807, 5824,
            5842, 5860, 5878, 5896, 5914,
            5933, 5951, 5969, 5987, 6006,
            6024, 6043, 6061, 6080, 6099,
            6117, 6136, 6155, 6174, 6193,
            6212, 6231, 6250, 6269, 6289,
            6308, 6327, 6347, 6366, 6386,
            6406, 6425, 6445, 6465, 6485,
            6505, 6525, 6545, 6565, 6585,
            6605, 6625, 6646, 6666, 6687,
            6707, 6728, 6749, 6769, 6790,
            6811, 6832, 6853, 6874, 6895,
            6916, 6937, 6959, 6980, 7002,
            7023, 7045, 7066, 7088, 7110,
            7132, 7154, 7176, 7198, 7220,
            7242, 7264, 7286, 7309, 7331,
            7354, 7376, 7399, 7422, 7445,
            7468, 7490, 7513, 7537, 7560,
            7583, 7606, 7630, 7653, 7677,
            7700, 7724, 7748, 7771, 7795,
            7819, 7843, 7867, 7892, 7916,
            7940, 7964, 7989, 8014, 8038,
            8063, 8088, 8112, 8137, 8162,
            8187, 8213, 8238, 8263, 8289,
            8314, 8340, 8365, 8391, 8417,
            8443, 8468, 8495, 8521, 8547,
            8573, 8599, 8626, 8652, 8679,
            8706, 8732, 8759, 8786, 8813,
            8840, 8867, 8895, 8922, 8949,
            8977, 9004, 9032, 9060, 9088,
            9116, 9144, 9172, 9200, 9228,
            9256, 9285, 9313, 9342, 9371,
            9400, 9428, 9457, 9486, 9516,
            9545, 9574, 9604, 9633, 9663,
            9692, 9722, 9752, 9782, 9812,
            9842, 9872, 9903, 9933, 9964,
            9994, 10025, 10056, 10087, 10118,
            10149, 10180, 10211, 10243, 10274,
            10306, 10337, 10369, 10401, 10433,
            10465, 10497, 10529, 10562, 10594,
            10627, 10659, 10692, 10725, 10758,
            10791, 10824, 10858, 10891, 10924,
            10958, 10992, 11025, 11059, 11093,
            11127, 11161, 11196, 11230, 11265,
            11299, 11334, 11369, 11404, 11439,
            11474, 11509, 11545, 11580, 11616,
            11651, 11687, 11723, 11759, 11795,
            11831, 11868, 11904, 11941, 11978,
            12014, 12051, 12088, 12125, 12163,
            12200, 12238, 12275, 12313, 12351,
            12389, 12427, 12465, 12503, 12542,
            12580, 12619, 12658, 12696, 12735,
            12775, 12814, 12853, 12893, 12932,
            12972, 13012, 13052, 13092, 13132,
            13173, 13213, 13254, 13294, 13335,
            13376, 13417, 13459, 13500, 13541,
            13583, 13625, 13667, 13709, 13751,
            13793, 13835, 13878, 13920, 13963,
            14006, 14049, 14092, 14136, 14179,
            14223, 14266, 14310, 14354, 14398,
            14443, 14487, 14531, 14576, 14621,
            14666, 14711, 14756, 14801, 14847,
            14892, 14938, 14984, 15030, 15076,
            15123, 15169, 15216, 15263, 15309,
            15356, 15404, 15451, 15498, 15546,
            15594, 15642, 15690, 15738, 15786,
            15835, 15884, 15932, 15981, 16030,
            16080, 16129, 16179, 16228, 16278,
            16328, 16378, 16429, 16479, 16530,
            16581, 16632, 16683, 16734, 16785,
            16837, 16889, 16941, 16993, 17045,
            17097, 17150, 17202, 17255, 17308,
            17361, 17415, 17468, 17522, 17576,
            17630, 17684, 17738, 17793, 17848,
            17902, 17957, 18013, 18068, 18123,
            18179, 18235, 18291, 18347, 18404,
            18460, 18517, 18574, 18631, 18688,
            18746, 18803, 18861, 18919, 18977,
            19035, 19094, 19152, 19211, 19270,
            19330, 19389, 19448, 19508, 19568,
            19628, 19689, 19749, 19810, 19871,
            19932, 19993, 20054, 20116, 20178,
            20240, 20302, 20364, 20427, 20490,
            20553, 20616, 20679, 20743, 20806,
            20870, 20935, 20999, 21063, 21128,
            21193, 21258, 21323, 21389, 21455,
            21521, 21587, 21653, 21720, 21786,
            21853, 21920, 21988, 22055, 22123,
            22191, 22259, 22328, 22396, 22465,
            22534, 22603, 22673, 22742, 22812,
            22882, 22953, 23023, 23094, 23165,
            23236, 23308, 23379, 23451, 23523,
            23595, 23668, 23741, 23814, 23887,
            23960, 24034, 24108, 24182, 24256,
            24330, 24405, 24480, 24555, 24631,
            24707, 24783, 24859, 24935, 25012,
            25089, 25166, 25243, 25320, 25398,
            25476, 25555, 25633, 25712, 25791,
            25870, 25950, 26029, 26109, 26190,
            26270, 26351, 26432, 26513, 26594,
            26676, 26758, 26840, 26923, 27006,
            27088, 27172, 27255, 27339, 27423,
            27507, 27592, 27677, 27762, 27847,
            27932, 28018, 28104, 28191, 28277,
            28364, 28451, 28539, 28626, 28714,
            28803, 28891, 28980, 29069, 29158,
            29248, 29338, 29428, 29518, 29609,
            29700, 29791, 29883, 29975, 30067,
            30159, 30252, 30345, 30438, 30532,
            30625, 30719, 30814, 30909, 31003,
            31099, 31194, 31290, 31386, 31483,
            31579, 31677, 31774, 31871, 31969,
            32068, 32166, 32265, 32364, 32464,
            32563, 32663, 32764, 32864, 32965,
            33067, 33168, 33270, 33372, 33475,
            33578, 33681, 33785, 33888, 33992,
            34097, 34202, 34307, 34412, 34518,
            34624, 34730, 34837, 34944, 35051,
            35159, 35267, 35376, 35484, 35593,
            35703, 35812, 35922, 36033, 36144,
            36255, 36366, 36478, 36590, 36702,
            36815, 36928, 37042, 37155, 37270,
            37384, 37499, 37614, 37730, 37846,
            37962, 38079, 38196, 38313, 38431,
            38549, 38667, 38786, 38905, 39025,
            39145, 39265, 39386, 39507, 39628,
            39750, 39872, 39994, 40117, 40241,
            40364, 40488, 40613, 40737, 40863,
            40988, 41114, 41240, 41367, 41494,
            41622, 41750, 41878, 42007, 42136,
            42265, 42395, 42525, 42656, 42787,
            42919, 43050, 43183, 43315, 43448,
            43582, 43716, 43850, 43985, 44120,
            44256, 44392, 44528, 44665, 44802,
            44940, 45078, 45216, 45355, 45495,
            45634, 45775, 45915, 46056, 46198,
            46340, 46482, 46625, 46768, 46912,
            47056, 47201, 47346, 47491, 47637,
            47784, 47930, 48078, 48225, 48374,
            48522, 48671, 48821, 48971, 49121,
            49272, 49424, 49576, 49728, 49881,
            50034, 50188, 50342, 50497, 50652,
            50807, 50963, 51120, 51277, 51435,
            51593, 51751, 51910, 52070, 52230,
            52390, 52551, 52713, 52875, 53037,
            53200, 53364, 53528, 53692, 53857,
            54022, 54188, 54355, 54522, 54690,
            54858, 55026, 55195, 55365, 55535,
            55706, 55877, 56048, 56221, 56393,
            56567, 56740, 56915, 57090, 57265,
            57441, 57618, 57795, 57972, 58150,
            58329, 58508, 58688, 58868, 59049,
            59231, 59413, 59595, 59778, 59962,
            60146, 60331, 60516, 60702, 60889,
            61076, 61264, 61452, 61641, 61830,
            62020, 62211, 62402, 62594, 62786,
            62979, 63172, 63366, 63561, 63756,
            63952, 64149, 64346, 64544, 64742,
            64941, 65140, 65341, 65541, 65743,
            65945, 66147, 66351, 66555, 66759,
            66964, 67170, 67376, 67583, 67791,
            67999, 68208, 68418, 68628, 68839,
            69050, 69263, 69475, 69689, 69903,
            70118, 70333, 70549, 70766, 70984,
            71202, 71421, 71640, 71860, 72081,
            72302, 72525, 72747, 72971, 73195,
            73420, 73646, 73872, 74099, 74327,
            74555, 74784, 75014, 75244, 75476,
            75707, 75940, 76173, 76407, 76642,
            76878, 77114, 77351, 77589, 77827,
            78066, 78306, 78547, 78788, 79030,
            79273, 79516, 79761, 80006, 80252,
            80498, 80746, 80994, 81243, 81492,
            81743, 81994, 82246, 82498, 82752,
            83006, 83261, 83517, 83774, 84031,
            84289, 84548, 84808, 85069, 85330,
            85592, 85855, 86119, 86384, 86649,
            86915, 87182, 87450, 87719, 87989,
            88259, 88530, 88802, 89075, 89349,
            89623, 89899, 90175, 90452, 90730,
            91009, 91288, 91569, 91850, 92132,
            92415, 92699, 92984, 93270, 93557,
            93844, 94132, 94422, 94712, 95003,
            95295, 95587, 95881, 96176, 96471,
            96768, 97065, 97363, 97662, 97963,
            98264, 98565, 98868, 99172, 99477,
            99783, 100089, 100397, 100705, 101015,
            101325, 101636, 101949, 102262, 102576,
            102891, 103207, 103525, 103843, 104162,
            104482, 104803, 105125, 105448, 105772,
            106097, 106423, 106750, 107078, 107407,
            107737, 108068, 108400, 108733, 109067,
            109402, 109738, 110076, 110414, 110753,
            111093, 111435, 111777, 112121, 112465,
            112811, 113157, 113505, 113854, 114204,
            114555, 114907, 115260, 115614, 115969,
            116325, 116683, 117041, 117401, 117762,
            118124, 118486, 118851, 119216, 119582,
            119949, 120318, 120688, 121059, 121431,
            121804, 122178, 122553, 122930, 123308,
            123687, 124067, 124448, 124830, 125214,
            125598, 125984, 126371, 126760, 127149,
            127540, 127932, 128325, 128719, 129115,
            129511, 129909, 130309, 130709, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071
         ) ),
        max_error = cms.double(5748.616225984908),
        output_scale_factor = cms.double(0.953125),
        unused_lsbs = cms.uint32(2)
    ),
    inv_mass_checks = cms.untracked.bool(False),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    sanity_checks = cms.untracked.bool(False),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    )
)


process.TkElePuppiJetMinDR = cms.EDFilter("L1GTDoubleObjectCond",
    collection1 = cms.PSet(
        maxEta = cms.double(2.1),
        maxPrimVertDz = cms.double(1),
        minEta = cms.double(-2.1),
        primVertex = cms.uint32(0),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 1.479),
        regionsMinPt = cms.vdouble(23, 22),
        regionsQualityFlags = cms.vuint32(2, 0),
        tag = cms.InputTag("l1tGTProducer","CL2Electrons")
    ),
    collection2 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 1.5),
        regionsMinPt = cms.vdouble(25, 25),
        tag = cms.InputTag("l1tGTProducer","CL2JetsSC4")
    ),
    cos_phi_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            487, 487, 487, 487, 487,
            487, 487, 487, 487, 487,
            487, 486, 486, 486, 486,
            486, 486, 486, 485, 485,
            485, 485, 485, 485, 484,
            484, 484, 484, 484, 483,
            483, 483, 483, 483, 482,
            482, 482, 482, 481, 481,
            481, 481, 480, 480, 480,
            480, 479, 479, 479, 478,
            478, 478, 478, 477, 477,
            477, 476, 476, 476, 475,
            475, 475, 474, 474, 474,
            473, 473, 472, 472, 472,
            471, 471, 471, 470, 470,
            469, 469, 468, 468, 468,
            467, 467, 466, 466, 465,
            465, 465, 464, 464, 463,
            463, 462, 462, 461, 461,
            460, 460, 459, 459, 458,
            458, 457, 457, 456, 456,
            455, 454, 454, 453, 453,
            452, 452, 451, 451, 450,
            449, 449, 448, 448, 447,
            446, 446, 445, 445, 444,
            443, 443, 442, 441, 441,
            440, 440, 439, 438, 438,
            437, 436, 436, 435, 434,
            434, 433, 432, 431, 431,
            430, 429, 429, 428, 427,
            426, 426, 425, 424, 423,
            423, 422, 421, 420, 420,
            419, 418, 417, 417, 416,
            415, 414, 413, 413, 412,
            411, 410, 409, 409, 408,
            407, 406, 405, 405, 404,
            403, 402, 401, 400, 399,
            399, 398, 397, 396, 395,
            394, 393, 392, 392, 391,
            390, 389, 388, 387, 386,
            385, 384, 383, 382, 381,
            381, 380, 379, 378, 377,
            376, 375, 374, 373, 372,
            371, 370, 369, 368, 367,
            366, 365, 364, 363, 362,
            361, 360, 359, 358, 357,
            356, 355, 354, 353, 352,
            351, 350, 349, 348, 347,
            346, 345, 343, 342, 341,
            340, 339, 338, 337, 336,
            335, 334, 333, 332, 330,
            329, 328, 327, 326, 325,
            324, 323, 322, 320, 319,
            318, 317, 316, 315, 314,
            312, 311, 310, 309, 308,
            307, 306, 304, 303, 302,
            301, 300, 298, 297, 296,
            295, 294, 293, 291, 290,
            289, 288, 286, 285, 284,
            283, 282, 280, 279, 278,
            277, 275, 274, 273, 272,
            270, 269, 268, 267, 265,
            264, 263, 262, 260, 259,
            258, 257, 255, 254, 253,
            252, 250, 249, 248, 246,
            245, 244, 242, 241, 240,
            239, 237, 236, 235, 233,
            232, 231, 229, 228, 227,
            225, 224, 223, 221, 220,
            219, 217, 216, 215, 213,
            212, 211, 209, 208, 207,
            205, 204, 203, 201, 200,
            198, 197, 196, 194, 193,
            192, 190, 189, 187, 186,
            185, 183, 182, 181, 179,
            178, 176, 175, 174, 172,
            171, 169, 168, 167, 165,
            164, 162, 161, 159, 158,
            157, 155, 154, 152, 151,
            150, 148, 147, 145, 144,
            142, 141, 140, 138, 137,
            135, 134, 132, 131, 129,
            128, 127, 125, 124, 122,
            121, 119, 118, 116, 115,
            113, 112, 111, 109, 108,
            106, 105, 103, 102, 100,
            99, 97, 96, 94, 93,
            92, 90, 89, 87, 86,
            84, 83, 81, 80, 78,
            77, 75, 74, 72, 71,
            69, 68, 66, 65, 63,
            62, 60, 59, 58, 56,
            55, 53, 52, 50, 49,
            47, 46, 44, 43, 41,
            40, 38, 37, 35, 34,
            32, 31, 29, 28, 26,
            25, 23, 22, 20, 19,
            17, 16, 14, 13, 11,
            10, 8, 7, 5, 4,
            2, 1, -1, -2, -4,
            -5, -7, -8, -10, -11,
            -13, -14, -16, -17, -19,
            -20, -22, -23, -25, -26,
            -28, -29, -31, -32, -34,
            -35, -37, -38, -40, -41,
            -43, -44, -46, -47, -49,
            -50, -52, -53, -55, -56,
            -58, -59, -60, -62, -63,
            -65, -66, -68, -69, -71,
            -72, -74, -75, -77, -78,
            -80, -81, -83, -84, -86,
            -87, -89, -90, -92, -93,
            -94, -96, -97, -99, -100,
            -102, -103, -105, -106, -108,
            -109, -111, -112, -113, -115,
            -116, -118, -119, -121, -122,
            -124, -125, -127, -128, -129,
            -131, -132, -134, -135, -137,
            -138, -140, -141, -142, -144,
            -145, -147, -148, -150, -151,
            -152, -154, -155, -157, -158,
            -159, -161, -162, -164, -165,
            -167, -168, -169, -171, -172,
            -174, -175, -176, -178, -179,
            -181, -182, -183, -185, -186,
            -187, -189, -190, -192, -193,
            -194, -196, -197, -198, -200,
            -201, -203, -204, -205, -207,
            -208, -209, -211, -212, -213,
            -215, -216, -217, -219, -220,
            -221, -223, -224, -225, -227,
            -228, -229, -231, -232, -233,
            -235, -236, -237, -239, -240,
            -241, -242, -244, -245, -246,
            -248, -249, -250, -252, -253,
            -254, -255, -257, -258, -259,
            -260, -262, -263, -264, -265,
            -267, -268, -269, -270, -272,
            -273, -274, -275, -277, -278,
            -279, -280, -282, -283, -284,
            -285, -286, -288, -289, -290,
            -291, -293, -294, -295, -296,
            -297, -298, -300, -301, -302,
            -303, -304, -306, -307, -308,
            -309, -310, -311, -312, -314,
            -315, -316, -317, -318, -319,
            -320, -322, -323, -324, -325,
            -326, -327, -328, -329, -330,
            -332, -333, -334, -335, -336,
            -337, -338, -339, -340, -341,
            -342, -343, -345, -346, -347,
            -348, -349, -350, -351, -352,
            -353, -354, -355, -356, -357,
            -358, -359, -360, -361, -362,
            -363, -364, -365, -366, -367,
            -368, -369, -370, -371, -372,
            -373, -374, -375, -376, -377,
            -378, -379, -380, -381, -381,
            -382, -383, -384, -385, -386,
            -387, -388, -389, -390, -391,
            -392, -392, -393, -394, -395,
            -396, -397, -398, -399, -399,
            -400, -401, -402, -403, -404,
            -405, -405, -406, -407, -408,
            -409, -409, -410, -411, -412,
            -413, -413, -414, -415, -416,
            -417, -417, -418, -419, -420,
            -420, -421, -422, -423, -423,
            -424, -425, -426, -426, -427,
            -428, -429, -429, -430, -431,
            -431, -432, -433, -434, -434,
            -435, -436, -436, -437, -438,
            -438, -439, -440, -440, -441,
            -441, -442, -443, -443, -444,
            -445, -445, -446, -446, -447,
            -448, -448, -449, -449, -450,
            -451, -451, -452, -452, -453,
            -453, -454, -454, -455, -456,
            -456, -457, -457, -458, -458,
            -459, -459, -460, -460, -461,
            -461, -462, -462, -463, -463,
            -464, -464, -465, -465, -465,
            -466, -466, -467, -467, -468,
            -468, -468, -469, -469, -470,
            -470, -471, -471, -471, -472,
            -472, -472, -473, -473, -474,
            -474, -474, -475, -475, -475,
            -476, -476, -476, -477, -477,
            -477, -478, -478, -478, -478,
            -479, -479, -479, -480, -480,
            -480, -480, -481, -481, -481,
            -481, -482, -482, -482, -482,
            -483, -483, -483, -483, -483,
            -484, -484, -484, -484, -484,
            -485, -485, -485, -485, -485,
            -485, -486, -486, -486, -486,
            -486, -486, -486, -487, -487,
            -487, -487, -487, -487, -487,
            -487, -487, -487, -487, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488
         ) ),
        max_error = cms.double(0.0025338281044886835),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            489, 489, 489, 489, 489,
            489, 489, 489, 489, 489,
            489, 490, 490, 490, 490,
            490, 490, 490, 491, 491,
            491, 491, 491, 491, 492,
            492, 492, 492, 492, 493,
            493, 493, 493, 493, 494,
            494, 494, 494, 495, 495,
            495, 495, 496, 496, 496,
            496, 497, 497, 497, 498,
            498, 498, 499, 499, 499,
            499, 500, 500, 500, 501,
            501, 502, 502, 502, 503,
            503, 503, 504, 504, 504,
            505, 505, 506, 506, 507,
            507, 507, 508, 508, 509,
            509, 510, 510, 510, 511,
            511, 512, 512, 513, 513,
            514, 514, 515, 515, 516,
            516, 517, 517, 518, 518,
            519, 520, 520, 521, 521,
            522, 522, 523, 523, 524,
            525, 525, 526, 526, 527,
            528, 528, 529, 530, 530,
            531, 531, 532, 533, 533,
            534, 535, 535, 536, 537,
            537, 538, 539, 540, 540,
            541, 542, 542, 543, 544,
            545, 545, 546, 547, 548,
            548, 549, 550, 551, 551,
            552, 553, 554, 555, 555,
            556, 557, 558, 559, 560,
            560, 561, 562, 563, 564,
            565, 566, 567, 567, 568,
            569, 570, 571, 572, 573,
            574, 575, 576, 577, 577,
            578, 579, 580, 581, 582,
            583, 584, 585, 586, 587,
            588, 589, 590, 591, 592,
            593, 594, 595, 596, 598,
            599, 600, 601, 602, 603,
            604, 605, 606, 607, 608,
            610, 611, 612, 613, 614,
            615, 616, 618, 619, 620,
            621, 622, 623, 625, 626,
            627, 628, 629, 631, 632,
            633, 634, 636, 637, 638,
            639, 641, 642, 643, 644,
            646, 647, 648, 650, 651,
            652, 654, 655, 656, 658,
            659, 660, 662, 663, 665,
            666, 667, 669, 670, 672,
            673, 674, 676, 677, 679,
            680, 682, 683, 685, 686,
            687, 689, 690, 692, 693,
            695, 697, 698, 700, 701,
            703, 704, 706, 707, 709,
            710, 712, 714, 715, 717,
            719, 720, 722, 723, 725,
            727, 728, 730, 732, 733,
            735, 737, 738, 740, 742,
            744, 745, 747, 749, 750,
            752, 754, 756, 758, 759,
            761, 763, 765, 767, 768,
            770, 772, 774, 776, 778,
            779, 781, 783, 785, 787,
            789, 791, 793, 795, 796,
            798, 800, 802, 804, 806,
            808, 810, 812, 814, 816,
            818, 820, 822, 824, 826,
            828, 830, 832, 835, 837,
            839, 841, 843, 845, 847,
            849, 851, 854, 856, 858,
            860, 862, 864, 867, 869,
            871, 873, 875, 878, 880,
            882, 884, 887, 889, 891,
            894, 896, 898, 900, 903,
            905, 907, 910, 912, 915,
            917, 919, 922, 924, 927,
            929, 931, 934, 936, 939,
            941, 944, 946, 949, 951,
            954, 956, 959, 961, 964,
            966, 969, 971, 974, 977,
            979, 982, 984, 987, 990,
            992, 995, 998, 1000, 1003,
            1006, 1008, 1011, 1014, 1017,
            1019, 1022, 1025, 1028, 1030,
            1033, 1036, 1039, 1042, 1044,
            1047, 1050, 1053, 1056, 1059,
            1062, 1065, 1067, 1070, 1073,
            1076, 1079, 1082, 1085, 1088,
            1091, 1094, 1097, 1100, 1103,
            1106, 1109, 1112, 1115, 1118,
            1122, 1125, 1128, 1131, 1134,
            1137, 1140, 1143, 1147, 1150,
            1153, 1156, 1159, 1163, 1166,
            1169, 1172, 1176, 1179, 1182,
            1186, 1189, 1192, 1196, 1199,
            1202, 1206, 1209, 1212, 1216,
            1219, 1223, 1226, 1230, 1233,
            1237, 1240, 1244, 1247, 1251,
            1254, 1258, 1261, 1265, 1268,
            1272, 1276, 1279, 1283, 1287,
            1290, 1294, 1298, 1301, 1305,
            1309, 1312, 1316, 1320, 1324,
            1327, 1331, 1335, 1339, 1343,
            1347, 1350, 1354, 1358, 1362,
            1366, 1370, 1374, 1378, 1382,
            1386, 1390, 1394, 1398, 1402,
            1406, 1410, 1414, 1418, 1422,
            1426, 1430, 1434, 1439, 1443,
            1447, 1451, 1455, 1459, 1464,
            1468, 1472, 1476, 1481, 1485,
            1489, 1494, 1498, 1502, 1507,
            1511, 1516, 1520, 1524, 1529,
            1533, 1538, 1542, 1547, 1551,
            1556, 1560, 1565, 1569, 1574,
            1579, 1583, 1588, 1592, 1597,
            1602, 1606, 1611, 1616, 1621,
            1625, 1630, 1635, 1640, 1645,
            1649, 1654, 1659, 1664, 1669,
            1674, 1679, 1684, 1689, 1693,
            1698, 1703, 1708, 1714, 1719,
            1724, 1729, 1734, 1739, 1744,
            1749, 1754, 1760, 1765, 1770,
            1775, 1780, 1786, 1791, 1796,
            1802, 1807, 1812, 1818, 1823,
            1828, 1834, 1839, 1845, 1850,
            1856, 1861, 1867, 1872, 1878,
            1883, 1889, 1894, 1900, 1906,
            1911, 1917, 1923, 1929, 1934,
            1940, 1946, 1952, 1957, 1963,
            1969, 1975, 1981, 1987, 1993,
            1999, 2004, 2010, 2016, 2022,
            2028, 2035, 2041, 2047, 2053,
            2059, 2065, 2071, 2077, 2084,
            2090, 2096, 2102, 2109, 2115,
            2121, 2128, 2134, 2140, 2147,
            2153, 2160, 2166, 2173, 2179,
            2186, 2192, 2199, 2205, 2212,
            2219, 2225, 2232, 2239, 2245,
            2252, 2259, 2266, 2272, 2279,
            2286, 2293, 2300, 2307, 2314,
            2321, 2328, 2335, 2342, 2349,
            2356, 2363, 2370, 2377, 2384,
            2391, 2398, 2406, 2413, 2420,
            2427, 2435, 2442, 2449, 2457,
            2464, 2472, 2479, 2487, 2494,
            2502, 2509, 2517, 2524, 2532,
            2539, 2547, 2555, 2563, 2570,
            2578, 2586, 2594, 2601, 2609,
            2617, 2625, 2633, 2641, 2649,
            2657, 2665, 2673, 2681, 2689,
            2697, 2705, 2714, 2722, 2730,
            2738, 2747, 2755, 2763, 2772,
            2780, 2788, 2797, 2805, 2814,
            2822, 2831, 2839, 2848, 2857,
            2865, 2874, 2883, 2891, 2900,
            2909, 2918, 2927, 2935, 2944,
            2953, 2962, 2971, 2980, 2989,
            2998, 3007, 3016, 3026, 3035,
            3044, 3053, 3062, 3072, 3081,
            3090, 3100, 3109, 3119, 3128,
            3138, 3147, 3157, 3166, 3176,
            3186, 3195, 3205, 3215, 3224,
            3234, 3244, 3254, 3264, 3274,
            3284, 3294, 3304, 3314, 3324,
            3334, 3344, 3354, 3364, 3375,
            3385, 3395, 3405, 3416, 3426,
            3437, 3447, 3458, 3468, 3479,
            3489, 3500, 3510, 3521, 3532,
            3543, 3553, 3564, 3575, 3586,
            3597, 3608, 3619, 3630, 3641,
            3652, 3663, 3674, 3685, 3697,
            3708, 3719, 3730, 3742, 3753,
            3765, 3776, 3788, 3799, 3811,
            3822, 3834, 3846, 3857, 3869,
            3881, 3893, 3905, 3917, 3929,
            3941, 3953, 3965, 3977, 3989,
            4001, 4013, 4025, 4038, 4050,
            4062, 4075, 4087, 4100, 4112,
            4125, 4137, 4150, 4163, 4175,
            4188, 4201, 4214, 4226, 4239,
            4252, 4265, 4278, 4291, 4304,
            4318, 4331, 4344, 4357, 4371,
            4384, 4397, 4411, 4424, 4438,
            4451, 4465, 4479, 4492, 4506,
            4520, 4533, 4547, 4561, 4575,
            4589, 4603, 4617, 4631, 4645,
            4660, 4674, 4688, 4703, 4717,
            4731, 4746, 4760, 4775, 4789,
            4804, 4819, 4833, 4848, 4863,
            4878, 4893, 4908, 4923, 4938,
            4953, 4968, 4983, 4999, 5014,
            5029, 5045, 5060, 5075, 5091,
            5107, 5122, 5138, 5154, 5169,
            5185, 5201, 5217, 5233, 5249,
            5265, 5281, 5297, 5313, 5330,
            5346, 5362, 5379, 5395, 5412,
            5428, 5445, 5462, 5478, 5495,
            5512, 5529, 5546, 5563, 5580,
            5597, 5614, 5631, 5648, 5666,
            5683, 5700, 5718, 5735, 5753,
            5770, 5788, 5806, 5824, 5841,
            5859, 5877, 5895, 5913, 5931,
            5950, 5968, 5986, 6004, 6023,
            6041, 6060, 6078, 6097, 6116,
            6134, 6153, 6172, 6191, 6210,
            6229, 6248, 6267, 6286, 6305,
            6325, 6344, 6364, 6383, 6403,
            6422, 6442, 6462, 6481, 6501,
            6521, 6541, 6561, 6581, 6602,
            6622, 6642, 6662, 6683, 6703,
            6724, 6744, 6765, 6786, 6807,
            6828, 6848, 6869, 6891, 6912,
            6933, 6954, 6975, 6997, 7018,
            7040, 7061, 7083, 7105, 7126,
            7148, 7170, 7192, 7214, 7236,
            7259, 7281, 7303, 7325, 7348,
            7370, 7393, 7416, 7438, 7461,
            7484, 7507, 7530, 7553, 7576,
            7600, 7623, 7646, 7670, 7693,
            7717, 7741, 7764, 7788, 7812,
            7836, 7860, 7884, 7908, 7932,
            7957, 7981, 8006, 8030, 8055,
            8080, 8104, 8129, 8154, 8179,
            8204, 8229, 8255, 8280, 8305,
            8331, 8356, 8382, 8408, 8434,
            8459, 8485, 8511, 8537, 8564,
            8590, 8616, 8643, 8669, 8696,
            8722, 8749, 8776, 8803, 8830,
            8857, 8884, 8912, 8939, 8966,
            8994, 9021, 9049, 9077, 9105,
            9133, 9161, 9189, 9217, 9245,
            9274, 9302, 9331, 9359, 9388,
            9417, 9446, 9475, 9504, 9533,
            9562, 9591, 9621, 9650, 9680,
            9710, 9740, 9769, 9799, 9830,
            9860, 9890, 9920, 9951, 9981,
            10012, 10043, 10073, 10104, 10135,
            10166, 10198, 10229, 10260, 10292,
            10323, 10355, 10387, 10419, 10451,
            10483, 10515, 10547, 10580, 10612,
            10645, 10677, 10710, 10743, 10776,
            10809, 10842, 10876, 10909, 10942,
            10976, 11010, 11044, 11077, 11111,
            11146, 11180, 11214, 11248, 11283,
            11318, 11352, 11387, 11422, 11457,
            11492, 11528, 11563, 11599, 11634,
            11670, 11706, 11742, 11778, 11814,
            11850, 11887, 11923, 11960, 11996,
            12033, 12070, 12107, 12144, 12182,
            12219, 12257, 12294, 12332, 12370,
            12408, 12446, 12484, 12522, 12561,
            12599, 12638, 12677, 12716, 12755,
            12794, 12833, 12873, 12912, 12952,
            12992, 13032, 13072, 13112, 13152,
            13192, 13233, 13274, 13314, 13355,
            13396, 13437, 13479, 13520, 13561,
            13603, 13645, 13687, 13729, 13771,
            13813, 13856, 13898, 13941, 13984,
            14027, 14070, 14113, 14156, 14200,
            14243, 14287, 14331, 14375, 14419,
            14463, 14508, 14552, 14597, 14642,
            14687, 14732, 14777, 14823, 14868,
            14914, 14960, 15005, 15052, 15098,
            15144, 15191, 15237, 15284, 15331,
            15378, 15425, 15473, 15520, 15568,
            15616, 15664, 15712, 15760, 15808,
            15857, 15906, 15955, 16004, 16053,
            16102, 16151, 16201, 16251, 16301,
            16351, 16401, 16451, 16502, 16553,
            16603, 16654, 16706, 16757, 16808,
            16860, 16912, 16964, 17016, 17068,
            17121, 17173, 17226, 17279, 17332,
            17385, 17438, 17492, 17546, 17600,
            17654, 17708, 17762, 17817, 17872,
            17926, 17982, 18037, 18092, 18148,
            18203, 18259, 18315, 18372, 18428,
            18485, 18542, 18598, 18656, 18713,
            18770, 18828, 18886, 18944, 19002,
            19060, 19119, 19178, 19237, 19296,
            19355, 19414, 19474, 19534, 19594,
            19654, 19714, 19775, 19836, 19897,
            19958, 20019, 20081, 20142, 20204,
            20266, 20328, 20391, 20454, 20516,
            20579, 20643, 20706, 20770, 20833,
            20897, 20962, 21026, 21091, 21155,
            21220, 21286, 21351, 21417, 21482,
            21548, 21615, 21681, 21748, 21814,
            21881, 21949, 22016, 22084, 22151,
            22220, 22288, 22356, 22425, 22494,
            22563, 22632, 22702, 22771, 22841,
            22912, 22982, 23053, 23123, 23194,
            23266, 23337, 23409, 23481, 23553,
            23625, 23698, 23771, 23844, 23917,
            23990, 24064, 24138, 24212, 24287,
            24361, 24436, 24511, 24586, 24662,
            24738, 24814, 24890, 24966, 25043,
            25120, 25197, 25275, 25352, 25430,
            25508, 25587, 25665, 25744, 25823,
            25902, 25982, 26062, 26142, 26222,
            26303, 26384, 26465, 26546, 26627,
            26709, 26791, 26874, 26956, 27039,
            27122, 27205, 27289, 27373, 27457,
            27541, 27626, 27711, 27796, 27881,
            27967, 28053, 28139, 28226, 28312,
            28399, 28486, 28574, 28662, 28750,
            28838, 28927, 29016, 29105, 29194,
            29284, 29374, 29464, 29555, 29645,
            29736, 29828, 29919, 30011, 30104,
            30196, 30289, 30382, 30475, 30569,
            30663, 30757, 30851, 30946, 31041,
            31137, 31232, 31328, 31425, 31521,
            31618, 31715, 31813, 31910, 32008,
            32107, 32205, 32304, 32403, 32503,
            32603, 32703, 32804, 32904, 33005,
            33107, 33209, 33311, 33413, 33516,
            33619, 33722, 33825, 33929, 34034,
            34138, 34243, 34348, 34454, 34560,
            34666, 34772, 34879, 34986, 35094,
            35202, 35310, 35418, 35527, 35636,
            35746, 35856, 35966, 36076, 36187,
            36298, 36410, 36522, 36634, 36746,
            36859, 36973, 37086, 37200, 37314,
            37429, 37544, 37659, 37775, 37891,
            38008, 38124, 38241, 38359, 38477,
            38595, 38714, 38833, 38952, 39072,
            39192, 39312, 39433, 39554, 39675,
            39797, 39920, 40042, 40165, 40289,
            40413, 40537, 40661, 40786, 40911,
            41037, 41163, 41290, 41417, 41544,
            41671, 41800, 41928, 42057, 42186,
            42316, 42446, 42576, 42707, 42838,
            42970, 43102, 43234, 43367, 43500,
            43634, 43768, 43902, 44037, 44173,
            44308, 44444, 44581, 44718, 44855,
            44993, 45131, 45270, 45409, 45549,
            45689, 45829, 45970, 46111, 46253,
            46395, 46537, 46680, 46824, 46968,
            47112, 47257, 47402, 47548, 47694,
            47840, 47987, 48135, 48283, 48431,
            48580, 48729, 48879, 49029, 49180,
            49331, 49482, 49634, 49787, 49940,
            50093, 50247, 50401, 50556, 50712,
            50867, 51024, 51181, 51338, 51495,
            51654, 51812, 51972, 52131, 52291,
            52452, 52613, 52775, 52937, 53100,
            53263, 53427, 53591, 53755, 53921,
            54086, 54252, 54419, 54586, 54754,
            54922, 55091, 55260, 55430, 55600,
            55771, 55943, 56114, 56287, 56460,
            56633, 56807, 56982, 57157, 57333,
            57509, 57685, 57863, 58040, 58219,
            58398, 58577, 58757, 58938, 59119,
            59300, 59483, 59665, 59849, 60033,
            60217, 60402, 60588, 60774, 60960,
            61148, 61336, 61524, 61713, 61903,
            62093, 62284, 62475, 62667, 62860,
            63053, 63247, 63441, 63636, 63831,
            64027, 64224, 64422, 64619, 64818,
            65017, 65217, 65417, 65618, 65820,
            66022, 66225, 66429, 66633, 66837,
            67043, 67249, 67455, 67663, 67870,
            68079, 68288, 68498, 68708, 68920,
            69131, 69344, 69557, 69771, 69985,
            70200, 70416, 70632, 70849, 71067,
            71285, 71504, 71724, 71944, 72165,
            72387, 72609, 72833, 73056, 73281,
            73506, 73732, 73958, 74186, 74414,
            74642, 74872, 75102, 75332, 75564,
            75796, 76029, 76262, 76497, 76732,
            76968, 77204, 77441, 77679, 77918,
            78157, 78398, 78638, 78880, 79122,
            79366, 79609, 79854, 80099, 80345,
            80592, 80840, 81088, 81338, 81587,
            81838, 82090, 82342, 82595, 82849,
            83103, 83358, 83615, 83872, 84129,
            84388, 84647, 84907, 85168, 85430,
            85692, 85955, 86220, 86485, 86750,
            87017, 87284, 87552, 87821, 88091,
            88362, 88633, 88906, 89179, 89453,
            89728, 90003, 90280, 90557, 90836,
            91115, 91395, 91676, 91957, 92240,
            92523, 92807, 93093, 93379, 93666,
            93953, 94242, 94532, 94822, 95113,
            95406, 95699, 95993, 96288, 96584,
            96881, 97178, 97477, 97776, 98077,
            98378, 98680, 98984, 99288, 99593,
            99899, 100206, 100514, 100822, 101132,
            101443, 101755, 102067, 102381, 102696,
            103011, 103328, 103645, 103964, 104283,
            104603, 104925, 105247, 105571, 105895,
            106220, 106547, 106874, 107203, 107532,
            107862, 108194, 108526, 108860, 109194,
            109530, 109866, 110204, 110542, 110882,
            111223, 111565, 111907, 112251, 112596,
            112942, 113289, 113637, 113986, 114337,
            114688, 115040, 115394, 115748, 116104,
            116461, 116819, 117178, 117538, 117899,
            118261, 118624, 118989, 119354, 119721,
            120089, 120458, 120828, 121199, 121572,
            121945, 122320, 122696, 123073, 123451,
            123830, 124211, 124593, 124975, 125359,
            125745, 126131, 126518, 126907, 127297,
            127688, 128081, 128474, 128869, 129265,
            129662, 130061, 130260
         ) ),
        max_error = cms.double(0.6152529479288091),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut2 = cms.PSet(
        lut = cms.vint32( (
            256, 256, 257, 258, 259,
            260, 260, 261, 262, 263,
            264, 264, 265, 266, 267,
            268, 268, 269, 270, 271,
            272, 273, 273, 274, 275,
            276, 277, 278, 279, 279,
            280, 281, 282, 283, 284,
            285, 285, 286, 287, 288,
            289, 290, 291, 292, 293,
            293, 294, 295, 296, 297,
            298, 299, 300, 301, 302,
            303, 303, 304, 305, 306,
            307, 308, 309, 310, 311,
            312, 313, 314, 315, 316,
            317, 318, 319, 320, 321,
            322, 323, 324, 325, 326,
            327, 328, 329, 330, 331,
            332, 333, 334, 335, 336,
            337, 338, 339, 340, 341,
            342, 343, 344, 345, 346,
            347, 348, 349, 351, 352,
            353, 354, 355, 356, 357,
            358, 359, 360, 361, 363,
            364, 365, 366, 367, 368,
            369, 370, 372, 373, 374,
            375, 376, 377, 379, 380,
            381, 382, 383, 384, 386,
            387, 388, 389, 390, 392,
            393, 394, 395, 396, 398,
            399, 400, 401, 402, 404,
            405, 406, 407, 409, 410,
            411, 412, 414, 415, 416,
            418, 419, 420, 421, 423,
            424, 425, 427, 428, 429,
            431, 432, 433, 435, 436,
            437, 439, 440, 441, 443,
            444, 445, 447, 448, 449,
            451, 452, 454, 455, 456,
            458, 459, 461, 462, 463,
            465, 466, 468, 469, 471,
            472, 474, 475, 476, 478,
            479, 481, 482, 484, 485,
            487, 488, 490, 491, 493,
            494, 496, 497, 499, 500,
            502, 503, 505, 507, 508,
            510, 511, 513, 514, 516,
            518, 519, 521, 522, 524,
            526, 527, 529, 530, 532,
            534, 535, 537, 539, 540,
            542, 544, 545, 547, 549,
            550, 552, 554, 555, 557,
            559, 561, 562, 564, 566,
            567, 569, 571, 573, 575,
            576, 578, 580, 582, 583,
            585, 587, 589, 591, 592,
            594, 596, 598, 600, 602,
            603, 605, 607, 609, 611,
            613, 615, 617, 618, 620,
            622, 624, 626, 628, 630,
            632, 634, 636, 638, 640,
            642, 644, 646, 648, 650,
            652, 654, 656, 658, 660,
            662, 664, 666, 668, 670,
            672, 674, 676, 678, 680,
            682, 684, 686, 688, 691,
            693, 695, 697, 699, 701,
            703, 706, 708, 710, 712,
            714, 717, 719, 721, 723,
            725, 728, 730, 732, 734,
            737, 739, 741, 743, 746,
            748, 750, 753, 755, 757,
            760, 762, 764, 767, 769,
            771, 774, 776, 778, 781,
            783, 786, 788, 790, 793,
            795, 798, 800, 803, 805,
            808, 810, 813, 815, 818,
            820, 823, 825, 828, 830,
            833, 835, 838, 840, 843,
            846, 848, 851, 853, 856,
            859, 861, 864, 867, 869,
            872, 875, 877, 880, 883,
            885, 888, 891, 894, 896,
            899, 902, 905, 907, 910,
            913, 916, 919, 921, 924,
            927, 930, 933, 936, 939,
            941, 944, 947, 950, 953,
            956, 959, 962, 965, 968,
            971, 974, 977, 980, 983,
            986, 989, 992, 995, 998,
            1001, 1004, 1007, 1010, 1013,
            1017, 1020, 1023, 1026, 1029,
            1032, 1035, 1039, 1042, 1045,
            1048, 1051, 1055, 1058, 1061,
            1064, 1068, 1071, 1074, 1078,
            1081, 1084, 1088, 1091, 1094,
            1098, 1101, 1104, 1108, 1111,
            1115, 1118, 1121, 1125, 1128,
            1132, 1135, 1139, 1142, 1146,
            1149, 1153, 1156, 1160, 1163,
            1167, 1171, 1174, 1178, 1181,
            1185, 1189, 1192, 1196, 1200,
            1203, 1207, 1211, 1214, 1218,
            1222, 1226, 1229, 1233, 1237,
            1241, 1245, 1249, 1252, 1256,
            1260, 1264, 1268, 1272, 1276,
            1280, 1283, 1287, 1291, 1295,
            1299, 1303, 1307, 1311, 1315,
            1319, 1323, 1328, 1332, 1336,
            1340, 1344, 1348, 1352, 1356,
            1360, 1365, 1369, 1373, 1377,
            1382, 1386, 1390, 1394, 1399,
            1403, 1407, 1412, 1416, 1420,
            1425, 1429, 1433, 1438, 1442,
            1447, 1451, 1455, 1460, 1464,
            1469, 1473, 1478, 1483, 1487,
            1492, 1496, 1501, 1505, 1510,
            1515, 1519, 1524, 1529, 1533,
            1538, 1543, 1548, 1552, 1557,
            1562, 1567, 1572, 1576, 1581,
            1586, 1591, 1596, 1601, 1606,
            1611, 1616, 1620, 1625, 1630,
            1635, 1640, 1646, 1651, 1656,
            1661, 1666, 1671, 1676, 1681,
            1686, 1692, 1697, 1702, 1707,
            1712, 1718, 1723, 1728, 1734,
            1739, 1744, 1750, 1755, 1760,
            1766, 1771, 1777, 1782, 1788,
            1793, 1799, 1804, 1810, 1815,
            1821, 1826, 1832, 1838, 1843,
            1849, 1855, 1860, 1866, 1872,
            1878, 1883, 1889, 1895, 1901,
            1907, 1912, 1918, 1924, 1930,
            1936, 1942, 1948, 1954, 1960,
            1966, 1972, 1978, 1984, 1990,
            1996, 2003, 2009, 2015, 2021,
            2027, 2033, 2040, 2046, 2052,
            2059, 2065, 2071, 2078, 2084,
            2090, 2097, 2103, 2110, 2116,
            2123, 2129, 2136, 2142, 2149,
            2156, 2162, 2169, 2175, 2182,
            2189, 2196, 2202, 2209, 2216,
            2223, 2230, 2236, 2243, 2250,
            2257, 2264, 2271, 2278, 2285,
            2292, 2299, 2306, 2313, 2320,
            2327, 2335, 2342, 2349, 2356,
            2363, 2371, 2378, 2385, 2393,
            2400, 2407, 2415, 2422, 2430,
            2437, 2444, 2452, 2460, 2467,
            2475, 2482, 2490, 2498, 2505,
            2513, 2521, 2528, 2536, 2544,
            2552, 2560, 2567, 2575, 2583,
            2591, 2599, 2607, 2615, 2623,
            2631, 2639, 2647, 2656, 2664,
            2672, 2680, 2688, 2697, 2705,
            2713, 2722, 2730, 2738, 2747,
            2755, 2764, 2772, 2781, 2789,
            2798, 2806, 2815, 2824, 2832,
            2841, 2850, 2858, 2867, 2876,
            2885, 2894, 2903, 2912, 2921,
            2930, 2939, 2948, 2957, 2966,
            2975, 2984, 2993, 3002, 3012,
            3021, 3030, 3039, 3049, 3058,
            3067, 3077, 3086, 3096, 3105,
            3115, 3124, 3134, 3144, 3153,
            3163, 3173, 3183, 3192, 3202,
            3212, 3222, 3232, 3242, 3252,
            3262, 3272, 3282, 3292, 3302,
            3312, 3322, 3332, 3343, 3353,
            3363, 3374, 3384, 3394, 3405,
            3415, 3426, 3436, 3447, 3457,
            3468, 3479, 3489, 3500, 3511,
            3522, 3532, 3543, 3554, 3565,
            3576, 3587, 3598, 3609, 3620,
            3631, 3642, 3654, 3665, 3676,
            3687, 3699, 3710, 3722, 3733,
            3744, 3756, 3767, 3779, 3791,
            3802, 3814, 3826, 3837, 3849,
            3861, 3873, 3885, 3897, 3909,
            3921, 3933, 3945, 3957, 3969,
            3981, 3994, 4006, 4018, 4031,
            4043, 4055, 4068, 4080, 4093,
            4105, 4118, 4131, 4143, 4156,
            4169, 4182, 4195, 4207, 4220,
            4233, 4246, 4259, 4272, 4286,
            4299, 4312, 4325, 4339, 4352,
            4365, 4379, 4392, 4406, 4419,
            4433, 4446, 4460, 4474, 4487,
            4501, 4515, 4529, 4543, 4557,
            4571, 4585, 4599, 4613, 4627,
            4641, 4656, 4670, 4684, 4699,
            4713, 4728, 4742, 4757, 4771,
            4786, 4801, 4816, 4830, 4845,
            4860, 4875, 4890, 4905, 4920,
            4935, 4950, 4966, 4981, 4996,
            5011, 5027, 5042, 5058, 5073,
            5089, 5105, 5120, 5136, 5152,
            5168, 5183, 5199, 5215, 5231,
            5247, 5264, 5280, 5296, 5312,
            5329, 5345, 5361, 5378, 5394,
            5411, 5428, 5444, 5461, 5478,
            5495, 5512, 5528, 5545, 5562,
            5580, 5597, 5614, 5631, 5648,
            5666, 5683, 5701, 5718, 5736,
            5753, 5771, 5789, 5807, 5824,
            5842, 5860, 5878, 5896, 5914,
            5933, 5951, 5969, 5987, 6006,
            6024, 6043, 6061, 6080, 6099,
            6117, 6136, 6155, 6174, 6193,
            6212, 6231, 6250, 6269, 6289,
            6308, 6327, 6347, 6366, 6386,
            6406, 6425, 6445, 6465, 6485,
            6505, 6525, 6545, 6565, 6585,
            6605, 6625, 6646, 6666, 6687,
            6707, 6728, 6749, 6769, 6790,
            6811, 6832, 6853, 6874, 6895,
            6916, 6937, 6959, 6980, 7002,
            7023, 7045, 7066, 7088, 7110,
            7132, 7154, 7176, 7198, 7220,
            7242, 7264, 7286, 7309, 7331,
            7354, 7376, 7399, 7422, 7445,
            7468, 7490, 7513, 7537, 7560,
            7583, 7606, 7630, 7653, 7677,
            7700, 7724, 7748, 7771, 7795,
            7819, 7843, 7867, 7892, 7916,
            7940, 7964, 7989, 8014, 8038,
            8063, 8088, 8112, 8137, 8162,
            8187, 8213, 8238, 8263, 8289,
            8314, 8340, 8365, 8391, 8417,
            8443, 8468, 8495, 8521, 8547,
            8573, 8599, 8626, 8652, 8679,
            8706, 8732, 8759, 8786, 8813,
            8840, 8867, 8895, 8922, 8949,
            8977, 9004, 9032, 9060, 9088,
            9116, 9144, 9172, 9200, 9228,
            9256, 9285, 9313, 9342, 9371,
            9400, 9428, 9457, 9486, 9516,
            9545, 9574, 9604, 9633, 9663,
            9692, 9722, 9752, 9782, 9812,
            9842, 9872, 9903, 9933, 9964,
            9994, 10025, 10056, 10087, 10118,
            10149, 10180, 10211, 10243, 10274,
            10306, 10337, 10369, 10401, 10433,
            10465, 10497, 10529, 10562, 10594,
            10627, 10659, 10692, 10725, 10758,
            10791, 10824, 10858, 10891, 10924,
            10958, 10992, 11025, 11059, 11093,
            11127, 11161, 11196, 11230, 11265,
            11299, 11334, 11369, 11404, 11439,
            11474, 11509, 11545, 11580, 11616,
            11651, 11687, 11723, 11759, 11795,
            11831, 11868, 11904, 11941, 11978,
            12014, 12051, 12088, 12125, 12163,
            12200, 12238, 12275, 12313, 12351,
            12389, 12427, 12465, 12503, 12542,
            12580, 12619, 12658, 12696, 12735,
            12775, 12814, 12853, 12893, 12932,
            12972, 13012, 13052, 13092, 13132,
            13173, 13213, 13254, 13294, 13335,
            13376, 13417, 13459, 13500, 13541,
            13583, 13625, 13667, 13709, 13751,
            13793, 13835, 13878, 13920, 13963,
            14006, 14049, 14092, 14136, 14179,
            14223, 14266, 14310, 14354, 14398,
            14443, 14487, 14531, 14576, 14621,
            14666, 14711, 14756, 14801, 14847,
            14892, 14938, 14984, 15030, 15076,
            15123, 15169, 15216, 15263, 15309,
            15356, 15404, 15451, 15498, 15546,
            15594, 15642, 15690, 15738, 15786,
            15835, 15884, 15932, 15981, 16030,
            16080, 16129, 16179, 16228, 16278,
            16328, 16378, 16429, 16479, 16530,
            16581, 16632, 16683, 16734, 16785,
            16837, 16889, 16941, 16993, 17045,
            17097, 17150, 17202, 17255, 17308,
            17361, 17415, 17468, 17522, 17576,
            17630, 17684, 17738, 17793, 17848,
            17902, 17957, 18013, 18068, 18123,
            18179, 18235, 18291, 18347, 18404,
            18460, 18517, 18574, 18631, 18688,
            18746, 18803, 18861, 18919, 18977,
            19035, 19094, 19152, 19211, 19270,
            19330, 19389, 19448, 19508, 19568,
            19628, 19689, 19749, 19810, 19871,
            19932, 19993, 20054, 20116, 20178,
            20240, 20302, 20364, 20427, 20490,
            20553, 20616, 20679, 20743, 20806,
            20870, 20935, 20999, 21063, 21128,
            21193, 21258, 21323, 21389, 21455,
            21521, 21587, 21653, 21720, 21786,
            21853, 21920, 21988, 22055, 22123,
            22191, 22259, 22328, 22396, 22465,
            22534, 22603, 22673, 22742, 22812,
            22882, 22953, 23023, 23094, 23165,
            23236, 23308, 23379, 23451, 23523,
            23595, 23668, 23741, 23814, 23887,
            23960, 24034, 24108, 24182, 24256,
            24330, 24405, 24480, 24555, 24631,
            24707, 24783, 24859, 24935, 25012,
            25089, 25166, 25243, 25320, 25398,
            25476, 25555, 25633, 25712, 25791,
            25870, 25950, 26029, 26109, 26190,
            26270, 26351, 26432, 26513, 26594,
            26676, 26758, 26840, 26923, 27006,
            27088, 27172, 27255, 27339, 27423,
            27507, 27592, 27677, 27762, 27847,
            27932, 28018, 28104, 28191, 28277,
            28364, 28451, 28539, 28626, 28714,
            28803, 28891, 28980, 29069, 29158,
            29248, 29338, 29428, 29518, 29609,
            29700, 29791, 29883, 29975, 30067,
            30159, 30252, 30345, 30438, 30532,
            30625, 30719, 30814, 30909, 31003,
            31099, 31194, 31290, 31386, 31483,
            31579, 31677, 31774, 31871, 31969,
            32068, 32166, 32265, 32364, 32464,
            32563, 32663, 32764, 32864, 32965,
            33067, 33168, 33270, 33372, 33475,
            33578, 33681, 33785, 33888, 33992,
            34097, 34202, 34307, 34412, 34518,
            34624, 34730, 34837, 34944, 35051,
            35159, 35267, 35376, 35484, 35593,
            35703, 35812, 35922, 36033, 36144,
            36255, 36366, 36478, 36590, 36702,
            36815, 36928, 37042, 37155, 37270,
            37384, 37499, 37614, 37730, 37846,
            37962, 38079, 38196, 38313, 38431,
            38549, 38667, 38786, 38905, 39025,
            39145, 39265, 39386, 39507, 39628,
            39750, 39872, 39994, 40117, 40241,
            40364, 40488, 40613, 40737, 40863,
            40988, 41114, 41240, 41367, 41494,
            41622, 41750, 41878, 42007, 42136,
            42265, 42395, 42525, 42656, 42787,
            42919, 43050, 43183, 43315, 43448,
            43582, 43716, 43850, 43985, 44120,
            44256, 44392, 44528, 44665, 44802,
            44940, 45078, 45216, 45355, 45495,
            45634, 45775, 45915, 46056, 46198,
            46340, 46482, 46625, 46768, 46912,
            47056, 47201, 47346, 47491, 47637,
            47784, 47930, 48078, 48225, 48374,
            48522, 48671, 48821, 48971, 49121,
            49272, 49424, 49576, 49728, 49881,
            50034, 50188, 50342, 50497, 50652,
            50807, 50963, 51120, 51277, 51435,
            51593, 51751, 51910, 52070, 52230,
            52390, 52551, 52713, 52875, 53037,
            53200, 53364, 53528, 53692, 53857,
            54022, 54188, 54355, 54522, 54690,
            54858, 55026, 55195, 55365, 55535,
            55706, 55877, 56048, 56221, 56393,
            56567, 56740, 56915, 57090, 57265,
            57441, 57618, 57795, 57972, 58150,
            58329, 58508, 58688, 58868, 59049,
            59231, 59413, 59595, 59778, 59962,
            60146, 60331, 60516, 60702, 60889,
            61076, 61264, 61452, 61641, 61830,
            62020, 62211, 62402, 62594, 62786,
            62979, 63172, 63366, 63561, 63756,
            63952, 64149, 64346, 64544, 64742,
            64941, 65140, 65341, 65541, 65743,
            65945, 66147, 66351, 66555, 66759,
            66964, 67170, 67376, 67583, 67791,
            67999, 68208, 68418, 68628, 68839,
            69050, 69263, 69475, 69689, 69903,
            70118, 70333, 70549, 70766, 70984,
            71202, 71421, 71640, 71860, 72081,
            72302, 72525, 72747, 72971, 73195,
            73420, 73646, 73872, 74099, 74327,
            74555, 74784, 75014, 75244, 75476,
            75707, 75940, 76173, 76407, 76642,
            76878, 77114, 77351, 77589, 77827,
            78066, 78306, 78547, 78788, 79030,
            79273, 79516, 79761, 80006, 80252,
            80498, 80746, 80994, 81243, 81492,
            81743, 81994, 82246, 82498, 82752,
            83006, 83261, 83517, 83774, 84031,
            84289, 84548, 84808, 85069, 85330,
            85592, 85855, 86119, 86384, 86649,
            86915, 87182, 87450, 87719, 87989,
            88259, 88530, 88802, 89075, 89349,
            89623, 89899, 90175, 90452, 90730,
            91009, 91288, 91569, 91850, 92132,
            92415, 92699, 92984, 93270, 93557,
            93844, 94132, 94422, 94712, 95003,
            95295, 95587, 95881, 96176, 96471,
            96768, 97065, 97363, 97662, 97963,
            98264, 98565, 98868, 99172, 99477,
            99783, 100089, 100397, 100705, 101015,
            101325, 101636, 101949, 102262, 102576,
            102891, 103207, 103525, 103843, 104162,
            104482, 104803, 105125, 105448, 105772,
            106097, 106423, 106750, 107078, 107407,
            107737, 108068, 108400, 108733, 109067,
            109402, 109738, 110076, 110414, 110753,
            111093, 111435, 111777, 112121, 112465,
            112811, 113157, 113505, 113854, 114204,
            114555, 114907, 115260, 115614, 115969,
            116325, 116683, 117041, 117401, 117762,
            118124, 118486, 118851, 119216, 119582,
            119949, 120318, 120688, 121059, 121431,
            121804, 122178, 122553, 122930, 123308,
            123687, 124067, 124448, 124830, 125214,
            125598, 125984, 126371, 126760, 127149,
            127540, 127932, 128325, 128719, 129115,
            129511, 129909, 130309, 130709, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071
         ) ),
        max_error = cms.double(5748.616225984908),
        output_scale_factor = cms.double(0.953125),
        unused_lsbs = cms.uint32(2)
    ),
    inv_mass_checks = cms.untracked.bool(False),
    minDR = cms.double(0.3),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    sanity_checks = cms.untracked.bool(False),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    )
)


process.TkEleTkMuon1020 = cms.EDFilter("L1GTDoubleObjectCond",
    collection1 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 1.479),
        regionsMinPt = cms.vdouble(7, 7),
        regionsQualityFlags = cms.vuint32(2, 0),
        tag = cms.InputTag("l1tGTProducer","CL2Electrons")
    ),
    collection2 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 0.83, 1.24),
        regionsMinPt = cms.vdouble(18, 18, 18),
        tag = cms.InputTag("l1tGTProducer","GMTTkMuons")
    ),
    cos_phi_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            487, 487, 487, 487, 487,
            487, 487, 487, 487, 487,
            487, 486, 486, 486, 486,
            486, 486, 486, 485, 485,
            485, 485, 485, 485, 484,
            484, 484, 484, 484, 483,
            483, 483, 483, 483, 482,
            482, 482, 482, 481, 481,
            481, 481, 480, 480, 480,
            480, 479, 479, 479, 478,
            478, 478, 478, 477, 477,
            477, 476, 476, 476, 475,
            475, 475, 474, 474, 474,
            473, 473, 472, 472, 472,
            471, 471, 471, 470, 470,
            469, 469, 468, 468, 468,
            467, 467, 466, 466, 465,
            465, 465, 464, 464, 463,
            463, 462, 462, 461, 461,
            460, 460, 459, 459, 458,
            458, 457, 457, 456, 456,
            455, 454, 454, 453, 453,
            452, 452, 451, 451, 450,
            449, 449, 448, 448, 447,
            446, 446, 445, 445, 444,
            443, 443, 442, 441, 441,
            440, 440, 439, 438, 438,
            437, 436, 436, 435, 434,
            434, 433, 432, 431, 431,
            430, 429, 429, 428, 427,
            426, 426, 425, 424, 423,
            423, 422, 421, 420, 420,
            419, 418, 417, 417, 416,
            415, 414, 413, 413, 412,
            411, 410, 409, 409, 408,
            407, 406, 405, 405, 404,
            403, 402, 401, 400, 399,
            399, 398, 397, 396, 395,
            394, 393, 392, 392, 391,
            390, 389, 388, 387, 386,
            385, 384, 383, 382, 381,
            381, 380, 379, 378, 377,
            376, 375, 374, 373, 372,
            371, 370, 369, 368, 367,
            366, 365, 364, 363, 362,
            361, 360, 359, 358, 357,
            356, 355, 354, 353, 352,
            351, 350, 349, 348, 347,
            346, 345, 343, 342, 341,
            340, 339, 338, 337, 336,
            335, 334, 333, 332, 330,
            329, 328, 327, 326, 325,
            324, 323, 322, 320, 319,
            318, 317, 316, 315, 314,
            312, 311, 310, 309, 308,
            307, 306, 304, 303, 302,
            301, 300, 298, 297, 296,
            295, 294, 293, 291, 290,
            289, 288, 286, 285, 284,
            283, 282, 280, 279, 278,
            277, 275, 274, 273, 272,
            270, 269, 268, 267, 265,
            264, 263, 262, 260, 259,
            258, 257, 255, 254, 253,
            252, 250, 249, 248, 246,
            245, 244, 242, 241, 240,
            239, 237, 236, 235, 233,
            232, 231, 229, 228, 227,
            225, 224, 223, 221, 220,
            219, 217, 216, 215, 213,
            212, 211, 209, 208, 207,
            205, 204, 203, 201, 200,
            198, 197, 196, 194, 193,
            192, 190, 189, 187, 186,
            185, 183, 182, 181, 179,
            178, 176, 175, 174, 172,
            171, 169, 168, 167, 165,
            164, 162, 161, 159, 158,
            157, 155, 154, 152, 151,
            150, 148, 147, 145, 144,
            142, 141, 140, 138, 137,
            135, 134, 132, 131, 129,
            128, 127, 125, 124, 122,
            121, 119, 118, 116, 115,
            113, 112, 111, 109, 108,
            106, 105, 103, 102, 100,
            99, 97, 96, 94, 93,
            92, 90, 89, 87, 86,
            84, 83, 81, 80, 78,
            77, 75, 74, 72, 71,
            69, 68, 66, 65, 63,
            62, 60, 59, 58, 56,
            55, 53, 52, 50, 49,
            47, 46, 44, 43, 41,
            40, 38, 37, 35, 34,
            32, 31, 29, 28, 26,
            25, 23, 22, 20, 19,
            17, 16, 14, 13, 11,
            10, 8, 7, 5, 4,
            2, 1, -1, -2, -4,
            -5, -7, -8, -10, -11,
            -13, -14, -16, -17, -19,
            -20, -22, -23, -25, -26,
            -28, -29, -31, -32, -34,
            -35, -37, -38, -40, -41,
            -43, -44, -46, -47, -49,
            -50, -52, -53, -55, -56,
            -58, -59, -60, -62, -63,
            -65, -66, -68, -69, -71,
            -72, -74, -75, -77, -78,
            -80, -81, -83, -84, -86,
            -87, -89, -90, -92, -93,
            -94, -96, -97, -99, -100,
            -102, -103, -105, -106, -108,
            -109, -111, -112, -113, -115,
            -116, -118, -119, -121, -122,
            -124, -125, -127, -128, -129,
            -131, -132, -134, -135, -137,
            -138, -140, -141, -142, -144,
            -145, -147, -148, -150, -151,
            -152, -154, -155, -157, -158,
            -159, -161, -162, -164, -165,
            -167, -168, -169, -171, -172,
            -174, -175, -176, -178, -179,
            -181, -182, -183, -185, -186,
            -187, -189, -190, -192, -193,
            -194, -196, -197, -198, -200,
            -201, -203, -204, -205, -207,
            -208, -209, -211, -212, -213,
            -215, -216, -217, -219, -220,
            -221, -223, -224, -225, -227,
            -228, -229, -231, -232, -233,
            -235, -236, -237, -239, -240,
            -241, -242, -244, -245, -246,
            -248, -249, -250, -252, -253,
            -254, -255, -257, -258, -259,
            -260, -262, -263, -264, -265,
            -267, -268, -269, -270, -272,
            -273, -274, -275, -277, -278,
            -279, -280, -282, -283, -284,
            -285, -286, -288, -289, -290,
            -291, -293, -294, -295, -296,
            -297, -298, -300, -301, -302,
            -303, -304, -306, -307, -308,
            -309, -310, -311, -312, -314,
            -315, -316, -317, -318, -319,
            -320, -322, -323, -324, -325,
            -326, -327, -328, -329, -330,
            -332, -333, -334, -335, -336,
            -337, -338, -339, -340, -341,
            -342, -343, -345, -346, -347,
            -348, -349, -350, -351, -352,
            -353, -354, -355, -356, -357,
            -358, -359, -360, -361, -362,
            -363, -364, -365, -366, -367,
            -368, -369, -370, -371, -372,
            -373, -374, -375, -376, -377,
            -378, -379, -380, -381, -381,
            -382, -383, -384, -385, -386,
            -387, -388, -389, -390, -391,
            -392, -392, -393, -394, -395,
            -396, -397, -398, -399, -399,
            -400, -401, -402, -403, -404,
            -405, -405, -406, -407, -408,
            -409, -409, -410, -411, -412,
            -413, -413, -414, -415, -416,
            -417, -417, -418, -419, -420,
            -420, -421, -422, -423, -423,
            -424, -425, -426, -426, -427,
            -428, -429, -429, -430, -431,
            -431, -432, -433, -434, -434,
            -435, -436, -436, -437, -438,
            -438, -439, -440, -440, -441,
            -441, -442, -443, -443, -444,
            -445, -445, -446, -446, -447,
            -448, -448, -449, -449, -450,
            -451, -451, -452, -452, -453,
            -453, -454, -454, -455, -456,
            -456, -457, -457, -458, -458,
            -459, -459, -460, -460, -461,
            -461, -462, -462, -463, -463,
            -464, -464, -465, -465, -465,
            -466, -466, -467, -467, -468,
            -468, -468, -469, -469, -470,
            -470, -471, -471, -471, -472,
            -472, -472, -473, -473, -474,
            -474, -474, -475, -475, -475,
            -476, -476, -476, -477, -477,
            -477, -478, -478, -478, -478,
            -479, -479, -479, -480, -480,
            -480, -480, -481, -481, -481,
            -481, -482, -482, -482, -482,
            -483, -483, -483, -483, -483,
            -484, -484, -484, -484, -484,
            -485, -485, -485, -485, -485,
            -485, -486, -486, -486, -486,
            -486, -486, -486, -487, -487,
            -487, -487, -487, -487, -487,
            -487, -487, -487, -487, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488
         ) ),
        max_error = cms.double(0.0025338281044886835),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            489, 489, 489, 489, 489,
            489, 489, 489, 489, 489,
            489, 490, 490, 490, 490,
            490, 490, 490, 491, 491,
            491, 491, 491, 491, 492,
            492, 492, 492, 492, 493,
            493, 493, 493, 493, 494,
            494, 494, 494, 495, 495,
            495, 495, 496, 496, 496,
            496, 497, 497, 497, 498,
            498, 498, 499, 499, 499,
            499, 500, 500, 500, 501,
            501, 502, 502, 502, 503,
            503, 503, 504, 504, 504,
            505, 505, 506, 506, 507,
            507, 507, 508, 508, 509,
            509, 510, 510, 510, 511,
            511, 512, 512, 513, 513,
            514, 514, 515, 515, 516,
            516, 517, 517, 518, 518,
            519, 520, 520, 521, 521,
            522, 522, 523, 523, 524,
            525, 525, 526, 526, 527,
            528, 528, 529, 530, 530,
            531, 531, 532, 533, 533,
            534, 535, 535, 536, 537,
            537, 538, 539, 540, 540,
            541, 542, 542, 543, 544,
            545, 545, 546, 547, 548,
            548, 549, 550, 551, 551,
            552, 553, 554, 555, 555,
            556, 557, 558, 559, 560,
            560, 561, 562, 563, 564,
            565, 566, 567, 567, 568,
            569, 570, 571, 572, 573,
            574, 575, 576, 577, 577,
            578, 579, 580, 581, 582,
            583, 584, 585, 586, 587,
            588, 589, 590, 591, 592,
            593, 594, 595, 596, 598,
            599, 600, 601, 602, 603,
            604, 605, 606, 607, 608,
            610, 611, 612, 613, 614,
            615, 616, 618, 619, 620,
            621, 622, 623, 625, 626,
            627, 628, 629, 631, 632,
            633, 634, 636, 637, 638,
            639, 641, 642, 643, 644,
            646, 647, 648, 650, 651,
            652, 654, 655, 656, 658,
            659, 660, 662, 663, 665,
            666, 667, 669, 670, 672,
            673, 674, 676, 677, 679,
            680, 682, 683, 685, 686,
            687, 689, 690, 692, 693,
            695, 697, 698, 700, 701,
            703, 704, 706, 707, 709,
            710, 712, 714, 715, 717,
            719, 720, 722, 723, 725,
            727, 728, 730, 732, 733,
            735, 737, 738, 740, 742,
            744, 745, 747, 749, 750,
            752, 754, 756, 758, 759,
            761, 763, 765, 767, 768,
            770, 772, 774, 776, 778,
            779, 781, 783, 785, 787,
            789, 791, 793, 795, 796,
            798, 800, 802, 804, 806,
            808, 810, 812, 814, 816,
            818, 820, 822, 824, 826,
            828, 830, 832, 835, 837,
            839, 841, 843, 845, 847,
            849, 851, 854, 856, 858,
            860, 862, 864, 867, 869,
            871, 873, 875, 878, 880,
            882, 884, 887, 889, 891,
            894, 896, 898, 900, 903,
            905, 907, 910, 912, 915,
            917, 919, 922, 924, 927,
            929, 931, 934, 936, 939,
            941, 944, 946, 949, 951,
            954, 956, 959, 961, 964,
            966, 969, 971, 974, 977,
            979, 982, 984, 987, 990,
            992, 995, 998, 1000, 1003,
            1006, 1008, 1011, 1014, 1017,
            1019, 1022, 1025, 1028, 1030,
            1033, 1036, 1039, 1042, 1044,
            1047, 1050, 1053, 1056, 1059,
            1062, 1065, 1067, 1070, 1073,
            1076, 1079, 1082, 1085, 1088,
            1091, 1094, 1097, 1100, 1103,
            1106, 1109, 1112, 1115, 1118,
            1122, 1125, 1128, 1131, 1134,
            1137, 1140, 1143, 1147, 1150,
            1153, 1156, 1159, 1163, 1166,
            1169, 1172, 1176, 1179, 1182,
            1186, 1189, 1192, 1196, 1199,
            1202, 1206, 1209, 1212, 1216,
            1219, 1223, 1226, 1230, 1233,
            1237, 1240, 1244, 1247, 1251,
            1254, 1258, 1261, 1265, 1268,
            1272, 1276, 1279, 1283, 1287,
            1290, 1294, 1298, 1301, 1305,
            1309, 1312, 1316, 1320, 1324,
            1327, 1331, 1335, 1339, 1343,
            1347, 1350, 1354, 1358, 1362,
            1366, 1370, 1374, 1378, 1382,
            1386, 1390, 1394, 1398, 1402,
            1406, 1410, 1414, 1418, 1422,
            1426, 1430, 1434, 1439, 1443,
            1447, 1451, 1455, 1459, 1464,
            1468, 1472, 1476, 1481, 1485,
            1489, 1494, 1498, 1502, 1507,
            1511, 1516, 1520, 1524, 1529,
            1533, 1538, 1542, 1547, 1551,
            1556, 1560, 1565, 1569, 1574,
            1579, 1583, 1588, 1592, 1597,
            1602, 1606, 1611, 1616, 1621,
            1625, 1630, 1635, 1640, 1645,
            1649, 1654, 1659, 1664, 1669,
            1674, 1679, 1684, 1689, 1693,
            1698, 1703, 1708, 1714, 1719,
            1724, 1729, 1734, 1739, 1744,
            1749, 1754, 1760, 1765, 1770,
            1775, 1780, 1786, 1791, 1796,
            1802, 1807, 1812, 1818, 1823,
            1828, 1834, 1839, 1845, 1850,
            1856, 1861, 1867, 1872, 1878,
            1883, 1889, 1894, 1900, 1906,
            1911, 1917, 1923, 1929, 1934,
            1940, 1946, 1952, 1957, 1963,
            1969, 1975, 1981, 1987, 1993,
            1999, 2004, 2010, 2016, 2022,
            2028, 2035, 2041, 2047, 2053,
            2059, 2065, 2071, 2077, 2084,
            2090, 2096, 2102, 2109, 2115,
            2121, 2128, 2134, 2140, 2147,
            2153, 2160, 2166, 2173, 2179,
            2186, 2192, 2199, 2205, 2212,
            2219, 2225, 2232, 2239, 2245,
            2252, 2259, 2266, 2272, 2279,
            2286, 2293, 2300, 2307, 2314,
            2321, 2328, 2335, 2342, 2349,
            2356, 2363, 2370, 2377, 2384,
            2391, 2398, 2406, 2413, 2420,
            2427, 2435, 2442, 2449, 2457,
            2464, 2472, 2479, 2487, 2494,
            2502, 2509, 2517, 2524, 2532,
            2539, 2547, 2555, 2563, 2570,
            2578, 2586, 2594, 2601, 2609,
            2617, 2625, 2633, 2641, 2649,
            2657, 2665, 2673, 2681, 2689,
            2697, 2705, 2714, 2722, 2730,
            2738, 2747, 2755, 2763, 2772,
            2780, 2788, 2797, 2805, 2814,
            2822, 2831, 2839, 2848, 2857,
            2865, 2874, 2883, 2891, 2900,
            2909, 2918, 2927, 2935, 2944,
            2953, 2962, 2971, 2980, 2989,
            2998, 3007, 3016, 3026, 3035,
            3044, 3053, 3062, 3072, 3081,
            3090, 3100, 3109, 3119, 3128,
            3138, 3147, 3157, 3166, 3176,
            3186, 3195, 3205, 3215, 3224,
            3234, 3244, 3254, 3264, 3274,
            3284, 3294, 3304, 3314, 3324,
            3334, 3344, 3354, 3364, 3375,
            3385, 3395, 3405, 3416, 3426,
            3437, 3447, 3458, 3468, 3479,
            3489, 3500, 3510, 3521, 3532,
            3543, 3553, 3564, 3575, 3586,
            3597, 3608, 3619, 3630, 3641,
            3652, 3663, 3674, 3685, 3697,
            3708, 3719, 3730, 3742, 3753,
            3765, 3776, 3788, 3799, 3811,
            3822, 3834, 3846, 3857, 3869,
            3881, 3893, 3905, 3917, 3929,
            3941, 3953, 3965, 3977, 3989,
            4001, 4013, 4025, 4038, 4050,
            4062, 4075, 4087, 4100, 4112,
            4125, 4137, 4150, 4163, 4175,
            4188, 4201, 4214, 4226, 4239,
            4252, 4265, 4278, 4291, 4304,
            4318, 4331, 4344, 4357, 4371,
            4384, 4397, 4411, 4424, 4438,
            4451, 4465, 4479, 4492, 4506,
            4520, 4533, 4547, 4561, 4575,
            4589, 4603, 4617, 4631, 4645,
            4660, 4674, 4688, 4703, 4717,
            4731, 4746, 4760, 4775, 4789,
            4804, 4819, 4833, 4848, 4863,
            4878, 4893, 4908, 4923, 4938,
            4953, 4968, 4983, 4999, 5014,
            5029, 5045, 5060, 5075, 5091,
            5107, 5122, 5138, 5154, 5169,
            5185, 5201, 5217, 5233, 5249,
            5265, 5281, 5297, 5313, 5330,
            5346, 5362, 5379, 5395, 5412,
            5428, 5445, 5462, 5478, 5495,
            5512, 5529, 5546, 5563, 5580,
            5597, 5614, 5631, 5648, 5666,
            5683, 5700, 5718, 5735, 5753,
            5770, 5788, 5806, 5824, 5841,
            5859, 5877, 5895, 5913, 5931,
            5950, 5968, 5986, 6004, 6023,
            6041, 6060, 6078, 6097, 6116,
            6134, 6153, 6172, 6191, 6210,
            6229, 6248, 6267, 6286, 6305,
            6325, 6344, 6364, 6383, 6403,
            6422, 6442, 6462, 6481, 6501,
            6521, 6541, 6561, 6581, 6602,
            6622, 6642, 6662, 6683, 6703,
            6724, 6744, 6765, 6786, 6807,
            6828, 6848, 6869, 6891, 6912,
            6933, 6954, 6975, 6997, 7018,
            7040, 7061, 7083, 7105, 7126,
            7148, 7170, 7192, 7214, 7236,
            7259, 7281, 7303, 7325, 7348,
            7370, 7393, 7416, 7438, 7461,
            7484, 7507, 7530, 7553, 7576,
            7600, 7623, 7646, 7670, 7693,
            7717, 7741, 7764, 7788, 7812,
            7836, 7860, 7884, 7908, 7932,
            7957, 7981, 8006, 8030, 8055,
            8080, 8104, 8129, 8154, 8179,
            8204, 8229, 8255, 8280, 8305,
            8331, 8356, 8382, 8408, 8434,
            8459, 8485, 8511, 8537, 8564,
            8590, 8616, 8643, 8669, 8696,
            8722, 8749, 8776, 8803, 8830,
            8857, 8884, 8912, 8939, 8966,
            8994, 9021, 9049, 9077, 9105,
            9133, 9161, 9189, 9217, 9245,
            9274, 9302, 9331, 9359, 9388,
            9417, 9446, 9475, 9504, 9533,
            9562, 9591, 9621, 9650, 9680,
            9710, 9740, 9769, 9799, 9830,
            9860, 9890, 9920, 9951, 9981,
            10012, 10043, 10073, 10104, 10135,
            10166, 10198, 10229, 10260, 10292,
            10323, 10355, 10387, 10419, 10451,
            10483, 10515, 10547, 10580, 10612,
            10645, 10677, 10710, 10743, 10776,
            10809, 10842, 10876, 10909, 10942,
            10976, 11010, 11044, 11077, 11111,
            11146, 11180, 11214, 11248, 11283,
            11318, 11352, 11387, 11422, 11457,
            11492, 11528, 11563, 11599, 11634,
            11670, 11706, 11742, 11778, 11814,
            11850, 11887, 11923, 11960, 11996,
            12033, 12070, 12107, 12144, 12182,
            12219, 12257, 12294, 12332, 12370,
            12408, 12446, 12484, 12522, 12561,
            12599, 12638, 12677, 12716, 12755,
            12794, 12833, 12873, 12912, 12952,
            12992, 13032, 13072, 13112, 13152,
            13192, 13233, 13274, 13314, 13355,
            13396, 13437, 13479, 13520, 13561,
            13603, 13645, 13687, 13729, 13771,
            13813, 13856, 13898, 13941, 13984,
            14027, 14070, 14113, 14156, 14200,
            14243, 14287, 14331, 14375, 14419,
            14463, 14508, 14552, 14597, 14642,
            14687, 14732, 14777, 14823, 14868,
            14914, 14960, 15005, 15052, 15098,
            15144, 15191, 15237, 15284, 15331,
            15378, 15425, 15473, 15520, 15568,
            15616, 15664, 15712, 15760, 15808,
            15857, 15906, 15955, 16004, 16053,
            16102, 16151, 16201, 16251, 16301,
            16351, 16401, 16451, 16502, 16553,
            16603, 16654, 16706, 16757, 16808,
            16860, 16912, 16964, 17016, 17068,
            17121, 17173, 17226, 17279, 17332,
            17385, 17438, 17492, 17546, 17600,
            17654, 17708, 17762, 17817, 17872,
            17926, 17982, 18037, 18092, 18148,
            18203, 18259, 18315, 18372, 18428,
            18485, 18542, 18598, 18656, 18713,
            18770, 18828, 18886, 18944, 19002,
            19060, 19119, 19178, 19237, 19296,
            19355, 19414, 19474, 19534, 19594,
            19654, 19714, 19775, 19836, 19897,
            19958, 20019, 20081, 20142, 20204,
            20266, 20328, 20391, 20454, 20516,
            20579, 20643, 20706, 20770, 20833,
            20897, 20962, 21026, 21091, 21155,
            21220, 21286, 21351, 21417, 21482,
            21548, 21615, 21681, 21748, 21814,
            21881, 21949, 22016, 22084, 22151,
            22220, 22288, 22356, 22425, 22494,
            22563, 22632, 22702, 22771, 22841,
            22912, 22982, 23053, 23123, 23194,
            23266, 23337, 23409, 23481, 23553,
            23625, 23698, 23771, 23844, 23917,
            23990, 24064, 24138, 24212, 24287,
            24361, 24436, 24511, 24586, 24662,
            24738, 24814, 24890, 24966, 25043,
            25120, 25197, 25275, 25352, 25430,
            25508, 25587, 25665, 25744, 25823,
            25902, 25982, 26062, 26142, 26222,
            26303, 26384, 26465, 26546, 26627,
            26709, 26791, 26874, 26956, 27039,
            27122, 27205, 27289, 27373, 27457,
            27541, 27626, 27711, 27796, 27881,
            27967, 28053, 28139, 28226, 28312,
            28399, 28486, 28574, 28662, 28750,
            28838, 28927, 29016, 29105, 29194,
            29284, 29374, 29464, 29555, 29645,
            29736, 29828, 29919, 30011, 30104,
            30196, 30289, 30382, 30475, 30569,
            30663, 30757, 30851, 30946, 31041,
            31137, 31232, 31328, 31425, 31521,
            31618, 31715, 31813, 31910, 32008,
            32107, 32205, 32304, 32403, 32503,
            32603, 32703, 32804, 32904, 33005,
            33107, 33209, 33311, 33413, 33516,
            33619, 33722, 33825, 33929, 34034,
            34138, 34243, 34348, 34454, 34560,
            34666, 34772, 34879, 34986, 35094,
            35202, 35310, 35418, 35527, 35636,
            35746, 35856, 35966, 36076, 36187,
            36298, 36410, 36522, 36634, 36746,
            36859, 36973, 37086, 37200, 37314,
            37429, 37544, 37659, 37775, 37891,
            38008, 38124, 38241, 38359, 38477,
            38595, 38714, 38833, 38952, 39072,
            39192, 39312, 39433, 39554, 39675,
            39797, 39920, 40042, 40165, 40289,
            40413, 40537, 40661, 40786, 40911,
            41037, 41163, 41290, 41417, 41544,
            41671, 41800, 41928, 42057, 42186,
            42316, 42446, 42576, 42707, 42838,
            42970, 43102, 43234, 43367, 43500,
            43634, 43768, 43902, 44037, 44173,
            44308, 44444, 44581, 44718, 44855,
            44993, 45131, 45270, 45409, 45549,
            45689, 45829, 45970, 46111, 46253,
            46395, 46537, 46680, 46824, 46968,
            47112, 47257, 47402, 47548, 47694,
            47840, 47987, 48135, 48283, 48431,
            48580, 48729, 48879, 49029, 49180,
            49331, 49482, 49634, 49787, 49940,
            50093, 50247, 50401, 50556, 50712,
            50867, 51024, 51181, 51338, 51495,
            51654, 51812, 51972, 52131, 52291,
            52452, 52613, 52775, 52937, 53100,
            53263, 53427, 53591, 53755, 53921,
            54086, 54252, 54419, 54586, 54754,
            54922, 55091, 55260, 55430, 55600,
            55771, 55943, 56114, 56287, 56460,
            56633, 56807, 56982, 57157, 57333,
            57509, 57685, 57863, 58040, 58219,
            58398, 58577, 58757, 58938, 59119,
            59300, 59483, 59665, 59849, 60033,
            60217, 60402, 60588, 60774, 60960,
            61148, 61336, 61524, 61713, 61903,
            62093, 62284, 62475, 62667, 62860,
            63053, 63247, 63441, 63636, 63831,
            64027, 64224, 64422, 64619, 64818,
            65017, 65217, 65417, 65618, 65820,
            66022, 66225, 66429, 66633, 66837,
            67043, 67249, 67455, 67663, 67870,
            68079, 68288, 68498, 68708, 68920,
            69131, 69344, 69557, 69771, 69985,
            70200, 70416, 70632, 70849, 71067,
            71285, 71504, 71724, 71944, 72165,
            72387, 72609, 72833, 73056, 73281,
            73506, 73732, 73958, 74186, 74414,
            74642, 74872, 75102, 75332, 75564,
            75796, 76029, 76262, 76497, 76732,
            76968, 77204, 77441, 77679, 77918,
            78157, 78398, 78638, 78880, 79122,
            79366, 79609, 79854, 80099, 80345,
            80592, 80840, 81088, 81338, 81587,
            81838, 82090, 82342, 82595, 82849,
            83103, 83358, 83615, 83872, 84129,
            84388, 84647, 84907, 85168, 85430,
            85692, 85955, 86220, 86485, 86750,
            87017, 87284, 87552, 87821, 88091,
            88362, 88633, 88906, 89179, 89453,
            89728, 90003, 90280, 90557, 90836,
            91115, 91395, 91676, 91957, 92240,
            92523, 92807, 93093, 93379, 93666,
            93953, 94242, 94532, 94822, 95113,
            95406, 95699, 95993, 96288, 96584,
            96881, 97178, 97477, 97776, 98077,
            98378, 98680, 98984, 99288, 99593,
            99899, 100206, 100514, 100822, 101132,
            101443, 101755, 102067, 102381, 102696,
            103011, 103328, 103645, 103964, 104283,
            104603, 104925, 105247, 105571, 105895,
            106220, 106547, 106874, 107203, 107532,
            107862, 108194, 108526, 108860, 109194,
            109530, 109866, 110204, 110542, 110882,
            111223, 111565, 111907, 112251, 112596,
            112942, 113289, 113637, 113986, 114337,
            114688, 115040, 115394, 115748, 116104,
            116461, 116819, 117178, 117538, 117899,
            118261, 118624, 118989, 119354, 119721,
            120089, 120458, 120828, 121199, 121572,
            121945, 122320, 122696, 123073, 123451,
            123830, 124211, 124593, 124975, 125359,
            125745, 126131, 126518, 126907, 127297,
            127688, 128081, 128474, 128869, 129265,
            129662, 130061, 130260
         ) ),
        max_error = cms.double(0.6152529479288091),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut2 = cms.PSet(
        lut = cms.vint32( (
            256, 256, 257, 258, 259,
            260, 260, 261, 262, 263,
            264, 264, 265, 266, 267,
            268, 268, 269, 270, 271,
            272, 273, 273, 274, 275,
            276, 277, 278, 279, 279,
            280, 281, 282, 283, 284,
            285, 285, 286, 287, 288,
            289, 290, 291, 292, 293,
            293, 294, 295, 296, 297,
            298, 299, 300, 301, 302,
            303, 303, 304, 305, 306,
            307, 308, 309, 310, 311,
            312, 313, 314, 315, 316,
            317, 318, 319, 320, 321,
            322, 323, 324, 325, 326,
            327, 328, 329, 330, 331,
            332, 333, 334, 335, 336,
            337, 338, 339, 340, 341,
            342, 343, 344, 345, 346,
            347, 348, 349, 351, 352,
            353, 354, 355, 356, 357,
            358, 359, 360, 361, 363,
            364, 365, 366, 367, 368,
            369, 370, 372, 373, 374,
            375, 376, 377, 379, 380,
            381, 382, 383, 384, 386,
            387, 388, 389, 390, 392,
            393, 394, 395, 396, 398,
            399, 400, 401, 402, 404,
            405, 406, 407, 409, 410,
            411, 412, 414, 415, 416,
            418, 419, 420, 421, 423,
            424, 425, 427, 428, 429,
            431, 432, 433, 435, 436,
            437, 439, 440, 441, 443,
            444, 445, 447, 448, 449,
            451, 452, 454, 455, 456,
            458, 459, 461, 462, 463,
            465, 466, 468, 469, 471,
            472, 474, 475, 476, 478,
            479, 481, 482, 484, 485,
            487, 488, 490, 491, 493,
            494, 496, 497, 499, 500,
            502, 503, 505, 507, 508,
            510, 511, 513, 514, 516,
            518, 519, 521, 522, 524,
            526, 527, 529, 530, 532,
            534, 535, 537, 539, 540,
            542, 544, 545, 547, 549,
            550, 552, 554, 555, 557,
            559, 561, 562, 564, 566,
            567, 569, 571, 573, 575,
            576, 578, 580, 582, 583,
            585, 587, 589, 591, 592,
            594, 596, 598, 600, 602,
            603, 605, 607, 609, 611,
            613, 615, 617, 618, 620,
            622, 624, 626, 628, 630,
            632, 634, 636, 638, 640,
            642, 644, 646, 648, 650,
            652, 654, 656, 658, 660,
            662, 664, 666, 668, 670,
            672, 674, 676, 678, 680,
            682, 684, 686, 688, 691,
            693, 695, 697, 699, 701,
            703, 706, 708, 710, 712,
            714, 717, 719, 721, 723,
            725, 728, 730, 732, 734,
            737, 739, 741, 743, 746,
            748, 750, 753, 755, 757,
            760, 762, 764, 767, 769,
            771, 774, 776, 778, 781,
            783, 786, 788, 790, 793,
            795, 798, 800, 803, 805,
            808, 810, 813, 815, 818,
            820, 823, 825, 828, 830,
            833, 835, 838, 840, 843,
            846, 848, 851, 853, 856,
            859, 861, 864, 867, 869,
            872, 875, 877, 880, 883,
            885, 888, 891, 894, 896,
            899, 902, 905, 907, 910,
            913, 916, 919, 921, 924,
            927, 930, 933, 936, 939,
            941, 944, 947, 950, 953,
            956, 959, 962, 965, 968,
            971, 974, 977, 980, 983,
            986, 989, 992, 995, 998,
            1001, 1004, 1007, 1010, 1013,
            1017, 1020, 1023, 1026, 1029,
            1032, 1035, 1039, 1042, 1045,
            1048, 1051, 1055, 1058, 1061,
            1064, 1068, 1071, 1074, 1078,
            1081, 1084, 1088, 1091, 1094,
            1098, 1101, 1104, 1108, 1111,
            1115, 1118, 1121, 1125, 1128,
            1132, 1135, 1139, 1142, 1146,
            1149, 1153, 1156, 1160, 1163,
            1167, 1171, 1174, 1178, 1181,
            1185, 1189, 1192, 1196, 1200,
            1203, 1207, 1211, 1214, 1218,
            1222, 1226, 1229, 1233, 1237,
            1241, 1245, 1249, 1252, 1256,
            1260, 1264, 1268, 1272, 1276,
            1280, 1283, 1287, 1291, 1295,
            1299, 1303, 1307, 1311, 1315,
            1319, 1323, 1328, 1332, 1336,
            1340, 1344, 1348, 1352, 1356,
            1360, 1365, 1369, 1373, 1377,
            1382, 1386, 1390, 1394, 1399,
            1403, 1407, 1412, 1416, 1420,
            1425, 1429, 1433, 1438, 1442,
            1447, 1451, 1455, 1460, 1464,
            1469, 1473, 1478, 1483, 1487,
            1492, 1496, 1501, 1505, 1510,
            1515, 1519, 1524, 1529, 1533,
            1538, 1543, 1548, 1552, 1557,
            1562, 1567, 1572, 1576, 1581,
            1586, 1591, 1596, 1601, 1606,
            1611, 1616, 1620, 1625, 1630,
            1635, 1640, 1646, 1651, 1656,
            1661, 1666, 1671, 1676, 1681,
            1686, 1692, 1697, 1702, 1707,
            1712, 1718, 1723, 1728, 1734,
            1739, 1744, 1750, 1755, 1760,
            1766, 1771, 1777, 1782, 1788,
            1793, 1799, 1804, 1810, 1815,
            1821, 1826, 1832, 1838, 1843,
            1849, 1855, 1860, 1866, 1872,
            1878, 1883, 1889, 1895, 1901,
            1907, 1912, 1918, 1924, 1930,
            1936, 1942, 1948, 1954, 1960,
            1966, 1972, 1978, 1984, 1990,
            1996, 2003, 2009, 2015, 2021,
            2027, 2033, 2040, 2046, 2052,
            2059, 2065, 2071, 2078, 2084,
            2090, 2097, 2103, 2110, 2116,
            2123, 2129, 2136, 2142, 2149,
            2156, 2162, 2169, 2175, 2182,
            2189, 2196, 2202, 2209, 2216,
            2223, 2230, 2236, 2243, 2250,
            2257, 2264, 2271, 2278, 2285,
            2292, 2299, 2306, 2313, 2320,
            2327, 2335, 2342, 2349, 2356,
            2363, 2371, 2378, 2385, 2393,
            2400, 2407, 2415, 2422, 2430,
            2437, 2444, 2452, 2460, 2467,
            2475, 2482, 2490, 2498, 2505,
            2513, 2521, 2528, 2536, 2544,
            2552, 2560, 2567, 2575, 2583,
            2591, 2599, 2607, 2615, 2623,
            2631, 2639, 2647, 2656, 2664,
            2672, 2680, 2688, 2697, 2705,
            2713, 2722, 2730, 2738, 2747,
            2755, 2764, 2772, 2781, 2789,
            2798, 2806, 2815, 2824, 2832,
            2841, 2850, 2858, 2867, 2876,
            2885, 2894, 2903, 2912, 2921,
            2930, 2939, 2948, 2957, 2966,
            2975, 2984, 2993, 3002, 3012,
            3021, 3030, 3039, 3049, 3058,
            3067, 3077, 3086, 3096, 3105,
            3115, 3124, 3134, 3144, 3153,
            3163, 3173, 3183, 3192, 3202,
            3212, 3222, 3232, 3242, 3252,
            3262, 3272, 3282, 3292, 3302,
            3312, 3322, 3332, 3343, 3353,
            3363, 3374, 3384, 3394, 3405,
            3415, 3426, 3436, 3447, 3457,
            3468, 3479, 3489, 3500, 3511,
            3522, 3532, 3543, 3554, 3565,
            3576, 3587, 3598, 3609, 3620,
            3631, 3642, 3654, 3665, 3676,
            3687, 3699, 3710, 3722, 3733,
            3744, 3756, 3767, 3779, 3791,
            3802, 3814, 3826, 3837, 3849,
            3861, 3873, 3885, 3897, 3909,
            3921, 3933, 3945, 3957, 3969,
            3981, 3994, 4006, 4018, 4031,
            4043, 4055, 4068, 4080, 4093,
            4105, 4118, 4131, 4143, 4156,
            4169, 4182, 4195, 4207, 4220,
            4233, 4246, 4259, 4272, 4286,
            4299, 4312, 4325, 4339, 4352,
            4365, 4379, 4392, 4406, 4419,
            4433, 4446, 4460, 4474, 4487,
            4501, 4515, 4529, 4543, 4557,
            4571, 4585, 4599, 4613, 4627,
            4641, 4656, 4670, 4684, 4699,
            4713, 4728, 4742, 4757, 4771,
            4786, 4801, 4816, 4830, 4845,
            4860, 4875, 4890, 4905, 4920,
            4935, 4950, 4966, 4981, 4996,
            5011, 5027, 5042, 5058, 5073,
            5089, 5105, 5120, 5136, 5152,
            5168, 5183, 5199, 5215, 5231,
            5247, 5264, 5280, 5296, 5312,
            5329, 5345, 5361, 5378, 5394,
            5411, 5428, 5444, 5461, 5478,
            5495, 5512, 5528, 5545, 5562,
            5580, 5597, 5614, 5631, 5648,
            5666, 5683, 5701, 5718, 5736,
            5753, 5771, 5789, 5807, 5824,
            5842, 5860, 5878, 5896, 5914,
            5933, 5951, 5969, 5987, 6006,
            6024, 6043, 6061, 6080, 6099,
            6117, 6136, 6155, 6174, 6193,
            6212, 6231, 6250, 6269, 6289,
            6308, 6327, 6347, 6366, 6386,
            6406, 6425, 6445, 6465, 6485,
            6505, 6525, 6545, 6565, 6585,
            6605, 6625, 6646, 6666, 6687,
            6707, 6728, 6749, 6769, 6790,
            6811, 6832, 6853, 6874, 6895,
            6916, 6937, 6959, 6980, 7002,
            7023, 7045, 7066, 7088, 7110,
            7132, 7154, 7176, 7198, 7220,
            7242, 7264, 7286, 7309, 7331,
            7354, 7376, 7399, 7422, 7445,
            7468, 7490, 7513, 7537, 7560,
            7583, 7606, 7630, 7653, 7677,
            7700, 7724, 7748, 7771, 7795,
            7819, 7843, 7867, 7892, 7916,
            7940, 7964, 7989, 8014, 8038,
            8063, 8088, 8112, 8137, 8162,
            8187, 8213, 8238, 8263, 8289,
            8314, 8340, 8365, 8391, 8417,
            8443, 8468, 8495, 8521, 8547,
            8573, 8599, 8626, 8652, 8679,
            8706, 8732, 8759, 8786, 8813,
            8840, 8867, 8895, 8922, 8949,
            8977, 9004, 9032, 9060, 9088,
            9116, 9144, 9172, 9200, 9228,
            9256, 9285, 9313, 9342, 9371,
            9400, 9428, 9457, 9486, 9516,
            9545, 9574, 9604, 9633, 9663,
            9692, 9722, 9752, 9782, 9812,
            9842, 9872, 9903, 9933, 9964,
            9994, 10025, 10056, 10087, 10118,
            10149, 10180, 10211, 10243, 10274,
            10306, 10337, 10369, 10401, 10433,
            10465, 10497, 10529, 10562, 10594,
            10627, 10659, 10692, 10725, 10758,
            10791, 10824, 10858, 10891, 10924,
            10958, 10992, 11025, 11059, 11093,
            11127, 11161, 11196, 11230, 11265,
            11299, 11334, 11369, 11404, 11439,
            11474, 11509, 11545, 11580, 11616,
            11651, 11687, 11723, 11759, 11795,
            11831, 11868, 11904, 11941, 11978,
            12014, 12051, 12088, 12125, 12163,
            12200, 12238, 12275, 12313, 12351,
            12389, 12427, 12465, 12503, 12542,
            12580, 12619, 12658, 12696, 12735,
            12775, 12814, 12853, 12893, 12932,
            12972, 13012, 13052, 13092, 13132,
            13173, 13213, 13254, 13294, 13335,
            13376, 13417, 13459, 13500, 13541,
            13583, 13625, 13667, 13709, 13751,
            13793, 13835, 13878, 13920, 13963,
            14006, 14049, 14092, 14136, 14179,
            14223, 14266, 14310, 14354, 14398,
            14443, 14487, 14531, 14576, 14621,
            14666, 14711, 14756, 14801, 14847,
            14892, 14938, 14984, 15030, 15076,
            15123, 15169, 15216, 15263, 15309,
            15356, 15404, 15451, 15498, 15546,
            15594, 15642, 15690, 15738, 15786,
            15835, 15884, 15932, 15981, 16030,
            16080, 16129, 16179, 16228, 16278,
            16328, 16378, 16429, 16479, 16530,
            16581, 16632, 16683, 16734, 16785,
            16837, 16889, 16941, 16993, 17045,
            17097, 17150, 17202, 17255, 17308,
            17361, 17415, 17468, 17522, 17576,
            17630, 17684, 17738, 17793, 17848,
            17902, 17957, 18013, 18068, 18123,
            18179, 18235, 18291, 18347, 18404,
            18460, 18517, 18574, 18631, 18688,
            18746, 18803, 18861, 18919, 18977,
            19035, 19094, 19152, 19211, 19270,
            19330, 19389, 19448, 19508, 19568,
            19628, 19689, 19749, 19810, 19871,
            19932, 19993, 20054, 20116, 20178,
            20240, 20302, 20364, 20427, 20490,
            20553, 20616, 20679, 20743, 20806,
            20870, 20935, 20999, 21063, 21128,
            21193, 21258, 21323, 21389, 21455,
            21521, 21587, 21653, 21720, 21786,
            21853, 21920, 21988, 22055, 22123,
            22191, 22259, 22328, 22396, 22465,
            22534, 22603, 22673, 22742, 22812,
            22882, 22953, 23023, 23094, 23165,
            23236, 23308, 23379, 23451, 23523,
            23595, 23668, 23741, 23814, 23887,
            23960, 24034, 24108, 24182, 24256,
            24330, 24405, 24480, 24555, 24631,
            24707, 24783, 24859, 24935, 25012,
            25089, 25166, 25243, 25320, 25398,
            25476, 25555, 25633, 25712, 25791,
            25870, 25950, 26029, 26109, 26190,
            26270, 26351, 26432, 26513, 26594,
            26676, 26758, 26840, 26923, 27006,
            27088, 27172, 27255, 27339, 27423,
            27507, 27592, 27677, 27762, 27847,
            27932, 28018, 28104, 28191, 28277,
            28364, 28451, 28539, 28626, 28714,
            28803, 28891, 28980, 29069, 29158,
            29248, 29338, 29428, 29518, 29609,
            29700, 29791, 29883, 29975, 30067,
            30159, 30252, 30345, 30438, 30532,
            30625, 30719, 30814, 30909, 31003,
            31099, 31194, 31290, 31386, 31483,
            31579, 31677, 31774, 31871, 31969,
            32068, 32166, 32265, 32364, 32464,
            32563, 32663, 32764, 32864, 32965,
            33067, 33168, 33270, 33372, 33475,
            33578, 33681, 33785, 33888, 33992,
            34097, 34202, 34307, 34412, 34518,
            34624, 34730, 34837, 34944, 35051,
            35159, 35267, 35376, 35484, 35593,
            35703, 35812, 35922, 36033, 36144,
            36255, 36366, 36478, 36590, 36702,
            36815, 36928, 37042, 37155, 37270,
            37384, 37499, 37614, 37730, 37846,
            37962, 38079, 38196, 38313, 38431,
            38549, 38667, 38786, 38905, 39025,
            39145, 39265, 39386, 39507, 39628,
            39750, 39872, 39994, 40117, 40241,
            40364, 40488, 40613, 40737, 40863,
            40988, 41114, 41240, 41367, 41494,
            41622, 41750, 41878, 42007, 42136,
            42265, 42395, 42525, 42656, 42787,
            42919, 43050, 43183, 43315, 43448,
            43582, 43716, 43850, 43985, 44120,
            44256, 44392, 44528, 44665, 44802,
            44940, 45078, 45216, 45355, 45495,
            45634, 45775, 45915, 46056, 46198,
            46340, 46482, 46625, 46768, 46912,
            47056, 47201, 47346, 47491, 47637,
            47784, 47930, 48078, 48225, 48374,
            48522, 48671, 48821, 48971, 49121,
            49272, 49424, 49576, 49728, 49881,
            50034, 50188, 50342, 50497, 50652,
            50807, 50963, 51120, 51277, 51435,
            51593, 51751, 51910, 52070, 52230,
            52390, 52551, 52713, 52875, 53037,
            53200, 53364, 53528, 53692, 53857,
            54022, 54188, 54355, 54522, 54690,
            54858, 55026, 55195, 55365, 55535,
            55706, 55877, 56048, 56221, 56393,
            56567, 56740, 56915, 57090, 57265,
            57441, 57618, 57795, 57972, 58150,
            58329, 58508, 58688, 58868, 59049,
            59231, 59413, 59595, 59778, 59962,
            60146, 60331, 60516, 60702, 60889,
            61076, 61264, 61452, 61641, 61830,
            62020, 62211, 62402, 62594, 62786,
            62979, 63172, 63366, 63561, 63756,
            63952, 64149, 64346, 64544, 64742,
            64941, 65140, 65341, 65541, 65743,
            65945, 66147, 66351, 66555, 66759,
            66964, 67170, 67376, 67583, 67791,
            67999, 68208, 68418, 68628, 68839,
            69050, 69263, 69475, 69689, 69903,
            70118, 70333, 70549, 70766, 70984,
            71202, 71421, 71640, 71860, 72081,
            72302, 72525, 72747, 72971, 73195,
            73420, 73646, 73872, 74099, 74327,
            74555, 74784, 75014, 75244, 75476,
            75707, 75940, 76173, 76407, 76642,
            76878, 77114, 77351, 77589, 77827,
            78066, 78306, 78547, 78788, 79030,
            79273, 79516, 79761, 80006, 80252,
            80498, 80746, 80994, 81243, 81492,
            81743, 81994, 82246, 82498, 82752,
            83006, 83261, 83517, 83774, 84031,
            84289, 84548, 84808, 85069, 85330,
            85592, 85855, 86119, 86384, 86649,
            86915, 87182, 87450, 87719, 87989,
            88259, 88530, 88802, 89075, 89349,
            89623, 89899, 90175, 90452, 90730,
            91009, 91288, 91569, 91850, 92132,
            92415, 92699, 92984, 93270, 93557,
            93844, 94132, 94422, 94712, 95003,
            95295, 95587, 95881, 96176, 96471,
            96768, 97065, 97363, 97662, 97963,
            98264, 98565, 98868, 99172, 99477,
            99783, 100089, 100397, 100705, 101015,
            101325, 101636, 101949, 102262, 102576,
            102891, 103207, 103525, 103843, 104162,
            104482, 104803, 105125, 105448, 105772,
            106097, 106423, 106750, 107078, 107407,
            107737, 108068, 108400, 108733, 109067,
            109402, 109738, 110076, 110414, 110753,
            111093, 111435, 111777, 112121, 112465,
            112811, 113157, 113505, 113854, 114204,
            114555, 114907, 115260, 115614, 115969,
            116325, 116683, 117041, 117401, 117762,
            118124, 118486, 118851, 119216, 119582,
            119949, 120318, 120688, 121059, 121431,
            121804, 122178, 122553, 122930, 123308,
            123687, 124067, 124448, 124830, 125214,
            125598, 125984, 126371, 126760, 127149,
            127540, 127932, 128325, 128719, 129115,
            129511, 129909, 130309, 130709, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071
         ) ),
        max_error = cms.double(5748.616225984908),
        output_scale_factor = cms.double(0.953125),
        unused_lsbs = cms.uint32(2)
    ),
    inv_mass_checks = cms.untracked.bool(False),
    maxDz = cms.double(1),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    sanity_checks = cms.untracked.bool(False),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    )
)


process.TkMuPuppiJetPuppiMet = cms.EDFilter("L1GTTripleObjectCond",
    collection1 = cms.PSet(
        maxEta = cms.double(2.1),
        maxPrimVertDz = cms.double(1),
        minEta = cms.double(-2.1),
        minQualityScore = cms.uint32(0),
        primVertex = cms.uint32(0),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 0.83, 1.24),
        regionsMinPt = cms.vdouble(3, 3, 3),
        tag = cms.InputTag("l1tGTProducer","GMTTkMuons")
    ),
    collection2 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 1.5),
        regionsMinPt = cms.vdouble(69, 50),
        tag = cms.InputTag("l1tGTProducer","CL2JetsSC4")
    ),
    collection3 = cms.PSet(
        minPt = cms.double(38),
        tag = cms.InputTag("l1tGTProducer","CL2EtSum")
    ),
    cos_phi_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            487, 487, 487, 487, 487,
            487, 487, 487, 487, 487,
            487, 486, 486, 486, 486,
            486, 486, 486, 485, 485,
            485, 485, 485, 485, 484,
            484, 484, 484, 484, 483,
            483, 483, 483, 483, 482,
            482, 482, 482, 481, 481,
            481, 481, 480, 480, 480,
            480, 479, 479, 479, 478,
            478, 478, 478, 477, 477,
            477, 476, 476, 476, 475,
            475, 475, 474, 474, 474,
            473, 473, 472, 472, 472,
            471, 471, 471, 470, 470,
            469, 469, 468, 468, 468,
            467, 467, 466, 466, 465,
            465, 465, 464, 464, 463,
            463, 462, 462, 461, 461,
            460, 460, 459, 459, 458,
            458, 457, 457, 456, 456,
            455, 454, 454, 453, 453,
            452, 452, 451, 451, 450,
            449, 449, 448, 448, 447,
            446, 446, 445, 445, 444,
            443, 443, 442, 441, 441,
            440, 440, 439, 438, 438,
            437, 436, 436, 435, 434,
            434, 433, 432, 431, 431,
            430, 429, 429, 428, 427,
            426, 426, 425, 424, 423,
            423, 422, 421, 420, 420,
            419, 418, 417, 417, 416,
            415, 414, 413, 413, 412,
            411, 410, 409, 409, 408,
            407, 406, 405, 405, 404,
            403, 402, 401, 400, 399,
            399, 398, 397, 396, 395,
            394, 393, 392, 392, 391,
            390, 389, 388, 387, 386,
            385, 384, 383, 382, 381,
            381, 380, 379, 378, 377,
            376, 375, 374, 373, 372,
            371, 370, 369, 368, 367,
            366, 365, 364, 363, 362,
            361, 360, 359, 358, 357,
            356, 355, 354, 353, 352,
            351, 350, 349, 348, 347,
            346, 345, 343, 342, 341,
            340, 339, 338, 337, 336,
            335, 334, 333, 332, 330,
            329, 328, 327, 326, 325,
            324, 323, 322, 320, 319,
            318, 317, 316, 315, 314,
            312, 311, 310, 309, 308,
            307, 306, 304, 303, 302,
            301, 300, 298, 297, 296,
            295, 294, 293, 291, 290,
            289, 288, 286, 285, 284,
            283, 282, 280, 279, 278,
            277, 275, 274, 273, 272,
            270, 269, 268, 267, 265,
            264, 263, 262, 260, 259,
            258, 257, 255, 254, 253,
            252, 250, 249, 248, 246,
            245, 244, 242, 241, 240,
            239, 237, 236, 235, 233,
            232, 231, 229, 228, 227,
            225, 224, 223, 221, 220,
            219, 217, 216, 215, 213,
            212, 211, 209, 208, 207,
            205, 204, 203, 201, 200,
            198, 197, 196, 194, 193,
            192, 190, 189, 187, 186,
            185, 183, 182, 181, 179,
            178, 176, 175, 174, 172,
            171, 169, 168, 167, 165,
            164, 162, 161, 159, 158,
            157, 155, 154, 152, 151,
            150, 148, 147, 145, 144,
            142, 141, 140, 138, 137,
            135, 134, 132, 131, 129,
            128, 127, 125, 124, 122,
            121, 119, 118, 116, 115,
            113, 112, 111, 109, 108,
            106, 105, 103, 102, 100,
            99, 97, 96, 94, 93,
            92, 90, 89, 87, 86,
            84, 83, 81, 80, 78,
            77, 75, 74, 72, 71,
            69, 68, 66, 65, 63,
            62, 60, 59, 58, 56,
            55, 53, 52, 50, 49,
            47, 46, 44, 43, 41,
            40, 38, 37, 35, 34,
            32, 31, 29, 28, 26,
            25, 23, 22, 20, 19,
            17, 16, 14, 13, 11,
            10, 8, 7, 5, 4,
            2, 1, -1, -2, -4,
            -5, -7, -8, -10, -11,
            -13, -14, -16, -17, -19,
            -20, -22, -23, -25, -26,
            -28, -29, -31, -32, -34,
            -35, -37, -38, -40, -41,
            -43, -44, -46, -47, -49,
            -50, -52, -53, -55, -56,
            -58, -59, -60, -62, -63,
            -65, -66, -68, -69, -71,
            -72, -74, -75, -77, -78,
            -80, -81, -83, -84, -86,
            -87, -89, -90, -92, -93,
            -94, -96, -97, -99, -100,
            -102, -103, -105, -106, -108,
            -109, -111, -112, -113, -115,
            -116, -118, -119, -121, -122,
            -124, -125, -127, -128, -129,
            -131, -132, -134, -135, -137,
            -138, -140, -141, -142, -144,
            -145, -147, -148, -150, -151,
            -152, -154, -155, -157, -158,
            -159, -161, -162, -164, -165,
            -167, -168, -169, -171, -172,
            -174, -175, -176, -178, -179,
            -181, -182, -183, -185, -186,
            -187, -189, -190, -192, -193,
            -194, -196, -197, -198, -200,
            -201, -203, -204, -205, -207,
            -208, -209, -211, -212, -213,
            -215, -216, -217, -219, -220,
            -221, -223, -224, -225, -227,
            -228, -229, -231, -232, -233,
            -235, -236, -237, -239, -240,
            -241, -242, -244, -245, -246,
            -248, -249, -250, -252, -253,
            -254, -255, -257, -258, -259,
            -260, -262, -263, -264, -265,
            -267, -268, -269, -270, -272,
            -273, -274, -275, -277, -278,
            -279, -280, -282, -283, -284,
            -285, -286, -288, -289, -290,
            -291, -293, -294, -295, -296,
            -297, -298, -300, -301, -302,
            -303, -304, -306, -307, -308,
            -309, -310, -311, -312, -314,
            -315, -316, -317, -318, -319,
            -320, -322, -323, -324, -325,
            -326, -327, -328, -329, -330,
            -332, -333, -334, -335, -336,
            -337, -338, -339, -340, -341,
            -342, -343, -345, -346, -347,
            -348, -349, -350, -351, -352,
            -353, -354, -355, -356, -357,
            -358, -359, -360, -361, -362,
            -363, -364, -365, -366, -367,
            -368, -369, -370, -371, -372,
            -373, -374, -375, -376, -377,
            -378, -379, -380, -381, -381,
            -382, -383, -384, -385, -386,
            -387, -388, -389, -390, -391,
            -392, -392, -393, -394, -395,
            -396, -397, -398, -399, -399,
            -400, -401, -402, -403, -404,
            -405, -405, -406, -407, -408,
            -409, -409, -410, -411, -412,
            -413, -413, -414, -415, -416,
            -417, -417, -418, -419, -420,
            -420, -421, -422, -423, -423,
            -424, -425, -426, -426, -427,
            -428, -429, -429, -430, -431,
            -431, -432, -433, -434, -434,
            -435, -436, -436, -437, -438,
            -438, -439, -440, -440, -441,
            -441, -442, -443, -443, -444,
            -445, -445, -446, -446, -447,
            -448, -448, -449, -449, -450,
            -451, -451, -452, -452, -453,
            -453, -454, -454, -455, -456,
            -456, -457, -457, -458, -458,
            -459, -459, -460, -460, -461,
            -461, -462, -462, -463, -463,
            -464, -464, -465, -465, -465,
            -466, -466, -467, -467, -468,
            -468, -468, -469, -469, -470,
            -470, -471, -471, -471, -472,
            -472, -472, -473, -473, -474,
            -474, -474, -475, -475, -475,
            -476, -476, -476, -477, -477,
            -477, -478, -478, -478, -478,
            -479, -479, -479, -480, -480,
            -480, -480, -481, -481, -481,
            -481, -482, -482, -482, -482,
            -483, -483, -483, -483, -483,
            -484, -484, -484, -484, -484,
            -485, -485, -485, -485, -485,
            -485, -486, -486, -486, -486,
            -486, -486, -486, -487, -487,
            -487, -487, -487, -487, -487,
            -487, -487, -487, -487, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488
         ) ),
        max_error = cms.double(0.0025338281044886835),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            489, 489, 489, 489, 489,
            489, 489, 489, 489, 489,
            489, 490, 490, 490, 490,
            490, 490, 490, 491, 491,
            491, 491, 491, 491, 492,
            492, 492, 492, 492, 493,
            493, 493, 493, 493, 494,
            494, 494, 494, 495, 495,
            495, 495, 496, 496, 496,
            496, 497, 497, 497, 498,
            498, 498, 499, 499, 499,
            499, 500, 500, 500, 501,
            501, 502, 502, 502, 503,
            503, 503, 504, 504, 504,
            505, 505, 506, 506, 507,
            507, 507, 508, 508, 509,
            509, 510, 510, 510, 511,
            511, 512, 512, 513, 513,
            514, 514, 515, 515, 516,
            516, 517, 517, 518, 518,
            519, 520, 520, 521, 521,
            522, 522, 523, 523, 524,
            525, 525, 526, 526, 527,
            528, 528, 529, 530, 530,
            531, 531, 532, 533, 533,
            534, 535, 535, 536, 537,
            537, 538, 539, 540, 540,
            541, 542, 542, 543, 544,
            545, 545, 546, 547, 548,
            548, 549, 550, 551, 551,
            552, 553, 554, 555, 555,
            556, 557, 558, 559, 560,
            560, 561, 562, 563, 564,
            565, 566, 567, 567, 568,
            569, 570, 571, 572, 573,
            574, 575, 576, 577, 577,
            578, 579, 580, 581, 582,
            583, 584, 585, 586, 587,
            588, 589, 590, 591, 592,
            593, 594, 595, 596, 598,
            599, 600, 601, 602, 603,
            604, 605, 606, 607, 608,
            610, 611, 612, 613, 614,
            615, 616, 618, 619, 620,
            621, 622, 623, 625, 626,
            627, 628, 629, 631, 632,
            633, 634, 636, 637, 638,
            639, 641, 642, 643, 644,
            646, 647, 648, 650, 651,
            652, 654, 655, 656, 658,
            659, 660, 662, 663, 665,
            666, 667, 669, 670, 672,
            673, 674, 676, 677, 679,
            680, 682, 683, 685, 686,
            687, 689, 690, 692, 693,
            695, 697, 698, 700, 701,
            703, 704, 706, 707, 709,
            710, 712, 714, 715, 717,
            719, 720, 722, 723, 725,
            727, 728, 730, 732, 733,
            735, 737, 738, 740, 742,
            744, 745, 747, 749, 750,
            752, 754, 756, 758, 759,
            761, 763, 765, 767, 768,
            770, 772, 774, 776, 778,
            779, 781, 783, 785, 787,
            789, 791, 793, 795, 796,
            798, 800, 802, 804, 806,
            808, 810, 812, 814, 816,
            818, 820, 822, 824, 826,
            828, 830, 832, 835, 837,
            839, 841, 843, 845, 847,
            849, 851, 854, 856, 858,
            860, 862, 864, 867, 869,
            871, 873, 875, 878, 880,
            882, 884, 887, 889, 891,
            894, 896, 898, 900, 903,
            905, 907, 910, 912, 915,
            917, 919, 922, 924, 927,
            929, 931, 934, 936, 939,
            941, 944, 946, 949, 951,
            954, 956, 959, 961, 964,
            966, 969, 971, 974, 977,
            979, 982, 984, 987, 990,
            992, 995, 998, 1000, 1003,
            1006, 1008, 1011, 1014, 1017,
            1019, 1022, 1025, 1028, 1030,
            1033, 1036, 1039, 1042, 1044,
            1047, 1050, 1053, 1056, 1059,
            1062, 1065, 1067, 1070, 1073,
            1076, 1079, 1082, 1085, 1088,
            1091, 1094, 1097, 1100, 1103,
            1106, 1109, 1112, 1115, 1118,
            1122, 1125, 1128, 1131, 1134,
            1137, 1140, 1143, 1147, 1150,
            1153, 1156, 1159, 1163, 1166,
            1169, 1172, 1176, 1179, 1182,
            1186, 1189, 1192, 1196, 1199,
            1202, 1206, 1209, 1212, 1216,
            1219, 1223, 1226, 1230, 1233,
            1237, 1240, 1244, 1247, 1251,
            1254, 1258, 1261, 1265, 1268,
            1272, 1276, 1279, 1283, 1287,
            1290, 1294, 1298, 1301, 1305,
            1309, 1312, 1316, 1320, 1324,
            1327, 1331, 1335, 1339, 1343,
            1347, 1350, 1354, 1358, 1362,
            1366, 1370, 1374, 1378, 1382,
            1386, 1390, 1394, 1398, 1402,
            1406, 1410, 1414, 1418, 1422,
            1426, 1430, 1434, 1439, 1443,
            1447, 1451, 1455, 1459, 1464,
            1468, 1472, 1476, 1481, 1485,
            1489, 1494, 1498, 1502, 1507,
            1511, 1516, 1520, 1524, 1529,
            1533, 1538, 1542, 1547, 1551,
            1556, 1560, 1565, 1569, 1574,
            1579, 1583, 1588, 1592, 1597,
            1602, 1606, 1611, 1616, 1621,
            1625, 1630, 1635, 1640, 1645,
            1649, 1654, 1659, 1664, 1669,
            1674, 1679, 1684, 1689, 1693,
            1698, 1703, 1708, 1714, 1719,
            1724, 1729, 1734, 1739, 1744,
            1749, 1754, 1760, 1765, 1770,
            1775, 1780, 1786, 1791, 1796,
            1802, 1807, 1812, 1818, 1823,
            1828, 1834, 1839, 1845, 1850,
            1856, 1861, 1867, 1872, 1878,
            1883, 1889, 1894, 1900, 1906,
            1911, 1917, 1923, 1929, 1934,
            1940, 1946, 1952, 1957, 1963,
            1969, 1975, 1981, 1987, 1993,
            1999, 2004, 2010, 2016, 2022,
            2028, 2035, 2041, 2047, 2053,
            2059, 2065, 2071, 2077, 2084,
            2090, 2096, 2102, 2109, 2115,
            2121, 2128, 2134, 2140, 2147,
            2153, 2160, 2166, 2173, 2179,
            2186, 2192, 2199, 2205, 2212,
            2219, 2225, 2232, 2239, 2245,
            2252, 2259, 2266, 2272, 2279,
            2286, 2293, 2300, 2307, 2314,
            2321, 2328, 2335, 2342, 2349,
            2356, 2363, 2370, 2377, 2384,
            2391, 2398, 2406, 2413, 2420,
            2427, 2435, 2442, 2449, 2457,
            2464, 2472, 2479, 2487, 2494,
            2502, 2509, 2517, 2524, 2532,
            2539, 2547, 2555, 2563, 2570,
            2578, 2586, 2594, 2601, 2609,
            2617, 2625, 2633, 2641, 2649,
            2657, 2665, 2673, 2681, 2689,
            2697, 2705, 2714, 2722, 2730,
            2738, 2747, 2755, 2763, 2772,
            2780, 2788, 2797, 2805, 2814,
            2822, 2831, 2839, 2848, 2857,
            2865, 2874, 2883, 2891, 2900,
            2909, 2918, 2927, 2935, 2944,
            2953, 2962, 2971, 2980, 2989,
            2998, 3007, 3016, 3026, 3035,
            3044, 3053, 3062, 3072, 3081,
            3090, 3100, 3109, 3119, 3128,
            3138, 3147, 3157, 3166, 3176,
            3186, 3195, 3205, 3215, 3224,
            3234, 3244, 3254, 3264, 3274,
            3284, 3294, 3304, 3314, 3324,
            3334, 3344, 3354, 3364, 3375,
            3385, 3395, 3405, 3416, 3426,
            3437, 3447, 3458, 3468, 3479,
            3489, 3500, 3510, 3521, 3532,
            3543, 3553, 3564, 3575, 3586,
            3597, 3608, 3619, 3630, 3641,
            3652, 3663, 3674, 3685, 3697,
            3708, 3719, 3730, 3742, 3753,
            3765, 3776, 3788, 3799, 3811,
            3822, 3834, 3846, 3857, 3869,
            3881, 3893, 3905, 3917, 3929,
            3941, 3953, 3965, 3977, 3989,
            4001, 4013, 4025, 4038, 4050,
            4062, 4075, 4087, 4100, 4112,
            4125, 4137, 4150, 4163, 4175,
            4188, 4201, 4214, 4226, 4239,
            4252, 4265, 4278, 4291, 4304,
            4318, 4331, 4344, 4357, 4371,
            4384, 4397, 4411, 4424, 4438,
            4451, 4465, 4479, 4492, 4506,
            4520, 4533, 4547, 4561, 4575,
            4589, 4603, 4617, 4631, 4645,
            4660, 4674, 4688, 4703, 4717,
            4731, 4746, 4760, 4775, 4789,
            4804, 4819, 4833, 4848, 4863,
            4878, 4893, 4908, 4923, 4938,
            4953, 4968, 4983, 4999, 5014,
            5029, 5045, 5060, 5075, 5091,
            5107, 5122, 5138, 5154, 5169,
            5185, 5201, 5217, 5233, 5249,
            5265, 5281, 5297, 5313, 5330,
            5346, 5362, 5379, 5395, 5412,
            5428, 5445, 5462, 5478, 5495,
            5512, 5529, 5546, 5563, 5580,
            5597, 5614, 5631, 5648, 5666,
            5683, 5700, 5718, 5735, 5753,
            5770, 5788, 5806, 5824, 5841,
            5859, 5877, 5895, 5913, 5931,
            5950, 5968, 5986, 6004, 6023,
            6041, 6060, 6078, 6097, 6116,
            6134, 6153, 6172, 6191, 6210,
            6229, 6248, 6267, 6286, 6305,
            6325, 6344, 6364, 6383, 6403,
            6422, 6442, 6462, 6481, 6501,
            6521, 6541, 6561, 6581, 6602,
            6622, 6642, 6662, 6683, 6703,
            6724, 6744, 6765, 6786, 6807,
            6828, 6848, 6869, 6891, 6912,
            6933, 6954, 6975, 6997, 7018,
            7040, 7061, 7083, 7105, 7126,
            7148, 7170, 7192, 7214, 7236,
            7259, 7281, 7303, 7325, 7348,
            7370, 7393, 7416, 7438, 7461,
            7484, 7507, 7530, 7553, 7576,
            7600, 7623, 7646, 7670, 7693,
            7717, 7741, 7764, 7788, 7812,
            7836, 7860, 7884, 7908, 7932,
            7957, 7981, 8006, 8030, 8055,
            8080, 8104, 8129, 8154, 8179,
            8204, 8229, 8255, 8280, 8305,
            8331, 8356, 8382, 8408, 8434,
            8459, 8485, 8511, 8537, 8564,
            8590, 8616, 8643, 8669, 8696,
            8722, 8749, 8776, 8803, 8830,
            8857, 8884, 8912, 8939, 8966,
            8994, 9021, 9049, 9077, 9105,
            9133, 9161, 9189, 9217, 9245,
            9274, 9302, 9331, 9359, 9388,
            9417, 9446, 9475, 9504, 9533,
            9562, 9591, 9621, 9650, 9680,
            9710, 9740, 9769, 9799, 9830,
            9860, 9890, 9920, 9951, 9981,
            10012, 10043, 10073, 10104, 10135,
            10166, 10198, 10229, 10260, 10292,
            10323, 10355, 10387, 10419, 10451,
            10483, 10515, 10547, 10580, 10612,
            10645, 10677, 10710, 10743, 10776,
            10809, 10842, 10876, 10909, 10942,
            10976, 11010, 11044, 11077, 11111,
            11146, 11180, 11214, 11248, 11283,
            11318, 11352, 11387, 11422, 11457,
            11492, 11528, 11563, 11599, 11634,
            11670, 11706, 11742, 11778, 11814,
            11850, 11887, 11923, 11960, 11996,
            12033, 12070, 12107, 12144, 12182,
            12219, 12257, 12294, 12332, 12370,
            12408, 12446, 12484, 12522, 12561,
            12599, 12638, 12677, 12716, 12755,
            12794, 12833, 12873, 12912, 12952,
            12992, 13032, 13072, 13112, 13152,
            13192, 13233, 13274, 13314, 13355,
            13396, 13437, 13479, 13520, 13561,
            13603, 13645, 13687, 13729, 13771,
            13813, 13856, 13898, 13941, 13984,
            14027, 14070, 14113, 14156, 14200,
            14243, 14287, 14331, 14375, 14419,
            14463, 14508, 14552, 14597, 14642,
            14687, 14732, 14777, 14823, 14868,
            14914, 14960, 15005, 15052, 15098,
            15144, 15191, 15237, 15284, 15331,
            15378, 15425, 15473, 15520, 15568,
            15616, 15664, 15712, 15760, 15808,
            15857, 15906, 15955, 16004, 16053,
            16102, 16151, 16201, 16251, 16301,
            16351, 16401, 16451, 16502, 16553,
            16603, 16654, 16706, 16757, 16808,
            16860, 16912, 16964, 17016, 17068,
            17121, 17173, 17226, 17279, 17332,
            17385, 17438, 17492, 17546, 17600,
            17654, 17708, 17762, 17817, 17872,
            17926, 17982, 18037, 18092, 18148,
            18203, 18259, 18315, 18372, 18428,
            18485, 18542, 18598, 18656, 18713,
            18770, 18828, 18886, 18944, 19002,
            19060, 19119, 19178, 19237, 19296,
            19355, 19414, 19474, 19534, 19594,
            19654, 19714, 19775, 19836, 19897,
            19958, 20019, 20081, 20142, 20204,
            20266, 20328, 20391, 20454, 20516,
            20579, 20643, 20706, 20770, 20833,
            20897, 20962, 21026, 21091, 21155,
            21220, 21286, 21351, 21417, 21482,
            21548, 21615, 21681, 21748, 21814,
            21881, 21949, 22016, 22084, 22151,
            22220, 22288, 22356, 22425, 22494,
            22563, 22632, 22702, 22771, 22841,
            22912, 22982, 23053, 23123, 23194,
            23266, 23337, 23409, 23481, 23553,
            23625, 23698, 23771, 23844, 23917,
            23990, 24064, 24138, 24212, 24287,
            24361, 24436, 24511, 24586, 24662,
            24738, 24814, 24890, 24966, 25043,
            25120, 25197, 25275, 25352, 25430,
            25508, 25587, 25665, 25744, 25823,
            25902, 25982, 26062, 26142, 26222,
            26303, 26384, 26465, 26546, 26627,
            26709, 26791, 26874, 26956, 27039,
            27122, 27205, 27289, 27373, 27457,
            27541, 27626, 27711, 27796, 27881,
            27967, 28053, 28139, 28226, 28312,
            28399, 28486, 28574, 28662, 28750,
            28838, 28927, 29016, 29105, 29194,
            29284, 29374, 29464, 29555, 29645,
            29736, 29828, 29919, 30011, 30104,
            30196, 30289, 30382, 30475, 30569,
            30663, 30757, 30851, 30946, 31041,
            31137, 31232, 31328, 31425, 31521,
            31618, 31715, 31813, 31910, 32008,
            32107, 32205, 32304, 32403, 32503,
            32603, 32703, 32804, 32904, 33005,
            33107, 33209, 33311, 33413, 33516,
            33619, 33722, 33825, 33929, 34034,
            34138, 34243, 34348, 34454, 34560,
            34666, 34772, 34879, 34986, 35094,
            35202, 35310, 35418, 35527, 35636,
            35746, 35856, 35966, 36076, 36187,
            36298, 36410, 36522, 36634, 36746,
            36859, 36973, 37086, 37200, 37314,
            37429, 37544, 37659, 37775, 37891,
            38008, 38124, 38241, 38359, 38477,
            38595, 38714, 38833, 38952, 39072,
            39192, 39312, 39433, 39554, 39675,
            39797, 39920, 40042, 40165, 40289,
            40413, 40537, 40661, 40786, 40911,
            41037, 41163, 41290, 41417, 41544,
            41671, 41800, 41928, 42057, 42186,
            42316, 42446, 42576, 42707, 42838,
            42970, 43102, 43234, 43367, 43500,
            43634, 43768, 43902, 44037, 44173,
            44308, 44444, 44581, 44718, 44855,
            44993, 45131, 45270, 45409, 45549,
            45689, 45829, 45970, 46111, 46253,
            46395, 46537, 46680, 46824, 46968,
            47112, 47257, 47402, 47548, 47694,
            47840, 47987, 48135, 48283, 48431,
            48580, 48729, 48879, 49029, 49180,
            49331, 49482, 49634, 49787, 49940,
            50093, 50247, 50401, 50556, 50712,
            50867, 51024, 51181, 51338, 51495,
            51654, 51812, 51972, 52131, 52291,
            52452, 52613, 52775, 52937, 53100,
            53263, 53427, 53591, 53755, 53921,
            54086, 54252, 54419, 54586, 54754,
            54922, 55091, 55260, 55430, 55600,
            55771, 55943, 56114, 56287, 56460,
            56633, 56807, 56982, 57157, 57333,
            57509, 57685, 57863, 58040, 58219,
            58398, 58577, 58757, 58938, 59119,
            59300, 59483, 59665, 59849, 60033,
            60217, 60402, 60588, 60774, 60960,
            61148, 61336, 61524, 61713, 61903,
            62093, 62284, 62475, 62667, 62860,
            63053, 63247, 63441, 63636, 63831,
            64027, 64224, 64422, 64619, 64818,
            65017, 65217, 65417, 65618, 65820,
            66022, 66225, 66429, 66633, 66837,
            67043, 67249, 67455, 67663, 67870,
            68079, 68288, 68498, 68708, 68920,
            69131, 69344, 69557, 69771, 69985,
            70200, 70416, 70632, 70849, 71067,
            71285, 71504, 71724, 71944, 72165,
            72387, 72609, 72833, 73056, 73281,
            73506, 73732, 73958, 74186, 74414,
            74642, 74872, 75102, 75332, 75564,
            75796, 76029, 76262, 76497, 76732,
            76968, 77204, 77441, 77679, 77918,
            78157, 78398, 78638, 78880, 79122,
            79366, 79609, 79854, 80099, 80345,
            80592, 80840, 81088, 81338, 81587,
            81838, 82090, 82342, 82595, 82849,
            83103, 83358, 83615, 83872, 84129,
            84388, 84647, 84907, 85168, 85430,
            85692, 85955, 86220, 86485, 86750,
            87017, 87284, 87552, 87821, 88091,
            88362, 88633, 88906, 89179, 89453,
            89728, 90003, 90280, 90557, 90836,
            91115, 91395, 91676, 91957, 92240,
            92523, 92807, 93093, 93379, 93666,
            93953, 94242, 94532, 94822, 95113,
            95406, 95699, 95993, 96288, 96584,
            96881, 97178, 97477, 97776, 98077,
            98378, 98680, 98984, 99288, 99593,
            99899, 100206, 100514, 100822, 101132,
            101443, 101755, 102067, 102381, 102696,
            103011, 103328, 103645, 103964, 104283,
            104603, 104925, 105247, 105571, 105895,
            106220, 106547, 106874, 107203, 107532,
            107862, 108194, 108526, 108860, 109194,
            109530, 109866, 110204, 110542, 110882,
            111223, 111565, 111907, 112251, 112596,
            112942, 113289, 113637, 113986, 114337,
            114688, 115040, 115394, 115748, 116104,
            116461, 116819, 117178, 117538, 117899,
            118261, 118624, 118989, 119354, 119721,
            120089, 120458, 120828, 121199, 121572,
            121945, 122320, 122696, 123073, 123451,
            123830, 124211, 124593, 124975, 125359,
            125745, 126131, 126518, 126907, 127297,
            127688, 128081, 128474, 128869, 129265,
            129662, 130061, 130260
         ) ),
        max_error = cms.double(0.6152529479288091),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut2 = cms.PSet(
        lut = cms.vint32( (
            256, 256, 257, 258, 259,
            260, 260, 261, 262, 263,
            264, 264, 265, 266, 267,
            268, 268, 269, 270, 271,
            272, 273, 273, 274, 275,
            276, 277, 278, 279, 279,
            280, 281, 282, 283, 284,
            285, 285, 286, 287, 288,
            289, 290, 291, 292, 293,
            293, 294, 295, 296, 297,
            298, 299, 300, 301, 302,
            303, 303, 304, 305, 306,
            307, 308, 309, 310, 311,
            312, 313, 314, 315, 316,
            317, 318, 319, 320, 321,
            322, 323, 324, 325, 326,
            327, 328, 329, 330, 331,
            332, 333, 334, 335, 336,
            337, 338, 339, 340, 341,
            342, 343, 344, 345, 346,
            347, 348, 349, 351, 352,
            353, 354, 355, 356, 357,
            358, 359, 360, 361, 363,
            364, 365, 366, 367, 368,
            369, 370, 372, 373, 374,
            375, 376, 377, 379, 380,
            381, 382, 383, 384, 386,
            387, 388, 389, 390, 392,
            393, 394, 395, 396, 398,
            399, 400, 401, 402, 404,
            405, 406, 407, 409, 410,
            411, 412, 414, 415, 416,
            418, 419, 420, 421, 423,
            424, 425, 427, 428, 429,
            431, 432, 433, 435, 436,
            437, 439, 440, 441, 443,
            444, 445, 447, 448, 449,
            451, 452, 454, 455, 456,
            458, 459, 461, 462, 463,
            465, 466, 468, 469, 471,
            472, 474, 475, 476, 478,
            479, 481, 482, 484, 485,
            487, 488, 490, 491, 493,
            494, 496, 497, 499, 500,
            502, 503, 505, 507, 508,
            510, 511, 513, 514, 516,
            518, 519, 521, 522, 524,
            526, 527, 529, 530, 532,
            534, 535, 537, 539, 540,
            542, 544, 545, 547, 549,
            550, 552, 554, 555, 557,
            559, 561, 562, 564, 566,
            567, 569, 571, 573, 575,
            576, 578, 580, 582, 583,
            585, 587, 589, 591, 592,
            594, 596, 598, 600, 602,
            603, 605, 607, 609, 611,
            613, 615, 617, 618, 620,
            622, 624, 626, 628, 630,
            632, 634, 636, 638, 640,
            642, 644, 646, 648, 650,
            652, 654, 656, 658, 660,
            662, 664, 666, 668, 670,
            672, 674, 676, 678, 680,
            682, 684, 686, 688, 691,
            693, 695, 697, 699, 701,
            703, 706, 708, 710, 712,
            714, 717, 719, 721, 723,
            725, 728, 730, 732, 734,
            737, 739, 741, 743, 746,
            748, 750, 753, 755, 757,
            760, 762, 764, 767, 769,
            771, 774, 776, 778, 781,
            783, 786, 788, 790, 793,
            795, 798, 800, 803, 805,
            808, 810, 813, 815, 818,
            820, 823, 825, 828, 830,
            833, 835, 838, 840, 843,
            846, 848, 851, 853, 856,
            859, 861, 864, 867, 869,
            872, 875, 877, 880, 883,
            885, 888, 891, 894, 896,
            899, 902, 905, 907, 910,
            913, 916, 919, 921, 924,
            927, 930, 933, 936, 939,
            941, 944, 947, 950, 953,
            956, 959, 962, 965, 968,
            971, 974, 977, 980, 983,
            986, 989, 992, 995, 998,
            1001, 1004, 1007, 1010, 1013,
            1017, 1020, 1023, 1026, 1029,
            1032, 1035, 1039, 1042, 1045,
            1048, 1051, 1055, 1058, 1061,
            1064, 1068, 1071, 1074, 1078,
            1081, 1084, 1088, 1091, 1094,
            1098, 1101, 1104, 1108, 1111,
            1115, 1118, 1121, 1125, 1128,
            1132, 1135, 1139, 1142, 1146,
            1149, 1153, 1156, 1160, 1163,
            1167, 1171, 1174, 1178, 1181,
            1185, 1189, 1192, 1196, 1200,
            1203, 1207, 1211, 1214, 1218,
            1222, 1226, 1229, 1233, 1237,
            1241, 1245, 1249, 1252, 1256,
            1260, 1264, 1268, 1272, 1276,
            1280, 1283, 1287, 1291, 1295,
            1299, 1303, 1307, 1311, 1315,
            1319, 1323, 1328, 1332, 1336,
            1340, 1344, 1348, 1352, 1356,
            1360, 1365, 1369, 1373, 1377,
            1382, 1386, 1390, 1394, 1399,
            1403, 1407, 1412, 1416, 1420,
            1425, 1429, 1433, 1438, 1442,
            1447, 1451, 1455, 1460, 1464,
            1469, 1473, 1478, 1483, 1487,
            1492, 1496, 1501, 1505, 1510,
            1515, 1519, 1524, 1529, 1533,
            1538, 1543, 1548, 1552, 1557,
            1562, 1567, 1572, 1576, 1581,
            1586, 1591, 1596, 1601, 1606,
            1611, 1616, 1620, 1625, 1630,
            1635, 1640, 1646, 1651, 1656,
            1661, 1666, 1671, 1676, 1681,
            1686, 1692, 1697, 1702, 1707,
            1712, 1718, 1723, 1728, 1734,
            1739, 1744, 1750, 1755, 1760,
            1766, 1771, 1777, 1782, 1788,
            1793, 1799, 1804, 1810, 1815,
            1821, 1826, 1832, 1838, 1843,
            1849, 1855, 1860, 1866, 1872,
            1878, 1883, 1889, 1895, 1901,
            1907, 1912, 1918, 1924, 1930,
            1936, 1942, 1948, 1954, 1960,
            1966, 1972, 1978, 1984, 1990,
            1996, 2003, 2009, 2015, 2021,
            2027, 2033, 2040, 2046, 2052,
            2059, 2065, 2071, 2078, 2084,
            2090, 2097, 2103, 2110, 2116,
            2123, 2129, 2136, 2142, 2149,
            2156, 2162, 2169, 2175, 2182,
            2189, 2196, 2202, 2209, 2216,
            2223, 2230, 2236, 2243, 2250,
            2257, 2264, 2271, 2278, 2285,
            2292, 2299, 2306, 2313, 2320,
            2327, 2335, 2342, 2349, 2356,
            2363, 2371, 2378, 2385, 2393,
            2400, 2407, 2415, 2422, 2430,
            2437, 2444, 2452, 2460, 2467,
            2475, 2482, 2490, 2498, 2505,
            2513, 2521, 2528, 2536, 2544,
            2552, 2560, 2567, 2575, 2583,
            2591, 2599, 2607, 2615, 2623,
            2631, 2639, 2647, 2656, 2664,
            2672, 2680, 2688, 2697, 2705,
            2713, 2722, 2730, 2738, 2747,
            2755, 2764, 2772, 2781, 2789,
            2798, 2806, 2815, 2824, 2832,
            2841, 2850, 2858, 2867, 2876,
            2885, 2894, 2903, 2912, 2921,
            2930, 2939, 2948, 2957, 2966,
            2975, 2984, 2993, 3002, 3012,
            3021, 3030, 3039, 3049, 3058,
            3067, 3077, 3086, 3096, 3105,
            3115, 3124, 3134, 3144, 3153,
            3163, 3173, 3183, 3192, 3202,
            3212, 3222, 3232, 3242, 3252,
            3262, 3272, 3282, 3292, 3302,
            3312, 3322, 3332, 3343, 3353,
            3363, 3374, 3384, 3394, 3405,
            3415, 3426, 3436, 3447, 3457,
            3468, 3479, 3489, 3500, 3511,
            3522, 3532, 3543, 3554, 3565,
            3576, 3587, 3598, 3609, 3620,
            3631, 3642, 3654, 3665, 3676,
            3687, 3699, 3710, 3722, 3733,
            3744, 3756, 3767, 3779, 3791,
            3802, 3814, 3826, 3837, 3849,
            3861, 3873, 3885, 3897, 3909,
            3921, 3933, 3945, 3957, 3969,
            3981, 3994, 4006, 4018, 4031,
            4043, 4055, 4068, 4080, 4093,
            4105, 4118, 4131, 4143, 4156,
            4169, 4182, 4195, 4207, 4220,
            4233, 4246, 4259, 4272, 4286,
            4299, 4312, 4325, 4339, 4352,
            4365, 4379, 4392, 4406, 4419,
            4433, 4446, 4460, 4474, 4487,
            4501, 4515, 4529, 4543, 4557,
            4571, 4585, 4599, 4613, 4627,
            4641, 4656, 4670, 4684, 4699,
            4713, 4728, 4742, 4757, 4771,
            4786, 4801, 4816, 4830, 4845,
            4860, 4875, 4890, 4905, 4920,
            4935, 4950, 4966, 4981, 4996,
            5011, 5027, 5042, 5058, 5073,
            5089, 5105, 5120, 5136, 5152,
            5168, 5183, 5199, 5215, 5231,
            5247, 5264, 5280, 5296, 5312,
            5329, 5345, 5361, 5378, 5394,
            5411, 5428, 5444, 5461, 5478,
            5495, 5512, 5528, 5545, 5562,
            5580, 5597, 5614, 5631, 5648,
            5666, 5683, 5701, 5718, 5736,
            5753, 5771, 5789, 5807, 5824,
            5842, 5860, 5878, 5896, 5914,
            5933, 5951, 5969, 5987, 6006,
            6024, 6043, 6061, 6080, 6099,
            6117, 6136, 6155, 6174, 6193,
            6212, 6231, 6250, 6269, 6289,
            6308, 6327, 6347, 6366, 6386,
            6406, 6425, 6445, 6465, 6485,
            6505, 6525, 6545, 6565, 6585,
            6605, 6625, 6646, 6666, 6687,
            6707, 6728, 6749, 6769, 6790,
            6811, 6832, 6853, 6874, 6895,
            6916, 6937, 6959, 6980, 7002,
            7023, 7045, 7066, 7088, 7110,
            7132, 7154, 7176, 7198, 7220,
            7242, 7264, 7286, 7309, 7331,
            7354, 7376, 7399, 7422, 7445,
            7468, 7490, 7513, 7537, 7560,
            7583, 7606, 7630, 7653, 7677,
            7700, 7724, 7748, 7771, 7795,
            7819, 7843, 7867, 7892, 7916,
            7940, 7964, 7989, 8014, 8038,
            8063, 8088, 8112, 8137, 8162,
            8187, 8213, 8238, 8263, 8289,
            8314, 8340, 8365, 8391, 8417,
            8443, 8468, 8495, 8521, 8547,
            8573, 8599, 8626, 8652, 8679,
            8706, 8732, 8759, 8786, 8813,
            8840, 8867, 8895, 8922, 8949,
            8977, 9004, 9032, 9060, 9088,
            9116, 9144, 9172, 9200, 9228,
            9256, 9285, 9313, 9342, 9371,
            9400, 9428, 9457, 9486, 9516,
            9545, 9574, 9604, 9633, 9663,
            9692, 9722, 9752, 9782, 9812,
            9842, 9872, 9903, 9933, 9964,
            9994, 10025, 10056, 10087, 10118,
            10149, 10180, 10211, 10243, 10274,
            10306, 10337, 10369, 10401, 10433,
            10465, 10497, 10529, 10562, 10594,
            10627, 10659, 10692, 10725, 10758,
            10791, 10824, 10858, 10891, 10924,
            10958, 10992, 11025, 11059, 11093,
            11127, 11161, 11196, 11230, 11265,
            11299, 11334, 11369, 11404, 11439,
            11474, 11509, 11545, 11580, 11616,
            11651, 11687, 11723, 11759, 11795,
            11831, 11868, 11904, 11941, 11978,
            12014, 12051, 12088, 12125, 12163,
            12200, 12238, 12275, 12313, 12351,
            12389, 12427, 12465, 12503, 12542,
            12580, 12619, 12658, 12696, 12735,
            12775, 12814, 12853, 12893, 12932,
            12972, 13012, 13052, 13092, 13132,
            13173, 13213, 13254, 13294, 13335,
            13376, 13417, 13459, 13500, 13541,
            13583, 13625, 13667, 13709, 13751,
            13793, 13835, 13878, 13920, 13963,
            14006, 14049, 14092, 14136, 14179,
            14223, 14266, 14310, 14354, 14398,
            14443, 14487, 14531, 14576, 14621,
            14666, 14711, 14756, 14801, 14847,
            14892, 14938, 14984, 15030, 15076,
            15123, 15169, 15216, 15263, 15309,
            15356, 15404, 15451, 15498, 15546,
            15594, 15642, 15690, 15738, 15786,
            15835, 15884, 15932, 15981, 16030,
            16080, 16129, 16179, 16228, 16278,
            16328, 16378, 16429, 16479, 16530,
            16581, 16632, 16683, 16734, 16785,
            16837, 16889, 16941, 16993, 17045,
            17097, 17150, 17202, 17255, 17308,
            17361, 17415, 17468, 17522, 17576,
            17630, 17684, 17738, 17793, 17848,
            17902, 17957, 18013, 18068, 18123,
            18179, 18235, 18291, 18347, 18404,
            18460, 18517, 18574, 18631, 18688,
            18746, 18803, 18861, 18919, 18977,
            19035, 19094, 19152, 19211, 19270,
            19330, 19389, 19448, 19508, 19568,
            19628, 19689, 19749, 19810, 19871,
            19932, 19993, 20054, 20116, 20178,
            20240, 20302, 20364, 20427, 20490,
            20553, 20616, 20679, 20743, 20806,
            20870, 20935, 20999, 21063, 21128,
            21193, 21258, 21323, 21389, 21455,
            21521, 21587, 21653, 21720, 21786,
            21853, 21920, 21988, 22055, 22123,
            22191, 22259, 22328, 22396, 22465,
            22534, 22603, 22673, 22742, 22812,
            22882, 22953, 23023, 23094, 23165,
            23236, 23308, 23379, 23451, 23523,
            23595, 23668, 23741, 23814, 23887,
            23960, 24034, 24108, 24182, 24256,
            24330, 24405, 24480, 24555, 24631,
            24707, 24783, 24859, 24935, 25012,
            25089, 25166, 25243, 25320, 25398,
            25476, 25555, 25633, 25712, 25791,
            25870, 25950, 26029, 26109, 26190,
            26270, 26351, 26432, 26513, 26594,
            26676, 26758, 26840, 26923, 27006,
            27088, 27172, 27255, 27339, 27423,
            27507, 27592, 27677, 27762, 27847,
            27932, 28018, 28104, 28191, 28277,
            28364, 28451, 28539, 28626, 28714,
            28803, 28891, 28980, 29069, 29158,
            29248, 29338, 29428, 29518, 29609,
            29700, 29791, 29883, 29975, 30067,
            30159, 30252, 30345, 30438, 30532,
            30625, 30719, 30814, 30909, 31003,
            31099, 31194, 31290, 31386, 31483,
            31579, 31677, 31774, 31871, 31969,
            32068, 32166, 32265, 32364, 32464,
            32563, 32663, 32764, 32864, 32965,
            33067, 33168, 33270, 33372, 33475,
            33578, 33681, 33785, 33888, 33992,
            34097, 34202, 34307, 34412, 34518,
            34624, 34730, 34837, 34944, 35051,
            35159, 35267, 35376, 35484, 35593,
            35703, 35812, 35922, 36033, 36144,
            36255, 36366, 36478, 36590, 36702,
            36815, 36928, 37042, 37155, 37270,
            37384, 37499, 37614, 37730, 37846,
            37962, 38079, 38196, 38313, 38431,
            38549, 38667, 38786, 38905, 39025,
            39145, 39265, 39386, 39507, 39628,
            39750, 39872, 39994, 40117, 40241,
            40364, 40488, 40613, 40737, 40863,
            40988, 41114, 41240, 41367, 41494,
            41622, 41750, 41878, 42007, 42136,
            42265, 42395, 42525, 42656, 42787,
            42919, 43050, 43183, 43315, 43448,
            43582, 43716, 43850, 43985, 44120,
            44256, 44392, 44528, 44665, 44802,
            44940, 45078, 45216, 45355, 45495,
            45634, 45775, 45915, 46056, 46198,
            46340, 46482, 46625, 46768, 46912,
            47056, 47201, 47346, 47491, 47637,
            47784, 47930, 48078, 48225, 48374,
            48522, 48671, 48821, 48971, 49121,
            49272, 49424, 49576, 49728, 49881,
            50034, 50188, 50342, 50497, 50652,
            50807, 50963, 51120, 51277, 51435,
            51593, 51751, 51910, 52070, 52230,
            52390, 52551, 52713, 52875, 53037,
            53200, 53364, 53528, 53692, 53857,
            54022, 54188, 54355, 54522, 54690,
            54858, 55026, 55195, 55365, 55535,
            55706, 55877, 56048, 56221, 56393,
            56567, 56740, 56915, 57090, 57265,
            57441, 57618, 57795, 57972, 58150,
            58329, 58508, 58688, 58868, 59049,
            59231, 59413, 59595, 59778, 59962,
            60146, 60331, 60516, 60702, 60889,
            61076, 61264, 61452, 61641, 61830,
            62020, 62211, 62402, 62594, 62786,
            62979, 63172, 63366, 63561, 63756,
            63952, 64149, 64346, 64544, 64742,
            64941, 65140, 65341, 65541, 65743,
            65945, 66147, 66351, 66555, 66759,
            66964, 67170, 67376, 67583, 67791,
            67999, 68208, 68418, 68628, 68839,
            69050, 69263, 69475, 69689, 69903,
            70118, 70333, 70549, 70766, 70984,
            71202, 71421, 71640, 71860, 72081,
            72302, 72525, 72747, 72971, 73195,
            73420, 73646, 73872, 74099, 74327,
            74555, 74784, 75014, 75244, 75476,
            75707, 75940, 76173, 76407, 76642,
            76878, 77114, 77351, 77589, 77827,
            78066, 78306, 78547, 78788, 79030,
            79273, 79516, 79761, 80006, 80252,
            80498, 80746, 80994, 81243, 81492,
            81743, 81994, 82246, 82498, 82752,
            83006, 83261, 83517, 83774, 84031,
            84289, 84548, 84808, 85069, 85330,
            85592, 85855, 86119, 86384, 86649,
            86915, 87182, 87450, 87719, 87989,
            88259, 88530, 88802, 89075, 89349,
            89623, 89899, 90175, 90452, 90730,
            91009, 91288, 91569, 91850, 92132,
            92415, 92699, 92984, 93270, 93557,
            93844, 94132, 94422, 94712, 95003,
            95295, 95587, 95881, 96176, 96471,
            96768, 97065, 97363, 97662, 97963,
            98264, 98565, 98868, 99172, 99477,
            99783, 100089, 100397, 100705, 101015,
            101325, 101636, 101949, 102262, 102576,
            102891, 103207, 103525, 103843, 104162,
            104482, 104803, 105125, 105448, 105772,
            106097, 106423, 106750, 107078, 107407,
            107737, 108068, 108400, 108733, 109067,
            109402, 109738, 110076, 110414, 110753,
            111093, 111435, 111777, 112121, 112465,
            112811, 113157, 113505, 113854, 114204,
            114555, 114907, 115260, 115614, 115969,
            116325, 116683, 117041, 117401, 117762,
            118124, 118486, 118851, 119216, 119582,
            119949, 120318, 120688, 121059, 121431,
            121804, 122178, 122553, 122930, 123308,
            123687, 124067, 124448, 124830, 125214,
            125598, 125984, 126371, 126760, 127149,
            127540, 127932, 128325, 128719, 129115,
            129511, 129909, 130309, 130709, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071
         ) ),
        max_error = cms.double(5748.616225984908),
        output_scale_factor = cms.double(0.953125),
        unused_lsbs = cms.uint32(2)
    ),
    inv_mass_checks = cms.untracked.bool(False),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    sanity_checks = cms.untracked.bool(False),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    )
)


process.TkMuTriPuppiJetdRMaxDoubleJetdEtaMax = cms.EDFilter("L1GTQuadObjectCond",
    collection1 = cms.PSet(
        maxEta = cms.double(2.4),
        maxPrimVertDz = cms.double(1),
        minEta = cms.double(-2.4),
        minQualityScore = cms.uint32(0),
        primVertex = cms.uint32(0),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 0.83, 1.24),
        regionsMinPt = cms.vdouble(10, 10, 11),
        tag = cms.InputTag("l1tGTProducer","GMTTkMuons")
    ),
    collection2 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 1.5),
        regionsMinPt = cms.vdouble(25, 25),
        tag = cms.InputTag("l1tGTProducer","CL2JetsSC4")
    ),
    collection3 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 1.5),
        regionsMinPt = cms.vdouble(25, 25),
        tag = cms.InputTag("l1tGTProducer","CL2JetsSC4")
    ),
    collection4 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 1.5),
        regionsMinPt = cms.vdouble(25, 25),
        tag = cms.InputTag("l1tGTProducer","CL2JetsSC4")
    ),
    correl12 = cms.PSet(
        maxDR = cms.double(0.4)
    ),
    correl34 = cms.PSet(
        maxDEta = cms.double(1.6)
    ),
    cos_phi_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            487, 487, 487, 487, 487,
            487, 487, 487, 487, 487,
            487, 486, 486, 486, 486,
            486, 486, 486, 485, 485,
            485, 485, 485, 485, 484,
            484, 484, 484, 484, 483,
            483, 483, 483, 483, 482,
            482, 482, 482, 481, 481,
            481, 481, 480, 480, 480,
            480, 479, 479, 479, 478,
            478, 478, 478, 477, 477,
            477, 476, 476, 476, 475,
            475, 475, 474, 474, 474,
            473, 473, 472, 472, 472,
            471, 471, 471, 470, 470,
            469, 469, 468, 468, 468,
            467, 467, 466, 466, 465,
            465, 465, 464, 464, 463,
            463, 462, 462, 461, 461,
            460, 460, 459, 459, 458,
            458, 457, 457, 456, 456,
            455, 454, 454, 453, 453,
            452, 452, 451, 451, 450,
            449, 449, 448, 448, 447,
            446, 446, 445, 445, 444,
            443, 443, 442, 441, 441,
            440, 440, 439, 438, 438,
            437, 436, 436, 435, 434,
            434, 433, 432, 431, 431,
            430, 429, 429, 428, 427,
            426, 426, 425, 424, 423,
            423, 422, 421, 420, 420,
            419, 418, 417, 417, 416,
            415, 414, 413, 413, 412,
            411, 410, 409, 409, 408,
            407, 406, 405, 405, 404,
            403, 402, 401, 400, 399,
            399, 398, 397, 396, 395,
            394, 393, 392, 392, 391,
            390, 389, 388, 387, 386,
            385, 384, 383, 382, 381,
            381, 380, 379, 378, 377,
            376, 375, 374, 373, 372,
            371, 370, 369, 368, 367,
            366, 365, 364, 363, 362,
            361, 360, 359, 358, 357,
            356, 355, 354, 353, 352,
            351, 350, 349, 348, 347,
            346, 345, 343, 342, 341,
            340, 339, 338, 337, 336,
            335, 334, 333, 332, 330,
            329, 328, 327, 326, 325,
            324, 323, 322, 320, 319,
            318, 317, 316, 315, 314,
            312, 311, 310, 309, 308,
            307, 306, 304, 303, 302,
            301, 300, 298, 297, 296,
            295, 294, 293, 291, 290,
            289, 288, 286, 285, 284,
            283, 282, 280, 279, 278,
            277, 275, 274, 273, 272,
            270, 269, 268, 267, 265,
            264, 263, 262, 260, 259,
            258, 257, 255, 254, 253,
            252, 250, 249, 248, 246,
            245, 244, 242, 241, 240,
            239, 237, 236, 235, 233,
            232, 231, 229, 228, 227,
            225, 224, 223, 221, 220,
            219, 217, 216, 215, 213,
            212, 211, 209, 208, 207,
            205, 204, 203, 201, 200,
            198, 197, 196, 194, 193,
            192, 190, 189, 187, 186,
            185, 183, 182, 181, 179,
            178, 176, 175, 174, 172,
            171, 169, 168, 167, 165,
            164, 162, 161, 159, 158,
            157, 155, 154, 152, 151,
            150, 148, 147, 145, 144,
            142, 141, 140, 138, 137,
            135, 134, 132, 131, 129,
            128, 127, 125, 124, 122,
            121, 119, 118, 116, 115,
            113, 112, 111, 109, 108,
            106, 105, 103, 102, 100,
            99, 97, 96, 94, 93,
            92, 90, 89, 87, 86,
            84, 83, 81, 80, 78,
            77, 75, 74, 72, 71,
            69, 68, 66, 65, 63,
            62, 60, 59, 58, 56,
            55, 53, 52, 50, 49,
            47, 46, 44, 43, 41,
            40, 38, 37, 35, 34,
            32, 31, 29, 28, 26,
            25, 23, 22, 20, 19,
            17, 16, 14, 13, 11,
            10, 8, 7, 5, 4,
            2, 1, -1, -2, -4,
            -5, -7, -8, -10, -11,
            -13, -14, -16, -17, -19,
            -20, -22, -23, -25, -26,
            -28, -29, -31, -32, -34,
            -35, -37, -38, -40, -41,
            -43, -44, -46, -47, -49,
            -50, -52, -53, -55, -56,
            -58, -59, -60, -62, -63,
            -65, -66, -68, -69, -71,
            -72, -74, -75, -77, -78,
            -80, -81, -83, -84, -86,
            -87, -89, -90, -92, -93,
            -94, -96, -97, -99, -100,
            -102, -103, -105, -106, -108,
            -109, -111, -112, -113, -115,
            -116, -118, -119, -121, -122,
            -124, -125, -127, -128, -129,
            -131, -132, -134, -135, -137,
            -138, -140, -141, -142, -144,
            -145, -147, -148, -150, -151,
            -152, -154, -155, -157, -158,
            -159, -161, -162, -164, -165,
            -167, -168, -169, -171, -172,
            -174, -175, -176, -178, -179,
            -181, -182, -183, -185, -186,
            -187, -189, -190, -192, -193,
            -194, -196, -197, -198, -200,
            -201, -203, -204, -205, -207,
            -208, -209, -211, -212, -213,
            -215, -216, -217, -219, -220,
            -221, -223, -224, -225, -227,
            -228, -229, -231, -232, -233,
            -235, -236, -237, -239, -240,
            -241, -242, -244, -245, -246,
            -248, -249, -250, -252, -253,
            -254, -255, -257, -258, -259,
            -260, -262, -263, -264, -265,
            -267, -268, -269, -270, -272,
            -273, -274, -275, -277, -278,
            -279, -280, -282, -283, -284,
            -285, -286, -288, -289, -290,
            -291, -293, -294, -295, -296,
            -297, -298, -300, -301, -302,
            -303, -304, -306, -307, -308,
            -309, -310, -311, -312, -314,
            -315, -316, -317, -318, -319,
            -320, -322, -323, -324, -325,
            -326, -327, -328, -329, -330,
            -332, -333, -334, -335, -336,
            -337, -338, -339, -340, -341,
            -342, -343, -345, -346, -347,
            -348, -349, -350, -351, -352,
            -353, -354, -355, -356, -357,
            -358, -359, -360, -361, -362,
            -363, -364, -365, -366, -367,
            -368, -369, -370, -371, -372,
            -373, -374, -375, -376, -377,
            -378, -379, -380, -381, -381,
            -382, -383, -384, -385, -386,
            -387, -388, -389, -390, -391,
            -392, -392, -393, -394, -395,
            -396, -397, -398, -399, -399,
            -400, -401, -402, -403, -404,
            -405, -405, -406, -407, -408,
            -409, -409, -410, -411, -412,
            -413, -413, -414, -415, -416,
            -417, -417, -418, -419, -420,
            -420, -421, -422, -423, -423,
            -424, -425, -426, -426, -427,
            -428, -429, -429, -430, -431,
            -431, -432, -433, -434, -434,
            -435, -436, -436, -437, -438,
            -438, -439, -440, -440, -441,
            -441, -442, -443, -443, -444,
            -445, -445, -446, -446, -447,
            -448, -448, -449, -449, -450,
            -451, -451, -452, -452, -453,
            -453, -454, -454, -455, -456,
            -456, -457, -457, -458, -458,
            -459, -459, -460, -460, -461,
            -461, -462, -462, -463, -463,
            -464, -464, -465, -465, -465,
            -466, -466, -467, -467, -468,
            -468, -468, -469, -469, -470,
            -470, -471, -471, -471, -472,
            -472, -472, -473, -473, -474,
            -474, -474, -475, -475, -475,
            -476, -476, -476, -477, -477,
            -477, -478, -478, -478, -478,
            -479, -479, -479, -480, -480,
            -480, -480, -481, -481, -481,
            -481, -482, -482, -482, -482,
            -483, -483, -483, -483, -483,
            -484, -484, -484, -484, -484,
            -485, -485, -485, -485, -485,
            -485, -486, -486, -486, -486,
            -486, -486, -486, -487, -487,
            -487, -487, -487, -487, -487,
            -487, -487, -487, -487, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488
         ) ),
        max_error = cms.double(0.0025338281044886835),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            489, 489, 489, 489, 489,
            489, 489, 489, 489, 489,
            489, 490, 490, 490, 490,
            490, 490, 490, 491, 491,
            491, 491, 491, 491, 492,
            492, 492, 492, 492, 493,
            493, 493, 493, 493, 494,
            494, 494, 494, 495, 495,
            495, 495, 496, 496, 496,
            496, 497, 497, 497, 498,
            498, 498, 499, 499, 499,
            499, 500, 500, 500, 501,
            501, 502, 502, 502, 503,
            503, 503, 504, 504, 504,
            505, 505, 506, 506, 507,
            507, 507, 508, 508, 509,
            509, 510, 510, 510, 511,
            511, 512, 512, 513, 513,
            514, 514, 515, 515, 516,
            516, 517, 517, 518, 518,
            519, 520, 520, 521, 521,
            522, 522, 523, 523, 524,
            525, 525, 526, 526, 527,
            528, 528, 529, 530, 530,
            531, 531, 532, 533, 533,
            534, 535, 535, 536, 537,
            537, 538, 539, 540, 540,
            541, 542, 542, 543, 544,
            545, 545, 546, 547, 548,
            548, 549, 550, 551, 551,
            552, 553, 554, 555, 555,
            556, 557, 558, 559, 560,
            560, 561, 562, 563, 564,
            565, 566, 567, 567, 568,
            569, 570, 571, 572, 573,
            574, 575, 576, 577, 577,
            578, 579, 580, 581, 582,
            583, 584, 585, 586, 587,
            588, 589, 590, 591, 592,
            593, 594, 595, 596, 598,
            599, 600, 601, 602, 603,
            604, 605, 606, 607, 608,
            610, 611, 612, 613, 614,
            615, 616, 618, 619, 620,
            621, 622, 623, 625, 626,
            627, 628, 629, 631, 632,
            633, 634, 636, 637, 638,
            639, 641, 642, 643, 644,
            646, 647, 648, 650, 651,
            652, 654, 655, 656, 658,
            659, 660, 662, 663, 665,
            666, 667, 669, 670, 672,
            673, 674, 676, 677, 679,
            680, 682, 683, 685, 686,
            687, 689, 690, 692, 693,
            695, 697, 698, 700, 701,
            703, 704, 706, 707, 709,
            710, 712, 714, 715, 717,
            719, 720, 722, 723, 725,
            727, 728, 730, 732, 733,
            735, 737, 738, 740, 742,
            744, 745, 747, 749, 750,
            752, 754, 756, 758, 759,
            761, 763, 765, 767, 768,
            770, 772, 774, 776, 778,
            779, 781, 783, 785, 787,
            789, 791, 793, 795, 796,
            798, 800, 802, 804, 806,
            808, 810, 812, 814, 816,
            818, 820, 822, 824, 826,
            828, 830, 832, 835, 837,
            839, 841, 843, 845, 847,
            849, 851, 854, 856, 858,
            860, 862, 864, 867, 869,
            871, 873, 875, 878, 880,
            882, 884, 887, 889, 891,
            894, 896, 898, 900, 903,
            905, 907, 910, 912, 915,
            917, 919, 922, 924, 927,
            929, 931, 934, 936, 939,
            941, 944, 946, 949, 951,
            954, 956, 959, 961, 964,
            966, 969, 971, 974, 977,
            979, 982, 984, 987, 990,
            992, 995, 998, 1000, 1003,
            1006, 1008, 1011, 1014, 1017,
            1019, 1022, 1025, 1028, 1030,
            1033, 1036, 1039, 1042, 1044,
            1047, 1050, 1053, 1056, 1059,
            1062, 1065, 1067, 1070, 1073,
            1076, 1079, 1082, 1085, 1088,
            1091, 1094, 1097, 1100, 1103,
            1106, 1109, 1112, 1115, 1118,
            1122, 1125, 1128, 1131, 1134,
            1137, 1140, 1143, 1147, 1150,
            1153, 1156, 1159, 1163, 1166,
            1169, 1172, 1176, 1179, 1182,
            1186, 1189, 1192, 1196, 1199,
            1202, 1206, 1209, 1212, 1216,
            1219, 1223, 1226, 1230, 1233,
            1237, 1240, 1244, 1247, 1251,
            1254, 1258, 1261, 1265, 1268,
            1272, 1276, 1279, 1283, 1287,
            1290, 1294, 1298, 1301, 1305,
            1309, 1312, 1316, 1320, 1324,
            1327, 1331, 1335, 1339, 1343,
            1347, 1350, 1354, 1358, 1362,
            1366, 1370, 1374, 1378, 1382,
            1386, 1390, 1394, 1398, 1402,
            1406, 1410, 1414, 1418, 1422,
            1426, 1430, 1434, 1439, 1443,
            1447, 1451, 1455, 1459, 1464,
            1468, 1472, 1476, 1481, 1485,
            1489, 1494, 1498, 1502, 1507,
            1511, 1516, 1520, 1524, 1529,
            1533, 1538, 1542, 1547, 1551,
            1556, 1560, 1565, 1569, 1574,
            1579, 1583, 1588, 1592, 1597,
            1602, 1606, 1611, 1616, 1621,
            1625, 1630, 1635, 1640, 1645,
            1649, 1654, 1659, 1664, 1669,
            1674, 1679, 1684, 1689, 1693,
            1698, 1703, 1708, 1714, 1719,
            1724, 1729, 1734, 1739, 1744,
            1749, 1754, 1760, 1765, 1770,
            1775, 1780, 1786, 1791, 1796,
            1802, 1807, 1812, 1818, 1823,
            1828, 1834, 1839, 1845, 1850,
            1856, 1861, 1867, 1872, 1878,
            1883, 1889, 1894, 1900, 1906,
            1911, 1917, 1923, 1929, 1934,
            1940, 1946, 1952, 1957, 1963,
            1969, 1975, 1981, 1987, 1993,
            1999, 2004, 2010, 2016, 2022,
            2028, 2035, 2041, 2047, 2053,
            2059, 2065, 2071, 2077, 2084,
            2090, 2096, 2102, 2109, 2115,
            2121, 2128, 2134, 2140, 2147,
            2153, 2160, 2166, 2173, 2179,
            2186, 2192, 2199, 2205, 2212,
            2219, 2225, 2232, 2239, 2245,
            2252, 2259, 2266, 2272, 2279,
            2286, 2293, 2300, 2307, 2314,
            2321, 2328, 2335, 2342, 2349,
            2356, 2363, 2370, 2377, 2384,
            2391, 2398, 2406, 2413, 2420,
            2427, 2435, 2442, 2449, 2457,
            2464, 2472, 2479, 2487, 2494,
            2502, 2509, 2517, 2524, 2532,
            2539, 2547, 2555, 2563, 2570,
            2578, 2586, 2594, 2601, 2609,
            2617, 2625, 2633, 2641, 2649,
            2657, 2665, 2673, 2681, 2689,
            2697, 2705, 2714, 2722, 2730,
            2738, 2747, 2755, 2763, 2772,
            2780, 2788, 2797, 2805, 2814,
            2822, 2831, 2839, 2848, 2857,
            2865, 2874, 2883, 2891, 2900,
            2909, 2918, 2927, 2935, 2944,
            2953, 2962, 2971, 2980, 2989,
            2998, 3007, 3016, 3026, 3035,
            3044, 3053, 3062, 3072, 3081,
            3090, 3100, 3109, 3119, 3128,
            3138, 3147, 3157, 3166, 3176,
            3186, 3195, 3205, 3215, 3224,
            3234, 3244, 3254, 3264, 3274,
            3284, 3294, 3304, 3314, 3324,
            3334, 3344, 3354, 3364, 3375,
            3385, 3395, 3405, 3416, 3426,
            3437, 3447, 3458, 3468, 3479,
            3489, 3500, 3510, 3521, 3532,
            3543, 3553, 3564, 3575, 3586,
            3597, 3608, 3619, 3630, 3641,
            3652, 3663, 3674, 3685, 3697,
            3708, 3719, 3730, 3742, 3753,
            3765, 3776, 3788, 3799, 3811,
            3822, 3834, 3846, 3857, 3869,
            3881, 3893, 3905, 3917, 3929,
            3941, 3953, 3965, 3977, 3989,
            4001, 4013, 4025, 4038, 4050,
            4062, 4075, 4087, 4100, 4112,
            4125, 4137, 4150, 4163, 4175,
            4188, 4201, 4214, 4226, 4239,
            4252, 4265, 4278, 4291, 4304,
            4318, 4331, 4344, 4357, 4371,
            4384, 4397, 4411, 4424, 4438,
            4451, 4465, 4479, 4492, 4506,
            4520, 4533, 4547, 4561, 4575,
            4589, 4603, 4617, 4631, 4645,
            4660, 4674, 4688, 4703, 4717,
            4731, 4746, 4760, 4775, 4789,
            4804, 4819, 4833, 4848, 4863,
            4878, 4893, 4908, 4923, 4938,
            4953, 4968, 4983, 4999, 5014,
            5029, 5045, 5060, 5075, 5091,
            5107, 5122, 5138, 5154, 5169,
            5185, 5201, 5217, 5233, 5249,
            5265, 5281, 5297, 5313, 5330,
            5346, 5362, 5379, 5395, 5412,
            5428, 5445, 5462, 5478, 5495,
            5512, 5529, 5546, 5563, 5580,
            5597, 5614, 5631, 5648, 5666,
            5683, 5700, 5718, 5735, 5753,
            5770, 5788, 5806, 5824, 5841,
            5859, 5877, 5895, 5913, 5931,
            5950, 5968, 5986, 6004, 6023,
            6041, 6060, 6078, 6097, 6116,
            6134, 6153, 6172, 6191, 6210,
            6229, 6248, 6267, 6286, 6305,
            6325, 6344, 6364, 6383, 6403,
            6422, 6442, 6462, 6481, 6501,
            6521, 6541, 6561, 6581, 6602,
            6622, 6642, 6662, 6683, 6703,
            6724, 6744, 6765, 6786, 6807,
            6828, 6848, 6869, 6891, 6912,
            6933, 6954, 6975, 6997, 7018,
            7040, 7061, 7083, 7105, 7126,
            7148, 7170, 7192, 7214, 7236,
            7259, 7281, 7303, 7325, 7348,
            7370, 7393, 7416, 7438, 7461,
            7484, 7507, 7530, 7553, 7576,
            7600, 7623, 7646, 7670, 7693,
            7717, 7741, 7764, 7788, 7812,
            7836, 7860, 7884, 7908, 7932,
            7957, 7981, 8006, 8030, 8055,
            8080, 8104, 8129, 8154, 8179,
            8204, 8229, 8255, 8280, 8305,
            8331, 8356, 8382, 8408, 8434,
            8459, 8485, 8511, 8537, 8564,
            8590, 8616, 8643, 8669, 8696,
            8722, 8749, 8776, 8803, 8830,
            8857, 8884, 8912, 8939, 8966,
            8994, 9021, 9049, 9077, 9105,
            9133, 9161, 9189, 9217, 9245,
            9274, 9302, 9331, 9359, 9388,
            9417, 9446, 9475, 9504, 9533,
            9562, 9591, 9621, 9650, 9680,
            9710, 9740, 9769, 9799, 9830,
            9860, 9890, 9920, 9951, 9981,
            10012, 10043, 10073, 10104, 10135,
            10166, 10198, 10229, 10260, 10292,
            10323, 10355, 10387, 10419, 10451,
            10483, 10515, 10547, 10580, 10612,
            10645, 10677, 10710, 10743, 10776,
            10809, 10842, 10876, 10909, 10942,
            10976, 11010, 11044, 11077, 11111,
            11146, 11180, 11214, 11248, 11283,
            11318, 11352, 11387, 11422, 11457,
            11492, 11528, 11563, 11599, 11634,
            11670, 11706, 11742, 11778, 11814,
            11850, 11887, 11923, 11960, 11996,
            12033, 12070, 12107, 12144, 12182,
            12219, 12257, 12294, 12332, 12370,
            12408, 12446, 12484, 12522, 12561,
            12599, 12638, 12677, 12716, 12755,
            12794, 12833, 12873, 12912, 12952,
            12992, 13032, 13072, 13112, 13152,
            13192, 13233, 13274, 13314, 13355,
            13396, 13437, 13479, 13520, 13561,
            13603, 13645, 13687, 13729, 13771,
            13813, 13856, 13898, 13941, 13984,
            14027, 14070, 14113, 14156, 14200,
            14243, 14287, 14331, 14375, 14419,
            14463, 14508, 14552, 14597, 14642,
            14687, 14732, 14777, 14823, 14868,
            14914, 14960, 15005, 15052, 15098,
            15144, 15191, 15237, 15284, 15331,
            15378, 15425, 15473, 15520, 15568,
            15616, 15664, 15712, 15760, 15808,
            15857, 15906, 15955, 16004, 16053,
            16102, 16151, 16201, 16251, 16301,
            16351, 16401, 16451, 16502, 16553,
            16603, 16654, 16706, 16757, 16808,
            16860, 16912, 16964, 17016, 17068,
            17121, 17173, 17226, 17279, 17332,
            17385, 17438, 17492, 17546, 17600,
            17654, 17708, 17762, 17817, 17872,
            17926, 17982, 18037, 18092, 18148,
            18203, 18259, 18315, 18372, 18428,
            18485, 18542, 18598, 18656, 18713,
            18770, 18828, 18886, 18944, 19002,
            19060, 19119, 19178, 19237, 19296,
            19355, 19414, 19474, 19534, 19594,
            19654, 19714, 19775, 19836, 19897,
            19958, 20019, 20081, 20142, 20204,
            20266, 20328, 20391, 20454, 20516,
            20579, 20643, 20706, 20770, 20833,
            20897, 20962, 21026, 21091, 21155,
            21220, 21286, 21351, 21417, 21482,
            21548, 21615, 21681, 21748, 21814,
            21881, 21949, 22016, 22084, 22151,
            22220, 22288, 22356, 22425, 22494,
            22563, 22632, 22702, 22771, 22841,
            22912, 22982, 23053, 23123, 23194,
            23266, 23337, 23409, 23481, 23553,
            23625, 23698, 23771, 23844, 23917,
            23990, 24064, 24138, 24212, 24287,
            24361, 24436, 24511, 24586, 24662,
            24738, 24814, 24890, 24966, 25043,
            25120, 25197, 25275, 25352, 25430,
            25508, 25587, 25665, 25744, 25823,
            25902, 25982, 26062, 26142, 26222,
            26303, 26384, 26465, 26546, 26627,
            26709, 26791, 26874, 26956, 27039,
            27122, 27205, 27289, 27373, 27457,
            27541, 27626, 27711, 27796, 27881,
            27967, 28053, 28139, 28226, 28312,
            28399, 28486, 28574, 28662, 28750,
            28838, 28927, 29016, 29105, 29194,
            29284, 29374, 29464, 29555, 29645,
            29736, 29828, 29919, 30011, 30104,
            30196, 30289, 30382, 30475, 30569,
            30663, 30757, 30851, 30946, 31041,
            31137, 31232, 31328, 31425, 31521,
            31618, 31715, 31813, 31910, 32008,
            32107, 32205, 32304, 32403, 32503,
            32603, 32703, 32804, 32904, 33005,
            33107, 33209, 33311, 33413, 33516,
            33619, 33722, 33825, 33929, 34034,
            34138, 34243, 34348, 34454, 34560,
            34666, 34772, 34879, 34986, 35094,
            35202, 35310, 35418, 35527, 35636,
            35746, 35856, 35966, 36076, 36187,
            36298, 36410, 36522, 36634, 36746,
            36859, 36973, 37086, 37200, 37314,
            37429, 37544, 37659, 37775, 37891,
            38008, 38124, 38241, 38359, 38477,
            38595, 38714, 38833, 38952, 39072,
            39192, 39312, 39433, 39554, 39675,
            39797, 39920, 40042, 40165, 40289,
            40413, 40537, 40661, 40786, 40911,
            41037, 41163, 41290, 41417, 41544,
            41671, 41800, 41928, 42057, 42186,
            42316, 42446, 42576, 42707, 42838,
            42970, 43102, 43234, 43367, 43500,
            43634, 43768, 43902, 44037, 44173,
            44308, 44444, 44581, 44718, 44855,
            44993, 45131, 45270, 45409, 45549,
            45689, 45829, 45970, 46111, 46253,
            46395, 46537, 46680, 46824, 46968,
            47112, 47257, 47402, 47548, 47694,
            47840, 47987, 48135, 48283, 48431,
            48580, 48729, 48879, 49029, 49180,
            49331, 49482, 49634, 49787, 49940,
            50093, 50247, 50401, 50556, 50712,
            50867, 51024, 51181, 51338, 51495,
            51654, 51812, 51972, 52131, 52291,
            52452, 52613, 52775, 52937, 53100,
            53263, 53427, 53591, 53755, 53921,
            54086, 54252, 54419, 54586, 54754,
            54922, 55091, 55260, 55430, 55600,
            55771, 55943, 56114, 56287, 56460,
            56633, 56807, 56982, 57157, 57333,
            57509, 57685, 57863, 58040, 58219,
            58398, 58577, 58757, 58938, 59119,
            59300, 59483, 59665, 59849, 60033,
            60217, 60402, 60588, 60774, 60960,
            61148, 61336, 61524, 61713, 61903,
            62093, 62284, 62475, 62667, 62860,
            63053, 63247, 63441, 63636, 63831,
            64027, 64224, 64422, 64619, 64818,
            65017, 65217, 65417, 65618, 65820,
            66022, 66225, 66429, 66633, 66837,
            67043, 67249, 67455, 67663, 67870,
            68079, 68288, 68498, 68708, 68920,
            69131, 69344, 69557, 69771, 69985,
            70200, 70416, 70632, 70849, 71067,
            71285, 71504, 71724, 71944, 72165,
            72387, 72609, 72833, 73056, 73281,
            73506, 73732, 73958, 74186, 74414,
            74642, 74872, 75102, 75332, 75564,
            75796, 76029, 76262, 76497, 76732,
            76968, 77204, 77441, 77679, 77918,
            78157, 78398, 78638, 78880, 79122,
            79366, 79609, 79854, 80099, 80345,
            80592, 80840, 81088, 81338, 81587,
            81838, 82090, 82342, 82595, 82849,
            83103, 83358, 83615, 83872, 84129,
            84388, 84647, 84907, 85168, 85430,
            85692, 85955, 86220, 86485, 86750,
            87017, 87284, 87552, 87821, 88091,
            88362, 88633, 88906, 89179, 89453,
            89728, 90003, 90280, 90557, 90836,
            91115, 91395, 91676, 91957, 92240,
            92523, 92807, 93093, 93379, 93666,
            93953, 94242, 94532, 94822, 95113,
            95406, 95699, 95993, 96288, 96584,
            96881, 97178, 97477, 97776, 98077,
            98378, 98680, 98984, 99288, 99593,
            99899, 100206, 100514, 100822, 101132,
            101443, 101755, 102067, 102381, 102696,
            103011, 103328, 103645, 103964, 104283,
            104603, 104925, 105247, 105571, 105895,
            106220, 106547, 106874, 107203, 107532,
            107862, 108194, 108526, 108860, 109194,
            109530, 109866, 110204, 110542, 110882,
            111223, 111565, 111907, 112251, 112596,
            112942, 113289, 113637, 113986, 114337,
            114688, 115040, 115394, 115748, 116104,
            116461, 116819, 117178, 117538, 117899,
            118261, 118624, 118989, 119354, 119721,
            120089, 120458, 120828, 121199, 121572,
            121945, 122320, 122696, 123073, 123451,
            123830, 124211, 124593, 124975, 125359,
            125745, 126131, 126518, 126907, 127297,
            127688, 128081, 128474, 128869, 129265,
            129662, 130061, 130260
         ) ),
        max_error = cms.double(0.6152529479288091),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut2 = cms.PSet(
        lut = cms.vint32( (
            256, 256, 257, 258, 259,
            260, 260, 261, 262, 263,
            264, 264, 265, 266, 267,
            268, 268, 269, 270, 271,
            272, 273, 273, 274, 275,
            276, 277, 278, 279, 279,
            280, 281, 282, 283, 284,
            285, 285, 286, 287, 288,
            289, 290, 291, 292, 293,
            293, 294, 295, 296, 297,
            298, 299, 300, 301, 302,
            303, 303, 304, 305, 306,
            307, 308, 309, 310, 311,
            312, 313, 314, 315, 316,
            317, 318, 319, 320, 321,
            322, 323, 324, 325, 326,
            327, 328, 329, 330, 331,
            332, 333, 334, 335, 336,
            337, 338, 339, 340, 341,
            342, 343, 344, 345, 346,
            347, 348, 349, 351, 352,
            353, 354, 355, 356, 357,
            358, 359, 360, 361, 363,
            364, 365, 366, 367, 368,
            369, 370, 372, 373, 374,
            375, 376, 377, 379, 380,
            381, 382, 383, 384, 386,
            387, 388, 389, 390, 392,
            393, 394, 395, 396, 398,
            399, 400, 401, 402, 404,
            405, 406, 407, 409, 410,
            411, 412, 414, 415, 416,
            418, 419, 420, 421, 423,
            424, 425, 427, 428, 429,
            431, 432, 433, 435, 436,
            437, 439, 440, 441, 443,
            444, 445, 447, 448, 449,
            451, 452, 454, 455, 456,
            458, 459, 461, 462, 463,
            465, 466, 468, 469, 471,
            472, 474, 475, 476, 478,
            479, 481, 482, 484, 485,
            487, 488, 490, 491, 493,
            494, 496, 497, 499, 500,
            502, 503, 505, 507, 508,
            510, 511, 513, 514, 516,
            518, 519, 521, 522, 524,
            526, 527, 529, 530, 532,
            534, 535, 537, 539, 540,
            542, 544, 545, 547, 549,
            550, 552, 554, 555, 557,
            559, 561, 562, 564, 566,
            567, 569, 571, 573, 575,
            576, 578, 580, 582, 583,
            585, 587, 589, 591, 592,
            594, 596, 598, 600, 602,
            603, 605, 607, 609, 611,
            613, 615, 617, 618, 620,
            622, 624, 626, 628, 630,
            632, 634, 636, 638, 640,
            642, 644, 646, 648, 650,
            652, 654, 656, 658, 660,
            662, 664, 666, 668, 670,
            672, 674, 676, 678, 680,
            682, 684, 686, 688, 691,
            693, 695, 697, 699, 701,
            703, 706, 708, 710, 712,
            714, 717, 719, 721, 723,
            725, 728, 730, 732, 734,
            737, 739, 741, 743, 746,
            748, 750, 753, 755, 757,
            760, 762, 764, 767, 769,
            771, 774, 776, 778, 781,
            783, 786, 788, 790, 793,
            795, 798, 800, 803, 805,
            808, 810, 813, 815, 818,
            820, 823, 825, 828, 830,
            833, 835, 838, 840, 843,
            846, 848, 851, 853, 856,
            859, 861, 864, 867, 869,
            872, 875, 877, 880, 883,
            885, 888, 891, 894, 896,
            899, 902, 905, 907, 910,
            913, 916, 919, 921, 924,
            927, 930, 933, 936, 939,
            941, 944, 947, 950, 953,
            956, 959, 962, 965, 968,
            971, 974, 977, 980, 983,
            986, 989, 992, 995, 998,
            1001, 1004, 1007, 1010, 1013,
            1017, 1020, 1023, 1026, 1029,
            1032, 1035, 1039, 1042, 1045,
            1048, 1051, 1055, 1058, 1061,
            1064, 1068, 1071, 1074, 1078,
            1081, 1084, 1088, 1091, 1094,
            1098, 1101, 1104, 1108, 1111,
            1115, 1118, 1121, 1125, 1128,
            1132, 1135, 1139, 1142, 1146,
            1149, 1153, 1156, 1160, 1163,
            1167, 1171, 1174, 1178, 1181,
            1185, 1189, 1192, 1196, 1200,
            1203, 1207, 1211, 1214, 1218,
            1222, 1226, 1229, 1233, 1237,
            1241, 1245, 1249, 1252, 1256,
            1260, 1264, 1268, 1272, 1276,
            1280, 1283, 1287, 1291, 1295,
            1299, 1303, 1307, 1311, 1315,
            1319, 1323, 1328, 1332, 1336,
            1340, 1344, 1348, 1352, 1356,
            1360, 1365, 1369, 1373, 1377,
            1382, 1386, 1390, 1394, 1399,
            1403, 1407, 1412, 1416, 1420,
            1425, 1429, 1433, 1438, 1442,
            1447, 1451, 1455, 1460, 1464,
            1469, 1473, 1478, 1483, 1487,
            1492, 1496, 1501, 1505, 1510,
            1515, 1519, 1524, 1529, 1533,
            1538, 1543, 1548, 1552, 1557,
            1562, 1567, 1572, 1576, 1581,
            1586, 1591, 1596, 1601, 1606,
            1611, 1616, 1620, 1625, 1630,
            1635, 1640, 1646, 1651, 1656,
            1661, 1666, 1671, 1676, 1681,
            1686, 1692, 1697, 1702, 1707,
            1712, 1718, 1723, 1728, 1734,
            1739, 1744, 1750, 1755, 1760,
            1766, 1771, 1777, 1782, 1788,
            1793, 1799, 1804, 1810, 1815,
            1821, 1826, 1832, 1838, 1843,
            1849, 1855, 1860, 1866, 1872,
            1878, 1883, 1889, 1895, 1901,
            1907, 1912, 1918, 1924, 1930,
            1936, 1942, 1948, 1954, 1960,
            1966, 1972, 1978, 1984, 1990,
            1996, 2003, 2009, 2015, 2021,
            2027, 2033, 2040, 2046, 2052,
            2059, 2065, 2071, 2078, 2084,
            2090, 2097, 2103, 2110, 2116,
            2123, 2129, 2136, 2142, 2149,
            2156, 2162, 2169, 2175, 2182,
            2189, 2196, 2202, 2209, 2216,
            2223, 2230, 2236, 2243, 2250,
            2257, 2264, 2271, 2278, 2285,
            2292, 2299, 2306, 2313, 2320,
            2327, 2335, 2342, 2349, 2356,
            2363, 2371, 2378, 2385, 2393,
            2400, 2407, 2415, 2422, 2430,
            2437, 2444, 2452, 2460, 2467,
            2475, 2482, 2490, 2498, 2505,
            2513, 2521, 2528, 2536, 2544,
            2552, 2560, 2567, 2575, 2583,
            2591, 2599, 2607, 2615, 2623,
            2631, 2639, 2647, 2656, 2664,
            2672, 2680, 2688, 2697, 2705,
            2713, 2722, 2730, 2738, 2747,
            2755, 2764, 2772, 2781, 2789,
            2798, 2806, 2815, 2824, 2832,
            2841, 2850, 2858, 2867, 2876,
            2885, 2894, 2903, 2912, 2921,
            2930, 2939, 2948, 2957, 2966,
            2975, 2984, 2993, 3002, 3012,
            3021, 3030, 3039, 3049, 3058,
            3067, 3077, 3086, 3096, 3105,
            3115, 3124, 3134, 3144, 3153,
            3163, 3173, 3183, 3192, 3202,
            3212, 3222, 3232, 3242, 3252,
            3262, 3272, 3282, 3292, 3302,
            3312, 3322, 3332, 3343, 3353,
            3363, 3374, 3384, 3394, 3405,
            3415, 3426, 3436, 3447, 3457,
            3468, 3479, 3489, 3500, 3511,
            3522, 3532, 3543, 3554, 3565,
            3576, 3587, 3598, 3609, 3620,
            3631, 3642, 3654, 3665, 3676,
            3687, 3699, 3710, 3722, 3733,
            3744, 3756, 3767, 3779, 3791,
            3802, 3814, 3826, 3837, 3849,
            3861, 3873, 3885, 3897, 3909,
            3921, 3933, 3945, 3957, 3969,
            3981, 3994, 4006, 4018, 4031,
            4043, 4055, 4068, 4080, 4093,
            4105, 4118, 4131, 4143, 4156,
            4169, 4182, 4195, 4207, 4220,
            4233, 4246, 4259, 4272, 4286,
            4299, 4312, 4325, 4339, 4352,
            4365, 4379, 4392, 4406, 4419,
            4433, 4446, 4460, 4474, 4487,
            4501, 4515, 4529, 4543, 4557,
            4571, 4585, 4599, 4613, 4627,
            4641, 4656, 4670, 4684, 4699,
            4713, 4728, 4742, 4757, 4771,
            4786, 4801, 4816, 4830, 4845,
            4860, 4875, 4890, 4905, 4920,
            4935, 4950, 4966, 4981, 4996,
            5011, 5027, 5042, 5058, 5073,
            5089, 5105, 5120, 5136, 5152,
            5168, 5183, 5199, 5215, 5231,
            5247, 5264, 5280, 5296, 5312,
            5329, 5345, 5361, 5378, 5394,
            5411, 5428, 5444, 5461, 5478,
            5495, 5512, 5528, 5545, 5562,
            5580, 5597, 5614, 5631, 5648,
            5666, 5683, 5701, 5718, 5736,
            5753, 5771, 5789, 5807, 5824,
            5842, 5860, 5878, 5896, 5914,
            5933, 5951, 5969, 5987, 6006,
            6024, 6043, 6061, 6080, 6099,
            6117, 6136, 6155, 6174, 6193,
            6212, 6231, 6250, 6269, 6289,
            6308, 6327, 6347, 6366, 6386,
            6406, 6425, 6445, 6465, 6485,
            6505, 6525, 6545, 6565, 6585,
            6605, 6625, 6646, 6666, 6687,
            6707, 6728, 6749, 6769, 6790,
            6811, 6832, 6853, 6874, 6895,
            6916, 6937, 6959, 6980, 7002,
            7023, 7045, 7066, 7088, 7110,
            7132, 7154, 7176, 7198, 7220,
            7242, 7264, 7286, 7309, 7331,
            7354, 7376, 7399, 7422, 7445,
            7468, 7490, 7513, 7537, 7560,
            7583, 7606, 7630, 7653, 7677,
            7700, 7724, 7748, 7771, 7795,
            7819, 7843, 7867, 7892, 7916,
            7940, 7964, 7989, 8014, 8038,
            8063, 8088, 8112, 8137, 8162,
            8187, 8213, 8238, 8263, 8289,
            8314, 8340, 8365, 8391, 8417,
            8443, 8468, 8495, 8521, 8547,
            8573, 8599, 8626, 8652, 8679,
            8706, 8732, 8759, 8786, 8813,
            8840, 8867, 8895, 8922, 8949,
            8977, 9004, 9032, 9060, 9088,
            9116, 9144, 9172, 9200, 9228,
            9256, 9285, 9313, 9342, 9371,
            9400, 9428, 9457, 9486, 9516,
            9545, 9574, 9604, 9633, 9663,
            9692, 9722, 9752, 9782, 9812,
            9842, 9872, 9903, 9933, 9964,
            9994, 10025, 10056, 10087, 10118,
            10149, 10180, 10211, 10243, 10274,
            10306, 10337, 10369, 10401, 10433,
            10465, 10497, 10529, 10562, 10594,
            10627, 10659, 10692, 10725, 10758,
            10791, 10824, 10858, 10891, 10924,
            10958, 10992, 11025, 11059, 11093,
            11127, 11161, 11196, 11230, 11265,
            11299, 11334, 11369, 11404, 11439,
            11474, 11509, 11545, 11580, 11616,
            11651, 11687, 11723, 11759, 11795,
            11831, 11868, 11904, 11941, 11978,
            12014, 12051, 12088, 12125, 12163,
            12200, 12238, 12275, 12313, 12351,
            12389, 12427, 12465, 12503, 12542,
            12580, 12619, 12658, 12696, 12735,
            12775, 12814, 12853, 12893, 12932,
            12972, 13012, 13052, 13092, 13132,
            13173, 13213, 13254, 13294, 13335,
            13376, 13417, 13459, 13500, 13541,
            13583, 13625, 13667, 13709, 13751,
            13793, 13835, 13878, 13920, 13963,
            14006, 14049, 14092, 14136, 14179,
            14223, 14266, 14310, 14354, 14398,
            14443, 14487, 14531, 14576, 14621,
            14666, 14711, 14756, 14801, 14847,
            14892, 14938, 14984, 15030, 15076,
            15123, 15169, 15216, 15263, 15309,
            15356, 15404, 15451, 15498, 15546,
            15594, 15642, 15690, 15738, 15786,
            15835, 15884, 15932, 15981, 16030,
            16080, 16129, 16179, 16228, 16278,
            16328, 16378, 16429, 16479, 16530,
            16581, 16632, 16683, 16734, 16785,
            16837, 16889, 16941, 16993, 17045,
            17097, 17150, 17202, 17255, 17308,
            17361, 17415, 17468, 17522, 17576,
            17630, 17684, 17738, 17793, 17848,
            17902, 17957, 18013, 18068, 18123,
            18179, 18235, 18291, 18347, 18404,
            18460, 18517, 18574, 18631, 18688,
            18746, 18803, 18861, 18919, 18977,
            19035, 19094, 19152, 19211, 19270,
            19330, 19389, 19448, 19508, 19568,
            19628, 19689, 19749, 19810, 19871,
            19932, 19993, 20054, 20116, 20178,
            20240, 20302, 20364, 20427, 20490,
            20553, 20616, 20679, 20743, 20806,
            20870, 20935, 20999, 21063, 21128,
            21193, 21258, 21323, 21389, 21455,
            21521, 21587, 21653, 21720, 21786,
            21853, 21920, 21988, 22055, 22123,
            22191, 22259, 22328, 22396, 22465,
            22534, 22603, 22673, 22742, 22812,
            22882, 22953, 23023, 23094, 23165,
            23236, 23308, 23379, 23451, 23523,
            23595, 23668, 23741, 23814, 23887,
            23960, 24034, 24108, 24182, 24256,
            24330, 24405, 24480, 24555, 24631,
            24707, 24783, 24859, 24935, 25012,
            25089, 25166, 25243, 25320, 25398,
            25476, 25555, 25633, 25712, 25791,
            25870, 25950, 26029, 26109, 26190,
            26270, 26351, 26432, 26513, 26594,
            26676, 26758, 26840, 26923, 27006,
            27088, 27172, 27255, 27339, 27423,
            27507, 27592, 27677, 27762, 27847,
            27932, 28018, 28104, 28191, 28277,
            28364, 28451, 28539, 28626, 28714,
            28803, 28891, 28980, 29069, 29158,
            29248, 29338, 29428, 29518, 29609,
            29700, 29791, 29883, 29975, 30067,
            30159, 30252, 30345, 30438, 30532,
            30625, 30719, 30814, 30909, 31003,
            31099, 31194, 31290, 31386, 31483,
            31579, 31677, 31774, 31871, 31969,
            32068, 32166, 32265, 32364, 32464,
            32563, 32663, 32764, 32864, 32965,
            33067, 33168, 33270, 33372, 33475,
            33578, 33681, 33785, 33888, 33992,
            34097, 34202, 34307, 34412, 34518,
            34624, 34730, 34837, 34944, 35051,
            35159, 35267, 35376, 35484, 35593,
            35703, 35812, 35922, 36033, 36144,
            36255, 36366, 36478, 36590, 36702,
            36815, 36928, 37042, 37155, 37270,
            37384, 37499, 37614, 37730, 37846,
            37962, 38079, 38196, 38313, 38431,
            38549, 38667, 38786, 38905, 39025,
            39145, 39265, 39386, 39507, 39628,
            39750, 39872, 39994, 40117, 40241,
            40364, 40488, 40613, 40737, 40863,
            40988, 41114, 41240, 41367, 41494,
            41622, 41750, 41878, 42007, 42136,
            42265, 42395, 42525, 42656, 42787,
            42919, 43050, 43183, 43315, 43448,
            43582, 43716, 43850, 43985, 44120,
            44256, 44392, 44528, 44665, 44802,
            44940, 45078, 45216, 45355, 45495,
            45634, 45775, 45915, 46056, 46198,
            46340, 46482, 46625, 46768, 46912,
            47056, 47201, 47346, 47491, 47637,
            47784, 47930, 48078, 48225, 48374,
            48522, 48671, 48821, 48971, 49121,
            49272, 49424, 49576, 49728, 49881,
            50034, 50188, 50342, 50497, 50652,
            50807, 50963, 51120, 51277, 51435,
            51593, 51751, 51910, 52070, 52230,
            52390, 52551, 52713, 52875, 53037,
            53200, 53364, 53528, 53692, 53857,
            54022, 54188, 54355, 54522, 54690,
            54858, 55026, 55195, 55365, 55535,
            55706, 55877, 56048, 56221, 56393,
            56567, 56740, 56915, 57090, 57265,
            57441, 57618, 57795, 57972, 58150,
            58329, 58508, 58688, 58868, 59049,
            59231, 59413, 59595, 59778, 59962,
            60146, 60331, 60516, 60702, 60889,
            61076, 61264, 61452, 61641, 61830,
            62020, 62211, 62402, 62594, 62786,
            62979, 63172, 63366, 63561, 63756,
            63952, 64149, 64346, 64544, 64742,
            64941, 65140, 65341, 65541, 65743,
            65945, 66147, 66351, 66555, 66759,
            66964, 67170, 67376, 67583, 67791,
            67999, 68208, 68418, 68628, 68839,
            69050, 69263, 69475, 69689, 69903,
            70118, 70333, 70549, 70766, 70984,
            71202, 71421, 71640, 71860, 72081,
            72302, 72525, 72747, 72971, 73195,
            73420, 73646, 73872, 74099, 74327,
            74555, 74784, 75014, 75244, 75476,
            75707, 75940, 76173, 76407, 76642,
            76878, 77114, 77351, 77589, 77827,
            78066, 78306, 78547, 78788, 79030,
            79273, 79516, 79761, 80006, 80252,
            80498, 80746, 80994, 81243, 81492,
            81743, 81994, 82246, 82498, 82752,
            83006, 83261, 83517, 83774, 84031,
            84289, 84548, 84808, 85069, 85330,
            85592, 85855, 86119, 86384, 86649,
            86915, 87182, 87450, 87719, 87989,
            88259, 88530, 88802, 89075, 89349,
            89623, 89899, 90175, 90452, 90730,
            91009, 91288, 91569, 91850, 92132,
            92415, 92699, 92984, 93270, 93557,
            93844, 94132, 94422, 94712, 95003,
            95295, 95587, 95881, 96176, 96471,
            96768, 97065, 97363, 97662, 97963,
            98264, 98565, 98868, 99172, 99477,
            99783, 100089, 100397, 100705, 101015,
            101325, 101636, 101949, 102262, 102576,
            102891, 103207, 103525, 103843, 104162,
            104482, 104803, 105125, 105448, 105772,
            106097, 106423, 106750, 107078, 107407,
            107737, 108068, 108400, 108733, 109067,
            109402, 109738, 110076, 110414, 110753,
            111093, 111435, 111777, 112121, 112465,
            112811, 113157, 113505, 113854, 114204,
            114555, 114907, 115260, 115614, 115969,
            116325, 116683, 117041, 117401, 117762,
            118124, 118486, 118851, 119216, 119582,
            119949, 120318, 120688, 121059, 121431,
            121804, 122178, 122553, 122930, 123308,
            123687, 124067, 124448, 124830, 125214,
            125598, 125984, 126371, 126760, 127149,
            127540, 127932, 128325, 128719, 129115,
            129511, 129909, 130309, 130709, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071
         ) ),
        max_error = cms.double(5748.616225984908),
        output_scale_factor = cms.double(0.953125),
        unused_lsbs = cms.uint32(2)
    ),
    inv_mass_checks = cms.untracked.bool(False),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    sanity_checks = cms.untracked.bool(False),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    )
)


process.TkMuonDoubleTkEle61717 = cms.EDFilter("L1GTTripleObjectCond",
    collection1 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        minQualityScore = cms.uint32(0),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 0.83, 1.24),
        regionsMinPt = cms.vdouble(6, 6, 6),
        tag = cms.InputTag("l1tGTProducer","GMTTkMuons")
    ),
    collection2 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 1.479),
        regionsMinPt = cms.vdouble(13, 13),
        regionsQualityFlags = cms.vuint32(2, 0),
        tag = cms.InputTag("l1tGTProducer","CL2Electrons")
    ),
    collection3 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 1.479),
        regionsMinPt = cms.vdouble(13, 13),
        regionsQualityFlags = cms.vuint32(2, 0),
        tag = cms.InputTag("l1tGTProducer","CL2Electrons")
    ),
    correl12 = cms.PSet(
        maxDz = cms.double(1)
    ),
    correl13 = cms.PSet(
        maxDz = cms.double(1)
    ),
    cos_phi_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            487, 487, 487, 487, 487,
            487, 487, 487, 487, 487,
            487, 486, 486, 486, 486,
            486, 486, 486, 485, 485,
            485, 485, 485, 485, 484,
            484, 484, 484, 484, 483,
            483, 483, 483, 483, 482,
            482, 482, 482, 481, 481,
            481, 481, 480, 480, 480,
            480, 479, 479, 479, 478,
            478, 478, 478, 477, 477,
            477, 476, 476, 476, 475,
            475, 475, 474, 474, 474,
            473, 473, 472, 472, 472,
            471, 471, 471, 470, 470,
            469, 469, 468, 468, 468,
            467, 467, 466, 466, 465,
            465, 465, 464, 464, 463,
            463, 462, 462, 461, 461,
            460, 460, 459, 459, 458,
            458, 457, 457, 456, 456,
            455, 454, 454, 453, 453,
            452, 452, 451, 451, 450,
            449, 449, 448, 448, 447,
            446, 446, 445, 445, 444,
            443, 443, 442, 441, 441,
            440, 440, 439, 438, 438,
            437, 436, 436, 435, 434,
            434, 433, 432, 431, 431,
            430, 429, 429, 428, 427,
            426, 426, 425, 424, 423,
            423, 422, 421, 420, 420,
            419, 418, 417, 417, 416,
            415, 414, 413, 413, 412,
            411, 410, 409, 409, 408,
            407, 406, 405, 405, 404,
            403, 402, 401, 400, 399,
            399, 398, 397, 396, 395,
            394, 393, 392, 392, 391,
            390, 389, 388, 387, 386,
            385, 384, 383, 382, 381,
            381, 380, 379, 378, 377,
            376, 375, 374, 373, 372,
            371, 370, 369, 368, 367,
            366, 365, 364, 363, 362,
            361, 360, 359, 358, 357,
            356, 355, 354, 353, 352,
            351, 350, 349, 348, 347,
            346, 345, 343, 342, 341,
            340, 339, 338, 337, 336,
            335, 334, 333, 332, 330,
            329, 328, 327, 326, 325,
            324, 323, 322, 320, 319,
            318, 317, 316, 315, 314,
            312, 311, 310, 309, 308,
            307, 306, 304, 303, 302,
            301, 300, 298, 297, 296,
            295, 294, 293, 291, 290,
            289, 288, 286, 285, 284,
            283, 282, 280, 279, 278,
            277, 275, 274, 273, 272,
            270, 269, 268, 267, 265,
            264, 263, 262, 260, 259,
            258, 257, 255, 254, 253,
            252, 250, 249, 248, 246,
            245, 244, 242, 241, 240,
            239, 237, 236, 235, 233,
            232, 231, 229, 228, 227,
            225, 224, 223, 221, 220,
            219, 217, 216, 215, 213,
            212, 211, 209, 208, 207,
            205, 204, 203, 201, 200,
            198, 197, 196, 194, 193,
            192, 190, 189, 187, 186,
            185, 183, 182, 181, 179,
            178, 176, 175, 174, 172,
            171, 169, 168, 167, 165,
            164, 162, 161, 159, 158,
            157, 155, 154, 152, 151,
            150, 148, 147, 145, 144,
            142, 141, 140, 138, 137,
            135, 134, 132, 131, 129,
            128, 127, 125, 124, 122,
            121, 119, 118, 116, 115,
            113, 112, 111, 109, 108,
            106, 105, 103, 102, 100,
            99, 97, 96, 94, 93,
            92, 90, 89, 87, 86,
            84, 83, 81, 80, 78,
            77, 75, 74, 72, 71,
            69, 68, 66, 65, 63,
            62, 60, 59, 58, 56,
            55, 53, 52, 50, 49,
            47, 46, 44, 43, 41,
            40, 38, 37, 35, 34,
            32, 31, 29, 28, 26,
            25, 23, 22, 20, 19,
            17, 16, 14, 13, 11,
            10, 8, 7, 5, 4,
            2, 1, -1, -2, -4,
            -5, -7, -8, -10, -11,
            -13, -14, -16, -17, -19,
            -20, -22, -23, -25, -26,
            -28, -29, -31, -32, -34,
            -35, -37, -38, -40, -41,
            -43, -44, -46, -47, -49,
            -50, -52, -53, -55, -56,
            -58, -59, -60, -62, -63,
            -65, -66, -68, -69, -71,
            -72, -74, -75, -77, -78,
            -80, -81, -83, -84, -86,
            -87, -89, -90, -92, -93,
            -94, -96, -97, -99, -100,
            -102, -103, -105, -106, -108,
            -109, -111, -112, -113, -115,
            -116, -118, -119, -121, -122,
            -124, -125, -127, -128, -129,
            -131, -132, -134, -135, -137,
            -138, -140, -141, -142, -144,
            -145, -147, -148, -150, -151,
            -152, -154, -155, -157, -158,
            -159, -161, -162, -164, -165,
            -167, -168, -169, -171, -172,
            -174, -175, -176, -178, -179,
            -181, -182, -183, -185, -186,
            -187, -189, -190, -192, -193,
            -194, -196, -197, -198, -200,
            -201, -203, -204, -205, -207,
            -208, -209, -211, -212, -213,
            -215, -216, -217, -219, -220,
            -221, -223, -224, -225, -227,
            -228, -229, -231, -232, -233,
            -235, -236, -237, -239, -240,
            -241, -242, -244, -245, -246,
            -248, -249, -250, -252, -253,
            -254, -255, -257, -258, -259,
            -260, -262, -263, -264, -265,
            -267, -268, -269, -270, -272,
            -273, -274, -275, -277, -278,
            -279, -280, -282, -283, -284,
            -285, -286, -288, -289, -290,
            -291, -293, -294, -295, -296,
            -297, -298, -300, -301, -302,
            -303, -304, -306, -307, -308,
            -309, -310, -311, -312, -314,
            -315, -316, -317, -318, -319,
            -320, -322, -323, -324, -325,
            -326, -327, -328, -329, -330,
            -332, -333, -334, -335, -336,
            -337, -338, -339, -340, -341,
            -342, -343, -345, -346, -347,
            -348, -349, -350, -351, -352,
            -353, -354, -355, -356, -357,
            -358, -359, -360, -361, -362,
            -363, -364, -365, -366, -367,
            -368, -369, -370, -371, -372,
            -373, -374, -375, -376, -377,
            -378, -379, -380, -381, -381,
            -382, -383, -384, -385, -386,
            -387, -388, -389, -390, -391,
            -392, -392, -393, -394, -395,
            -396, -397, -398, -399, -399,
            -400, -401, -402, -403, -404,
            -405, -405, -406, -407, -408,
            -409, -409, -410, -411, -412,
            -413, -413, -414, -415, -416,
            -417, -417, -418, -419, -420,
            -420, -421, -422, -423, -423,
            -424, -425, -426, -426, -427,
            -428, -429, -429, -430, -431,
            -431, -432, -433, -434, -434,
            -435, -436, -436, -437, -438,
            -438, -439, -440, -440, -441,
            -441, -442, -443, -443, -444,
            -445, -445, -446, -446, -447,
            -448, -448, -449, -449, -450,
            -451, -451, -452, -452, -453,
            -453, -454, -454, -455, -456,
            -456, -457, -457, -458, -458,
            -459, -459, -460, -460, -461,
            -461, -462, -462, -463, -463,
            -464, -464, -465, -465, -465,
            -466, -466, -467, -467, -468,
            -468, -468, -469, -469, -470,
            -470, -471, -471, -471, -472,
            -472, -472, -473, -473, -474,
            -474, -474, -475, -475, -475,
            -476, -476, -476, -477, -477,
            -477, -478, -478, -478, -478,
            -479, -479, -479, -480, -480,
            -480, -480, -481, -481, -481,
            -481, -482, -482, -482, -482,
            -483, -483, -483, -483, -483,
            -484, -484, -484, -484, -484,
            -485, -485, -485, -485, -485,
            -485, -486, -486, -486, -486,
            -486, -486, -486, -487, -487,
            -487, -487, -487, -487, -487,
            -487, -487, -487, -487, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488
         ) ),
        max_error = cms.double(0.0025338281044886835),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            489, 489, 489, 489, 489,
            489, 489, 489, 489, 489,
            489, 490, 490, 490, 490,
            490, 490, 490, 491, 491,
            491, 491, 491, 491, 492,
            492, 492, 492, 492, 493,
            493, 493, 493, 493, 494,
            494, 494, 494, 495, 495,
            495, 495, 496, 496, 496,
            496, 497, 497, 497, 498,
            498, 498, 499, 499, 499,
            499, 500, 500, 500, 501,
            501, 502, 502, 502, 503,
            503, 503, 504, 504, 504,
            505, 505, 506, 506, 507,
            507, 507, 508, 508, 509,
            509, 510, 510, 510, 511,
            511, 512, 512, 513, 513,
            514, 514, 515, 515, 516,
            516, 517, 517, 518, 518,
            519, 520, 520, 521, 521,
            522, 522, 523, 523, 524,
            525, 525, 526, 526, 527,
            528, 528, 529, 530, 530,
            531, 531, 532, 533, 533,
            534, 535, 535, 536, 537,
            537, 538, 539, 540, 540,
            541, 542, 542, 543, 544,
            545, 545, 546, 547, 548,
            548, 549, 550, 551, 551,
            552, 553, 554, 555, 555,
            556, 557, 558, 559, 560,
            560, 561, 562, 563, 564,
            565, 566, 567, 567, 568,
            569, 570, 571, 572, 573,
            574, 575, 576, 577, 577,
            578, 579, 580, 581, 582,
            583, 584, 585, 586, 587,
            588, 589, 590, 591, 592,
            593, 594, 595, 596, 598,
            599, 600, 601, 602, 603,
            604, 605, 606, 607, 608,
            610, 611, 612, 613, 614,
            615, 616, 618, 619, 620,
            621, 622, 623, 625, 626,
            627, 628, 629, 631, 632,
            633, 634, 636, 637, 638,
            639, 641, 642, 643, 644,
            646, 647, 648, 650, 651,
            652, 654, 655, 656, 658,
            659, 660, 662, 663, 665,
            666, 667, 669, 670, 672,
            673, 674, 676, 677, 679,
            680, 682, 683, 685, 686,
            687, 689, 690, 692, 693,
            695, 697, 698, 700, 701,
            703, 704, 706, 707, 709,
            710, 712, 714, 715, 717,
            719, 720, 722, 723, 725,
            727, 728, 730, 732, 733,
            735, 737, 738, 740, 742,
            744, 745, 747, 749, 750,
            752, 754, 756, 758, 759,
            761, 763, 765, 767, 768,
            770, 772, 774, 776, 778,
            779, 781, 783, 785, 787,
            789, 791, 793, 795, 796,
            798, 800, 802, 804, 806,
            808, 810, 812, 814, 816,
            818, 820, 822, 824, 826,
            828, 830, 832, 835, 837,
            839, 841, 843, 845, 847,
            849, 851, 854, 856, 858,
            860, 862, 864, 867, 869,
            871, 873, 875, 878, 880,
            882, 884, 887, 889, 891,
            894, 896, 898, 900, 903,
            905, 907, 910, 912, 915,
            917, 919, 922, 924, 927,
            929, 931, 934, 936, 939,
            941, 944, 946, 949, 951,
            954, 956, 959, 961, 964,
            966, 969, 971, 974, 977,
            979, 982, 984, 987, 990,
            992, 995, 998, 1000, 1003,
            1006, 1008, 1011, 1014, 1017,
            1019, 1022, 1025, 1028, 1030,
            1033, 1036, 1039, 1042, 1044,
            1047, 1050, 1053, 1056, 1059,
            1062, 1065, 1067, 1070, 1073,
            1076, 1079, 1082, 1085, 1088,
            1091, 1094, 1097, 1100, 1103,
            1106, 1109, 1112, 1115, 1118,
            1122, 1125, 1128, 1131, 1134,
            1137, 1140, 1143, 1147, 1150,
            1153, 1156, 1159, 1163, 1166,
            1169, 1172, 1176, 1179, 1182,
            1186, 1189, 1192, 1196, 1199,
            1202, 1206, 1209, 1212, 1216,
            1219, 1223, 1226, 1230, 1233,
            1237, 1240, 1244, 1247, 1251,
            1254, 1258, 1261, 1265, 1268,
            1272, 1276, 1279, 1283, 1287,
            1290, 1294, 1298, 1301, 1305,
            1309, 1312, 1316, 1320, 1324,
            1327, 1331, 1335, 1339, 1343,
            1347, 1350, 1354, 1358, 1362,
            1366, 1370, 1374, 1378, 1382,
            1386, 1390, 1394, 1398, 1402,
            1406, 1410, 1414, 1418, 1422,
            1426, 1430, 1434, 1439, 1443,
            1447, 1451, 1455, 1459, 1464,
            1468, 1472, 1476, 1481, 1485,
            1489, 1494, 1498, 1502, 1507,
            1511, 1516, 1520, 1524, 1529,
            1533, 1538, 1542, 1547, 1551,
            1556, 1560, 1565, 1569, 1574,
            1579, 1583, 1588, 1592, 1597,
            1602, 1606, 1611, 1616, 1621,
            1625, 1630, 1635, 1640, 1645,
            1649, 1654, 1659, 1664, 1669,
            1674, 1679, 1684, 1689, 1693,
            1698, 1703, 1708, 1714, 1719,
            1724, 1729, 1734, 1739, 1744,
            1749, 1754, 1760, 1765, 1770,
            1775, 1780, 1786, 1791, 1796,
            1802, 1807, 1812, 1818, 1823,
            1828, 1834, 1839, 1845, 1850,
            1856, 1861, 1867, 1872, 1878,
            1883, 1889, 1894, 1900, 1906,
            1911, 1917, 1923, 1929, 1934,
            1940, 1946, 1952, 1957, 1963,
            1969, 1975, 1981, 1987, 1993,
            1999, 2004, 2010, 2016, 2022,
            2028, 2035, 2041, 2047, 2053,
            2059, 2065, 2071, 2077, 2084,
            2090, 2096, 2102, 2109, 2115,
            2121, 2128, 2134, 2140, 2147,
            2153, 2160, 2166, 2173, 2179,
            2186, 2192, 2199, 2205, 2212,
            2219, 2225, 2232, 2239, 2245,
            2252, 2259, 2266, 2272, 2279,
            2286, 2293, 2300, 2307, 2314,
            2321, 2328, 2335, 2342, 2349,
            2356, 2363, 2370, 2377, 2384,
            2391, 2398, 2406, 2413, 2420,
            2427, 2435, 2442, 2449, 2457,
            2464, 2472, 2479, 2487, 2494,
            2502, 2509, 2517, 2524, 2532,
            2539, 2547, 2555, 2563, 2570,
            2578, 2586, 2594, 2601, 2609,
            2617, 2625, 2633, 2641, 2649,
            2657, 2665, 2673, 2681, 2689,
            2697, 2705, 2714, 2722, 2730,
            2738, 2747, 2755, 2763, 2772,
            2780, 2788, 2797, 2805, 2814,
            2822, 2831, 2839, 2848, 2857,
            2865, 2874, 2883, 2891, 2900,
            2909, 2918, 2927, 2935, 2944,
            2953, 2962, 2971, 2980, 2989,
            2998, 3007, 3016, 3026, 3035,
            3044, 3053, 3062, 3072, 3081,
            3090, 3100, 3109, 3119, 3128,
            3138, 3147, 3157, 3166, 3176,
            3186, 3195, 3205, 3215, 3224,
            3234, 3244, 3254, 3264, 3274,
            3284, 3294, 3304, 3314, 3324,
            3334, 3344, 3354, 3364, 3375,
            3385, 3395, 3405, 3416, 3426,
            3437, 3447, 3458, 3468, 3479,
            3489, 3500, 3510, 3521, 3532,
            3543, 3553, 3564, 3575, 3586,
            3597, 3608, 3619, 3630, 3641,
            3652, 3663, 3674, 3685, 3697,
            3708, 3719, 3730, 3742, 3753,
            3765, 3776, 3788, 3799, 3811,
            3822, 3834, 3846, 3857, 3869,
            3881, 3893, 3905, 3917, 3929,
            3941, 3953, 3965, 3977, 3989,
            4001, 4013, 4025, 4038, 4050,
            4062, 4075, 4087, 4100, 4112,
            4125, 4137, 4150, 4163, 4175,
            4188, 4201, 4214, 4226, 4239,
            4252, 4265, 4278, 4291, 4304,
            4318, 4331, 4344, 4357, 4371,
            4384, 4397, 4411, 4424, 4438,
            4451, 4465, 4479, 4492, 4506,
            4520, 4533, 4547, 4561, 4575,
            4589, 4603, 4617, 4631, 4645,
            4660, 4674, 4688, 4703, 4717,
            4731, 4746, 4760, 4775, 4789,
            4804, 4819, 4833, 4848, 4863,
            4878, 4893, 4908, 4923, 4938,
            4953, 4968, 4983, 4999, 5014,
            5029, 5045, 5060, 5075, 5091,
            5107, 5122, 5138, 5154, 5169,
            5185, 5201, 5217, 5233, 5249,
            5265, 5281, 5297, 5313, 5330,
            5346, 5362, 5379, 5395, 5412,
            5428, 5445, 5462, 5478, 5495,
            5512, 5529, 5546, 5563, 5580,
            5597, 5614, 5631, 5648, 5666,
            5683, 5700, 5718, 5735, 5753,
            5770, 5788, 5806, 5824, 5841,
            5859, 5877, 5895, 5913, 5931,
            5950, 5968, 5986, 6004, 6023,
            6041, 6060, 6078, 6097, 6116,
            6134, 6153, 6172, 6191, 6210,
            6229, 6248, 6267, 6286, 6305,
            6325, 6344, 6364, 6383, 6403,
            6422, 6442, 6462, 6481, 6501,
            6521, 6541, 6561, 6581, 6602,
            6622, 6642, 6662, 6683, 6703,
            6724, 6744, 6765, 6786, 6807,
            6828, 6848, 6869, 6891, 6912,
            6933, 6954, 6975, 6997, 7018,
            7040, 7061, 7083, 7105, 7126,
            7148, 7170, 7192, 7214, 7236,
            7259, 7281, 7303, 7325, 7348,
            7370, 7393, 7416, 7438, 7461,
            7484, 7507, 7530, 7553, 7576,
            7600, 7623, 7646, 7670, 7693,
            7717, 7741, 7764, 7788, 7812,
            7836, 7860, 7884, 7908, 7932,
            7957, 7981, 8006, 8030, 8055,
            8080, 8104, 8129, 8154, 8179,
            8204, 8229, 8255, 8280, 8305,
            8331, 8356, 8382, 8408, 8434,
            8459, 8485, 8511, 8537, 8564,
            8590, 8616, 8643, 8669, 8696,
            8722, 8749, 8776, 8803, 8830,
            8857, 8884, 8912, 8939, 8966,
            8994, 9021, 9049, 9077, 9105,
            9133, 9161, 9189, 9217, 9245,
            9274, 9302, 9331, 9359, 9388,
            9417, 9446, 9475, 9504, 9533,
            9562, 9591, 9621, 9650, 9680,
            9710, 9740, 9769, 9799, 9830,
            9860, 9890, 9920, 9951, 9981,
            10012, 10043, 10073, 10104, 10135,
            10166, 10198, 10229, 10260, 10292,
            10323, 10355, 10387, 10419, 10451,
            10483, 10515, 10547, 10580, 10612,
            10645, 10677, 10710, 10743, 10776,
            10809, 10842, 10876, 10909, 10942,
            10976, 11010, 11044, 11077, 11111,
            11146, 11180, 11214, 11248, 11283,
            11318, 11352, 11387, 11422, 11457,
            11492, 11528, 11563, 11599, 11634,
            11670, 11706, 11742, 11778, 11814,
            11850, 11887, 11923, 11960, 11996,
            12033, 12070, 12107, 12144, 12182,
            12219, 12257, 12294, 12332, 12370,
            12408, 12446, 12484, 12522, 12561,
            12599, 12638, 12677, 12716, 12755,
            12794, 12833, 12873, 12912, 12952,
            12992, 13032, 13072, 13112, 13152,
            13192, 13233, 13274, 13314, 13355,
            13396, 13437, 13479, 13520, 13561,
            13603, 13645, 13687, 13729, 13771,
            13813, 13856, 13898, 13941, 13984,
            14027, 14070, 14113, 14156, 14200,
            14243, 14287, 14331, 14375, 14419,
            14463, 14508, 14552, 14597, 14642,
            14687, 14732, 14777, 14823, 14868,
            14914, 14960, 15005, 15052, 15098,
            15144, 15191, 15237, 15284, 15331,
            15378, 15425, 15473, 15520, 15568,
            15616, 15664, 15712, 15760, 15808,
            15857, 15906, 15955, 16004, 16053,
            16102, 16151, 16201, 16251, 16301,
            16351, 16401, 16451, 16502, 16553,
            16603, 16654, 16706, 16757, 16808,
            16860, 16912, 16964, 17016, 17068,
            17121, 17173, 17226, 17279, 17332,
            17385, 17438, 17492, 17546, 17600,
            17654, 17708, 17762, 17817, 17872,
            17926, 17982, 18037, 18092, 18148,
            18203, 18259, 18315, 18372, 18428,
            18485, 18542, 18598, 18656, 18713,
            18770, 18828, 18886, 18944, 19002,
            19060, 19119, 19178, 19237, 19296,
            19355, 19414, 19474, 19534, 19594,
            19654, 19714, 19775, 19836, 19897,
            19958, 20019, 20081, 20142, 20204,
            20266, 20328, 20391, 20454, 20516,
            20579, 20643, 20706, 20770, 20833,
            20897, 20962, 21026, 21091, 21155,
            21220, 21286, 21351, 21417, 21482,
            21548, 21615, 21681, 21748, 21814,
            21881, 21949, 22016, 22084, 22151,
            22220, 22288, 22356, 22425, 22494,
            22563, 22632, 22702, 22771, 22841,
            22912, 22982, 23053, 23123, 23194,
            23266, 23337, 23409, 23481, 23553,
            23625, 23698, 23771, 23844, 23917,
            23990, 24064, 24138, 24212, 24287,
            24361, 24436, 24511, 24586, 24662,
            24738, 24814, 24890, 24966, 25043,
            25120, 25197, 25275, 25352, 25430,
            25508, 25587, 25665, 25744, 25823,
            25902, 25982, 26062, 26142, 26222,
            26303, 26384, 26465, 26546, 26627,
            26709, 26791, 26874, 26956, 27039,
            27122, 27205, 27289, 27373, 27457,
            27541, 27626, 27711, 27796, 27881,
            27967, 28053, 28139, 28226, 28312,
            28399, 28486, 28574, 28662, 28750,
            28838, 28927, 29016, 29105, 29194,
            29284, 29374, 29464, 29555, 29645,
            29736, 29828, 29919, 30011, 30104,
            30196, 30289, 30382, 30475, 30569,
            30663, 30757, 30851, 30946, 31041,
            31137, 31232, 31328, 31425, 31521,
            31618, 31715, 31813, 31910, 32008,
            32107, 32205, 32304, 32403, 32503,
            32603, 32703, 32804, 32904, 33005,
            33107, 33209, 33311, 33413, 33516,
            33619, 33722, 33825, 33929, 34034,
            34138, 34243, 34348, 34454, 34560,
            34666, 34772, 34879, 34986, 35094,
            35202, 35310, 35418, 35527, 35636,
            35746, 35856, 35966, 36076, 36187,
            36298, 36410, 36522, 36634, 36746,
            36859, 36973, 37086, 37200, 37314,
            37429, 37544, 37659, 37775, 37891,
            38008, 38124, 38241, 38359, 38477,
            38595, 38714, 38833, 38952, 39072,
            39192, 39312, 39433, 39554, 39675,
            39797, 39920, 40042, 40165, 40289,
            40413, 40537, 40661, 40786, 40911,
            41037, 41163, 41290, 41417, 41544,
            41671, 41800, 41928, 42057, 42186,
            42316, 42446, 42576, 42707, 42838,
            42970, 43102, 43234, 43367, 43500,
            43634, 43768, 43902, 44037, 44173,
            44308, 44444, 44581, 44718, 44855,
            44993, 45131, 45270, 45409, 45549,
            45689, 45829, 45970, 46111, 46253,
            46395, 46537, 46680, 46824, 46968,
            47112, 47257, 47402, 47548, 47694,
            47840, 47987, 48135, 48283, 48431,
            48580, 48729, 48879, 49029, 49180,
            49331, 49482, 49634, 49787, 49940,
            50093, 50247, 50401, 50556, 50712,
            50867, 51024, 51181, 51338, 51495,
            51654, 51812, 51972, 52131, 52291,
            52452, 52613, 52775, 52937, 53100,
            53263, 53427, 53591, 53755, 53921,
            54086, 54252, 54419, 54586, 54754,
            54922, 55091, 55260, 55430, 55600,
            55771, 55943, 56114, 56287, 56460,
            56633, 56807, 56982, 57157, 57333,
            57509, 57685, 57863, 58040, 58219,
            58398, 58577, 58757, 58938, 59119,
            59300, 59483, 59665, 59849, 60033,
            60217, 60402, 60588, 60774, 60960,
            61148, 61336, 61524, 61713, 61903,
            62093, 62284, 62475, 62667, 62860,
            63053, 63247, 63441, 63636, 63831,
            64027, 64224, 64422, 64619, 64818,
            65017, 65217, 65417, 65618, 65820,
            66022, 66225, 66429, 66633, 66837,
            67043, 67249, 67455, 67663, 67870,
            68079, 68288, 68498, 68708, 68920,
            69131, 69344, 69557, 69771, 69985,
            70200, 70416, 70632, 70849, 71067,
            71285, 71504, 71724, 71944, 72165,
            72387, 72609, 72833, 73056, 73281,
            73506, 73732, 73958, 74186, 74414,
            74642, 74872, 75102, 75332, 75564,
            75796, 76029, 76262, 76497, 76732,
            76968, 77204, 77441, 77679, 77918,
            78157, 78398, 78638, 78880, 79122,
            79366, 79609, 79854, 80099, 80345,
            80592, 80840, 81088, 81338, 81587,
            81838, 82090, 82342, 82595, 82849,
            83103, 83358, 83615, 83872, 84129,
            84388, 84647, 84907, 85168, 85430,
            85692, 85955, 86220, 86485, 86750,
            87017, 87284, 87552, 87821, 88091,
            88362, 88633, 88906, 89179, 89453,
            89728, 90003, 90280, 90557, 90836,
            91115, 91395, 91676, 91957, 92240,
            92523, 92807, 93093, 93379, 93666,
            93953, 94242, 94532, 94822, 95113,
            95406, 95699, 95993, 96288, 96584,
            96881, 97178, 97477, 97776, 98077,
            98378, 98680, 98984, 99288, 99593,
            99899, 100206, 100514, 100822, 101132,
            101443, 101755, 102067, 102381, 102696,
            103011, 103328, 103645, 103964, 104283,
            104603, 104925, 105247, 105571, 105895,
            106220, 106547, 106874, 107203, 107532,
            107862, 108194, 108526, 108860, 109194,
            109530, 109866, 110204, 110542, 110882,
            111223, 111565, 111907, 112251, 112596,
            112942, 113289, 113637, 113986, 114337,
            114688, 115040, 115394, 115748, 116104,
            116461, 116819, 117178, 117538, 117899,
            118261, 118624, 118989, 119354, 119721,
            120089, 120458, 120828, 121199, 121572,
            121945, 122320, 122696, 123073, 123451,
            123830, 124211, 124593, 124975, 125359,
            125745, 126131, 126518, 126907, 127297,
            127688, 128081, 128474, 128869, 129265,
            129662, 130061, 130260
         ) ),
        max_error = cms.double(0.6152529479288091),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut2 = cms.PSet(
        lut = cms.vint32( (
            256, 256, 257, 258, 259,
            260, 260, 261, 262, 263,
            264, 264, 265, 266, 267,
            268, 268, 269, 270, 271,
            272, 273, 273, 274, 275,
            276, 277, 278, 279, 279,
            280, 281, 282, 283, 284,
            285, 285, 286, 287, 288,
            289, 290, 291, 292, 293,
            293, 294, 295, 296, 297,
            298, 299, 300, 301, 302,
            303, 303, 304, 305, 306,
            307, 308, 309, 310, 311,
            312, 313, 314, 315, 316,
            317, 318, 319, 320, 321,
            322, 323, 324, 325, 326,
            327, 328, 329, 330, 331,
            332, 333, 334, 335, 336,
            337, 338, 339, 340, 341,
            342, 343, 344, 345, 346,
            347, 348, 349, 351, 352,
            353, 354, 355, 356, 357,
            358, 359, 360, 361, 363,
            364, 365, 366, 367, 368,
            369, 370, 372, 373, 374,
            375, 376, 377, 379, 380,
            381, 382, 383, 384, 386,
            387, 388, 389, 390, 392,
            393, 394, 395, 396, 398,
            399, 400, 401, 402, 404,
            405, 406, 407, 409, 410,
            411, 412, 414, 415, 416,
            418, 419, 420, 421, 423,
            424, 425, 427, 428, 429,
            431, 432, 433, 435, 436,
            437, 439, 440, 441, 443,
            444, 445, 447, 448, 449,
            451, 452, 454, 455, 456,
            458, 459, 461, 462, 463,
            465, 466, 468, 469, 471,
            472, 474, 475, 476, 478,
            479, 481, 482, 484, 485,
            487, 488, 490, 491, 493,
            494, 496, 497, 499, 500,
            502, 503, 505, 507, 508,
            510, 511, 513, 514, 516,
            518, 519, 521, 522, 524,
            526, 527, 529, 530, 532,
            534, 535, 537, 539, 540,
            542, 544, 545, 547, 549,
            550, 552, 554, 555, 557,
            559, 561, 562, 564, 566,
            567, 569, 571, 573, 575,
            576, 578, 580, 582, 583,
            585, 587, 589, 591, 592,
            594, 596, 598, 600, 602,
            603, 605, 607, 609, 611,
            613, 615, 617, 618, 620,
            622, 624, 626, 628, 630,
            632, 634, 636, 638, 640,
            642, 644, 646, 648, 650,
            652, 654, 656, 658, 660,
            662, 664, 666, 668, 670,
            672, 674, 676, 678, 680,
            682, 684, 686, 688, 691,
            693, 695, 697, 699, 701,
            703, 706, 708, 710, 712,
            714, 717, 719, 721, 723,
            725, 728, 730, 732, 734,
            737, 739, 741, 743, 746,
            748, 750, 753, 755, 757,
            760, 762, 764, 767, 769,
            771, 774, 776, 778, 781,
            783, 786, 788, 790, 793,
            795, 798, 800, 803, 805,
            808, 810, 813, 815, 818,
            820, 823, 825, 828, 830,
            833, 835, 838, 840, 843,
            846, 848, 851, 853, 856,
            859, 861, 864, 867, 869,
            872, 875, 877, 880, 883,
            885, 888, 891, 894, 896,
            899, 902, 905, 907, 910,
            913, 916, 919, 921, 924,
            927, 930, 933, 936, 939,
            941, 944, 947, 950, 953,
            956, 959, 962, 965, 968,
            971, 974, 977, 980, 983,
            986, 989, 992, 995, 998,
            1001, 1004, 1007, 1010, 1013,
            1017, 1020, 1023, 1026, 1029,
            1032, 1035, 1039, 1042, 1045,
            1048, 1051, 1055, 1058, 1061,
            1064, 1068, 1071, 1074, 1078,
            1081, 1084, 1088, 1091, 1094,
            1098, 1101, 1104, 1108, 1111,
            1115, 1118, 1121, 1125, 1128,
            1132, 1135, 1139, 1142, 1146,
            1149, 1153, 1156, 1160, 1163,
            1167, 1171, 1174, 1178, 1181,
            1185, 1189, 1192, 1196, 1200,
            1203, 1207, 1211, 1214, 1218,
            1222, 1226, 1229, 1233, 1237,
            1241, 1245, 1249, 1252, 1256,
            1260, 1264, 1268, 1272, 1276,
            1280, 1283, 1287, 1291, 1295,
            1299, 1303, 1307, 1311, 1315,
            1319, 1323, 1328, 1332, 1336,
            1340, 1344, 1348, 1352, 1356,
            1360, 1365, 1369, 1373, 1377,
            1382, 1386, 1390, 1394, 1399,
            1403, 1407, 1412, 1416, 1420,
            1425, 1429, 1433, 1438, 1442,
            1447, 1451, 1455, 1460, 1464,
            1469, 1473, 1478, 1483, 1487,
            1492, 1496, 1501, 1505, 1510,
            1515, 1519, 1524, 1529, 1533,
            1538, 1543, 1548, 1552, 1557,
            1562, 1567, 1572, 1576, 1581,
            1586, 1591, 1596, 1601, 1606,
            1611, 1616, 1620, 1625, 1630,
            1635, 1640, 1646, 1651, 1656,
            1661, 1666, 1671, 1676, 1681,
            1686, 1692, 1697, 1702, 1707,
            1712, 1718, 1723, 1728, 1734,
            1739, 1744, 1750, 1755, 1760,
            1766, 1771, 1777, 1782, 1788,
            1793, 1799, 1804, 1810, 1815,
            1821, 1826, 1832, 1838, 1843,
            1849, 1855, 1860, 1866, 1872,
            1878, 1883, 1889, 1895, 1901,
            1907, 1912, 1918, 1924, 1930,
            1936, 1942, 1948, 1954, 1960,
            1966, 1972, 1978, 1984, 1990,
            1996, 2003, 2009, 2015, 2021,
            2027, 2033, 2040, 2046, 2052,
            2059, 2065, 2071, 2078, 2084,
            2090, 2097, 2103, 2110, 2116,
            2123, 2129, 2136, 2142, 2149,
            2156, 2162, 2169, 2175, 2182,
            2189, 2196, 2202, 2209, 2216,
            2223, 2230, 2236, 2243, 2250,
            2257, 2264, 2271, 2278, 2285,
            2292, 2299, 2306, 2313, 2320,
            2327, 2335, 2342, 2349, 2356,
            2363, 2371, 2378, 2385, 2393,
            2400, 2407, 2415, 2422, 2430,
            2437, 2444, 2452, 2460, 2467,
            2475, 2482, 2490, 2498, 2505,
            2513, 2521, 2528, 2536, 2544,
            2552, 2560, 2567, 2575, 2583,
            2591, 2599, 2607, 2615, 2623,
            2631, 2639, 2647, 2656, 2664,
            2672, 2680, 2688, 2697, 2705,
            2713, 2722, 2730, 2738, 2747,
            2755, 2764, 2772, 2781, 2789,
            2798, 2806, 2815, 2824, 2832,
            2841, 2850, 2858, 2867, 2876,
            2885, 2894, 2903, 2912, 2921,
            2930, 2939, 2948, 2957, 2966,
            2975, 2984, 2993, 3002, 3012,
            3021, 3030, 3039, 3049, 3058,
            3067, 3077, 3086, 3096, 3105,
            3115, 3124, 3134, 3144, 3153,
            3163, 3173, 3183, 3192, 3202,
            3212, 3222, 3232, 3242, 3252,
            3262, 3272, 3282, 3292, 3302,
            3312, 3322, 3332, 3343, 3353,
            3363, 3374, 3384, 3394, 3405,
            3415, 3426, 3436, 3447, 3457,
            3468, 3479, 3489, 3500, 3511,
            3522, 3532, 3543, 3554, 3565,
            3576, 3587, 3598, 3609, 3620,
            3631, 3642, 3654, 3665, 3676,
            3687, 3699, 3710, 3722, 3733,
            3744, 3756, 3767, 3779, 3791,
            3802, 3814, 3826, 3837, 3849,
            3861, 3873, 3885, 3897, 3909,
            3921, 3933, 3945, 3957, 3969,
            3981, 3994, 4006, 4018, 4031,
            4043, 4055, 4068, 4080, 4093,
            4105, 4118, 4131, 4143, 4156,
            4169, 4182, 4195, 4207, 4220,
            4233, 4246, 4259, 4272, 4286,
            4299, 4312, 4325, 4339, 4352,
            4365, 4379, 4392, 4406, 4419,
            4433, 4446, 4460, 4474, 4487,
            4501, 4515, 4529, 4543, 4557,
            4571, 4585, 4599, 4613, 4627,
            4641, 4656, 4670, 4684, 4699,
            4713, 4728, 4742, 4757, 4771,
            4786, 4801, 4816, 4830, 4845,
            4860, 4875, 4890, 4905, 4920,
            4935, 4950, 4966, 4981, 4996,
            5011, 5027, 5042, 5058, 5073,
            5089, 5105, 5120, 5136, 5152,
            5168, 5183, 5199, 5215, 5231,
            5247, 5264, 5280, 5296, 5312,
            5329, 5345, 5361, 5378, 5394,
            5411, 5428, 5444, 5461, 5478,
            5495, 5512, 5528, 5545, 5562,
            5580, 5597, 5614, 5631, 5648,
            5666, 5683, 5701, 5718, 5736,
            5753, 5771, 5789, 5807, 5824,
            5842, 5860, 5878, 5896, 5914,
            5933, 5951, 5969, 5987, 6006,
            6024, 6043, 6061, 6080, 6099,
            6117, 6136, 6155, 6174, 6193,
            6212, 6231, 6250, 6269, 6289,
            6308, 6327, 6347, 6366, 6386,
            6406, 6425, 6445, 6465, 6485,
            6505, 6525, 6545, 6565, 6585,
            6605, 6625, 6646, 6666, 6687,
            6707, 6728, 6749, 6769, 6790,
            6811, 6832, 6853, 6874, 6895,
            6916, 6937, 6959, 6980, 7002,
            7023, 7045, 7066, 7088, 7110,
            7132, 7154, 7176, 7198, 7220,
            7242, 7264, 7286, 7309, 7331,
            7354, 7376, 7399, 7422, 7445,
            7468, 7490, 7513, 7537, 7560,
            7583, 7606, 7630, 7653, 7677,
            7700, 7724, 7748, 7771, 7795,
            7819, 7843, 7867, 7892, 7916,
            7940, 7964, 7989, 8014, 8038,
            8063, 8088, 8112, 8137, 8162,
            8187, 8213, 8238, 8263, 8289,
            8314, 8340, 8365, 8391, 8417,
            8443, 8468, 8495, 8521, 8547,
            8573, 8599, 8626, 8652, 8679,
            8706, 8732, 8759, 8786, 8813,
            8840, 8867, 8895, 8922, 8949,
            8977, 9004, 9032, 9060, 9088,
            9116, 9144, 9172, 9200, 9228,
            9256, 9285, 9313, 9342, 9371,
            9400, 9428, 9457, 9486, 9516,
            9545, 9574, 9604, 9633, 9663,
            9692, 9722, 9752, 9782, 9812,
            9842, 9872, 9903, 9933, 9964,
            9994, 10025, 10056, 10087, 10118,
            10149, 10180, 10211, 10243, 10274,
            10306, 10337, 10369, 10401, 10433,
            10465, 10497, 10529, 10562, 10594,
            10627, 10659, 10692, 10725, 10758,
            10791, 10824, 10858, 10891, 10924,
            10958, 10992, 11025, 11059, 11093,
            11127, 11161, 11196, 11230, 11265,
            11299, 11334, 11369, 11404, 11439,
            11474, 11509, 11545, 11580, 11616,
            11651, 11687, 11723, 11759, 11795,
            11831, 11868, 11904, 11941, 11978,
            12014, 12051, 12088, 12125, 12163,
            12200, 12238, 12275, 12313, 12351,
            12389, 12427, 12465, 12503, 12542,
            12580, 12619, 12658, 12696, 12735,
            12775, 12814, 12853, 12893, 12932,
            12972, 13012, 13052, 13092, 13132,
            13173, 13213, 13254, 13294, 13335,
            13376, 13417, 13459, 13500, 13541,
            13583, 13625, 13667, 13709, 13751,
            13793, 13835, 13878, 13920, 13963,
            14006, 14049, 14092, 14136, 14179,
            14223, 14266, 14310, 14354, 14398,
            14443, 14487, 14531, 14576, 14621,
            14666, 14711, 14756, 14801, 14847,
            14892, 14938, 14984, 15030, 15076,
            15123, 15169, 15216, 15263, 15309,
            15356, 15404, 15451, 15498, 15546,
            15594, 15642, 15690, 15738, 15786,
            15835, 15884, 15932, 15981, 16030,
            16080, 16129, 16179, 16228, 16278,
            16328, 16378, 16429, 16479, 16530,
            16581, 16632, 16683, 16734, 16785,
            16837, 16889, 16941, 16993, 17045,
            17097, 17150, 17202, 17255, 17308,
            17361, 17415, 17468, 17522, 17576,
            17630, 17684, 17738, 17793, 17848,
            17902, 17957, 18013, 18068, 18123,
            18179, 18235, 18291, 18347, 18404,
            18460, 18517, 18574, 18631, 18688,
            18746, 18803, 18861, 18919, 18977,
            19035, 19094, 19152, 19211, 19270,
            19330, 19389, 19448, 19508, 19568,
            19628, 19689, 19749, 19810, 19871,
            19932, 19993, 20054, 20116, 20178,
            20240, 20302, 20364, 20427, 20490,
            20553, 20616, 20679, 20743, 20806,
            20870, 20935, 20999, 21063, 21128,
            21193, 21258, 21323, 21389, 21455,
            21521, 21587, 21653, 21720, 21786,
            21853, 21920, 21988, 22055, 22123,
            22191, 22259, 22328, 22396, 22465,
            22534, 22603, 22673, 22742, 22812,
            22882, 22953, 23023, 23094, 23165,
            23236, 23308, 23379, 23451, 23523,
            23595, 23668, 23741, 23814, 23887,
            23960, 24034, 24108, 24182, 24256,
            24330, 24405, 24480, 24555, 24631,
            24707, 24783, 24859, 24935, 25012,
            25089, 25166, 25243, 25320, 25398,
            25476, 25555, 25633, 25712, 25791,
            25870, 25950, 26029, 26109, 26190,
            26270, 26351, 26432, 26513, 26594,
            26676, 26758, 26840, 26923, 27006,
            27088, 27172, 27255, 27339, 27423,
            27507, 27592, 27677, 27762, 27847,
            27932, 28018, 28104, 28191, 28277,
            28364, 28451, 28539, 28626, 28714,
            28803, 28891, 28980, 29069, 29158,
            29248, 29338, 29428, 29518, 29609,
            29700, 29791, 29883, 29975, 30067,
            30159, 30252, 30345, 30438, 30532,
            30625, 30719, 30814, 30909, 31003,
            31099, 31194, 31290, 31386, 31483,
            31579, 31677, 31774, 31871, 31969,
            32068, 32166, 32265, 32364, 32464,
            32563, 32663, 32764, 32864, 32965,
            33067, 33168, 33270, 33372, 33475,
            33578, 33681, 33785, 33888, 33992,
            34097, 34202, 34307, 34412, 34518,
            34624, 34730, 34837, 34944, 35051,
            35159, 35267, 35376, 35484, 35593,
            35703, 35812, 35922, 36033, 36144,
            36255, 36366, 36478, 36590, 36702,
            36815, 36928, 37042, 37155, 37270,
            37384, 37499, 37614, 37730, 37846,
            37962, 38079, 38196, 38313, 38431,
            38549, 38667, 38786, 38905, 39025,
            39145, 39265, 39386, 39507, 39628,
            39750, 39872, 39994, 40117, 40241,
            40364, 40488, 40613, 40737, 40863,
            40988, 41114, 41240, 41367, 41494,
            41622, 41750, 41878, 42007, 42136,
            42265, 42395, 42525, 42656, 42787,
            42919, 43050, 43183, 43315, 43448,
            43582, 43716, 43850, 43985, 44120,
            44256, 44392, 44528, 44665, 44802,
            44940, 45078, 45216, 45355, 45495,
            45634, 45775, 45915, 46056, 46198,
            46340, 46482, 46625, 46768, 46912,
            47056, 47201, 47346, 47491, 47637,
            47784, 47930, 48078, 48225, 48374,
            48522, 48671, 48821, 48971, 49121,
            49272, 49424, 49576, 49728, 49881,
            50034, 50188, 50342, 50497, 50652,
            50807, 50963, 51120, 51277, 51435,
            51593, 51751, 51910, 52070, 52230,
            52390, 52551, 52713, 52875, 53037,
            53200, 53364, 53528, 53692, 53857,
            54022, 54188, 54355, 54522, 54690,
            54858, 55026, 55195, 55365, 55535,
            55706, 55877, 56048, 56221, 56393,
            56567, 56740, 56915, 57090, 57265,
            57441, 57618, 57795, 57972, 58150,
            58329, 58508, 58688, 58868, 59049,
            59231, 59413, 59595, 59778, 59962,
            60146, 60331, 60516, 60702, 60889,
            61076, 61264, 61452, 61641, 61830,
            62020, 62211, 62402, 62594, 62786,
            62979, 63172, 63366, 63561, 63756,
            63952, 64149, 64346, 64544, 64742,
            64941, 65140, 65341, 65541, 65743,
            65945, 66147, 66351, 66555, 66759,
            66964, 67170, 67376, 67583, 67791,
            67999, 68208, 68418, 68628, 68839,
            69050, 69263, 69475, 69689, 69903,
            70118, 70333, 70549, 70766, 70984,
            71202, 71421, 71640, 71860, 72081,
            72302, 72525, 72747, 72971, 73195,
            73420, 73646, 73872, 74099, 74327,
            74555, 74784, 75014, 75244, 75476,
            75707, 75940, 76173, 76407, 76642,
            76878, 77114, 77351, 77589, 77827,
            78066, 78306, 78547, 78788, 79030,
            79273, 79516, 79761, 80006, 80252,
            80498, 80746, 80994, 81243, 81492,
            81743, 81994, 82246, 82498, 82752,
            83006, 83261, 83517, 83774, 84031,
            84289, 84548, 84808, 85069, 85330,
            85592, 85855, 86119, 86384, 86649,
            86915, 87182, 87450, 87719, 87989,
            88259, 88530, 88802, 89075, 89349,
            89623, 89899, 90175, 90452, 90730,
            91009, 91288, 91569, 91850, 92132,
            92415, 92699, 92984, 93270, 93557,
            93844, 94132, 94422, 94712, 95003,
            95295, 95587, 95881, 96176, 96471,
            96768, 97065, 97363, 97662, 97963,
            98264, 98565, 98868, 99172, 99477,
            99783, 100089, 100397, 100705, 101015,
            101325, 101636, 101949, 102262, 102576,
            102891, 103207, 103525, 103843, 104162,
            104482, 104803, 105125, 105448, 105772,
            106097, 106423, 106750, 107078, 107407,
            107737, 108068, 108400, 108733, 109067,
            109402, 109738, 110076, 110414, 110753,
            111093, 111435, 111777, 112121, 112465,
            112811, 113157, 113505, 113854, 114204,
            114555, 114907, 115260, 115614, 115969,
            116325, 116683, 117041, 117401, 117762,
            118124, 118486, 118851, 119216, 119582,
            119949, 120318, 120688, 121059, 121431,
            121804, 122178, 122553, 122930, 123308,
            123687, 124067, 124448, 124830, 125214,
            125598, 125984, 126371, 126760, 127149,
            127540, 127932, 128325, 128719, 129115,
            129511, 129909, 130309, 130709, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071
         ) ),
        max_error = cms.double(5748.616225984908),
        output_scale_factor = cms.double(0.953125),
        unused_lsbs = cms.uint32(2)
    ),
    inv_mass_checks = cms.untracked.bool(False),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    sanity_checks = cms.untracked.bool(False),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    )
)


process.TkMuonPuppiHT6320 = cms.EDFilter("L1GTDoubleObjectCond",
    collection1 = cms.PSet(
        maxEta = cms.double(2.4),
        maxPrimVertDz = cms.double(1),
        minEta = cms.double(-2.4),
        minQualityScore = cms.uint32(0),
        primVertex = cms.uint32(0),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 0.83, 1.24),
        regionsMinPt = cms.vdouble(6, 6, 6),
        tag = cms.InputTag("l1tGTProducer","GMTTkMuons")
    ),
    collection2 = cms.PSet(
        minScalarSumPt = cms.double(251),
        tag = cms.InputTag("l1tGTProducer","CL2HtSum")
    ),
    cos_phi_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            487, 487, 487, 487, 487,
            487, 487, 487, 487, 487,
            487, 486, 486, 486, 486,
            486, 486, 486, 485, 485,
            485, 485, 485, 485, 484,
            484, 484, 484, 484, 483,
            483, 483, 483, 483, 482,
            482, 482, 482, 481, 481,
            481, 481, 480, 480, 480,
            480, 479, 479, 479, 478,
            478, 478, 478, 477, 477,
            477, 476, 476, 476, 475,
            475, 475, 474, 474, 474,
            473, 473, 472, 472, 472,
            471, 471, 471, 470, 470,
            469, 469, 468, 468, 468,
            467, 467, 466, 466, 465,
            465, 465, 464, 464, 463,
            463, 462, 462, 461, 461,
            460, 460, 459, 459, 458,
            458, 457, 457, 456, 456,
            455, 454, 454, 453, 453,
            452, 452, 451, 451, 450,
            449, 449, 448, 448, 447,
            446, 446, 445, 445, 444,
            443, 443, 442, 441, 441,
            440, 440, 439, 438, 438,
            437, 436, 436, 435, 434,
            434, 433, 432, 431, 431,
            430, 429, 429, 428, 427,
            426, 426, 425, 424, 423,
            423, 422, 421, 420, 420,
            419, 418, 417, 417, 416,
            415, 414, 413, 413, 412,
            411, 410, 409, 409, 408,
            407, 406, 405, 405, 404,
            403, 402, 401, 400, 399,
            399, 398, 397, 396, 395,
            394, 393, 392, 392, 391,
            390, 389, 388, 387, 386,
            385, 384, 383, 382, 381,
            381, 380, 379, 378, 377,
            376, 375, 374, 373, 372,
            371, 370, 369, 368, 367,
            366, 365, 364, 363, 362,
            361, 360, 359, 358, 357,
            356, 355, 354, 353, 352,
            351, 350, 349, 348, 347,
            346, 345, 343, 342, 341,
            340, 339, 338, 337, 336,
            335, 334, 333, 332, 330,
            329, 328, 327, 326, 325,
            324, 323, 322, 320, 319,
            318, 317, 316, 315, 314,
            312, 311, 310, 309, 308,
            307, 306, 304, 303, 302,
            301, 300, 298, 297, 296,
            295, 294, 293, 291, 290,
            289, 288, 286, 285, 284,
            283, 282, 280, 279, 278,
            277, 275, 274, 273, 272,
            270, 269, 268, 267, 265,
            264, 263, 262, 260, 259,
            258, 257, 255, 254, 253,
            252, 250, 249, 248, 246,
            245, 244, 242, 241, 240,
            239, 237, 236, 235, 233,
            232, 231, 229, 228, 227,
            225, 224, 223, 221, 220,
            219, 217, 216, 215, 213,
            212, 211, 209, 208, 207,
            205, 204, 203, 201, 200,
            198, 197, 196, 194, 193,
            192, 190, 189, 187, 186,
            185, 183, 182, 181, 179,
            178, 176, 175, 174, 172,
            171, 169, 168, 167, 165,
            164, 162, 161, 159, 158,
            157, 155, 154, 152, 151,
            150, 148, 147, 145, 144,
            142, 141, 140, 138, 137,
            135, 134, 132, 131, 129,
            128, 127, 125, 124, 122,
            121, 119, 118, 116, 115,
            113, 112, 111, 109, 108,
            106, 105, 103, 102, 100,
            99, 97, 96, 94, 93,
            92, 90, 89, 87, 86,
            84, 83, 81, 80, 78,
            77, 75, 74, 72, 71,
            69, 68, 66, 65, 63,
            62, 60, 59, 58, 56,
            55, 53, 52, 50, 49,
            47, 46, 44, 43, 41,
            40, 38, 37, 35, 34,
            32, 31, 29, 28, 26,
            25, 23, 22, 20, 19,
            17, 16, 14, 13, 11,
            10, 8, 7, 5, 4,
            2, 1, -1, -2, -4,
            -5, -7, -8, -10, -11,
            -13, -14, -16, -17, -19,
            -20, -22, -23, -25, -26,
            -28, -29, -31, -32, -34,
            -35, -37, -38, -40, -41,
            -43, -44, -46, -47, -49,
            -50, -52, -53, -55, -56,
            -58, -59, -60, -62, -63,
            -65, -66, -68, -69, -71,
            -72, -74, -75, -77, -78,
            -80, -81, -83, -84, -86,
            -87, -89, -90, -92, -93,
            -94, -96, -97, -99, -100,
            -102, -103, -105, -106, -108,
            -109, -111, -112, -113, -115,
            -116, -118, -119, -121, -122,
            -124, -125, -127, -128, -129,
            -131, -132, -134, -135, -137,
            -138, -140, -141, -142, -144,
            -145, -147, -148, -150, -151,
            -152, -154, -155, -157, -158,
            -159, -161, -162, -164, -165,
            -167, -168, -169, -171, -172,
            -174, -175, -176, -178, -179,
            -181, -182, -183, -185, -186,
            -187, -189, -190, -192, -193,
            -194, -196, -197, -198, -200,
            -201, -203, -204, -205, -207,
            -208, -209, -211, -212, -213,
            -215, -216, -217, -219, -220,
            -221, -223, -224, -225, -227,
            -228, -229, -231, -232, -233,
            -235, -236, -237, -239, -240,
            -241, -242, -244, -245, -246,
            -248, -249, -250, -252, -253,
            -254, -255, -257, -258, -259,
            -260, -262, -263, -264, -265,
            -267, -268, -269, -270, -272,
            -273, -274, -275, -277, -278,
            -279, -280, -282, -283, -284,
            -285, -286, -288, -289, -290,
            -291, -293, -294, -295, -296,
            -297, -298, -300, -301, -302,
            -303, -304, -306, -307, -308,
            -309, -310, -311, -312, -314,
            -315, -316, -317, -318, -319,
            -320, -322, -323, -324, -325,
            -326, -327, -328, -329, -330,
            -332, -333, -334, -335, -336,
            -337, -338, -339, -340, -341,
            -342, -343, -345, -346, -347,
            -348, -349, -350, -351, -352,
            -353, -354, -355, -356, -357,
            -358, -359, -360, -361, -362,
            -363, -364, -365, -366, -367,
            -368, -369, -370, -371, -372,
            -373, -374, -375, -376, -377,
            -378, -379, -380, -381, -381,
            -382, -383, -384, -385, -386,
            -387, -388, -389, -390, -391,
            -392, -392, -393, -394, -395,
            -396, -397, -398, -399, -399,
            -400, -401, -402, -403, -404,
            -405, -405, -406, -407, -408,
            -409, -409, -410, -411, -412,
            -413, -413, -414, -415, -416,
            -417, -417, -418, -419, -420,
            -420, -421, -422, -423, -423,
            -424, -425, -426, -426, -427,
            -428, -429, -429, -430, -431,
            -431, -432, -433, -434, -434,
            -435, -436, -436, -437, -438,
            -438, -439, -440, -440, -441,
            -441, -442, -443, -443, -444,
            -445, -445, -446, -446, -447,
            -448, -448, -449, -449, -450,
            -451, -451, -452, -452, -453,
            -453, -454, -454, -455, -456,
            -456, -457, -457, -458, -458,
            -459, -459, -460, -460, -461,
            -461, -462, -462, -463, -463,
            -464, -464, -465, -465, -465,
            -466, -466, -467, -467, -468,
            -468, -468, -469, -469, -470,
            -470, -471, -471, -471, -472,
            -472, -472, -473, -473, -474,
            -474, -474, -475, -475, -475,
            -476, -476, -476, -477, -477,
            -477, -478, -478, -478, -478,
            -479, -479, -479, -480, -480,
            -480, -480, -481, -481, -481,
            -481, -482, -482, -482, -482,
            -483, -483, -483, -483, -483,
            -484, -484, -484, -484, -484,
            -485, -485, -485, -485, -485,
            -485, -486, -486, -486, -486,
            -486, -486, -486, -487, -487,
            -487, -487, -487, -487, -487,
            -487, -487, -487, -487, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488
         ) ),
        max_error = cms.double(0.0025338281044886835),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            489, 489, 489, 489, 489,
            489, 489, 489, 489, 489,
            489, 490, 490, 490, 490,
            490, 490, 490, 491, 491,
            491, 491, 491, 491, 492,
            492, 492, 492, 492, 493,
            493, 493, 493, 493, 494,
            494, 494, 494, 495, 495,
            495, 495, 496, 496, 496,
            496, 497, 497, 497, 498,
            498, 498, 499, 499, 499,
            499, 500, 500, 500, 501,
            501, 502, 502, 502, 503,
            503, 503, 504, 504, 504,
            505, 505, 506, 506, 507,
            507, 507, 508, 508, 509,
            509, 510, 510, 510, 511,
            511, 512, 512, 513, 513,
            514, 514, 515, 515, 516,
            516, 517, 517, 518, 518,
            519, 520, 520, 521, 521,
            522, 522, 523, 523, 524,
            525, 525, 526, 526, 527,
            528, 528, 529, 530, 530,
            531, 531, 532, 533, 533,
            534, 535, 535, 536, 537,
            537, 538, 539, 540, 540,
            541, 542, 542, 543, 544,
            545, 545, 546, 547, 548,
            548, 549, 550, 551, 551,
            552, 553, 554, 555, 555,
            556, 557, 558, 559, 560,
            560, 561, 562, 563, 564,
            565, 566, 567, 567, 568,
            569, 570, 571, 572, 573,
            574, 575, 576, 577, 577,
            578, 579, 580, 581, 582,
            583, 584, 585, 586, 587,
            588, 589, 590, 591, 592,
            593, 594, 595, 596, 598,
            599, 600, 601, 602, 603,
            604, 605, 606, 607, 608,
            610, 611, 612, 613, 614,
            615, 616, 618, 619, 620,
            621, 622, 623, 625, 626,
            627, 628, 629, 631, 632,
            633, 634, 636, 637, 638,
            639, 641, 642, 643, 644,
            646, 647, 648, 650, 651,
            652, 654, 655, 656, 658,
            659, 660, 662, 663, 665,
            666, 667, 669, 670, 672,
            673, 674, 676, 677, 679,
            680, 682, 683, 685, 686,
            687, 689, 690, 692, 693,
            695, 697, 698, 700, 701,
            703, 704, 706, 707, 709,
            710, 712, 714, 715, 717,
            719, 720, 722, 723, 725,
            727, 728, 730, 732, 733,
            735, 737, 738, 740, 742,
            744, 745, 747, 749, 750,
            752, 754, 756, 758, 759,
            761, 763, 765, 767, 768,
            770, 772, 774, 776, 778,
            779, 781, 783, 785, 787,
            789, 791, 793, 795, 796,
            798, 800, 802, 804, 806,
            808, 810, 812, 814, 816,
            818, 820, 822, 824, 826,
            828, 830, 832, 835, 837,
            839, 841, 843, 845, 847,
            849, 851, 854, 856, 858,
            860, 862, 864, 867, 869,
            871, 873, 875, 878, 880,
            882, 884, 887, 889, 891,
            894, 896, 898, 900, 903,
            905, 907, 910, 912, 915,
            917, 919, 922, 924, 927,
            929, 931, 934, 936, 939,
            941, 944, 946, 949, 951,
            954, 956, 959, 961, 964,
            966, 969, 971, 974, 977,
            979, 982, 984, 987, 990,
            992, 995, 998, 1000, 1003,
            1006, 1008, 1011, 1014, 1017,
            1019, 1022, 1025, 1028, 1030,
            1033, 1036, 1039, 1042, 1044,
            1047, 1050, 1053, 1056, 1059,
            1062, 1065, 1067, 1070, 1073,
            1076, 1079, 1082, 1085, 1088,
            1091, 1094, 1097, 1100, 1103,
            1106, 1109, 1112, 1115, 1118,
            1122, 1125, 1128, 1131, 1134,
            1137, 1140, 1143, 1147, 1150,
            1153, 1156, 1159, 1163, 1166,
            1169, 1172, 1176, 1179, 1182,
            1186, 1189, 1192, 1196, 1199,
            1202, 1206, 1209, 1212, 1216,
            1219, 1223, 1226, 1230, 1233,
            1237, 1240, 1244, 1247, 1251,
            1254, 1258, 1261, 1265, 1268,
            1272, 1276, 1279, 1283, 1287,
            1290, 1294, 1298, 1301, 1305,
            1309, 1312, 1316, 1320, 1324,
            1327, 1331, 1335, 1339, 1343,
            1347, 1350, 1354, 1358, 1362,
            1366, 1370, 1374, 1378, 1382,
            1386, 1390, 1394, 1398, 1402,
            1406, 1410, 1414, 1418, 1422,
            1426, 1430, 1434, 1439, 1443,
            1447, 1451, 1455, 1459, 1464,
            1468, 1472, 1476, 1481, 1485,
            1489, 1494, 1498, 1502, 1507,
            1511, 1516, 1520, 1524, 1529,
            1533, 1538, 1542, 1547, 1551,
            1556, 1560, 1565, 1569, 1574,
            1579, 1583, 1588, 1592, 1597,
            1602, 1606, 1611, 1616, 1621,
            1625, 1630, 1635, 1640, 1645,
            1649, 1654, 1659, 1664, 1669,
            1674, 1679, 1684, 1689, 1693,
            1698, 1703, 1708, 1714, 1719,
            1724, 1729, 1734, 1739, 1744,
            1749, 1754, 1760, 1765, 1770,
            1775, 1780, 1786, 1791, 1796,
            1802, 1807, 1812, 1818, 1823,
            1828, 1834, 1839, 1845, 1850,
            1856, 1861, 1867, 1872, 1878,
            1883, 1889, 1894, 1900, 1906,
            1911, 1917, 1923, 1929, 1934,
            1940, 1946, 1952, 1957, 1963,
            1969, 1975, 1981, 1987, 1993,
            1999, 2004, 2010, 2016, 2022,
            2028, 2035, 2041, 2047, 2053,
            2059, 2065, 2071, 2077, 2084,
            2090, 2096, 2102, 2109, 2115,
            2121, 2128, 2134, 2140, 2147,
            2153, 2160, 2166, 2173, 2179,
            2186, 2192, 2199, 2205, 2212,
            2219, 2225, 2232, 2239, 2245,
            2252, 2259, 2266, 2272, 2279,
            2286, 2293, 2300, 2307, 2314,
            2321, 2328, 2335, 2342, 2349,
            2356, 2363, 2370, 2377, 2384,
            2391, 2398, 2406, 2413, 2420,
            2427, 2435, 2442, 2449, 2457,
            2464, 2472, 2479, 2487, 2494,
            2502, 2509, 2517, 2524, 2532,
            2539, 2547, 2555, 2563, 2570,
            2578, 2586, 2594, 2601, 2609,
            2617, 2625, 2633, 2641, 2649,
            2657, 2665, 2673, 2681, 2689,
            2697, 2705, 2714, 2722, 2730,
            2738, 2747, 2755, 2763, 2772,
            2780, 2788, 2797, 2805, 2814,
            2822, 2831, 2839, 2848, 2857,
            2865, 2874, 2883, 2891, 2900,
            2909, 2918, 2927, 2935, 2944,
            2953, 2962, 2971, 2980, 2989,
            2998, 3007, 3016, 3026, 3035,
            3044, 3053, 3062, 3072, 3081,
            3090, 3100, 3109, 3119, 3128,
            3138, 3147, 3157, 3166, 3176,
            3186, 3195, 3205, 3215, 3224,
            3234, 3244, 3254, 3264, 3274,
            3284, 3294, 3304, 3314, 3324,
            3334, 3344, 3354, 3364, 3375,
            3385, 3395, 3405, 3416, 3426,
            3437, 3447, 3458, 3468, 3479,
            3489, 3500, 3510, 3521, 3532,
            3543, 3553, 3564, 3575, 3586,
            3597, 3608, 3619, 3630, 3641,
            3652, 3663, 3674, 3685, 3697,
            3708, 3719, 3730, 3742, 3753,
            3765, 3776, 3788, 3799, 3811,
            3822, 3834, 3846, 3857, 3869,
            3881, 3893, 3905, 3917, 3929,
            3941, 3953, 3965, 3977, 3989,
            4001, 4013, 4025, 4038, 4050,
            4062, 4075, 4087, 4100, 4112,
            4125, 4137, 4150, 4163, 4175,
            4188, 4201, 4214, 4226, 4239,
            4252, 4265, 4278, 4291, 4304,
            4318, 4331, 4344, 4357, 4371,
            4384, 4397, 4411, 4424, 4438,
            4451, 4465, 4479, 4492, 4506,
            4520, 4533, 4547, 4561, 4575,
            4589, 4603, 4617, 4631, 4645,
            4660, 4674, 4688, 4703, 4717,
            4731, 4746, 4760, 4775, 4789,
            4804, 4819, 4833, 4848, 4863,
            4878, 4893, 4908, 4923, 4938,
            4953, 4968, 4983, 4999, 5014,
            5029, 5045, 5060, 5075, 5091,
            5107, 5122, 5138, 5154, 5169,
            5185, 5201, 5217, 5233, 5249,
            5265, 5281, 5297, 5313, 5330,
            5346, 5362, 5379, 5395, 5412,
            5428, 5445, 5462, 5478, 5495,
            5512, 5529, 5546, 5563, 5580,
            5597, 5614, 5631, 5648, 5666,
            5683, 5700, 5718, 5735, 5753,
            5770, 5788, 5806, 5824, 5841,
            5859, 5877, 5895, 5913, 5931,
            5950, 5968, 5986, 6004, 6023,
            6041, 6060, 6078, 6097, 6116,
            6134, 6153, 6172, 6191, 6210,
            6229, 6248, 6267, 6286, 6305,
            6325, 6344, 6364, 6383, 6403,
            6422, 6442, 6462, 6481, 6501,
            6521, 6541, 6561, 6581, 6602,
            6622, 6642, 6662, 6683, 6703,
            6724, 6744, 6765, 6786, 6807,
            6828, 6848, 6869, 6891, 6912,
            6933, 6954, 6975, 6997, 7018,
            7040, 7061, 7083, 7105, 7126,
            7148, 7170, 7192, 7214, 7236,
            7259, 7281, 7303, 7325, 7348,
            7370, 7393, 7416, 7438, 7461,
            7484, 7507, 7530, 7553, 7576,
            7600, 7623, 7646, 7670, 7693,
            7717, 7741, 7764, 7788, 7812,
            7836, 7860, 7884, 7908, 7932,
            7957, 7981, 8006, 8030, 8055,
            8080, 8104, 8129, 8154, 8179,
            8204, 8229, 8255, 8280, 8305,
            8331, 8356, 8382, 8408, 8434,
            8459, 8485, 8511, 8537, 8564,
            8590, 8616, 8643, 8669, 8696,
            8722, 8749, 8776, 8803, 8830,
            8857, 8884, 8912, 8939, 8966,
            8994, 9021, 9049, 9077, 9105,
            9133, 9161, 9189, 9217, 9245,
            9274, 9302, 9331, 9359, 9388,
            9417, 9446, 9475, 9504, 9533,
            9562, 9591, 9621, 9650, 9680,
            9710, 9740, 9769, 9799, 9830,
            9860, 9890, 9920, 9951, 9981,
            10012, 10043, 10073, 10104, 10135,
            10166, 10198, 10229, 10260, 10292,
            10323, 10355, 10387, 10419, 10451,
            10483, 10515, 10547, 10580, 10612,
            10645, 10677, 10710, 10743, 10776,
            10809, 10842, 10876, 10909, 10942,
            10976, 11010, 11044, 11077, 11111,
            11146, 11180, 11214, 11248, 11283,
            11318, 11352, 11387, 11422, 11457,
            11492, 11528, 11563, 11599, 11634,
            11670, 11706, 11742, 11778, 11814,
            11850, 11887, 11923, 11960, 11996,
            12033, 12070, 12107, 12144, 12182,
            12219, 12257, 12294, 12332, 12370,
            12408, 12446, 12484, 12522, 12561,
            12599, 12638, 12677, 12716, 12755,
            12794, 12833, 12873, 12912, 12952,
            12992, 13032, 13072, 13112, 13152,
            13192, 13233, 13274, 13314, 13355,
            13396, 13437, 13479, 13520, 13561,
            13603, 13645, 13687, 13729, 13771,
            13813, 13856, 13898, 13941, 13984,
            14027, 14070, 14113, 14156, 14200,
            14243, 14287, 14331, 14375, 14419,
            14463, 14508, 14552, 14597, 14642,
            14687, 14732, 14777, 14823, 14868,
            14914, 14960, 15005, 15052, 15098,
            15144, 15191, 15237, 15284, 15331,
            15378, 15425, 15473, 15520, 15568,
            15616, 15664, 15712, 15760, 15808,
            15857, 15906, 15955, 16004, 16053,
            16102, 16151, 16201, 16251, 16301,
            16351, 16401, 16451, 16502, 16553,
            16603, 16654, 16706, 16757, 16808,
            16860, 16912, 16964, 17016, 17068,
            17121, 17173, 17226, 17279, 17332,
            17385, 17438, 17492, 17546, 17600,
            17654, 17708, 17762, 17817, 17872,
            17926, 17982, 18037, 18092, 18148,
            18203, 18259, 18315, 18372, 18428,
            18485, 18542, 18598, 18656, 18713,
            18770, 18828, 18886, 18944, 19002,
            19060, 19119, 19178, 19237, 19296,
            19355, 19414, 19474, 19534, 19594,
            19654, 19714, 19775, 19836, 19897,
            19958, 20019, 20081, 20142, 20204,
            20266, 20328, 20391, 20454, 20516,
            20579, 20643, 20706, 20770, 20833,
            20897, 20962, 21026, 21091, 21155,
            21220, 21286, 21351, 21417, 21482,
            21548, 21615, 21681, 21748, 21814,
            21881, 21949, 22016, 22084, 22151,
            22220, 22288, 22356, 22425, 22494,
            22563, 22632, 22702, 22771, 22841,
            22912, 22982, 23053, 23123, 23194,
            23266, 23337, 23409, 23481, 23553,
            23625, 23698, 23771, 23844, 23917,
            23990, 24064, 24138, 24212, 24287,
            24361, 24436, 24511, 24586, 24662,
            24738, 24814, 24890, 24966, 25043,
            25120, 25197, 25275, 25352, 25430,
            25508, 25587, 25665, 25744, 25823,
            25902, 25982, 26062, 26142, 26222,
            26303, 26384, 26465, 26546, 26627,
            26709, 26791, 26874, 26956, 27039,
            27122, 27205, 27289, 27373, 27457,
            27541, 27626, 27711, 27796, 27881,
            27967, 28053, 28139, 28226, 28312,
            28399, 28486, 28574, 28662, 28750,
            28838, 28927, 29016, 29105, 29194,
            29284, 29374, 29464, 29555, 29645,
            29736, 29828, 29919, 30011, 30104,
            30196, 30289, 30382, 30475, 30569,
            30663, 30757, 30851, 30946, 31041,
            31137, 31232, 31328, 31425, 31521,
            31618, 31715, 31813, 31910, 32008,
            32107, 32205, 32304, 32403, 32503,
            32603, 32703, 32804, 32904, 33005,
            33107, 33209, 33311, 33413, 33516,
            33619, 33722, 33825, 33929, 34034,
            34138, 34243, 34348, 34454, 34560,
            34666, 34772, 34879, 34986, 35094,
            35202, 35310, 35418, 35527, 35636,
            35746, 35856, 35966, 36076, 36187,
            36298, 36410, 36522, 36634, 36746,
            36859, 36973, 37086, 37200, 37314,
            37429, 37544, 37659, 37775, 37891,
            38008, 38124, 38241, 38359, 38477,
            38595, 38714, 38833, 38952, 39072,
            39192, 39312, 39433, 39554, 39675,
            39797, 39920, 40042, 40165, 40289,
            40413, 40537, 40661, 40786, 40911,
            41037, 41163, 41290, 41417, 41544,
            41671, 41800, 41928, 42057, 42186,
            42316, 42446, 42576, 42707, 42838,
            42970, 43102, 43234, 43367, 43500,
            43634, 43768, 43902, 44037, 44173,
            44308, 44444, 44581, 44718, 44855,
            44993, 45131, 45270, 45409, 45549,
            45689, 45829, 45970, 46111, 46253,
            46395, 46537, 46680, 46824, 46968,
            47112, 47257, 47402, 47548, 47694,
            47840, 47987, 48135, 48283, 48431,
            48580, 48729, 48879, 49029, 49180,
            49331, 49482, 49634, 49787, 49940,
            50093, 50247, 50401, 50556, 50712,
            50867, 51024, 51181, 51338, 51495,
            51654, 51812, 51972, 52131, 52291,
            52452, 52613, 52775, 52937, 53100,
            53263, 53427, 53591, 53755, 53921,
            54086, 54252, 54419, 54586, 54754,
            54922, 55091, 55260, 55430, 55600,
            55771, 55943, 56114, 56287, 56460,
            56633, 56807, 56982, 57157, 57333,
            57509, 57685, 57863, 58040, 58219,
            58398, 58577, 58757, 58938, 59119,
            59300, 59483, 59665, 59849, 60033,
            60217, 60402, 60588, 60774, 60960,
            61148, 61336, 61524, 61713, 61903,
            62093, 62284, 62475, 62667, 62860,
            63053, 63247, 63441, 63636, 63831,
            64027, 64224, 64422, 64619, 64818,
            65017, 65217, 65417, 65618, 65820,
            66022, 66225, 66429, 66633, 66837,
            67043, 67249, 67455, 67663, 67870,
            68079, 68288, 68498, 68708, 68920,
            69131, 69344, 69557, 69771, 69985,
            70200, 70416, 70632, 70849, 71067,
            71285, 71504, 71724, 71944, 72165,
            72387, 72609, 72833, 73056, 73281,
            73506, 73732, 73958, 74186, 74414,
            74642, 74872, 75102, 75332, 75564,
            75796, 76029, 76262, 76497, 76732,
            76968, 77204, 77441, 77679, 77918,
            78157, 78398, 78638, 78880, 79122,
            79366, 79609, 79854, 80099, 80345,
            80592, 80840, 81088, 81338, 81587,
            81838, 82090, 82342, 82595, 82849,
            83103, 83358, 83615, 83872, 84129,
            84388, 84647, 84907, 85168, 85430,
            85692, 85955, 86220, 86485, 86750,
            87017, 87284, 87552, 87821, 88091,
            88362, 88633, 88906, 89179, 89453,
            89728, 90003, 90280, 90557, 90836,
            91115, 91395, 91676, 91957, 92240,
            92523, 92807, 93093, 93379, 93666,
            93953, 94242, 94532, 94822, 95113,
            95406, 95699, 95993, 96288, 96584,
            96881, 97178, 97477, 97776, 98077,
            98378, 98680, 98984, 99288, 99593,
            99899, 100206, 100514, 100822, 101132,
            101443, 101755, 102067, 102381, 102696,
            103011, 103328, 103645, 103964, 104283,
            104603, 104925, 105247, 105571, 105895,
            106220, 106547, 106874, 107203, 107532,
            107862, 108194, 108526, 108860, 109194,
            109530, 109866, 110204, 110542, 110882,
            111223, 111565, 111907, 112251, 112596,
            112942, 113289, 113637, 113986, 114337,
            114688, 115040, 115394, 115748, 116104,
            116461, 116819, 117178, 117538, 117899,
            118261, 118624, 118989, 119354, 119721,
            120089, 120458, 120828, 121199, 121572,
            121945, 122320, 122696, 123073, 123451,
            123830, 124211, 124593, 124975, 125359,
            125745, 126131, 126518, 126907, 127297,
            127688, 128081, 128474, 128869, 129265,
            129662, 130061, 130260
         ) ),
        max_error = cms.double(0.6152529479288091),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut2 = cms.PSet(
        lut = cms.vint32( (
            256, 256, 257, 258, 259,
            260, 260, 261, 262, 263,
            264, 264, 265, 266, 267,
            268, 268, 269, 270, 271,
            272, 273, 273, 274, 275,
            276, 277, 278, 279, 279,
            280, 281, 282, 283, 284,
            285, 285, 286, 287, 288,
            289, 290, 291, 292, 293,
            293, 294, 295, 296, 297,
            298, 299, 300, 301, 302,
            303, 303, 304, 305, 306,
            307, 308, 309, 310, 311,
            312, 313, 314, 315, 316,
            317, 318, 319, 320, 321,
            322, 323, 324, 325, 326,
            327, 328, 329, 330, 331,
            332, 333, 334, 335, 336,
            337, 338, 339, 340, 341,
            342, 343, 344, 345, 346,
            347, 348, 349, 351, 352,
            353, 354, 355, 356, 357,
            358, 359, 360, 361, 363,
            364, 365, 366, 367, 368,
            369, 370, 372, 373, 374,
            375, 376, 377, 379, 380,
            381, 382, 383, 384, 386,
            387, 388, 389, 390, 392,
            393, 394, 395, 396, 398,
            399, 400, 401, 402, 404,
            405, 406, 407, 409, 410,
            411, 412, 414, 415, 416,
            418, 419, 420, 421, 423,
            424, 425, 427, 428, 429,
            431, 432, 433, 435, 436,
            437, 439, 440, 441, 443,
            444, 445, 447, 448, 449,
            451, 452, 454, 455, 456,
            458, 459, 461, 462, 463,
            465, 466, 468, 469, 471,
            472, 474, 475, 476, 478,
            479, 481, 482, 484, 485,
            487, 488, 490, 491, 493,
            494, 496, 497, 499, 500,
            502, 503, 505, 507, 508,
            510, 511, 513, 514, 516,
            518, 519, 521, 522, 524,
            526, 527, 529, 530, 532,
            534, 535, 537, 539, 540,
            542, 544, 545, 547, 549,
            550, 552, 554, 555, 557,
            559, 561, 562, 564, 566,
            567, 569, 571, 573, 575,
            576, 578, 580, 582, 583,
            585, 587, 589, 591, 592,
            594, 596, 598, 600, 602,
            603, 605, 607, 609, 611,
            613, 615, 617, 618, 620,
            622, 624, 626, 628, 630,
            632, 634, 636, 638, 640,
            642, 644, 646, 648, 650,
            652, 654, 656, 658, 660,
            662, 664, 666, 668, 670,
            672, 674, 676, 678, 680,
            682, 684, 686, 688, 691,
            693, 695, 697, 699, 701,
            703, 706, 708, 710, 712,
            714, 717, 719, 721, 723,
            725, 728, 730, 732, 734,
            737, 739, 741, 743, 746,
            748, 750, 753, 755, 757,
            760, 762, 764, 767, 769,
            771, 774, 776, 778, 781,
            783, 786, 788, 790, 793,
            795, 798, 800, 803, 805,
            808, 810, 813, 815, 818,
            820, 823, 825, 828, 830,
            833, 835, 838, 840, 843,
            846, 848, 851, 853, 856,
            859, 861, 864, 867, 869,
            872, 875, 877, 880, 883,
            885, 888, 891, 894, 896,
            899, 902, 905, 907, 910,
            913, 916, 919, 921, 924,
            927, 930, 933, 936, 939,
            941, 944, 947, 950, 953,
            956, 959, 962, 965, 968,
            971, 974, 977, 980, 983,
            986, 989, 992, 995, 998,
            1001, 1004, 1007, 1010, 1013,
            1017, 1020, 1023, 1026, 1029,
            1032, 1035, 1039, 1042, 1045,
            1048, 1051, 1055, 1058, 1061,
            1064, 1068, 1071, 1074, 1078,
            1081, 1084, 1088, 1091, 1094,
            1098, 1101, 1104, 1108, 1111,
            1115, 1118, 1121, 1125, 1128,
            1132, 1135, 1139, 1142, 1146,
            1149, 1153, 1156, 1160, 1163,
            1167, 1171, 1174, 1178, 1181,
            1185, 1189, 1192, 1196, 1200,
            1203, 1207, 1211, 1214, 1218,
            1222, 1226, 1229, 1233, 1237,
            1241, 1245, 1249, 1252, 1256,
            1260, 1264, 1268, 1272, 1276,
            1280, 1283, 1287, 1291, 1295,
            1299, 1303, 1307, 1311, 1315,
            1319, 1323, 1328, 1332, 1336,
            1340, 1344, 1348, 1352, 1356,
            1360, 1365, 1369, 1373, 1377,
            1382, 1386, 1390, 1394, 1399,
            1403, 1407, 1412, 1416, 1420,
            1425, 1429, 1433, 1438, 1442,
            1447, 1451, 1455, 1460, 1464,
            1469, 1473, 1478, 1483, 1487,
            1492, 1496, 1501, 1505, 1510,
            1515, 1519, 1524, 1529, 1533,
            1538, 1543, 1548, 1552, 1557,
            1562, 1567, 1572, 1576, 1581,
            1586, 1591, 1596, 1601, 1606,
            1611, 1616, 1620, 1625, 1630,
            1635, 1640, 1646, 1651, 1656,
            1661, 1666, 1671, 1676, 1681,
            1686, 1692, 1697, 1702, 1707,
            1712, 1718, 1723, 1728, 1734,
            1739, 1744, 1750, 1755, 1760,
            1766, 1771, 1777, 1782, 1788,
            1793, 1799, 1804, 1810, 1815,
            1821, 1826, 1832, 1838, 1843,
            1849, 1855, 1860, 1866, 1872,
            1878, 1883, 1889, 1895, 1901,
            1907, 1912, 1918, 1924, 1930,
            1936, 1942, 1948, 1954, 1960,
            1966, 1972, 1978, 1984, 1990,
            1996, 2003, 2009, 2015, 2021,
            2027, 2033, 2040, 2046, 2052,
            2059, 2065, 2071, 2078, 2084,
            2090, 2097, 2103, 2110, 2116,
            2123, 2129, 2136, 2142, 2149,
            2156, 2162, 2169, 2175, 2182,
            2189, 2196, 2202, 2209, 2216,
            2223, 2230, 2236, 2243, 2250,
            2257, 2264, 2271, 2278, 2285,
            2292, 2299, 2306, 2313, 2320,
            2327, 2335, 2342, 2349, 2356,
            2363, 2371, 2378, 2385, 2393,
            2400, 2407, 2415, 2422, 2430,
            2437, 2444, 2452, 2460, 2467,
            2475, 2482, 2490, 2498, 2505,
            2513, 2521, 2528, 2536, 2544,
            2552, 2560, 2567, 2575, 2583,
            2591, 2599, 2607, 2615, 2623,
            2631, 2639, 2647, 2656, 2664,
            2672, 2680, 2688, 2697, 2705,
            2713, 2722, 2730, 2738, 2747,
            2755, 2764, 2772, 2781, 2789,
            2798, 2806, 2815, 2824, 2832,
            2841, 2850, 2858, 2867, 2876,
            2885, 2894, 2903, 2912, 2921,
            2930, 2939, 2948, 2957, 2966,
            2975, 2984, 2993, 3002, 3012,
            3021, 3030, 3039, 3049, 3058,
            3067, 3077, 3086, 3096, 3105,
            3115, 3124, 3134, 3144, 3153,
            3163, 3173, 3183, 3192, 3202,
            3212, 3222, 3232, 3242, 3252,
            3262, 3272, 3282, 3292, 3302,
            3312, 3322, 3332, 3343, 3353,
            3363, 3374, 3384, 3394, 3405,
            3415, 3426, 3436, 3447, 3457,
            3468, 3479, 3489, 3500, 3511,
            3522, 3532, 3543, 3554, 3565,
            3576, 3587, 3598, 3609, 3620,
            3631, 3642, 3654, 3665, 3676,
            3687, 3699, 3710, 3722, 3733,
            3744, 3756, 3767, 3779, 3791,
            3802, 3814, 3826, 3837, 3849,
            3861, 3873, 3885, 3897, 3909,
            3921, 3933, 3945, 3957, 3969,
            3981, 3994, 4006, 4018, 4031,
            4043, 4055, 4068, 4080, 4093,
            4105, 4118, 4131, 4143, 4156,
            4169, 4182, 4195, 4207, 4220,
            4233, 4246, 4259, 4272, 4286,
            4299, 4312, 4325, 4339, 4352,
            4365, 4379, 4392, 4406, 4419,
            4433, 4446, 4460, 4474, 4487,
            4501, 4515, 4529, 4543, 4557,
            4571, 4585, 4599, 4613, 4627,
            4641, 4656, 4670, 4684, 4699,
            4713, 4728, 4742, 4757, 4771,
            4786, 4801, 4816, 4830, 4845,
            4860, 4875, 4890, 4905, 4920,
            4935, 4950, 4966, 4981, 4996,
            5011, 5027, 5042, 5058, 5073,
            5089, 5105, 5120, 5136, 5152,
            5168, 5183, 5199, 5215, 5231,
            5247, 5264, 5280, 5296, 5312,
            5329, 5345, 5361, 5378, 5394,
            5411, 5428, 5444, 5461, 5478,
            5495, 5512, 5528, 5545, 5562,
            5580, 5597, 5614, 5631, 5648,
            5666, 5683, 5701, 5718, 5736,
            5753, 5771, 5789, 5807, 5824,
            5842, 5860, 5878, 5896, 5914,
            5933, 5951, 5969, 5987, 6006,
            6024, 6043, 6061, 6080, 6099,
            6117, 6136, 6155, 6174, 6193,
            6212, 6231, 6250, 6269, 6289,
            6308, 6327, 6347, 6366, 6386,
            6406, 6425, 6445, 6465, 6485,
            6505, 6525, 6545, 6565, 6585,
            6605, 6625, 6646, 6666, 6687,
            6707, 6728, 6749, 6769, 6790,
            6811, 6832, 6853, 6874, 6895,
            6916, 6937, 6959, 6980, 7002,
            7023, 7045, 7066, 7088, 7110,
            7132, 7154, 7176, 7198, 7220,
            7242, 7264, 7286, 7309, 7331,
            7354, 7376, 7399, 7422, 7445,
            7468, 7490, 7513, 7537, 7560,
            7583, 7606, 7630, 7653, 7677,
            7700, 7724, 7748, 7771, 7795,
            7819, 7843, 7867, 7892, 7916,
            7940, 7964, 7989, 8014, 8038,
            8063, 8088, 8112, 8137, 8162,
            8187, 8213, 8238, 8263, 8289,
            8314, 8340, 8365, 8391, 8417,
            8443, 8468, 8495, 8521, 8547,
            8573, 8599, 8626, 8652, 8679,
            8706, 8732, 8759, 8786, 8813,
            8840, 8867, 8895, 8922, 8949,
            8977, 9004, 9032, 9060, 9088,
            9116, 9144, 9172, 9200, 9228,
            9256, 9285, 9313, 9342, 9371,
            9400, 9428, 9457, 9486, 9516,
            9545, 9574, 9604, 9633, 9663,
            9692, 9722, 9752, 9782, 9812,
            9842, 9872, 9903, 9933, 9964,
            9994, 10025, 10056, 10087, 10118,
            10149, 10180, 10211, 10243, 10274,
            10306, 10337, 10369, 10401, 10433,
            10465, 10497, 10529, 10562, 10594,
            10627, 10659, 10692, 10725, 10758,
            10791, 10824, 10858, 10891, 10924,
            10958, 10992, 11025, 11059, 11093,
            11127, 11161, 11196, 11230, 11265,
            11299, 11334, 11369, 11404, 11439,
            11474, 11509, 11545, 11580, 11616,
            11651, 11687, 11723, 11759, 11795,
            11831, 11868, 11904, 11941, 11978,
            12014, 12051, 12088, 12125, 12163,
            12200, 12238, 12275, 12313, 12351,
            12389, 12427, 12465, 12503, 12542,
            12580, 12619, 12658, 12696, 12735,
            12775, 12814, 12853, 12893, 12932,
            12972, 13012, 13052, 13092, 13132,
            13173, 13213, 13254, 13294, 13335,
            13376, 13417, 13459, 13500, 13541,
            13583, 13625, 13667, 13709, 13751,
            13793, 13835, 13878, 13920, 13963,
            14006, 14049, 14092, 14136, 14179,
            14223, 14266, 14310, 14354, 14398,
            14443, 14487, 14531, 14576, 14621,
            14666, 14711, 14756, 14801, 14847,
            14892, 14938, 14984, 15030, 15076,
            15123, 15169, 15216, 15263, 15309,
            15356, 15404, 15451, 15498, 15546,
            15594, 15642, 15690, 15738, 15786,
            15835, 15884, 15932, 15981, 16030,
            16080, 16129, 16179, 16228, 16278,
            16328, 16378, 16429, 16479, 16530,
            16581, 16632, 16683, 16734, 16785,
            16837, 16889, 16941, 16993, 17045,
            17097, 17150, 17202, 17255, 17308,
            17361, 17415, 17468, 17522, 17576,
            17630, 17684, 17738, 17793, 17848,
            17902, 17957, 18013, 18068, 18123,
            18179, 18235, 18291, 18347, 18404,
            18460, 18517, 18574, 18631, 18688,
            18746, 18803, 18861, 18919, 18977,
            19035, 19094, 19152, 19211, 19270,
            19330, 19389, 19448, 19508, 19568,
            19628, 19689, 19749, 19810, 19871,
            19932, 19993, 20054, 20116, 20178,
            20240, 20302, 20364, 20427, 20490,
            20553, 20616, 20679, 20743, 20806,
            20870, 20935, 20999, 21063, 21128,
            21193, 21258, 21323, 21389, 21455,
            21521, 21587, 21653, 21720, 21786,
            21853, 21920, 21988, 22055, 22123,
            22191, 22259, 22328, 22396, 22465,
            22534, 22603, 22673, 22742, 22812,
            22882, 22953, 23023, 23094, 23165,
            23236, 23308, 23379, 23451, 23523,
            23595, 23668, 23741, 23814, 23887,
            23960, 24034, 24108, 24182, 24256,
            24330, 24405, 24480, 24555, 24631,
            24707, 24783, 24859, 24935, 25012,
            25089, 25166, 25243, 25320, 25398,
            25476, 25555, 25633, 25712, 25791,
            25870, 25950, 26029, 26109, 26190,
            26270, 26351, 26432, 26513, 26594,
            26676, 26758, 26840, 26923, 27006,
            27088, 27172, 27255, 27339, 27423,
            27507, 27592, 27677, 27762, 27847,
            27932, 28018, 28104, 28191, 28277,
            28364, 28451, 28539, 28626, 28714,
            28803, 28891, 28980, 29069, 29158,
            29248, 29338, 29428, 29518, 29609,
            29700, 29791, 29883, 29975, 30067,
            30159, 30252, 30345, 30438, 30532,
            30625, 30719, 30814, 30909, 31003,
            31099, 31194, 31290, 31386, 31483,
            31579, 31677, 31774, 31871, 31969,
            32068, 32166, 32265, 32364, 32464,
            32563, 32663, 32764, 32864, 32965,
            33067, 33168, 33270, 33372, 33475,
            33578, 33681, 33785, 33888, 33992,
            34097, 34202, 34307, 34412, 34518,
            34624, 34730, 34837, 34944, 35051,
            35159, 35267, 35376, 35484, 35593,
            35703, 35812, 35922, 36033, 36144,
            36255, 36366, 36478, 36590, 36702,
            36815, 36928, 37042, 37155, 37270,
            37384, 37499, 37614, 37730, 37846,
            37962, 38079, 38196, 38313, 38431,
            38549, 38667, 38786, 38905, 39025,
            39145, 39265, 39386, 39507, 39628,
            39750, 39872, 39994, 40117, 40241,
            40364, 40488, 40613, 40737, 40863,
            40988, 41114, 41240, 41367, 41494,
            41622, 41750, 41878, 42007, 42136,
            42265, 42395, 42525, 42656, 42787,
            42919, 43050, 43183, 43315, 43448,
            43582, 43716, 43850, 43985, 44120,
            44256, 44392, 44528, 44665, 44802,
            44940, 45078, 45216, 45355, 45495,
            45634, 45775, 45915, 46056, 46198,
            46340, 46482, 46625, 46768, 46912,
            47056, 47201, 47346, 47491, 47637,
            47784, 47930, 48078, 48225, 48374,
            48522, 48671, 48821, 48971, 49121,
            49272, 49424, 49576, 49728, 49881,
            50034, 50188, 50342, 50497, 50652,
            50807, 50963, 51120, 51277, 51435,
            51593, 51751, 51910, 52070, 52230,
            52390, 52551, 52713, 52875, 53037,
            53200, 53364, 53528, 53692, 53857,
            54022, 54188, 54355, 54522, 54690,
            54858, 55026, 55195, 55365, 55535,
            55706, 55877, 56048, 56221, 56393,
            56567, 56740, 56915, 57090, 57265,
            57441, 57618, 57795, 57972, 58150,
            58329, 58508, 58688, 58868, 59049,
            59231, 59413, 59595, 59778, 59962,
            60146, 60331, 60516, 60702, 60889,
            61076, 61264, 61452, 61641, 61830,
            62020, 62211, 62402, 62594, 62786,
            62979, 63172, 63366, 63561, 63756,
            63952, 64149, 64346, 64544, 64742,
            64941, 65140, 65341, 65541, 65743,
            65945, 66147, 66351, 66555, 66759,
            66964, 67170, 67376, 67583, 67791,
            67999, 68208, 68418, 68628, 68839,
            69050, 69263, 69475, 69689, 69903,
            70118, 70333, 70549, 70766, 70984,
            71202, 71421, 71640, 71860, 72081,
            72302, 72525, 72747, 72971, 73195,
            73420, 73646, 73872, 74099, 74327,
            74555, 74784, 75014, 75244, 75476,
            75707, 75940, 76173, 76407, 76642,
            76878, 77114, 77351, 77589, 77827,
            78066, 78306, 78547, 78788, 79030,
            79273, 79516, 79761, 80006, 80252,
            80498, 80746, 80994, 81243, 81492,
            81743, 81994, 82246, 82498, 82752,
            83006, 83261, 83517, 83774, 84031,
            84289, 84548, 84808, 85069, 85330,
            85592, 85855, 86119, 86384, 86649,
            86915, 87182, 87450, 87719, 87989,
            88259, 88530, 88802, 89075, 89349,
            89623, 89899, 90175, 90452, 90730,
            91009, 91288, 91569, 91850, 92132,
            92415, 92699, 92984, 93270, 93557,
            93844, 94132, 94422, 94712, 95003,
            95295, 95587, 95881, 96176, 96471,
            96768, 97065, 97363, 97662, 97963,
            98264, 98565, 98868, 99172, 99477,
            99783, 100089, 100397, 100705, 101015,
            101325, 101636, 101949, 102262, 102576,
            102891, 103207, 103525, 103843, 104162,
            104482, 104803, 105125, 105448, 105772,
            106097, 106423, 106750, 107078, 107407,
            107737, 108068, 108400, 108733, 109067,
            109402, 109738, 110076, 110414, 110753,
            111093, 111435, 111777, 112121, 112465,
            112811, 113157, 113505, 113854, 114204,
            114555, 114907, 115260, 115614, 115969,
            116325, 116683, 117041, 117401, 117762,
            118124, 118486, 118851, 119216, 119582,
            119949, 120318, 120688, 121059, 121431,
            121804, 122178, 122553, 122930, 123308,
            123687, 124067, 124448, 124830, 125214,
            125598, 125984, 126371, 126760, 127149,
            127540, 127932, 128325, 128719, 129115,
            129511, 129909, 130309, 130709, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071
         ) ),
        max_error = cms.double(5748.616225984908),
        output_scale_factor = cms.double(0.953125),
        unused_lsbs = cms.uint32(2)
    ),
    inv_mass_checks = cms.untracked.bool(False),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    sanity_checks = cms.untracked.bool(False),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    )
)


process.TkMuonTkEle723 = cms.EDFilter("L1GTDoubleObjectCond",
    collection1 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        minQualityScore = cms.uint32(0),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 0.83, 1.24),
        regionsMinPt = cms.vdouble(7, 7, 7),
        tag = cms.InputTag("l1tGTProducer","GMTTkMuons")
    ),
    collection2 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 1.479),
        regionsMinPt = cms.vdouble(19, 18),
        regionsQualityFlags = cms.vuint32(2, 0),
        tag = cms.InputTag("l1tGTProducer","CL2Electrons")
    ),
    cos_phi_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            487, 487, 487, 487, 487,
            487, 487, 487, 487, 487,
            487, 486, 486, 486, 486,
            486, 486, 486, 485, 485,
            485, 485, 485, 485, 484,
            484, 484, 484, 484, 483,
            483, 483, 483, 483, 482,
            482, 482, 482, 481, 481,
            481, 481, 480, 480, 480,
            480, 479, 479, 479, 478,
            478, 478, 478, 477, 477,
            477, 476, 476, 476, 475,
            475, 475, 474, 474, 474,
            473, 473, 472, 472, 472,
            471, 471, 471, 470, 470,
            469, 469, 468, 468, 468,
            467, 467, 466, 466, 465,
            465, 465, 464, 464, 463,
            463, 462, 462, 461, 461,
            460, 460, 459, 459, 458,
            458, 457, 457, 456, 456,
            455, 454, 454, 453, 453,
            452, 452, 451, 451, 450,
            449, 449, 448, 448, 447,
            446, 446, 445, 445, 444,
            443, 443, 442, 441, 441,
            440, 440, 439, 438, 438,
            437, 436, 436, 435, 434,
            434, 433, 432, 431, 431,
            430, 429, 429, 428, 427,
            426, 426, 425, 424, 423,
            423, 422, 421, 420, 420,
            419, 418, 417, 417, 416,
            415, 414, 413, 413, 412,
            411, 410, 409, 409, 408,
            407, 406, 405, 405, 404,
            403, 402, 401, 400, 399,
            399, 398, 397, 396, 395,
            394, 393, 392, 392, 391,
            390, 389, 388, 387, 386,
            385, 384, 383, 382, 381,
            381, 380, 379, 378, 377,
            376, 375, 374, 373, 372,
            371, 370, 369, 368, 367,
            366, 365, 364, 363, 362,
            361, 360, 359, 358, 357,
            356, 355, 354, 353, 352,
            351, 350, 349, 348, 347,
            346, 345, 343, 342, 341,
            340, 339, 338, 337, 336,
            335, 334, 333, 332, 330,
            329, 328, 327, 326, 325,
            324, 323, 322, 320, 319,
            318, 317, 316, 315, 314,
            312, 311, 310, 309, 308,
            307, 306, 304, 303, 302,
            301, 300, 298, 297, 296,
            295, 294, 293, 291, 290,
            289, 288, 286, 285, 284,
            283, 282, 280, 279, 278,
            277, 275, 274, 273, 272,
            270, 269, 268, 267, 265,
            264, 263, 262, 260, 259,
            258, 257, 255, 254, 253,
            252, 250, 249, 248, 246,
            245, 244, 242, 241, 240,
            239, 237, 236, 235, 233,
            232, 231, 229, 228, 227,
            225, 224, 223, 221, 220,
            219, 217, 216, 215, 213,
            212, 211, 209, 208, 207,
            205, 204, 203, 201, 200,
            198, 197, 196, 194, 193,
            192, 190, 189, 187, 186,
            185, 183, 182, 181, 179,
            178, 176, 175, 174, 172,
            171, 169, 168, 167, 165,
            164, 162, 161, 159, 158,
            157, 155, 154, 152, 151,
            150, 148, 147, 145, 144,
            142, 141, 140, 138, 137,
            135, 134, 132, 131, 129,
            128, 127, 125, 124, 122,
            121, 119, 118, 116, 115,
            113, 112, 111, 109, 108,
            106, 105, 103, 102, 100,
            99, 97, 96, 94, 93,
            92, 90, 89, 87, 86,
            84, 83, 81, 80, 78,
            77, 75, 74, 72, 71,
            69, 68, 66, 65, 63,
            62, 60, 59, 58, 56,
            55, 53, 52, 50, 49,
            47, 46, 44, 43, 41,
            40, 38, 37, 35, 34,
            32, 31, 29, 28, 26,
            25, 23, 22, 20, 19,
            17, 16, 14, 13, 11,
            10, 8, 7, 5, 4,
            2, 1, -1, -2, -4,
            -5, -7, -8, -10, -11,
            -13, -14, -16, -17, -19,
            -20, -22, -23, -25, -26,
            -28, -29, -31, -32, -34,
            -35, -37, -38, -40, -41,
            -43, -44, -46, -47, -49,
            -50, -52, -53, -55, -56,
            -58, -59, -60, -62, -63,
            -65, -66, -68, -69, -71,
            -72, -74, -75, -77, -78,
            -80, -81, -83, -84, -86,
            -87, -89, -90, -92, -93,
            -94, -96, -97, -99, -100,
            -102, -103, -105, -106, -108,
            -109, -111, -112, -113, -115,
            -116, -118, -119, -121, -122,
            -124, -125, -127, -128, -129,
            -131, -132, -134, -135, -137,
            -138, -140, -141, -142, -144,
            -145, -147, -148, -150, -151,
            -152, -154, -155, -157, -158,
            -159, -161, -162, -164, -165,
            -167, -168, -169, -171, -172,
            -174, -175, -176, -178, -179,
            -181, -182, -183, -185, -186,
            -187, -189, -190, -192, -193,
            -194, -196, -197, -198, -200,
            -201, -203, -204, -205, -207,
            -208, -209, -211, -212, -213,
            -215, -216, -217, -219, -220,
            -221, -223, -224, -225, -227,
            -228, -229, -231, -232, -233,
            -235, -236, -237, -239, -240,
            -241, -242, -244, -245, -246,
            -248, -249, -250, -252, -253,
            -254, -255, -257, -258, -259,
            -260, -262, -263, -264, -265,
            -267, -268, -269, -270, -272,
            -273, -274, -275, -277, -278,
            -279, -280, -282, -283, -284,
            -285, -286, -288, -289, -290,
            -291, -293, -294, -295, -296,
            -297, -298, -300, -301, -302,
            -303, -304, -306, -307, -308,
            -309, -310, -311, -312, -314,
            -315, -316, -317, -318, -319,
            -320, -322, -323, -324, -325,
            -326, -327, -328, -329, -330,
            -332, -333, -334, -335, -336,
            -337, -338, -339, -340, -341,
            -342, -343, -345, -346, -347,
            -348, -349, -350, -351, -352,
            -353, -354, -355, -356, -357,
            -358, -359, -360, -361, -362,
            -363, -364, -365, -366, -367,
            -368, -369, -370, -371, -372,
            -373, -374, -375, -376, -377,
            -378, -379, -380, -381, -381,
            -382, -383, -384, -385, -386,
            -387, -388, -389, -390, -391,
            -392, -392, -393, -394, -395,
            -396, -397, -398, -399, -399,
            -400, -401, -402, -403, -404,
            -405, -405, -406, -407, -408,
            -409, -409, -410, -411, -412,
            -413, -413, -414, -415, -416,
            -417, -417, -418, -419, -420,
            -420, -421, -422, -423, -423,
            -424, -425, -426, -426, -427,
            -428, -429, -429, -430, -431,
            -431, -432, -433, -434, -434,
            -435, -436, -436, -437, -438,
            -438, -439, -440, -440, -441,
            -441, -442, -443, -443, -444,
            -445, -445, -446, -446, -447,
            -448, -448, -449, -449, -450,
            -451, -451, -452, -452, -453,
            -453, -454, -454, -455, -456,
            -456, -457, -457, -458, -458,
            -459, -459, -460, -460, -461,
            -461, -462, -462, -463, -463,
            -464, -464, -465, -465, -465,
            -466, -466, -467, -467, -468,
            -468, -468, -469, -469, -470,
            -470, -471, -471, -471, -472,
            -472, -472, -473, -473, -474,
            -474, -474, -475, -475, -475,
            -476, -476, -476, -477, -477,
            -477, -478, -478, -478, -478,
            -479, -479, -479, -480, -480,
            -480, -480, -481, -481, -481,
            -481, -482, -482, -482, -482,
            -483, -483, -483, -483, -483,
            -484, -484, -484, -484, -484,
            -485, -485, -485, -485, -485,
            -485, -486, -486, -486, -486,
            -486, -486, -486, -487, -487,
            -487, -487, -487, -487, -487,
            -487, -487, -487, -487, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488
         ) ),
        max_error = cms.double(0.0025338281044886835),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            489, 489, 489, 489, 489,
            489, 489, 489, 489, 489,
            489, 490, 490, 490, 490,
            490, 490, 490, 491, 491,
            491, 491, 491, 491, 492,
            492, 492, 492, 492, 493,
            493, 493, 493, 493, 494,
            494, 494, 494, 495, 495,
            495, 495, 496, 496, 496,
            496, 497, 497, 497, 498,
            498, 498, 499, 499, 499,
            499, 500, 500, 500, 501,
            501, 502, 502, 502, 503,
            503, 503, 504, 504, 504,
            505, 505, 506, 506, 507,
            507, 507, 508, 508, 509,
            509, 510, 510, 510, 511,
            511, 512, 512, 513, 513,
            514, 514, 515, 515, 516,
            516, 517, 517, 518, 518,
            519, 520, 520, 521, 521,
            522, 522, 523, 523, 524,
            525, 525, 526, 526, 527,
            528, 528, 529, 530, 530,
            531, 531, 532, 533, 533,
            534, 535, 535, 536, 537,
            537, 538, 539, 540, 540,
            541, 542, 542, 543, 544,
            545, 545, 546, 547, 548,
            548, 549, 550, 551, 551,
            552, 553, 554, 555, 555,
            556, 557, 558, 559, 560,
            560, 561, 562, 563, 564,
            565, 566, 567, 567, 568,
            569, 570, 571, 572, 573,
            574, 575, 576, 577, 577,
            578, 579, 580, 581, 582,
            583, 584, 585, 586, 587,
            588, 589, 590, 591, 592,
            593, 594, 595, 596, 598,
            599, 600, 601, 602, 603,
            604, 605, 606, 607, 608,
            610, 611, 612, 613, 614,
            615, 616, 618, 619, 620,
            621, 622, 623, 625, 626,
            627, 628, 629, 631, 632,
            633, 634, 636, 637, 638,
            639, 641, 642, 643, 644,
            646, 647, 648, 650, 651,
            652, 654, 655, 656, 658,
            659, 660, 662, 663, 665,
            666, 667, 669, 670, 672,
            673, 674, 676, 677, 679,
            680, 682, 683, 685, 686,
            687, 689, 690, 692, 693,
            695, 697, 698, 700, 701,
            703, 704, 706, 707, 709,
            710, 712, 714, 715, 717,
            719, 720, 722, 723, 725,
            727, 728, 730, 732, 733,
            735, 737, 738, 740, 742,
            744, 745, 747, 749, 750,
            752, 754, 756, 758, 759,
            761, 763, 765, 767, 768,
            770, 772, 774, 776, 778,
            779, 781, 783, 785, 787,
            789, 791, 793, 795, 796,
            798, 800, 802, 804, 806,
            808, 810, 812, 814, 816,
            818, 820, 822, 824, 826,
            828, 830, 832, 835, 837,
            839, 841, 843, 845, 847,
            849, 851, 854, 856, 858,
            860, 862, 864, 867, 869,
            871, 873, 875, 878, 880,
            882, 884, 887, 889, 891,
            894, 896, 898, 900, 903,
            905, 907, 910, 912, 915,
            917, 919, 922, 924, 927,
            929, 931, 934, 936, 939,
            941, 944, 946, 949, 951,
            954, 956, 959, 961, 964,
            966, 969, 971, 974, 977,
            979, 982, 984, 987, 990,
            992, 995, 998, 1000, 1003,
            1006, 1008, 1011, 1014, 1017,
            1019, 1022, 1025, 1028, 1030,
            1033, 1036, 1039, 1042, 1044,
            1047, 1050, 1053, 1056, 1059,
            1062, 1065, 1067, 1070, 1073,
            1076, 1079, 1082, 1085, 1088,
            1091, 1094, 1097, 1100, 1103,
            1106, 1109, 1112, 1115, 1118,
            1122, 1125, 1128, 1131, 1134,
            1137, 1140, 1143, 1147, 1150,
            1153, 1156, 1159, 1163, 1166,
            1169, 1172, 1176, 1179, 1182,
            1186, 1189, 1192, 1196, 1199,
            1202, 1206, 1209, 1212, 1216,
            1219, 1223, 1226, 1230, 1233,
            1237, 1240, 1244, 1247, 1251,
            1254, 1258, 1261, 1265, 1268,
            1272, 1276, 1279, 1283, 1287,
            1290, 1294, 1298, 1301, 1305,
            1309, 1312, 1316, 1320, 1324,
            1327, 1331, 1335, 1339, 1343,
            1347, 1350, 1354, 1358, 1362,
            1366, 1370, 1374, 1378, 1382,
            1386, 1390, 1394, 1398, 1402,
            1406, 1410, 1414, 1418, 1422,
            1426, 1430, 1434, 1439, 1443,
            1447, 1451, 1455, 1459, 1464,
            1468, 1472, 1476, 1481, 1485,
            1489, 1494, 1498, 1502, 1507,
            1511, 1516, 1520, 1524, 1529,
            1533, 1538, 1542, 1547, 1551,
            1556, 1560, 1565, 1569, 1574,
            1579, 1583, 1588, 1592, 1597,
            1602, 1606, 1611, 1616, 1621,
            1625, 1630, 1635, 1640, 1645,
            1649, 1654, 1659, 1664, 1669,
            1674, 1679, 1684, 1689, 1693,
            1698, 1703, 1708, 1714, 1719,
            1724, 1729, 1734, 1739, 1744,
            1749, 1754, 1760, 1765, 1770,
            1775, 1780, 1786, 1791, 1796,
            1802, 1807, 1812, 1818, 1823,
            1828, 1834, 1839, 1845, 1850,
            1856, 1861, 1867, 1872, 1878,
            1883, 1889, 1894, 1900, 1906,
            1911, 1917, 1923, 1929, 1934,
            1940, 1946, 1952, 1957, 1963,
            1969, 1975, 1981, 1987, 1993,
            1999, 2004, 2010, 2016, 2022,
            2028, 2035, 2041, 2047, 2053,
            2059, 2065, 2071, 2077, 2084,
            2090, 2096, 2102, 2109, 2115,
            2121, 2128, 2134, 2140, 2147,
            2153, 2160, 2166, 2173, 2179,
            2186, 2192, 2199, 2205, 2212,
            2219, 2225, 2232, 2239, 2245,
            2252, 2259, 2266, 2272, 2279,
            2286, 2293, 2300, 2307, 2314,
            2321, 2328, 2335, 2342, 2349,
            2356, 2363, 2370, 2377, 2384,
            2391, 2398, 2406, 2413, 2420,
            2427, 2435, 2442, 2449, 2457,
            2464, 2472, 2479, 2487, 2494,
            2502, 2509, 2517, 2524, 2532,
            2539, 2547, 2555, 2563, 2570,
            2578, 2586, 2594, 2601, 2609,
            2617, 2625, 2633, 2641, 2649,
            2657, 2665, 2673, 2681, 2689,
            2697, 2705, 2714, 2722, 2730,
            2738, 2747, 2755, 2763, 2772,
            2780, 2788, 2797, 2805, 2814,
            2822, 2831, 2839, 2848, 2857,
            2865, 2874, 2883, 2891, 2900,
            2909, 2918, 2927, 2935, 2944,
            2953, 2962, 2971, 2980, 2989,
            2998, 3007, 3016, 3026, 3035,
            3044, 3053, 3062, 3072, 3081,
            3090, 3100, 3109, 3119, 3128,
            3138, 3147, 3157, 3166, 3176,
            3186, 3195, 3205, 3215, 3224,
            3234, 3244, 3254, 3264, 3274,
            3284, 3294, 3304, 3314, 3324,
            3334, 3344, 3354, 3364, 3375,
            3385, 3395, 3405, 3416, 3426,
            3437, 3447, 3458, 3468, 3479,
            3489, 3500, 3510, 3521, 3532,
            3543, 3553, 3564, 3575, 3586,
            3597, 3608, 3619, 3630, 3641,
            3652, 3663, 3674, 3685, 3697,
            3708, 3719, 3730, 3742, 3753,
            3765, 3776, 3788, 3799, 3811,
            3822, 3834, 3846, 3857, 3869,
            3881, 3893, 3905, 3917, 3929,
            3941, 3953, 3965, 3977, 3989,
            4001, 4013, 4025, 4038, 4050,
            4062, 4075, 4087, 4100, 4112,
            4125, 4137, 4150, 4163, 4175,
            4188, 4201, 4214, 4226, 4239,
            4252, 4265, 4278, 4291, 4304,
            4318, 4331, 4344, 4357, 4371,
            4384, 4397, 4411, 4424, 4438,
            4451, 4465, 4479, 4492, 4506,
            4520, 4533, 4547, 4561, 4575,
            4589, 4603, 4617, 4631, 4645,
            4660, 4674, 4688, 4703, 4717,
            4731, 4746, 4760, 4775, 4789,
            4804, 4819, 4833, 4848, 4863,
            4878, 4893, 4908, 4923, 4938,
            4953, 4968, 4983, 4999, 5014,
            5029, 5045, 5060, 5075, 5091,
            5107, 5122, 5138, 5154, 5169,
            5185, 5201, 5217, 5233, 5249,
            5265, 5281, 5297, 5313, 5330,
            5346, 5362, 5379, 5395, 5412,
            5428, 5445, 5462, 5478, 5495,
            5512, 5529, 5546, 5563, 5580,
            5597, 5614, 5631, 5648, 5666,
            5683, 5700, 5718, 5735, 5753,
            5770, 5788, 5806, 5824, 5841,
            5859, 5877, 5895, 5913, 5931,
            5950, 5968, 5986, 6004, 6023,
            6041, 6060, 6078, 6097, 6116,
            6134, 6153, 6172, 6191, 6210,
            6229, 6248, 6267, 6286, 6305,
            6325, 6344, 6364, 6383, 6403,
            6422, 6442, 6462, 6481, 6501,
            6521, 6541, 6561, 6581, 6602,
            6622, 6642, 6662, 6683, 6703,
            6724, 6744, 6765, 6786, 6807,
            6828, 6848, 6869, 6891, 6912,
            6933, 6954, 6975, 6997, 7018,
            7040, 7061, 7083, 7105, 7126,
            7148, 7170, 7192, 7214, 7236,
            7259, 7281, 7303, 7325, 7348,
            7370, 7393, 7416, 7438, 7461,
            7484, 7507, 7530, 7553, 7576,
            7600, 7623, 7646, 7670, 7693,
            7717, 7741, 7764, 7788, 7812,
            7836, 7860, 7884, 7908, 7932,
            7957, 7981, 8006, 8030, 8055,
            8080, 8104, 8129, 8154, 8179,
            8204, 8229, 8255, 8280, 8305,
            8331, 8356, 8382, 8408, 8434,
            8459, 8485, 8511, 8537, 8564,
            8590, 8616, 8643, 8669, 8696,
            8722, 8749, 8776, 8803, 8830,
            8857, 8884, 8912, 8939, 8966,
            8994, 9021, 9049, 9077, 9105,
            9133, 9161, 9189, 9217, 9245,
            9274, 9302, 9331, 9359, 9388,
            9417, 9446, 9475, 9504, 9533,
            9562, 9591, 9621, 9650, 9680,
            9710, 9740, 9769, 9799, 9830,
            9860, 9890, 9920, 9951, 9981,
            10012, 10043, 10073, 10104, 10135,
            10166, 10198, 10229, 10260, 10292,
            10323, 10355, 10387, 10419, 10451,
            10483, 10515, 10547, 10580, 10612,
            10645, 10677, 10710, 10743, 10776,
            10809, 10842, 10876, 10909, 10942,
            10976, 11010, 11044, 11077, 11111,
            11146, 11180, 11214, 11248, 11283,
            11318, 11352, 11387, 11422, 11457,
            11492, 11528, 11563, 11599, 11634,
            11670, 11706, 11742, 11778, 11814,
            11850, 11887, 11923, 11960, 11996,
            12033, 12070, 12107, 12144, 12182,
            12219, 12257, 12294, 12332, 12370,
            12408, 12446, 12484, 12522, 12561,
            12599, 12638, 12677, 12716, 12755,
            12794, 12833, 12873, 12912, 12952,
            12992, 13032, 13072, 13112, 13152,
            13192, 13233, 13274, 13314, 13355,
            13396, 13437, 13479, 13520, 13561,
            13603, 13645, 13687, 13729, 13771,
            13813, 13856, 13898, 13941, 13984,
            14027, 14070, 14113, 14156, 14200,
            14243, 14287, 14331, 14375, 14419,
            14463, 14508, 14552, 14597, 14642,
            14687, 14732, 14777, 14823, 14868,
            14914, 14960, 15005, 15052, 15098,
            15144, 15191, 15237, 15284, 15331,
            15378, 15425, 15473, 15520, 15568,
            15616, 15664, 15712, 15760, 15808,
            15857, 15906, 15955, 16004, 16053,
            16102, 16151, 16201, 16251, 16301,
            16351, 16401, 16451, 16502, 16553,
            16603, 16654, 16706, 16757, 16808,
            16860, 16912, 16964, 17016, 17068,
            17121, 17173, 17226, 17279, 17332,
            17385, 17438, 17492, 17546, 17600,
            17654, 17708, 17762, 17817, 17872,
            17926, 17982, 18037, 18092, 18148,
            18203, 18259, 18315, 18372, 18428,
            18485, 18542, 18598, 18656, 18713,
            18770, 18828, 18886, 18944, 19002,
            19060, 19119, 19178, 19237, 19296,
            19355, 19414, 19474, 19534, 19594,
            19654, 19714, 19775, 19836, 19897,
            19958, 20019, 20081, 20142, 20204,
            20266, 20328, 20391, 20454, 20516,
            20579, 20643, 20706, 20770, 20833,
            20897, 20962, 21026, 21091, 21155,
            21220, 21286, 21351, 21417, 21482,
            21548, 21615, 21681, 21748, 21814,
            21881, 21949, 22016, 22084, 22151,
            22220, 22288, 22356, 22425, 22494,
            22563, 22632, 22702, 22771, 22841,
            22912, 22982, 23053, 23123, 23194,
            23266, 23337, 23409, 23481, 23553,
            23625, 23698, 23771, 23844, 23917,
            23990, 24064, 24138, 24212, 24287,
            24361, 24436, 24511, 24586, 24662,
            24738, 24814, 24890, 24966, 25043,
            25120, 25197, 25275, 25352, 25430,
            25508, 25587, 25665, 25744, 25823,
            25902, 25982, 26062, 26142, 26222,
            26303, 26384, 26465, 26546, 26627,
            26709, 26791, 26874, 26956, 27039,
            27122, 27205, 27289, 27373, 27457,
            27541, 27626, 27711, 27796, 27881,
            27967, 28053, 28139, 28226, 28312,
            28399, 28486, 28574, 28662, 28750,
            28838, 28927, 29016, 29105, 29194,
            29284, 29374, 29464, 29555, 29645,
            29736, 29828, 29919, 30011, 30104,
            30196, 30289, 30382, 30475, 30569,
            30663, 30757, 30851, 30946, 31041,
            31137, 31232, 31328, 31425, 31521,
            31618, 31715, 31813, 31910, 32008,
            32107, 32205, 32304, 32403, 32503,
            32603, 32703, 32804, 32904, 33005,
            33107, 33209, 33311, 33413, 33516,
            33619, 33722, 33825, 33929, 34034,
            34138, 34243, 34348, 34454, 34560,
            34666, 34772, 34879, 34986, 35094,
            35202, 35310, 35418, 35527, 35636,
            35746, 35856, 35966, 36076, 36187,
            36298, 36410, 36522, 36634, 36746,
            36859, 36973, 37086, 37200, 37314,
            37429, 37544, 37659, 37775, 37891,
            38008, 38124, 38241, 38359, 38477,
            38595, 38714, 38833, 38952, 39072,
            39192, 39312, 39433, 39554, 39675,
            39797, 39920, 40042, 40165, 40289,
            40413, 40537, 40661, 40786, 40911,
            41037, 41163, 41290, 41417, 41544,
            41671, 41800, 41928, 42057, 42186,
            42316, 42446, 42576, 42707, 42838,
            42970, 43102, 43234, 43367, 43500,
            43634, 43768, 43902, 44037, 44173,
            44308, 44444, 44581, 44718, 44855,
            44993, 45131, 45270, 45409, 45549,
            45689, 45829, 45970, 46111, 46253,
            46395, 46537, 46680, 46824, 46968,
            47112, 47257, 47402, 47548, 47694,
            47840, 47987, 48135, 48283, 48431,
            48580, 48729, 48879, 49029, 49180,
            49331, 49482, 49634, 49787, 49940,
            50093, 50247, 50401, 50556, 50712,
            50867, 51024, 51181, 51338, 51495,
            51654, 51812, 51972, 52131, 52291,
            52452, 52613, 52775, 52937, 53100,
            53263, 53427, 53591, 53755, 53921,
            54086, 54252, 54419, 54586, 54754,
            54922, 55091, 55260, 55430, 55600,
            55771, 55943, 56114, 56287, 56460,
            56633, 56807, 56982, 57157, 57333,
            57509, 57685, 57863, 58040, 58219,
            58398, 58577, 58757, 58938, 59119,
            59300, 59483, 59665, 59849, 60033,
            60217, 60402, 60588, 60774, 60960,
            61148, 61336, 61524, 61713, 61903,
            62093, 62284, 62475, 62667, 62860,
            63053, 63247, 63441, 63636, 63831,
            64027, 64224, 64422, 64619, 64818,
            65017, 65217, 65417, 65618, 65820,
            66022, 66225, 66429, 66633, 66837,
            67043, 67249, 67455, 67663, 67870,
            68079, 68288, 68498, 68708, 68920,
            69131, 69344, 69557, 69771, 69985,
            70200, 70416, 70632, 70849, 71067,
            71285, 71504, 71724, 71944, 72165,
            72387, 72609, 72833, 73056, 73281,
            73506, 73732, 73958, 74186, 74414,
            74642, 74872, 75102, 75332, 75564,
            75796, 76029, 76262, 76497, 76732,
            76968, 77204, 77441, 77679, 77918,
            78157, 78398, 78638, 78880, 79122,
            79366, 79609, 79854, 80099, 80345,
            80592, 80840, 81088, 81338, 81587,
            81838, 82090, 82342, 82595, 82849,
            83103, 83358, 83615, 83872, 84129,
            84388, 84647, 84907, 85168, 85430,
            85692, 85955, 86220, 86485, 86750,
            87017, 87284, 87552, 87821, 88091,
            88362, 88633, 88906, 89179, 89453,
            89728, 90003, 90280, 90557, 90836,
            91115, 91395, 91676, 91957, 92240,
            92523, 92807, 93093, 93379, 93666,
            93953, 94242, 94532, 94822, 95113,
            95406, 95699, 95993, 96288, 96584,
            96881, 97178, 97477, 97776, 98077,
            98378, 98680, 98984, 99288, 99593,
            99899, 100206, 100514, 100822, 101132,
            101443, 101755, 102067, 102381, 102696,
            103011, 103328, 103645, 103964, 104283,
            104603, 104925, 105247, 105571, 105895,
            106220, 106547, 106874, 107203, 107532,
            107862, 108194, 108526, 108860, 109194,
            109530, 109866, 110204, 110542, 110882,
            111223, 111565, 111907, 112251, 112596,
            112942, 113289, 113637, 113986, 114337,
            114688, 115040, 115394, 115748, 116104,
            116461, 116819, 117178, 117538, 117899,
            118261, 118624, 118989, 119354, 119721,
            120089, 120458, 120828, 121199, 121572,
            121945, 122320, 122696, 123073, 123451,
            123830, 124211, 124593, 124975, 125359,
            125745, 126131, 126518, 126907, 127297,
            127688, 128081, 128474, 128869, 129265,
            129662, 130061, 130260
         ) ),
        max_error = cms.double(0.6152529479288091),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut2 = cms.PSet(
        lut = cms.vint32( (
            256, 256, 257, 258, 259,
            260, 260, 261, 262, 263,
            264, 264, 265, 266, 267,
            268, 268, 269, 270, 271,
            272, 273, 273, 274, 275,
            276, 277, 278, 279, 279,
            280, 281, 282, 283, 284,
            285, 285, 286, 287, 288,
            289, 290, 291, 292, 293,
            293, 294, 295, 296, 297,
            298, 299, 300, 301, 302,
            303, 303, 304, 305, 306,
            307, 308, 309, 310, 311,
            312, 313, 314, 315, 316,
            317, 318, 319, 320, 321,
            322, 323, 324, 325, 326,
            327, 328, 329, 330, 331,
            332, 333, 334, 335, 336,
            337, 338, 339, 340, 341,
            342, 343, 344, 345, 346,
            347, 348, 349, 351, 352,
            353, 354, 355, 356, 357,
            358, 359, 360, 361, 363,
            364, 365, 366, 367, 368,
            369, 370, 372, 373, 374,
            375, 376, 377, 379, 380,
            381, 382, 383, 384, 386,
            387, 388, 389, 390, 392,
            393, 394, 395, 396, 398,
            399, 400, 401, 402, 404,
            405, 406, 407, 409, 410,
            411, 412, 414, 415, 416,
            418, 419, 420, 421, 423,
            424, 425, 427, 428, 429,
            431, 432, 433, 435, 436,
            437, 439, 440, 441, 443,
            444, 445, 447, 448, 449,
            451, 452, 454, 455, 456,
            458, 459, 461, 462, 463,
            465, 466, 468, 469, 471,
            472, 474, 475, 476, 478,
            479, 481, 482, 484, 485,
            487, 488, 490, 491, 493,
            494, 496, 497, 499, 500,
            502, 503, 505, 507, 508,
            510, 511, 513, 514, 516,
            518, 519, 521, 522, 524,
            526, 527, 529, 530, 532,
            534, 535, 537, 539, 540,
            542, 544, 545, 547, 549,
            550, 552, 554, 555, 557,
            559, 561, 562, 564, 566,
            567, 569, 571, 573, 575,
            576, 578, 580, 582, 583,
            585, 587, 589, 591, 592,
            594, 596, 598, 600, 602,
            603, 605, 607, 609, 611,
            613, 615, 617, 618, 620,
            622, 624, 626, 628, 630,
            632, 634, 636, 638, 640,
            642, 644, 646, 648, 650,
            652, 654, 656, 658, 660,
            662, 664, 666, 668, 670,
            672, 674, 676, 678, 680,
            682, 684, 686, 688, 691,
            693, 695, 697, 699, 701,
            703, 706, 708, 710, 712,
            714, 717, 719, 721, 723,
            725, 728, 730, 732, 734,
            737, 739, 741, 743, 746,
            748, 750, 753, 755, 757,
            760, 762, 764, 767, 769,
            771, 774, 776, 778, 781,
            783, 786, 788, 790, 793,
            795, 798, 800, 803, 805,
            808, 810, 813, 815, 818,
            820, 823, 825, 828, 830,
            833, 835, 838, 840, 843,
            846, 848, 851, 853, 856,
            859, 861, 864, 867, 869,
            872, 875, 877, 880, 883,
            885, 888, 891, 894, 896,
            899, 902, 905, 907, 910,
            913, 916, 919, 921, 924,
            927, 930, 933, 936, 939,
            941, 944, 947, 950, 953,
            956, 959, 962, 965, 968,
            971, 974, 977, 980, 983,
            986, 989, 992, 995, 998,
            1001, 1004, 1007, 1010, 1013,
            1017, 1020, 1023, 1026, 1029,
            1032, 1035, 1039, 1042, 1045,
            1048, 1051, 1055, 1058, 1061,
            1064, 1068, 1071, 1074, 1078,
            1081, 1084, 1088, 1091, 1094,
            1098, 1101, 1104, 1108, 1111,
            1115, 1118, 1121, 1125, 1128,
            1132, 1135, 1139, 1142, 1146,
            1149, 1153, 1156, 1160, 1163,
            1167, 1171, 1174, 1178, 1181,
            1185, 1189, 1192, 1196, 1200,
            1203, 1207, 1211, 1214, 1218,
            1222, 1226, 1229, 1233, 1237,
            1241, 1245, 1249, 1252, 1256,
            1260, 1264, 1268, 1272, 1276,
            1280, 1283, 1287, 1291, 1295,
            1299, 1303, 1307, 1311, 1315,
            1319, 1323, 1328, 1332, 1336,
            1340, 1344, 1348, 1352, 1356,
            1360, 1365, 1369, 1373, 1377,
            1382, 1386, 1390, 1394, 1399,
            1403, 1407, 1412, 1416, 1420,
            1425, 1429, 1433, 1438, 1442,
            1447, 1451, 1455, 1460, 1464,
            1469, 1473, 1478, 1483, 1487,
            1492, 1496, 1501, 1505, 1510,
            1515, 1519, 1524, 1529, 1533,
            1538, 1543, 1548, 1552, 1557,
            1562, 1567, 1572, 1576, 1581,
            1586, 1591, 1596, 1601, 1606,
            1611, 1616, 1620, 1625, 1630,
            1635, 1640, 1646, 1651, 1656,
            1661, 1666, 1671, 1676, 1681,
            1686, 1692, 1697, 1702, 1707,
            1712, 1718, 1723, 1728, 1734,
            1739, 1744, 1750, 1755, 1760,
            1766, 1771, 1777, 1782, 1788,
            1793, 1799, 1804, 1810, 1815,
            1821, 1826, 1832, 1838, 1843,
            1849, 1855, 1860, 1866, 1872,
            1878, 1883, 1889, 1895, 1901,
            1907, 1912, 1918, 1924, 1930,
            1936, 1942, 1948, 1954, 1960,
            1966, 1972, 1978, 1984, 1990,
            1996, 2003, 2009, 2015, 2021,
            2027, 2033, 2040, 2046, 2052,
            2059, 2065, 2071, 2078, 2084,
            2090, 2097, 2103, 2110, 2116,
            2123, 2129, 2136, 2142, 2149,
            2156, 2162, 2169, 2175, 2182,
            2189, 2196, 2202, 2209, 2216,
            2223, 2230, 2236, 2243, 2250,
            2257, 2264, 2271, 2278, 2285,
            2292, 2299, 2306, 2313, 2320,
            2327, 2335, 2342, 2349, 2356,
            2363, 2371, 2378, 2385, 2393,
            2400, 2407, 2415, 2422, 2430,
            2437, 2444, 2452, 2460, 2467,
            2475, 2482, 2490, 2498, 2505,
            2513, 2521, 2528, 2536, 2544,
            2552, 2560, 2567, 2575, 2583,
            2591, 2599, 2607, 2615, 2623,
            2631, 2639, 2647, 2656, 2664,
            2672, 2680, 2688, 2697, 2705,
            2713, 2722, 2730, 2738, 2747,
            2755, 2764, 2772, 2781, 2789,
            2798, 2806, 2815, 2824, 2832,
            2841, 2850, 2858, 2867, 2876,
            2885, 2894, 2903, 2912, 2921,
            2930, 2939, 2948, 2957, 2966,
            2975, 2984, 2993, 3002, 3012,
            3021, 3030, 3039, 3049, 3058,
            3067, 3077, 3086, 3096, 3105,
            3115, 3124, 3134, 3144, 3153,
            3163, 3173, 3183, 3192, 3202,
            3212, 3222, 3232, 3242, 3252,
            3262, 3272, 3282, 3292, 3302,
            3312, 3322, 3332, 3343, 3353,
            3363, 3374, 3384, 3394, 3405,
            3415, 3426, 3436, 3447, 3457,
            3468, 3479, 3489, 3500, 3511,
            3522, 3532, 3543, 3554, 3565,
            3576, 3587, 3598, 3609, 3620,
            3631, 3642, 3654, 3665, 3676,
            3687, 3699, 3710, 3722, 3733,
            3744, 3756, 3767, 3779, 3791,
            3802, 3814, 3826, 3837, 3849,
            3861, 3873, 3885, 3897, 3909,
            3921, 3933, 3945, 3957, 3969,
            3981, 3994, 4006, 4018, 4031,
            4043, 4055, 4068, 4080, 4093,
            4105, 4118, 4131, 4143, 4156,
            4169, 4182, 4195, 4207, 4220,
            4233, 4246, 4259, 4272, 4286,
            4299, 4312, 4325, 4339, 4352,
            4365, 4379, 4392, 4406, 4419,
            4433, 4446, 4460, 4474, 4487,
            4501, 4515, 4529, 4543, 4557,
            4571, 4585, 4599, 4613, 4627,
            4641, 4656, 4670, 4684, 4699,
            4713, 4728, 4742, 4757, 4771,
            4786, 4801, 4816, 4830, 4845,
            4860, 4875, 4890, 4905, 4920,
            4935, 4950, 4966, 4981, 4996,
            5011, 5027, 5042, 5058, 5073,
            5089, 5105, 5120, 5136, 5152,
            5168, 5183, 5199, 5215, 5231,
            5247, 5264, 5280, 5296, 5312,
            5329, 5345, 5361, 5378, 5394,
            5411, 5428, 5444, 5461, 5478,
            5495, 5512, 5528, 5545, 5562,
            5580, 5597, 5614, 5631, 5648,
            5666, 5683, 5701, 5718, 5736,
            5753, 5771, 5789, 5807, 5824,
            5842, 5860, 5878, 5896, 5914,
            5933, 5951, 5969, 5987, 6006,
            6024, 6043, 6061, 6080, 6099,
            6117, 6136, 6155, 6174, 6193,
            6212, 6231, 6250, 6269, 6289,
            6308, 6327, 6347, 6366, 6386,
            6406, 6425, 6445, 6465, 6485,
            6505, 6525, 6545, 6565, 6585,
            6605, 6625, 6646, 6666, 6687,
            6707, 6728, 6749, 6769, 6790,
            6811, 6832, 6853, 6874, 6895,
            6916, 6937, 6959, 6980, 7002,
            7023, 7045, 7066, 7088, 7110,
            7132, 7154, 7176, 7198, 7220,
            7242, 7264, 7286, 7309, 7331,
            7354, 7376, 7399, 7422, 7445,
            7468, 7490, 7513, 7537, 7560,
            7583, 7606, 7630, 7653, 7677,
            7700, 7724, 7748, 7771, 7795,
            7819, 7843, 7867, 7892, 7916,
            7940, 7964, 7989, 8014, 8038,
            8063, 8088, 8112, 8137, 8162,
            8187, 8213, 8238, 8263, 8289,
            8314, 8340, 8365, 8391, 8417,
            8443, 8468, 8495, 8521, 8547,
            8573, 8599, 8626, 8652, 8679,
            8706, 8732, 8759, 8786, 8813,
            8840, 8867, 8895, 8922, 8949,
            8977, 9004, 9032, 9060, 9088,
            9116, 9144, 9172, 9200, 9228,
            9256, 9285, 9313, 9342, 9371,
            9400, 9428, 9457, 9486, 9516,
            9545, 9574, 9604, 9633, 9663,
            9692, 9722, 9752, 9782, 9812,
            9842, 9872, 9903, 9933, 9964,
            9994, 10025, 10056, 10087, 10118,
            10149, 10180, 10211, 10243, 10274,
            10306, 10337, 10369, 10401, 10433,
            10465, 10497, 10529, 10562, 10594,
            10627, 10659, 10692, 10725, 10758,
            10791, 10824, 10858, 10891, 10924,
            10958, 10992, 11025, 11059, 11093,
            11127, 11161, 11196, 11230, 11265,
            11299, 11334, 11369, 11404, 11439,
            11474, 11509, 11545, 11580, 11616,
            11651, 11687, 11723, 11759, 11795,
            11831, 11868, 11904, 11941, 11978,
            12014, 12051, 12088, 12125, 12163,
            12200, 12238, 12275, 12313, 12351,
            12389, 12427, 12465, 12503, 12542,
            12580, 12619, 12658, 12696, 12735,
            12775, 12814, 12853, 12893, 12932,
            12972, 13012, 13052, 13092, 13132,
            13173, 13213, 13254, 13294, 13335,
            13376, 13417, 13459, 13500, 13541,
            13583, 13625, 13667, 13709, 13751,
            13793, 13835, 13878, 13920, 13963,
            14006, 14049, 14092, 14136, 14179,
            14223, 14266, 14310, 14354, 14398,
            14443, 14487, 14531, 14576, 14621,
            14666, 14711, 14756, 14801, 14847,
            14892, 14938, 14984, 15030, 15076,
            15123, 15169, 15216, 15263, 15309,
            15356, 15404, 15451, 15498, 15546,
            15594, 15642, 15690, 15738, 15786,
            15835, 15884, 15932, 15981, 16030,
            16080, 16129, 16179, 16228, 16278,
            16328, 16378, 16429, 16479, 16530,
            16581, 16632, 16683, 16734, 16785,
            16837, 16889, 16941, 16993, 17045,
            17097, 17150, 17202, 17255, 17308,
            17361, 17415, 17468, 17522, 17576,
            17630, 17684, 17738, 17793, 17848,
            17902, 17957, 18013, 18068, 18123,
            18179, 18235, 18291, 18347, 18404,
            18460, 18517, 18574, 18631, 18688,
            18746, 18803, 18861, 18919, 18977,
            19035, 19094, 19152, 19211, 19270,
            19330, 19389, 19448, 19508, 19568,
            19628, 19689, 19749, 19810, 19871,
            19932, 19993, 20054, 20116, 20178,
            20240, 20302, 20364, 20427, 20490,
            20553, 20616, 20679, 20743, 20806,
            20870, 20935, 20999, 21063, 21128,
            21193, 21258, 21323, 21389, 21455,
            21521, 21587, 21653, 21720, 21786,
            21853, 21920, 21988, 22055, 22123,
            22191, 22259, 22328, 22396, 22465,
            22534, 22603, 22673, 22742, 22812,
            22882, 22953, 23023, 23094, 23165,
            23236, 23308, 23379, 23451, 23523,
            23595, 23668, 23741, 23814, 23887,
            23960, 24034, 24108, 24182, 24256,
            24330, 24405, 24480, 24555, 24631,
            24707, 24783, 24859, 24935, 25012,
            25089, 25166, 25243, 25320, 25398,
            25476, 25555, 25633, 25712, 25791,
            25870, 25950, 26029, 26109, 26190,
            26270, 26351, 26432, 26513, 26594,
            26676, 26758, 26840, 26923, 27006,
            27088, 27172, 27255, 27339, 27423,
            27507, 27592, 27677, 27762, 27847,
            27932, 28018, 28104, 28191, 28277,
            28364, 28451, 28539, 28626, 28714,
            28803, 28891, 28980, 29069, 29158,
            29248, 29338, 29428, 29518, 29609,
            29700, 29791, 29883, 29975, 30067,
            30159, 30252, 30345, 30438, 30532,
            30625, 30719, 30814, 30909, 31003,
            31099, 31194, 31290, 31386, 31483,
            31579, 31677, 31774, 31871, 31969,
            32068, 32166, 32265, 32364, 32464,
            32563, 32663, 32764, 32864, 32965,
            33067, 33168, 33270, 33372, 33475,
            33578, 33681, 33785, 33888, 33992,
            34097, 34202, 34307, 34412, 34518,
            34624, 34730, 34837, 34944, 35051,
            35159, 35267, 35376, 35484, 35593,
            35703, 35812, 35922, 36033, 36144,
            36255, 36366, 36478, 36590, 36702,
            36815, 36928, 37042, 37155, 37270,
            37384, 37499, 37614, 37730, 37846,
            37962, 38079, 38196, 38313, 38431,
            38549, 38667, 38786, 38905, 39025,
            39145, 39265, 39386, 39507, 39628,
            39750, 39872, 39994, 40117, 40241,
            40364, 40488, 40613, 40737, 40863,
            40988, 41114, 41240, 41367, 41494,
            41622, 41750, 41878, 42007, 42136,
            42265, 42395, 42525, 42656, 42787,
            42919, 43050, 43183, 43315, 43448,
            43582, 43716, 43850, 43985, 44120,
            44256, 44392, 44528, 44665, 44802,
            44940, 45078, 45216, 45355, 45495,
            45634, 45775, 45915, 46056, 46198,
            46340, 46482, 46625, 46768, 46912,
            47056, 47201, 47346, 47491, 47637,
            47784, 47930, 48078, 48225, 48374,
            48522, 48671, 48821, 48971, 49121,
            49272, 49424, 49576, 49728, 49881,
            50034, 50188, 50342, 50497, 50652,
            50807, 50963, 51120, 51277, 51435,
            51593, 51751, 51910, 52070, 52230,
            52390, 52551, 52713, 52875, 53037,
            53200, 53364, 53528, 53692, 53857,
            54022, 54188, 54355, 54522, 54690,
            54858, 55026, 55195, 55365, 55535,
            55706, 55877, 56048, 56221, 56393,
            56567, 56740, 56915, 57090, 57265,
            57441, 57618, 57795, 57972, 58150,
            58329, 58508, 58688, 58868, 59049,
            59231, 59413, 59595, 59778, 59962,
            60146, 60331, 60516, 60702, 60889,
            61076, 61264, 61452, 61641, 61830,
            62020, 62211, 62402, 62594, 62786,
            62979, 63172, 63366, 63561, 63756,
            63952, 64149, 64346, 64544, 64742,
            64941, 65140, 65341, 65541, 65743,
            65945, 66147, 66351, 66555, 66759,
            66964, 67170, 67376, 67583, 67791,
            67999, 68208, 68418, 68628, 68839,
            69050, 69263, 69475, 69689, 69903,
            70118, 70333, 70549, 70766, 70984,
            71202, 71421, 71640, 71860, 72081,
            72302, 72525, 72747, 72971, 73195,
            73420, 73646, 73872, 74099, 74327,
            74555, 74784, 75014, 75244, 75476,
            75707, 75940, 76173, 76407, 76642,
            76878, 77114, 77351, 77589, 77827,
            78066, 78306, 78547, 78788, 79030,
            79273, 79516, 79761, 80006, 80252,
            80498, 80746, 80994, 81243, 81492,
            81743, 81994, 82246, 82498, 82752,
            83006, 83261, 83517, 83774, 84031,
            84289, 84548, 84808, 85069, 85330,
            85592, 85855, 86119, 86384, 86649,
            86915, 87182, 87450, 87719, 87989,
            88259, 88530, 88802, 89075, 89349,
            89623, 89899, 90175, 90452, 90730,
            91009, 91288, 91569, 91850, 92132,
            92415, 92699, 92984, 93270, 93557,
            93844, 94132, 94422, 94712, 95003,
            95295, 95587, 95881, 96176, 96471,
            96768, 97065, 97363, 97662, 97963,
            98264, 98565, 98868, 99172, 99477,
            99783, 100089, 100397, 100705, 101015,
            101325, 101636, 101949, 102262, 102576,
            102891, 103207, 103525, 103843, 104162,
            104482, 104803, 105125, 105448, 105772,
            106097, 106423, 106750, 107078, 107407,
            107737, 108068, 108400, 108733, 109067,
            109402, 109738, 110076, 110414, 110753,
            111093, 111435, 111777, 112121, 112465,
            112811, 113157, 113505, 113854, 114204,
            114555, 114907, 115260, 115614, 115969,
            116325, 116683, 117041, 117401, 117762,
            118124, 118486, 118851, 119216, 119582,
            119949, 120318, 120688, 121059, 121431,
            121804, 122178, 122553, 122930, 123308,
            123687, 124067, 124448, 124830, 125214,
            125598, 125984, 126371, 126760, 127149,
            127540, 127932, 128325, 128719, 129115,
            129511, 129909, 130309, 130709, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071
         ) ),
        max_error = cms.double(5748.616225984908),
        output_scale_factor = cms.double(0.953125),
        unused_lsbs = cms.uint32(2)
    ),
    inv_mass_checks = cms.untracked.bool(False),
    maxDz = cms.double(1),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    sanity_checks = cms.untracked.bool(False),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    )
)


process.TkMuonTkIsoEle720 = cms.EDFilter("L1GTDoubleObjectCond",
    collection1 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        minQualityScore = cms.uint32(0),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 0.83, 1.24),
        regionsMinPt = cms.vdouble(7, 7, 7),
        tag = cms.InputTag("l1tGTProducer","GMTTkMuons")
    ),
    collection2 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        regionsAbsEtaLowerBounds = cms.vdouble(0, 1.479),
        regionsMaxRelIsolationPt = cms.vdouble(0.13, 0.28),
        regionsMinPt = cms.vdouble(16, 15),
        tag = cms.InputTag("l1tGTProducer","CL2Electrons")
    ),
    cos_phi_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            487, 487, 487, 487, 487,
            487, 487, 487, 487, 487,
            487, 486, 486, 486, 486,
            486, 486, 486, 485, 485,
            485, 485, 485, 485, 484,
            484, 484, 484, 484, 483,
            483, 483, 483, 483, 482,
            482, 482, 482, 481, 481,
            481, 481, 480, 480, 480,
            480, 479, 479, 479, 478,
            478, 478, 478, 477, 477,
            477, 476, 476, 476, 475,
            475, 475, 474, 474, 474,
            473, 473, 472, 472, 472,
            471, 471, 471, 470, 470,
            469, 469, 468, 468, 468,
            467, 467, 466, 466, 465,
            465, 465, 464, 464, 463,
            463, 462, 462, 461, 461,
            460, 460, 459, 459, 458,
            458, 457, 457, 456, 456,
            455, 454, 454, 453, 453,
            452, 452, 451, 451, 450,
            449, 449, 448, 448, 447,
            446, 446, 445, 445, 444,
            443, 443, 442, 441, 441,
            440, 440, 439, 438, 438,
            437, 436, 436, 435, 434,
            434, 433, 432, 431, 431,
            430, 429, 429, 428, 427,
            426, 426, 425, 424, 423,
            423, 422, 421, 420, 420,
            419, 418, 417, 417, 416,
            415, 414, 413, 413, 412,
            411, 410, 409, 409, 408,
            407, 406, 405, 405, 404,
            403, 402, 401, 400, 399,
            399, 398, 397, 396, 395,
            394, 393, 392, 392, 391,
            390, 389, 388, 387, 386,
            385, 384, 383, 382, 381,
            381, 380, 379, 378, 377,
            376, 375, 374, 373, 372,
            371, 370, 369, 368, 367,
            366, 365, 364, 363, 362,
            361, 360, 359, 358, 357,
            356, 355, 354, 353, 352,
            351, 350, 349, 348, 347,
            346, 345, 343, 342, 341,
            340, 339, 338, 337, 336,
            335, 334, 333, 332, 330,
            329, 328, 327, 326, 325,
            324, 323, 322, 320, 319,
            318, 317, 316, 315, 314,
            312, 311, 310, 309, 308,
            307, 306, 304, 303, 302,
            301, 300, 298, 297, 296,
            295, 294, 293, 291, 290,
            289, 288, 286, 285, 284,
            283, 282, 280, 279, 278,
            277, 275, 274, 273, 272,
            270, 269, 268, 267, 265,
            264, 263, 262, 260, 259,
            258, 257, 255, 254, 253,
            252, 250, 249, 248, 246,
            245, 244, 242, 241, 240,
            239, 237, 236, 235, 233,
            232, 231, 229, 228, 227,
            225, 224, 223, 221, 220,
            219, 217, 216, 215, 213,
            212, 211, 209, 208, 207,
            205, 204, 203, 201, 200,
            198, 197, 196, 194, 193,
            192, 190, 189, 187, 186,
            185, 183, 182, 181, 179,
            178, 176, 175, 174, 172,
            171, 169, 168, 167, 165,
            164, 162, 161, 159, 158,
            157, 155, 154, 152, 151,
            150, 148, 147, 145, 144,
            142, 141, 140, 138, 137,
            135, 134, 132, 131, 129,
            128, 127, 125, 124, 122,
            121, 119, 118, 116, 115,
            113, 112, 111, 109, 108,
            106, 105, 103, 102, 100,
            99, 97, 96, 94, 93,
            92, 90, 89, 87, 86,
            84, 83, 81, 80, 78,
            77, 75, 74, 72, 71,
            69, 68, 66, 65, 63,
            62, 60, 59, 58, 56,
            55, 53, 52, 50, 49,
            47, 46, 44, 43, 41,
            40, 38, 37, 35, 34,
            32, 31, 29, 28, 26,
            25, 23, 22, 20, 19,
            17, 16, 14, 13, 11,
            10, 8, 7, 5, 4,
            2, 1, -1, -2, -4,
            -5, -7, -8, -10, -11,
            -13, -14, -16, -17, -19,
            -20, -22, -23, -25, -26,
            -28, -29, -31, -32, -34,
            -35, -37, -38, -40, -41,
            -43, -44, -46, -47, -49,
            -50, -52, -53, -55, -56,
            -58, -59, -60, -62, -63,
            -65, -66, -68, -69, -71,
            -72, -74, -75, -77, -78,
            -80, -81, -83, -84, -86,
            -87, -89, -90, -92, -93,
            -94, -96, -97, -99, -100,
            -102, -103, -105, -106, -108,
            -109, -111, -112, -113, -115,
            -116, -118, -119, -121, -122,
            -124, -125, -127, -128, -129,
            -131, -132, -134, -135, -137,
            -138, -140, -141, -142, -144,
            -145, -147, -148, -150, -151,
            -152, -154, -155, -157, -158,
            -159, -161, -162, -164, -165,
            -167, -168, -169, -171, -172,
            -174, -175, -176, -178, -179,
            -181, -182, -183, -185, -186,
            -187, -189, -190, -192, -193,
            -194, -196, -197, -198, -200,
            -201, -203, -204, -205, -207,
            -208, -209, -211, -212, -213,
            -215, -216, -217, -219, -220,
            -221, -223, -224, -225, -227,
            -228, -229, -231, -232, -233,
            -235, -236, -237, -239, -240,
            -241, -242, -244, -245, -246,
            -248, -249, -250, -252, -253,
            -254, -255, -257, -258, -259,
            -260, -262, -263, -264, -265,
            -267, -268, -269, -270, -272,
            -273, -274, -275, -277, -278,
            -279, -280, -282, -283, -284,
            -285, -286, -288, -289, -290,
            -291, -293, -294, -295, -296,
            -297, -298, -300, -301, -302,
            -303, -304, -306, -307, -308,
            -309, -310, -311, -312, -314,
            -315, -316, -317, -318, -319,
            -320, -322, -323, -324, -325,
            -326, -327, -328, -329, -330,
            -332, -333, -334, -335, -336,
            -337, -338, -339, -340, -341,
            -342, -343, -345, -346, -347,
            -348, -349, -350, -351, -352,
            -353, -354, -355, -356, -357,
            -358, -359, -360, -361, -362,
            -363, -364, -365, -366, -367,
            -368, -369, -370, -371, -372,
            -373, -374, -375, -376, -377,
            -378, -379, -380, -381, -381,
            -382, -383, -384, -385, -386,
            -387, -388, -389, -390, -391,
            -392, -392, -393, -394, -395,
            -396, -397, -398, -399, -399,
            -400, -401, -402, -403, -404,
            -405, -405, -406, -407, -408,
            -409, -409, -410, -411, -412,
            -413, -413, -414, -415, -416,
            -417, -417, -418, -419, -420,
            -420, -421, -422, -423, -423,
            -424, -425, -426, -426, -427,
            -428, -429, -429, -430, -431,
            -431, -432, -433, -434, -434,
            -435, -436, -436, -437, -438,
            -438, -439, -440, -440, -441,
            -441, -442, -443, -443, -444,
            -445, -445, -446, -446, -447,
            -448, -448, -449, -449, -450,
            -451, -451, -452, -452, -453,
            -453, -454, -454, -455, -456,
            -456, -457, -457, -458, -458,
            -459, -459, -460, -460, -461,
            -461, -462, -462, -463, -463,
            -464, -464, -465, -465, -465,
            -466, -466, -467, -467, -468,
            -468, -468, -469, -469, -470,
            -470, -471, -471, -471, -472,
            -472, -472, -473, -473, -474,
            -474, -474, -475, -475, -475,
            -476, -476, -476, -477, -477,
            -477, -478, -478, -478, -478,
            -479, -479, -479, -480, -480,
            -480, -480, -481, -481, -481,
            -481, -482, -482, -482, -482,
            -483, -483, -483, -483, -483,
            -484, -484, -484, -484, -484,
            -485, -485, -485, -485, -485,
            -485, -486, -486, -486, -486,
            -486, -486, -486, -487, -487,
            -487, -487, -487, -487, -487,
            -487, -487, -487, -487, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488
         ) ),
        max_error = cms.double(0.0025338281044886835),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            489, 489, 489, 489, 489,
            489, 489, 489, 489, 489,
            489, 490, 490, 490, 490,
            490, 490, 490, 491, 491,
            491, 491, 491, 491, 492,
            492, 492, 492, 492, 493,
            493, 493, 493, 493, 494,
            494, 494, 494, 495, 495,
            495, 495, 496, 496, 496,
            496, 497, 497, 497, 498,
            498, 498, 499, 499, 499,
            499, 500, 500, 500, 501,
            501, 502, 502, 502, 503,
            503, 503, 504, 504, 504,
            505, 505, 506, 506, 507,
            507, 507, 508, 508, 509,
            509, 510, 510, 510, 511,
            511, 512, 512, 513, 513,
            514, 514, 515, 515, 516,
            516, 517, 517, 518, 518,
            519, 520, 520, 521, 521,
            522, 522, 523, 523, 524,
            525, 525, 526, 526, 527,
            528, 528, 529, 530, 530,
            531, 531, 532, 533, 533,
            534, 535, 535, 536, 537,
            537, 538, 539, 540, 540,
            541, 542, 542, 543, 544,
            545, 545, 546, 547, 548,
            548, 549, 550, 551, 551,
            552, 553, 554, 555, 555,
            556, 557, 558, 559, 560,
            560, 561, 562, 563, 564,
            565, 566, 567, 567, 568,
            569, 570, 571, 572, 573,
            574, 575, 576, 577, 577,
            578, 579, 580, 581, 582,
            583, 584, 585, 586, 587,
            588, 589, 590, 591, 592,
            593, 594, 595, 596, 598,
            599, 600, 601, 602, 603,
            604, 605, 606, 607, 608,
            610, 611, 612, 613, 614,
            615, 616, 618, 619, 620,
            621, 622, 623, 625, 626,
            627, 628, 629, 631, 632,
            633, 634, 636, 637, 638,
            639, 641, 642, 643, 644,
            646, 647, 648, 650, 651,
            652, 654, 655, 656, 658,
            659, 660, 662, 663, 665,
            666, 667, 669, 670, 672,
            673, 674, 676, 677, 679,
            680, 682, 683, 685, 686,
            687, 689, 690, 692, 693,
            695, 697, 698, 700, 701,
            703, 704, 706, 707, 709,
            710, 712, 714, 715, 717,
            719, 720, 722, 723, 725,
            727, 728, 730, 732, 733,
            735, 737, 738, 740, 742,
            744, 745, 747, 749, 750,
            752, 754, 756, 758, 759,
            761, 763, 765, 767, 768,
            770, 772, 774, 776, 778,
            779, 781, 783, 785, 787,
            789, 791, 793, 795, 796,
            798, 800, 802, 804, 806,
            808, 810, 812, 814, 816,
            818, 820, 822, 824, 826,
            828, 830, 832, 835, 837,
            839, 841, 843, 845, 847,
            849, 851, 854, 856, 858,
            860, 862, 864, 867, 869,
            871, 873, 875, 878, 880,
            882, 884, 887, 889, 891,
            894, 896, 898, 900, 903,
            905, 907, 910, 912, 915,
            917, 919, 922, 924, 927,
            929, 931, 934, 936, 939,
            941, 944, 946, 949, 951,
            954, 956, 959, 961, 964,
            966, 969, 971, 974, 977,
            979, 982, 984, 987, 990,
            992, 995, 998, 1000, 1003,
            1006, 1008, 1011, 1014, 1017,
            1019, 1022, 1025, 1028, 1030,
            1033, 1036, 1039, 1042, 1044,
            1047, 1050, 1053, 1056, 1059,
            1062, 1065, 1067, 1070, 1073,
            1076, 1079, 1082, 1085, 1088,
            1091, 1094, 1097, 1100, 1103,
            1106, 1109, 1112, 1115, 1118,
            1122, 1125, 1128, 1131, 1134,
            1137, 1140, 1143, 1147, 1150,
            1153, 1156, 1159, 1163, 1166,
            1169, 1172, 1176, 1179, 1182,
            1186, 1189, 1192, 1196, 1199,
            1202, 1206, 1209, 1212, 1216,
            1219, 1223, 1226, 1230, 1233,
            1237, 1240, 1244, 1247, 1251,
            1254, 1258, 1261, 1265, 1268,
            1272, 1276, 1279, 1283, 1287,
            1290, 1294, 1298, 1301, 1305,
            1309, 1312, 1316, 1320, 1324,
            1327, 1331, 1335, 1339, 1343,
            1347, 1350, 1354, 1358, 1362,
            1366, 1370, 1374, 1378, 1382,
            1386, 1390, 1394, 1398, 1402,
            1406, 1410, 1414, 1418, 1422,
            1426, 1430, 1434, 1439, 1443,
            1447, 1451, 1455, 1459, 1464,
            1468, 1472, 1476, 1481, 1485,
            1489, 1494, 1498, 1502, 1507,
            1511, 1516, 1520, 1524, 1529,
            1533, 1538, 1542, 1547, 1551,
            1556, 1560, 1565, 1569, 1574,
            1579, 1583, 1588, 1592, 1597,
            1602, 1606, 1611, 1616, 1621,
            1625, 1630, 1635, 1640, 1645,
            1649, 1654, 1659, 1664, 1669,
            1674, 1679, 1684, 1689, 1693,
            1698, 1703, 1708, 1714, 1719,
            1724, 1729, 1734, 1739, 1744,
            1749, 1754, 1760, 1765, 1770,
            1775, 1780, 1786, 1791, 1796,
            1802, 1807, 1812, 1818, 1823,
            1828, 1834, 1839, 1845, 1850,
            1856, 1861, 1867, 1872, 1878,
            1883, 1889, 1894, 1900, 1906,
            1911, 1917, 1923, 1929, 1934,
            1940, 1946, 1952, 1957, 1963,
            1969, 1975, 1981, 1987, 1993,
            1999, 2004, 2010, 2016, 2022,
            2028, 2035, 2041, 2047, 2053,
            2059, 2065, 2071, 2077, 2084,
            2090, 2096, 2102, 2109, 2115,
            2121, 2128, 2134, 2140, 2147,
            2153, 2160, 2166, 2173, 2179,
            2186, 2192, 2199, 2205, 2212,
            2219, 2225, 2232, 2239, 2245,
            2252, 2259, 2266, 2272, 2279,
            2286, 2293, 2300, 2307, 2314,
            2321, 2328, 2335, 2342, 2349,
            2356, 2363, 2370, 2377, 2384,
            2391, 2398, 2406, 2413, 2420,
            2427, 2435, 2442, 2449, 2457,
            2464, 2472, 2479, 2487, 2494,
            2502, 2509, 2517, 2524, 2532,
            2539, 2547, 2555, 2563, 2570,
            2578, 2586, 2594, 2601, 2609,
            2617, 2625, 2633, 2641, 2649,
            2657, 2665, 2673, 2681, 2689,
            2697, 2705, 2714, 2722, 2730,
            2738, 2747, 2755, 2763, 2772,
            2780, 2788, 2797, 2805, 2814,
            2822, 2831, 2839, 2848, 2857,
            2865, 2874, 2883, 2891, 2900,
            2909, 2918, 2927, 2935, 2944,
            2953, 2962, 2971, 2980, 2989,
            2998, 3007, 3016, 3026, 3035,
            3044, 3053, 3062, 3072, 3081,
            3090, 3100, 3109, 3119, 3128,
            3138, 3147, 3157, 3166, 3176,
            3186, 3195, 3205, 3215, 3224,
            3234, 3244, 3254, 3264, 3274,
            3284, 3294, 3304, 3314, 3324,
            3334, 3344, 3354, 3364, 3375,
            3385, 3395, 3405, 3416, 3426,
            3437, 3447, 3458, 3468, 3479,
            3489, 3500, 3510, 3521, 3532,
            3543, 3553, 3564, 3575, 3586,
            3597, 3608, 3619, 3630, 3641,
            3652, 3663, 3674, 3685, 3697,
            3708, 3719, 3730, 3742, 3753,
            3765, 3776, 3788, 3799, 3811,
            3822, 3834, 3846, 3857, 3869,
            3881, 3893, 3905, 3917, 3929,
            3941, 3953, 3965, 3977, 3989,
            4001, 4013, 4025, 4038, 4050,
            4062, 4075, 4087, 4100, 4112,
            4125, 4137, 4150, 4163, 4175,
            4188, 4201, 4214, 4226, 4239,
            4252, 4265, 4278, 4291, 4304,
            4318, 4331, 4344, 4357, 4371,
            4384, 4397, 4411, 4424, 4438,
            4451, 4465, 4479, 4492, 4506,
            4520, 4533, 4547, 4561, 4575,
            4589, 4603, 4617, 4631, 4645,
            4660, 4674, 4688, 4703, 4717,
            4731, 4746, 4760, 4775, 4789,
            4804, 4819, 4833, 4848, 4863,
            4878, 4893, 4908, 4923, 4938,
            4953, 4968, 4983, 4999, 5014,
            5029, 5045, 5060, 5075, 5091,
            5107, 5122, 5138, 5154, 5169,
            5185, 5201, 5217, 5233, 5249,
            5265, 5281, 5297, 5313, 5330,
            5346, 5362, 5379, 5395, 5412,
            5428, 5445, 5462, 5478, 5495,
            5512, 5529, 5546, 5563, 5580,
            5597, 5614, 5631, 5648, 5666,
            5683, 5700, 5718, 5735, 5753,
            5770, 5788, 5806, 5824, 5841,
            5859, 5877, 5895, 5913, 5931,
            5950, 5968, 5986, 6004, 6023,
            6041, 6060, 6078, 6097, 6116,
            6134, 6153, 6172, 6191, 6210,
            6229, 6248, 6267, 6286, 6305,
            6325, 6344, 6364, 6383, 6403,
            6422, 6442, 6462, 6481, 6501,
            6521, 6541, 6561, 6581, 6602,
            6622, 6642, 6662, 6683, 6703,
            6724, 6744, 6765, 6786, 6807,
            6828, 6848, 6869, 6891, 6912,
            6933, 6954, 6975, 6997, 7018,
            7040, 7061, 7083, 7105, 7126,
            7148, 7170, 7192, 7214, 7236,
            7259, 7281, 7303, 7325, 7348,
            7370, 7393, 7416, 7438, 7461,
            7484, 7507, 7530, 7553, 7576,
            7600, 7623, 7646, 7670, 7693,
            7717, 7741, 7764, 7788, 7812,
            7836, 7860, 7884, 7908, 7932,
            7957, 7981, 8006, 8030, 8055,
            8080, 8104, 8129, 8154, 8179,
            8204, 8229, 8255, 8280, 8305,
            8331, 8356, 8382, 8408, 8434,
            8459, 8485, 8511, 8537, 8564,
            8590, 8616, 8643, 8669, 8696,
            8722, 8749, 8776, 8803, 8830,
            8857, 8884, 8912, 8939, 8966,
            8994, 9021, 9049, 9077, 9105,
            9133, 9161, 9189, 9217, 9245,
            9274, 9302, 9331, 9359, 9388,
            9417, 9446, 9475, 9504, 9533,
            9562, 9591, 9621, 9650, 9680,
            9710, 9740, 9769, 9799, 9830,
            9860, 9890, 9920, 9951, 9981,
            10012, 10043, 10073, 10104, 10135,
            10166, 10198, 10229, 10260, 10292,
            10323, 10355, 10387, 10419, 10451,
            10483, 10515, 10547, 10580, 10612,
            10645, 10677, 10710, 10743, 10776,
            10809, 10842, 10876, 10909, 10942,
            10976, 11010, 11044, 11077, 11111,
            11146, 11180, 11214, 11248, 11283,
            11318, 11352, 11387, 11422, 11457,
            11492, 11528, 11563, 11599, 11634,
            11670, 11706, 11742, 11778, 11814,
            11850, 11887, 11923, 11960, 11996,
            12033, 12070, 12107, 12144, 12182,
            12219, 12257, 12294, 12332, 12370,
            12408, 12446, 12484, 12522, 12561,
            12599, 12638, 12677, 12716, 12755,
            12794, 12833, 12873, 12912, 12952,
            12992, 13032, 13072, 13112, 13152,
            13192, 13233, 13274, 13314, 13355,
            13396, 13437, 13479, 13520, 13561,
            13603, 13645, 13687, 13729, 13771,
            13813, 13856, 13898, 13941, 13984,
            14027, 14070, 14113, 14156, 14200,
            14243, 14287, 14331, 14375, 14419,
            14463, 14508, 14552, 14597, 14642,
            14687, 14732, 14777, 14823, 14868,
            14914, 14960, 15005, 15052, 15098,
            15144, 15191, 15237, 15284, 15331,
            15378, 15425, 15473, 15520, 15568,
            15616, 15664, 15712, 15760, 15808,
            15857, 15906, 15955, 16004, 16053,
            16102, 16151, 16201, 16251, 16301,
            16351, 16401, 16451, 16502, 16553,
            16603, 16654, 16706, 16757, 16808,
            16860, 16912, 16964, 17016, 17068,
            17121, 17173, 17226, 17279, 17332,
            17385, 17438, 17492, 17546, 17600,
            17654, 17708, 17762, 17817, 17872,
            17926, 17982, 18037, 18092, 18148,
            18203, 18259, 18315, 18372, 18428,
            18485, 18542, 18598, 18656, 18713,
            18770, 18828, 18886, 18944, 19002,
            19060, 19119, 19178, 19237, 19296,
            19355, 19414, 19474, 19534, 19594,
            19654, 19714, 19775, 19836, 19897,
            19958, 20019, 20081, 20142, 20204,
            20266, 20328, 20391, 20454, 20516,
            20579, 20643, 20706, 20770, 20833,
            20897, 20962, 21026, 21091, 21155,
            21220, 21286, 21351, 21417, 21482,
            21548, 21615, 21681, 21748, 21814,
            21881, 21949, 22016, 22084, 22151,
            22220, 22288, 22356, 22425, 22494,
            22563, 22632, 22702, 22771, 22841,
            22912, 22982, 23053, 23123, 23194,
            23266, 23337, 23409, 23481, 23553,
            23625, 23698, 23771, 23844, 23917,
            23990, 24064, 24138, 24212, 24287,
            24361, 24436, 24511, 24586, 24662,
            24738, 24814, 24890, 24966, 25043,
            25120, 25197, 25275, 25352, 25430,
            25508, 25587, 25665, 25744, 25823,
            25902, 25982, 26062, 26142, 26222,
            26303, 26384, 26465, 26546, 26627,
            26709, 26791, 26874, 26956, 27039,
            27122, 27205, 27289, 27373, 27457,
            27541, 27626, 27711, 27796, 27881,
            27967, 28053, 28139, 28226, 28312,
            28399, 28486, 28574, 28662, 28750,
            28838, 28927, 29016, 29105, 29194,
            29284, 29374, 29464, 29555, 29645,
            29736, 29828, 29919, 30011, 30104,
            30196, 30289, 30382, 30475, 30569,
            30663, 30757, 30851, 30946, 31041,
            31137, 31232, 31328, 31425, 31521,
            31618, 31715, 31813, 31910, 32008,
            32107, 32205, 32304, 32403, 32503,
            32603, 32703, 32804, 32904, 33005,
            33107, 33209, 33311, 33413, 33516,
            33619, 33722, 33825, 33929, 34034,
            34138, 34243, 34348, 34454, 34560,
            34666, 34772, 34879, 34986, 35094,
            35202, 35310, 35418, 35527, 35636,
            35746, 35856, 35966, 36076, 36187,
            36298, 36410, 36522, 36634, 36746,
            36859, 36973, 37086, 37200, 37314,
            37429, 37544, 37659, 37775, 37891,
            38008, 38124, 38241, 38359, 38477,
            38595, 38714, 38833, 38952, 39072,
            39192, 39312, 39433, 39554, 39675,
            39797, 39920, 40042, 40165, 40289,
            40413, 40537, 40661, 40786, 40911,
            41037, 41163, 41290, 41417, 41544,
            41671, 41800, 41928, 42057, 42186,
            42316, 42446, 42576, 42707, 42838,
            42970, 43102, 43234, 43367, 43500,
            43634, 43768, 43902, 44037, 44173,
            44308, 44444, 44581, 44718, 44855,
            44993, 45131, 45270, 45409, 45549,
            45689, 45829, 45970, 46111, 46253,
            46395, 46537, 46680, 46824, 46968,
            47112, 47257, 47402, 47548, 47694,
            47840, 47987, 48135, 48283, 48431,
            48580, 48729, 48879, 49029, 49180,
            49331, 49482, 49634, 49787, 49940,
            50093, 50247, 50401, 50556, 50712,
            50867, 51024, 51181, 51338, 51495,
            51654, 51812, 51972, 52131, 52291,
            52452, 52613, 52775, 52937, 53100,
            53263, 53427, 53591, 53755, 53921,
            54086, 54252, 54419, 54586, 54754,
            54922, 55091, 55260, 55430, 55600,
            55771, 55943, 56114, 56287, 56460,
            56633, 56807, 56982, 57157, 57333,
            57509, 57685, 57863, 58040, 58219,
            58398, 58577, 58757, 58938, 59119,
            59300, 59483, 59665, 59849, 60033,
            60217, 60402, 60588, 60774, 60960,
            61148, 61336, 61524, 61713, 61903,
            62093, 62284, 62475, 62667, 62860,
            63053, 63247, 63441, 63636, 63831,
            64027, 64224, 64422, 64619, 64818,
            65017, 65217, 65417, 65618, 65820,
            66022, 66225, 66429, 66633, 66837,
            67043, 67249, 67455, 67663, 67870,
            68079, 68288, 68498, 68708, 68920,
            69131, 69344, 69557, 69771, 69985,
            70200, 70416, 70632, 70849, 71067,
            71285, 71504, 71724, 71944, 72165,
            72387, 72609, 72833, 73056, 73281,
            73506, 73732, 73958, 74186, 74414,
            74642, 74872, 75102, 75332, 75564,
            75796, 76029, 76262, 76497, 76732,
            76968, 77204, 77441, 77679, 77918,
            78157, 78398, 78638, 78880, 79122,
            79366, 79609, 79854, 80099, 80345,
            80592, 80840, 81088, 81338, 81587,
            81838, 82090, 82342, 82595, 82849,
            83103, 83358, 83615, 83872, 84129,
            84388, 84647, 84907, 85168, 85430,
            85692, 85955, 86220, 86485, 86750,
            87017, 87284, 87552, 87821, 88091,
            88362, 88633, 88906, 89179, 89453,
            89728, 90003, 90280, 90557, 90836,
            91115, 91395, 91676, 91957, 92240,
            92523, 92807, 93093, 93379, 93666,
            93953, 94242, 94532, 94822, 95113,
            95406, 95699, 95993, 96288, 96584,
            96881, 97178, 97477, 97776, 98077,
            98378, 98680, 98984, 99288, 99593,
            99899, 100206, 100514, 100822, 101132,
            101443, 101755, 102067, 102381, 102696,
            103011, 103328, 103645, 103964, 104283,
            104603, 104925, 105247, 105571, 105895,
            106220, 106547, 106874, 107203, 107532,
            107862, 108194, 108526, 108860, 109194,
            109530, 109866, 110204, 110542, 110882,
            111223, 111565, 111907, 112251, 112596,
            112942, 113289, 113637, 113986, 114337,
            114688, 115040, 115394, 115748, 116104,
            116461, 116819, 117178, 117538, 117899,
            118261, 118624, 118989, 119354, 119721,
            120089, 120458, 120828, 121199, 121572,
            121945, 122320, 122696, 123073, 123451,
            123830, 124211, 124593, 124975, 125359,
            125745, 126131, 126518, 126907, 127297,
            127688, 128081, 128474, 128869, 129265,
            129662, 130061, 130260
         ) ),
        max_error = cms.double(0.6152529479288091),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut2 = cms.PSet(
        lut = cms.vint32( (
            256, 256, 257, 258, 259,
            260, 260, 261, 262, 263,
            264, 264, 265, 266, 267,
            268, 268, 269, 270, 271,
            272, 273, 273, 274, 275,
            276, 277, 278, 279, 279,
            280, 281, 282, 283, 284,
            285, 285, 286, 287, 288,
            289, 290, 291, 292, 293,
            293, 294, 295, 296, 297,
            298, 299, 300, 301, 302,
            303, 303, 304, 305, 306,
            307, 308, 309, 310, 311,
            312, 313, 314, 315, 316,
            317, 318, 319, 320, 321,
            322, 323, 324, 325, 326,
            327, 328, 329, 330, 331,
            332, 333, 334, 335, 336,
            337, 338, 339, 340, 341,
            342, 343, 344, 345, 346,
            347, 348, 349, 351, 352,
            353, 354, 355, 356, 357,
            358, 359, 360, 361, 363,
            364, 365, 366, 367, 368,
            369, 370, 372, 373, 374,
            375, 376, 377, 379, 380,
            381, 382, 383, 384, 386,
            387, 388, 389, 390, 392,
            393, 394, 395, 396, 398,
            399, 400, 401, 402, 404,
            405, 406, 407, 409, 410,
            411, 412, 414, 415, 416,
            418, 419, 420, 421, 423,
            424, 425, 427, 428, 429,
            431, 432, 433, 435, 436,
            437, 439, 440, 441, 443,
            444, 445, 447, 448, 449,
            451, 452, 454, 455, 456,
            458, 459, 461, 462, 463,
            465, 466, 468, 469, 471,
            472, 474, 475, 476, 478,
            479, 481, 482, 484, 485,
            487, 488, 490, 491, 493,
            494, 496, 497, 499, 500,
            502, 503, 505, 507, 508,
            510, 511, 513, 514, 516,
            518, 519, 521, 522, 524,
            526, 527, 529, 530, 532,
            534, 535, 537, 539, 540,
            542, 544, 545, 547, 549,
            550, 552, 554, 555, 557,
            559, 561, 562, 564, 566,
            567, 569, 571, 573, 575,
            576, 578, 580, 582, 583,
            585, 587, 589, 591, 592,
            594, 596, 598, 600, 602,
            603, 605, 607, 609, 611,
            613, 615, 617, 618, 620,
            622, 624, 626, 628, 630,
            632, 634, 636, 638, 640,
            642, 644, 646, 648, 650,
            652, 654, 656, 658, 660,
            662, 664, 666, 668, 670,
            672, 674, 676, 678, 680,
            682, 684, 686, 688, 691,
            693, 695, 697, 699, 701,
            703, 706, 708, 710, 712,
            714, 717, 719, 721, 723,
            725, 728, 730, 732, 734,
            737, 739, 741, 743, 746,
            748, 750, 753, 755, 757,
            760, 762, 764, 767, 769,
            771, 774, 776, 778, 781,
            783, 786, 788, 790, 793,
            795, 798, 800, 803, 805,
            808, 810, 813, 815, 818,
            820, 823, 825, 828, 830,
            833, 835, 838, 840, 843,
            846, 848, 851, 853, 856,
            859, 861, 864, 867, 869,
            872, 875, 877, 880, 883,
            885, 888, 891, 894, 896,
            899, 902, 905, 907, 910,
            913, 916, 919, 921, 924,
            927, 930, 933, 936, 939,
            941, 944, 947, 950, 953,
            956, 959, 962, 965, 968,
            971, 974, 977, 980, 983,
            986, 989, 992, 995, 998,
            1001, 1004, 1007, 1010, 1013,
            1017, 1020, 1023, 1026, 1029,
            1032, 1035, 1039, 1042, 1045,
            1048, 1051, 1055, 1058, 1061,
            1064, 1068, 1071, 1074, 1078,
            1081, 1084, 1088, 1091, 1094,
            1098, 1101, 1104, 1108, 1111,
            1115, 1118, 1121, 1125, 1128,
            1132, 1135, 1139, 1142, 1146,
            1149, 1153, 1156, 1160, 1163,
            1167, 1171, 1174, 1178, 1181,
            1185, 1189, 1192, 1196, 1200,
            1203, 1207, 1211, 1214, 1218,
            1222, 1226, 1229, 1233, 1237,
            1241, 1245, 1249, 1252, 1256,
            1260, 1264, 1268, 1272, 1276,
            1280, 1283, 1287, 1291, 1295,
            1299, 1303, 1307, 1311, 1315,
            1319, 1323, 1328, 1332, 1336,
            1340, 1344, 1348, 1352, 1356,
            1360, 1365, 1369, 1373, 1377,
            1382, 1386, 1390, 1394, 1399,
            1403, 1407, 1412, 1416, 1420,
            1425, 1429, 1433, 1438, 1442,
            1447, 1451, 1455, 1460, 1464,
            1469, 1473, 1478, 1483, 1487,
            1492, 1496, 1501, 1505, 1510,
            1515, 1519, 1524, 1529, 1533,
            1538, 1543, 1548, 1552, 1557,
            1562, 1567, 1572, 1576, 1581,
            1586, 1591, 1596, 1601, 1606,
            1611, 1616, 1620, 1625, 1630,
            1635, 1640, 1646, 1651, 1656,
            1661, 1666, 1671, 1676, 1681,
            1686, 1692, 1697, 1702, 1707,
            1712, 1718, 1723, 1728, 1734,
            1739, 1744, 1750, 1755, 1760,
            1766, 1771, 1777, 1782, 1788,
            1793, 1799, 1804, 1810, 1815,
            1821, 1826, 1832, 1838, 1843,
            1849, 1855, 1860, 1866, 1872,
            1878, 1883, 1889, 1895, 1901,
            1907, 1912, 1918, 1924, 1930,
            1936, 1942, 1948, 1954, 1960,
            1966, 1972, 1978, 1984, 1990,
            1996, 2003, 2009, 2015, 2021,
            2027, 2033, 2040, 2046, 2052,
            2059, 2065, 2071, 2078, 2084,
            2090, 2097, 2103, 2110, 2116,
            2123, 2129, 2136, 2142, 2149,
            2156, 2162, 2169, 2175, 2182,
            2189, 2196, 2202, 2209, 2216,
            2223, 2230, 2236, 2243, 2250,
            2257, 2264, 2271, 2278, 2285,
            2292, 2299, 2306, 2313, 2320,
            2327, 2335, 2342, 2349, 2356,
            2363, 2371, 2378, 2385, 2393,
            2400, 2407, 2415, 2422, 2430,
            2437, 2444, 2452, 2460, 2467,
            2475, 2482, 2490, 2498, 2505,
            2513, 2521, 2528, 2536, 2544,
            2552, 2560, 2567, 2575, 2583,
            2591, 2599, 2607, 2615, 2623,
            2631, 2639, 2647, 2656, 2664,
            2672, 2680, 2688, 2697, 2705,
            2713, 2722, 2730, 2738, 2747,
            2755, 2764, 2772, 2781, 2789,
            2798, 2806, 2815, 2824, 2832,
            2841, 2850, 2858, 2867, 2876,
            2885, 2894, 2903, 2912, 2921,
            2930, 2939, 2948, 2957, 2966,
            2975, 2984, 2993, 3002, 3012,
            3021, 3030, 3039, 3049, 3058,
            3067, 3077, 3086, 3096, 3105,
            3115, 3124, 3134, 3144, 3153,
            3163, 3173, 3183, 3192, 3202,
            3212, 3222, 3232, 3242, 3252,
            3262, 3272, 3282, 3292, 3302,
            3312, 3322, 3332, 3343, 3353,
            3363, 3374, 3384, 3394, 3405,
            3415, 3426, 3436, 3447, 3457,
            3468, 3479, 3489, 3500, 3511,
            3522, 3532, 3543, 3554, 3565,
            3576, 3587, 3598, 3609, 3620,
            3631, 3642, 3654, 3665, 3676,
            3687, 3699, 3710, 3722, 3733,
            3744, 3756, 3767, 3779, 3791,
            3802, 3814, 3826, 3837, 3849,
            3861, 3873, 3885, 3897, 3909,
            3921, 3933, 3945, 3957, 3969,
            3981, 3994, 4006, 4018, 4031,
            4043, 4055, 4068, 4080, 4093,
            4105, 4118, 4131, 4143, 4156,
            4169, 4182, 4195, 4207, 4220,
            4233, 4246, 4259, 4272, 4286,
            4299, 4312, 4325, 4339, 4352,
            4365, 4379, 4392, 4406, 4419,
            4433, 4446, 4460, 4474, 4487,
            4501, 4515, 4529, 4543, 4557,
            4571, 4585, 4599, 4613, 4627,
            4641, 4656, 4670, 4684, 4699,
            4713, 4728, 4742, 4757, 4771,
            4786, 4801, 4816, 4830, 4845,
            4860, 4875, 4890, 4905, 4920,
            4935, 4950, 4966, 4981, 4996,
            5011, 5027, 5042, 5058, 5073,
            5089, 5105, 5120, 5136, 5152,
            5168, 5183, 5199, 5215, 5231,
            5247, 5264, 5280, 5296, 5312,
            5329, 5345, 5361, 5378, 5394,
            5411, 5428, 5444, 5461, 5478,
            5495, 5512, 5528, 5545, 5562,
            5580, 5597, 5614, 5631, 5648,
            5666, 5683, 5701, 5718, 5736,
            5753, 5771, 5789, 5807, 5824,
            5842, 5860, 5878, 5896, 5914,
            5933, 5951, 5969, 5987, 6006,
            6024, 6043, 6061, 6080, 6099,
            6117, 6136, 6155, 6174, 6193,
            6212, 6231, 6250, 6269, 6289,
            6308, 6327, 6347, 6366, 6386,
            6406, 6425, 6445, 6465, 6485,
            6505, 6525, 6545, 6565, 6585,
            6605, 6625, 6646, 6666, 6687,
            6707, 6728, 6749, 6769, 6790,
            6811, 6832, 6853, 6874, 6895,
            6916, 6937, 6959, 6980, 7002,
            7023, 7045, 7066, 7088, 7110,
            7132, 7154, 7176, 7198, 7220,
            7242, 7264, 7286, 7309, 7331,
            7354, 7376, 7399, 7422, 7445,
            7468, 7490, 7513, 7537, 7560,
            7583, 7606, 7630, 7653, 7677,
            7700, 7724, 7748, 7771, 7795,
            7819, 7843, 7867, 7892, 7916,
            7940, 7964, 7989, 8014, 8038,
            8063, 8088, 8112, 8137, 8162,
            8187, 8213, 8238, 8263, 8289,
            8314, 8340, 8365, 8391, 8417,
            8443, 8468, 8495, 8521, 8547,
            8573, 8599, 8626, 8652, 8679,
            8706, 8732, 8759, 8786, 8813,
            8840, 8867, 8895, 8922, 8949,
            8977, 9004, 9032, 9060, 9088,
            9116, 9144, 9172, 9200, 9228,
            9256, 9285, 9313, 9342, 9371,
            9400, 9428, 9457, 9486, 9516,
            9545, 9574, 9604, 9633, 9663,
            9692, 9722, 9752, 9782, 9812,
            9842, 9872, 9903, 9933, 9964,
            9994, 10025, 10056, 10087, 10118,
            10149, 10180, 10211, 10243, 10274,
            10306, 10337, 10369, 10401, 10433,
            10465, 10497, 10529, 10562, 10594,
            10627, 10659, 10692, 10725, 10758,
            10791, 10824, 10858, 10891, 10924,
            10958, 10992, 11025, 11059, 11093,
            11127, 11161, 11196, 11230, 11265,
            11299, 11334, 11369, 11404, 11439,
            11474, 11509, 11545, 11580, 11616,
            11651, 11687, 11723, 11759, 11795,
            11831, 11868, 11904, 11941, 11978,
            12014, 12051, 12088, 12125, 12163,
            12200, 12238, 12275, 12313, 12351,
            12389, 12427, 12465, 12503, 12542,
            12580, 12619, 12658, 12696, 12735,
            12775, 12814, 12853, 12893, 12932,
            12972, 13012, 13052, 13092, 13132,
            13173, 13213, 13254, 13294, 13335,
            13376, 13417, 13459, 13500, 13541,
            13583, 13625, 13667, 13709, 13751,
            13793, 13835, 13878, 13920, 13963,
            14006, 14049, 14092, 14136, 14179,
            14223, 14266, 14310, 14354, 14398,
            14443, 14487, 14531, 14576, 14621,
            14666, 14711, 14756, 14801, 14847,
            14892, 14938, 14984, 15030, 15076,
            15123, 15169, 15216, 15263, 15309,
            15356, 15404, 15451, 15498, 15546,
            15594, 15642, 15690, 15738, 15786,
            15835, 15884, 15932, 15981, 16030,
            16080, 16129, 16179, 16228, 16278,
            16328, 16378, 16429, 16479, 16530,
            16581, 16632, 16683, 16734, 16785,
            16837, 16889, 16941, 16993, 17045,
            17097, 17150, 17202, 17255, 17308,
            17361, 17415, 17468, 17522, 17576,
            17630, 17684, 17738, 17793, 17848,
            17902, 17957, 18013, 18068, 18123,
            18179, 18235, 18291, 18347, 18404,
            18460, 18517, 18574, 18631, 18688,
            18746, 18803, 18861, 18919, 18977,
            19035, 19094, 19152, 19211, 19270,
            19330, 19389, 19448, 19508, 19568,
            19628, 19689, 19749, 19810, 19871,
            19932, 19993, 20054, 20116, 20178,
            20240, 20302, 20364, 20427, 20490,
            20553, 20616, 20679, 20743, 20806,
            20870, 20935, 20999, 21063, 21128,
            21193, 21258, 21323, 21389, 21455,
            21521, 21587, 21653, 21720, 21786,
            21853, 21920, 21988, 22055, 22123,
            22191, 22259, 22328, 22396, 22465,
            22534, 22603, 22673, 22742, 22812,
            22882, 22953, 23023, 23094, 23165,
            23236, 23308, 23379, 23451, 23523,
            23595, 23668, 23741, 23814, 23887,
            23960, 24034, 24108, 24182, 24256,
            24330, 24405, 24480, 24555, 24631,
            24707, 24783, 24859, 24935, 25012,
            25089, 25166, 25243, 25320, 25398,
            25476, 25555, 25633, 25712, 25791,
            25870, 25950, 26029, 26109, 26190,
            26270, 26351, 26432, 26513, 26594,
            26676, 26758, 26840, 26923, 27006,
            27088, 27172, 27255, 27339, 27423,
            27507, 27592, 27677, 27762, 27847,
            27932, 28018, 28104, 28191, 28277,
            28364, 28451, 28539, 28626, 28714,
            28803, 28891, 28980, 29069, 29158,
            29248, 29338, 29428, 29518, 29609,
            29700, 29791, 29883, 29975, 30067,
            30159, 30252, 30345, 30438, 30532,
            30625, 30719, 30814, 30909, 31003,
            31099, 31194, 31290, 31386, 31483,
            31579, 31677, 31774, 31871, 31969,
            32068, 32166, 32265, 32364, 32464,
            32563, 32663, 32764, 32864, 32965,
            33067, 33168, 33270, 33372, 33475,
            33578, 33681, 33785, 33888, 33992,
            34097, 34202, 34307, 34412, 34518,
            34624, 34730, 34837, 34944, 35051,
            35159, 35267, 35376, 35484, 35593,
            35703, 35812, 35922, 36033, 36144,
            36255, 36366, 36478, 36590, 36702,
            36815, 36928, 37042, 37155, 37270,
            37384, 37499, 37614, 37730, 37846,
            37962, 38079, 38196, 38313, 38431,
            38549, 38667, 38786, 38905, 39025,
            39145, 39265, 39386, 39507, 39628,
            39750, 39872, 39994, 40117, 40241,
            40364, 40488, 40613, 40737, 40863,
            40988, 41114, 41240, 41367, 41494,
            41622, 41750, 41878, 42007, 42136,
            42265, 42395, 42525, 42656, 42787,
            42919, 43050, 43183, 43315, 43448,
            43582, 43716, 43850, 43985, 44120,
            44256, 44392, 44528, 44665, 44802,
            44940, 45078, 45216, 45355, 45495,
            45634, 45775, 45915, 46056, 46198,
            46340, 46482, 46625, 46768, 46912,
            47056, 47201, 47346, 47491, 47637,
            47784, 47930, 48078, 48225, 48374,
            48522, 48671, 48821, 48971, 49121,
            49272, 49424, 49576, 49728, 49881,
            50034, 50188, 50342, 50497, 50652,
            50807, 50963, 51120, 51277, 51435,
            51593, 51751, 51910, 52070, 52230,
            52390, 52551, 52713, 52875, 53037,
            53200, 53364, 53528, 53692, 53857,
            54022, 54188, 54355, 54522, 54690,
            54858, 55026, 55195, 55365, 55535,
            55706, 55877, 56048, 56221, 56393,
            56567, 56740, 56915, 57090, 57265,
            57441, 57618, 57795, 57972, 58150,
            58329, 58508, 58688, 58868, 59049,
            59231, 59413, 59595, 59778, 59962,
            60146, 60331, 60516, 60702, 60889,
            61076, 61264, 61452, 61641, 61830,
            62020, 62211, 62402, 62594, 62786,
            62979, 63172, 63366, 63561, 63756,
            63952, 64149, 64346, 64544, 64742,
            64941, 65140, 65341, 65541, 65743,
            65945, 66147, 66351, 66555, 66759,
            66964, 67170, 67376, 67583, 67791,
            67999, 68208, 68418, 68628, 68839,
            69050, 69263, 69475, 69689, 69903,
            70118, 70333, 70549, 70766, 70984,
            71202, 71421, 71640, 71860, 72081,
            72302, 72525, 72747, 72971, 73195,
            73420, 73646, 73872, 74099, 74327,
            74555, 74784, 75014, 75244, 75476,
            75707, 75940, 76173, 76407, 76642,
            76878, 77114, 77351, 77589, 77827,
            78066, 78306, 78547, 78788, 79030,
            79273, 79516, 79761, 80006, 80252,
            80498, 80746, 80994, 81243, 81492,
            81743, 81994, 82246, 82498, 82752,
            83006, 83261, 83517, 83774, 84031,
            84289, 84548, 84808, 85069, 85330,
            85592, 85855, 86119, 86384, 86649,
            86915, 87182, 87450, 87719, 87989,
            88259, 88530, 88802, 89075, 89349,
            89623, 89899, 90175, 90452, 90730,
            91009, 91288, 91569, 91850, 92132,
            92415, 92699, 92984, 93270, 93557,
            93844, 94132, 94422, 94712, 95003,
            95295, 95587, 95881, 96176, 96471,
            96768, 97065, 97363, 97662, 97963,
            98264, 98565, 98868, 99172, 99477,
            99783, 100089, 100397, 100705, 101015,
            101325, 101636, 101949, 102262, 102576,
            102891, 103207, 103525, 103843, 104162,
            104482, 104803, 105125, 105448, 105772,
            106097, 106423, 106750, 107078, 107407,
            107737, 108068, 108400, 108733, 109067,
            109402, 109738, 110076, 110414, 110753,
            111093, 111435, 111777, 112121, 112465,
            112811, 113157, 113505, 113854, 114204,
            114555, 114907, 115260, 115614, 115969,
            116325, 116683, 117041, 117401, 117762,
            118124, 118486, 118851, 119216, 119582,
            119949, 120318, 120688, 121059, 121431,
            121804, 122178, 122553, 122930, 123308,
            123687, 124067, 124448, 124830, 125214,
            125598, 125984, 126371, 126760, 127149,
            127540, 127932, 128325, 128719, 129115,
            129511, 129909, 130309, 130709, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071
         ) ),
        max_error = cms.double(5748.616225984908),
        output_scale_factor = cms.double(0.953125),
        unused_lsbs = cms.uint32(2)
    ),
    inv_mass_checks = cms.untracked.bool(False),
    maxDz = cms.double(1),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    sanity_checks = cms.untracked.bool(False),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    )
)


process.TripleTkMuon530OSMassMax9 = cms.EDFilter("L1GTTripleObjectCond",
    collection1 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        minPt = cms.double(5),
        minQualityScore = cms.uint32(0),
        tag = cms.InputTag("l1tGTProducer","GMTTkMuons")
    ),
    collection2 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        minPt = cms.double(3),
        minQualityScore = cms.uint32(0),
        tag = cms.InputTag("l1tGTProducer","GMTTkMuons")
    ),
    collection3 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        minPt = cms.double(0),
        minQualityScore = cms.uint32(0),
        tag = cms.InputTag("l1tGTProducer","GMTTkMuons")
    ),
    correl12 = cms.PSet(
        maxDz = cms.double(1),
        maxInvMass = cms.double(9),
        minDR = cms.double(0),
        os = cms.bool(True)
    ),
    correl13 = cms.PSet(
        maxDz = cms.double(1),
        minDR = cms.double(0)
    ),
    correl23 = cms.PSet(
        minDR = cms.double(0)
    ),
    cos_phi_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            487, 487, 487, 487, 487,
            487, 487, 487, 487, 487,
            487, 486, 486, 486, 486,
            486, 486, 486, 485, 485,
            485, 485, 485, 485, 484,
            484, 484, 484, 484, 483,
            483, 483, 483, 483, 482,
            482, 482, 482, 481, 481,
            481, 481, 480, 480, 480,
            480, 479, 479, 479, 478,
            478, 478, 478, 477, 477,
            477, 476, 476, 476, 475,
            475, 475, 474, 474, 474,
            473, 473, 472, 472, 472,
            471, 471, 471, 470, 470,
            469, 469, 468, 468, 468,
            467, 467, 466, 466, 465,
            465, 465, 464, 464, 463,
            463, 462, 462, 461, 461,
            460, 460, 459, 459, 458,
            458, 457, 457, 456, 456,
            455, 454, 454, 453, 453,
            452, 452, 451, 451, 450,
            449, 449, 448, 448, 447,
            446, 446, 445, 445, 444,
            443, 443, 442, 441, 441,
            440, 440, 439, 438, 438,
            437, 436, 436, 435, 434,
            434, 433, 432, 431, 431,
            430, 429, 429, 428, 427,
            426, 426, 425, 424, 423,
            423, 422, 421, 420, 420,
            419, 418, 417, 417, 416,
            415, 414, 413, 413, 412,
            411, 410, 409, 409, 408,
            407, 406, 405, 405, 404,
            403, 402, 401, 400, 399,
            399, 398, 397, 396, 395,
            394, 393, 392, 392, 391,
            390, 389, 388, 387, 386,
            385, 384, 383, 382, 381,
            381, 380, 379, 378, 377,
            376, 375, 374, 373, 372,
            371, 370, 369, 368, 367,
            366, 365, 364, 363, 362,
            361, 360, 359, 358, 357,
            356, 355, 354, 353, 352,
            351, 350, 349, 348, 347,
            346, 345, 343, 342, 341,
            340, 339, 338, 337, 336,
            335, 334, 333, 332, 330,
            329, 328, 327, 326, 325,
            324, 323, 322, 320, 319,
            318, 317, 316, 315, 314,
            312, 311, 310, 309, 308,
            307, 306, 304, 303, 302,
            301, 300, 298, 297, 296,
            295, 294, 293, 291, 290,
            289, 288, 286, 285, 284,
            283, 282, 280, 279, 278,
            277, 275, 274, 273, 272,
            270, 269, 268, 267, 265,
            264, 263, 262, 260, 259,
            258, 257, 255, 254, 253,
            252, 250, 249, 248, 246,
            245, 244, 242, 241, 240,
            239, 237, 236, 235, 233,
            232, 231, 229, 228, 227,
            225, 224, 223, 221, 220,
            219, 217, 216, 215, 213,
            212, 211, 209, 208, 207,
            205, 204, 203, 201, 200,
            198, 197, 196, 194, 193,
            192, 190, 189, 187, 186,
            185, 183, 182, 181, 179,
            178, 176, 175, 174, 172,
            171, 169, 168, 167, 165,
            164, 162, 161, 159, 158,
            157, 155, 154, 152, 151,
            150, 148, 147, 145, 144,
            142, 141, 140, 138, 137,
            135, 134, 132, 131, 129,
            128, 127, 125, 124, 122,
            121, 119, 118, 116, 115,
            113, 112, 111, 109, 108,
            106, 105, 103, 102, 100,
            99, 97, 96, 94, 93,
            92, 90, 89, 87, 86,
            84, 83, 81, 80, 78,
            77, 75, 74, 72, 71,
            69, 68, 66, 65, 63,
            62, 60, 59, 58, 56,
            55, 53, 52, 50, 49,
            47, 46, 44, 43, 41,
            40, 38, 37, 35, 34,
            32, 31, 29, 28, 26,
            25, 23, 22, 20, 19,
            17, 16, 14, 13, 11,
            10, 8, 7, 5, 4,
            2, 1, -1, -2, -4,
            -5, -7, -8, -10, -11,
            -13, -14, -16, -17, -19,
            -20, -22, -23, -25, -26,
            -28, -29, -31, -32, -34,
            -35, -37, -38, -40, -41,
            -43, -44, -46, -47, -49,
            -50, -52, -53, -55, -56,
            -58, -59, -60, -62, -63,
            -65, -66, -68, -69, -71,
            -72, -74, -75, -77, -78,
            -80, -81, -83, -84, -86,
            -87, -89, -90, -92, -93,
            -94, -96, -97, -99, -100,
            -102, -103, -105, -106, -108,
            -109, -111, -112, -113, -115,
            -116, -118, -119, -121, -122,
            -124, -125, -127, -128, -129,
            -131, -132, -134, -135, -137,
            -138, -140, -141, -142, -144,
            -145, -147, -148, -150, -151,
            -152, -154, -155, -157, -158,
            -159, -161, -162, -164, -165,
            -167, -168, -169, -171, -172,
            -174, -175, -176, -178, -179,
            -181, -182, -183, -185, -186,
            -187, -189, -190, -192, -193,
            -194, -196, -197, -198, -200,
            -201, -203, -204, -205, -207,
            -208, -209, -211, -212, -213,
            -215, -216, -217, -219, -220,
            -221, -223, -224, -225, -227,
            -228, -229, -231, -232, -233,
            -235, -236, -237, -239, -240,
            -241, -242, -244, -245, -246,
            -248, -249, -250, -252, -253,
            -254, -255, -257, -258, -259,
            -260, -262, -263, -264, -265,
            -267, -268, -269, -270, -272,
            -273, -274, -275, -277, -278,
            -279, -280, -282, -283, -284,
            -285, -286, -288, -289, -290,
            -291, -293, -294, -295, -296,
            -297, -298, -300, -301, -302,
            -303, -304, -306, -307, -308,
            -309, -310, -311, -312, -314,
            -315, -316, -317, -318, -319,
            -320, -322, -323, -324, -325,
            -326, -327, -328, -329, -330,
            -332, -333, -334, -335, -336,
            -337, -338, -339, -340, -341,
            -342, -343, -345, -346, -347,
            -348, -349, -350, -351, -352,
            -353, -354, -355, -356, -357,
            -358, -359, -360, -361, -362,
            -363, -364, -365, -366, -367,
            -368, -369, -370, -371, -372,
            -373, -374, -375, -376, -377,
            -378, -379, -380, -381, -381,
            -382, -383, -384, -385, -386,
            -387, -388, -389, -390, -391,
            -392, -392, -393, -394, -395,
            -396, -397, -398, -399, -399,
            -400, -401, -402, -403, -404,
            -405, -405, -406, -407, -408,
            -409, -409, -410, -411, -412,
            -413, -413, -414, -415, -416,
            -417, -417, -418, -419, -420,
            -420, -421, -422, -423, -423,
            -424, -425, -426, -426, -427,
            -428, -429, -429, -430, -431,
            -431, -432, -433, -434, -434,
            -435, -436, -436, -437, -438,
            -438, -439, -440, -440, -441,
            -441, -442, -443, -443, -444,
            -445, -445, -446, -446, -447,
            -448, -448, -449, -449, -450,
            -451, -451, -452, -452, -453,
            -453, -454, -454, -455, -456,
            -456, -457, -457, -458, -458,
            -459, -459, -460, -460, -461,
            -461, -462, -462, -463, -463,
            -464, -464, -465, -465, -465,
            -466, -466, -467, -467, -468,
            -468, -468, -469, -469, -470,
            -470, -471, -471, -471, -472,
            -472, -472, -473, -473, -474,
            -474, -474, -475, -475, -475,
            -476, -476, -476, -477, -477,
            -477, -478, -478, -478, -478,
            -479, -479, -479, -480, -480,
            -480, -480, -481, -481, -481,
            -481, -482, -482, -482, -482,
            -483, -483, -483, -483, -483,
            -484, -484, -484, -484, -484,
            -485, -485, -485, -485, -485,
            -485, -486, -486, -486, -486,
            -486, -486, -486, -487, -487,
            -487, -487, -487, -487, -487,
            -487, -487, -487, -487, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488
         ) ),
        max_error = cms.double(0.0025338281044886835),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            489, 489, 489, 489, 489,
            489, 489, 489, 489, 489,
            489, 490, 490, 490, 490,
            490, 490, 490, 491, 491,
            491, 491, 491, 491, 492,
            492, 492, 492, 492, 493,
            493, 493, 493, 493, 494,
            494, 494, 494, 495, 495,
            495, 495, 496, 496, 496,
            496, 497, 497, 497, 498,
            498, 498, 499, 499, 499,
            499, 500, 500, 500, 501,
            501, 502, 502, 502, 503,
            503, 503, 504, 504, 504,
            505, 505, 506, 506, 507,
            507, 507, 508, 508, 509,
            509, 510, 510, 510, 511,
            511, 512, 512, 513, 513,
            514, 514, 515, 515, 516,
            516, 517, 517, 518, 518,
            519, 520, 520, 521, 521,
            522, 522, 523, 523, 524,
            525, 525, 526, 526, 527,
            528, 528, 529, 530, 530,
            531, 531, 532, 533, 533,
            534, 535, 535, 536, 537,
            537, 538, 539, 540, 540,
            541, 542, 542, 543, 544,
            545, 545, 546, 547, 548,
            548, 549, 550, 551, 551,
            552, 553, 554, 555, 555,
            556, 557, 558, 559, 560,
            560, 561, 562, 563, 564,
            565, 566, 567, 567, 568,
            569, 570, 571, 572, 573,
            574, 575, 576, 577, 577,
            578, 579, 580, 581, 582,
            583, 584, 585, 586, 587,
            588, 589, 590, 591, 592,
            593, 594, 595, 596, 598,
            599, 600, 601, 602, 603,
            604, 605, 606, 607, 608,
            610, 611, 612, 613, 614,
            615, 616, 618, 619, 620,
            621, 622, 623, 625, 626,
            627, 628, 629, 631, 632,
            633, 634, 636, 637, 638,
            639, 641, 642, 643, 644,
            646, 647, 648, 650, 651,
            652, 654, 655, 656, 658,
            659, 660, 662, 663, 665,
            666, 667, 669, 670, 672,
            673, 674, 676, 677, 679,
            680, 682, 683, 685, 686,
            687, 689, 690, 692, 693,
            695, 697, 698, 700, 701,
            703, 704, 706, 707, 709,
            710, 712, 714, 715, 717,
            719, 720, 722, 723, 725,
            727, 728, 730, 732, 733,
            735, 737, 738, 740, 742,
            744, 745, 747, 749, 750,
            752, 754, 756, 758, 759,
            761, 763, 765, 767, 768,
            770, 772, 774, 776, 778,
            779, 781, 783, 785, 787,
            789, 791, 793, 795, 796,
            798, 800, 802, 804, 806,
            808, 810, 812, 814, 816,
            818, 820, 822, 824, 826,
            828, 830, 832, 835, 837,
            839, 841, 843, 845, 847,
            849, 851, 854, 856, 858,
            860, 862, 864, 867, 869,
            871, 873, 875, 878, 880,
            882, 884, 887, 889, 891,
            894, 896, 898, 900, 903,
            905, 907, 910, 912, 915,
            917, 919, 922, 924, 927,
            929, 931, 934, 936, 939,
            941, 944, 946, 949, 951,
            954, 956, 959, 961, 964,
            966, 969, 971, 974, 977,
            979, 982, 984, 987, 990,
            992, 995, 998, 1000, 1003,
            1006, 1008, 1011, 1014, 1017,
            1019, 1022, 1025, 1028, 1030,
            1033, 1036, 1039, 1042, 1044,
            1047, 1050, 1053, 1056, 1059,
            1062, 1065, 1067, 1070, 1073,
            1076, 1079, 1082, 1085, 1088,
            1091, 1094, 1097, 1100, 1103,
            1106, 1109, 1112, 1115, 1118,
            1122, 1125, 1128, 1131, 1134,
            1137, 1140, 1143, 1147, 1150,
            1153, 1156, 1159, 1163, 1166,
            1169, 1172, 1176, 1179, 1182,
            1186, 1189, 1192, 1196, 1199,
            1202, 1206, 1209, 1212, 1216,
            1219, 1223, 1226, 1230, 1233,
            1237, 1240, 1244, 1247, 1251,
            1254, 1258, 1261, 1265, 1268,
            1272, 1276, 1279, 1283, 1287,
            1290, 1294, 1298, 1301, 1305,
            1309, 1312, 1316, 1320, 1324,
            1327, 1331, 1335, 1339, 1343,
            1347, 1350, 1354, 1358, 1362,
            1366, 1370, 1374, 1378, 1382,
            1386, 1390, 1394, 1398, 1402,
            1406, 1410, 1414, 1418, 1422,
            1426, 1430, 1434, 1439, 1443,
            1447, 1451, 1455, 1459, 1464,
            1468, 1472, 1476, 1481, 1485,
            1489, 1494, 1498, 1502, 1507,
            1511, 1516, 1520, 1524, 1529,
            1533, 1538, 1542, 1547, 1551,
            1556, 1560, 1565, 1569, 1574,
            1579, 1583, 1588, 1592, 1597,
            1602, 1606, 1611, 1616, 1621,
            1625, 1630, 1635, 1640, 1645,
            1649, 1654, 1659, 1664, 1669,
            1674, 1679, 1684, 1689, 1693,
            1698, 1703, 1708, 1714, 1719,
            1724, 1729, 1734, 1739, 1744,
            1749, 1754, 1760, 1765, 1770,
            1775, 1780, 1786, 1791, 1796,
            1802, 1807, 1812, 1818, 1823,
            1828, 1834, 1839, 1845, 1850,
            1856, 1861, 1867, 1872, 1878,
            1883, 1889, 1894, 1900, 1906,
            1911, 1917, 1923, 1929, 1934,
            1940, 1946, 1952, 1957, 1963,
            1969, 1975, 1981, 1987, 1993,
            1999, 2004, 2010, 2016, 2022,
            2028, 2035, 2041, 2047, 2053,
            2059, 2065, 2071, 2077, 2084,
            2090, 2096, 2102, 2109, 2115,
            2121, 2128, 2134, 2140, 2147,
            2153, 2160, 2166, 2173, 2179,
            2186, 2192, 2199, 2205, 2212,
            2219, 2225, 2232, 2239, 2245,
            2252, 2259, 2266, 2272, 2279,
            2286, 2293, 2300, 2307, 2314,
            2321, 2328, 2335, 2342, 2349,
            2356, 2363, 2370, 2377, 2384,
            2391, 2398, 2406, 2413, 2420,
            2427, 2435, 2442, 2449, 2457,
            2464, 2472, 2479, 2487, 2494,
            2502, 2509, 2517, 2524, 2532,
            2539, 2547, 2555, 2563, 2570,
            2578, 2586, 2594, 2601, 2609,
            2617, 2625, 2633, 2641, 2649,
            2657, 2665, 2673, 2681, 2689,
            2697, 2705, 2714, 2722, 2730,
            2738, 2747, 2755, 2763, 2772,
            2780, 2788, 2797, 2805, 2814,
            2822, 2831, 2839, 2848, 2857,
            2865, 2874, 2883, 2891, 2900,
            2909, 2918, 2927, 2935, 2944,
            2953, 2962, 2971, 2980, 2989,
            2998, 3007, 3016, 3026, 3035,
            3044, 3053, 3062, 3072, 3081,
            3090, 3100, 3109, 3119, 3128,
            3138, 3147, 3157, 3166, 3176,
            3186, 3195, 3205, 3215, 3224,
            3234, 3244, 3254, 3264, 3274,
            3284, 3294, 3304, 3314, 3324,
            3334, 3344, 3354, 3364, 3375,
            3385, 3395, 3405, 3416, 3426,
            3437, 3447, 3458, 3468, 3479,
            3489, 3500, 3510, 3521, 3532,
            3543, 3553, 3564, 3575, 3586,
            3597, 3608, 3619, 3630, 3641,
            3652, 3663, 3674, 3685, 3697,
            3708, 3719, 3730, 3742, 3753,
            3765, 3776, 3788, 3799, 3811,
            3822, 3834, 3846, 3857, 3869,
            3881, 3893, 3905, 3917, 3929,
            3941, 3953, 3965, 3977, 3989,
            4001, 4013, 4025, 4038, 4050,
            4062, 4075, 4087, 4100, 4112,
            4125, 4137, 4150, 4163, 4175,
            4188, 4201, 4214, 4226, 4239,
            4252, 4265, 4278, 4291, 4304,
            4318, 4331, 4344, 4357, 4371,
            4384, 4397, 4411, 4424, 4438,
            4451, 4465, 4479, 4492, 4506,
            4520, 4533, 4547, 4561, 4575,
            4589, 4603, 4617, 4631, 4645,
            4660, 4674, 4688, 4703, 4717,
            4731, 4746, 4760, 4775, 4789,
            4804, 4819, 4833, 4848, 4863,
            4878, 4893, 4908, 4923, 4938,
            4953, 4968, 4983, 4999, 5014,
            5029, 5045, 5060, 5075, 5091,
            5107, 5122, 5138, 5154, 5169,
            5185, 5201, 5217, 5233, 5249,
            5265, 5281, 5297, 5313, 5330,
            5346, 5362, 5379, 5395, 5412,
            5428, 5445, 5462, 5478, 5495,
            5512, 5529, 5546, 5563, 5580,
            5597, 5614, 5631, 5648, 5666,
            5683, 5700, 5718, 5735, 5753,
            5770, 5788, 5806, 5824, 5841,
            5859, 5877, 5895, 5913, 5931,
            5950, 5968, 5986, 6004, 6023,
            6041, 6060, 6078, 6097, 6116,
            6134, 6153, 6172, 6191, 6210,
            6229, 6248, 6267, 6286, 6305,
            6325, 6344, 6364, 6383, 6403,
            6422, 6442, 6462, 6481, 6501,
            6521, 6541, 6561, 6581, 6602,
            6622, 6642, 6662, 6683, 6703,
            6724, 6744, 6765, 6786, 6807,
            6828, 6848, 6869, 6891, 6912,
            6933, 6954, 6975, 6997, 7018,
            7040, 7061, 7083, 7105, 7126,
            7148, 7170, 7192, 7214, 7236,
            7259, 7281, 7303, 7325, 7348,
            7370, 7393, 7416, 7438, 7461,
            7484, 7507, 7530, 7553, 7576,
            7600, 7623, 7646, 7670, 7693,
            7717, 7741, 7764, 7788, 7812,
            7836, 7860, 7884, 7908, 7932,
            7957, 7981, 8006, 8030, 8055,
            8080, 8104, 8129, 8154, 8179,
            8204, 8229, 8255, 8280, 8305,
            8331, 8356, 8382, 8408, 8434,
            8459, 8485, 8511, 8537, 8564,
            8590, 8616, 8643, 8669, 8696,
            8722, 8749, 8776, 8803, 8830,
            8857, 8884, 8912, 8939, 8966,
            8994, 9021, 9049, 9077, 9105,
            9133, 9161, 9189, 9217, 9245,
            9274, 9302, 9331, 9359, 9388,
            9417, 9446, 9475, 9504, 9533,
            9562, 9591, 9621, 9650, 9680,
            9710, 9740, 9769, 9799, 9830,
            9860, 9890, 9920, 9951, 9981,
            10012, 10043, 10073, 10104, 10135,
            10166, 10198, 10229, 10260, 10292,
            10323, 10355, 10387, 10419, 10451,
            10483, 10515, 10547, 10580, 10612,
            10645, 10677, 10710, 10743, 10776,
            10809, 10842, 10876, 10909, 10942,
            10976, 11010, 11044, 11077, 11111,
            11146, 11180, 11214, 11248, 11283,
            11318, 11352, 11387, 11422, 11457,
            11492, 11528, 11563, 11599, 11634,
            11670, 11706, 11742, 11778, 11814,
            11850, 11887, 11923, 11960, 11996,
            12033, 12070, 12107, 12144, 12182,
            12219, 12257, 12294, 12332, 12370,
            12408, 12446, 12484, 12522, 12561,
            12599, 12638, 12677, 12716, 12755,
            12794, 12833, 12873, 12912, 12952,
            12992, 13032, 13072, 13112, 13152,
            13192, 13233, 13274, 13314, 13355,
            13396, 13437, 13479, 13520, 13561,
            13603, 13645, 13687, 13729, 13771,
            13813, 13856, 13898, 13941, 13984,
            14027, 14070, 14113, 14156, 14200,
            14243, 14287, 14331, 14375, 14419,
            14463, 14508, 14552, 14597, 14642,
            14687, 14732, 14777, 14823, 14868,
            14914, 14960, 15005, 15052, 15098,
            15144, 15191, 15237, 15284, 15331,
            15378, 15425, 15473, 15520, 15568,
            15616, 15664, 15712, 15760, 15808,
            15857, 15906, 15955, 16004, 16053,
            16102, 16151, 16201, 16251, 16301,
            16351, 16401, 16451, 16502, 16553,
            16603, 16654, 16706, 16757, 16808,
            16860, 16912, 16964, 17016, 17068,
            17121, 17173, 17226, 17279, 17332,
            17385, 17438, 17492, 17546, 17600,
            17654, 17708, 17762, 17817, 17872,
            17926, 17982, 18037, 18092, 18148,
            18203, 18259, 18315, 18372, 18428,
            18485, 18542, 18598, 18656, 18713,
            18770, 18828, 18886, 18944, 19002,
            19060, 19119, 19178, 19237, 19296,
            19355, 19414, 19474, 19534, 19594,
            19654, 19714, 19775, 19836, 19897,
            19958, 20019, 20081, 20142, 20204,
            20266, 20328, 20391, 20454, 20516,
            20579, 20643, 20706, 20770, 20833,
            20897, 20962, 21026, 21091, 21155,
            21220, 21286, 21351, 21417, 21482,
            21548, 21615, 21681, 21748, 21814,
            21881, 21949, 22016, 22084, 22151,
            22220, 22288, 22356, 22425, 22494,
            22563, 22632, 22702, 22771, 22841,
            22912, 22982, 23053, 23123, 23194,
            23266, 23337, 23409, 23481, 23553,
            23625, 23698, 23771, 23844, 23917,
            23990, 24064, 24138, 24212, 24287,
            24361, 24436, 24511, 24586, 24662,
            24738, 24814, 24890, 24966, 25043,
            25120, 25197, 25275, 25352, 25430,
            25508, 25587, 25665, 25744, 25823,
            25902, 25982, 26062, 26142, 26222,
            26303, 26384, 26465, 26546, 26627,
            26709, 26791, 26874, 26956, 27039,
            27122, 27205, 27289, 27373, 27457,
            27541, 27626, 27711, 27796, 27881,
            27967, 28053, 28139, 28226, 28312,
            28399, 28486, 28574, 28662, 28750,
            28838, 28927, 29016, 29105, 29194,
            29284, 29374, 29464, 29555, 29645,
            29736, 29828, 29919, 30011, 30104,
            30196, 30289, 30382, 30475, 30569,
            30663, 30757, 30851, 30946, 31041,
            31137, 31232, 31328, 31425, 31521,
            31618, 31715, 31813, 31910, 32008,
            32107, 32205, 32304, 32403, 32503,
            32603, 32703, 32804, 32904, 33005,
            33107, 33209, 33311, 33413, 33516,
            33619, 33722, 33825, 33929, 34034,
            34138, 34243, 34348, 34454, 34560,
            34666, 34772, 34879, 34986, 35094,
            35202, 35310, 35418, 35527, 35636,
            35746, 35856, 35966, 36076, 36187,
            36298, 36410, 36522, 36634, 36746,
            36859, 36973, 37086, 37200, 37314,
            37429, 37544, 37659, 37775, 37891,
            38008, 38124, 38241, 38359, 38477,
            38595, 38714, 38833, 38952, 39072,
            39192, 39312, 39433, 39554, 39675,
            39797, 39920, 40042, 40165, 40289,
            40413, 40537, 40661, 40786, 40911,
            41037, 41163, 41290, 41417, 41544,
            41671, 41800, 41928, 42057, 42186,
            42316, 42446, 42576, 42707, 42838,
            42970, 43102, 43234, 43367, 43500,
            43634, 43768, 43902, 44037, 44173,
            44308, 44444, 44581, 44718, 44855,
            44993, 45131, 45270, 45409, 45549,
            45689, 45829, 45970, 46111, 46253,
            46395, 46537, 46680, 46824, 46968,
            47112, 47257, 47402, 47548, 47694,
            47840, 47987, 48135, 48283, 48431,
            48580, 48729, 48879, 49029, 49180,
            49331, 49482, 49634, 49787, 49940,
            50093, 50247, 50401, 50556, 50712,
            50867, 51024, 51181, 51338, 51495,
            51654, 51812, 51972, 52131, 52291,
            52452, 52613, 52775, 52937, 53100,
            53263, 53427, 53591, 53755, 53921,
            54086, 54252, 54419, 54586, 54754,
            54922, 55091, 55260, 55430, 55600,
            55771, 55943, 56114, 56287, 56460,
            56633, 56807, 56982, 57157, 57333,
            57509, 57685, 57863, 58040, 58219,
            58398, 58577, 58757, 58938, 59119,
            59300, 59483, 59665, 59849, 60033,
            60217, 60402, 60588, 60774, 60960,
            61148, 61336, 61524, 61713, 61903,
            62093, 62284, 62475, 62667, 62860,
            63053, 63247, 63441, 63636, 63831,
            64027, 64224, 64422, 64619, 64818,
            65017, 65217, 65417, 65618, 65820,
            66022, 66225, 66429, 66633, 66837,
            67043, 67249, 67455, 67663, 67870,
            68079, 68288, 68498, 68708, 68920,
            69131, 69344, 69557, 69771, 69985,
            70200, 70416, 70632, 70849, 71067,
            71285, 71504, 71724, 71944, 72165,
            72387, 72609, 72833, 73056, 73281,
            73506, 73732, 73958, 74186, 74414,
            74642, 74872, 75102, 75332, 75564,
            75796, 76029, 76262, 76497, 76732,
            76968, 77204, 77441, 77679, 77918,
            78157, 78398, 78638, 78880, 79122,
            79366, 79609, 79854, 80099, 80345,
            80592, 80840, 81088, 81338, 81587,
            81838, 82090, 82342, 82595, 82849,
            83103, 83358, 83615, 83872, 84129,
            84388, 84647, 84907, 85168, 85430,
            85692, 85955, 86220, 86485, 86750,
            87017, 87284, 87552, 87821, 88091,
            88362, 88633, 88906, 89179, 89453,
            89728, 90003, 90280, 90557, 90836,
            91115, 91395, 91676, 91957, 92240,
            92523, 92807, 93093, 93379, 93666,
            93953, 94242, 94532, 94822, 95113,
            95406, 95699, 95993, 96288, 96584,
            96881, 97178, 97477, 97776, 98077,
            98378, 98680, 98984, 99288, 99593,
            99899, 100206, 100514, 100822, 101132,
            101443, 101755, 102067, 102381, 102696,
            103011, 103328, 103645, 103964, 104283,
            104603, 104925, 105247, 105571, 105895,
            106220, 106547, 106874, 107203, 107532,
            107862, 108194, 108526, 108860, 109194,
            109530, 109866, 110204, 110542, 110882,
            111223, 111565, 111907, 112251, 112596,
            112942, 113289, 113637, 113986, 114337,
            114688, 115040, 115394, 115748, 116104,
            116461, 116819, 117178, 117538, 117899,
            118261, 118624, 118989, 119354, 119721,
            120089, 120458, 120828, 121199, 121572,
            121945, 122320, 122696, 123073, 123451,
            123830, 124211, 124593, 124975, 125359,
            125745, 126131, 126518, 126907, 127297,
            127688, 128081, 128474, 128869, 129265,
            129662, 130061, 130260
         ) ),
        max_error = cms.double(0.6152529479288091),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut2 = cms.PSet(
        lut = cms.vint32( (
            256, 256, 257, 258, 259,
            260, 260, 261, 262, 263,
            264, 264, 265, 266, 267,
            268, 268, 269, 270, 271,
            272, 273, 273, 274, 275,
            276, 277, 278, 279, 279,
            280, 281, 282, 283, 284,
            285, 285, 286, 287, 288,
            289, 290, 291, 292, 293,
            293, 294, 295, 296, 297,
            298, 299, 300, 301, 302,
            303, 303, 304, 305, 306,
            307, 308, 309, 310, 311,
            312, 313, 314, 315, 316,
            317, 318, 319, 320, 321,
            322, 323, 324, 325, 326,
            327, 328, 329, 330, 331,
            332, 333, 334, 335, 336,
            337, 338, 339, 340, 341,
            342, 343, 344, 345, 346,
            347, 348, 349, 351, 352,
            353, 354, 355, 356, 357,
            358, 359, 360, 361, 363,
            364, 365, 366, 367, 368,
            369, 370, 372, 373, 374,
            375, 376, 377, 379, 380,
            381, 382, 383, 384, 386,
            387, 388, 389, 390, 392,
            393, 394, 395, 396, 398,
            399, 400, 401, 402, 404,
            405, 406, 407, 409, 410,
            411, 412, 414, 415, 416,
            418, 419, 420, 421, 423,
            424, 425, 427, 428, 429,
            431, 432, 433, 435, 436,
            437, 439, 440, 441, 443,
            444, 445, 447, 448, 449,
            451, 452, 454, 455, 456,
            458, 459, 461, 462, 463,
            465, 466, 468, 469, 471,
            472, 474, 475, 476, 478,
            479, 481, 482, 484, 485,
            487, 488, 490, 491, 493,
            494, 496, 497, 499, 500,
            502, 503, 505, 507, 508,
            510, 511, 513, 514, 516,
            518, 519, 521, 522, 524,
            526, 527, 529, 530, 532,
            534, 535, 537, 539, 540,
            542, 544, 545, 547, 549,
            550, 552, 554, 555, 557,
            559, 561, 562, 564, 566,
            567, 569, 571, 573, 575,
            576, 578, 580, 582, 583,
            585, 587, 589, 591, 592,
            594, 596, 598, 600, 602,
            603, 605, 607, 609, 611,
            613, 615, 617, 618, 620,
            622, 624, 626, 628, 630,
            632, 634, 636, 638, 640,
            642, 644, 646, 648, 650,
            652, 654, 656, 658, 660,
            662, 664, 666, 668, 670,
            672, 674, 676, 678, 680,
            682, 684, 686, 688, 691,
            693, 695, 697, 699, 701,
            703, 706, 708, 710, 712,
            714, 717, 719, 721, 723,
            725, 728, 730, 732, 734,
            737, 739, 741, 743, 746,
            748, 750, 753, 755, 757,
            760, 762, 764, 767, 769,
            771, 774, 776, 778, 781,
            783, 786, 788, 790, 793,
            795, 798, 800, 803, 805,
            808, 810, 813, 815, 818,
            820, 823, 825, 828, 830,
            833, 835, 838, 840, 843,
            846, 848, 851, 853, 856,
            859, 861, 864, 867, 869,
            872, 875, 877, 880, 883,
            885, 888, 891, 894, 896,
            899, 902, 905, 907, 910,
            913, 916, 919, 921, 924,
            927, 930, 933, 936, 939,
            941, 944, 947, 950, 953,
            956, 959, 962, 965, 968,
            971, 974, 977, 980, 983,
            986, 989, 992, 995, 998,
            1001, 1004, 1007, 1010, 1013,
            1017, 1020, 1023, 1026, 1029,
            1032, 1035, 1039, 1042, 1045,
            1048, 1051, 1055, 1058, 1061,
            1064, 1068, 1071, 1074, 1078,
            1081, 1084, 1088, 1091, 1094,
            1098, 1101, 1104, 1108, 1111,
            1115, 1118, 1121, 1125, 1128,
            1132, 1135, 1139, 1142, 1146,
            1149, 1153, 1156, 1160, 1163,
            1167, 1171, 1174, 1178, 1181,
            1185, 1189, 1192, 1196, 1200,
            1203, 1207, 1211, 1214, 1218,
            1222, 1226, 1229, 1233, 1237,
            1241, 1245, 1249, 1252, 1256,
            1260, 1264, 1268, 1272, 1276,
            1280, 1283, 1287, 1291, 1295,
            1299, 1303, 1307, 1311, 1315,
            1319, 1323, 1328, 1332, 1336,
            1340, 1344, 1348, 1352, 1356,
            1360, 1365, 1369, 1373, 1377,
            1382, 1386, 1390, 1394, 1399,
            1403, 1407, 1412, 1416, 1420,
            1425, 1429, 1433, 1438, 1442,
            1447, 1451, 1455, 1460, 1464,
            1469, 1473, 1478, 1483, 1487,
            1492, 1496, 1501, 1505, 1510,
            1515, 1519, 1524, 1529, 1533,
            1538, 1543, 1548, 1552, 1557,
            1562, 1567, 1572, 1576, 1581,
            1586, 1591, 1596, 1601, 1606,
            1611, 1616, 1620, 1625, 1630,
            1635, 1640, 1646, 1651, 1656,
            1661, 1666, 1671, 1676, 1681,
            1686, 1692, 1697, 1702, 1707,
            1712, 1718, 1723, 1728, 1734,
            1739, 1744, 1750, 1755, 1760,
            1766, 1771, 1777, 1782, 1788,
            1793, 1799, 1804, 1810, 1815,
            1821, 1826, 1832, 1838, 1843,
            1849, 1855, 1860, 1866, 1872,
            1878, 1883, 1889, 1895, 1901,
            1907, 1912, 1918, 1924, 1930,
            1936, 1942, 1948, 1954, 1960,
            1966, 1972, 1978, 1984, 1990,
            1996, 2003, 2009, 2015, 2021,
            2027, 2033, 2040, 2046, 2052,
            2059, 2065, 2071, 2078, 2084,
            2090, 2097, 2103, 2110, 2116,
            2123, 2129, 2136, 2142, 2149,
            2156, 2162, 2169, 2175, 2182,
            2189, 2196, 2202, 2209, 2216,
            2223, 2230, 2236, 2243, 2250,
            2257, 2264, 2271, 2278, 2285,
            2292, 2299, 2306, 2313, 2320,
            2327, 2335, 2342, 2349, 2356,
            2363, 2371, 2378, 2385, 2393,
            2400, 2407, 2415, 2422, 2430,
            2437, 2444, 2452, 2460, 2467,
            2475, 2482, 2490, 2498, 2505,
            2513, 2521, 2528, 2536, 2544,
            2552, 2560, 2567, 2575, 2583,
            2591, 2599, 2607, 2615, 2623,
            2631, 2639, 2647, 2656, 2664,
            2672, 2680, 2688, 2697, 2705,
            2713, 2722, 2730, 2738, 2747,
            2755, 2764, 2772, 2781, 2789,
            2798, 2806, 2815, 2824, 2832,
            2841, 2850, 2858, 2867, 2876,
            2885, 2894, 2903, 2912, 2921,
            2930, 2939, 2948, 2957, 2966,
            2975, 2984, 2993, 3002, 3012,
            3021, 3030, 3039, 3049, 3058,
            3067, 3077, 3086, 3096, 3105,
            3115, 3124, 3134, 3144, 3153,
            3163, 3173, 3183, 3192, 3202,
            3212, 3222, 3232, 3242, 3252,
            3262, 3272, 3282, 3292, 3302,
            3312, 3322, 3332, 3343, 3353,
            3363, 3374, 3384, 3394, 3405,
            3415, 3426, 3436, 3447, 3457,
            3468, 3479, 3489, 3500, 3511,
            3522, 3532, 3543, 3554, 3565,
            3576, 3587, 3598, 3609, 3620,
            3631, 3642, 3654, 3665, 3676,
            3687, 3699, 3710, 3722, 3733,
            3744, 3756, 3767, 3779, 3791,
            3802, 3814, 3826, 3837, 3849,
            3861, 3873, 3885, 3897, 3909,
            3921, 3933, 3945, 3957, 3969,
            3981, 3994, 4006, 4018, 4031,
            4043, 4055, 4068, 4080, 4093,
            4105, 4118, 4131, 4143, 4156,
            4169, 4182, 4195, 4207, 4220,
            4233, 4246, 4259, 4272, 4286,
            4299, 4312, 4325, 4339, 4352,
            4365, 4379, 4392, 4406, 4419,
            4433, 4446, 4460, 4474, 4487,
            4501, 4515, 4529, 4543, 4557,
            4571, 4585, 4599, 4613, 4627,
            4641, 4656, 4670, 4684, 4699,
            4713, 4728, 4742, 4757, 4771,
            4786, 4801, 4816, 4830, 4845,
            4860, 4875, 4890, 4905, 4920,
            4935, 4950, 4966, 4981, 4996,
            5011, 5027, 5042, 5058, 5073,
            5089, 5105, 5120, 5136, 5152,
            5168, 5183, 5199, 5215, 5231,
            5247, 5264, 5280, 5296, 5312,
            5329, 5345, 5361, 5378, 5394,
            5411, 5428, 5444, 5461, 5478,
            5495, 5512, 5528, 5545, 5562,
            5580, 5597, 5614, 5631, 5648,
            5666, 5683, 5701, 5718, 5736,
            5753, 5771, 5789, 5807, 5824,
            5842, 5860, 5878, 5896, 5914,
            5933, 5951, 5969, 5987, 6006,
            6024, 6043, 6061, 6080, 6099,
            6117, 6136, 6155, 6174, 6193,
            6212, 6231, 6250, 6269, 6289,
            6308, 6327, 6347, 6366, 6386,
            6406, 6425, 6445, 6465, 6485,
            6505, 6525, 6545, 6565, 6585,
            6605, 6625, 6646, 6666, 6687,
            6707, 6728, 6749, 6769, 6790,
            6811, 6832, 6853, 6874, 6895,
            6916, 6937, 6959, 6980, 7002,
            7023, 7045, 7066, 7088, 7110,
            7132, 7154, 7176, 7198, 7220,
            7242, 7264, 7286, 7309, 7331,
            7354, 7376, 7399, 7422, 7445,
            7468, 7490, 7513, 7537, 7560,
            7583, 7606, 7630, 7653, 7677,
            7700, 7724, 7748, 7771, 7795,
            7819, 7843, 7867, 7892, 7916,
            7940, 7964, 7989, 8014, 8038,
            8063, 8088, 8112, 8137, 8162,
            8187, 8213, 8238, 8263, 8289,
            8314, 8340, 8365, 8391, 8417,
            8443, 8468, 8495, 8521, 8547,
            8573, 8599, 8626, 8652, 8679,
            8706, 8732, 8759, 8786, 8813,
            8840, 8867, 8895, 8922, 8949,
            8977, 9004, 9032, 9060, 9088,
            9116, 9144, 9172, 9200, 9228,
            9256, 9285, 9313, 9342, 9371,
            9400, 9428, 9457, 9486, 9516,
            9545, 9574, 9604, 9633, 9663,
            9692, 9722, 9752, 9782, 9812,
            9842, 9872, 9903, 9933, 9964,
            9994, 10025, 10056, 10087, 10118,
            10149, 10180, 10211, 10243, 10274,
            10306, 10337, 10369, 10401, 10433,
            10465, 10497, 10529, 10562, 10594,
            10627, 10659, 10692, 10725, 10758,
            10791, 10824, 10858, 10891, 10924,
            10958, 10992, 11025, 11059, 11093,
            11127, 11161, 11196, 11230, 11265,
            11299, 11334, 11369, 11404, 11439,
            11474, 11509, 11545, 11580, 11616,
            11651, 11687, 11723, 11759, 11795,
            11831, 11868, 11904, 11941, 11978,
            12014, 12051, 12088, 12125, 12163,
            12200, 12238, 12275, 12313, 12351,
            12389, 12427, 12465, 12503, 12542,
            12580, 12619, 12658, 12696, 12735,
            12775, 12814, 12853, 12893, 12932,
            12972, 13012, 13052, 13092, 13132,
            13173, 13213, 13254, 13294, 13335,
            13376, 13417, 13459, 13500, 13541,
            13583, 13625, 13667, 13709, 13751,
            13793, 13835, 13878, 13920, 13963,
            14006, 14049, 14092, 14136, 14179,
            14223, 14266, 14310, 14354, 14398,
            14443, 14487, 14531, 14576, 14621,
            14666, 14711, 14756, 14801, 14847,
            14892, 14938, 14984, 15030, 15076,
            15123, 15169, 15216, 15263, 15309,
            15356, 15404, 15451, 15498, 15546,
            15594, 15642, 15690, 15738, 15786,
            15835, 15884, 15932, 15981, 16030,
            16080, 16129, 16179, 16228, 16278,
            16328, 16378, 16429, 16479, 16530,
            16581, 16632, 16683, 16734, 16785,
            16837, 16889, 16941, 16993, 17045,
            17097, 17150, 17202, 17255, 17308,
            17361, 17415, 17468, 17522, 17576,
            17630, 17684, 17738, 17793, 17848,
            17902, 17957, 18013, 18068, 18123,
            18179, 18235, 18291, 18347, 18404,
            18460, 18517, 18574, 18631, 18688,
            18746, 18803, 18861, 18919, 18977,
            19035, 19094, 19152, 19211, 19270,
            19330, 19389, 19448, 19508, 19568,
            19628, 19689, 19749, 19810, 19871,
            19932, 19993, 20054, 20116, 20178,
            20240, 20302, 20364, 20427, 20490,
            20553, 20616, 20679, 20743, 20806,
            20870, 20935, 20999, 21063, 21128,
            21193, 21258, 21323, 21389, 21455,
            21521, 21587, 21653, 21720, 21786,
            21853, 21920, 21988, 22055, 22123,
            22191, 22259, 22328, 22396, 22465,
            22534, 22603, 22673, 22742, 22812,
            22882, 22953, 23023, 23094, 23165,
            23236, 23308, 23379, 23451, 23523,
            23595, 23668, 23741, 23814, 23887,
            23960, 24034, 24108, 24182, 24256,
            24330, 24405, 24480, 24555, 24631,
            24707, 24783, 24859, 24935, 25012,
            25089, 25166, 25243, 25320, 25398,
            25476, 25555, 25633, 25712, 25791,
            25870, 25950, 26029, 26109, 26190,
            26270, 26351, 26432, 26513, 26594,
            26676, 26758, 26840, 26923, 27006,
            27088, 27172, 27255, 27339, 27423,
            27507, 27592, 27677, 27762, 27847,
            27932, 28018, 28104, 28191, 28277,
            28364, 28451, 28539, 28626, 28714,
            28803, 28891, 28980, 29069, 29158,
            29248, 29338, 29428, 29518, 29609,
            29700, 29791, 29883, 29975, 30067,
            30159, 30252, 30345, 30438, 30532,
            30625, 30719, 30814, 30909, 31003,
            31099, 31194, 31290, 31386, 31483,
            31579, 31677, 31774, 31871, 31969,
            32068, 32166, 32265, 32364, 32464,
            32563, 32663, 32764, 32864, 32965,
            33067, 33168, 33270, 33372, 33475,
            33578, 33681, 33785, 33888, 33992,
            34097, 34202, 34307, 34412, 34518,
            34624, 34730, 34837, 34944, 35051,
            35159, 35267, 35376, 35484, 35593,
            35703, 35812, 35922, 36033, 36144,
            36255, 36366, 36478, 36590, 36702,
            36815, 36928, 37042, 37155, 37270,
            37384, 37499, 37614, 37730, 37846,
            37962, 38079, 38196, 38313, 38431,
            38549, 38667, 38786, 38905, 39025,
            39145, 39265, 39386, 39507, 39628,
            39750, 39872, 39994, 40117, 40241,
            40364, 40488, 40613, 40737, 40863,
            40988, 41114, 41240, 41367, 41494,
            41622, 41750, 41878, 42007, 42136,
            42265, 42395, 42525, 42656, 42787,
            42919, 43050, 43183, 43315, 43448,
            43582, 43716, 43850, 43985, 44120,
            44256, 44392, 44528, 44665, 44802,
            44940, 45078, 45216, 45355, 45495,
            45634, 45775, 45915, 46056, 46198,
            46340, 46482, 46625, 46768, 46912,
            47056, 47201, 47346, 47491, 47637,
            47784, 47930, 48078, 48225, 48374,
            48522, 48671, 48821, 48971, 49121,
            49272, 49424, 49576, 49728, 49881,
            50034, 50188, 50342, 50497, 50652,
            50807, 50963, 51120, 51277, 51435,
            51593, 51751, 51910, 52070, 52230,
            52390, 52551, 52713, 52875, 53037,
            53200, 53364, 53528, 53692, 53857,
            54022, 54188, 54355, 54522, 54690,
            54858, 55026, 55195, 55365, 55535,
            55706, 55877, 56048, 56221, 56393,
            56567, 56740, 56915, 57090, 57265,
            57441, 57618, 57795, 57972, 58150,
            58329, 58508, 58688, 58868, 59049,
            59231, 59413, 59595, 59778, 59962,
            60146, 60331, 60516, 60702, 60889,
            61076, 61264, 61452, 61641, 61830,
            62020, 62211, 62402, 62594, 62786,
            62979, 63172, 63366, 63561, 63756,
            63952, 64149, 64346, 64544, 64742,
            64941, 65140, 65341, 65541, 65743,
            65945, 66147, 66351, 66555, 66759,
            66964, 67170, 67376, 67583, 67791,
            67999, 68208, 68418, 68628, 68839,
            69050, 69263, 69475, 69689, 69903,
            70118, 70333, 70549, 70766, 70984,
            71202, 71421, 71640, 71860, 72081,
            72302, 72525, 72747, 72971, 73195,
            73420, 73646, 73872, 74099, 74327,
            74555, 74784, 75014, 75244, 75476,
            75707, 75940, 76173, 76407, 76642,
            76878, 77114, 77351, 77589, 77827,
            78066, 78306, 78547, 78788, 79030,
            79273, 79516, 79761, 80006, 80252,
            80498, 80746, 80994, 81243, 81492,
            81743, 81994, 82246, 82498, 82752,
            83006, 83261, 83517, 83774, 84031,
            84289, 84548, 84808, 85069, 85330,
            85592, 85855, 86119, 86384, 86649,
            86915, 87182, 87450, 87719, 87989,
            88259, 88530, 88802, 89075, 89349,
            89623, 89899, 90175, 90452, 90730,
            91009, 91288, 91569, 91850, 92132,
            92415, 92699, 92984, 93270, 93557,
            93844, 94132, 94422, 94712, 95003,
            95295, 95587, 95881, 96176, 96471,
            96768, 97065, 97363, 97662, 97963,
            98264, 98565, 98868, 99172, 99477,
            99783, 100089, 100397, 100705, 101015,
            101325, 101636, 101949, 102262, 102576,
            102891, 103207, 103525, 103843, 104162,
            104482, 104803, 105125, 105448, 105772,
            106097, 106423, 106750, 107078, 107407,
            107737, 108068, 108400, 108733, 109067,
            109402, 109738, 110076, 110414, 110753,
            111093, 111435, 111777, 112121, 112465,
            112811, 113157, 113505, 113854, 114204,
            114555, 114907, 115260, 115614, 115969,
            116325, 116683, 117041, 117401, 117762,
            118124, 118486, 118851, 119216, 119582,
            119949, 120318, 120688, 121059, 121431,
            121804, 122178, 122553, 122930, 123308,
            123687, 124067, 124448, 124830, 125214,
            125598, 125984, 126371, 126760, 127149,
            127540, 127932, 128325, 128719, 129115,
            129511, 129909, 130309, 130709, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071
         ) ),
        max_error = cms.double(5748.616225984908),
        output_scale_factor = cms.double(0.953125),
        unused_lsbs = cms.uint32(2)
    ),
    inv_mass_checks = cms.untracked.bool(False),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    sanity_checks = cms.untracked.bool(False),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    )
)


process.TripleTkMuon533 = cms.EDFilter("L1GTTripleObjectCond",
    collection1 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        minPt = cms.double(5),
        minQualityScore = cms.uint32(0),
        tag = cms.InputTag("l1tGTProducer","GMTTkMuons")
    ),
    collection2 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        minPt = cms.double(3),
        minQualityScore = cms.uint32(0),
        tag = cms.InputTag("l1tGTProducer","GMTTkMuons")
    ),
    collection3 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        minPt = cms.double(3),
        minQualityScore = cms.uint32(0),
        tag = cms.InputTag("l1tGTProducer","GMTTkMuons")
    ),
    correl12 = cms.PSet(
        maxDz = cms.double(1),
        minDR = cms.double(0)
    ),
    correl13 = cms.PSet(
        maxDz = cms.double(1),
        minDR = cms.double(0)
    ),
    correl23 = cms.PSet(
        minDR = cms.double(0)
    ),
    cos_phi_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            487, 487, 487, 487, 487,
            487, 487, 487, 487, 487,
            487, 486, 486, 486, 486,
            486, 486, 486, 485, 485,
            485, 485, 485, 485, 484,
            484, 484, 484, 484, 483,
            483, 483, 483, 483, 482,
            482, 482, 482, 481, 481,
            481, 481, 480, 480, 480,
            480, 479, 479, 479, 478,
            478, 478, 478, 477, 477,
            477, 476, 476, 476, 475,
            475, 475, 474, 474, 474,
            473, 473, 472, 472, 472,
            471, 471, 471, 470, 470,
            469, 469, 468, 468, 468,
            467, 467, 466, 466, 465,
            465, 465, 464, 464, 463,
            463, 462, 462, 461, 461,
            460, 460, 459, 459, 458,
            458, 457, 457, 456, 456,
            455, 454, 454, 453, 453,
            452, 452, 451, 451, 450,
            449, 449, 448, 448, 447,
            446, 446, 445, 445, 444,
            443, 443, 442, 441, 441,
            440, 440, 439, 438, 438,
            437, 436, 436, 435, 434,
            434, 433, 432, 431, 431,
            430, 429, 429, 428, 427,
            426, 426, 425, 424, 423,
            423, 422, 421, 420, 420,
            419, 418, 417, 417, 416,
            415, 414, 413, 413, 412,
            411, 410, 409, 409, 408,
            407, 406, 405, 405, 404,
            403, 402, 401, 400, 399,
            399, 398, 397, 396, 395,
            394, 393, 392, 392, 391,
            390, 389, 388, 387, 386,
            385, 384, 383, 382, 381,
            381, 380, 379, 378, 377,
            376, 375, 374, 373, 372,
            371, 370, 369, 368, 367,
            366, 365, 364, 363, 362,
            361, 360, 359, 358, 357,
            356, 355, 354, 353, 352,
            351, 350, 349, 348, 347,
            346, 345, 343, 342, 341,
            340, 339, 338, 337, 336,
            335, 334, 333, 332, 330,
            329, 328, 327, 326, 325,
            324, 323, 322, 320, 319,
            318, 317, 316, 315, 314,
            312, 311, 310, 309, 308,
            307, 306, 304, 303, 302,
            301, 300, 298, 297, 296,
            295, 294, 293, 291, 290,
            289, 288, 286, 285, 284,
            283, 282, 280, 279, 278,
            277, 275, 274, 273, 272,
            270, 269, 268, 267, 265,
            264, 263, 262, 260, 259,
            258, 257, 255, 254, 253,
            252, 250, 249, 248, 246,
            245, 244, 242, 241, 240,
            239, 237, 236, 235, 233,
            232, 231, 229, 228, 227,
            225, 224, 223, 221, 220,
            219, 217, 216, 215, 213,
            212, 211, 209, 208, 207,
            205, 204, 203, 201, 200,
            198, 197, 196, 194, 193,
            192, 190, 189, 187, 186,
            185, 183, 182, 181, 179,
            178, 176, 175, 174, 172,
            171, 169, 168, 167, 165,
            164, 162, 161, 159, 158,
            157, 155, 154, 152, 151,
            150, 148, 147, 145, 144,
            142, 141, 140, 138, 137,
            135, 134, 132, 131, 129,
            128, 127, 125, 124, 122,
            121, 119, 118, 116, 115,
            113, 112, 111, 109, 108,
            106, 105, 103, 102, 100,
            99, 97, 96, 94, 93,
            92, 90, 89, 87, 86,
            84, 83, 81, 80, 78,
            77, 75, 74, 72, 71,
            69, 68, 66, 65, 63,
            62, 60, 59, 58, 56,
            55, 53, 52, 50, 49,
            47, 46, 44, 43, 41,
            40, 38, 37, 35, 34,
            32, 31, 29, 28, 26,
            25, 23, 22, 20, 19,
            17, 16, 14, 13, 11,
            10, 8, 7, 5, 4,
            2, 1, -1, -2, -4,
            -5, -7, -8, -10, -11,
            -13, -14, -16, -17, -19,
            -20, -22, -23, -25, -26,
            -28, -29, -31, -32, -34,
            -35, -37, -38, -40, -41,
            -43, -44, -46, -47, -49,
            -50, -52, -53, -55, -56,
            -58, -59, -60, -62, -63,
            -65, -66, -68, -69, -71,
            -72, -74, -75, -77, -78,
            -80, -81, -83, -84, -86,
            -87, -89, -90, -92, -93,
            -94, -96, -97, -99, -100,
            -102, -103, -105, -106, -108,
            -109, -111, -112, -113, -115,
            -116, -118, -119, -121, -122,
            -124, -125, -127, -128, -129,
            -131, -132, -134, -135, -137,
            -138, -140, -141, -142, -144,
            -145, -147, -148, -150, -151,
            -152, -154, -155, -157, -158,
            -159, -161, -162, -164, -165,
            -167, -168, -169, -171, -172,
            -174, -175, -176, -178, -179,
            -181, -182, -183, -185, -186,
            -187, -189, -190, -192, -193,
            -194, -196, -197, -198, -200,
            -201, -203, -204, -205, -207,
            -208, -209, -211, -212, -213,
            -215, -216, -217, -219, -220,
            -221, -223, -224, -225, -227,
            -228, -229, -231, -232, -233,
            -235, -236, -237, -239, -240,
            -241, -242, -244, -245, -246,
            -248, -249, -250, -252, -253,
            -254, -255, -257, -258, -259,
            -260, -262, -263, -264, -265,
            -267, -268, -269, -270, -272,
            -273, -274, -275, -277, -278,
            -279, -280, -282, -283, -284,
            -285, -286, -288, -289, -290,
            -291, -293, -294, -295, -296,
            -297, -298, -300, -301, -302,
            -303, -304, -306, -307, -308,
            -309, -310, -311, -312, -314,
            -315, -316, -317, -318, -319,
            -320, -322, -323, -324, -325,
            -326, -327, -328, -329, -330,
            -332, -333, -334, -335, -336,
            -337, -338, -339, -340, -341,
            -342, -343, -345, -346, -347,
            -348, -349, -350, -351, -352,
            -353, -354, -355, -356, -357,
            -358, -359, -360, -361, -362,
            -363, -364, -365, -366, -367,
            -368, -369, -370, -371, -372,
            -373, -374, -375, -376, -377,
            -378, -379, -380, -381, -381,
            -382, -383, -384, -385, -386,
            -387, -388, -389, -390, -391,
            -392, -392, -393, -394, -395,
            -396, -397, -398, -399, -399,
            -400, -401, -402, -403, -404,
            -405, -405, -406, -407, -408,
            -409, -409, -410, -411, -412,
            -413, -413, -414, -415, -416,
            -417, -417, -418, -419, -420,
            -420, -421, -422, -423, -423,
            -424, -425, -426, -426, -427,
            -428, -429, -429, -430, -431,
            -431, -432, -433, -434, -434,
            -435, -436, -436, -437, -438,
            -438, -439, -440, -440, -441,
            -441, -442, -443, -443, -444,
            -445, -445, -446, -446, -447,
            -448, -448, -449, -449, -450,
            -451, -451, -452, -452, -453,
            -453, -454, -454, -455, -456,
            -456, -457, -457, -458, -458,
            -459, -459, -460, -460, -461,
            -461, -462, -462, -463, -463,
            -464, -464, -465, -465, -465,
            -466, -466, -467, -467, -468,
            -468, -468, -469, -469, -470,
            -470, -471, -471, -471, -472,
            -472, -472, -473, -473, -474,
            -474, -474, -475, -475, -475,
            -476, -476, -476, -477, -477,
            -477, -478, -478, -478, -478,
            -479, -479, -479, -480, -480,
            -480, -480, -481, -481, -481,
            -481, -482, -482, -482, -482,
            -483, -483, -483, -483, -483,
            -484, -484, -484, -484, -484,
            -485, -485, -485, -485, -485,
            -485, -486, -486, -486, -486,
            -486, -486, -486, -487, -487,
            -487, -487, -487, -487, -487,
            -487, -487, -487, -487, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488
         ) ),
        max_error = cms.double(0.0025338281044886835),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            489, 489, 489, 489, 489,
            489, 489, 489, 489, 489,
            489, 490, 490, 490, 490,
            490, 490, 490, 491, 491,
            491, 491, 491, 491, 492,
            492, 492, 492, 492, 493,
            493, 493, 493, 493, 494,
            494, 494, 494, 495, 495,
            495, 495, 496, 496, 496,
            496, 497, 497, 497, 498,
            498, 498, 499, 499, 499,
            499, 500, 500, 500, 501,
            501, 502, 502, 502, 503,
            503, 503, 504, 504, 504,
            505, 505, 506, 506, 507,
            507, 507, 508, 508, 509,
            509, 510, 510, 510, 511,
            511, 512, 512, 513, 513,
            514, 514, 515, 515, 516,
            516, 517, 517, 518, 518,
            519, 520, 520, 521, 521,
            522, 522, 523, 523, 524,
            525, 525, 526, 526, 527,
            528, 528, 529, 530, 530,
            531, 531, 532, 533, 533,
            534, 535, 535, 536, 537,
            537, 538, 539, 540, 540,
            541, 542, 542, 543, 544,
            545, 545, 546, 547, 548,
            548, 549, 550, 551, 551,
            552, 553, 554, 555, 555,
            556, 557, 558, 559, 560,
            560, 561, 562, 563, 564,
            565, 566, 567, 567, 568,
            569, 570, 571, 572, 573,
            574, 575, 576, 577, 577,
            578, 579, 580, 581, 582,
            583, 584, 585, 586, 587,
            588, 589, 590, 591, 592,
            593, 594, 595, 596, 598,
            599, 600, 601, 602, 603,
            604, 605, 606, 607, 608,
            610, 611, 612, 613, 614,
            615, 616, 618, 619, 620,
            621, 622, 623, 625, 626,
            627, 628, 629, 631, 632,
            633, 634, 636, 637, 638,
            639, 641, 642, 643, 644,
            646, 647, 648, 650, 651,
            652, 654, 655, 656, 658,
            659, 660, 662, 663, 665,
            666, 667, 669, 670, 672,
            673, 674, 676, 677, 679,
            680, 682, 683, 685, 686,
            687, 689, 690, 692, 693,
            695, 697, 698, 700, 701,
            703, 704, 706, 707, 709,
            710, 712, 714, 715, 717,
            719, 720, 722, 723, 725,
            727, 728, 730, 732, 733,
            735, 737, 738, 740, 742,
            744, 745, 747, 749, 750,
            752, 754, 756, 758, 759,
            761, 763, 765, 767, 768,
            770, 772, 774, 776, 778,
            779, 781, 783, 785, 787,
            789, 791, 793, 795, 796,
            798, 800, 802, 804, 806,
            808, 810, 812, 814, 816,
            818, 820, 822, 824, 826,
            828, 830, 832, 835, 837,
            839, 841, 843, 845, 847,
            849, 851, 854, 856, 858,
            860, 862, 864, 867, 869,
            871, 873, 875, 878, 880,
            882, 884, 887, 889, 891,
            894, 896, 898, 900, 903,
            905, 907, 910, 912, 915,
            917, 919, 922, 924, 927,
            929, 931, 934, 936, 939,
            941, 944, 946, 949, 951,
            954, 956, 959, 961, 964,
            966, 969, 971, 974, 977,
            979, 982, 984, 987, 990,
            992, 995, 998, 1000, 1003,
            1006, 1008, 1011, 1014, 1017,
            1019, 1022, 1025, 1028, 1030,
            1033, 1036, 1039, 1042, 1044,
            1047, 1050, 1053, 1056, 1059,
            1062, 1065, 1067, 1070, 1073,
            1076, 1079, 1082, 1085, 1088,
            1091, 1094, 1097, 1100, 1103,
            1106, 1109, 1112, 1115, 1118,
            1122, 1125, 1128, 1131, 1134,
            1137, 1140, 1143, 1147, 1150,
            1153, 1156, 1159, 1163, 1166,
            1169, 1172, 1176, 1179, 1182,
            1186, 1189, 1192, 1196, 1199,
            1202, 1206, 1209, 1212, 1216,
            1219, 1223, 1226, 1230, 1233,
            1237, 1240, 1244, 1247, 1251,
            1254, 1258, 1261, 1265, 1268,
            1272, 1276, 1279, 1283, 1287,
            1290, 1294, 1298, 1301, 1305,
            1309, 1312, 1316, 1320, 1324,
            1327, 1331, 1335, 1339, 1343,
            1347, 1350, 1354, 1358, 1362,
            1366, 1370, 1374, 1378, 1382,
            1386, 1390, 1394, 1398, 1402,
            1406, 1410, 1414, 1418, 1422,
            1426, 1430, 1434, 1439, 1443,
            1447, 1451, 1455, 1459, 1464,
            1468, 1472, 1476, 1481, 1485,
            1489, 1494, 1498, 1502, 1507,
            1511, 1516, 1520, 1524, 1529,
            1533, 1538, 1542, 1547, 1551,
            1556, 1560, 1565, 1569, 1574,
            1579, 1583, 1588, 1592, 1597,
            1602, 1606, 1611, 1616, 1621,
            1625, 1630, 1635, 1640, 1645,
            1649, 1654, 1659, 1664, 1669,
            1674, 1679, 1684, 1689, 1693,
            1698, 1703, 1708, 1714, 1719,
            1724, 1729, 1734, 1739, 1744,
            1749, 1754, 1760, 1765, 1770,
            1775, 1780, 1786, 1791, 1796,
            1802, 1807, 1812, 1818, 1823,
            1828, 1834, 1839, 1845, 1850,
            1856, 1861, 1867, 1872, 1878,
            1883, 1889, 1894, 1900, 1906,
            1911, 1917, 1923, 1929, 1934,
            1940, 1946, 1952, 1957, 1963,
            1969, 1975, 1981, 1987, 1993,
            1999, 2004, 2010, 2016, 2022,
            2028, 2035, 2041, 2047, 2053,
            2059, 2065, 2071, 2077, 2084,
            2090, 2096, 2102, 2109, 2115,
            2121, 2128, 2134, 2140, 2147,
            2153, 2160, 2166, 2173, 2179,
            2186, 2192, 2199, 2205, 2212,
            2219, 2225, 2232, 2239, 2245,
            2252, 2259, 2266, 2272, 2279,
            2286, 2293, 2300, 2307, 2314,
            2321, 2328, 2335, 2342, 2349,
            2356, 2363, 2370, 2377, 2384,
            2391, 2398, 2406, 2413, 2420,
            2427, 2435, 2442, 2449, 2457,
            2464, 2472, 2479, 2487, 2494,
            2502, 2509, 2517, 2524, 2532,
            2539, 2547, 2555, 2563, 2570,
            2578, 2586, 2594, 2601, 2609,
            2617, 2625, 2633, 2641, 2649,
            2657, 2665, 2673, 2681, 2689,
            2697, 2705, 2714, 2722, 2730,
            2738, 2747, 2755, 2763, 2772,
            2780, 2788, 2797, 2805, 2814,
            2822, 2831, 2839, 2848, 2857,
            2865, 2874, 2883, 2891, 2900,
            2909, 2918, 2927, 2935, 2944,
            2953, 2962, 2971, 2980, 2989,
            2998, 3007, 3016, 3026, 3035,
            3044, 3053, 3062, 3072, 3081,
            3090, 3100, 3109, 3119, 3128,
            3138, 3147, 3157, 3166, 3176,
            3186, 3195, 3205, 3215, 3224,
            3234, 3244, 3254, 3264, 3274,
            3284, 3294, 3304, 3314, 3324,
            3334, 3344, 3354, 3364, 3375,
            3385, 3395, 3405, 3416, 3426,
            3437, 3447, 3458, 3468, 3479,
            3489, 3500, 3510, 3521, 3532,
            3543, 3553, 3564, 3575, 3586,
            3597, 3608, 3619, 3630, 3641,
            3652, 3663, 3674, 3685, 3697,
            3708, 3719, 3730, 3742, 3753,
            3765, 3776, 3788, 3799, 3811,
            3822, 3834, 3846, 3857, 3869,
            3881, 3893, 3905, 3917, 3929,
            3941, 3953, 3965, 3977, 3989,
            4001, 4013, 4025, 4038, 4050,
            4062, 4075, 4087, 4100, 4112,
            4125, 4137, 4150, 4163, 4175,
            4188, 4201, 4214, 4226, 4239,
            4252, 4265, 4278, 4291, 4304,
            4318, 4331, 4344, 4357, 4371,
            4384, 4397, 4411, 4424, 4438,
            4451, 4465, 4479, 4492, 4506,
            4520, 4533, 4547, 4561, 4575,
            4589, 4603, 4617, 4631, 4645,
            4660, 4674, 4688, 4703, 4717,
            4731, 4746, 4760, 4775, 4789,
            4804, 4819, 4833, 4848, 4863,
            4878, 4893, 4908, 4923, 4938,
            4953, 4968, 4983, 4999, 5014,
            5029, 5045, 5060, 5075, 5091,
            5107, 5122, 5138, 5154, 5169,
            5185, 5201, 5217, 5233, 5249,
            5265, 5281, 5297, 5313, 5330,
            5346, 5362, 5379, 5395, 5412,
            5428, 5445, 5462, 5478, 5495,
            5512, 5529, 5546, 5563, 5580,
            5597, 5614, 5631, 5648, 5666,
            5683, 5700, 5718, 5735, 5753,
            5770, 5788, 5806, 5824, 5841,
            5859, 5877, 5895, 5913, 5931,
            5950, 5968, 5986, 6004, 6023,
            6041, 6060, 6078, 6097, 6116,
            6134, 6153, 6172, 6191, 6210,
            6229, 6248, 6267, 6286, 6305,
            6325, 6344, 6364, 6383, 6403,
            6422, 6442, 6462, 6481, 6501,
            6521, 6541, 6561, 6581, 6602,
            6622, 6642, 6662, 6683, 6703,
            6724, 6744, 6765, 6786, 6807,
            6828, 6848, 6869, 6891, 6912,
            6933, 6954, 6975, 6997, 7018,
            7040, 7061, 7083, 7105, 7126,
            7148, 7170, 7192, 7214, 7236,
            7259, 7281, 7303, 7325, 7348,
            7370, 7393, 7416, 7438, 7461,
            7484, 7507, 7530, 7553, 7576,
            7600, 7623, 7646, 7670, 7693,
            7717, 7741, 7764, 7788, 7812,
            7836, 7860, 7884, 7908, 7932,
            7957, 7981, 8006, 8030, 8055,
            8080, 8104, 8129, 8154, 8179,
            8204, 8229, 8255, 8280, 8305,
            8331, 8356, 8382, 8408, 8434,
            8459, 8485, 8511, 8537, 8564,
            8590, 8616, 8643, 8669, 8696,
            8722, 8749, 8776, 8803, 8830,
            8857, 8884, 8912, 8939, 8966,
            8994, 9021, 9049, 9077, 9105,
            9133, 9161, 9189, 9217, 9245,
            9274, 9302, 9331, 9359, 9388,
            9417, 9446, 9475, 9504, 9533,
            9562, 9591, 9621, 9650, 9680,
            9710, 9740, 9769, 9799, 9830,
            9860, 9890, 9920, 9951, 9981,
            10012, 10043, 10073, 10104, 10135,
            10166, 10198, 10229, 10260, 10292,
            10323, 10355, 10387, 10419, 10451,
            10483, 10515, 10547, 10580, 10612,
            10645, 10677, 10710, 10743, 10776,
            10809, 10842, 10876, 10909, 10942,
            10976, 11010, 11044, 11077, 11111,
            11146, 11180, 11214, 11248, 11283,
            11318, 11352, 11387, 11422, 11457,
            11492, 11528, 11563, 11599, 11634,
            11670, 11706, 11742, 11778, 11814,
            11850, 11887, 11923, 11960, 11996,
            12033, 12070, 12107, 12144, 12182,
            12219, 12257, 12294, 12332, 12370,
            12408, 12446, 12484, 12522, 12561,
            12599, 12638, 12677, 12716, 12755,
            12794, 12833, 12873, 12912, 12952,
            12992, 13032, 13072, 13112, 13152,
            13192, 13233, 13274, 13314, 13355,
            13396, 13437, 13479, 13520, 13561,
            13603, 13645, 13687, 13729, 13771,
            13813, 13856, 13898, 13941, 13984,
            14027, 14070, 14113, 14156, 14200,
            14243, 14287, 14331, 14375, 14419,
            14463, 14508, 14552, 14597, 14642,
            14687, 14732, 14777, 14823, 14868,
            14914, 14960, 15005, 15052, 15098,
            15144, 15191, 15237, 15284, 15331,
            15378, 15425, 15473, 15520, 15568,
            15616, 15664, 15712, 15760, 15808,
            15857, 15906, 15955, 16004, 16053,
            16102, 16151, 16201, 16251, 16301,
            16351, 16401, 16451, 16502, 16553,
            16603, 16654, 16706, 16757, 16808,
            16860, 16912, 16964, 17016, 17068,
            17121, 17173, 17226, 17279, 17332,
            17385, 17438, 17492, 17546, 17600,
            17654, 17708, 17762, 17817, 17872,
            17926, 17982, 18037, 18092, 18148,
            18203, 18259, 18315, 18372, 18428,
            18485, 18542, 18598, 18656, 18713,
            18770, 18828, 18886, 18944, 19002,
            19060, 19119, 19178, 19237, 19296,
            19355, 19414, 19474, 19534, 19594,
            19654, 19714, 19775, 19836, 19897,
            19958, 20019, 20081, 20142, 20204,
            20266, 20328, 20391, 20454, 20516,
            20579, 20643, 20706, 20770, 20833,
            20897, 20962, 21026, 21091, 21155,
            21220, 21286, 21351, 21417, 21482,
            21548, 21615, 21681, 21748, 21814,
            21881, 21949, 22016, 22084, 22151,
            22220, 22288, 22356, 22425, 22494,
            22563, 22632, 22702, 22771, 22841,
            22912, 22982, 23053, 23123, 23194,
            23266, 23337, 23409, 23481, 23553,
            23625, 23698, 23771, 23844, 23917,
            23990, 24064, 24138, 24212, 24287,
            24361, 24436, 24511, 24586, 24662,
            24738, 24814, 24890, 24966, 25043,
            25120, 25197, 25275, 25352, 25430,
            25508, 25587, 25665, 25744, 25823,
            25902, 25982, 26062, 26142, 26222,
            26303, 26384, 26465, 26546, 26627,
            26709, 26791, 26874, 26956, 27039,
            27122, 27205, 27289, 27373, 27457,
            27541, 27626, 27711, 27796, 27881,
            27967, 28053, 28139, 28226, 28312,
            28399, 28486, 28574, 28662, 28750,
            28838, 28927, 29016, 29105, 29194,
            29284, 29374, 29464, 29555, 29645,
            29736, 29828, 29919, 30011, 30104,
            30196, 30289, 30382, 30475, 30569,
            30663, 30757, 30851, 30946, 31041,
            31137, 31232, 31328, 31425, 31521,
            31618, 31715, 31813, 31910, 32008,
            32107, 32205, 32304, 32403, 32503,
            32603, 32703, 32804, 32904, 33005,
            33107, 33209, 33311, 33413, 33516,
            33619, 33722, 33825, 33929, 34034,
            34138, 34243, 34348, 34454, 34560,
            34666, 34772, 34879, 34986, 35094,
            35202, 35310, 35418, 35527, 35636,
            35746, 35856, 35966, 36076, 36187,
            36298, 36410, 36522, 36634, 36746,
            36859, 36973, 37086, 37200, 37314,
            37429, 37544, 37659, 37775, 37891,
            38008, 38124, 38241, 38359, 38477,
            38595, 38714, 38833, 38952, 39072,
            39192, 39312, 39433, 39554, 39675,
            39797, 39920, 40042, 40165, 40289,
            40413, 40537, 40661, 40786, 40911,
            41037, 41163, 41290, 41417, 41544,
            41671, 41800, 41928, 42057, 42186,
            42316, 42446, 42576, 42707, 42838,
            42970, 43102, 43234, 43367, 43500,
            43634, 43768, 43902, 44037, 44173,
            44308, 44444, 44581, 44718, 44855,
            44993, 45131, 45270, 45409, 45549,
            45689, 45829, 45970, 46111, 46253,
            46395, 46537, 46680, 46824, 46968,
            47112, 47257, 47402, 47548, 47694,
            47840, 47987, 48135, 48283, 48431,
            48580, 48729, 48879, 49029, 49180,
            49331, 49482, 49634, 49787, 49940,
            50093, 50247, 50401, 50556, 50712,
            50867, 51024, 51181, 51338, 51495,
            51654, 51812, 51972, 52131, 52291,
            52452, 52613, 52775, 52937, 53100,
            53263, 53427, 53591, 53755, 53921,
            54086, 54252, 54419, 54586, 54754,
            54922, 55091, 55260, 55430, 55600,
            55771, 55943, 56114, 56287, 56460,
            56633, 56807, 56982, 57157, 57333,
            57509, 57685, 57863, 58040, 58219,
            58398, 58577, 58757, 58938, 59119,
            59300, 59483, 59665, 59849, 60033,
            60217, 60402, 60588, 60774, 60960,
            61148, 61336, 61524, 61713, 61903,
            62093, 62284, 62475, 62667, 62860,
            63053, 63247, 63441, 63636, 63831,
            64027, 64224, 64422, 64619, 64818,
            65017, 65217, 65417, 65618, 65820,
            66022, 66225, 66429, 66633, 66837,
            67043, 67249, 67455, 67663, 67870,
            68079, 68288, 68498, 68708, 68920,
            69131, 69344, 69557, 69771, 69985,
            70200, 70416, 70632, 70849, 71067,
            71285, 71504, 71724, 71944, 72165,
            72387, 72609, 72833, 73056, 73281,
            73506, 73732, 73958, 74186, 74414,
            74642, 74872, 75102, 75332, 75564,
            75796, 76029, 76262, 76497, 76732,
            76968, 77204, 77441, 77679, 77918,
            78157, 78398, 78638, 78880, 79122,
            79366, 79609, 79854, 80099, 80345,
            80592, 80840, 81088, 81338, 81587,
            81838, 82090, 82342, 82595, 82849,
            83103, 83358, 83615, 83872, 84129,
            84388, 84647, 84907, 85168, 85430,
            85692, 85955, 86220, 86485, 86750,
            87017, 87284, 87552, 87821, 88091,
            88362, 88633, 88906, 89179, 89453,
            89728, 90003, 90280, 90557, 90836,
            91115, 91395, 91676, 91957, 92240,
            92523, 92807, 93093, 93379, 93666,
            93953, 94242, 94532, 94822, 95113,
            95406, 95699, 95993, 96288, 96584,
            96881, 97178, 97477, 97776, 98077,
            98378, 98680, 98984, 99288, 99593,
            99899, 100206, 100514, 100822, 101132,
            101443, 101755, 102067, 102381, 102696,
            103011, 103328, 103645, 103964, 104283,
            104603, 104925, 105247, 105571, 105895,
            106220, 106547, 106874, 107203, 107532,
            107862, 108194, 108526, 108860, 109194,
            109530, 109866, 110204, 110542, 110882,
            111223, 111565, 111907, 112251, 112596,
            112942, 113289, 113637, 113986, 114337,
            114688, 115040, 115394, 115748, 116104,
            116461, 116819, 117178, 117538, 117899,
            118261, 118624, 118989, 119354, 119721,
            120089, 120458, 120828, 121199, 121572,
            121945, 122320, 122696, 123073, 123451,
            123830, 124211, 124593, 124975, 125359,
            125745, 126131, 126518, 126907, 127297,
            127688, 128081, 128474, 128869, 129265,
            129662, 130061, 130260
         ) ),
        max_error = cms.double(0.6152529479288091),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut2 = cms.PSet(
        lut = cms.vint32( (
            256, 256, 257, 258, 259,
            260, 260, 261, 262, 263,
            264, 264, 265, 266, 267,
            268, 268, 269, 270, 271,
            272, 273, 273, 274, 275,
            276, 277, 278, 279, 279,
            280, 281, 282, 283, 284,
            285, 285, 286, 287, 288,
            289, 290, 291, 292, 293,
            293, 294, 295, 296, 297,
            298, 299, 300, 301, 302,
            303, 303, 304, 305, 306,
            307, 308, 309, 310, 311,
            312, 313, 314, 315, 316,
            317, 318, 319, 320, 321,
            322, 323, 324, 325, 326,
            327, 328, 329, 330, 331,
            332, 333, 334, 335, 336,
            337, 338, 339, 340, 341,
            342, 343, 344, 345, 346,
            347, 348, 349, 351, 352,
            353, 354, 355, 356, 357,
            358, 359, 360, 361, 363,
            364, 365, 366, 367, 368,
            369, 370, 372, 373, 374,
            375, 376, 377, 379, 380,
            381, 382, 383, 384, 386,
            387, 388, 389, 390, 392,
            393, 394, 395, 396, 398,
            399, 400, 401, 402, 404,
            405, 406, 407, 409, 410,
            411, 412, 414, 415, 416,
            418, 419, 420, 421, 423,
            424, 425, 427, 428, 429,
            431, 432, 433, 435, 436,
            437, 439, 440, 441, 443,
            444, 445, 447, 448, 449,
            451, 452, 454, 455, 456,
            458, 459, 461, 462, 463,
            465, 466, 468, 469, 471,
            472, 474, 475, 476, 478,
            479, 481, 482, 484, 485,
            487, 488, 490, 491, 493,
            494, 496, 497, 499, 500,
            502, 503, 505, 507, 508,
            510, 511, 513, 514, 516,
            518, 519, 521, 522, 524,
            526, 527, 529, 530, 532,
            534, 535, 537, 539, 540,
            542, 544, 545, 547, 549,
            550, 552, 554, 555, 557,
            559, 561, 562, 564, 566,
            567, 569, 571, 573, 575,
            576, 578, 580, 582, 583,
            585, 587, 589, 591, 592,
            594, 596, 598, 600, 602,
            603, 605, 607, 609, 611,
            613, 615, 617, 618, 620,
            622, 624, 626, 628, 630,
            632, 634, 636, 638, 640,
            642, 644, 646, 648, 650,
            652, 654, 656, 658, 660,
            662, 664, 666, 668, 670,
            672, 674, 676, 678, 680,
            682, 684, 686, 688, 691,
            693, 695, 697, 699, 701,
            703, 706, 708, 710, 712,
            714, 717, 719, 721, 723,
            725, 728, 730, 732, 734,
            737, 739, 741, 743, 746,
            748, 750, 753, 755, 757,
            760, 762, 764, 767, 769,
            771, 774, 776, 778, 781,
            783, 786, 788, 790, 793,
            795, 798, 800, 803, 805,
            808, 810, 813, 815, 818,
            820, 823, 825, 828, 830,
            833, 835, 838, 840, 843,
            846, 848, 851, 853, 856,
            859, 861, 864, 867, 869,
            872, 875, 877, 880, 883,
            885, 888, 891, 894, 896,
            899, 902, 905, 907, 910,
            913, 916, 919, 921, 924,
            927, 930, 933, 936, 939,
            941, 944, 947, 950, 953,
            956, 959, 962, 965, 968,
            971, 974, 977, 980, 983,
            986, 989, 992, 995, 998,
            1001, 1004, 1007, 1010, 1013,
            1017, 1020, 1023, 1026, 1029,
            1032, 1035, 1039, 1042, 1045,
            1048, 1051, 1055, 1058, 1061,
            1064, 1068, 1071, 1074, 1078,
            1081, 1084, 1088, 1091, 1094,
            1098, 1101, 1104, 1108, 1111,
            1115, 1118, 1121, 1125, 1128,
            1132, 1135, 1139, 1142, 1146,
            1149, 1153, 1156, 1160, 1163,
            1167, 1171, 1174, 1178, 1181,
            1185, 1189, 1192, 1196, 1200,
            1203, 1207, 1211, 1214, 1218,
            1222, 1226, 1229, 1233, 1237,
            1241, 1245, 1249, 1252, 1256,
            1260, 1264, 1268, 1272, 1276,
            1280, 1283, 1287, 1291, 1295,
            1299, 1303, 1307, 1311, 1315,
            1319, 1323, 1328, 1332, 1336,
            1340, 1344, 1348, 1352, 1356,
            1360, 1365, 1369, 1373, 1377,
            1382, 1386, 1390, 1394, 1399,
            1403, 1407, 1412, 1416, 1420,
            1425, 1429, 1433, 1438, 1442,
            1447, 1451, 1455, 1460, 1464,
            1469, 1473, 1478, 1483, 1487,
            1492, 1496, 1501, 1505, 1510,
            1515, 1519, 1524, 1529, 1533,
            1538, 1543, 1548, 1552, 1557,
            1562, 1567, 1572, 1576, 1581,
            1586, 1591, 1596, 1601, 1606,
            1611, 1616, 1620, 1625, 1630,
            1635, 1640, 1646, 1651, 1656,
            1661, 1666, 1671, 1676, 1681,
            1686, 1692, 1697, 1702, 1707,
            1712, 1718, 1723, 1728, 1734,
            1739, 1744, 1750, 1755, 1760,
            1766, 1771, 1777, 1782, 1788,
            1793, 1799, 1804, 1810, 1815,
            1821, 1826, 1832, 1838, 1843,
            1849, 1855, 1860, 1866, 1872,
            1878, 1883, 1889, 1895, 1901,
            1907, 1912, 1918, 1924, 1930,
            1936, 1942, 1948, 1954, 1960,
            1966, 1972, 1978, 1984, 1990,
            1996, 2003, 2009, 2015, 2021,
            2027, 2033, 2040, 2046, 2052,
            2059, 2065, 2071, 2078, 2084,
            2090, 2097, 2103, 2110, 2116,
            2123, 2129, 2136, 2142, 2149,
            2156, 2162, 2169, 2175, 2182,
            2189, 2196, 2202, 2209, 2216,
            2223, 2230, 2236, 2243, 2250,
            2257, 2264, 2271, 2278, 2285,
            2292, 2299, 2306, 2313, 2320,
            2327, 2335, 2342, 2349, 2356,
            2363, 2371, 2378, 2385, 2393,
            2400, 2407, 2415, 2422, 2430,
            2437, 2444, 2452, 2460, 2467,
            2475, 2482, 2490, 2498, 2505,
            2513, 2521, 2528, 2536, 2544,
            2552, 2560, 2567, 2575, 2583,
            2591, 2599, 2607, 2615, 2623,
            2631, 2639, 2647, 2656, 2664,
            2672, 2680, 2688, 2697, 2705,
            2713, 2722, 2730, 2738, 2747,
            2755, 2764, 2772, 2781, 2789,
            2798, 2806, 2815, 2824, 2832,
            2841, 2850, 2858, 2867, 2876,
            2885, 2894, 2903, 2912, 2921,
            2930, 2939, 2948, 2957, 2966,
            2975, 2984, 2993, 3002, 3012,
            3021, 3030, 3039, 3049, 3058,
            3067, 3077, 3086, 3096, 3105,
            3115, 3124, 3134, 3144, 3153,
            3163, 3173, 3183, 3192, 3202,
            3212, 3222, 3232, 3242, 3252,
            3262, 3272, 3282, 3292, 3302,
            3312, 3322, 3332, 3343, 3353,
            3363, 3374, 3384, 3394, 3405,
            3415, 3426, 3436, 3447, 3457,
            3468, 3479, 3489, 3500, 3511,
            3522, 3532, 3543, 3554, 3565,
            3576, 3587, 3598, 3609, 3620,
            3631, 3642, 3654, 3665, 3676,
            3687, 3699, 3710, 3722, 3733,
            3744, 3756, 3767, 3779, 3791,
            3802, 3814, 3826, 3837, 3849,
            3861, 3873, 3885, 3897, 3909,
            3921, 3933, 3945, 3957, 3969,
            3981, 3994, 4006, 4018, 4031,
            4043, 4055, 4068, 4080, 4093,
            4105, 4118, 4131, 4143, 4156,
            4169, 4182, 4195, 4207, 4220,
            4233, 4246, 4259, 4272, 4286,
            4299, 4312, 4325, 4339, 4352,
            4365, 4379, 4392, 4406, 4419,
            4433, 4446, 4460, 4474, 4487,
            4501, 4515, 4529, 4543, 4557,
            4571, 4585, 4599, 4613, 4627,
            4641, 4656, 4670, 4684, 4699,
            4713, 4728, 4742, 4757, 4771,
            4786, 4801, 4816, 4830, 4845,
            4860, 4875, 4890, 4905, 4920,
            4935, 4950, 4966, 4981, 4996,
            5011, 5027, 5042, 5058, 5073,
            5089, 5105, 5120, 5136, 5152,
            5168, 5183, 5199, 5215, 5231,
            5247, 5264, 5280, 5296, 5312,
            5329, 5345, 5361, 5378, 5394,
            5411, 5428, 5444, 5461, 5478,
            5495, 5512, 5528, 5545, 5562,
            5580, 5597, 5614, 5631, 5648,
            5666, 5683, 5701, 5718, 5736,
            5753, 5771, 5789, 5807, 5824,
            5842, 5860, 5878, 5896, 5914,
            5933, 5951, 5969, 5987, 6006,
            6024, 6043, 6061, 6080, 6099,
            6117, 6136, 6155, 6174, 6193,
            6212, 6231, 6250, 6269, 6289,
            6308, 6327, 6347, 6366, 6386,
            6406, 6425, 6445, 6465, 6485,
            6505, 6525, 6545, 6565, 6585,
            6605, 6625, 6646, 6666, 6687,
            6707, 6728, 6749, 6769, 6790,
            6811, 6832, 6853, 6874, 6895,
            6916, 6937, 6959, 6980, 7002,
            7023, 7045, 7066, 7088, 7110,
            7132, 7154, 7176, 7198, 7220,
            7242, 7264, 7286, 7309, 7331,
            7354, 7376, 7399, 7422, 7445,
            7468, 7490, 7513, 7537, 7560,
            7583, 7606, 7630, 7653, 7677,
            7700, 7724, 7748, 7771, 7795,
            7819, 7843, 7867, 7892, 7916,
            7940, 7964, 7989, 8014, 8038,
            8063, 8088, 8112, 8137, 8162,
            8187, 8213, 8238, 8263, 8289,
            8314, 8340, 8365, 8391, 8417,
            8443, 8468, 8495, 8521, 8547,
            8573, 8599, 8626, 8652, 8679,
            8706, 8732, 8759, 8786, 8813,
            8840, 8867, 8895, 8922, 8949,
            8977, 9004, 9032, 9060, 9088,
            9116, 9144, 9172, 9200, 9228,
            9256, 9285, 9313, 9342, 9371,
            9400, 9428, 9457, 9486, 9516,
            9545, 9574, 9604, 9633, 9663,
            9692, 9722, 9752, 9782, 9812,
            9842, 9872, 9903, 9933, 9964,
            9994, 10025, 10056, 10087, 10118,
            10149, 10180, 10211, 10243, 10274,
            10306, 10337, 10369, 10401, 10433,
            10465, 10497, 10529, 10562, 10594,
            10627, 10659, 10692, 10725, 10758,
            10791, 10824, 10858, 10891, 10924,
            10958, 10992, 11025, 11059, 11093,
            11127, 11161, 11196, 11230, 11265,
            11299, 11334, 11369, 11404, 11439,
            11474, 11509, 11545, 11580, 11616,
            11651, 11687, 11723, 11759, 11795,
            11831, 11868, 11904, 11941, 11978,
            12014, 12051, 12088, 12125, 12163,
            12200, 12238, 12275, 12313, 12351,
            12389, 12427, 12465, 12503, 12542,
            12580, 12619, 12658, 12696, 12735,
            12775, 12814, 12853, 12893, 12932,
            12972, 13012, 13052, 13092, 13132,
            13173, 13213, 13254, 13294, 13335,
            13376, 13417, 13459, 13500, 13541,
            13583, 13625, 13667, 13709, 13751,
            13793, 13835, 13878, 13920, 13963,
            14006, 14049, 14092, 14136, 14179,
            14223, 14266, 14310, 14354, 14398,
            14443, 14487, 14531, 14576, 14621,
            14666, 14711, 14756, 14801, 14847,
            14892, 14938, 14984, 15030, 15076,
            15123, 15169, 15216, 15263, 15309,
            15356, 15404, 15451, 15498, 15546,
            15594, 15642, 15690, 15738, 15786,
            15835, 15884, 15932, 15981, 16030,
            16080, 16129, 16179, 16228, 16278,
            16328, 16378, 16429, 16479, 16530,
            16581, 16632, 16683, 16734, 16785,
            16837, 16889, 16941, 16993, 17045,
            17097, 17150, 17202, 17255, 17308,
            17361, 17415, 17468, 17522, 17576,
            17630, 17684, 17738, 17793, 17848,
            17902, 17957, 18013, 18068, 18123,
            18179, 18235, 18291, 18347, 18404,
            18460, 18517, 18574, 18631, 18688,
            18746, 18803, 18861, 18919, 18977,
            19035, 19094, 19152, 19211, 19270,
            19330, 19389, 19448, 19508, 19568,
            19628, 19689, 19749, 19810, 19871,
            19932, 19993, 20054, 20116, 20178,
            20240, 20302, 20364, 20427, 20490,
            20553, 20616, 20679, 20743, 20806,
            20870, 20935, 20999, 21063, 21128,
            21193, 21258, 21323, 21389, 21455,
            21521, 21587, 21653, 21720, 21786,
            21853, 21920, 21988, 22055, 22123,
            22191, 22259, 22328, 22396, 22465,
            22534, 22603, 22673, 22742, 22812,
            22882, 22953, 23023, 23094, 23165,
            23236, 23308, 23379, 23451, 23523,
            23595, 23668, 23741, 23814, 23887,
            23960, 24034, 24108, 24182, 24256,
            24330, 24405, 24480, 24555, 24631,
            24707, 24783, 24859, 24935, 25012,
            25089, 25166, 25243, 25320, 25398,
            25476, 25555, 25633, 25712, 25791,
            25870, 25950, 26029, 26109, 26190,
            26270, 26351, 26432, 26513, 26594,
            26676, 26758, 26840, 26923, 27006,
            27088, 27172, 27255, 27339, 27423,
            27507, 27592, 27677, 27762, 27847,
            27932, 28018, 28104, 28191, 28277,
            28364, 28451, 28539, 28626, 28714,
            28803, 28891, 28980, 29069, 29158,
            29248, 29338, 29428, 29518, 29609,
            29700, 29791, 29883, 29975, 30067,
            30159, 30252, 30345, 30438, 30532,
            30625, 30719, 30814, 30909, 31003,
            31099, 31194, 31290, 31386, 31483,
            31579, 31677, 31774, 31871, 31969,
            32068, 32166, 32265, 32364, 32464,
            32563, 32663, 32764, 32864, 32965,
            33067, 33168, 33270, 33372, 33475,
            33578, 33681, 33785, 33888, 33992,
            34097, 34202, 34307, 34412, 34518,
            34624, 34730, 34837, 34944, 35051,
            35159, 35267, 35376, 35484, 35593,
            35703, 35812, 35922, 36033, 36144,
            36255, 36366, 36478, 36590, 36702,
            36815, 36928, 37042, 37155, 37270,
            37384, 37499, 37614, 37730, 37846,
            37962, 38079, 38196, 38313, 38431,
            38549, 38667, 38786, 38905, 39025,
            39145, 39265, 39386, 39507, 39628,
            39750, 39872, 39994, 40117, 40241,
            40364, 40488, 40613, 40737, 40863,
            40988, 41114, 41240, 41367, 41494,
            41622, 41750, 41878, 42007, 42136,
            42265, 42395, 42525, 42656, 42787,
            42919, 43050, 43183, 43315, 43448,
            43582, 43716, 43850, 43985, 44120,
            44256, 44392, 44528, 44665, 44802,
            44940, 45078, 45216, 45355, 45495,
            45634, 45775, 45915, 46056, 46198,
            46340, 46482, 46625, 46768, 46912,
            47056, 47201, 47346, 47491, 47637,
            47784, 47930, 48078, 48225, 48374,
            48522, 48671, 48821, 48971, 49121,
            49272, 49424, 49576, 49728, 49881,
            50034, 50188, 50342, 50497, 50652,
            50807, 50963, 51120, 51277, 51435,
            51593, 51751, 51910, 52070, 52230,
            52390, 52551, 52713, 52875, 53037,
            53200, 53364, 53528, 53692, 53857,
            54022, 54188, 54355, 54522, 54690,
            54858, 55026, 55195, 55365, 55535,
            55706, 55877, 56048, 56221, 56393,
            56567, 56740, 56915, 57090, 57265,
            57441, 57618, 57795, 57972, 58150,
            58329, 58508, 58688, 58868, 59049,
            59231, 59413, 59595, 59778, 59962,
            60146, 60331, 60516, 60702, 60889,
            61076, 61264, 61452, 61641, 61830,
            62020, 62211, 62402, 62594, 62786,
            62979, 63172, 63366, 63561, 63756,
            63952, 64149, 64346, 64544, 64742,
            64941, 65140, 65341, 65541, 65743,
            65945, 66147, 66351, 66555, 66759,
            66964, 67170, 67376, 67583, 67791,
            67999, 68208, 68418, 68628, 68839,
            69050, 69263, 69475, 69689, 69903,
            70118, 70333, 70549, 70766, 70984,
            71202, 71421, 71640, 71860, 72081,
            72302, 72525, 72747, 72971, 73195,
            73420, 73646, 73872, 74099, 74327,
            74555, 74784, 75014, 75244, 75476,
            75707, 75940, 76173, 76407, 76642,
            76878, 77114, 77351, 77589, 77827,
            78066, 78306, 78547, 78788, 79030,
            79273, 79516, 79761, 80006, 80252,
            80498, 80746, 80994, 81243, 81492,
            81743, 81994, 82246, 82498, 82752,
            83006, 83261, 83517, 83774, 84031,
            84289, 84548, 84808, 85069, 85330,
            85592, 85855, 86119, 86384, 86649,
            86915, 87182, 87450, 87719, 87989,
            88259, 88530, 88802, 89075, 89349,
            89623, 89899, 90175, 90452, 90730,
            91009, 91288, 91569, 91850, 92132,
            92415, 92699, 92984, 93270, 93557,
            93844, 94132, 94422, 94712, 95003,
            95295, 95587, 95881, 96176, 96471,
            96768, 97065, 97363, 97662, 97963,
            98264, 98565, 98868, 99172, 99477,
            99783, 100089, 100397, 100705, 101015,
            101325, 101636, 101949, 102262, 102576,
            102891, 103207, 103525, 103843, 104162,
            104482, 104803, 105125, 105448, 105772,
            106097, 106423, 106750, 107078, 107407,
            107737, 108068, 108400, 108733, 109067,
            109402, 109738, 110076, 110414, 110753,
            111093, 111435, 111777, 112121, 112465,
            112811, 113157, 113505, 113854, 114204,
            114555, 114907, 115260, 115614, 115969,
            116325, 116683, 117041, 117401, 117762,
            118124, 118486, 118851, 119216, 119582,
            119949, 120318, 120688, 121059, 121431,
            121804, 122178, 122553, 122930, 123308,
            123687, 124067, 124448, 124830, 125214,
            125598, 125984, 126371, 126760, 127149,
            127540, 127932, 128325, 128719, 129115,
            129511, 129909, 130309, 130709, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071
         ) ),
        max_error = cms.double(5748.616225984908),
        output_scale_factor = cms.double(0.953125),
        unused_lsbs = cms.uint32(2)
    ),
    inv_mass_checks = cms.untracked.bool(False),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    sanity_checks = cms.untracked.bool(False),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    )
)


process.TripleTkMuon53p52p5OSMass5to17 = cms.EDFilter("L1GTTripleObjectCond",
    collection1 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        minPt = cms.double(5),
        minQualityScore = cms.uint32(0),
        tag = cms.InputTag("l1tGTProducer","GMTTkMuons")
    ),
    collection2 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        minPt = cms.double(4),
        minQualityScore = cms.uint32(0),
        tag = cms.InputTag("l1tGTProducer","GMTTkMuons")
    ),
    collection3 = cms.PSet(
        maxEta = cms.double(2.4),
        minEta = cms.double(-2.4),
        minPt = cms.double(2),
        minQualityScore = cms.uint32(0),
        tag = cms.InputTag("l1tGTProducer","GMTTkMuons")
    ),
    correl12 = cms.PSet(
        maxDz = cms.double(1),
        minDR = cms.double(0)
    ),
    correl13 = cms.PSet(
        maxDz = cms.double(1),
        maxInvMass = cms.double(17),
        minDR = cms.double(0),
        minInvMass = cms.double(5),
        os = cms.bool(True)
    ),
    correl23 = cms.PSet(
        minDR = cms.double(0)
    ),
    cos_phi_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            487, 487, 487, 487, 487,
            487, 487, 487, 487, 487,
            487, 486, 486, 486, 486,
            486, 486, 486, 485, 485,
            485, 485, 485, 485, 484,
            484, 484, 484, 484, 483,
            483, 483, 483, 483, 482,
            482, 482, 482, 481, 481,
            481, 481, 480, 480, 480,
            480, 479, 479, 479, 478,
            478, 478, 478, 477, 477,
            477, 476, 476, 476, 475,
            475, 475, 474, 474, 474,
            473, 473, 472, 472, 472,
            471, 471, 471, 470, 470,
            469, 469, 468, 468, 468,
            467, 467, 466, 466, 465,
            465, 465, 464, 464, 463,
            463, 462, 462, 461, 461,
            460, 460, 459, 459, 458,
            458, 457, 457, 456, 456,
            455, 454, 454, 453, 453,
            452, 452, 451, 451, 450,
            449, 449, 448, 448, 447,
            446, 446, 445, 445, 444,
            443, 443, 442, 441, 441,
            440, 440, 439, 438, 438,
            437, 436, 436, 435, 434,
            434, 433, 432, 431, 431,
            430, 429, 429, 428, 427,
            426, 426, 425, 424, 423,
            423, 422, 421, 420, 420,
            419, 418, 417, 417, 416,
            415, 414, 413, 413, 412,
            411, 410, 409, 409, 408,
            407, 406, 405, 405, 404,
            403, 402, 401, 400, 399,
            399, 398, 397, 396, 395,
            394, 393, 392, 392, 391,
            390, 389, 388, 387, 386,
            385, 384, 383, 382, 381,
            381, 380, 379, 378, 377,
            376, 375, 374, 373, 372,
            371, 370, 369, 368, 367,
            366, 365, 364, 363, 362,
            361, 360, 359, 358, 357,
            356, 355, 354, 353, 352,
            351, 350, 349, 348, 347,
            346, 345, 343, 342, 341,
            340, 339, 338, 337, 336,
            335, 334, 333, 332, 330,
            329, 328, 327, 326, 325,
            324, 323, 322, 320, 319,
            318, 317, 316, 315, 314,
            312, 311, 310, 309, 308,
            307, 306, 304, 303, 302,
            301, 300, 298, 297, 296,
            295, 294, 293, 291, 290,
            289, 288, 286, 285, 284,
            283, 282, 280, 279, 278,
            277, 275, 274, 273, 272,
            270, 269, 268, 267, 265,
            264, 263, 262, 260, 259,
            258, 257, 255, 254, 253,
            252, 250, 249, 248, 246,
            245, 244, 242, 241, 240,
            239, 237, 236, 235, 233,
            232, 231, 229, 228, 227,
            225, 224, 223, 221, 220,
            219, 217, 216, 215, 213,
            212, 211, 209, 208, 207,
            205, 204, 203, 201, 200,
            198, 197, 196, 194, 193,
            192, 190, 189, 187, 186,
            185, 183, 182, 181, 179,
            178, 176, 175, 174, 172,
            171, 169, 168, 167, 165,
            164, 162, 161, 159, 158,
            157, 155, 154, 152, 151,
            150, 148, 147, 145, 144,
            142, 141, 140, 138, 137,
            135, 134, 132, 131, 129,
            128, 127, 125, 124, 122,
            121, 119, 118, 116, 115,
            113, 112, 111, 109, 108,
            106, 105, 103, 102, 100,
            99, 97, 96, 94, 93,
            92, 90, 89, 87, 86,
            84, 83, 81, 80, 78,
            77, 75, 74, 72, 71,
            69, 68, 66, 65, 63,
            62, 60, 59, 58, 56,
            55, 53, 52, 50, 49,
            47, 46, 44, 43, 41,
            40, 38, 37, 35, 34,
            32, 31, 29, 28, 26,
            25, 23, 22, 20, 19,
            17, 16, 14, 13, 11,
            10, 8, 7, 5, 4,
            2, 1, -1, -2, -4,
            -5, -7, -8, -10, -11,
            -13, -14, -16, -17, -19,
            -20, -22, -23, -25, -26,
            -28, -29, -31, -32, -34,
            -35, -37, -38, -40, -41,
            -43, -44, -46, -47, -49,
            -50, -52, -53, -55, -56,
            -58, -59, -60, -62, -63,
            -65, -66, -68, -69, -71,
            -72, -74, -75, -77, -78,
            -80, -81, -83, -84, -86,
            -87, -89, -90, -92, -93,
            -94, -96, -97, -99, -100,
            -102, -103, -105, -106, -108,
            -109, -111, -112, -113, -115,
            -116, -118, -119, -121, -122,
            -124, -125, -127, -128, -129,
            -131, -132, -134, -135, -137,
            -138, -140, -141, -142, -144,
            -145, -147, -148, -150, -151,
            -152, -154, -155, -157, -158,
            -159, -161, -162, -164, -165,
            -167, -168, -169, -171, -172,
            -174, -175, -176, -178, -179,
            -181, -182, -183, -185, -186,
            -187, -189, -190, -192, -193,
            -194, -196, -197, -198, -200,
            -201, -203, -204, -205, -207,
            -208, -209, -211, -212, -213,
            -215, -216, -217, -219, -220,
            -221, -223, -224, -225, -227,
            -228, -229, -231, -232, -233,
            -235, -236, -237, -239, -240,
            -241, -242, -244, -245, -246,
            -248, -249, -250, -252, -253,
            -254, -255, -257, -258, -259,
            -260, -262, -263, -264, -265,
            -267, -268, -269, -270, -272,
            -273, -274, -275, -277, -278,
            -279, -280, -282, -283, -284,
            -285, -286, -288, -289, -290,
            -291, -293, -294, -295, -296,
            -297, -298, -300, -301, -302,
            -303, -304, -306, -307, -308,
            -309, -310, -311, -312, -314,
            -315, -316, -317, -318, -319,
            -320, -322, -323, -324, -325,
            -326, -327, -328, -329, -330,
            -332, -333, -334, -335, -336,
            -337, -338, -339, -340, -341,
            -342, -343, -345, -346, -347,
            -348, -349, -350, -351, -352,
            -353, -354, -355, -356, -357,
            -358, -359, -360, -361, -362,
            -363, -364, -365, -366, -367,
            -368, -369, -370, -371, -372,
            -373, -374, -375, -376, -377,
            -378, -379, -380, -381, -381,
            -382, -383, -384, -385, -386,
            -387, -388, -389, -390, -391,
            -392, -392, -393, -394, -395,
            -396, -397, -398, -399, -399,
            -400, -401, -402, -403, -404,
            -405, -405, -406, -407, -408,
            -409, -409, -410, -411, -412,
            -413, -413, -414, -415, -416,
            -417, -417, -418, -419, -420,
            -420, -421, -422, -423, -423,
            -424, -425, -426, -426, -427,
            -428, -429, -429, -430, -431,
            -431, -432, -433, -434, -434,
            -435, -436, -436, -437, -438,
            -438, -439, -440, -440, -441,
            -441, -442, -443, -443, -444,
            -445, -445, -446, -446, -447,
            -448, -448, -449, -449, -450,
            -451, -451, -452, -452, -453,
            -453, -454, -454, -455, -456,
            -456, -457, -457, -458, -458,
            -459, -459, -460, -460, -461,
            -461, -462, -462, -463, -463,
            -464, -464, -465, -465, -465,
            -466, -466, -467, -467, -468,
            -468, -468, -469, -469, -470,
            -470, -471, -471, -471, -472,
            -472, -472, -473, -473, -474,
            -474, -474, -475, -475, -475,
            -476, -476, -476, -477, -477,
            -477, -478, -478, -478, -478,
            -479, -479, -479, -480, -480,
            -480, -480, -481, -481, -481,
            -481, -482, -482, -482, -482,
            -483, -483, -483, -483, -483,
            -484, -484, -484, -484, -484,
            -485, -485, -485, -485, -485,
            -485, -486, -486, -486, -486,
            -486, -486, -486, -487, -487,
            -487, -487, -487, -487, -487,
            -487, -487, -487, -487, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488
         ) ),
        max_error = cms.double(0.0025338281044886835),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            489, 489, 489, 489, 489,
            489, 489, 489, 489, 489,
            489, 490, 490, 490, 490,
            490, 490, 490, 491, 491,
            491, 491, 491, 491, 492,
            492, 492, 492, 492, 493,
            493, 493, 493, 493, 494,
            494, 494, 494, 495, 495,
            495, 495, 496, 496, 496,
            496, 497, 497, 497, 498,
            498, 498, 499, 499, 499,
            499, 500, 500, 500, 501,
            501, 502, 502, 502, 503,
            503, 503, 504, 504, 504,
            505, 505, 506, 506, 507,
            507, 507, 508, 508, 509,
            509, 510, 510, 510, 511,
            511, 512, 512, 513, 513,
            514, 514, 515, 515, 516,
            516, 517, 517, 518, 518,
            519, 520, 520, 521, 521,
            522, 522, 523, 523, 524,
            525, 525, 526, 526, 527,
            528, 528, 529, 530, 530,
            531, 531, 532, 533, 533,
            534, 535, 535, 536, 537,
            537, 538, 539, 540, 540,
            541, 542, 542, 543, 544,
            545, 545, 546, 547, 548,
            548, 549, 550, 551, 551,
            552, 553, 554, 555, 555,
            556, 557, 558, 559, 560,
            560, 561, 562, 563, 564,
            565, 566, 567, 567, 568,
            569, 570, 571, 572, 573,
            574, 575, 576, 577, 577,
            578, 579, 580, 581, 582,
            583, 584, 585, 586, 587,
            588, 589, 590, 591, 592,
            593, 594, 595, 596, 598,
            599, 600, 601, 602, 603,
            604, 605, 606, 607, 608,
            610, 611, 612, 613, 614,
            615, 616, 618, 619, 620,
            621, 622, 623, 625, 626,
            627, 628, 629, 631, 632,
            633, 634, 636, 637, 638,
            639, 641, 642, 643, 644,
            646, 647, 648, 650, 651,
            652, 654, 655, 656, 658,
            659, 660, 662, 663, 665,
            666, 667, 669, 670, 672,
            673, 674, 676, 677, 679,
            680, 682, 683, 685, 686,
            687, 689, 690, 692, 693,
            695, 697, 698, 700, 701,
            703, 704, 706, 707, 709,
            710, 712, 714, 715, 717,
            719, 720, 722, 723, 725,
            727, 728, 730, 732, 733,
            735, 737, 738, 740, 742,
            744, 745, 747, 749, 750,
            752, 754, 756, 758, 759,
            761, 763, 765, 767, 768,
            770, 772, 774, 776, 778,
            779, 781, 783, 785, 787,
            789, 791, 793, 795, 796,
            798, 800, 802, 804, 806,
            808, 810, 812, 814, 816,
            818, 820, 822, 824, 826,
            828, 830, 832, 835, 837,
            839, 841, 843, 845, 847,
            849, 851, 854, 856, 858,
            860, 862, 864, 867, 869,
            871, 873, 875, 878, 880,
            882, 884, 887, 889, 891,
            894, 896, 898, 900, 903,
            905, 907, 910, 912, 915,
            917, 919, 922, 924, 927,
            929, 931, 934, 936, 939,
            941, 944, 946, 949, 951,
            954, 956, 959, 961, 964,
            966, 969, 971, 974, 977,
            979, 982, 984, 987, 990,
            992, 995, 998, 1000, 1003,
            1006, 1008, 1011, 1014, 1017,
            1019, 1022, 1025, 1028, 1030,
            1033, 1036, 1039, 1042, 1044,
            1047, 1050, 1053, 1056, 1059,
            1062, 1065, 1067, 1070, 1073,
            1076, 1079, 1082, 1085, 1088,
            1091, 1094, 1097, 1100, 1103,
            1106, 1109, 1112, 1115, 1118,
            1122, 1125, 1128, 1131, 1134,
            1137, 1140, 1143, 1147, 1150,
            1153, 1156, 1159, 1163, 1166,
            1169, 1172, 1176, 1179, 1182,
            1186, 1189, 1192, 1196, 1199,
            1202, 1206, 1209, 1212, 1216,
            1219, 1223, 1226, 1230, 1233,
            1237, 1240, 1244, 1247, 1251,
            1254, 1258, 1261, 1265, 1268,
            1272, 1276, 1279, 1283, 1287,
            1290, 1294, 1298, 1301, 1305,
            1309, 1312, 1316, 1320, 1324,
            1327, 1331, 1335, 1339, 1343,
            1347, 1350, 1354, 1358, 1362,
            1366, 1370, 1374, 1378, 1382,
            1386, 1390, 1394, 1398, 1402,
            1406, 1410, 1414, 1418, 1422,
            1426, 1430, 1434, 1439, 1443,
            1447, 1451, 1455, 1459, 1464,
            1468, 1472, 1476, 1481, 1485,
            1489, 1494, 1498, 1502, 1507,
            1511, 1516, 1520, 1524, 1529,
            1533, 1538, 1542, 1547, 1551,
            1556, 1560, 1565, 1569, 1574,
            1579, 1583, 1588, 1592, 1597,
            1602, 1606, 1611, 1616, 1621,
            1625, 1630, 1635, 1640, 1645,
            1649, 1654, 1659, 1664, 1669,
            1674, 1679, 1684, 1689, 1693,
            1698, 1703, 1708, 1714, 1719,
            1724, 1729, 1734, 1739, 1744,
            1749, 1754, 1760, 1765, 1770,
            1775, 1780, 1786, 1791, 1796,
            1802, 1807, 1812, 1818, 1823,
            1828, 1834, 1839, 1845, 1850,
            1856, 1861, 1867, 1872, 1878,
            1883, 1889, 1894, 1900, 1906,
            1911, 1917, 1923, 1929, 1934,
            1940, 1946, 1952, 1957, 1963,
            1969, 1975, 1981, 1987, 1993,
            1999, 2004, 2010, 2016, 2022,
            2028, 2035, 2041, 2047, 2053,
            2059, 2065, 2071, 2077, 2084,
            2090, 2096, 2102, 2109, 2115,
            2121, 2128, 2134, 2140, 2147,
            2153, 2160, 2166, 2173, 2179,
            2186, 2192, 2199, 2205, 2212,
            2219, 2225, 2232, 2239, 2245,
            2252, 2259, 2266, 2272, 2279,
            2286, 2293, 2300, 2307, 2314,
            2321, 2328, 2335, 2342, 2349,
            2356, 2363, 2370, 2377, 2384,
            2391, 2398, 2406, 2413, 2420,
            2427, 2435, 2442, 2449, 2457,
            2464, 2472, 2479, 2487, 2494,
            2502, 2509, 2517, 2524, 2532,
            2539, 2547, 2555, 2563, 2570,
            2578, 2586, 2594, 2601, 2609,
            2617, 2625, 2633, 2641, 2649,
            2657, 2665, 2673, 2681, 2689,
            2697, 2705, 2714, 2722, 2730,
            2738, 2747, 2755, 2763, 2772,
            2780, 2788, 2797, 2805, 2814,
            2822, 2831, 2839, 2848, 2857,
            2865, 2874, 2883, 2891, 2900,
            2909, 2918, 2927, 2935, 2944,
            2953, 2962, 2971, 2980, 2989,
            2998, 3007, 3016, 3026, 3035,
            3044, 3053, 3062, 3072, 3081,
            3090, 3100, 3109, 3119, 3128,
            3138, 3147, 3157, 3166, 3176,
            3186, 3195, 3205, 3215, 3224,
            3234, 3244, 3254, 3264, 3274,
            3284, 3294, 3304, 3314, 3324,
            3334, 3344, 3354, 3364, 3375,
            3385, 3395, 3405, 3416, 3426,
            3437, 3447, 3458, 3468, 3479,
            3489, 3500, 3510, 3521, 3532,
            3543, 3553, 3564, 3575, 3586,
            3597, 3608, 3619, 3630, 3641,
            3652, 3663, 3674, 3685, 3697,
            3708, 3719, 3730, 3742, 3753,
            3765, 3776, 3788, 3799, 3811,
            3822, 3834, 3846, 3857, 3869,
            3881, 3893, 3905, 3917, 3929,
            3941, 3953, 3965, 3977, 3989,
            4001, 4013, 4025, 4038, 4050,
            4062, 4075, 4087, 4100, 4112,
            4125, 4137, 4150, 4163, 4175,
            4188, 4201, 4214, 4226, 4239,
            4252, 4265, 4278, 4291, 4304,
            4318, 4331, 4344, 4357, 4371,
            4384, 4397, 4411, 4424, 4438,
            4451, 4465, 4479, 4492, 4506,
            4520, 4533, 4547, 4561, 4575,
            4589, 4603, 4617, 4631, 4645,
            4660, 4674, 4688, 4703, 4717,
            4731, 4746, 4760, 4775, 4789,
            4804, 4819, 4833, 4848, 4863,
            4878, 4893, 4908, 4923, 4938,
            4953, 4968, 4983, 4999, 5014,
            5029, 5045, 5060, 5075, 5091,
            5107, 5122, 5138, 5154, 5169,
            5185, 5201, 5217, 5233, 5249,
            5265, 5281, 5297, 5313, 5330,
            5346, 5362, 5379, 5395, 5412,
            5428, 5445, 5462, 5478, 5495,
            5512, 5529, 5546, 5563, 5580,
            5597, 5614, 5631, 5648, 5666,
            5683, 5700, 5718, 5735, 5753,
            5770, 5788, 5806, 5824, 5841,
            5859, 5877, 5895, 5913, 5931,
            5950, 5968, 5986, 6004, 6023,
            6041, 6060, 6078, 6097, 6116,
            6134, 6153, 6172, 6191, 6210,
            6229, 6248, 6267, 6286, 6305,
            6325, 6344, 6364, 6383, 6403,
            6422, 6442, 6462, 6481, 6501,
            6521, 6541, 6561, 6581, 6602,
            6622, 6642, 6662, 6683, 6703,
            6724, 6744, 6765, 6786, 6807,
            6828, 6848, 6869, 6891, 6912,
            6933, 6954, 6975, 6997, 7018,
            7040, 7061, 7083, 7105, 7126,
            7148, 7170, 7192, 7214, 7236,
            7259, 7281, 7303, 7325, 7348,
            7370, 7393, 7416, 7438, 7461,
            7484, 7507, 7530, 7553, 7576,
            7600, 7623, 7646, 7670, 7693,
            7717, 7741, 7764, 7788, 7812,
            7836, 7860, 7884, 7908, 7932,
            7957, 7981, 8006, 8030, 8055,
            8080, 8104, 8129, 8154, 8179,
            8204, 8229, 8255, 8280, 8305,
            8331, 8356, 8382, 8408, 8434,
            8459, 8485, 8511, 8537, 8564,
            8590, 8616, 8643, 8669, 8696,
            8722, 8749, 8776, 8803, 8830,
            8857, 8884, 8912, 8939, 8966,
            8994, 9021, 9049, 9077, 9105,
            9133, 9161, 9189, 9217, 9245,
            9274, 9302, 9331, 9359, 9388,
            9417, 9446, 9475, 9504, 9533,
            9562, 9591, 9621, 9650, 9680,
            9710, 9740, 9769, 9799, 9830,
            9860, 9890, 9920, 9951, 9981,
            10012, 10043, 10073, 10104, 10135,
            10166, 10198, 10229, 10260, 10292,
            10323, 10355, 10387, 10419, 10451,
            10483, 10515, 10547, 10580, 10612,
            10645, 10677, 10710, 10743, 10776,
            10809, 10842, 10876, 10909, 10942,
            10976, 11010, 11044, 11077, 11111,
            11146, 11180, 11214, 11248, 11283,
            11318, 11352, 11387, 11422, 11457,
            11492, 11528, 11563, 11599, 11634,
            11670, 11706, 11742, 11778, 11814,
            11850, 11887, 11923, 11960, 11996,
            12033, 12070, 12107, 12144, 12182,
            12219, 12257, 12294, 12332, 12370,
            12408, 12446, 12484, 12522, 12561,
            12599, 12638, 12677, 12716, 12755,
            12794, 12833, 12873, 12912, 12952,
            12992, 13032, 13072, 13112, 13152,
            13192, 13233, 13274, 13314, 13355,
            13396, 13437, 13479, 13520, 13561,
            13603, 13645, 13687, 13729, 13771,
            13813, 13856, 13898, 13941, 13984,
            14027, 14070, 14113, 14156, 14200,
            14243, 14287, 14331, 14375, 14419,
            14463, 14508, 14552, 14597, 14642,
            14687, 14732, 14777, 14823, 14868,
            14914, 14960, 15005, 15052, 15098,
            15144, 15191, 15237, 15284, 15331,
            15378, 15425, 15473, 15520, 15568,
            15616, 15664, 15712, 15760, 15808,
            15857, 15906, 15955, 16004, 16053,
            16102, 16151, 16201, 16251, 16301,
            16351, 16401, 16451, 16502, 16553,
            16603, 16654, 16706, 16757, 16808,
            16860, 16912, 16964, 17016, 17068,
            17121, 17173, 17226, 17279, 17332,
            17385, 17438, 17492, 17546, 17600,
            17654, 17708, 17762, 17817, 17872,
            17926, 17982, 18037, 18092, 18148,
            18203, 18259, 18315, 18372, 18428,
            18485, 18542, 18598, 18656, 18713,
            18770, 18828, 18886, 18944, 19002,
            19060, 19119, 19178, 19237, 19296,
            19355, 19414, 19474, 19534, 19594,
            19654, 19714, 19775, 19836, 19897,
            19958, 20019, 20081, 20142, 20204,
            20266, 20328, 20391, 20454, 20516,
            20579, 20643, 20706, 20770, 20833,
            20897, 20962, 21026, 21091, 21155,
            21220, 21286, 21351, 21417, 21482,
            21548, 21615, 21681, 21748, 21814,
            21881, 21949, 22016, 22084, 22151,
            22220, 22288, 22356, 22425, 22494,
            22563, 22632, 22702, 22771, 22841,
            22912, 22982, 23053, 23123, 23194,
            23266, 23337, 23409, 23481, 23553,
            23625, 23698, 23771, 23844, 23917,
            23990, 24064, 24138, 24212, 24287,
            24361, 24436, 24511, 24586, 24662,
            24738, 24814, 24890, 24966, 25043,
            25120, 25197, 25275, 25352, 25430,
            25508, 25587, 25665, 25744, 25823,
            25902, 25982, 26062, 26142, 26222,
            26303, 26384, 26465, 26546, 26627,
            26709, 26791, 26874, 26956, 27039,
            27122, 27205, 27289, 27373, 27457,
            27541, 27626, 27711, 27796, 27881,
            27967, 28053, 28139, 28226, 28312,
            28399, 28486, 28574, 28662, 28750,
            28838, 28927, 29016, 29105, 29194,
            29284, 29374, 29464, 29555, 29645,
            29736, 29828, 29919, 30011, 30104,
            30196, 30289, 30382, 30475, 30569,
            30663, 30757, 30851, 30946, 31041,
            31137, 31232, 31328, 31425, 31521,
            31618, 31715, 31813, 31910, 32008,
            32107, 32205, 32304, 32403, 32503,
            32603, 32703, 32804, 32904, 33005,
            33107, 33209, 33311, 33413, 33516,
            33619, 33722, 33825, 33929, 34034,
            34138, 34243, 34348, 34454, 34560,
            34666, 34772, 34879, 34986, 35094,
            35202, 35310, 35418, 35527, 35636,
            35746, 35856, 35966, 36076, 36187,
            36298, 36410, 36522, 36634, 36746,
            36859, 36973, 37086, 37200, 37314,
            37429, 37544, 37659, 37775, 37891,
            38008, 38124, 38241, 38359, 38477,
            38595, 38714, 38833, 38952, 39072,
            39192, 39312, 39433, 39554, 39675,
            39797, 39920, 40042, 40165, 40289,
            40413, 40537, 40661, 40786, 40911,
            41037, 41163, 41290, 41417, 41544,
            41671, 41800, 41928, 42057, 42186,
            42316, 42446, 42576, 42707, 42838,
            42970, 43102, 43234, 43367, 43500,
            43634, 43768, 43902, 44037, 44173,
            44308, 44444, 44581, 44718, 44855,
            44993, 45131, 45270, 45409, 45549,
            45689, 45829, 45970, 46111, 46253,
            46395, 46537, 46680, 46824, 46968,
            47112, 47257, 47402, 47548, 47694,
            47840, 47987, 48135, 48283, 48431,
            48580, 48729, 48879, 49029, 49180,
            49331, 49482, 49634, 49787, 49940,
            50093, 50247, 50401, 50556, 50712,
            50867, 51024, 51181, 51338, 51495,
            51654, 51812, 51972, 52131, 52291,
            52452, 52613, 52775, 52937, 53100,
            53263, 53427, 53591, 53755, 53921,
            54086, 54252, 54419, 54586, 54754,
            54922, 55091, 55260, 55430, 55600,
            55771, 55943, 56114, 56287, 56460,
            56633, 56807, 56982, 57157, 57333,
            57509, 57685, 57863, 58040, 58219,
            58398, 58577, 58757, 58938, 59119,
            59300, 59483, 59665, 59849, 60033,
            60217, 60402, 60588, 60774, 60960,
            61148, 61336, 61524, 61713, 61903,
            62093, 62284, 62475, 62667, 62860,
            63053, 63247, 63441, 63636, 63831,
            64027, 64224, 64422, 64619, 64818,
            65017, 65217, 65417, 65618, 65820,
            66022, 66225, 66429, 66633, 66837,
            67043, 67249, 67455, 67663, 67870,
            68079, 68288, 68498, 68708, 68920,
            69131, 69344, 69557, 69771, 69985,
            70200, 70416, 70632, 70849, 71067,
            71285, 71504, 71724, 71944, 72165,
            72387, 72609, 72833, 73056, 73281,
            73506, 73732, 73958, 74186, 74414,
            74642, 74872, 75102, 75332, 75564,
            75796, 76029, 76262, 76497, 76732,
            76968, 77204, 77441, 77679, 77918,
            78157, 78398, 78638, 78880, 79122,
            79366, 79609, 79854, 80099, 80345,
            80592, 80840, 81088, 81338, 81587,
            81838, 82090, 82342, 82595, 82849,
            83103, 83358, 83615, 83872, 84129,
            84388, 84647, 84907, 85168, 85430,
            85692, 85955, 86220, 86485, 86750,
            87017, 87284, 87552, 87821, 88091,
            88362, 88633, 88906, 89179, 89453,
            89728, 90003, 90280, 90557, 90836,
            91115, 91395, 91676, 91957, 92240,
            92523, 92807, 93093, 93379, 93666,
            93953, 94242, 94532, 94822, 95113,
            95406, 95699, 95993, 96288, 96584,
            96881, 97178, 97477, 97776, 98077,
            98378, 98680, 98984, 99288, 99593,
            99899, 100206, 100514, 100822, 101132,
            101443, 101755, 102067, 102381, 102696,
            103011, 103328, 103645, 103964, 104283,
            104603, 104925, 105247, 105571, 105895,
            106220, 106547, 106874, 107203, 107532,
            107862, 108194, 108526, 108860, 109194,
            109530, 109866, 110204, 110542, 110882,
            111223, 111565, 111907, 112251, 112596,
            112942, 113289, 113637, 113986, 114337,
            114688, 115040, 115394, 115748, 116104,
            116461, 116819, 117178, 117538, 117899,
            118261, 118624, 118989, 119354, 119721,
            120089, 120458, 120828, 121199, 121572,
            121945, 122320, 122696, 123073, 123451,
            123830, 124211, 124593, 124975, 125359,
            125745, 126131, 126518, 126907, 127297,
            127688, 128081, 128474, 128869, 129265,
            129662, 130061, 130260
         ) ),
        max_error = cms.double(0.6152529479288091),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut2 = cms.PSet(
        lut = cms.vint32( (
            256, 256, 257, 258, 259,
            260, 260, 261, 262, 263,
            264, 264, 265, 266, 267,
            268, 268, 269, 270, 271,
            272, 273, 273, 274, 275,
            276, 277, 278, 279, 279,
            280, 281, 282, 283, 284,
            285, 285, 286, 287, 288,
            289, 290, 291, 292, 293,
            293, 294, 295, 296, 297,
            298, 299, 300, 301, 302,
            303, 303, 304, 305, 306,
            307, 308, 309, 310, 311,
            312, 313, 314, 315, 316,
            317, 318, 319, 320, 321,
            322, 323, 324, 325, 326,
            327, 328, 329, 330, 331,
            332, 333, 334, 335, 336,
            337, 338, 339, 340, 341,
            342, 343, 344, 345, 346,
            347, 348, 349, 351, 352,
            353, 354, 355, 356, 357,
            358, 359, 360, 361, 363,
            364, 365, 366, 367, 368,
            369, 370, 372, 373, 374,
            375, 376, 377, 379, 380,
            381, 382, 383, 384, 386,
            387, 388, 389, 390, 392,
            393, 394, 395, 396, 398,
            399, 400, 401, 402, 404,
            405, 406, 407, 409, 410,
            411, 412, 414, 415, 416,
            418, 419, 420, 421, 423,
            424, 425, 427, 428, 429,
            431, 432, 433, 435, 436,
            437, 439, 440, 441, 443,
            444, 445, 447, 448, 449,
            451, 452, 454, 455, 456,
            458, 459, 461, 462, 463,
            465, 466, 468, 469, 471,
            472, 474, 475, 476, 478,
            479, 481, 482, 484, 485,
            487, 488, 490, 491, 493,
            494, 496, 497, 499, 500,
            502, 503, 505, 507, 508,
            510, 511, 513, 514, 516,
            518, 519, 521, 522, 524,
            526, 527, 529, 530, 532,
            534, 535, 537, 539, 540,
            542, 544, 545, 547, 549,
            550, 552, 554, 555, 557,
            559, 561, 562, 564, 566,
            567, 569, 571, 573, 575,
            576, 578, 580, 582, 583,
            585, 587, 589, 591, 592,
            594, 596, 598, 600, 602,
            603, 605, 607, 609, 611,
            613, 615, 617, 618, 620,
            622, 624, 626, 628, 630,
            632, 634, 636, 638, 640,
            642, 644, 646, 648, 650,
            652, 654, 656, 658, 660,
            662, 664, 666, 668, 670,
            672, 674, 676, 678, 680,
            682, 684, 686, 688, 691,
            693, 695, 697, 699, 701,
            703, 706, 708, 710, 712,
            714, 717, 719, 721, 723,
            725, 728, 730, 732, 734,
            737, 739, 741, 743, 746,
            748, 750, 753, 755, 757,
            760, 762, 764, 767, 769,
            771, 774, 776, 778, 781,
            783, 786, 788, 790, 793,
            795, 798, 800, 803, 805,
            808, 810, 813, 815, 818,
            820, 823, 825, 828, 830,
            833, 835, 838, 840, 843,
            846, 848, 851, 853, 856,
            859, 861, 864, 867, 869,
            872, 875, 877, 880, 883,
            885, 888, 891, 894, 896,
            899, 902, 905, 907, 910,
            913, 916, 919, 921, 924,
            927, 930, 933, 936, 939,
            941, 944, 947, 950, 953,
            956, 959, 962, 965, 968,
            971, 974, 977, 980, 983,
            986, 989, 992, 995, 998,
            1001, 1004, 1007, 1010, 1013,
            1017, 1020, 1023, 1026, 1029,
            1032, 1035, 1039, 1042, 1045,
            1048, 1051, 1055, 1058, 1061,
            1064, 1068, 1071, 1074, 1078,
            1081, 1084, 1088, 1091, 1094,
            1098, 1101, 1104, 1108, 1111,
            1115, 1118, 1121, 1125, 1128,
            1132, 1135, 1139, 1142, 1146,
            1149, 1153, 1156, 1160, 1163,
            1167, 1171, 1174, 1178, 1181,
            1185, 1189, 1192, 1196, 1200,
            1203, 1207, 1211, 1214, 1218,
            1222, 1226, 1229, 1233, 1237,
            1241, 1245, 1249, 1252, 1256,
            1260, 1264, 1268, 1272, 1276,
            1280, 1283, 1287, 1291, 1295,
            1299, 1303, 1307, 1311, 1315,
            1319, 1323, 1328, 1332, 1336,
            1340, 1344, 1348, 1352, 1356,
            1360, 1365, 1369, 1373, 1377,
            1382, 1386, 1390, 1394, 1399,
            1403, 1407, 1412, 1416, 1420,
            1425, 1429, 1433, 1438, 1442,
            1447, 1451, 1455, 1460, 1464,
            1469, 1473, 1478, 1483, 1487,
            1492, 1496, 1501, 1505, 1510,
            1515, 1519, 1524, 1529, 1533,
            1538, 1543, 1548, 1552, 1557,
            1562, 1567, 1572, 1576, 1581,
            1586, 1591, 1596, 1601, 1606,
            1611, 1616, 1620, 1625, 1630,
            1635, 1640, 1646, 1651, 1656,
            1661, 1666, 1671, 1676, 1681,
            1686, 1692, 1697, 1702, 1707,
            1712, 1718, 1723, 1728, 1734,
            1739, 1744, 1750, 1755, 1760,
            1766, 1771, 1777, 1782, 1788,
            1793, 1799, 1804, 1810, 1815,
            1821, 1826, 1832, 1838, 1843,
            1849, 1855, 1860, 1866, 1872,
            1878, 1883, 1889, 1895, 1901,
            1907, 1912, 1918, 1924, 1930,
            1936, 1942, 1948, 1954, 1960,
            1966, 1972, 1978, 1984, 1990,
            1996, 2003, 2009, 2015, 2021,
            2027, 2033, 2040, 2046, 2052,
            2059, 2065, 2071, 2078, 2084,
            2090, 2097, 2103, 2110, 2116,
            2123, 2129, 2136, 2142, 2149,
            2156, 2162, 2169, 2175, 2182,
            2189, 2196, 2202, 2209, 2216,
            2223, 2230, 2236, 2243, 2250,
            2257, 2264, 2271, 2278, 2285,
            2292, 2299, 2306, 2313, 2320,
            2327, 2335, 2342, 2349, 2356,
            2363, 2371, 2378, 2385, 2393,
            2400, 2407, 2415, 2422, 2430,
            2437, 2444, 2452, 2460, 2467,
            2475, 2482, 2490, 2498, 2505,
            2513, 2521, 2528, 2536, 2544,
            2552, 2560, 2567, 2575, 2583,
            2591, 2599, 2607, 2615, 2623,
            2631, 2639, 2647, 2656, 2664,
            2672, 2680, 2688, 2697, 2705,
            2713, 2722, 2730, 2738, 2747,
            2755, 2764, 2772, 2781, 2789,
            2798, 2806, 2815, 2824, 2832,
            2841, 2850, 2858, 2867, 2876,
            2885, 2894, 2903, 2912, 2921,
            2930, 2939, 2948, 2957, 2966,
            2975, 2984, 2993, 3002, 3012,
            3021, 3030, 3039, 3049, 3058,
            3067, 3077, 3086, 3096, 3105,
            3115, 3124, 3134, 3144, 3153,
            3163, 3173, 3183, 3192, 3202,
            3212, 3222, 3232, 3242, 3252,
            3262, 3272, 3282, 3292, 3302,
            3312, 3322, 3332, 3343, 3353,
            3363, 3374, 3384, 3394, 3405,
            3415, 3426, 3436, 3447, 3457,
            3468, 3479, 3489, 3500, 3511,
            3522, 3532, 3543, 3554, 3565,
            3576, 3587, 3598, 3609, 3620,
            3631, 3642, 3654, 3665, 3676,
            3687, 3699, 3710, 3722, 3733,
            3744, 3756, 3767, 3779, 3791,
            3802, 3814, 3826, 3837, 3849,
            3861, 3873, 3885, 3897, 3909,
            3921, 3933, 3945, 3957, 3969,
            3981, 3994, 4006, 4018, 4031,
            4043, 4055, 4068, 4080, 4093,
            4105, 4118, 4131, 4143, 4156,
            4169, 4182, 4195, 4207, 4220,
            4233, 4246, 4259, 4272, 4286,
            4299, 4312, 4325, 4339, 4352,
            4365, 4379, 4392, 4406, 4419,
            4433, 4446, 4460, 4474, 4487,
            4501, 4515, 4529, 4543, 4557,
            4571, 4585, 4599, 4613, 4627,
            4641, 4656, 4670, 4684, 4699,
            4713, 4728, 4742, 4757, 4771,
            4786, 4801, 4816, 4830, 4845,
            4860, 4875, 4890, 4905, 4920,
            4935, 4950, 4966, 4981, 4996,
            5011, 5027, 5042, 5058, 5073,
            5089, 5105, 5120, 5136, 5152,
            5168, 5183, 5199, 5215, 5231,
            5247, 5264, 5280, 5296, 5312,
            5329, 5345, 5361, 5378, 5394,
            5411, 5428, 5444, 5461, 5478,
            5495, 5512, 5528, 5545, 5562,
            5580, 5597, 5614, 5631, 5648,
            5666, 5683, 5701, 5718, 5736,
            5753, 5771, 5789, 5807, 5824,
            5842, 5860, 5878, 5896, 5914,
            5933, 5951, 5969, 5987, 6006,
            6024, 6043, 6061, 6080, 6099,
            6117, 6136, 6155, 6174, 6193,
            6212, 6231, 6250, 6269, 6289,
            6308, 6327, 6347, 6366, 6386,
            6406, 6425, 6445, 6465, 6485,
            6505, 6525, 6545, 6565, 6585,
            6605, 6625, 6646, 6666, 6687,
            6707, 6728, 6749, 6769, 6790,
            6811, 6832, 6853, 6874, 6895,
            6916, 6937, 6959, 6980, 7002,
            7023, 7045, 7066, 7088, 7110,
            7132, 7154, 7176, 7198, 7220,
            7242, 7264, 7286, 7309, 7331,
            7354, 7376, 7399, 7422, 7445,
            7468, 7490, 7513, 7537, 7560,
            7583, 7606, 7630, 7653, 7677,
            7700, 7724, 7748, 7771, 7795,
            7819, 7843, 7867, 7892, 7916,
            7940, 7964, 7989, 8014, 8038,
            8063, 8088, 8112, 8137, 8162,
            8187, 8213, 8238, 8263, 8289,
            8314, 8340, 8365, 8391, 8417,
            8443, 8468, 8495, 8521, 8547,
            8573, 8599, 8626, 8652, 8679,
            8706, 8732, 8759, 8786, 8813,
            8840, 8867, 8895, 8922, 8949,
            8977, 9004, 9032, 9060, 9088,
            9116, 9144, 9172, 9200, 9228,
            9256, 9285, 9313, 9342, 9371,
            9400, 9428, 9457, 9486, 9516,
            9545, 9574, 9604, 9633, 9663,
            9692, 9722, 9752, 9782, 9812,
            9842, 9872, 9903, 9933, 9964,
            9994, 10025, 10056, 10087, 10118,
            10149, 10180, 10211, 10243, 10274,
            10306, 10337, 10369, 10401, 10433,
            10465, 10497, 10529, 10562, 10594,
            10627, 10659, 10692, 10725, 10758,
            10791, 10824, 10858, 10891, 10924,
            10958, 10992, 11025, 11059, 11093,
            11127, 11161, 11196, 11230, 11265,
            11299, 11334, 11369, 11404, 11439,
            11474, 11509, 11545, 11580, 11616,
            11651, 11687, 11723, 11759, 11795,
            11831, 11868, 11904, 11941, 11978,
            12014, 12051, 12088, 12125, 12163,
            12200, 12238, 12275, 12313, 12351,
            12389, 12427, 12465, 12503, 12542,
            12580, 12619, 12658, 12696, 12735,
            12775, 12814, 12853, 12893, 12932,
            12972, 13012, 13052, 13092, 13132,
            13173, 13213, 13254, 13294, 13335,
            13376, 13417, 13459, 13500, 13541,
            13583, 13625, 13667, 13709, 13751,
            13793, 13835, 13878, 13920, 13963,
            14006, 14049, 14092, 14136, 14179,
            14223, 14266, 14310, 14354, 14398,
            14443, 14487, 14531, 14576, 14621,
            14666, 14711, 14756, 14801, 14847,
            14892, 14938, 14984, 15030, 15076,
            15123, 15169, 15216, 15263, 15309,
            15356, 15404, 15451, 15498, 15546,
            15594, 15642, 15690, 15738, 15786,
            15835, 15884, 15932, 15981, 16030,
            16080, 16129, 16179, 16228, 16278,
            16328, 16378, 16429, 16479, 16530,
            16581, 16632, 16683, 16734, 16785,
            16837, 16889, 16941, 16993, 17045,
            17097, 17150, 17202, 17255, 17308,
            17361, 17415, 17468, 17522, 17576,
            17630, 17684, 17738, 17793, 17848,
            17902, 17957, 18013, 18068, 18123,
            18179, 18235, 18291, 18347, 18404,
            18460, 18517, 18574, 18631, 18688,
            18746, 18803, 18861, 18919, 18977,
            19035, 19094, 19152, 19211, 19270,
            19330, 19389, 19448, 19508, 19568,
            19628, 19689, 19749, 19810, 19871,
            19932, 19993, 20054, 20116, 20178,
            20240, 20302, 20364, 20427, 20490,
            20553, 20616, 20679, 20743, 20806,
            20870, 20935, 20999, 21063, 21128,
            21193, 21258, 21323, 21389, 21455,
            21521, 21587, 21653, 21720, 21786,
            21853, 21920, 21988, 22055, 22123,
            22191, 22259, 22328, 22396, 22465,
            22534, 22603, 22673, 22742, 22812,
            22882, 22953, 23023, 23094, 23165,
            23236, 23308, 23379, 23451, 23523,
            23595, 23668, 23741, 23814, 23887,
            23960, 24034, 24108, 24182, 24256,
            24330, 24405, 24480, 24555, 24631,
            24707, 24783, 24859, 24935, 25012,
            25089, 25166, 25243, 25320, 25398,
            25476, 25555, 25633, 25712, 25791,
            25870, 25950, 26029, 26109, 26190,
            26270, 26351, 26432, 26513, 26594,
            26676, 26758, 26840, 26923, 27006,
            27088, 27172, 27255, 27339, 27423,
            27507, 27592, 27677, 27762, 27847,
            27932, 28018, 28104, 28191, 28277,
            28364, 28451, 28539, 28626, 28714,
            28803, 28891, 28980, 29069, 29158,
            29248, 29338, 29428, 29518, 29609,
            29700, 29791, 29883, 29975, 30067,
            30159, 30252, 30345, 30438, 30532,
            30625, 30719, 30814, 30909, 31003,
            31099, 31194, 31290, 31386, 31483,
            31579, 31677, 31774, 31871, 31969,
            32068, 32166, 32265, 32364, 32464,
            32563, 32663, 32764, 32864, 32965,
            33067, 33168, 33270, 33372, 33475,
            33578, 33681, 33785, 33888, 33992,
            34097, 34202, 34307, 34412, 34518,
            34624, 34730, 34837, 34944, 35051,
            35159, 35267, 35376, 35484, 35593,
            35703, 35812, 35922, 36033, 36144,
            36255, 36366, 36478, 36590, 36702,
            36815, 36928, 37042, 37155, 37270,
            37384, 37499, 37614, 37730, 37846,
            37962, 38079, 38196, 38313, 38431,
            38549, 38667, 38786, 38905, 39025,
            39145, 39265, 39386, 39507, 39628,
            39750, 39872, 39994, 40117, 40241,
            40364, 40488, 40613, 40737, 40863,
            40988, 41114, 41240, 41367, 41494,
            41622, 41750, 41878, 42007, 42136,
            42265, 42395, 42525, 42656, 42787,
            42919, 43050, 43183, 43315, 43448,
            43582, 43716, 43850, 43985, 44120,
            44256, 44392, 44528, 44665, 44802,
            44940, 45078, 45216, 45355, 45495,
            45634, 45775, 45915, 46056, 46198,
            46340, 46482, 46625, 46768, 46912,
            47056, 47201, 47346, 47491, 47637,
            47784, 47930, 48078, 48225, 48374,
            48522, 48671, 48821, 48971, 49121,
            49272, 49424, 49576, 49728, 49881,
            50034, 50188, 50342, 50497, 50652,
            50807, 50963, 51120, 51277, 51435,
            51593, 51751, 51910, 52070, 52230,
            52390, 52551, 52713, 52875, 53037,
            53200, 53364, 53528, 53692, 53857,
            54022, 54188, 54355, 54522, 54690,
            54858, 55026, 55195, 55365, 55535,
            55706, 55877, 56048, 56221, 56393,
            56567, 56740, 56915, 57090, 57265,
            57441, 57618, 57795, 57972, 58150,
            58329, 58508, 58688, 58868, 59049,
            59231, 59413, 59595, 59778, 59962,
            60146, 60331, 60516, 60702, 60889,
            61076, 61264, 61452, 61641, 61830,
            62020, 62211, 62402, 62594, 62786,
            62979, 63172, 63366, 63561, 63756,
            63952, 64149, 64346, 64544, 64742,
            64941, 65140, 65341, 65541, 65743,
            65945, 66147, 66351, 66555, 66759,
            66964, 67170, 67376, 67583, 67791,
            67999, 68208, 68418, 68628, 68839,
            69050, 69263, 69475, 69689, 69903,
            70118, 70333, 70549, 70766, 70984,
            71202, 71421, 71640, 71860, 72081,
            72302, 72525, 72747, 72971, 73195,
            73420, 73646, 73872, 74099, 74327,
            74555, 74784, 75014, 75244, 75476,
            75707, 75940, 76173, 76407, 76642,
            76878, 77114, 77351, 77589, 77827,
            78066, 78306, 78547, 78788, 79030,
            79273, 79516, 79761, 80006, 80252,
            80498, 80746, 80994, 81243, 81492,
            81743, 81994, 82246, 82498, 82752,
            83006, 83261, 83517, 83774, 84031,
            84289, 84548, 84808, 85069, 85330,
            85592, 85855, 86119, 86384, 86649,
            86915, 87182, 87450, 87719, 87989,
            88259, 88530, 88802, 89075, 89349,
            89623, 89899, 90175, 90452, 90730,
            91009, 91288, 91569, 91850, 92132,
            92415, 92699, 92984, 93270, 93557,
            93844, 94132, 94422, 94712, 95003,
            95295, 95587, 95881, 96176, 96471,
            96768, 97065, 97363, 97662, 97963,
            98264, 98565, 98868, 99172, 99477,
            99783, 100089, 100397, 100705, 101015,
            101325, 101636, 101949, 102262, 102576,
            102891, 103207, 103525, 103843, 104162,
            104482, 104803, 105125, 105448, 105772,
            106097, 106423, 106750, 107078, 107407,
            107737, 108068, 108400, 108733, 109067,
            109402, 109738, 110076, 110414, 110753,
            111093, 111435, 111777, 112121, 112465,
            112811, 113157, 113505, 113854, 114204,
            114555, 114907, 115260, 115614, 115969,
            116325, 116683, 117041, 117401, 117762,
            118124, 118486, 118851, 119216, 119582,
            119949, 120318, 120688, 121059, 121431,
            121804, 122178, 122553, 122930, 123308,
            123687, 124067, 124448, 124830, 125214,
            125598, 125984, 126371, 126760, 127149,
            127540, 127932, 128325, 128719, 129115,
            129511, 129909, 130309, 130709, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071
         ) ),
        max_error = cms.double(5748.616225984908),
        output_scale_factor = cms.double(0.953125),
        unused_lsbs = cms.uint32(2)
    ),
    inv_mass_checks = cms.untracked.bool(False),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    sanity_checks = cms.untracked.bool(False),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    )
)


process.hlt1PFPuppiCentralJet70MaxEta2p4 = cms.EDFilter("HLT1PFJet",
    MaxEta = cms.double(2.4),
    MaxMass = cms.double(-1.0),
    MinE = cms.double(-1.0),
    MinEta = cms.double(-2.4),
    MinMass = cms.double(-1.0),
    MinN = cms.int32(1),
    MinPt = cms.double(70.0),
    inputTag = cms.InputTag("hltAK4PFPuppiJetsCorrected"),
    saveTags = cms.bool(True),
    triggerType = cms.int32(86)
)


process.hlt1PFPuppiCentralJet75MaxEta2p4 = cms.EDFilter("HLT1PFJet",
    MaxEta = cms.double(2.4),
    MaxMass = cms.double(-1.0),
    MinE = cms.double(-1.0),
    MinEta = cms.double(-2.4),
    MinMass = cms.double(-1.0),
    MinN = cms.int32(1),
    MinPt = cms.double(75.0),
    inputTag = cms.InputTag("hltAK4PFPuppiJetsCorrected"),
    saveTags = cms.bool(True),
    triggerType = cms.int32(86)
)


process.hlt2PFPuppiCentralJet40MaxEta2p4 = cms.EDFilter("HLT1PFJet",
    MaxEta = cms.double(2.4),
    MaxMass = cms.double(-1.0),
    MinE = cms.double(-1.0),
    MinEta = cms.double(-2.4),
    MinMass = cms.double(-1.0),
    MinN = cms.int32(2),
    MinPt = cms.double(40.0),
    inputTag = cms.InputTag("hltAK4PFPuppiJetsCorrected"),
    saveTags = cms.bool(True),
    triggerType = cms.int32(86)
)


process.hlt2PFPuppiCentralJet60MaxEta2p4 = cms.EDFilter("HLT1PFJet",
    MaxEta = cms.double(2.4),
    MaxMass = cms.double(-1.0),
    MinE = cms.double(-1.0),
    MinEta = cms.double(-2.4),
    MinMass = cms.double(-1.0),
    MinN = cms.int32(2),
    MinPt = cms.double(60.0),
    inputTag = cms.InputTag("hltAK4PFPuppiJetsCorrected"),
    saveTags = cms.bool(True),
    triggerType = cms.int32(86)
)


process.hlt3PFPuppiCentralJet45MaxEta2p4 = cms.EDFilter("HLT1PFJet",
    MaxEta = cms.double(2.4),
    MaxMass = cms.double(-1.0),
    MinE = cms.double(-1.0),
    MinEta = cms.double(-2.4),
    MinMass = cms.double(-1.0),
    MinN = cms.int32(3),
    MinPt = cms.double(45.0),
    inputTag = cms.InputTag("hltAK4PFPuppiJetsCorrected"),
    saveTags = cms.bool(True),
    triggerType = cms.int32(86)
)


process.hlt4PFPuppiCentralJet40MaxEta2p4 = cms.EDFilter("HLT1PFJet",
    MaxEta = cms.double(2.4),
    MaxMass = cms.double(-1.0),
    MinE = cms.double(-1.0),
    MinEta = cms.double(-2.4),
    MinMass = cms.double(-1.0),
    MinN = cms.int32(4),
    MinPt = cms.double(40.0),
    inputTag = cms.InputTag("hltAK4PFPuppiJetsCorrected"),
    saveTags = cms.bool(True),
    triggerType = cms.int32(86)
)


process.hltBTagPFPuppiDeepCSV0p31Eta2p4TripleEta2p4 = cms.EDFilter("HLTPFJetTag",
    JetTags = cms.InputTag("hltDeepCombinedSecondaryVertexBJetTagsPFPuppiModEta2p4","probb"),
    Jets = cms.InputTag("hltPFPuppiJetForBtagEta2p4"),
    MaxTag = cms.double(999999.0),
    MinJets = cms.int32(3),
    MinTag = cms.double(0.31),
    TriggerType = cms.int32(86),
    saveTags = cms.bool(True)
)


process.hltBTagPFPuppiDeepCSV0p38Eta2p4TripleEta2p4 = cms.EDFilter("HLTPFJetTag",
    JetTags = cms.InputTag("hltDeepCombinedSecondaryVertexBJetTagsPFPuppiModEta2p4","probb"),
    Jets = cms.InputTag("hltPFPuppiJetForBtagEta2p4"),
    MaxTag = cms.double(999999.0),
    MinJets = cms.int32(3),
    MinTag = cms.double(0.38),
    TriggerType = cms.int32(86),
    saveTags = cms.bool(True)
)


process.hltBTagPFPuppiDeepCSV0p865DoubleEta2p4 = cms.EDFilter("HLTPFJetTag",
    JetTags = cms.InputTag("hltDeepCombinedSecondaryVertexBJetTagsPFPuppiModEta2p4","probb"),
    Jets = cms.InputTag("hltPFPuppiJetForBtagEta2p4"),
    MatchJetsByDeltaR = cms.bool(True),
    MaxJetDeltaR = cms.double(0.1),
    MaxTag = cms.double(999999.0),
    MinJets = cms.int32(2),
    MinTag = cms.double(0.865),
    TriggerType = cms.int32(86),
    saveTags = cms.bool(True)
)


process.hltBTagPFPuppiDeepFlavour0p275Eta2p4TripleEta2p4 = cms.EDFilter("HLTPFJetTag",
    JetTags = cms.InputTag("hltPfDeepFlavourJetTagsModEta2p4","probb"),
    Jets = cms.InputTag("hltPFPuppiJetForBtagEta2p4"),
    MaxTag = cms.double(999999.0),
    MinJets = cms.int32(3),
    MinTag = cms.double(0.275),
    TriggerType = cms.int32(86),
    saveTags = cms.bool(True)
)


process.hltBTagPFPuppiDeepFlavour0p375Eta2p4TripleEta2p4 = cms.EDFilter("HLTPFJetTag",
    JetTags = cms.InputTag("hltPfDeepFlavourJetTagsModEta2p4","probb"),
    Jets = cms.InputTag("hltPFPuppiJetForBtagEta2p4"),
    MaxTag = cms.double(999999.0),
    MinJets = cms.int32(3),
    MinTag = cms.double(0.375),
    TriggerType = cms.int32(86),
    saveTags = cms.bool(True)
)


process.hltBTagPFPuppiDeepFlavour0p935DoubleEta2p4 = cms.EDFilter("HLTPFJetTag",
    JetTags = cms.InputTag("hltPfDeepFlavourJetTagsModEta2p4","probb"),
    Jets = cms.InputTag("hltPFPuppiJetForBtagEta2p4"),
    MatchJetsByDeltaR = cms.bool(True),
    MaxJetDeltaR = cms.double(0.1),
    MaxTag = cms.double(999999.0),
    MinJets = cms.int32(2),
    MinTag = cms.double(0.935),
    TriggerType = cms.int32(86),
    saveTags = cms.bool(True)
)


process.hltBoolEnd = cms.EDFilter("HLTBool",
    result = cms.bool(True)
)


process.hltBoolFalse = cms.EDFilter("HLTBool",
    result = cms.bool(False)
)


process.hltDiEG12EtL1SeededFilter = cms.EDFilter("HLTEgammaEtFilter",
    etcutEB = cms.double(12.0),
    etcutEE = cms.double(12.0),
    inputTag = cms.InputTag("hltEgammaCandidatesWrapperL1Seeded"),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    ncandcut = cms.int32(2),
    saveTags = cms.bool(True)
)


process.hltDiEG2312IsoClusterShapeL1SeededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltDiEG12EtL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0),
    thrOverEEE = cms.vdouble(0),
    thrRegularEB = cms.vdouble(0.017),
    thrRegularEE = cms.vdouble(0.017),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaClusterShapeL1Seeded","sigmaIEtaIEta5x5")
)


process.hltDiEG2312IsoClusterShapeSigmavvL1SeededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltDiEG2312IsoClusterShapeL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0.0008),
    thrOverEEE = cms.vdouble(0.0008),
    thrRegularEB = cms.vdouble(0.9216),
    thrRegularEE = cms.vdouble(0.9216),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaHGCALIDVarsL1Seeded","sigma2vv")
)


process.hltDiEG2312IsoClusterShapeSigmawwL1SeededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltDiEG2312IsoClusterShapeSigmavvL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0.04),
    thrOverEEE = cms.vdouble(0.04),
    thrRegularEB = cms.vdouble(77.44),
    thrRegularEE = cms.vdouble(77.44),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaHGCALIDVarsL1Seeded","sigma2ww")
)


process.hltDiEG2312IsoEcalIsoL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltDiEG2312IsoHEL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.2, 0.2, 0.25, 0.3),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.02),
    thrOverEEB2 = cms.vdouble(0.02),
    thrOverEEE1 = cms.vdouble(0.02),
    thrOverEEE2 = cms.vdouble(0.02),
    thrRegularEB1 = cms.vdouble(80),
    thrRegularEB2 = cms.vdouble(80),
    thrRegularEE1 = cms.vdouble(80),
    thrRegularEE2 = cms.vdouble(80),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaEcalPFClusterIsoL1Seeded")
)


process.hltDiEG2312IsoHEL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltDiEG2312IsoHgcalHEL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.1, 0.1, 0.3, 0.5),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.5),
    thrOverEEB2 = cms.vdouble(0.5),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(0.0),
    thrRegularEB2 = cms.vdouble(0.0),
    thrRegularEE1 = cms.vdouble(9999.0),
    thrRegularEE2 = cms.vdouble(9999.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaHoverEL1Seeded")
)


process.hltDiEG2312IsoHcalIsoL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 0.8, 1.479, 2.0),
    candTag = cms.InputTag("hltDiEG2312IsoHgcalIsoL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.2, 0.2, 0.4, 0.5),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(0.8),
    etaBoundaryEE12 = cms.double(2.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.02),
    thrOverEEB2 = cms.vdouble(0.02),
    thrOverEEE1 = cms.vdouble(0.02),
    thrOverEEE2 = cms.vdouble(0.02),
    thrRegularEB1 = cms.vdouble(100),
    thrRegularEB2 = cms.vdouble(100),
    thrRegularEE1 = cms.vdouble(100),
    thrRegularEE2 = cms.vdouble(100),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaHcalPFClusterIsoL1Seeded")
)


process.hltDiEG2312IsoHgcalHEL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltDiEG2312IsoClusterShapeSigmawwL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.55),
    thrOverEEE2 = cms.vdouble(0.55),
    thrRegularEB1 = cms.vdouble(9999.0),
    thrRegularEB2 = cms.vdouble(9999.0),
    thrRegularEE1 = cms.vdouble(0.0),
    thrRegularEE2 = cms.vdouble(0.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaHGCALIDVarsL1Seeded","hForHOverE")
)


process.hltDiEG2312IsoHgcalIsoL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.0),
    candTag = cms.InputTag("hltDiEG2312IsoEcalIsoL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.05),
    thrOverEEB2 = cms.vdouble(0.05),
    thrOverEEE1 = cms.vdouble(0.05),
    thrOverEEE2 = cms.vdouble(0.05),
    thrRegularEB1 = cms.vdouble(450),
    thrRegularEB2 = cms.vdouble(450),
    thrRegularEE1 = cms.vdouble(450),
    thrRegularEE2 = cms.vdouble(600),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaHGCalLayerClusterIsoL1Seeded")
)


process.hltDiEG23EtL1SeededFilter = cms.EDFilter("HLTEgammaEtFilter",
    etcutEB = cms.double(23.0),
    etcutEE = cms.double(23.0),
    inputTag = cms.InputTag("hltEgammaCandidatesWrapperL1Seeded"),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    ncandcut = cms.int32(2),
    saveTags = cms.bool(True)
)


process.hltDiEG23EtUnseededFilter = cms.EDFilter("HLTEgammaEtFilter",
    etcutEB = cms.double(23.0),
    etcutEE = cms.double(23.0),
    inputTag = cms.InputTag("hltEgammaCandidatesWrapperUnseeded"),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    ncandcut = cms.int32(2),
    saveTags = cms.bool(True)
)


process.hltDiEG25CaloIdLClusterShapeL1SeededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltDiEG25EtL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0),
    thrOverEEE = cms.vdouble(0),
    thrRegularEB = cms.vdouble(0.015),
    thrRegularEE = cms.vdouble(0.015),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaClusterShapeL1Seeded","sigmaIEtaIEta5x5")
)


process.hltDiEG25CaloIdLClusterShapeSigmavvL1SeededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltDiEG25CaloIdLClusterShapeL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0.0008),
    thrOverEEE = cms.vdouble(0.0008),
    thrRegularEB = cms.vdouble(0.64),
    thrRegularEE = cms.vdouble(0.64),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaHGCALIDVarsL1Seeded","sigma2vv")
)


process.hltDiEG25CaloIdLClusterShapeSigmavvUnseededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltDiEG25CaloIdLClusterShapeUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0.0008),
    thrOverEEE = cms.vdouble(0.0008),
    thrRegularEB = cms.vdouble(0.64),
    thrRegularEE = cms.vdouble(0.64),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaHGCALIDVarsUnseeded","sigma2vv")
)


process.hltDiEG25CaloIdLClusterShapeUnseededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltDiEG25EtUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0),
    thrOverEEE = cms.vdouble(0),
    thrRegularEB = cms.vdouble(0.014),
    thrRegularEE = cms.vdouble(0.014),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaClusterShapeUnseeded","sigmaIEtaIEta5x5")
)


process.hltDiEG25CaloIdLHEL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltDiEG25CaloIdLHgcalHEL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.1, 0.1, 0.3, 0.5),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.2),
    thrOverEEB2 = cms.vdouble(0.2),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(0.0),
    thrRegularEB2 = cms.vdouble(0.0),
    thrRegularEE1 = cms.vdouble(9999.0),
    thrRegularEE2 = cms.vdouble(9999.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaHoverEL1Seeded")
)


process.hltDiEG25CaloIdLHEUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltDiEG25CaloIdLHgcalHEUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.1, 0.1, 0.3, 0.5),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.19),
    thrOverEEB2 = cms.vdouble(0.19),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(0.0),
    thrRegularEB2 = cms.vdouble(0.0),
    thrRegularEE1 = cms.vdouble(9999.0),
    thrRegularEE2 = cms.vdouble(9999.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaHoverEUnseeded")
)


process.hltDiEG25CaloIdLHgcalHEL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltDiEG25CaloIdLClusterShapeSigmavvL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.19),
    thrOverEEE2 = cms.vdouble(0.19),
    thrRegularEB1 = cms.vdouble(9999.0),
    thrRegularEB2 = cms.vdouble(9999.0),
    thrRegularEE1 = cms.vdouble(0.0),
    thrRegularEE2 = cms.vdouble(0.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaHGCALIDVarsL1Seeded","hForHOverE")
)


process.hltDiEG25CaloIdLHgcalHEUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltDiEG25CaloIdLClusterShapeSigmavvUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.19),
    thrOverEEE2 = cms.vdouble(0.19),
    thrRegularEB1 = cms.vdouble(9999.0),
    thrRegularEB2 = cms.vdouble(9999.0),
    thrRegularEE1 = cms.vdouble(0.0),
    thrRegularEE2 = cms.vdouble(0.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaHGCALIDVarsUnseeded","hForHOverE")
)


process.hltDiEG25EtL1SeededFilter = cms.EDFilter("HLTEgammaEtFilter",
    etcutEB = cms.double(25.0),
    etcutEE = cms.double(25.0),
    inputTag = cms.InputTag("hltEgammaCandidatesWrapperL1Seeded"),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    ncandcut = cms.int32(2),
    saveTags = cms.bool(True)
)


process.hltDiEG25EtUnseededFilter = cms.EDFilter("HLTEgammaEtFilter",
    etcutEB = cms.double(25.0),
    etcutEE = cms.double(25.0),
    inputTag = cms.InputTag("hltEgammaCandidatesWrapperUnseeded"),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    ncandcut = cms.int32(2),
    saveTags = cms.bool(True)
)


process.hltDiEG3023IsoCaloIdClusterShapeL1SeededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltDiEG23EtL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0),
    thrOverEEE = cms.vdouble(0),
    thrRegularEB = cms.vdouble(0.0113),
    thrRegularEE = cms.vdouble(0.0113),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaClusterShapeL1Seeded","sigmaIEtaIEta5x5")
)


process.hltDiEG3023IsoCaloIdClusterShapeSigmavvL1SeededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltDiEG3023IsoCaloIdClusterShapeL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0.0008),
    thrOverEEE = cms.vdouble(0.0008),
    thrRegularEB = cms.vdouble(0.64),
    thrRegularEE = cms.vdouble(0.64),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaHGCALIDVarsL1Seeded","sigma2vv")
)


process.hltDiEG3023IsoCaloIdClusterShapeSigmavvUnseededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltDiEG3023IsoCaloIdClusterShapeUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0.0008),
    thrOverEEE = cms.vdouble(0.0008),
    thrRegularEB = cms.vdouble(0.64),
    thrRegularEE = cms.vdouble(0.64),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaHGCALIDVarsUnseeded","sigma2vv")
)


process.hltDiEG3023IsoCaloIdClusterShapeSigmawwL1SeededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltDiEG3023IsoCaloIdClusterShapeSigmavvL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0.04),
    thrOverEEE = cms.vdouble(0.04),
    thrRegularEB = cms.vdouble(64),
    thrRegularEE = cms.vdouble(64),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaHGCALIDVarsL1Seeded","sigma2ww")
)


process.hltDiEG3023IsoCaloIdClusterShapeSigmawwUnseededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltDiEG3023IsoCaloIdClusterShapeSigmavvUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0.04),
    thrOverEEE = cms.vdouble(0.04),
    thrRegularEB = cms.vdouble(64),
    thrRegularEE = cms.vdouble(64),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaHGCALIDVarsUnseeded","sigma2ww")
)


process.hltDiEG3023IsoCaloIdClusterShapeUnseededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltDiEG23EtUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0),
    thrOverEEE = cms.vdouble(0),
    thrRegularEB = cms.vdouble(0.0113),
    thrRegularEE = cms.vdouble(0.0113),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaClusterShapeUnseeded","sigmaIEtaIEta5x5")
)


process.hltDiEG3023IsoCaloIdEcalIsoL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltDiEG3023IsoCaloIdHEL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.2, 0.2, 0.25, 0.3),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.02),
    thrOverEEB2 = cms.vdouble(0.02),
    thrOverEEE1 = cms.vdouble(0.02),
    thrOverEEE2 = cms.vdouble(0.02),
    thrRegularEB1 = cms.vdouble(12),
    thrRegularEB2 = cms.vdouble(12),
    thrRegularEE1 = cms.vdouble(12),
    thrRegularEE2 = cms.vdouble(12),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaEcalPFClusterIsoL1Seeded")
)


process.hltDiEG3023IsoCaloIdEcalIsoUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltDiEG3023IsoCaloIdHEUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.2, 0.2, 0.25, 0.3),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.02),
    thrOverEEB2 = cms.vdouble(0.02),
    thrOverEEE1 = cms.vdouble(0.02),
    thrOverEEE2 = cms.vdouble(0.02),
    thrRegularEB1 = cms.vdouble(12),
    thrRegularEB2 = cms.vdouble(12),
    thrRegularEE1 = cms.vdouble(12),
    thrRegularEE2 = cms.vdouble(12),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaEcalPFClusterIsoUnseeded")
)


process.hltDiEG3023IsoCaloIdHEL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltDiEG3023IsoCaloIdHgcalHEL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.1, 0.1, 0.3, 0.5),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.18),
    thrOverEEB2 = cms.vdouble(0.18),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(0.0),
    thrRegularEB2 = cms.vdouble(0.0),
    thrRegularEE1 = cms.vdouble(9999.0),
    thrRegularEE2 = cms.vdouble(9999.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaHoverEL1Seeded")
)


process.hltDiEG3023IsoCaloIdHEUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltDiEG3023IsoCaloIdHgcalHEUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.1, 0.1, 0.3, 0.5),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.18),
    thrOverEEB2 = cms.vdouble(0.18),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(0.0),
    thrRegularEB2 = cms.vdouble(0.0),
    thrRegularEE1 = cms.vdouble(9999.0),
    thrRegularEE2 = cms.vdouble(9999.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaHoverEUnseeded")
)


process.hltDiEG3023IsoCaloIdHcalIsoL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 0.8, 1.479, 2.0),
    candTag = cms.InputTag("hltDiEG3023IsoCaloIdHgcalIsoL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.2, 0.2, 0.4, 0.5),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(0.8),
    etaBoundaryEE12 = cms.double(2.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.02),
    thrOverEEB2 = cms.vdouble(0.02),
    thrOverEEE1 = cms.vdouble(0.02),
    thrOverEEE2 = cms.vdouble(0.02),
    thrRegularEB1 = cms.vdouble(22),
    thrRegularEB2 = cms.vdouble(22),
    thrRegularEE1 = cms.vdouble(22),
    thrRegularEE2 = cms.vdouble(22),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaHcalPFClusterIsoL1Seeded")
)


process.hltDiEG3023IsoCaloIdHcalIsoUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 0.8, 1.479, 2.0),
    candTag = cms.InputTag("hltDiEG3023IsoCaloIdHgcalIsoUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.2, 0.2, 0.4, 0.5),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(0.8),
    etaBoundaryEE12 = cms.double(2.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.02),
    thrOverEEB2 = cms.vdouble(0.02),
    thrOverEEE1 = cms.vdouble(0.02),
    thrOverEEE2 = cms.vdouble(0.02),
    thrRegularEB1 = cms.vdouble(11),
    thrRegularEB2 = cms.vdouble(12),
    thrRegularEE1 = cms.vdouble(12),
    thrRegularEE2 = cms.vdouble(12),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaHcalPFClusterIsoUnseeded")
)


process.hltDiEG3023IsoCaloIdHgcalHEL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltDiEG3023IsoCaloIdClusterShapeSigmawwL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.125),
    thrOverEEE2 = cms.vdouble(0.125),
    thrRegularEB1 = cms.vdouble(9999.0),
    thrRegularEB2 = cms.vdouble(9999.0),
    thrRegularEE1 = cms.vdouble(0.0),
    thrRegularEE2 = cms.vdouble(0.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaHGCALIDVarsL1Seeded","hForHOverE")
)


process.hltDiEG3023IsoCaloIdHgcalHEUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltDiEG3023IsoCaloIdClusterShapeSigmawwUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.125),
    thrOverEEE2 = cms.vdouble(0.125),
    thrRegularEB1 = cms.vdouble(9999.0),
    thrRegularEB2 = cms.vdouble(9999.0),
    thrRegularEE1 = cms.vdouble(0.0),
    thrRegularEE2 = cms.vdouble(0.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaHGCALIDVarsUnseeded","hForHOverE")
)


process.hltDiEG3023IsoCaloIdHgcalIsoL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.0),
    candTag = cms.InputTag("hltDiEG3023IsoCaloIdEcalIsoL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.05),
    thrOverEEB2 = cms.vdouble(0.05),
    thrOverEEE1 = cms.vdouble(0.05),
    thrOverEEE2 = cms.vdouble(0.05),
    thrRegularEB1 = cms.vdouble(140),
    thrRegularEB2 = cms.vdouble(140),
    thrRegularEE1 = cms.vdouble(140),
    thrRegularEE2 = cms.vdouble(370),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaHGCalLayerClusterIsoL1Seeded")
)


process.hltDiEG3023IsoCaloIdHgcalIsoUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.0),
    candTag = cms.InputTag("hltDiEG3023IsoCaloIdEcalIsoUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.05),
    thrOverEEB2 = cms.vdouble(0.05),
    thrOverEEE1 = cms.vdouble(0.05),
    thrOverEEE2 = cms.vdouble(0.05),
    thrRegularEB1 = cms.vdouble(140),
    thrRegularEB2 = cms.vdouble(140),
    thrRegularEE1 = cms.vdouble(140),
    thrRegularEE2 = cms.vdouble(370),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaHGCalLayerClusterIsoUnseeded")
)


process.hltDiEle2312IsoBestGsfChi2L1SeededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltDiEle2312IsoBestGsfNLayerITL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0),
    thrOverEEE = cms.vdouble(0),
    thrRegularEB = cms.vdouble(50.0),
    thrRegularEE = cms.vdouble(150.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaBestGsfTrackVarsL1Seeded","Chi2")
)


process.hltDiEle2312IsoBestGsfNLayerITL1SeededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltDiEle2312IsoGsfDphiL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(False),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0),
    thrOverEEE = cms.vdouble(0),
    thrRegularEB = cms.vdouble(3),
    thrRegularEE = cms.vdouble(3),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaBestGsfTrackVarsL1Seeded","NLayerIT")
)


process.hltDiEle2312IsoGsfDetaL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 0.8, 1.479, 2.1),
    candTag = cms.InputTag("hltDiEle2312IsoGsfOneOEMinusOneOPL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(0.8),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(0.008),
    thrRegularEB2 = cms.vdouble(0.05),
    thrRegularEE1 = cms.vdouble(0.008),
    thrRegularEE2 = cms.vdouble(0.008),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaGsfTrackVarsL1Seeded","DetaSeed")
)


process.hltDiEle2312IsoGsfDphiL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 0.8, 1.479, 2.1),
    candTag = cms.InputTag("hltDiEle2312IsoGsfDetaL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(0.8),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(0.08),
    thrRegularEB2 = cms.vdouble(0.5),
    thrRegularEE1 = cms.vdouble(0.06),
    thrRegularEE2 = cms.vdouble(0.06),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaGsfTrackVarsL1Seeded","Dphi")
)


process.hltDiEle2312IsoGsfOneOEMinusOneOPL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 0.8, 1.479, 2.1),
    candTag = cms.InputTag("hltDiEle2312IsoPMS2L1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(0.8),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(0.04),
    thrRegularEB2 = cms.vdouble(0.5),
    thrRegularEE1 = cms.vdouble(0.08),
    thrRegularEE2 = cms.vdouble(0.08),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaGsfTrackVarsL1Seeded","OneOESuperMinusOneOP")
)


process.hltDiEle2312IsoGsfTrackIsoFromL1TracksL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 0.8, 1.479, 2.0),
    candTag = cms.InputTag("hltDiEle2312IsoBestGsfChi2L1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(0.8),
    etaBoundaryEE12 = cms.double(2.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(15),
    thrRegularEB2 = cms.vdouble(50),
    thrRegularEE1 = cms.vdouble(30),
    thrRegularEE2 = cms.vdouble(30),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaEleL1TrkIsoL1Seeded")
)


process.hltDiEle2312IsoGsfTrackIsoL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltDiEle2312IsoGsfTrackIsoFromL1TracksL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.029, 0.111, 0.114, 0.032),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(3.5),
    thrRegularEB2 = cms.vdouble(3.5),
    thrRegularEE1 = cms.vdouble(4.0),
    thrRegularEE2 = cms.vdouble(4.0),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaEleGsfTrackIsoV6L1Seeded")
)


process.hltDiEle2312IsoPMS2L1SeededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltDiEle2312IsoPixelMatchL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0),
    thrOverEEE = cms.vdouble(0),
    thrRegularEB = cms.vdouble(200),
    thrRegularEE = cms.vdouble(350),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaPixelMatchVarsL1Seeded","s2")
)


process.hltDiEle2312IsoPixelMatchL1SeededFilter = cms.EDFilter("HLTElectronPixelMatchFilter",
    candTag = cms.InputTag("hltDiEG2312IsoHcalIsoL1SeededFilter"),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    l1PixelSeedsTag = cms.InputTag("hltEgammaElectronPixelSeedsL1Seeded"),
    ncandcut = cms.int32(2),
    npixelmatchcut = cms.double(1.0),
    pixelVeto = cms.bool(False),
    s2_threshold = cms.double(0.4),
    s_a_phi1B = cms.double(0.0069),
    s_a_phi1F = cms.double(0.0076),
    s_a_phi1I = cms.double(0.0088),
    s_a_phi2B = cms.double(0.00037),
    s_a_phi2F = cms.double(0.00906),
    s_a_phi2I = cms.double(0.0007),
    s_a_rF = cms.double(0.04),
    s_a_rI = cms.double(0.027),
    s_a_zB = cms.double(0.012),
    saveTags = cms.bool(True),
    tanhSO10BarrelThres = cms.double(0.35),
    tanhSO10ForwardThres = cms.double(1.0),
    tanhSO10InterThres = cms.double(1.0),
    useS = cms.bool(False)
)


process.hltDiEle25CaloIdLPMS2L1SeededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltDiEle25CaloIdLPixelMatchL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0),
    thrOverEEE = cms.vdouble(0),
    thrRegularEB = cms.vdouble(75.0),
    thrRegularEE = cms.vdouble(75.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaPixelMatchVarsL1Seeded","s2")
)


process.hltDiEle25CaloIdLPMS2UnseededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltDiEle25CaloIdLPixelMatchUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(2),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0),
    thrOverEEE = cms.vdouble(0),
    thrRegularEB = cms.vdouble(75.0),
    thrRegularEE = cms.vdouble(75.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaPixelMatchVarsUnseeded","s2")
)


process.hltDiEle25CaloIdLPixelMatchL1SeededFilter = cms.EDFilter("HLTElectronPixelMatchFilter",
    candTag = cms.InputTag("hltDiEG25CaloIdLHEL1SeededFilter"),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    l1PixelSeedsTag = cms.InputTag("hltEgammaElectronPixelSeedsL1Seeded"),
    ncandcut = cms.int32(2),
    npixelmatchcut = cms.double(1.0),
    pixelVeto = cms.bool(False),
    s2_threshold = cms.double(0.4),
    s_a_phi1B = cms.double(0.0069),
    s_a_phi1F = cms.double(0.0076),
    s_a_phi1I = cms.double(0.0088),
    s_a_phi2B = cms.double(0.00037),
    s_a_phi2F = cms.double(0.00906),
    s_a_phi2I = cms.double(0.0007),
    s_a_rF = cms.double(0.04),
    s_a_rI = cms.double(0.027),
    s_a_zB = cms.double(0.012),
    saveTags = cms.bool(True),
    tanhSO10BarrelThres = cms.double(0.35),
    tanhSO10ForwardThres = cms.double(1.0),
    tanhSO10InterThres = cms.double(1.0),
    useS = cms.bool(False)
)


process.hltDiEle25CaloIdLPixelMatchUnseededFilter = cms.EDFilter("HLTElectronPixelMatchFilter",
    candTag = cms.InputTag("hltDiEG25CaloIdLHEUnseededFilter"),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    l1PixelSeedsTag = cms.InputTag("hltEgammaElectronPixelSeedsUnseeded"),
    ncandcut = cms.int32(2),
    npixelmatchcut = cms.double(1.0),
    pixelVeto = cms.bool(False),
    s2_threshold = cms.double(0.4),
    s_a_phi1B = cms.double(0.0069),
    s_a_phi1F = cms.double(0.0076),
    s_a_phi1I = cms.double(0.0088),
    s_a_phi2B = cms.double(0.00037),
    s_a_phi2F = cms.double(0.00906),
    s_a_phi2I = cms.double(0.0007),
    s_a_rF = cms.double(0.04),
    s_a_rI = cms.double(0.027),
    s_a_zB = cms.double(0.012),
    saveTags = cms.bool(True),
    tanhSO10BarrelThres = cms.double(0.35),
    tanhSO10ForwardThres = cms.double(1.0),
    tanhSO10InterThres = cms.double(1.0),
    useS = cms.bool(False)
)


process.hltDiMuon178RelTrkIsoFiltered0p4 = cms.EDFilter("HLTMuonIsoFilter",
    CandTag = cms.InputTag("hltPhase2L3MuonCandidates"),
    DepTag = cms.VInputTag("hltPhase2L3MuonsTrkIsoRegionalNewdR0p3dRVeto0p005dz0p25dr0p20ChisqInfPtMin0p0Cut0p4"),
    IsolatorPSet = cms.PSet(

    ),
    MinN = cms.int32(2),
    PreviousCandTag = cms.InputTag("hltL3fL1DoubleMu155fPreFiltered8"),
    saveTags = cms.bool(True)
)


process.hltDiMuon178RelTrkIsoFiltered0p4DzFiltered0p2 = cms.EDFilter("HLT2MuonMuonDZ",
    MaxDZ = cms.double(0.2),
    MinDR = cms.double(0.001),
    MinN = cms.int32(1),
    MinPixHitsForDZ = cms.int32(0),
    checkSC = cms.bool(False),
    inputTag1 = cms.InputTag("hltDiMuon178RelTrkIsoFiltered0p4"),
    inputTag2 = cms.InputTag("hltDiMuon178RelTrkIsoFiltered0p4"),
    originTag1 = cms.VInputTag("hltPhase2L3MuonCandidates"),
    originTag2 = cms.VInputTag("hltPhase2L3MuonCandidates"),
    saveTags = cms.bool(True),
    triggerType1 = cms.int32(83),
    triggerType2 = cms.int32(83)
)


process.hltDoubleMuon7DZ1p0 = cms.EDFilter("HLT2L1P2GTCandL1P2GTCandDZ",
    MaxDZ = cms.double(1.0),
    MinDR = cms.double(-1),
    MinN = cms.int32(1),
    l1GTAlgoBlockTag = cms.InputTag("l1tGTAlgoBlockProducer"),
    l1GTAlgoName1 = cms.string('pDoubleTkMuon15_7'),
    l1GTAlgoName2 = cms.string('pDoubleTkMuon15_7'),
    originTag1 = cms.VInputTag(cms.InputTag("l1tGTProducer","GMTTkMuons")),
    originTag2 = cms.VInputTag(cms.InputTag("l1tGTProducer","GMTTkMuons")),
    saveTags = cms.bool(True),
    triggerType1 = cms.int32(-114),
    triggerType2 = cms.int32(-114)
)


process.hltDoublePFPuppiJets128Eta2p4MaxDeta1p6 = cms.EDFilter("HLT2PFJetPFJet",
    MaxDelR = cms.double(1000.0),
    MaxDeta = cms.double(1.6),
    MaxDphi = cms.double(10000000.0),
    MaxMinv = cms.double(10000000.0),
    MaxPt = cms.double(10000000.0),
    MinDelR = cms.double(0.0),
    MinDeta = cms.double(-1000.0),
    MinDphi = cms.double(0.0),
    MinMinv = cms.double(0.0),
    MinN = cms.int32(1),
    MinPt = cms.double(0.0),
    inputTag1 = cms.InputTag("hltDoublePFPuppiJets128MaxEta2p4"),
    inputTag2 = cms.InputTag("hltDoublePFPuppiJets128MaxEta2p4"),
    originTag1 = cms.VInputTag("hltAK4PFPuppiJetsCorrected"),
    originTag2 = cms.VInputTag("hltAK4PFPuppiJetsCorrected"),
    saveTags = cms.bool(True),
    triggerType1 = cms.int32(86),
    triggerType2 = cms.int32(86)
)


process.hltDoublePFPuppiJets128MaxEta2p4 = cms.EDFilter("HLT1PFJet",
    MaxEta = cms.double(2.4),
    MaxMass = cms.double(-1.0),
    MinE = cms.double(-1.0),
    MinEta = cms.double(-2.4),
    MinMass = cms.double(-1.0),
    MinN = cms.int32(2),
    MinPt = cms.double(128.0),
    inputTag = cms.InputTag("hltAK4PFPuppiJetsCorrected"),
    saveTags = cms.bool(True),
    triggerType = cms.int32(86)
)


process.hltDoubleTkMuon157L1TkMuonFilter = cms.EDFilter("PathStatusFilter",
    logicalExpression = cms.string('pDoubleTkMuon15_7')
)


process.hltEG108EtL1SeededFilter = cms.EDFilter("HLTEgammaEtFilter",
    etcutEB = cms.double(108.0),
    etcutEE = cms.double(9999999.0),
    inputTag = cms.InputTag("hltEgammaCandidatesWrapperL1Seeded"),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    ncandcut = cms.int32(1),
    saveTags = cms.bool(True)
)


process.hltEG108EtUnseededFilter = cms.EDFilter("HLTEgammaEtFilter",
    etcutEB = cms.double(108.0),
    etcutEE = cms.double(9999999.0),
    inputTag = cms.InputTag("hltEgammaCandidatesWrapperUnseeded"),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    ncandcut = cms.int32(1),
    saveTags = cms.bool(True)
)


process.hltEG115EtL1SeededFilter = cms.EDFilter("HLTEgammaEtFilter",
    etcutEB = cms.double(115.0),
    etcutEE = cms.double(115.0),
    inputTag = cms.InputTag("hltEgammaCandidatesWrapperL1Seeded"),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    ncandcut = cms.int32(1),
    saveTags = cms.bool(True)
)


process.hltEG187EtL1SeededFilter = cms.EDFilter("HLTEgammaEtFilter",
    etcutEB = cms.double(187.0),
    etcutEE = cms.double(187.0),
    inputTag = cms.InputTag("hltEgammaCandidatesWrapperL1Seeded"),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    ncandcut = cms.int32(1),
    saveTags = cms.bool(True)
)


process.hltEG187EtUnseededFilter = cms.EDFilter("HLTEgammaEtFilter",
    etcutEB = cms.double(187.0),
    etcutEE = cms.double(187.0),
    inputTag = cms.InputTag("hltEgammaCandidatesWrapperUnseeded"),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    ncandcut = cms.int32(1),
    saveTags = cms.bool(True)
)


process.hltEG23EtL1SeededFilter = cms.EDFilter("HLTEgammaEtFilter",
    etcutEB = cms.double(23.0),
    etcutEE = cms.double(23.0),
    inputTag = cms.InputTag("hltEgammaCandidatesWrapperL1Seeded"),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    ncandcut = cms.int32(1),
    saveTags = cms.bool(True)
)


process.hltEG26EtL1SeededFilter = cms.EDFilter("HLTEgammaEtFilter",
    etcutEB = cms.double(26.0),
    etcutEE = cms.double(26.0),
    inputTag = cms.InputTag("hltEgammaCandidatesWrapperL1Seeded"),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    ncandcut = cms.int32(1),
    saveTags = cms.bool(True)
)


process.hltEG26EtUnseededFilter = cms.EDFilter("HLTEgammaEtFilter",
    etcutEB = cms.double(26.0),
    etcutEE = cms.double(26.0),
    inputTag = cms.InputTag("hltEgammaCandidatesWrapperUnseeded"),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    ncandcut = cms.int32(1),
    saveTags = cms.bool(True)
)


process.hltEG30EtL1SeededFilter = cms.EDFilter("HLTEgammaEtFilter",
    etcutEB = cms.double(30.0),
    etcutEE = cms.double(30.0),
    inputTag = cms.InputTag("hltEgammaCandidatesWrapperL1Seeded"),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    ncandcut = cms.int32(1),
    saveTags = cms.bool(True)
)


process.hltEG30EtUnseededFilter = cms.EDFilter("HLTEgammaEtFilter",
    etcutEB = cms.double(30.0),
    etcutEE = cms.double(30.0),
    inputTag = cms.InputTag("hltEgammaCandidatesWrapperUnseeded"),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    ncandcut = cms.int32(1),
    saveTags = cms.bool(True)
)


process.hltEG32EtL1SeededFilter = cms.EDFilter("HLTEgammaEtFilter",
    etcutEB = cms.double(32.0),
    etcutEE = cms.double(32.0),
    inputTag = cms.InputTag("hltEgammaCandidatesWrapperL1Seeded"),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    ncandcut = cms.int32(1),
    saveTags = cms.bool(True)
)


process.hltEG32EtUnseededFilter = cms.EDFilter("HLTEgammaEtFilter",
    etcutEB = cms.double(32.0),
    etcutEE = cms.double(32.0),
    inputTag = cms.InputTag("hltEgammaCandidatesWrapperUnseeded"),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    ncandcut = cms.int32(1),
    saveTags = cms.bool(True)
)


process.hltEG5EtL1SeededFilter = cms.EDFilter("HLTEgammaEtFilter",
    etcutEB = cms.double(5.0),
    etcutEE = cms.double(5.0),
    inputTag = cms.InputTag("hltEgammaCandidatesWrapperL1Seeded"),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    ncandcut = cms.int32(1),
    saveTags = cms.bool(True)
)


process.hltEG5EtUnseededFilter = cms.EDFilter("HLTEgammaEtFilter",
    etcutEB = cms.double(5.0),
    etcutEE = cms.double(5.0),
    inputTag = cms.InputTag("hltEgammaCandidatesWrapperUnseeded"),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    ncandcut = cms.int32(1),
    saveTags = cms.bool(True)
)


process.hltEGL1SeedsForDoubleEleIsolatedFilter = cms.EDFilter("PathStatusFilter",
    logicalExpression = cms.string('pDoubleEGEle37_24 or pDoubleTkEle25_12 or pIsoTkEleEGEle22_12')
)


process.hltEGL1SeedsForDoubleEleNonIsolatedFilter = cms.EDFilter("PathStatusFilter",
    logicalExpression = cms.string('pDoubleEGEle37_24 or pDoubleTkEle25_12')
)


process.hltEGL1SeedsForDoublePhotonIsolatedFilter = cms.EDFilter("PathStatusFilter",
    logicalExpression = cms.string('pDoubleEGEle37_24 or pDoubleIsoTkPho22_12')
)


process.hltEGL1SeedsForSingleEleIsolatedFilter = cms.EDFilter("PathStatusFilter",
    logicalExpression = cms.string('pSingleEGEle51 or pSingleTkEle36 or pSingleIsoTkEle28')
)


process.hltEGL1SeedsForSingleEleNonIsolatedFilter = cms.EDFilter("PathStatusFilter",
    logicalExpression = cms.string('pSingleEGEle51 or pSingleTkEle36')
)


process.hltEGL1SeedsForSinglePhotonIsolatedFilter = cms.EDFilter("PathStatusFilter",
    logicalExpression = cms.string('pSingleEGEle51 or pSingleIsoTkPho36')
)


process.hltEgammaCandidatesWrapperL1Seeded = cms.EDFilter("HLTEgammaTriggerFilterObjectWrapper",
    candIsolatedTag = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    candNonIsolatedTag = cms.InputTag(""),
    doIsolated = cms.bool(True),
    saveTags = cms.bool(True)
)


process.hltEgammaCandidatesWrapperUnseeded = cms.EDFilter("HLTEgammaTriggerFilterObjectWrapper",
    candIsolatedTag = cms.InputTag("hltEgammaCandidatesUnseeded"),
    candNonIsolatedTag = cms.InputTag(""),
    doIsolated = cms.bool(True),
    saveTags = cms.bool(True)
)


process.hltEle115NonIsoClusterShapeL1SeededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEG115EtL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0),
    thrOverEEE = cms.vdouble(0),
    thrRegularEB = cms.vdouble(0.013),
    thrRegularEE = cms.vdouble(0.013),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaClusterShapeL1Seeded","sigmaIEtaIEta5x5")
)


process.hltEle115NonIsoClusterShapeSigmavvL1SeededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEle115NonIsoClusterShapeL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0.0008),
    thrOverEEE = cms.vdouble(0.0008),
    thrRegularEB = cms.vdouble(0.64),
    thrRegularEE = cms.vdouble(0.64),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaHGCALIDVarsL1Seeded","sigma2vv")
)


process.hltEle115NonIsoClusterShapeSigmawwL1SeededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEle115NonIsoClusterShapeSigmavvL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0.04),
    thrOverEEE = cms.vdouble(0.04),
    thrRegularEB = cms.vdouble(64.0),
    thrRegularEE = cms.vdouble(64.0),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaHGCALIDVarsL1Seeded","sigma2ww")
)


process.hltEle115NonIsoGsfDetaL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 0.8, 1.479, 2.1),
    candTag = cms.InputTag("hltEle115NonIsoPMS2L1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(0.8),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(0.002),
    thrRegularEB2 = cms.vdouble(0.003),
    thrRegularEE1 = cms.vdouble(0.002),
    thrRegularEE2 = cms.vdouble(0.002),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaGsfTrackVarsL1Seeded","DetaSeed")
)


process.hltEle115NonIsoGsfDphiL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 0.8, 1.479, 2.1),
    candTag = cms.InputTag("hltEle115NonIsoGsfDetaL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(0.8),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(0.02),
    thrRegularEB2 = cms.vdouble(0.03),
    thrRegularEE1 = cms.vdouble(0.02),
    thrRegularEE2 = cms.vdouble(0.02),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaGsfTrackVarsL1Seeded","Dphi")
)


process.hltEle115NonIsoHEL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltEle115NonIsoHgcalHEL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.1, 0.1, 0.3, 0.5),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.09),
    thrOverEEB2 = cms.vdouble(0.09),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(0.0),
    thrRegularEB2 = cms.vdouble(0.0),
    thrRegularEE1 = cms.vdouble(9999.0),
    thrRegularEE2 = cms.vdouble(9999.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaHoverEL1Seeded")
)


process.hltEle115NonIsoHgcalHEL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltEle115NonIsoClusterShapeSigmawwL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.08),
    thrOverEEE2 = cms.vdouble(0.08),
    thrRegularEB1 = cms.vdouble(9999.0),
    thrRegularEB2 = cms.vdouble(9999.0),
    thrRegularEE1 = cms.vdouble(5.0),
    thrRegularEE2 = cms.vdouble(5.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaHGCALIDVarsL1Seeded","hForHOverE")
)


process.hltEle115NonIsoPMS2L1SeededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEle115NonIsoPixelMatchL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0),
    thrOverEEE = cms.vdouble(0),
    thrRegularEB = cms.vdouble(51.0),
    thrRegularEE = cms.vdouble(65.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaPixelMatchVarsL1Seeded","s2")
)


process.hltEle115NonIsoPixelMatchL1SeededFilter = cms.EDFilter("HLTElectronPixelMatchFilter",
    candTag = cms.InputTag("hltEle115NonIsoHEL1SeededFilter"),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    l1PixelSeedsTag = cms.InputTag("hltEgammaElectronPixelSeedsL1Seeded"),
    ncandcut = cms.int32(1),
    npixelmatchcut = cms.double(1.0),
    pixelVeto = cms.bool(False),
    s2_threshold = cms.double(0.4),
    s_a_phi1B = cms.double(0.0069),
    s_a_phi1F = cms.double(0.0076),
    s_a_phi1I = cms.double(0.0088),
    s_a_phi2B = cms.double(0.00037),
    s_a_phi2F = cms.double(0.00906),
    s_a_phi2I = cms.double(0.0007),
    s_a_rF = cms.double(0.04),
    s_a_rI = cms.double(0.027),
    s_a_zB = cms.double(0.012),
    saveTags = cms.bool(True),
    tanhSO10BarrelThres = cms.double(0.35),
    tanhSO10ForwardThres = cms.double(1.0),
    tanhSO10InterThres = cms.double(1.0),
    useS = cms.bool(False)
)


process.hltEle26WP70BestGsfChi2L1SeededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEle26WP70BestGsfNLayerITL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0),
    thrOverEEE = cms.vdouble(0),
    thrRegularEB = cms.vdouble(50.0),
    thrRegularEE = cms.vdouble(50.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaBestGsfTrackVarsL1Seeded","Chi2")
)


process.hltEle26WP70BestGsfChi2UnseededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEle26WP70BestGsfNLayerITUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0),
    thrOverEEE = cms.vdouble(0),
    thrRegularEB = cms.vdouble(50.0),
    thrRegularEE = cms.vdouble(50.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaBestGsfTrackVarsUnseeded","Chi2")
)


process.hltEle26WP70BestGsfNLayerITL1SeededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEle26WP70GsfDphiL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(False),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0),
    thrOverEEE = cms.vdouble(0),
    thrRegularEB = cms.vdouble(3),
    thrRegularEE = cms.vdouble(3),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaBestGsfTrackVarsL1Seeded","NLayerIT")
)


process.hltEle26WP70BestGsfNLayerITUnseededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEle26WP70GsfDphiUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(False),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0),
    thrOverEEE = cms.vdouble(0),
    thrRegularEB = cms.vdouble(3),
    thrRegularEE = cms.vdouble(3),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaBestGsfTrackVarsUnseeded","NLayerIT")
)


process.hltEle26WP70ClusterShapeL1SeededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEG26EtL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0),
    thrOverEEE = cms.vdouble(0),
    thrRegularEB = cms.vdouble(0.013),
    thrRegularEE = cms.vdouble(0.013),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaClusterShapeL1Seeded","sigmaIEtaIEta5x5")
)


process.hltEle26WP70ClusterShapeSigmavvL1SeededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEle26WP70ClusterShapeL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0.0008),
    thrOverEEE = cms.vdouble(0.0008),
    thrRegularEB = cms.vdouble(0.64),
    thrRegularEE = cms.vdouble(0.64),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaHGCALIDVarsL1Seeded","sigma2vv")
)


process.hltEle26WP70ClusterShapeSigmavvUnseededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEle26WP70ClusterShapeUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0.0008),
    thrOverEEE = cms.vdouble(0.0008),
    thrRegularEB = cms.vdouble(0.64),
    thrRegularEE = cms.vdouble(0.64),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaHGCALIDVarsUnseeded","sigma2vv")
)


process.hltEle26WP70ClusterShapeSigmawwL1SeededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEle26WP70ClusterShapeSigmavvL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0.04),
    thrOverEEE = cms.vdouble(0.04),
    thrRegularEB = cms.vdouble(64),
    thrRegularEE = cms.vdouble(64),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaHGCALIDVarsL1Seeded","sigma2ww")
)


process.hltEle26WP70ClusterShapeSigmawwUnseededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEle26WP70ClusterShapeSigmavvUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0.04),
    thrOverEEE = cms.vdouble(0.04),
    thrRegularEB = cms.vdouble(64),
    thrRegularEE = cms.vdouble(64),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaHGCALIDVarsUnseeded","sigma2ww")
)


process.hltEle26WP70ClusterShapeUnseededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEG26EtUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0),
    thrOverEEE = cms.vdouble(0),
    thrRegularEB = cms.vdouble(0.013),
    thrRegularEE = cms.vdouble(0.013),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaClusterShapeUnseeded","sigmaIEtaIEta5x5")
)


process.hltEle26WP70EcalIsoL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltEle26WP70HEL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.2, 0.2, 0.25, 0.3),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.02),
    thrOverEEB2 = cms.vdouble(0.02),
    thrOverEEE1 = cms.vdouble(0.02),
    thrOverEEE2 = cms.vdouble(0.02),
    thrRegularEB1 = cms.vdouble(4.4),
    thrRegularEB2 = cms.vdouble(4.4),
    thrRegularEE1 = cms.vdouble(4.4),
    thrRegularEE2 = cms.vdouble(4.4),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaEcalPFClusterIsoL1Seeded")
)


process.hltEle26WP70EcalIsoUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltEle26WP70HEUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.2, 0.2, 0.25, 0.3),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.02),
    thrOverEEB2 = cms.vdouble(0.02),
    thrOverEEE1 = cms.vdouble(0.02),
    thrOverEEE2 = cms.vdouble(0.02),
    thrRegularEB1 = cms.vdouble(4.4),
    thrRegularEB2 = cms.vdouble(4.4),
    thrRegularEE1 = cms.vdouble(4.4),
    thrRegularEE2 = cms.vdouble(4.4),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaEcalPFClusterIsoUnseeded")
)


process.hltEle26WP70GsfDetaL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 0.8, 1.479, 2.1),
    candTag = cms.InputTag("hltEle26WP70GsfOneOEMinusOneOPL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(0.8),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(0.003),
    thrRegularEB2 = cms.vdouble(0.009),
    thrRegularEE1 = cms.vdouble(0.003),
    thrRegularEE2 = cms.vdouble(0.003),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaGsfTrackVarsL1Seeded","DetaSeed")
)


process.hltEle26WP70GsfDetaUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 0.8, 1.479, 2.1),
    candTag = cms.InputTag("hltEle26WP70GsfOneOEMinusOneOPUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(0.8),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(0.003),
    thrRegularEB2 = cms.vdouble(0.009),
    thrRegularEE1 = cms.vdouble(0.003),
    thrRegularEE2 = cms.vdouble(0.003),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaGsfTrackVarsUnseeded","DetaSeed")
)


process.hltEle26WP70GsfDphiL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 0.8, 1.479, 2.1),
    candTag = cms.InputTag("hltEle26WP70GsfDetaL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(0.8),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(0.02),
    thrRegularEB2 = cms.vdouble(0.09),
    thrRegularEE1 = cms.vdouble(0.02),
    thrRegularEE2 = cms.vdouble(0.02),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaGsfTrackVarsL1Seeded","Dphi")
)


process.hltEle26WP70GsfDphiUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 0.8, 1.479, 2.1),
    candTag = cms.InputTag("hltEle26WP70GsfDetaUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(0.8),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(0.02),
    thrRegularEB2 = cms.vdouble(0.09),
    thrRegularEE1 = cms.vdouble(0.02),
    thrRegularEE2 = cms.vdouble(0.02),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaGsfTrackVarsUnseeded","Dphi")
)


process.hltEle26WP70GsfOneOEMinusOneOPL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 0.8, 1.479, 2.1),
    candTag = cms.InputTag("hltEle26WP70PMS2L1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(0.8),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(0.035),
    thrRegularEB2 = cms.vdouble(0.08),
    thrRegularEE1 = cms.vdouble(0.01),
    thrRegularEE2 = cms.vdouble(0.01),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaGsfTrackVarsL1Seeded","OneOESuperMinusOneOP")
)


process.hltEle26WP70GsfOneOEMinusOneOPUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 0.8, 1.479, 2.1),
    candTag = cms.InputTag("hltEle26WP70PMS2UnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(0.8),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(0.035),
    thrRegularEB2 = cms.vdouble(0.08),
    thrRegularEE1 = cms.vdouble(0.01),
    thrRegularEE2 = cms.vdouble(0.01),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaGsfTrackVarsUnseeded","OneOESuperMinusOneOP")
)


process.hltEle26WP70GsfTrackIsoFromL1TracksL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 0.8, 1.479, 2.0),
    candTag = cms.InputTag("hltEle26WP70BestGsfChi2L1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(0.8),
    etaBoundaryEE12 = cms.double(2.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(4.0),
    thrRegularEB2 = cms.vdouble(8.0),
    thrRegularEE1 = cms.vdouble(5.5),
    thrRegularEE2 = cms.vdouble(5.5),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaEleL1TrkIsoL1Seeded")
)


process.hltEle26WP70GsfTrackIsoFromL1TracksUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 0.8, 1.479, 2.0),
    candTag = cms.InputTag("hltEle26WP70BestGsfChi2UnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(0.8),
    etaBoundaryEE12 = cms.double(2.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(4.0),
    thrRegularEB2 = cms.vdouble(8.0),
    thrRegularEE1 = cms.vdouble(5.5),
    thrRegularEE2 = cms.vdouble(5.5),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaEleL1TrkIsoUnseeded")
)


process.hltEle26WP70GsfTrackIsoL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltEle26WP70GsfTrackIsoFromL1TracksL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.029, 0.111, 0.114, 0.032),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(1.76),
    thrRegularEB2 = cms.vdouble(1.76),
    thrRegularEE1 = cms.vdouble(1.76),
    thrRegularEE2 = cms.vdouble(1.76),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaEleGsfTrackIsoV6L1Seeded")
)


process.hltEle26WP70GsfTrackIsoUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltEle26WP70GsfTrackIsoFromL1TracksUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.029, 0.111, 0.114, 0.032),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(1.76),
    thrRegularEB2 = cms.vdouble(1.76),
    thrRegularEE1 = cms.vdouble(1.76),
    thrRegularEE2 = cms.vdouble(1.76),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaEleGsfTrackIsoV6Unseeded")
)


process.hltEle26WP70HEL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltEle26WP70HgcalHEL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.1, 0.1, 0.3, 0.5),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.17),
    thrOverEEB2 = cms.vdouble(0.17),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(0.0),
    thrRegularEB2 = cms.vdouble(0.0),
    thrRegularEE1 = cms.vdouble(9999.0),
    thrRegularEE2 = cms.vdouble(9999.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaHoverEL1Seeded")
)


process.hltEle26WP70HEUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltEle26WP70HgcalHEUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.1, 0.1, 0.3, 0.5),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.17),
    thrOverEEB2 = cms.vdouble(0.17),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(0.0),
    thrRegularEB2 = cms.vdouble(0.0),
    thrRegularEE1 = cms.vdouble(9999.0),
    thrRegularEE2 = cms.vdouble(9999.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaHoverEUnseeded")
)


process.hltEle26WP70HcalIsoL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.0),
    candTag = cms.InputTag("hltEle26WP70HgcalIsoL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.2, 0.2, 0.4, 0.5),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.02),
    thrOverEEB2 = cms.vdouble(0.02),
    thrOverEEE1 = cms.vdouble(0.02),
    thrOverEEE2 = cms.vdouble(0.02),
    thrRegularEB1 = cms.vdouble(12),
    thrRegularEB2 = cms.vdouble(12),
    thrRegularEE1 = cms.vdouble(12),
    thrRegularEE2 = cms.vdouble(12),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaHcalPFClusterIsoL1Seeded")
)


process.hltEle26WP70HcalIsoUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.0),
    candTag = cms.InputTag("hltEle26WP70HgcalIsoUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.2, 0.2, 0.4, 0.5),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.02),
    thrOverEEB2 = cms.vdouble(0.02),
    thrOverEEE1 = cms.vdouble(0.02),
    thrOverEEE2 = cms.vdouble(0.02),
    thrRegularEB1 = cms.vdouble(12),
    thrRegularEB2 = cms.vdouble(12),
    thrRegularEE1 = cms.vdouble(12),
    thrRegularEE2 = cms.vdouble(12),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaHcalPFClusterIsoUnseeded")
)


process.hltEle26WP70HgcalHEL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltEle26WP70ClusterShapeSigmawwL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.15),
    thrOverEEE2 = cms.vdouble(0.15),
    thrRegularEB1 = cms.vdouble(9999.0),
    thrRegularEB2 = cms.vdouble(9999.0),
    thrRegularEE1 = cms.vdouble(5.0),
    thrRegularEE2 = cms.vdouble(5.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaHGCALIDVarsL1Seeded","hForHOverE")
)


process.hltEle26WP70HgcalHEUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltEle26WP70ClusterShapeSigmawwUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.15),
    thrOverEEE2 = cms.vdouble(0.15),
    thrRegularEB1 = cms.vdouble(9999.0),
    thrRegularEB2 = cms.vdouble(9999.0),
    thrRegularEE1 = cms.vdouble(5.0),
    thrRegularEE2 = cms.vdouble(5.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaHGCALIDVarsUnseeded","hForHOverE")
)


process.hltEle26WP70HgcalIsoL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.0),
    candTag = cms.InputTag("hltEle26WP70EcalIsoL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.05),
    thrOverEEB2 = cms.vdouble(0.05),
    thrOverEEE1 = cms.vdouble(0.05),
    thrOverEEE2 = cms.vdouble(0.05),
    thrRegularEB1 = cms.vdouble(130),
    thrRegularEB2 = cms.vdouble(130),
    thrRegularEE1 = cms.vdouble(130),
    thrRegularEE2 = cms.vdouble(340),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaHGCalLayerClusterIsoL1Seeded")
)


process.hltEle26WP70HgcalIsoUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.0),
    candTag = cms.InputTag("hltEle26WP70EcalIsoUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.05),
    thrOverEEB2 = cms.vdouble(0.05),
    thrOverEEE1 = cms.vdouble(0.05),
    thrOverEEE2 = cms.vdouble(0.05),
    thrRegularEB1 = cms.vdouble(130),
    thrRegularEB2 = cms.vdouble(130),
    thrRegularEE1 = cms.vdouble(130),
    thrRegularEE2 = cms.vdouble(340),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaHGCalLayerClusterIsoUnseeded")
)


process.hltEle26WP70PMS2L1SeededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEle26WP70PixelMatchL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0),
    thrOverEEE = cms.vdouble(0),
    thrRegularEB = cms.vdouble(42.0),
    thrRegularEE = cms.vdouble(65.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaPixelMatchVarsL1Seeded","s2")
)


process.hltEle26WP70PMS2UnseededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEle26WP70PixelMatchUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0),
    thrOverEEE = cms.vdouble(0),
    thrRegularEB = cms.vdouble(42.0),
    thrRegularEE = cms.vdouble(65.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaPixelMatchVarsUnseeded","s2")
)


process.hltEle26WP70PixelMatchL1SeededFilter = cms.EDFilter("HLTElectronPixelMatchFilter",
    candTag = cms.InputTag("hltEle26WP70HcalIsoL1SeededFilter"),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    l1PixelSeedsTag = cms.InputTag("hltEgammaElectronPixelSeedsL1Seeded"),
    ncandcut = cms.int32(1),
    npixelmatchcut = cms.double(1.0),
    pixelVeto = cms.bool(False),
    s2_threshold = cms.double(0.4),
    s_a_phi1B = cms.double(0.0069),
    s_a_phi1F = cms.double(0.0076),
    s_a_phi1I = cms.double(0.0088),
    s_a_phi2B = cms.double(0.00037),
    s_a_phi2F = cms.double(0.00906),
    s_a_phi2I = cms.double(0.0007),
    s_a_rF = cms.double(0.04),
    s_a_rI = cms.double(0.027),
    s_a_zB = cms.double(0.012),
    saveTags = cms.bool(True),
    tanhSO10BarrelThres = cms.double(0.35),
    tanhSO10ForwardThres = cms.double(1.0),
    tanhSO10InterThres = cms.double(1.0),
    useS = cms.bool(False)
)


process.hltEle26WP70PixelMatchUnseededFilter = cms.EDFilter("HLTElectronPixelMatchFilter",
    candTag = cms.InputTag("hltEle26WP70HcalIsoUnseededFilter"),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    l1PixelSeedsTag = cms.InputTag("hltEgammaElectronPixelSeedsUnseeded"),
    ncandcut = cms.int32(1),
    npixelmatchcut = cms.double(1.0),
    pixelVeto = cms.bool(False),
    s2_threshold = cms.double(0.4),
    s_a_phi1B = cms.double(0.0069),
    s_a_phi1F = cms.double(0.0076),
    s_a_phi1I = cms.double(0.0088),
    s_a_phi2B = cms.double(0.00037),
    s_a_phi2F = cms.double(0.00906),
    s_a_phi2I = cms.double(0.0007),
    s_a_rF = cms.double(0.04),
    s_a_rI = cms.double(0.027),
    s_a_zB = cms.double(0.012),
    saveTags = cms.bool(True),
    tanhSO10BarrelThres = cms.double(0.35),
    tanhSO10ForwardThres = cms.double(1.0),
    tanhSO10InterThres = cms.double(1.0),
    useS = cms.bool(False)
)


process.hltEle32WPTightBestGsfChi2L1SeededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEle32WPTightBestGsfNLayerITL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0),
    thrOverEEE = cms.vdouble(0),
    thrRegularEB = cms.vdouble(50.0),
    thrRegularEE = cms.vdouble(50.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaBestGsfTrackVarsL1Seeded","Chi2")
)


process.hltEle32WPTightBestGsfChi2UnseededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEle32WPTightBestGsfNLayerITUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0),
    thrOverEEE = cms.vdouble(0),
    thrRegularEB = cms.vdouble(50.0),
    thrRegularEE = cms.vdouble(50.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaBestGsfTrackVarsUnseeded","Chi2")
)


process.hltEle32WPTightBestGsfNLayerITL1SeededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEle32WPTightGsfDphiL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(False),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0),
    thrOverEEE = cms.vdouble(0),
    thrRegularEB = cms.vdouble(3),
    thrRegularEE = cms.vdouble(3),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaBestGsfTrackVarsL1Seeded","NLayerIT")
)


process.hltEle32WPTightBestGsfNLayerITUnseededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEle32WPTightGsfDphiUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(False),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0),
    thrOverEEE = cms.vdouble(0),
    thrRegularEB = cms.vdouble(3),
    thrRegularEE = cms.vdouble(3),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaBestGsfTrackVarsUnseeded","NLayerIT")
)


process.hltEle32WPTightClusterShapeL1SeededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEG32EtL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0),
    thrOverEEE = cms.vdouble(0),
    thrRegularEB = cms.vdouble(0.013),
    thrRegularEE = cms.vdouble(0.013),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaClusterShapeL1Seeded","sigmaIEtaIEta5x5")
)


process.hltEle32WPTightClusterShapeSigmavvL1SeededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEle32WPTightClusterShapeL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0.0008),
    thrOverEEE = cms.vdouble(0.0008),
    thrRegularEB = cms.vdouble(0.7225),
    thrRegularEE = cms.vdouble(0.7225),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaHGCALIDVarsL1Seeded","sigma2vv")
)


process.hltEle32WPTightClusterShapeSigmavvUnseededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEle32WPTightClusterShapeUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0.0008),
    thrOverEEE = cms.vdouble(0.0008),
    thrRegularEB = cms.vdouble(0.7225),
    thrRegularEE = cms.vdouble(0.7225),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaHGCALIDVarsUnseeded","sigma2vv")
)


process.hltEle32WPTightClusterShapeSigmawwL1SeededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEle32WPTightClusterShapeSigmavvL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0.04),
    thrOverEEE = cms.vdouble(0.04),
    thrRegularEB = cms.vdouble(72.25),
    thrRegularEE = cms.vdouble(72.25),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaHGCALIDVarsL1Seeded","sigma2ww")
)


process.hltEle32WPTightClusterShapeSigmawwUnseededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEle32WPTightClusterShapeSigmavvUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0.04),
    thrOverEEE = cms.vdouble(0.04),
    thrRegularEB = cms.vdouble(72.25),
    thrRegularEE = cms.vdouble(72.25),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaHGCALIDVarsUnseeded","sigma2ww")
)


process.hltEle32WPTightClusterShapeUnseededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEG32EtUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0),
    thrOverEEE = cms.vdouble(0),
    thrRegularEB = cms.vdouble(0.013),
    thrRegularEE = cms.vdouble(0.013),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaClusterShapeUnseeded","sigmaIEtaIEta5x5")
)


process.hltEle32WPTightEcalIsoL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltEle32WPTightHEL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.2, 0.2, 0.25, 0.3),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.02),
    thrOverEEB2 = cms.vdouble(0.02),
    thrOverEEE1 = cms.vdouble(0.02),
    thrOverEEE2 = cms.vdouble(0.02),
    thrRegularEB1 = cms.vdouble(9.0),
    thrRegularEB2 = cms.vdouble(9.0),
    thrRegularEE1 = cms.vdouble(9.0),
    thrRegularEE2 = cms.vdouble(9.0),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaEcalPFClusterIsoL1Seeded")
)


process.hltEle32WPTightEcalIsoUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltEle32WPTightHEUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.2, 0.2, 0.25, 0.3),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.02),
    thrOverEEB2 = cms.vdouble(0.02),
    thrOverEEE1 = cms.vdouble(0.02),
    thrOverEEE2 = cms.vdouble(0.02),
    thrRegularEB1 = cms.vdouble(9.0),
    thrRegularEB2 = cms.vdouble(9.0),
    thrRegularEE1 = cms.vdouble(9.0),
    thrRegularEE2 = cms.vdouble(9.0),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaEcalPFClusterIsoUnseeded")
)


process.hltEle32WPTightGsfDetaL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 0.8, 1.479, 2.1),
    candTag = cms.InputTag("hltEle32WPTightGsfOneOEMinusOneOPL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(0.8),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(0.003),
    thrRegularEB2 = cms.vdouble(0.009),
    thrRegularEE1 = cms.vdouble(0.004),
    thrRegularEE2 = cms.vdouble(0.004),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaGsfTrackVarsL1Seeded","DetaSeed")
)


process.hltEle32WPTightGsfDetaUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 0.8, 1.479, 2.1),
    candTag = cms.InputTag("hltEle32WPTightGsfOneOEMinusOneOPUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(0.8),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(0.003),
    thrRegularEB2 = cms.vdouble(0.009),
    thrRegularEE1 = cms.vdouble(0.004),
    thrRegularEE2 = cms.vdouble(0.004),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaGsfTrackVarsUnseeded","DetaSeed")
)


process.hltEle32WPTightGsfDphiL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 0.8, 1.479, 2.1),
    candTag = cms.InputTag("hltEle32WPTightGsfDetaL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(0.8),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(0.02),
    thrRegularEB2 = cms.vdouble(0.09),
    thrRegularEE1 = cms.vdouble(0.04),
    thrRegularEE2 = cms.vdouble(0.04),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaGsfTrackVarsL1Seeded","Dphi")
)


process.hltEle32WPTightGsfDphiUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 0.8, 1.479, 2.1),
    candTag = cms.InputTag("hltEle32WPTightGsfDetaUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(0.8),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(0.02),
    thrRegularEB2 = cms.vdouble(0.09),
    thrRegularEE1 = cms.vdouble(0.04),
    thrRegularEE2 = cms.vdouble(0.04),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaGsfTrackVarsUnseeded","Dphi")
)


process.hltEle32WPTightGsfOneOEMinusOneOPL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 0.8, 1.479, 2.1),
    candTag = cms.InputTag("hltEle32WPTightPMS2L1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(0.8),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(0.04),
    thrRegularEB2 = cms.vdouble(0.08),
    thrRegularEE1 = cms.vdouble(0.04),
    thrRegularEE2 = cms.vdouble(0.04),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaGsfTrackVarsL1Seeded","OneOESuperMinusOneOP")
)


process.hltEle32WPTightGsfOneOEMinusOneOPUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 0.8, 1.479, 2.1),
    candTag = cms.InputTag("hltEle32WPTightPMS2UnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(0.8),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(0.04),
    thrRegularEB2 = cms.vdouble(0.08),
    thrRegularEE1 = cms.vdouble(0.04),
    thrRegularEE2 = cms.vdouble(0.04),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaGsfTrackVarsUnseeded","OneOESuperMinusOneOP")
)


process.hltEle32WPTightGsfTrackIsoFromL1TracksL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 0.8, 1.479, 2.0),
    candTag = cms.InputTag("hltEle32WPTightBestGsfChi2L1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(0.8),
    etaBoundaryEE12 = cms.double(2.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(5.5),
    thrRegularEB2 = cms.vdouble(8.0),
    thrRegularEE1 = cms.vdouble(5.5),
    thrRegularEE2 = cms.vdouble(5.5),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaEleL1TrkIsoL1Seeded")
)


process.hltEle32WPTightGsfTrackIsoFromL1TracksUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 0.8, 1.479, 2.0),
    candTag = cms.InputTag("hltEle32WPTightBestGsfChi2UnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(0.8),
    etaBoundaryEE12 = cms.double(2.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(5.5),
    thrRegularEB2 = cms.vdouble(8.0),
    thrRegularEE1 = cms.vdouble(5.5),
    thrRegularEE2 = cms.vdouble(5.5),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaEleL1TrkIsoUnseeded")
)


process.hltEle32WPTightGsfTrackIsoL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltEle32WPTightGsfTrackIsoFromL1TracksL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.029, 0.111, 0.114, 0.032),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(2.5),
    thrRegularEB2 = cms.vdouble(2.5),
    thrRegularEE1 = cms.vdouble(2.2),
    thrRegularEE2 = cms.vdouble(2.2),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaEleGsfTrackIsoV6L1Seeded")
)


process.hltEle32WPTightGsfTrackIsoUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltEle32WPTightGsfTrackIsoFromL1TracksUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.029, 0.111, 0.114, 0.032),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(2.5),
    thrRegularEB2 = cms.vdouble(2.5),
    thrRegularEE1 = cms.vdouble(2.2),
    thrRegularEE2 = cms.vdouble(2.2),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaEleGsfTrackIsoV6Unseeded")
)


process.hltEle32WPTightHEL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltEle32WPTightHgcalHEL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.1, 0.1, 0.3, 0.5),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.175),
    thrOverEEB2 = cms.vdouble(0.175),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(0.0),
    thrRegularEB2 = cms.vdouble(0.0),
    thrRegularEE1 = cms.vdouble(9999.0),
    thrRegularEE2 = cms.vdouble(9999.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaHoverEL1Seeded")
)


process.hltEle32WPTightHEUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltEle32WPTightHgcalHEUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.1, 0.1, 0.3, 0.5),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.175),
    thrOverEEB2 = cms.vdouble(0.175),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(0.0),
    thrRegularEB2 = cms.vdouble(0.0),
    thrRegularEE1 = cms.vdouble(9999.0),
    thrRegularEE2 = cms.vdouble(9999.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaHoverEUnseeded")
)


process.hltEle32WPTightHcalIsoL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.0),
    candTag = cms.InputTag("hltEle32WPTightHgcalIsoL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.2, 0.2, 0.4, 0.5),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.02),
    thrOverEEB2 = cms.vdouble(0.02),
    thrOverEEE1 = cms.vdouble(0.02),
    thrOverEEE2 = cms.vdouble(0.02),
    thrRegularEB1 = cms.vdouble(19),
    thrRegularEB2 = cms.vdouble(19),
    thrRegularEE1 = cms.vdouble(19),
    thrRegularEE2 = cms.vdouble(19),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaHcalPFClusterIsoL1Seeded")
)


process.hltEle32WPTightHcalIsoUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.0),
    candTag = cms.InputTag("hltEle32WPTightHgcalIsoUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.2, 0.2, 0.4, 0.5),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.02),
    thrOverEEB2 = cms.vdouble(0.02),
    thrOverEEE1 = cms.vdouble(0.02),
    thrOverEEE2 = cms.vdouble(0.02),
    thrRegularEB1 = cms.vdouble(19),
    thrRegularEB2 = cms.vdouble(19),
    thrRegularEE1 = cms.vdouble(19),
    thrRegularEE2 = cms.vdouble(19),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaHcalPFClusterIsoUnseeded")
)


process.hltEle32WPTightHgcalHEL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltEle32WPTightClusterShapeSigmawwL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.15),
    thrOverEEE2 = cms.vdouble(0.15),
    thrRegularEB1 = cms.vdouble(9999.0),
    thrRegularEB2 = cms.vdouble(9999.0),
    thrRegularEE1 = cms.vdouble(5.0),
    thrRegularEE2 = cms.vdouble(5.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaHGCALIDVarsL1Seeded","hForHOverE")
)


process.hltEle32WPTightHgcalHEUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltEle32WPTightClusterShapeSigmawwUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.15),
    thrOverEEE2 = cms.vdouble(0.15),
    thrRegularEB1 = cms.vdouble(9999.0),
    thrRegularEB2 = cms.vdouble(9999.0),
    thrRegularEE1 = cms.vdouble(5.0),
    thrRegularEE2 = cms.vdouble(5.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaHGCALIDVarsUnseeded","hForHOverE")
)


process.hltEle32WPTightHgcalIsoL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.0),
    candTag = cms.InputTag("hltEle32WPTightEcalIsoL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.05),
    thrOverEEB2 = cms.vdouble(0.05),
    thrOverEEE1 = cms.vdouble(0.05),
    thrOverEEE2 = cms.vdouble(0.05),
    thrRegularEB1 = cms.vdouble(150),
    thrRegularEB2 = cms.vdouble(150),
    thrRegularEE1 = cms.vdouble(150),
    thrRegularEE2 = cms.vdouble(350),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaHGCalLayerClusterIsoL1Seeded")
)


process.hltEle32WPTightHgcalIsoUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.0),
    candTag = cms.InputTag("hltEle32WPTightEcalIsoUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.05),
    thrOverEEB2 = cms.vdouble(0.05),
    thrOverEEE1 = cms.vdouble(0.05),
    thrOverEEE2 = cms.vdouble(0.05),
    thrRegularEB1 = cms.vdouble(150),
    thrRegularEB2 = cms.vdouble(150),
    thrRegularEE1 = cms.vdouble(150),
    thrRegularEE2 = cms.vdouble(350),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaHGCalLayerClusterIsoUnseeded")
)


process.hltEle32WPTightPMS2L1SeededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEle32WPTightPixelMatchL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0),
    thrOverEEE = cms.vdouble(0),
    thrRegularEB = cms.vdouble(55.0),
    thrRegularEE = cms.vdouble(75.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaPixelMatchVarsL1Seeded","s2")
)


process.hltEle32WPTightPMS2UnseededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEle32WPTightPixelMatchUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0),
    thrOverEEE = cms.vdouble(0),
    thrRegularEB = cms.vdouble(55.0),
    thrRegularEE = cms.vdouble(75.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaPixelMatchVarsUnseeded","s2")
)


process.hltEle32WPTightPixelMatchL1SeededFilter = cms.EDFilter("HLTElectronPixelMatchFilter",
    candTag = cms.InputTag("hltEle32WPTightHcalIsoL1SeededFilter"),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    l1PixelSeedsTag = cms.InputTag("hltEgammaElectronPixelSeedsL1Seeded"),
    ncandcut = cms.int32(1),
    npixelmatchcut = cms.double(1.0),
    pixelVeto = cms.bool(False),
    s2_threshold = cms.double(0.4),
    s_a_phi1B = cms.double(0.0069),
    s_a_phi1F = cms.double(0.0076),
    s_a_phi1I = cms.double(0.0088),
    s_a_phi2B = cms.double(0.00037),
    s_a_phi2F = cms.double(0.00906),
    s_a_phi2I = cms.double(0.0007),
    s_a_rF = cms.double(0.04),
    s_a_rI = cms.double(0.027),
    s_a_zB = cms.double(0.012),
    saveTags = cms.bool(True),
    tanhSO10BarrelThres = cms.double(0.35),
    tanhSO10ForwardThres = cms.double(1.0),
    tanhSO10InterThres = cms.double(1.0),
    useS = cms.bool(False)
)


process.hltEle32WPTightPixelMatchUnseededFilter = cms.EDFilter("HLTElectronPixelMatchFilter",
    candTag = cms.InputTag("hltEle32WPTightHcalIsoUnseededFilter"),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    l1PixelSeedsTag = cms.InputTag("hltEgammaElectronPixelSeedsUnseeded"),
    ncandcut = cms.int32(1),
    npixelmatchcut = cms.double(1.0),
    pixelVeto = cms.bool(False),
    s2_threshold = cms.double(0.4),
    s_a_phi1B = cms.double(0.0069),
    s_a_phi1F = cms.double(0.0076),
    s_a_phi1I = cms.double(0.0088),
    s_a_phi2B = cms.double(0.00037),
    s_a_phi2F = cms.double(0.00906),
    s_a_phi2I = cms.double(0.0007),
    s_a_rF = cms.double(0.04),
    s_a_rI = cms.double(0.027),
    s_a_zB = cms.double(0.012),
    saveTags = cms.bool(True),
    tanhSO10BarrelThres = cms.double(0.35),
    tanhSO10ForwardThres = cms.double(1.0),
    tanhSO10InterThres = cms.double(1.0),
    useS = cms.bool(False)
)


process.hltEle5DphiL1SeededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEgammaCandidatesWrapperL1Seeded"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(-1.0),
    thrOverE2EE = cms.vdouble(-1.0),
    thrOverEEB = cms.vdouble(-1.0),
    thrOverEEE = cms.vdouble(-1.0),
    thrRegularEB = cms.vdouble(10),
    thrRegularEE = cms.vdouble(10),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaGsfTrackVarsL1Seeded","Dphi")
)


process.hltEle5DphiUnseededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEgammaCandidatesWrapperUnseeded"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(-1.0),
    thrOverE2EE = cms.vdouble(-1.0),
    thrOverEEB = cms.vdouble(-1.0),
    thrOverEEE = cms.vdouble(-1.0),
    thrRegularEB = cms.vdouble(10),
    thrRegularEE = cms.vdouble(10),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaGsfTrackVarsUnseeded","Dphi")
)


process.hltEle5WPTightBestGsfChi2L1SeededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEle5WPTightBestGsfNLayerITL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0),
    thrOverEEE = cms.vdouble(0),
    thrRegularEB = cms.vdouble(50.0),
    thrRegularEE = cms.vdouble(50.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaBestGsfTrackVarsL1Seeded","Chi2")
)


process.hltEle5WPTightBestGsfChi2UnseededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEle5WPTightBestGsfNLayerITUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0),
    thrOverEEE = cms.vdouble(0),
    thrRegularEB = cms.vdouble(50.0),
    thrRegularEE = cms.vdouble(50.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaBestGsfTrackVarsUnseeded","Chi2")
)


process.hltEle5WPTightBestGsfNLayerITL1SeededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEle5WPTightGsfDphiL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(False),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0),
    thrOverEEE = cms.vdouble(0),
    thrRegularEB = cms.vdouble(3),
    thrRegularEE = cms.vdouble(3),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaBestGsfTrackVarsL1Seeded","NLayerIT")
)


process.hltEle5WPTightBestGsfNLayerITUnseededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEle5WPTightGsfDphiUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(False),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0),
    thrOverEEE = cms.vdouble(0),
    thrRegularEB = cms.vdouble(3),
    thrRegularEE = cms.vdouble(3),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaBestGsfTrackVarsUnseeded","NLayerIT")
)


process.hltEle5WPTightClusterShapeL1SeededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEG5EtL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0),
    thrOverEEE = cms.vdouble(0),
    thrRegularEB = cms.vdouble(0.013),
    thrRegularEE = cms.vdouble(0.013),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaClusterShapeL1Seeded","sigmaIEtaIEta5x5")
)


process.hltEle5WPTightClusterShapeSigmavvL1SeededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEle5WPTightClusterShapeL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0.0008),
    thrOverEEE = cms.vdouble(0.0008),
    thrRegularEB = cms.vdouble(0.7225),
    thrRegularEE = cms.vdouble(0.7225),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaHGCALIDVarsL1Seeded","sigma2vv")
)


process.hltEle5WPTightClusterShapeSigmavvUnseededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEle5WPTightClusterShapeUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0.0008),
    thrOverEEE = cms.vdouble(0.0008),
    thrRegularEB = cms.vdouble(0.7225),
    thrRegularEE = cms.vdouble(0.7225),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaHGCALIDVarsUnseeded","sigma2vv")
)


process.hltEle5WPTightClusterShapeSigmawwL1SeededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEle5WPTightClusterShapeSigmavvL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0.04),
    thrOverEEE = cms.vdouble(0.04),
    thrRegularEB = cms.vdouble(72.25),
    thrRegularEE = cms.vdouble(72.25),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaHGCALIDVarsL1Seeded","sigma2ww")
)


process.hltEle5WPTightClusterShapeSigmawwUnseededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEle5WPTightClusterShapeSigmavvUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0.04),
    thrOverEEE = cms.vdouble(0.04),
    thrRegularEB = cms.vdouble(72.25),
    thrRegularEE = cms.vdouble(72.25),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaHGCALIDVarsUnseeded","sigma2ww")
)


process.hltEle5WPTightClusterShapeUnseededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEG5EtUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0),
    thrOverEEE = cms.vdouble(0),
    thrRegularEB = cms.vdouble(0.013),
    thrRegularEE = cms.vdouble(0.013),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaClusterShapeUnseeded","sigmaIEtaIEta5x5")
)


process.hltEle5WPTightEcalIsoL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltEle5WPTightHEL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.2, 0.2, 0.25, 0.3),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.02),
    thrOverEEB2 = cms.vdouble(0.02),
    thrOverEEE1 = cms.vdouble(0.02),
    thrOverEEE2 = cms.vdouble(0.02),
    thrRegularEB1 = cms.vdouble(9.0),
    thrRegularEB2 = cms.vdouble(9.0),
    thrRegularEE1 = cms.vdouble(9.0),
    thrRegularEE2 = cms.vdouble(9.0),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaEcalPFClusterIsoL1Seeded")
)


process.hltEle5WPTightEcalIsoUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltEle5WPTightHEUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.2, 0.2, 0.25, 0.3),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.02),
    thrOverEEB2 = cms.vdouble(0.02),
    thrOverEEE1 = cms.vdouble(0.02),
    thrOverEEE2 = cms.vdouble(0.02),
    thrRegularEB1 = cms.vdouble(9.0),
    thrRegularEB2 = cms.vdouble(9.0),
    thrRegularEE1 = cms.vdouble(9.0),
    thrRegularEE2 = cms.vdouble(9.0),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaEcalPFClusterIsoUnseeded")
)


process.hltEle5WPTightGsfDetaL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 0.8, 1.479, 2.1),
    candTag = cms.InputTag("hltEle5WPTightGsfOneOEMinusOneOPL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(0.8),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(0.003),
    thrRegularEB2 = cms.vdouble(0.009),
    thrRegularEE1 = cms.vdouble(0.004),
    thrRegularEE2 = cms.vdouble(0.004),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaGsfTrackVarsL1Seeded","DetaSeed")
)


process.hltEle5WPTightGsfDetaUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 0.8, 1.479, 2.1),
    candTag = cms.InputTag("hltEle5WPTightGsfOneOEMinusOneOPUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(0.8),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(0.003),
    thrRegularEB2 = cms.vdouble(0.009),
    thrRegularEE1 = cms.vdouble(0.004),
    thrRegularEE2 = cms.vdouble(0.004),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaGsfTrackVarsUnseeded","DetaSeed")
)


process.hltEle5WPTightGsfDphiL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 0.8, 1.479, 2.1),
    candTag = cms.InputTag("hltEle5WPTightGsfDetaL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(0.8),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(0.02),
    thrRegularEB2 = cms.vdouble(0.09),
    thrRegularEE1 = cms.vdouble(0.04),
    thrRegularEE2 = cms.vdouble(0.04),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaGsfTrackVarsL1Seeded","Dphi")
)


process.hltEle5WPTightGsfDphiUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 0.8, 1.479, 2.1),
    candTag = cms.InputTag("hltEle5WPTightGsfDetaUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(0.8),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(0.02),
    thrRegularEB2 = cms.vdouble(0.09),
    thrRegularEE1 = cms.vdouble(0.04),
    thrRegularEE2 = cms.vdouble(0.04),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaGsfTrackVarsUnseeded","Dphi")
)


process.hltEle5WPTightGsfOneOEMinusOneOPL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 0.8, 1.479, 2.1),
    candTag = cms.InputTag("hltEle5WPTightPMS2L1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(0.8),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(0.04),
    thrRegularEB2 = cms.vdouble(0.08),
    thrRegularEE1 = cms.vdouble(0.04),
    thrRegularEE2 = cms.vdouble(0.04),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaGsfTrackVarsL1Seeded","OneOESuperMinusOneOP")
)


process.hltEle5WPTightGsfOneOEMinusOneOPUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 0.8, 1.479, 2.1),
    candTag = cms.InputTag("hltEle5WPTightPMS2UnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(0.8),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(0.04),
    thrRegularEB2 = cms.vdouble(0.08),
    thrRegularEE1 = cms.vdouble(0.04),
    thrRegularEE2 = cms.vdouble(0.04),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaGsfTrackVarsUnseeded","OneOESuperMinusOneOP")
)


process.hltEle5WPTightGsfTrackIsoFromL1TracksL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 0.8, 1.479, 2.0),
    candTag = cms.InputTag("hltEle5WPTightBestGsfChi2L1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(0.8),
    etaBoundaryEE12 = cms.double(2.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(5.5),
    thrRegularEB2 = cms.vdouble(8.0),
    thrRegularEE1 = cms.vdouble(5.5),
    thrRegularEE2 = cms.vdouble(5.5),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaEleL1TrkIsoL1Seeded")
)


process.hltEle5WPTightGsfTrackIsoFromL1TracksUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 0.8, 1.479, 2.0),
    candTag = cms.InputTag("hltEle5WPTightBestGsfChi2UnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(0.8),
    etaBoundaryEE12 = cms.double(2.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(5.5),
    thrRegularEB2 = cms.vdouble(8.0),
    thrRegularEE1 = cms.vdouble(5.5),
    thrRegularEE2 = cms.vdouble(5.5),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaEleL1TrkIsoUnseeded")
)


process.hltEle5WPTightGsfTrackIsoL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltEle5WPTightGsfTrackIsoFromL1TracksL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.029, 0.111, 0.114, 0.032),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(2.5),
    thrRegularEB2 = cms.vdouble(2.5),
    thrRegularEE1 = cms.vdouble(2.2),
    thrRegularEE2 = cms.vdouble(2.2),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaEleGsfTrackIsoL1Seeded")
)


process.hltEle5WPTightGsfTrackIsoUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltEle5WPTightGsfTrackIsoFromL1TracksUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.029, 0.111, 0.114, 0.032),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(2.5),
    thrRegularEB2 = cms.vdouble(2.5),
    thrRegularEE1 = cms.vdouble(2.2),
    thrRegularEE2 = cms.vdouble(2.2),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaEleGsfTrackIsoUnseeded")
)


process.hltEle5WPTightHEL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltEle5WPTightHgcalHEL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.1, 0.1, 0.3, 0.5),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.175),
    thrOverEEB2 = cms.vdouble(0.175),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(0.0),
    thrRegularEB2 = cms.vdouble(0.0),
    thrRegularEE1 = cms.vdouble(9999.0),
    thrRegularEE2 = cms.vdouble(9999.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaHoverEL1Seeded")
)


process.hltEle5WPTightHEUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltEle5WPTightHgcalHEUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.1, 0.1, 0.3, 0.5),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.175),
    thrOverEEB2 = cms.vdouble(0.175),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(0.0),
    thrRegularEB2 = cms.vdouble(0.0),
    thrRegularEE1 = cms.vdouble(9999.0),
    thrRegularEE2 = cms.vdouble(9999.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaHoverEUnseeded")
)


process.hltEle5WPTightHcalIsoL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.0),
    candTag = cms.InputTag("hltEle5WPTightHgcalIsoL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.2, 0.2, 0.4, 0.5),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.02),
    thrOverEEB2 = cms.vdouble(0.02),
    thrOverEEE1 = cms.vdouble(0.02),
    thrOverEEE2 = cms.vdouble(0.02),
    thrRegularEB1 = cms.vdouble(19),
    thrRegularEB2 = cms.vdouble(19),
    thrRegularEE1 = cms.vdouble(19),
    thrRegularEE2 = cms.vdouble(19),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaHcalPFClusterIsoL1Seeded")
)


process.hltEle5WPTightHcalIsoUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.0),
    candTag = cms.InputTag("hltEle5WPTightHgcalIsoUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.2, 0.2, 0.4, 0.5),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.02),
    thrOverEEB2 = cms.vdouble(0.02),
    thrOverEEE1 = cms.vdouble(0.02),
    thrOverEEE2 = cms.vdouble(0.02),
    thrRegularEB1 = cms.vdouble(19),
    thrRegularEB2 = cms.vdouble(19),
    thrRegularEE1 = cms.vdouble(19),
    thrRegularEE2 = cms.vdouble(19),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaHcalPFClusterIsoUnseeded")
)


process.hltEle5WPTightHgcalHEL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltEle5WPTightClusterShapeSigmawwL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.15),
    thrOverEEE2 = cms.vdouble(0.15),
    thrRegularEB1 = cms.vdouble(9999.0),
    thrRegularEB2 = cms.vdouble(9999.0),
    thrRegularEE1 = cms.vdouble(5.0),
    thrRegularEE2 = cms.vdouble(5.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaHGCALIDVarsL1Seeded","hForHOverE")
)


process.hltEle5WPTightHgcalHEUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltEle5WPTightClusterShapeSigmawwUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.15),
    thrOverEEE2 = cms.vdouble(0.15),
    thrRegularEB1 = cms.vdouble(9999.0),
    thrRegularEB2 = cms.vdouble(9999.0),
    thrRegularEE1 = cms.vdouble(5.0),
    thrRegularEE2 = cms.vdouble(5.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaHGCALIDVarsUnseeded","hForHOverE")
)


process.hltEle5WPTightHgcalIsoL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.0),
    candTag = cms.InputTag("hltEle5WPTightEcalIsoL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.05),
    thrOverEEB2 = cms.vdouble(0.05),
    thrOverEEE1 = cms.vdouble(0.05),
    thrOverEEE2 = cms.vdouble(0.05),
    thrRegularEB1 = cms.vdouble(150),
    thrRegularEB2 = cms.vdouble(150),
    thrRegularEE1 = cms.vdouble(150),
    thrRegularEE2 = cms.vdouble(350),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaHGCalLayerClusterIsoL1Seeded")
)


process.hltEle5WPTightHgcalIsoUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.0),
    candTag = cms.InputTag("hltEle5WPTightEcalIsoUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.05),
    thrOverEEB2 = cms.vdouble(0.05),
    thrOverEEE1 = cms.vdouble(0.05),
    thrOverEEE2 = cms.vdouble(0.05),
    thrRegularEB1 = cms.vdouble(150),
    thrRegularEB2 = cms.vdouble(150),
    thrRegularEE1 = cms.vdouble(150),
    thrRegularEE2 = cms.vdouble(350),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaHGCalLayerClusterIsoUnseeded")
)


process.hltEle5WPTightPMS2L1SeededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEle5WPTightPixelMatchL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0),
    thrOverEEE = cms.vdouble(0),
    thrRegularEB = cms.vdouble(55.0),
    thrRegularEE = cms.vdouble(75.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaPixelMatchVarsL1Seeded","s2")
)


process.hltEle5WPTightPMS2UnseededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEle5WPTightPixelMatchUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0),
    thrOverEEE = cms.vdouble(0),
    thrRegularEB = cms.vdouble(55.0),
    thrRegularEE = cms.vdouble(75.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaPixelMatchVarsUnseeded","s2")
)


process.hltEle5WPTightPixelMatchL1SeededFilter = cms.EDFilter("HLTElectronPixelMatchFilter",
    candTag = cms.InputTag("hltEle5WPTightHcalIsoL1SeededFilter"),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    l1PixelSeedsTag = cms.InputTag("hltEgammaElectronPixelSeedsL1Seeded"),
    ncandcut = cms.int32(1),
    npixelmatchcut = cms.double(1.0),
    pixelVeto = cms.bool(False),
    s2_threshold = cms.double(0.4),
    s_a_phi1B = cms.double(0.0069),
    s_a_phi1F = cms.double(0.0076),
    s_a_phi1I = cms.double(0.0088),
    s_a_phi2B = cms.double(0.00037),
    s_a_phi2F = cms.double(0.00906),
    s_a_phi2I = cms.double(0.0007),
    s_a_rF = cms.double(0.04),
    s_a_rI = cms.double(0.027),
    s_a_zB = cms.double(0.012),
    saveTags = cms.bool(True),
    tanhSO10BarrelThres = cms.double(0.35),
    tanhSO10ForwardThres = cms.double(1.0),
    tanhSO10InterThres = cms.double(1.0),
    useS = cms.bool(False)
)


process.hltEle5WPTightPixelMatchUnseededFilter = cms.EDFilter("HLTElectronPixelMatchFilter",
    candTag = cms.InputTag("hltEle5WPTightHcalIsoUnseededFilter"),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    l1PixelSeedsTag = cms.InputTag("hltEgammaElectronPixelSeedsUnseeded"),
    ncandcut = cms.int32(1),
    npixelmatchcut = cms.double(1.0),
    pixelVeto = cms.bool(False),
    s2_threshold = cms.double(0.4),
    s_a_phi1B = cms.double(0.0069),
    s_a_phi1F = cms.double(0.0076),
    s_a_phi1I = cms.double(0.0088),
    s_a_phi2B = cms.double(0.00037),
    s_a_phi2F = cms.double(0.00906),
    s_a_phi2I = cms.double(0.0007),
    s_a_rF = cms.double(0.04),
    s_a_rI = cms.double(0.027),
    s_a_zB = cms.double(0.012),
    saveTags = cms.bool(True),
    tanhSO10BarrelThres = cms.double(0.35),
    tanhSO10ForwardThres = cms.double(1.0),
    tanhSO10InterThres = cms.double(1.0),
    useS = cms.bool(False)
)


process.hltGoodOfflinePrimaryVertices = cms.EDFilter("VertexSelector",
    cut = cms.string('!isFake && ndof >= 4.0 && abs(z) <= 24.0 && abs(position.Rho) <= 2.0'),
    filter = cms.bool(False),
    src = cms.InputTag("hltOfflinePrimaryVertices")
)


process.hltHpsDoublePFTau35MediumDitauWPDeepTau = cms.EDFilter("HLT1PFTau",
    MaxEta = cms.double(2.1),
    MaxMass = cms.double(-1.0),
    MinE = cms.double(-1.0),
    MinEta = cms.double(-1.0),
    MinMass = cms.double(-1.0),
    MinN = cms.int32(2),
    MinPt = cms.double(35.0),
    inputTag = cms.InputTag("hltHpsSelectedPFTausMediumDitauWPDeepTau"),
    saveTags = cms.bool(True),
    triggerType = cms.int32(84)
)


process.hltHpsDoublePFTau40TrackPt1MediumChargedIsolation = cms.EDFilter("HLT1PFTau",
    MaxEta = cms.double(2.1),
    MaxMass = cms.double(-1.0),
    MinE = cms.double(-1.0),
    MinEta = cms.double(-1.0),
    MinMass = cms.double(-1.0),
    MinN = cms.int32(2),
    MinPt = cms.double(40.0),
    inputTag = cms.InputTag("hltHpsSelectedPFTausTrackPt1MediumChargedIsolation"),
    saveTags = cms.bool(True),
    triggerType = cms.int32(84)
)


process.hltHpsPFTauTrack = cms.EDFilter("HLT1PFTau",
    MaxEta = cms.double(2.5),
    MaxMass = cms.double(-1.0),
    MinE = cms.double(-1.0),
    MinEta = cms.double(-1.0),
    MinMass = cms.double(-1.0),
    MinN = cms.int32(1),
    MinPt = cms.double(0.0),
    inputTag = cms.InputTag("hltHpsPFTauProducer"),
    saveTags = cms.bool(True),
    triggerType = cms.int32(84)
)


process.hltHpsSelectedPFTausMediumDitauWPDeepTau = cms.EDFilter("PFTauSelector",
    cut = cms.string('pt > 35 && abs(eta) < 2.1'),
    discriminatorContainers = cms.VPSet(cms.PSet(
        discriminator = cms.InputTag("hltHpsPFTauDeepTauProducer","VSjet"),
        rawValues = cms.vstring(),
        selectionCuts = cms.vdouble(),
        workingPoints = cms.vstring('double t1 = 0.649, t2 = 0.441, t3 = 0.05, x1 = 35, x2 = 100, x3 = 300; if (pt <= x1) return t1; if (pt >= x3) return t3; if (pt < x2) return (t2 - t1) / (x2 - x1) * (pt - x1) + t1; return (t3 - t2) / (x3 - x2) * (pt - x2) + t2;')
    )),
    discriminators = cms.VPSet(),
    src = cms.InputTag("hltHpsPFTauProducer")
)


process.hltHpsSelectedPFTausTrackFinding = cms.EDFilter("PFTauSelector",
    cut = cms.string('pt > 0'),
    discriminatorContainers = cms.VPSet(),
    discriminators = cms.VPSet(cms.PSet(
        discriminator = cms.InputTag("hltHpsPFTauTrackFindingDiscriminator"),
        selectionCut = cms.double(0.5)
    )),
    src = cms.InputTag("hltHpsPFTauProducer")
)


process.hltHpsSelectedPFTausTrackPt1MediumChargedIsolation = cms.EDFilter("PFTauSelector",
    cut = cms.string('pt > 0'),
    discriminatorContainers = cms.VPSet(),
    discriminators = cms.VPSet(cms.PSet(
        discriminator = cms.InputTag("hltHpsPFTauMediumAbsOrRelChargedIsolationDiscriminator"),
        selectionCut = cms.double(0.5)
    )),
    src = cms.InputTag("hltHpsPFTauProducer")
)


process.hltL1DoubleNNTau52 = cms.EDFilter("L1TPFTauFilter",
    MaxEta = cms.double(2.172),
    MinEta = cms.double(-2.172),
    MinN = cms.int32(2),
    MinPt = cms.double(52.0),
    PassLooseNN = cms.int32(0),
    Scalings = cms.PSet(
        barrel = cms.vdouble(-9.54135, 1.73403, 0),
        endcap = cms.vdouble(-36.157, 3.83749, 0)
    ),
    inputTag = cms.InputTag("l1tNNTauProducerPuppi","L1PFTausNN"),
    saveTags = cms.bool(True)
)


process.hltL1SeedForDoublePuppiTau = cms.EDFilter("PathStatusFilter",
    logicalExpression = cms.string('pDoublePuppiTau52_52')
)


process.hltL1SeedsForDoublePuppiJetBtagFilter = cms.EDFilter("PathStatusFilter",
    logicalExpression = cms.string('pDoublePuppiJet112_112')
)


process.hltL1SeedsForPuppiHTFilter = cms.EDFilter("PathStatusFilter",
    logicalExpression = cms.string('pPuppiHT450')
)


process.hltL1SeedsForPuppiJetFilter = cms.EDFilter("PathStatusFilter",
    logicalExpression = cms.string('pSinglePuppiJet230')
)


process.hltL1SeedsForPuppiMETFilter = cms.EDFilter("PathStatusFilter",
    logicalExpression = cms.string('pPuppiMET200')
)


process.hltL1SeedsForQuadPuppiJetTripleBtagFilter = cms.EDFilter("PathStatusFilter",
    logicalExpression = cms.string('pPuppiHT400 and pQuadJet70_55_40_40')
)


process.hltL1SingleMuFiltered5 = cms.EDFilter("L1TTkMuonFilter",
    MaxEta = cms.double(2.4),
    MinEta = cms.double(-2.4),
    MinN = cms.int32(1),
    MinPt = cms.double(5.0),
    Scalings = cms.PSet(
        barrel = cms.vdouble(0.820128, 1.04124, 0.0),
        endcap = cms.vdouble(0.864715, 1.03215, 0.0),
        overlap = cms.vdouble(0.920897, 1.03712, 0.0)
    ),
    inputTag = cms.InputTag("l1tTkMuonsGmt"),
    saveTags = cms.bool(True)
)


process.hltL1SingleNNTau150 = cms.EDFilter("L1TPFTauFilter",
    MaxEta = cms.double(2.172),
    MinEta = cms.double(-2.172),
    MinN = cms.int32(1),
    MinPt = cms.double(150.0),
    PassLooseNN = cms.int32(0),
    Scalings = cms.PSet(
        barrel = cms.vdouble(-9.54135, 1.73403, 0),
        endcap = cms.vdouble(-36.157, 3.83749, 0)
    ),
    inputTag = cms.InputTag("l1tNNTauProducerPuppi","L1PFTausNN"),
    saveTags = cms.bool(True)
)


process.hltL1TkDoubleMuFiltered7 = cms.EDFilter("L1TTkMuonFilter",
    MaxEta = cms.double(2.4),
    MinEta = cms.double(-2.4),
    MinN = cms.int32(2),
    MinPt = cms.double(7.0),
    Scalings = cms.PSet(
        barrel = cms.vdouble(0.820128, 1.04124, 0.0),
        endcap = cms.vdouble(0.864715, 1.03215, 0.0),
        overlap = cms.vdouble(0.920897, 1.03712, 0.0)
    ),
    inputTag = cms.InputTag("l1tTkMuonsGmt"),
    saveTags = cms.bool(True)
)


process.hltL1TkSingleMuFiltered15 = cms.EDFilter("L1TTkMuonFilter",
    MaxEta = cms.double(2.4),
    MinEta = cms.double(-2.4),
    MinN = cms.int32(1),
    MinPt = cms.double(15.0),
    Scalings = cms.PSet(
        barrel = cms.vdouble(0.820128, 1.04124, 0.0),
        endcap = cms.vdouble(0.864715, 1.03215, 0.0),
        overlap = cms.vdouble(0.920897, 1.03712, 0.0)
    ),
    inputTag = cms.InputTag("l1tTkMuonsGmt"),
    saveTags = cms.bool(True)
)


process.hltL1TkSingleMuFiltered22 = cms.EDFilter("L1TTkMuonFilter",
    MaxEta = cms.double(2.4),
    MinEta = cms.double(-2.4),
    MinN = cms.int32(1),
    MinPt = cms.double(22.0),
    Scalings = cms.PSet(
        barrel = cms.vdouble(0.820128, 1.04124, 0.0),
        endcap = cms.vdouble(0.864715, 1.03215, 0.0),
        overlap = cms.vdouble(0.920897, 1.03712, 0.0)
    ),
    inputTag = cms.InputTag("l1tTkMuonsGmt"),
    saveTags = cms.bool(True)
)


process.hltL1TripleMuFiltered3 = cms.EDFilter("L1TTkMuonFilter",
    MaxEta = cms.double(2.4),
    MinEta = cms.double(-2.4),
    MinN = cms.int32(3),
    MinPt = cms.double(3.0),
    Scalings = cms.PSet(
        barrel = cms.vdouble(0.820128, 1.04124, 0.0),
        endcap = cms.vdouble(0.864715, 1.03215, 0.0),
        overlap = cms.vdouble(0.920897, 1.03712, 0.0)
    ),
    inputTag = cms.InputTag("l1tTkMuonsGmt"),
    saveTags = cms.bool(True)
)


process.hltL3crIsoL1TkSingleMu22L3f24QL3pfecalIsoFiltered0p41 = cms.EDFilter("HLTMuonGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltL3fL1TkSingleMu22L3Filtered24Q"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltPhase2L3MuonCandidates"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(-1.0),
    thrOverE2EE = cms.vdouble(-1.0),
    thrOverEEB = cms.vdouble(0.41),
    thrOverEEE = cms.vdouble(0.41),
    thrRegularEB = cms.vdouble(-1.0),
    thrRegularEE = cms.vdouble(-1.0),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltPhase2L3MuonsEcalIsodR0p3dRVeto0p000")
)


process.hltL3crIsoL1TkSingleMu22L3f24QL3pfhcalIsoFiltered0p40 = cms.EDFilter("HLTMuonGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltL3crIsoL1TkSingleMu22L3f24QL3pfecalIsoFiltered0p41"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltPhase2L3MuonCandidates"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(-1.0),
    thrOverE2EE = cms.vdouble(-1.0),
    thrOverEEB = cms.vdouble(0.4),
    thrOverEEE = cms.vdouble(0.4),
    thrRegularEB = cms.vdouble(-1.0),
    thrRegularEE = cms.vdouble(-1.0),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltPhase2L3MuonsHcalIsodR0p3dRVeto0p000")
)


process.hltL3crIsoL1TkSingleMu22L3f24QL3pfhgcalIsoFiltered4p70 = cms.EDFilter("HLTMuonGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltL3crIsoL1TkSingleMu22L3f24QL3pfhcalIsoFiltered0p40"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltPhase2L3MuonCandidates"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(-1.0),
    thrOverE2EE = cms.vdouble(-1.0),
    thrOverEEB = cms.vdouble(4.7),
    thrOverEEE = cms.vdouble(4.7),
    thrRegularEB = cms.vdouble(-1.0),
    thrRegularEE = cms.vdouble(-1.0),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltPhase2L3MuonsHgcalLCIsodR0p2dRVetoEM0p00dRVetoHad0p02minEEM0p00minEHad0p00")
)


process.hltL3crIsoL1TkSingleMu22L3f24QL3trkIsoRegionalNewFiltered0p07EcalHcalHgcalTrk = cms.EDFilter("HLTMuonIsoFilter",
    CandTag = cms.InputTag("hltPhase2L3MuonCandidates"),
    DepTag = cms.VInputTag("hltPhase2L3MuonsTrkIsoRegionalNewdR0p3dRVeto0p005dz0p25dr0p20ChisqInfPtMin0p0Cut0p07"),
    IsolatorPSet = cms.PSet(

    ),
    MinN = cms.int32(1),
    PreviousCandTag = cms.InputTag("hltL3crIsoL1TkSingleMu22L3f24QL3pfhgcalIsoFiltered4p70"),
    saveTags = cms.bool(True)
)


process.hltL3fL1DoubleMu155fFiltered17 = cms.EDFilter("HLTMuonTrkL1TkMuFilter",
    inputCandCollection = cms.InputTag("hltPhase2L3MuonCandidates"),
    inputMuonCollection = cms.InputTag("hltPhase2L3Muons"),
    l1GTAlgoBlockTag = cms.InputTag("l1tGTAlgoBlockProducer"),
    l1GTAlgoNames = cms.vstring('pDoubleTkMuon15_7'),
    maxAbsEta = cms.double(1e+99),
    maxNormalizedChi2 = cms.double(1e+99),
    minMuonHits = cms.int32(-1),
    minMuonStations = cms.int32(1),
    minN = cms.uint32(1),
    minPt = cms.double(17.0),
    minTrkHits = cms.int32(-1),
    saveTags = cms.bool(True)
)


process.hltL3fL1DoubleMu155fFiltered37 = cms.EDFilter("HLTMuonTrkL1TkMuFilter",
    inputCandCollection = cms.InputTag("hltPhase2L3MuonCandidates"),
    inputMuonCollection = cms.InputTag("hltPhase2L3Muons"),
    l1GTAlgoBlockTag = cms.InputTag("l1tGTAlgoBlockProducer"),
    l1GTAlgoNames = cms.vstring('pDoubleTkMuon15_7'),
    maxAbsEta = cms.double(1e+99),
    maxNormalizedChi2 = cms.double(1e+99),
    minMuonHits = cms.int32(-1),
    minMuonStations = cms.int32(1),
    minN = cms.uint32(1),
    minPt = cms.double(37.0),
    minTrkHits = cms.int32(-1),
    saveTags = cms.bool(True)
)


process.hltL3fL1DoubleMu155fPreFiltered27 = cms.EDFilter("HLTMuonTrkL1TkMuFilter",
    inputCandCollection = cms.InputTag("hltPhase2L3MuonCandidates"),
    inputMuonCollection = cms.InputTag("hltPhase2L3Muons"),
    l1GTAlgoBlockTag = cms.InputTag("l1tGTAlgoBlockProducer"),
    l1GTAlgoNames = cms.vstring('pDoubleTkMuon15_7'),
    maxAbsEta = cms.double(1e+99),
    maxNormalizedChi2 = cms.double(1e+99),
    minMuonHits = cms.int32(-1),
    minMuonStations = cms.int32(1),
    minN = cms.uint32(2),
    minPt = cms.double(27.0),
    minTrkHits = cms.int32(-1),
    saveTags = cms.bool(True)
)


process.hltL3fL1DoubleMu155fPreFiltered8 = cms.EDFilter("HLTMuonTrkL1TkMuFilter",
    inputCandCollection = cms.InputTag("hltPhase2L3MuonCandidates"),
    inputMuonCollection = cms.InputTag("hltPhase2L3Muons"),
    l1GTAlgoBlockTag = cms.InputTag("l1tGTAlgoBlockProducer"),
    l1GTAlgoNames = cms.vstring('pDoubleTkMuon15_7'),
    maxAbsEta = cms.double(1e+99),
    maxNormalizedChi2 = cms.double(1e+99),
    minMuonHits = cms.int32(-1),
    minMuonStations = cms.int32(1),
    minN = cms.uint32(2),
    minPt = cms.double(8.0),
    minTrkHits = cms.int32(-1),
    saveTags = cms.bool(True)
)


process.hltL3fL1TkSingleMu22L3Filtered24Q = cms.EDFilter("HLTMuonTrkL1TkMuFilter",
    inputCandCollection = cms.InputTag("hltPhase2L3MuonCandidates"),
    inputMuonCollection = cms.InputTag("hltPhase2L3Muons"),
    l1GTAlgoBlockTag = cms.InputTag("l1tGTAlgoBlockProducer"),
    l1GTAlgoNames = cms.vstring('pSingleTkMuon22'),
    maxAbsEta = cms.double(1e+99),
    maxNormalizedChi2 = cms.double(1e+99),
    minMuonHits = cms.int32(-1),
    minMuonStations = cms.int32(1),
    minN = cms.uint32(1),
    minPt = cms.double(24.0),
    minTrkHits = cms.int32(-1),
    saveTags = cms.bool(True)
)


process.hltL3fL1TkSingleMu22L3Filtered50Q = cms.EDFilter("HLTMuonTrkL1TkMuFilter",
    inputCandCollection = cms.InputTag("hltPhase2L3MuonCandidates"),
    inputMuonCollection = cms.InputTag("hltPhase2L3Muons"),
    l1GTAlgoBlockTag = cms.InputTag("l1tGTAlgoBlockProducer"),
    l1GTAlgoNames = cms.vstring('pSingleTkMuon22'),
    maxAbsEta = cms.double(1e+99),
    maxNormalizedChi2 = cms.double(1e+99),
    minMuonHits = cms.int32(-1),
    minMuonStations = cms.int32(1),
    minN = cms.uint32(1),
    minPt = cms.double(50.0),
    minTrkHits = cms.int32(-1),
    saveTags = cms.bool(True)
)


process.hltL3fL1TkTripleMu533L31055DZFiltered0p2 = cms.EDFilter("HLT2MuonMuonDZ",
    MaxDZ = cms.double(0.2),
    MinDR = cms.double(0.001),
    MinN = cms.int32(3),
    MinPixHitsForDZ = cms.int32(1),
    checkSC = cms.bool(False),
    inputTag1 = cms.InputTag("hltL3fL1TkTripleMu533PreFiltered555"),
    inputTag2 = cms.InputTag("hltL3fL1TkTripleMu533PreFiltered555"),
    originTag1 = cms.VInputTag("hltPhase2L3MuonCandidates"),
    originTag2 = cms.VInputTag("hltPhase2L3MuonCandidates"),
    saveTags = cms.bool(True),
    triggerType1 = cms.int32(83),
    triggerType2 = cms.int32(83)
)


process.hltL3fL1TkTripleMu533L3Filtered1055 = cms.EDFilter("HLTMuonTrkL1TkMuFilter",
    inputCandCollection = cms.InputTag("hltPhase2L3MuonCandidates"),
    inputMuonCollection = cms.InputTag("hltPhase2L3Muons"),
    l1GTAlgoBlockTag = cms.InputTag("l1tGTAlgoBlockProducer"),
    l1GTAlgoNames = cms.vstring('pTripleTkMuon5_3_3'),
    maxAbsEta = cms.double(2.5),
    maxNormalizedChi2 = cms.double(1e+99),
    minMuonHits = cms.int32(-1),
    minMuonStations = cms.int32(1),
    minN = cms.uint32(1),
    minPt = cms.double(10.0),
    minTrkHits = cms.int32(-1),
    saveTags = cms.bool(True)
)


process.hltL3fL1TkTripleMu533PreFiltered555 = cms.EDFilter("HLTMuonTrkL1TkMuFilter",
    inputCandCollection = cms.InputTag("hltPhase2L3MuonCandidates"),
    inputMuonCollection = cms.InputTag("hltPhase2L3Muons"),
    l1GTAlgoBlockTag = cms.InputTag("l1tGTAlgoBlockProducer"),
    l1GTAlgoNames = cms.vstring('pTripleTkMuon5_3_3'),
    maxAbsEta = cms.double(2.5),
    maxNormalizedChi2 = cms.double(1e+99),
    minMuonHits = cms.int32(-1),
    minMuonStations = cms.int32(1),
    minN = cms.uint32(3),
    minPt = cms.double(5.0),
    minTrkHits = cms.int32(-1),
    saveTags = cms.bool(True)
)


process.hltPFPuppiCentralJetQuad30MaxEta2p4 = cms.EDFilter("HLT1PFJet",
    MaxEta = cms.double(2.4),
    MaxMass = cms.double(-1.0),
    MinE = cms.double(-1.0),
    MinEta = cms.double(-2.4),
    MinMass = cms.double(-1.0),
    MinN = cms.int32(4),
    MinPt = cms.double(30.0),
    inputTag = cms.InputTag("hltAK4PFPuppiJetsCorrected"),
    saveTags = cms.bool(True),
    triggerType = cms.int32(86)
)


process.hltPFPuppiCentralJetsQuad30HT200MaxEta2p4 = cms.EDFilter("HLTHtMhtFilter",
    htLabels = cms.VInputTag("hltHtMhtPFPuppiCentralJetsQuadC30MaxEta2p4"),
    meffSlope = cms.vdouble(1.0),
    mhtLabels = cms.VInputTag("hltHtMhtPFPuppiCentralJetsQuadC30MaxEta2p4"),
    minHt = cms.vdouble(200.0),
    minMeff = cms.vdouble(0.0),
    minMht = cms.vdouble(0.0),
    saveTags = cms.bool(True)
)


process.hltPFPuppiCentralJetsQuad30HT330MaxEta2p4 = cms.EDFilter("HLTHtMhtFilter",
    htLabels = cms.VInputTag("hltHtMhtPFPuppiCentralJetsQuadC30MaxEta2p4"),
    meffSlope = cms.vdouble(1.0),
    mhtLabels = cms.VInputTag("hltHtMhtPFPuppiCentralJetsQuadC30MaxEta2p4"),
    minHt = cms.vdouble(330.0),
    minMeff = cms.vdouble(0.0),
    minMht = cms.vdouble(0.0),
    saveTags = cms.bool(True)
)


process.hltPFPuppiHT1070 = cms.EDFilter("HLTHtMhtFilter",
    htLabels = cms.VInputTag("hltPFPuppiHT"),
    meffSlope = cms.vdouble(1.0),
    mhtLabels = cms.VInputTag("hltPFPuppiHT"),
    minHt = cms.vdouble(1070.0),
    minMeff = cms.vdouble(0.0),
    minMht = cms.vdouble(0.0),
    saveTags = cms.bool(True)
)


process.hltPFPuppiJetForBtagSelectorEta2p4 = cms.EDFilter("HLT1PFJet",
    MaxEta = cms.double(2.4),
    MaxMass = cms.double(-1.0),
    MinE = cms.double(-1.0),
    MinEta = cms.double(-2.4),
    MinMass = cms.double(-1.0),
    MinN = cms.int32(1),
    MinPt = cms.double(30.0),
    inputTag = cms.InputTag("hltAK4PFPuppiJetsCorrected"),
    saveTags = cms.bool(True),
    triggerType = cms.int32(86)
)


process.hltPFPuppiMETTypeOne140 = cms.EDFilter("HLT1PFMET",
    MaxEta = cms.double(-1.0),
    MaxMass = cms.double(-1.0),
    MinE = cms.double(-1.0),
    MinEta = cms.double(-1.0),
    MinMass = cms.double(-1.0),
    MinN = cms.int32(1),
    MinPt = cms.double(140.0),
    inputTag = cms.InputTag("hltPFPuppiMETTypeOne"),
    saveTags = cms.bool(True),
    triggerType = cms.int32(87)
)


process.hltPFPuppiMHT140 = cms.EDFilter("HLTMhtFilter",
    mhtLabels = cms.VInputTag("hltPFPuppiMHT"),
    minMht = cms.vdouble(140.0),
    saveTags = cms.bool(True)
)


process.hltPhoton108EBTightIDTightIsoClusterShapeL1SeededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEG108EtL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0),
    thrOverEEE = cms.vdouble(0),
    thrRegularEB = cms.vdouble(0.01),
    thrRegularEE = cms.vdouble(0.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaClusterShapeL1Seeded","sigmaIEtaIEta5x5")
)


process.hltPhoton108EBTightIDTightIsoClusterShapeUnseededFilter = cms.EDFilter("HLTEgammaGenericFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.479),
    candTag = cms.InputTag("hltEG108EtUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag(""),
    saveTags = cms.bool(True),
    thrOverE2EB = cms.vdouble(0),
    thrOverE2EE = cms.vdouble(0),
    thrOverEEB = cms.vdouble(0),
    thrOverEEE = cms.vdouble(0),
    thrRegularEB = cms.vdouble(0.01),
    thrRegularEE = cms.vdouble(0.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaClusterShapeUnseeded","sigmaIEtaIEta5x5")
)


process.hltPhoton108EBTightIDTightIsoEcalIsoL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltPhoton108EBTightIDTightIsoHEL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.2, 0.2, 0.25, 0.3),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.02),
    thrOverEEB2 = cms.vdouble(0.02),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(2.5),
    thrRegularEB2 = cms.vdouble(2.5),
    thrRegularEE1 = cms.vdouble(0.0),
    thrRegularEE2 = cms.vdouble(0.0),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaEcalPFClusterIsoL1Seeded")
)


process.hltPhoton108EBTightIDTightIsoEcalIsoUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltPhoton108EBTightIDTightIsoHEUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.2, 0.2, 0.25, 0.3),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.02),
    thrOverEEB2 = cms.vdouble(0.02),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(2.5),
    thrRegularEB2 = cms.vdouble(2.5),
    thrRegularEE1 = cms.vdouble(0.0),
    thrRegularEE2 = cms.vdouble(0.0),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaEcalPFClusterIsoUnseeded")
)


process.hltPhoton108EBTightIDTightIsoHEL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltPhoton108EBTightIDTightIsoClusterShapeL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.1, 0.1, 0.3, 0.5),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.05),
    thrOverEEB2 = cms.vdouble(0.05),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(0.0),
    thrRegularEB2 = cms.vdouble(0.0),
    thrRegularEE1 = cms.vdouble(0.0),
    thrRegularEE2 = cms.vdouble(0.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaHoverEL1Seeded")
)


process.hltPhoton108EBTightIDTightIsoHEUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltPhoton108EBTightIDTightIsoClusterShapeUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.1, 0.1, 0.3, 0.5),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.05),
    thrOverEEB2 = cms.vdouble(0.05),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(0.0),
    thrRegularEB2 = cms.vdouble(0.0),
    thrRegularEE1 = cms.vdouble(0.0),
    thrRegularEE2 = cms.vdouble(0.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaHoverEUnseeded")
)


process.hltPhoton108EBTightIDTightIsoHcalIsoL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 0.8, 1.479, 2.0),
    candTag = cms.InputTag("hltPhoton108EBTightIDTightIsoEcalIsoL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.2, 0.2, 0.4, 0.5),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(0.8),
    etaBoundaryEE12 = cms.double(2.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.02),
    thrOverEEB2 = cms.vdouble(0.02),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(3.8),
    thrRegularEB2 = cms.vdouble(6.0),
    thrRegularEE1 = cms.vdouble(0),
    thrRegularEE2 = cms.vdouble(0),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaHcalPFClusterIsoL1Seeded")
)


process.hltPhoton108EBTightIDTightIsoHcalIsoUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 0.8, 1.479, 2.0),
    candTag = cms.InputTag("hltPhoton108EBTightIDTightIsoEcalIsoUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.2, 0.2, 0.4, 0.5),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(0.8),
    etaBoundaryEE12 = cms.double(2.0),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.02),
    thrOverEEB2 = cms.vdouble(0.02),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(3.8),
    thrRegularEB2 = cms.vdouble(6.0),
    thrRegularEE1 = cms.vdouble(0),
    thrRegularEE2 = cms.vdouble(0),
    useEt = cms.bool(True),
    varTag = cms.InputTag("hltEgammaHcalPFClusterIsoUnseeded")
)


process.hltPhoton187HEL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltPhoton187HgcalHEL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.1, 0.1, 0.3, 0.5),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.09),
    thrOverEEB2 = cms.vdouble(0.09),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(0.0),
    thrRegularEB2 = cms.vdouble(0.0),
    thrRegularEE1 = cms.vdouble(9999.0),
    thrRegularEE2 = cms.vdouble(9999.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaHoverEL1Seeded")
)


process.hltPhoton187HEUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltPhoton187HgcalHEUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.1, 0.1, 0.3, 0.5),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.09),
    thrOverEEB2 = cms.vdouble(0.09),
    thrOverEEE1 = cms.vdouble(0.0),
    thrOverEEE2 = cms.vdouble(0.0),
    thrRegularEB1 = cms.vdouble(0.0),
    thrRegularEB2 = cms.vdouble(0.0),
    thrRegularEE1 = cms.vdouble(9999.0),
    thrRegularEE2 = cms.vdouble(9999.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaHoverEUnseeded")
)


process.hltPhoton187HgcalHEL1SeededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltEG187EtL1SeededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesL1Seeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.055),
    thrOverEEE2 = cms.vdouble(0.055),
    thrRegularEB1 = cms.vdouble(9999.0),
    thrRegularEB2 = cms.vdouble(9999.0),
    thrRegularEE1 = cms.vdouble(0.0),
    thrRegularEE2 = cms.vdouble(0.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaHGCALIDVarsL1Seeded","hForHOverE")
)


process.hltPhoton187HgcalHEUnseededFilter = cms.EDFilter("HLTEgammaGenericQuadraticEtaFilter",
    absEtaLowEdges = cms.vdouble(0.0, 1.0, 1.479, 2.1),
    candTag = cms.InputTag("hltEG187EtUnseededFilter"),
    doRhoCorrection = cms.bool(False),
    effectiveAreas = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    energyLowEdges = cms.vdouble(0.0),
    etaBoundaryEB12 = cms.double(1.0),
    etaBoundaryEE12 = cms.double(2.1),
    l1EGCand = cms.InputTag("hltEgammaCandidatesUnseeded"),
    lessThan = cms.bool(True),
    ncandcut = cms.int32(1),
    rhoMax = cms.double(99999999.0),
    rhoScale = cms.double(1.0),
    rhoTag = cms.InputTag("hltFixedGridRhoFastjetAllCaloForEGamma"),
    saveTags = cms.bool(True),
    thrOverE2EB1 = cms.vdouble(0.0),
    thrOverE2EB2 = cms.vdouble(0.0),
    thrOverE2EE1 = cms.vdouble(0.0),
    thrOverE2EE2 = cms.vdouble(0.0),
    thrOverEEB1 = cms.vdouble(0.0),
    thrOverEEB2 = cms.vdouble(0.0),
    thrOverEEE1 = cms.vdouble(0.055),
    thrOverEEE2 = cms.vdouble(0.055),
    thrRegularEB1 = cms.vdouble(9999.0),
    thrRegularEB2 = cms.vdouble(9999.0),
    thrRegularEE1 = cms.vdouble(0.0),
    thrRegularEE2 = cms.vdouble(0.0),
    useEt = cms.bool(False),
    varTag = cms.InputTag("hltEgammaHGCALIDVarsUnseeded","hForHOverE")
)


process.hltPreDiphoton3023IsoCaloIdL1Seeded = cms.EDFilter("HLTPrescaler",
    L1GtReadoutRecordTag = cms.InputTag("hltGtStage2Digis"),
    offset = cms.uint32(0)
)


process.hltPreDiphoton3023IsoCaloIdUnseeded = cms.EDFilter("HLTPrescaler",
    L1GtReadoutRecordTag = cms.InputTag("hltGtStage2Digis"),
    offset = cms.uint32(0)
)


process.hltPreDoubleEle2312IsoL1Seeded = cms.EDFilter("HLTPrescaler",
    L1GtReadoutRecordTag = cms.InputTag("hltGtStage2Digis"),
    offset = cms.uint32(0)
)


process.hltPreDoubleEle25CaloIdLPMS2L1Seeded = cms.EDFilter("HLTPrescaler",
    L1GtReadoutRecordTag = cms.InputTag("hltGtStage2Digis"),
    offset = cms.uint32(0)
)


process.hltPreDoubleEle25CaloIdLPMS2Unseeded = cms.EDFilter("HLTPrescaler",
    L1GtReadoutRecordTag = cms.InputTag("hltGtStage2Digis"),
    offset = cms.uint32(0)
)


process.hltPreDoublePFTauHPS = cms.EDFilter("HLTPrescaler",
    L1GtReadoutRecordTag = cms.InputTag("hltGtStage2Digis"),
    offset = cms.uint32(0)
)


process.hltPreEle115NonIsoL1Seeded = cms.EDFilter("HLTPrescaler",
    L1GtReadoutRecordTag = cms.InputTag("hltGtStage2Digis"),
    offset = cms.uint32(0)
)


process.hltPreEle26WP70L1Seeded = cms.EDFilter("HLTPrescaler",
    L1GtReadoutRecordTag = cms.InputTag("hltGtStage2Digis"),
    offset = cms.uint32(0)
)


process.hltPreEle26WP70Unseeded = cms.EDFilter("HLTPrescaler",
    L1GtReadoutRecordTag = cms.InputTag("hltGtStage2Digis"),
    offset = cms.uint32(0)
)


process.hltPreEle32WPTightL1Seeded = cms.EDFilter("HLTPrescaler",
    L1GtReadoutRecordTag = cms.InputTag("hltGtStage2Digis"),
    offset = cms.uint32(0)
)


process.hltPreEle32WPTightUnseeded = cms.EDFilter("HLTPrescaler",
    L1GtReadoutRecordTag = cms.InputTag("hltGtStage2Digis"),
    offset = cms.uint32(0)
)


process.hltPreEle5OpenL1Seeded = cms.EDFilter("HLTPrescaler",
    L1GtReadoutRecordTag = cms.InputTag("hltGtStage2Digis"),
    offset = cms.uint32(0)
)


process.hltPreEle5OpenUnseeded = cms.EDFilter("HLTPrescaler",
    L1GtReadoutRecordTag = cms.InputTag("hltGtStage2Digis"),
    offset = cms.uint32(0)
)


process.hltPreHLTAnalyzerEndpath = cms.EDFilter("HLTPrescaler",
    L1GtReadoutRecordTag = cms.InputTag("hltGtStage2Digis"),
    offset = cms.uint32(0)
)


process.hltPrePhoton108EBTightIDTightIsoL1Seeded = cms.EDFilter("HLTPrescaler",
    L1GtReadoutRecordTag = cms.InputTag("hltGtStage2Digis"),
    offset = cms.uint32(0)
)


process.hltPrePhoton108EBTightIDTightIsoUnseeded = cms.EDFilter("HLTPrescaler",
    L1GtReadoutRecordTag = cms.InputTag("hltGtStage2Digis"),
    offset = cms.uint32(0)
)


process.hltPrePhoton187L1Seeded = cms.EDFilter("HLTPrescaler",
    L1GtReadoutRecordTag = cms.InputTag("hltGtStage2Digis"),
    offset = cms.uint32(0)
)


process.hltPrePhoton187Unseeded = cms.EDFilter("HLTPrescaler",
    L1GtReadoutRecordTag = cms.InputTag("hltGtStage2Digis"),
    offset = cms.uint32(0)
)


process.hltSingleAK4PFPuppiJet520 = cms.EDFilter("HLT1PFJet",
    MaxEta = cms.double(5.0),
    MaxMass = cms.double(-1.0),
    MinE = cms.double(-1.0),
    MinEta = cms.double(-1.0),
    MinMass = cms.double(-1.0),
    MinN = cms.int32(1),
    MinPt = cms.double(520.0),
    inputTag = cms.InputTag("hltAK4PFPuppiJetsCorrected"),
    saveTags = cms.bool(True),
    triggerType = cms.int32(85)
)


process.hltSingleTkMuon22L1TkMuonFilter = cms.EDFilter("PathStatusFilter",
    logicalExpression = cms.string('pSingleTkMuon22')
)


process.hltTriggerType = cms.EDFilter("HLTTriggerTypeFilter",
    SelectedTriggerType = cms.int32(1)
)


process.hltTripleMuon3DR0 = cms.EDFilter("HLT2L1P2GTCandL1P2GTCandDZ",
    MaxDZ = cms.double(-1),
    MinDR = cms.double(0),
    MinN = cms.int32(3),
    l1GTAlgoBlockTag = cms.InputTag("l1tGTAlgoBlockProducer"),
    l1GTAlgoName1 = cms.string('pTripleTkMuon5_3_3'),
    l1GTAlgoName2 = cms.string('pTripleTkMuon5_3_3'),
    originTag1 = cms.VInputTag(cms.InputTag("l1tGTProducer","GMTTkMuons")),
    originTag2 = cms.VInputTag(cms.InputTag("l1tGTProducer","GMTTkMuons")),
    saveTags = cms.bool(True),
    triggerType1 = cms.int32(-114),
    triggerType2 = cms.int32(-114)
)


process.hltTripleMuon3DZ1p0 = cms.EDFilter("HLT2L1P2GTCandL1P2GTCandDZ",
    MaxDZ = cms.double(1.0),
    MinDR = cms.double(-1),
    MinN = cms.int32(3),
    l1GTAlgoBlockTag = cms.InputTag("l1tGTAlgoBlockProducer"),
    l1GTAlgoName1 = cms.string('pTripleTkMuon5_3_3'),
    l1GTAlgoName2 = cms.string('pTripleTkMuon5_3_3'),
    originTag1 = cms.VInputTag(cms.InputTag("l1tGTProducer","GMTTkMuons")),
    originTag2 = cms.VInputTag(cms.InputTag("l1tGTProducer","GMTTkMuons")),
    saveTags = cms.bool(True),
    triggerType1 = cms.int32(-114),
    triggerType2 = cms.int32(-114)
)


process.l1t1PFPuppiJet70offMaxEta2p4 = cms.EDFilter("L1TJetFilter",
    MaxEta = cms.double(2.4),
    MinEta = cms.double(-2.4),
    MinN = cms.int32(1),
    MinPt = cms.double(70.0),
    Scalings = cms.PSet(
        barrel = cms.vdouble(11.1254, 1.40627, 0),
        endcap = cms.vdouble(42.4039, 1.33052, 0),
        overlap = cms.vdouble(24.8375, 1.4152, 0)
    ),
    inputTag = cms.InputTag("l1tPhase1JetCalibrator9x9trimmed","Phase1L1TJetFromPfCandidates")
)


process.l1t2PFPuppiJet55offMaxEta2p4 = cms.EDFilter("L1TJetFilter",
    MaxEta = cms.double(2.4),
    MinEta = cms.double(-2.4),
    MinN = cms.int32(2),
    MinPt = cms.double(55.0),
    Scalings = cms.PSet(
        barrel = cms.vdouble(11.1254, 1.40627, 0),
        endcap = cms.vdouble(42.4039, 1.33052, 0),
        overlap = cms.vdouble(24.8375, 1.4152, 0)
    ),
    inputTag = cms.InputTag("l1tPhase1JetCalibrator9x9trimmed","Phase1L1TJetFromPfCandidates")
)


process.l1t4PFPuppiJet25OnlineMaxEta2p4 = cms.EDFilter("L1TJetFilter",
    MaxEta = cms.double(2.4),
    MinEta = cms.double(-2.4),
    MinN = cms.int32(4),
    MinPt = cms.double(25.0),
    inputTag = cms.InputTag("l1tPhase1JetCalibrator9x9trimmed","Phase1L1TJetFromPfCandidates")
)


process.l1t4PFPuppiJet40offMaxEta2p4 = cms.EDFilter("L1TJetFilter",
    MaxEta = cms.double(2.4),
    MinEta = cms.double(-2.4),
    MinN = cms.int32(4),
    MinPt = cms.double(40.0),
    Scalings = cms.PSet(
        barrel = cms.vdouble(11.1254, 1.40627, 0),
        endcap = cms.vdouble(42.4039, 1.33052, 0),
        overlap = cms.vdouble(24.8375, 1.4152, 0)
    ),
    inputTag = cms.InputTag("l1tPhase1JetCalibrator9x9trimmed","Phase1L1TJetFromPfCandidates")
)


process.l1tDoublePFPuppiJet112offMaxEta2p4 = cms.EDFilter("L1TJetFilter",
    MaxEta = cms.double(2.4),
    MinEta = cms.double(-2.4),
    MinN = cms.int32(2),
    MinPt = cms.double(112.0),
    Scalings = cms.PSet(
        barrel = cms.vdouble(11.1254, 1.40627, 0),
        endcap = cms.vdouble(42.4039, 1.33052, 0),
        overlap = cms.vdouble(24.8375, 1.4152, 0)
    ),
    inputTag = cms.InputTag("l1tPhase1JetCalibrator9x9trimmed","Phase1L1TJetFromPfCandidates"),
    saveTags = cms.bool(True)
)


process.l1tDoublePFPuppiJets112offMaxDeta1p6 = cms.EDFilter("HLT2CaloJetCaloJet",
    MaxDelR = cms.double(1000.0),
    MaxDeta = cms.double(1.6),
    MaxDphi = cms.double(10000000.0),
    MaxMinv = cms.double(10000000.0),
    MaxPt = cms.double(10000000.0),
    MinDelR = cms.double(0.0),
    MinDeta = cms.double(-1000.0),
    MinDphi = cms.double(0.0),
    MinMinv = cms.double(0.0),
    MinN = cms.int32(1),
    MinPt = cms.double(0.0),
    inputTag1 = cms.InputTag("l1tDoublePFPuppiJet112offMaxEta2p4"),
    inputTag2 = cms.InputTag("l1tDoublePFPuppiJet112offMaxEta2p4"),
    originTag1 = cms.VInputTag(cms.InputTag("l1tPhase1JetCalibrator9x9trimmed","Phase1L1TJetFromPfCandidates")),
    originTag2 = cms.VInputTag(cms.InputTag("l1tPhase1JetCalibrator9x9trimmed","Phase1L1TJetFromPfCandidates")),
    saveTags = cms.bool(True),
    triggerType1 = cms.int32(-116),
    triggerType2 = cms.int32(-116)
)


process.l1tGTDoubleObjectCond = cms.EDFilter("L1GTDoubleObjectCond",
    cos_phi_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            487, 487, 487, 487, 487,
            487, 487, 487, 487, 487,
            487, 486, 486, 486, 486,
            486, 486, 486, 485, 485,
            485, 485, 485, 485, 484,
            484, 484, 484, 484, 483,
            483, 483, 483, 483, 482,
            482, 482, 482, 481, 481,
            481, 481, 480, 480, 480,
            480, 479, 479, 479, 478,
            478, 478, 478, 477, 477,
            477, 476, 476, 476, 475,
            475, 475, 474, 474, 474,
            473, 473, 472, 472, 472,
            471, 471, 471, 470, 470,
            469, 469, 468, 468, 468,
            467, 467, 466, 466, 465,
            465, 465, 464, 464, 463,
            463, 462, 462, 461, 461,
            460, 460, 459, 459, 458,
            458, 457, 457, 456, 456,
            455, 454, 454, 453, 453,
            452, 452, 451, 451, 450,
            449, 449, 448, 448, 447,
            446, 446, 445, 445, 444,
            443, 443, 442, 441, 441,
            440, 440, 439, 438, 438,
            437, 436, 436, 435, 434,
            434, 433, 432, 431, 431,
            430, 429, 429, 428, 427,
            426, 426, 425, 424, 423,
            423, 422, 421, 420, 420,
            419, 418, 417, 417, 416,
            415, 414, 413, 413, 412,
            411, 410, 409, 409, 408,
            407, 406, 405, 405, 404,
            403, 402, 401, 400, 399,
            399, 398, 397, 396, 395,
            394, 393, 392, 392, 391,
            390, 389, 388, 387, 386,
            385, 384, 383, 382, 381,
            381, 380, 379, 378, 377,
            376, 375, 374, 373, 372,
            371, 370, 369, 368, 367,
            366, 365, 364, 363, 362,
            361, 360, 359, 358, 357,
            356, 355, 354, 353, 352,
            351, 350, 349, 348, 347,
            346, 345, 343, 342, 341,
            340, 339, 338, 337, 336,
            335, 334, 333, 332, 330,
            329, 328, 327, 326, 325,
            324, 323, 322, 320, 319,
            318, 317, 316, 315, 314,
            312, 311, 310, 309, 308,
            307, 306, 304, 303, 302,
            301, 300, 298, 297, 296,
            295, 294, 293, 291, 290,
            289, 288, 286, 285, 284,
            283, 282, 280, 279, 278,
            277, 275, 274, 273, 272,
            270, 269, 268, 267, 265,
            264, 263, 262, 260, 259,
            258, 257, 255, 254, 253,
            252, 250, 249, 248, 246,
            245, 244, 242, 241, 240,
            239, 237, 236, 235, 233,
            232, 231, 229, 228, 227,
            225, 224, 223, 221, 220,
            219, 217, 216, 215, 213,
            212, 211, 209, 208, 207,
            205, 204, 203, 201, 200,
            198, 197, 196, 194, 193,
            192, 190, 189, 187, 186,
            185, 183, 182, 181, 179,
            178, 176, 175, 174, 172,
            171, 169, 168, 167, 165,
            164, 162, 161, 159, 158,
            157, 155, 154, 152, 151,
            150, 148, 147, 145, 144,
            142, 141, 140, 138, 137,
            135, 134, 132, 131, 129,
            128, 127, 125, 124, 122,
            121, 119, 118, 116, 115,
            113, 112, 111, 109, 108,
            106, 105, 103, 102, 100,
            99, 97, 96, 94, 93,
            92, 90, 89, 87, 86,
            84, 83, 81, 80, 78,
            77, 75, 74, 72, 71,
            69, 68, 66, 65, 63,
            62, 60, 59, 58, 56,
            55, 53, 52, 50, 49,
            47, 46, 44, 43, 41,
            40, 38, 37, 35, 34,
            32, 31, 29, 28, 26,
            25, 23, 22, 20, 19,
            17, 16, 14, 13, 11,
            10, 8, 7, 5, 4,
            2, 1, -1, -2, -4,
            -5, -7, -8, -10, -11,
            -13, -14, -16, -17, -19,
            -20, -22, -23, -25, -26,
            -28, -29, -31, -32, -34,
            -35, -37, -38, -40, -41,
            -43, -44, -46, -47, -49,
            -50, -52, -53, -55, -56,
            -58, -59, -60, -62, -63,
            -65, -66, -68, -69, -71,
            -72, -74, -75, -77, -78,
            -80, -81, -83, -84, -86,
            -87, -89, -90, -92, -93,
            -94, -96, -97, -99, -100,
            -102, -103, -105, -106, -108,
            -109, -111, -112, -113, -115,
            -116, -118, -119, -121, -122,
            -124, -125, -127, -128, -129,
            -131, -132, -134, -135, -137,
            -138, -140, -141, -142, -144,
            -145, -147, -148, -150, -151,
            -152, -154, -155, -157, -158,
            -159, -161, -162, -164, -165,
            -167, -168, -169, -171, -172,
            -174, -175, -176, -178, -179,
            -181, -182, -183, -185, -186,
            -187, -189, -190, -192, -193,
            -194, -196, -197, -198, -200,
            -201, -203, -204, -205, -207,
            -208, -209, -211, -212, -213,
            -215, -216, -217, -219, -220,
            -221, -223, -224, -225, -227,
            -228, -229, -231, -232, -233,
            -235, -236, -237, -239, -240,
            -241, -242, -244, -245, -246,
            -248, -249, -250, -252, -253,
            -254, -255, -257, -258, -259,
            -260, -262, -263, -264, -265,
            -267, -268, -269, -270, -272,
            -273, -274, -275, -277, -278,
            -279, -280, -282, -283, -284,
            -285, -286, -288, -289, -290,
            -291, -293, -294, -295, -296,
            -297, -298, -300, -301, -302,
            -303, -304, -306, -307, -308,
            -309, -310, -311, -312, -314,
            -315, -316, -317, -318, -319,
            -320, -322, -323, -324, -325,
            -326, -327, -328, -329, -330,
            -332, -333, -334, -335, -336,
            -337, -338, -339, -340, -341,
            -342, -343, -345, -346, -347,
            -348, -349, -350, -351, -352,
            -353, -354, -355, -356, -357,
            -358, -359, -360, -361, -362,
            -363, -364, -365, -366, -367,
            -368, -369, -370, -371, -372,
            -373, -374, -375, -376, -377,
            -378, -379, -380, -381, -381,
            -382, -383, -384, -385, -386,
            -387, -388, -389, -390, -391,
            -392, -392, -393, -394, -395,
            -396, -397, -398, -399, -399,
            -400, -401, -402, -403, -404,
            -405, -405, -406, -407, -408,
            -409, -409, -410, -411, -412,
            -413, -413, -414, -415, -416,
            -417, -417, -418, -419, -420,
            -420, -421, -422, -423, -423,
            -424, -425, -426, -426, -427,
            -428, -429, -429, -430, -431,
            -431, -432, -433, -434, -434,
            -435, -436, -436, -437, -438,
            -438, -439, -440, -440, -441,
            -441, -442, -443, -443, -444,
            -445, -445, -446, -446, -447,
            -448, -448, -449, -449, -450,
            -451, -451, -452, -452, -453,
            -453, -454, -454, -455, -456,
            -456, -457, -457, -458, -458,
            -459, -459, -460, -460, -461,
            -461, -462, -462, -463, -463,
            -464, -464, -465, -465, -465,
            -466, -466, -467, -467, -468,
            -468, -468, -469, -469, -470,
            -470, -471, -471, -471, -472,
            -472, -472, -473, -473, -474,
            -474, -474, -475, -475, -475,
            -476, -476, -476, -477, -477,
            -477, -478, -478, -478, -478,
            -479, -479, -479, -480, -480,
            -480, -480, -481, -481, -481,
            -481, -482, -482, -482, -482,
            -483, -483, -483, -483, -483,
            -484, -484, -484, -484, -484,
            -485, -485, -485, -485, -485,
            -485, -486, -486, -486, -486,
            -486, -486, -486, -487, -487,
            -487, -487, -487, -487, -487,
            -487, -487, -487, -487, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488
         ) ),
        max_error = cms.double(0.0025338281044886835),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            489, 489, 489, 489, 489,
            489, 489, 489, 489, 489,
            489, 490, 490, 490, 490,
            490, 490, 490, 491, 491,
            491, 491, 491, 491, 492,
            492, 492, 492, 492, 493,
            493, 493, 493, 493, 494,
            494, 494, 494, 495, 495,
            495, 495, 496, 496, 496,
            496, 497, 497, 497, 498,
            498, 498, 499, 499, 499,
            499, 500, 500, 500, 501,
            501, 502, 502, 502, 503,
            503, 503, 504, 504, 504,
            505, 505, 506, 506, 507,
            507, 507, 508, 508, 509,
            509, 510, 510, 510, 511,
            511, 512, 512, 513, 513,
            514, 514, 515, 515, 516,
            516, 517, 517, 518, 518,
            519, 520, 520, 521, 521,
            522, 522, 523, 523, 524,
            525, 525, 526, 526, 527,
            528, 528, 529, 530, 530,
            531, 531, 532, 533, 533,
            534, 535, 535, 536, 537,
            537, 538, 539, 540, 540,
            541, 542, 542, 543, 544,
            545, 545, 546, 547, 548,
            548, 549, 550, 551, 551,
            552, 553, 554, 555, 555,
            556, 557, 558, 559, 560,
            560, 561, 562, 563, 564,
            565, 566, 567, 567, 568,
            569, 570, 571, 572, 573,
            574, 575, 576, 577, 577,
            578, 579, 580, 581, 582,
            583, 584, 585, 586, 587,
            588, 589, 590, 591, 592,
            593, 594, 595, 596, 598,
            599, 600, 601, 602, 603,
            604, 605, 606, 607, 608,
            610, 611, 612, 613, 614,
            615, 616, 618, 619, 620,
            621, 622, 623, 625, 626,
            627, 628, 629, 631, 632,
            633, 634, 636, 637, 638,
            639, 641, 642, 643, 644,
            646, 647, 648, 650, 651,
            652, 654, 655, 656, 658,
            659, 660, 662, 663, 665,
            666, 667, 669, 670, 672,
            673, 674, 676, 677, 679,
            680, 682, 683, 685, 686,
            687, 689, 690, 692, 693,
            695, 697, 698, 700, 701,
            703, 704, 706, 707, 709,
            710, 712, 714, 715, 717,
            719, 720, 722, 723, 725,
            727, 728, 730, 732, 733,
            735, 737, 738, 740, 742,
            744, 745, 747, 749, 750,
            752, 754, 756, 758, 759,
            761, 763, 765, 767, 768,
            770, 772, 774, 776, 778,
            779, 781, 783, 785, 787,
            789, 791, 793, 795, 796,
            798, 800, 802, 804, 806,
            808, 810, 812, 814, 816,
            818, 820, 822, 824, 826,
            828, 830, 832, 835, 837,
            839, 841, 843, 845, 847,
            849, 851, 854, 856, 858,
            860, 862, 864, 867, 869,
            871, 873, 875, 878, 880,
            882, 884, 887, 889, 891,
            894, 896, 898, 900, 903,
            905, 907, 910, 912, 915,
            917, 919, 922, 924, 927,
            929, 931, 934, 936, 939,
            941, 944, 946, 949, 951,
            954, 956, 959, 961, 964,
            966, 969, 971, 974, 977,
            979, 982, 984, 987, 990,
            992, 995, 998, 1000, 1003,
            1006, 1008, 1011, 1014, 1017,
            1019, 1022, 1025, 1028, 1030,
            1033, 1036, 1039, 1042, 1044,
            1047, 1050, 1053, 1056, 1059,
            1062, 1065, 1067, 1070, 1073,
            1076, 1079, 1082, 1085, 1088,
            1091, 1094, 1097, 1100, 1103,
            1106, 1109, 1112, 1115, 1118,
            1122, 1125, 1128, 1131, 1134,
            1137, 1140, 1143, 1147, 1150,
            1153, 1156, 1159, 1163, 1166,
            1169, 1172, 1176, 1179, 1182,
            1186, 1189, 1192, 1196, 1199,
            1202, 1206, 1209, 1212, 1216,
            1219, 1223, 1226, 1230, 1233,
            1237, 1240, 1244, 1247, 1251,
            1254, 1258, 1261, 1265, 1268,
            1272, 1276, 1279, 1283, 1287,
            1290, 1294, 1298, 1301, 1305,
            1309, 1312, 1316, 1320, 1324,
            1327, 1331, 1335, 1339, 1343,
            1347, 1350, 1354, 1358, 1362,
            1366, 1370, 1374, 1378, 1382,
            1386, 1390, 1394, 1398, 1402,
            1406, 1410, 1414, 1418, 1422,
            1426, 1430, 1434, 1439, 1443,
            1447, 1451, 1455, 1459, 1464,
            1468, 1472, 1476, 1481, 1485,
            1489, 1494, 1498, 1502, 1507,
            1511, 1516, 1520, 1524, 1529,
            1533, 1538, 1542, 1547, 1551,
            1556, 1560, 1565, 1569, 1574,
            1579, 1583, 1588, 1592, 1597,
            1602, 1606, 1611, 1616, 1621,
            1625, 1630, 1635, 1640, 1645,
            1649, 1654, 1659, 1664, 1669,
            1674, 1679, 1684, 1689, 1693,
            1698, 1703, 1708, 1714, 1719,
            1724, 1729, 1734, 1739, 1744,
            1749, 1754, 1760, 1765, 1770,
            1775, 1780, 1786, 1791, 1796,
            1802, 1807, 1812, 1818, 1823,
            1828, 1834, 1839, 1845, 1850,
            1856, 1861, 1867, 1872, 1878,
            1883, 1889, 1894, 1900, 1906,
            1911, 1917, 1923, 1929, 1934,
            1940, 1946, 1952, 1957, 1963,
            1969, 1975, 1981, 1987, 1993,
            1999, 2004, 2010, 2016, 2022,
            2028, 2035, 2041, 2047, 2053,
            2059, 2065, 2071, 2077, 2084,
            2090, 2096, 2102, 2109, 2115,
            2121, 2128, 2134, 2140, 2147,
            2153, 2160, 2166, 2173, 2179,
            2186, 2192, 2199, 2205, 2212,
            2219, 2225, 2232, 2239, 2245,
            2252, 2259, 2266, 2272, 2279,
            2286, 2293, 2300, 2307, 2314,
            2321, 2328, 2335, 2342, 2349,
            2356, 2363, 2370, 2377, 2384,
            2391, 2398, 2406, 2413, 2420,
            2427, 2435, 2442, 2449, 2457,
            2464, 2472, 2479, 2487, 2494,
            2502, 2509, 2517, 2524, 2532,
            2539, 2547, 2555, 2563, 2570,
            2578, 2586, 2594, 2601, 2609,
            2617, 2625, 2633, 2641, 2649,
            2657, 2665, 2673, 2681, 2689,
            2697, 2705, 2714, 2722, 2730,
            2738, 2747, 2755, 2763, 2772,
            2780, 2788, 2797, 2805, 2814,
            2822, 2831, 2839, 2848, 2857,
            2865, 2874, 2883, 2891, 2900,
            2909, 2918, 2927, 2935, 2944,
            2953, 2962, 2971, 2980, 2989,
            2998, 3007, 3016, 3026, 3035,
            3044, 3053, 3062, 3072, 3081,
            3090, 3100, 3109, 3119, 3128,
            3138, 3147, 3157, 3166, 3176,
            3186, 3195, 3205, 3215, 3224,
            3234, 3244, 3254, 3264, 3274,
            3284, 3294, 3304, 3314, 3324,
            3334, 3344, 3354, 3364, 3375,
            3385, 3395, 3405, 3416, 3426,
            3437, 3447, 3458, 3468, 3479,
            3489, 3500, 3510, 3521, 3532,
            3543, 3553, 3564, 3575, 3586,
            3597, 3608, 3619, 3630, 3641,
            3652, 3663, 3674, 3685, 3697,
            3708, 3719, 3730, 3742, 3753,
            3765, 3776, 3788, 3799, 3811,
            3822, 3834, 3846, 3857, 3869,
            3881, 3893, 3905, 3917, 3929,
            3941, 3953, 3965, 3977, 3989,
            4001, 4013, 4025, 4038, 4050,
            4062, 4075, 4087, 4100, 4112,
            4125, 4137, 4150, 4163, 4175,
            4188, 4201, 4214, 4226, 4239,
            4252, 4265, 4278, 4291, 4304,
            4318, 4331, 4344, 4357, 4371,
            4384, 4397, 4411, 4424, 4438,
            4451, 4465, 4479, 4492, 4506,
            4520, 4533, 4547, 4561, 4575,
            4589, 4603, 4617, 4631, 4645,
            4660, 4674, 4688, 4703, 4717,
            4731, 4746, 4760, 4775, 4789,
            4804, 4819, 4833, 4848, 4863,
            4878, 4893, 4908, 4923, 4938,
            4953, 4968, 4983, 4999, 5014,
            5029, 5045, 5060, 5075, 5091,
            5107, 5122, 5138, 5154, 5169,
            5185, 5201, 5217, 5233, 5249,
            5265, 5281, 5297, 5313, 5330,
            5346, 5362, 5379, 5395, 5412,
            5428, 5445, 5462, 5478, 5495,
            5512, 5529, 5546, 5563, 5580,
            5597, 5614, 5631, 5648, 5666,
            5683, 5700, 5718, 5735, 5753,
            5770, 5788, 5806, 5824, 5841,
            5859, 5877, 5895, 5913, 5931,
            5950, 5968, 5986, 6004, 6023,
            6041, 6060, 6078, 6097, 6116,
            6134, 6153, 6172, 6191, 6210,
            6229, 6248, 6267, 6286, 6305,
            6325, 6344, 6364, 6383, 6403,
            6422, 6442, 6462, 6481, 6501,
            6521, 6541, 6561, 6581, 6602,
            6622, 6642, 6662, 6683, 6703,
            6724, 6744, 6765, 6786, 6807,
            6828, 6848, 6869, 6891, 6912,
            6933, 6954, 6975, 6997, 7018,
            7040, 7061, 7083, 7105, 7126,
            7148, 7170, 7192, 7214, 7236,
            7259, 7281, 7303, 7325, 7348,
            7370, 7393, 7416, 7438, 7461,
            7484, 7507, 7530, 7553, 7576,
            7600, 7623, 7646, 7670, 7693,
            7717, 7741, 7764, 7788, 7812,
            7836, 7860, 7884, 7908, 7932,
            7957, 7981, 8006, 8030, 8055,
            8080, 8104, 8129, 8154, 8179,
            8204, 8229, 8255, 8280, 8305,
            8331, 8356, 8382, 8408, 8434,
            8459, 8485, 8511, 8537, 8564,
            8590, 8616, 8643, 8669, 8696,
            8722, 8749, 8776, 8803, 8830,
            8857, 8884, 8912, 8939, 8966,
            8994, 9021, 9049, 9077, 9105,
            9133, 9161, 9189, 9217, 9245,
            9274, 9302, 9331, 9359, 9388,
            9417, 9446, 9475, 9504, 9533,
            9562, 9591, 9621, 9650, 9680,
            9710, 9740, 9769, 9799, 9830,
            9860, 9890, 9920, 9951, 9981,
            10012, 10043, 10073, 10104, 10135,
            10166, 10198, 10229, 10260, 10292,
            10323, 10355, 10387, 10419, 10451,
            10483, 10515, 10547, 10580, 10612,
            10645, 10677, 10710, 10743, 10776,
            10809, 10842, 10876, 10909, 10942,
            10976, 11010, 11044, 11077, 11111,
            11146, 11180, 11214, 11248, 11283,
            11318, 11352, 11387, 11422, 11457,
            11492, 11528, 11563, 11599, 11634,
            11670, 11706, 11742, 11778, 11814,
            11850, 11887, 11923, 11960, 11996,
            12033, 12070, 12107, 12144, 12182,
            12219, 12257, 12294, 12332, 12370,
            12408, 12446, 12484, 12522, 12561,
            12599, 12638, 12677, 12716, 12755,
            12794, 12833, 12873, 12912, 12952,
            12992, 13032, 13072, 13112, 13152,
            13192, 13233, 13274, 13314, 13355,
            13396, 13437, 13479, 13520, 13561,
            13603, 13645, 13687, 13729, 13771,
            13813, 13856, 13898, 13941, 13984,
            14027, 14070, 14113, 14156, 14200,
            14243, 14287, 14331, 14375, 14419,
            14463, 14508, 14552, 14597, 14642,
            14687, 14732, 14777, 14823, 14868,
            14914, 14960, 15005, 15052, 15098,
            15144, 15191, 15237, 15284, 15331,
            15378, 15425, 15473, 15520, 15568,
            15616, 15664, 15712, 15760, 15808,
            15857, 15906, 15955, 16004, 16053,
            16102, 16151, 16201, 16251, 16301,
            16351, 16401, 16451, 16502, 16553,
            16603, 16654, 16706, 16757, 16808,
            16860, 16912, 16964, 17016, 17068,
            17121, 17173, 17226, 17279, 17332,
            17385, 17438, 17492, 17546, 17600,
            17654, 17708, 17762, 17817, 17872,
            17926, 17982, 18037, 18092, 18148,
            18203, 18259, 18315, 18372, 18428,
            18485, 18542, 18598, 18656, 18713,
            18770, 18828, 18886, 18944, 19002,
            19060, 19119, 19178, 19237, 19296,
            19355, 19414, 19474, 19534, 19594,
            19654, 19714, 19775, 19836, 19897,
            19958, 20019, 20081, 20142, 20204,
            20266, 20328, 20391, 20454, 20516,
            20579, 20643, 20706, 20770, 20833,
            20897, 20962, 21026, 21091, 21155,
            21220, 21286, 21351, 21417, 21482,
            21548, 21615, 21681, 21748, 21814,
            21881, 21949, 22016, 22084, 22151,
            22220, 22288, 22356, 22425, 22494,
            22563, 22632, 22702, 22771, 22841,
            22912, 22982, 23053, 23123, 23194,
            23266, 23337, 23409, 23481, 23553,
            23625, 23698, 23771, 23844, 23917,
            23990, 24064, 24138, 24212, 24287,
            24361, 24436, 24511, 24586, 24662,
            24738, 24814, 24890, 24966, 25043,
            25120, 25197, 25275, 25352, 25430,
            25508, 25587, 25665, 25744, 25823,
            25902, 25982, 26062, 26142, 26222,
            26303, 26384, 26465, 26546, 26627,
            26709, 26791, 26874, 26956, 27039,
            27122, 27205, 27289, 27373, 27457,
            27541, 27626, 27711, 27796, 27881,
            27967, 28053, 28139, 28226, 28312,
            28399, 28486, 28574, 28662, 28750,
            28838, 28927, 29016, 29105, 29194,
            29284, 29374, 29464, 29555, 29645,
            29736, 29828, 29919, 30011, 30104,
            30196, 30289, 30382, 30475, 30569,
            30663, 30757, 30851, 30946, 31041,
            31137, 31232, 31328, 31425, 31521,
            31618, 31715, 31813, 31910, 32008,
            32107, 32205, 32304, 32403, 32503,
            32603, 32703, 32804, 32904, 33005,
            33107, 33209, 33311, 33413, 33516,
            33619, 33722, 33825, 33929, 34034,
            34138, 34243, 34348, 34454, 34560,
            34666, 34772, 34879, 34986, 35094,
            35202, 35310, 35418, 35527, 35636,
            35746, 35856, 35966, 36076, 36187,
            36298, 36410, 36522, 36634, 36746,
            36859, 36973, 37086, 37200, 37314,
            37429, 37544, 37659, 37775, 37891,
            38008, 38124, 38241, 38359, 38477,
            38595, 38714, 38833, 38952, 39072,
            39192, 39312, 39433, 39554, 39675,
            39797, 39920, 40042, 40165, 40289,
            40413, 40537, 40661, 40786, 40911,
            41037, 41163, 41290, 41417, 41544,
            41671, 41800, 41928, 42057, 42186,
            42316, 42446, 42576, 42707, 42838,
            42970, 43102, 43234, 43367, 43500,
            43634, 43768, 43902, 44037, 44173,
            44308, 44444, 44581, 44718, 44855,
            44993, 45131, 45270, 45409, 45549,
            45689, 45829, 45970, 46111, 46253,
            46395, 46537, 46680, 46824, 46968,
            47112, 47257, 47402, 47548, 47694,
            47840, 47987, 48135, 48283, 48431,
            48580, 48729, 48879, 49029, 49180,
            49331, 49482, 49634, 49787, 49940,
            50093, 50247, 50401, 50556, 50712,
            50867, 51024, 51181, 51338, 51495,
            51654, 51812, 51972, 52131, 52291,
            52452, 52613, 52775, 52937, 53100,
            53263, 53427, 53591, 53755, 53921,
            54086, 54252, 54419, 54586, 54754,
            54922, 55091, 55260, 55430, 55600,
            55771, 55943, 56114, 56287, 56460,
            56633, 56807, 56982, 57157, 57333,
            57509, 57685, 57863, 58040, 58219,
            58398, 58577, 58757, 58938, 59119,
            59300, 59483, 59665, 59849, 60033,
            60217, 60402, 60588, 60774, 60960,
            61148, 61336, 61524, 61713, 61903,
            62093, 62284, 62475, 62667, 62860,
            63053, 63247, 63441, 63636, 63831,
            64027, 64224, 64422, 64619, 64818,
            65017, 65217, 65417, 65618, 65820,
            66022, 66225, 66429, 66633, 66837,
            67043, 67249, 67455, 67663, 67870,
            68079, 68288, 68498, 68708, 68920,
            69131, 69344, 69557, 69771, 69985,
            70200, 70416, 70632, 70849, 71067,
            71285, 71504, 71724, 71944, 72165,
            72387, 72609, 72833, 73056, 73281,
            73506, 73732, 73958, 74186, 74414,
            74642, 74872, 75102, 75332, 75564,
            75796, 76029, 76262, 76497, 76732,
            76968, 77204, 77441, 77679, 77918,
            78157, 78398, 78638, 78880, 79122,
            79366, 79609, 79854, 80099, 80345,
            80592, 80840, 81088, 81338, 81587,
            81838, 82090, 82342, 82595, 82849,
            83103, 83358, 83615, 83872, 84129,
            84388, 84647, 84907, 85168, 85430,
            85692, 85955, 86220, 86485, 86750,
            87017, 87284, 87552, 87821, 88091,
            88362, 88633, 88906, 89179, 89453,
            89728, 90003, 90280, 90557, 90836,
            91115, 91395, 91676, 91957, 92240,
            92523, 92807, 93093, 93379, 93666,
            93953, 94242, 94532, 94822, 95113,
            95406, 95699, 95993, 96288, 96584,
            96881, 97178, 97477, 97776, 98077,
            98378, 98680, 98984, 99288, 99593,
            99899, 100206, 100514, 100822, 101132,
            101443, 101755, 102067, 102381, 102696,
            103011, 103328, 103645, 103964, 104283,
            104603, 104925, 105247, 105571, 105895,
            106220, 106547, 106874, 107203, 107532,
            107862, 108194, 108526, 108860, 109194,
            109530, 109866, 110204, 110542, 110882,
            111223, 111565, 111907, 112251, 112596,
            112942, 113289, 113637, 113986, 114337,
            114688, 115040, 115394, 115748, 116104,
            116461, 116819, 117178, 117538, 117899,
            118261, 118624, 118989, 119354, 119721,
            120089, 120458, 120828, 121199, 121572,
            121945, 122320, 122696, 123073, 123451,
            123830, 124211, 124593, 124975, 125359,
            125745, 126131, 126518, 126907, 127297,
            127688, 128081, 128474, 128869, 129265,
            129662, 130061, 130260
         ) ),
        max_error = cms.double(0.6152529479288091),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut2 = cms.PSet(
        lut = cms.vint32( (
            256, 256, 257, 258, 259,
            260, 260, 261, 262, 263,
            264, 264, 265, 266, 267,
            268, 268, 269, 270, 271,
            272, 273, 273, 274, 275,
            276, 277, 278, 279, 279,
            280, 281, 282, 283, 284,
            285, 285, 286, 287, 288,
            289, 290, 291, 292, 293,
            293, 294, 295, 296, 297,
            298, 299, 300, 301, 302,
            303, 303, 304, 305, 306,
            307, 308, 309, 310, 311,
            312, 313, 314, 315, 316,
            317, 318, 319, 320, 321,
            322, 323, 324, 325, 326,
            327, 328, 329, 330, 331,
            332, 333, 334, 335, 336,
            337, 338, 339, 340, 341,
            342, 343, 344, 345, 346,
            347, 348, 349, 351, 352,
            353, 354, 355, 356, 357,
            358, 359, 360, 361, 363,
            364, 365, 366, 367, 368,
            369, 370, 372, 373, 374,
            375, 376, 377, 379, 380,
            381, 382, 383, 384, 386,
            387, 388, 389, 390, 392,
            393, 394, 395, 396, 398,
            399, 400, 401, 402, 404,
            405, 406, 407, 409, 410,
            411, 412, 414, 415, 416,
            418, 419, 420, 421, 423,
            424, 425, 427, 428, 429,
            431, 432, 433, 435, 436,
            437, 439, 440, 441, 443,
            444, 445, 447, 448, 449,
            451, 452, 454, 455, 456,
            458, 459, 461, 462, 463,
            465, 466, 468, 469, 471,
            472, 474, 475, 476, 478,
            479, 481, 482, 484, 485,
            487, 488, 490, 491, 493,
            494, 496, 497, 499, 500,
            502, 503, 505, 507, 508,
            510, 511, 513, 514, 516,
            518, 519, 521, 522, 524,
            526, 527, 529, 530, 532,
            534, 535, 537, 539, 540,
            542, 544, 545, 547, 549,
            550, 552, 554, 555, 557,
            559, 561, 562, 564, 566,
            567, 569, 571, 573, 575,
            576, 578, 580, 582, 583,
            585, 587, 589, 591, 592,
            594, 596, 598, 600, 602,
            603, 605, 607, 609, 611,
            613, 615, 617, 618, 620,
            622, 624, 626, 628, 630,
            632, 634, 636, 638, 640,
            642, 644, 646, 648, 650,
            652, 654, 656, 658, 660,
            662, 664, 666, 668, 670,
            672, 674, 676, 678, 680,
            682, 684, 686, 688, 691,
            693, 695, 697, 699, 701,
            703, 706, 708, 710, 712,
            714, 717, 719, 721, 723,
            725, 728, 730, 732, 734,
            737, 739, 741, 743, 746,
            748, 750, 753, 755, 757,
            760, 762, 764, 767, 769,
            771, 774, 776, 778, 781,
            783, 786, 788, 790, 793,
            795, 798, 800, 803, 805,
            808, 810, 813, 815, 818,
            820, 823, 825, 828, 830,
            833, 835, 838, 840, 843,
            846, 848, 851, 853, 856,
            859, 861, 864, 867, 869,
            872, 875, 877, 880, 883,
            885, 888, 891, 894, 896,
            899, 902, 905, 907, 910,
            913, 916, 919, 921, 924,
            927, 930, 933, 936, 939,
            941, 944, 947, 950, 953,
            956, 959, 962, 965, 968,
            971, 974, 977, 980, 983,
            986, 989, 992, 995, 998,
            1001, 1004, 1007, 1010, 1013,
            1017, 1020, 1023, 1026, 1029,
            1032, 1035, 1039, 1042, 1045,
            1048, 1051, 1055, 1058, 1061,
            1064, 1068, 1071, 1074, 1078,
            1081, 1084, 1088, 1091, 1094,
            1098, 1101, 1104, 1108, 1111,
            1115, 1118, 1121, 1125, 1128,
            1132, 1135, 1139, 1142, 1146,
            1149, 1153, 1156, 1160, 1163,
            1167, 1171, 1174, 1178, 1181,
            1185, 1189, 1192, 1196, 1200,
            1203, 1207, 1211, 1214, 1218,
            1222, 1226, 1229, 1233, 1237,
            1241, 1245, 1249, 1252, 1256,
            1260, 1264, 1268, 1272, 1276,
            1280, 1283, 1287, 1291, 1295,
            1299, 1303, 1307, 1311, 1315,
            1319, 1323, 1328, 1332, 1336,
            1340, 1344, 1348, 1352, 1356,
            1360, 1365, 1369, 1373, 1377,
            1382, 1386, 1390, 1394, 1399,
            1403, 1407, 1412, 1416, 1420,
            1425, 1429, 1433, 1438, 1442,
            1447, 1451, 1455, 1460, 1464,
            1469, 1473, 1478, 1483, 1487,
            1492, 1496, 1501, 1505, 1510,
            1515, 1519, 1524, 1529, 1533,
            1538, 1543, 1548, 1552, 1557,
            1562, 1567, 1572, 1576, 1581,
            1586, 1591, 1596, 1601, 1606,
            1611, 1616, 1620, 1625, 1630,
            1635, 1640, 1646, 1651, 1656,
            1661, 1666, 1671, 1676, 1681,
            1686, 1692, 1697, 1702, 1707,
            1712, 1718, 1723, 1728, 1734,
            1739, 1744, 1750, 1755, 1760,
            1766, 1771, 1777, 1782, 1788,
            1793, 1799, 1804, 1810, 1815,
            1821, 1826, 1832, 1838, 1843,
            1849, 1855, 1860, 1866, 1872,
            1878, 1883, 1889, 1895, 1901,
            1907, 1912, 1918, 1924, 1930,
            1936, 1942, 1948, 1954, 1960,
            1966, 1972, 1978, 1984, 1990,
            1996, 2003, 2009, 2015, 2021,
            2027, 2033, 2040, 2046, 2052,
            2059, 2065, 2071, 2078, 2084,
            2090, 2097, 2103, 2110, 2116,
            2123, 2129, 2136, 2142, 2149,
            2156, 2162, 2169, 2175, 2182,
            2189, 2196, 2202, 2209, 2216,
            2223, 2230, 2236, 2243, 2250,
            2257, 2264, 2271, 2278, 2285,
            2292, 2299, 2306, 2313, 2320,
            2327, 2335, 2342, 2349, 2356,
            2363, 2371, 2378, 2385, 2393,
            2400, 2407, 2415, 2422, 2430,
            2437, 2444, 2452, 2460, 2467,
            2475, 2482, 2490, 2498, 2505,
            2513, 2521, 2528, 2536, 2544,
            2552, 2560, 2567, 2575, 2583,
            2591, 2599, 2607, 2615, 2623,
            2631, 2639, 2647, 2656, 2664,
            2672, 2680, 2688, 2697, 2705,
            2713, 2722, 2730, 2738, 2747,
            2755, 2764, 2772, 2781, 2789,
            2798, 2806, 2815, 2824, 2832,
            2841, 2850, 2858, 2867, 2876,
            2885, 2894, 2903, 2912, 2921,
            2930, 2939, 2948, 2957, 2966,
            2975, 2984, 2993, 3002, 3012,
            3021, 3030, 3039, 3049, 3058,
            3067, 3077, 3086, 3096, 3105,
            3115, 3124, 3134, 3144, 3153,
            3163, 3173, 3183, 3192, 3202,
            3212, 3222, 3232, 3242, 3252,
            3262, 3272, 3282, 3292, 3302,
            3312, 3322, 3332, 3343, 3353,
            3363, 3374, 3384, 3394, 3405,
            3415, 3426, 3436, 3447, 3457,
            3468, 3479, 3489, 3500, 3511,
            3522, 3532, 3543, 3554, 3565,
            3576, 3587, 3598, 3609, 3620,
            3631, 3642, 3654, 3665, 3676,
            3687, 3699, 3710, 3722, 3733,
            3744, 3756, 3767, 3779, 3791,
            3802, 3814, 3826, 3837, 3849,
            3861, 3873, 3885, 3897, 3909,
            3921, 3933, 3945, 3957, 3969,
            3981, 3994, 4006, 4018, 4031,
            4043, 4055, 4068, 4080, 4093,
            4105, 4118, 4131, 4143, 4156,
            4169, 4182, 4195, 4207, 4220,
            4233, 4246, 4259, 4272, 4286,
            4299, 4312, 4325, 4339, 4352,
            4365, 4379, 4392, 4406, 4419,
            4433, 4446, 4460, 4474, 4487,
            4501, 4515, 4529, 4543, 4557,
            4571, 4585, 4599, 4613, 4627,
            4641, 4656, 4670, 4684, 4699,
            4713, 4728, 4742, 4757, 4771,
            4786, 4801, 4816, 4830, 4845,
            4860, 4875, 4890, 4905, 4920,
            4935, 4950, 4966, 4981, 4996,
            5011, 5027, 5042, 5058, 5073,
            5089, 5105, 5120, 5136, 5152,
            5168, 5183, 5199, 5215, 5231,
            5247, 5264, 5280, 5296, 5312,
            5329, 5345, 5361, 5378, 5394,
            5411, 5428, 5444, 5461, 5478,
            5495, 5512, 5528, 5545, 5562,
            5580, 5597, 5614, 5631, 5648,
            5666, 5683, 5701, 5718, 5736,
            5753, 5771, 5789, 5807, 5824,
            5842, 5860, 5878, 5896, 5914,
            5933, 5951, 5969, 5987, 6006,
            6024, 6043, 6061, 6080, 6099,
            6117, 6136, 6155, 6174, 6193,
            6212, 6231, 6250, 6269, 6289,
            6308, 6327, 6347, 6366, 6386,
            6406, 6425, 6445, 6465, 6485,
            6505, 6525, 6545, 6565, 6585,
            6605, 6625, 6646, 6666, 6687,
            6707, 6728, 6749, 6769, 6790,
            6811, 6832, 6853, 6874, 6895,
            6916, 6937, 6959, 6980, 7002,
            7023, 7045, 7066, 7088, 7110,
            7132, 7154, 7176, 7198, 7220,
            7242, 7264, 7286, 7309, 7331,
            7354, 7376, 7399, 7422, 7445,
            7468, 7490, 7513, 7537, 7560,
            7583, 7606, 7630, 7653, 7677,
            7700, 7724, 7748, 7771, 7795,
            7819, 7843, 7867, 7892, 7916,
            7940, 7964, 7989, 8014, 8038,
            8063, 8088, 8112, 8137, 8162,
            8187, 8213, 8238, 8263, 8289,
            8314, 8340, 8365, 8391, 8417,
            8443, 8468, 8495, 8521, 8547,
            8573, 8599, 8626, 8652, 8679,
            8706, 8732, 8759, 8786, 8813,
            8840, 8867, 8895, 8922, 8949,
            8977, 9004, 9032, 9060, 9088,
            9116, 9144, 9172, 9200, 9228,
            9256, 9285, 9313, 9342, 9371,
            9400, 9428, 9457, 9486, 9516,
            9545, 9574, 9604, 9633, 9663,
            9692, 9722, 9752, 9782, 9812,
            9842, 9872, 9903, 9933, 9964,
            9994, 10025, 10056, 10087, 10118,
            10149, 10180, 10211, 10243, 10274,
            10306, 10337, 10369, 10401, 10433,
            10465, 10497, 10529, 10562, 10594,
            10627, 10659, 10692, 10725, 10758,
            10791, 10824, 10858, 10891, 10924,
            10958, 10992, 11025, 11059, 11093,
            11127, 11161, 11196, 11230, 11265,
            11299, 11334, 11369, 11404, 11439,
            11474, 11509, 11545, 11580, 11616,
            11651, 11687, 11723, 11759, 11795,
            11831, 11868, 11904, 11941, 11978,
            12014, 12051, 12088, 12125, 12163,
            12200, 12238, 12275, 12313, 12351,
            12389, 12427, 12465, 12503, 12542,
            12580, 12619, 12658, 12696, 12735,
            12775, 12814, 12853, 12893, 12932,
            12972, 13012, 13052, 13092, 13132,
            13173, 13213, 13254, 13294, 13335,
            13376, 13417, 13459, 13500, 13541,
            13583, 13625, 13667, 13709, 13751,
            13793, 13835, 13878, 13920, 13963,
            14006, 14049, 14092, 14136, 14179,
            14223, 14266, 14310, 14354, 14398,
            14443, 14487, 14531, 14576, 14621,
            14666, 14711, 14756, 14801, 14847,
            14892, 14938, 14984, 15030, 15076,
            15123, 15169, 15216, 15263, 15309,
            15356, 15404, 15451, 15498, 15546,
            15594, 15642, 15690, 15738, 15786,
            15835, 15884, 15932, 15981, 16030,
            16080, 16129, 16179, 16228, 16278,
            16328, 16378, 16429, 16479, 16530,
            16581, 16632, 16683, 16734, 16785,
            16837, 16889, 16941, 16993, 17045,
            17097, 17150, 17202, 17255, 17308,
            17361, 17415, 17468, 17522, 17576,
            17630, 17684, 17738, 17793, 17848,
            17902, 17957, 18013, 18068, 18123,
            18179, 18235, 18291, 18347, 18404,
            18460, 18517, 18574, 18631, 18688,
            18746, 18803, 18861, 18919, 18977,
            19035, 19094, 19152, 19211, 19270,
            19330, 19389, 19448, 19508, 19568,
            19628, 19689, 19749, 19810, 19871,
            19932, 19993, 20054, 20116, 20178,
            20240, 20302, 20364, 20427, 20490,
            20553, 20616, 20679, 20743, 20806,
            20870, 20935, 20999, 21063, 21128,
            21193, 21258, 21323, 21389, 21455,
            21521, 21587, 21653, 21720, 21786,
            21853, 21920, 21988, 22055, 22123,
            22191, 22259, 22328, 22396, 22465,
            22534, 22603, 22673, 22742, 22812,
            22882, 22953, 23023, 23094, 23165,
            23236, 23308, 23379, 23451, 23523,
            23595, 23668, 23741, 23814, 23887,
            23960, 24034, 24108, 24182, 24256,
            24330, 24405, 24480, 24555, 24631,
            24707, 24783, 24859, 24935, 25012,
            25089, 25166, 25243, 25320, 25398,
            25476, 25555, 25633, 25712, 25791,
            25870, 25950, 26029, 26109, 26190,
            26270, 26351, 26432, 26513, 26594,
            26676, 26758, 26840, 26923, 27006,
            27088, 27172, 27255, 27339, 27423,
            27507, 27592, 27677, 27762, 27847,
            27932, 28018, 28104, 28191, 28277,
            28364, 28451, 28539, 28626, 28714,
            28803, 28891, 28980, 29069, 29158,
            29248, 29338, 29428, 29518, 29609,
            29700, 29791, 29883, 29975, 30067,
            30159, 30252, 30345, 30438, 30532,
            30625, 30719, 30814, 30909, 31003,
            31099, 31194, 31290, 31386, 31483,
            31579, 31677, 31774, 31871, 31969,
            32068, 32166, 32265, 32364, 32464,
            32563, 32663, 32764, 32864, 32965,
            33067, 33168, 33270, 33372, 33475,
            33578, 33681, 33785, 33888, 33992,
            34097, 34202, 34307, 34412, 34518,
            34624, 34730, 34837, 34944, 35051,
            35159, 35267, 35376, 35484, 35593,
            35703, 35812, 35922, 36033, 36144,
            36255, 36366, 36478, 36590, 36702,
            36815, 36928, 37042, 37155, 37270,
            37384, 37499, 37614, 37730, 37846,
            37962, 38079, 38196, 38313, 38431,
            38549, 38667, 38786, 38905, 39025,
            39145, 39265, 39386, 39507, 39628,
            39750, 39872, 39994, 40117, 40241,
            40364, 40488, 40613, 40737, 40863,
            40988, 41114, 41240, 41367, 41494,
            41622, 41750, 41878, 42007, 42136,
            42265, 42395, 42525, 42656, 42787,
            42919, 43050, 43183, 43315, 43448,
            43582, 43716, 43850, 43985, 44120,
            44256, 44392, 44528, 44665, 44802,
            44940, 45078, 45216, 45355, 45495,
            45634, 45775, 45915, 46056, 46198,
            46340, 46482, 46625, 46768, 46912,
            47056, 47201, 47346, 47491, 47637,
            47784, 47930, 48078, 48225, 48374,
            48522, 48671, 48821, 48971, 49121,
            49272, 49424, 49576, 49728, 49881,
            50034, 50188, 50342, 50497, 50652,
            50807, 50963, 51120, 51277, 51435,
            51593, 51751, 51910, 52070, 52230,
            52390, 52551, 52713, 52875, 53037,
            53200, 53364, 53528, 53692, 53857,
            54022, 54188, 54355, 54522, 54690,
            54858, 55026, 55195, 55365, 55535,
            55706, 55877, 56048, 56221, 56393,
            56567, 56740, 56915, 57090, 57265,
            57441, 57618, 57795, 57972, 58150,
            58329, 58508, 58688, 58868, 59049,
            59231, 59413, 59595, 59778, 59962,
            60146, 60331, 60516, 60702, 60889,
            61076, 61264, 61452, 61641, 61830,
            62020, 62211, 62402, 62594, 62786,
            62979, 63172, 63366, 63561, 63756,
            63952, 64149, 64346, 64544, 64742,
            64941, 65140, 65341, 65541, 65743,
            65945, 66147, 66351, 66555, 66759,
            66964, 67170, 67376, 67583, 67791,
            67999, 68208, 68418, 68628, 68839,
            69050, 69263, 69475, 69689, 69903,
            70118, 70333, 70549, 70766, 70984,
            71202, 71421, 71640, 71860, 72081,
            72302, 72525, 72747, 72971, 73195,
            73420, 73646, 73872, 74099, 74327,
            74555, 74784, 75014, 75244, 75476,
            75707, 75940, 76173, 76407, 76642,
            76878, 77114, 77351, 77589, 77827,
            78066, 78306, 78547, 78788, 79030,
            79273, 79516, 79761, 80006, 80252,
            80498, 80746, 80994, 81243, 81492,
            81743, 81994, 82246, 82498, 82752,
            83006, 83261, 83517, 83774, 84031,
            84289, 84548, 84808, 85069, 85330,
            85592, 85855, 86119, 86384, 86649,
            86915, 87182, 87450, 87719, 87989,
            88259, 88530, 88802, 89075, 89349,
            89623, 89899, 90175, 90452, 90730,
            91009, 91288, 91569, 91850, 92132,
            92415, 92699, 92984, 93270, 93557,
            93844, 94132, 94422, 94712, 95003,
            95295, 95587, 95881, 96176, 96471,
            96768, 97065, 97363, 97662, 97963,
            98264, 98565, 98868, 99172, 99477,
            99783, 100089, 100397, 100705, 101015,
            101325, 101636, 101949, 102262, 102576,
            102891, 103207, 103525, 103843, 104162,
            104482, 104803, 105125, 105448, 105772,
            106097, 106423, 106750, 107078, 107407,
            107737, 108068, 108400, 108733, 109067,
            109402, 109738, 110076, 110414, 110753,
            111093, 111435, 111777, 112121, 112465,
            112811, 113157, 113505, 113854, 114204,
            114555, 114907, 115260, 115614, 115969,
            116325, 116683, 117041, 117401, 117762,
            118124, 118486, 118851, 119216, 119582,
            119949, 120318, 120688, 121059, 121431,
            121804, 122178, 122553, 122930, 123308,
            123687, 124067, 124448, 124830, 125214,
            125598, 125984, 126371, 126760, 127149,
            127540, 127932, 128325, 128719, 129115,
            129511, 129909, 130309, 130709, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071
         ) ),
        max_error = cms.double(5748.616225984908),
        output_scale_factor = cms.double(0.953125),
        unused_lsbs = cms.uint32(2)
    ),
    inv_mass_checks = cms.untracked.bool(False),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    sanity_checks = cms.untracked.bool(False),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    )
)


process.l1tGTQuadObjectCond = cms.EDFilter("L1GTQuadObjectCond",
    cos_phi_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            487, 487, 487, 487, 487,
            487, 487, 487, 487, 487,
            487, 486, 486, 486, 486,
            486, 486, 486, 485, 485,
            485, 485, 485, 485, 484,
            484, 484, 484, 484, 483,
            483, 483, 483, 483, 482,
            482, 482, 482, 481, 481,
            481, 481, 480, 480, 480,
            480, 479, 479, 479, 478,
            478, 478, 478, 477, 477,
            477, 476, 476, 476, 475,
            475, 475, 474, 474, 474,
            473, 473, 472, 472, 472,
            471, 471, 471, 470, 470,
            469, 469, 468, 468, 468,
            467, 467, 466, 466, 465,
            465, 465, 464, 464, 463,
            463, 462, 462, 461, 461,
            460, 460, 459, 459, 458,
            458, 457, 457, 456, 456,
            455, 454, 454, 453, 453,
            452, 452, 451, 451, 450,
            449, 449, 448, 448, 447,
            446, 446, 445, 445, 444,
            443, 443, 442, 441, 441,
            440, 440, 439, 438, 438,
            437, 436, 436, 435, 434,
            434, 433, 432, 431, 431,
            430, 429, 429, 428, 427,
            426, 426, 425, 424, 423,
            423, 422, 421, 420, 420,
            419, 418, 417, 417, 416,
            415, 414, 413, 413, 412,
            411, 410, 409, 409, 408,
            407, 406, 405, 405, 404,
            403, 402, 401, 400, 399,
            399, 398, 397, 396, 395,
            394, 393, 392, 392, 391,
            390, 389, 388, 387, 386,
            385, 384, 383, 382, 381,
            381, 380, 379, 378, 377,
            376, 375, 374, 373, 372,
            371, 370, 369, 368, 367,
            366, 365, 364, 363, 362,
            361, 360, 359, 358, 357,
            356, 355, 354, 353, 352,
            351, 350, 349, 348, 347,
            346, 345, 343, 342, 341,
            340, 339, 338, 337, 336,
            335, 334, 333, 332, 330,
            329, 328, 327, 326, 325,
            324, 323, 322, 320, 319,
            318, 317, 316, 315, 314,
            312, 311, 310, 309, 308,
            307, 306, 304, 303, 302,
            301, 300, 298, 297, 296,
            295, 294, 293, 291, 290,
            289, 288, 286, 285, 284,
            283, 282, 280, 279, 278,
            277, 275, 274, 273, 272,
            270, 269, 268, 267, 265,
            264, 263, 262, 260, 259,
            258, 257, 255, 254, 253,
            252, 250, 249, 248, 246,
            245, 244, 242, 241, 240,
            239, 237, 236, 235, 233,
            232, 231, 229, 228, 227,
            225, 224, 223, 221, 220,
            219, 217, 216, 215, 213,
            212, 211, 209, 208, 207,
            205, 204, 203, 201, 200,
            198, 197, 196, 194, 193,
            192, 190, 189, 187, 186,
            185, 183, 182, 181, 179,
            178, 176, 175, 174, 172,
            171, 169, 168, 167, 165,
            164, 162, 161, 159, 158,
            157, 155, 154, 152, 151,
            150, 148, 147, 145, 144,
            142, 141, 140, 138, 137,
            135, 134, 132, 131, 129,
            128, 127, 125, 124, 122,
            121, 119, 118, 116, 115,
            113, 112, 111, 109, 108,
            106, 105, 103, 102, 100,
            99, 97, 96, 94, 93,
            92, 90, 89, 87, 86,
            84, 83, 81, 80, 78,
            77, 75, 74, 72, 71,
            69, 68, 66, 65, 63,
            62, 60, 59, 58, 56,
            55, 53, 52, 50, 49,
            47, 46, 44, 43, 41,
            40, 38, 37, 35, 34,
            32, 31, 29, 28, 26,
            25, 23, 22, 20, 19,
            17, 16, 14, 13, 11,
            10, 8, 7, 5, 4,
            2, 1, -1, -2, -4,
            -5, -7, -8, -10, -11,
            -13, -14, -16, -17, -19,
            -20, -22, -23, -25, -26,
            -28, -29, -31, -32, -34,
            -35, -37, -38, -40, -41,
            -43, -44, -46, -47, -49,
            -50, -52, -53, -55, -56,
            -58, -59, -60, -62, -63,
            -65, -66, -68, -69, -71,
            -72, -74, -75, -77, -78,
            -80, -81, -83, -84, -86,
            -87, -89, -90, -92, -93,
            -94, -96, -97, -99, -100,
            -102, -103, -105, -106, -108,
            -109, -111, -112, -113, -115,
            -116, -118, -119, -121, -122,
            -124, -125, -127, -128, -129,
            -131, -132, -134, -135, -137,
            -138, -140, -141, -142, -144,
            -145, -147, -148, -150, -151,
            -152, -154, -155, -157, -158,
            -159, -161, -162, -164, -165,
            -167, -168, -169, -171, -172,
            -174, -175, -176, -178, -179,
            -181, -182, -183, -185, -186,
            -187, -189, -190, -192, -193,
            -194, -196, -197, -198, -200,
            -201, -203, -204, -205, -207,
            -208, -209, -211, -212, -213,
            -215, -216, -217, -219, -220,
            -221, -223, -224, -225, -227,
            -228, -229, -231, -232, -233,
            -235, -236, -237, -239, -240,
            -241, -242, -244, -245, -246,
            -248, -249, -250, -252, -253,
            -254, -255, -257, -258, -259,
            -260, -262, -263, -264, -265,
            -267, -268, -269, -270, -272,
            -273, -274, -275, -277, -278,
            -279, -280, -282, -283, -284,
            -285, -286, -288, -289, -290,
            -291, -293, -294, -295, -296,
            -297, -298, -300, -301, -302,
            -303, -304, -306, -307, -308,
            -309, -310, -311, -312, -314,
            -315, -316, -317, -318, -319,
            -320, -322, -323, -324, -325,
            -326, -327, -328, -329, -330,
            -332, -333, -334, -335, -336,
            -337, -338, -339, -340, -341,
            -342, -343, -345, -346, -347,
            -348, -349, -350, -351, -352,
            -353, -354, -355, -356, -357,
            -358, -359, -360, -361, -362,
            -363, -364, -365, -366, -367,
            -368, -369, -370, -371, -372,
            -373, -374, -375, -376, -377,
            -378, -379, -380, -381, -381,
            -382, -383, -384, -385, -386,
            -387, -388, -389, -390, -391,
            -392, -392, -393, -394, -395,
            -396, -397, -398, -399, -399,
            -400, -401, -402, -403, -404,
            -405, -405, -406, -407, -408,
            -409, -409, -410, -411, -412,
            -413, -413, -414, -415, -416,
            -417, -417, -418, -419, -420,
            -420, -421, -422, -423, -423,
            -424, -425, -426, -426, -427,
            -428, -429, -429, -430, -431,
            -431, -432, -433, -434, -434,
            -435, -436, -436, -437, -438,
            -438, -439, -440, -440, -441,
            -441, -442, -443, -443, -444,
            -445, -445, -446, -446, -447,
            -448, -448, -449, -449, -450,
            -451, -451, -452, -452, -453,
            -453, -454, -454, -455, -456,
            -456, -457, -457, -458, -458,
            -459, -459, -460, -460, -461,
            -461, -462, -462, -463, -463,
            -464, -464, -465, -465, -465,
            -466, -466, -467, -467, -468,
            -468, -468, -469, -469, -470,
            -470, -471, -471, -471, -472,
            -472, -472, -473, -473, -474,
            -474, -474, -475, -475, -475,
            -476, -476, -476, -477, -477,
            -477, -478, -478, -478, -478,
            -479, -479, -479, -480, -480,
            -480, -480, -481, -481, -481,
            -481, -482, -482, -482, -482,
            -483, -483, -483, -483, -483,
            -484, -484, -484, -484, -484,
            -485, -485, -485, -485, -485,
            -485, -486, -486, -486, -486,
            -486, -486, -486, -487, -487,
            -487, -487, -487, -487, -487,
            -487, -487, -487, -487, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488
         ) ),
        max_error = cms.double(0.0025338281044886835),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            489, 489, 489, 489, 489,
            489, 489, 489, 489, 489,
            489, 490, 490, 490, 490,
            490, 490, 490, 491, 491,
            491, 491, 491, 491, 492,
            492, 492, 492, 492, 493,
            493, 493, 493, 493, 494,
            494, 494, 494, 495, 495,
            495, 495, 496, 496, 496,
            496, 497, 497, 497, 498,
            498, 498, 499, 499, 499,
            499, 500, 500, 500, 501,
            501, 502, 502, 502, 503,
            503, 503, 504, 504, 504,
            505, 505, 506, 506, 507,
            507, 507, 508, 508, 509,
            509, 510, 510, 510, 511,
            511, 512, 512, 513, 513,
            514, 514, 515, 515, 516,
            516, 517, 517, 518, 518,
            519, 520, 520, 521, 521,
            522, 522, 523, 523, 524,
            525, 525, 526, 526, 527,
            528, 528, 529, 530, 530,
            531, 531, 532, 533, 533,
            534, 535, 535, 536, 537,
            537, 538, 539, 540, 540,
            541, 542, 542, 543, 544,
            545, 545, 546, 547, 548,
            548, 549, 550, 551, 551,
            552, 553, 554, 555, 555,
            556, 557, 558, 559, 560,
            560, 561, 562, 563, 564,
            565, 566, 567, 567, 568,
            569, 570, 571, 572, 573,
            574, 575, 576, 577, 577,
            578, 579, 580, 581, 582,
            583, 584, 585, 586, 587,
            588, 589, 590, 591, 592,
            593, 594, 595, 596, 598,
            599, 600, 601, 602, 603,
            604, 605, 606, 607, 608,
            610, 611, 612, 613, 614,
            615, 616, 618, 619, 620,
            621, 622, 623, 625, 626,
            627, 628, 629, 631, 632,
            633, 634, 636, 637, 638,
            639, 641, 642, 643, 644,
            646, 647, 648, 650, 651,
            652, 654, 655, 656, 658,
            659, 660, 662, 663, 665,
            666, 667, 669, 670, 672,
            673, 674, 676, 677, 679,
            680, 682, 683, 685, 686,
            687, 689, 690, 692, 693,
            695, 697, 698, 700, 701,
            703, 704, 706, 707, 709,
            710, 712, 714, 715, 717,
            719, 720, 722, 723, 725,
            727, 728, 730, 732, 733,
            735, 737, 738, 740, 742,
            744, 745, 747, 749, 750,
            752, 754, 756, 758, 759,
            761, 763, 765, 767, 768,
            770, 772, 774, 776, 778,
            779, 781, 783, 785, 787,
            789, 791, 793, 795, 796,
            798, 800, 802, 804, 806,
            808, 810, 812, 814, 816,
            818, 820, 822, 824, 826,
            828, 830, 832, 835, 837,
            839, 841, 843, 845, 847,
            849, 851, 854, 856, 858,
            860, 862, 864, 867, 869,
            871, 873, 875, 878, 880,
            882, 884, 887, 889, 891,
            894, 896, 898, 900, 903,
            905, 907, 910, 912, 915,
            917, 919, 922, 924, 927,
            929, 931, 934, 936, 939,
            941, 944, 946, 949, 951,
            954, 956, 959, 961, 964,
            966, 969, 971, 974, 977,
            979, 982, 984, 987, 990,
            992, 995, 998, 1000, 1003,
            1006, 1008, 1011, 1014, 1017,
            1019, 1022, 1025, 1028, 1030,
            1033, 1036, 1039, 1042, 1044,
            1047, 1050, 1053, 1056, 1059,
            1062, 1065, 1067, 1070, 1073,
            1076, 1079, 1082, 1085, 1088,
            1091, 1094, 1097, 1100, 1103,
            1106, 1109, 1112, 1115, 1118,
            1122, 1125, 1128, 1131, 1134,
            1137, 1140, 1143, 1147, 1150,
            1153, 1156, 1159, 1163, 1166,
            1169, 1172, 1176, 1179, 1182,
            1186, 1189, 1192, 1196, 1199,
            1202, 1206, 1209, 1212, 1216,
            1219, 1223, 1226, 1230, 1233,
            1237, 1240, 1244, 1247, 1251,
            1254, 1258, 1261, 1265, 1268,
            1272, 1276, 1279, 1283, 1287,
            1290, 1294, 1298, 1301, 1305,
            1309, 1312, 1316, 1320, 1324,
            1327, 1331, 1335, 1339, 1343,
            1347, 1350, 1354, 1358, 1362,
            1366, 1370, 1374, 1378, 1382,
            1386, 1390, 1394, 1398, 1402,
            1406, 1410, 1414, 1418, 1422,
            1426, 1430, 1434, 1439, 1443,
            1447, 1451, 1455, 1459, 1464,
            1468, 1472, 1476, 1481, 1485,
            1489, 1494, 1498, 1502, 1507,
            1511, 1516, 1520, 1524, 1529,
            1533, 1538, 1542, 1547, 1551,
            1556, 1560, 1565, 1569, 1574,
            1579, 1583, 1588, 1592, 1597,
            1602, 1606, 1611, 1616, 1621,
            1625, 1630, 1635, 1640, 1645,
            1649, 1654, 1659, 1664, 1669,
            1674, 1679, 1684, 1689, 1693,
            1698, 1703, 1708, 1714, 1719,
            1724, 1729, 1734, 1739, 1744,
            1749, 1754, 1760, 1765, 1770,
            1775, 1780, 1786, 1791, 1796,
            1802, 1807, 1812, 1818, 1823,
            1828, 1834, 1839, 1845, 1850,
            1856, 1861, 1867, 1872, 1878,
            1883, 1889, 1894, 1900, 1906,
            1911, 1917, 1923, 1929, 1934,
            1940, 1946, 1952, 1957, 1963,
            1969, 1975, 1981, 1987, 1993,
            1999, 2004, 2010, 2016, 2022,
            2028, 2035, 2041, 2047, 2053,
            2059, 2065, 2071, 2077, 2084,
            2090, 2096, 2102, 2109, 2115,
            2121, 2128, 2134, 2140, 2147,
            2153, 2160, 2166, 2173, 2179,
            2186, 2192, 2199, 2205, 2212,
            2219, 2225, 2232, 2239, 2245,
            2252, 2259, 2266, 2272, 2279,
            2286, 2293, 2300, 2307, 2314,
            2321, 2328, 2335, 2342, 2349,
            2356, 2363, 2370, 2377, 2384,
            2391, 2398, 2406, 2413, 2420,
            2427, 2435, 2442, 2449, 2457,
            2464, 2472, 2479, 2487, 2494,
            2502, 2509, 2517, 2524, 2532,
            2539, 2547, 2555, 2563, 2570,
            2578, 2586, 2594, 2601, 2609,
            2617, 2625, 2633, 2641, 2649,
            2657, 2665, 2673, 2681, 2689,
            2697, 2705, 2714, 2722, 2730,
            2738, 2747, 2755, 2763, 2772,
            2780, 2788, 2797, 2805, 2814,
            2822, 2831, 2839, 2848, 2857,
            2865, 2874, 2883, 2891, 2900,
            2909, 2918, 2927, 2935, 2944,
            2953, 2962, 2971, 2980, 2989,
            2998, 3007, 3016, 3026, 3035,
            3044, 3053, 3062, 3072, 3081,
            3090, 3100, 3109, 3119, 3128,
            3138, 3147, 3157, 3166, 3176,
            3186, 3195, 3205, 3215, 3224,
            3234, 3244, 3254, 3264, 3274,
            3284, 3294, 3304, 3314, 3324,
            3334, 3344, 3354, 3364, 3375,
            3385, 3395, 3405, 3416, 3426,
            3437, 3447, 3458, 3468, 3479,
            3489, 3500, 3510, 3521, 3532,
            3543, 3553, 3564, 3575, 3586,
            3597, 3608, 3619, 3630, 3641,
            3652, 3663, 3674, 3685, 3697,
            3708, 3719, 3730, 3742, 3753,
            3765, 3776, 3788, 3799, 3811,
            3822, 3834, 3846, 3857, 3869,
            3881, 3893, 3905, 3917, 3929,
            3941, 3953, 3965, 3977, 3989,
            4001, 4013, 4025, 4038, 4050,
            4062, 4075, 4087, 4100, 4112,
            4125, 4137, 4150, 4163, 4175,
            4188, 4201, 4214, 4226, 4239,
            4252, 4265, 4278, 4291, 4304,
            4318, 4331, 4344, 4357, 4371,
            4384, 4397, 4411, 4424, 4438,
            4451, 4465, 4479, 4492, 4506,
            4520, 4533, 4547, 4561, 4575,
            4589, 4603, 4617, 4631, 4645,
            4660, 4674, 4688, 4703, 4717,
            4731, 4746, 4760, 4775, 4789,
            4804, 4819, 4833, 4848, 4863,
            4878, 4893, 4908, 4923, 4938,
            4953, 4968, 4983, 4999, 5014,
            5029, 5045, 5060, 5075, 5091,
            5107, 5122, 5138, 5154, 5169,
            5185, 5201, 5217, 5233, 5249,
            5265, 5281, 5297, 5313, 5330,
            5346, 5362, 5379, 5395, 5412,
            5428, 5445, 5462, 5478, 5495,
            5512, 5529, 5546, 5563, 5580,
            5597, 5614, 5631, 5648, 5666,
            5683, 5700, 5718, 5735, 5753,
            5770, 5788, 5806, 5824, 5841,
            5859, 5877, 5895, 5913, 5931,
            5950, 5968, 5986, 6004, 6023,
            6041, 6060, 6078, 6097, 6116,
            6134, 6153, 6172, 6191, 6210,
            6229, 6248, 6267, 6286, 6305,
            6325, 6344, 6364, 6383, 6403,
            6422, 6442, 6462, 6481, 6501,
            6521, 6541, 6561, 6581, 6602,
            6622, 6642, 6662, 6683, 6703,
            6724, 6744, 6765, 6786, 6807,
            6828, 6848, 6869, 6891, 6912,
            6933, 6954, 6975, 6997, 7018,
            7040, 7061, 7083, 7105, 7126,
            7148, 7170, 7192, 7214, 7236,
            7259, 7281, 7303, 7325, 7348,
            7370, 7393, 7416, 7438, 7461,
            7484, 7507, 7530, 7553, 7576,
            7600, 7623, 7646, 7670, 7693,
            7717, 7741, 7764, 7788, 7812,
            7836, 7860, 7884, 7908, 7932,
            7957, 7981, 8006, 8030, 8055,
            8080, 8104, 8129, 8154, 8179,
            8204, 8229, 8255, 8280, 8305,
            8331, 8356, 8382, 8408, 8434,
            8459, 8485, 8511, 8537, 8564,
            8590, 8616, 8643, 8669, 8696,
            8722, 8749, 8776, 8803, 8830,
            8857, 8884, 8912, 8939, 8966,
            8994, 9021, 9049, 9077, 9105,
            9133, 9161, 9189, 9217, 9245,
            9274, 9302, 9331, 9359, 9388,
            9417, 9446, 9475, 9504, 9533,
            9562, 9591, 9621, 9650, 9680,
            9710, 9740, 9769, 9799, 9830,
            9860, 9890, 9920, 9951, 9981,
            10012, 10043, 10073, 10104, 10135,
            10166, 10198, 10229, 10260, 10292,
            10323, 10355, 10387, 10419, 10451,
            10483, 10515, 10547, 10580, 10612,
            10645, 10677, 10710, 10743, 10776,
            10809, 10842, 10876, 10909, 10942,
            10976, 11010, 11044, 11077, 11111,
            11146, 11180, 11214, 11248, 11283,
            11318, 11352, 11387, 11422, 11457,
            11492, 11528, 11563, 11599, 11634,
            11670, 11706, 11742, 11778, 11814,
            11850, 11887, 11923, 11960, 11996,
            12033, 12070, 12107, 12144, 12182,
            12219, 12257, 12294, 12332, 12370,
            12408, 12446, 12484, 12522, 12561,
            12599, 12638, 12677, 12716, 12755,
            12794, 12833, 12873, 12912, 12952,
            12992, 13032, 13072, 13112, 13152,
            13192, 13233, 13274, 13314, 13355,
            13396, 13437, 13479, 13520, 13561,
            13603, 13645, 13687, 13729, 13771,
            13813, 13856, 13898, 13941, 13984,
            14027, 14070, 14113, 14156, 14200,
            14243, 14287, 14331, 14375, 14419,
            14463, 14508, 14552, 14597, 14642,
            14687, 14732, 14777, 14823, 14868,
            14914, 14960, 15005, 15052, 15098,
            15144, 15191, 15237, 15284, 15331,
            15378, 15425, 15473, 15520, 15568,
            15616, 15664, 15712, 15760, 15808,
            15857, 15906, 15955, 16004, 16053,
            16102, 16151, 16201, 16251, 16301,
            16351, 16401, 16451, 16502, 16553,
            16603, 16654, 16706, 16757, 16808,
            16860, 16912, 16964, 17016, 17068,
            17121, 17173, 17226, 17279, 17332,
            17385, 17438, 17492, 17546, 17600,
            17654, 17708, 17762, 17817, 17872,
            17926, 17982, 18037, 18092, 18148,
            18203, 18259, 18315, 18372, 18428,
            18485, 18542, 18598, 18656, 18713,
            18770, 18828, 18886, 18944, 19002,
            19060, 19119, 19178, 19237, 19296,
            19355, 19414, 19474, 19534, 19594,
            19654, 19714, 19775, 19836, 19897,
            19958, 20019, 20081, 20142, 20204,
            20266, 20328, 20391, 20454, 20516,
            20579, 20643, 20706, 20770, 20833,
            20897, 20962, 21026, 21091, 21155,
            21220, 21286, 21351, 21417, 21482,
            21548, 21615, 21681, 21748, 21814,
            21881, 21949, 22016, 22084, 22151,
            22220, 22288, 22356, 22425, 22494,
            22563, 22632, 22702, 22771, 22841,
            22912, 22982, 23053, 23123, 23194,
            23266, 23337, 23409, 23481, 23553,
            23625, 23698, 23771, 23844, 23917,
            23990, 24064, 24138, 24212, 24287,
            24361, 24436, 24511, 24586, 24662,
            24738, 24814, 24890, 24966, 25043,
            25120, 25197, 25275, 25352, 25430,
            25508, 25587, 25665, 25744, 25823,
            25902, 25982, 26062, 26142, 26222,
            26303, 26384, 26465, 26546, 26627,
            26709, 26791, 26874, 26956, 27039,
            27122, 27205, 27289, 27373, 27457,
            27541, 27626, 27711, 27796, 27881,
            27967, 28053, 28139, 28226, 28312,
            28399, 28486, 28574, 28662, 28750,
            28838, 28927, 29016, 29105, 29194,
            29284, 29374, 29464, 29555, 29645,
            29736, 29828, 29919, 30011, 30104,
            30196, 30289, 30382, 30475, 30569,
            30663, 30757, 30851, 30946, 31041,
            31137, 31232, 31328, 31425, 31521,
            31618, 31715, 31813, 31910, 32008,
            32107, 32205, 32304, 32403, 32503,
            32603, 32703, 32804, 32904, 33005,
            33107, 33209, 33311, 33413, 33516,
            33619, 33722, 33825, 33929, 34034,
            34138, 34243, 34348, 34454, 34560,
            34666, 34772, 34879, 34986, 35094,
            35202, 35310, 35418, 35527, 35636,
            35746, 35856, 35966, 36076, 36187,
            36298, 36410, 36522, 36634, 36746,
            36859, 36973, 37086, 37200, 37314,
            37429, 37544, 37659, 37775, 37891,
            38008, 38124, 38241, 38359, 38477,
            38595, 38714, 38833, 38952, 39072,
            39192, 39312, 39433, 39554, 39675,
            39797, 39920, 40042, 40165, 40289,
            40413, 40537, 40661, 40786, 40911,
            41037, 41163, 41290, 41417, 41544,
            41671, 41800, 41928, 42057, 42186,
            42316, 42446, 42576, 42707, 42838,
            42970, 43102, 43234, 43367, 43500,
            43634, 43768, 43902, 44037, 44173,
            44308, 44444, 44581, 44718, 44855,
            44993, 45131, 45270, 45409, 45549,
            45689, 45829, 45970, 46111, 46253,
            46395, 46537, 46680, 46824, 46968,
            47112, 47257, 47402, 47548, 47694,
            47840, 47987, 48135, 48283, 48431,
            48580, 48729, 48879, 49029, 49180,
            49331, 49482, 49634, 49787, 49940,
            50093, 50247, 50401, 50556, 50712,
            50867, 51024, 51181, 51338, 51495,
            51654, 51812, 51972, 52131, 52291,
            52452, 52613, 52775, 52937, 53100,
            53263, 53427, 53591, 53755, 53921,
            54086, 54252, 54419, 54586, 54754,
            54922, 55091, 55260, 55430, 55600,
            55771, 55943, 56114, 56287, 56460,
            56633, 56807, 56982, 57157, 57333,
            57509, 57685, 57863, 58040, 58219,
            58398, 58577, 58757, 58938, 59119,
            59300, 59483, 59665, 59849, 60033,
            60217, 60402, 60588, 60774, 60960,
            61148, 61336, 61524, 61713, 61903,
            62093, 62284, 62475, 62667, 62860,
            63053, 63247, 63441, 63636, 63831,
            64027, 64224, 64422, 64619, 64818,
            65017, 65217, 65417, 65618, 65820,
            66022, 66225, 66429, 66633, 66837,
            67043, 67249, 67455, 67663, 67870,
            68079, 68288, 68498, 68708, 68920,
            69131, 69344, 69557, 69771, 69985,
            70200, 70416, 70632, 70849, 71067,
            71285, 71504, 71724, 71944, 72165,
            72387, 72609, 72833, 73056, 73281,
            73506, 73732, 73958, 74186, 74414,
            74642, 74872, 75102, 75332, 75564,
            75796, 76029, 76262, 76497, 76732,
            76968, 77204, 77441, 77679, 77918,
            78157, 78398, 78638, 78880, 79122,
            79366, 79609, 79854, 80099, 80345,
            80592, 80840, 81088, 81338, 81587,
            81838, 82090, 82342, 82595, 82849,
            83103, 83358, 83615, 83872, 84129,
            84388, 84647, 84907, 85168, 85430,
            85692, 85955, 86220, 86485, 86750,
            87017, 87284, 87552, 87821, 88091,
            88362, 88633, 88906, 89179, 89453,
            89728, 90003, 90280, 90557, 90836,
            91115, 91395, 91676, 91957, 92240,
            92523, 92807, 93093, 93379, 93666,
            93953, 94242, 94532, 94822, 95113,
            95406, 95699, 95993, 96288, 96584,
            96881, 97178, 97477, 97776, 98077,
            98378, 98680, 98984, 99288, 99593,
            99899, 100206, 100514, 100822, 101132,
            101443, 101755, 102067, 102381, 102696,
            103011, 103328, 103645, 103964, 104283,
            104603, 104925, 105247, 105571, 105895,
            106220, 106547, 106874, 107203, 107532,
            107862, 108194, 108526, 108860, 109194,
            109530, 109866, 110204, 110542, 110882,
            111223, 111565, 111907, 112251, 112596,
            112942, 113289, 113637, 113986, 114337,
            114688, 115040, 115394, 115748, 116104,
            116461, 116819, 117178, 117538, 117899,
            118261, 118624, 118989, 119354, 119721,
            120089, 120458, 120828, 121199, 121572,
            121945, 122320, 122696, 123073, 123451,
            123830, 124211, 124593, 124975, 125359,
            125745, 126131, 126518, 126907, 127297,
            127688, 128081, 128474, 128869, 129265,
            129662, 130061, 130260
         ) ),
        max_error = cms.double(0.6152529479288091),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut2 = cms.PSet(
        lut = cms.vint32( (
            256, 256, 257, 258, 259,
            260, 260, 261, 262, 263,
            264, 264, 265, 266, 267,
            268, 268, 269, 270, 271,
            272, 273, 273, 274, 275,
            276, 277, 278, 279, 279,
            280, 281, 282, 283, 284,
            285, 285, 286, 287, 288,
            289, 290, 291, 292, 293,
            293, 294, 295, 296, 297,
            298, 299, 300, 301, 302,
            303, 303, 304, 305, 306,
            307, 308, 309, 310, 311,
            312, 313, 314, 315, 316,
            317, 318, 319, 320, 321,
            322, 323, 324, 325, 326,
            327, 328, 329, 330, 331,
            332, 333, 334, 335, 336,
            337, 338, 339, 340, 341,
            342, 343, 344, 345, 346,
            347, 348, 349, 351, 352,
            353, 354, 355, 356, 357,
            358, 359, 360, 361, 363,
            364, 365, 366, 367, 368,
            369, 370, 372, 373, 374,
            375, 376, 377, 379, 380,
            381, 382, 383, 384, 386,
            387, 388, 389, 390, 392,
            393, 394, 395, 396, 398,
            399, 400, 401, 402, 404,
            405, 406, 407, 409, 410,
            411, 412, 414, 415, 416,
            418, 419, 420, 421, 423,
            424, 425, 427, 428, 429,
            431, 432, 433, 435, 436,
            437, 439, 440, 441, 443,
            444, 445, 447, 448, 449,
            451, 452, 454, 455, 456,
            458, 459, 461, 462, 463,
            465, 466, 468, 469, 471,
            472, 474, 475, 476, 478,
            479, 481, 482, 484, 485,
            487, 488, 490, 491, 493,
            494, 496, 497, 499, 500,
            502, 503, 505, 507, 508,
            510, 511, 513, 514, 516,
            518, 519, 521, 522, 524,
            526, 527, 529, 530, 532,
            534, 535, 537, 539, 540,
            542, 544, 545, 547, 549,
            550, 552, 554, 555, 557,
            559, 561, 562, 564, 566,
            567, 569, 571, 573, 575,
            576, 578, 580, 582, 583,
            585, 587, 589, 591, 592,
            594, 596, 598, 600, 602,
            603, 605, 607, 609, 611,
            613, 615, 617, 618, 620,
            622, 624, 626, 628, 630,
            632, 634, 636, 638, 640,
            642, 644, 646, 648, 650,
            652, 654, 656, 658, 660,
            662, 664, 666, 668, 670,
            672, 674, 676, 678, 680,
            682, 684, 686, 688, 691,
            693, 695, 697, 699, 701,
            703, 706, 708, 710, 712,
            714, 717, 719, 721, 723,
            725, 728, 730, 732, 734,
            737, 739, 741, 743, 746,
            748, 750, 753, 755, 757,
            760, 762, 764, 767, 769,
            771, 774, 776, 778, 781,
            783, 786, 788, 790, 793,
            795, 798, 800, 803, 805,
            808, 810, 813, 815, 818,
            820, 823, 825, 828, 830,
            833, 835, 838, 840, 843,
            846, 848, 851, 853, 856,
            859, 861, 864, 867, 869,
            872, 875, 877, 880, 883,
            885, 888, 891, 894, 896,
            899, 902, 905, 907, 910,
            913, 916, 919, 921, 924,
            927, 930, 933, 936, 939,
            941, 944, 947, 950, 953,
            956, 959, 962, 965, 968,
            971, 974, 977, 980, 983,
            986, 989, 992, 995, 998,
            1001, 1004, 1007, 1010, 1013,
            1017, 1020, 1023, 1026, 1029,
            1032, 1035, 1039, 1042, 1045,
            1048, 1051, 1055, 1058, 1061,
            1064, 1068, 1071, 1074, 1078,
            1081, 1084, 1088, 1091, 1094,
            1098, 1101, 1104, 1108, 1111,
            1115, 1118, 1121, 1125, 1128,
            1132, 1135, 1139, 1142, 1146,
            1149, 1153, 1156, 1160, 1163,
            1167, 1171, 1174, 1178, 1181,
            1185, 1189, 1192, 1196, 1200,
            1203, 1207, 1211, 1214, 1218,
            1222, 1226, 1229, 1233, 1237,
            1241, 1245, 1249, 1252, 1256,
            1260, 1264, 1268, 1272, 1276,
            1280, 1283, 1287, 1291, 1295,
            1299, 1303, 1307, 1311, 1315,
            1319, 1323, 1328, 1332, 1336,
            1340, 1344, 1348, 1352, 1356,
            1360, 1365, 1369, 1373, 1377,
            1382, 1386, 1390, 1394, 1399,
            1403, 1407, 1412, 1416, 1420,
            1425, 1429, 1433, 1438, 1442,
            1447, 1451, 1455, 1460, 1464,
            1469, 1473, 1478, 1483, 1487,
            1492, 1496, 1501, 1505, 1510,
            1515, 1519, 1524, 1529, 1533,
            1538, 1543, 1548, 1552, 1557,
            1562, 1567, 1572, 1576, 1581,
            1586, 1591, 1596, 1601, 1606,
            1611, 1616, 1620, 1625, 1630,
            1635, 1640, 1646, 1651, 1656,
            1661, 1666, 1671, 1676, 1681,
            1686, 1692, 1697, 1702, 1707,
            1712, 1718, 1723, 1728, 1734,
            1739, 1744, 1750, 1755, 1760,
            1766, 1771, 1777, 1782, 1788,
            1793, 1799, 1804, 1810, 1815,
            1821, 1826, 1832, 1838, 1843,
            1849, 1855, 1860, 1866, 1872,
            1878, 1883, 1889, 1895, 1901,
            1907, 1912, 1918, 1924, 1930,
            1936, 1942, 1948, 1954, 1960,
            1966, 1972, 1978, 1984, 1990,
            1996, 2003, 2009, 2015, 2021,
            2027, 2033, 2040, 2046, 2052,
            2059, 2065, 2071, 2078, 2084,
            2090, 2097, 2103, 2110, 2116,
            2123, 2129, 2136, 2142, 2149,
            2156, 2162, 2169, 2175, 2182,
            2189, 2196, 2202, 2209, 2216,
            2223, 2230, 2236, 2243, 2250,
            2257, 2264, 2271, 2278, 2285,
            2292, 2299, 2306, 2313, 2320,
            2327, 2335, 2342, 2349, 2356,
            2363, 2371, 2378, 2385, 2393,
            2400, 2407, 2415, 2422, 2430,
            2437, 2444, 2452, 2460, 2467,
            2475, 2482, 2490, 2498, 2505,
            2513, 2521, 2528, 2536, 2544,
            2552, 2560, 2567, 2575, 2583,
            2591, 2599, 2607, 2615, 2623,
            2631, 2639, 2647, 2656, 2664,
            2672, 2680, 2688, 2697, 2705,
            2713, 2722, 2730, 2738, 2747,
            2755, 2764, 2772, 2781, 2789,
            2798, 2806, 2815, 2824, 2832,
            2841, 2850, 2858, 2867, 2876,
            2885, 2894, 2903, 2912, 2921,
            2930, 2939, 2948, 2957, 2966,
            2975, 2984, 2993, 3002, 3012,
            3021, 3030, 3039, 3049, 3058,
            3067, 3077, 3086, 3096, 3105,
            3115, 3124, 3134, 3144, 3153,
            3163, 3173, 3183, 3192, 3202,
            3212, 3222, 3232, 3242, 3252,
            3262, 3272, 3282, 3292, 3302,
            3312, 3322, 3332, 3343, 3353,
            3363, 3374, 3384, 3394, 3405,
            3415, 3426, 3436, 3447, 3457,
            3468, 3479, 3489, 3500, 3511,
            3522, 3532, 3543, 3554, 3565,
            3576, 3587, 3598, 3609, 3620,
            3631, 3642, 3654, 3665, 3676,
            3687, 3699, 3710, 3722, 3733,
            3744, 3756, 3767, 3779, 3791,
            3802, 3814, 3826, 3837, 3849,
            3861, 3873, 3885, 3897, 3909,
            3921, 3933, 3945, 3957, 3969,
            3981, 3994, 4006, 4018, 4031,
            4043, 4055, 4068, 4080, 4093,
            4105, 4118, 4131, 4143, 4156,
            4169, 4182, 4195, 4207, 4220,
            4233, 4246, 4259, 4272, 4286,
            4299, 4312, 4325, 4339, 4352,
            4365, 4379, 4392, 4406, 4419,
            4433, 4446, 4460, 4474, 4487,
            4501, 4515, 4529, 4543, 4557,
            4571, 4585, 4599, 4613, 4627,
            4641, 4656, 4670, 4684, 4699,
            4713, 4728, 4742, 4757, 4771,
            4786, 4801, 4816, 4830, 4845,
            4860, 4875, 4890, 4905, 4920,
            4935, 4950, 4966, 4981, 4996,
            5011, 5027, 5042, 5058, 5073,
            5089, 5105, 5120, 5136, 5152,
            5168, 5183, 5199, 5215, 5231,
            5247, 5264, 5280, 5296, 5312,
            5329, 5345, 5361, 5378, 5394,
            5411, 5428, 5444, 5461, 5478,
            5495, 5512, 5528, 5545, 5562,
            5580, 5597, 5614, 5631, 5648,
            5666, 5683, 5701, 5718, 5736,
            5753, 5771, 5789, 5807, 5824,
            5842, 5860, 5878, 5896, 5914,
            5933, 5951, 5969, 5987, 6006,
            6024, 6043, 6061, 6080, 6099,
            6117, 6136, 6155, 6174, 6193,
            6212, 6231, 6250, 6269, 6289,
            6308, 6327, 6347, 6366, 6386,
            6406, 6425, 6445, 6465, 6485,
            6505, 6525, 6545, 6565, 6585,
            6605, 6625, 6646, 6666, 6687,
            6707, 6728, 6749, 6769, 6790,
            6811, 6832, 6853, 6874, 6895,
            6916, 6937, 6959, 6980, 7002,
            7023, 7045, 7066, 7088, 7110,
            7132, 7154, 7176, 7198, 7220,
            7242, 7264, 7286, 7309, 7331,
            7354, 7376, 7399, 7422, 7445,
            7468, 7490, 7513, 7537, 7560,
            7583, 7606, 7630, 7653, 7677,
            7700, 7724, 7748, 7771, 7795,
            7819, 7843, 7867, 7892, 7916,
            7940, 7964, 7989, 8014, 8038,
            8063, 8088, 8112, 8137, 8162,
            8187, 8213, 8238, 8263, 8289,
            8314, 8340, 8365, 8391, 8417,
            8443, 8468, 8495, 8521, 8547,
            8573, 8599, 8626, 8652, 8679,
            8706, 8732, 8759, 8786, 8813,
            8840, 8867, 8895, 8922, 8949,
            8977, 9004, 9032, 9060, 9088,
            9116, 9144, 9172, 9200, 9228,
            9256, 9285, 9313, 9342, 9371,
            9400, 9428, 9457, 9486, 9516,
            9545, 9574, 9604, 9633, 9663,
            9692, 9722, 9752, 9782, 9812,
            9842, 9872, 9903, 9933, 9964,
            9994, 10025, 10056, 10087, 10118,
            10149, 10180, 10211, 10243, 10274,
            10306, 10337, 10369, 10401, 10433,
            10465, 10497, 10529, 10562, 10594,
            10627, 10659, 10692, 10725, 10758,
            10791, 10824, 10858, 10891, 10924,
            10958, 10992, 11025, 11059, 11093,
            11127, 11161, 11196, 11230, 11265,
            11299, 11334, 11369, 11404, 11439,
            11474, 11509, 11545, 11580, 11616,
            11651, 11687, 11723, 11759, 11795,
            11831, 11868, 11904, 11941, 11978,
            12014, 12051, 12088, 12125, 12163,
            12200, 12238, 12275, 12313, 12351,
            12389, 12427, 12465, 12503, 12542,
            12580, 12619, 12658, 12696, 12735,
            12775, 12814, 12853, 12893, 12932,
            12972, 13012, 13052, 13092, 13132,
            13173, 13213, 13254, 13294, 13335,
            13376, 13417, 13459, 13500, 13541,
            13583, 13625, 13667, 13709, 13751,
            13793, 13835, 13878, 13920, 13963,
            14006, 14049, 14092, 14136, 14179,
            14223, 14266, 14310, 14354, 14398,
            14443, 14487, 14531, 14576, 14621,
            14666, 14711, 14756, 14801, 14847,
            14892, 14938, 14984, 15030, 15076,
            15123, 15169, 15216, 15263, 15309,
            15356, 15404, 15451, 15498, 15546,
            15594, 15642, 15690, 15738, 15786,
            15835, 15884, 15932, 15981, 16030,
            16080, 16129, 16179, 16228, 16278,
            16328, 16378, 16429, 16479, 16530,
            16581, 16632, 16683, 16734, 16785,
            16837, 16889, 16941, 16993, 17045,
            17097, 17150, 17202, 17255, 17308,
            17361, 17415, 17468, 17522, 17576,
            17630, 17684, 17738, 17793, 17848,
            17902, 17957, 18013, 18068, 18123,
            18179, 18235, 18291, 18347, 18404,
            18460, 18517, 18574, 18631, 18688,
            18746, 18803, 18861, 18919, 18977,
            19035, 19094, 19152, 19211, 19270,
            19330, 19389, 19448, 19508, 19568,
            19628, 19689, 19749, 19810, 19871,
            19932, 19993, 20054, 20116, 20178,
            20240, 20302, 20364, 20427, 20490,
            20553, 20616, 20679, 20743, 20806,
            20870, 20935, 20999, 21063, 21128,
            21193, 21258, 21323, 21389, 21455,
            21521, 21587, 21653, 21720, 21786,
            21853, 21920, 21988, 22055, 22123,
            22191, 22259, 22328, 22396, 22465,
            22534, 22603, 22673, 22742, 22812,
            22882, 22953, 23023, 23094, 23165,
            23236, 23308, 23379, 23451, 23523,
            23595, 23668, 23741, 23814, 23887,
            23960, 24034, 24108, 24182, 24256,
            24330, 24405, 24480, 24555, 24631,
            24707, 24783, 24859, 24935, 25012,
            25089, 25166, 25243, 25320, 25398,
            25476, 25555, 25633, 25712, 25791,
            25870, 25950, 26029, 26109, 26190,
            26270, 26351, 26432, 26513, 26594,
            26676, 26758, 26840, 26923, 27006,
            27088, 27172, 27255, 27339, 27423,
            27507, 27592, 27677, 27762, 27847,
            27932, 28018, 28104, 28191, 28277,
            28364, 28451, 28539, 28626, 28714,
            28803, 28891, 28980, 29069, 29158,
            29248, 29338, 29428, 29518, 29609,
            29700, 29791, 29883, 29975, 30067,
            30159, 30252, 30345, 30438, 30532,
            30625, 30719, 30814, 30909, 31003,
            31099, 31194, 31290, 31386, 31483,
            31579, 31677, 31774, 31871, 31969,
            32068, 32166, 32265, 32364, 32464,
            32563, 32663, 32764, 32864, 32965,
            33067, 33168, 33270, 33372, 33475,
            33578, 33681, 33785, 33888, 33992,
            34097, 34202, 34307, 34412, 34518,
            34624, 34730, 34837, 34944, 35051,
            35159, 35267, 35376, 35484, 35593,
            35703, 35812, 35922, 36033, 36144,
            36255, 36366, 36478, 36590, 36702,
            36815, 36928, 37042, 37155, 37270,
            37384, 37499, 37614, 37730, 37846,
            37962, 38079, 38196, 38313, 38431,
            38549, 38667, 38786, 38905, 39025,
            39145, 39265, 39386, 39507, 39628,
            39750, 39872, 39994, 40117, 40241,
            40364, 40488, 40613, 40737, 40863,
            40988, 41114, 41240, 41367, 41494,
            41622, 41750, 41878, 42007, 42136,
            42265, 42395, 42525, 42656, 42787,
            42919, 43050, 43183, 43315, 43448,
            43582, 43716, 43850, 43985, 44120,
            44256, 44392, 44528, 44665, 44802,
            44940, 45078, 45216, 45355, 45495,
            45634, 45775, 45915, 46056, 46198,
            46340, 46482, 46625, 46768, 46912,
            47056, 47201, 47346, 47491, 47637,
            47784, 47930, 48078, 48225, 48374,
            48522, 48671, 48821, 48971, 49121,
            49272, 49424, 49576, 49728, 49881,
            50034, 50188, 50342, 50497, 50652,
            50807, 50963, 51120, 51277, 51435,
            51593, 51751, 51910, 52070, 52230,
            52390, 52551, 52713, 52875, 53037,
            53200, 53364, 53528, 53692, 53857,
            54022, 54188, 54355, 54522, 54690,
            54858, 55026, 55195, 55365, 55535,
            55706, 55877, 56048, 56221, 56393,
            56567, 56740, 56915, 57090, 57265,
            57441, 57618, 57795, 57972, 58150,
            58329, 58508, 58688, 58868, 59049,
            59231, 59413, 59595, 59778, 59962,
            60146, 60331, 60516, 60702, 60889,
            61076, 61264, 61452, 61641, 61830,
            62020, 62211, 62402, 62594, 62786,
            62979, 63172, 63366, 63561, 63756,
            63952, 64149, 64346, 64544, 64742,
            64941, 65140, 65341, 65541, 65743,
            65945, 66147, 66351, 66555, 66759,
            66964, 67170, 67376, 67583, 67791,
            67999, 68208, 68418, 68628, 68839,
            69050, 69263, 69475, 69689, 69903,
            70118, 70333, 70549, 70766, 70984,
            71202, 71421, 71640, 71860, 72081,
            72302, 72525, 72747, 72971, 73195,
            73420, 73646, 73872, 74099, 74327,
            74555, 74784, 75014, 75244, 75476,
            75707, 75940, 76173, 76407, 76642,
            76878, 77114, 77351, 77589, 77827,
            78066, 78306, 78547, 78788, 79030,
            79273, 79516, 79761, 80006, 80252,
            80498, 80746, 80994, 81243, 81492,
            81743, 81994, 82246, 82498, 82752,
            83006, 83261, 83517, 83774, 84031,
            84289, 84548, 84808, 85069, 85330,
            85592, 85855, 86119, 86384, 86649,
            86915, 87182, 87450, 87719, 87989,
            88259, 88530, 88802, 89075, 89349,
            89623, 89899, 90175, 90452, 90730,
            91009, 91288, 91569, 91850, 92132,
            92415, 92699, 92984, 93270, 93557,
            93844, 94132, 94422, 94712, 95003,
            95295, 95587, 95881, 96176, 96471,
            96768, 97065, 97363, 97662, 97963,
            98264, 98565, 98868, 99172, 99477,
            99783, 100089, 100397, 100705, 101015,
            101325, 101636, 101949, 102262, 102576,
            102891, 103207, 103525, 103843, 104162,
            104482, 104803, 105125, 105448, 105772,
            106097, 106423, 106750, 107078, 107407,
            107737, 108068, 108400, 108733, 109067,
            109402, 109738, 110076, 110414, 110753,
            111093, 111435, 111777, 112121, 112465,
            112811, 113157, 113505, 113854, 114204,
            114555, 114907, 115260, 115614, 115969,
            116325, 116683, 117041, 117401, 117762,
            118124, 118486, 118851, 119216, 119582,
            119949, 120318, 120688, 121059, 121431,
            121804, 122178, 122553, 122930, 123308,
            123687, 124067, 124448, 124830, 125214,
            125598, 125984, 126371, 126760, 127149,
            127540, 127932, 128325, 128719, 129115,
            129511, 129909, 130309, 130709, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071
         ) ),
        max_error = cms.double(5748.616225984908),
        output_scale_factor = cms.double(0.953125),
        unused_lsbs = cms.uint32(2)
    ),
    inv_mass_checks = cms.untracked.bool(False),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    sanity_checks = cms.untracked.bool(False),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    )
)


process.l1tGTSingleObjectCond = cms.EDFilter("L1GTSingleObjectCond",
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    )
)


process.l1tGTTripleObjectCond = cms.EDFilter("L1GTTripleObjectCond",
    cos_phi_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            487, 487, 487, 487, 487,
            487, 487, 487, 487, 487,
            487, 486, 486, 486, 486,
            486, 486, 486, 485, 485,
            485, 485, 485, 485, 484,
            484, 484, 484, 484, 483,
            483, 483, 483, 483, 482,
            482, 482, 482, 481, 481,
            481, 481, 480, 480, 480,
            480, 479, 479, 479, 478,
            478, 478, 478, 477, 477,
            477, 476, 476, 476, 475,
            475, 475, 474, 474, 474,
            473, 473, 472, 472, 472,
            471, 471, 471, 470, 470,
            469, 469, 468, 468, 468,
            467, 467, 466, 466, 465,
            465, 465, 464, 464, 463,
            463, 462, 462, 461, 461,
            460, 460, 459, 459, 458,
            458, 457, 457, 456, 456,
            455, 454, 454, 453, 453,
            452, 452, 451, 451, 450,
            449, 449, 448, 448, 447,
            446, 446, 445, 445, 444,
            443, 443, 442, 441, 441,
            440, 440, 439, 438, 438,
            437, 436, 436, 435, 434,
            434, 433, 432, 431, 431,
            430, 429, 429, 428, 427,
            426, 426, 425, 424, 423,
            423, 422, 421, 420, 420,
            419, 418, 417, 417, 416,
            415, 414, 413, 413, 412,
            411, 410, 409, 409, 408,
            407, 406, 405, 405, 404,
            403, 402, 401, 400, 399,
            399, 398, 397, 396, 395,
            394, 393, 392, 392, 391,
            390, 389, 388, 387, 386,
            385, 384, 383, 382, 381,
            381, 380, 379, 378, 377,
            376, 375, 374, 373, 372,
            371, 370, 369, 368, 367,
            366, 365, 364, 363, 362,
            361, 360, 359, 358, 357,
            356, 355, 354, 353, 352,
            351, 350, 349, 348, 347,
            346, 345, 343, 342, 341,
            340, 339, 338, 337, 336,
            335, 334, 333, 332, 330,
            329, 328, 327, 326, 325,
            324, 323, 322, 320, 319,
            318, 317, 316, 315, 314,
            312, 311, 310, 309, 308,
            307, 306, 304, 303, 302,
            301, 300, 298, 297, 296,
            295, 294, 293, 291, 290,
            289, 288, 286, 285, 284,
            283, 282, 280, 279, 278,
            277, 275, 274, 273, 272,
            270, 269, 268, 267, 265,
            264, 263, 262, 260, 259,
            258, 257, 255, 254, 253,
            252, 250, 249, 248, 246,
            245, 244, 242, 241, 240,
            239, 237, 236, 235, 233,
            232, 231, 229, 228, 227,
            225, 224, 223, 221, 220,
            219, 217, 216, 215, 213,
            212, 211, 209, 208, 207,
            205, 204, 203, 201, 200,
            198, 197, 196, 194, 193,
            192, 190, 189, 187, 186,
            185, 183, 182, 181, 179,
            178, 176, 175, 174, 172,
            171, 169, 168, 167, 165,
            164, 162, 161, 159, 158,
            157, 155, 154, 152, 151,
            150, 148, 147, 145, 144,
            142, 141, 140, 138, 137,
            135, 134, 132, 131, 129,
            128, 127, 125, 124, 122,
            121, 119, 118, 116, 115,
            113, 112, 111, 109, 108,
            106, 105, 103, 102, 100,
            99, 97, 96, 94, 93,
            92, 90, 89, 87, 86,
            84, 83, 81, 80, 78,
            77, 75, 74, 72, 71,
            69, 68, 66, 65, 63,
            62, 60, 59, 58, 56,
            55, 53, 52, 50, 49,
            47, 46, 44, 43, 41,
            40, 38, 37, 35, 34,
            32, 31, 29, 28, 26,
            25, 23, 22, 20, 19,
            17, 16, 14, 13, 11,
            10, 8, 7, 5, 4,
            2, 1, -1, -2, -4,
            -5, -7, -8, -10, -11,
            -13, -14, -16, -17, -19,
            -20, -22, -23, -25, -26,
            -28, -29, -31, -32, -34,
            -35, -37, -38, -40, -41,
            -43, -44, -46, -47, -49,
            -50, -52, -53, -55, -56,
            -58, -59, -60, -62, -63,
            -65, -66, -68, -69, -71,
            -72, -74, -75, -77, -78,
            -80, -81, -83, -84, -86,
            -87, -89, -90, -92, -93,
            -94, -96, -97, -99, -100,
            -102, -103, -105, -106, -108,
            -109, -111, -112, -113, -115,
            -116, -118, -119, -121, -122,
            -124, -125, -127, -128, -129,
            -131, -132, -134, -135, -137,
            -138, -140, -141, -142, -144,
            -145, -147, -148, -150, -151,
            -152, -154, -155, -157, -158,
            -159, -161, -162, -164, -165,
            -167, -168, -169, -171, -172,
            -174, -175, -176, -178, -179,
            -181, -182, -183, -185, -186,
            -187, -189, -190, -192, -193,
            -194, -196, -197, -198, -200,
            -201, -203, -204, -205, -207,
            -208, -209, -211, -212, -213,
            -215, -216, -217, -219, -220,
            -221, -223, -224, -225, -227,
            -228, -229, -231, -232, -233,
            -235, -236, -237, -239, -240,
            -241, -242, -244, -245, -246,
            -248, -249, -250, -252, -253,
            -254, -255, -257, -258, -259,
            -260, -262, -263, -264, -265,
            -267, -268, -269, -270, -272,
            -273, -274, -275, -277, -278,
            -279, -280, -282, -283, -284,
            -285, -286, -288, -289, -290,
            -291, -293, -294, -295, -296,
            -297, -298, -300, -301, -302,
            -303, -304, -306, -307, -308,
            -309, -310, -311, -312, -314,
            -315, -316, -317, -318, -319,
            -320, -322, -323, -324, -325,
            -326, -327, -328, -329, -330,
            -332, -333, -334, -335, -336,
            -337, -338, -339, -340, -341,
            -342, -343, -345, -346, -347,
            -348, -349, -350, -351, -352,
            -353, -354, -355, -356, -357,
            -358, -359, -360, -361, -362,
            -363, -364, -365, -366, -367,
            -368, -369, -370, -371, -372,
            -373, -374, -375, -376, -377,
            -378, -379, -380, -381, -381,
            -382, -383, -384, -385, -386,
            -387, -388, -389, -390, -391,
            -392, -392, -393, -394, -395,
            -396, -397, -398, -399, -399,
            -400, -401, -402, -403, -404,
            -405, -405, -406, -407, -408,
            -409, -409, -410, -411, -412,
            -413, -413, -414, -415, -416,
            -417, -417, -418, -419, -420,
            -420, -421, -422, -423, -423,
            -424, -425, -426, -426, -427,
            -428, -429, -429, -430, -431,
            -431, -432, -433, -434, -434,
            -435, -436, -436, -437, -438,
            -438, -439, -440, -440, -441,
            -441, -442, -443, -443, -444,
            -445, -445, -446, -446, -447,
            -448, -448, -449, -449, -450,
            -451, -451, -452, -452, -453,
            -453, -454, -454, -455, -456,
            -456, -457, -457, -458, -458,
            -459, -459, -460, -460, -461,
            -461, -462, -462, -463, -463,
            -464, -464, -465, -465, -465,
            -466, -466, -467, -467, -468,
            -468, -468, -469, -469, -470,
            -470, -471, -471, -471, -472,
            -472, -472, -473, -473, -474,
            -474, -474, -475, -475, -475,
            -476, -476, -476, -477, -477,
            -477, -478, -478, -478, -478,
            -479, -479, -479, -480, -480,
            -480, -480, -481, -481, -481,
            -481, -482, -482, -482, -482,
            -483, -483, -483, -483, -483,
            -484, -484, -484, -484, -484,
            -485, -485, -485, -485, -485,
            -485, -486, -486, -486, -486,
            -486, -486, -486, -487, -487,
            -487, -487, -487, -487, -487,
            -487, -487, -487, -487, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488, -488,
            -488, -488, -488, -488
         ) ),
        max_error = cms.double(0.0025338281044886835),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut = cms.PSet(
        lut = cms.vint32( (
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            488, 488, 488, 488, 488,
            489, 489, 489, 489, 489,
            489, 489, 489, 489, 489,
            489, 490, 490, 490, 490,
            490, 490, 490, 491, 491,
            491, 491, 491, 491, 492,
            492, 492, 492, 492, 493,
            493, 493, 493, 493, 494,
            494, 494, 494, 495, 495,
            495, 495, 496, 496, 496,
            496, 497, 497, 497, 498,
            498, 498, 499, 499, 499,
            499, 500, 500, 500, 501,
            501, 502, 502, 502, 503,
            503, 503, 504, 504, 504,
            505, 505, 506, 506, 507,
            507, 507, 508, 508, 509,
            509, 510, 510, 510, 511,
            511, 512, 512, 513, 513,
            514, 514, 515, 515, 516,
            516, 517, 517, 518, 518,
            519, 520, 520, 521, 521,
            522, 522, 523, 523, 524,
            525, 525, 526, 526, 527,
            528, 528, 529, 530, 530,
            531, 531, 532, 533, 533,
            534, 535, 535, 536, 537,
            537, 538, 539, 540, 540,
            541, 542, 542, 543, 544,
            545, 545, 546, 547, 548,
            548, 549, 550, 551, 551,
            552, 553, 554, 555, 555,
            556, 557, 558, 559, 560,
            560, 561, 562, 563, 564,
            565, 566, 567, 567, 568,
            569, 570, 571, 572, 573,
            574, 575, 576, 577, 577,
            578, 579, 580, 581, 582,
            583, 584, 585, 586, 587,
            588, 589, 590, 591, 592,
            593, 594, 595, 596, 598,
            599, 600, 601, 602, 603,
            604, 605, 606, 607, 608,
            610, 611, 612, 613, 614,
            615, 616, 618, 619, 620,
            621, 622, 623, 625, 626,
            627, 628, 629, 631, 632,
            633, 634, 636, 637, 638,
            639, 641, 642, 643, 644,
            646, 647, 648, 650, 651,
            652, 654, 655, 656, 658,
            659, 660, 662, 663, 665,
            666, 667, 669, 670, 672,
            673, 674, 676, 677, 679,
            680, 682, 683, 685, 686,
            687, 689, 690, 692, 693,
            695, 697, 698, 700, 701,
            703, 704, 706, 707, 709,
            710, 712, 714, 715, 717,
            719, 720, 722, 723, 725,
            727, 728, 730, 732, 733,
            735, 737, 738, 740, 742,
            744, 745, 747, 749, 750,
            752, 754, 756, 758, 759,
            761, 763, 765, 767, 768,
            770, 772, 774, 776, 778,
            779, 781, 783, 785, 787,
            789, 791, 793, 795, 796,
            798, 800, 802, 804, 806,
            808, 810, 812, 814, 816,
            818, 820, 822, 824, 826,
            828, 830, 832, 835, 837,
            839, 841, 843, 845, 847,
            849, 851, 854, 856, 858,
            860, 862, 864, 867, 869,
            871, 873, 875, 878, 880,
            882, 884, 887, 889, 891,
            894, 896, 898, 900, 903,
            905, 907, 910, 912, 915,
            917, 919, 922, 924, 927,
            929, 931, 934, 936, 939,
            941, 944, 946, 949, 951,
            954, 956, 959, 961, 964,
            966, 969, 971, 974, 977,
            979, 982, 984, 987, 990,
            992, 995, 998, 1000, 1003,
            1006, 1008, 1011, 1014, 1017,
            1019, 1022, 1025, 1028, 1030,
            1033, 1036, 1039, 1042, 1044,
            1047, 1050, 1053, 1056, 1059,
            1062, 1065, 1067, 1070, 1073,
            1076, 1079, 1082, 1085, 1088,
            1091, 1094, 1097, 1100, 1103,
            1106, 1109, 1112, 1115, 1118,
            1122, 1125, 1128, 1131, 1134,
            1137, 1140, 1143, 1147, 1150,
            1153, 1156, 1159, 1163, 1166,
            1169, 1172, 1176, 1179, 1182,
            1186, 1189, 1192, 1196, 1199,
            1202, 1206, 1209, 1212, 1216,
            1219, 1223, 1226, 1230, 1233,
            1237, 1240, 1244, 1247, 1251,
            1254, 1258, 1261, 1265, 1268,
            1272, 1276, 1279, 1283, 1287,
            1290, 1294, 1298, 1301, 1305,
            1309, 1312, 1316, 1320, 1324,
            1327, 1331, 1335, 1339, 1343,
            1347, 1350, 1354, 1358, 1362,
            1366, 1370, 1374, 1378, 1382,
            1386, 1390, 1394, 1398, 1402,
            1406, 1410, 1414, 1418, 1422,
            1426, 1430, 1434, 1439, 1443,
            1447, 1451, 1455, 1459, 1464,
            1468, 1472, 1476, 1481, 1485,
            1489, 1494, 1498, 1502, 1507,
            1511, 1516, 1520, 1524, 1529,
            1533, 1538, 1542, 1547, 1551,
            1556, 1560, 1565, 1569, 1574,
            1579, 1583, 1588, 1592, 1597,
            1602, 1606, 1611, 1616, 1621,
            1625, 1630, 1635, 1640, 1645,
            1649, 1654, 1659, 1664, 1669,
            1674, 1679, 1684, 1689, 1693,
            1698, 1703, 1708, 1714, 1719,
            1724, 1729, 1734, 1739, 1744,
            1749, 1754, 1760, 1765, 1770,
            1775, 1780, 1786, 1791, 1796,
            1802, 1807, 1812, 1818, 1823,
            1828, 1834, 1839, 1845, 1850,
            1856, 1861, 1867, 1872, 1878,
            1883, 1889, 1894, 1900, 1906,
            1911, 1917, 1923, 1929, 1934,
            1940, 1946, 1952, 1957, 1963,
            1969, 1975, 1981, 1987, 1993,
            1999, 2004, 2010, 2016, 2022,
            2028, 2035, 2041, 2047, 2053,
            2059, 2065, 2071, 2077, 2084,
            2090, 2096, 2102, 2109, 2115,
            2121, 2128, 2134, 2140, 2147,
            2153, 2160, 2166, 2173, 2179,
            2186, 2192, 2199, 2205, 2212,
            2219, 2225, 2232, 2239, 2245,
            2252, 2259, 2266, 2272, 2279,
            2286, 2293, 2300, 2307, 2314,
            2321, 2328, 2335, 2342, 2349,
            2356, 2363, 2370, 2377, 2384,
            2391, 2398, 2406, 2413, 2420,
            2427, 2435, 2442, 2449, 2457,
            2464, 2472, 2479, 2487, 2494,
            2502, 2509, 2517, 2524, 2532,
            2539, 2547, 2555, 2563, 2570,
            2578, 2586, 2594, 2601, 2609,
            2617, 2625, 2633, 2641, 2649,
            2657, 2665, 2673, 2681, 2689,
            2697, 2705, 2714, 2722, 2730,
            2738, 2747, 2755, 2763, 2772,
            2780, 2788, 2797, 2805, 2814,
            2822, 2831, 2839, 2848, 2857,
            2865, 2874, 2883, 2891, 2900,
            2909, 2918, 2927, 2935, 2944,
            2953, 2962, 2971, 2980, 2989,
            2998, 3007, 3016, 3026, 3035,
            3044, 3053, 3062, 3072, 3081,
            3090, 3100, 3109, 3119, 3128,
            3138, 3147, 3157, 3166, 3176,
            3186, 3195, 3205, 3215, 3224,
            3234, 3244, 3254, 3264, 3274,
            3284, 3294, 3304, 3314, 3324,
            3334, 3344, 3354, 3364, 3375,
            3385, 3395, 3405, 3416, 3426,
            3437, 3447, 3458, 3468, 3479,
            3489, 3500, 3510, 3521, 3532,
            3543, 3553, 3564, 3575, 3586,
            3597, 3608, 3619, 3630, 3641,
            3652, 3663, 3674, 3685, 3697,
            3708, 3719, 3730, 3742, 3753,
            3765, 3776, 3788, 3799, 3811,
            3822, 3834, 3846, 3857, 3869,
            3881, 3893, 3905, 3917, 3929,
            3941, 3953, 3965, 3977, 3989,
            4001, 4013, 4025, 4038, 4050,
            4062, 4075, 4087, 4100, 4112,
            4125, 4137, 4150, 4163, 4175,
            4188, 4201, 4214, 4226, 4239,
            4252, 4265, 4278, 4291, 4304,
            4318, 4331, 4344, 4357, 4371,
            4384, 4397, 4411, 4424, 4438,
            4451, 4465, 4479, 4492, 4506,
            4520, 4533, 4547, 4561, 4575,
            4589, 4603, 4617, 4631, 4645,
            4660, 4674, 4688, 4703, 4717,
            4731, 4746, 4760, 4775, 4789,
            4804, 4819, 4833, 4848, 4863,
            4878, 4893, 4908, 4923, 4938,
            4953, 4968, 4983, 4999, 5014,
            5029, 5045, 5060, 5075, 5091,
            5107, 5122, 5138, 5154, 5169,
            5185, 5201, 5217, 5233, 5249,
            5265, 5281, 5297, 5313, 5330,
            5346, 5362, 5379, 5395, 5412,
            5428, 5445, 5462, 5478, 5495,
            5512, 5529, 5546, 5563, 5580,
            5597, 5614, 5631, 5648, 5666,
            5683, 5700, 5718, 5735, 5753,
            5770, 5788, 5806, 5824, 5841,
            5859, 5877, 5895, 5913, 5931,
            5950, 5968, 5986, 6004, 6023,
            6041, 6060, 6078, 6097, 6116,
            6134, 6153, 6172, 6191, 6210,
            6229, 6248, 6267, 6286, 6305,
            6325, 6344, 6364, 6383, 6403,
            6422, 6442, 6462, 6481, 6501,
            6521, 6541, 6561, 6581, 6602,
            6622, 6642, 6662, 6683, 6703,
            6724, 6744, 6765, 6786, 6807,
            6828, 6848, 6869, 6891, 6912,
            6933, 6954, 6975, 6997, 7018,
            7040, 7061, 7083, 7105, 7126,
            7148, 7170, 7192, 7214, 7236,
            7259, 7281, 7303, 7325, 7348,
            7370, 7393, 7416, 7438, 7461,
            7484, 7507, 7530, 7553, 7576,
            7600, 7623, 7646, 7670, 7693,
            7717, 7741, 7764, 7788, 7812,
            7836, 7860, 7884, 7908, 7932,
            7957, 7981, 8006, 8030, 8055,
            8080, 8104, 8129, 8154, 8179,
            8204, 8229, 8255, 8280, 8305,
            8331, 8356, 8382, 8408, 8434,
            8459, 8485, 8511, 8537, 8564,
            8590, 8616, 8643, 8669, 8696,
            8722, 8749, 8776, 8803, 8830,
            8857, 8884, 8912, 8939, 8966,
            8994, 9021, 9049, 9077, 9105,
            9133, 9161, 9189, 9217, 9245,
            9274, 9302, 9331, 9359, 9388,
            9417, 9446, 9475, 9504, 9533,
            9562, 9591, 9621, 9650, 9680,
            9710, 9740, 9769, 9799, 9830,
            9860, 9890, 9920, 9951, 9981,
            10012, 10043, 10073, 10104, 10135,
            10166, 10198, 10229, 10260, 10292,
            10323, 10355, 10387, 10419, 10451,
            10483, 10515, 10547, 10580, 10612,
            10645, 10677, 10710, 10743, 10776,
            10809, 10842, 10876, 10909, 10942,
            10976, 11010, 11044, 11077, 11111,
            11146, 11180, 11214, 11248, 11283,
            11318, 11352, 11387, 11422, 11457,
            11492, 11528, 11563, 11599, 11634,
            11670, 11706, 11742, 11778, 11814,
            11850, 11887, 11923, 11960, 11996,
            12033, 12070, 12107, 12144, 12182,
            12219, 12257, 12294, 12332, 12370,
            12408, 12446, 12484, 12522, 12561,
            12599, 12638, 12677, 12716, 12755,
            12794, 12833, 12873, 12912, 12952,
            12992, 13032, 13072, 13112, 13152,
            13192, 13233, 13274, 13314, 13355,
            13396, 13437, 13479, 13520, 13561,
            13603, 13645, 13687, 13729, 13771,
            13813, 13856, 13898, 13941, 13984,
            14027, 14070, 14113, 14156, 14200,
            14243, 14287, 14331, 14375, 14419,
            14463, 14508, 14552, 14597, 14642,
            14687, 14732, 14777, 14823, 14868,
            14914, 14960, 15005, 15052, 15098,
            15144, 15191, 15237, 15284, 15331,
            15378, 15425, 15473, 15520, 15568,
            15616, 15664, 15712, 15760, 15808,
            15857, 15906, 15955, 16004, 16053,
            16102, 16151, 16201, 16251, 16301,
            16351, 16401, 16451, 16502, 16553,
            16603, 16654, 16706, 16757, 16808,
            16860, 16912, 16964, 17016, 17068,
            17121, 17173, 17226, 17279, 17332,
            17385, 17438, 17492, 17546, 17600,
            17654, 17708, 17762, 17817, 17872,
            17926, 17982, 18037, 18092, 18148,
            18203, 18259, 18315, 18372, 18428,
            18485, 18542, 18598, 18656, 18713,
            18770, 18828, 18886, 18944, 19002,
            19060, 19119, 19178, 19237, 19296,
            19355, 19414, 19474, 19534, 19594,
            19654, 19714, 19775, 19836, 19897,
            19958, 20019, 20081, 20142, 20204,
            20266, 20328, 20391, 20454, 20516,
            20579, 20643, 20706, 20770, 20833,
            20897, 20962, 21026, 21091, 21155,
            21220, 21286, 21351, 21417, 21482,
            21548, 21615, 21681, 21748, 21814,
            21881, 21949, 22016, 22084, 22151,
            22220, 22288, 22356, 22425, 22494,
            22563, 22632, 22702, 22771, 22841,
            22912, 22982, 23053, 23123, 23194,
            23266, 23337, 23409, 23481, 23553,
            23625, 23698, 23771, 23844, 23917,
            23990, 24064, 24138, 24212, 24287,
            24361, 24436, 24511, 24586, 24662,
            24738, 24814, 24890, 24966, 25043,
            25120, 25197, 25275, 25352, 25430,
            25508, 25587, 25665, 25744, 25823,
            25902, 25982, 26062, 26142, 26222,
            26303, 26384, 26465, 26546, 26627,
            26709, 26791, 26874, 26956, 27039,
            27122, 27205, 27289, 27373, 27457,
            27541, 27626, 27711, 27796, 27881,
            27967, 28053, 28139, 28226, 28312,
            28399, 28486, 28574, 28662, 28750,
            28838, 28927, 29016, 29105, 29194,
            29284, 29374, 29464, 29555, 29645,
            29736, 29828, 29919, 30011, 30104,
            30196, 30289, 30382, 30475, 30569,
            30663, 30757, 30851, 30946, 31041,
            31137, 31232, 31328, 31425, 31521,
            31618, 31715, 31813, 31910, 32008,
            32107, 32205, 32304, 32403, 32503,
            32603, 32703, 32804, 32904, 33005,
            33107, 33209, 33311, 33413, 33516,
            33619, 33722, 33825, 33929, 34034,
            34138, 34243, 34348, 34454, 34560,
            34666, 34772, 34879, 34986, 35094,
            35202, 35310, 35418, 35527, 35636,
            35746, 35856, 35966, 36076, 36187,
            36298, 36410, 36522, 36634, 36746,
            36859, 36973, 37086, 37200, 37314,
            37429, 37544, 37659, 37775, 37891,
            38008, 38124, 38241, 38359, 38477,
            38595, 38714, 38833, 38952, 39072,
            39192, 39312, 39433, 39554, 39675,
            39797, 39920, 40042, 40165, 40289,
            40413, 40537, 40661, 40786, 40911,
            41037, 41163, 41290, 41417, 41544,
            41671, 41800, 41928, 42057, 42186,
            42316, 42446, 42576, 42707, 42838,
            42970, 43102, 43234, 43367, 43500,
            43634, 43768, 43902, 44037, 44173,
            44308, 44444, 44581, 44718, 44855,
            44993, 45131, 45270, 45409, 45549,
            45689, 45829, 45970, 46111, 46253,
            46395, 46537, 46680, 46824, 46968,
            47112, 47257, 47402, 47548, 47694,
            47840, 47987, 48135, 48283, 48431,
            48580, 48729, 48879, 49029, 49180,
            49331, 49482, 49634, 49787, 49940,
            50093, 50247, 50401, 50556, 50712,
            50867, 51024, 51181, 51338, 51495,
            51654, 51812, 51972, 52131, 52291,
            52452, 52613, 52775, 52937, 53100,
            53263, 53427, 53591, 53755, 53921,
            54086, 54252, 54419, 54586, 54754,
            54922, 55091, 55260, 55430, 55600,
            55771, 55943, 56114, 56287, 56460,
            56633, 56807, 56982, 57157, 57333,
            57509, 57685, 57863, 58040, 58219,
            58398, 58577, 58757, 58938, 59119,
            59300, 59483, 59665, 59849, 60033,
            60217, 60402, 60588, 60774, 60960,
            61148, 61336, 61524, 61713, 61903,
            62093, 62284, 62475, 62667, 62860,
            63053, 63247, 63441, 63636, 63831,
            64027, 64224, 64422, 64619, 64818,
            65017, 65217, 65417, 65618, 65820,
            66022, 66225, 66429, 66633, 66837,
            67043, 67249, 67455, 67663, 67870,
            68079, 68288, 68498, 68708, 68920,
            69131, 69344, 69557, 69771, 69985,
            70200, 70416, 70632, 70849, 71067,
            71285, 71504, 71724, 71944, 72165,
            72387, 72609, 72833, 73056, 73281,
            73506, 73732, 73958, 74186, 74414,
            74642, 74872, 75102, 75332, 75564,
            75796, 76029, 76262, 76497, 76732,
            76968, 77204, 77441, 77679, 77918,
            78157, 78398, 78638, 78880, 79122,
            79366, 79609, 79854, 80099, 80345,
            80592, 80840, 81088, 81338, 81587,
            81838, 82090, 82342, 82595, 82849,
            83103, 83358, 83615, 83872, 84129,
            84388, 84647, 84907, 85168, 85430,
            85692, 85955, 86220, 86485, 86750,
            87017, 87284, 87552, 87821, 88091,
            88362, 88633, 88906, 89179, 89453,
            89728, 90003, 90280, 90557, 90836,
            91115, 91395, 91676, 91957, 92240,
            92523, 92807, 93093, 93379, 93666,
            93953, 94242, 94532, 94822, 95113,
            95406, 95699, 95993, 96288, 96584,
            96881, 97178, 97477, 97776, 98077,
            98378, 98680, 98984, 99288, 99593,
            99899, 100206, 100514, 100822, 101132,
            101443, 101755, 102067, 102381, 102696,
            103011, 103328, 103645, 103964, 104283,
            104603, 104925, 105247, 105571, 105895,
            106220, 106547, 106874, 107203, 107532,
            107862, 108194, 108526, 108860, 109194,
            109530, 109866, 110204, 110542, 110882,
            111223, 111565, 111907, 112251, 112596,
            112942, 113289, 113637, 113986, 114337,
            114688, 115040, 115394, 115748, 116104,
            116461, 116819, 117178, 117538, 117899,
            118261, 118624, 118989, 119354, 119721,
            120089, 120458, 120828, 121199, 121572,
            121945, 122320, 122696, 123073, 123451,
            123830, 124211, 124593, 124975, 125359,
            125745, 126131, 126518, 126907, 127297,
            127688, 128081, 128474, 128869, 129265,
            129662, 130061, 130260
         ) ),
        max_error = cms.double(0.6152529479288091),
        output_scale_factor = cms.double(488),
        unused_lsbs = cms.uint32(2)
    ),
    cosh_eta_lut2 = cms.PSet(
        lut = cms.vint32( (
            256, 256, 257, 258, 259,
            260, 260, 261, 262, 263,
            264, 264, 265, 266, 267,
            268, 268, 269, 270, 271,
            272, 273, 273, 274, 275,
            276, 277, 278, 279, 279,
            280, 281, 282, 283, 284,
            285, 285, 286, 287, 288,
            289, 290, 291, 292, 293,
            293, 294, 295, 296, 297,
            298, 299, 300, 301, 302,
            303, 303, 304, 305, 306,
            307, 308, 309, 310, 311,
            312, 313, 314, 315, 316,
            317, 318, 319, 320, 321,
            322, 323, 324, 325, 326,
            327, 328, 329, 330, 331,
            332, 333, 334, 335, 336,
            337, 338, 339, 340, 341,
            342, 343, 344, 345, 346,
            347, 348, 349, 351, 352,
            353, 354, 355, 356, 357,
            358, 359, 360, 361, 363,
            364, 365, 366, 367, 368,
            369, 370, 372, 373, 374,
            375, 376, 377, 379, 380,
            381, 382, 383, 384, 386,
            387, 388, 389, 390, 392,
            393, 394, 395, 396, 398,
            399, 400, 401, 402, 404,
            405, 406, 407, 409, 410,
            411, 412, 414, 415, 416,
            418, 419, 420, 421, 423,
            424, 425, 427, 428, 429,
            431, 432, 433, 435, 436,
            437, 439, 440, 441, 443,
            444, 445, 447, 448, 449,
            451, 452, 454, 455, 456,
            458, 459, 461, 462, 463,
            465, 466, 468, 469, 471,
            472, 474, 475, 476, 478,
            479, 481, 482, 484, 485,
            487, 488, 490, 491, 493,
            494, 496, 497, 499, 500,
            502, 503, 505, 507, 508,
            510, 511, 513, 514, 516,
            518, 519, 521, 522, 524,
            526, 527, 529, 530, 532,
            534, 535, 537, 539, 540,
            542, 544, 545, 547, 549,
            550, 552, 554, 555, 557,
            559, 561, 562, 564, 566,
            567, 569, 571, 573, 575,
            576, 578, 580, 582, 583,
            585, 587, 589, 591, 592,
            594, 596, 598, 600, 602,
            603, 605, 607, 609, 611,
            613, 615, 617, 618, 620,
            622, 624, 626, 628, 630,
            632, 634, 636, 638, 640,
            642, 644, 646, 648, 650,
            652, 654, 656, 658, 660,
            662, 664, 666, 668, 670,
            672, 674, 676, 678, 680,
            682, 684, 686, 688, 691,
            693, 695, 697, 699, 701,
            703, 706, 708, 710, 712,
            714, 717, 719, 721, 723,
            725, 728, 730, 732, 734,
            737, 739, 741, 743, 746,
            748, 750, 753, 755, 757,
            760, 762, 764, 767, 769,
            771, 774, 776, 778, 781,
            783, 786, 788, 790, 793,
            795, 798, 800, 803, 805,
            808, 810, 813, 815, 818,
            820, 823, 825, 828, 830,
            833, 835, 838, 840, 843,
            846, 848, 851, 853, 856,
            859, 861, 864, 867, 869,
            872, 875, 877, 880, 883,
            885, 888, 891, 894, 896,
            899, 902, 905, 907, 910,
            913, 916, 919, 921, 924,
            927, 930, 933, 936, 939,
            941, 944, 947, 950, 953,
            956, 959, 962, 965, 968,
            971, 974, 977, 980, 983,
            986, 989, 992, 995, 998,
            1001, 1004, 1007, 1010, 1013,
            1017, 1020, 1023, 1026, 1029,
            1032, 1035, 1039, 1042, 1045,
            1048, 1051, 1055, 1058, 1061,
            1064, 1068, 1071, 1074, 1078,
            1081, 1084, 1088, 1091, 1094,
            1098, 1101, 1104, 1108, 1111,
            1115, 1118, 1121, 1125, 1128,
            1132, 1135, 1139, 1142, 1146,
            1149, 1153, 1156, 1160, 1163,
            1167, 1171, 1174, 1178, 1181,
            1185, 1189, 1192, 1196, 1200,
            1203, 1207, 1211, 1214, 1218,
            1222, 1226, 1229, 1233, 1237,
            1241, 1245, 1249, 1252, 1256,
            1260, 1264, 1268, 1272, 1276,
            1280, 1283, 1287, 1291, 1295,
            1299, 1303, 1307, 1311, 1315,
            1319, 1323, 1328, 1332, 1336,
            1340, 1344, 1348, 1352, 1356,
            1360, 1365, 1369, 1373, 1377,
            1382, 1386, 1390, 1394, 1399,
            1403, 1407, 1412, 1416, 1420,
            1425, 1429, 1433, 1438, 1442,
            1447, 1451, 1455, 1460, 1464,
            1469, 1473, 1478, 1483, 1487,
            1492, 1496, 1501, 1505, 1510,
            1515, 1519, 1524, 1529, 1533,
            1538, 1543, 1548, 1552, 1557,
            1562, 1567, 1572, 1576, 1581,
            1586, 1591, 1596, 1601, 1606,
            1611, 1616, 1620, 1625, 1630,
            1635, 1640, 1646, 1651, 1656,
            1661, 1666, 1671, 1676, 1681,
            1686, 1692, 1697, 1702, 1707,
            1712, 1718, 1723, 1728, 1734,
            1739, 1744, 1750, 1755, 1760,
            1766, 1771, 1777, 1782, 1788,
            1793, 1799, 1804, 1810, 1815,
            1821, 1826, 1832, 1838, 1843,
            1849, 1855, 1860, 1866, 1872,
            1878, 1883, 1889, 1895, 1901,
            1907, 1912, 1918, 1924, 1930,
            1936, 1942, 1948, 1954, 1960,
            1966, 1972, 1978, 1984, 1990,
            1996, 2003, 2009, 2015, 2021,
            2027, 2033, 2040, 2046, 2052,
            2059, 2065, 2071, 2078, 2084,
            2090, 2097, 2103, 2110, 2116,
            2123, 2129, 2136, 2142, 2149,
            2156, 2162, 2169, 2175, 2182,
            2189, 2196, 2202, 2209, 2216,
            2223, 2230, 2236, 2243, 2250,
            2257, 2264, 2271, 2278, 2285,
            2292, 2299, 2306, 2313, 2320,
            2327, 2335, 2342, 2349, 2356,
            2363, 2371, 2378, 2385, 2393,
            2400, 2407, 2415, 2422, 2430,
            2437, 2444, 2452, 2460, 2467,
            2475, 2482, 2490, 2498, 2505,
            2513, 2521, 2528, 2536, 2544,
            2552, 2560, 2567, 2575, 2583,
            2591, 2599, 2607, 2615, 2623,
            2631, 2639, 2647, 2656, 2664,
            2672, 2680, 2688, 2697, 2705,
            2713, 2722, 2730, 2738, 2747,
            2755, 2764, 2772, 2781, 2789,
            2798, 2806, 2815, 2824, 2832,
            2841, 2850, 2858, 2867, 2876,
            2885, 2894, 2903, 2912, 2921,
            2930, 2939, 2948, 2957, 2966,
            2975, 2984, 2993, 3002, 3012,
            3021, 3030, 3039, 3049, 3058,
            3067, 3077, 3086, 3096, 3105,
            3115, 3124, 3134, 3144, 3153,
            3163, 3173, 3183, 3192, 3202,
            3212, 3222, 3232, 3242, 3252,
            3262, 3272, 3282, 3292, 3302,
            3312, 3322, 3332, 3343, 3353,
            3363, 3374, 3384, 3394, 3405,
            3415, 3426, 3436, 3447, 3457,
            3468, 3479, 3489, 3500, 3511,
            3522, 3532, 3543, 3554, 3565,
            3576, 3587, 3598, 3609, 3620,
            3631, 3642, 3654, 3665, 3676,
            3687, 3699, 3710, 3722, 3733,
            3744, 3756, 3767, 3779, 3791,
            3802, 3814, 3826, 3837, 3849,
            3861, 3873, 3885, 3897, 3909,
            3921, 3933, 3945, 3957, 3969,
            3981, 3994, 4006, 4018, 4031,
            4043, 4055, 4068, 4080, 4093,
            4105, 4118, 4131, 4143, 4156,
            4169, 4182, 4195, 4207, 4220,
            4233, 4246, 4259, 4272, 4286,
            4299, 4312, 4325, 4339, 4352,
            4365, 4379, 4392, 4406, 4419,
            4433, 4446, 4460, 4474, 4487,
            4501, 4515, 4529, 4543, 4557,
            4571, 4585, 4599, 4613, 4627,
            4641, 4656, 4670, 4684, 4699,
            4713, 4728, 4742, 4757, 4771,
            4786, 4801, 4816, 4830, 4845,
            4860, 4875, 4890, 4905, 4920,
            4935, 4950, 4966, 4981, 4996,
            5011, 5027, 5042, 5058, 5073,
            5089, 5105, 5120, 5136, 5152,
            5168, 5183, 5199, 5215, 5231,
            5247, 5264, 5280, 5296, 5312,
            5329, 5345, 5361, 5378, 5394,
            5411, 5428, 5444, 5461, 5478,
            5495, 5512, 5528, 5545, 5562,
            5580, 5597, 5614, 5631, 5648,
            5666, 5683, 5701, 5718, 5736,
            5753, 5771, 5789, 5807, 5824,
            5842, 5860, 5878, 5896, 5914,
            5933, 5951, 5969, 5987, 6006,
            6024, 6043, 6061, 6080, 6099,
            6117, 6136, 6155, 6174, 6193,
            6212, 6231, 6250, 6269, 6289,
            6308, 6327, 6347, 6366, 6386,
            6406, 6425, 6445, 6465, 6485,
            6505, 6525, 6545, 6565, 6585,
            6605, 6625, 6646, 6666, 6687,
            6707, 6728, 6749, 6769, 6790,
            6811, 6832, 6853, 6874, 6895,
            6916, 6937, 6959, 6980, 7002,
            7023, 7045, 7066, 7088, 7110,
            7132, 7154, 7176, 7198, 7220,
            7242, 7264, 7286, 7309, 7331,
            7354, 7376, 7399, 7422, 7445,
            7468, 7490, 7513, 7537, 7560,
            7583, 7606, 7630, 7653, 7677,
            7700, 7724, 7748, 7771, 7795,
            7819, 7843, 7867, 7892, 7916,
            7940, 7964, 7989, 8014, 8038,
            8063, 8088, 8112, 8137, 8162,
            8187, 8213, 8238, 8263, 8289,
            8314, 8340, 8365, 8391, 8417,
            8443, 8468, 8495, 8521, 8547,
            8573, 8599, 8626, 8652, 8679,
            8706, 8732, 8759, 8786, 8813,
            8840, 8867, 8895, 8922, 8949,
            8977, 9004, 9032, 9060, 9088,
            9116, 9144, 9172, 9200, 9228,
            9256, 9285, 9313, 9342, 9371,
            9400, 9428, 9457, 9486, 9516,
            9545, 9574, 9604, 9633, 9663,
            9692, 9722, 9752, 9782, 9812,
            9842, 9872, 9903, 9933, 9964,
            9994, 10025, 10056, 10087, 10118,
            10149, 10180, 10211, 10243, 10274,
            10306, 10337, 10369, 10401, 10433,
            10465, 10497, 10529, 10562, 10594,
            10627, 10659, 10692, 10725, 10758,
            10791, 10824, 10858, 10891, 10924,
            10958, 10992, 11025, 11059, 11093,
            11127, 11161, 11196, 11230, 11265,
            11299, 11334, 11369, 11404, 11439,
            11474, 11509, 11545, 11580, 11616,
            11651, 11687, 11723, 11759, 11795,
            11831, 11868, 11904, 11941, 11978,
            12014, 12051, 12088, 12125, 12163,
            12200, 12238, 12275, 12313, 12351,
            12389, 12427, 12465, 12503, 12542,
            12580, 12619, 12658, 12696, 12735,
            12775, 12814, 12853, 12893, 12932,
            12972, 13012, 13052, 13092, 13132,
            13173, 13213, 13254, 13294, 13335,
            13376, 13417, 13459, 13500, 13541,
            13583, 13625, 13667, 13709, 13751,
            13793, 13835, 13878, 13920, 13963,
            14006, 14049, 14092, 14136, 14179,
            14223, 14266, 14310, 14354, 14398,
            14443, 14487, 14531, 14576, 14621,
            14666, 14711, 14756, 14801, 14847,
            14892, 14938, 14984, 15030, 15076,
            15123, 15169, 15216, 15263, 15309,
            15356, 15404, 15451, 15498, 15546,
            15594, 15642, 15690, 15738, 15786,
            15835, 15884, 15932, 15981, 16030,
            16080, 16129, 16179, 16228, 16278,
            16328, 16378, 16429, 16479, 16530,
            16581, 16632, 16683, 16734, 16785,
            16837, 16889, 16941, 16993, 17045,
            17097, 17150, 17202, 17255, 17308,
            17361, 17415, 17468, 17522, 17576,
            17630, 17684, 17738, 17793, 17848,
            17902, 17957, 18013, 18068, 18123,
            18179, 18235, 18291, 18347, 18404,
            18460, 18517, 18574, 18631, 18688,
            18746, 18803, 18861, 18919, 18977,
            19035, 19094, 19152, 19211, 19270,
            19330, 19389, 19448, 19508, 19568,
            19628, 19689, 19749, 19810, 19871,
            19932, 19993, 20054, 20116, 20178,
            20240, 20302, 20364, 20427, 20490,
            20553, 20616, 20679, 20743, 20806,
            20870, 20935, 20999, 21063, 21128,
            21193, 21258, 21323, 21389, 21455,
            21521, 21587, 21653, 21720, 21786,
            21853, 21920, 21988, 22055, 22123,
            22191, 22259, 22328, 22396, 22465,
            22534, 22603, 22673, 22742, 22812,
            22882, 22953, 23023, 23094, 23165,
            23236, 23308, 23379, 23451, 23523,
            23595, 23668, 23741, 23814, 23887,
            23960, 24034, 24108, 24182, 24256,
            24330, 24405, 24480, 24555, 24631,
            24707, 24783, 24859, 24935, 25012,
            25089, 25166, 25243, 25320, 25398,
            25476, 25555, 25633, 25712, 25791,
            25870, 25950, 26029, 26109, 26190,
            26270, 26351, 26432, 26513, 26594,
            26676, 26758, 26840, 26923, 27006,
            27088, 27172, 27255, 27339, 27423,
            27507, 27592, 27677, 27762, 27847,
            27932, 28018, 28104, 28191, 28277,
            28364, 28451, 28539, 28626, 28714,
            28803, 28891, 28980, 29069, 29158,
            29248, 29338, 29428, 29518, 29609,
            29700, 29791, 29883, 29975, 30067,
            30159, 30252, 30345, 30438, 30532,
            30625, 30719, 30814, 30909, 31003,
            31099, 31194, 31290, 31386, 31483,
            31579, 31677, 31774, 31871, 31969,
            32068, 32166, 32265, 32364, 32464,
            32563, 32663, 32764, 32864, 32965,
            33067, 33168, 33270, 33372, 33475,
            33578, 33681, 33785, 33888, 33992,
            34097, 34202, 34307, 34412, 34518,
            34624, 34730, 34837, 34944, 35051,
            35159, 35267, 35376, 35484, 35593,
            35703, 35812, 35922, 36033, 36144,
            36255, 36366, 36478, 36590, 36702,
            36815, 36928, 37042, 37155, 37270,
            37384, 37499, 37614, 37730, 37846,
            37962, 38079, 38196, 38313, 38431,
            38549, 38667, 38786, 38905, 39025,
            39145, 39265, 39386, 39507, 39628,
            39750, 39872, 39994, 40117, 40241,
            40364, 40488, 40613, 40737, 40863,
            40988, 41114, 41240, 41367, 41494,
            41622, 41750, 41878, 42007, 42136,
            42265, 42395, 42525, 42656, 42787,
            42919, 43050, 43183, 43315, 43448,
            43582, 43716, 43850, 43985, 44120,
            44256, 44392, 44528, 44665, 44802,
            44940, 45078, 45216, 45355, 45495,
            45634, 45775, 45915, 46056, 46198,
            46340, 46482, 46625, 46768, 46912,
            47056, 47201, 47346, 47491, 47637,
            47784, 47930, 48078, 48225, 48374,
            48522, 48671, 48821, 48971, 49121,
            49272, 49424, 49576, 49728, 49881,
            50034, 50188, 50342, 50497, 50652,
            50807, 50963, 51120, 51277, 51435,
            51593, 51751, 51910, 52070, 52230,
            52390, 52551, 52713, 52875, 53037,
            53200, 53364, 53528, 53692, 53857,
            54022, 54188, 54355, 54522, 54690,
            54858, 55026, 55195, 55365, 55535,
            55706, 55877, 56048, 56221, 56393,
            56567, 56740, 56915, 57090, 57265,
            57441, 57618, 57795, 57972, 58150,
            58329, 58508, 58688, 58868, 59049,
            59231, 59413, 59595, 59778, 59962,
            60146, 60331, 60516, 60702, 60889,
            61076, 61264, 61452, 61641, 61830,
            62020, 62211, 62402, 62594, 62786,
            62979, 63172, 63366, 63561, 63756,
            63952, 64149, 64346, 64544, 64742,
            64941, 65140, 65341, 65541, 65743,
            65945, 66147, 66351, 66555, 66759,
            66964, 67170, 67376, 67583, 67791,
            67999, 68208, 68418, 68628, 68839,
            69050, 69263, 69475, 69689, 69903,
            70118, 70333, 70549, 70766, 70984,
            71202, 71421, 71640, 71860, 72081,
            72302, 72525, 72747, 72971, 73195,
            73420, 73646, 73872, 74099, 74327,
            74555, 74784, 75014, 75244, 75476,
            75707, 75940, 76173, 76407, 76642,
            76878, 77114, 77351, 77589, 77827,
            78066, 78306, 78547, 78788, 79030,
            79273, 79516, 79761, 80006, 80252,
            80498, 80746, 80994, 81243, 81492,
            81743, 81994, 82246, 82498, 82752,
            83006, 83261, 83517, 83774, 84031,
            84289, 84548, 84808, 85069, 85330,
            85592, 85855, 86119, 86384, 86649,
            86915, 87182, 87450, 87719, 87989,
            88259, 88530, 88802, 89075, 89349,
            89623, 89899, 90175, 90452, 90730,
            91009, 91288, 91569, 91850, 92132,
            92415, 92699, 92984, 93270, 93557,
            93844, 94132, 94422, 94712, 95003,
            95295, 95587, 95881, 96176, 96471,
            96768, 97065, 97363, 97662, 97963,
            98264, 98565, 98868, 99172, 99477,
            99783, 100089, 100397, 100705, 101015,
            101325, 101636, 101949, 102262, 102576,
            102891, 103207, 103525, 103843, 104162,
            104482, 104803, 105125, 105448, 105772,
            106097, 106423, 106750, 107078, 107407,
            107737, 108068, 108400, 108733, 109067,
            109402, 109738, 110076, 110414, 110753,
            111093, 111435, 111777, 112121, 112465,
            112811, 113157, 113505, 113854, 114204,
            114555, 114907, 115260, 115614, 115969,
            116325, 116683, 117041, 117401, 117762,
            118124, 118486, 118851, 119216, 119582,
            119949, 120318, 120688, 121059, 121431,
            121804, 122178, 122553, 122930, 123308,
            123687, 124067, 124448, 124830, 125214,
            125598, 125984, 126371, 126760, 127149,
            127540, 127932, 128325, 128719, 129115,
            129511, 129909, 130309, 130709, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071, 131071, 131071,
            131071, 131071, 131071
         ) ),
        max_error = cms.double(5748.616225984908),
        output_scale_factor = cms.double(0.953125),
        unused_lsbs = cms.uint32(2)
    ),
    inv_mass_checks = cms.untracked.bool(False),
    primVertTag = cms.InputTag("l1tGTProducer","GTTPrimaryVert"),
    sanity_checks = cms.untracked.bool(False),
    scales = cms.PSet(
        beta_lsb = cms.double(0.0625),
        eta_lsb = cms.double(0.0007669903939428206),
        isolationPT_lsb = cms.double(0.25),
        mass_lsb = cms.double(0.25),
        neg_chg = cms.int32(1),
        pT_lsb = cms.double(0.03125),
        phi_lsb = cms.double(0.0007669903939428206),
        pos_chg = cms.int32(0),
        scalarSumPT_lsb = cms.double(0.03125),
        seed_pT_lsb = cms.double(0.25),
        seed_z0_lsb = cms.double(0.05859375),
        sum_pT_pv_lsb = cms.double(0.25),
        z0_lsb = cms.double(0.000390625)
    )
)


process.l1tPFPuppiHT400offMaxEta2p4 = cms.EDFilter("L1TEnergySumFilter",
    MinPt = cms.double(400.0),
    Scalings = cms.PSet(
        theScalings = cms.vdouble(50.0182, 1.0961, 0)
    ),
    TypeOfSum = cms.string('HT'),
    inputTag = cms.InputTag("l1tPhase1JetSumsProducer9x9trimmed","Sums")
)


process.l1tPFPuppiHT450off = cms.EDFilter("L1TEnergySumFilter",
    MinPt = cms.double(450.0),
    Scalings = cms.PSet(
        theScalings = cms.vdouble(50.0182, 1.0961, 0)
    ),
    TypeOfSum = cms.string('HT'),
    inputTag = cms.InputTag("l1tPhase1JetSumsProducer9x9trimmed","Sums")
)


process.l1tPFPuppiMET220off = cms.EDFilter("L1TEnergySumFilter",
    MinPt = cms.double(220.0),
    Scalings = cms.PSet(
        theScalings = cms.vdouble(54.2859, 1.39739, 0)
    ),
    TypeOfSum = cms.string('MET'),
    inputTag = cms.InputTag("l1tMETPFProducer")
)


process.l1tSinglePFPuppiJet230off = cms.EDFilter("L1TJetFilter",
    MaxEta = cms.double(5.0),
    MinEta = cms.double(-5.0),
    MinN = cms.int32(1),
    MinPt = cms.double(230.0),
    Scalings = cms.PSet(
        barrel = cms.vdouble(11.1254, 1.40627, 0),
        endcap = cms.vdouble(42.4039, 1.33052, 0),
        overlap = cms.vdouble(24.8375, 1.4152, 0)
    ),
    inputTag = cms.InputTag("l1tPhase1JetCalibrator9x9trimmed","Phase1L1TJetFromPfCandidates")
)


process.l1tTkEleDouble12Filter = cms.EDFilter("L1TTkEleFilter",
    ApplyQual1 = cms.bool(True),
    ApplyQual2 = cms.bool(True),
    EtaBinsForIsolation = cms.vdouble(0.0, 1.479, 2.4),
    MaxAbsEta1 = cms.double(1.479),
    MaxAbsEta2 = cms.double(2.4),
    MinAbsEta1 = cms.double(0.0),
    MinAbsEta2 = cms.double(1.479),
    MinN = cms.int32(2),
    MinPt = cms.double(12.0),
    Qual1IsMask = cms.bool(True),
    Qual2IsMask = cms.bool(True),
    Quality1 = cms.int32(2),
    Quality2 = cms.int32(2),
    Scalings = cms.PSet(
        barrel = cms.vdouble(0.805095, 1.18336, 0.0),
        endcap = cms.vdouble(0.453144, 1.26205, 0.0)
    ),
    TrkIsolation = cms.vdouble(99999.0, 99999.0),
    inputTag1 = cms.InputTag("l1tLayer1EG","L1TkEleEB"),
    inputTag2 = cms.InputTag("l1tLayer1EG","L1TkEleEE"),
    saveTags = cms.bool(True)
)


process.l1tTkEleSingle25Filter = cms.EDFilter("L1TTkEleFilter",
    ApplyQual1 = cms.bool(True),
    ApplyQual2 = cms.bool(True),
    EtaBinsForIsolation = cms.vdouble(0.0, 1.479, 2.4),
    MaxAbsEta1 = cms.double(1.479),
    MaxAbsEta2 = cms.double(2.4),
    MinAbsEta1 = cms.double(0.0),
    MinAbsEta2 = cms.double(1.479),
    MinN = cms.int32(1),
    MinPt = cms.double(25.0),
    Qual1IsMask = cms.bool(True),
    Qual2IsMask = cms.bool(True),
    Quality1 = cms.int32(2),
    Quality2 = cms.int32(2),
    Scalings = cms.PSet(
        barrel = cms.vdouble(0.805095, 1.18336, 0.0),
        endcap = cms.vdouble(0.453144, 1.26205, 0.0)
    ),
    TrkIsolation = cms.vdouble(99999.0, 99999.0),
    inputTag1 = cms.InputTag("l1tLayer1EG","L1TkEleEB"),
    inputTag2 = cms.InputTag("l1tLayer1EG","L1TkEleEE"),
    saveTags = cms.bool(True)
)


process.l1tTkEleSingle36Filter = cms.EDFilter("L1TTkEleFilter",
    ApplyQual1 = cms.bool(True),
    ApplyQual2 = cms.bool(True),
    EtaBinsForIsolation = cms.vdouble(0.0, 1.479, 2.4),
    MaxAbsEta1 = cms.double(1.479),
    MaxAbsEta2 = cms.double(2.4),
    MinAbsEta1 = cms.double(0.0),
    MinAbsEta2 = cms.double(1.479),
    MinN = cms.int32(1),
    MinPt = cms.double(36.0),
    Qual1IsMask = cms.bool(True),
    Qual2IsMask = cms.bool(True),
    Quality1 = cms.int32(2),
    Quality2 = cms.int32(2),
    Scalings = cms.PSet(
        barrel = cms.vdouble(0.805095, 1.18336, 0.0),
        endcap = cms.vdouble(0.453144, 1.26205, 0.0)
    ),
    TrkIsolation = cms.vdouble(99999.0, 99999.0),
    inputTag1 = cms.InputTag("l1tLayer1EG","L1TkEleEB"),
    inputTag2 = cms.InputTag("l1tLayer1EG","L1TkEleEE"),
    saveTags = cms.bool(True)
)


process.l1tTkEmDouble12Filter = cms.EDFilter("L1TTkEmFilter",
    ApplyQual1 = cms.bool(True),
    ApplyQual2 = cms.bool(True),
    EtaBinsForIsolation = cms.vdouble(0.0, 1.479, 2.4),
    MaxAbsEta1 = cms.double(1.479),
    MaxAbsEta2 = cms.double(2.4),
    MinAbsEta1 = cms.double(0.0),
    MinAbsEta2 = cms.double(1.479),
    MinN = cms.int32(2),
    MinPt = cms.double(12.0),
    Qual1IsMask = cms.bool(True),
    Qual2IsMask = cms.bool(True),
    Quality1 = cms.int32(2),
    Quality2 = cms.int32(4),
    Scalings = cms.PSet(
        barrel = cms.vdouble(2.6604, 1.06077, 0.0),
        endcap = cms.vdouble(3.17445, 1.13219, 0.0)
    ),
    TrkIsolation = cms.vdouble(99999.0, 99999.0),
    inputTag1 = cms.InputTag("l1tLayer1EG","L1TkEmEB"),
    inputTag2 = cms.InputTag("l1tLayer1EG","L1TkEmEE"),
    saveTags = cms.bool(True)
)


process.l1tTkEmDouble24Filter = cms.EDFilter("L1TTkEmFilter",
    ApplyQual1 = cms.bool(True),
    ApplyQual2 = cms.bool(True),
    EtaBinsForIsolation = cms.vdouble(0.0, 1.479, 2.4),
    MaxAbsEta1 = cms.double(1.479),
    MaxAbsEta2 = cms.double(2.4),
    MinAbsEta1 = cms.double(0.0),
    MinAbsEta2 = cms.double(1.479),
    MinN = cms.int32(2),
    MinPt = cms.double(24.0),
    Qual1IsMask = cms.bool(True),
    Qual2IsMask = cms.bool(True),
    Quality1 = cms.int32(2),
    Quality2 = cms.int32(4),
    Scalings = cms.PSet(
        barrel = cms.vdouble(2.6604, 1.06077, 0.0),
        endcap = cms.vdouble(3.17445, 1.13219, 0.0)
    ),
    TrkIsolation = cms.vdouble(99999.0, 99999.0),
    inputTag1 = cms.InputTag("l1tLayer1EG","L1TkEmEB"),
    inputTag2 = cms.InputTag("l1tLayer1EG","L1TkEmEE"),
    saveTags = cms.bool(True)
)


process.l1tTkEmSingle37Filter = cms.EDFilter("L1TTkEmFilter",
    ApplyQual1 = cms.bool(True),
    ApplyQual2 = cms.bool(True),
    EtaBinsForIsolation = cms.vdouble(0.0, 1.479, 2.4),
    MaxAbsEta1 = cms.double(1.479),
    MaxAbsEta2 = cms.double(2.4),
    MinAbsEta1 = cms.double(0.0),
    MinAbsEta2 = cms.double(1.479),
    MinN = cms.int32(1),
    MinPt = cms.double(37.0),
    Qual1IsMask = cms.bool(True),
    Qual2IsMask = cms.bool(True),
    Quality1 = cms.int32(2),
    Quality2 = cms.int32(4),
    Scalings = cms.PSet(
        barrel = cms.vdouble(2.6604, 1.06077, 0.0),
        endcap = cms.vdouble(3.17445, 1.13219, 0.0)
    ),
    TrkIsolation = cms.vdouble(99999.0, 99999.0),
    inputTag1 = cms.InputTag("l1tLayer1EG","L1TkEmEB"),
    inputTag2 = cms.InputTag("l1tLayer1EG","L1TkEmEE"),
    saveTags = cms.bool(True)
)


process.l1tTkEmSingle51Filter = cms.EDFilter("L1TTkEmFilter",
    ApplyQual1 = cms.bool(True),
    ApplyQual2 = cms.bool(True),
    EtaBinsForIsolation = cms.vdouble(0.0, 1.479, 2.4),
    MaxAbsEta1 = cms.double(1.479),
    MaxAbsEta2 = cms.double(2.4),
    MinAbsEta1 = cms.double(0.0),
    MinAbsEta2 = cms.double(1.479),
    MinN = cms.int32(1),
    MinPt = cms.double(51.0),
    Qual1IsMask = cms.bool(True),
    Qual2IsMask = cms.bool(True),
    Quality1 = cms.int32(2),
    Quality2 = cms.int32(4),
    Scalings = cms.PSet(
        barrel = cms.vdouble(2.6604, 1.06077, 0.0),
        endcap = cms.vdouble(3.17445, 1.13219, 0.0)
    ),
    TrkIsolation = cms.vdouble(99999.0, 99999.0),
    inputTag1 = cms.InputTag("l1tLayer1EG","L1TkEmEB"),
    inputTag2 = cms.InputTag("l1tLayer1EG","L1TkEmEE"),
    saveTags = cms.bool(True)
)


process.l1tTkIsoEleSingle22Filter = cms.EDFilter("L1TTkEleFilter",
    ApplyQual1 = cms.bool(True),
    ApplyQual2 = cms.bool(True),
    EtaBinsForIsolation = cms.vdouble(0.0, 1.479, 2.4),
    MaxAbsEta1 = cms.double(1.479),
    MaxAbsEta2 = cms.double(2.4),
    MinAbsEta1 = cms.double(0.0),
    MinAbsEta2 = cms.double(1.479),
    MinN = cms.int32(1),
    MinPt = cms.double(22.0),
    Qual1IsMask = cms.bool(True),
    Qual2IsMask = cms.bool(True),
    Quality1 = cms.int32(2),
    Quality2 = cms.int32(2),
    Scalings = cms.PSet(
        barrel = cms.vdouble(0.434262, 1.20586, 0.0),
        endcap = cms.vdouble(0.266186, 1.25976, 0.0)
    ),
    TrkIsolation = cms.vdouble(0.12, 0.2),
    inputTag1 = cms.InputTag("l1tLayer1EG","L1TkEleEB"),
    inputTag2 = cms.InputTag("l1tLayer1EG","L1TkEleEE"),
    saveTags = cms.bool(True)
)


process.l1tTkIsoEleSingle28Filter = cms.EDFilter("L1TTkEleFilter",
    ApplyQual1 = cms.bool(True),
    ApplyQual2 = cms.bool(True),
    EtaBinsForIsolation = cms.vdouble(0.0, 1.479, 2.4),
    MaxAbsEta1 = cms.double(1.479),
    MaxAbsEta2 = cms.double(2.4),
    MinAbsEta1 = cms.double(0.0),
    MinAbsEta2 = cms.double(1.479),
    MinN = cms.int32(1),
    MinPt = cms.double(28.0),
    Qual1IsMask = cms.bool(True),
    Qual2IsMask = cms.bool(True),
    Quality1 = cms.int32(2),
    Quality2 = cms.int32(2),
    Scalings = cms.PSet(
        barrel = cms.vdouble(0.434262, 1.20586, 0.0),
        endcap = cms.vdouble(0.266186, 1.25976, 0.0)
    ),
    TrkIsolation = cms.vdouble(0.12, 0.2),
    inputTag1 = cms.InputTag("l1tLayer1EG","L1TkEleEB"),
    inputTag2 = cms.InputTag("l1tLayer1EG","L1TkEleEE"),
    saveTags = cms.bool(True)
)


process.l1tTkIsoEmDouble12Filter = cms.EDFilter("L1TTkEmFilter",
    ApplyQual1 = cms.bool(True),
    ApplyQual2 = cms.bool(True),
    EtaBinsForIsolation = cms.vdouble(0.0, 1.479, 2.4),
    MaxAbsEta1 = cms.double(1.479),
    MaxAbsEta2 = cms.double(2.4),
    MinAbsEta1 = cms.double(0.0),
    MinAbsEta2 = cms.double(1.479),
    MinN = cms.int32(2),
    MinPt = cms.double(12.0),
    Qual1IsMask = cms.bool(True),
    Qual2IsMask = cms.bool(True),
    Quality1 = cms.int32(2),
    Quality2 = cms.int32(4),
    Scalings = cms.PSet(
        barrel = cms.vdouble(2.54255, 1.08749, 0.0),
        endcap = cms.vdouble(2.11186, 1.15524, 0.0)
    ),
    TrkIsolation = cms.vdouble(0.35, 0.28),
    inputTag1 = cms.InputTag("l1tLayer1EG","L1TkEmEB"),
    inputTag2 = cms.InputTag("l1tLayer1EG","L1TkEmEE"),
    saveTags = cms.bool(True)
)


process.l1tTkIsoEmSingle22Filter = cms.EDFilter("L1TTkEmFilter",
    ApplyQual1 = cms.bool(True),
    ApplyQual2 = cms.bool(True),
    EtaBinsForIsolation = cms.vdouble(0.0, 1.479, 2.4),
    MaxAbsEta1 = cms.double(1.479),
    MaxAbsEta2 = cms.double(2.4),
    MinAbsEta1 = cms.double(0.0),
    MinAbsEta2 = cms.double(1.479),
    MinN = cms.int32(1),
    MinPt = cms.double(22.0),
    Qual1IsMask = cms.bool(True),
    Qual2IsMask = cms.bool(True),
    Quality1 = cms.int32(2),
    Quality2 = cms.int32(4),
    Scalings = cms.PSet(
        barrel = cms.vdouble(2.54255, 1.08749, 0.0),
        endcap = cms.vdouble(2.11186, 1.15524, 0.0)
    ),
    TrkIsolation = cms.vdouble(0.35, 0.28),
    inputTag1 = cms.InputTag("l1tLayer1EG","L1TkEmEB"),
    inputTag2 = cms.InputTag("l1tLayer1EG","L1TkEmEE"),
    saveTags = cms.bool(True)
)


process.l1tTkIsoEmSingle36Filter = cms.EDFilter("L1TTkEmFilter",
    ApplyQual1 = cms.bool(True),
    ApplyQual2 = cms.bool(True),
    EtaBinsForIsolation = cms.vdouble(0.0, 1.479, 2.4),
    MaxAbsEta1 = cms.double(1.479),
    MaxAbsEta2 = cms.double(2.4),
    MinAbsEta1 = cms.double(0.0),
    MinAbsEta2 = cms.double(1.479),
    MinN = cms.int32(1),
    MinPt = cms.double(36.0),
    Qual1IsMask = cms.bool(True),
    Qual2IsMask = cms.bool(True),
    Quality1 = cms.int32(2),
    Quality2 = cms.int32(4),
    Scalings = cms.PSet(
        barrel = cms.vdouble(2.54255, 1.08749, 0.0),
        endcap = cms.vdouble(2.11186, 1.15524, 0.0)
    ),
    TrkIsolation = cms.vdouble(0.35, 0.28),
    inputTag1 = cms.InputTag("l1tLayer1EG","L1TkEmEB"),
    inputTag2 = cms.InputTag("l1tLayer1EG","L1TkEmEE"),
    saveTags = cms.bool(True)
)


process.hltTrigReport = cms.EDAnalyzer("HLTrigReport",
    HLTriggerResults = cms.InputTag("TriggerResults","","MYHLT"),
    ReferencePath = cms.untracked.string('HLTriggerFinalPath'),
    ReferenceRate = cms.untracked.double(100.0),
    reportBy = cms.untracked.string('job'),
    resetBy = cms.untracked.string('never'),
    serviceBy = cms.untracked.string('never')
)


process.ntupler = cms.EDAnalyzer("MuonHLTNtupler",
    DebugMode = cms.bool(False),
    L1Muon = cms.untracked.InputTag("simGmtStage2Digis","","MYHLT"),
    L1TrackInputTag = cms.InputTag("l1tTTTracksFromTrackletEmulation","Level1TTTracks"),
    L2Muon = cms.untracked.InputTag("hltL2MuonFromL1TkMuonCandidates","","MYHLT"),
    L3Muon = cms.untracked.InputTag("hltPhase2L3MuonCandidates","","MYHLT"),
    PUSummaryInfo = cms.untracked.InputTag("addPileupInfo"),
    SaveAllTracks = cms.bool(True),
    TkMuon = cms.untracked.InputTag("hltHighPtTkMuonCands","","MYHLT"),
    TkMuonToken = cms.InputTag("l1tTkMuonsGmt"),
    associationLabels = cms.untracked.VInputTag(
        "AhltPhase2L3OIMuonTrackSelectionHighPurity", "AhltIter0Phase2L3FromL1TkMuonTrackSelectionHighPurity", "AhltIter2Phase2L3FromL1TkMuonTrackSelectionHighPurity", "AhltIter2Phase2L3FromL1TkMuonMerged", "AhltPhase2L3MuonsNoID",
        "AhltPhase2L3Muons"
    ),
    associator = cms.untracked.InputTag("hltTrackAssociatorByHits"),
    doMVA = cms.bool(True),
    doSeed = cms.bool(False),
    genEventInfo = cms.untracked.InputTag("generator"),
    genParticle = cms.untracked.InputTag("genParticles"),
    hltIter0IterL3FromL1MuonPixelSeedsFromPixelTracks = cms.untracked.InputTag("hltIter0Phase2L3FromL1TkMuonPixelSeedsFromPixelTracks","","MYHLT"),
    hltIter0IterL3FromL1MuonTrack = cms.untracked.InputTag("hltIter0Phase2L3FromL1TkMuonTrackSelectionHighPurity","","MYHLT"),
    hltIter0IterL3MuonPixelSeedsFromPixelTracks = cms.untracked.InputTag("hltIter0IterL3MuonPixelSeedsFromPixelTracks","","MYHLT"),
    hltIter0IterL3MuonTrack = cms.untracked.InputTag("hltIter0IterL3MuonTrackSelectionHighPurity","","MYHLT"),
    hltIter2IterL3FromL1MuonPixelSeeds = cms.untracked.InputTag("hltIter2Phase2L3FromL1TkMuonPixelSeeds","","MYHLT"),
    hltIter2IterL3FromL1MuonTrack = cms.untracked.InputTag("hltIter2Phase2L3FromL1TkMuonTrackSelectionHighPurity","","MYHLT"),
    hltIter2IterL3MuonPixelSeeds = cms.untracked.InputTag("hltIter2IterL3MuonPixelSeeds","","MYHLT"),
    hltIter2IterL3MuonTrack = cms.untracked.InputTag("hltIter2IterL3MuonTrackSelectionHighPurity","","MYHLT"),
    hltIter3IterL3FromL1MuonPixelSeeds = cms.untracked.InputTag("hltIter3IterL3FromL1MuonPixelSeeds","","MYHLT"),
    hltIter3IterL3FromL1MuonTrack = cms.untracked.InputTag("hltIter3IterL3FromL1MuonTrackSelectionHighPurity","","MYHLT"),
    hltIter3IterL3MuonPixelSeeds = cms.untracked.InputTag("hltIter3IterL3MuonPixelSeeds","","MYHLT"),
    hltIter3IterL3MuonTrack = cms.untracked.InputTag("hltIter3IterL3MuonTrackSelectionHighPurity","","MYHLT"),
    hltIterL3FromL1MuonTrimmedPixelVertices = cms.untracked.InputTag("hltPhase2L3FromL1TkMuonTrimmedPixelVertices","","MYHLT"),
    hltIterL3MuonTrimmedPixelVertices = cms.untracked.InputTag("hltIterL3MuonTrimmedPixelVertices","","MYHLT"),
    hltIterL3OIMuonTrack = cms.untracked.InputTag("hltPhase2L3OIMuonTrackSelectionHighPurity","","MYHLT"),
    hltIterL3OISeedsFromL2Muons = cms.untracked.InputTag("hltPhase2L3OISeedsFromL2Muons","","MYHLT"),
    iterL3FromL2 = cms.untracked.InputTag("hltIterL3MuonsFromL2LinksCombination","","MYHLT"),
    iterL3IOFromL1 = cms.untracked.InputTag("hltIter2Phase2L3FromL1TkMuonMerged","","MYHLT"),
    iterL3IOFromL2 = cms.untracked.InputTag("hltL3MuonsIterL3IO","","MYHLT"),
    iterL3Muon = cms.untracked.InputTag("hltPhase2L3Muons","","MYHLT"),
    iterL3MuonNoID = cms.untracked.InputTag("hltPhase2L3MuonsNoID","","MYHLT"),
    iterL3OI = cms.untracked.InputTag("hltL3MuonsPhase2L3OI","","MYHLT"),
    l1PrimaryVertex = cms.InputTag("l1tVertexFinderEmulator","L1VerticesEmulation"),
    lumiScaler = cms.untracked.InputTag("hltScalersRawToDigi","","MYHLT"),
    mvaFileHltIter2IterL3FromL1MuonPixelSeeds_B_0 = cms.untracked.FileInPath('RecoMuon/TrackerSeedGenerator/data/xgb_Phase2_Iter2FromL1_barrel_v0.xml'),
    mvaFileHltIter2IterL3FromL1MuonPixelSeeds_E_0 = cms.untracked.FileInPath('RecoMuon/TrackerSeedGenerator/data/xgb_Phase2_Iter2FromL1_endcap_v0.xml'),
    mvaScaleMeanHltIter2IterL3FromL1MuonPixelSeeds_B = cms.untracked.vdouble(
        0.00033113700731766336, 1.6825601468762878e-06, 1.790932122524803e-06, 0.010534608406382916, 0.005969459957330139,
        0.0009605022254971113, 0.04384189672781466, 7.846741237608237e-05, 0.40725050850004824, 0.41125151617410227,
        0.39815551065544846
    ),
    mvaScaleMeanHltIter2IterL3FromL1MuonPixelSeeds_E = cms.untracked.vdouble(
        0.00022658482374555603, 5.358921973784045e-07, 1.010003713549798e-06, 0.0007886873612224615, 0.001197730548842408,
        -0.0030252353426003594, 0.07151944804171254, -0.0006940626775109026, 0.20535152195939896, 0.2966816533783824,
        0.28798220230180455
    ),
    mvaScaleStdHltIter2IterL3FromL1MuonPixelSeeds_B = cms.untracked.vdouble(
        0.0006042948363798624, 2.445644111872427e-06, 3.454992543447134e-06, 0.09401581628887255, 0.7978806947573766,
        0.4932933044535928, 0.04180518265631776, 0.058296511682094855, 0.4071857009373577, 0.41337782307392973,
        0.4101160349549534
    ),
    mvaScaleStdHltIter2IterL3FromL1MuonPixelSeeds_E = cms.untracked.vdouble(
        0.0003857726789049956, 1.4853721474087994e-06, 6.982997036736564e-06, 0.04071340757666084, 0.5897606560095399,
        0.33052121398064654, 0.05589386786541949, 0.08806273533388546, 0.3254586902665612, 0.3293354496231377,
        0.3179899794578072
    ),
    myTriggerEvent = cms.untracked.InputTag("hltTriggerSummaryAOD","","MYHLT"),
    myTriggerResults = cms.untracked.InputTag("TriggerResults","","MYHLT"),
    offlineLumiScaler = cms.untracked.InputTag("scalersRawToDigi"),
    offlineMuon = cms.untracked.InputTag("slimmedMuons"),
    offlineVertex = cms.untracked.InputTag("offlinePrimaryVertices"),
    pfIsoLabels = cms.untracked.VInputTag(),
    pfIsoTags = cms.untracked.vstring(),
    trackCollectionLabels = cms.untracked.VInputTag(
        "hltPhase2L3OIMuonTrackSelectionHighPurity", "hltIter0Phase2L3FromL1TkMuonTrackSelectionHighPurity", "hltIter2Phase2L3FromL1TkMuonTrackSelectionHighPurity", "hltIter2Phase2L3FromL1TkMuonMerged", "hltPhase2L3MuonsNoIDTracks",
        "hltPhase2L3MuonsTracks"
    ),
    trackCollectionNames = cms.untracked.vstring(
        'hltPhase2L3OI',
        'hltIter0Phase2L3FromL1TkMuon',
        'hltIter2Phase2L3FromL1TkMuon',
        'hltPhase2L3IOFromL1',
        'hltPhase2L3MuonsNoID',
        'hltPhase2L3Muons'
    ),
    trackingParticle = cms.untracked.InputTag("mix","MergedTrackTruth"),
    triggerEvent = cms.untracked.InputTag("hltTriggerSummaryAOD","","HLT"),
    triggerResults = cms.untracked.InputTag("TriggerResults","","HLT"),
    trkIsoLabels = cms.untracked.VInputTag(),
    trkIsoTags = cms.untracked.vstring()
)


process.seedNtupler = cms.EDAnalyzer("MuonHLTSeedNtupler",
    L1Muon = cms.untracked.InputTag("simGmtStage2Digis","","MYHLT"),
    L1PrimaryVertex = cms.untracked.InputTag("l1tVertexFinderEmulator","L1VerticesEmulation","MYHLT"),
    L1TkMuon = cms.untracked.InputTag("l1tTkMuonsGmt"),
    L1TrackInputTag = cms.InputTag("TTTracksFromTrackletEmulation","","MYHLT"),
    L2Muon = cms.untracked.InputTag("hltL2MuonFromL1TkMuonCandidates","","MYHLT"),
    PUSummaryInfo = cms.untracked.InputTag("addPileupInfo"),
    associator = cms.untracked.InputTag("hltTrackAssociatorByHits"),
    genParticle = cms.untracked.InputTag("genParticles"),
    hltIter0IterL3FromL1MuonPixelSeedsFromPixelTracks = cms.untracked.InputTag("hltIter0Phase2L3FromL1TkMuonPixelSeedsFromPixelTracks","","MYHLT"),
    hltIter0IterL3FromL1MuonTrack = cms.untracked.InputTag("hltIter0Phase2L3FromL1TkMuonTrackSelectionHighPurity","","MYHLT"),
    hltIter0IterL3MuonPixelSeedsFromPixelTracks = cms.untracked.InputTag("hltIter0IterL3MuonPixelSeedsFromPixelTracks","","MYHLT"),
    hltIter0IterL3MuonTrack = cms.untracked.InputTag("hltIter0IterL3MuonTrackSelectionHighPurity","","MYHLT"),
    hltIter2IterL3FromL1MuonPixelSeeds = cms.untracked.InputTag("hltIter2Phase2L3FromL1TkMuonPixelSeeds","","MYHLT"),
    hltIter2IterL3FromL1MuonTrack = cms.untracked.InputTag("hltIter2Phase2L3FromL1TkMuonTrackSelectionHighPurity","","MYHLT"),
    hltIter2IterL3MuonPixelSeeds = cms.untracked.InputTag("hltIter2IterL3MuonPixelSeeds","","MYHLT"),
    hltIter2IterL3MuonTrack = cms.untracked.InputTag("hltIter2IterL3MuonTrackSelectionHighPurity","","MYHLT"),
    hltIter3IterL3FromL1MuonPixelSeeds = cms.untracked.InputTag("hltIter3IterL3FromL1MuonPixelSeeds","","MYHLT"),
    hltIter3IterL3FromL1MuonTrack = cms.untracked.InputTag("hltIter3IterL3FromL1MuonTrackSelectionHighPurity","","MYHLT"),
    hltIter3IterL3MuonPixelSeeds = cms.untracked.InputTag("hltIter3IterL3MuonPixelSeeds","","MYHLT"),
    hltIter3IterL3MuonTrack = cms.untracked.InputTag("hltIter3IterL3MuonTrackSelectionHighPurity","","MYHLT"),
    hltIterL3OIMuonTrack = cms.untracked.InputTag("hltPhase2L3OIMuonTrackSelectionHighPurity","","MYHLT"),
    hltIterL3OISeedsFromL2Muons = cms.untracked.InputTag("hltPhase2L3OISeedsFromL2Muons","","MYHLT"),
    mvaFileHltIter2IterL3FromL1MuonPixelSeeds_B_0 = cms.FileInPath('RecoMuon/TrackerSeedGenerator/data/xgb_Phase2_Iter2FromL1_barrel_v0.xml'),
    mvaFileHltIter2IterL3FromL1MuonPixelSeeds_E_0 = cms.FileInPath('RecoMuon/TrackerSeedGenerator/data/xgb_Phase2_Iter2FromL1_endcap_v0.xml'),
    mvaScaleMeanHltIter2IterL3FromL1MuonPixelSeeds_B = cms.vdouble(
        0.00033113700731766336, 1.6825601468762878e-06, 1.790932122524803e-06, 0.010534608406382916, 0.005969459957330139,
        0.0009605022254971113, 0.04384189672781466, 7.846741237608237e-05, 0.40725050850004824, 0.41125151617410227,
        0.39815551065544846
    ),
    mvaScaleMeanHltIter2IterL3FromL1MuonPixelSeeds_E = cms.vdouble(
        0.00022658482374555603, 5.358921973784045e-07, 1.010003713549798e-06, 0.0007886873612224615, 0.001197730548842408,
        -0.0030252353426003594, 0.07151944804171254, -0.0006940626775109026, 0.20535152195939896, 0.2966816533783824,
        0.28798220230180455
    ),
    mvaScaleStdHltIter2IterL3FromL1MuonPixelSeeds_B = cms.vdouble(
        0.0006042948363798624, 2.445644111872427e-06, 3.454992543447134e-06, 0.09401581628887255, 0.7978806947573766,
        0.4932933044535928, 0.04180518265631776, 0.058296511682094855, 0.4071857009373577, 0.41337782307392973,
        0.4101160349549534
    ),
    mvaScaleStdHltIter2IterL3FromL1MuonPixelSeeds_E = cms.vdouble(
        0.0003857726789049956, 1.4853721474087994e-06, 6.982997036736564e-06, 0.04071340757666084, 0.5897606560095399,
        0.33052121398064654, 0.05589386786541949, 0.08806273533388546, 0.3254586902665612, 0.3293354496231377,
        0.3179899794578072
    ),
    offlineVertex = cms.untracked.InputTag("offlinePrimaryVertices"),
    trackingParticle = cms.untracked.InputTag("mix","MergedTrackTruth")
)


process.DQMStore = cms.Service("DQMStore")


process.FastTimerService = cms.Service("FastTimerService",
    dqmLumiSectionsRange = cms.untracked.uint32(2500),
    dqmMemoryRange = cms.untracked.double(1000000),
    dqmMemoryResolution = cms.untracked.double(5000),
    dqmModuleMemoryRange = cms.untracked.double(100000),
    dqmModuleMemoryResolution = cms.untracked.double(500),
    dqmModuleTimeRange = cms.untracked.double(4000.0),
    dqmModuleTimeResolution = cms.untracked.double(0.2),
    dqmPath = cms.untracked.string('HLT/TimerService'),
    dqmPathMemoryRange = cms.untracked.double(1000000),
    dqmPathMemoryResolution = cms.untracked.double(5000),
    dqmPathTimeRange = cms.untracked.double(15000.0),
    dqmPathTimeResolution = cms.untracked.double(0.5),
    dqmTimeRange = cms.untracked.double(15000.0),
    dqmTimeResolution = cms.untracked.double(1.0),
    enableDQM = cms.untracked.bool(False),
    enableDQMTransitions = cms.untracked.bool(False),
    enableDQMbyLumiSection = cms.untracked.bool(False),
    enableDQMbyModule = cms.untracked.bool(False),
    enableDQMbyPath = cms.untracked.bool(False),
    enableDQMbyProcesses = cms.untracked.bool(False),
    highlightModules = cms.untracked.VPSet(),
    jsonFileName = cms.untracked.string('Phase2Timing_resources.json'),
    printEventSummary = cms.untracked.bool(False),
    printJobSummary = cms.untracked.bool(True),
    printRunSummary = cms.untracked.bool(False),
    writeJSONSummary = cms.untracked.bool(True)
)


process.MessageLogger = cms.Service("MessageLogger",
    cerr = cms.untracked.PSet(
        FwkReport = cms.untracked.PSet(
            limit = cms.untracked.int32(10000000),
            reportEvery = cms.untracked.int32(1)
        ),
        FwkSummary = cms.untracked.PSet(
            limit = cms.untracked.int32(10000000),
            reportEvery = cms.untracked.int32(1)
        ),
        INFO = cms.untracked.PSet(
            limit = cms.untracked.int32(0)
        ),
        Root_NoDictionary = cms.untracked.PSet(
            limit = cms.untracked.int32(0)
        ),
        default = cms.untracked.PSet(
            limit = cms.untracked.int32(10000000)
        ),
        enable = cms.untracked.bool(True),
        enableStatistics = cms.untracked.bool(False),
        lineLength = cms.optional.untracked.int32,
        noLineBreaks = cms.optional.untracked.bool,
        noTimeStamps = cms.untracked.bool(False),
        resetStatistics = cms.untracked.bool(False),
        statisticsThreshold = cms.untracked.string('WARNING'),
        threshold = cms.untracked.string('INFO'),
        allowAnyLabel_=cms.optional.untracked.PSetTemplate(
            limit = cms.optional.untracked.int32,
            reportEvery = cms.untracked.int32(1),
            timespan = cms.optional.untracked.int32
        )
    ),
    cout = cms.untracked.PSet(
        enable = cms.untracked.bool(False),
        enableStatistics = cms.untracked.bool(False),
        lineLength = cms.optional.untracked.int32,
        noLineBreaks = cms.optional.untracked.bool,
        noTimeStamps = cms.optional.untracked.bool,
        resetStatistics = cms.untracked.bool(False),
        statisticsThreshold = cms.optional.untracked.string,
        threshold = cms.optional.untracked.string,
        allowAnyLabel_=cms.optional.untracked.PSetTemplate(
            limit = cms.optional.untracked.int32,
            reportEvery = cms.untracked.int32(1),
            timespan = cms.optional.untracked.int32
        )
    ),
    debugModules = cms.untracked.vstring(),
    default = cms.untracked.PSet(
        limit = cms.optional.untracked.int32,
        lineLength = cms.untracked.int32(80),
        noLineBreaks = cms.untracked.bool(False),
        noTimeStamps = cms.untracked.bool(False),
        reportEvery = cms.untracked.int32(1),
        statisticsThreshold = cms.untracked.string('INFO'),
        threshold = cms.untracked.string('INFO'),
        timespan = cms.optional.untracked.int32,
        allowAnyLabel_=cms.optional.untracked.PSetTemplate(
            limit = cms.optional.untracked.int32,
            reportEvery = cms.untracked.int32(1),
            timespan = cms.optional.untracked.int32
        )
    ),
    files = cms.untracked.PSet(
        allowAnyLabel_=cms.optional.untracked.PSetTemplate(
            enableStatistics = cms.untracked.bool(False),
            extension = cms.optional.untracked.string,
            filename = cms.optional.untracked.string,
            lineLength = cms.optional.untracked.int32,
            noLineBreaks = cms.optional.untracked.bool,
            noTimeStamps = cms.optional.untracked.bool,
            output = cms.optional.untracked.string,
            resetStatistics = cms.untracked.bool(False),
            statisticsThreshold = cms.optional.untracked.string,
            threshold = cms.optional.untracked.string,
            allowAnyLabel_=cms.optional.untracked.PSetTemplate(
                limit = cms.optional.untracked.int32,
                reportEvery = cms.untracked.int32(1),
                timespan = cms.optional.untracked.int32
            )
        )
    ),
    suppressDebug = cms.untracked.vstring(),
    suppressFwkInfo = cms.untracked.vstring(),
    suppressInfo = cms.untracked.vstring(),
    suppressWarning = cms.untracked.vstring(),
    allowAnyLabel_=cms.optional.untracked.PSetTemplate(
        limit = cms.optional.untracked.int32,
        reportEvery = cms.untracked.int32(1),
        timespan = cms.optional.untracked.int32
    )
)


process.RandomNumberGeneratorService = cms.Service("RandomNumberGeneratorService",
    CTPPSFastRecHits = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(1357987)
    ),
    LHCTransport = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(87654321)
    ),
    MuonSimHits = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(987346)
    ),
    RPSiDetDigitizer = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(137137)
    ),
    RPixDetDigitizer = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(137137)
    ),
    VtxSmeared = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(98765432)
    ),
    ecalBarrelClusterFastTimer = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(1234567)
    ),
    ecalPreshowerRecHit = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(6541321)
    ),
    ecalRecHit = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(654321)
    ),
    externalLHEProducer = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(234567)
    ),
    famosPileUp = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(918273)
    ),
    fastSimProducer = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(13579)
    ),
    fastTrackerRecHits = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(24680)
    ),
    g4SimHits = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(11)
    ),
    generator = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(123456789)
    ),
    gsfTrackTimeValueMapProducer = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(1234567)
    ),
    hbhereco = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(541321)
    ),
    hfreco = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(541321)
    ),
    hiSignal = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(123456789)
    ),
    hiSignalG4SimHits = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(11)
    ),
    hiSignalLHCTransport = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(88776655)
    ),
    horeco = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(541321)
    ),
    l1ParamMuons = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(6453209)
    ),
    mix = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(12345)
    ),
    mixData = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(12345)
    ),
    mixGenPU = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(918273)
    ),
    mixRecoTracks = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(918273)
    ),
    mixSimCaloHits = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(918273)
    ),
    paramMuons = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(54525)
    ),
    saveFileName = cms.untracked.string(''),
    simBeamSpotFilter = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(87654321)
    ),
    simMuonCSCDigis = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(11223344)
    ),
    simMuonDTDigis = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(1234567)
    ),
    simMuonGEMDigis = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(1234567)
    ),
    simMuonME0Digis = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(1234567)
    ),
    simMuonME0PseudoDigis = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(1234567)
    ),
    simMuonME0PseudoReDigis = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(7654321)
    ),
    simMuonME0PseudoReDigisCoarse = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(2234567)
    ),
    simMuonRPCDigis = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(1234567)
    ),
    simSiStripDigiSimLink = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(1234567)
    ),
    trackTimeValueMapProducer = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(1234567)
    )
)


process.SimpleMemoryCheck = cms.Service("SimpleMemoryCheck",
    jobReportOutputOnly = cms.untracked.bool(True)
)


process.TFileService = cms.Service("TFileService",
    closeFileFast = cms.untracked.bool(False),
    fileName = cms.string('seedNtuple_D110Geo_DYToLL.root')
)


process.ThroughputService = cms.Service("ThroughputService",
    enableDQM = cms.untracked.bool(False),
    eventRange = cms.untracked.uint32(1000),
    eventResolution = cms.untracked.uint32(50),
    printEventSummary = cms.untracked.bool(True)
)


process.Timing = cms.Service("Timing",
    summaryOnly = cms.untracked.bool(True)
)


process.ProcessAcceleratorAlpaka = ProcessAcceleratorAlpaka()


process.ProcessAcceleratorCUDA = ProcessAcceleratorCUDA()


process.ProcessAcceleratorROCm = ProcessAcceleratorROCm()


process.AnyDirectionAnalyticalPropagator = cms.ESProducer("AnalyticalPropagatorESProducer",
    ComponentName = cms.string('AnyDirectionAnalyticalPropagator'),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('anyDirection')
)


process.CSCChannelMapperESProducer = cms.ESProducer("CSCChannelMapperESProducer",
    AlgoName = cms.string('CSCChannelMapperPostls1')
)


process.CSCGeometryESModule = cms.ESProducer("CSCGeometryESModule",
    alignmentsLabel = cms.string(''),
    appendToDataLabel = cms.string(''),
    applyAlignment = cms.bool(True),
    debugV = cms.untracked.bool(False),
    fromDD4hep = cms.bool(False),
    fromDDD = cms.bool(True),
    useCentreTIOffsets = cms.bool(False),
    useGangedStripsInME1a = cms.bool(False),
    useOnlyWiresInME1a = cms.bool(False),
    useRealWireGeometry = cms.bool(True)
)


process.CSCIndexerESProducer = cms.ESProducer("CSCIndexerESProducer",
    AlgoName = cms.string('CSCIndexerPostls1')
)


process.CaloGeometryBuilder = cms.ESProducer("CaloGeometryBuilder",
    SelectedCalos = cms.vstring(
        'HCAL',
        'ZDC',
        'EcalBarrel',
        'TOWER',
        'HGCalEESensitive',
        'HGCalHESiliconSensitive',
        'HGCalHEScintillatorSensitive'
    )
)


process.CaloTPGTranscoder = cms.ESProducer("CaloTPGTranscoderULUTs",
    LUTfactor = cms.vint32(1, 2, 5, 0),
    RCTLSB = cms.double(0.25),
    ZS = cms.vint32(4, 2, 1, 0),
    hcalLUT1 = cms.FileInPath('CalibCalorimetry/CaloTPG/data/outputLUTtranscoder_physics.dat'),
    hcalLUT2 = cms.FileInPath('CalibCalorimetry/CaloTPG/data/TPGcalcDecompress2.txt'),
    ietaLowerBound = cms.vint32(1, 18, 27, 29),
    ietaUpperBound = cms.vint32(17, 26, 28, 32),
    linearLUTs = cms.bool(True),
    nominal_gain = cms.double(0.177),
    read_Ascii_Compression_LUTs = cms.bool(False),
    read_Ascii_RCT_LUTs = cms.bool(False),
    tpScales = cms.PSet(
        HBHE = cms.PSet(
            LSBQIE11 = cms.double(0.0625),
            LSBQIE11Overlap = cms.double(0.0625),
            LSBQIE8 = cms.double(0.125)
        ),
        HF = cms.PSet(
            NCTShift = cms.int32(2),
            RCTShift = cms.int32(3)
        )
    )
)


process.CaloTopologyBuilder = cms.ESProducer("CaloTopologyBuilder")


process.CaloTowerConstituentsMapBuilder = cms.ESProducer("CaloTowerConstituentsMapBuilder",
    MapAuto = cms.untracked.bool(False),
    MapFile = cms.untracked.string(''),
    SkipHE = cms.untracked.bool(True),
    appendToDataLabel = cms.string('')
)


process.CaloTowerHardcodeGeometryEP = cms.ESProducer("CaloTowerHardcodeGeometryEP")


process.CaloTowerTopologyEP = cms.ESProducer("CaloTowerTopologyEP",
    appendToDataLabel = cms.string('')
)


process.CastorDbProducer = cms.ESProducer("CastorDbProducer",
    appendToDataLabel = cms.string('')
)


process.ChannelAssignment = cms.ESProducer("trklet::ProducerChannelAssignment",
    DR = cms.PSet(
        MinIdenticalStubs = cms.int32(3),
        NumComparisonModules = cms.int32(16)
    ),
    DRin = cms.PSet(
        DepthMemory = cms.int32(32),
        PtBoundaries = cms.vdouble(3.0, 5.0, 8.0, 12.0, 24.0),
        WidthLayerId = cms.int32(4),
        WidthPSTilt = cms.int32(1),
        WidthSeedStubId = cms.int32(7),
        WidthStubId = cms.int32(10)
    ),
    IRChannelsIn = cms.vint32(
        0, 1, 2, 3, 4,
        5, 6, 7, 8, 9,
        10, 11, 12, 13, 14,
        15, 16, 17, 18, 19,
        20, 21, 22, 23, 24,
        25, 26, 27, 28, 29,
        30, 31, 32, 33, 34,
        35, 36, 37, 38, 39,
        40, 41, 42, 43, 44,
        45, 46, 47
    ),
    SeedTypes = cms.vstring(
        'L1L2',
        'L2L3',
        'L3L4',
        'L5L6',
        'D1D2',
        'D3D4',
        'L1D1',
        'L2D1'
    ),
    SeedTypesProjectionLayers = cms.PSet(
        D1D2 = cms.vint32(1, 2, 13, 14, 15),
        D3D4 = cms.vint32(1, 11, 12, 15),
        L1D1 = cms.vint32(12, 13, 14, 15),
        L1L2 = cms.vint32(
            3, 4, 5, 6, 11,
            12, 13, 14
        ),
        L2D1 = cms.vint32(1, 12, 13, 14),
        L2L3 = cms.vint32(
            1, 4, 5, 6, 11,
            12, 13, 14
        ),
        L3L4 = cms.vint32(
            1, 2, 5, 6, 11,
            12
        ),
        L5L6 = cms.vint32(1, 2, 3, 4)
    ),
    SeedTypesSeedLayers = cms.PSet(
        D1D2 = cms.vint32(11, 12),
        D3D4 = cms.vint32(13, 14),
        L1D1 = cms.vint32(1, 11),
        L1L2 = cms.vint32(1, 2),
        L2D1 = cms.vint32(2, 11),
        L2L3 = cms.vint32(2, 3),
        L3L4 = cms.vint32(3, 4),
        L5L6 = cms.vint32(5, 6)
    )
)


process.Chi2MeasurementEstimator = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('Chi2'),
    MaxChi2 = cms.double(30),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    nSigma = cms.double(3)
)


process.CloseComponentsMerger5D = cms.ESProducer("CloseComponentsMergerESProducer5D",
    ComponentName = cms.string('CloseComponentsMerger5D'),
    DistanceMeasure = cms.string('KullbackLeiblerDistance5D'),
    MaxComponents = cms.int32(12)
)


process.ClusterShapeHitFilterESProducer = cms.ESProducer("ClusterShapeHitFilterESProducer",
    ComponentName = cms.string('ClusterShapeHitFilter'),
    PixelShapeFile = cms.string('RecoTracker/PixelLowPtUtilities/data/ITShapePhase2_all.par'),
    PixelShapeFileL1 = cms.string('RecoTracker/PixelLowPtUtilities/data/ITShapePhase2_all.par'),
    appendToDataLabel = cms.string(''),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    doPixelShapeCut = cms.bool(True),
    doStripShapeCut = cms.bool(True),
    isPhase2 = cms.bool(True)
)


process.DTGeometryESModule = cms.ESProducer("DTGeometryESModule",
    DDDetector = cms.ESInputTag("",""),
    alignmentsLabel = cms.string(''),
    appendToDataLabel = cms.string(''),
    applyAlignment = cms.bool(True),
    attribute = cms.string('MuStructure'),
    fromDD4hep = cms.bool(False),
    fromDDD = cms.bool(True),
    value = cms.string('MuonBarrelDT')
)


process.EcalBarrelGeometryEP = cms.ESProducer("EcalBarrelGeometryEP",
    applyAlignment = cms.bool(False)
)


process.EcalElectronicsMappingBuilder = cms.ESProducer("EcalElectronicsMappingBuilder")


process.EcalLaserCorrectionService = cms.ESProducer("EcalLaserCorrectionService",
    maxExtrapolationTimeInSec = cms.uint32(0)
)


process.EcalLaserCorrectionServiceMC = cms.ESProducer("EcalLaserCorrectionServiceMC",
    appendToDataLabel = cms.string('')
)


process.EcalTrigTowerConstituentsMapBuilder = cms.ESProducer("EcalTrigTowerConstituentsMapBuilder",
    MapFile = cms.untracked.string('Geometry/EcalMapping/data/EndCap_TTMap.txt')
)


process.ElectronMaterialEffects = cms.ESProducer("GsfMaterialEffectsESProducer",
    BetheHeitlerCorrection = cms.int32(2),
    BetheHeitlerParametrization = cms.string('BetheHeitler_cdfmom_nC6_O5.par'),
    ComponentName = cms.string('ElectronMaterialEffects'),
    EnergyLossUpdator = cms.string('GsfBetheHeitlerUpdator'),
    Mass = cms.double(0.000511),
    MultipleScatteringUpdator = cms.string('MultipleScatteringUpdator')
)


process.FlexibleKFFittingSmoother = cms.ESProducer("FlexibleKFFittingSmootherESProducer",
    ComponentName = cms.string('FlexibleKFFittingSmoother'),
    appendToDataLabel = cms.string(''),
    looperFitter = cms.string('LooperFittingSmoother'),
    standardFitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK')
)


process.GlobalDetLayerGeometry = cms.ESProducer("GlobalDetLayerGeometryESProducer",
    ComponentName = cms.string('GlobalDetLayerGeometry')
)


process.GlobalParameters = cms.ESProducer("StableParametersTrivialProducer",
    NumberChips = cms.uint32(1),
    NumberL1EGamma = cms.uint32(12),
    NumberL1Jet = cms.uint32(12),
    NumberL1Muon = cms.uint32(8),
    NumberL1Tau = cms.uint32(12),
    NumberPhysTriggers = cms.uint32(512),
    OrderOfChip = cms.vint32(1),
    PinsOnChip = cms.uint32(512)
)


process.GlobalTrackingGeometryESProducer = cms.ESProducer("GlobalTrackingGeometryESProducer")


process.GsfElectronFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('GsfElectronFittingSmoother'),
    EstimateCut = cms.double(-1),
    Fitter = cms.string('GsfTrajectoryFitter'),
    HighEtaSwitch = cms.double(5.0),
    LogPixelProbabilityCut = cms.double(0),
    MaxFractionOutliers = cms.double(0.3),
    MaxNumberOfOutliers = cms.int32(3),
    MinDof = cms.int32(2),
    MinNumberOfHits = cms.int32(5),
    MinNumberOfHitsHighEta = cms.int32(5),
    NoInvalidHitsBeginEnd = cms.bool(True),
    NoOutliersBeginEnd = cms.bool(False),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('GsfTrajectorySmoother'),
    appendToDataLabel = cms.string('')
)


process.GsfTrajectoryFitter = cms.ESProducer("GsfTrajectoryFitterESProducer",
    ComponentName = cms.string('GsfTrajectoryFitter'),
    GeometricalPropagator = cms.string('fwdAnalyticalPropagator'),
    MaterialEffectsUpdator = cms.string('ElectronMaterialEffects'),
    Merger = cms.string('CloseComponentsMerger5D'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.GsfTrajectorySmoother = cms.ESProducer("GsfTrajectorySmootherESProducer",
    ComponentName = cms.string('GsfTrajectorySmoother'),
    ErrorRescaling = cms.double(100.0),
    GeometricalPropagator = cms.string('bwdAnalyticalPropagator'),
    MaterialEffectsUpdator = cms.string('ElectronMaterialEffects'),
    Merger = cms.string('CloseComponentsMerger5D'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.HGCalEEGeometryESProducer = cms.ESProducer("HGCalGeometryESProducer",
    Name = cms.untracked.string('HGCalEESensitive')
)


process.HGCalEETopologyBuilder = cms.ESProducer("HGCalTopologyBuilder",
    Name = cms.string('HGCalEESensitive'),
    Type = cms.int32(8)
)


process.HGCalHESciGeometryESProducer = cms.ESProducer("HGCalGeometryESProducer",
    Name = cms.untracked.string('HGCalHEScintillatorSensitive')
)


process.HGCalHESciTopologyBuilder = cms.ESProducer("HGCalTopologyBuilder",
    Name = cms.string('HGCalHEScintillatorSensitive'),
    Type = cms.int32(10)
)


process.HGCalHESilGeometryESProducer = cms.ESProducer("HGCalGeometryESProducer",
    Name = cms.untracked.string('HGCalHESiliconSensitive')
)


process.HGCalHESilTopologyBuilder = cms.ESProducer("HGCalTopologyBuilder",
    Name = cms.string('HGCalHESiliconSensitive'),
    Type = cms.int32(9)
)


process.HcalHardcodeGeometryEP = cms.ESProducer("HcalHardcodeGeometryEP",
    UseOldLoader = cms.bool(False)
)


process.HcalTPGCoderULUT = cms.ESProducer("HcalTPGCoderULUT",
    FGLUTs = cms.FileInPath('CalibCalorimetry/HcalTPGAlgos/data/HBHE_FG_LUT.dat'),
    FG_HF_thresholds = cms.vuint32(17, 255),
    LUTGenerationMode = cms.bool(True),
    MaskBit = cms.int32(32768),
    RCalibFile = cms.FileInPath('CalibCalorimetry/HcalTPGAlgos/data/RecHit-TPG-calib.dat'),
    applyFixPCC = cms.bool(True),
    contain1TSHB = cms.bool(False),
    contain1TSHE = cms.bool(False),
    containPhaseNSHB = cms.double(6.0),
    containPhaseNSHE = cms.double(6.0),
    inputLUTs = cms.FileInPath('CalibCalorimetry/HcalTPGAlgos/data/inputLUTcoder_physics.dat'),
    linearLUTs = cms.bool(True),
    overrideDBweightsAndFilterHB = cms.bool(False),
    overrideDBweightsAndFilterHE = cms.bool(False),
    read_Ascii_LUTs = cms.bool(False),
    read_FG_LUTs = cms.bool(False),
    read_XML_LUTs = cms.bool(False),
    tpScales = cms.PSet(
        HBHE = cms.PSet(
            LSBQIE11 = cms.double(0.0625),
            LSBQIE11Overlap = cms.double(0.0625),
            LSBQIE8 = cms.double(0.125)
        ),
        HF = cms.PSet(
            NCTShift = cms.int32(2),
            RCTShift = cms.int32(3)
        )
    )
)


process.HcalTrigTowerGeometryESProducer = cms.ESProducer("HcalTrigTowerGeometryESProducer")


process.HitPatternHelperSetup = cms.ESProducer("hph::ProducerHPH",
    hphDebug = cms.bool(False),
    oldKFPSet = cms.PSet(
        AllowOver2EtaSecs = cms.bool(True),
        BeamWindowZ = cms.double(15),
        ChosenRofZ = cms.double(50.0),
        EtaRegions = cms.vdouble(
            -2.4, -2.08, -1.68, -1.26, -0.9,
            -0.62, -0.41, -0.2, 0.0, 0.2,
            0.41, 0.62, 0.9, 1.26, 1.68,
            2.08, 2.4
        )
    ),
    useNewKF = cms.bool(False)
)


process.KFFittingSmootherWithOutliersRejectionAndRK = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    EstimateCut = cms.double(20.0),
    Fitter = cms.string('RKFitter'),
    HighEtaSwitch = cms.double(5),
    LogPixelProbabilityCut = cms.double(0),
    MaxFractionOutliers = cms.double(0.3),
    MaxNumberOfOutliers = cms.int32(3),
    MinDof = cms.int32(2),
    MinNumberOfHits = cms.int32(3),
    MinNumberOfHitsHighEta = cms.int32(5),
    NoInvalidHitsBeginEnd = cms.bool(True),
    NoOutliersBeginEnd = cms.bool(False),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('RKSmoother'),
    appendToDataLabel = cms.string('')
)


process.KFUpdatorESProducer = cms.ESProducer("KFUpdatorESProducer",
    ComponentName = cms.string('KFUpdator')
)


process.KullbackLeiblerDistance5D = cms.ESProducer("DistanceBetweenComponentsESProducer5D",
    ComponentName = cms.string('KullbackLeiblerDistance5D'),
    DistanceMeasure = cms.string('KullbackLeibler')
)


process.L1DTConfigFromDB = cms.ESProducer("DTConfigDBProducer",
    DTTPGMap = cms.untracked.PSet(
    **dict(
        [
            ("wh0st1se1" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se10" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se11" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se12" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se2" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se3" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se4" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se5" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se6" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se7" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se8" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se9" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st2se1" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se10" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se11" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se12" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se2" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se3" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se4" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se5" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se6" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se7" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se8" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se9" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st3se1" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se10" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se11" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se12" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se2" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se3" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se4" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se5" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se6" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se7" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se8" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se9" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st4se1" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se10" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh0st4se11" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("wh0st4se12" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh0st4se13" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh0st4se14" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh0st4se2" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se3" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se4" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh0st4se5" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se6" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se7" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se8" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh0st4se9" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("wh1st1se1" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se10" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se11" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se12" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se2" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se3" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se4" , cms.untracked.vint32(50, 48, 50, 13) ),
            ("wh1st1se5" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se6" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se7" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se8" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se9" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st2se1" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se10" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se11" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se12" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se2" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se3" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se4" , cms.untracked.vint32(60, 48, 60, 15) ),
            ("wh1st2se5" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se6" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se7" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se8" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se9" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st3se1" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se10" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se11" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se12" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se2" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se3" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se4" , cms.untracked.vint32(72, 48, 72, 18) ),
            ("wh1st3se5" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se6" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se7" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se8" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se9" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st4se1" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se10" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh1st4se11" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("wh1st4se12" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh1st4se13" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh1st4se14" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh1st4se2" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se3" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se4" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh1st4se5" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se6" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se7" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se8" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh1st4se9" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("wh2st1se1" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se10" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se11" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se12" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se2" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se3" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se4" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se5" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se6" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se7" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se8" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se9" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st2se1" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se10" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se11" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se12" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se2" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se3" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se4" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se5" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se6" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se7" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se8" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se9" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st3se1" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se10" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se11" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se12" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se2" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se3" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se4" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se5" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se6" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se7" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se8" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se9" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st4se1" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se10" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh2st4se11" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("wh2st4se12" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh2st4se13" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh2st4se14" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh2st4se2" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se3" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se4" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh2st4se5" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se6" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se7" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se8" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh2st4se9" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("whm1st1se1" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se10" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se11" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se12" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se2" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se3" , cms.untracked.vint32(50, 48, 50, 13) ),
            ("whm1st1se4" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se5" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se6" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se7" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se8" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se9" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st2se1" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se10" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se11" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se12" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se2" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se3" , cms.untracked.vint32(60, 48, 60, 15) ),
            ("whm1st2se4" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se5" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se6" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se7" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se8" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se9" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st3se1" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se10" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se11" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se12" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se2" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se3" , cms.untracked.vint32(72, 48, 72, 18) ),
            ("whm1st3se4" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se5" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se6" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se7" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se8" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se9" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st4se1" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se10" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("whm1st4se11" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("whm1st4se12" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("whm1st4se13" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("whm1st4se14" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("whm1st4se2" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se3" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se4" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("whm1st4se5" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se6" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se7" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se8" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("whm1st4se9" , cms.untracked.vint32(48, 0, 48, 12) ),
        ] +
        [
            ("whm2st1se1" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se10" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se11" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se12" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se2" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se3" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se4" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se5" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se6" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se7" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se8" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se9" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st2se1" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se10" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se11" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se12" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se2" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se3" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se4" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se5" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se6" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se7" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se8" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se9" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st3se1" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se10" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se11" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se12" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se2" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se3" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se4" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se5" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se6" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se7" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se8" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se9" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st4se1" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se10" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("whm2st4se11" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("whm2st4se12" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("whm2st4se13" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("whm2st4se14" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("whm2st4se2" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se3" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se4" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("whm2st4se5" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se6" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se7" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se8" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("whm2st4se9" , cms.untracked.vint32(48, 0, 48, 12) ),
            ]
        )
    ),
    DTTPGParameters = cms.PSet(
        Debug = cms.untracked.bool(False),
        SectCollParameters = cms.PSet(
            Debug = cms.untracked.bool(False),
            SCCSP1 = cms.int32(0),
            SCCSP2 = cms.int32(0),
            SCCSP3 = cms.int32(0),
            SCCSP4 = cms.int32(0),
            SCCSP5 = cms.int32(0),
            SCECF1 = cms.bool(False),
            SCECF2 = cms.bool(False),
            SCECF3 = cms.bool(False),
            SCECF4 = cms.bool(False)
        ),
        TUParameters = cms.PSet(
            BtiParameters = cms.PSet(
                AC1 = cms.int32(0),
                AC2 = cms.int32(3),
                ACH = cms.int32(1),
                ACL = cms.int32(2),
                CH = cms.int32(41),
                CL = cms.int32(22),
                DEAD = cms.int32(31),
                Debug = cms.untracked.int32(0),
                KACCTHETA = cms.int32(1),
                KMAX = cms.int32(64),
                LH = cms.int32(21),
                LL = cms.int32(2),
                LTS = cms.int32(3),
                PTMS0 = cms.int32(0),
                PTMS1 = cms.int32(0),
                PTMS10 = cms.int32(1),
                PTMS11 = cms.int32(1),
                PTMS12 = cms.int32(1),
                PTMS13 = cms.int32(1),
                PTMS14 = cms.int32(1),
                PTMS15 = cms.int32(1),
                PTMS16 = cms.int32(1),
                PTMS17 = cms.int32(1),
                PTMS18 = cms.int32(1),
                PTMS19 = cms.int32(1),
                PTMS2 = cms.int32(0),
                PTMS20 = cms.int32(1),
                PTMS21 = cms.int32(1),
                PTMS22 = cms.int32(1),
                PTMS23 = cms.int32(1),
                PTMS24 = cms.int32(1),
                PTMS25 = cms.int32(1),
                PTMS26 = cms.int32(1),
                PTMS27 = cms.int32(1),
                PTMS28 = cms.int32(1),
                PTMS29 = cms.int32(1),
                PTMS3 = cms.int32(0),
                PTMS30 = cms.int32(0),
                PTMS31 = cms.int32(0),
                PTMS4 = cms.int32(1),
                PTMS5 = cms.int32(1),
                PTMS6 = cms.int32(1),
                PTMS7 = cms.int32(1),
                PTMS8 = cms.int32(1),
                PTMS9 = cms.int32(1),
                RE43 = cms.int32(2),
                RH = cms.int32(61),
                RL = cms.int32(42),
                RON = cms.bool(True),
                SET = cms.int32(7),
                ST43 = cms.int32(42),
                WEN0 = cms.int32(1),
                WEN1 = cms.int32(1),
                WEN2 = cms.int32(1),
                WEN3 = cms.int32(1),
                WEN4 = cms.int32(1),
                WEN5 = cms.int32(1),
                WEN6 = cms.int32(1),
                WEN7 = cms.int32(1),
                WEN8 = cms.int32(1),
                XON = cms.bool(False)
            ),
            Debug = cms.untracked.bool(False),
            LutParameters = cms.PSet(
                BTIC = cms.untracked.int32(0),
                D = cms.untracked.double(0),
                Debug = cms.untracked.bool(False),
                WHEEL = cms.untracked.int32(-1),
                XCN = cms.untracked.double(0)
            ),
            TSPhiParameters = cms.PSet(
                Debug = cms.untracked.bool(False),
                TSMCCE1 = cms.bool(True),
                TSMCCE2 = cms.bool(False),
                TSMCCEC = cms.bool(False),
                TSMCGS1 = cms.bool(True),
                TSMCGS2 = cms.bool(True),
                TSMGS1 = cms.int32(1),
                TSMGS2 = cms.int32(1),
                TSMHSP = cms.int32(1),
                TSMHTE1 = cms.bool(True),
                TSMHTE2 = cms.bool(False),
                TSMHTEC = cms.bool(False),
                TSMMSK1 = cms.int32(312),
                TSMMSK2 = cms.int32(312),
                TSMNOE1 = cms.bool(True),
                TSMNOE2 = cms.bool(False),
                TSMNOEC = cms.bool(False),
                TSMWORD = cms.int32(255),
                TSSCCE1 = cms.bool(True),
                TSSCCE2 = cms.bool(False),
                TSSCCEC = cms.bool(False),
                TSSCGS1 = cms.bool(True),
                TSSCGS2 = cms.bool(True),
                TSSGS1 = cms.int32(1),
                TSSGS2 = cms.int32(1),
                TSSHTE1 = cms.bool(True),
                TSSHTE2 = cms.bool(False),
                TSSHTEC = cms.bool(False),
                TSSMSK1 = cms.int32(312),
                TSSMSK2 = cms.int32(312),
                TSSNOE1 = cms.bool(True),
                TSSNOE2 = cms.bool(False),
                TSSNOEC = cms.bool(False),
                TSTREN0 = cms.bool(True),
                TSTREN1 = cms.bool(True),
                TSTREN10 = cms.bool(True),
                TSTREN11 = cms.bool(True),
                TSTREN12 = cms.bool(True),
                TSTREN13 = cms.bool(True),
                TSTREN14 = cms.bool(True),
                TSTREN15 = cms.bool(True),
                TSTREN16 = cms.bool(True),
                TSTREN17 = cms.bool(True),
                TSTREN18 = cms.bool(True),
                TSTREN19 = cms.bool(True),
                TSTREN2 = cms.bool(True),
                TSTREN20 = cms.bool(True),
                TSTREN21 = cms.bool(True),
                TSTREN22 = cms.bool(True),
                TSTREN23 = cms.bool(True),
                TSTREN3 = cms.bool(True),
                TSTREN4 = cms.bool(True),
                TSTREN5 = cms.bool(True),
                TSTREN6 = cms.bool(True),
                TSTREN7 = cms.bool(True),
                TSTREN8 = cms.bool(True),
                TSTREN9 = cms.bool(True)
            ),
            TSThetaParameters = cms.PSet(
                Debug = cms.untracked.bool(False)
            ),
            TracoParameters = cms.PSet(
                BTIC = cms.int32(32),
                DD = cms.int32(18),
                Debug = cms.untracked.int32(0),
                FHISM = cms.int32(0),
                FHTMSK = cms.int32(0),
                FHTPRF = cms.int32(1),
                FLTMSK = cms.int32(1),
                FPRGCOMP = cms.int32(2),
                FSLMSK = cms.int32(0),
                IBTIOFF = cms.int32(0),
                KPRGCOM = cms.int32(255),
                KRAD = cms.int32(0),
                LTF = cms.int32(0),
                LTS = cms.int32(0),
                LVALIDIFH = cms.int32(0),
                REUSEI = cms.int32(1),
                REUSEO = cms.int32(1),
                SHISM = cms.int32(0),
                SHTMSK = cms.int32(0),
                SHTPRF = cms.int32(1),
                SLTMSK = cms.int32(1),
                SPRGCOMP = cms.int32(2),
                SSLMSK = cms.int32(0),
                TRGENB0 = cms.int32(1),
                TRGENB1 = cms.int32(1),
                TRGENB10 = cms.int32(1),
                TRGENB11 = cms.int32(1),
                TRGENB12 = cms.int32(1),
                TRGENB13 = cms.int32(1),
                TRGENB14 = cms.int32(1),
                TRGENB15 = cms.int32(1),
                TRGENB2 = cms.int32(1),
                TRGENB3 = cms.int32(1),
                TRGENB4 = cms.int32(1),
                TRGENB5 = cms.int32(1),
                TRGENB6 = cms.int32(1),
                TRGENB7 = cms.int32(1),
                TRGENB8 = cms.int32(1),
                TRGENB9 = cms.int32(1)
            )
        )
    ),
    TracoLutsFromDB = cms.bool(True),
    UseBtiAcceptParam = cms.bool(True),
    UseT0 = cms.bool(False),
    bxOffset = cms.int32(19),
    cfgConfig = cms.bool(False),
    debug = cms.bool(False),
    debugBti = cms.int32(0),
    debugDB = cms.bool(False),
    debugLUTs = cms.bool(False),
    debugPed = cms.bool(False),
    debugSC = cms.bool(False),
    debugTSP = cms.bool(False),
    debugTST = cms.bool(False),
    debugTU = cms.bool(False),
    debugTraco = cms.int32(0),
    finePhase = cms.double(25.0)
)


process.LooperFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('LooperFittingSmoother'),
    EstimateCut = cms.double(20.0),
    Fitter = cms.string('LooperFitter'),
    HighEtaSwitch = cms.double(5),
    LogPixelProbabilityCut = cms.double(-14.0),
    MaxFractionOutliers = cms.double(0.3),
    MaxNumberOfOutliers = cms.int32(3),
    MinDof = cms.int32(2),
    MinNumberOfHits = cms.int32(3),
    MinNumberOfHitsHighEta = cms.int32(5),
    NoInvalidHitsBeginEnd = cms.bool(True),
    NoOutliersBeginEnd = cms.bool(False),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('LooperSmoother'),
    appendToDataLabel = cms.string('')
)


process.LooperTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('LooperFitter'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('PropagatorWithMaterialForLoopers'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    minHits = cms.int32(3)
)


process.LooperTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('LooperSmoother'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('PropagatorWithMaterialForLoopers'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    errorRescaling = cms.double(10.0),
    minHits = cms.int32(3)
)


process.MaterialPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('PropagatorWithMaterial'),
    Mass = cms.double(0.105),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(False)
)


process.MaterialPropagatorParabolicMF = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('PropagatorWithMaterialParabolicMf'),
    Mass = cms.double(0.105),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string('ParabolicMf'),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(False)
)


process.MeasurementTracker = cms.ESProducer("MeasurementTrackerESProducer",
    ComponentName = cms.string(''),
    DebugPixelModuleQualityDB = cms.untracked.bool(False),
    DebugPixelROCQualityDB = cms.untracked.bool(False),
    DebugStripAPVFiberQualityDB = cms.untracked.bool(False),
    DebugStripModuleQualityDB = cms.untracked.bool(False),
    DebugStripStripQualityDB = cms.untracked.bool(False),
    HitMatcher = cms.string('StandardMatcher'),
    MaskBadAPVFibers = cms.bool(False),
    Phase2StripCPE = cms.string('Phase2StripCPE'),
    PixelCPE = cms.string('PixelCPEGeneric'),
    SiStripQualityLabel = cms.string(''),
    StripCPE = cms.string('StripCPEfromTrackAngle'),
    UsePixelModuleQualityDB = cms.bool(True),
    UsePixelROCQualityDB = cms.bool(True),
    UseStripAPVFiberQualityDB = cms.bool(False),
    UseStripModuleQualityDB = cms.bool(False),
    UseStripStripQualityDB = cms.bool(False),
    appendToDataLabel = cms.string(''),
    badStripCuts = cms.PSet(
        TEC = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        ),
        TIB = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        ),
        TID = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        ),
        TOB = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        )
    )
)


process.MuonDetLayerGeometryESProducer = cms.ESProducer("MuonDetLayerGeometryESProducer")


process.MuonNumberingInitialization = cms.ESProducer("MuonNumberingInitialization")


process.OppositeMaterialPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('PropagatorWithMaterialOpposite'),
    Mass = cms.double(0.105),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(False)
)


process.OppositeMaterialPropagatorParabolicMF = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('PropagatorWithMaterialParabolicMfOpposite'),
    Mass = cms.double(0.105),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SimpleMagneticField = cms.string('ParabolicMf'),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(False)
)


process.ParabolicParametrizedMagneticFieldProducer = cms.ESProducer("AutoParametrizedMagneticFieldProducer",
    label = cms.untracked.string('ParabolicMf'),
    valueOverride = cms.int32(-1),
    version = cms.string('Parabolic')
)


process.PixelCPEGenericESProducer = cms.ESProducer("PixelCPEGenericESProducer",
    Alpha2Order = cms.bool(True),
    ClusterProbComputationFlag = cms.int32(0),
    ComponentName = cms.string('PixelCPEGeneric'),
    DoCosmics = cms.bool(False),
    EdgeClusterErrorX = cms.double(50),
    EdgeClusterErrorY = cms.double(85),
    IrradiationBiasCorrection = cms.bool(False),
    LoadTemplatesFromDB = cms.bool(True),
    MagneticFieldRecord = cms.ESInputTag("",""),
    NoTemplateErrorsWhenNoTrkAngles = cms.bool(True),
    SmallPitch = cms.bool(False),
    TruncatePixelCharge = cms.bool(False),
    UseErrorsFromTemplates = cms.bool(True),
    appendToDataLabel = cms.string(''),
    doLorentzFromAlignment = cms.bool(False),
    eff_charge_cut_highX = cms.double(1),
    eff_charge_cut_highY = cms.double(1),
    eff_charge_cut_lowX = cms.double(0),
    eff_charge_cut_lowY = cms.double(0),
    inflate_all_errors_no_trk_angle = cms.bool(False),
    inflate_errors = cms.bool(False),
    isPhase2 = cms.bool(True),
    lAOffset = cms.double(0),
    lAWidthBPix = cms.double(0),
    lAWidthFPix = cms.double(0),
    size_cutX = cms.double(3),
    size_cutY = cms.double(3),
    useLAFromDB = cms.bool(True),
    useLAWidthFromDB = cms.bool(True),
    xerr_barrel_l1 = cms.vdouble(0.00025, 0.0003, 0.00035, 0.00035),
    xerr_barrel_l1_def = cms.double(0.00035),
    xerr_barrel_ln = cms.vdouble(0.00025, 0.0003, 0.00035, 0.00035),
    xerr_barrel_ln_def = cms.double(0.00035),
    xerr_endcap = cms.vdouble(0.00072, 0.00025),
    xerr_endcap_def = cms.double(0.0006),
    yerr_barrel_l1 = cms.vdouble(0.0021, 0.00115, 0.00125),
    yerr_barrel_l1_def = cms.double(0.00125),
    yerr_barrel_ln = cms.vdouble(0.0021, 0.00115, 0.00125),
    yerr_barrel_ln_def = cms.double(0.00125),
    yerr_endcap = cms.vdouble(0.00289, 0.00025),
    yerr_endcap_def = cms.double(0.0018)
)


process.PropagatorWithMaterialForLoopers = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('PropagatorWithMaterialForLoopers'),
    Mass = cms.double(0.1396),
    MaxDPhi = cms.double(4.0),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1),
    useOldAnalPropLogic = cms.bool(False),
    useRungeKutta = cms.bool(False)
)


process.PropagatorWithMaterialForLoopersOpposite = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('PropagatorWithMaterialForLoopersOpposite'),
    Mass = cms.double(0.1396),
    MaxDPhi = cms.double(4.0),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1),
    useOldAnalPropLogic = cms.bool(False),
    useRungeKutta = cms.bool(False)
)


process.RKFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('RKFittingSmoother'),
    EstimateCut = cms.double(-1),
    Fitter = cms.string('RKFitter'),
    HighEtaSwitch = cms.double(5),
    LogPixelProbabilityCut = cms.double(0),
    MaxFractionOutliers = cms.double(0.3),
    MaxNumberOfOutliers = cms.int32(3),
    MinDof = cms.int32(2),
    MinNumberOfHits = cms.int32(3),
    MinNumberOfHitsHighEta = cms.int32(5),
    NoInvalidHitsBeginEnd = cms.bool(True),
    NoOutliersBeginEnd = cms.bool(False),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('RKSmoother'),
    appendToDataLabel = cms.string('')
)


process.RKTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('RKFitter'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    minHits = cms.int32(3)
)


process.RKTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('RKSmoother'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    errorRescaling = cms.double(100),
    minHits = cms.int32(3)
)


process.RPCConeBuilder = cms.ESProducer("RPCConeBuilder",
    towerBeg = cms.int32(0),
    towerEnd = cms.int32(16)
)


process.RPCGeometryESModule = cms.ESProducer("RPCGeometryESModule",
    appendToDataLabel = cms.string(''),
    fromDD4hep = cms.untracked.bool(False),
    fromDDD = cms.untracked.bool(True)
)


process.RungeKuttaTrackerPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('RungeKuttaTrackerPropagator'),
    Mass = cms.double(0.105),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(True)
)


process.SiPixelFEDChannelContainerESProducer = cms.ESProducer("PixelFEDChannelCollectionProducer")


process.SiStripRecHitMatcherESProducer = cms.ESProducer("SiStripRecHitMatcherESProducer",
    ComponentName = cms.string('StandardMatcher'),
    NSigmaInside = cms.double(3.0),
    PreFilter = cms.bool(False)
)


process.SteppingHelixPropagatorAny = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorAny'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('anyDirection'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False)
)


process.StripCPEfromTrackAngleESProducer = cms.ESProducer("StripCPEESProducer",
    ComponentName = cms.string('StripCPEfromTrackAngle'),
    ComponentType = cms.string('StripCPEfromTrackAngle'),
    parameters = cms.PSet(
        mLC_P0 = cms.double(-0.326),
        mLC_P1 = cms.double(0.618),
        mLC_P2 = cms.double(0.3),
        mTEC_P0 = cms.double(-1.885),
        mTEC_P1 = cms.double(0.471),
        mTIB_P0 = cms.double(-0.742),
        mTIB_P1 = cms.double(0.202),
        mTID_P0 = cms.double(-1.427),
        mTID_P1 = cms.double(0.433),
        mTOB_P0 = cms.double(-1.026),
        mTOB_P1 = cms.double(0.253),
        maxChgOneMIP = cms.double(6000.0),
        useLegacyError = cms.bool(False)
    )
)


process.TTClusterAlgorithm_neighbor_Phase2TrackerDigi_ = cms.ESProducer("TTClusterAlgorithm_neighbor_Phase2TrackerDigi_")


process.TTClusterAlgorithm_official_Phase2TrackerDigi_ = cms.ESProducer("TTClusterAlgorithm_official_Phase2TrackerDigi_",
    WidthCut = cms.int32(4)
)


process.TTRHBuilderFast = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('WithoutAngleFast'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    Matcher = cms.string('StandardMatcher'),
    Phase2StripCPE = cms.string(''),
    PixelCPE = cms.string('PixelCPEFast'),
    StripCPE = cms.string('StripCPEfromTrackAngle'),
    appendToDataLabel = cms.string('')
)


process.TTStubAlgorithm_cbc3_Phase2TrackerDigi_ = cms.ESProducer("TTStubAlgorithm_cbc3_Phase2TrackerDigi_",
    zMatching2S = cms.bool(True),
    zMatchingPS = cms.bool(True)
)


process.TTStubAlgorithm_official_Phase2TrackerDigi_ = cms.ESProducer("TTStubAlgorithm_official_Phase2TrackerDigi_",
    BarrelCut = cms.vdouble(
        0, 2.0, 2.5, 3.5, 4.0,
        5.5, 6.5
    ),
    EndcapCutSet = cms.VPSet(
        cms.PSet(
            EndcapCut = cms.vdouble(0)
        ),
        cms.PSet(
            EndcapCut = cms.vdouble(
                0, 1.0, 1.5, 1.5, 2.0,
                2.0, 2.5, 2.5, 3.0, 4.0,
                4.0, 2.5, 3.0, 3.5, 4.0,
                5.0
            )
        ),
        cms.PSet(
            EndcapCut = cms.vdouble(
                0, 0.5, 1.5, 1.5, 2.0,
                2.0, 2.0, 2.5, 2.5, 3.0,
                3.5, 2.0, 2.5, 3.0, 4.0,
                4.0
            )
        ),
        cms.PSet(
            EndcapCut = cms.vdouble(
                0, 1.5, 2.0, 2.0, 2.0,
                2.0, 2.5, 3.0, 3.5, 2.5,
                2.5, 3.0, 3.5
            )
        ),
        cms.PSet(
            EndcapCut = cms.vdouble(
                0, 1.0, 1.5, 1.5, 2.0,
                2.0, 2.0, 2.0, 3.0, 2.0,
                2.0, 3.0, 3.0
            )
        ),
        cms.PSet(
            EndcapCut = cms.vdouble(
                0, 1.0, 1.5, 1.5, 2.0,
                2.0, 2.0, 2.0, 2.5, 3.0,
                2.0, 2.0, 2.5
            )
        )
    ),
    NTiltedRings = cms.vdouble(
        0.0, 12.0, 12.0, 12.0, 0.0,
        0.0, 0.0
    ),
    TiltedBarrelCutSet = cms.VPSet(
        cms.PSet(
            TiltedCut = cms.vdouble(0)
        ),
        cms.PSet(
            TiltedCut = cms.vdouble(
                0, 2.0, 2.0, 2.0, 2.0,
                2.0, 2.0, 2.0, 1.5, 1.5,
                1.5, 1.0, 1.0
            )
        ),
        cms.PSet(
            TiltedCut = cms.vdouble(
                0, 3.0, 3.0, 3.0, 3.0,
                3.0, 2.5, 2.5, 3.0, 3.0,
                2.5, 2.5, 2.5
            )
        ),
        cms.PSet(
            TiltedCut = cms.vdouble(
                0, 4.0, 4.0, 4.0, 3.5,
                3.5, 3.5, 3.0, 3.0, 2.5,
                2.5, 2.5, 2.5
            )
        )
    ),
    zMatching2S = cms.bool(True),
    zMatchingPS = cms.bool(True)
)


process.TrackTriggerDataFormats = cms.ESProducer("trackerTFP::ProducerES",
    DuplicateRemoval = cms.PSet(
        WidthCot = cms.int32(16),
        WidthPhi0 = cms.int32(12),
        WidthQoverPt = cms.int32(15),
        WidthZ0 = cms.int32(12)
    ),
    KalmanFilter = cms.PSet(
        RangeFactor = cms.double(2.0)
    ),
    UseHybrid = cms.bool(True),
    ZHoughTransform = cms.PSet(
        NumBinsCot = cms.int32(2),
        NumBinsZT = cms.int32(2),
        NumStages = cms.int32(5)
    )
)


process.TrackTriggerLayerEncoding = cms.ESProducer("trackerTFP::ProducerLayerEncoding")


process.TrackTriggerSetup = cms.ESProducer("tt::ProducerSetup",
    DTC = cms.PSet(
        DepthMemory = cms.int32(64),
        NumATCASlots = cms.int32(12),
        NumBarrelLayer = cms.int32(6),
        NumDTCsPerRegion = cms.int32(24),
        NumModulesPerDTC = cms.int32(72),
        NumOverlappingRegions = cms.int32(2),
        NumRegions = cms.int32(9),
        NumRoutingBlocks = cms.int32(2),
        OffsetDetIdDSV = cms.int32(1),
        OffsetDetIdTP = cms.int32(-1),
        OffsetLayerDisks = cms.int32(10),
        OffsetLayerId = cms.int32(1),
        SlotLimit10gbps = cms.int32(3),
        SlotLimitPS = cms.int32(6),
        WidthInv2R = cms.int32(9),
        WidthRowLUT = cms.int32(4)
    ),
    DuplicateRemoval = cms.PSet(
        DepthMemory = cms.int32(16)
    ),
    Firmware = cms.PSet(
        BField = cms.double(3.81120228767395),
        BFieldError = cms.double(1e-06),
        FreqBE = cms.double(360.0),
        FreqLHC = cms.double(40.0),
        HalfLength = cms.double(270.0),
        InnerRadius = cms.double(21.8),
        Length2S = cms.double(5.025),
        LengthPS = cms.double(0.1467),
        MaxdPhi = cms.double(0.02),
        MaxdZ = cms.double(30.0),
        MindPhi = cms.double(0.0001),
        MindZ = cms.double(0.1),
        NumFramesInfra = cms.int32(6),
        OuterRadius = cms.double(112.7),
        PSDiskLimitsR = cms.vdouble(66.4, 66.4, 64.55, 64.55, 64.55),
        Pitch2S = cms.double(0.009),
        PitchPS = cms.double(0.01),
        SpeedOfLight = cms.double(2.99792458),
        TMP_FE = cms.int32(8),
        TMP_TFP = cms.int32(18),
        TiltApproxIntercept = cms.double(0.507),
        TiltApproxSlope = cms.double(0.884),
        TiltUncertaintyR = cms.double(0.12),
        TiltedLayerLimitsZ = cms.vdouble(
            15.5, 24.9, 34.3, -1.0, -1.0,
            -1.0
        ),
        WidthAddrBRAM18 = cms.int32(10),
        WidthAddrBRAM36 = cms.int32(9),
        WidthDSPa = cms.int32(27),
        WidthDSPb = cms.int32(18),
        WidthDSPc = cms.int32(48)
    ),
    FrontEnd = cms.PSet(
        BaseBend = cms.double(0.25),
        BaseCol = cms.double(1.0),
        BaseRow = cms.double(0.5),
        BaseWindowSize = cms.double(0.5),
        BendCut = cms.double(1.3125),
        WidthBend = cms.int32(6),
        WidthCol = cms.int32(5),
        WidthRow = cms.int32(11)
    ),
    GeometricProcessor = cms.PSet(
        BoundariesEta = cms.vdouble(
            -2.5, -2.23, -1.88, -1.36, -0.9,
            -0.62, -0.41, -0.2, 0.0, 0.2,
            0.41, 0.62, 0.9, 1.36, 1.88,
            2.23, 2.5
        ),
        ChosenRofZ = cms.double(50.0),
        DepthMemory = cms.int32(64),
        NumSectorsPhi = cms.int32(2),
        RangeChiZ = cms.double(160.0)
    ),
    HoughTransform = cms.PSet(
        DepthMemory = cms.int32(32),
        MinLayers = cms.int32(5),
        NumBinsInv2R = cms.int32(16),
        NumBinsPhiT = cms.int32(32)
    ),
    Hybrid = cms.PSet(
        ChosenRofPhi = cms.double(55.0),
        Disk2SRsSet = cms.VPSet(
            cms.PSet(
                Disk2SRs = cms.vdouble(
                    66.4391, 71.4391, 76.275, 81.275, 82.955,
                    87.955, 93.815, 98.815, 99.816, 104.816
                )
            ),
            cms.PSet(
                Disk2SRs = cms.vdouble(
                    66.4391, 71.4391, 76.275, 81.275, 82.955,
                    87.955, 93.815, 98.815, 99.816, 104.816
                )
            ),
            cms.PSet(
                Disk2SRs = cms.vdouble(
                    63.9903, 68.9903, 74.275, 79.275, 81.9562,
                    86.9562, 92.492, 97.492, 99.816, 104.816
                )
            ),
            cms.PSet(
                Disk2SRs = cms.vdouble(
                    63.9903, 68.9903, 74.275, 79.275, 81.9562,
                    86.9562, 92.492, 97.492, 99.816, 104.816
                )
            ),
            cms.PSet(
                Disk2SRs = cms.vdouble(
                    63.9903, 68.9903, 74.275, 79.275, 81.9562,
                    86.9562, 92.492, 97.492, 99.816, 104.816
                )
            )
        ),
        DiskZs = cms.vdouble(131.1914, 154.9805, 185.332, 221.6016, 265.0195),
        InnerRadius = cms.double(19.6),
        LayerRs = cms.vdouble(
            24.9316, 37.1777, 52.2656, 68.7598, 86.0156,
            108.3105
        ),
        MaxEta = cms.double(2.5),
        MinPtCand = cms.double(1.34),
        MinPtStub = cms.double(2.0),
        NumLayers = cms.int32(4),
        NumRingsPS = cms.vint32(11, 11, 8, 8, 8),
        RangesAlpha = cms.vdouble(0.0, 0.0, 0.0, 2048.0),
        RangesR = cms.vdouble(7.5, 7.5, 120.0, 0.0),
        RangesZ = cms.vdouble(240.0, 240.0, 7.5, 7.5),
        WidthsAlpha = cms.vint32(0, 0, 0, 4),
        WidthsBend = cms.vint32(3, 4, 3, 4),
        WidthsPhi = cms.vint32(14, 17, 14, 14),
        WidthsR = cms.vint32(7, 7, 12, 7),
        WidthsRTB = cms.vint32(7, 7, 12, 12),
        WidthsZ = cms.vint32(12, 8, 7, 7)
    ),
    KalmanFilter = cms.PSet(
        MaxLayers = cms.int32(7),
        MinLayers = cms.int32(4),
        NumWorker = cms.int32(2),
        RangeFactor = cms.double(2.0),
        ShiftInitialC00 = cms.int32(0),
        ShiftInitialC11 = cms.int32(-2),
        ShiftInitialC22 = cms.int32(0),
        ShiftInitialC33 = cms.int32(0)
    ),
    KalmanFilterIn = cms.PSet(
        ShiftRangePhi = cms.int32(2),
        ShiftRangeZ = cms.int32(1)
    ),
    KalmanFilterOut = cms.PSet(
        Chi2rphiConv = cms.int32(3),
        Chi2rzConv = cms.int32(13),
        DphiTruncation = cms.int32(16),
        DzTruncation = cms.int32(262144),
        WeightBinFraction = cms.int32(0)
    ),
    MiniHoughTransform = cms.PSet(
        MinLayers = cms.int32(5),
        NumBinsInv2R = cms.int32(2),
        NumBinsPhiT = cms.int32(2),
        NumDLBChannel = cms.int32(2),
        NumDLBNodes = cms.int32(8),
        NumDLBs = cms.int32(2)
    ),
    ProcessHistory = cms.PSet(
        GeometryConfiguration = cms.string('XMLIdealGeometryESSource@'),
        TTStubAlgorithm = cms.string('TTStubAlgorithm_official_Phase2TrackerDigi_@')
    ),
    TFP = cms.PSet(
        NumChannel = cms.int32(2),
        WidthCot = cms.int32(16),
        WidthInv2R = cms.int32(15),
        WidthPhi0 = cms.int32(12),
        WidthZ0 = cms.int32(12)
    ),
    TMTT = cms.PSet(
        ChosenRofPhi = cms.double(67.24),
        MaxEta = cms.double(2.4),
        MinPt = cms.double(3.0),
        NumLayers = cms.int32(7),
        WidthPhi = cms.int32(15),
        WidthR = cms.int32(12),
        WidthZ = cms.int32(14)
    ),
    TrackFinding = cms.PSet(
        BeamWindowZ = cms.double(15.0),
        MatchedLayers = cms.int32(4),
        MatchedLayersPS = cms.int32(0),
        Scattering = cms.double(0.131283),
        UnMatchedStubs = cms.int32(1),
        UnMatchedStubsPS = cms.int32(0)
    ),
    TrackingParticle = cms.PSet(
        MaxBadStubs2S = cms.int32(1),
        MaxBadStubsPS = cms.int32(0),
        MaxD0 = cms.double(5.0),
        MaxEta = cms.double(2.4),
        MaxVertR = cms.double(1.0),
        MaxVertZ = cms.double(30.0),
        MinLayers = cms.int32(4),
        MinLayersPS = cms.int32(0),
        MinPt = cms.double(2.0)
    ),
    UnSupportedGeometry = cms.PSet(
        XMLFile = cms.string('tracker.xml'),
        XMLLabel = cms.string('geomXMLFiles'),
        XMLPath = cms.string('Geometry/TrackerCommonData/data/PhaseII/'),
        XMLVersions = cms.vstring()
    ),
    ZHoughTransform = cms.PSet(
        MaxStubsPerLayer = cms.int32(4),
        MaxTracks = cms.int32(16),
        MinLayers = cms.int32(4),
        NumBinsCot = cms.int32(2),
        NumBinsZT = cms.int32(2),
        NumStages = cms.int32(5)
    ),
    fromDD4hep = cms.bool(False)
)


process.TrackerAdditionalParametersPerDet = cms.ESProducer("TrackerAdditionalParametersPerDetESModule",
    appendToDataLabel = cms.string('')
)


process.TrackerDTCLayerEncoding = cms.ESProducer("trackerDTC::ProducerLayerEncoding")


process.TrackerRecoGeometryESProducer = cms.ESProducer("TrackerRecoGeometryESProducer",
    usePhase2Stacks = cms.bool(False)
)


process.TransientTrackBuilderESProducer = cms.ESProducer("TransientTrackBuilderESProducer",
    ComponentName = cms.string('TransientTrackBuilder')
)


process.VolumeBasedMagneticFieldESProducer = cms.ESProducer("VolumeBasedMagneticFieldESProducerFromDB",
    debugBuilder = cms.untracked.bool(False),
    label = cms.untracked.string(''),
    valueOverride = cms.int32(-1)
)


process.bwdAnalyticalPropagator = cms.ESProducer("AnalyticalPropagatorESProducer",
    ComponentName = cms.string('bwdAnalyticalPropagator'),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('oppositeToMomentum')
)


process.caloConfig = cms.ESProducer("L1TCaloConfigESProducer",
    fwVersionLayer2 = cms.uint32(3),
    l1Epoch = cms.string('Stage1')
)


process.caloDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('CaloDetIdAssociator'),
    etaBinSize = cms.double(0.087),
    nEta = cms.int32(70),
    nPhi = cms.int32(72)
)


process.caloSimulationParameters = cms.ESProducer("CaloSimParametersESModule",
    appendToDataLabel = cms.string(''),
    fromDD4hep = cms.bool(False)
)


process.clusterShapeHitFilterESProducer = cms.ESProducer("ClusterShapeHitFilterESProducer",
    ComponentName = cms.string(''),
    PixelShapeFile = cms.string('RecoTracker/PixelLowPtUtilities/data/pixelShapePhase0.par'),
    PixelShapeFileL1 = cms.string('RecoTracker/PixelLowPtUtilities/data/pixelShapePhase0.par'),
    appendToDataLabel = cms.string(''),
    clusterChargeCut = cms.PSet(
        value = cms.double(-1)
    ),
    doPixelShapeCut = cms.bool(True),
    doStripShapeCut = cms.bool(True),
    isPhase2 = cms.bool(False)
)


process.ctppsBeamParametersFromLHCInfoESSource = cms.ESProducer("CTPPSBeamParametersFromLHCInfoESSource",
    appendToDataLabel = cms.string(''),
    beamDivX45 = cms.double(0.1),
    beamDivX56 = cms.double(0.1),
    beamDivY45 = cms.double(0.1),
    beamDivY56 = cms.double(0.1),
    lhcInfoLabel = cms.string(''),
    lhcInfoPerFillLabel = cms.string(''),
    lhcInfoPerLSLabel = cms.string(''),
    useNewLHCInfo = cms.bool(True),
    vtxOffsetX45 = cms.double(0.01),
    vtxOffsetX56 = cms.double(0.01),
    vtxOffsetY45 = cms.double(0.01),
    vtxOffsetY56 = cms.double(0.01),
    vtxOffsetZ45 = cms.double(0.01),
    vtxOffsetZ56 = cms.double(0.01),
    vtxStddevX = cms.double(0.02),
    vtxStddevY = cms.double(0.02),
    vtxStddevZ = cms.double(0.02)
)


process.ctppsInterpolatedOpticalFunctionsESSource = cms.ESProducer("CTPPSInterpolatedOpticalFunctionsESSource",
    appendToDataLabel = cms.string(''),
    lhcInfoLabel = cms.string(''),
    lhcInfoPerFillLabel = cms.string(''),
    lhcInfoPerLSLabel = cms.string(''),
    opticsLabel = cms.string(''),
    useNewLHCInfo = cms.bool(True)
)


process.ecalDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('EcalDetIdAssociator'),
    etaBinSize = cms.double(0.02),
    nEta = cms.int32(300),
    nPhi = cms.int32(360)
)


process.ecalSeverityLevel = cms.ESProducer("EcalSeverityLevelESProducer",
    dbstatusMask = cms.PSet(
        kBad = cms.vstring(
            'kNonRespondingIsolated',
            'kDeadVFE',
            'kDeadFE',
            'kNoDataNoTP'
        ),
        kGood = cms.vstring('kOk'),
        kProblematic = cms.vstring(
            'kDAC',
            'kNoLaser',
            'kNoisy',
            'kNNoisy',
            'kNNNoisy',
            'kNNNNoisy',
            'kNNNNNoisy',
            'kFixedG6',
            'kFixedG1',
            'kFixedG0'
        ),
        kRecovered = cms.vstring(),
        kTime = cms.vstring(),
        kWeird = cms.vstring()
    ),
    flagMask = cms.PSet(
        kBad = cms.vstring(
            'kFaultyHardware',
            'kDead',
            'kKilled'
        ),
        kGood = cms.vstring('kGood'),
        kProblematic = cms.vstring(
            'kPoorReco',
            'kPoorCalib',
            'kNoisy',
            'kSaturated'
        ),
        kRecovered = cms.vstring(
            'kLeadingEdgeRecovered',
            'kTowerRecovered'
        ),
        kTime = cms.vstring('kOutOfTime'),
        kWeird = cms.vstring(
            'kWeird',
            'kDiWeird'
        )
    ),
    timeThresh = cms.double(2.0)
)


process.ecalSimulationParametersEB = cms.ESProducer("EcalSimParametersESModule",
    appendToDataLabel = cms.string(''),
    fromDD4hep = cms.bool(False),
    name = cms.string('EcalHitsEB')
)


process.ecalSimulationParametersEE = cms.ESProducer("EcalSimParametersESModule",
    appendToDataLabel = cms.string(''),
    fromDD4hep = cms.bool(False),
    name = cms.string('EcalHitsEE')
)


process.ecalSimulationParametersES = cms.ESProducer("EcalSimParametersESModule",
    appendToDataLabel = cms.string(''),
    fromDD4hep = cms.bool(False),
    name = cms.string('EcalHitsES')
)


process.fakeForIdealAlignment = cms.ESProducer("FakeAlignmentProducer",
    appendToDataLabel = cms.string('fakeForIdeal')
)


process.fakeTwinMuxParams = cms.ESProducer("L1TTwinMuxParamsESProducer",
    CorrectDTBxwRPC = cms.bool(True),
    dphiWindowBxShift = cms.uint32(9999),
    fwVersion = cms.uint32(1),
    useLowQDT = cms.bool(False),
    useOnlyDT = cms.bool(False),
    useOnlyRPC = cms.bool(False),
    useRpcBxForDtBelowQuality = cms.uint32(4),
    verbose = cms.bool(False)
)


process.fwdAnalyticalPropagator = cms.ESProducer("AnalyticalPropagatorESProducer",
    ComponentName = cms.string('fwdAnalyticalPropagator'),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum')
)


process.fwdGsfElectronPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('fwdGsfElectronPropagator'),
    Mass = cms.double(0.000511),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(False)
)


process.gemGeometry = cms.ESProducer("GEMGeometryESModule",
    alignmentsLabel = cms.string(''),
    appendToDataLabel = cms.string(''),
    applyAlignment = cms.bool(False),
    fromDD4hep = cms.bool(False),
    fromDDD = cms.bool(True)
)


process.hcalChannelPropertiesESProd = cms.ESProducer("HcalChannelPropertiesEP")


process.hcalDDDRecConstants = cms.ESProducer("HcalDDDRecConstantsESModule",
    appendToDataLabel = cms.string('')
)


process.hcalDDDSimConstants = cms.ESProducer("HcalDDDSimConstantsESModule",
    appendToDataLabel = cms.string('')
)


process.hcalDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('HcalDetIdAssociator'),
    etaBinSize = cms.double(0.087),
    hcalRegion = cms.int32(1),
    nEta = cms.int32(70),
    nPhi = cms.int32(72)
)


process.hcalParameters = cms.ESProducer("HcalParametersESModule",
    appendToDataLabel = cms.string(''),
    fromDD4hep = cms.bool(False)
)


process.hcalRecAlgos = cms.ESProducer("HcalRecAlgoESProducer",
    DropChannelStatusBits = cms.vstring(
        'HcalCellMask',
        'HcalCellOff',
        'HcalCellDead'
    ),
    RecoveredRecHitBits = cms.vstring(''),
    SeverityLevels = cms.VPSet(
        cms.PSet(
            ChannelStatus = cms.vstring(''),
            Level = cms.int32(0),
            RecHitFlags = cms.vstring('')
        ),
        cms.PSet(
            ChannelStatus = cms.vstring('HcalCellCaloTowerProb'),
            Level = cms.int32(1),
            RecHitFlags = cms.vstring('')
        ),
        cms.PSet(
            ChannelStatus = cms.vstring('HcalCellExcludeFromHBHENoiseSummary'),
            Level = cms.int32(5),
            RecHitFlags = cms.vstring(
                'HBHEIsolatedNoise',
                'HFAnomalousHit'
            )
        ),
        cms.PSet(
            ChannelStatus = cms.vstring(''),
            Level = cms.int32(8),
            RecHitFlags = cms.vstring(
                'HBHEHpdHitMultiplicity',
                'HBHEFlatNoise',
                'HBHESpikeNoise',
                'HBHETS4TS5Noise',
                'HBHENegativeNoise',
                'HBHEOOTPU'
            )
        ),
        cms.PSet(
            ChannelStatus = cms.vstring(''),
            Level = cms.int32(11),
            RecHitFlags = cms.vstring(
                'HFLongShort',
                'HFS8S1Ratio',
                'HFPET',
                'HFSignalAsymmetry'
            )
        ),
        cms.PSet(
            ChannelStatus = cms.vstring('HcalCellCaloTowerMask'),
            Level = cms.int32(12),
            RecHitFlags = cms.vstring('')
        ),
        cms.PSet(
            ChannelStatus = cms.vstring('HcalCellHot'),
            Level = cms.int32(15),
            RecHitFlags = cms.vstring('')
        ),
        cms.PSet(
            ChannelStatus = cms.vstring(
                'HcalCellOff',
                'HcalCellDead'
            ),
            Level = cms.int32(20),
            RecHitFlags = cms.vstring('')
        )
    ),
    appendToDataLabel = cms.string(''),
    phase = cms.uint32(1)
)


process.hcalSimulationConstants = cms.ESProducer("HcalSimulationConstantsESModule",
    appendToDataLabel = cms.string('')
)


process.hcalSimulationParameters = cms.ESProducer("HcalSimParametersESModule",
    appendToDataLabel = cms.string(''),
    fromDD4hep = cms.bool(False)
)


process.hcalTopologyIdeal = cms.ESProducer("HcalTopologyIdealEP",
    Exclude = cms.untracked.string(''),
    MergePosition = cms.untracked.bool(False),
    appendToDataLabel = cms.string('')
)


process.hcal_db_producer = cms.ESProducer("HcalDbProducer",
    dump = cms.untracked.vstring(''),
    file = cms.untracked.string('')
)


process.hgcalEENumberingInitialize = cms.ESProducer("HGCalNumberingInitialization",
    Name = cms.untracked.string('HGCalEESensitive')
)


process.hgcalEEParametersInitialize = cms.ESProducer("HGCalParametersESModule",
    appendToDataLabel = cms.string(''),
    fromDD4hep = cms.bool(False),
    name = cms.string('HGCalEELayer'),
    name2 = cms.string('HGCalEESensitive'),
    nameC = cms.string('HGCalEESensitive'),
    nameT = cms.string('HGCal'),
    nameW = cms.string('HGCalEEWafer'),
    nameX = cms.string('HGCalEESensitive')
)


process.hgcalHEScNumberingInitialize = cms.ESProducer("HGCalNumberingInitialization",
    Name = cms.untracked.string('HGCalHEScintillatorSensitive')
)


process.hgcalHEScParametersInitialize = cms.ESProducer("HGCalParametersESModule",
    appendToDataLabel = cms.string(''),
    fromDD4hep = cms.bool(False),
    name = cms.string('HGCalHEScintillatorSensitive'),
    name2 = cms.string('HGCalHEScintillatorSensitive'),
    nameC = cms.string('HGCalHEScintillatorSensitive'),
    nameT = cms.string('HGCal'),
    nameW = cms.string('HGCalWafer'),
    nameX = cms.string('HGCalHEScintillatorSensitive')
)


process.hgcalHESiNumberingInitialize = cms.ESProducer("HGCalNumberingInitialization",
    Name = cms.untracked.string('HGCalHESiliconSensitive')
)


process.hgcalHESiParametersInitialize = cms.ESProducer("HGCalParametersESModule",
    appendToDataLabel = cms.string(''),
    fromDD4hep = cms.bool(False),
    name = cms.string('HGCalHESiliconLayer'),
    name2 = cms.string('HGCalHESiliconSensitive'),
    nameC = cms.string('HGCalHESiliconSensitive'),
    nameT = cms.string('HGCal'),
    nameW = cms.string('HGCalHEWafer'),
    nameX = cms.string('HGCalHESiliconSensitive')
)


process.highPtTripletStepChi2Est = cms.ESProducer("Chi2ChargeMeasurementEstimatorESProducer",
    ComponentName = cms.string('highPtTripletStepChi2Est'),
    MaxChi2 = cms.double(16.0),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000.0),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutLoose')
    ),
    nSigma = cms.double(3),
    pTChargeCutThreshold = cms.double(-1)
)


process.highPtTripletStepTrajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('highPtTripletStepTrajectoryCleanerBySharedHits'),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(20.0),
    ValidHitBonus = cms.double(5.0),
    allowSharedFirstHit = cms.bool(True),
    fractionShared = cms.double(0.16)
)


process.hltESPBwdElectronPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('hltESPBwdElectronPropagator'),
    Mass = cms.double(0.000511),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(False)
)


process.hltESPChi2ChargeMeasurementEstimator2000 = cms.ESProducer("Chi2ChargeMeasurementEstimatorESProducer",
    ComponentName = cms.string('hltESPChi2ChargeMeasurementEstimator2000'),
    MaxChi2 = cms.double(2000.0),
    MaxDisplacement = cms.double(100.0),
    MaxSagitta = cms.double(-1.0),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000.0),
    MinimalTolerance = cms.double(10.0),
    appendToDataLabel = cms.string(''),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('HLTSiStripClusterChargeCutNone')
    ),
    nSigma = cms.double(3.0),
    pTChargeCutThreshold = cms.double(-1.0)
)


process.hltESPChi2ChargeMeasurementEstimator30 = cms.ESProducer("Chi2ChargeMeasurementEstimatorESProducer",
    ComponentName = cms.string('hltESPChi2ChargeMeasurementEstimator30'),
    MaxChi2 = cms.double(30.0),
    MaxDisplacement = cms.double(100.0),
    MaxSagitta = cms.double(-1.0),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000.0),
    MinimalTolerance = cms.double(10.0),
    appendToDataLabel = cms.string(''),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('HLTSiStripClusterChargeCutNone')
    ),
    nSigma = cms.double(3.0),
    pTChargeCutThreshold = cms.double(-1.0)
)


process.hltESPChi2MeasurementEstimator100 = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('hltESPChi2MeasurementEstimator100'),
    MaxChi2 = cms.double(40.0),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2.0),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000.0),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    nSigma = cms.double(4.0)
)


process.hltESPChi2MeasurementEstimator30 = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('hltESPChi2MeasurementEstimator30'),
    MaxChi2 = cms.double(30.0),
    MaxDisplacement = cms.double(100.0),
    MaxSagitta = cms.double(-1.0),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000.0),
    MinimalTolerance = cms.double(10.0),
    appendToDataLabel = cms.string(''),
    nSigma = cms.double(3.0)
)


process.hltESPDummyDetLayerGeometry = cms.ESProducer("DetLayerGeometryESProducer",
    ComponentName = cms.string('hltESPDummyDetLayerGeometry')
)


process.hltESPFastSteppingHelixPropagatorAny = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('hltESPFastSteppingHelixPropagatorAny'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('anyDirection'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(True)
)


process.hltESPFastSteppingHelixPropagatorOpposite = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('hltESPFastSteppingHelixPropagatorOpposite'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(True)
)


process.hltESPFwdElectronPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('hltESPFwdElectronPropagator'),
    Mass = cms.double(0.000511),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(False)
)


process.hltESPKFFittingSmootherForL2Muon = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(False),
    ComponentName = cms.string('hltESPKFFittingSmootherForL2Muon'),
    EstimateCut = cms.double(-1.0),
    Fitter = cms.string('hltESPKFTrajectoryFitterForL2Muon'),
    LogPixelProbabilityCut = cms.double(-16.0),
    MaxFractionOutliers = cms.double(0.3),
    MaxNumberOfOutliers = cms.int32(3),
    MinDof = cms.int32(2),
    MinNumberOfHits = cms.int32(5),
    NoInvalidHitsBeginEnd = cms.bool(False),
    NoOutliersBeginEnd = cms.bool(False),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('hltESPKFTrajectorySmootherForL2Muon'),
    appendToDataLabel = cms.string('')
)


process.hltESPKFTrajectoryFitterForL2Muon = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('hltESPKFTrajectoryFitterForL2Muon'),
    Estimator = cms.string('hltESPChi2MeasurementEstimator30'),
    Propagator = cms.string('hltESPFastSteppingHelixPropagatorAny'),
    RecoGeometry = cms.string('hltESPDummyDetLayerGeometry'),
    Updator = cms.string('hltESPKFUpdator'),
    appendToDataLabel = cms.string(''),
    minHits = cms.int32(3)
)


process.hltESPKFTrajectorySmootherForL2Muon = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('hltESPKFTrajectorySmootherForL2Muon'),
    Estimator = cms.string('hltESPChi2MeasurementEstimator30'),
    Propagator = cms.string('hltESPFastSteppingHelixPropagatorOpposite'),
    RecoGeometry = cms.string('hltESPDummyDetLayerGeometry'),
    Updator = cms.string('hltESPKFUpdator'),
    appendToDataLabel = cms.string(''),
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3)
)


process.hltESPKFTrajectorySmootherForMuonTrackLoader = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('hltESPKFTrajectorySmootherForMuonTrackLoader'),
    Estimator = cms.string('hltESPChi2MeasurementEstimator30'),
    Propagator = cms.string('hltESPSmartPropagatorAnyOpposite'),
    RecoGeometry = cms.string('hltESPDummyDetLayerGeometry'),
    Updator = cms.string('hltESPKFUpdator'),
    appendToDataLabel = cms.string(''),
    errorRescaling = cms.double(10.0),
    minHits = cms.int32(3)
)


process.hltESPKFUpdator = cms.ESProducer("KFUpdatorESProducer",
    ComponentName = cms.string('hltESPKFUpdator')
)


process.hltESPL3MuKFTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('hltESPL3MuKFTrajectoryFitter'),
    Estimator = cms.string('hltESPChi2MeasurementEstimator30'),
    Propagator = cms.string('hltESPSmartPropagatorAny'),
    RecoGeometry = cms.string('hltESPDummyDetLayerGeometry'),
    Updator = cms.string('hltESPKFUpdator'),
    appendToDataLabel = cms.string(''),
    minHits = cms.int32(3)
)


process.hltESPMuonTransientTrackingRecHitBuilder = cms.ESProducer("MuonTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('hltESPMuonTransientTrackingRecHitBuilder')
)


process.hltESPPixelCPEFastParamsPhase2 = cms.ESProducer("PixelCPEFastParamsESProducerAlpakaPhase2@alpaka",
    ComponentName = cms.string('PixelCPEFastParamsPhase2'),
    alpaka = cms.untracked.PSet(
        backend = cms.untracked.string('')
    ),
    appendToDataLabel = cms.string('')
)


process.hltESPRungeKuttaTrackerPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('hltESPRungeKuttaTrackerPropagator'),
    Mass = cms.double(0.105),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(True)
)


process.hltESPSiPixelCablingSoA = cms.ESProducer("SiPixelCablingSoAESProducer@alpaka",
    CablingMapLabel = cms.string(''),
    UseQualityInfo = cms.bool(False),
    alpaka = cms.untracked.PSet(
        backend = cms.untracked.string('')
    ),
    appendToDataLabel = cms.string('')
)


process.hltESPSiPixelGainCalibrationForHLTSoA = cms.ESProducer("SiPixelGainCalibrationForHLTSoAESProducer@alpaka",
    alpaka = cms.untracked.PSet(
        backend = cms.untracked.string('')
    ),
    appendToDataLabel = cms.string('')
)


process.hltESPSmartPropagator = cms.ESProducer("SmartPropagatorESProducer",
    ComponentName = cms.string('hltESPSmartPropagator'),
    Epsilon = cms.double(5.0),
    MuonPropagator = cms.string('hltESPSteppingHelixPropagatorAlong'),
    PropagationDirection = cms.string('alongMomentum'),
    TrackerPropagator = cms.string('PropagatorWithMaterial')
)


process.hltESPSmartPropagatorAny = cms.ESProducer("SmartPropagatorESProducer",
    ComponentName = cms.string('hltESPSmartPropagatorAny'),
    Epsilon = cms.double(5.0),
    MuonPropagator = cms.string('SteppingHelixPropagatorAny'),
    PropagationDirection = cms.string('alongMomentum'),
    TrackerPropagator = cms.string('PropagatorWithMaterial')
)


process.hltESPSmartPropagatorAnyOpposite = cms.ESProducer("SmartPropagatorESProducer",
    ComponentName = cms.string('hltESPSmartPropagatorAnyOpposite'),
    Epsilon = cms.double(5.0),
    MuonPropagator = cms.string('SteppingHelixPropagatorAny'),
    PropagationDirection = cms.string('oppositeToMomentum'),
    TrackerPropagator = cms.string('PropagatorWithMaterialOpposite')
)


process.hltESPSteppingHelixPropagatorAlong = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('hltESPSteppingHelixPropagatorAlong'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('alongMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False)
)


process.hltESPSteppingHelixPropagatorOpposite = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('hltESPSteppingHelixPropagatorOpposite'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False)
)


process.hltESPTrackAlgoPriorityOrder = cms.ESProducer("TrackAlgoPriorityOrderESProducer",
    ComponentName = cms.string('hltESPTrackAlgoPriorityOrder'),
    algoOrder = cms.vstring(),
    appendToDataLabel = cms.string('')
)


process.hltESPTrajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('hltESPTrajectoryCleanerBySharedHits'),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(0.0),
    ValidHitBonus = cms.double(100.0),
    allowSharedFirstHit = cms.bool(False),
    fractionShared = cms.double(0.5)
)


process.hltOnlineBeamSpotESProducer = cms.ESProducer("OnlineBeamSpotESProducer",
    sigmaXYThreshold = cms.double(4.0),
    sigmaZThreshold = cms.double(2.0),
    timeThreshold = cms.int32(1000000)
)


process.hltPhase2L3MuonHighPtTripletStepChi2Est = cms.ESProducer("Chi2ChargeMeasurementEstimatorESProducer",
    ComponentName = cms.string('hltPhase2L3MuonHighPtTripletStepChi2Est'),
    MaxChi2 = cms.double(16.0),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000.0),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutLoose')
    ),
    nSigma = cms.double(3),
    pTChargeCutThreshold = cms.double(-1)
)


process.hltPhase2L3MuonHighPtTripletStepTrajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('hltPhase2L3MuonHighPtTripletStepTrajectoryCleanerBySharedHits'),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(20.0),
    ValidHitBonus = cms.double(5.0),
    allowSharedFirstHit = cms.bool(True),
    fractionShared = cms.double(0.16)
)


process.hltPhase2L3MuonInitialStepChi2Est = cms.ESProducer("Chi2ChargeMeasurementEstimatorESProducer",
    ComponentName = cms.string('hltPhase2L3MuonInitialStepChi2Est'),
    MaxChi2 = cms.double(9.0),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000.0),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutLoose')
    ),
    nSigma = cms.double(3.0),
    pTChargeCutThreshold = cms.double(15.0)
)


process.hltPhase2L3MuonPixelTrackCleanerBySharedHits = cms.ESProducer("PixelTrackCleanerBySharedHitsESProducer",
    ComponentName = cms.string('hltPhase2L3MuonPixelTrackCleanerBySharedHits'),
    appendToDataLabel = cms.string(''),
    useQuadrupletAlgo = cms.bool(False)
)


process.hltPhase2L3MuonTrackAlgoPriorityOrder = cms.ESProducer("TrackAlgoPriorityOrderESProducer",
    ComponentName = cms.string('hltPhase2L3MuonTrackAlgoPriorityOrder'),
    algoOrder = cms.vstring(
        'initialStep',
        'highPtTripletStep'
    ),
    appendToDataLabel = cms.string('')
)


process.hltPixelTracksCleanerBySharedHits = cms.ESProducer("PixelTrackCleanerBySharedHitsESProducer",
    ComponentName = cms.string('hltPixelTracksCleanerBySharedHits'),
    appendToDataLabel = cms.string(''),
    useQuadrupletAlgo = cms.bool(False)
)


process.hltTTRBWR = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('hltESPTTRHBWithTrackAngle'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    Matcher = cms.string('StandardMatcher'),
    Phase2StripCPE = cms.string('Phase2StripCPE'),
    PixelCPE = cms.string('PixelCPEGeneric'),
    StripCPE = cms.string('FakeStripCPE')
)


process.hoDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('HODetIdAssociator'),
    etaBinSize = cms.double(0.087),
    nEta = cms.int32(30),
    nPhi = cms.int32(72)
)


process.idealForDigiCSCGeometry = cms.ESProducer("CSCGeometryESModule",
    alignmentsLabel = cms.string('fakeForIdeal'),
    appendToDataLabel = cms.string('idealForDigi'),
    applyAlignment = cms.bool(False),
    debugV = cms.untracked.bool(False),
    fromDD4hep = cms.bool(False),
    fromDDD = cms.bool(True),
    useCentreTIOffsets = cms.bool(False),
    useGangedStripsInME1a = cms.bool(False),
    useOnlyWiresInME1a = cms.bool(False),
    useRealWireGeometry = cms.bool(True)
)


process.idealForDigiDTGeometry = cms.ESProducer("DTGeometryESModule",
    DDDetector = cms.ESInputTag("",""),
    alignmentsLabel = cms.string('fakeForIdeal'),
    appendToDataLabel = cms.string('idealForDigi'),
    applyAlignment = cms.bool(False),
    attribute = cms.string('MuStructure'),
    fromDD4hep = cms.bool(False),
    fromDDD = cms.bool(True),
    value = cms.string('MuonBarrelDT')
)


process.idealForDigiMTDGeometry = cms.ESProducer("MTDDigiGeometryESModule",
    alignmentsLabel = cms.string('fakeForIdeal'),
    appendToDataLabel = cms.string('idealForDigi'),
    applyAlignment = cms.bool(False),
    fromDDD = cms.bool(True)
)


process.idealForDigiTrackerGeometry = cms.ESProducer("TrackerDigiGeometryESModule",
    alignmentsLabel = cms.string('fakeForIdeal'),
    appendToDataLabel = cms.string('idealForDigi'),
    applyAlignment = cms.bool(False),
    fromDDD = cms.bool(True)
)


process.initialStepChi2Est = cms.ESProducer("Chi2ChargeMeasurementEstimatorESProducer",
    ComponentName = cms.string('initialStepChi2Est'),
    MaxChi2 = cms.double(9.0),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000.0),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutLoose')
    ),
    nSigma = cms.double(3.0),
    pTChargeCutThreshold = cms.double(15.0)
)


process.l1tHGCalTriggerGeometryESProducer = cms.ESProducer("HGCalTriggerGeometryESProducer",
    TriggerGeometry = cms.PSet(
        DisconnectedLayers = cms.vuint32(
            2, 4, 6, 8, 10,
            12, 14, 16, 18, 20,
            22, 24, 26
        ),
        DisconnectedModules = cms.vuint32(0),
        JsonMappingFile = cms.FileInPath('L1Trigger/L1THGCal/data/hgcal_trigger_link_mapping_120links_v1.json'),
        L1TLinksMapping = cms.FileInPath('L1Trigger/L1THGCal/data/links_mapping_decentralized_signaldriven_0.txt'),
        L1TModulesMapping = cms.FileInPath('L1Trigger/L1THGCal/data/panel_mapping_V9_decentralized_jun19_0.txt'),
        ScintillatorLinksPerModule = cms.uint32(2),
        ScintillatorModuleSize = cms.uint32(6),
        ScintillatorTriggerCellSize = cms.uint32(2),
        TriggerGeometryName = cms.string('HGCalTriggerGeometryV9Imp3')
    )
)


process.mtdDetLayerGeometry = cms.ESProducer("MTDDetLayerGeometryESProducer")


process.mtdGeometry = cms.ESProducer("MTDDigiGeometryESModule",
    alignmentsLabel = cms.string(''),
    appendToDataLabel = cms.string(''),
    applyAlignment = cms.bool(False),
    fromDDD = cms.bool(True)
)


process.mtdNumberingGeometry = cms.ESProducer("MTDGeometricTimingDetESModule",
    appendToDataLabel = cms.string(''),
    fromDD4hep = cms.bool(False),
    fromDDD = cms.bool(True)
)


process.mtdParameters = cms.ESProducer("MTDParametersESModule",
    appendToDataLabel = cms.string(''),
    fromDD4hep = cms.bool(False)
)


process.mtdTopology = cms.ESProducer("MTDTopologyEP",
    appendToDataLabel = cms.string('')
)


process.multipleScatteringParametrisationMakerESProducer = cms.ESProducer("MultipleScatteringParametrisationMakerESProducer",
    appendToDataLabel = cms.string('')
)


process.muonDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('MuonDetIdAssociator'),
    etaBinSize = cms.double(0.125),
    includeBadChambers = cms.bool(True),
    includeGEM = cms.bool(True),
    includeME0 = cms.bool(False),
    nEta = cms.int32(48),
    nPhi = cms.int32(48)
)


process.muonGeometryConstants = cms.ESProducer("MuonGeometryConstantsESModule",
    appendToDataLabel = cms.string(''),
    fromDD4hep = cms.bool(False)
)


process.muonOffsetESProducer = cms.ESProducer("MuonOffsetESProducer",
    appendToDataLabel = cms.string(''),
    fromDD4hep = cms.bool(False),
    names = cms.vstring(
        'MuonCommonNumbering',
        'MuonBarrel',
        'MuonEndcap',
        'MuonBarrelWheels',
        'MuonBarrelStation1',
        'MuonBarrelStation2',
        'MuonBarrelStation3',
        'MuonBarrelStation4',
        'MuonBarrelSuperLayer',
        'MuonBarrelLayer',
        'MuonBarrelWire',
        'MuonRpcPlane1I',
        'MuonRpcPlane1O',
        'MuonRpcPlane2I',
        'MuonRpcPlane2O',
        'MuonRpcPlane3S',
        'MuonRpcPlane4',
        'MuonRpcChamberLeft',
        'MuonRpcChamberMiddle',
        'MuonRpcChamberRight',
        'MuonRpcEndcap1',
        'MuonRpcEndcap2',
        'MuonRpcEndcap3',
        'MuonRpcEndcap4',
        'MuonRpcEndcapSector',
        'MuonRpcEndcapChamberB1',
        'MuonRpcEndcapChamberB2',
        'MuonRpcEndcapChamberB3',
        'MuonRpcEndcapChamberC1',
        'MuonRpcEndcapChamberC2',
        'MuonRpcEndcapChamberC3',
        'MuonRpcEndcapChamberE1',
        'MuonRpcEndcapChamberE2',
        'MuonRpcEndcapChamberE3',
        'MuonRpcEndcapChamberF1',
        'MuonRpcEndcapChamberF2',
        'MuonRpcEndcapChamberF3',
        'MuonRpcEndcapChamberG1',
        'MuonRpcEndcapChamberH1',
        'MuonEndcapStation1',
        'MuonEndcapStation2',
        'MuonEndcapStation3',
        'MuonEndcapStation4',
        'MuonEndcapSubrings',
        'MuonEndcapSectors',
        'MuonEndcapLayers',
        'MuonEndcapRing1',
        'MuonEndcapRing2',
        'MuonEndcapRing3',
        'MuonEndcapRingA',
        'MuonGEMEndcap',
        'MuonGEMEndcap2',
        'MuonGEMSector',
        'MuonGEMChamber',
        'MuonGE0Sector',
        'MuonGE0Layer',
        'MuonGE0Chamber'
    )
)


process.muonSeededTrajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('muonSeededTrajectoryCleanerBySharedHits'),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(1.0),
    ValidHitBonus = cms.double(1000.0),
    allowSharedFirstHit = cms.bool(True),
    fractionShared = cms.double(0.1)
)


process.myTTRHBuilderWithoutAngle4PixelTriplets = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('TTRHBuilderWithoutAngle4PixelTriplets'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    Matcher = cms.string('StandardMatcher'),
    Phase2StripCPE = cms.string('Phase2StripCPE'),
    PixelCPE = cms.string('PixelCPEGeneric'),
    StripCPE = cms.string('Fake'),
    appendToDataLabel = cms.string('')
)


process.navigationSchoolESProducer = cms.ESProducer("NavigationSchoolESProducer",
    ComponentName = cms.string('SimpleNavigationSchool'),
    PluginName = cms.string('SimpleNavigationSchool'),
    SimpleMagneticField = cms.string('')
)


process.navigationSchoolESProducerParabolicMf = cms.ESProducer("NavigationSchoolESProducer",
    ComponentName = cms.string('SimpleNavigationSchoolParabolicMf'),
    PluginName = cms.string('SimpleNavigationSchool'),
    SimpleMagneticField = cms.string('ParabolicMf')
)


process.phase2StripCPEESProducer = cms.ESProducer("Phase2StripCPEESProducer",
    ComponentType = cms.string('Phase2StripCPE'),
    parameters = cms.PSet(
        LorentzAngle_DB = cms.bool(True),
        TanLorentzAnglePerTesla = cms.double(0.07)
    )
)


process.pixelTrackCleanerBySharedHits = cms.ESProducer("PixelTrackCleanerBySharedHitsESProducer",
    ComponentName = cms.string('pixelTrackCleanerBySharedHits'),
    appendToDataLabel = cms.string(''),
    useQuadrupletAlgo = cms.bool(False)
)


process.preshowerDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('PreshowerDetIdAssociator'),
    etaBinSize = cms.double(0.1),
    nEta = cms.int32(60),
    nPhi = cms.int32(30)
)


process.siPixelQualityESProducer = cms.ESProducer("SiPixelQualityESProducer",
    ListOfRecordToMerge = cms.VPSet(
        cms.PSet(
            record = cms.string('SiPixelQualityFromDbRcd'),
            tag = cms.string('')
        ),
        cms.PSet(
            record = cms.string('SiPixelDetVOffRcd'),
            tag = cms.string('')
        )
    ),
    appendToDataLabel = cms.string(''),
    siPixelQualityFromDbLabel = cms.string('')
)


process.siPixelQualityForDigitizerESProducer = cms.ESProducer("SiPixelQualityESProducer",
    ListOfRecordToMerge = cms.VPSet(
        cms.PSet(
            record = cms.string('SiPixelQualityFromDbRcd'),
            tag = cms.string('')
        ),
        cms.PSet(
            record = cms.string('SiPixelDetVOffRcd'),
            tag = cms.string('')
        )
    ),
    appendToDataLabel = cms.string('forDigitizer'),
    siPixelQualityFromDbLabel = cms.string('forDigitizer')
)


process.siStripBackPlaneCorrectionDepESProducer = cms.ESProducer("SiStripBackPlaneCorrectionDepESProducer",
    BackPlaneCorrectionDeconvMode = cms.PSet(
        label = cms.untracked.string('deconvolution'),
        record = cms.string('SiStripBackPlaneCorrectionRcd')
    ),
    BackPlaneCorrectionPeakMode = cms.PSet(
        label = cms.untracked.string('peak'),
        record = cms.string('SiStripBackPlaneCorrectionRcd')
    ),
    LatencyRecord = cms.PSet(
        label = cms.untracked.string(''),
        record = cms.string('SiStripLatencyRcd')
    )
)


process.siStripGainESProducer = cms.ESProducer("SiStripGainESProducer",
    APVGain = cms.VPSet(
        cms.PSet(
            Label = cms.untracked.string(''),
            NormalizationFactor = cms.untracked.double(1.0),
            Record = cms.string('SiStripApvGainRcd')
        ),
        cms.PSet(
            Label = cms.untracked.string(''),
            NormalizationFactor = cms.untracked.double(1.0),
            Record = cms.string('SiStripApvGain2Rcd')
        )
    ),
    AutomaticNormalization = cms.bool(False),
    appendToDataLabel = cms.string(''),
    printDebug = cms.untracked.bool(False)
)


process.siStripGainSimESProducer = cms.ESProducer("SiStripGainSimESProducer",
    APVGain = cms.VPSet(cms.PSet(
        Label = cms.untracked.string(''),
        NormalizationFactor = cms.untracked.double(1.0),
        Record = cms.string('SiStripApvGainSimRcd')
    )),
    AutomaticNormalization = cms.bool(False),
    appendToDataLabel = cms.string(''),
    printDebug = cms.untracked.bool(False)
)


process.siStripLorentzAngleDepESProducer = cms.ESProducer("SiStripLorentzAngleDepESProducer",
    LatencyRecord = cms.PSet(
        label = cms.untracked.string(''),
        record = cms.string('SiStripLatencyRcd')
    ),
    LorentzAngleDeconvMode = cms.PSet(
        label = cms.untracked.string('deconvolution'),
        record = cms.string('SiStripLorentzAngleRcd')
    ),
    LorentzAnglePeakMode = cms.PSet(
        label = cms.untracked.string('peak'),
        record = cms.string('SiStripLorentzAngleRcd')
    )
)


process.siStripQualityESProducer = cms.ESProducer("SiStripQualityESProducer",
    ListOfRecordToMerge = cms.VPSet(
        cms.PSet(
            record = cms.string('SiStripDetVOffRcd'),
            tag = cms.string('')
        ),
        cms.PSet(
            record = cms.string('SiStripDetCablingRcd'),
            tag = cms.string('')
        ),
        cms.PSet(
            record = cms.string('RunInfoRcd'),
            tag = cms.string('')
        ),
        cms.PSet(
            record = cms.string('SiStripBadChannelRcd'),
            tag = cms.string('')
        ),
        cms.PSet(
            record = cms.string('SiStripBadFiberRcd'),
            tag = cms.string('')
        ),
        cms.PSet(
            record = cms.string('SiStripBadModuleRcd'),
            tag = cms.string('')
        ),
        cms.PSet(
            record = cms.string('SiStripBadStripRcd'),
            tag = cms.string('')
        )
    ),
    PrintDebugOutput = cms.bool(False),
    ReduceGranularity = cms.bool(False),
    ThresholdForReducedGranularity = cms.double(0.3),
    UseEmptyRunInfo = cms.bool(False),
    appendToDataLabel = cms.string('')
)


process.sistripconn = cms.ESProducer("SiStripConnectivity")


process.stripCPEESProducer = cms.ESProducer("StripCPEESProducer",
    ComponentName = cms.string('stripCPE'),
    ComponentType = cms.string('SimpleStripCPE'),
    parameters = cms.PSet(

    )
)


process.tkTransientTrackingRecHitBuilderESProducer = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('Fake'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    Matcher = cms.string('Fake'),
    Phase2StripCPE = cms.string(''),
    PixelCPE = cms.string('Fake'),
    StripCPE = cms.string('Fake'),
    appendToDataLabel = cms.string('')
)


process.trackAlgoPriorityOrder = cms.ESProducer("TrackAlgoPriorityOrderESProducer",
    ComponentName = cms.string('trackAlgoPriorityOrder'),
    algoOrder = cms.vstring(
        'initialStep',
        'highPtTripletStep',
        'lowPtQuadStep',
        'lowPtTripletStep',
        'detachedQuadStep',
        'pixelPairStep',
        'muonSeededStepInOut',
        'muonSeededStepOutIn'
    ),
    appendToDataLabel = cms.string('')
)


process.trackerGeometry = cms.ESProducer("TrackerDigiGeometryESModule",
    alignmentsLabel = cms.string(''),
    appendToDataLabel = cms.string(''),
    applyAlignment = cms.bool(True),
    fromDDD = cms.bool(True)
)


process.trackerNumberingGeometry = cms.ESProducer("TrackerGeometricDetESModule",
    appendToDataLabel = cms.string(''),
    fromDD4hep = cms.bool(False),
    fromDDD = cms.bool(True)
)


process.trackerParameters = cms.ESProducer("TrackerParametersESModule",
    appendToDataLabel = cms.string(''),
    fromDD4hep = cms.bool(False)
)


process.trackerTopology = cms.ESProducer("TrackerTopologyEP",
    appendToDataLabel = cms.string('')
)


process.tracksterSelectionTf = cms.ESProducer("TfGraphDefProducer",
    ComponentName = cms.string('tracksterSelectionTf'),
    FileName = cms.FileInPath('RecoHGCal/TICL/data/tf_models/energy_id_v0.pb'),
    appendToDataLabel = cms.string('')
)


process.trajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('TrajectoryCleanerBySharedHits'),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(20.0),
    ValidHitBonus = cms.double(5.0),
    allowSharedFirstHit = cms.bool(True),
    fractionShared = cms.double(0.19)
)


process.ttrhbwr = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('WithTrackAngle'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    Matcher = cms.string('StandardMatcher'),
    Phase2StripCPE = cms.string('Phase2StripCPE'),
    PixelCPE = cms.string('PixelCPEGeneric'),
    StripCPE = cms.string('FakeStripCPE'),
    appendToDataLabel = cms.string('')
)


process.zdcHardcodeGeometryEP = cms.ESProducer("ZdcHardcodeGeometryEP",
    appendToDataLabel = cms.string(''),
    applyAlignment = cms.bool(False),
    zdcAddRPD = cms.bool(False)
)


process.CSCChannelMapperESSource = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('CSCChannelMapperRecord')
)


process.CSCIndexerESSource = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('CSCIndexerRecord')
)


process.CSCL1TPLookupTableEP = cms.ESSource("CSCL1TPLookupTableEP",
    esDiffToSlopeME11aFiles = cms.vstring(
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/BendingAngle/SlopeAmendment_ME11a_even_GEMlayer1.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/BendingAngle/SlopeAmendment_ME11a_odd_GEMlayer1.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/BendingAngle/SlopeAmendment_ME11a_even_GEMlayer2.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/BendingAngle/SlopeAmendment_ME11a_odd_GEMlayer2.txt'
    ),
    esDiffToSlopeME11bFiles = cms.vstring(
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/BendingAngle/SlopeAmendment_ME11b_even_GEMlayer1.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/BendingAngle/SlopeAmendment_ME11b_odd_GEMlayer1.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/BendingAngle/SlopeAmendment_ME11b_even_GEMlayer2.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/BendingAngle/SlopeAmendment_ME11b_odd_GEMlayer2.txt'
    ),
    esDiffToSlopeME21Files = cms.vstring(
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/BendingAngle/SlopeAmendment_ME21_even_GEMlayer1.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/BendingAngle/SlopeAmendment_ME21_odd_GEMlayer1.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/BendingAngle/SlopeAmendment_ME21_even_GEMlayer2.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/BendingAngle/SlopeAmendment_ME21_odd_GEMlayer2.txt'
    ),
    gemCscSlopeCorrectionFiles = cms.vstring(
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/SlopeCorrection/FacingChambers/ExtrapolationBySlope_ME11a_even_GEMlayer1.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/SlopeCorrection/FacingChambers/ExtrapolationBySlope_ME11b_even_GEMlayer1.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/SlopeCorrection/FacingChambers/ExtrapolationBySlope_ME21_even_GEMlayer1.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/SlopeCorrection/FacingChambers/ExtrapolationBySlope_ME11a_odd_GEMlayer1.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/SlopeCorrection/FacingChambers/ExtrapolationBySlope_ME11b_odd_GEMlayer1.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/SlopeCorrection/FacingChambers/ExtrapolationBySlope_ME21_odd_GEMlayer1.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/SlopeCorrection/FacingChambers/ExtrapolationBySlope_ME11a_even_GEMlayer2.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/SlopeCorrection/FacingChambers/ExtrapolationBySlope_ME11b_even_GEMlayer2.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/SlopeCorrection/FacingChambers/ExtrapolationBySlope_ME21_even_GEMlayer2.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/SlopeCorrection/FacingChambers/ExtrapolationBySlope_ME11a_odd_GEMlayer2.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/SlopeCorrection/FacingChambers/ExtrapolationBySlope_ME11b_odd_GEMlayer2.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/SlopeCorrection/FacingChambers/ExtrapolationBySlope_ME21_odd_GEMlayer2.txt'
    ),
    gemCscSlopeCosiCorrectionFiles = cms.vstring(
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/SlopeCorrection/FacingChambers/GEMCSCconsistentSlopeCorr_ME11a_even_layer1.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/SlopeCorrection/FacingChambers/GEMCSCconsistentSlopeCorr_ME11b_even_layer1.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/SlopeCorrection/FacingChambers/GEMCSCconsistentSlopeCorr_ME21_even_layer1.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/SlopeCorrection/FacingChambers/GEMCSCconsistentSlopeCorr_ME11a_odd_layer1.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/SlopeCorrection/FacingChambers/GEMCSCconsistentSlopeCorr_ME11b_odd_layer1.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/SlopeCorrection/FacingChambers/GEMCSCconsistentSlopeCorr_ME21_odd_layer1.txt'
    ),
    gemCscSlopeCosiFiles = cms.vstring(
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/SlopeCorrection/FacingChambers/CSCconsistency_2to1_SlopeShift_ME11a_even_layer1.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/SlopeCorrection/FacingChambers/CSCconsistency_2to1_SlopeShift_ME11a_odd_layer1.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/SlopeCorrection/FacingChambers/CSCconsistency_3to1_SlopeShift_ME11a_even_layer1.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/SlopeCorrection/FacingChambers/CSCconsistency_3to1_SlopeShift_ME11a_odd_layer1.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/SlopeCorrection/FacingChambers/CSCconsistency_2to1_SlopeShift_ME11b_even_layer1.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/SlopeCorrection/FacingChambers/CSCconsistency_2to1_SlopeShift_ME11b_odd_layer1.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/SlopeCorrection/FacingChambers/CSCconsistency_3to1_SlopeShift_ME11b_even_layer1.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/SlopeCorrection/FacingChambers/CSCconsistency_3to1_SlopeShift_ME11b_odd_layer1.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/SlopeCorrection/FacingChambers/CSCconsistency_2to1_SlopeShift_ME21_even_layer1.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/SlopeCorrection/FacingChambers/CSCconsistency_2to1_SlopeShift_ME21_odd_layer1.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/SlopeCorrection/FacingChambers/CSCconsistency_3to1_SlopeShift_ME21_even_layer1.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/SlopeCorrection/FacingChambers/CSCconsistency_3to1_SlopeShift_ME21_odd_layer1.txt'
    ),
    padToEsME11aFiles = cms.vstring(
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/CoordinateConversion/GEMCSCLUT_pad_es_ME1a_even.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/CoordinateConversion/GEMCSCLUT_pad_es_ME1a_odd.txt'
    ),
    padToEsME11bFiles = cms.vstring(
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/CoordinateConversion/GEMCSCLUT_pad_es_ME1b_even.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/CoordinateConversion/GEMCSCLUT_pad_es_ME1b_odd.txt'
    ),
    padToEsME21Files = cms.vstring(
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/CoordinateConversion/GEMCSCLUT_pad_es_ME21_even.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/CoordinateConversion/GEMCSCLUT_pad_es_ME21_odd.txt'
    ),
    positionLUTFiles = cms.vstring(
        'L1Trigger/CSCTriggerPrimitives/data/CCLUT/CSCComparatorCodePosOffsetLUT_pat0_v1.txt',
        'L1Trigger/CSCTriggerPrimitives/data/CCLUT/CSCComparatorCodePosOffsetLUT_pat1_v1.txt',
        'L1Trigger/CSCTriggerPrimitives/data/CCLUT/CSCComparatorCodePosOffsetLUT_pat2_v1.txt',
        'L1Trigger/CSCTriggerPrimitives/data/CCLUT/CSCComparatorCodePosOffsetLUT_pat3_v1.txt',
        'L1Trigger/CSCTriggerPrimitives/data/CCLUT/CSCComparatorCodePosOffsetLUT_pat4_v1.txt'
    ),
    rollToMaxWgME11Files = cms.vstring(
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/CoordinateConversion/GEMCSCLUT_roll_l1_max_wg_ME11_even.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/CoordinateConversion/GEMCSCLUT_roll_l1_max_wg_ME11_odd.txt'
    ),
    rollToMaxWgME21Files = cms.vstring(
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/CoordinateConversion/GEMCSCLUT_roll_l1_max_wg_ME21_even.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/CoordinateConversion/GEMCSCLUT_roll_l1_max_wg_ME21_odd.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/CoordinateConversion/GEMCSCLUT_roll_l2_max_wg_ME21_even.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/CoordinateConversion/GEMCSCLUT_roll_l2_max_wg_ME21_odd.txt'
    ),
    rollToMinWgME11Files = cms.vstring(
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/CoordinateConversion/GEMCSCLUT_roll_l1_min_wg_ME11_even.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/CoordinateConversion/GEMCSCLUT_roll_l1_min_wg_ME11_odd.txt'
    ),
    rollToMinWgME21Files = cms.vstring(
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/CoordinateConversion/GEMCSCLUT_roll_l1_min_wg_ME21_even.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/CoordinateConversion/GEMCSCLUT_roll_l1_min_wg_ME21_odd.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/CoordinateConversion/GEMCSCLUT_roll_l2_min_wg_ME21_even.txt',
        'L1Trigger/CSCTriggerPrimitives/data/GEMCSC/CoordinateConversion/GEMCSCLUT_roll_l2_min_wg_ME21_odd.txt'
    ),
    slopeLUTFiles = cms.vstring(
        'L1Trigger/CSCTriggerPrimitives/data/CCLUT/CSCComparatorCodeSlopeLUT_pat0_v1.txt',
        'L1Trigger/CSCTriggerPrimitives/data/CCLUT/CSCComparatorCodeSlopeLUT_pat1_v1.txt',
        'L1Trigger/CSCTriggerPrimitives/data/CCLUT/CSCComparatorCodeSlopeLUT_pat2_v1.txt',
        'L1Trigger/CSCTriggerPrimitives/data/CCLUT/CSCComparatorCodeSlopeLUT_pat3_v1.txt',
        'L1Trigger/CSCTriggerPrimitives/data/CCLUT/CSCComparatorCodeSlopeLUT_pat4_v1.txt'
    )
)


process.GlobalParametersRcdSource = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('L1TGlobalParametersRcd')
)


process.GlobalTag = cms.ESSource("PoolDBESSource",
    DBParameters = cms.PSet(
        authenticationPath = cms.untracked.string(''),
        authenticationSystem = cms.untracked.int32(0),
        connectionTimeout = cms.untracked.int32(0),
        messageLevel = cms.untracked.int32(0),
        security = cms.untracked.string('')
    ),
    DumpStat = cms.untracked.bool(False),
    ReconnectEachRun = cms.untracked.bool(False),
    RefreshAlways = cms.untracked.bool(False),
    RefreshEachRun = cms.untracked.bool(False),
    RefreshOpenIOVs = cms.untracked.bool(False),
    connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS'),
    globaltag = cms.string('141X_mcRun4_realistic_v1'),
    pfnPostfix = cms.untracked.string(''),
    pfnPrefix = cms.untracked.string(''),
    snapshotTime = cms.string(''),
    toGet = cms.VPSet(
        cms.PSet(
            connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS'),
            record = cms.string('SiPixelGenErrorDBObjectRcd'),
            snapshotTime = cms.string('2023-05-16 20:00:00'),
            tag = cms.string('SiPixelGenErrorDBObject_phase2_IT_v7.1.1_25x100_v1_mc')
        ),
        cms.PSet(
            connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS'),
            record = cms.string('SiPixelLorentzAngleRcd'),
            snapshotTime = cms.string('2023-05-16 20:00:00.000'),
            tag = cms.string('SiPixelLorentzAngle_phase2_IT_v7.1.1_25x100_v1_mc')
        ),
        cms.PSet(
            connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS'),
            label = cms.untracked.string('forWidth'),
            record = cms.string('SiPixelLorentzAngleRcd'),
            snapshotTime = cms.string('2023-12-02 15:55:00.000'),
            tag = cms.string('SiPixelLorentzAngle_phase2_IT_v7.1.1_25x100_empty_mc')
        ),
        cms.PSet(
            connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS'),
            label = cms.untracked.string('fromAlignment'),
            record = cms.string('SiPixelLorentzAngleRcd'),
            snapshotTime = cms.string('2023-12-02 15:55:00.000'),
            tag = cms.string('SiPixelLorentzAngle_phase2_IT_v7.1.1_25x100_empty_mc')
        ),
        cms.PSet(
            connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS'),
            record = cms.string('SiPixelLorentzAngleSimRcd'),
            snapshotTime = cms.string('2024-03-07 21:00:00.000'),
            tag = cms.string('SiPixelSimLorentzAngle_phase2_IT_v7.1.1_25x100_v1_mc')
        ),
        cms.PSet(
            connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS'),
            record = cms.string('SiPixelTemplateDBObjectRcd'),
            snapshotTime = cms.string('2023-05-16 20:00:00'),
            tag = cms.string('SiPixelTemplateDBObject_phase2_IT_v7.1.1_25x100_v1_mc')
        ),
        cms.PSet(
            connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS'),
            record = cms.string('TrackerAlignmentErrorExtendedRcd'),
            snapshotTime = cms.string('2023-06-07 21:00:00'),
            tag = cms.string('TrackerAlignmentErrorsExtended_Upgrade2026_T33_design_v0')
        ),
        cms.PSet(
            connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS'),
            record = cms.string('TrackerAlignmentRcd'),
            snapshotTime = cms.string('2023-06-07 21:00:00'),
            tag = cms.string('TrackerAlignment_Upgrade2026_T33_design_v0')
        ),
        cms.PSet(
            connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS'),
            record = cms.string('TrackerSurfaceDeformationRcd'),
            snapshotTime = cms.string('2023-03-16 15:30:00'),
            tag = cms.string('TrackerSurfaceDeformations_Upgrade2026_Zero')
        ),
        cms.PSet(
            connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS'),
            record = cms.string('EcalIntercalibConstantsRcd'),
            tag = cms.string('EcalIntercalibConstants_TL1000_upgrade_8deg_v2_mc')
        ),
        cms.PSet(
            connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS'),
            record = cms.string('EcalIntercalibConstantsMCRcd'),
            tag = cms.string('EcalIntercalibConstantsMC_TL1000_upgrade_8deg_v2_mc')
        ),
        cms.PSet(
            connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS'),
            record = cms.string('EcalLaserAPDPNRatiosRcd'),
            tag = cms.string('EcalLaserAPDPNRatios_TL1000_upgrade_8deg_mc')
        ),
        cms.PSet(
            connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS'),
            record = cms.string('EcalPedestalsRcd'),
            tag = cms.string('EcalPedestals_TL1000_upgradeTIA_8deg_mc')
        ),
        cms.PSet(
            connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS'),
            record = cms.string('EcalTPGLinearizationConstRcd'),
            tag = cms.string('EcalTPGLinearizationConst_TL1000_upgrade_8deg_mc')
        )
    )
)


process.HBDarkeningEP = cms.ESSource("HBHEDarkeningEP",
    appendToDataLabel = cms.string('HB'),
    dosemaps = cms.VPSet(
        cms.PSet(
            energy = cms.int32(8),
            file = cms.FileInPath('CalibCalorimetry/HcalPlugins/data/dosemapHB_4TeV.txt')
        ),
        cms.PSet(
            energy = cms.int32(14),
            file = cms.FileInPath('CalibCalorimetry/HcalPlugins/data/dosemapHB_7TeV.txt')
        )
    ),
    drdA = cms.double(2.7383),
    drdB = cms.double(0.37471),
    ieta_shift = cms.int32(1),
    years = cms.VPSet(
        cms.PSet(
            energy = cms.int32(8),
            intlumi = cms.double(5.6),
            lumirate = cms.double(0.005),
            year = cms.string('2011')
        ),
        cms.PSet(
            energy = cms.int32(8),
            intlumi = cms.double(23.3),
            lumirate = cms.double(0.013),
            year = cms.string('2012')
        ),
        cms.PSet(
            energy = cms.int32(14),
            intlumi = cms.double(4.1),
            lumirate = cms.double(0.009),
            year = cms.string('2015')
        ),
        cms.PSet(
            energy = cms.int32(14),
            intlumi = cms.double(41.0),
            lumirate = cms.double(0.026),
            year = cms.string('2016')
        ),
        cms.PSet(
            energy = cms.int32(14),
            intlumi = cms.double(45.0),
            lumirate = cms.double(0.043),
            year = cms.string('2017')
        ),
        cms.PSet(
            energy = cms.int32(14),
            intlumi = cms.double(45.0),
            lumirate = cms.double(0.043),
            year = cms.string('2018')
        ),
        cms.PSet(
            energy = cms.int32(14),
            intlumi = cms.double(45.0),
            lumirate = cms.double(0.05),
            year = cms.string('2021')
        ),
        cms.PSet(
            energy = cms.int32(14),
            intlumi = cms.double(45.0),
            lumirate = cms.double(0.05),
            year = cms.string('2022')
        ),
        cms.PSet(
            energy = cms.int32(14),
            intlumi = cms.double(50.0),
            lumirate = cms.double(0.05),
            year = cms.string('2023')
        ),
        cms.PSet(
            energy = cms.int32(14),
            intlumi = cms.double(2700),
            lumirate = cms.double(0.15),
            year = cms.string('2038')
        )
    )
)


process.HEDarkeningEP = cms.ESSource("HBHEDarkeningEP",
    appendToDataLabel = cms.string('HE'),
    dosemaps = cms.VPSet(
        cms.PSet(
            energy = cms.int32(8),
            file = cms.FileInPath('CalibCalorimetry/HcalPlugins/data/dosemapHE_4TeV.txt')
        ),
        cms.PSet(
            energy = cms.int32(14),
            file = cms.FileInPath('CalibCalorimetry/HcalPlugins/data/dosemapHE_7TeV.txt')
        )
    ),
    drdA = cms.double(2.7383),
    drdB = cms.double(0.37471),
    ieta_shift = cms.int32(16),
    years = cms.VPSet(
        cms.PSet(
            energy = cms.int32(8),
            intlumi = cms.double(5.6),
            lumirate = cms.double(0.005),
            year = cms.string('2011')
        ),
        cms.PSet(
            energy = cms.int32(8),
            intlumi = cms.double(23.3),
            lumirate = cms.double(0.013),
            year = cms.string('2012')
        ),
        cms.PSet(
            energy = cms.int32(14),
            intlumi = cms.double(4.1),
            lumirate = cms.double(0.009),
            year = cms.string('2015')
        ),
        cms.PSet(
            energy = cms.int32(14),
            intlumi = cms.double(41.0),
            lumirate = cms.double(0.026),
            year = cms.string('2016')
        ),
        cms.PSet(
            energy = cms.int32(14),
            intlumi = cms.double(45.0),
            lumirate = cms.double(0.043),
            year = cms.string('2017')
        ),
        cms.PSet(
            energy = cms.int32(14),
            intlumi = cms.double(45.0),
            lumirate = cms.double(0.043),
            year = cms.string('2018')
        ),
        cms.PSet(
            energy = cms.int32(14),
            intlumi = cms.double(45.0),
            lumirate = cms.double(0.05),
            year = cms.string('2021')
        ),
        cms.PSet(
            energy = cms.int32(14),
            intlumi = cms.double(45.0),
            lumirate = cms.double(0.05),
            year = cms.string('2022')
        ),
        cms.PSet(
            energy = cms.int32(14),
            intlumi = cms.double(50.0),
            lumirate = cms.double(0.05),
            year = cms.string('2023')
        ),
        cms.PSet(
            energy = cms.int32(14),
            intlumi = cms.double(2700),
            lumirate = cms.double(0.15),
            year = cms.string('2038')
        )
    )
)


process.HcalTimeSlewEP = cms.ESSource("HcalTimeSlewEP",
    appendToDataLabel = cms.string('HBHE'),
    timeSlewParametersM2 = cms.VPSet(
        cms.PSet(
            slope = cms.double(-3.178648),
            tmax = cms.double(16.0),
            tzero = cms.double(23.960177)
        ),
        cms.PSet(
            slope = cms.double(-1.5610227),
            tmax = cms.double(10.0),
            tzero = cms.double(11.977461)
        ),
        cms.PSet(
            slope = cms.double(-1.075824),
            tmax = cms.double(6.25),
            tzero = cms.double(9.109694)
        )
    ),
    timeSlewParametersM3 = cms.VPSet(
        cms.PSet(
            cap = cms.double(6.0),
            tspar0 = cms.double(12.2999),
            tspar0_siPM = cms.double(0.0),
            tspar1 = cms.double(-2.19142),
            tspar1_siPM = cms.double(0.0),
            tspar2 = cms.double(0.0),
            tspar2_siPM = cms.double(0.0)
        ),
        cms.PSet(
            cap = cms.double(6.0),
            tspar0 = cms.double(15.5),
            tspar0_siPM = cms.double(0.0),
            tspar1 = cms.double(-3.2),
            tspar1_siPM = cms.double(0.0),
            tspar2 = cms.double(32.0),
            tspar2_siPM = cms.double(0.0)
        ),
        cms.PSet(
            cap = cms.double(6.0),
            tspar0 = cms.double(12.2999),
            tspar0_siPM = cms.double(0.0),
            tspar1 = cms.double(-2.19142),
            tspar1_siPM = cms.double(0.0),
            tspar2 = cms.double(0.0),
            tspar2_siPM = cms.double(0.0)
        ),
        cms.PSet(
            cap = cms.double(6.0),
            tspar0 = cms.double(12.2999),
            tspar0_siPM = cms.double(0.0),
            tspar1 = cms.double(-2.19142),
            tspar1_siPM = cms.double(0.0),
            tspar2 = cms.double(0.0),
            tspar2_siPM = cms.double(0.0)
        )
    )
)


process.HepPDTESSource = cms.ESSource("HepPDTESSource",
    pdtFileName = cms.FileInPath('SimGeneral/HepPDTESSource/data/pythiaparticle.tbl')
)


process.SiPhase2OTFakeBadStripsESSource = cms.ESSource("SiPhase2BadStripConfigurableFakeESSource",
    appendToDataLabel = cms.string(''),
    badComponentsFraction = cms.double(0.0),
    printDebug = cms.untracked.bool(False),
    seed = cms.uint32(1)
)


process.XMLIdealGeometryESSource = cms.ESSource("XMLIdealGeometryESSource",
    geomXMLFiles = cms.vstring(
        'Geometry/CMSCommonData/data/materials/2021/v1/materials.xml',
        'Geometry/CMSCommonData/data/rotations.xml',
        'Geometry/CMSCommonData/data/extend/v2/cmsextent.xml',
        'Geometry/CMSCommonData/data/cavernData/2021/v1/cavernData.xml',
        'Geometry/CMSCommonData/data/cms/2026/v5/cms.xml',
        'Geometry/CMSCommonData/data/cmsMother.xml',
        'Geometry/CMSCommonData/data/eta3/etaMax.xml',
        'Geometry/CMSCommonData/data/cmsTracker.xml',
        'Geometry/CMSCommonData/data/caloBase/2026/v7/caloBase.xml',
        'Geometry/CMSCommonData/data/cmsCalo.xml',
        'Geometry/CMSCommonData/data/muonBase/2026/v5/muonBase.xml',
        'Geometry/CMSCommonData/data/cmsMuon.xml',
        'Geometry/CMSCommonData/data/mgnt.xml',
        'Geometry/CMSCommonData/data/beampipe/2026/v3/beampipe.xml',
        'Geometry/CMSCommonData/data/cmsBeam/2026/v1/cmsBeam.xml',
        'Geometry/CMSCommonData/data/muonMB.xml',
        'Geometry/CMSCommonData/data/muonMagnet.xml',
        'Geometry/CMSCommonData/data/cavern/2021/v1/cavern.xml',
        'Geometry/CMSCommonData/data/cavernFloor/2017/v1/cavernFloor.xml',
        'Geometry/TrackerCommonData/data/PhaseII/trackerParameters.xml',
        'Geometry/TrackerCommonData/data/pixfwdCommon.xml',
        'Geometry/TrackerCommonData/data/PhaseII/Tracker_DD4hep_compatible_2021_02/pixfwd.xml',
        'Geometry/TrackerCommonData/data/PhaseII/Tracker_DD4hep_compatible_OT800_IT615_2022_10/pixbar.xml',
        'Geometry/TrackerCommonData/data/trackermaterial.xml',
        'Geometry/TrackerCommonData/data/PhaseII/Tracker_DD4hep_compatible_2021_03/tracker.xml',
        'Geometry/TrackerCommonData/data/PhaseII/OuterTracker616_2020_04/otst.xml',
        'Geometry/TrackerCommonData/data/PhaseII/Tracker_DD4hep_compatible_IT711_2023_05/pixel.xml',
        'Geometry/TrackerCommonData/data/PhaseII/TiltedTracker404/trackerbar.xml',
        'Geometry/TrackerCommonData/data/PhaseII/TiltedTracker404/trackerfwd.xml',
        'Geometry/TrackerCommonData/data/PhaseII/Tracker_DD4hep_compatible_2021_02/trackerStructureTopology.xml',
        'Geometry/TrackerCommonData/data/PhaseII/Tracker_DD4hep_compatible_IT711_2023_05/pixelStructureTopology.xml',
        'Geometry/TrackerSimData/data/PhaseII/Tracker_DD4hep_compatible_2021_02/trackersens.xml',
        'Geometry/TrackerSimData/data/PhaseII/Tracker_DD4hep_compatible_IT711_2023_05/pixelsens.xml',
        'Geometry/TrackerRecoData/data/PhaseII/Tracker_DD4hep_compatible_IT711_2023_05/trackerRecoMaterial.xml',
        'Geometry/TrackerSimData/data/PhaseII/Tracker_DD4hep_compatible_2021_02/trackerProdCuts.xml',
        'Geometry/TrackerSimData/data/PhaseII/Tracker_DD4hep_compatible_IT711_2023_05/pixelProdCuts.xml',
        'Geometry/TrackerSimData/data/trackerProdCutsBEAM.xml',
        'Geometry/EcalCommonData/data/eregalgo/2026/v2/eregalgo.xml',
        'Geometry/EcalCommonData/data/ectkcable/2026/v1/ectkcable.xml',
        'Geometry/EcalCommonData/data/ectkcablemat/2026/v2/ectkcablemat.xml',
        'Geometry/EcalCommonData/data/ebalgo.xml',
        'Geometry/EcalCommonData/data/ebcon/2021/v1/ebcon.xml',
        'Geometry/EcalCommonData/data/ebrot.xml',
        'Geometry/HcalCommonData/data/hcalrotations.xml',
        'Geometry/HcalCommonData/data/average/hcalforwardmaterial.xml',
        'Geometry/HcalCommonData/data/hcal/v2/hcalalgo.xml',
        'Geometry/HcalCommonData/data/hcalbarrelalgo.xml',
        'Geometry/HcalCommonData/data/hcalcablealgo/v2/hcalcablealgo.xml',
        'Geometry/HcalCommonData/data/hcalouteralgo/v1/hcalouteralgo.xml',
        'Geometry/HcalCommonData/data/hcalforwardalgo.xml',
        'Geometry/HcalCommonData/data/hcalSimNumbering/NoHE/v1/hcalSimNumbering.xml',
        'Geometry/HcalCommonData/data/hcalRecNumbering/NoHE/v2/hcalRecNumbering.xml',
        'Geometry/HGCalCommonData/data/hgcalMaterial/v2/hgcalMaterial.xml',
        'Geometry/HGCalCommonData/data/hgcal/v17/hgcal.xml',
        'Geometry/HGCalCommonData/data/hgcalcell/v17/hgcalcell.xml',
        'Geometry/HGCalCommonData/data/hgcalwafer/v17/hgcalwafer.xml',
        'Geometry/HGCalCommonData/data/hgcalEE/v17/hgcalEE.xml',
        'Geometry/HGCalCommonData/data/hgcalHEsil/v17/hgcalHEsil.xml',
        'Geometry/HGCalCommonData/data/hgcalHEmix/v17/hgcalHEmix.xml',
        'Geometry/HGCalCommonData/data/hgcalCons/v17/hgcalCons.xml',
        'Geometry/HGCalCommonData/data/hgcalConsData/v17/hgcalConsData.xml',
        'Geometry/MuonCommonData/data/mbCommon/2021/v1/mbCommon.xml',
        'Geometry/MuonCommonData/data/mb1/2015/v2/mb1.xml',
        'Geometry/MuonCommonData/data/mb2/2015/v2/mb2.xml',
        'Geometry/MuonCommonData/data/mb3/2015/v2/mb3.xml',
        'Geometry/MuonCommonData/data/mb4/2015/v2/mb4.xml',
        'Geometry/MuonCommonData/data/mb4Shield/2021/v1/mb4Shield.xml',
        'Geometry/MuonCommonData/data/muonYoke/2026/v3/muonYoke.xml',
        'Geometry/MuonCommonData/data/mf/2026/v8/mf.xml',
        'Geometry/MuonCommonData/data/csc/2021/v2/csc.xml',
        'Geometry/MuonCommonData/data/rpcf/2026/v3/rpcf.xml',
        'Geometry/MuonCommonData/data/gemf/TDR_BaseLine/gemf.xml',
        'Geometry/MuonCommonData/data/gem11/TDR_BaseLine/gem11.xml',
        'Geometry/MuonCommonData/data/gem21/2026/v1/gem21.xml',
        'Geometry/MuonCommonData/data/mfshield/2026/v6/mfshield.xml',
        'Geometry/MuonCommonData/data/ge0/TDR_Dev/v4/ge0.xml',
        'Geometry/MuonCommonData/data/ge0shield/2026/v1/ge0shield.xml',
        'Geometry/ForwardCommonData/data/forwardshield/2026/v4/forwardshield.xml',
        'Geometry/ForwardCommonData/data/zdcmaterials/2021/v1/zdcmaterials.xml',
        'Geometry/ForwardCommonData/data/lumimaterials.xml',
        'Geometry/ForwardCommonData/data/zdcrotations.xml',
        'Geometry/ForwardCommonData/data/lumirotations.xml',
        'Geometry/ForwardCommonData/data/zdc/2026/v1/zdc.xml',
        'Geometry/ForwardCommonData/data/zdclumi/2021/v2/zdclumi.xml',
        'Geometry/ForwardCommonData/data/cmszdc.xml',
        'Geometry/MTDCommonData/data/mtdMaterial/v3/mtdMaterial.xml',
        'Geometry/MTDCommonData/data/btl/v3/btl.xml',
        'Geometry/MTDCommonData/data/etl/v8/etl.xml',
        'Geometry/MTDCommonData/data/mtdParameters/v5/mtdStructureTopology.xml',
        'Geometry/MTDCommonData/data/mtdParameters/v5/mtdParameters.xml',
        'Geometry/MuonCommonData/data/muonNumbering/TDR_DeV/v5/muonNumbering.xml',
        'Geometry/EcalSimData/data/PhaseII/ecalsens.xml',
        'Geometry/HcalCommonData/data/hcalsens/NoHE/v1/hcalsenspmf.xml',
        'Geometry/HcalSimData/data/hf.xml',
        'Geometry/HcalSimData/data/hfpmt.xml',
        'Geometry/HcalSimData/data/hffibrebundle.xml',
        'Geometry/HcalSimData/data/CaloUtil/2026/v2c/CaloUtil.xml',
        'Geometry/HGCalSimData/data/hgcsensv15.xml',
        'Geometry/MuonSimData/data/PhaseII/v2/muonSens.xml',
        'Geometry/DTGeometryBuilder/data/dtSpecsFilter/2021/v1/dtSpecsFilter.xml',
        'Geometry/CSCGeometryBuilder/data/cscSpecsFilter.xml',
        'Geometry/CSCGeometryBuilder/data/cscSpecs.xml',
        'Geometry/RPCGeometryBuilder/data/2026/v1/RPCSpecs.xml',
        'Geometry/GEMGeometryBuilder/data/v12/GEMSpecsFilter.xml',
        'Geometry/GEMGeometryBuilder/data/v12/GEMSpecs.xml',
        'Geometry/ForwardSimData/data/zdcsens.xml',
        'Geometry/MTDSimData/data/v5/mtdsens.xml',
        'Geometry/HcalSimData/data/HcalProdCuts/2026/v1/HcalProdCuts.xml',
        'Geometry/EcalSimData/data/EcalProdCuts.xml',
        'Geometry/HGCalSimData/data/hgcProdCutsv15.xml',
        'Geometry/MuonSimData/data/muonProdCuts/2026/v2/muonProdCuts.xml',
        'Geometry/ForwardSimData/data/zdcProdCuts/2021/v2/zdcProdCuts.xml',
        'Geometry/ForwardSimData/data/ForwardShieldProdCuts.xml',
        'Geometry/MTDSimData/data/v5/mtdProdCuts.xml',
        'Geometry/CMSCommonData/data/FieldParameters.xml'
    ),
    rootNodeName = cms.string('cms:OCMS')
)


process.bmbtfParamsSource = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('L1TMuonBarrelParamsRcd')
)


process.caloConfigSource = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('L1TCaloConfigRcd')
)


process.eegeom = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('EcalMappingRcd')
)


process.es_hardcode = cms.ESSource("HcalHardcodeCalibrations",
    GainWidthsForTrigPrims = cms.bool(True),
    HBRecalibration = cms.bool(True),
    HBmeanenergies = cms.FileInPath('CalibCalorimetry/HcalPlugins/data/meanenergiesHB.txt'),
    HBreCalibCutoff = cms.double(100.0),
    HERecalibration = cms.bool(False),
    HEmeanenergies = cms.FileInPath('CalibCalorimetry/HcalPlugins/data/meanenergiesHE.txt'),
    HEreCalibCutoff = cms.double(100.0),
    HFRecalParameterBlock = cms.PSet(
        HFdepthOneParameterA = cms.vdouble(
            0.004123, 0.00602, 0.008201, 0.010489, 0.013379,
            0.016997, 0.021464, 0.027371, 0.034195, 0.044807,
            0.058939, 0.125497
        ),
        HFdepthOneParameterB = cms.vdouble(
            -4e-06, -2e-06, 0.0, 4e-06, 1.5e-05,
            2.6e-05, 6.3e-05, 8.4e-05, 0.00016, 0.000107,
            0.000425, 0.000209
        ),
        HFdepthTwoParameterA = cms.vdouble(
            0.002861, 0.004168, 0.0064, 0.008388, 0.011601,
            0.014425, 0.018633, 0.023232, 0.028274, 0.035447,
            0.051579, 0.086593
        ),
        HFdepthTwoParameterB = cms.vdouble(
            -2e-06, -0.0, -7e-06, -6e-06, -2e-06,
            1e-06, 1.9e-05, 3.1e-05, 6.7e-05, 1.2e-05,
            0.000157, -3e-06
        )
    ),
    HFRecalibration = cms.bool(True),
    SiPMCharacteristics = cms.VPSet(
        cms.PSet(
            crosstalk = cms.double(0.0),
            nonlin1 = cms.double(1.0),
            nonlin2 = cms.double(0.0),
            nonlin3 = cms.double(0.0),
            pixels = cms.int32(36000)
        ),
        cms.PSet(
            crosstalk = cms.double(0.0),
            nonlin1 = cms.double(1.0),
            nonlin2 = cms.double(0.0),
            nonlin3 = cms.double(0.0),
            pixels = cms.int32(2500)
        ),
        cms.PSet(
            crosstalk = cms.double(0.17),
            nonlin1 = cms.double(1.00985),
            nonlin2 = cms.double(7.84089e-06),
            nonlin3 = cms.double(2.86282e-10),
            pixels = cms.int32(27370)
        ),
        cms.PSet(
            crosstalk = cms.double(0.196),
            nonlin1 = cms.double(1.00546),
            nonlin2 = cms.double(6.40239e-06),
            nonlin3 = cms.double(1.27011e-10),
            pixels = cms.int32(38018)
        ),
        cms.PSet(
            crosstalk = cms.double(0.17),
            nonlin1 = cms.double(1.00985),
            nonlin2 = cms.double(7.84089e-06),
            nonlin3 = cms.double(2.86282e-10),
            pixels = cms.int32(27370)
        ),
        cms.PSet(
            crosstalk = cms.double(0.196),
            nonlin1 = cms.double(1.00546),
            nonlin2 = cms.double(6.40239e-06),
            nonlin3 = cms.double(1.27011e-10),
            pixels = cms.int32(38018)
        ),
        cms.PSet(
            crosstalk = cms.double(0.0),
            nonlin1 = cms.double(1.0),
            nonlin2 = cms.double(0.0),
            nonlin3 = cms.double(0.0),
            pixels = cms.int32(0)
        )
    ),
    hb = cms.PSet(
        darkCurrent = cms.vdouble(0.0),
        doRadiationDamage = cms.bool(False),
        gain = cms.vdouble(0.19),
        gainWidth = cms.vdouble(0.0),
        mcShape = cms.int32(125),
        noiseCorrelation = cms.vdouble(0.0),
        noiseThreshold = cms.double(0.0),
        pedestal = cms.double(3.285),
        pedestalWidth = cms.double(0.809),
        photoelectronsToAnalog = cms.double(0.3305),
        qieOffset = cms.vdouble(-0.49, 1.8, 7.2, 37.9),
        qieSlope = cms.vdouble(0.912, 0.917, 0.922, 0.923),
        qieType = cms.int32(0),
        recoShape = cms.int32(105),
        seedThreshold = cms.double(0.1),
        zsThreshold = cms.int32(8)
    ),
    hbUpgrade = cms.PSet(
        darkCurrent = cms.vdouble(0.01, 0.015),
        doRadiationDamage = cms.bool(True),
        gain = cms.vdouble(0.0006252),
        gainWidth = cms.vdouble(0),
        mcShape = cms.int32(206),
        noiseCorrelation = cms.vdouble(0.26, 0.254),
        noiseThreshold = cms.double(0.0),
        pedestal = cms.double(17.3),
        pedestalWidth = cms.double(1.5),
        photoelectronsToAnalog = cms.double(40.0),
        qieOffset = cms.vdouble(0.0, 0.0, 0.0, 0.0),
        qieSlope = cms.vdouble(0.05376, 0.05376, 0.05376, 0.05376),
        qieType = cms.int32(2),
        radiationDamage = cms.PSet(
            depVsNeutrons = cms.vdouble(5.543e-10, 8.012e-10),
            depVsTemp = cms.double(0.0631),
            intlumiOffset = cms.double(150),
            intlumiToNeutrons = cms.double(367000000.0),
            temperatureBase = cms.double(20),
            temperatureNew = cms.double(-5)
        ),
        recoShape = cms.int32(208),
        seedThreshold = cms.double(0.1),
        zsThreshold = cms.int32(16)
    ),
    he = cms.PSet(
        darkCurrent = cms.vdouble(0.0),
        doRadiationDamage = cms.bool(False),
        gain = cms.vdouble(0.23),
        gainWidth = cms.vdouble(0),
        mcShape = cms.int32(125),
        noiseCorrelation = cms.vdouble(0.0),
        noiseThreshold = cms.double(0.0),
        pedestal = cms.double(3.163),
        pedestalWidth = cms.double(0.9698),
        photoelectronsToAnalog = cms.double(0.3305),
        qieOffset = cms.vdouble(-0.38, 2.0, 7.6, 39.6),
        qieSlope = cms.vdouble(0.912, 0.916, 0.92, 0.922),
        qieType = cms.int32(0),
        recoShape = cms.int32(105),
        seedThreshold = cms.double(0.1),
        zsThreshold = cms.int32(9)
    ),
    heUpgrade = cms.PSet(
        darkCurrent = cms.vdouble(0.01, 0.015),
        doRadiationDamage = cms.bool(True),
        gain = cms.vdouble(0.0006252),
        gainWidth = cms.vdouble(0),
        mcShape = cms.int32(206),
        noiseCorrelation = cms.vdouble(0.26, 0.254),
        noiseThreshold = cms.double(0.0),
        pedestal = cms.double(17.3),
        pedestalWidth = cms.double(1.5),
        photoelectronsToAnalog = cms.double(40.0),
        qieOffset = cms.vdouble(0.0, 0.0, 0.0, 0.0),
        qieSlope = cms.vdouble(0.05376, 0.05376, 0.05376, 0.05376),
        qieType = cms.int32(2),
        radiationDamage = cms.PSet(
            depVsNeutrons = cms.vdouble(5.543e-10, 8.012e-10),
            depVsTemp = cms.double(0.0631),
            intlumiOffset = cms.double(75),
            intlumiToNeutrons = cms.double(29200000.0),
            temperatureBase = cms.double(20),
            temperatureNew = cms.double(5)
        ),
        recoShape = cms.int32(208),
        seedThreshold = cms.double(0.1),
        zsThreshold = cms.int32(16)
    ),
    hf = cms.PSet(
        darkCurrent = cms.vdouble(0.0),
        doRadiationDamage = cms.bool(False),
        gain = cms.vdouble(0.14, 0.135),
        gainWidth = cms.vdouble(0.0, 0.0),
        mcShape = cms.int32(301),
        noiseCorrelation = cms.vdouble(0.0),
        noiseThreshold = cms.double(0.0),
        pedestal = cms.double(9.354),
        pedestalWidth = cms.double(2.516),
        photoelectronsToAnalog = cms.double(0.0),
        qieOffset = cms.vdouble(-0.87, 1.4, 7.8, -29.6),
        qieSlope = cms.vdouble(0.359, 0.358, 0.36, 0.367),
        qieType = cms.int32(0),
        recoShape = cms.int32(301),
        seedThreshold = cms.double(0.1),
        zsThreshold = cms.int32(-9999)
    ),
    hfUpgrade = cms.PSet(
        darkCurrent = cms.vdouble(0.0),
        doRadiationDamage = cms.bool(False),
        gain = cms.vdouble(0.14, 0.135),
        gainWidth = cms.vdouble(0.0, 0.0),
        mcShape = cms.int32(301),
        noiseCorrelation = cms.vdouble(0.0),
        noiseThreshold = cms.double(0.0),
        pedestal = cms.double(13.33),
        pedestalWidth = cms.double(3.33),
        photoelectronsToAnalog = cms.double(0.0),
        qieOffset = cms.vdouble(0.0697, -0.7405, 12.38, -671.9),
        qieSlope = cms.vdouble(0.297, 0.298, 0.298, 0.313),
        qieType = cms.int32(1),
        recoShape = cms.int32(301),
        seedThreshold = cms.double(0.1),
        zsThreshold = cms.int32(-9999)
    ),
    ho = cms.PSet(
        darkCurrent = cms.vdouble(0.0),
        doRadiationDamage = cms.bool(False),
        gain = cms.vdouble(0.006, 0.0087),
        gainWidth = cms.vdouble(0.0, 0.0),
        mcShape = cms.int32(201),
        noiseCorrelation = cms.vdouble(0.0),
        noiseThreshold = cms.double(0.0),
        pedestal = cms.double(12.06),
        pedestalWidth = cms.double(0.6285),
        photoelectronsToAnalog = cms.double(4.0),
        qieOffset = cms.vdouble(-0.44, 1.4, 7.1, 38.5),
        qieSlope = cms.vdouble(0.907, 0.915, 0.92, 0.921),
        qieType = cms.int32(0),
        recoShape = cms.int32(201),
        seedThreshold = cms.double(0.1),
        zsThreshold = cms.int32(24)
    ),
    iLumi = cms.double(1000.0),
    killHE = cms.bool(True),
    testHEPlan1 = cms.bool(False),
    testHFQIE10 = cms.bool(False),
    toGet = cms.untracked.vstring(
        'GainWidths',
        'MCParams',
        'RecoParams',
        'RespCorrs',
        'QIEData',
        'QIETypes',
        'Gains',
        'Pedestals',
        'PedestalWidths',
        'EffectivePedestals',
        'EffectivePedestalWidths',
        'ChannelQuality',
        'ZSThresholds',
        'TimeCorrs',
        'LUTCorrs',
        'LutMetadata',
        'L1TriggerObjects',
        'PFCorrs',
        'PFCuts',
        'FrontEndMap',
        'CovarianceMatrices',
        'SiPMParameters',
        'SiPMCharacteristics',
        'TPChannelParameters',
        'TPParameters',
        'FlagHFDigiTimeParams'
    ),
    useHBUpgrade = cms.bool(True),
    useHEUpgrade = cms.bool(True),
    useHFUpgrade = cms.bool(True),
    useHOUpgrade = cms.bool(True),
    useIeta18depth1 = cms.bool(False),
    useLayer0Weight = cms.bool(True)
)


process.essourceEcalSev = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('EcalSeverityLevelAlgoRcd')
)


process.essourceSev = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('HcalSeverityLevelComputerRcd')
)


process.l1ugmtdb = cms.ESSource("PoolDBESSource",
    DBParameters = cms.PSet(
        authenticationPath = cms.untracked.string(''),
        authenticationSystem = cms.untracked.int32(0),
        connectionTimeout = cms.untracked.int32(0),
        messageLevel = cms.untracked.int32(0),
        security = cms.untracked.string('')
    ),
    connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS'),
    toGet = cms.VPSet(cms.PSet(
        record = cms.string('L1TMuonGlobalParamsO2ORcd'),
        tag = cms.string('L1TMuonGlobalParamsPrototype_Stage2v0_hlt')
    ))
)


process.rpcconesrc = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('L1RPCConeBuilderRcd')
)


process.siPhase2BadStripConfigurableFakeESSource = cms.ESSource("SiPhase2BadStripConfigurableFakeESSource",
    appendToDataLabel = cms.string(''),
    badComponentsFraction = cms.double(0.01),
    printDebug = cms.untracked.bool(False),
    seed = cms.uint32(1)
)


process.trackdnn_source = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('TfGraphRecord')
)


process.twinmuxParamsSource = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('L1TTwinMuxParamsRcd')
)


process.prefer("TTClusterAlgorithm_official_Phase2TrackerDigi_")

process.prefer("TTStubAlgorithm_official_Phase2TrackerDigi_")

process.prefer("SiPhase2OTFakeBadStripsESSource")

process.prefer("es_hardcode")

process.L1THFnoseVFE = cms.Task(process.l1tHFnoseVFEProducer)


process.L1THGCalBackEndLayer1 = cms.Task(process.l1tHGCalBackEndLayer1Producer)


process.L1THGCalBackEndLayer1HFNose = cms.Task(process.l1tHGCalBackEndLayer1ProducerHFNose)


process.L1THGCalBackEndLayer2 = cms.Task(process.l1tHGCalBackEndLayer2Producer)


process.L1THGCalBackEndLayer2HFNose = cms.Task(process.l1tHGCalBackEndLayer2ProducerHFNose)


process.L1THGCalBackEndStage1 = cms.Task(process.l1tHGCalBackEndStage1Producer)


process.L1THGCalBackEndStage2 = cms.Task(process.l1tHGCalBackEndStage2Producer)


process.L1THGCalConcentrator = cms.Task(process.l1tHGCalConcentratorProducer)


process.L1THGCalConcentratorHFNose = cms.Task(process.l1tHGCalConcentratorProducerHFNose)


process.L1THGCalTower = cms.Task(process.l1tHGCalTowerProducer)


process.L1THGCalTowerHFNose = cms.Task(process.l1tHGCalTowerProducerHFNose)


process.L1THGCalTowerMap = cms.Task(process.l1tHGCalTowerMapProducer)


process.L1THGCalTowerMapHFNose = cms.Task(process.l1tHGCalTowerMapProducerHFNose)


process.L1THGCalVFE = cms.Task(process.l1tHGCalVFEProducer)


process.L1TLayer1Task = cms.Task(process.l1tLayer1, process.l1tLayer1Barrel, process.l1tLayer1BarrelExtended, process.l1tLayer1EG, process.l1tLayer1EGElliptic, process.l1tLayer1Extended, process.l1tLayer1HF, process.l1tLayer1HGCal, process.l1tLayer1HGCalElliptic, process.l1tLayer1HGCalExtended, process.l1tLayer1HGCalNoTK)


process.L1TLayer1TaskInputsTask = cms.Task(process.l1tPFClustersFromCombinedCaloHCal, process.l1tPFClustersFromCombinedCaloHF, process.l1tPFClustersFromHGC3DClusters, process.l1tPFClustersFromL1EGClusters, process.l1tPFTracksFromL1Tracks, process.l1tPFTracksFromL1TracksExtended)


process.L1TLayer2EGTask = cms.Task(process.l1tLayer2Deregionizer, process.l1tLayer2EG, process.l1tLayer2EGElliptic)


process.L1TPFJetsEmulationTask = cms.Task(process.l1tLayer2Deregionizer, process.l1tSC4PFL1PuppiCorrectedEmulator, process.l1tSC4PFL1PuppiCorrectedEmulatorMHT, process.l1tSC4PFL1PuppiEmulator, process.l1tSC8PFL1PuppiCorrectedEmulator, process.l1tSC8PFL1PuppiEmulator)


process.L1TPFJetsExtendedTask = cms.Task(process.l1tLayer2DeregionizerExtended, process.l1tSC4PFL1PuppiExtended, process.l1tSC4PFL1PuppiExtendedCorrectedEmulator, process.l1tSC4PFL1PuppiExtendedEmulator)


process.L1TPFJetsPhase1Task_9x9 = cms.Task(process.l1tPhase1JetCalibrator9x9, process.l1tPhase1JetProducer9x9, process.l1tPhase1JetSumsProducer9x9)


process.L1TPFJetsPhase1Task_9x9trimmed = cms.Task(process.l1tPhase1JetCalibrator9x9trimmed, process.l1tPhase1JetProducer9x9trimmed, process.l1tPhase1JetSumsProducer9x9trimmed)


process.L1TPFJetsTask = cms.Task(process.l1tLayer2Deregionizer, process.l1tSC4PFL1PF, process.l1tSC4PFL1Puppi, process.l1tSC4PFL1PuppiCorrectedEmulator, process.l1tSC4PFL1PuppiCorrectedEmulatorMHT, process.l1tSC4PFL1PuppiEmulator, process.l1tSC8PFL1PuppiCorrectedEmulator, process.l1tSC8PFL1PuppiEmulator)


process.L1TTOoLLiPTask = cms.Task(process.L1TPFJetsExtendedTask, process.l1tTOoLLiPProducer, process.l1tTOoLLiPProducerCorrectedEmulator)


process.L1TZDCEmulationTask = cms.Task(process.l1tZDCEtSums)


process.SimL1TCalorimeterTask = cms.Task(process.simCaloStage2Digis, process.simCaloStage2Layer1Digis, process.simCaloStage2Layer1Summary)


process.SimL1TGlobalTask = cms.Task(process.simGtStage2Digis)


process.SimL1TMuonCommonTask = cms.Task(process.simCscTriggerPrimitiveDigis, process.simDtTriggerPrimitiveDigis)


process.SimL1TechnicalTriggersTask = cms.Task(process.simGtExtFakeStage2Digis)


process.ge0TriggerPseudoDigiTask = cms.Task(process.ge0TriggerConvertedPseudoDigis, process.gemRecHits, process.gemSegments)


process.l1tHGCalEnergySplitTowersTask = cms.Task(process.l1tHGCalEnergySplitTowerMapProducer, process.l1tHGCalEnergySplitTowerProducer)


process.me0TriggerAllDigiTask = cms.Task(process.ge0TriggerPseudoDigiTask)


process.me0TriggerPseudoDigiTask = cms.Task(process.me0RecHits, process.me0RecHitsCoarse, process.me0Segments, process.me0TriggerConvertedPseudoDigis, process.me0TriggerPseudoDigis, process.simMuonME0PseudoReDigisCoarse)


process.me0TriggerRealDigiTask = cms.Task(process.me0TriggerDigis, process.simMuonME0PadDigis)


process.simMuonGEMPadTask = cms.Task(process.simMuonGEMPadDigiClusters, process.simMuonGEMPadDigis)


process.patAlgosToolsTask = cms.Task()


process.L1TBJetsTask = cms.Task(process.L1TPFJetsExtendedTask, process.l1tBJetProducerPuppi, process.l1tBJetProducerPuppiCorrectedEmulator)


process.L1THGCalTriggerPrimitivesTask = cms.Task(process.L1THGCalBackEndLayer1, process.L1THGCalBackEndLayer2, process.L1THGCalConcentrator, process.L1THGCalTower, process.L1THGCalTowerMap, process.L1THGCalVFE)


process.SimL1TMuonTask = cms.Task(process.SimL1TMuonCommonTask, process.me0TriggerAllDigiTask, process.simBmtfDigis, process.simCscTriggerPrimitiveDigisPhase2, process.simCscTriggerPrimitiveDigisRun3, process.simEmtfDigis, process.simEmtfShowers, process.simGmtCaloSumDigis, process.simGmtShowerDigis, process.simGmtStage2Digis, process.simKBmtfDigis, process.simKBmtfStubs, process.simMuonGEMPadTask, process.simOmtfDigis, process.simTwinMuxDigis)


process.ge0TriggerAllDigiTask = cms.Task(process.ge0TriggerPseudoDigiTask)


process.l1tCaloJetsTausTask = cms.Task(process.l1tHGCalEnergySplitTowersTask, process.l1tPhase2CaloJetEmulator)


process.SimL1EmulatorCoreTask = cms.Task(process.L1TZDCEmulationTask, process.SimL1TCalorimeterTask, process.SimL1TGlobalTask, process.SimL1TMuonTask, process.SimL1TechnicalTriggersTask)


process.SimL1EmulatorTask = cms.Task(process.CalibratedDigis, process.L1TBJetsTask, process.L1THGCalTriggerPrimitivesTask, process.L1TLayer1Task, process.L1TLayer1TaskInputsTask, process.L1TLayer2EGTask, process.L1TPFJetsEmulationTask, process.L1TPFJetsPhase1Task_9x9, process.L1TPFJetsPhase1Task_9x9trimmed, process.L1TTOoLLiPTask, process.SimL1EmulatorCoreTask, process.dtTriggerPhase2PrimitiveDigis, process.l1tCaloJet, process.l1tCaloJetHTT, process.l1tCaloJetsTausTask, process.l1tEGammaClusterEmuProducer, process.l1tFwdMuonsGmt, process.l1tGTTInputProducer, process.l1tGTTInputProducerExtended, process.l1tHPSPFTauProducer, process.l1tKMTFMuonsGmt, process.l1tMETMLProducer, process.l1tMETPFProducer, process.l1tNNCaloTauEmulator, process.l1tNNCaloTauProducer, process.l1tNNTauProducerPuppi, process.l1tPhase2L1CaloEGammaEmulator, process.l1tSAMuonsGmt, process.l1tStubsGmt, process.l1tTkMuonsGmt, process.l1tTowerCalibration, process.l1tTrackFastJets, process.l1tTrackJets, process.l1tTrackJetsEmulation, process.l1tTrackJetsExtended, process.l1tTrackJetsExtendedEmulation, process.l1tTrackSelectionProducer, process.l1tTrackSelectionProducerExtended, process.l1tTrackSelectionProducerExtendedForEtMiss, process.l1tTrackSelectionProducerExtendedForJets, process.l1tTrackSelectionProducerForEtMiss, process.l1tTrackSelectionProducerForJets, process.l1tTrackTripletEmulation, process.l1tTrackVertexAssociationProducerExtendedForEtMiss, process.l1tTrackVertexAssociationProducerExtendedForJets, process.l1tTrackVertexAssociationProducerForEtMiss, process.l1tTrackVertexAssociationProducerForJets, process.l1tTrackerEmuEtMiss, process.l1tTrackerEmuHTMiss, process.l1tTrackerEmuHTMissExtended, process.l1tTrackerEtMiss, process.l1tTrackerHTMiss, process.l1tVertexFinder, process.l1tVertexFinderEmulator, process.l1tVertexProducer, process.rpcRecHitsForEMTF, process.simCscTriggerPrimitiveDigisForEMTF, process.simEmtfDigisPhase2, process.simOmtfPhase2Digis)


process.L1THGCalTriggerPrimitives = cms.Sequence(process.L1THGCalTriggerPrimitivesTask)


process.L1TPhase1JetsSequence9x9 = cms.Sequence(process.l1tPhase1JetProducer9x9+process.l1tPhase1JetCalibrator9x9+process.l1tPhase1JetSumsProducer9x9)


process.L1TPhase1JetsSequence9x9trimmed = cms.Sequence(process.l1tPhase1JetProducer9x9trimmed+process.l1tPhase1JetCalibrator9x9trimmed+process.l1tPhase1JetSumsProducer9x9trimmed)


process.SimL1Emulator = cms.Sequence(process.SimL1EmulatorTask)


process.SimL1EmulatorCore = cms.Sequence(process.SimL1EmulatorCoreTask)


process.SimL1TCalorimeter = cms.Sequence(process.SimL1TCalorimeterTask)


process.SimL1TGlobal = cms.Sequence(process.SimL1TGlobalTask)


process.SimL1TMuon = cms.Sequence(process.SimL1TMuonTask)


process.SimL1TMuonCommon = cms.Sequence(process.SimL1TMuonCommonTask)


process.SimL1TechnicalTriggers = cms.Sequence(process.SimL1TechnicalTriggersTask)


process.l1tGMTMuons = cms.Sequence(process.gmtKMTFMuons+process.gmtFwdMuons+process.gmtSAMuons+process.gmtTkMuons)


process.l1tGMTStubs = cms.Sequence(process.gmtStubs)


process.L1TExtendedHybridTracks = cms.Sequence(process.offlineBeamSpot+process.l1tTTTracksFromExtendedTrackletEmulation)


process.L1TExtendedHybridTracksWithAssociators = cms.Sequence(process.offlineBeamSpot+process.l1tTTTracksFromExtendedTrackletEmulation+process.TTTrackAssociatorFromPixelDigisExtended)


process.L1THybridTracks = cms.Sequence(process.offlineBeamSpot+process.l1tTTTracksFromTrackletEmulation)


process.L1TPromptExtendedHybridTracks = cms.Sequence(process.offlineBeamSpot+process.l1tTTTracksFromTrackletEmulation+process.l1tTTTracksFromExtendedTrackletEmulation)


process.TrackTriggerAssociatorClustersStubs = cms.Sequence(process.TTClusterAssociatorFromPixelDigis+process.TTStubAssociatorFromPixelDigis)


process.TrackTriggerAssociatorComplete = cms.Sequence(process.TTClusterAssociatorFromPixelDigis+process.TTStubAssociatorFromPixelDigis+process.TTTrackAssociatorFromPixelDigis)


process.TrackTriggerAssociatorTracks = cms.Sequence(process.TTTrackAssociatorFromPixelDigis)


process.TrackTriggerClustersStubs = cms.Sequence(process.TTClustersFromPhase2TrackerDigis+process.TTStubsFromPhase2TrackerDigis)


process.l1tGTAlgoBlockProducerSequence = cms.Sequence(process.l1tGTAlgoBlockProducer)


process.l1tGTProducerSequence = cms.Sequence(process.l1tGTProducer)


process.HLTAK4PFJetsReconstruction = cms.Sequence(process.hltAK4PFJets+process.hltAK4PFJetCorrectorL1+process.hltAK4PFJetCorrectorL2+process.hltAK4PFJetCorrectorL3+process.hltAK4PFJetCorrector+process.hltAK4PFJetsCorrected)


process.HLTAK4PFPuppiJetsReconstruction = cms.Sequence(process.hltGoodOfflinePrimaryVertices+process.hltPixelClustersMultiplicity+process.hltPFPuppi+process.hltAK4PFPuppiJets+process.hltAK4PFPuppiJetCorrectorL1+process.hltAK4PFPuppiJetCorrectorL2+process.hltAK4PFPuppiJetCorrectorL3+process.hltAK4PFPuppiJetCorrector+process.hltAK4PFPuppiJetsCorrected)


process.HLTAK8PFJetsReconstruction = cms.Sequence(process.hltAK8PFJets+process.hltAK8PFJetCorrectorL1+process.hltAK8PFJetCorrectorL2+process.hltAK8PFJetCorrectorL3+process.hltAK8PFJetCorrector+process.hltAK8PFJetsCorrected)


process.HLTBeamSpotSequence = cms.Sequence(process.hltOnlineBeamSpot+process.hltPhase2OnlineBeamSpotDevice)


process.HLTBeginSequence = cms.Sequence(process.hltTriggerType+process.HLTBeamSpotSequence)


process.HLTBtagDeepCSVSequencePFPuppi = cms.Sequence(process.hltDeepBLifetimeTagInfosPFPuppi+process.hltDeepInclusiveVertexFinderPF+process.hltDeepInclusiveSecondaryVerticesPF+process.hltDeepTrackVertexArbitratorPF+process.hltDeepInclusiveMergedVerticesPF+process.hltDeepSecondaryVertexTagInfosPFPuppi+process.hltDeepCombinedSecondaryVertexBJetTagsInfosPuppi+process.hltDeepCombinedSecondaryVertexBJetTagsPFPuppi)


process.HLTBtagDeepCSVSequencePFPuppiModEta2p4 = cms.Sequence(process.hltPFPuppiJetForBtagSelectorEta2p4+process.hltPFPuppiJetForBtagEta2p4+process.hltDeepBLifetimeTagInfosPFPuppiModEta2p4+process.hltDeepInclusiveVertexFinderPF+process.hltDeepInclusiveSecondaryVerticesPF+process.hltDeepTrackVertexArbitratorPF+process.hltDeepInclusiveMergedVerticesPF+process.hltDeepSecondaryVertexTagInfosPFPuppiModEta2p4+process.hltDeepCombinedSecondaryVertexBJetTagsInfosPuppiModEta2p4+process.hltDeepCombinedSecondaryVertexBJetTagsPFPuppiModEta2p4)


process.HLTBtagDeepFlavourSequencePFPuppi = cms.Sequence(process.hltDeepBLifetimeTagInfosPFPuppi+process.hltDeepInclusiveVertexFinderPF+process.hltDeepInclusiveSecondaryVerticesPF+process.hltDeepTrackVertexArbitratorPF+process.hltDeepInclusiveMergedVerticesPF+process.hltDeepSecondaryVertexTagInfosPFPuppi+process.hltPrimaryVertexAssociation+process.hltDeepCombinedSecondaryVertexBJetTagsInfosPuppi+process.hltPfDeepFlavourTagInfos+process.hltPfDeepFlavourJetTags)


process.HLTBtagDeepFlavourSequencePFPuppiModEta2p4 = cms.Sequence(process.hltPFPuppiJetForBtagSelectorEta2p4+process.hltPFPuppiJetForBtagEta2p4+process.hltDeepBLifetimeTagInfosPFPuppiModEta2p4+process.hltDeepInclusiveVertexFinderPF+process.hltDeepInclusiveSecondaryVerticesPF+process.hltDeepTrackVertexArbitratorPF+process.hltDeepInclusiveMergedVerticesPF+process.hltDeepSecondaryVertexTagInfosPFPuppiModEta2p4+process.hltPrimaryVertexAssociationModEta2p4+process.hltDeepCombinedSecondaryVertexBJetTagsInfosPuppiModEta2p4+process.hltPfDeepFlavourTagInfosModEta2p4+process.hltPfDeepFlavourJetTagsModEta2p4)


process.HLTCaloMETReconstruction = cms.Sequence(process.hltCaloMET)


process.HLTCaloTowersRecSequence = cms.Sequence(process.hltTowerMaker)


process.HLTCsclocalrecoSequence = cms.Sequence(process.hltCsc2DRecHits+process.hltCscSegments)


process.HLTDoFullUnpackingEgammaEcalL1SeededSequence = cms.Sequence(process.hltEcalDigis+process.bunchSpacingProducer+process.hltEcalDetIdToBeRecovered+process.hltL1TEGammaFilteredCollectionProducer+process.hltEcalBarrelDigisInRegions+process.hltEcalUncalibRecHitL1Seeded+process.hltEcalRecHitL1Seeded)


process.HLTDoFullUnpackingEgammaEcalSequence = cms.Sequence(process.hltEcalDigis+process.bunchSpacingProducer+process.hltEcalDetIdToBeRecovered+process.hltEcalMultiFitUncalibRecHit+process.hltEcalRecHit+process.hltEcalDetailedTimeRecHit)


process.HLTDoLocalHcalSequence = cms.Sequence(process.hltHbhereco+process.hltHoreco+process.hltHfprereco+process.hltHfreco)


process.HLTDoLocalPixelSequence = cms.Sequence(process.hltPhase2SiPixelClustersSoA+process.hltSiPixelClusters+process.hltSiPixelClusterShapeCache+process.hltPhase2SiPixelRecHitsSoA+process.hltSiPixelRecHits)


process.HLTDoLocalStripSequence = cms.Sequence(process.hltSiPhase2Clusters)


process.HLTDtlocalrecoSequence = cms.Sequence(process.hltDt1DRecHits+process.hltDt4DSegments)


process.HLTEGammaDoLocalHcalSequence = cms.Sequence(process.hltHcalDigis+process.hltHbhereco)


process.HLTEcalDigisSequence = cms.Sequence(process.hltEcalDigis)


process.HLTEle115NonIsoL1SeededGsfElectronL1SeededSequence = cms.Sequence(process.hltEgammaCkfTrackCandidatesForGSFL1Seeded+process.hltEgammaGsfTracksL1Seeded+process.hltEgammaGsfTrackVarsL1Seeded)


process.HLTElePixelMatchL1SeededSequence = cms.Sequence(process.HLTDoLocalPixelSequence+process.HLTDoLocalStripSequence+process.hltMeasurementTrackerEvent+process.hltPixelLayerTriplets+process.hltEgammaHoverEL1Seeded+process.hltEgammaSuperClustersToPixelMatchL1Seeded+process.hltEleSeedsTrackingRegionsL1Seeded+process.hltElePixelHitDoubletsForTripletsL1Seeded+process.hltElePixelHitTripletsL1Seeded+process.hltElePixelSeedsTripletsL1Seeded+process.hltElePixelHitTripletsClusterRemoverL1Seeded+process.hltPixelLayerPairsL1Seeded+process.hltElePixelHitDoubletsL1Seeded+process.hltElePixelSeedsDoubletsL1Seeded+process.hltElePixelSeedsCombinedL1Seeded+process.hltEgammaElectronPixelSeedsL1Seeded+process.hltEgammaPixelMatchVarsL1Seeded)


process.HLTElePixelMatchUnseededSequence = cms.Sequence(process.HLTDoLocalPixelSequence+process.HLTDoLocalStripSequence+process.hltEgammaCandidatesUnseeded+process.hltEgammaHoverEUnseeded+process.hltMeasurementTrackerEvent+process.hltPixelLayerTriplets+process.hltEgammaSuperClustersToPixelMatchUnseeded+process.hltEleSeedsTrackingRegionsUnseeded+process.hltElePixelHitDoubletsForTripletsUnseeded+process.hltElePixelHitTripletsUnseeded+process.hltElePixelSeedsTripletsUnseeded+process.hltElePixelHitTripletsClusterRemoverUnseeded+process.hltPixelLayerPairsUnseeded+process.hltElePixelHitDoubletsUnseeded+process.hltElePixelSeedsDoubletsUnseeded+process.hltElePixelSeedsCombinedUnseeded+process.hltEgammaElectronPixelSeedsUnseeded+process.hltEgammaPixelMatchVarsUnseeded)


process.HLTEndSequence = cms.Sequence(process.hltBoolEnd)


process.HLTFastJetForEgammaSequence = cms.Sequence(process.hltEcalMultiFitUncalibRecHit+process.hltEcalRecHit+process.hltFixedGridRhoFastjetAllCaloForEGamma)


process.HLTGemLocalRecoSequence = cms.Sequence(process.hltGemRecHits+process.hltGemSegments)


process.HLTGsfElectronL1SeededSequence = cms.Sequence(process.hltEgammaCkfTrackCandidatesForGSFL1Seeded+process.hltEgammaGsfTracksL1Seeded+process.hltEgammaGsfTrackVarsL1Seeded+process.hltEgammaGsfElectronsL1Seeded+process.hltEgammaBestGsfTrackVarsL1Seeded)


process.HLTGsfElectronUnseededSequence = cms.Sequence(process.hltEgammaCkfTrackCandidatesForGSFUnseeded+process.hltEgammaGsfTracksUnseeded+process.hltEgammaGsfElectronsUnseeded+process.hltEgammaBestGsfTrackVarsUnseeded+process.hltEgammaGsfTrackVarsUnseeded)


process.HLTHPSDeepTauPFTauSequence = cms.Sequence(process.hltHpsPFTauDiscriminationByDecayModeFindingNewDMs+process.hltHpsPFTauPrimaryVertexProducerForDeepTau+process.hltHpsPFTauSecondaryVertexProducerForDeepTau+process.hltHpsPFTauTransverseImpactParametersForDeepTau+process.hltFixedGridRhoProducerFastjetAllTau+process.hltHpsPFTauBasicDiscriminatorsForDeepTau+process.hltHpsPFTauBasicDiscriminatorsdR03ForDeepTau+process.hltHpsPFTauDeepTauProducer)


process.HLTHPSMediumChargedIsoPFTauSequence = cms.Sequence(process.hltHpsPFTauMediumAbsoluteChargedIsolationDiscriminator+process.hltHpsPFTauMediumRelativeChargedIsolationDiscriminator+process.hltHpsPFTauMediumAbsOrRelChargedIsolationDiscriminator)


process.HLTHgcalLocalRecoSequence = cms.Sequence(process.hltHGCalUncalibRecHit+process.hltHGCalRecHit+process.hltHgcalSoARecHitsProducer+process.hltHgcalSoARecHitsLayerClustersProducer+process.hltHgcalSoALayerClustersProducer+process.hltHgCalLayerClustersFromSoAProducer+process.hltHgcalLayerClustersHSci+process.hltHgcalLayerClustersHSi+process.hltHgcalMergeLayerClusters)


process.HLTHgcalTiclPFClusteringForEgamma = cms.Sequence(process.hltHgcalDigis+process.hltHGCalUncalibRecHit+process.hltHGCalRecHit+process.hltParticleFlowRecHitHGC+process.hltHgcalLayerClustersEE+process.hltHgcalLayerClustersHSci+process.hltHgcalLayerClustersHSi+process.hltHgcalMergeLayerClusters+process.hltFilteredLayerClustersCLUE3DHigh+process.hltTiclSeedingGlobal+process.hltTiclLayerTileProducer+process.hltTiclTrackstersCLUE3DHigh+process.hltParticleFlowClusterHGCal+process.hltParticleFlowSuperClusterHGCal)


process.HLTHgcalTiclPFClusteringForEgammaL1SeededSequence = cms.Sequence(process.hltHgcalDigis+process.hltL1TEGammaHGCFilteredCollectionProducer+process.hltHgcalDigisL1Seeded+process.hltHGCalUncalibRecHitL1Seeded+process.hltHGCalRecHitL1Seeded+process.hltParticleFlowRecHitHGCL1Seeded+process.hltRechitInRegionsHGCAL+process.hltHgcalLayerClustersEEL1Seeded+process.hltHgcalLayerClustersHSciL1Seeded+process.hltHgcalLayerClustersHSiL1Seeded+process.hltHgcalMergeLayerClustersL1Seeded+process.hltFilteredLayerClustersCLUE3DHighL1Seeded+process.hltTiclSeedingL1+process.hltTiclLayerTileProducerL1Seeded+process.hltTiclTrackstersCLUE3DHighL1Seeded+process.hltParticleFlowClusterHGCalFromTICLL1Seeded+process.hltParticleFlowSuperClusterHGCalFromTICLL1Seeded)


process.HLTHgcalTiclPFClusteringForEgammaUnseededSequence = cms.Sequence(process.hltHgcalDigis+process.hltHGCalUncalibRecHit+process.hltHGCalRecHit+process.hltParticleFlowRecHitHGC+process.hltHgcalSoARecHitsProducer+process.hltHgcalSoARecHitsLayerClustersProducer+process.hltHgcalSoALayerClustersProducer+process.hltHgCalLayerClustersFromSoAProducer+process.hltHgcalLayerClustersHSci+process.hltHgcalLayerClustersHSi+process.hltHgcalMergeLayerClusters+process.hltFilteredLayerClustersCLUE3DHigh+process.hltTiclSeedingGlobal+process.hltTiclLayerTileProducer+process.hltTiclTrackstersCLUE3DHigh+process.hltParticleFlowClusterHGCalFromTICLUnseeded+process.hltParticleFlowSuperClusterHGCalFromTICLUnseeded)


process.HLTHighPtTripletStepSeedingSequence = cms.Sequence(process.hltHighPtTripletStepClusters+process.hltHighPtTripletStepSeedLayers+process.hltHighPtTripletStepHitDoublets+process.hltHighPtTripletStepHitTriplets+process.hltHighPtTripletStepSeeds)


process.HLTHighPtTripletStepSequence = cms.Sequence(process.HLTHighPtTripletStepSeedingSequence+process.hltHighPtTripletStepTrackCandidates+process.hltHighPtTripletStepTracks+process.hltHighPtTripletStepTrackCutClassifier+process.hltHighPtTripletStepTrackSelectionHighPurity)


process.HLTInitialStepPVSequence = cms.Sequence(process.hltFirstStepPrimaryVerticesUnsorted+process.hltPhase2TowerMakerForAll+process.hltAk4CaloJetsForTrk)


process.HLTInitialStepSequence = cms.Sequence(process.hltInitialStepSeeds+process.hltInitialStepTrackCandidates+process.hltInitialStepTracks+process.hltInitialStepTrackCutClassifier+process.hltInitialStepTrackSelectionHighPurity)


process.HLTItLocalRecoSequence = cms.Sequence(process.HLTDoLocalPixelSequence+process.HLTDoLocalStripSequence)


process.HLTIter0Phase2L3FromL1TkSequence = cms.Sequence(process.hltIter0Phase2L3FromL1TkMuonPixelSeedsFromPixelTracks+process.hltIter0Phase2L3FromL1TkMuonCkfTrackCandidates+process.hltIter0Phase2L3FromL1TkMuonCtfWithMaterialTracks+process.hltIter0Phase2L3FromL1TkMuonTrackCutClassifier+process.hltIter0Phase2L3FromL1TkMuonTrackSelectionHighPurity)


process.HLTIter2Phase2L3FromL1TkSequence = cms.Sequence(process.hltIter2Phase2L3FromL1TkMuonClustersRefRemoval+process.hltIter2Phase2L3FromL1TkMuonMaskedMeasurementTrackerEvent+process.hltIter2Phase2L3FromL1TkMuonPixelLayerTriplets+process.hltIter2Phase2L3FromL1TkMuonPixelClusterCheck+process.hltIter2Phase2L3FromL1TkMuonPixelHitDoublets+process.hltIter2Phase2L3FromL1TkMuonPixelHitTriplets+process.hltIter2Phase2L3FromL1TkMuonPixelSeeds+process.hltIter2Phase2L3FromL1TkMuonPixelSeedsFiltered+process.hltIter2Phase2L3FromL1TkMuonCkfTrackCandidates+process.hltIter2Phase2L3FromL1TkMuonCtfWithMaterialTracks+process.hltIter2Phase2L3FromL1TkMuonTrackCutClassifier+process.hltIter2Phase2L3FromL1TkMuonTrackSelectionHighPurity+process.hltIter2Phase2L3FromL1TkMuonMerged)


process.HLTL1Sequence = cms.Sequence()


process.HLTL1UnpackerSequence = cms.Sequence()


process.HLTMuonlocalrecoSequence = cms.Sequence(process.HLTCsclocalrecoSequence+process.HLTDtlocalrecoSequence+process.HLTGemLocalRecoSequence+process.hltRpcRecHits)


process.HLTOtLocalRecoSequence = cms.Sequence(process.hltMeasurementTrackerEvent)


process.HLTPFClusteringForEgammaL1SeededSequence = cms.Sequence(process.hltL1TEGammaFilteredCollectionProducer+process.hltRechitInRegionsECAL+process.hltParticleFlowRecHitECALL1Seeded+process.hltParticleFlowClusterECALUncorrectedL1Seeded+process.hltParticleFlowClusterECALL1Seeded+process.hltParticleFlowSuperClusterECALL1Seeded)


process.HLTPFClusteringForEgammaUnseededSequence = cms.Sequence(process.hltParticleFlowRecHitECALUnseeded+process.hltParticleFlowClusterECALUncorrectedUnseeded+process.hltParticleFlowClusterECALUnseeded+process.hltParticleFlowSuperClusterECALUnseeded)


process.HLTPFHcalClusteringForEgammaSequence = cms.Sequence(process.hltParticleFlowRecHitHBHE+process.hltParticleFlowClusterHBHE+process.hltParticleFlowClusterHCAL)


process.HLTPFJetsCHSReconstruction = cms.Sequence(process.hltParticleFlowPtrs+process.hltGoodOfflinePrimaryVertices+process.hltPfPileUpJME+process.hltPfNoPileUpJME+process.hltAK4PFCHSJets+process.hltAK4PFCHSJetCorrectorL1+process.hltAK4PFCHSJetCorrectorL2+process.hltAK4PFCHSJetCorrectorL3+process.hltAK4PFCHSJetCorrector+process.hltAK4PFCHSJetsCorrected+process.hltAK8PFCHSJets+process.hltAK8PFCHSJetCorrectorL1+process.hltAK8PFCHSJetCorrectorL2+process.hltAK8PFCHSJetCorrectorL3+process.hltAK8PFCHSJetCorrector+process.hltAK8PFCHSJetsCorrected)


process.HLTPFMETsReconstruction = cms.Sequence(process.hltPFMET+process.hltPFMETJetCorrectorL1+process.hltPFMETJetCorrectorL2+process.hltPFMETJetCorrectorL3+process.hltPFMETJetCorrector+process.hltPFMETTypeOneCorrector+process.hltPFMETTypeOne)


process.HLTPFPuppiJMEReconstruction = cms.Sequence(process.hltPixelClustersMultiplicity+process.hltPFPuppiNoLep+process.hltPFPuppiMET+process.hltPixelClustersMultiplicity+process.hltPFPuppi+process.hltAK4PFPuppiJets+process.hltAK4PFPuppiJetCorrectorL1+process.hltAK4PFPuppiJetCorrectorL2+process.hltAK4PFPuppiJetCorrectorL3+process.hltAK4PFPuppiJetCorrector+process.hltAK4PFPuppiJetsCorrected+process.hltPFPuppiMETTypeOneCorrector+process.hltPFPuppiMETTypeOne+process.hltAK8PFPuppiJets+process.hltAK8PFPuppiJetCorrectorL1+process.hltAK8PFPuppiJetCorrectorL2+process.hltAK8PFPuppiJetCorrectorL3+process.hltAK8PFPuppiJetCorrector+process.hltAK8PFPuppiJetsCorrected)


process.HLTPFPuppiMETReconstruction = cms.Sequence(process.hltGoodOfflinePrimaryVertices+process.hltPixelClustersMultiplicity+process.hltPFPuppiNoLep+process.hltPFPuppiMET)


process.HLTPFTauHPS = cms.Sequence(process.hltTauPFJets08Region+process.hltHpsTauPFJetsRecoTauChargedHadronsWithNeutrals+process.hltPFTauPiZeros+process.hltHpsCombinatoricRecoTaus+process.hltHpsSelectionDiscriminator+process.hltHpsPFTauProducerSansRefs+process.hltHpsPFTauProducer+process.hltHpsPFTauDiscriminationByDecayModeFindingNewDMs+process.hltHpsPFTauTrackFindingDiscriminator+process.hltHpsSelectedPFTausTrackFinding+process.hltHpsPFTauTrack)


process.HLTParticleFlowClusterECALSequence = cms.Sequence(process.hltEcalBarrelClusterFastTimer+process.hltParticleFlowTimeAssignerECAL+process.hltParticleFlowClusterECAL)


process.HLTParticleFlowRecoSequence = cms.Sequence(process.hltPfTrack+process.hltParticleFlowBlock+process.hltParticleFlowTmpBarrel+process.hltParticleFlowTmp+process.hltFixedGridRhoFastjetAllTmp)


process.HLTParticleFlowSuperClusteringSequence = cms.Sequence(process.hltParticleFlowSuperClusterECAL)


process.HLTPfClusterRefsForJetsSequence = cms.Sequence(process.hltParticleFlowRecHitECAL+process.hltParticleFlowRecHitHF+process.hltParticleFlowRecHitHO+process.hltParticleFlowRecHitHBHE+process.hltParticleFlowClusterHBHE+process.hltParticleFlowClusterHCAL+process.hltParticleFlowClusterECAL+process.hltParticleFlowClusterECALUncorrected+process.hltParticleFlowClusterHF+process.hltParticleFlowClusterHO+process.hltPfClusterRefsForJetsECAL+process.hltPfClusterRefsForJetsHCAL+process.hltPfClusterRefsForJetsHF+process.hltPfClusterRefsForJetsHGCAL+process.hltPfClusterRefsForJetsHO+process.hltPfClusterRefsForJets)


process.HLTPfClusteringECALSequence = cms.Sequence(process.hltParticleFlowRecHitECAL+process.hltParticleFlowClusterECALUncorrected+process.HLTParticleFlowClusterECALSequence)


process.HLTPfClusteringHBHEHFSequence = cms.Sequence(process.hltParticleFlowRecHitHBHE+process.hltParticleFlowClusterHBHE+process.hltParticleFlowClusterHCAL+process.hltParticleFlowRecHitHF+process.hltParticleFlowClusterHF)


process.HLTPfClusteringHOSequence = cms.Sequence(process.hltParticleFlowRecHitHO+process.hltParticleFlowClusterHO)


process.HLTPhase2L3FromL1TkSequence = cms.Sequence(process.hltPhase2L3FromL1TkMuonPixelLayerQuadruplets+process.hltPhase2L3FromL1TkMuonPixelTracksTrackingRegions+process.hltPhase2L3FromL1TkMuonPixelTracksHitDoublets+process.hltPhase2L3FromL1TkMuonPixelTracksHitQuadruplets+process.hltPhase2L3FromL1TkMuonPixelTracks+process.hltPhase2L3FromL1TkMuonPixelVertices+process.hltPhase2L3FromL1TkMuonTrimmedPixelVertices)


process.HLTPhase2L3MuonGeneralTracksSequence = cms.Sequence(process.hltTrackerClusterCheck+process.hltPhase2L3MuonPixelTracksTrackingRegions+process.hltPhase2L3MuonPixelTracksSeedLayers+process.hltPhase2L3MuonPixelTracksHitDoublets+process.hltPhase2L3MuonPixelTracksHitQuadruplets+process.hltPhase2L3MuonPixelTracks+process.hltPhase2L3MuonPixelVertices+process.hltPhase2L3MuonInitialStepSeeds+process.hltPhase2L3MuonInitialStepTrackCandidates+process.hltPhase2L3MuonInitialStepTracks+process.hltPhase2L3MuonInitialStepTrackCutClassifier+process.hltPhase2L3MuonInitialStepTracksSelectionHighPurity+process.hltPhase2L3MuonHighPtTripletStepClusters+process.hltPhase2L3MuonHighPtTripletStepTrackingRegions+process.hltPhase2L3MuonHighPtTripletStepSeedLayers+process.hltPhase2L3MuonHighPtTripletStepHitDoublets+process.hltPhase2L3MuonHighPtTripletStepHitTriplets+process.hltPhase2L3MuonHighPtTripletStepSeeds+process.hltPhase2L3MuonHighPtTripletStepTrackCandidates+process.hltPhase2L3MuonHighPtTripletStepTracks+process.hltPhase2L3MuonHighPtTripletStepTrackCutClassifier+process.hltPhase2L3MuonHighPtTripletStepTracksSelectionHighPurity+process.hltPhase2L3MuonGeneralTracks)


process.HLTPhase2L3MuonsSequence = cms.Sequence(process.hltPhase2L3MuonMerged+process.hltPhase2L3GlbMuon+process.hltPhase2L3MuonsNoID+process.hltPhase2L3Muons+process.hltPhase2L3MuonCandidates)


process.HLTPhase2L3OISequence = cms.Sequence(process.hltPhase2L3OISeedsFromL2Muons+process.hltPhase2L3OITrackCandidates+process.hltPhase2L3OIMuCtfWithMaterialTracks+process.hltPhase2L3OIMuonTrackCutClassifier+process.hltPhase2L3OIMuonTrackSelectionHighPurity)


process.HLTPhase2PixelTracksSequence = cms.Sequence(process.HLTBeamSpotSequence+process.hltPhase2PixelTracksAndHighPtStepTrackingRegions+process.hltPhase2PixelFitterByHelixProjections+process.hltPhase2PixelTrackFilterByKinematics+process.hltPhase2PixelTracksSoA+process.hltPhase2PixelTracks)


process.HLTPhoton108EBTightIDTightIsoL1SeededSequence = cms.Sequence(process.HLTL1Sequence+process.hltEGL1SeedsForSinglePhotonIsolatedFilter+process.HLTDoFullUnpackingEgammaEcalL1SeededSequence+process.HLTPFClusteringForEgammaL1SeededSequence+process.HLTHgcalTiclPFClusteringForEgammaL1SeededSequence+process.hltEgammaCandidatesL1Seeded+process.hltEgammaCandidatesWrapperL1Seeded+process.hltEG108EtL1SeededFilter+process.hltEgammaClusterShapeL1Seeded+process.hltPhoton108EBTightIDTightIsoClusterShapeL1SeededFilter+process.HLTEGammaDoLocalHcalSequence+process.HLTFastJetForEgammaSequence+process.hltEgammaHoverEL1Seeded+process.hltPhoton108EBTightIDTightIsoHEL1SeededFilter+process.hltEgammaEcalPFClusterIsoL1Seeded+process.hltPhoton108EBTightIDTightIsoEcalIsoL1SeededFilter+process.HLTPFHcalClusteringForEgammaSequence+process.hltEgammaHcalPFClusterIsoL1Seeded+process.hltPhoton108EBTightIDTightIsoHcalIsoL1SeededFilter)


process.HLTPhoton108EBTightIDTightIsoUnseededSequence = cms.Sequence(process.HLTL1Sequence+process.hltEGL1SeedsForSinglePhotonIsolatedFilter+process.HLTDoFullUnpackingEgammaEcalSequence+process.HLTPFClusteringForEgammaUnseededSequence+process.HLTHgcalTiclPFClusteringForEgammaUnseededSequence+process.hltEgammaCandidatesUnseeded+process.hltEgammaCandidatesWrapperUnseeded+process.hltEG108EtUnseededFilter+process.hltEgammaClusterShapeUnseeded+process.hltPhoton108EBTightIDTightIsoClusterShapeUnseededFilter+process.HLTEGammaDoLocalHcalSequence+process.HLTFastJetForEgammaSequence+process.hltEgammaHoverEUnseeded+process.hltPhoton108EBTightIDTightIsoHEUnseededFilter+process.hltEgammaEcalPFClusterIsoUnseeded+process.hltPhoton108EBTightIDTightIsoEcalIsoUnseededFilter+process.HLTPFHcalClusteringForEgammaSequence+process.hltEgammaHcalPFClusterIsoUnseeded+process.hltPhoton108EBTightIDTightIsoHcalIsoUnseededFilter)


process.HLTPhoton187L1SeededSequence = cms.Sequence(process.HLTL1Sequence+process.l1tTkEmSingle51Filter+process.HLTDoFullUnpackingEgammaEcalL1SeededSequence+process.HLTPFClusteringForEgammaL1SeededSequence+process.HLTHgcalTiclPFClusteringForEgammaL1SeededSequence+process.hltEgammaCandidatesL1Seeded+process.hltEgammaCandidatesWrapperL1Seeded+process.hltEG187EtL1SeededFilter+process.hltEgammaHGCALIDVarsL1Seeded+process.hltPhoton187HgcalHEL1SeededFilter+process.HLTEGammaDoLocalHcalSequence+process.HLTFastJetForEgammaSequence+process.hltPhoton187HEL1SeededFilter)


process.HLTPhoton187UnseededSequence = cms.Sequence(process.HLTL1Sequence+process.l1tTkEmSingle51Filter+process.HLTDoFullUnpackingEgammaEcalSequence+process.HLTPFClusteringForEgammaUnseededSequence+process.HLTHgcalTiclPFClusteringForEgammaUnseededSequence+process.hltEgammaCandidatesUnseeded+process.hltEgammaCandidatesWrapperUnseeded+process.hltEG187EtUnseededFilter+process.hltEgammaHGCALIDVarsUnseeded+process.hltPhoton187HgcalHEUnseededFilter+process.HLTEGammaDoLocalHcalSequence+process.HLTFastJetForEgammaSequence+process.hltEgammaHoverEUnseeded+process.hltPhoton187HEUnseededFilter)


process.HLTRawToDigiSequence = cms.Sequence(process.hltHgcalDigis+process.HLTEcalDigisSequence+process.hltHcalDigis+process.hltMuonCSCDigis+process.hltMuonDTDigis+process.hltMuonGEMDigis)


process.HLTTiclCandidateSequence = cms.Sequence(process.hltTiclCandidate)


process.HLTTiclLayerTileSequence = cms.Sequence(process.hltTiclLayerTileProducer)


process.HLTTiclPFSequence = cms.Sequence(process.hltPfTICL)


process.HLTTiclTracksterLinksSequence = cms.Sequence(process.hltTiclTracksterLinks)


process.HLTTiclTracksterMergeSequence = cms.Sequence(process.hltTiclTrackstersMerge)


process.HLTTiclTrackstersCLUE3DHighStepSequence = cms.Sequence(process.hltFilteredLayerClustersCLUE3DHigh+process.hltTiclSeedingGlobal+process.hltTiclTrackstersCLUE3DHigh)


process.HLTTiclTrackstersPassthroughSequence = cms.Sequence(process.hltFilteredLayerClustersPassthrough+process.hltTiclTrackstersPassthrough)


process.HLTTrackingV61Sequence = cms.Sequence(process.HLTItLocalRecoSequence+process.HLTOtLocalRecoSequence+process.hltTrackerClusterCheck+process.HLTPhase2PixelTracksSequence+process.hltPhase2PixelVertices+process.HLTInitialStepSequence+process.HLTHighPtTripletStepSequence+process.hltGeneralTracks)


process.HLTVertexRecoSequence = cms.Sequence(process.HLTInitialStepPVSequence+process.hltUnsortedOfflinePrimaryVertices+process.hltTrackWithVertexRefSelectorBeforeSorting+process.hltTrackRefsForJetsBeforeSorting+process.hltOfflinePrimaryVertices)


process.L1TTkEle25TkEle12Sequence = cms.Sequence(process.HLTL1Sequence+process.l1tTkEleSingle25Filter+process.l1tTkEleDouble12Filter)


process.L1TTkEle36Sequence = cms.Sequence(process.HLTL1Sequence+process.l1tTkEleSingle36Filter)


process.L1TTkEm37TkEm24Sequence = cms.Sequence(process.HLTL1Sequence+process.l1tTkEmSingle37Filter+process.l1tTkEmDouble24Filter)


process.L1TTkEm51Sequence = cms.Sequence(process.HLTL1Sequence+process.l1tTkEmSingle51Filter)


process.L1TTkIsoEle22TkEm12Sequence = cms.Sequence(process.HLTL1Sequence+process.l1tTkIsoEleSingle22Filter+process.l1tTkEmDouble12Filter)


process.L1TTkIsoEle28Sequence = cms.Sequence(process.HLTL1Sequence+process.l1tTkIsoEleSingle28Filter)


process.L1TTkIsoEm22TkIsoEm12Sequence = cms.Sequence(process.HLTL1Sequence+process.l1tTkIsoEmSingle22Filter+process.l1tTkIsoEmDouble12Filter)


process.L1TTkIsoEm36Sequence = cms.Sequence(process.HLTL1Sequence+process.l1tTkIsoEmSingle36Filter)


process.endOfProcess = cms.Sequence(process.MEtoEDMConverter)


process.trackAssoSeq = cms.Sequence(process.hltPhase2L3MuonsNoIDTracks+process.hltPhase2L3MuonsTracks+process.AhltPhase2L3OIMuonTrackSelectionHighPurity+process.AhltIter0Phase2L3FromL1TkMuonTrackSelectionHighPurity+process.AhltIter2Phase2L3FromL1TkMuonTrackSelectionHighPurity+process.AhltIter2Phase2L3FromL1TkMuonMerged+process.AhltPhase2L3MuonsNoID+process.AhltPhase2L3Muons)


process.L1THybridTracksWithAssociators = cms.Sequence(process.offlineBeamSpot+process.l1tTTTracksFromTrackletEmulation+process.TrackTriggerAssociatorTracks)


process.L1TPromptExtendedHybridTracksWithAssociators = cms.Sequence(process.offlineBeamSpot+process.l1tTTTracksFromTrackletEmulation+process.TrackTriggerAssociatorTracks+process.l1tTTTracksFromExtendedTrackletEmulation+process.TTTrackAssociatorFromPixelDigisExtended)


process.L1TrackTrigger = cms.Sequence((process.TrackTriggerClustersStubs+process.TrackTriggerAssociatorClustersStubs+process.TrackerDTCProducer)+process.L1TPromptExtendedHybridTracksWithAssociators)


process.HLTCalolocalrecoSequence = cms.Sequence(process.HLTDoFullUnpackingEgammaEcalSequence+process.HLTDoLocalHcalSequence)


process.HLTDiphoton3023IsoCaloIdL1SeededSequence = cms.Sequence(process.HLTL1Sequence+process.hltEGL1SeedsForDoublePhotonIsolatedFilter+process.HLTDoFullUnpackingEgammaEcalL1SeededSequence+process.HLTPFClusteringForEgammaL1SeededSequence+process.HLTHgcalTiclPFClusteringForEgammaL1SeededSequence+process.hltEgammaCandidatesL1Seeded+process.hltEgammaCandidatesWrapperL1Seeded+process.hltEG30EtL1SeededFilter+process.hltDiEG23EtL1SeededFilter+process.hltEgammaClusterShapeL1Seeded+process.hltDiEG3023IsoCaloIdClusterShapeL1SeededFilter+process.hltEgammaHGCALIDVarsL1Seeded+process.hltDiEG3023IsoCaloIdClusterShapeSigmavvL1SeededFilter+process.hltDiEG3023IsoCaloIdClusterShapeSigmawwL1SeededFilter+process.hltDiEG3023IsoCaloIdHgcalHEL1SeededFilter+process.HLTEGammaDoLocalHcalSequence+process.HLTFastJetForEgammaSequence+process.hltEgammaHoverEL1Seeded+process.hltDiEG3023IsoCaloIdHEL1SeededFilter+process.hltEgammaEcalPFClusterIsoL1Seeded+process.hltDiEG3023IsoCaloIdEcalIsoL1SeededFilter+process.hltEgammaHGCalLayerClusterIsoL1Seeded+process.hltDiEG3023IsoCaloIdHgcalIsoL1SeededFilter+process.HLTPFHcalClusteringForEgammaSequence+process.hltEgammaHcalPFClusterIsoL1Seeded+process.hltDiEG3023IsoCaloIdHcalIsoL1SeededFilter)


process.HLTDiphoton3023IsoCaloIdUnseededSequence = cms.Sequence(process.HLTL1Sequence+process.hltEGL1SeedsForDoublePhotonIsolatedFilter+process.HLTDoFullUnpackingEgammaEcalSequence+process.HLTPFClusteringForEgammaUnseededSequence+process.HLTHgcalTiclPFClusteringForEgammaUnseededSequence+process.hltEgammaCandidatesUnseeded+process.hltEgammaCandidatesWrapperUnseeded+process.hltEG30EtUnseededFilter+process.hltDiEG23EtUnseededFilter+process.hltEgammaClusterShapeUnseeded+process.hltDiEG3023IsoCaloIdClusterShapeUnseededFilter+process.hltEgammaHGCALIDVarsUnseeded+process.hltDiEG3023IsoCaloIdClusterShapeSigmavvUnseededFilter+process.hltDiEG3023IsoCaloIdClusterShapeSigmawwUnseededFilter+process.hltDiEG3023IsoCaloIdHgcalHEUnseededFilter+process.HLTEGammaDoLocalHcalSequence+process.HLTFastJetForEgammaSequence+process.hltEgammaHoverEUnseeded+process.hltDiEG3023IsoCaloIdHEUnseededFilter+process.hltEgammaEcalPFClusterIsoUnseeded+process.hltDiEG3023IsoCaloIdEcalIsoUnseededFilter+process.hltEgammaHGCalLayerClusterIsoUnseeded+process.hltDiEG3023IsoCaloIdHgcalIsoUnseededFilter+process.HLTPFHcalClusteringForEgammaSequence+process.hltEgammaHcalPFClusterIsoUnseeded+process.hltDiEG3023IsoCaloIdHcalIsoUnseededFilter)


process.HLTDoubleEle2312IsoL1SeededSequence = cms.Sequence(process.HLTL1Sequence+process.hltEGL1SeedsForDoubleEleIsolatedFilter+process.HLTDoFullUnpackingEgammaEcalL1SeededSequence+process.HLTPFClusteringForEgammaL1SeededSequence+process.HLTHgcalTiclPFClusteringForEgammaL1SeededSequence+process.hltEgammaCandidatesL1Seeded+process.hltEgammaCandidatesWrapperL1Seeded+process.hltEG23EtL1SeededFilter+process.hltDiEG12EtL1SeededFilter+process.hltEgammaClusterShapeL1Seeded+process.hltDiEG2312IsoClusterShapeL1SeededFilter+process.hltEgammaHGCALIDVarsL1Seeded+process.hltDiEG2312IsoClusterShapeSigmavvL1SeededFilter+process.hltDiEG2312IsoClusterShapeSigmawwL1SeededFilter+process.hltDiEG2312IsoHgcalHEL1SeededFilter+process.HLTEGammaDoLocalHcalSequence+process.HLTFastJetForEgammaSequence+process.hltEgammaHoverEL1Seeded+process.hltDiEG2312IsoHEL1SeededFilter+process.hltEgammaEcalPFClusterIsoL1Seeded+process.hltDiEG2312IsoEcalIsoL1SeededFilter+process.hltEgammaHGCalLayerClusterIsoL1Seeded+process.hltDiEG2312IsoHgcalIsoL1SeededFilter+process.HLTPFHcalClusteringForEgammaSequence+process.hltEgammaHcalPFClusterIsoL1Seeded+process.hltDiEG2312IsoHcalIsoL1SeededFilter+process.HLTElePixelMatchL1SeededSequence+process.hltDiEle2312IsoPixelMatchL1SeededFilter+process.hltDiEle2312IsoPMS2L1SeededFilter+process.HLTGsfElectronL1SeededSequence+process.hltDiEle2312IsoGsfOneOEMinusOneOPL1SeededFilter+process.hltDiEle2312IsoGsfDetaL1SeededFilter+process.hltDiEle2312IsoGsfDphiL1SeededFilter+process.hltDiEle2312IsoBestGsfNLayerITL1SeededFilter+process.hltDiEle2312IsoBestGsfChi2L1SeededFilter+process.hltEgammaEleL1TrkIsoL1Seeded+process.hltDiEle2312IsoGsfTrackIsoFromL1TracksL1SeededFilter+process.HLTTrackingV61Sequence+process.hltEgammaEleGsfTrackIsoV6L1Seeded+process.hltDiEle2312IsoGsfTrackIsoL1SeededFilter)


process.HLTDoubleEle25CaloIdLPMS2L1SeededSequence = cms.Sequence(process.HLTL1Sequence+process.hltEGL1SeedsForDoubleEleNonIsolatedFilter+process.HLTDoFullUnpackingEgammaEcalL1SeededSequence+process.HLTPFClusteringForEgammaL1SeededSequence+process.HLTHgcalTiclPFClusteringForEgammaL1SeededSequence+process.hltEgammaCandidatesL1Seeded+process.hltEgammaCandidatesWrapperL1Seeded+process.hltDiEG25EtL1SeededFilter+process.hltEgammaClusterShapeL1Seeded+process.hltDiEG25CaloIdLClusterShapeL1SeededFilter+process.hltEgammaHGCALIDVarsL1Seeded+process.hltDiEG25CaloIdLClusterShapeSigmavvL1SeededFilter+process.hltDiEG25CaloIdLHgcalHEL1SeededFilter+process.HLTEGammaDoLocalHcalSequence+process.hltEgammaHoverEL1Seeded+process.hltDiEG25CaloIdLHEL1SeededFilter+process.HLTElePixelMatchL1SeededSequence+process.hltDiEle25CaloIdLPixelMatchL1SeededFilter+process.hltDiEle25CaloIdLPMS2L1SeededFilter)


process.HLTDoubleEle25CaloIdLPMS2UnseededSequence = cms.Sequence(process.HLTL1Sequence+process.hltEGL1SeedsForDoubleEleNonIsolatedFilter+process.HLTDoFullUnpackingEgammaEcalSequence+process.HLTPFClusteringForEgammaUnseededSequence+process.HLTHgcalTiclPFClusteringForEgammaUnseededSequence+process.hltEgammaCandidatesUnseeded+process.hltEgammaCandidatesWrapperUnseeded+process.hltDiEG25EtUnseededFilter+process.hltEgammaClusterShapeUnseeded+process.hltDiEG25CaloIdLClusterShapeUnseededFilter+process.hltEgammaHGCALIDVarsUnseeded+process.hltDiEG25CaloIdLClusterShapeSigmavvUnseededFilter+process.hltDiEG25CaloIdLHgcalHEUnseededFilter+process.HLTEGammaDoLocalHcalSequence+process.HLTFastJetForEgammaSequence+process.hltEgammaHoverEUnseeded+process.hltDiEG25CaloIdLHEUnseededFilter+process.HLTElePixelMatchUnseededSequence+process.hltDiEle25CaloIdLPixelMatchUnseededFilter+process.hltDiEle25CaloIdLPMS2UnseededFilter)


process.HLTEle115NonIsoL1SeededSequence = cms.Sequence(process.HLTL1Sequence+process.hltEGL1SeedsForSingleEleNonIsolatedFilter+process.HLTDoFullUnpackingEgammaEcalL1SeededSequence+process.HLTPFClusteringForEgammaL1SeededSequence+process.HLTHgcalTiclPFClusteringForEgammaL1SeededSequence+process.hltEgammaCandidatesL1Seeded+process.hltEgammaCandidatesWrapperL1Seeded+process.hltEG115EtL1SeededFilter+process.hltEgammaClusterShapeL1Seeded+process.hltEle115NonIsoClusterShapeL1SeededFilter+process.hltEgammaHGCALIDVarsL1Seeded+process.hltEle115NonIsoClusterShapeSigmavvL1SeededFilter+process.hltEle115NonIsoClusterShapeSigmawwL1SeededFilter+process.hltEle115NonIsoHgcalHEL1SeededFilter+process.HLTEGammaDoLocalHcalSequence+process.HLTFastJetForEgammaSequence+process.hltEgammaHoverEL1Seeded+process.hltEle115NonIsoHEL1SeededFilter+process.HLTElePixelMatchL1SeededSequence+process.hltEle115NonIsoPixelMatchL1SeededFilter+process.hltEle115NonIsoPMS2L1SeededFilter+process.HLTEle115NonIsoL1SeededGsfElectronL1SeededSequence+process.hltEle115NonIsoGsfDetaL1SeededFilter+process.hltEle115NonIsoGsfDphiL1SeededFilter)


process.HLTEle26WP70L1SeededSequence = cms.Sequence(process.HLTL1Sequence+process.hltEGL1SeedsForSingleEleIsolatedFilter+process.HLTDoFullUnpackingEgammaEcalL1SeededSequence+process.HLTPFClusteringForEgammaL1SeededSequence+process.HLTHgcalTiclPFClusteringForEgammaL1SeededSequence+process.hltEgammaCandidatesL1Seeded+process.hltEgammaCandidatesWrapperL1Seeded+process.hltEG26EtL1SeededFilter+process.hltEgammaClusterShapeL1Seeded+process.hltEle26WP70ClusterShapeL1SeededFilter+process.hltEgammaHGCALIDVarsL1Seeded+process.hltEle26WP70ClusterShapeSigmavvL1SeededFilter+process.hltEle26WP70ClusterShapeSigmawwL1SeededFilter+process.hltEle26WP70HgcalHEL1SeededFilter+process.HLTEGammaDoLocalHcalSequence+process.HLTFastJetForEgammaSequence+process.hltEgammaHoverEL1Seeded+process.hltEle26WP70HEL1SeededFilter+process.hltEgammaEcalPFClusterIsoL1Seeded+process.hltEle26WP70EcalIsoL1SeededFilter+process.hltEgammaHGCalLayerClusterIsoL1Seeded+process.hltEle26WP70HgcalIsoL1SeededFilter+process.HLTPFHcalClusteringForEgammaSequence+process.hltEgammaHcalPFClusterIsoL1Seeded+process.hltEle26WP70HcalIsoL1SeededFilter+process.HLTElePixelMatchL1SeededSequence+process.hltEle26WP70PixelMatchL1SeededFilter+process.hltEle26WP70PMS2L1SeededFilter+process.HLTGsfElectronL1SeededSequence+process.hltEle26WP70GsfOneOEMinusOneOPL1SeededFilter+process.hltEle26WP70GsfDetaL1SeededFilter+process.hltEle26WP70GsfDphiL1SeededFilter+process.hltEle26WP70BestGsfNLayerITL1SeededFilter+process.hltEle26WP70BestGsfChi2L1SeededFilter+process.hltEgammaEleL1TrkIsoL1Seeded+process.hltEle26WP70GsfTrackIsoFromL1TracksL1SeededFilter+process.HLTTrackingV61Sequence+process.hltEgammaEleGsfTrackIsoV6L1Seeded+process.hltEle26WP70GsfTrackIsoL1SeededFilter)


process.HLTEle26WP70UnseededSequence = cms.Sequence(process.HLTL1Sequence+process.hltEGL1SeedsForSingleEleIsolatedFilter+process.HLTDoFullUnpackingEgammaEcalSequence+process.HLTPFClusteringForEgammaUnseededSequence+process.HLTHgcalTiclPFClusteringForEgammaUnseededSequence+process.hltEgammaCandidatesUnseeded+process.hltEgammaCandidatesWrapperUnseeded+process.hltEG26EtUnseededFilter+process.hltEgammaClusterShapeUnseeded+process.hltEle26WP70ClusterShapeUnseededFilter+process.hltEgammaHGCALIDVarsUnseeded+process.hltEle26WP70ClusterShapeSigmavvUnseededFilter+process.hltEle26WP70ClusterShapeSigmawwUnseededFilter+process.hltEle26WP70HgcalHEUnseededFilter+process.HLTEGammaDoLocalHcalSequence+process.HLTFastJetForEgammaSequence+process.hltEgammaHoverEUnseeded+process.hltEle26WP70HEUnseededFilter+process.hltEgammaEcalPFClusterIsoUnseeded+process.hltEle26WP70EcalIsoUnseededFilter+process.hltEgammaHGCalLayerClusterIsoUnseeded+process.hltEle26WP70HgcalIsoUnseededFilter+process.HLTPFHcalClusteringForEgammaSequence+process.hltEgammaHcalPFClusterIsoUnseeded+process.hltEle26WP70HcalIsoUnseededFilter+process.HLTElePixelMatchUnseededSequence+process.hltEle26WP70PixelMatchUnseededFilter+process.hltEle26WP70PMS2UnseededFilter+process.HLTGsfElectronUnseededSequence+process.hltEle26WP70GsfOneOEMinusOneOPUnseededFilter+process.hltEle26WP70GsfDetaUnseededFilter+process.hltEle26WP70GsfDphiUnseededFilter+process.hltEle26WP70BestGsfNLayerITUnseededFilter+process.hltEle26WP70BestGsfChi2UnseededFilter+process.hltEgammaEleL1TrkIsoUnseeded+process.hltEle26WP70GsfTrackIsoFromL1TracksUnseededFilter+process.HLTTrackingV61Sequence+process.hltEgammaEleGsfTrackIsoV6Unseeded+process.hltEle26WP70GsfTrackIsoUnseededFilter)


process.HLTEle32WPTightL1SeededSequence = cms.Sequence(process.HLTL1Sequence+process.hltEGL1SeedsForSingleEleIsolatedFilter+process.HLTDoFullUnpackingEgammaEcalL1SeededSequence+process.HLTPFClusteringForEgammaL1SeededSequence+process.HLTHgcalTiclPFClusteringForEgammaL1SeededSequence+process.hltEgammaCandidatesL1Seeded+process.hltEgammaCandidatesWrapperL1Seeded+process.hltEG32EtL1SeededFilter+process.hltEgammaClusterShapeL1Seeded+process.hltEle32WPTightClusterShapeL1SeededFilter+process.hltEgammaHGCALIDVarsL1Seeded+process.hltEle32WPTightClusterShapeSigmavvL1SeededFilter+process.hltEle32WPTightClusterShapeSigmawwL1SeededFilter+process.hltEle32WPTightHgcalHEL1SeededFilter+process.HLTEGammaDoLocalHcalSequence+process.HLTFastJetForEgammaSequence+process.hltEgammaHoverEL1Seeded+process.hltEle32WPTightHEL1SeededFilter+process.hltEgammaEcalPFClusterIsoL1Seeded+process.hltEle32WPTightEcalIsoL1SeededFilter+process.hltEgammaHGCalLayerClusterIsoL1Seeded+process.hltEle32WPTightHgcalIsoL1SeededFilter+process.HLTPFHcalClusteringForEgammaSequence+process.hltEgammaHcalPFClusterIsoL1Seeded+process.hltEle32WPTightHcalIsoL1SeededFilter+process.HLTElePixelMatchL1SeededSequence+process.hltEle32WPTightPixelMatchL1SeededFilter+process.hltEle32WPTightPMS2L1SeededFilter+process.HLTGsfElectronL1SeededSequence+process.hltEle32WPTightGsfOneOEMinusOneOPL1SeededFilter+process.hltEle32WPTightGsfDetaL1SeededFilter+process.hltEle32WPTightGsfDphiL1SeededFilter+process.hltEle32WPTightBestGsfNLayerITL1SeededFilter+process.hltEle32WPTightBestGsfChi2L1SeededFilter+process.hltEgammaEleL1TrkIsoL1Seeded+process.hltEle32WPTightGsfTrackIsoFromL1TracksL1SeededFilter+process.HLTTrackingV61Sequence+process.hltEgammaEleGsfTrackIsoV6L1Seeded+process.hltEle32WPTightGsfTrackIsoL1SeededFilter)


process.HLTEle32WPTightUnseededSequence = cms.Sequence(process.HLTL1Sequence+process.hltEGL1SeedsForSingleEleIsolatedFilter+process.HLTDoFullUnpackingEgammaEcalSequence+process.HLTPFClusteringForEgammaUnseededSequence+process.HLTHgcalTiclPFClusteringForEgammaUnseededSequence+process.hltEgammaCandidatesUnseeded+process.hltEgammaCandidatesWrapperUnseeded+process.hltEG32EtUnseededFilter+process.hltEgammaClusterShapeUnseeded+process.hltEle32WPTightClusterShapeUnseededFilter+process.hltEgammaHGCALIDVarsUnseeded+process.hltEle32WPTightClusterShapeSigmavvUnseededFilter+process.hltEle32WPTightClusterShapeSigmawwUnseededFilter+process.hltEle32WPTightHgcalHEUnseededFilter+process.HLTEGammaDoLocalHcalSequence+process.HLTFastJetForEgammaSequence+process.hltEgammaHoverEUnseeded+process.hltEle32WPTightHEUnseededFilter+process.hltEgammaEcalPFClusterIsoUnseeded+process.hltEle32WPTightEcalIsoUnseededFilter+process.hltEgammaHGCalLayerClusterIsoUnseeded+process.hltEle32WPTightHgcalIsoUnseededFilter+process.HLTPFHcalClusteringForEgammaSequence+process.hltEgammaHcalPFClusterIsoUnseeded+process.hltEle32WPTightHcalIsoUnseededFilter+process.HLTElePixelMatchUnseededSequence+process.hltEle32WPTightPixelMatchUnseededFilter+process.hltEle32WPTightPMS2UnseededFilter+process.HLTGsfElectronUnseededSequence+process.hltEle32WPTightGsfOneOEMinusOneOPUnseededFilter+process.hltEle32WPTightGsfDetaUnseededFilter+process.hltEle32WPTightGsfDphiUnseededFilter+process.hltEle32WPTightBestGsfNLayerITUnseededFilter+process.hltEle32WPTightBestGsfChi2UnseededFilter+process.hltEgammaEleL1TrkIsoUnseeded+process.hltEle32WPTightGsfTrackIsoFromL1TracksUnseededFilter+process.HLTTrackingV61Sequence+process.hltEgammaEleGsfTrackIsoV6Unseeded+process.hltEle32WPTightGsfTrackIsoUnseededFilter)


process.HLTEle5OpenL1SeededSequence = cms.Sequence(process.HLTL1Sequence+process.HLTDoFullUnpackingEgammaEcalL1SeededSequence+process.HLTPFClusteringForEgammaL1SeededSequence+process.HLTHgcalTiclPFClusteringForEgammaL1SeededSequence+process.hltEgammaCandidatesL1Seeded+process.hltEgammaCandidatesWrapperL1Seeded+process.hltEG5EtL1SeededFilter+process.hltEgammaClusterShapeL1Seeded+cms.ignore(process.hltEle5WPTightClusterShapeL1SeededFilter)+process.hltEgammaR9L1Seeded+process.hltEgammaHGCALIDVarsL1Seeded+cms.ignore(process.hltEle5WPTightClusterShapeSigmavvL1SeededFilter)+cms.ignore(process.hltEle5WPTightClusterShapeSigmawwL1SeededFilter)+cms.ignore(process.hltEle5WPTightHgcalHEL1SeededFilter)+process.HLTEGammaDoLocalHcalSequence+process.HLTFastJetForEgammaSequence+process.hltEgammaHoverEL1Seeded+cms.ignore(process.hltEle5WPTightHEL1SeededFilter)+process.hltEgammaEcalPFClusterIsoL1Seeded+cms.ignore(process.hltEle5WPTightEcalIsoL1SeededFilter)+process.hltEgammaHGCalLayerClusterIsoL1Seeded+cms.ignore(process.hltEle5WPTightHgcalIsoL1SeededFilter)+process.HLTPFHcalClusteringForEgammaSequence+process.hltEgammaHcalPFClusterIsoL1Seeded+cms.ignore(process.hltEle5WPTightHcalIsoL1SeededFilter)+process.HLTElePixelMatchL1SeededSequence+cms.ignore(process.hltEle5WPTightPixelMatchL1SeededFilter)+cms.ignore(process.hltEle5WPTightPMS2L1SeededFilter)+process.HLTGsfElectronL1SeededSequence+cms.ignore(process.hltEle5WPTightGsfOneOEMinusOneOPL1SeededFilter)+cms.ignore(process.hltEle5WPTightGsfDetaL1SeededFilter)+cms.ignore(process.hltEle5WPTightGsfDphiL1SeededFilter)+cms.ignore(process.hltEle5WPTightBestGsfNLayerITL1SeededFilter)+cms.ignore(process.hltEle5WPTightBestGsfChi2L1SeededFilter)+process.hltEle5DphiL1SeededFilter+process.hltEgammaEleL1TrkIsoL1Seeded+cms.ignore(process.hltEle5WPTightGsfTrackIsoFromL1TracksL1SeededFilter)+process.HLTTrackingV61Sequence+process.hltEgammaEleGsfTrackIsoL1Seeded+process.hltEgammaEleGsfTrackIsoV6L1Seeded+process.hltEgammaHollowTrackIsoL1Seeded+cms.ignore(process.hltEle5WPTightGsfTrackIsoL1SeededFilter))


process.HLTEle5OpenUnseededSequence = cms.Sequence(process.HLTL1Sequence+process.HLTDoFullUnpackingEgammaEcalSequence+process.HLTEGammaDoLocalHcalSequence+process.HLTPFClusteringForEgammaUnseededSequence+process.HLTHgcalTiclPFClusteringForEgammaUnseededSequence+process.HLTFastJetForEgammaSequence+process.HLTPFHcalClusteringForEgammaSequence+process.HLTElePixelMatchUnseededSequence+process.HLTTrackingV61Sequence+process.HLTGsfElectronUnseededSequence+process.hltEgammaCandidatesUnseeded+process.hltEgammaClusterShapeUnseeded+process.hltEgammaR9Unseeded+process.hltEgammaHGCALIDVarsUnseeded+process.hltEgammaHoverEUnseeded+process.hltEgammaEcalPFClusterIsoUnseeded+process.hltEgammaHGCalLayerClusterIsoUnseeded+process.hltEgammaHcalPFClusterIsoUnseeded+process.hltEgammaEleGsfTrackIsoUnseeded+process.hltEgammaEleGsfTrackIsoV6Unseeded+process.hltEgammaEleL1TrkIsoUnseeded+process.hltEgammaHollowTrackIsoUnseeded+process.hltEgammaCandidatesWrapperUnseeded+process.hltEG5EtUnseededFilter+process.hltEle5DphiUnseededFilter+cms.ignore(process.hltEle5WPTightClusterShapeUnseededFilter)+cms.ignore(process.hltEle5WPTightClusterShapeSigmavvUnseededFilter)+cms.ignore(process.hltEle5WPTightClusterShapeSigmawwUnseededFilter)+cms.ignore(process.hltEle5WPTightHgcalHEUnseededFilter)+cms.ignore(process.hltEle5WPTightHEUnseededFilter)+cms.ignore(process.hltEle5WPTightEcalIsoUnseededFilter)+cms.ignore(process.hltEle5WPTightHgcalIsoUnseededFilter)+cms.ignore(process.hltEle5WPTightHcalIsoUnseededFilter)+cms.ignore(process.hltEle5WPTightPixelMatchUnseededFilter)+cms.ignore(process.hltEle5WPTightPMS2UnseededFilter)+cms.ignore(process.hltEle5WPTightGsfOneOEMinusOneOPUnseededFilter)+cms.ignore(process.hltEle5WPTightGsfDetaUnseededFilter)+cms.ignore(process.hltEle5WPTightGsfDphiUnseededFilter)+cms.ignore(process.hltEle5WPTightBestGsfNLayerITUnseededFilter)+cms.ignore(process.hltEle5WPTightBestGsfChi2UnseededFilter)+cms.ignore(process.hltEle5WPTightGsfTrackIsoFromL1TracksUnseededFilter)+cms.ignore(process.hltEle5WPTightGsfTrackIsoUnseededFilter))


process.HLTIterTICLSequence = cms.Sequence(process.HLTTiclLayerTileSequence+process.HLTTiclTrackstersCLUE3DHighStepSequence+process.HLTTiclTracksterMergeSequence+process.HLTTiclPFSequence)


process.HLTL2MuonsFromL1TkSequence = cms.Sequence(process.HLTMuonlocalrecoSequence+process.hltL2OfflineMuonSeeds+process.hltL2MuonSeedsFromL1TkMuon+process.hltL2MuonsFromL1TkMuon)


process.HLTLocalrecoSequence = cms.Sequence(process.bunchSpacingProducer+process.HLTCalolocalrecoSequence)


process.HLTMuonsSequence = cms.Sequence(process.HLTL2MuonsFromL1TkSequence+process.HLTPhase2L3OISequence+process.HLTPhase2L3FromL1TkSequence+process.HLTIter0Phase2L3FromL1TkSequence+process.HLTIter2Phase2L3FromL1TkSequence+process.HLTPhase2L3MuonsSequence)


process.HLTPFClusterJMEReconstruction = cms.Sequence(process.HLTPfClusterRefsForJetsSequence+process.hltAK4PFClusterJets+process.hltAK8PFClusterJets+process.hltPFClusterMET)


process.HLTParticleFlowClusterSequence = cms.Sequence(process.hltParticleFlowBadHcalPseudoCluster+process.HLTPfClusteringECALSequence+process.HLTPfClusteringHBHEHFSequence+process.HLTPfClusteringHOSequence)


process.HLTParticleFlowSequence = cms.Sequence(process.HLTParticleFlowClusterSequence+process.HLTIterTICLSequence+process.HLTVertexRecoSequence+process.HLTParticleFlowSuperClusteringSequence+process.HLTCaloTowersRecSequence+process.HLTParticleFlowRecoSequence)


process.HLTJMESequence = cms.Sequence(process.HLTCaloMETReconstruction+process.HLTPFClusterJMEReconstruction+process.HLTAK4PFJetsReconstruction+process.HLTAK8PFJetsReconstruction+process.HLTPFJetsCHSReconstruction+process.HLTPFMETsReconstruction+process.HLTPFPuppiJMEReconstruction)


process.HLT_AK4PFPuppiJet520 = cms.Path(process.HLTBeginSequence+process.hltL1SeedsForPuppiJetFilter+process.HLTRawToDigiSequence+process.HLTHgcalLocalRecoSequence+process.HLTLocalrecoSequence+process.HLTTrackingV61Sequence+process.HLTMuonsSequence+process.HLTParticleFlowSequence+process.HLTAK4PFPuppiJetsReconstruction+process.hltSingleAK4PFPuppiJet520+process.HLTEndSequence)


process.HLT_Diphoton30_23_IsoCaloId_L1Seeded = cms.Path(process.HLTBeginSequence+process.HLTDiphoton3023IsoCaloIdL1SeededSequence+process.HLTEndSequence)


process.HLT_Diphoton30_23_IsoCaloId_Unseeded = cms.Path(process.HLTBeginSequence+process.HLTDiphoton3023IsoCaloIdUnseededSequence+process.HLTEndSequence)


process.HLT_DoubleEle23_12_Iso_L1Seeded = cms.Path(process.HLTBeginSequence+process.HLTDoubleEle2312IsoL1SeededSequence+process.HLTEndSequence)


process.HLT_DoubleEle25_CaloIdL_PMS2_L1Seeded = cms.Path(process.HLTBeginSequence+process.HLTDoubleEle25CaloIdLPMS2L1SeededSequence+process.HLTEndSequence)


process.HLT_DoubleEle25_CaloIdL_PMS2_Unseeded = cms.Path(process.HLTBeginSequence+process.HLTDoubleEle25CaloIdLPMS2UnseededSequence+process.HLTEndSequence)


process.HLT_DoubleMediumChargedIsoPFTauHPS40_eta2p1 = cms.Path(process.HLTBeginSequence+process.hltL1SeedForDoublePuppiTau+process.hltPreDoublePFTauHPS+process.HLTRawToDigiSequence+process.HLTHgcalLocalRecoSequence+process.HLTLocalrecoSequence+process.HLTTrackingV61Sequence+process.HLTMuonsSequence+process.HLTParticleFlowSequence+process.HLTAK4PFJetsReconstruction+process.hltAK4PFJetsForTaus+process.HLTPFTauHPS+process.HLTHPSMediumChargedIsoPFTauSequence+process.hltHpsSelectedPFTausTrackPt1MediumChargedIsolation+process.hltHpsDoublePFTau40TrackPt1MediumChargedIsolation+process.HLTEndSequence)


process.HLT_DoubleMediumDeepTauPFTauHPS35_eta2p1 = cms.Path(process.HLTBeginSequence+process.hltL1SeedForDoublePuppiTau+process.hltPreDoublePFTauHPS+process.HLTRawToDigiSequence+process.HLTHgcalLocalRecoSequence+process.HLTLocalrecoSequence+process.HLTTrackingV61Sequence+process.HLTMuonsSequence+process.HLTParticleFlowSequence+process.HLTAK4PFJetsReconstruction+process.hltAK4PFJetsForTaus+process.HLTPFTauHPS+process.HLTHPSDeepTauPFTauSequence+process.hltHpsSelectedPFTausMediumDitauWPDeepTau+process.hltHpsDoublePFTau35MediumDitauWPDeepTau+process.HLTEndSequence)


process.HLT_DoublePFPuppiJets128_DoublePFPuppiBTagDeepCSV_2p4 = cms.Path(process.HLTBeginSequence+process.hltL1SeedsForDoublePuppiJetBtagFilter+process.HLTRawToDigiSequence+process.HLTHgcalLocalRecoSequence+process.HLTLocalrecoSequence+process.HLTTrackingV61Sequence+process.HLTMuonsSequence+process.HLTParticleFlowSequence+process.HLTAK4PFPuppiJetsReconstruction+process.hltDoublePFPuppiJets128MaxEta2p4+process.hltDoublePFPuppiJets128Eta2p4MaxDeta1p6+process.HLTBtagDeepCSVSequencePFPuppiModEta2p4+process.hltBTagPFPuppiDeepCSV0p865DoubleEta2p4+process.HLTEndSequence)


process.HLT_DoublePFPuppiJets128_DoublePFPuppiBTagDeepFlavour_2p4 = cms.Path(process.HLTBeginSequence+process.hltL1SeedsForDoublePuppiJetBtagFilter+process.HLTRawToDigiSequence+process.HLTHgcalLocalRecoSequence+process.HLTLocalrecoSequence+process.HLTTrackingV61Sequence+process.HLTMuonsSequence+process.HLTParticleFlowSequence+process.HLTAK4PFPuppiJetsReconstruction+process.hltDoublePFPuppiJets128MaxEta2p4+process.hltDoublePFPuppiJets128Eta2p4MaxDeta1p6+process.HLTBtagDeepFlavourSequencePFPuppiModEta2p4+process.hltBTagPFPuppiDeepFlavour0p935DoubleEta2p4+process.HLTEndSequence)


process.HLT_Ele115_NonIso_L1Seeded = cms.Path(process.HLTBeginSequence+process.HLTEle115NonIsoL1SeededSequence+process.HLTEndSequence)


process.HLT_Ele26_WP70_L1Seeded = cms.Path(process.HLTBeginSequence+process.HLTEle26WP70L1SeededSequence+process.HLTEndSequence)


process.HLT_Ele26_WP70_Unseeded = cms.Path(process.HLTBeginSequence+process.HLTEle26WP70UnseededSequence+process.HLTEndSequence)


process.HLT_Ele32_WPTight_L1Seeded = cms.Path(process.HLTBeginSequence+process.HLTEle32WPTightL1SeededSequence+process.HLTEndSequence)


process.HLT_Ele32_WPTight_Unseeded = cms.Path(process.HLTBeginSequence+process.HLTEle32WPTightUnseededSequence+process.HLTEndSequence)


process.HLT_IsoMu24_FromL1TkMuon = cms.Path(process.HLTBeginSequence+process.hltSingleTkMuon22L1TkMuonFilter+process.HLTRawToDigiSequence+process.HLTItLocalRecoSequence+process.HLTOtLocalRecoSequence+process.HLTL2MuonsFromL1TkSequence+process.HLTPhase2L3OISequence+process.hltPhase2PixelFitterByHelixProjections+process.hltPhase2PixelTrackFilterByKinematics+process.HLTPhase2L3FromL1TkSequence+process.HLTIter0Phase2L3FromL1TkSequence+process.HLTIter2Phase2L3FromL1TkSequence+process.HLTPhase2L3MuonsSequence+process.hltL3fL1TkSingleMu22L3Filtered24Q+process.HLTHgcalLocalRecoSequence+process.HLTDoLocalHcalSequence+process.HLTDoFullUnpackingEgammaEcalSequence+process.HLTFastJetForEgammaSequence+process.HLTPfClusteringHBHEHFSequence+process.HLTPFClusteringForEgammaUnseededSequence+process.hltPhase2L3MuonsEcalIsodR0p3dRVeto0p000+process.hltPhase2L3MuonsHcalIsodR0p3dRVeto0p000+process.hltPhase2L3MuonsHgcalLCIsodR0p2dRVetoEM0p00dRVetoHad0p02minEEM0p00minEHad0p00+process.hltL3crIsoL1TkSingleMu22L3f24QL3pfecalIsoFiltered0p41+process.hltL3crIsoL1TkSingleMu22L3f24QL3pfhcalIsoFiltered0p40+process.hltL3crIsoL1TkSingleMu22L3f24QL3pfhgcalIsoFiltered4p70+process.HLTPhase2L3MuonGeneralTracksSequence+process.hltPhase2L3MuonsTrkIsoRegionalNewdR0p3dRVeto0p005dz0p25dr0p20ChisqInfPtMin0p0Cut0p07+process.hltL3crIsoL1TkSingleMu22L3f24QL3trkIsoRegionalNewFiltered0p07EcalHcalHgcalTrk+process.HLTEndSequence)


process.HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_FromL1TkMuon = cms.Path(process.HLTBeginSequence+process.hltDoubleTkMuon157L1TkMuonFilter+process.hltDoubleMuon7DZ1p0+process.HLTRawToDigiSequence+process.HLTItLocalRecoSequence+process.HLTOtLocalRecoSequence+process.HLTL2MuonsFromL1TkSequence+process.HLTPhase2L3OISequence+process.hltPhase2PixelFitterByHelixProjections+process.hltPhase2PixelTrackFilterByKinematics+process.HLTPhase2L3FromL1TkSequence+process.HLTIter0Phase2L3FromL1TkSequence+process.HLTIter2Phase2L3FromL1TkSequence+process.HLTPhase2L3MuonsSequence+process.hltL3fL1DoubleMu155fPreFiltered8+process.hltL3fL1DoubleMu155fFiltered17+process.HLTPhase2L3MuonGeneralTracksSequence+process.hltPhase2L3MuonsTrkIsoRegionalNewdR0p3dRVeto0p005dz0p25dr0p20ChisqInfPtMin0p0Cut0p4+process.hltDiMuon178RelTrkIsoFiltered0p4+process.hltDiMuon178RelTrkIsoFiltered0p4DzFiltered0p2+process.HLTEndSequence)


process.HLT_Mu37_Mu27_FromL1TkMuon = cms.Path(process.HLTBeginSequence+process.hltDoubleMuon7DZ1p0+process.HLTMuonlocalrecoSequence+process.HLTItLocalRecoSequence+process.HLTOtLocalRecoSequence+process.hltPhase2PixelFitterByHelixProjections+process.hltPhase2PixelTrackFilterByKinematics+process.HLTMuonsSequence+process.hltPhase2L3MuonCandidates+process.hltL3fL1DoubleMu155fPreFiltered27+process.hltL3fL1DoubleMu155fFiltered37+process.HLTEndSequence)


process.HLT_Mu50_FromL1TkMuon = cms.Path(process.HLTBeginSequence+process.hltSingleTkMuon22L1TkMuonFilter+process.HLTMuonlocalrecoSequence+process.HLTItLocalRecoSequence+process.HLTOtLocalRecoSequence+process.hltPhase2PixelFitterByHelixProjections+process.hltPhase2PixelTrackFilterByKinematics+process.HLTMuonsSequence+process.hltPhase2L3MuonCandidates+process.hltL3fL1TkSingleMu22L3Filtered50Q+process.HLTEndSequence)


process.HLT_PFHT200PT30_QuadPFPuppiJet_70_40_30_30_TriplePFPuppiBTagDeepCSV_2p4 = cms.Path(process.HLTBeginSequence+process.hltL1SeedsForQuadPuppiJetTripleBtagFilter+process.HLTRawToDigiSequence+process.HLTHgcalLocalRecoSequence+process.HLTLocalrecoSequence+process.HLTTrackingV61Sequence+process.HLTMuonsSequence+process.HLTParticleFlowSequence+process.HLTAK4PFPuppiJetsReconstruction+process.hltPFPuppiCentralJetQuad30MaxEta2p4+process.hlt1PFPuppiCentralJet70MaxEta2p4+process.hlt2PFPuppiCentralJet40MaxEta2p4+process.hltHtMhtPFPuppiCentralJetsQuadC30MaxEta2p4+process.hltPFPuppiCentralJetsQuad30HT200MaxEta2p4+process.HLTBtagDeepCSVSequencePFPuppiModEta2p4+process.hltBTagPFPuppiDeepCSV0p38Eta2p4TripleEta2p4+process.HLTEndSequence)


process.HLT_PFHT200PT30_QuadPFPuppiJet_70_40_30_30_TriplePFPuppiBTagDeepFlavour_2p4 = cms.Path(process.HLTBeginSequence+process.hltL1SeedsForQuadPuppiJetTripleBtagFilter+process.HLTRawToDigiSequence+process.HLTHgcalLocalRecoSequence+process.HLTLocalrecoSequence+process.HLTTrackingV61Sequence+process.HLTMuonsSequence+process.HLTParticleFlowSequence+process.HLTAK4PFPuppiJetsReconstruction+process.hltPFPuppiCentralJetQuad30MaxEta2p4+process.hlt1PFPuppiCentralJet70MaxEta2p4+process.hlt2PFPuppiCentralJet40MaxEta2p4+process.hltHtMhtPFPuppiCentralJetsQuadC30MaxEta2p4+process.hltPFPuppiCentralJetsQuad30HT200MaxEta2p4+process.HLTBtagDeepFlavourSequencePFPuppiModEta2p4+process.hltBTagPFPuppiDeepFlavour0p375Eta2p4TripleEta2p4+process.HLTEndSequence)


process.HLT_PFHT330PT30_QuadPFPuppiJet_75_60_45_40_TriplePFPuppiBTagDeepCSV_2p4 = cms.Path(process.HLTBeginSequence+process.hltL1SeedsForQuadPuppiJetTripleBtagFilter+process.HLTRawToDigiSequence+process.HLTHgcalLocalRecoSequence+process.HLTLocalrecoSequence+process.HLTTrackingV61Sequence+process.HLTMuonsSequence+process.HLTParticleFlowSequence+process.HLTAK4PFPuppiJetsReconstruction+process.hltPFPuppiCentralJetQuad30MaxEta2p4+process.hlt1PFPuppiCentralJet75MaxEta2p4+process.hlt2PFPuppiCentralJet60MaxEta2p4+process.hlt3PFPuppiCentralJet45MaxEta2p4+process.hlt4PFPuppiCentralJet40MaxEta2p4+process.hltHtMhtPFPuppiCentralJetsQuadC30MaxEta2p4+process.hltPFPuppiCentralJetsQuad30HT330MaxEta2p4+process.HLTBtagDeepCSVSequencePFPuppiModEta2p4+process.hltBTagPFPuppiDeepCSV0p31Eta2p4TripleEta2p4+process.HLTEndSequence)


process.HLT_PFHT330PT30_QuadPFPuppiJet_75_60_45_40_TriplePFPuppiBTagDeepFlavour_2p4 = cms.Path(process.HLTBeginSequence+process.hltL1SeedsForQuadPuppiJetTripleBtagFilter+process.HLTRawToDigiSequence+process.HLTHgcalLocalRecoSequence+process.HLTLocalrecoSequence+process.HLTTrackingV61Sequence+process.HLTMuonsSequence+process.HLTParticleFlowSequence+process.HLTAK4PFPuppiJetsReconstruction+process.hltPFPuppiCentralJetQuad30MaxEta2p4+process.hlt1PFPuppiCentralJet75MaxEta2p4+process.hlt2PFPuppiCentralJet60MaxEta2p4+process.hlt3PFPuppiCentralJet45MaxEta2p4+process.hlt4PFPuppiCentralJet40MaxEta2p4+process.hltHtMhtPFPuppiCentralJetsQuadC30MaxEta2p4+process.hltPFPuppiCentralJetsQuad30HT330MaxEta2p4+process.HLTBtagDeepFlavourSequencePFPuppiModEta2p4+process.hltBTagPFPuppiDeepFlavour0p275Eta2p4TripleEta2p4+process.HLTEndSequence)


process.HLT_PFPuppiHT1070 = cms.Path(process.HLTBeginSequence+process.hltL1SeedsForPuppiHTFilter+process.HLTRawToDigiSequence+process.HLTHgcalLocalRecoSequence+process.HLTLocalrecoSequence+process.HLTTrackingV61Sequence+process.HLTMuonsSequence+process.HLTParticleFlowSequence+process.HLTAK4PFPuppiJetsReconstruction+process.hltPFPuppiHT+process.hltPFPuppiHT1070+process.HLTEndSequence)


process.HLT_PFPuppiMETTypeOne140_PFPuppiMHT140 = cms.Path(process.HLTBeginSequence+process.hltL1SeedsForPuppiMETFilter+process.HLTRawToDigiSequence+process.HLTHgcalLocalRecoSequence+process.HLTLocalrecoSequence+process.HLTTrackingV61Sequence+process.HLTMuonsSequence+process.HLTParticleFlowSequence+process.HLTAK4PFPuppiJetsReconstruction+process.HLTPFPuppiMETReconstruction+process.hltPFPuppiMETTypeOneCorrector+process.hltPFPuppiMETTypeOne+process.hltPFPuppiMETTypeOne140+process.hltPFPuppiMHT+process.hltPFPuppiMHT140+process.HLTEndSequence)


process.HLT_Photon108EB_TightID_TightIso_L1Seeded = cms.Path(process.HLTBeginSequence+process.HLTPhoton108EBTightIDTightIsoL1SeededSequence+process.HLTEndSequence)


process.HLT_Photon108EB_TightID_TightIso_Unseeded = cms.Path(process.HLTBeginSequence+process.HLTPhoton108EBTightIDTightIsoUnseededSequence+process.HLTEndSequence)


process.HLT_Photon187_L1Seeded = cms.Path(process.HLTBeginSequence+process.HLTPhoton187L1SeededSequence+process.HLTEndSequence)


process.HLT_Photon187_Unseeded = cms.Path(process.HLTBeginSequence+process.HLTPhoton187UnseededSequence+process.HLTEndSequence)


process.HLT_TriMu_10_5_5_DZ_FromL1TkMuon = cms.Path(process.HLTBeginSequence+process.hltTripleMuon3DZ1p0+process.hltTripleMuon3DR0+process.HLTRawToDigiSequence+process.HLTItLocalRecoSequence+process.HLTOtLocalRecoSequence+process.HLTL2MuonsFromL1TkSequence+process.HLTPhase2L3MuonsSequence+process.hltL3fL1TkTripleMu533PreFiltered555+process.hltL3fL1TkTripleMu533L3Filtered1055+process.HLTPhase2L3FromL1TkSequence+process.hltPhase2PixelFitterByHelixProjections+process.hltPhase2PixelTrackFilterByKinematics+process.HLTIter0Phase2L3FromL1TkSequence+process.HLTIter2Phase2L3FromL1TkSequence+process.HLTPhase2L3OISequence+process.hltL3fL1TkTripleMu533L31055DZFiltered0p2+process.HLTEndSequence)


process.HLTriggerFinalPath = cms.Path(process.hltTriggerSummaryAOD+process.hltTriggerSummaryRAW+process.hltBoolFalse)


process.L1T_DoublePFPuppiJets112_2p4_DEta1p6 = cms.Path(process.HLTBeginSequence+process.l1tDoublePFPuppiJet112offMaxEta2p4+process.l1tDoublePFPuppiJets112offMaxDeta1p6+process.HLTEndSequence)


process.L1T_DoubleTkMuon_15_7 = cms.Path(process.HLTBeginSequence+process.hltL1TkDoubleMuFiltered7+process.hltL1TkSingleMuFiltered15+process.hltDoubleMuon7DZ1p0+process.HLTEndSequence)


process.L1T_PFHT400PT30_QuadPFPuppiJet_70_55_40_40_2p4 = cms.Path(process.HLTBeginSequence+process.l1tPFPuppiHT400offMaxEta2p4+process.l1t1PFPuppiJet70offMaxEta2p4+process.l1t2PFPuppiJet55offMaxEta2p4+process.l1t4PFPuppiJet40offMaxEta2p4+process.l1t4PFPuppiJet25OnlineMaxEta2p4+process.HLTEndSequence)


process.L1T_PFPuppiHT450off = cms.Path(process.HLTBeginSequence+process.l1tPFPuppiHT450off+process.HLTEndSequence)


process.L1T_PFPuppiMET220off = cms.Path(process.HLTBeginSequence+process.l1tPFPuppiMET220off+process.HLTEndSequence)


process.L1T_SinglePFPuppiJet230off = cms.Path(process.HLTBeginSequence+process.l1tSinglePFPuppiJet230off+process.HLTEndSequence)


process.L1T_SingleTkMuon_22 = cms.Path(process.HLTBeginSequence+process.hltL1TkSingleMuFiltered22+process.HLTEndSequence)


process.L1T_TkEle25TkEle12 = cms.Path(process.HLTBeginSequence+process.L1TTkEle25TkEle12Sequence+process.HLTEndSequence)


process.L1T_TkEle36 = cms.Path(process.HLTBeginSequence+process.L1TTkEle36Sequence+process.HLTEndSequence)


process.L1T_TkEm37TkEm24 = cms.Path(process.HLTBeginSequence+process.L1TTkEm37TkEm24Sequence+process.HLTEndSequence)


process.L1T_TkEm51 = cms.Path(process.HLTBeginSequence+process.L1TTkEm51Sequence+process.HLTEndSequence)


process.L1T_TkIsoEle22TkEm12 = cms.Path(process.HLTBeginSequence+process.L1TTkIsoEle22TkEm12Sequence+process.HLTEndSequence)


process.L1T_TkIsoEle28 = cms.Path(process.HLTBeginSequence+process.L1TTkIsoEle28Sequence+process.HLTEndSequence)


process.L1T_TkIsoEm22TkIsoEm12 = cms.Path(process.HLTBeginSequence+process.L1TTkIsoEm22TkIsoEm12Sequence+process.HLTEndSequence)


process.L1T_TkIsoEm36 = cms.Path(process.HLTBeginSequence+process.L1TTkIsoEm36Sequence+process.HLTEndSequence)


process.L1T_TripleTkMuon_5_3_3 = cms.Path(process.HLTBeginSequence+process.hltL1TripleMuFiltered3+process.hltL1SingleMuFiltered5+process.hltTripleMuon3DZ1p0+process.hltTripleMuon3DR0+process.HLTEndSequence)


process.MC_BTV = cms.Path(process.HLTBeginSequence+process.HLTRawToDigiSequence+process.HLTHgcalLocalRecoSequence+process.HLTLocalrecoSequence+process.HLTTrackingV61Sequence+process.HLTMuonsSequence+process.HLTParticleFlowSequence+process.HLTAK4PFPuppiJetsReconstruction+process.HLTBtagDeepCSVSequencePFPuppi+process.HLTBtagDeepFlavourSequencePFPuppi)


process.MC_Ele5_Open_L1Seeded = cms.Path(process.HLTBeginSequence+process.hltPreEle5OpenL1Seeded+process.HLTEle5OpenL1SeededSequence+process.HLTEndSequence)


process.MC_Ele5_Open_Unseeded = cms.Path(process.HLTBeginSequence+process.hltPreEle5OpenUnseeded+process.HLTEle5OpenUnseededSequence+process.HLTEndSequence)


process.MC_JME = cms.Path(process.HLTBeginSequence+process.HLTRawToDigiSequence+process.HLTHgcalLocalRecoSequence+process.HLTLocalrecoSequence+process.HLTTrackingV61Sequence+process.HLTMuonsSequence+process.HLTParticleFlowSequence+process.HLTHgcalTiclPFClusteringForEgamma+process.HLTJMESequence+process.hltPFPuppiHT+process.hltPFPuppiMHT)


process.L1simulation_step = cms.Path(process.SimL1Emulator)


process.L1TrackTrigger_step = cms.Path(process.L1TrackTrigger)


process.Phase2L1GTProducer = cms.Path(process.l1tGTProducerSequence)


process.Phase2L1GTAlgoBlockProducer = cms.Path(process.l1tGTAlgoBlockProducerSequence)


process.TripleTkMuon_5_3_0_DoubleTkMuon_5_3_OS_MassTo9 = cms.Path(process.TripleTkMuon530OSMassMax9)


process.TripleTkMuon_5_3p5_2p5_OS_Mass5to17 = cms.Path(process.TripleTkMuon53p52p5OSMass5to17)


process.pDoubleEGEle37_24 = cms.Path(process.DoubleEGEle3724)


process.pDoubleIsoTkPho22_12 = cms.Path(process.DoubleIsoTkPho2212)


process.pDoublePuppiJet112_112 = cms.Path(process.DoublePuppiJet112112)


process.pDoublePuppiJet160_35_mass620 = cms.Path(process.DoublePuppiJet16035Mass620)


process.pDoublePuppiTau52_52 = cms.Path(process.DoublePuppiTau5252)


process.pDoubleTkEle25_12 = cms.Path(process.DoubleTkEle2512)


process.pDoubleTkElePuppiHT_8_8_390 = cms.Path(process.DoubleTkElePuppiHT)


process.pDoubleTkMuPuppiHT_3_3_300 = cms.Path(process.DoubleTkMuPuppiHT)


process.pDoubleTkMuPuppiJetPuppiMet_3_3_60_130 = cms.Path(process.DoubleTkMuPuppiJetPuppiMet)


process.pDoubleTkMuon15_7 = cms.Path(process.DoubleTkMuon157)


process.pDoubleTkMuonTkEle5_5_9 = cms.Path(process.DoubleTkMuonTkEle559)


process.pDoubleTkMuon_4_4_OS_Dr1p2 = cms.Path(process.DoubleTkMuon44OSDr1p2)


process.pDoubleTkMuon_4p5_4p5_OS_Er2_Mass7to18 = cms.Path(process.DoubleTkMuon4p5OSEr2Mass7to18)


process.pDoubleTkMuon_OS_Er1p5_Dr1p4 = cms.Path(process.DoubleTkMuonOSEr1p5Dr1p4)


process.pIsoTkEleEGEle22_12 = cms.Path(process.IsoTkEleEGEle2212)


process.pNNPuppiTauPuppiMet_55_190 = cms.Path(process.NNPuppiTauPuppiMet)


process.pPuppiHT400 = cms.Path(process.PuppiHT400)


process.pPuppiHT450 = cms.Path(process.PuppiHT450)


process.pPuppiMET200 = cms.Path(process.PuppiMET200)


process.pPuppiMHT140 = cms.Path(process.PuppiMHT140)


process.pPuppiTauTkIsoEle45_22 = cms.Path(process.PuppiTauTkIsoEle4522)


process.pPuppiTauTkMuon42_18 = cms.Path(process.PuppiTauTkMuon4218)


process.pQuadJet70_55_40_40 = cms.Path(process.QuadJet70554040)


process.pSingleEGEle51 = cms.Path(process.SingleEGEle51)


process.pSingleIsoTkEle28 = cms.Path(process.SingleIsoTkEle28)


process.pSingleIsoTkPho36 = cms.Path(process.SingleIsoTkPho36)


process.pSinglePuppiJet230 = cms.Path(process.SinglePuppiJet230)


process.pSingleTkEle36 = cms.Path(process.SingleTkEle36)


process.pSingleTkMuon22 = cms.Path(process.SingleTkMuon22)


process.pTkEleIsoPuppiHT_26_190 = cms.Path(process.TkEleIsoPuppiHT)


process.pTkElePuppiJet_28_40_MinDR = cms.Path(process.TkElePuppiJetMinDR)


process.pTkEleTkMuon10_20 = cms.Path(process.TkEleTkMuon1020)


process.pTkMuPuppiJetPuppiMet_3_110_120 = cms.Path(process.TkMuPuppiJetPuppiMet)


process.pTkMuTriPuppiJet_12_40_dRMax_DoubleJet_dEtaMax = cms.Path(process.TkMuTriPuppiJetdRMaxDoubleJetdEtaMax)


process.pTkMuonDoubleTkEle6_17_17 = cms.Path(process.TkMuonDoubleTkEle61717)


process.pTkMuonPuppiHT6_320 = cms.Path(process.TkMuonPuppiHT6320)


process.pTkMuonTkEle7_23 = cms.Path(process.TkMuonTkEle723)


process.pTkMuonTkIsoEle7_20 = cms.Path(process.TkMuonTkIsoEle720)


process.pTripleTkMuon5_3_3 = cms.Path(process.TripleTkMuon533)


process.L1T_DoubleNNTau52 = cms.Path(process.HLTL1Sequence+process.hltL1DoubleNNTau52)


process.L1T_SingleNNTau150 = cms.Path(process.HLTL1Sequence+process.hltL1SingleNNTau150)


process.mypath = cms.Path(process.hltTPClusterProducer+process.hltTrackAssociatorByHits+process.trackAssoSeq)


process.myseedpath = cms.Path(process.hltTPClusterProducer+process.hltTrackAssociatorByHits+process.seedNtupler)


process.HLTAnalyzerEndpath = cms.EndPath(process.hltPreHLTAnalyzerEndpath+process.hltTrigReport)


process.endjob_step = cms.EndPath(process.endOfProcess)


process.myendpath = cms.EndPath(process.ntupler)


process.simAPVsaturation = cms.EDAlias(
)

process.simCastorDigis = cms.EDAlias(
)

process.simEcalUnsuppressedDigis = cms.EDAlias(
    mix = cms.VPSet(
        cms.PSet(
            type = cms.string('EBDigiCollection')
        ),
        cms.PSet(
            type = cms.string('EEDigiCollection')
        ),
        cms.PSet(
            type = cms.string('ESDigiCollection')
        )
    )
)

process.simHFNoseUnsuppressedDigis = cms.EDAlias(
)

process.simHGCalUnsuppressedDigis = cms.EDAlias(
    mix = cms.VPSet(
        cms.PSet(
            fromProductInstance = cms.string('HGCDigisEE'),
            toProductInstance = cms.string('EE'),
            type = cms.string('DetIdHGCSampleHGCDataFramesSorted')
        ),
        cms.PSet(
            fromProductInstance = cms.string('HGCDigisHEfront'),
            toProductInstance = cms.string('HEfront'),
            type = cms.string('DetIdHGCSampleHGCDataFramesSorted')
        ),
        cms.PSet(
            fromProductInstance = cms.string('HGCDigisHEback'),
            toProductInstance = cms.string('HEback'),
            type = cms.string('DetIdHGCSampleHGCDataFramesSorted')
        )
    )
)

process.simHcalUnsuppressedDigis = cms.EDAlias(
    mix = cms.VPSet(
        cms.PSet(
            type = cms.string('HBHEDataFramesSorted')
        ),
        cms.PSet(
            type = cms.string('HFDataFramesSorted')
        ),
        cms.PSet(
            type = cms.string('HODataFramesSorted')
        ),
        cms.PSet(
            type = cms.string('ZDCDataFramesSorted')
        ),
        cms.PSet(
            type = cms.string('QIE10DataFrameHcalDataFrameContainer')
        ),
        cms.PSet(
            type = cms.string('QIE11DataFrameHcalDataFrameContainer')
        )
    )
)

process.simSiPixelDigis = cms.EDAlias(
    mix = cms.VPSet(
        cms.PSet(
            type = cms.string('PixelDigiedmDetSetVector')
        ),
        cms.PSet(
            type = cms.string('PixelDigiSimLinkedmDetSetVector')
        )
    )
)

process.simSiStripDigis = cms.EDAlias(
)

process.schedule = cms.Schedule(*[ process.L1simulation_step, process.L1TrackTrigger_step, process.Phase2L1GTProducer, process.Phase2L1GTAlgoBlockProducer, process.TripleTkMuon_5_3_0_DoubleTkMuon_5_3_OS_MassTo9, process.TripleTkMuon_5_3p5_2p5_OS_Mass5to17, process.pDoubleEGEle37_24, process.pDoubleIsoTkPho22_12, process.pDoublePuppiJet112_112, process.pDoublePuppiJet160_35_mass620, process.pDoublePuppiTau52_52, process.pDoubleTkEle25_12, process.pDoubleTkElePuppiHT_8_8_390, process.pDoubleTkMuPuppiHT_3_3_300, process.pDoubleTkMuPuppiJetPuppiMet_3_3_60_130, process.pDoubleTkMuon15_7, process.pDoubleTkMuonTkEle5_5_9, process.pDoubleTkMuon_4_4_OS_Dr1p2, process.pDoubleTkMuon_4p5_4p5_OS_Er2_Mass7to18, process.pDoubleTkMuon_OS_Er1p5_Dr1p4, process.pIsoTkEleEGEle22_12, process.pNNPuppiTauPuppiMet_55_190, process.pPuppiHT400, process.pPuppiHT450, process.pPuppiMET200, process.pPuppiMHT140, process.pPuppiTauTkIsoEle45_22, process.pPuppiTauTkMuon42_18, process.pQuadJet70_55_40_40, process.pSingleEGEle51, process.pSingleIsoTkEle28, process.pSingleIsoTkPho36, process.pSinglePuppiJet230, process.pSingleTkEle36, process.pSingleTkMuon22, process.pTkEleIsoPuppiHT_26_190, process.pTkElePuppiJet_28_40_MinDR, process.pTkEleTkMuon10_20, process.pTkMuPuppiJetPuppiMet_3_110_120, process.pTkMuTriPuppiJet_12_40_dRMax_DoubleJet_dEtaMax, process.pTkMuonDoubleTkEle6_17_17, process.pTkMuonPuppiHT6_320, process.pTkMuonTkEle7_23, process.pTkMuonTkIsoEle7_20, process.pTripleTkMuon5_3_3, process.L1T_SingleTkMuon_22, process.L1T_DoubleTkMuon_15_7, process.L1T_TripleTkMuon_5_3_3, process.HLT_Mu50_FromL1TkMuon, process.HLT_IsoMu24_FromL1TkMuon, process.HLT_Mu37_Mu27_FromL1TkMuon, process.HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_FromL1TkMuon, process.HLT_TriMu_10_5_5_DZ_FromL1TkMuon, process.HLTriggerFinalPath, process.mypath, process.myendpath, process.myseedpath ])

